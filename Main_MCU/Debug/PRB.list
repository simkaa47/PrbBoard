
PRB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e0a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003c30  0801e230  0801e230  0002e230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021e60  08021e60  0004035c  2**0
                  CONTENTS
  4 .ARM          00000008  08021e60  08021e60  00031e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021e68  08021e68  0004035c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021e68  08021e68  00031e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021e6c  08021e6c  00031e6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000035c  20000000  08021e70  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0004035c  2**0
                  CONTENTS
 10 .bss          0000dbcc  2000035c  2000035c  0004035c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000df28  2000df28  0004035c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0004035c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003ca0d  00000000  00000000  0004038c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009a1f  00000000  00000000  0007cd99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000029a0  00000000  00000000  000867b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002750  00000000  00000000  00089158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00037cba  00000000  00000000  0008b8a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00044ec8  00000000  00000000  000c3562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00102f4d  00000000  00000000  0010842a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0020b377  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000b220  00000000  00000000  0020b3c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000035c 	.word	0x2000035c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801e218 	.word	0x0801e218

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000360 	.word	0x20000360
 80001cc:	0801e218 	.word	0x0801e218

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <Analog_Start>:
extern Meas_Data meas_data;

static void Calc_Pt100();

void Analog_Start(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&pt100_input_buffer, sizeof(pt100_input_buffer)/2);
 8000588:	2206      	movs	r2, #6
 800058a:	4904      	ldr	r1, [pc, #16]	; (800059c <Analog_Start+0x18>)
 800058c:	4804      	ldr	r0, [pc, #16]	; (80005a0 <Analog_Start+0x1c>)
 800058e:	f005 faa5 	bl	8005adc <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim3);
 8000592:	4804      	ldr	r0, [pc, #16]	; (80005a4 <Analog_Start+0x20>)
 8000594:	f009 fb1c 	bl	8009bd0 <HAL_TIM_Base_Start>

}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	20000378 	.word	0x20000378
 80005a0:	200008d0 	.word	0x200008d0
 80005a4:	200009d0 	.word	0x200009d0

080005a8 <Analog_Read>:

void Analog_Read(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
	Calc_Pt100();
 80005ac:	f000 f802 	bl	80005b4 <Calc_Pt100>
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <Calc_Pt100>:

static void Calc_Pt100()
{
 80005b4:	b480      	push	{r7}
 80005b6:	b083      	sub	sp, #12
 80005b8:	af00      	add	r7, sp, #0
	float sum = 0;
 80005ba:	f04f 0300 	mov.w	r3, #0
 80005be:	607b      	str	r3, [r7, #4]
	if(pt100_data_ready)
 80005c0:	4b15      	ldr	r3, [pc, #84]	; (8000618 <Calc_Pt100+0x64>)
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d020      	beq.n	800060a <Calc_Pt100+0x56>
	{
		for (int i = 0; i < PT100_INPUT_BUFFER_SIZE; ++i) {
 80005c8:	2300      	movs	r3, #0
 80005ca:	603b      	str	r3, [r7, #0]
 80005cc:	e00e      	b.n	80005ec <Calc_Pt100+0x38>
			sum+=pt100_buf[i];
 80005ce:	4a13      	ldr	r2, [pc, #76]	; (800061c <Calc_Pt100+0x68>)
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	009b      	lsls	r3, r3, #2
 80005d4:	4413      	add	r3, r2
 80005d6:	edd3 7a00 	vldr	s15, [r3]
 80005da:	ed97 7a01 	vldr	s14, [r7, #4]
 80005de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005e2:	edc7 7a01 	vstr	s15, [r7, #4]
		for (int i = 0; i < PT100_INPUT_BUFFER_SIZE; ++i) {
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	3301      	adds	r3, #1
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	2b27      	cmp	r3, #39	; 0x27
 80005f0:	dded      	ble.n	80005ce <Calc_Pt100+0x1a>
		}
		meas_data.pt100 = sum/PT100_INPUT_BUFFER_SIZE;
 80005f2:	ed97 7a01 	vldr	s14, [r7, #4]
 80005f6:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8000620 <Calc_Pt100+0x6c>
 80005fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80005fe:	4b09      	ldr	r3, [pc, #36]	; (8000624 <Calc_Pt100+0x70>)
 8000600:	edc3 7a02 	vstr	s15, [r3, #8]
		pt100_data_ready = 0;
 8000604:	4b04      	ldr	r3, [pc, #16]	; (8000618 <Calc_Pt100+0x64>)
 8000606:	2200      	movs	r2, #0
 8000608:	701a      	strb	r2, [r3, #0]
	}
}
 800060a:	bf00      	nop
 800060c:	370c      	adds	r7, #12
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr
 8000616:	bf00      	nop
 8000618:	20000424 	.word	0x20000424
 800061c:	20000384 	.word	0x20000384
 8000620:	42200000 	.word	0x42200000
 8000624:	20000c8c 	.word	0x20000c8c

08000628 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000628:	b480      	push	{r7}
 800062a:	b08b      	sub	sp, #44	; 0x2c
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	float pt100_0, pt100_1, pt100_3, vRef;
	vRef = pt100_input_buffer.V_ref;
 8000630:	4b45      	ldr	r3, [pc, #276]	; (8000748 <HAL_ADC_ConvCpltCallback+0x120>)
 8000632:	895b      	ldrh	r3, [r3, #10]
 8000634:	ee07 3a90 	vmov	s15, r3
 8000638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800063c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	vRef = 3.3f*(float)V_REF_VALUE/vRef;
 8000640:	4b42      	ldr	r3, [pc, #264]	; (800074c <HAL_ADC_ConvCpltCallback+0x124>)
 8000642:	881b      	ldrh	r3, [r3, #0]
 8000644:	ee07 3a90 	vmov	s15, r3
 8000648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800064c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8000750 <HAL_ADC_ConvCpltCallback+0x128>
 8000650:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000654:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000658:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800065c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	pt100_0 = pt100_input_buffer.Pt100_0 * 3.3f/vRef;
 8000660:	4b39      	ldr	r3, [pc, #228]	; (8000748 <HAL_ADC_ConvCpltCallback+0x120>)
 8000662:	881b      	ldrh	r3, [r3, #0]
 8000664:	ee07 3a90 	vmov	s15, r3
 8000668:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800066c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8000750 <HAL_ADC_ConvCpltCallback+0x128>
 8000670:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000674:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800067c:	edc7 7a08 	vstr	s15, [r7, #32]
	pt100_1 = pt100_input_buffer.Pt100_1 * 3.3f/vRef;
 8000680:	4b31      	ldr	r3, [pc, #196]	; (8000748 <HAL_ADC_ConvCpltCallback+0x120>)
 8000682:	885b      	ldrh	r3, [r3, #2]
 8000684:	ee07 3a90 	vmov	s15, r3
 8000688:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800068c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8000750 <HAL_ADC_ConvCpltCallback+0x128>
 8000690:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000694:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8000698:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800069c:	edc7 7a07 	vstr	s15, [r7, #28]
	pt100_3 = pt100_input_buffer.Pt100_3 * 3.3f/vRef;
 80006a0:	4b29      	ldr	r3, [pc, #164]	; (8000748 <HAL_ADC_ConvCpltCallback+0x120>)
 80006a2:	88db      	ldrh	r3, [r3, #6]
 80006a4:	ee07 3a90 	vmov	s15, r3
 80006a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006ac:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8000750 <HAL_ADC_ConvCpltCallback+0x128>
 80006b0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80006b4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80006b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006bc:	edc7 7a06 	vstr	s15, [r7, #24]
	float vpt100 = pt100_3 - pt100_1;
 80006c0:	ed97 7a06 	vldr	s14, [r7, #24]
 80006c4:	edd7 7a07 	vldr	s15, [r7, #28]
 80006c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006cc:	edc7 7a05 	vstr	s15, [r7, #20]
	float ref = pt100_1-pt100_0;
 80006d0:	ed97 7a07 	vldr	s14, [r7, #28]
 80006d4:	edd7 7a08 	vldr	s15, [r7, #32]
 80006d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80006dc:	edc7 7a04 	vstr	s15, [r7, #16]
	float v_result = vpt100*100/ref;
 80006e0:	edd7 7a05 	vldr	s15, [r7, #20]
 80006e4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8000754 <HAL_ADC_ConvCpltCallback+0x12c>
 80006e8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80006ec:	ed97 7a04 	vldr	s14, [r7, #16]
 80006f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80006f4:	edc7 7a03 	vstr	s15, [r7, #12]
	pt100_buf[j] = (v_result - 100)*2.5974f;
 80006f8:	edd7 7a03 	vldr	s15, [r7, #12]
 80006fc:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000754 <HAL_ADC_ConvCpltCallback+0x12c>
 8000700:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000704:	4b14      	ldr	r3, [pc, #80]	; (8000758 <HAL_ADC_ConvCpltCallback+0x130>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800075c <HAL_ADC_ConvCpltCallback+0x134>
 800070c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000710:	4a13      	ldr	r2, [pc, #76]	; (8000760 <HAL_ADC_ConvCpltCallback+0x138>)
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	4413      	add	r3, r2
 8000716:	edc3 7a00 	vstr	s15, [r3]
	j++;
 800071a:	4b0f      	ldr	r3, [pc, #60]	; (8000758 <HAL_ADC_ConvCpltCallback+0x130>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	3301      	adds	r3, #1
 8000720:	b2da      	uxtb	r2, r3
 8000722:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <HAL_ADC_ConvCpltCallback+0x130>)
 8000724:	701a      	strb	r2, [r3, #0]
	if(j>=PT100_INPUT_BUFFER_SIZE)j=0;
 8000726:	4b0c      	ldr	r3, [pc, #48]	; (8000758 <HAL_ADC_ConvCpltCallback+0x130>)
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	2b27      	cmp	r3, #39	; 0x27
 800072c:	d902      	bls.n	8000734 <HAL_ADC_ConvCpltCallback+0x10c>
 800072e:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <HAL_ADC_ConvCpltCallback+0x130>)
 8000730:	2200      	movs	r2, #0
 8000732:	701a      	strb	r2, [r3, #0]
	pt100_data_ready = 1;
 8000734:	4b0b      	ldr	r3, [pc, #44]	; (8000764 <HAL_ADC_ConvCpltCallback+0x13c>)
 8000736:	2201      	movs	r2, #1
 8000738:	701a      	strb	r2, [r3, #0]
}
 800073a:	bf00      	nop
 800073c:	372c      	adds	r7, #44	; 0x2c
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	20000378 	.word	0x20000378
 800074c:	1fff7a2a 	.word	0x1fff7a2a
 8000750:	40533333 	.word	0x40533333
 8000754:	42c80000 	.word	0x42c80000
 8000758:	20000425 	.word	0x20000425
 800075c:	40263bcd 	.word	0x40263bcd
 8000760:	20000384 	.word	0x20000384
 8000764:	20000424 	.word	0x20000424

08000768 <set_bit>:
 */

#include <control_bit.h>

uint16_t set_bit(uint16_t value, uint8_t num)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	460a      	mov	r2, r1
 8000772:	80fb      	strh	r3, [r7, #6]
 8000774:	4613      	mov	r3, r2
 8000776:	717b      	strb	r3, [r7, #5]
     return value | (1 << num);
 8000778:	797b      	ldrb	r3, [r7, #5]
 800077a:	2201      	movs	r2, #1
 800077c:	fa02 f303 	lsl.w	r3, r2, r3
 8000780:	b21a      	sxth	r2, r3
 8000782:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000786:	4313      	orrs	r3, r2
 8000788:	b21b      	sxth	r3, r3
 800078a:	b29b      	uxth	r3, r3
}
 800078c:	4618      	mov	r0, r3
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr

08000798 <Read_Inputs>:




void Read_Inputs()
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
	Filter_Inputs();
 800079c:	f000 fb16 	bl	8000dcc <Filter_Inputs>
	meas_data.d_inputs.in0 	= settings.retain.input_emulation_switches.in0  ? settings.retain.input_emulation_values.in0 :  filters_inputs[0];
 80007a0:	4b84      	ldr	r3, [pc, #528]	; (80009b4 <Read_Inputs+0x21c>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	f003 0301 	and.w	r3, r3, #1
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d005      	beq.n	80007ba <Read_Inputs+0x22>
 80007ae:	4b81      	ldr	r3, [pc, #516]	; (80009b4 <Read_Inputs+0x21c>)
 80007b0:	789b      	ldrb	r3, [r3, #2]
 80007b2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80007b6:	b2da      	uxtb	r2, r3
 80007b8:	e004      	b.n	80007c4 <Read_Inputs+0x2c>
 80007ba:	4b7f      	ldr	r3, [pc, #508]	; (80009b8 <Read_Inputs+0x220>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	497d      	ldr	r1, [pc, #500]	; (80009bc <Read_Inputs+0x224>)
 80007c6:	780b      	ldrb	r3, [r1, #0]
 80007c8:	f362 0300 	bfi	r3, r2, #0, #1
 80007cc:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in1 	= settings.retain.input_emulation_switches.in1  ? settings.retain.input_emulation_values.in1 :  filters_inputs[1];
 80007ce:	4b79      	ldr	r3, [pc, #484]	; (80009b4 <Read_Inputs+0x21c>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	b2db      	uxtb	r3, r3
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d005      	beq.n	80007e8 <Read_Inputs+0x50>
 80007dc:	4b75      	ldr	r3, [pc, #468]	; (80009b4 <Read_Inputs+0x21c>)
 80007de:	789b      	ldrb	r3, [r3, #2]
 80007e0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	e004      	b.n	80007f2 <Read_Inputs+0x5a>
 80007e8:	4b73      	ldr	r3, [pc, #460]	; (80009b8 <Read_Inputs+0x220>)
 80007ea:	785b      	ldrb	r3, [r3, #1]
 80007ec:	f003 0301 	and.w	r3, r3, #1
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	4972      	ldr	r1, [pc, #456]	; (80009bc <Read_Inputs+0x224>)
 80007f4:	780b      	ldrb	r3, [r1, #0]
 80007f6:	f362 0341 	bfi	r3, r2, #1, #1
 80007fa:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in2 	= settings.retain.input_emulation_switches.in2  ? settings.retain.input_emulation_values.in2 :  filters_inputs[2];
 80007fc:	4b6d      	ldr	r3, [pc, #436]	; (80009b4 <Read_Inputs+0x21c>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	f003 0304 	and.w	r3, r3, #4
 8000804:	b2db      	uxtb	r3, r3
 8000806:	2b00      	cmp	r3, #0
 8000808:	d005      	beq.n	8000816 <Read_Inputs+0x7e>
 800080a:	4b6a      	ldr	r3, [pc, #424]	; (80009b4 <Read_Inputs+0x21c>)
 800080c:	789b      	ldrb	r3, [r3, #2]
 800080e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000812:	b2da      	uxtb	r2, r3
 8000814:	e004      	b.n	8000820 <Read_Inputs+0x88>
 8000816:	4b68      	ldr	r3, [pc, #416]	; (80009b8 <Read_Inputs+0x220>)
 8000818:	789b      	ldrb	r3, [r3, #2]
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	b2da      	uxtb	r2, r3
 8000820:	4966      	ldr	r1, [pc, #408]	; (80009bc <Read_Inputs+0x224>)
 8000822:	780b      	ldrb	r3, [r1, #0]
 8000824:	f362 0382 	bfi	r3, r2, #2, #1
 8000828:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in3 	= settings.retain.input_emulation_switches.in3  ? settings.retain.input_emulation_values.in3 :  filters_inputs[3];
 800082a:	4b62      	ldr	r3, [pc, #392]	; (80009b4 <Read_Inputs+0x21c>)
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	f003 0308 	and.w	r3, r3, #8
 8000832:	b2db      	uxtb	r3, r3
 8000834:	2b00      	cmp	r3, #0
 8000836:	d005      	beq.n	8000844 <Read_Inputs+0xac>
 8000838:	4b5e      	ldr	r3, [pc, #376]	; (80009b4 <Read_Inputs+0x21c>)
 800083a:	789b      	ldrb	r3, [r3, #2]
 800083c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000840:	b2da      	uxtb	r2, r3
 8000842:	e004      	b.n	800084e <Read_Inputs+0xb6>
 8000844:	4b5c      	ldr	r3, [pc, #368]	; (80009b8 <Read_Inputs+0x220>)
 8000846:	78db      	ldrb	r3, [r3, #3]
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	b2da      	uxtb	r2, r3
 800084e:	495b      	ldr	r1, [pc, #364]	; (80009bc <Read_Inputs+0x224>)
 8000850:	780b      	ldrb	r3, [r1, #0]
 8000852:	f362 03c3 	bfi	r3, r2, #3, #1
 8000856:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in4 	= settings.retain.input_emulation_switches.in4  ? settings.retain.input_emulation_values.in4 :  filters_inputs[4];
 8000858:	4b56      	ldr	r3, [pc, #344]	; (80009b4 <Read_Inputs+0x21c>)
 800085a:	781b      	ldrb	r3, [r3, #0]
 800085c:	f003 0310 	and.w	r3, r3, #16
 8000860:	b2db      	uxtb	r3, r3
 8000862:	2b00      	cmp	r3, #0
 8000864:	d005      	beq.n	8000872 <Read_Inputs+0xda>
 8000866:	4b53      	ldr	r3, [pc, #332]	; (80009b4 <Read_Inputs+0x21c>)
 8000868:	789b      	ldrb	r3, [r3, #2]
 800086a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800086e:	b2da      	uxtb	r2, r3
 8000870:	e004      	b.n	800087c <Read_Inputs+0xe4>
 8000872:	4b51      	ldr	r3, [pc, #324]	; (80009b8 <Read_Inputs+0x220>)
 8000874:	791b      	ldrb	r3, [r3, #4]
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	b2da      	uxtb	r2, r3
 800087c:	494f      	ldr	r1, [pc, #316]	; (80009bc <Read_Inputs+0x224>)
 800087e:	780b      	ldrb	r3, [r1, #0]
 8000880:	f362 1304 	bfi	r3, r2, #4, #1
 8000884:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in5 	= settings.retain.input_emulation_switches.in5  ? settings.retain.input_emulation_values.in5 :  filters_inputs[5];
 8000886:	4b4b      	ldr	r3, [pc, #300]	; (80009b4 <Read_Inputs+0x21c>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	f003 0320 	and.w	r3, r3, #32
 800088e:	b2db      	uxtb	r3, r3
 8000890:	2b00      	cmp	r3, #0
 8000892:	d005      	beq.n	80008a0 <Read_Inputs+0x108>
 8000894:	4b47      	ldr	r3, [pc, #284]	; (80009b4 <Read_Inputs+0x21c>)
 8000896:	789b      	ldrb	r3, [r3, #2]
 8000898:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800089c:	b2da      	uxtb	r2, r3
 800089e:	e004      	b.n	80008aa <Read_Inputs+0x112>
 80008a0:	4b45      	ldr	r3, [pc, #276]	; (80009b8 <Read_Inputs+0x220>)
 80008a2:	795b      	ldrb	r3, [r3, #5]
 80008a4:	f003 0301 	and.w	r3, r3, #1
 80008a8:	b2da      	uxtb	r2, r3
 80008aa:	4944      	ldr	r1, [pc, #272]	; (80009bc <Read_Inputs+0x224>)
 80008ac:	780b      	ldrb	r3, [r1, #0]
 80008ae:	f362 1345 	bfi	r3, r2, #5, #1
 80008b2:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in6 	= settings.retain.input_emulation_switches.in6  ? settings.retain.input_emulation_values.in6 :  filters_inputs[6];
 80008b4:	4b3f      	ldr	r3, [pc, #252]	; (80009b4 <Read_Inputs+0x21c>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d005      	beq.n	80008ce <Read_Inputs+0x136>
 80008c2:	4b3c      	ldr	r3, [pc, #240]	; (80009b4 <Read_Inputs+0x21c>)
 80008c4:	789b      	ldrb	r3, [r3, #2]
 80008c6:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80008ca:	b2da      	uxtb	r2, r3
 80008cc:	e004      	b.n	80008d8 <Read_Inputs+0x140>
 80008ce:	4b3a      	ldr	r3, [pc, #232]	; (80009b8 <Read_Inputs+0x220>)
 80008d0:	799b      	ldrb	r3, [r3, #6]
 80008d2:	f003 0301 	and.w	r3, r3, #1
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	4938      	ldr	r1, [pc, #224]	; (80009bc <Read_Inputs+0x224>)
 80008da:	780b      	ldrb	r3, [r1, #0]
 80008dc:	f362 1386 	bfi	r3, r2, #6, #1
 80008e0:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in7 	= settings.retain.input_emulation_switches.in7  ? settings.retain.input_emulation_values.in7 :  filters_inputs[7];
 80008e2:	4b34      	ldr	r3, [pc, #208]	; (80009b4 <Read_Inputs+0x21c>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d005      	beq.n	80008fc <Read_Inputs+0x164>
 80008f0:	4b30      	ldr	r3, [pc, #192]	; (80009b4 <Read_Inputs+0x21c>)
 80008f2:	789b      	ldrb	r3, [r3, #2]
 80008f4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80008f8:	b2da      	uxtb	r2, r3
 80008fa:	e004      	b.n	8000906 <Read_Inputs+0x16e>
 80008fc:	4b2e      	ldr	r3, [pc, #184]	; (80009b8 <Read_Inputs+0x220>)
 80008fe:	79db      	ldrb	r3, [r3, #7]
 8000900:	f003 0301 	and.w	r3, r3, #1
 8000904:	b2da      	uxtb	r2, r3
 8000906:	492d      	ldr	r1, [pc, #180]	; (80009bc <Read_Inputs+0x224>)
 8000908:	780b      	ldrb	r3, [r1, #0]
 800090a:	f362 13c7 	bfi	r3, r2, #7, #1
 800090e:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in8 	= settings.retain.input_emulation_switches.in8  ? settings.retain.input_emulation_values.in8 :  filters_inputs[8];
 8000910:	4b28      	ldr	r3, [pc, #160]	; (80009b4 <Read_Inputs+0x21c>)
 8000912:	785b      	ldrb	r3, [r3, #1]
 8000914:	f003 0301 	and.w	r3, r3, #1
 8000918:	b2db      	uxtb	r3, r3
 800091a:	2b00      	cmp	r3, #0
 800091c:	d005      	beq.n	800092a <Read_Inputs+0x192>
 800091e:	4b25      	ldr	r3, [pc, #148]	; (80009b4 <Read_Inputs+0x21c>)
 8000920:	78db      	ldrb	r3, [r3, #3]
 8000922:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000926:	b2da      	uxtb	r2, r3
 8000928:	e004      	b.n	8000934 <Read_Inputs+0x19c>
 800092a:	4b23      	ldr	r3, [pc, #140]	; (80009b8 <Read_Inputs+0x220>)
 800092c:	7a1b      	ldrb	r3, [r3, #8]
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	b2da      	uxtb	r2, r3
 8000934:	4921      	ldr	r1, [pc, #132]	; (80009bc <Read_Inputs+0x224>)
 8000936:	784b      	ldrb	r3, [r1, #1]
 8000938:	f362 0300 	bfi	r3, r2, #0, #1
 800093c:	704b      	strb	r3, [r1, #1]
	meas_data.d_inputs.in9 	= settings.retain.input_emulation_switches.in9  ? settings.retain.input_emulation_values.in9 :  filters_inputs[9];
 800093e:	4b1d      	ldr	r3, [pc, #116]	; (80009b4 <Read_Inputs+0x21c>)
 8000940:	785b      	ldrb	r3, [r3, #1]
 8000942:	f003 0302 	and.w	r3, r3, #2
 8000946:	b2db      	uxtb	r3, r3
 8000948:	2b00      	cmp	r3, #0
 800094a:	d005      	beq.n	8000958 <Read_Inputs+0x1c0>
 800094c:	4b19      	ldr	r3, [pc, #100]	; (80009b4 <Read_Inputs+0x21c>)
 800094e:	78db      	ldrb	r3, [r3, #3]
 8000950:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000954:	b2da      	uxtb	r2, r3
 8000956:	e004      	b.n	8000962 <Read_Inputs+0x1ca>
 8000958:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <Read_Inputs+0x220>)
 800095a:	7a5b      	ldrb	r3, [r3, #9]
 800095c:	f003 0301 	and.w	r3, r3, #1
 8000960:	b2da      	uxtb	r2, r3
 8000962:	4916      	ldr	r1, [pc, #88]	; (80009bc <Read_Inputs+0x224>)
 8000964:	784b      	ldrb	r3, [r1, #1]
 8000966:	f362 0341 	bfi	r3, r2, #1, #1
 800096a:	704b      	strb	r3, [r1, #1]
	meas_data.d_inputs.in10 = settings.retain.input_emulation_switches.in10 ? settings.retain.input_emulation_values.in10 : filters_inputs[10];
 800096c:	4b11      	ldr	r3, [pc, #68]	; (80009b4 <Read_Inputs+0x21c>)
 800096e:	785b      	ldrb	r3, [r3, #1]
 8000970:	f003 0304 	and.w	r3, r3, #4
 8000974:	b2db      	uxtb	r3, r3
 8000976:	2b00      	cmp	r3, #0
 8000978:	d005      	beq.n	8000986 <Read_Inputs+0x1ee>
 800097a:	4b0e      	ldr	r3, [pc, #56]	; (80009b4 <Read_Inputs+0x21c>)
 800097c:	78db      	ldrb	r3, [r3, #3]
 800097e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000982:	b2da      	uxtb	r2, r3
 8000984:	e004      	b.n	8000990 <Read_Inputs+0x1f8>
 8000986:	4b0c      	ldr	r3, [pc, #48]	; (80009b8 <Read_Inputs+0x220>)
 8000988:	7a9b      	ldrb	r3, [r3, #10]
 800098a:	f003 0301 	and.w	r3, r3, #1
 800098e:	b2da      	uxtb	r2, r3
 8000990:	490a      	ldr	r1, [pc, #40]	; (80009bc <Read_Inputs+0x224>)
 8000992:	784b      	ldrb	r3, [r1, #1]
 8000994:	f362 0382 	bfi	r3, r2, #2, #1
 8000998:	704b      	strb	r3, [r1, #1]
	meas_data.d_inputs.in11 = settings.retain.input_emulation_switches.in11 ? settings.retain.input_emulation_values.in11 : filters_inputs[11];
 800099a:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <Read_Inputs+0x21c>)
 800099c:	785b      	ldrb	r3, [r3, #1]
 800099e:	f003 0308 	and.w	r3, r3, #8
 80009a2:	b2db      	uxtb	r3, r3
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d00b      	beq.n	80009c0 <Read_Inputs+0x228>
 80009a8:	4b02      	ldr	r3, [pc, #8]	; (80009b4 <Read_Inputs+0x21c>)
 80009aa:	78db      	ldrb	r3, [r3, #3]
 80009ac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	e00a      	b.n	80009ca <Read_Inputs+0x232>
 80009b4:	20000bf0 	.word	0x20000bf0
 80009b8:	20000434 	.word	0x20000434
 80009bc:	20000c8c 	.word	0x20000c8c
 80009c0:	4b3c      	ldr	r3, [pc, #240]	; (8000ab4 <Read_Inputs+0x31c>)
 80009c2:	7adb      	ldrb	r3, [r3, #11]
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	b2da      	uxtb	r2, r3
 80009ca:	493b      	ldr	r1, [pc, #236]	; (8000ab8 <Read_Inputs+0x320>)
 80009cc:	784b      	ldrb	r3, [r1, #1]
 80009ce:	f362 03c3 	bfi	r3, r2, #3, #1
 80009d2:	704b      	strb	r3, [r1, #1]

	d_inputs.uz_prob_fail 				= meas_data.d_inputs.in0;
 80009d4:	4b38      	ldr	r3, [pc, #224]	; (8000ab8 <Read_Inputs+0x320>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80009dc:	b2d9      	uxtb	r1, r3
 80009de:	4a37      	ldr	r2, [pc, #220]	; (8000abc <Read_Inputs+0x324>)
 80009e0:	7813      	ldrb	r3, [r2, #0]
 80009e2:	f361 0300 	bfi	r3, r1, #0, #1
 80009e6:	7013      	strb	r3, [r2, #0]
	d_inputs.sq_kovsh_prob_right_1 		= meas_data.d_inputs.in1;
 80009e8:	4b33      	ldr	r3, [pc, #204]	; (8000ab8 <Read_Inputs+0x320>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80009f0:	b2d9      	uxtb	r1, r3
 80009f2:	4a32      	ldr	r2, [pc, #200]	; (8000abc <Read_Inputs+0x324>)
 80009f4:	7813      	ldrb	r3, [r2, #0]
 80009f6:	f361 0341 	bfi	r3, r1, #1, #1
 80009fa:	7013      	strb	r3, [r2, #0]
	d_inputs.sq_kovsh_prob_right_2		= meas_data.d_inputs.in2;
 80009fc:	4b2e      	ldr	r3, [pc, #184]	; (8000ab8 <Read_Inputs+0x320>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000a04:	b2d9      	uxtb	r1, r3
 8000a06:	4a2d      	ldr	r2, [pc, #180]	; (8000abc <Read_Inputs+0x324>)
 8000a08:	7813      	ldrb	r3, [r2, #0]
 8000a0a:	f361 0382 	bfi	r3, r1, #2, #1
 8000a0e:	7013      	strb	r3, [r2, #0]
	d_inputs.sq_kovsh_prob_left_1 		= meas_data.d_inputs.in3;
 8000a10:	4b29      	ldr	r3, [pc, #164]	; (8000ab8 <Read_Inputs+0x320>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000a18:	b2d9      	uxtb	r1, r3
 8000a1a:	4a28      	ldr	r2, [pc, #160]	; (8000abc <Read_Inputs+0x324>)
 8000a1c:	7813      	ldrb	r3, [r2, #0]
 8000a1e:	f361 03c3 	bfi	r3, r1, #3, #1
 8000a22:	7013      	strb	r3, [r2, #0]
	d_inputs.sq_kovsh_prob_left_2		= meas_data.d_inputs.in4;
 8000a24:	4b24      	ldr	r3, [pc, #144]	; (8000ab8 <Read_Inputs+0x320>)
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000a2c:	b2d9      	uxtb	r1, r3
 8000a2e:	4a23      	ldr	r2, [pc, #140]	; (8000abc <Read_Inputs+0x324>)
 8000a30:	7813      	ldrb	r3, [r2, #0]
 8000a32:	f361 1304 	bfi	r3, r1, #4, #1
 8000a36:	7013      	strb	r3, [r2, #0]
	d_inputs.sb_stop					= meas_data.d_inputs.in5;
 8000a38:	4b1f      	ldr	r3, [pc, #124]	; (8000ab8 <Read_Inputs+0x320>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000a40:	b2d9      	uxtb	r1, r3
 8000a42:	4a1e      	ldr	r2, [pc, #120]	; (8000abc <Read_Inputs+0x324>)
 8000a44:	7813      	ldrb	r3, [r2, #0]
 8000a46:	f361 1345 	bfi	r3, r1, #5, #1
 8000a4a:	7013      	strb	r3, [r2, #0]
	d_inputs.sb_make_proba				= meas_data.d_inputs.in6;
 8000a4c:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <Read_Inputs+0x320>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000a54:	b2d9      	uxtb	r1, r3
 8000a56:	4a19      	ldr	r2, [pc, #100]	; (8000abc <Read_Inputs+0x324>)
 8000a58:	7813      	ldrb	r3, [r2, #0]
 8000a5a:	f361 1386 	bfi	r3, r1, #6, #1
 8000a5e:	7013      	strb	r3, [r2, #0]
	d_inputs.sb_vozvrat					= meas_data.d_inputs.in7;
 8000a60:	4b15      	ldr	r3, [pc, #84]	; (8000ab8 <Read_Inputs+0x320>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000a68:	b2d9      	uxtb	r1, r3
 8000a6a:	4a14      	ldr	r2, [pc, #80]	; (8000abc <Read_Inputs+0x324>)
 8000a6c:	7813      	ldrb	r3, [r2, #0]
 8000a6e:	f361 13c7 	bfi	r3, r1, #7, #1
 8000a72:	7013      	strb	r3, [r2, #0]
	d_inputs.sb_auto_local				= meas_data.d_inputs.in8;
 8000a74:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <Read_Inputs+0x320>)
 8000a76:	785b      	ldrb	r3, [r3, #1]
 8000a78:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000a7c:	b2d9      	uxtb	r1, r3
 8000a7e:	4a0f      	ldr	r2, [pc, #60]	; (8000abc <Read_Inputs+0x324>)
 8000a80:	7853      	ldrb	r3, [r2, #1]
 8000a82:	f361 0300 	bfi	r3, r1, #0, #1
 8000a86:	7053      	strb	r3, [r2, #1]
	d_inputs.sq_kanistra				= meas_data.d_inputs.in9;
 8000a88:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <Read_Inputs+0x320>)
 8000a8a:	785b      	ldrb	r3, [r3, #1]
 8000a8c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000a90:	b2d9      	uxtb	r1, r3
 8000a92:	4a0a      	ldr	r2, [pc, #40]	; (8000abc <Read_Inputs+0x324>)
 8000a94:	7853      	ldrb	r3, [r2, #1]
 8000a96:	f361 0341 	bfi	r3, r1, #1, #1
 8000a9a:	7053      	strb	r3, [r2, #1]
	d_inputs.sq_kanistra_door			= meas_data.d_inputs.in10;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <Read_Inputs+0x320>)
 8000a9e:	785b      	ldrb	r3, [r3, #1]
 8000aa0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000aa4:	b2d9      	uxtb	r1, r3
 8000aa6:	4a05      	ldr	r2, [pc, #20]	; (8000abc <Read_Inputs+0x324>)
 8000aa8:	7853      	ldrb	r3, [r2, #1]
 8000aaa:	f361 0382 	bfi	r3, r1, #2, #1
 8000aae:	7053      	strb	r3, [r2, #1]




}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000434 	.word	0x20000434
 8000ab8:	20000c8c 	.word	0x20000c8c
 8000abc:	20000440 	.word	0x20000440

08000ac0 <Write_Outputs>:

void Write_Outputs()
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
	meas_data.d_outputs.out0  = settings.retain.output_emulation_switches.out0  ? settings.retain.output_emulation_values.out0  :  d_outputs.uz_prob_forv;
 8000ac4:	4b74      	ldr	r3, [pc, #464]	; (8000c98 <Write_Outputs+0x1d8>)
 8000ac6:	791b      	ldrb	r3, [r3, #4]
 8000ac8:	f003 0301 	and.w	r3, r3, #1
 8000acc:	b2db      	uxtb	r3, r3
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d005      	beq.n	8000ade <Write_Outputs+0x1e>
 8000ad2:	4b71      	ldr	r3, [pc, #452]	; (8000c98 <Write_Outputs+0x1d8>)
 8000ad4:	799b      	ldrb	r3, [r3, #6]
 8000ad6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	e004      	b.n	8000ae8 <Write_Outputs+0x28>
 8000ade:	4b6f      	ldr	r3, [pc, #444]	; (8000c9c <Write_Outputs+0x1dc>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	496d      	ldr	r1, [pc, #436]	; (8000ca0 <Write_Outputs+0x1e0>)
 8000aea:	788b      	ldrb	r3, [r1, #2]
 8000aec:	f362 0300 	bfi	r3, r2, #0, #1
 8000af0:	708b      	strb	r3, [r1, #2]
	meas_data.d_outputs.out1  = settings.retain.output_emulation_switches.out1  ? settings.retain.output_emulation_values.out1  :  d_outputs.uz_prob_rev;
 8000af2:	4b69      	ldr	r3, [pc, #420]	; (8000c98 <Write_Outputs+0x1d8>)
 8000af4:	791b      	ldrb	r3, [r3, #4]
 8000af6:	f003 0302 	and.w	r3, r3, #2
 8000afa:	b2db      	uxtb	r3, r3
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d005      	beq.n	8000b0c <Write_Outputs+0x4c>
 8000b00:	4b65      	ldr	r3, [pc, #404]	; (8000c98 <Write_Outputs+0x1d8>)
 8000b02:	799b      	ldrb	r3, [r3, #6]
 8000b04:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	e004      	b.n	8000b16 <Write_Outputs+0x56>
 8000b0c:	4b63      	ldr	r3, [pc, #396]	; (8000c9c <Write_Outputs+0x1dc>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4962      	ldr	r1, [pc, #392]	; (8000ca0 <Write_Outputs+0x1e0>)
 8000b18:	788b      	ldrb	r3, [r1, #2]
 8000b1a:	f362 0341 	bfi	r3, r2, #1, #1
 8000b1e:	708b      	strb	r3, [r1, #2]
	meas_data.d_outputs.out2  = settings.retain.output_emulation_switches.out2  ? settings.retain.output_emulation_values.out2  :  d_outputs.prob_ready;
 8000b20:	4b5d      	ldr	r3, [pc, #372]	; (8000c98 <Write_Outputs+0x1d8>)
 8000b22:	791b      	ldrb	r3, [r3, #4]
 8000b24:	f003 0304 	and.w	r3, r3, #4
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d005      	beq.n	8000b3a <Write_Outputs+0x7a>
 8000b2e:	4b5a      	ldr	r3, [pc, #360]	; (8000c98 <Write_Outputs+0x1d8>)
 8000b30:	799b      	ldrb	r3, [r3, #6]
 8000b32:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	e004      	b.n	8000b44 <Write_Outputs+0x84>
 8000b3a:	4b58      	ldr	r3, [pc, #352]	; (8000c9c <Write_Outputs+0x1dc>)
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000b42:	b2da      	uxtb	r2, r3
 8000b44:	4956      	ldr	r1, [pc, #344]	; (8000ca0 <Write_Outputs+0x1e0>)
 8000b46:	788b      	ldrb	r3, [r1, #2]
 8000b48:	f362 0382 	bfi	r3, r2, #2, #1
 8000b4c:	708b      	strb	r3, [r1, #2]
	meas_data.d_outputs.out3  = settings.retain.output_emulation_switches.out3  ? settings.retain.output_emulation_values.out3  :  0;
 8000b4e:	4b52      	ldr	r3, [pc, #328]	; (8000c98 <Write_Outputs+0x1d8>)
 8000b50:	791b      	ldrb	r3, [r3, #4]
 8000b52:	f003 0308 	and.w	r3, r3, #8
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d005      	beq.n	8000b68 <Write_Outputs+0xa8>
 8000b5c:	4b4e      	ldr	r3, [pc, #312]	; (8000c98 <Write_Outputs+0x1d8>)
 8000b5e:	799b      	ldrb	r3, [r3, #6]
 8000b60:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000b64:	b2d9      	uxtb	r1, r3
 8000b66:	e000      	b.n	8000b6a <Write_Outputs+0xaa>
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4a4d      	ldr	r2, [pc, #308]	; (8000ca0 <Write_Outputs+0x1e0>)
 8000b6c:	7893      	ldrb	r3, [r2, #2]
 8000b6e:	f361 03c3 	bfi	r3, r1, #3, #1
 8000b72:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out4  = settings.retain.output_emulation_switches.out4  ? settings.retain.output_emulation_values.out4  :  0;
 8000b74:	4b48      	ldr	r3, [pc, #288]	; (8000c98 <Write_Outputs+0x1d8>)
 8000b76:	791b      	ldrb	r3, [r3, #4]
 8000b78:	f003 0310 	and.w	r3, r3, #16
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d005      	beq.n	8000b8e <Write_Outputs+0xce>
 8000b82:	4b45      	ldr	r3, [pc, #276]	; (8000c98 <Write_Outputs+0x1d8>)
 8000b84:	799b      	ldrb	r3, [r3, #6]
 8000b86:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000b8a:	b2d9      	uxtb	r1, r3
 8000b8c:	e000      	b.n	8000b90 <Write_Outputs+0xd0>
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4a43      	ldr	r2, [pc, #268]	; (8000ca0 <Write_Outputs+0x1e0>)
 8000b92:	7893      	ldrb	r3, [r2, #2]
 8000b94:	f361 1304 	bfi	r3, r1, #4, #1
 8000b98:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out5  = settings.retain.output_emulation_switches.out5  ? settings.retain.output_emulation_values.out5  :  0;
 8000b9a:	4b3f      	ldr	r3, [pc, #252]	; (8000c98 <Write_Outputs+0x1d8>)
 8000b9c:	791b      	ldrb	r3, [r3, #4]
 8000b9e:	f003 0320 	and.w	r3, r3, #32
 8000ba2:	b2db      	uxtb	r3, r3
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d005      	beq.n	8000bb4 <Write_Outputs+0xf4>
 8000ba8:	4b3b      	ldr	r3, [pc, #236]	; (8000c98 <Write_Outputs+0x1d8>)
 8000baa:	799b      	ldrb	r3, [r3, #6]
 8000bac:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000bb0:	b2d9      	uxtb	r1, r3
 8000bb2:	e000      	b.n	8000bb6 <Write_Outputs+0xf6>
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	4a3a      	ldr	r2, [pc, #232]	; (8000ca0 <Write_Outputs+0x1e0>)
 8000bb8:	7893      	ldrb	r3, [r2, #2]
 8000bba:	f361 1345 	bfi	r3, r1, #5, #1
 8000bbe:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out6  = settings.retain.output_emulation_switches.out6  ? settings.retain.output_emulation_values.out6  :  0;
 8000bc0:	4b35      	ldr	r3, [pc, #212]	; (8000c98 <Write_Outputs+0x1d8>)
 8000bc2:	791b      	ldrb	r3, [r3, #4]
 8000bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bc8:	b2db      	uxtb	r3, r3
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d005      	beq.n	8000bda <Write_Outputs+0x11a>
 8000bce:	4b32      	ldr	r3, [pc, #200]	; (8000c98 <Write_Outputs+0x1d8>)
 8000bd0:	799b      	ldrb	r3, [r3, #6]
 8000bd2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000bd6:	b2d9      	uxtb	r1, r3
 8000bd8:	e000      	b.n	8000bdc <Write_Outputs+0x11c>
 8000bda:	2100      	movs	r1, #0
 8000bdc:	4a30      	ldr	r2, [pc, #192]	; (8000ca0 <Write_Outputs+0x1e0>)
 8000bde:	7893      	ldrb	r3, [r2, #2]
 8000be0:	f361 1386 	bfi	r3, r1, #6, #1
 8000be4:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out7  = settings.retain.output_emulation_switches.out7  ? settings.retain.output_emulation_values.out7  :  0;
 8000be6:	4b2c      	ldr	r3, [pc, #176]	; (8000c98 <Write_Outputs+0x1d8>)
 8000be8:	791b      	ldrb	r3, [r3, #4]
 8000bea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d005      	beq.n	8000c00 <Write_Outputs+0x140>
 8000bf4:	4b28      	ldr	r3, [pc, #160]	; (8000c98 <Write_Outputs+0x1d8>)
 8000bf6:	799b      	ldrb	r3, [r3, #6]
 8000bf8:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000bfc:	b2d9      	uxtb	r1, r3
 8000bfe:	e000      	b.n	8000c02 <Write_Outputs+0x142>
 8000c00:	2100      	movs	r1, #0
 8000c02:	4a27      	ldr	r2, [pc, #156]	; (8000ca0 <Write_Outputs+0x1e0>)
 8000c04:	7893      	ldrb	r3, [r2, #2]
 8000c06:	f361 13c7 	bfi	r3, r1, #7, #1
 8000c0a:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out8  = settings.retain.output_emulation_switches.out8  ? settings.retain.output_emulation_values.out8  :  0;
 8000c0c:	4b22      	ldr	r3, [pc, #136]	; (8000c98 <Write_Outputs+0x1d8>)
 8000c0e:	795b      	ldrb	r3, [r3, #5]
 8000c10:	f003 0301 	and.w	r3, r3, #1
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d005      	beq.n	8000c26 <Write_Outputs+0x166>
 8000c1a:	4b1f      	ldr	r3, [pc, #124]	; (8000c98 <Write_Outputs+0x1d8>)
 8000c1c:	79db      	ldrb	r3, [r3, #7]
 8000c1e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000c22:	b2d9      	uxtb	r1, r3
 8000c24:	e000      	b.n	8000c28 <Write_Outputs+0x168>
 8000c26:	2100      	movs	r1, #0
 8000c28:	4a1d      	ldr	r2, [pc, #116]	; (8000ca0 <Write_Outputs+0x1e0>)
 8000c2a:	78d3      	ldrb	r3, [r2, #3]
 8000c2c:	f361 0300 	bfi	r3, r1, #0, #1
 8000c30:	70d3      	strb	r3, [r2, #3]
	meas_data.d_outputs.out9  = settings.retain.output_emulation_switches.out9  ? settings.retain.output_emulation_values.out9  :  0;
 8000c32:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <Write_Outputs+0x1d8>)
 8000c34:	795b      	ldrb	r3, [r3, #5]
 8000c36:	f003 0302 	and.w	r3, r3, #2
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d005      	beq.n	8000c4c <Write_Outputs+0x18c>
 8000c40:	4b15      	ldr	r3, [pc, #84]	; (8000c98 <Write_Outputs+0x1d8>)
 8000c42:	79db      	ldrb	r3, [r3, #7]
 8000c44:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000c48:	b2d9      	uxtb	r1, r3
 8000c4a:	e000      	b.n	8000c4e <Write_Outputs+0x18e>
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4a14      	ldr	r2, [pc, #80]	; (8000ca0 <Write_Outputs+0x1e0>)
 8000c50:	78d3      	ldrb	r3, [r2, #3]
 8000c52:	f361 0341 	bfi	r3, r1, #1, #1
 8000c56:	70d3      	strb	r3, [r2, #3]
	meas_data.d_outputs.out10 = settings.retain.output_emulation_switches.out10 ? settings.retain.output_emulation_values.out10 :  0;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	; (8000c98 <Write_Outputs+0x1d8>)
 8000c5a:	795b      	ldrb	r3, [r3, #5]
 8000c5c:	f003 0304 	and.w	r3, r3, #4
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d005      	beq.n	8000c72 <Write_Outputs+0x1b2>
 8000c66:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <Write_Outputs+0x1d8>)
 8000c68:	79db      	ldrb	r3, [r3, #7]
 8000c6a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000c6e:	b2d9      	uxtb	r1, r3
 8000c70:	e000      	b.n	8000c74 <Write_Outputs+0x1b4>
 8000c72:	2100      	movs	r1, #0
 8000c74:	4a0a      	ldr	r2, [pc, #40]	; (8000ca0 <Write_Outputs+0x1e0>)
 8000c76:	78d3      	ldrb	r3, [r2, #3]
 8000c78:	f361 0382 	bfi	r3, r1, #2, #1
 8000c7c:	70d3      	strb	r3, [r2, #3]
	meas_data.d_outputs.out11 = settings.retain.output_emulation_switches.out11 ? settings.retain.output_emulation_values.out11 :  0;
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <Write_Outputs+0x1d8>)
 8000c80:	795b      	ldrb	r3, [r3, #5]
 8000c82:	f003 0308 	and.w	r3, r3, #8
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d00b      	beq.n	8000ca4 <Write_Outputs+0x1e4>
 8000c8c:	4b02      	ldr	r3, [pc, #8]	; (8000c98 <Write_Outputs+0x1d8>)
 8000c8e:	79db      	ldrb	r3, [r3, #7]
 8000c90:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000c94:	b2d9      	uxtb	r1, r3
 8000c96:	e006      	b.n	8000ca6 <Write_Outputs+0x1e6>
 8000c98:	20000bf0 	.word	0x20000bf0
 8000c9c:	20000444 	.word	0x20000444
 8000ca0:	20000c8c 	.word	0x20000c8c
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4a45      	ldr	r2, [pc, #276]	; (8000dbc <Write_Outputs+0x2fc>)
 8000ca8:	78d3      	ldrb	r3, [r2, #3]
 8000caa:	f361 03c3 	bfi	r3, r1, #3, #1
 8000cae:	70d3      	strb	r3, [r2, #3]
	HAL_GPIO_WritePin(DOUT_0_GPIO_Port, DOUT_0_Pin, meas_data.d_outputs.out0);
 8000cb0:	4b42      	ldr	r3, [pc, #264]	; (8000dbc <Write_Outputs+0x2fc>)
 8000cb2:	789b      	ldrb	r3, [r3, #2]
 8000cb4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	461a      	mov	r2, r3
 8000cbc:	2180      	movs	r1, #128	; 0x80
 8000cbe:	4840      	ldr	r0, [pc, #256]	; (8000dc0 <Write_Outputs+0x300>)
 8000cc0:	f007 fc82 	bl	80085c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_1_GPIO_Port, DOUT_1_Pin, meas_data.d_outputs.out1);
 8000cc4:	4b3d      	ldr	r3, [pc, #244]	; (8000dbc <Write_Outputs+0x2fc>)
 8000cc6:	789b      	ldrb	r3, [r3, #2]
 8000cc8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000ccc:	b2db      	uxtb	r3, r3
 8000cce:	461a      	mov	r2, r3
 8000cd0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cd4:	483a      	ldr	r0, [pc, #232]	; (8000dc0 <Write_Outputs+0x300>)
 8000cd6:	f007 fc77 	bl	80085c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_2_GPIO_Port, DOUT_2_Pin, meas_data.d_outputs.out2);
 8000cda:	4b38      	ldr	r3, [pc, #224]	; (8000dbc <Write_Outputs+0x2fc>)
 8000cdc:	789b      	ldrb	r3, [r3, #2]
 8000cde:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	461a      	mov	r2, r3
 8000ce6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cea:	4835      	ldr	r0, [pc, #212]	; (8000dc0 <Write_Outputs+0x300>)
 8000cec:	f007 fc6c 	bl	80085c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_3_GPIO_Port, DOUT_3_Pin, meas_data.d_outputs.out3);
 8000cf0:	4b32      	ldr	r3, [pc, #200]	; (8000dbc <Write_Outputs+0x2fc>)
 8000cf2:	789b      	ldrb	r3, [r3, #2]
 8000cf4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d00:	482f      	ldr	r0, [pc, #188]	; (8000dc0 <Write_Outputs+0x300>)
 8000d02:	f007 fc61 	bl	80085c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_4_GPIO_Port, DOUT_4_Pin, meas_data.d_outputs.out4);
 8000d06:	4b2d      	ldr	r3, [pc, #180]	; (8000dbc <Write_Outputs+0x2fc>)
 8000d08:	789b      	ldrb	r3, [r3, #2]
 8000d0a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000d0e:	b2db      	uxtb	r3, r3
 8000d10:	461a      	mov	r2, r3
 8000d12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d16:	482a      	ldr	r0, [pc, #168]	; (8000dc0 <Write_Outputs+0x300>)
 8000d18:	f007 fc56 	bl	80085c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_5_GPIO_Port, DOUT_5_Pin, meas_data.d_outputs.out5);
 8000d1c:	4b27      	ldr	r3, [pc, #156]	; (8000dbc <Write_Outputs+0x2fc>)
 8000d1e:	789b      	ldrb	r3, [r3, #2]
 8000d20:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	461a      	mov	r2, r3
 8000d28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d2c:	4824      	ldr	r0, [pc, #144]	; (8000dc0 <Write_Outputs+0x300>)
 8000d2e:	f007 fc4b 	bl	80085c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_6_GPIO_Port, DOUT_6_Pin, meas_data.d_outputs.out6);
 8000d32:	4b22      	ldr	r3, [pc, #136]	; (8000dbc <Write_Outputs+0x2fc>)
 8000d34:	789b      	ldrb	r3, [r3, #2]
 8000d36:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d42:	481f      	ldr	r0, [pc, #124]	; (8000dc0 <Write_Outputs+0x300>)
 8000d44:	f007 fc40 	bl	80085c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_7_GPIO_Port, DOUT_7_Pin, meas_data.d_outputs.out7);
 8000d48:	4b1c      	ldr	r3, [pc, #112]	; (8000dbc <Write_Outputs+0x2fc>)
 8000d4a:	789b      	ldrb	r3, [r3, #2]
 8000d4c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	461a      	mov	r2, r3
 8000d54:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d58:	4819      	ldr	r0, [pc, #100]	; (8000dc0 <Write_Outputs+0x300>)
 8000d5a:	f007 fc35 	bl	80085c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_8_GPIO_Port, DOUT_8_Pin, meas_data.d_outputs.out8);
 8000d5e:	4b17      	ldr	r3, [pc, #92]	; (8000dbc <Write_Outputs+0x2fc>)
 8000d60:	78db      	ldrb	r3, [r3, #3]
 8000d62:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000d66:	b2db      	uxtb	r3, r3
 8000d68:	461a      	mov	r2, r3
 8000d6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d6e:	4814      	ldr	r0, [pc, #80]	; (8000dc0 <Write_Outputs+0x300>)
 8000d70:	f007 fc2a 	bl	80085c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_9_GPIO_Port, DOUT_9_Pin, meas_data.d_outputs.out9);
 8000d74:	4b11      	ldr	r3, [pc, #68]	; (8000dbc <Write_Outputs+0x2fc>)
 8000d76:	78db      	ldrb	r3, [r3, #3]
 8000d78:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	461a      	mov	r2, r3
 8000d80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d84:	480f      	ldr	r0, [pc, #60]	; (8000dc4 <Write_Outputs+0x304>)
 8000d86:	f007 fc1f 	bl	80085c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_10_GPIO_Port, DOUT_10_Pin, meas_data.d_outputs.out10);
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	; (8000dbc <Write_Outputs+0x2fc>)
 8000d8c:	78db      	ldrb	r3, [r3, #3]
 8000d8e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000d92:	b2db      	uxtb	r3, r3
 8000d94:	461a      	mov	r2, r3
 8000d96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d9a:	480b      	ldr	r0, [pc, #44]	; (8000dc8 <Write_Outputs+0x308>)
 8000d9c:	f007 fc14 	bl	80085c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_11_GPIO_Port, DOUT_11_Pin, meas_data.d_outputs.out11);
 8000da0:	4b06      	ldr	r3, [pc, #24]	; (8000dbc <Write_Outputs+0x2fc>)
 8000da2:	78db      	ldrb	r3, [r3, #3]
 8000da4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	461a      	mov	r2, r3
 8000dac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000db0:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <Write_Outputs+0x308>)
 8000db2:	f007 fc09 	bl	80085c8 <HAL_GPIO_WritePin>
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	20000c8c 	.word	0x20000c8c
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40020400 	.word	0x40020400
 8000dc8:	40020c00 	.word	0x40020c00

08000dcc <Filter_Inputs>:

static void Filter_Inputs()
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
	uint8_t inputs[INPUT_NUMBER];

	inputs[0] = !HAL_GPIO_ReadPin(DIN_0_GPIO_Port, DIN_0_Pin);
 8000dd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dd6:	486a      	ldr	r0, [pc, #424]	; (8000f80 <Filter_Inputs+0x1b4>)
 8000dd8:	f007 fbde 	bl	8008598 <HAL_GPIO_ReadPin>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	bf0c      	ite	eq
 8000de2:	2301      	moveq	r3, #1
 8000de4:	2300      	movne	r3, #0
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	703b      	strb	r3, [r7, #0]
	inputs[1] = !HAL_GPIO_ReadPin(DIN_1_GPIO_Port, DIN_1_Pin);
 8000dea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dee:	4864      	ldr	r0, [pc, #400]	; (8000f80 <Filter_Inputs+0x1b4>)
 8000df0:	f007 fbd2 	bl	8008598 <HAL_GPIO_ReadPin>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	bf0c      	ite	eq
 8000dfa:	2301      	moveq	r3, #1
 8000dfc:	2300      	movne	r3, #0
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	707b      	strb	r3, [r7, #1]
	inputs[2] = !HAL_GPIO_ReadPin(DIN_2_GPIO_Port, DIN_2_Pin);
 8000e02:	2101      	movs	r1, #1
 8000e04:	485f      	ldr	r0, [pc, #380]	; (8000f84 <Filter_Inputs+0x1b8>)
 8000e06:	f007 fbc7 	bl	8008598 <HAL_GPIO_ReadPin>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	bf0c      	ite	eq
 8000e10:	2301      	moveq	r3, #1
 8000e12:	2300      	movne	r3, #0
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	70bb      	strb	r3, [r7, #2]
	inputs[3] = !HAL_GPIO_ReadPin(DIN_3_GPIO_Port, DIN_3_Pin);
 8000e18:	2102      	movs	r1, #2
 8000e1a:	485a      	ldr	r0, [pc, #360]	; (8000f84 <Filter_Inputs+0x1b8>)
 8000e1c:	f007 fbbc 	bl	8008598 <HAL_GPIO_ReadPin>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	bf0c      	ite	eq
 8000e26:	2301      	moveq	r3, #1
 8000e28:	2300      	movne	r3, #0
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	70fb      	strb	r3, [r7, #3]
	inputs[4] = !HAL_GPIO_ReadPin(DIN_4_GPIO_Port, DIN_4_Pin);
 8000e2e:	2104      	movs	r1, #4
 8000e30:	4854      	ldr	r0, [pc, #336]	; (8000f84 <Filter_Inputs+0x1b8>)
 8000e32:	f007 fbb1 	bl	8008598 <HAL_GPIO_ReadPin>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	bf0c      	ite	eq
 8000e3c:	2301      	moveq	r3, #1
 8000e3e:	2300      	movne	r3, #0
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	713b      	strb	r3, [r7, #4]
	inputs[5] = !HAL_GPIO_ReadPin(DIN_5_GPIO_Port, DIN_5_Pin);
 8000e44:	2108      	movs	r1, #8
 8000e46:	484f      	ldr	r0, [pc, #316]	; (8000f84 <Filter_Inputs+0x1b8>)
 8000e48:	f007 fba6 	bl	8008598 <HAL_GPIO_ReadPin>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	bf0c      	ite	eq
 8000e52:	2301      	moveq	r3, #1
 8000e54:	2300      	movne	r3, #0
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	717b      	strb	r3, [r7, #5]
	inputs[6] = !HAL_GPIO_ReadPin(DIN_6_GPIO_Port, DIN_6_Pin);
 8000e5a:	2110      	movs	r1, #16
 8000e5c:	4849      	ldr	r0, [pc, #292]	; (8000f84 <Filter_Inputs+0x1b8>)
 8000e5e:	f007 fb9b 	bl	8008598 <HAL_GPIO_ReadPin>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	bf0c      	ite	eq
 8000e68:	2301      	moveq	r3, #1
 8000e6a:	2300      	movne	r3, #0
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	71bb      	strb	r3, [r7, #6]
	inputs[7] = !HAL_GPIO_ReadPin(DIN_7_GPIO_Port, DIN_7_Pin);
 8000e70:	2120      	movs	r1, #32
 8000e72:	4844      	ldr	r0, [pc, #272]	; (8000f84 <Filter_Inputs+0x1b8>)
 8000e74:	f007 fb90 	bl	8008598 <HAL_GPIO_ReadPin>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	bf0c      	ite	eq
 8000e7e:	2301      	moveq	r3, #1
 8000e80:	2300      	movne	r3, #0
 8000e82:	b2db      	uxtb	r3, r3
 8000e84:	71fb      	strb	r3, [r7, #7]
	inputs[8] = !HAL_GPIO_ReadPin(DIN_8_GPIO_Port, DIN_8_Pin);
 8000e86:	2140      	movs	r1, #64	; 0x40
 8000e88:	483e      	ldr	r0, [pc, #248]	; (8000f84 <Filter_Inputs+0x1b8>)
 8000e8a:	f007 fb85 	bl	8008598 <HAL_GPIO_ReadPin>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	bf0c      	ite	eq
 8000e94:	2301      	moveq	r3, #1
 8000e96:	2300      	movne	r3, #0
 8000e98:	b2db      	uxtb	r3, r3
 8000e9a:	723b      	strb	r3, [r7, #8]
	inputs[9] = !HAL_GPIO_ReadPin(DIN_9_GPIO_Port, DIN_9_Pin);
 8000e9c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ea0:	4839      	ldr	r0, [pc, #228]	; (8000f88 <Filter_Inputs+0x1bc>)
 8000ea2:	f007 fb79 	bl	8008598 <HAL_GPIO_ReadPin>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	bf0c      	ite	eq
 8000eac:	2301      	moveq	r3, #1
 8000eae:	2300      	movne	r3, #0
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	727b      	strb	r3, [r7, #9]
	inputs[10] = !HAL_GPIO_ReadPin(DIN_10_GPIO_Port, DIN_10_Pin);
 8000eb4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000eb8:	4833      	ldr	r0, [pc, #204]	; (8000f88 <Filter_Inputs+0x1bc>)
 8000eba:	f007 fb6d 	bl	8008598 <HAL_GPIO_ReadPin>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	bf0c      	ite	eq
 8000ec4:	2301      	moveq	r3, #1
 8000ec6:	2300      	movne	r3, #0
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	72bb      	strb	r3, [r7, #10]
	inputs[11] = !HAL_GPIO_ReadPin(DIN_11_GPIO_Port, DIN_11_Pin);
 8000ecc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ed0:	482d      	ldr	r0, [pc, #180]	; (8000f88 <Filter_Inputs+0x1bc>)
 8000ed2:	f007 fb61 	bl	8008598 <HAL_GPIO_ReadPin>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	bf0c      	ite	eq
 8000edc:	2301      	moveq	r3, #1
 8000ede:	2300      	movne	r3, #0
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	72fb      	strb	r3, [r7, #11]
	for (int i = 0; i < INPUT_NUMBER; ++i) {
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60fb      	str	r3, [r7, #12]
 8000ee8:	e041      	b.n	8000f6e <Filter_Inputs+0x1a2>
		if(inputs[i])
 8000eea:	463a      	mov	r2, r7
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4413      	add	r3, r2
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d00f      	beq.n	8000f16 <Filter_Inputs+0x14a>
		{
			filter_state[i] = filter_state[i]<ANTIDREBEZG_CNT ? filter_state[i]+1 : ANTIDREBEZG_CNT;
 8000ef6:	4a25      	ldr	r2, [pc, #148]	; (8000f8c <Filter_Inputs+0x1c0>)
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	4413      	add	r3, r2
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	bf28      	it	cs
 8000f02:	2304      	movcs	r3, #4
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	3301      	adds	r3, #1
 8000f08:	b2d9      	uxtb	r1, r3
 8000f0a:	4a20      	ldr	r2, [pc, #128]	; (8000f8c <Filter_Inputs+0x1c0>)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	4413      	add	r3, r2
 8000f10:	460a      	mov	r2, r1
 8000f12:	701a      	strb	r2, [r3, #0]
 8000f14:	e011      	b.n	8000f3a <Filter_Inputs+0x16e>
		}
		else
		{
			filter_state[i] = filter_state[i]>0 ? filter_state[i]-1 : 0;
 8000f16:	4a1d      	ldr	r2, [pc, #116]	; (8000f8c <Filter_Inputs+0x1c0>)
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	4413      	add	r3, r2
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d006      	beq.n	8000f30 <Filter_Inputs+0x164>
 8000f22:	4a1a      	ldr	r2, [pc, #104]	; (8000f8c <Filter_Inputs+0x1c0>)
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4413      	add	r3, r2
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	e000      	b.n	8000f32 <Filter_Inputs+0x166>
 8000f30:	2200      	movs	r2, #0
 8000f32:	4916      	ldr	r1, [pc, #88]	; (8000f8c <Filter_Inputs+0x1c0>)
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	440b      	add	r3, r1
 8000f38:	701a      	strb	r2, [r3, #0]
		}
		if (filter_state[i]>=ANTIDREBEZG_CNT) {
 8000f3a:	4a14      	ldr	r2, [pc, #80]	; (8000f8c <Filter_Inputs+0x1c0>)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	4413      	add	r3, r2
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	d905      	bls.n	8000f52 <Filter_Inputs+0x186>
			filters_inputs[i]=1;
 8000f46:	4a12      	ldr	r2, [pc, #72]	; (8000f90 <Filter_Inputs+0x1c4>)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]
 8000f50:	e00a      	b.n	8000f68 <Filter_Inputs+0x19c>
		} else if(filter_state[i]==0) {
 8000f52:	4a0e      	ldr	r2, [pc, #56]	; (8000f8c <Filter_Inputs+0x1c0>)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4413      	add	r3, r2
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d104      	bne.n	8000f68 <Filter_Inputs+0x19c>
			filters_inputs[i]=0;
 8000f5e:	4a0c      	ldr	r2, [pc, #48]	; (8000f90 <Filter_Inputs+0x1c4>)
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4413      	add	r3, r2
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < INPUT_NUMBER; ++i) {
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	2b0b      	cmp	r3, #11
 8000f72:	ddba      	ble.n	8000eea <Filter_Inputs+0x11e>
		}
	}

}
 8000f74:	bf00      	nop
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40020400 	.word	0x40020400
 8000f84:	40021000 	.word	0x40021000
 8000f88:	40020800 	.word	0x40020800
 8000f8c:	20000428 	.word	0x20000428
 8000f90:	20000434 	.word	0x20000434

08000f94 <ethernet_reset>:

static int ethernet_answer(uint8_t *data, uint16_t data_length, uint8_t *answer);
static void Send(struct netconn *conn, uint8_t* pointer, uint16_t size, ip_addr_t *addr, uint16_t port, struct netbuf *buf);

void ethernet_reset()
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ERESET_GPIO_Port, ERESET_Pin, RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2101      	movs	r1, #1
 8000f9c:	4806      	ldr	r0, [pc, #24]	; (8000fb8 <ethernet_reset+0x24>)
 8000f9e:	f007 fb13 	bl	80085c8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000fa2:	2064      	movs	r0, #100	; 0x64
 8000fa4:	f004 fd32 	bl	8005a0c <HAL_Delay>
	HAL_GPIO_WritePin(ERESET_GPIO_Port, ERESET_Pin, SET);
 8000fa8:	2201      	movs	r2, #1
 8000faa:	2101      	movs	r1, #1
 8000fac:	4802      	ldr	r0, [pc, #8]	; (8000fb8 <ethernet_reset+0x24>)
 8000fae:	f007 fb0b 	bl	80085c8 <HAL_GPIO_WritePin>
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40020000 	.word	0x40020000

08000fbc <ethernet_thread>:

void ethernet_thread(void *arg)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b0cc      	sub	sp, #304	; 0x130
 8000fc0:	af02      	add	r7, sp, #8
 8000fc2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000fc6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000fca:	6018      	str	r0, [r3, #0]
	struct netconn *conn;
	struct netbuf *buf;
	ip_addr_t *client_addr;
	unsigned short local_port;
	unsigned short client_port;
	local_port = *((unsigned short*)arg);
 8000fcc:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000fd0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	881b      	ldrh	r3, [r3, #0]
 8000fd8:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
	void* data;
	uint8_t answer[256];
	u16_t len;
	uint16_t answer_len;
	conn = netconn_new(NETCONN_UDP);
 8000fdc:	2200      	movs	r2, #0
 8000fde:	2100      	movs	r1, #0
 8000fe0:	2020      	movs	r0, #32
 8000fe2:	f00e fd25 	bl	800fa30 <netconn_new_with_proto_and_callback>
 8000fe6:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
	if (conn!= NULL)
 8000fea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d05d      	beq.n	80010ae <ethernet_thread+0xf2>
	{
	  err = netconn_bind(conn, IP_ADDR_ANY, local_port);
 8000ff2:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	492f      	ldr	r1, [pc, #188]	; (80010b8 <ethernet_thread+0xfc>)
 8000ffa:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8000ffe:	f00e fdd1 	bl	800fba4 <netconn_bind>
 8001002:	4603      	mov	r3, r0
 8001004:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	  if (err == ERR_OK)
 8001008:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 800100c:	2b00      	cmp	r3, #0
 800100e:	d14a      	bne.n	80010a6 <ethernet_thread+0xea>
	  {
		  for(;;)
		  {
			  recv_err = netconn_recv(conn, &buf);
 8001010:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001014:	4619      	mov	r1, r3
 8001016:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800101a:	f00e ff77 	bl	800ff0c <netconn_recv>
 800101e:	4603      	mov	r3, r0
 8001020:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
			  if (recv_err == ERR_OK)
 8001024:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8001028:	2b00      	cmp	r3, #0
 800102a:	d1f1      	bne.n	8001010 <ethernet_thread+0x54>
			  {
				  client_addr = netbuf_fromaddr(buf);
 800102c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001030:	3308      	adds	r3, #8
 8001032:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
				  client_port = netbuf_fromport(buf);
 8001036:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800103a:	899b      	ldrh	r3, [r3, #12]
 800103c:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116

				  netbuf_data(buf, &data, &len);
 8001040:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001044:	f107 020a 	add.w	r2, r7, #10
 8001048:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 800104c:	4618      	mov	r0, r3
 800104e:	f010 fb33 	bl	80116b8 <netbuf_data>
				  answer_len = ethernet_answer(data, len, answer);
 8001052:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8001056:	f507 7394 	add.w	r3, r7, #296	; 0x128
 800105a:	f5a3 738f 	sub.w	r3, r3, #286	; 0x11e
 800105e:	881b      	ldrh	r3, [r3, #0]
 8001060:	f107 020c 	add.w	r2, r7, #12
 8001064:	4619      	mov	r1, r3
 8001066:	f000 f859 	bl	800111c <ethernet_answer>
 800106a:	4603      	mov	r3, r0
 800106c:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
				  if(answer_len)
 8001070:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8001074:	2b00      	cmp	r3, #0
 8001076:	d010      	beq.n	800109a <ethernet_thread+0xde>
				  {
					  Send(conn, answer, answer_len, client_addr, client_port, buf);
 8001078:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800107c:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8001080:	f107 010c 	add.w	r1, r7, #12
 8001084:	9301      	str	r3, [sp, #4]
 8001086:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001090:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8001094:	f000 f812 	bl	80010bc <Send>
 8001098:	e7ba      	b.n	8001010 <ethernet_thread+0x54>
				  }
				  else netbuf_delete(buf);
 800109a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800109e:	4618      	mov	r0, r3
 80010a0:	f010 faa0 	bl	80115e4 <netbuf_delete>
			  recv_err = netconn_recv(conn, &buf);
 80010a4:	e7b4      	b.n	8001010 <ethernet_thread+0x54>

		  }
	  }
	  else
	  {
	    netconn_delete(conn);
 80010a6:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 80010aa:	f00e fd5f 	bl	800fb6c <netconn_delete>
	  }
	}
}
 80010ae:	bf00      	nop
 80010b0:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	08021cfc 	.word	0x08021cfc

080010bc <Send>:

static void Send(struct netconn *conn, uint8_t* pointer, uint16_t size, ip_addr_t *addr, uint16_t port, struct netbuf *buf)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b086      	sub	sp, #24
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	4613      	mov	r3, r2
 80010ca:	80fb      	strh	r3, [r7, #6]
	u32_t address = addr->addr;
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	617b      	str	r3, [r7, #20]
	netbuf_delete(buf);
 80010d2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010d4:	f010 fa86 	bl	80115e4 <netbuf_delete>
	buf = netbuf_new();
 80010d8:	f010 fa70 	bl	80115bc <netbuf_new>
 80010dc:	6278      	str	r0, [r7, #36]	; 0x24
	buf->port = port;
 80010de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e0:	8c3a      	ldrh	r2, [r7, #32]
 80010e2:	819a      	strh	r2, [r3, #12]
	addr->addr = address;
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	601a      	str	r2, [r3, #0]
	err_t err;
	err  = netbuf_ref(buf, pointer, size);
 80010ea:	88fb      	ldrh	r3, [r7, #6]
 80010ec:	461a      	mov	r2, r3
 80010ee:	68b9      	ldr	r1, [r7, #8]
 80010f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80010f2:	f010 fa97 	bl	8011624 <netbuf_ref>
 80010f6:	4603      	mov	r3, r0
 80010f8:	74fb      	strb	r3, [r7, #19]
	if(err==ERR_OK)
 80010fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d108      	bne.n	8001114 <Send+0x58>
	{
		netconn_sendto(conn, buf, addr, port);
 8001102:	8c3b      	ldrh	r3, [r7, #32]
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001108:	68f8      	ldr	r0, [r7, #12]
 800110a:	f00e ff79 	bl	8010000 <netconn_sendto>
		netbuf_delete(buf);
 800110e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001110:	f010 fa68 	bl	80115e4 <netbuf_delete>
	}
}
 8001114:	bf00      	nop
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}

0800111c <ethernet_answer>:

//Возвращает кол-во байт для отправки клиенту
static int ethernet_answer(uint8_t *data, uint16_t data_length, uint8_t *answer)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	60f8      	str	r0, [r7, #12]
 8001124:	460b      	mov	r3, r1
 8001126:	607a      	str	r2, [r7, #4]
 8001128:	817b      	strh	r3, [r7, #10]
	int result = ModbusParse(data, data_length, answer, ETHERNET);
 800112a:	8979      	ldrh	r1, [r7, #10]
 800112c:	2301      	movs	r3, #1
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	68f8      	ldr	r0, [r7, #12]
 8001132:	f002 fc0d 	bl	8003950 <ModbusParse>
 8001136:	6178      	str	r0, [r7, #20]
	if(result)return result;
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <ethernet_answer+0x26>
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	e00d      	b.n	800115e <ethernet_answer+0x42>
	result = OnKeyPress(data, data_length, answer);
 8001142:	897b      	ldrh	r3, [r7, #10]
 8001144:	b2db      	uxtb	r3, r3
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	4619      	mov	r1, r3
 800114a:	68f8      	ldr	r0, [r7, #12]
 800114c:	f000 fc96 	bl	8001a7c <OnKeyPress>
 8001150:	6178      	str	r0, [r7, #20]
	if(result!=0)return 81;
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <ethernet_answer+0x40>
 8001158:	2351      	movs	r3, #81	; 0x51
 800115a:	e000      	b.n	800115e <ethernet_answer+0x42>
	return 0;
 800115c:	2300      	movs	r3, #0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3718      	adds	r7, #24
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <framDataRead>:
#include <fram.h>

extern SPI_HandleTypeDef hspi3;

int framDataRead (uint16_t address, uint8_t * data, uint16_t size)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	6039      	str	r1, [r7, #0]
 8001172:	80fb      	strh	r3, [r7, #6]
 8001174:	4613      	mov	r3, r2
 8001176:	80bb      	strh	r3, [r7, #4]
	int result = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
	uint8_t buff[3];

	buff[0] = FRAM_CMD_READ;
 800117c:	2303      	movs	r3, #3
 800117e:	723b      	strb	r3, [r7, #8]
	buff[1] = address >> 8;
 8001180:	88fb      	ldrh	r3, [r7, #6]
 8001182:	0a1b      	lsrs	r3, r3, #8
 8001184:	b29b      	uxth	r3, r3
 8001186:	b2db      	uxtb	r3, r3
 8001188:	727b      	strb	r3, [r7, #9]
	buff[2] = address & 0xFF;
 800118a:	88fb      	ldrh	r3, [r7, #6]
 800118c:	b2db      	uxtb	r3, r3
 800118e:	72bb      	strb	r3, [r7, #10]
	HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_RESET);
 8001190:	2200      	movs	r2, #0
 8001192:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001196:	4811      	ldr	r0, [pc, #68]	; (80011dc <framDataRead+0x74>)
 8001198:	f007 fa16 	bl	80085c8 <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(&hspi3, buff, 3, 200);
 800119c:	f107 0108 	add.w	r1, r7, #8
 80011a0:	23c8      	movs	r3, #200	; 0xc8
 80011a2:	2203      	movs	r2, #3
 80011a4:	480e      	ldr	r0, [pc, #56]	; (80011e0 <framDataRead+0x78>)
 80011a6:	f007 ffa4 	bl	80090f2 <HAL_SPI_Transmit>
 80011aa:	4603      	mov	r3, r0
 80011ac:	60fb      	str	r3, [r7, #12]
	result |= HAL_SPI_Receive(&hspi3, data, size, 200);
 80011ae:	88ba      	ldrh	r2, [r7, #4]
 80011b0:	23c8      	movs	r3, #200	; 0xc8
 80011b2:	6839      	ldr	r1, [r7, #0]
 80011b4:	480a      	ldr	r0, [pc, #40]	; (80011e0 <framDataRead+0x78>)
 80011b6:	f008 f8d8 	bl	800936a <HAL_SPI_Receive>
 80011ba:	4603      	mov	r3, r0
 80011bc:	461a      	mov	r2, r3
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	4313      	orrs	r3, r2
 80011c2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_SET);
 80011c4:	2201      	movs	r2, #1
 80011c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011ca:	4804      	ldr	r0, [pc, #16]	; (80011dc <framDataRead+0x74>)
 80011cc:	f007 f9fc 	bl	80085c8 <HAL_GPIO_WritePin>

	return result;
 80011d0:	68fb      	ldr	r3, [r7, #12]
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3710      	adds	r7, #16
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40020000 	.word	0x40020000
 80011e0:	20000978 	.word	0x20000978

080011e4 <framDataWrite>:

int framDataWrite (uint16_t address, uint8_t * data, uint16_t size)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	4603      	mov	r3, r0
 80011ec:	6039      	str	r1, [r7, #0]
 80011ee:	80fb      	strh	r3, [r7, #6]
 80011f0:	4613      	mov	r3, r2
 80011f2:	80bb      	strh	r3, [r7, #4]
	int result = 0, status = 0, cntr = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	617b      	str	r3, [r7, #20]
 80011f8:	2300      	movs	r3, #0
 80011fa:	613b      	str	r3, [r7, #16]
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
	uint8_t buff[3];

	buff[0] = FRAM_CMD_WREN;
 8001200:	2306      	movs	r3, #6
 8001202:	723b      	strb	r3, [r7, #8]
	HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_RESET);
 8001204:	2200      	movs	r2, #0
 8001206:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800120a:	483f      	ldr	r0, [pc, #252]	; (8001308 <framDataWrite+0x124>)
 800120c:	f007 f9dc 	bl	80085c8 <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(&hspi3, buff, 1, 200);
 8001210:	f107 0108 	add.w	r1, r7, #8
 8001214:	23c8      	movs	r3, #200	; 0xc8
 8001216:	2201      	movs	r2, #1
 8001218:	483c      	ldr	r0, [pc, #240]	; (800130c <framDataWrite+0x128>)
 800121a:	f007 ff6a 	bl	80090f2 <HAL_SPI_Transmit>
 800121e:	4603      	mov	r3, r0
 8001220:	617b      	str	r3, [r7, #20]
	HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_SET);
 8001222:	2201      	movs	r2, #1
 8001224:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001228:	4837      	ldr	r0, [pc, #220]	; (8001308 <framDataWrite+0x124>)
 800122a:	f007 f9cd 	bl	80085c8 <HAL_GPIO_WritePin>
	buff[0] = FRAM_CMD_RDSR;
 800122e:	2305      	movs	r3, #5
 8001230:	723b      	strb	r3, [r7, #8]
	while ((status == 0) && (cntr++ < 100))
 8001232:	e027      	b.n	8001284 <framDataWrite+0xa0>
	{
		HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_RESET);
 8001234:	2200      	movs	r2, #0
 8001236:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800123a:	4833      	ldr	r0, [pc, #204]	; (8001308 <framDataWrite+0x124>)
 800123c:	f007 f9c4 	bl	80085c8 <HAL_GPIO_WritePin>
		result |= HAL_SPI_Transmit(&hspi3, buff, 1, 200);
 8001240:	f107 0108 	add.w	r1, r7, #8
 8001244:	23c8      	movs	r3, #200	; 0xc8
 8001246:	2201      	movs	r2, #1
 8001248:	4830      	ldr	r0, [pc, #192]	; (800130c <framDataWrite+0x128>)
 800124a:	f007 ff52 	bl	80090f2 <HAL_SPI_Transmit>
 800124e:	4603      	mov	r3, r0
 8001250:	461a      	mov	r2, r3
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	4313      	orrs	r3, r2
 8001256:	617b      	str	r3, [r7, #20]
		result |= HAL_SPI_Receive(&hspi3, buff, 1, 200);
 8001258:	f107 0108 	add.w	r1, r7, #8
 800125c:	23c8      	movs	r3, #200	; 0xc8
 800125e:	2201      	movs	r2, #1
 8001260:	482a      	ldr	r0, [pc, #168]	; (800130c <framDataWrite+0x128>)
 8001262:	f008 f882 	bl	800936a <HAL_SPI_Receive>
 8001266:	4603      	mov	r3, r0
 8001268:	461a      	mov	r2, r3
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	4313      	orrs	r3, r2
 800126e:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_SET);
 8001270:	2201      	movs	r2, #1
 8001272:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001276:	4824      	ldr	r0, [pc, #144]	; (8001308 <framDataWrite+0x124>)
 8001278:	f007 f9a6 	bl	80085c8 <HAL_GPIO_WritePin>
		status = buff[0] & 0x02;
 800127c:	7a3b      	ldrb	r3, [r7, #8]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	613b      	str	r3, [r7, #16]
	while ((status == 0) && (cntr++ < 100))
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d104      	bne.n	8001294 <framDataWrite+0xb0>
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	1c5a      	adds	r2, r3, #1
 800128e:	60fa      	str	r2, [r7, #12]
 8001290:	2b63      	cmp	r3, #99	; 0x63
 8001292:	ddcf      	ble.n	8001234 <framDataWrite+0x50>
	}
	if (!status)
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d103      	bne.n	80012a2 <framDataWrite+0xbe>
		result = -2;
 800129a:	f06f 0301 	mvn.w	r3, #1
 800129e:	617b      	str	r3, [r7, #20]
 80012a0:	e02c      	b.n	80012fc <framDataWrite+0x118>
	else
	{
		buff[0] = FRAM_CMD_WRITE;
 80012a2:	2302      	movs	r3, #2
 80012a4:	723b      	strb	r3, [r7, #8]
		buff[1] = address >> 8;
 80012a6:	88fb      	ldrh	r3, [r7, #6]
 80012a8:	0a1b      	lsrs	r3, r3, #8
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	727b      	strb	r3, [r7, #9]
		buff[2] = address & 0xFF;
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	72bb      	strb	r3, [r7, #10]
		HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012bc:	4812      	ldr	r0, [pc, #72]	; (8001308 <framDataWrite+0x124>)
 80012be:	f007 f983 	bl	80085c8 <HAL_GPIO_WritePin>
		result |= HAL_SPI_Transmit(&hspi3, buff, 3, 200);
 80012c2:	f107 0108 	add.w	r1, r7, #8
 80012c6:	23c8      	movs	r3, #200	; 0xc8
 80012c8:	2203      	movs	r2, #3
 80012ca:	4810      	ldr	r0, [pc, #64]	; (800130c <framDataWrite+0x128>)
 80012cc:	f007 ff11 	bl	80090f2 <HAL_SPI_Transmit>
 80012d0:	4603      	mov	r3, r0
 80012d2:	461a      	mov	r2, r3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	4313      	orrs	r3, r2
 80012d8:	617b      	str	r3, [r7, #20]
		result |= HAL_SPI_Transmit(&hspi3, data, size, 200);
 80012da:	88ba      	ldrh	r2, [r7, #4]
 80012dc:	23c8      	movs	r3, #200	; 0xc8
 80012de:	6839      	ldr	r1, [r7, #0]
 80012e0:	480a      	ldr	r0, [pc, #40]	; (800130c <framDataWrite+0x128>)
 80012e2:	f007 ff06 	bl	80090f2 <HAL_SPI_Transmit>
 80012e6:	4603      	mov	r3, r0
 80012e8:	461a      	mov	r2, r3
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_SET);
 80012f0:	2201      	movs	r2, #1
 80012f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012f6:	4804      	ldr	r0, [pc, #16]	; (8001308 <framDataWrite+0x124>)
 80012f8:	f007 f966 	bl	80085c8 <HAL_GPIO_WritePin>
	}

	return result;
 80012fc:	697b      	ldr	r3, [r7, #20]
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40020000 	.word	0x40020000
 800130c:	20000978 	.word	0x20000978

08001310 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	4a07      	ldr	r2, [pc, #28]	; (800133c <vApplicationGetIdleTaskMemory+0x2c>)
 8001320:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001322:	68bb      	ldr	r3, [r7, #8]
 8001324:	4a06      	ldr	r2, [pc, #24]	; (8001340 <vApplicationGetIdleTaskMemory+0x30>)
 8001326:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2280      	movs	r2, #128	; 0x80
 800132c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800132e:	bf00      	nop
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	2000044c 	.word	0x2000044c
 8001340:	20000500 	.word	0x20000500

08001344 <task_init>:
/* USER CODE END GET_IDLE_TASK_MEMORY */

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void task_init()
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b088      	sub	sp, #32
 8001348:	af02      	add	r7, sp, #8
	size_t fre = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
	fre=xPortGetFreeHeapSize();
 800134e:	f00e fa89 	bl	800f864 <xPortGetFreeHeapSize>
 8001352:	6178      	str	r0, [r7, #20]
	sys_thread_new("eth_thread1", ethernet_thread, (void*)&port1, DEFAULT_THREAD_STACKSIZE, osPriorityNormal );
 8001354:	2300      	movs	r3, #0
 8001356:	9300      	str	r3, [sp, #0]
 8001358:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800135c:	4a1d      	ldr	r2, [pc, #116]	; (80013d4 <task_init+0x90>)
 800135e:	491e      	ldr	r1, [pc, #120]	; (80013d8 <task_init+0x94>)
 8001360:	481e      	ldr	r0, [pc, #120]	; (80013dc <task_init+0x98>)
 8001362:	f01b fc21 	bl	801cba8 <sys_thread_new>
	fre=xPortGetFreeHeapSize();
 8001366:	f00e fa7d 	bl	800f864 <xPortGetFreeHeapSize>
 800136a:	6178      	str	r0, [r7, #20]
	sys_thread_new("eth_thread2", ethernet_thread, (void*)&port2, DEFAULT_THREAD_STACKSIZE, osPriorityNormal );
 800136c:	2300      	movs	r3, #0
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001374:	4a1a      	ldr	r2, [pc, #104]	; (80013e0 <task_init+0x9c>)
 8001376:	4918      	ldr	r1, [pc, #96]	; (80013d8 <task_init+0x94>)
 8001378:	481a      	ldr	r0, [pc, #104]	; (80013e4 <task_init+0xa0>)
 800137a:	f01b fc15 	bl	801cba8 <sys_thread_new>
	fre=xPortGetFreeHeapSize();
 800137e:	f00e fa71 	bl	800f864 <xPortGetFreeHeapSize>
 8001382:	6178      	str	r0, [r7, #20]
	sys_thread_new("uart_thread", uart_thread, (void*)NULL, 512, osPriorityNormal );
 8001384:	2300      	movs	r3, #0
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	f44f 7300 	mov.w	r3, #512	; 0x200
 800138c:	2200      	movs	r2, #0
 800138e:	4916      	ldr	r1, [pc, #88]	; (80013e8 <task_init+0xa4>)
 8001390:	4816      	ldr	r0, [pc, #88]	; (80013ec <task_init+0xa8>)
 8001392:	f01b fc09 	bl	801cba8 <sys_thread_new>
	fre=xPortGetFreeHeapSize();
 8001396:	f00e fa65 	bl	800f864 <xPortGetFreeHeapSize>
 800139a:	6178      	str	r0, [r7, #20]
	osMailQDef(uart_queue, UART_QUEUE_SIZE, Uart_Queue_Struct);
 800139c:	2303      	movs	r3, #3
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	2310      	movs	r3, #16
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	f107 0310 	add.w	r3, r7, #16
 80013a8:	60fb      	str	r3, [r7, #12]
	uart_queue = osMailCreate(osMailQ(uart_queue), NULL);
 80013aa:	1d3b      	adds	r3, r7, #4
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f00b fcce 	bl	800cd50 <osMailCreate>
 80013b4:	4603      	mov	r3, r0
 80013b6:	4a0e      	ldr	r2, [pc, #56]	; (80013f0 <task_init+0xac>)
 80013b8:	6013      	str	r3, [r2, #0]
	sys_thread_new("keyboard_thread", keyscan_thread, (void*)NULL, 128, osPriorityNormal );
 80013ba:	2300      	movs	r3, #0
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	2380      	movs	r3, #128	; 0x80
 80013c0:	2200      	movs	r2, #0
 80013c2:	490c      	ldr	r1, [pc, #48]	; (80013f4 <task_init+0xb0>)
 80013c4:	480c      	ldr	r0, [pc, #48]	; (80013f8 <task_init+0xb4>)
 80013c6:	f01b fbef 	bl	801cba8 <sys_thread_new>
}
 80013ca:	bf00      	nop
 80013cc:	3718      	adds	r7, #24
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20000000 	.word	0x20000000
 80013d8:	08000fbd 	.word	0x08000fbd
 80013dc:	0801e230 	.word	0x0801e230
 80013e0:	20000002 	.word	0x20000002
 80013e4:	0801e23c 	.word	0x0801e23c
 80013e8:	08005441 	.word	0x08005441
 80013ec:	0801e248 	.word	0x0801e248
 80013f0:	20000448 	.word	0x20000448
 80013f4:	080013fd 	.word	0x080013fd
 80013f8:	0801e254 	.word	0x0801e254

080013fc <keyscan_thread>:
static void key_filter_all();
static void PrintSymbol(const char *str);


void keyscan_thread(void *argument)
{
 80013fc:	b590      	push	{r4, r7, lr}
 80013fe:	b089      	sub	sp, #36	; 0x24
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
	int result = 0;
 8001404:	2300      	movs	r3, #0
 8001406:	613b      	str	r3, [r7, #16]
	int time;
	int last_time;

	result = OnKeyPress("F1", strlen("F1"), lcd);
 8001408:	4a40      	ldr	r2, [pc, #256]	; (800150c <keyscan_thread+0x110>)
 800140a:	2102      	movs	r1, #2
 800140c:	4840      	ldr	r0, [pc, #256]	; (8001510 <keyscan_thread+0x114>)
 800140e:	f000 fb35 	bl	8001a7c <OnKeyPress>
 8001412:	6138      	str	r0, [r7, #16]
	if(result!=0)
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d001      	beq.n	800141e <keyscan_thread+0x22>
	{
		SendToLcd();
 800141a:	f000 fb0f 	bl	8001a3c <SendToLcd>
	}
	while(1)
	{
		Tact_pins();
 800141e:	f000 f87d 	bl	800151c <Tact_pins>
		Key_Read();
 8001422:	f000 f987 	bl	8001734 <Key_Read>
		key_filter_all();
 8001426:	f000 f9fb 	bl	8001820 <key_filter_all>
		GetPositiveFront();
 800142a:	f000 faa9 	bl	8001980 <GetPositiveFront>
		for (int i = 0; i < 6; ++i) {
 800142e:	2300      	movs	r3, #0
 8001430:	61bb      	str	r3, [r7, #24]
 8001432:	e04a      	b.n	80014ca <keyscan_thread+0xce>
			for (int j = 0; j < 6; ++j) {
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	e041      	b.n	80014be <keyscan_thread+0xc2>
				if(positive_fronts[i][j])
 800143a:	4936      	ldr	r1, [pc, #216]	; (8001514 <keyscan_thread+0x118>)
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4613      	mov	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4413      	add	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	18ca      	adds	r2, r1, r3
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	4413      	add	r3, r2
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d032      	beq.n	80014b8 <keyscan_thread+0xbc>
				{
					if(keys[i][j]!=NULL)
 8001452:	4931      	ldr	r1, [pc, #196]	; (8001518 <keyscan_thread+0x11c>)
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4613      	mov	r3, r2
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	4413      	add	r3, r2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	697a      	ldr	r2, [r7, #20]
 8001460:	4413      	add	r3, r2
 8001462:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d026      	beq.n	80014b8 <keyscan_thread+0xbc>
					{
						result = OnKeyPress(keys[i][j], strlen(keys[i][j]), lcd);
 800146a:	492b      	ldr	r1, [pc, #172]	; (8001518 <keyscan_thread+0x11c>)
 800146c:	69ba      	ldr	r2, [r7, #24]
 800146e:	4613      	mov	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	4413      	add	r3, r2
 8001474:	005b      	lsls	r3, r3, #1
 8001476:	697a      	ldr	r2, [r7, #20]
 8001478:	4413      	add	r3, r2
 800147a:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 800147e:	4926      	ldr	r1, [pc, #152]	; (8001518 <keyscan_thread+0x11c>)
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4613      	mov	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4413      	add	r3, r2
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	697a      	ldr	r2, [r7, #20]
 800148c:	4413      	add	r3, r2
 800148e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001492:	4618      	mov	r0, r3
 8001494:	f7fe fe9c 	bl	80001d0 <strlen>
 8001498:	4603      	mov	r3, r0
 800149a:	b2db      	uxtb	r3, r3
 800149c:	4a1b      	ldr	r2, [pc, #108]	; (800150c <keyscan_thread+0x110>)
 800149e:	4619      	mov	r1, r3
 80014a0:	4620      	mov	r0, r4
 80014a2:	f000 faeb 	bl	8001a7c <OnKeyPress>
 80014a6:	6138      	str	r0, [r7, #16]
						if(result!=0)
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d004      	beq.n	80014b8 <keyscan_thread+0xbc>
						{
							SendToLcd();
 80014ae:	f000 fac5 	bl	8001a3c <SendToLcd>
							SetCursor(47);
 80014b2:	202f      	movs	r0, #47	; 0x2f
 80014b4:	f001 fcde 	bl	8002e74 <SetCursor>
			for (int j = 0; j < 6; ++j) {
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	3301      	adds	r3, #1
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	2b05      	cmp	r3, #5
 80014c2:	ddba      	ble.n	800143a <keyscan_thread+0x3e>
		for (int i = 0; i < 6; ++i) {
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	3301      	adds	r3, #1
 80014c8:	61bb      	str	r3, [r7, #24]
 80014ca:	69bb      	ldr	r3, [r7, #24]
 80014cc:	2b05      	cmp	r3, #5
 80014ce:	ddb1      	ble.n	8001434 <keyscan_thread+0x38>
						}
					}
				}
			}
		}
		time = HAL_GetTick();
 80014d0:	f004 fa90 	bl	80059f4 <HAL_GetTick>
 80014d4:	4603      	mov	r3, r0
 80014d6:	60fb      	str	r3, [r7, #12]
		if((time-last_time)>500)
 80014d8:	68fa      	ldr	r2, [r7, #12]
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80014e2:	dd0f      	ble.n	8001504 <keyscan_thread+0x108>
		{
			result = LcdUpdate(lcd);
 80014e4:	4809      	ldr	r0, [pc, #36]	; (800150c <keyscan_thread+0x110>)
 80014e6:	f001 fb3d 	bl	8002b64 <LcdUpdate>
 80014ea:	4603      	mov	r3, r0
 80014ec:	613b      	str	r3, [r7, #16]
			if(result!=0)
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d005      	beq.n	8001500 <keyscan_thread+0x104>
			{
				SendToLcd();
 80014f4:	f000 faa2 	bl	8001a3c <SendToLcd>
				SetCursor(-1);
 80014f8:	f04f 30ff 	mov.w	r0, #4294967295
 80014fc:	f001 fcba 	bl	8002e74 <SetCursor>
			}
			last_time = time;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	61fb      	str	r3, [r7, #28]
		}
		osDelay(2);
 8001504:	2002      	movs	r0, #2
 8001506:	f00b f8cc 	bl	800c6a2 <osDelay>
		Tact_pins();
 800150a:	e788      	b.n	800141e <keyscan_thread+0x22>
 800150c:	200007b8 	.word	0x200007b8
 8001510:	0801e27c 	.word	0x0801e27c
 8001514:	20000794 	.word	0x20000794
 8001518:	20000004 	.word	0x20000004

0800151c <Tact_pins>:
	}
}

static void Tact_pins(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
	out_key_pin = (out_key_pin+1)%COLUMNS_COUNT;
 8001520:	4b81      	ldr	r3, [pc, #516]	; (8001728 <Tact_pins+0x20c>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	1c5a      	adds	r2, r3, #1
 8001526:	4b81      	ldr	r3, [pc, #516]	; (800172c <Tact_pins+0x210>)
 8001528:	fb83 3102 	smull	r3, r1, r3, r2
 800152c:	17d3      	asrs	r3, r2, #31
 800152e:	1ac9      	subs	r1, r1, r3
 8001530:	460b      	mov	r3, r1
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	440b      	add	r3, r1
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	1ad1      	subs	r1, r2, r3
 800153a:	b2ca      	uxtb	r2, r1
 800153c:	4b7a      	ldr	r3, [pc, #488]	; (8001728 <Tact_pins+0x20c>)
 800153e:	701a      	strb	r2, [r3, #0]
	switch(out_key_pin)
 8001540:	4b79      	ldr	r3, [pc, #484]	; (8001728 <Tact_pins+0x20c>)
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b05      	cmp	r3, #5
 8001546:	f200 80ed 	bhi.w	8001724 <Tact_pins+0x208>
 800154a:	a201      	add	r2, pc, #4	; (adr r2, 8001550 <Tact_pins+0x34>)
 800154c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001550:	08001569 	.word	0x08001569
 8001554:	080015b3 	.word	0x080015b3
 8001558:	080015fd 	.word	0x080015fd
 800155c:	08001647 	.word	0x08001647
 8001560:	08001691 	.word	0x08001691
 8001564:	080016db 	.word	0x080016db
	{
		case 0:
			C0_HIGH;
 8001568:	2201      	movs	r2, #1
 800156a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800156e:	4870      	ldr	r0, [pc, #448]	; (8001730 <Tact_pins+0x214>)
 8001570:	f007 f82a 	bl	80085c8 <HAL_GPIO_WritePin>
			C1_LOW;
 8001574:	2200      	movs	r2, #0
 8001576:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800157a:	486d      	ldr	r0, [pc, #436]	; (8001730 <Tact_pins+0x214>)
 800157c:	f007 f824 	bl	80085c8 <HAL_GPIO_WritePin>
			C2_LOW;
 8001580:	2200      	movs	r2, #0
 8001582:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001586:	486a      	ldr	r0, [pc, #424]	; (8001730 <Tact_pins+0x214>)
 8001588:	f007 f81e 	bl	80085c8 <HAL_GPIO_WritePin>
			C3_LOW;
 800158c:	2200      	movs	r2, #0
 800158e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001592:	4867      	ldr	r0, [pc, #412]	; (8001730 <Tact_pins+0x214>)
 8001594:	f007 f818 	bl	80085c8 <HAL_GPIO_WritePin>
			C4_LOW;
 8001598:	2200      	movs	r2, #0
 800159a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800159e:	4864      	ldr	r0, [pc, #400]	; (8001730 <Tact_pins+0x214>)
 80015a0:	f007 f812 	bl	80085c8 <HAL_GPIO_WritePin>
			C5_LOW;
 80015a4:	2200      	movs	r2, #0
 80015a6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015aa:	4861      	ldr	r0, [pc, #388]	; (8001730 <Tact_pins+0x214>)
 80015ac:	f007 f80c 	bl	80085c8 <HAL_GPIO_WritePin>
			break;
 80015b0:	e0b8      	b.n	8001724 <Tact_pins+0x208>
		case 1:
			C0_LOW;
 80015b2:	2200      	movs	r2, #0
 80015b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015b8:	485d      	ldr	r0, [pc, #372]	; (8001730 <Tact_pins+0x214>)
 80015ba:	f007 f805 	bl	80085c8 <HAL_GPIO_WritePin>
			C1_HIGH;
 80015be:	2201      	movs	r2, #1
 80015c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015c4:	485a      	ldr	r0, [pc, #360]	; (8001730 <Tact_pins+0x214>)
 80015c6:	f006 ffff 	bl	80085c8 <HAL_GPIO_WritePin>
			C2_LOW;
 80015ca:	2200      	movs	r2, #0
 80015cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80015d0:	4857      	ldr	r0, [pc, #348]	; (8001730 <Tact_pins+0x214>)
 80015d2:	f006 fff9 	bl	80085c8 <HAL_GPIO_WritePin>
			C3_LOW;
 80015d6:	2200      	movs	r2, #0
 80015d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80015dc:	4854      	ldr	r0, [pc, #336]	; (8001730 <Tact_pins+0x214>)
 80015de:	f006 fff3 	bl	80085c8 <HAL_GPIO_WritePin>
			C4_LOW;
 80015e2:	2200      	movs	r2, #0
 80015e4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015e8:	4851      	ldr	r0, [pc, #324]	; (8001730 <Tact_pins+0x214>)
 80015ea:	f006 ffed 	bl	80085c8 <HAL_GPIO_WritePin>
			C5_LOW;
 80015ee:	2200      	movs	r2, #0
 80015f0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80015f4:	484e      	ldr	r0, [pc, #312]	; (8001730 <Tact_pins+0x214>)
 80015f6:	f006 ffe7 	bl	80085c8 <HAL_GPIO_WritePin>
			break;
 80015fa:	e093      	b.n	8001724 <Tact_pins+0x208>
		case 2:
			C0_LOW;
 80015fc:	2200      	movs	r2, #0
 80015fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001602:	484b      	ldr	r0, [pc, #300]	; (8001730 <Tact_pins+0x214>)
 8001604:	f006 ffe0 	bl	80085c8 <HAL_GPIO_WritePin>
			C1_LOW;
 8001608:	2200      	movs	r2, #0
 800160a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800160e:	4848      	ldr	r0, [pc, #288]	; (8001730 <Tact_pins+0x214>)
 8001610:	f006 ffda 	bl	80085c8 <HAL_GPIO_WritePin>
			C2_HIGH;
 8001614:	2201      	movs	r2, #1
 8001616:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800161a:	4845      	ldr	r0, [pc, #276]	; (8001730 <Tact_pins+0x214>)
 800161c:	f006 ffd4 	bl	80085c8 <HAL_GPIO_WritePin>
			C3_LOW;
 8001620:	2200      	movs	r2, #0
 8001622:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001626:	4842      	ldr	r0, [pc, #264]	; (8001730 <Tact_pins+0x214>)
 8001628:	f006 ffce 	bl	80085c8 <HAL_GPIO_WritePin>
			C4_LOW;
 800162c:	2200      	movs	r2, #0
 800162e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001632:	483f      	ldr	r0, [pc, #252]	; (8001730 <Tact_pins+0x214>)
 8001634:	f006 ffc8 	bl	80085c8 <HAL_GPIO_WritePin>
			C5_LOW;
 8001638:	2200      	movs	r2, #0
 800163a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800163e:	483c      	ldr	r0, [pc, #240]	; (8001730 <Tact_pins+0x214>)
 8001640:	f006 ffc2 	bl	80085c8 <HAL_GPIO_WritePin>
			break;
 8001644:	e06e      	b.n	8001724 <Tact_pins+0x208>
		case 3:
			C0_LOW;
 8001646:	2200      	movs	r2, #0
 8001648:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800164c:	4838      	ldr	r0, [pc, #224]	; (8001730 <Tact_pins+0x214>)
 800164e:	f006 ffbb 	bl	80085c8 <HAL_GPIO_WritePin>
			C1_LOW;
 8001652:	2200      	movs	r2, #0
 8001654:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001658:	4835      	ldr	r0, [pc, #212]	; (8001730 <Tact_pins+0x214>)
 800165a:	f006 ffb5 	bl	80085c8 <HAL_GPIO_WritePin>
			C2_LOW;
 800165e:	2200      	movs	r2, #0
 8001660:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001664:	4832      	ldr	r0, [pc, #200]	; (8001730 <Tact_pins+0x214>)
 8001666:	f006 ffaf 	bl	80085c8 <HAL_GPIO_WritePin>
			C3_HIGH;
 800166a:	2201      	movs	r2, #1
 800166c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001670:	482f      	ldr	r0, [pc, #188]	; (8001730 <Tact_pins+0x214>)
 8001672:	f006 ffa9 	bl	80085c8 <HAL_GPIO_WritePin>
			C4_LOW;
 8001676:	2200      	movs	r2, #0
 8001678:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800167c:	482c      	ldr	r0, [pc, #176]	; (8001730 <Tact_pins+0x214>)
 800167e:	f006 ffa3 	bl	80085c8 <HAL_GPIO_WritePin>
			C5_LOW;
 8001682:	2200      	movs	r2, #0
 8001684:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001688:	4829      	ldr	r0, [pc, #164]	; (8001730 <Tact_pins+0x214>)
 800168a:	f006 ff9d 	bl	80085c8 <HAL_GPIO_WritePin>
			break;
 800168e:	e049      	b.n	8001724 <Tact_pins+0x208>
		case 4:
			C0_LOW;
 8001690:	2200      	movs	r2, #0
 8001692:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001696:	4826      	ldr	r0, [pc, #152]	; (8001730 <Tact_pins+0x214>)
 8001698:	f006 ff96 	bl	80085c8 <HAL_GPIO_WritePin>
			C1_LOW;
 800169c:	2200      	movs	r2, #0
 800169e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016a2:	4823      	ldr	r0, [pc, #140]	; (8001730 <Tact_pins+0x214>)
 80016a4:	f006 ff90 	bl	80085c8 <HAL_GPIO_WritePin>
			C2_LOW;
 80016a8:	2200      	movs	r2, #0
 80016aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016ae:	4820      	ldr	r0, [pc, #128]	; (8001730 <Tact_pins+0x214>)
 80016b0:	f006 ff8a 	bl	80085c8 <HAL_GPIO_WritePin>
			C3_LOW;
 80016b4:	2200      	movs	r2, #0
 80016b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80016ba:	481d      	ldr	r0, [pc, #116]	; (8001730 <Tact_pins+0x214>)
 80016bc:	f006 ff84 	bl	80085c8 <HAL_GPIO_WritePin>
			C4_HIGH;
 80016c0:	2201      	movs	r2, #1
 80016c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016c6:	481a      	ldr	r0, [pc, #104]	; (8001730 <Tact_pins+0x214>)
 80016c8:	f006 ff7e 	bl	80085c8 <HAL_GPIO_WritePin>
			C5_LOW;
 80016cc:	2200      	movs	r2, #0
 80016ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016d2:	4817      	ldr	r0, [pc, #92]	; (8001730 <Tact_pins+0x214>)
 80016d4:	f006 ff78 	bl	80085c8 <HAL_GPIO_WritePin>
			break;
 80016d8:	e024      	b.n	8001724 <Tact_pins+0x208>
		case 5:
			C0_LOW;
 80016da:	2200      	movs	r2, #0
 80016dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016e0:	4813      	ldr	r0, [pc, #76]	; (8001730 <Tact_pins+0x214>)
 80016e2:	f006 ff71 	bl	80085c8 <HAL_GPIO_WritePin>
			C1_LOW;
 80016e6:	2200      	movs	r2, #0
 80016e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016ec:	4810      	ldr	r0, [pc, #64]	; (8001730 <Tact_pins+0x214>)
 80016ee:	f006 ff6b 	bl	80085c8 <HAL_GPIO_WritePin>
			C2_LOW;
 80016f2:	2200      	movs	r2, #0
 80016f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016f8:	480d      	ldr	r0, [pc, #52]	; (8001730 <Tact_pins+0x214>)
 80016fa:	f006 ff65 	bl	80085c8 <HAL_GPIO_WritePin>
			C3_LOW;
 80016fe:	2200      	movs	r2, #0
 8001700:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001704:	480a      	ldr	r0, [pc, #40]	; (8001730 <Tact_pins+0x214>)
 8001706:	f006 ff5f 	bl	80085c8 <HAL_GPIO_WritePin>
			C4_LOW;
 800170a:	2200      	movs	r2, #0
 800170c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001710:	4807      	ldr	r0, [pc, #28]	; (8001730 <Tact_pins+0x214>)
 8001712:	f006 ff59 	bl	80085c8 <HAL_GPIO_WritePin>
			C5_HIGH;
 8001716:	2201      	movs	r2, #1
 8001718:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800171c:	4804      	ldr	r0, [pc, #16]	; (8001730 <Tact_pins+0x214>)
 800171e:	f006 ff53 	bl	80085c8 <HAL_GPIO_WritePin>
			break;
 8001722:	bf00      	nop
	}
}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000700 	.word	0x20000700
 800172c:	2aaaaaab 	.word	0x2aaaaaab
 8001730:	40020c00 	.word	0x40020c00

08001734 <Key_Read>:


static void Key_Read(void)
{
 8001734:	b598      	push	{r3, r4, r7, lr}
 8001736:	af00      	add	r7, sp, #0
	key_input_mask[out_key_pin][0] = R0_IN;
 8001738:	4b36      	ldr	r3, [pc, #216]	; (8001814 <Key_Read+0xe0>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	461c      	mov	r4, r3
 800173e:	2101      	movs	r1, #1
 8001740:	4835      	ldr	r0, [pc, #212]	; (8001818 <Key_Read+0xe4>)
 8001742:	f006 ff29 	bl	8008598 <HAL_GPIO_ReadPin>
 8001746:	4603      	mov	r3, r0
 8001748:	4619      	mov	r1, r3
 800174a:	4a34      	ldr	r2, [pc, #208]	; (800181c <Key_Read+0xe8>)
 800174c:	4623      	mov	r3, r4
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	4423      	add	r3, r4
 8001752:	005b      	lsls	r3, r3, #1
 8001754:	4413      	add	r3, r2
 8001756:	460a      	mov	r2, r1
 8001758:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][1] = R1_IN;
 800175a:	4b2e      	ldr	r3, [pc, #184]	; (8001814 <Key_Read+0xe0>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	461c      	mov	r4, r3
 8001760:	2102      	movs	r1, #2
 8001762:	482d      	ldr	r0, [pc, #180]	; (8001818 <Key_Read+0xe4>)
 8001764:	f006 ff18 	bl	8008598 <HAL_GPIO_ReadPin>
 8001768:	4603      	mov	r3, r0
 800176a:	4619      	mov	r1, r3
 800176c:	4a2b      	ldr	r2, [pc, #172]	; (800181c <Key_Read+0xe8>)
 800176e:	4623      	mov	r3, r4
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	4423      	add	r3, r4
 8001774:	005b      	lsls	r3, r3, #1
 8001776:	4413      	add	r3, r2
 8001778:	3301      	adds	r3, #1
 800177a:	460a      	mov	r2, r1
 800177c:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][2] = R2_IN;
 800177e:	4b25      	ldr	r3, [pc, #148]	; (8001814 <Key_Read+0xe0>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	461c      	mov	r4, r3
 8001784:	2104      	movs	r1, #4
 8001786:	4824      	ldr	r0, [pc, #144]	; (8001818 <Key_Read+0xe4>)
 8001788:	f006 ff06 	bl	8008598 <HAL_GPIO_ReadPin>
 800178c:	4603      	mov	r3, r0
 800178e:	4619      	mov	r1, r3
 8001790:	4a22      	ldr	r2, [pc, #136]	; (800181c <Key_Read+0xe8>)
 8001792:	4623      	mov	r3, r4
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	4423      	add	r3, r4
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	4413      	add	r3, r2
 800179c:	3302      	adds	r3, #2
 800179e:	460a      	mov	r2, r1
 80017a0:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][3] = R3_IN;
 80017a2:	4b1c      	ldr	r3, [pc, #112]	; (8001814 <Key_Read+0xe0>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	461c      	mov	r4, r3
 80017a8:	2108      	movs	r1, #8
 80017aa:	481b      	ldr	r0, [pc, #108]	; (8001818 <Key_Read+0xe4>)
 80017ac:	f006 fef4 	bl	8008598 <HAL_GPIO_ReadPin>
 80017b0:	4603      	mov	r3, r0
 80017b2:	4619      	mov	r1, r3
 80017b4:	4a19      	ldr	r2, [pc, #100]	; (800181c <Key_Read+0xe8>)
 80017b6:	4623      	mov	r3, r4
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	4423      	add	r3, r4
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	4413      	add	r3, r2
 80017c0:	3303      	adds	r3, #3
 80017c2:	460a      	mov	r2, r1
 80017c4:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][4] = R4_IN;
 80017c6:	4b13      	ldr	r3, [pc, #76]	; (8001814 <Key_Read+0xe0>)
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	461c      	mov	r4, r3
 80017cc:	2110      	movs	r1, #16
 80017ce:	4812      	ldr	r0, [pc, #72]	; (8001818 <Key_Read+0xe4>)
 80017d0:	f006 fee2 	bl	8008598 <HAL_GPIO_ReadPin>
 80017d4:	4603      	mov	r3, r0
 80017d6:	4619      	mov	r1, r3
 80017d8:	4a10      	ldr	r2, [pc, #64]	; (800181c <Key_Read+0xe8>)
 80017da:	4623      	mov	r3, r4
 80017dc:	005b      	lsls	r3, r3, #1
 80017de:	4423      	add	r3, r4
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	4413      	add	r3, r2
 80017e4:	3304      	adds	r3, #4
 80017e6:	460a      	mov	r2, r1
 80017e8:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][5] = R5_IN;
 80017ea:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <Key_Read+0xe0>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	461c      	mov	r4, r3
 80017f0:	2120      	movs	r1, #32
 80017f2:	4809      	ldr	r0, [pc, #36]	; (8001818 <Key_Read+0xe4>)
 80017f4:	f006 fed0 	bl	8008598 <HAL_GPIO_ReadPin>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4619      	mov	r1, r3
 80017fc:	4a07      	ldr	r2, [pc, #28]	; (800181c <Key_Read+0xe8>)
 80017fe:	4623      	mov	r3, r4
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	4423      	add	r3, r4
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	4413      	add	r3, r2
 8001808:	3305      	adds	r3, #5
 800180a:	460a      	mov	r2, r1
 800180c:	701a      	strb	r2, [r3, #0]
}
 800180e:	bf00      	nop
 8001810:	bd98      	pop	{r3, r4, r7, pc}
 8001812:	bf00      	nop
 8001814:	20000700 	.word	0x20000700
 8001818:	40020c00 	.word	0x40020c00
 800181c:	20000704 	.word	0x20000704

08001820 <key_filter_all>:

static void key_filter_all()
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
	for (int x = 0; x < COLUMNS_COUNT; ++x) {
 8001826:	2300      	movs	r3, #0
 8001828:	607b      	str	r3, [r7, #4]
 800182a:	e013      	b.n	8001854 <key_filter_all+0x34>
		for (int y = 0; y < ROWS_COUNT; ++y) {
 800182c:	2300      	movs	r3, #0
 800182e:	603b      	str	r3, [r7, #0]
 8001830:	e00a      	b.n	8001848 <key_filter_all+0x28>
			key_filter(x, y);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	b2db      	uxtb	r3, r3
 8001836:	683a      	ldr	r2, [r7, #0]
 8001838:	b2d2      	uxtb	r2, r2
 800183a:	4611      	mov	r1, r2
 800183c:	4618      	mov	r0, r3
 800183e:	f000 f811 	bl	8001864 <key_filter>
		for (int y = 0; y < ROWS_COUNT; ++y) {
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	3301      	adds	r3, #1
 8001846:	603b      	str	r3, [r7, #0]
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	2b05      	cmp	r3, #5
 800184c:	ddf1      	ble.n	8001832 <key_filter_all+0x12>
	for (int x = 0; x < COLUMNS_COUNT; ++x) {
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	3301      	adds	r3, #1
 8001852:	607b      	str	r3, [r7, #4]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b05      	cmp	r3, #5
 8001858:	dde8      	ble.n	800182c <key_filter_all+0xc>
		}
	}
}
 800185a:	bf00      	nop
 800185c:	bf00      	nop
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <key_filter>:

static void key_filter(uint8_t x, uint8_t y)
{
 8001864:	b490      	push	{r4, r7}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	460a      	mov	r2, r1
 800186e:	71fb      	strb	r3, [r7, #7]
 8001870:	4613      	mov	r3, r2
 8001872:	71bb      	strb	r3, [r7, #6]
	if(key_input_mask[x][y])
 8001874:	79fa      	ldrb	r2, [r7, #7]
 8001876:	79b9      	ldrb	r1, [r7, #6]
 8001878:	483e      	ldr	r0, [pc, #248]	; (8001974 <key_filter+0x110>)
 800187a:	4613      	mov	r3, r2
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4413      	add	r3, r2
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	4403      	add	r3, r0
 8001884:	440b      	add	r3, r1
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d01b      	beq.n	80018c4 <key_filter+0x60>
	{
		key_sence_count[x][y]= key_sence_count[x][y]>=KEY_SENCE ? KEY_SENCE : key_sence_count[x][y]+1;
 800188c:	79fa      	ldrb	r2, [r7, #7]
 800188e:	79b9      	ldrb	r1, [r7, #6]
 8001890:	4839      	ldr	r0, [pc, #228]	; (8001978 <key_filter+0x114>)
 8001892:	4613      	mov	r3, r2
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	4413      	add	r3, r2
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4403      	add	r3, r0
 800189c:	440b      	add	r3, r1
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b18      	cmp	r3, #24
 80018a2:	bf28      	it	cs
 80018a4:	2318      	movcs	r3, #24
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	79fa      	ldrb	r2, [r7, #7]
 80018aa:	79b9      	ldrb	r1, [r7, #6]
 80018ac:	3301      	adds	r3, #1
 80018ae:	b2dc      	uxtb	r4, r3
 80018b0:	4831      	ldr	r0, [pc, #196]	; (8001978 <key_filter+0x114>)
 80018b2:	4613      	mov	r3, r2
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	4413      	add	r3, r2
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	4403      	add	r3, r0
 80018bc:	440b      	add	r3, r1
 80018be:	4622      	mov	r2, r4
 80018c0:	701a      	strb	r2, [r3, #0]
 80018c2:	e024      	b.n	800190e <key_filter+0xaa>
	}
	else{
		key_sence_count[x][y]= key_sence_count[x][y]<=0 ? 0 : key_sence_count[x][y]-1;
 80018c4:	79fa      	ldrb	r2, [r7, #7]
 80018c6:	79b9      	ldrb	r1, [r7, #6]
 80018c8:	482b      	ldr	r0, [pc, #172]	; (8001978 <key_filter+0x114>)
 80018ca:	4613      	mov	r3, r2
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	4413      	add	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4403      	add	r3, r0
 80018d4:	440b      	add	r3, r1
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00c      	beq.n	80018f6 <key_filter+0x92>
 80018dc:	79fa      	ldrb	r2, [r7, #7]
 80018de:	79b9      	ldrb	r1, [r7, #6]
 80018e0:	4825      	ldr	r0, [pc, #148]	; (8001978 <key_filter+0x114>)
 80018e2:	4613      	mov	r3, r2
 80018e4:	005b      	lsls	r3, r3, #1
 80018e6:	4413      	add	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4403      	add	r3, r0
 80018ec:	440b      	add	r3, r1
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	3b01      	subs	r3, #1
 80018f2:	b2d8      	uxtb	r0, r3
 80018f4:	e000      	b.n	80018f8 <key_filter+0x94>
 80018f6:	2000      	movs	r0, #0
 80018f8:	79fa      	ldrb	r2, [r7, #7]
 80018fa:	79b9      	ldrb	r1, [r7, #6]
 80018fc:	4c1e      	ldr	r4, [pc, #120]	; (8001978 <key_filter+0x114>)
 80018fe:	4613      	mov	r3, r2
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4413      	add	r3, r2
 8001904:	005b      	lsls	r3, r3, #1
 8001906:	4423      	add	r3, r4
 8001908:	440b      	add	r3, r1
 800190a:	4602      	mov	r2, r0
 800190c:	701a      	strb	r2, [r3, #0]
	}
	if(key_sence_count[x][y]==KEY_SENCE)key_input_filtered_mask[x][y] = 1;
 800190e:	79fa      	ldrb	r2, [r7, #7]
 8001910:	79b9      	ldrb	r1, [r7, #6]
 8001912:	4819      	ldr	r0, [pc, #100]	; (8001978 <key_filter+0x114>)
 8001914:	4613      	mov	r3, r2
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	4413      	add	r3, r2
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	4403      	add	r3, r0
 800191e:	440b      	add	r3, r1
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b19      	cmp	r3, #25
 8001924:	d10a      	bne.n	800193c <key_filter+0xd8>
 8001926:	79fa      	ldrb	r2, [r7, #7]
 8001928:	79b9      	ldrb	r1, [r7, #6]
 800192a:	4814      	ldr	r0, [pc, #80]	; (800197c <key_filter+0x118>)
 800192c:	4613      	mov	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4413      	add	r3, r2
 8001932:	005b      	lsls	r3, r3, #1
 8001934:	4403      	add	r3, r0
 8001936:	440b      	add	r3, r1
 8001938:	2201      	movs	r2, #1
 800193a:	701a      	strb	r2, [r3, #0]
	if(key_sence_count[x][y]==0)key_input_filtered_mask[x][y] = 0;
 800193c:	79fa      	ldrb	r2, [r7, #7]
 800193e:	79b9      	ldrb	r1, [r7, #6]
 8001940:	480d      	ldr	r0, [pc, #52]	; (8001978 <key_filter+0x114>)
 8001942:	4613      	mov	r3, r2
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	4413      	add	r3, r2
 8001948:	005b      	lsls	r3, r3, #1
 800194a:	4403      	add	r3, r0
 800194c:	440b      	add	r3, r1
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d10a      	bne.n	800196a <key_filter+0x106>
 8001954:	79fa      	ldrb	r2, [r7, #7]
 8001956:	79b9      	ldrb	r1, [r7, #6]
 8001958:	4808      	ldr	r0, [pc, #32]	; (800197c <key_filter+0x118>)
 800195a:	4613      	mov	r3, r2
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	4413      	add	r3, r2
 8001960:	005b      	lsls	r3, r3, #1
 8001962:	4403      	add	r3, r0
 8001964:	440b      	add	r3, r1
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bc90      	pop	{r4, r7}
 8001972:	4770      	bx	lr
 8001974:	20000704 	.word	0x20000704
 8001978:	20000770 	.word	0x20000770
 800197c:	20000728 	.word	0x20000728

08001980 <GetPositiveFront>:

static void GetPositiveFront()
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
	for (int col = 0; col < COLUMNS_COUNT; ++col) {
 8001986:	2300      	movs	r3, #0
 8001988:	607b      	str	r3, [r7, #4]
 800198a:	e047      	b.n	8001a1c <GetPositiveFront+0x9c>
		for (int row = 0; row < ROWS_COUNT; ++row) {
 800198c:	2300      	movs	r3, #0
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	e03e      	b.n	8001a10 <GetPositiveFront+0x90>
			positive_fronts[col][row] = key_input_filtered_mask[col][row]==1 && key_input_old_mask[col][row]==0 ? 1:0;
 8001992:	4927      	ldr	r1, [pc, #156]	; (8001a30 <GetPositiveFront+0xb0>)
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	4613      	mov	r3, r2
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	4413      	add	r3, r2
 800199c:	005b      	lsls	r3, r3, #1
 800199e:	18ca      	adds	r2, r1, r3
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	4413      	add	r3, r2
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b01      	cmp	r3, #1
 80019a8:	d10d      	bne.n	80019c6 <GetPositiveFront+0x46>
 80019aa:	4922      	ldr	r1, [pc, #136]	; (8001a34 <GetPositiveFront+0xb4>)
 80019ac:	687a      	ldr	r2, [r7, #4]
 80019ae:	4613      	mov	r3, r2
 80019b0:	005b      	lsls	r3, r3, #1
 80019b2:	4413      	add	r3, r2
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	18ca      	adds	r2, r1, r3
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	4413      	add	r3, r2
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d101      	bne.n	80019c6 <GetPositiveFront+0x46>
 80019c2:	2301      	movs	r3, #1
 80019c4:	e000      	b.n	80019c8 <GetPositiveFront+0x48>
 80019c6:	2300      	movs	r3, #0
 80019c8:	b2d8      	uxtb	r0, r3
 80019ca:	491b      	ldr	r1, [pc, #108]	; (8001a38 <GetPositiveFront+0xb8>)
 80019cc:	687a      	ldr	r2, [r7, #4]
 80019ce:	4613      	mov	r3, r2
 80019d0:	005b      	lsls	r3, r3, #1
 80019d2:	4413      	add	r3, r2
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	18ca      	adds	r2, r1, r3
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	4413      	add	r3, r2
 80019dc:	4602      	mov	r2, r0
 80019de:	701a      	strb	r2, [r3, #0]
			key_input_old_mask[col][row] = key_input_filtered_mask[col][row];
 80019e0:	4913      	ldr	r1, [pc, #76]	; (8001a30 <GetPositiveFront+0xb0>)
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	4613      	mov	r3, r2
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	4413      	add	r3, r2
 80019ea:	005b      	lsls	r3, r3, #1
 80019ec:	18ca      	adds	r2, r1, r3
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	4413      	add	r3, r2
 80019f2:	7818      	ldrb	r0, [r3, #0]
 80019f4:	490f      	ldr	r1, [pc, #60]	; (8001a34 <GetPositiveFront+0xb4>)
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	4613      	mov	r3, r2
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	4413      	add	r3, r2
 80019fe:	005b      	lsls	r3, r3, #1
 8001a00:	18ca      	adds	r2, r1, r3
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	4413      	add	r3, r2
 8001a06:	4602      	mov	r2, r0
 8001a08:	701a      	strb	r2, [r3, #0]
		for (int row = 0; row < ROWS_COUNT; ++row) {
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	3301      	adds	r3, #1
 8001a0e:	603b      	str	r3, [r7, #0]
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	2b05      	cmp	r3, #5
 8001a14:	ddbd      	ble.n	8001992 <GetPositiveFront+0x12>
	for (int col = 0; col < COLUMNS_COUNT; ++col) {
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	607b      	str	r3, [r7, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b05      	cmp	r3, #5
 8001a20:	ddb4      	ble.n	800198c <GetPositiveFront+0xc>
		}
	}
}
 8001a22:	bf00      	nop
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	20000728 	.word	0x20000728
 8001a34:	2000074c 	.word	0x2000074c
 8001a38:	20000794 	.word	0x20000794

08001a3c <SendToLcd>:
	row_pointer = row_pointer>=3 ? 0 : row_pointer+1;
	SendToLcd();
}

static void SendToLcd()
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
	sendStr(lcd[0], 0, 0);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2100      	movs	r1, #0
 8001a44:	4809      	ldr	r0, [pc, #36]	; (8001a6c <SendToLcd+0x30>)
 8001a46:	f001 fb03 	bl	8003050 <sendStr>
	sendStr(lcd[1], 1, 0);
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	2101      	movs	r1, #1
 8001a4e:	4808      	ldr	r0, [pc, #32]	; (8001a70 <SendToLcd+0x34>)
 8001a50:	f001 fafe 	bl	8003050 <sendStr>
	sendStr(lcd[2], 2, 0);
 8001a54:	2200      	movs	r2, #0
 8001a56:	2102      	movs	r1, #2
 8001a58:	4806      	ldr	r0, [pc, #24]	; (8001a74 <SendToLcd+0x38>)
 8001a5a:	f001 faf9 	bl	8003050 <sendStr>
	sendStr(lcd[3], 3, 0);
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2103      	movs	r1, #3
 8001a62:	4805      	ldr	r0, [pc, #20]	; (8001a78 <SendToLcd+0x3c>)
 8001a64:	f001 faf4 	bl	8003050 <sendStr>
}
 8001a68:	bf00      	nop
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	200007b8 	.word	0x200007b8
 8001a70:	200007cc 	.word	0x200007cc
 8001a74:	200007e0 	.word	0x200007e0
 8001a78:	200007f4 	.word	0x200007f4

08001a7c <OnKeyPress>:
};

static int get_answer(uint8_t len, uint8_t *req, uint8_t *answer);

int OnKeyPress(uint8_t *req,uint8_t req_length, uint8_t *answer)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b086      	sub	sp, #24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	460b      	mov	r3, r1
 8001a86:	607a      	str	r2, [r7, #4]
 8001a88:	72fb      	strb	r3, [r7, #11]
	char *p = (char*)req;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	617b      	str	r3, [r7, #20]
	if(!strncmp(p, "Enter", strlen("Enter")))
 8001a8e:	2205      	movs	r2, #5
 8001a90:	499a      	ldr	r1, [pc, #616]	; (8001cfc <OnKeyPress+0x280>)
 8001a92:	6978      	ldr	r0, [r7, #20]
 8001a94:	f01b fc41 	bl	801d31a <strncmp>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d107      	bne.n	8001aae <OnKeyPress+0x32>
	{
		if(!OnEnterPressAction()) return 0;
 8001a9e:	f000 f96f 	bl	8001d80 <OnEnterPressAction>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	f040 8110 	bne.w	8001cca <OnKeyPress+0x24e>
 8001aaa:	2300      	movs	r3, #0
 8001aac:	e122      	b.n	8001cf4 <OnKeyPress+0x278>
	}
	else if(!strncmp(p, "Esc", strlen("Esc")))
 8001aae:	2203      	movs	r2, #3
 8001ab0:	4993      	ldr	r1, [pc, #588]	; (8001d00 <OnKeyPress+0x284>)
 8001ab2:	6978      	ldr	r0, [r7, #20]
 8001ab4:	f01b fc31 	bl	801d31a <strncmp>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d107      	bne.n	8001ace <OnKeyPress+0x52>
	{
		if(!OnEscPressKey()) return 0;
 8001abe:	f000 fd2f 	bl	8002520 <OnEscPressKey>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f040 8100 	bne.w	8001cca <OnKeyPress+0x24e>
 8001aca:	2300      	movs	r3, #0
 8001acc:	e112      	b.n	8001cf4 <OnKeyPress+0x278>
	}
	else if(!strncmp(p, "Delete", strlen("Delete")))
 8001ace:	2206      	movs	r2, #6
 8001ad0:	498c      	ldr	r1, [pc, #560]	; (8001d04 <OnKeyPress+0x288>)
 8001ad2:	6978      	ldr	r0, [r7, #20]
 8001ad4:	f01b fc21 	bl	801d31a <strncmp>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d106      	bne.n	8001aec <OnKeyPress+0x70>
	{
		return get_answer(strlen("Delete"),req,answer);
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	68f9      	ldr	r1, [r7, #12]
 8001ae2:	2006      	movs	r0, #6
 8001ae4:	f000 f93a 	bl	8001d5c <get_answer>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	e103      	b.n	8001cf4 <OnKeyPress+0x278>
	}
	else if(!strncmp(p, "Up", strlen("Up")))
 8001aec:	2202      	movs	r2, #2
 8001aee:	4986      	ldr	r1, [pc, #536]	; (8001d08 <OnKeyPress+0x28c>)
 8001af0:	6978      	ldr	r0, [r7, #20]
 8001af2:	f01b fc12 	bl	801d31a <strncmp>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d107      	bne.n	8001b0c <OnKeyPress+0x90>
	{
		if(!OnUpPressKey())return 0;
 8001afc:	f000 fc28 	bl	8002350 <OnUpPressKey>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	f040 80e1 	bne.w	8001cca <OnKeyPress+0x24e>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	e0f3      	b.n	8001cf4 <OnKeyPress+0x278>
	}
	else if(!strncmp(p, "Right", strlen("Right")))
 8001b0c:	2205      	movs	r2, #5
 8001b0e:	497f      	ldr	r1, [pc, #508]	; (8001d0c <OnKeyPress+0x290>)
 8001b10:	6978      	ldr	r0, [r7, #20]
 8001b12:	f01b fc02 	bl	801d31a <strncmp>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d107      	bne.n	8001b2c <OnKeyPress+0xb0>
	{
		if(!OnRightPressKey())return 0;
 8001b1c:	f000 fb98 	bl	8002250 <OnRightPressKey>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f040 80d1 	bne.w	8001cca <OnKeyPress+0x24e>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	e0e3      	b.n	8001cf4 <OnKeyPress+0x278>
	}
	else if(!strncmp(p, "Left", strlen("Left")))
 8001b2c:	2204      	movs	r2, #4
 8001b2e:	4978      	ldr	r1, [pc, #480]	; (8001d10 <OnKeyPress+0x294>)
 8001b30:	6978      	ldr	r0, [r7, #20]
 8001b32:	f01b fbf2 	bl	801d31a <strncmp>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d107      	bne.n	8001b4c <OnKeyPress+0xd0>
	{
		if(!OnLeftPressKey())return 0;
 8001b3c:	f000 fb08 	bl	8002150 <OnLeftPressKey>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f040 80c1 	bne.w	8001cca <OnKeyPress+0x24e>
 8001b48:	2300      	movs	r3, #0
 8001b4a:	e0d3      	b.n	8001cf4 <OnKeyPress+0x278>
	}
	else if(!strncmp(p, "Down", strlen("Down")))
 8001b4c:	2204      	movs	r2, #4
 8001b4e:	4971      	ldr	r1, [pc, #452]	; (8001d14 <OnKeyPress+0x298>)
 8001b50:	6978      	ldr	r0, [r7, #20]
 8001b52:	f01b fbe2 	bl	801d31a <strncmp>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d107      	bne.n	8001b6c <OnKeyPress+0xf0>
	{
		if(!OnDownPressKey())return 0;
 8001b5c:	f000 fab0 	bl	80020c0 <OnDownPressKey>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f040 80b1 	bne.w	8001cca <OnKeyPress+0x24e>
 8001b68:	2300      	movs	r3, #0
 8001b6a:	e0c3      	b.n	8001cf4 <OnKeyPress+0x278>

	}
	else if(!strncmp(p, "F1", strlen("F1")))
 8001b6c:	2202      	movs	r2, #2
 8001b6e:	496a      	ldr	r1, [pc, #424]	; (8001d18 <OnKeyPress+0x29c>)
 8001b70:	6978      	ldr	r0, [r7, #20]
 8001b72:	f01b fbd2 	bl	801d31a <strncmp>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d107      	bne.n	8001b8c <OnKeyPress+0x110>
	{
		if(!OnF1PressKey())return 0;
 8001b7c:	f000 fc30 	bl	80023e0 <OnF1PressKey>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	f040 80a1 	bne.w	8001cca <OnKeyPress+0x24e>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	e0b3      	b.n	8001cf4 <OnKeyPress+0x278>
	}
	else if(!strncmp(p, "F2", strlen("F2")))
 8001b8c:	2202      	movs	r2, #2
 8001b8e:	4963      	ldr	r1, [pc, #396]	; (8001d1c <OnKeyPress+0x2a0>)
 8001b90:	6978      	ldr	r0, [r7, #20]
 8001b92:	f01b fbc2 	bl	801d31a <strncmp>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d107      	bne.n	8001bac <OnKeyPress+0x130>
	{
		if(!OnF2PressKey())return 0;
 8001b9c:	f000 fc32 	bl	8002404 <OnF2PressKey>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	f040 8091 	bne.w	8001cca <OnKeyPress+0x24e>
 8001ba8:	2300      	movs	r3, #0
 8001baa:	e0a3      	b.n	8001cf4 <OnKeyPress+0x278>
	}
	else if(!strncmp(p, "F3", strlen("F3")))
 8001bac:	2202      	movs	r2, #2
 8001bae:	495c      	ldr	r1, [pc, #368]	; (8001d20 <OnKeyPress+0x2a4>)
 8001bb0:	6978      	ldr	r0, [r7, #20]
 8001bb2:	f01b fbb2 	bl	801d31a <strncmp>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d107      	bne.n	8001bcc <OnKeyPress+0x150>
	{
		if(!OnF3PressKey())return 0;
 8001bbc:	f000 fc5a 	bl	8002474 <OnF3PressKey>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f040 8081 	bne.w	8001cca <OnKeyPress+0x24e>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	e093      	b.n	8001cf4 <OnKeyPress+0x278>
	}
	else if(!strncmp(p, "F4", strlen("F4")))
 8001bcc:	2202      	movs	r2, #2
 8001bce:	4955      	ldr	r1, [pc, #340]	; (8001d24 <OnKeyPress+0x2a8>)
 8001bd0:	6978      	ldr	r0, [r7, #20]
 8001bd2:	f01b fba2 	bl	801d31a <strncmp>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d106      	bne.n	8001bea <OnKeyPress+0x16e>
	{
		if(!OnF4PressKey())return 0;
 8001bdc:	f000 fc82 	bl	80024e4 <OnF4PressKey>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d171      	bne.n	8001cca <OnKeyPress+0x24e>
 8001be6:	2300      	movs	r3, #0
 8001be8:	e084      	b.n	8001cf4 <OnKeyPress+0x278>
	}
	else if(!strncmp(p, "NumPad0", strlen("NumPad0")))
 8001bea:	2207      	movs	r2, #7
 8001bec:	494e      	ldr	r1, [pc, #312]	; (8001d28 <OnKeyPress+0x2ac>)
 8001bee:	6978      	ldr	r0, [r7, #20]
 8001bf0:	f01b fb93 	bl	801d31a <strncmp>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d101      	bne.n	8001bfe <OnKeyPress+0x182>
	{
		return 0;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	e07a      	b.n	8001cf4 <OnKeyPress+0x278>
	}
	else if(!strncmp(p, "NumPad1", strlen("NumPad1")))
 8001bfe:	2207      	movs	r2, #7
 8001c00:	494a      	ldr	r1, [pc, #296]	; (8001d2c <OnKeyPress+0x2b0>)
 8001c02:	6978      	ldr	r0, [r7, #20]
 8001c04:	f01b fb89 	bl	801d31a <strncmp>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d101      	bne.n	8001c12 <OnKeyPress+0x196>
	{
		return 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	e070      	b.n	8001cf4 <OnKeyPress+0x278>
	}
	else if(!strncmp(p, "NumPad2", strlen("NumPad2")))
 8001c12:	2207      	movs	r2, #7
 8001c14:	4946      	ldr	r1, [pc, #280]	; (8001d30 <OnKeyPress+0x2b4>)
 8001c16:	6978      	ldr	r0, [r7, #20]
 8001c18:	f01b fb7f 	bl	801d31a <strncmp>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d101      	bne.n	8001c26 <OnKeyPress+0x1aa>
	{
		return 0;
 8001c22:	2300      	movs	r3, #0
 8001c24:	e066      	b.n	8001cf4 <OnKeyPress+0x278>
	}
	else if(!strncmp(p, "NumPad3", strlen("NumPad3")))
 8001c26:	2207      	movs	r2, #7
 8001c28:	4942      	ldr	r1, [pc, #264]	; (8001d34 <OnKeyPress+0x2b8>)
 8001c2a:	6978      	ldr	r0, [r7, #20]
 8001c2c:	f01b fb75 	bl	801d31a <strncmp>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <OnKeyPress+0x1be>
	{
		return 0;
 8001c36:	2300      	movs	r3, #0
 8001c38:	e05c      	b.n	8001cf4 <OnKeyPress+0x278>
	}
	else if(!strncmp(p, "NumPad4", strlen("NumPad4")))
 8001c3a:	2207      	movs	r2, #7
 8001c3c:	493e      	ldr	r1, [pc, #248]	; (8001d38 <OnKeyPress+0x2bc>)
 8001c3e:	6978      	ldr	r0, [r7, #20]
 8001c40:	f01b fb6b 	bl	801d31a <strncmp>
 8001c44:	4603      	mov	r3, r0
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <OnKeyPress+0x1d2>
	{
		return 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	e052      	b.n	8001cf4 <OnKeyPress+0x278>
	}
	else if(!strncmp(p, "NumPad5", strlen("NumPad5")))
 8001c4e:	2207      	movs	r2, #7
 8001c50:	493a      	ldr	r1, [pc, #232]	; (8001d3c <OnKeyPress+0x2c0>)
 8001c52:	6978      	ldr	r0, [r7, #20]
 8001c54:	f01b fb61 	bl	801d31a <strncmp>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d101      	bne.n	8001c62 <OnKeyPress+0x1e6>
	{
		return 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	e048      	b.n	8001cf4 <OnKeyPress+0x278>
	}
	else if(!strncmp(p, "NumPad6", strlen("NumPad6")))
 8001c62:	2207      	movs	r2, #7
 8001c64:	4936      	ldr	r1, [pc, #216]	; (8001d40 <OnKeyPress+0x2c4>)
 8001c66:	6978      	ldr	r0, [r7, #20]
 8001c68:	f01b fb57 	bl	801d31a <strncmp>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <OnKeyPress+0x1fa>
	{
		return 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	e03e      	b.n	8001cf4 <OnKeyPress+0x278>
	}
	else if(!strncmp(p, "NumPad7", strlen("NumPad7")))
 8001c76:	2207      	movs	r2, #7
 8001c78:	4932      	ldr	r1, [pc, #200]	; (8001d44 <OnKeyPress+0x2c8>)
 8001c7a:	6978      	ldr	r0, [r7, #20]
 8001c7c:	f01b fb4d 	bl	801d31a <strncmp>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d101      	bne.n	8001c8a <OnKeyPress+0x20e>
	{
		return 0;
 8001c86:	2300      	movs	r3, #0
 8001c88:	e034      	b.n	8001cf4 <OnKeyPress+0x278>
	}
	else if(!strncmp(p, "NumPad8", strlen("NumPad8")))
 8001c8a:	2207      	movs	r2, #7
 8001c8c:	492e      	ldr	r1, [pc, #184]	; (8001d48 <OnKeyPress+0x2cc>)
 8001c8e:	6978      	ldr	r0, [r7, #20]
 8001c90:	f01b fb43 	bl	801d31a <strncmp>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <OnKeyPress+0x222>
	{
		return 0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	e02a      	b.n	8001cf4 <OnKeyPress+0x278>
	}
	else if(!strncmp(p, "NumPad9", strlen("NumPad9")))
 8001c9e:	2207      	movs	r2, #7
 8001ca0:	492a      	ldr	r1, [pc, #168]	; (8001d4c <OnKeyPress+0x2d0>)
 8001ca2:	6978      	ldr	r0, [r7, #20]
 8001ca4:	f01b fb39 	bl	801d31a <strncmp>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <OnKeyPress+0x236>
	{
		return 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	e020      	b.n	8001cf4 <OnKeyPress+0x278>
	}
	else if(!strncmp(p, "Dec", strlen("Dec")))
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	4926      	ldr	r1, [pc, #152]	; (8001d50 <OnKeyPress+0x2d4>)
 8001cb6:	6978      	ldr	r0, [r7, #20]
 8001cb8:	f01b fb2f 	bl	801d31a <strncmp>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <OnKeyPress+0x24a>
	{
		return 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	e016      	b.n	8001cf4 <OnKeyPress+0x278>
	}
	else return 0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	e014      	b.n	8001cf4 <OnKeyPress+0x278>
	memcpy(answer,lcdAnswer,80);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a21      	ldr	r2, [pc, #132]	; (8001d54 <OnKeyPress+0x2d8>)
 8001cce:	4618      	mov	r0, r3
 8001cd0:	4611      	mov	r1, r2
 8001cd2:	2350      	movs	r3, #80	; 0x50
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	f01b f8dd 	bl	801ce94 <memcpy>
	if(currentCursorPosition==-1)
 8001cda:	4b1f      	ldr	r3, [pc, #124]	; (8001d58 <OnKeyPress+0x2dc>)
 8001cdc:	f993 3000 	ldrsb.w	r3, [r3]
 8001ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce4:	d102      	bne.n	8001cec <OnKeyPress+0x270>
	{
		//answer[80] = 255;
		return -1;
 8001ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cea:	e003      	b.n	8001cf4 <OnKeyPress+0x278>
	}
	else
	{
		//answer[80] = currentCursorPosition+40;
	}
	return currentCursorPosition+40;
 8001cec:	4b1a      	ldr	r3, [pc, #104]	; (8001d58 <OnKeyPress+0x2dc>)
 8001cee:	f993 3000 	ldrsb.w	r3, [r3]
 8001cf2:	3328      	adds	r3, #40	; 0x28
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	0801e4cc 	.word	0x0801e4cc
 8001d00:	0801e4d4 	.word	0x0801e4d4
 8001d04:	0801e4d8 	.word	0x0801e4d8
 8001d08:	0801e4e0 	.word	0x0801e4e0
 8001d0c:	0801e4e4 	.word	0x0801e4e4
 8001d10:	0801e4ec 	.word	0x0801e4ec
 8001d14:	0801e4f4 	.word	0x0801e4f4
 8001d18:	0801e4fc 	.word	0x0801e4fc
 8001d1c:	0801e500 	.word	0x0801e500
 8001d20:	0801e504 	.word	0x0801e504
 8001d24:	0801e508 	.word	0x0801e508
 8001d28:	0801e50c 	.word	0x0801e50c
 8001d2c:	0801e514 	.word	0x0801e514
 8001d30:	0801e51c 	.word	0x0801e51c
 8001d34:	0801e524 	.word	0x0801e524
 8001d38:	0801e52c 	.word	0x0801e52c
 8001d3c:	0801e534 	.word	0x0801e534
 8001d40:	0801e53c 	.word	0x0801e53c
 8001d44:	0801e544 	.word	0x0801e544
 8001d48:	0801e54c 	.word	0x0801e54c
 8001d4c:	0801e554 	.word	0x0801e554
 8001d50:	0801e55c 	.word	0x0801e55c
 8001d54:	20000880 	.word	0x20000880
 8001d58:	200000a0 	.word	0x200000a0

08001d5c <get_answer>:

static int get_answer(uint8_t len, uint8_t *req, uint8_t *answer)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	607a      	str	r2, [r7, #4]
 8001d68:	73fb      	strb	r3, [r7, #15]
	memcpy(answer,req,len);
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	68b9      	ldr	r1, [r7, #8]
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f01b f88f 	bl	801ce94 <memcpy>
	return len;
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}

08001d80 <OnEnterPressAction>:

static uint8_t OnEnterPressAction()
{
 8001d80:	b5b0      	push	{r4, r5, r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
	Row *par = NULL;
 8001d86:	2300      	movs	r3, #0
 8001d88:	60bb      	str	r3, [r7, #8]
	if(currentParameters == NULL)
 8001d8a:	4b76      	ldr	r3, [pc, #472]	; (8001f64 <OnEnterPressAction+0x1e4>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d122      	bne.n	8001dd8 <OnEnterPressAction+0x58>
	{
		currentCursorPosition = -1;
 8001d92:	4b75      	ldr	r3, [pc, #468]	; (8001f68 <OnEnterPressAction+0x1e8>)
 8001d94:	22ff      	movs	r2, #255	; 0xff
 8001d96:	701a      	strb	r2, [r3, #0]
		currentParameters = indication_rows;
 8001d98:	4b72      	ldr	r3, [pc, #456]	; (8001f64 <OnEnterPressAction+0x1e4>)
 8001d9a:	4a74      	ldr	r2, [pc, #464]	; (8001f6c <OnEnterPressAction+0x1ec>)
 8001d9c:	601a      	str	r2, [r3, #0]
		paramIndex = 0;
 8001d9e:	4b74      	ldr	r3, [pc, #464]	; (8001f70 <OnEnterPressAction+0x1f0>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	701a      	strb	r2, [r3, #0]
		currentParamLength = sizeof(indication_rows)/sizeof(Row);
 8001da4:	4b73      	ldr	r3, [pc, #460]	; (8001f74 <OnEnterPressAction+0x1f4>)
 8001da6:	2202      	movs	r2, #2
 8001da8:	701a      	strb	r2, [r3, #0]
		editMode = 0;
 8001daa:	4b73      	ldr	r3, [pc, #460]	; (8001f78 <OnEnterPressAction+0x1f8>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
		groupParamName = indicationName;
 8001db0:	4b72      	ldr	r3, [pc, #456]	; (8001f7c <OnEnterPressAction+0x1fc>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a72      	ldr	r2, [pc, #456]	; (8001f80 <OnEnterPressAction+0x200>)
 8001db6:	6013      	str	r3, [r2, #0]
		groupParamNameLength = strlen(indicationName);
 8001db8:	4b70      	ldr	r3, [pc, #448]	; (8001f7c <OnEnterPressAction+0x1fc>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7fe fa07 	bl	80001d0 <strlen>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	4b6f      	ldr	r3, [pc, #444]	; (8001f84 <OnEnterPressAction+0x204>)
 8001dc8:	701a      	strb	r2, [r3, #0]
		ShowParameter(currentParameters);
 8001dca:	4b66      	ldr	r3, [pc, #408]	; (8001f64 <OnEnterPressAction+0x1e4>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 fbea 	bl	80025a8 <ShowParameter>
		return 1;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e0c1      	b.n	8001f5c <OnEnterPressAction+0x1dc>
	}
	else if(currentParameters!=Errors)// В случае если находимся в параметре
 8001dd8:	4b62      	ldr	r3, [pc, #392]	; (8001f64 <OnEnterPressAction+0x1e4>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a6a      	ldr	r2, [pc, #424]	; (8001f88 <OnEnterPressAction+0x208>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	f000 80bb 	beq.w	8001f5a <OnEnterPressAction+0x1da>
	{
		par = currentParameters+paramIndex;
 8001de4:	4b5f      	ldr	r3, [pc, #380]	; (8001f64 <OnEnterPressAction+0x1e4>)
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4b61      	ldr	r3, [pc, #388]	; (8001f70 <OnEnterPressAction+0x1f0>)
 8001dea:	781b      	ldrb	r3, [r3, #0]
 8001dec:	4619      	mov	r1, r3
 8001dee:	460b      	mov	r3, r1
 8001df0:	005b      	lsls	r3, r3, #1
 8001df2:	440b      	add	r3, r1
 8001df4:	00db      	lsls	r3, r3, #3
 8001df6:	4413      	add	r3, r2
 8001df8:	60bb      	str	r3, [r7, #8]
		if(!editMode)// Если находимся не в режиме редактирования
 8001dfa:	4b5f      	ldr	r3, [pc, #380]	; (8001f78 <OnEnterPressAction+0x1f8>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f040 80a3 	bne.w	8001f4a <OnEnterPressAction+0x1ca>
		{

			if(par->isEdited)
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	791b      	ldrb	r3, [r3, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	f000 80a6 	beq.w	8001f5a <OnEnterPressAction+0x1da>
			{
				Clear();
 8001e0e:	f000 f8c3 	bl	8001f98 <Clear>
				if(!par->isEnum)
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	7a1b      	ldrb	r3, [r3, #8]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d123      	bne.n	8001e62 <OnEnterPressAction+0xe2>
				{
					Print(par,2);
 8001e1a:	2102      	movs	r1, #2
 8001e1c:	68b8      	ldr	r0, [r7, #8]
 8001e1e:	f000 feeb 	bl	8002bf8 <Print>
					for (int i = 0; i < 20; ++i) {
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	e00c      	b.n	8001e42 <OnEnterPressAction+0xc2>
						editedValue[i] = lcdAnswer[2][i];
 8001e28:	4a58      	ldr	r2, [pc, #352]	; (8001f8c <OnEnterPressAction+0x20c>)
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	3328      	adds	r3, #40	; 0x28
 8001e30:	7819      	ldrb	r1, [r3, #0]
 8001e32:	4a57      	ldr	r2, [pc, #348]	; (8001f90 <OnEnterPressAction+0x210>)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4413      	add	r3, r2
 8001e38:	460a      	mov	r2, r1
 8001e3a:	701a      	strb	r2, [r3, #0]
					for (int i = 0; i < 20; ++i) {
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	3301      	adds	r3, #1
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2b13      	cmp	r3, #19
 8001e46:	ddef      	ble.n	8001e28 <OnEnterPressAction+0xa8>
					}
					editMode = 1;
 8001e48:	4b4b      	ldr	r3, [pc, #300]	; (8001f78 <OnEnterPressAction+0x1f8>)
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	701a      	strb	r2, [r3, #0]
					currentCursorPosition = par->param_pos;
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	79db      	ldrb	r3, [r3, #7]
 8001e52:	b25a      	sxtb	r2, r3
 8001e54:	4b44      	ldr	r3, [pc, #272]	; (8001f68 <OnEnterPressAction+0x1e8>)
 8001e56:	701a      	strb	r2, [r3, #0]
					ShowParameter(par);
 8001e58:	68b8      	ldr	r0, [r7, #8]
 8001e5a:	f000 fba5 	bl	80025a8 <ShowParameter>
					return 1;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e07c      	b.n	8001f5c <OnEnterPressAction+0x1dc>
				}
				else
				{
					if(par->enums==NULL)return 0;
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	691b      	ldr	r3, [r3, #16]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <OnEnterPressAction+0xee>
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	e076      	b.n	8001f5c <OnEnterPressAction+0x1dc>
					memset(editedValue,0,20);
 8001e6e:	2214      	movs	r2, #20
 8001e70:	2100      	movs	r1, #0
 8001e72:	4847      	ldr	r0, [pc, #284]	; (8001f90 <OnEnterPressAction+0x210>)
 8001e74:	f01b f836 	bl	801cee4 <memset>
					switch (par->type) {
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	7d5b      	ldrb	r3, [r3, #21]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d002      	beq.n	8001e86 <OnEnterPressAction+0x106>
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d00b      	beq.n	8001e9c <OnEnterPressAction+0x11c>
							break;
						case ROW_UINT:
							currentEnumKey = *((uint32_t*)par->data);
							break;
						default:
							break;
 8001e84:	e015      	b.n	8001eb2 <OnEnterPressAction+0x132>
							currentEnumKey = *((uint16_t*)par->data);
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	881b      	ldrh	r3, [r3, #0]
 8001e8c:	ee07 3a90 	vmov	s15, r3
 8001e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001e94:	4b3f      	ldr	r3, [pc, #252]	; (8001f94 <OnEnterPressAction+0x214>)
 8001e96:	edc3 7a00 	vstr	s15, [r3]
							break;
 8001e9a:	e00a      	b.n	8001eb2 <OnEnterPressAction+0x132>
							currentEnumKey = *((uint32_t*)par->data);
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	ee07 3a90 	vmov	s15, r3
 8001ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001eaa:	4b3a      	ldr	r3, [pc, #232]	; (8001f94 <OnEnterPressAction+0x214>)
 8001eac:	edc3 7a00 	vstr	s15, [r3]
							break;
 8001eb0:	bf00      	nop
					}
					Dictionary *dict = FindDictionaryFromValue(currentEnumKey, par->enums, par->enums_len);
 8001eb2:	4b38      	ldr	r3, [pc, #224]	; (8001f94 <OnEnterPressAction+0x214>)
 8001eb4:	edd3 7a00 	vldr	s15, [r3]
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	691a      	ldr	r2, [r3, #16]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	7d1b      	ldrb	r3, [r3, #20]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4610      	mov	r0, r2
 8001ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec8:	f000 fdf2 	bl	8002ab0 <FindDictionaryFromValue>
 8001ecc:	6078      	str	r0, [r7, #4]
					if(dict==NULL)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d119      	bne.n	8001f08 <OnEnterPressAction+0x188>
					{
						currentEnumKey = par->enums->value;
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	691b      	ldr	r3, [r3, #16]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a2e      	ldr	r2, [pc, #184]	; (8001f94 <OnEnterPressAction+0x214>)
 8001edc:	6013      	str	r3, [r2, #0]
						memcpy(editedValue+par->param_pos,par->enums->name, strlen(par->enums->name));
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	79db      	ldrb	r3, [r3, #7]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	4b2a      	ldr	r3, [pc, #168]	; (8001f90 <OnEnterPressAction+0x210>)
 8001ee6:	18d4      	adds	r4, r2, r3
 8001ee8:	68bb      	ldr	r3, [r7, #8]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	685d      	ldr	r5, [r3, #4]
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7fe f96b 	bl	80001d0 <strlen>
 8001efa:	4603      	mov	r3, r0
 8001efc:	461a      	mov	r2, r3
 8001efe:	4629      	mov	r1, r5
 8001f00:	4620      	mov	r0, r4
 8001f02:	f01a ffc7 	bl	801ce94 <memcpy>
 8001f06:	e015      	b.n	8001f34 <OnEnterPressAction+0x1b4>
					}
					else
					{
						currentEnumKey = dict->value;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a21      	ldr	r2, [pc, #132]	; (8001f94 <OnEnterPressAction+0x214>)
 8001f0e:	6013      	str	r3, [r2, #0]
						memcpy(editedValue+par->param_pos,dict->name, strlen(dict->name));
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	79db      	ldrb	r3, [r3, #7]
 8001f14:	461a      	mov	r2, r3
 8001f16:	4b1e      	ldr	r3, [pc, #120]	; (8001f90 <OnEnterPressAction+0x210>)
 8001f18:	18d4      	adds	r4, r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	685d      	ldr	r5, [r3, #4]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe f954 	bl	80001d0 <strlen>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4629      	mov	r1, r5
 8001f2e:	4620      	mov	r0, r4
 8001f30:	f01a ffb0 	bl	801ce94 <memcpy>
					}
					currentCursorPosition = -1;
 8001f34:	4b0c      	ldr	r3, [pc, #48]	; (8001f68 <OnEnterPressAction+0x1e8>)
 8001f36:	22ff      	movs	r2, #255	; 0xff
 8001f38:	701a      	strb	r2, [r3, #0]
					editMode = 1;
 8001f3a:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <OnEnterPressAction+0x1f8>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	701a      	strb	r2, [r3, #0]
					ShowParameter(par);
 8001f40:	68b8      	ldr	r0, [r7, #8]
 8001f42:	f000 fb31 	bl	80025a8 <ShowParameter>
					return 1;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e008      	b.n	8001f5c <OnEnterPressAction+0x1dc>
				}
			}
		}
		else
		{
			AcceptEdit(par);
 8001f4a:	68b8      	ldr	r0, [r7, #8]
 8001f4c:	f000 ff02 	bl	8002d54 <AcceptEdit>
			ShowParameter(par);
 8001f50:	68b8      	ldr	r0, [r7, #8]
 8001f52:	f000 fb29 	bl	80025a8 <ShowParameter>
			return 1;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e000      	b.n	8001f5c <OnEnterPressAction+0x1dc>
		}
	}
	return 0;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bdb0      	pop	{r4, r5, r7, pc}
 8001f64:	20000808 	.word	0x20000808
 8001f68:	200000a0 	.word	0x200000a0
 8001f6c:	200002ac 	.word	0x200002ac
 8001f70:	20000810 	.word	0x20000810
 8001f74:	20000812 	.word	0x20000812
 8001f78:	20000811 	.word	0x20000811
 8001f7c:	2000009c 	.word	0x2000009c
 8001f80:	2000080c 	.word	0x2000080c
 8001f84:	20000813 	.word	0x20000813
 8001f88:	200000fc 	.word	0x200000fc
 8001f8c:	20000880 	.word	0x20000880
 8001f90:	2000081c 	.word	0x2000081c
 8001f94:	20000818 	.word	0x20000818

08001f98 <Clear>:



static void Clear()
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; ++i) {
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	607b      	str	r3, [r7, #4]
 8001fa2:	e016      	b.n	8001fd2 <Clear+0x3a>
		for (int j = 0; j < 20; ++j) {
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	603b      	str	r3, [r7, #0]
 8001fa8:	e00d      	b.n	8001fc6 <Clear+0x2e>
			lcdAnswer[i][j] = 0;
 8001faa:	490f      	ldr	r1, [pc, #60]	; (8001fe8 <Clear+0x50>)
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	4613      	mov	r3, r2
 8001fb0:	009b      	lsls	r3, r3, #2
 8001fb2:	4413      	add	r3, r2
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	18ca      	adds	r2, r1, r3
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	4413      	add	r3, r2
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 20; ++j) {
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	603b      	str	r3, [r7, #0]
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	2b13      	cmp	r3, #19
 8001fca:	ddee      	ble.n	8001faa <Clear+0x12>
	for (int i = 0; i < 4; ++i) {
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	607b      	str	r3, [r7, #4]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b03      	cmp	r3, #3
 8001fd6:	dde5      	ble.n	8001fa4 <Clear+0xc>
		}
	}
}
 8001fd8:	bf00      	nop
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	20000880 	.word	0x20000880

08001fec <ShowMainDisplay>:

static uint8_t ShowMainDisplay()
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
	Clear();
 8001ff0:	f7ff ffd2 	bl	8001f98 <Clear>
	if(meas_data.automat_mode)
 8001ff4:	4b24      	ldr	r3, [pc, #144]	; (8002088 <ShowMainDisplay+0x9c>)
 8001ff6:	8a5b      	ldrh	r3, [r3, #18]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d010      	beq.n	800201e <ShowMainDisplay+0x32>
	{
		memcpy(lcdAnswer[0],"Auto mode ON",strlen("Auto mode ON"));
 8001ffc:	220c      	movs	r2, #12
 8001ffe:	4923      	ldr	r1, [pc, #140]	; (800208c <ShowMainDisplay+0xa0>)
 8002000:	4823      	ldr	r0, [pc, #140]	; (8002090 <ShowMainDisplay+0xa4>)
 8002002:	f01a ff47 	bl	801ce94 <memcpy>
		if(meas_data.probotbor_ready)sprintf(lcdAnswer[2],"Next sel. in %d s",meas_data.toNextOtborTime);
 8002006:	4b20      	ldr	r3, [pc, #128]	; (8002088 <ShowMainDisplay+0x9c>)
 8002008:	899b      	ldrh	r3, [r3, #12]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d00c      	beq.n	8002028 <ShowMainDisplay+0x3c>
 800200e:	4b1e      	ldr	r3, [pc, #120]	; (8002088 <ShowMainDisplay+0x9c>)
 8002010:	8a9b      	ldrh	r3, [r3, #20]
 8002012:	461a      	mov	r2, r3
 8002014:	491f      	ldr	r1, [pc, #124]	; (8002094 <ShowMainDisplay+0xa8>)
 8002016:	4820      	ldr	r0, [pc, #128]	; (8002098 <ShowMainDisplay+0xac>)
 8002018:	f01b f91c 	bl	801d254 <siprintf>
 800201c:	e004      	b.n	8002028 <ShowMainDisplay+0x3c>
	}
	else
	{
		memcpy(lcdAnswer[0],"Auto mode OFF",strlen("Auto mode OFF"));
 800201e:	220d      	movs	r2, #13
 8002020:	491e      	ldr	r1, [pc, #120]	; (800209c <ShowMainDisplay+0xb0>)
 8002022:	481b      	ldr	r0, [pc, #108]	; (8002090 <ShowMainDisplay+0xa4>)
 8002024:	f01a ff36 	bl	801ce94 <memcpy>
	}

	if(meas_data.probotbor_ready)
 8002028:	4b17      	ldr	r3, [pc, #92]	; (8002088 <ShowMainDisplay+0x9c>)
 800202a:	899b      	ldrh	r3, [r3, #12]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d005      	beq.n	800203c <ShowMainDisplay+0x50>
	{
		memcpy(lcdAnswer[1],"Ready for selection",strlen("Ready for selection"));
 8002030:	2213      	movs	r2, #19
 8002032:	491b      	ldr	r1, [pc, #108]	; (80020a0 <ShowMainDisplay+0xb4>)
 8002034:	481b      	ldr	r0, [pc, #108]	; (80020a4 <ShowMainDisplay+0xb8>)
 8002036:	f01a ff2d 	bl	801ce94 <memcpy>
 800203a:	e01c      	b.n	8002076 <ShowMainDisplay+0x8a>
	}
	else if(meas_data.probotbor_busy)
 800203c:	4b12      	ldr	r3, [pc, #72]	; (8002088 <ShowMainDisplay+0x9c>)
 800203e:	89db      	ldrh	r3, [r3, #14]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d005      	beq.n	8002050 <ShowMainDisplay+0x64>
	{
		memcpy(lcdAnswer[1],"Executing selection",strlen("Executing selection"));
 8002044:	2213      	movs	r2, #19
 8002046:	4918      	ldr	r1, [pc, #96]	; (80020a8 <ShowMainDisplay+0xbc>)
 8002048:	4816      	ldr	r0, [pc, #88]	; (80020a4 <ShowMainDisplay+0xb8>)
 800204a:	f01a ff23 	bl	801ce94 <memcpy>
 800204e:	e012      	b.n	8002076 <ShowMainDisplay+0x8a>
	}
	else if(meas_data.vozvrat_probotbor_busy)
 8002050:	4b0d      	ldr	r3, [pc, #52]	; (8002088 <ShowMainDisplay+0x9c>)
 8002052:	8a1b      	ldrh	r3, [r3, #16]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d005      	beq.n	8002064 <ShowMainDisplay+0x78>
	{
		memcpy(lcdAnswer[1],"Executing return",strlen("Executing return"));
 8002058:	2210      	movs	r2, #16
 800205a:	4914      	ldr	r1, [pc, #80]	; (80020ac <ShowMainDisplay+0xc0>)
 800205c:	4811      	ldr	r0, [pc, #68]	; (80020a4 <ShowMainDisplay+0xb8>)
 800205e:	f01a ff19 	bl	801ce94 <memcpy>
 8002062:	e008      	b.n	8002076 <ShowMainDisplay+0x8a>
	}
	else if(*((uint16_t*)&meas_data.errors))
 8002064:	4b12      	ldr	r3, [pc, #72]	; (80020b0 <ShowMainDisplay+0xc4>)
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d004      	beq.n	8002076 <ShowMainDisplay+0x8a>
	{
		memcpy(lcdAnswer[1],"Errors, press F4",strlen("Errors, press F4"));
 800206c:	2210      	movs	r2, #16
 800206e:	4911      	ldr	r1, [pc, #68]	; (80020b4 <ShowMainDisplay+0xc8>)
 8002070:	480c      	ldr	r0, [pc, #48]	; (80020a4 <ShowMainDisplay+0xb8>)
 8002072:	f01a ff0f 	bl	801ce94 <memcpy>
	}
	memcpy(lcdAnswer[3]+3,"Indication->Enter",strlen("Indication->Enter"));
 8002076:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <ShowMainDisplay+0xcc>)
 8002078:	2211      	movs	r2, #17
 800207a:	4910      	ldr	r1, [pc, #64]	; (80020bc <ShowMainDisplay+0xd0>)
 800207c:	4618      	mov	r0, r3
 800207e:	f01a ff09 	bl	801ce94 <memcpy>
	return 1;
 8002082:	2301      	movs	r3, #1

}
 8002084:	4618      	mov	r0, r3
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20000c8c 	.word	0x20000c8c
 800208c:	0801e560 	.word	0x0801e560
 8002090:	20000880 	.word	0x20000880
 8002094:	0801e570 	.word	0x0801e570
 8002098:	200008a8 	.word	0x200008a8
 800209c:	0801e584 	.word	0x0801e584
 80020a0:	0801e594 	.word	0x0801e594
 80020a4:	20000894 	.word	0x20000894
 80020a8:	0801e5a8 	.word	0x0801e5a8
 80020ac:	0801e5bc 	.word	0x0801e5bc
 80020b0:	20000ca4 	.word	0x20000ca4
 80020b4:	0801e5d0 	.word	0x0801e5d0
 80020b8:	200008bf 	.word	0x200008bf
 80020bc:	0801e5e4 	.word	0x0801e5e4

080020c0 <OnDownPressKey>:


static uint8_t OnDownPressKey()
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	af00      	add	r7, sp, #0
	if(currentParameters == NULL)return 0; // Если находимся на главном экране, то не реагируем
 80020c4:	4b1d      	ldr	r3, [pc, #116]	; (800213c <OnDownPressKey+0x7c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <OnDownPressKey+0x10>
 80020cc:	2300      	movs	r3, #0
 80020ce:	e032      	b.n	8002136 <OnDownPressKey+0x76>
	if(editMode)return 0; // Если находимся в режиме редактирования, то не реагируем
 80020d0:	4b1b      	ldr	r3, [pc, #108]	; (8002140 <OnDownPressKey+0x80>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <OnDownPressKey+0x1c>
 80020d8:	2300      	movs	r3, #0
 80020da:	e02c      	b.n	8002136 <OnDownPressKey+0x76>
	if(paramIndex>=currentParamLength-1)return 0;// Если курсор находится внизу, не реагируем
 80020dc:	4b19      	ldr	r3, [pc, #100]	; (8002144 <OnDownPressKey+0x84>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	461a      	mov	r2, r3
 80020e2:	4b19      	ldr	r3, [pc, #100]	; (8002148 <OnDownPressKey+0x88>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	429a      	cmp	r2, r3
 80020ea:	db01      	blt.n	80020f0 <OnDownPressKey+0x30>
 80020ec:	2300      	movs	r3, #0
 80020ee:	e022      	b.n	8002136 <OnDownPressKey+0x76>
	if(currentParameters == Errors)
 80020f0:	4b12      	ldr	r3, [pc, #72]	; (800213c <OnDownPressKey+0x7c>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a15      	ldr	r2, [pc, #84]	; (800214c <OnDownPressKey+0x8c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d109      	bne.n	800210e <OnDownPressKey+0x4e>
	{
		paramIndex++;
 80020fa:	4b12      	ldr	r3, [pc, #72]	; (8002144 <OnDownPressKey+0x84>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	3301      	adds	r3, #1
 8002100:	b2da      	uxtb	r2, r3
 8002102:	4b10      	ldr	r3, [pc, #64]	; (8002144 <OnDownPressKey+0x84>)
 8002104:	701a      	strb	r2, [r3, #0]
		return ShowErrors();
 8002106:	f000 fb3d 	bl	8002784 <ShowErrors>
 800210a:	4603      	mov	r3, r0
 800210c:	e013      	b.n	8002136 <OnDownPressKey+0x76>
	}
	paramIndex++;
 800210e:	4b0d      	ldr	r3, [pc, #52]	; (8002144 <OnDownPressKey+0x84>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	3301      	adds	r3, #1
 8002114:	b2da      	uxtb	r2, r3
 8002116:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <OnDownPressKey+0x84>)
 8002118:	701a      	strb	r2, [r3, #0]
	ShowParameter(currentParameters+paramIndex);
 800211a:	4b08      	ldr	r3, [pc, #32]	; (800213c <OnDownPressKey+0x7c>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	4b09      	ldr	r3, [pc, #36]	; (8002144 <OnDownPressKey+0x84>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	4619      	mov	r1, r3
 8002124:	460b      	mov	r3, r1
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	440b      	add	r3, r1
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4413      	add	r3, r2
 800212e:	4618      	mov	r0, r3
 8002130:	f000 fa3a 	bl	80025a8 <ShowParameter>
	return 1;
 8002134:	2301      	movs	r3, #1
}
 8002136:	4618      	mov	r0, r3
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000808 	.word	0x20000808
 8002140:	20000811 	.word	0x20000811
 8002144:	20000810 	.word	0x20000810
 8002148:	20000812 	.word	0x20000812
 800214c:	200000fc 	.word	0x200000fc

08002150 <OnLeftPressKey>:

static uint8_t OnLeftPressKey()
{
 8002150:	b5b0      	push	{r4, r5, r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
	int index = 0;
 8002156:	2300      	movs	r3, #0
 8002158:	607b      	str	r3, [r7, #4]
	if(!editMode)return 0;
 800215a:	4b38      	ldr	r3, [pc, #224]	; (800223c <OnLeftPressKey+0xec>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d101      	bne.n	8002166 <OnLeftPressKey+0x16>
 8002162:	2300      	movs	r3, #0
 8002164:	e065      	b.n	8002232 <OnLeftPressKey+0xe2>
	if(currentParameters==NULL)return 0;
 8002166:	4b36      	ldr	r3, [pc, #216]	; (8002240 <OnLeftPressKey+0xf0>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <OnLeftPressKey+0x22>
 800216e:	2300      	movs	r3, #0
 8002170:	e05f      	b.n	8002232 <OnLeftPressKey+0xe2>
	Row *par = currentParameters+paramIndex;
 8002172:	4b33      	ldr	r3, [pc, #204]	; (8002240 <OnLeftPressKey+0xf0>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	4b33      	ldr	r3, [pc, #204]	; (8002244 <OnLeftPressKey+0xf4>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	4619      	mov	r1, r3
 800217c:	460b      	mov	r3, r1
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	440b      	add	r3, r1
 8002182:	00db      	lsls	r3, r3, #3
 8002184:	4413      	add	r3, r2
 8002186:	603b      	str	r3, [r7, #0]
	if(par->isEnum)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	7a1b      	ldrb	r3, [r3, #8]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d04f      	beq.n	8002230 <OnLeftPressKey+0xe0>
	{
		if(par->enums==NULL)return 0;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	691b      	ldr	r3, [r3, #16]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d101      	bne.n	800219c <OnLeftPressKey+0x4c>
 8002198:	2300      	movs	r3, #0
 800219a:	e04a      	b.n	8002232 <OnLeftPressKey+0xe2>
		// поиск индекса вхождения
		index = FindIndexFromValue(currentEnumKey, par->enums, par->enums_len);
 800219c:	4b2a      	ldr	r3, [pc, #168]	; (8002248 <OnLeftPressKey+0xf8>)
 800219e:	edd3 7a00 	vldr	s15, [r3]
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	691a      	ldr	r2, [r3, #16]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	7d1b      	ldrb	r3, [r3, #20]
 80021aa:	4619      	mov	r1, r3
 80021ac:	4610      	mov	r0, r2
 80021ae:	eeb0 0a67 	vmov.f32	s0, s15
 80021b2:	f000 fca9 	bl	8002b08 <FindIndexFromValue>
 80021b6:	6078      	str	r0, [r7, #4]
		if(index==-1)return 0;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021be:	d101      	bne.n	80021c4 <OnLeftPressKey+0x74>
 80021c0:	2300      	movs	r3, #0
 80021c2:	e036      	b.n	8002232 <OnLeftPressKey+0xe2>
		index = index==0 ? par->enums_len-1 : index-1;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d103      	bne.n	80021d2 <OnLeftPressKey+0x82>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	7d1b      	ldrb	r3, [r3, #20]
 80021ce:	3b01      	subs	r3, #1
 80021d0:	e001      	b.n	80021d6 <OnLeftPressKey+0x86>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3b01      	subs	r3, #1
 80021d6:	607b      	str	r3, [r7, #4]
		currentEnumKey = (par->enums+index)->value;
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	691a      	ldr	r2, [r3, #16]
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4413      	add	r3, r2
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a18      	ldr	r2, [pc, #96]	; (8002248 <OnLeftPressKey+0xf8>)
 80021e6:	6013      	str	r3, [r2, #0]
		memset(editedValue,0,20);
 80021e8:	2214      	movs	r2, #20
 80021ea:	2100      	movs	r1, #0
 80021ec:	4817      	ldr	r0, [pc, #92]	; (800224c <OnLeftPressKey+0xfc>)
 80021ee:	f01a fe79 	bl	801cee4 <memset>
		strncpy(editedValue+par->param_pos,(par->enums+index)->name, strlen((par->enums+index)->name));
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	79db      	ldrb	r3, [r3, #7]
 80021f6:	461a      	mov	r2, r3
 80021f8:	4b14      	ldr	r3, [pc, #80]	; (800224c <OnLeftPressKey+0xfc>)
 80021fa:	18d4      	adds	r4, r2, r3
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	691a      	ldr	r2, [r3, #16]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	00db      	lsls	r3, r3, #3
 8002204:	4413      	add	r3, r2
 8002206:	685d      	ldr	r5, [r3, #4]
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	691a      	ldr	r2, [r3, #16]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	4413      	add	r3, r2
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	4618      	mov	r0, r3
 8002216:	f7fd ffdb 	bl	80001d0 <strlen>
 800221a:	4603      	mov	r3, r0
 800221c:	461a      	mov	r2, r3
 800221e:	4629      	mov	r1, r5
 8002220:	4620      	mov	r0, r4
 8002222:	f01b f88e 	bl	801d342 <strncpy>
		ShowParameter(par);
 8002226:	6838      	ldr	r0, [r7, #0]
 8002228:	f000 f9be 	bl	80025a8 <ShowParameter>
		return 1;
 800222c:	2301      	movs	r3, #1
 800222e:	e000      	b.n	8002232 <OnLeftPressKey+0xe2>

	}
	return 0;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bdb0      	pop	{r4, r5, r7, pc}
 800223a:	bf00      	nop
 800223c:	20000811 	.word	0x20000811
 8002240:	20000808 	.word	0x20000808
 8002244:	20000810 	.word	0x20000810
 8002248:	20000818 	.word	0x20000818
 800224c:	2000081c 	.word	0x2000081c

08002250 <OnRightPressKey>:

static uint8_t OnRightPressKey()
{
 8002250:	b5b0      	push	{r4, r5, r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
	int index = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	607b      	str	r3, [r7, #4]
	if(!editMode)return 0;
 800225a:	4b38      	ldr	r3, [pc, #224]	; (800233c <OnRightPressKey+0xec>)
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <OnRightPressKey+0x16>
 8002262:	2300      	movs	r3, #0
 8002264:	e066      	b.n	8002334 <OnRightPressKey+0xe4>
	if(currentParameters==NULL)return 0;
 8002266:	4b36      	ldr	r3, [pc, #216]	; (8002340 <OnRightPressKey+0xf0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <OnRightPressKey+0x22>
 800226e:	2300      	movs	r3, #0
 8002270:	e060      	b.n	8002334 <OnRightPressKey+0xe4>
	Row *par = currentParameters+paramIndex;
 8002272:	4b33      	ldr	r3, [pc, #204]	; (8002340 <OnRightPressKey+0xf0>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	4b33      	ldr	r3, [pc, #204]	; (8002344 <OnRightPressKey+0xf4>)
 8002278:	781b      	ldrb	r3, [r3, #0]
 800227a:	4619      	mov	r1, r3
 800227c:	460b      	mov	r3, r1
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	440b      	add	r3, r1
 8002282:	00db      	lsls	r3, r3, #3
 8002284:	4413      	add	r3, r2
 8002286:	603b      	str	r3, [r7, #0]
	if(par->isEnum)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	7a1b      	ldrb	r3, [r3, #8]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d050      	beq.n	8002332 <OnRightPressKey+0xe2>
	{
		if(par->enums==NULL)return 0;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	691b      	ldr	r3, [r3, #16]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <OnRightPressKey+0x4c>
 8002298:	2300      	movs	r3, #0
 800229a:	e04b      	b.n	8002334 <OnRightPressKey+0xe4>
		// поиск индекса вхождения
		index = FindIndexFromValue(currentEnumKey, par->enums, par->enums_len);
 800229c:	4b2a      	ldr	r3, [pc, #168]	; (8002348 <OnRightPressKey+0xf8>)
 800229e:	edd3 7a00 	vldr	s15, [r3]
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	691a      	ldr	r2, [r3, #16]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	7d1b      	ldrb	r3, [r3, #20]
 80022aa:	4619      	mov	r1, r3
 80022ac:	4610      	mov	r0, r2
 80022ae:	eeb0 0a67 	vmov.f32	s0, s15
 80022b2:	f000 fc29 	bl	8002b08 <FindIndexFromValue>
 80022b6:	6078      	str	r0, [r7, #4]
		if(index==-1)return 0;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022be:	d101      	bne.n	80022c4 <OnRightPressKey+0x74>
 80022c0:	2300      	movs	r3, #0
 80022c2:	e037      	b.n	8002334 <OnRightPressKey+0xe4>
		index = index==par->enums_len-1 ? 0 : index+1;
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	7d1b      	ldrb	r3, [r3, #20]
 80022c8:	3b01      	subs	r3, #1
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d002      	beq.n	80022d6 <OnRightPressKey+0x86>
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3301      	adds	r3, #1
 80022d4:	e000      	b.n	80022d8 <OnRightPressKey+0x88>
 80022d6:	2300      	movs	r3, #0
 80022d8:	607b      	str	r3, [r7, #4]
		currentEnumKey = (par->enums+index)->value;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	691a      	ldr	r2, [r3, #16]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	00db      	lsls	r3, r3, #3
 80022e2:	4413      	add	r3, r2
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a18      	ldr	r2, [pc, #96]	; (8002348 <OnRightPressKey+0xf8>)
 80022e8:	6013      	str	r3, [r2, #0]
		memset(editedValue,0,20);
 80022ea:	2214      	movs	r2, #20
 80022ec:	2100      	movs	r1, #0
 80022ee:	4817      	ldr	r0, [pc, #92]	; (800234c <OnRightPressKey+0xfc>)
 80022f0:	f01a fdf8 	bl	801cee4 <memset>
		strncpy(editedValue+par->param_pos,(par->enums+index)->name, strlen((par->enums+index)->name));
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	79db      	ldrb	r3, [r3, #7]
 80022f8:	461a      	mov	r2, r3
 80022fa:	4b14      	ldr	r3, [pc, #80]	; (800234c <OnRightPressKey+0xfc>)
 80022fc:	18d4      	adds	r4, r2, r3
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	691a      	ldr	r2, [r3, #16]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	00db      	lsls	r3, r3, #3
 8002306:	4413      	add	r3, r2
 8002308:	685d      	ldr	r5, [r3, #4]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	691a      	ldr	r2, [r3, #16]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4413      	add	r3, r2
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	4618      	mov	r0, r3
 8002318:	f7fd ff5a 	bl	80001d0 <strlen>
 800231c:	4603      	mov	r3, r0
 800231e:	461a      	mov	r2, r3
 8002320:	4629      	mov	r1, r5
 8002322:	4620      	mov	r0, r4
 8002324:	f01b f80d 	bl	801d342 <strncpy>
		ShowParameter(par);
 8002328:	6838      	ldr	r0, [r7, #0]
 800232a:	f000 f93d 	bl	80025a8 <ShowParameter>
		return 1;
 800232e:	2301      	movs	r3, #1
 8002330:	e000      	b.n	8002334 <OnRightPressKey+0xe4>

	}
	return 0;
 8002332:	2300      	movs	r3, #0
}
 8002334:	4618      	mov	r0, r3
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bdb0      	pop	{r4, r5, r7, pc}
 800233c:	20000811 	.word	0x20000811
 8002340:	20000808 	.word	0x20000808
 8002344:	20000810 	.word	0x20000810
 8002348:	20000818 	.word	0x20000818
 800234c:	2000081c 	.word	0x2000081c

08002350 <OnUpPressKey>:

static uint8_t OnUpPressKey()
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
	if(currentParameters == NULL)return 0; // Если находимся на главном экране, то не реагируем
 8002354:	4b1e      	ldr	r3, [pc, #120]	; (80023d0 <OnUpPressKey+0x80>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <OnUpPressKey+0x10>
 800235c:	2300      	movs	r3, #0
 800235e:	e035      	b.n	80023cc <OnUpPressKey+0x7c>
	if(editMode)return 0; // Если находимся в режиме редактирования, то не реагируем
 8002360:	4b1c      	ldr	r3, [pc, #112]	; (80023d4 <OnUpPressKey+0x84>)
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <OnUpPressKey+0x1c>
 8002368:	2300      	movs	r3, #0
 800236a:	e02f      	b.n	80023cc <OnUpPressKey+0x7c>
	if(paramIndex<=0)return 0;// Если курсор находится ddth[e, не реагируем
 800236c:	4b1a      	ldr	r3, [pc, #104]	; (80023d8 <OnUpPressKey+0x88>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d101      	bne.n	8002378 <OnUpPressKey+0x28>
 8002374:	2300      	movs	r3, #0
 8002376:	e029      	b.n	80023cc <OnUpPressKey+0x7c>
	if(currentParameters == Errors)
 8002378:	4b15      	ldr	r3, [pc, #84]	; (80023d0 <OnUpPressKey+0x80>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a17      	ldr	r2, [pc, #92]	; (80023dc <OnUpPressKey+0x8c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d110      	bne.n	80023a4 <OnUpPressKey+0x54>
	{
		paramIndex = paramIndex == 0 ? paramIndex : paramIndex -1;
 8002382:	4b15      	ldr	r3, [pc, #84]	; (80023d8 <OnUpPressKey+0x88>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d004      	beq.n	8002394 <OnUpPressKey+0x44>
 800238a:	4b13      	ldr	r3, [pc, #76]	; (80023d8 <OnUpPressKey+0x88>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	3b01      	subs	r3, #1
 8002390:	b2db      	uxtb	r3, r3
 8002392:	e001      	b.n	8002398 <OnUpPressKey+0x48>
 8002394:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <OnUpPressKey+0x88>)
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	4a0f      	ldr	r2, [pc, #60]	; (80023d8 <OnUpPressKey+0x88>)
 800239a:	7013      	strb	r3, [r2, #0]
		return ShowErrors();
 800239c:	f000 f9f2 	bl	8002784 <ShowErrors>
 80023a0:	4603      	mov	r3, r0
 80023a2:	e013      	b.n	80023cc <OnUpPressKey+0x7c>

	}
	paramIndex--;
 80023a4:	4b0c      	ldr	r3, [pc, #48]	; (80023d8 <OnUpPressKey+0x88>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	3b01      	subs	r3, #1
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <OnUpPressKey+0x88>)
 80023ae:	701a      	strb	r2, [r3, #0]
	ShowParameter(currentParameters+paramIndex);
 80023b0:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <OnUpPressKey+0x80>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	4b08      	ldr	r3, [pc, #32]	; (80023d8 <OnUpPressKey+0x88>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	4619      	mov	r1, r3
 80023ba:	460b      	mov	r3, r1
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	440b      	add	r3, r1
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4413      	add	r3, r2
 80023c4:	4618      	mov	r0, r3
 80023c6:	f000 f8ef 	bl	80025a8 <ShowParameter>
	return 1;
 80023ca:	2301      	movs	r3, #1
}
 80023cc:	4618      	mov	r0, r3
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	20000808 	.word	0x20000808
 80023d4:	20000811 	.word	0x20000811
 80023d8:	20000810 	.word	0x20000810
 80023dc:	200000fc 	.word	0x200000fc

080023e0 <OnF1PressKey>:


static uint8_t OnF1PressKey()
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	af00      	add	r7, sp, #0
	currentCursorPosition = -1;
 80023e4:	4b05      	ldr	r3, [pc, #20]	; (80023fc <OnF1PressKey+0x1c>)
 80023e6:	22ff      	movs	r2, #255	; 0xff
 80023e8:	701a      	strb	r2, [r3, #0]
	currentParameters = NULL;
 80023ea:	4b05      	ldr	r3, [pc, #20]	; (8002400 <OnF1PressKey+0x20>)
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
	return ShowMainDisplay();
 80023f0:	f7ff fdfc 	bl	8001fec <ShowMainDisplay>
 80023f4:	4603      	mov	r3, r0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	200000a0 	.word	0x200000a0
 8002400:	20000808 	.word	0x20000808

08002404 <OnF2PressKey>:

static uint8_t OnF2PressKey()
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
	currentCursorPosition = -1;
 8002408:	4b11      	ldr	r3, [pc, #68]	; (8002450 <OnF2PressKey+0x4c>)
 800240a:	22ff      	movs	r2, #255	; 0xff
 800240c:	701a      	strb	r2, [r3, #0]
	currentParameters = probotbor_parameters;
 800240e:	4b11      	ldr	r3, [pc, #68]	; (8002454 <OnF2PressKey+0x50>)
 8002410:	4a11      	ldr	r2, [pc, #68]	; (8002458 <OnF2PressKey+0x54>)
 8002412:	601a      	str	r2, [r3, #0]
	paramIndex = 0;
 8002414:	4b11      	ldr	r3, [pc, #68]	; (800245c <OnF2PressKey+0x58>)
 8002416:	2200      	movs	r2, #0
 8002418:	701a      	strb	r2, [r3, #0]
	currentParamLength = sizeof(probotbor_parameters)/sizeof(Row);
 800241a:	4b11      	ldr	r3, [pc, #68]	; (8002460 <OnF2PressKey+0x5c>)
 800241c:	2203      	movs	r2, #3
 800241e:	701a      	strb	r2, [r3, #0]
	editMode = 0;
 8002420:	4b10      	ldr	r3, [pc, #64]	; (8002464 <OnF2PressKey+0x60>)
 8002422:	2200      	movs	r2, #0
 8002424:	701a      	strb	r2, [r3, #0]
	groupParamName = processParametersName;
 8002426:	4b10      	ldr	r3, [pc, #64]	; (8002468 <OnF2PressKey+0x64>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a10      	ldr	r2, [pc, #64]	; (800246c <OnF2PressKey+0x68>)
 800242c:	6013      	str	r3, [r2, #0]
	groupParamNameLength = strlen(processParametersName);
 800242e:	4b0e      	ldr	r3, [pc, #56]	; (8002468 <OnF2PressKey+0x64>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f7fd fecc 	bl	80001d0 <strlen>
 8002438:	4603      	mov	r3, r0
 800243a:	b2da      	uxtb	r2, r3
 800243c:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <OnF2PressKey+0x6c>)
 800243e:	701a      	strb	r2, [r3, #0]
	ShowParameter(currentParameters);
 8002440:	4b04      	ldr	r3, [pc, #16]	; (8002454 <OnF2PressKey+0x50>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f000 f8af 	bl	80025a8 <ShowParameter>
	return 1;
 800244a:	2301      	movs	r3, #1
}
 800244c:	4618      	mov	r0, r3
 800244e:	bd80      	pop	{r7, pc}
 8002450:	200000a0 	.word	0x200000a0
 8002454:	20000808 	.word	0x20000808
 8002458:	200001d4 	.word	0x200001d4
 800245c:	20000810 	.word	0x20000810
 8002460:	20000812 	.word	0x20000812
 8002464:	20000811 	.word	0x20000811
 8002468:	20000098 	.word	0x20000098
 800246c:	2000080c 	.word	0x2000080c
 8002470:	20000813 	.word	0x20000813

08002474 <OnF3PressKey>:

static uint8_t OnF3PressKey()
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
	currentCursorPosition = -1;
 8002478:	4b11      	ldr	r3, [pc, #68]	; (80024c0 <OnF3PressKey+0x4c>)
 800247a:	22ff      	movs	r2, #255	; 0xff
 800247c:	701a      	strb	r2, [r3, #0]
	currentParameters = commParameters;
 800247e:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <OnF3PressKey+0x50>)
 8002480:	4a11      	ldr	r2, [pc, #68]	; (80024c8 <OnF3PressKey+0x54>)
 8002482:	601a      	str	r2, [r3, #0]
	paramIndex = 0;
 8002484:	4b11      	ldr	r3, [pc, #68]	; (80024cc <OnF3PressKey+0x58>)
 8002486:	2200      	movs	r2, #0
 8002488:	701a      	strb	r2, [r3, #0]
	currentParamLength = sizeof(commParameters)/sizeof(Row);
 800248a:	4b11      	ldr	r3, [pc, #68]	; (80024d0 <OnF3PressKey+0x5c>)
 800248c:	2206      	movs	r2, #6
 800248e:	701a      	strb	r2, [r3, #0]
	editMode = 0;
 8002490:	4b10      	ldr	r3, [pc, #64]	; (80024d4 <OnF3PressKey+0x60>)
 8002492:	2200      	movs	r2, #0
 8002494:	701a      	strb	r2, [r3, #0]
	groupParamName = commParametersName;
 8002496:	4b10      	ldr	r3, [pc, #64]	; (80024d8 <OnF3PressKey+0x64>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a10      	ldr	r2, [pc, #64]	; (80024dc <OnF3PressKey+0x68>)
 800249c:	6013      	str	r3, [r2, #0]
	groupParamNameLength = strlen(commParametersName);
 800249e:	4b0e      	ldr	r3, [pc, #56]	; (80024d8 <OnF3PressKey+0x64>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7fd fe94 	bl	80001d0 <strlen>
 80024a8:	4603      	mov	r3, r0
 80024aa:	b2da      	uxtb	r2, r3
 80024ac:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <OnF3PressKey+0x6c>)
 80024ae:	701a      	strb	r2, [r3, #0]
	ShowParameter(currentParameters);
 80024b0:	4b04      	ldr	r3, [pc, #16]	; (80024c4 <OnF3PressKey+0x50>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4618      	mov	r0, r3
 80024b6:	f000 f877 	bl	80025a8 <ShowParameter>
	return 1;
 80024ba:	2301      	movs	r3, #1
}
 80024bc:	4618      	mov	r0, r3
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	200000a0 	.word	0x200000a0
 80024c4:	20000808 	.word	0x20000808
 80024c8:	2000021c 	.word	0x2000021c
 80024cc:	20000810 	.word	0x20000810
 80024d0:	20000812 	.word	0x20000812
 80024d4:	20000811 	.word	0x20000811
 80024d8:	20000094 	.word	0x20000094
 80024dc:	2000080c 	.word	0x2000080c
 80024e0:	20000813 	.word	0x20000813

080024e4 <OnF4PressKey>:

static uint8_t OnF4PressKey()
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
	currentCursorPosition = -1;
 80024e8:	4b08      	ldr	r3, [pc, #32]	; (800250c <OnF4PressKey+0x28>)
 80024ea:	22ff      	movs	r2, #255	; 0xff
 80024ec:	701a      	strb	r2, [r3, #0]
	currentParameters = Errors;
 80024ee:	4b08      	ldr	r3, [pc, #32]	; (8002510 <OnF4PressKey+0x2c>)
 80024f0:	4a08      	ldr	r2, [pc, #32]	; (8002514 <OnF4PressKey+0x30>)
 80024f2:	601a      	str	r2, [r3, #0]
	editMode  = 0;
 80024f4:	4b08      	ldr	r3, [pc, #32]	; (8002518 <OnF4PressKey+0x34>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	701a      	strb	r2, [r3, #0]
	paramIndex = 0;
 80024fa:	4b08      	ldr	r3, [pc, #32]	; (800251c <OnF4PressKey+0x38>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	701a      	strb	r2, [r3, #0]
	return ShowErrors();
 8002500:	f000 f940 	bl	8002784 <ShowErrors>
 8002504:	4603      	mov	r3, r0
}
 8002506:	4618      	mov	r0, r3
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	200000a0 	.word	0x200000a0
 8002510:	20000808 	.word	0x20000808
 8002514:	200000fc 	.word	0x200000fc
 8002518:	20000811 	.word	0x20000811
 800251c:	20000810 	.word	0x20000810

08002520 <OnEscPressKey>:

static uint8_t OnEscPressKey()
{
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
	currentCursorPosition = -1;
 8002524:	4b1a      	ldr	r3, [pc, #104]	; (8002590 <OnEscPressKey+0x70>)
 8002526:	22ff      	movs	r2, #255	; 0xff
 8002528:	701a      	strb	r2, [r3, #0]
	if(currentParameters==NULL)return 0;
 800252a:	4b1a      	ldr	r3, [pc, #104]	; (8002594 <OnEscPressKey+0x74>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <OnEscPressKey+0x16>
 8002532:	2300      	movs	r3, #0
 8002534:	e029      	b.n	800258a <OnEscPressKey+0x6a>
	if(currentParameters==Errors)return 0;
 8002536:	4b17      	ldr	r3, [pc, #92]	; (8002594 <OnEscPressKey+0x74>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a17      	ldr	r2, [pc, #92]	; (8002598 <OnEscPressKey+0x78>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d101      	bne.n	8002544 <OnEscPressKey+0x24>
 8002540:	2300      	movs	r3, #0
 8002542:	e022      	b.n	800258a <OnEscPressKey+0x6a>
	if(currentParameters==indication_rows)
 8002544:	4b13      	ldr	r3, [pc, #76]	; (8002594 <OnEscPressKey+0x74>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a14      	ldr	r2, [pc, #80]	; (800259c <OnEscPressKey+0x7c>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d106      	bne.n	800255c <OnEscPressKey+0x3c>
	{
		currentParameters = NULL;
 800254e:	4b11      	ldr	r3, [pc, #68]	; (8002594 <OnEscPressKey+0x74>)
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
		return ShowMainDisplay();
 8002554:	f7ff fd4a 	bl	8001fec <ShowMainDisplay>
 8002558:	4603      	mov	r3, r0
 800255a:	e016      	b.n	800258a <OnEscPressKey+0x6a>
	}
	else if(editMode)
 800255c:	4b10      	ldr	r3, [pc, #64]	; (80025a0 <OnEscPressKey+0x80>)
 800255e:	781b      	ldrb	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d011      	beq.n	8002588 <OnEscPressKey+0x68>
	{
		editMode = 0;
 8002564:	4b0e      	ldr	r3, [pc, #56]	; (80025a0 <OnEscPressKey+0x80>)
 8002566:	2200      	movs	r2, #0
 8002568:	701a      	strb	r2, [r3, #0]
		ShowParameter(currentParameters+paramIndex);
 800256a:	4b0a      	ldr	r3, [pc, #40]	; (8002594 <OnEscPressKey+0x74>)
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <OnEscPressKey+0x84>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	4619      	mov	r1, r3
 8002574:	460b      	mov	r3, r1
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	440b      	add	r3, r1
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4413      	add	r3, r2
 800257e:	4618      	mov	r0, r3
 8002580:	f000 f812 	bl	80025a8 <ShowParameter>
		return 1;
 8002584:	2301      	movs	r3, #1
 8002586:	e000      	b.n	800258a <OnEscPressKey+0x6a>
	}
	return 0;
 8002588:	2300      	movs	r3, #0
}
 800258a:	4618      	mov	r0, r3
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	200000a0 	.word	0x200000a0
 8002594:	20000808 	.word	0x20000808
 8002598:	200000fc 	.word	0x200000fc
 800259c:	200002ac 	.word	0x200002ac
 80025a0:	20000811 	.word	0x20000811
 80025a4:	20000810 	.word	0x20000810

080025a8 <ShowParameter>:

static void ShowParameter(Row *parameter)
{
 80025a8:	b5b0      	push	{r4, r5, r7, lr}
 80025aa:	b084      	sub	sp, #16
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
	Clear();
 80025b0:	f7ff fcf2 	bl	8001f98 <Clear>
	memcpy(lcdAnswer[0],groupParamName,groupParamNameLength); // Имя группы параметра
 80025b4:	4b59      	ldr	r3, [pc, #356]	; (800271c <ShowParameter+0x174>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a59      	ldr	r2, [pc, #356]	; (8002720 <ShowParameter+0x178>)
 80025ba:	7812      	ldrb	r2, [r2, #0]
 80025bc:	4619      	mov	r1, r3
 80025be:	4859      	ldr	r0, [pc, #356]	; (8002724 <ShowParameter+0x17c>)
 80025c0:	f01a fc68 	bl	801ce94 <memcpy>
	memcpy(lcdAnswer[1],parameter->name,parameter->name_len); // Имя  параметра
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6819      	ldr	r1, [r3, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	795b      	ldrb	r3, [r3, #5]
 80025cc:	461a      	mov	r2, r3
 80025ce:	4856      	ldr	r0, [pc, #344]	; (8002728 <ShowParameter+0x180>)
 80025d0:	f01a fc60 	bl	801ce94 <memcpy>
	if(parameter->isEnum)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	7a1b      	ldrb	r3, [r3, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d069      	beq.n	80026b0 <ShowParameter+0x108>
	{
		if(editMode)
 80025dc:	4b53      	ldr	r3, [pc, #332]	; (800272c <ShowParameter+0x184>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d018      	beq.n	8002616 <ShowParameter+0x6e>
		{
			strncpy(lcdAnswer[2]+parameter->param_pos,editedValue+parameter->param_pos, strlen(editedValue+parameter->param_pos));
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	79db      	ldrb	r3, [r3, #7]
 80025e8:	461a      	mov	r2, r3
 80025ea:	4b51      	ldr	r3, [pc, #324]	; (8002730 <ShowParameter+0x188>)
 80025ec:	18d4      	adds	r4, r2, r3
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	79db      	ldrb	r3, [r3, #7]
 80025f2:	461a      	mov	r2, r3
 80025f4:	4b4f      	ldr	r3, [pc, #316]	; (8002734 <ShowParameter+0x18c>)
 80025f6:	18d5      	adds	r5, r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	79db      	ldrb	r3, [r3, #7]
 80025fc:	461a      	mov	r2, r3
 80025fe:	4b4d      	ldr	r3, [pc, #308]	; (8002734 <ShowParameter+0x18c>)
 8002600:	4413      	add	r3, r2
 8002602:	4618      	mov	r0, r3
 8002604:	f7fd fde4 	bl	80001d0 <strlen>
 8002608:	4603      	mov	r3, r0
 800260a:	461a      	mov	r2, r3
 800260c:	4629      	mov	r1, r5
 800260e:	4620      	mov	r0, r4
 8002610:	f01a fe97 	bl	801d342 <strncpy>
 8002614:	e050      	b.n	80026b8 <ShowParameter+0x110>
		}
		else
		{
			float value = 0;
 8002616:	f04f 0300 	mov.w	r3, #0
 800261a:	60fb      	str	r3, [r7, #12]
			switch (parameter->type) {
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	7d5b      	ldrb	r3, [r3, #21]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d002      	beq.n	800262a <ShowParameter+0x82>
 8002624:	2b01      	cmp	r3, #1
 8002626:	d00a      	beq.n	800263e <ShowParameter+0x96>
					break;
				case ROW_UINT:
					value = *((uint32_t*)parameter->data);
					break;
				default:
					break;
 8002628:	e013      	b.n	8002652 <ShowParameter+0xaa>
					value = *((uint16_t*)parameter->data);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	ee07 3a90 	vmov	s15, r3
 8002634:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002638:	edc7 7a03 	vstr	s15, [r7, #12]
					break;
 800263c:	e009      	b.n	8002652 <ShowParameter+0xaa>
					value = *((uint32_t*)parameter->data);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	ee07 3a90 	vmov	s15, r3
 8002648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800264c:	edc7 7a03 	vstr	s15, [r7, #12]
					break;
 8002650:	bf00      	nop
			}
			Dictionary *pair = FindDictionaryFromValue(value, parameter->enums, parameter->enums_len);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691a      	ldr	r2, [r3, #16]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	7d1b      	ldrb	r3, [r3, #20]
 800265a:	4619      	mov	r1, r3
 800265c:	4610      	mov	r0, r2
 800265e:	ed97 0a03 	vldr	s0, [r7, #12]
 8002662:	f000 fa25 	bl	8002ab0 <FindDictionaryFromValue>
 8002666:	60b8      	str	r0, [r7, #8]
			if(pair == NULL)
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10d      	bne.n	800268a <ShowParameter+0xe2>
			{
				strncpy(lcdAnswer[2]+parameter->param_pos,"Undefined", strlen("Undefined"));
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	79db      	ldrb	r3, [r3, #7]
 8002672:	461a      	mov	r2, r3
 8002674:	4b2e      	ldr	r3, [pc, #184]	; (8002730 <ShowParameter+0x188>)
 8002676:	4413      	add	r3, r2
 8002678:	492f      	ldr	r1, [pc, #188]	; (8002738 <ShowParameter+0x190>)
 800267a:	461a      	mov	r2, r3
 800267c:	460b      	mov	r3, r1
 800267e:	cb03      	ldmia	r3!, {r0, r1}
 8002680:	6010      	str	r0, [r2, #0]
 8002682:	6051      	str	r1, [r2, #4]
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	7213      	strb	r3, [r2, #8]
 8002688:	e016      	b.n	80026b8 <ShowParameter+0x110>
			}
			else
			{
				strncpy(lcdAnswer[2]+parameter->param_pos,pair->name, strlen(pair->name));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	79db      	ldrb	r3, [r3, #7]
 800268e:	461a      	mov	r2, r3
 8002690:	4b27      	ldr	r3, [pc, #156]	; (8002730 <ShowParameter+0x188>)
 8002692:	18d4      	adds	r4, r2, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	685d      	ldr	r5, [r3, #4]
 8002698:	68bb      	ldr	r3, [r7, #8]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	4618      	mov	r0, r3
 800269e:	f7fd fd97 	bl	80001d0 <strlen>
 80026a2:	4603      	mov	r3, r0
 80026a4:	461a      	mov	r2, r3
 80026a6:	4629      	mov	r1, r5
 80026a8:	4620      	mov	r0, r4
 80026aa:	f01a fe4a 	bl	801d342 <strncpy>
 80026ae:	e003      	b.n	80026b8 <ShowParameter+0x110>
		}

	}
	else
	{
		Print(parameter, 2);
 80026b0:	2102      	movs	r1, #2
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 faa0 	bl	8002bf8 <Print>
	}

	if(parameter->isEdited)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	791b      	ldrb	r3, [r3, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d01a      	beq.n	80026f6 <ShowParameter+0x14e>
	{
		if(!editMode)
 80026c0:	4b1a      	ldr	r3, [pc, #104]	; (800272c <ShowParameter+0x184>)
 80026c2:	781b      	ldrb	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d109      	bne.n	80026dc <ShowParameter+0x134>
		{
			strncpy(lcdAnswer[3]+9,"Edit->Enter", strlen("Edit->Enter"));
 80026c8:	4a1c      	ldr	r2, [pc, #112]	; (800273c <ShowParameter+0x194>)
 80026ca:	4b1d      	ldr	r3, [pc, #116]	; (8002740 <ShowParameter+0x198>)
 80026cc:	cb03      	ldmia	r3!, {r0, r1}
 80026ce:	6010      	str	r0, [r2, #0]
 80026d0:	6051      	str	r1, [r2, #4]
 80026d2:	8819      	ldrh	r1, [r3, #0]
 80026d4:	789b      	ldrb	r3, [r3, #2]
 80026d6:	8111      	strh	r1, [r2, #8]
 80026d8:	7293      	strb	r3, [r2, #10]
	}
	else if(currentParameters == indication_rows)
	{
		strncpy(lcdAnswer[3]+7,"To main-> Esc", strlen("To main-> Esc"));
	}
}
 80026da:	e01a      	b.n	8002712 <ShowParameter+0x16a>
			strncpy(lcdAnswer[3],"Back->Esc", strlen("Back->Esc"));
 80026dc:	4b19      	ldr	r3, [pc, #100]	; (8002744 <ShowParameter+0x19c>)
 80026de:	4a1a      	ldr	r2, [pc, #104]	; (8002748 <ShowParameter+0x1a0>)
 80026e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80026e2:	c303      	stmia	r3!, {r0, r1}
 80026e4:	701a      	strb	r2, [r3, #0]
			strncpy(lcdAnswer[3]+11,"Ok->Enter", strlen("Ok->Enter"));
 80026e6:	4a19      	ldr	r2, [pc, #100]	; (800274c <ShowParameter+0x1a4>)
 80026e8:	4b19      	ldr	r3, [pc, #100]	; (8002750 <ShowParameter+0x1a8>)
 80026ea:	cb03      	ldmia	r3!, {r0, r1}
 80026ec:	6010      	str	r0, [r2, #0]
 80026ee:	6051      	str	r1, [r2, #4]
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	7213      	strb	r3, [r2, #8]
}
 80026f4:	e00d      	b.n	8002712 <ShowParameter+0x16a>
	else if(currentParameters == indication_rows)
 80026f6:	4b17      	ldr	r3, [pc, #92]	; (8002754 <ShowParameter+0x1ac>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a17      	ldr	r2, [pc, #92]	; (8002758 <ShowParameter+0x1b0>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d108      	bne.n	8002712 <ShowParameter+0x16a>
		strncpy(lcdAnswer[3]+7,"To main-> Esc", strlen("To main-> Esc"));
 8002700:	4a16      	ldr	r2, [pc, #88]	; (800275c <ShowParameter+0x1b4>)
 8002702:	4b17      	ldr	r3, [pc, #92]	; (8002760 <ShowParameter+0x1b8>)
 8002704:	4614      	mov	r4, r2
 8002706:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002708:	6020      	str	r0, [r4, #0]
 800270a:	6061      	str	r1, [r4, #4]
 800270c:	60a2      	str	r2, [r4, #8]
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	7323      	strb	r3, [r4, #12]
}
 8002712:	bf00      	nop
 8002714:	3710      	adds	r7, #16
 8002716:	46bd      	mov	sp, r7
 8002718:	bdb0      	pop	{r4, r5, r7, pc}
 800271a:	bf00      	nop
 800271c:	2000080c 	.word	0x2000080c
 8002720:	20000813 	.word	0x20000813
 8002724:	20000880 	.word	0x20000880
 8002728:	20000894 	.word	0x20000894
 800272c:	20000811 	.word	0x20000811
 8002730:	200008a8 	.word	0x200008a8
 8002734:	2000081c 	.word	0x2000081c
 8002738:	0801e5f8 	.word	0x0801e5f8
 800273c:	200008c5 	.word	0x200008c5
 8002740:	0801e604 	.word	0x0801e604
 8002744:	200008bc 	.word	0x200008bc
 8002748:	0801e610 	.word	0x0801e610
 800274c:	200008c7 	.word	0x200008c7
 8002750:	0801e61c 	.word	0x0801e61c
 8002754:	20000808 	.word	0x20000808
 8002758:	200002ac 	.word	0x200002ac
 800275c:	200008c3 	.word	0x200008c3
 8002760:	0801e628 	.word	0x0801e628

08002764 <Min>:

static int Min(int x,int y)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
	return x<y?x:y;
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4293      	cmp	r3, r2
 8002774:	bfa8      	it	ge
 8002776:	4613      	movge	r3, r2
}
 8002778:	4618      	mov	r0, r3
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <ShowErrors>:

static uint8_t ShowErrors()
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b082      	sub	sp, #8
 8002788:	af00      	add	r7, sp, #0
	GetAllErrors();
 800278a:	f000 f863 	bl	8002854 <GetAllErrors>
	Clear();
 800278e:	f7ff fc03 	bl	8001f98 <Clear>
	strncpy(lcdAnswer[0],"Errors", strlen("Errors"));
 8002792:	4b2a      	ldr	r3, [pc, #168]	; (800283c <ShowErrors+0xb8>)
 8002794:	4a2a      	ldr	r2, [pc, #168]	; (8002840 <ShowErrors+0xbc>)
 8002796:	e892 0003 	ldmia.w	r2, {r0, r1}
 800279a:	6018      	str	r0, [r3, #0]
 800279c:	3304      	adds	r3, #4
 800279e:	8019      	strh	r1, [r3, #0]
	if(err_count==0)return 1;
 80027a0:	4b28      	ldr	r3, [pc, #160]	; (8002844 <ShowErrors+0xc0>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d101      	bne.n	80027ac <ShowErrors+0x28>
 80027a8:	2301      	movs	r3, #1
 80027aa:	e042      	b.n	8002832 <ShowErrors+0xae>
	if(paramIndex>=err_count-1)paramIndex = err_count==0 ? 0 : err_count-1;
 80027ac:	4b26      	ldr	r3, [pc, #152]	; (8002848 <ShowErrors+0xc4>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	461a      	mov	r2, r3
 80027b2:	4b24      	ldr	r3, [pc, #144]	; (8002844 <ShowErrors+0xc0>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	3b01      	subs	r3, #1
 80027b8:	429a      	cmp	r2, r3
 80027ba:	db0b      	blt.n	80027d4 <ShowErrors+0x50>
 80027bc:	4b21      	ldr	r3, [pc, #132]	; (8002844 <ShowErrors+0xc0>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d004      	beq.n	80027ce <ShowErrors+0x4a>
 80027c4:	4b1f      	ldr	r3, [pc, #124]	; (8002844 <ShowErrors+0xc0>)
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	3b01      	subs	r3, #1
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	e000      	b.n	80027d0 <ShowErrors+0x4c>
 80027ce:	2300      	movs	r3, #0
 80027d0:	4a1d      	ldr	r2, [pc, #116]	; (8002848 <ShowErrors+0xc4>)
 80027d2:	7013      	strb	r3, [r2, #0]
	for (int i = paramIndex; i < Min(err_count, paramIndex+3); ++i) {
 80027d4:	4b1c      	ldr	r3, [pc, #112]	; (8002848 <ShowErrors+0xc4>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	607b      	str	r3, [r7, #4]
 80027da:	e01b      	b.n	8002814 <ShowErrors+0x90>
		sprintf(lcdAnswer[1+i-paramIndex],"%d.%s",errors_info[i].num, errors_info[i].errorName);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3301      	adds	r3, #1
 80027e0:	4a19      	ldr	r2, [pc, #100]	; (8002848 <ShowErrors+0xc4>)
 80027e2:	7812      	ldrb	r2, [r2, #0]
 80027e4:	1a9a      	subs	r2, r3, r2
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4a13      	ldr	r2, [pc, #76]	; (800283c <ShowErrors+0xb8>)
 80027f0:	1898      	adds	r0, r3, r2
 80027f2:	4a16      	ldr	r2, [pc, #88]	; (800284c <ShowErrors+0xc8>)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80027fa:	4619      	mov	r1, r3
 80027fc:	4a13      	ldr	r2, [pc, #76]	; (800284c <ShowErrors+0xc8>)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	00db      	lsls	r3, r3, #3
 8002802:	4413      	add	r3, r2
 8002804:	685b      	ldr	r3, [r3, #4]
 8002806:	460a      	mov	r2, r1
 8002808:	4911      	ldr	r1, [pc, #68]	; (8002850 <ShowErrors+0xcc>)
 800280a:	f01a fd23 	bl	801d254 <siprintf>
	for (int i = paramIndex; i < Min(err_count, paramIndex+3); ++i) {
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3301      	adds	r3, #1
 8002812:	607b      	str	r3, [r7, #4]
 8002814:	4b0b      	ldr	r3, [pc, #44]	; (8002844 <ShowErrors+0xc0>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <ShowErrors+0xc4>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	3303      	adds	r3, #3
 8002820:	4619      	mov	r1, r3
 8002822:	4610      	mov	r0, r2
 8002824:	f7ff ff9e 	bl	8002764 <Min>
 8002828:	4602      	mov	r2, r0
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4293      	cmp	r3, r2
 800282e:	dbd5      	blt.n	80027dc <ShowErrors+0x58>
	}
	return 1;
 8002830:	2301      	movs	r3, #1
}
 8002832:	4618      	mov	r0, r3
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	20000880 	.word	0x20000880
 8002840:	0801e320 	.word	0x0801e320
 8002844:	20000814 	.word	0x20000814
 8002848:	20000810 	.word	0x20000810
 800284c:	20000830 	.word	0x20000830
 8002850:	0801e638 	.word	0x0801e638

08002854 <GetAllErrors>:

static uint8_t GetAllErrors()
{
 8002854:	b480      	push	{r7}
 8002856:	af00      	add	r7, sp, #0
	err_count = 0;
 8002858:	4b91      	ldr	r3, [pc, #580]	; (8002aa0 <GetAllErrors+0x24c>)
 800285a:	2200      	movs	r2, #0
 800285c:	701a      	strb	r2, [r3, #0]
	if(meas_data.errors.nakopitel_kanistra_err)
 800285e:	4b91      	ldr	r3, [pc, #580]	; (8002aa4 <GetAllErrors+0x250>)
 8002860:	7e1b      	ldrb	r3, [r3, #24]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	b2db      	uxtb	r3, r3
 8002868:	2b00      	cmp	r3, #0
 800286a:	d017      	beq.n	800289c <GetAllErrors+0x48>
	{
		errors_info[err_count].num = err_count+1;
 800286c:	4b8c      	ldr	r3, [pc, #560]	; (8002aa0 <GetAllErrors+0x24c>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	4a8b      	ldr	r2, [pc, #556]	; (8002aa0 <GetAllErrors+0x24c>)
 8002872:	7812      	ldrb	r2, [r2, #0]
 8002874:	3301      	adds	r3, #1
 8002876:	b2d9      	uxtb	r1, r3
 8002878:	4b8b      	ldr	r3, [pc, #556]	; (8002aa8 <GetAllErrors+0x254>)
 800287a:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[0].name;
 800287e:	4b88      	ldr	r3, [pc, #544]	; (8002aa0 <GetAllErrors+0x24c>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	4b89      	ldr	r3, [pc, #548]	; (8002aac <GetAllErrors+0x258>)
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	4987      	ldr	r1, [pc, #540]	; (8002aa8 <GetAllErrors+0x254>)
 800288a:	00c3      	lsls	r3, r0, #3
 800288c:	440b      	add	r3, r1
 800288e:	605a      	str	r2, [r3, #4]
		err_count++;
 8002890:	4b83      	ldr	r3, [pc, #524]	; (8002aa0 <GetAllErrors+0x24c>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	3301      	adds	r3, #1
 8002896:	b2da      	uxtb	r2, r3
 8002898:	4b81      	ldr	r3, [pc, #516]	; (8002aa0 <GetAllErrors+0x24c>)
 800289a:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.nakopitel_door_err)
 800289c:	4b81      	ldr	r3, [pc, #516]	; (8002aa4 <GetAllErrors+0x250>)
 800289e:	7e1b      	ldrb	r3, [r3, #24]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d017      	beq.n	80028da <GetAllErrors+0x86>
	{
		errors_info[err_count].num = err_count+1;
 80028aa:	4b7d      	ldr	r3, [pc, #500]	; (8002aa0 <GetAllErrors+0x24c>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	4a7c      	ldr	r2, [pc, #496]	; (8002aa0 <GetAllErrors+0x24c>)
 80028b0:	7812      	ldrb	r2, [r2, #0]
 80028b2:	3301      	adds	r3, #1
 80028b4:	b2d9      	uxtb	r1, r3
 80028b6:	4b7c      	ldr	r3, [pc, #496]	; (8002aa8 <GetAllErrors+0x254>)
 80028b8:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[1].name;
 80028bc:	4b78      	ldr	r3, [pc, #480]	; (8002aa0 <GetAllErrors+0x24c>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	4b7a      	ldr	r3, [pc, #488]	; (8002aac <GetAllErrors+0x258>)
 80028c4:	699a      	ldr	r2, [r3, #24]
 80028c6:	4978      	ldr	r1, [pc, #480]	; (8002aa8 <GetAllErrors+0x254>)
 80028c8:	00c3      	lsls	r3, r0, #3
 80028ca:	440b      	add	r3, r1
 80028cc:	605a      	str	r2, [r3, #4]
		err_count++;
 80028ce:	4b74      	ldr	r3, [pc, #464]	; (8002aa0 <GetAllErrors+0x24c>)
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	3301      	adds	r3, #1
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	4b72      	ldr	r3, [pc, #456]	; (8002aa0 <GetAllErrors+0x24c>)
 80028d8:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.uz_err)
 80028da:	4b72      	ldr	r3, [pc, #456]	; (8002aa4 <GetAllErrors+0x250>)
 80028dc:	7e1b      	ldrb	r3, [r3, #24]
 80028de:	f003 0304 	and.w	r3, r3, #4
 80028e2:	b2db      	uxtb	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d017      	beq.n	8002918 <GetAllErrors+0xc4>
	{
		errors_info[err_count].num = err_count+1;
 80028e8:	4b6d      	ldr	r3, [pc, #436]	; (8002aa0 <GetAllErrors+0x24c>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	4a6c      	ldr	r2, [pc, #432]	; (8002aa0 <GetAllErrors+0x24c>)
 80028ee:	7812      	ldrb	r2, [r2, #0]
 80028f0:	3301      	adds	r3, #1
 80028f2:	b2d9      	uxtb	r1, r3
 80028f4:	4b6c      	ldr	r3, [pc, #432]	; (8002aa8 <GetAllErrors+0x254>)
 80028f6:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[2].name;
 80028fa:	4b69      	ldr	r3, [pc, #420]	; (8002aa0 <GetAllErrors+0x24c>)
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	4b6a      	ldr	r3, [pc, #424]	; (8002aac <GetAllErrors+0x258>)
 8002902:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002904:	4968      	ldr	r1, [pc, #416]	; (8002aa8 <GetAllErrors+0x254>)
 8002906:	00c3      	lsls	r3, r0, #3
 8002908:	440b      	add	r3, r1
 800290a:	605a      	str	r2, [r3, #4]
		err_count++;
 800290c:	4b64      	ldr	r3, [pc, #400]	; (8002aa0 <GetAllErrors+0x24c>)
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	3301      	adds	r3, #1
 8002912:	b2da      	uxtb	r2, r3
 8002914:	4b62      	ldr	r3, [pc, #392]	; (8002aa0 <GetAllErrors+0x24c>)
 8002916:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.sb_abort_err)
 8002918:	4b62      	ldr	r3, [pc, #392]	; (8002aa4 <GetAllErrors+0x250>)
 800291a:	7e1b      	ldrb	r3, [r3, #24]
 800291c:	f003 0308 	and.w	r3, r3, #8
 8002920:	b2db      	uxtb	r3, r3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d017      	beq.n	8002956 <GetAllErrors+0x102>
	{
		errors_info[err_count].num = err_count+1;
 8002926:	4b5e      	ldr	r3, [pc, #376]	; (8002aa0 <GetAllErrors+0x24c>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	4a5d      	ldr	r2, [pc, #372]	; (8002aa0 <GetAllErrors+0x24c>)
 800292c:	7812      	ldrb	r2, [r2, #0]
 800292e:	3301      	adds	r3, #1
 8002930:	b2d9      	uxtb	r1, r3
 8002932:	4b5d      	ldr	r3, [pc, #372]	; (8002aa8 <GetAllErrors+0x254>)
 8002934:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[3].name;
 8002938:	4b59      	ldr	r3, [pc, #356]	; (8002aa0 <GetAllErrors+0x24c>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	4618      	mov	r0, r3
 800293e:	4b5b      	ldr	r3, [pc, #364]	; (8002aac <GetAllErrors+0x258>)
 8002940:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002942:	4959      	ldr	r1, [pc, #356]	; (8002aa8 <GetAllErrors+0x254>)
 8002944:	00c3      	lsls	r3, r0, #3
 8002946:	440b      	add	r3, r1
 8002948:	605a      	str	r2, [r3, #4]
		err_count++;
 800294a:	4b55      	ldr	r3, [pc, #340]	; (8002aa0 <GetAllErrors+0x24c>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	3301      	adds	r3, #1
 8002950:	b2da      	uxtb	r2, r3
 8002952:	4b53      	ldr	r3, [pc, #332]	; (8002aa0 <GetAllErrors+0x24c>)
 8002954:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.sq_left_err)
 8002956:	4b53      	ldr	r3, [pc, #332]	; (8002aa4 <GetAllErrors+0x250>)
 8002958:	7e1b      	ldrb	r3, [r3, #24]
 800295a:	f003 0310 	and.w	r3, r3, #16
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	d017      	beq.n	8002994 <GetAllErrors+0x140>
	{
		errors_info[err_count].num = err_count+1;
 8002964:	4b4e      	ldr	r3, [pc, #312]	; (8002aa0 <GetAllErrors+0x24c>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	4a4d      	ldr	r2, [pc, #308]	; (8002aa0 <GetAllErrors+0x24c>)
 800296a:	7812      	ldrb	r2, [r2, #0]
 800296c:	3301      	adds	r3, #1
 800296e:	b2d9      	uxtb	r1, r3
 8002970:	4b4d      	ldr	r3, [pc, #308]	; (8002aa8 <GetAllErrors+0x254>)
 8002972:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[4].name;
 8002976:	4b4a      	ldr	r3, [pc, #296]	; (8002aa0 <GetAllErrors+0x24c>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	4b4b      	ldr	r3, [pc, #300]	; (8002aac <GetAllErrors+0x258>)
 800297e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002980:	4949      	ldr	r1, [pc, #292]	; (8002aa8 <GetAllErrors+0x254>)
 8002982:	00c3      	lsls	r3, r0, #3
 8002984:	440b      	add	r3, r1
 8002986:	605a      	str	r2, [r3, #4]
		err_count++;
 8002988:	4b45      	ldr	r3, [pc, #276]	; (8002aa0 <GetAllErrors+0x24c>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	3301      	adds	r3, #1
 800298e:	b2da      	uxtb	r2, r3
 8002990:	4b43      	ldr	r3, [pc, #268]	; (8002aa0 <GetAllErrors+0x24c>)
 8002992:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.sq_right_err)
 8002994:	4b43      	ldr	r3, [pc, #268]	; (8002aa4 <GetAllErrors+0x250>)
 8002996:	7e1b      	ldrb	r3, [r3, #24]
 8002998:	f003 0320 	and.w	r3, r3, #32
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d017      	beq.n	80029d2 <GetAllErrors+0x17e>
	{
		errors_info[err_count].num = err_count+1;
 80029a2:	4b3f      	ldr	r3, [pc, #252]	; (8002aa0 <GetAllErrors+0x24c>)
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	4a3e      	ldr	r2, [pc, #248]	; (8002aa0 <GetAllErrors+0x24c>)
 80029a8:	7812      	ldrb	r2, [r2, #0]
 80029aa:	3301      	adds	r3, #1
 80029ac:	b2d9      	uxtb	r1, r3
 80029ae:	4b3e      	ldr	r3, [pc, #248]	; (8002aa8 <GetAllErrors+0x254>)
 80029b0:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[5].name;
 80029b4:	4b3a      	ldr	r3, [pc, #232]	; (8002aa0 <GetAllErrors+0x24c>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	4b3c      	ldr	r3, [pc, #240]	; (8002aac <GetAllErrors+0x258>)
 80029bc:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80029be:	493a      	ldr	r1, [pc, #232]	; (8002aa8 <GetAllErrors+0x254>)
 80029c0:	00c3      	lsls	r3, r0, #3
 80029c2:	440b      	add	r3, r1
 80029c4:	605a      	str	r2, [r3, #4]
		err_count++;
 80029c6:	4b36      	ldr	r3, [pc, #216]	; (8002aa0 <GetAllErrors+0x24c>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	3301      	adds	r3, #1
 80029cc:	b2da      	uxtb	r2, r3
 80029ce:	4b34      	ldr	r3, [pc, #208]	; (8002aa0 <GetAllErrors+0x24c>)
 80029d0:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.timeout_moving_right_err)
 80029d2:	4b34      	ldr	r3, [pc, #208]	; (8002aa4 <GetAllErrors+0x250>)
 80029d4:	7e1b      	ldrb	r3, [r3, #24]
 80029d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d018      	beq.n	8002a12 <GetAllErrors+0x1be>
	{
		errors_info[err_count].num = err_count+1;
 80029e0:	4b2f      	ldr	r3, [pc, #188]	; (8002aa0 <GetAllErrors+0x24c>)
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	4a2e      	ldr	r2, [pc, #184]	; (8002aa0 <GetAllErrors+0x24c>)
 80029e6:	7812      	ldrb	r2, [r2, #0]
 80029e8:	3301      	adds	r3, #1
 80029ea:	b2d9      	uxtb	r1, r3
 80029ec:	4b2e      	ldr	r3, [pc, #184]	; (8002aa8 <GetAllErrors+0x254>)
 80029ee:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[6].name;
 80029f2:	4b2b      	ldr	r3, [pc, #172]	; (8002aa0 <GetAllErrors+0x24c>)
 80029f4:	781b      	ldrb	r3, [r3, #0]
 80029f6:	4618      	mov	r0, r3
 80029f8:	4b2c      	ldr	r3, [pc, #176]	; (8002aac <GetAllErrors+0x258>)
 80029fa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80029fe:	492a      	ldr	r1, [pc, #168]	; (8002aa8 <GetAllErrors+0x254>)
 8002a00:	00c3      	lsls	r3, r0, #3
 8002a02:	440b      	add	r3, r1
 8002a04:	605a      	str	r2, [r3, #4]
		err_count++;
 8002a06:	4b26      	ldr	r3, [pc, #152]	; (8002aa0 <GetAllErrors+0x24c>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	4b24      	ldr	r3, [pc, #144]	; (8002aa0 <GetAllErrors+0x24c>)
 8002a10:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.timeout_moving_left_err)
 8002a12:	4b24      	ldr	r3, [pc, #144]	; (8002aa4 <GetAllErrors+0x250>)
 8002a14:	7e1b      	ldrb	r3, [r3, #24]
 8002a16:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d018      	beq.n	8002a52 <GetAllErrors+0x1fe>
	{
		errors_info[err_count].num = err_count+1;
 8002a20:	4b1f      	ldr	r3, [pc, #124]	; (8002aa0 <GetAllErrors+0x24c>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	4a1e      	ldr	r2, [pc, #120]	; (8002aa0 <GetAllErrors+0x24c>)
 8002a26:	7812      	ldrb	r2, [r2, #0]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	b2d9      	uxtb	r1, r3
 8002a2c:	4b1e      	ldr	r3, [pc, #120]	; (8002aa8 <GetAllErrors+0x254>)
 8002a2e:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[7].name;
 8002a32:	4b1b      	ldr	r3, [pc, #108]	; (8002aa0 <GetAllErrors+0x24c>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	4b1c      	ldr	r3, [pc, #112]	; (8002aac <GetAllErrors+0x258>)
 8002a3a:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 8002a3e:	491a      	ldr	r1, [pc, #104]	; (8002aa8 <GetAllErrors+0x254>)
 8002a40:	00c3      	lsls	r3, r0, #3
 8002a42:	440b      	add	r3, r1
 8002a44:	605a      	str	r2, [r3, #4]
		err_count++;
 8002a46:	4b16      	ldr	r3, [pc, #88]	; (8002aa0 <GetAllErrors+0x24c>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	4b14      	ldr	r3, [pc, #80]	; (8002aa0 <GetAllErrors+0x24c>)
 8002a50:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.need_return_err)
 8002a52:	4b14      	ldr	r3, [pc, #80]	; (8002aa4 <GetAllErrors+0x250>)
 8002a54:	7e5b      	ldrb	r3, [r3, #25]
 8002a56:	f003 0301 	and.w	r3, r3, #1
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d018      	beq.n	8002a92 <GetAllErrors+0x23e>
	{
		errors_info[err_count].num = err_count+1;
 8002a60:	4b0f      	ldr	r3, [pc, #60]	; (8002aa0 <GetAllErrors+0x24c>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	4a0e      	ldr	r2, [pc, #56]	; (8002aa0 <GetAllErrors+0x24c>)
 8002a66:	7812      	ldrb	r2, [r2, #0]
 8002a68:	3301      	adds	r3, #1
 8002a6a:	b2d9      	uxtb	r1, r3
 8002a6c:	4b0e      	ldr	r3, [pc, #56]	; (8002aa8 <GetAllErrors+0x254>)
 8002a6e:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[8].name;
 8002a72:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <GetAllErrors+0x24c>)
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <GetAllErrors+0x258>)
 8002a7a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8002a7e:	490a      	ldr	r1, [pc, #40]	; (8002aa8 <GetAllErrors+0x254>)
 8002a80:	00c3      	lsls	r3, r0, #3
 8002a82:	440b      	add	r3, r1
 8002a84:	605a      	str	r2, [r3, #4]
		err_count++;
 8002a86:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <GetAllErrors+0x24c>)
 8002a88:	781b      	ldrb	r3, [r3, #0]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	4b04      	ldr	r3, [pc, #16]	; (8002aa0 <GetAllErrors+0x24c>)
 8002a90:	701a      	strb	r2, [r3, #0]
	}
	return 1;
 8002a92:	2301      	movs	r3, #1

}
 8002a94:	4618      	mov	r0, r3
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	20000814 	.word	0x20000814
 8002aa4:	20000c8c 	.word	0x20000c8c
 8002aa8:	20000830 	.word	0x20000830
 8002aac:	200000fc 	.word	0x200000fc

08002ab0 <FindDictionaryFromValue>:

/*Возращает ссылку на пару "ключ-значение", если записи нет, то возвращает NULL */
static Dictionary *FindDictionaryFromValue(float value, Dictionary *dictionary, uint8_t dict_len)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	ed87 0a03 	vstr	s0, [r7, #12]
 8002aba:	60b8      	str	r0, [r7, #8]
 8002abc:	460b      	mov	r3, r1
 8002abe:	71fb      	strb	r3, [r7, #7]
	Dictionary *temp = NULL;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < dict_len; ++i) {
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	617b      	str	r3, [r7, #20]
 8002ac8:	e013      	b.n	8002af2 <FindDictionaryFromValue+0x42>
		temp = dictionary+i;
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	00db      	lsls	r3, r3, #3
 8002ace:	68ba      	ldr	r2, [r7, #8]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
		if(temp->value == value)return temp;
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	edd3 7a00 	vldr	s15, [r3]
 8002ada:	ed97 7a03 	vldr	s14, [r7, #12]
 8002ade:	eeb4 7a67 	vcmp.f32	s14, s15
 8002ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae6:	d101      	bne.n	8002aec <FindDictionaryFromValue+0x3c>
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	e007      	b.n	8002afc <FindDictionaryFromValue+0x4c>
	for (int i = 0; i < dict_len; ++i) {
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	3301      	adds	r3, #1
 8002af0:	617b      	str	r3, [r7, #20]
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	697a      	ldr	r2, [r7, #20]
 8002af6:	429a      	cmp	r2, r3
 8002af8:	dbe7      	blt.n	8002aca <FindDictionaryFromValue+0x1a>

	}
	return NULL;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	371c      	adds	r7, #28
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <FindIndexFromValue>:

/*Возращает индекс "ключ-значение", если записи нет, -1*/
static int FindIndexFromValue(float value, Dictionary *dictionary, uint8_t dict_len)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b087      	sub	sp, #28
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	ed87 0a03 	vstr	s0, [r7, #12]
 8002b12:	60b8      	str	r0, [r7, #8]
 8002b14:	460b      	mov	r3, r1
 8002b16:	71fb      	strb	r3, [r7, #7]
	Dictionary *temp = NULL;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < dict_len; ++i) {
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	e013      	b.n	8002b4a <FindIndexFromValue+0x42>
		temp = dictionary+i;
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	68ba      	ldr	r2, [r7, #8]
 8002b28:	4413      	add	r3, r2
 8002b2a:	613b      	str	r3, [r7, #16]
		if(temp->value == value)return i;
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	edd3 7a00 	vldr	s15, [r3]
 8002b32:	ed97 7a03 	vldr	s14, [r7, #12]
 8002b36:	eeb4 7a67 	vcmp.f32	s14, s15
 8002b3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b3e:	d101      	bne.n	8002b44 <FindIndexFromValue+0x3c>
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	e008      	b.n	8002b56 <FindIndexFromValue+0x4e>
	for (int i = 0; i < dict_len; ++i) {
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	3301      	adds	r3, #1
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	79fb      	ldrb	r3, [r7, #7]
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	dbe7      	blt.n	8002b22 <FindIndexFromValue+0x1a>

	}
	return -1;
 8002b52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	371c      	adds	r7, #28
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
	...

08002b64 <LcdUpdate>:



uint8_t LcdUpdate(uint8_t *answer)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
	uint8_t result = 0;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	73fb      	strb	r3, [r7, #15]
	if(currentParameters==NULL)
 8002b70:	4b1c      	ldr	r3, [pc, #112]	; (8002be4 <LcdUpdate+0x80>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d104      	bne.n	8002b82 <LcdUpdate+0x1e>
	{
		result =  ShowMainDisplay();
 8002b78:	f7ff fa38 	bl	8001fec <ShowMainDisplay>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	73fb      	strb	r3, [r7, #15]
 8002b80:	e01d      	b.n	8002bbe <LcdUpdate+0x5a>
	}
	else if(currentParameters==Errors)
 8002b82:	4b18      	ldr	r3, [pc, #96]	; (8002be4 <LcdUpdate+0x80>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a18      	ldr	r2, [pc, #96]	; (8002be8 <LcdUpdate+0x84>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d104      	bne.n	8002b96 <LcdUpdate+0x32>
	{
		result =  ShowErrors();
 8002b8c:	f7ff fdfa 	bl	8002784 <ShowErrors>
 8002b90:	4603      	mov	r3, r0
 8002b92:	73fb      	strb	r3, [r7, #15]
 8002b94:	e013      	b.n	8002bbe <LcdUpdate+0x5a>
	}
	else if(currentParameters == indication_rows)
 8002b96:	4b13      	ldr	r3, [pc, #76]	; (8002be4 <LcdUpdate+0x80>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a14      	ldr	r2, [pc, #80]	; (8002bec <LcdUpdate+0x88>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d10e      	bne.n	8002bbe <LcdUpdate+0x5a>
	{
		ShowParameter(currentParameters+paramIndex);
 8002ba0:	4b10      	ldr	r3, [pc, #64]	; (8002be4 <LcdUpdate+0x80>)
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <LcdUpdate+0x8c>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	4619      	mov	r1, r3
 8002baa:	460b      	mov	r3, r1
 8002bac:	005b      	lsls	r3, r3, #1
 8002bae:	440b      	add	r3, r1
 8002bb0:	00db      	lsls	r3, r3, #3
 8002bb2:	4413      	add	r3, r2
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff fcf7 	bl	80025a8 <ShowParameter>
		result =  1;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	73fb      	strb	r3, [r7, #15]
	}
	if(result)
 8002bbe:	7bfb      	ldrb	r3, [r7, #15]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d009      	beq.n	8002bd8 <LcdUpdate+0x74>
	{
		memcpy(answer,lcdAnswer,80);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	4a0b      	ldr	r2, [pc, #44]	; (8002bf4 <LcdUpdate+0x90>)
 8002bc8:	4618      	mov	r0, r3
 8002bca:	4611      	mov	r1, r2
 8002bcc:	2350      	movs	r3, #80	; 0x50
 8002bce:	461a      	mov	r2, r3
 8002bd0:	f01a f960 	bl	801ce94 <memcpy>
		return 1;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e000      	b.n	8002bda <LcdUpdate+0x76>
	}
	return 0;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3710      	adds	r7, #16
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20000808 	.word	0x20000808
 8002be8:	200000fc 	.word	0x200000fc
 8002bec:	200002ac 	.word	0x200002ac
 8002bf0:	20000810 	.word	0x20000810
 8002bf4:	20000880 	.word	0x20000880

08002bf8 <Print>:

static void Print(Row *parameter, uint8_t index)
{
 8002bf8:	b5b0      	push	{r4, r5, r7, lr}
 8002bfa:	b086      	sub	sp, #24
 8002bfc:	af02      	add	r7, sp, #8
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	70fb      	strb	r3, [r7, #3]
	uint16_t temp = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	817b      	strh	r3, [r7, #10]
	if(editMode)
 8002c08:	4b4c      	ldr	r3, [pc, #304]	; (8002d3c <Print+0x144>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d011      	beq.n	8002c34 <Print+0x3c>
	{
		memcpy(lcdAnswer[index],editedValue,20);
 8002c10:	78fa      	ldrb	r2, [r7, #3]
 8002c12:	4613      	mov	r3, r2
 8002c14:	009b      	lsls	r3, r3, #2
 8002c16:	4413      	add	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4a49      	ldr	r2, [pc, #292]	; (8002d40 <Print+0x148>)
 8002c1c:	4413      	add	r3, r2
 8002c1e:	4a49      	ldr	r2, [pc, #292]	; (8002d44 <Print+0x14c>)
 8002c20:	461d      	mov	r5, r3
 8002c22:	4614      	mov	r4, r2
 8002c24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c26:	6028      	str	r0, [r5, #0]
 8002c28:	6069      	str	r1, [r5, #4]
 8002c2a:	60aa      	str	r2, [r5, #8]
 8002c2c:	60eb      	str	r3, [r5, #12]
 8002c2e:	6820      	ldr	r0, [r4, #0]
 8002c30:	6128      	str	r0, [r5, #16]
		return;
 8002c32:	e07f      	b.n	8002d34 <Print+0x13c>
	}
	switch (parameter->type) {
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	7d5b      	ldrb	r3, [r3, #21]
 8002c38:	2b04      	cmp	r3, #4
 8002c3a:	d87a      	bhi.n	8002d32 <Print+0x13a>
 8002c3c:	a201      	add	r2, pc, #4	; (adr r2, 8002c44 <Print+0x4c>)
 8002c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c42:	bf00      	nop
 8002c44:	08002ca1 	.word	0x08002ca1
 8002c48:	08002cc5 	.word	0x08002cc5
 8002c4c:	08002d33 	.word	0x08002d33
 8002c50:	08002ce9 	.word	0x08002ce9
 8002c54:	08002c59 	.word	0x08002c59
		case ROW_ETH_ADDR:
			sprintf(lcdAnswer[index]+parameter->param_pos,"%d.%d.%d.%d",*((uint16_t*)parameter->data),*(((uint16_t*)parameter->data)+1),*(((uint16_t*)parameter->data)+2),*(((uint16_t*)parameter->data)+3));
 8002c58:	78fa      	ldrb	r2, [r7, #3]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	4413      	add	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4a37      	ldr	r2, [pc, #220]	; (8002d40 <Print+0x148>)
 8002c64:	4413      	add	r3, r2
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	79d2      	ldrb	r2, [r2, #7]
 8002c6a:	1898      	adds	r0, r3, r2
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	881b      	ldrh	r3, [r3, #0]
 8002c72:	4619      	mov	r1, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	3302      	adds	r3, #2
 8002c7a:	881b      	ldrh	r3, [r3, #0]
 8002c7c:	461c      	mov	r4, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	3304      	adds	r3, #4
 8002c84:	881b      	ldrh	r3, [r3, #0]
 8002c86:	461a      	mov	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	3306      	adds	r3, #6
 8002c8e:	881b      	ldrh	r3, [r3, #0]
 8002c90:	9301      	str	r3, [sp, #4]
 8002c92:	9200      	str	r2, [sp, #0]
 8002c94:	4623      	mov	r3, r4
 8002c96:	460a      	mov	r2, r1
 8002c98:	492b      	ldr	r1, [pc, #172]	; (8002d48 <Print+0x150>)
 8002c9a:	f01a fadb 	bl	801d254 <siprintf>
			break;
 8002c9e:	e049      	b.n	8002d34 <Print+0x13c>
		case ROW_USHORT:
			sprintf(lcdAnswer[index]+parameter->param_pos,"%d",*((uint16_t*)parameter->data));
 8002ca0:	78fa      	ldrb	r2, [r7, #3]
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	009b      	lsls	r3, r3, #2
 8002ca6:	4413      	add	r3, r2
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	4a25      	ldr	r2, [pc, #148]	; (8002d40 <Print+0x148>)
 8002cac:	4413      	add	r3, r2
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	79d2      	ldrb	r2, [r2, #7]
 8002cb2:	1898      	adds	r0, r3, r2
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	881b      	ldrh	r3, [r3, #0]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	4923      	ldr	r1, [pc, #140]	; (8002d4c <Print+0x154>)
 8002cbe:	f01a fac9 	bl	801d254 <siprintf>
			break;
 8002cc2:	e037      	b.n	8002d34 <Print+0x13c>
		case ROW_UINT:
			sprintf(lcdAnswer[index]+parameter->param_pos,"%d",*((uint32_t*)parameter->data));
 8002cc4:	78fa      	ldrb	r2, [r7, #3]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	4413      	add	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4a1c      	ldr	r2, [pc, #112]	; (8002d40 <Print+0x148>)
 8002cd0:	4413      	add	r3, r2
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	79d2      	ldrb	r2, [r2, #7]
 8002cd6:	1898      	adds	r0, r3, r2
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	491a      	ldr	r1, [pc, #104]	; (8002d4c <Print+0x154>)
 8002ce2:	f01a fab7 	bl	801d254 <siprintf>
			break;
 8002ce6:	e025      	b.n	8002d34 <Print+0x13c>
		case ROW_BINARY_12:
			temp = *(uint16_t*)parameter->data;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	817b      	strh	r3, [r7, #10]
			for (int j = 0; j < 12; ++j) {
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60fb      	str	r3, [r7, #12]
 8002cf4:	e01a      	b.n	8002d2c <Print+0x134>
				uint8_t num = (temp & (1<<j))>0;
 8002cf6:	897a      	ldrh	r2, [r7, #10]
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	fa01 f303 	lsl.w	r3, r1, r3
 8002d00:	4013      	ands	r3, r2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	bfcc      	ite	gt
 8002d06:	2301      	movgt	r3, #1
 8002d08:	2300      	movle	r3, #0
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	727b      	strb	r3, [r7, #9]
				sprintf(lcdAnswer[2]+parameter->param_pos+j,"%d",num);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	79db      	ldrb	r3, [r3, #7]
 8002d12:	461a      	mov	r2, r3
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4413      	add	r3, r2
 8002d18:	4a0d      	ldr	r2, [pc, #52]	; (8002d50 <Print+0x158>)
 8002d1a:	4413      	add	r3, r2
 8002d1c:	7a7a      	ldrb	r2, [r7, #9]
 8002d1e:	490b      	ldr	r1, [pc, #44]	; (8002d4c <Print+0x154>)
 8002d20:	4618      	mov	r0, r3
 8002d22:	f01a fa97 	bl	801d254 <siprintf>
			for (int j = 0; j < 12; ++j) {
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	3301      	adds	r3, #1
 8002d2a:	60fb      	str	r3, [r7, #12]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2b0b      	cmp	r3, #11
 8002d30:	dde1      	ble.n	8002cf6 <Print+0xfe>
			}

		default:
			break;
 8002d32:	bf00      	nop
	}
}
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bdb0      	pop	{r4, r5, r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20000811 	.word	0x20000811
 8002d40:	20000880 	.word	0x20000880
 8002d44:	2000081c 	.word	0x2000081c
 8002d48:	0801e640 	.word	0x0801e640
 8002d4c:	0801e64c 	.word	0x0801e64c
 8002d50:	200008a8 	.word	0x200008a8

08002d54 <AcceptEdit>:

static void AcceptEdit(Row *par)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
	if(editMode==0)return;
 8002d5c:	4b1f      	ldr	r3, [pc, #124]	; (8002ddc <AcceptEdit+0x88>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d037      	beq.n	8002dd4 <AcceptEdit+0x80>
	if(par->isEnum)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	7a1b      	ldrb	r3, [r3, #8]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d027      	beq.n	8002dbc <AcceptEdit+0x68>
	{
		switch (par->type) {
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	7d5b      	ldrb	r3, [r3, #21]
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d01d      	beq.n	8002db0 <AcceptEdit+0x5c>
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	dc23      	bgt.n	8002dc0 <AcceptEdit+0x6c>
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d002      	beq.n	8002d82 <AcceptEdit+0x2e>
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d00c      	beq.n	8002d9a <AcceptEdit+0x46>
				break;
			case ROW_FLOAT:
				*((float*)par->data) = currentEnumKey;
				break;
			default:
				break;
 8002d80:	e01e      	b.n	8002dc0 <AcceptEdit+0x6c>
				*((uint16_t*)par->data) = (uint16_t)currentEnumKey;
 8002d82:	4b17      	ldr	r3, [pc, #92]	; (8002de0 <AcceptEdit+0x8c>)
 8002d84:	edd3 7a00 	vldr	s15, [r3]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d90:	ee17 2a90 	vmov	r2, s15
 8002d94:	b292      	uxth	r2, r2
 8002d96:	801a      	strh	r2, [r3, #0]
				break;
 8002d98:	e013      	b.n	8002dc2 <AcceptEdit+0x6e>
				*((uint32_t*)par->data) = (uint32_t)currentEnumKey;
 8002d9a:	4b11      	ldr	r3, [pc, #68]	; (8002de0 <AcceptEdit+0x8c>)
 8002d9c:	edd3 7a00 	vldr	s15, [r3]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002da8:	ee17 2a90 	vmov	r2, s15
 8002dac:	601a      	str	r2, [r3, #0]
				break;
 8002dae:	e008      	b.n	8002dc2 <AcceptEdit+0x6e>
				*((float*)par->data) = currentEnumKey;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	4a0a      	ldr	r2, [pc, #40]	; (8002de0 <AcceptEdit+0x8c>)
 8002db6:	6812      	ldr	r2, [r2, #0]
 8002db8:	601a      	str	r2, [r3, #0]
				break;
 8002dba:	e002      	b.n	8002dc2 <AcceptEdit+0x6e>
		}
	}
 8002dbc:	bf00      	nop
 8002dbe:	e000      	b.n	8002dc2 <AcceptEdit+0x6e>
				break;
 8002dc0:	bf00      	nop
	settingsSaveFRAM();
 8002dc2:	f001 fe39 	bl	8004a38 <settingsSaveFRAM>
	editMode = 0;
 8002dc6:	4b05      	ldr	r3, [pc, #20]	; (8002ddc <AcceptEdit+0x88>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	701a      	strb	r2, [r3, #0]
	currentCursorPosition = -1;
 8002dcc:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <AcceptEdit+0x90>)
 8002dce:	22ff      	movs	r2, #255	; 0xff
 8002dd0:	701a      	strb	r2, [r3, #0]
 8002dd2:	e000      	b.n	8002dd6 <AcceptEdit+0x82>
	if(editMode==0)return;
 8002dd4:	bf00      	nop

}
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	20000811 	.word	0x20000811
 8002de0:	20000818 	.word	0x20000818
 8002de4:	200000a0 	.word	0x200000a0

08002de8 <lcd_init>:


static void sendByte(uint8_t byte, int isData);

void lcd_init()
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCDLED_GPIO_Port, LCDLED_Pin, SET);// Включаем подсветку
 8002dec:	2201      	movs	r2, #1
 8002dee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002df2:	481f      	ldr	r0, [pc, #124]	; (8002e70 <lcd_init+0x88>)
 8002df4:	f005 fbe8 	bl	80085c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCDR_GPIO_Port, LCDR_Pin, RESET);
 8002df8:	2200      	movs	r2, #0
 8002dfa:	2110      	movs	r1, #16
 8002dfc:	481c      	ldr	r0, [pc, #112]	; (8002e70 <lcd_init+0x88>)
 8002dfe:	f005 fbe3 	bl	80085c8 <HAL_GPIO_WritePin>
	HAL_Delay(15);
 8002e02:	200f      	movs	r0, #15
 8002e04:	f002 fe02 	bl	8005a0c <HAL_Delay>

	sendByte(0x33, 0); // шлем в одном байте два 0011
 8002e08:	2100      	movs	r1, #0
 8002e0a:	2033      	movs	r0, #51	; 0x33
 8002e0c:	f000 f892 	bl	8002f34 <sendByte>
	HAL_Delay(1);
 8002e10:	2001      	movs	r0, #1
 8002e12:	f002 fdfb 	bl	8005a0c <HAL_Delay>

	sendByte(0x32, 0); // шлем в одном байте  00110010
 8002e16:	2100      	movs	r1, #0
 8002e18:	2032      	movs	r0, #50	; 0x32
 8002e1a:	f000 f88b 	bl	8002f34 <sendByte>
	HAL_Delay(1);
 8002e1e:	2001      	movs	r0, #1
 8002e20:	f002 fdf4 	bl	8005a0c <HAL_Delay>

	sendByte(DATA_BUS_4BIT_PAGE0, 0); // включаем режим 4 бит
 8002e24:	2100      	movs	r1, #0
 8002e26:	2028      	movs	r0, #40	; 0x28
 8002e28:	f000 f884 	bl	8002f34 <sendByte>
	HAL_Delay(1);
 8002e2c:	2001      	movs	r0, #1
 8002e2e:	f002 fded 	bl	8005a0c <HAL_Delay>
	sendByte(DISPLAY_OFF, 0); // выключаем дисплей
 8002e32:	2100      	movs	r1, #0
 8002e34:	2008      	movs	r0, #8
 8002e36:	f000 f87d 	bl	8002f34 <sendByte>
	HAL_Delay(1);
 8002e3a:	2001      	movs	r0, #1
 8002e3c:	f002 fde6 	bl	8005a0c <HAL_Delay>
	sendByte(CLEAR_DISPLAY, 0); // очищаем дисплей
 8002e40:	2100      	movs	r1, #0
 8002e42:	2001      	movs	r0, #1
 8002e44:	f000 f876 	bl	8002f34 <sendByte>
	HAL_Delay(2);
 8002e48:	2002      	movs	r0, #2
 8002e4a:	f002 fddf 	bl	8005a0c <HAL_Delay>
	sendByte(ENTRY_MODE_SET, 0); //ставим режим смещение курсора экран не смещается
 8002e4e:	2100      	movs	r1, #0
 8002e50:	2006      	movs	r0, #6
 8002e52:	f000 f86f 	bl	8002f34 <sendByte>
	HAL_Delay(1);
 8002e56:	2001      	movs	r0, #1
 8002e58:	f002 fdd8 	bl	8005a0c <HAL_Delay>
	sendByte(DISPLAY_ON_CURSOR_OFF, 0);// включаем дисплей и убираем курсор
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	200c      	movs	r0, #12
 8002e60:	f000 f868 	bl	8002f34 <sendByte>
	HAL_Delay(1);
 8002e64:	2001      	movs	r0, #1
 8002e66:	f002 fdd1 	bl	8005a0c <HAL_Delay>
}
 8002e6a:	bf00      	nop
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	40020400 	.word	0x40020400

08002e74 <SetCursor>:

void SetCursor(int position)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
	if(position==-1 || position>79)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e82:	d002      	beq.n	8002e8a <SetCursor+0x16>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b4f      	cmp	r3, #79	; 0x4f
 8002e88:	dd07      	ble.n	8002e9a <SetCursor+0x26>
	{
		sendByte(DISPLAY_ON_CURSOR_OFF, 0);// включаем дисплей и убираем курсор
 8002e8a:	2100      	movs	r1, #0
 8002e8c:	200c      	movs	r0, #12
 8002e8e:	f000 f851 	bl	8002f34 <sendByte>
		HAL_Delay(1);
 8002e92:	2001      	movs	r0, #1
 8002e94:	f002 fdba 	bl	8005a0c <HAL_Delay>
 8002e98:	e047      	b.n	8002f2a <SetCursor+0xb6>
	}
	else
	{
		sendByte(DISPLAY_ON_CURSOR_ON, 0);// включаем дисплей и ставим курсор
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	200f      	movs	r0, #15
 8002e9e:	f000 f849 	bl	8002f34 <sendByte>
		HAL_Delay(1);
 8002ea2:	2001      	movs	r0, #1
 8002ea4:	f002 fdb2 	bl	8005a0c <HAL_Delay>
		uint8_t row = position/20;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a21      	ldr	r2, [pc, #132]	; (8002f30 <SetCursor+0xbc>)
 8002eac:	fb82 1203 	smull	r1, r2, r2, r3
 8002eb0:	10d2      	asrs	r2, r2, #3
 8002eb2:	17db      	asrs	r3, r3, #31
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	73bb      	strb	r3, [r7, #14]
		uint8_t col = position%20;
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	4b1d      	ldr	r3, [pc, #116]	; (8002f30 <SetCursor+0xbc>)
 8002ebc:	fb83 1302 	smull	r1, r3, r3, r2
 8002ec0:	10d9      	asrs	r1, r3, #3
 8002ec2:	17d3      	asrs	r3, r2, #31
 8002ec4:	1ac9      	subs	r1, r1, r3
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	440b      	add	r3, r1
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	1ad1      	subs	r1, r2, r3
 8002ed0:	460b      	mov	r3, r1
 8002ed2:	737b      	strb	r3, [r7, #13]
		uint8_t addr = 0;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	73fb      	strb	r3, [r7, #15]
		switch (row) {
 8002ed8:	7bbb      	ldrb	r3, [r7, #14]
 8002eda:	2b03      	cmp	r3, #3
 8002edc:	d824      	bhi.n	8002f28 <SetCursor+0xb4>
 8002ede:	a201      	add	r2, pc, #4	; (adr r2, 8002ee4 <SetCursor+0x70>)
 8002ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee4:	08002ef5 	.word	0x08002ef5
 8002ee8:	08002efb 	.word	0x08002efb
 8002eec:	08002f01 	.word	0x08002f01
 8002ef0:	08002f07 	.word	0x08002f07
			case 0:
				addr = 0x0;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	73fb      	strb	r3, [r7, #15]
				break;
 8002ef8:	e008      	b.n	8002f0c <SetCursor+0x98>
			case 1:
				addr = 0x40;
 8002efa:	2340      	movs	r3, #64	; 0x40
 8002efc:	73fb      	strb	r3, [r7, #15]
				break;
 8002efe:	e005      	b.n	8002f0c <SetCursor+0x98>
			case 2:
				addr = 0x14;
 8002f00:	2314      	movs	r3, #20
 8002f02:	73fb      	strb	r3, [r7, #15]
				break;
 8002f04:	e002      	b.n	8002f0c <SetCursor+0x98>
			case 3:
				addr = 0x54;
 8002f06:	2354      	movs	r3, #84	; 0x54
 8002f08:	73fb      	strb	r3, [r7, #15]
				break;
 8002f0a:	bf00      	nop
			default:
				return;
		}
		sendByte(64+addr+col, 0); // установка курсора
 8002f0c:	7bfa      	ldrb	r2, [r7, #15]
 8002f0e:	7b7b      	ldrb	r3, [r7, #13]
 8002f10:	4413      	add	r3, r2
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	3340      	adds	r3, #64	; 0x40
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	2100      	movs	r1, #0
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f000 f80a 	bl	8002f34 <sendByte>
		HAL_Delay(1);
 8002f20:	2001      	movs	r0, #1
 8002f22:	f002 fd73 	bl	8005a0c <HAL_Delay>
 8002f26:	e000      	b.n	8002f2a <SetCursor+0xb6>
				return;
 8002f28:	bf00      	nop
	}
}
 8002f2a:	3710      	adds	r7, #16
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	66666667 	.word	0x66666667

08002f34 <sendByte>:

static void sendByte(uint8_t byte, int isData)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	6039      	str	r1, [r7, #0]
 8002f3e:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD0_GPIO_Port, LCD_PIN_MASK, RESET);
 8002f40:	2200      	movs	r2, #0
 8002f42:	216f      	movs	r1, #111	; 0x6f
 8002f44:	4841      	ldr	r0, [pc, #260]	; (800304c <sendByte+0x118>)
 8002f46:	f005 fb3f 	bl	80085c8 <HAL_GPIO_WritePin>

	if(isData == 1) HAL_GPIO_WritePin(LCDA_GPIO_Port, LCDA_Pin, SET); // если данные ставмим A
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d105      	bne.n	8002f5c <sendByte+0x28>
 8002f50:	2201      	movs	r2, #1
 8002f52:	2140      	movs	r1, #64	; 0x40
 8002f54:	483d      	ldr	r0, [pc, #244]	; (800304c <sendByte+0x118>)
 8002f56:	f005 fb37 	bl	80085c8 <HAL_GPIO_WritePin>
 8002f5a:	e004      	b.n	8002f66 <sendByte+0x32>
	else HAL_GPIO_WritePin(LCDA_GPIO_Port, LCDA_Pin, RESET);		   // иначе скидываем A
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	2140      	movs	r1, #64	; 0x40
 8002f60:	483a      	ldr	r0, [pc, #232]	; (800304c <sendByte+0x118>)
 8002f62:	f005 fb31 	bl	80085c8 <HAL_GPIO_WritePin>

	// ставим старшую тетраду на порт
	if(byte & 0x80) HAL_GPIO_WritePin(LCD3_GPIO_Port, LCD3_Pin, SET);
 8002f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	da04      	bge.n	8002f78 <sendByte+0x44>
 8002f6e:	2201      	movs	r2, #1
 8002f70:	2108      	movs	r1, #8
 8002f72:	4836      	ldr	r0, [pc, #216]	; (800304c <sendByte+0x118>)
 8002f74:	f005 fb28 	bl	80085c8 <HAL_GPIO_WritePin>
	if(byte & 0x40) HAL_GPIO_WritePin(LCD2_GPIO_Port, LCD2_Pin, SET);
 8002f78:	79fb      	ldrb	r3, [r7, #7]
 8002f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d004      	beq.n	8002f8c <sendByte+0x58>
 8002f82:	2201      	movs	r2, #1
 8002f84:	2104      	movs	r1, #4
 8002f86:	4831      	ldr	r0, [pc, #196]	; (800304c <sendByte+0x118>)
 8002f88:	f005 fb1e 	bl	80085c8 <HAL_GPIO_WritePin>
	if(byte & 0x20) HAL_GPIO_WritePin(LCD1_GPIO_Port, LCD1_Pin, SET);
 8002f8c:	79fb      	ldrb	r3, [r7, #7]
 8002f8e:	f003 0320 	and.w	r3, r3, #32
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d004      	beq.n	8002fa0 <sendByte+0x6c>
 8002f96:	2201      	movs	r2, #1
 8002f98:	2102      	movs	r1, #2
 8002f9a:	482c      	ldr	r0, [pc, #176]	; (800304c <sendByte+0x118>)
 8002f9c:	f005 fb14 	bl	80085c8 <HAL_GPIO_WritePin>
	if(byte & 0x10) HAL_GPIO_WritePin(LCD0_GPIO_Port, LCD0_Pin, SET);
 8002fa0:	79fb      	ldrb	r3, [r7, #7]
 8002fa2:	f003 0310 	and.w	r3, r3, #16
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d004      	beq.n	8002fb4 <sendByte+0x80>
 8002faa:	2201      	movs	r2, #1
 8002fac:	2101      	movs	r1, #1
 8002fae:	4827      	ldr	r0, [pc, #156]	; (800304c <sendByte+0x118>)
 8002fb0:	f005 fb0a 	bl	80085c8 <HAL_GPIO_WritePin>

	// поднимаем пин E
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, SET);
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	2120      	movs	r1, #32
 8002fb8:	4824      	ldr	r0, [pc, #144]	; (800304c <sendByte+0x118>)
 8002fba:	f005 fb05 	bl	80085c8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002fbe:	2001      	movs	r0, #1
 8002fc0:	f002 fd24 	bl	8005a0c <HAL_Delay>
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, RESET); // сбрасываем пин Е
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	2120      	movs	r1, #32
 8002fc8:	4820      	ldr	r0, [pc, #128]	; (800304c <sendByte+0x118>)
 8002fca:	f005 fafd 	bl	80085c8 <HAL_GPIO_WritePin>

	//обнуляем все пины дисплея кроме RS
	HAL_GPIO_WritePin(LCD0_GPIO_Port, (LCD_PIN_MASK & ~LCDA_Pin), RESET);
 8002fce:	2200      	movs	r2, #0
 8002fd0:	212f      	movs	r1, #47	; 0x2f
 8002fd2:	481e      	ldr	r0, [pc, #120]	; (800304c <sendByte+0x118>)
 8002fd4:	f005 faf8 	bl	80085c8 <HAL_GPIO_WritePin>

	// поднимаем пин E
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, SET);
 8002fd8:	2201      	movs	r2, #1
 8002fda:	2120      	movs	r1, #32
 8002fdc:	481b      	ldr	r0, [pc, #108]	; (800304c <sendByte+0x118>)
 8002fde:	f005 faf3 	bl	80085c8 <HAL_GPIO_WritePin>
	if(byte & 0x08) HAL_GPIO_WritePin(LCD3_GPIO_Port, LCD3_Pin, SET);
 8002fe2:	79fb      	ldrb	r3, [r7, #7]
 8002fe4:	f003 0308 	and.w	r3, r3, #8
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d004      	beq.n	8002ff6 <sendByte+0xc2>
 8002fec:	2201      	movs	r2, #1
 8002fee:	2108      	movs	r1, #8
 8002ff0:	4816      	ldr	r0, [pc, #88]	; (800304c <sendByte+0x118>)
 8002ff2:	f005 fae9 	bl	80085c8 <HAL_GPIO_WritePin>
	if(byte & 0x04) HAL_GPIO_WritePin(LCD2_GPIO_Port, LCD2_Pin, SET);
 8002ff6:	79fb      	ldrb	r3, [r7, #7]
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d004      	beq.n	800300a <sendByte+0xd6>
 8003000:	2201      	movs	r2, #1
 8003002:	2104      	movs	r1, #4
 8003004:	4811      	ldr	r0, [pc, #68]	; (800304c <sendByte+0x118>)
 8003006:	f005 fadf 	bl	80085c8 <HAL_GPIO_WritePin>
	if(byte & 0x02) HAL_GPIO_WritePin(LCD1_GPIO_Port, LCD1_Pin, SET);
 800300a:	79fb      	ldrb	r3, [r7, #7]
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d004      	beq.n	800301e <sendByte+0xea>
 8003014:	2201      	movs	r2, #1
 8003016:	2102      	movs	r1, #2
 8003018:	480c      	ldr	r0, [pc, #48]	; (800304c <sendByte+0x118>)
 800301a:	f005 fad5 	bl	80085c8 <HAL_GPIO_WritePin>
	if(byte & 0x01) HAL_GPIO_WritePin(LCD0_GPIO_Port, LCD0_Pin, SET);
 800301e:	79fb      	ldrb	r3, [r7, #7]
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	2b00      	cmp	r3, #0
 8003026:	d004      	beq.n	8003032 <sendByte+0xfe>
 8003028:	2201      	movs	r2, #1
 800302a:	2101      	movs	r1, #1
 800302c:	4807      	ldr	r0, [pc, #28]	; (800304c <sendByte+0x118>)
 800302e:	f005 facb 	bl	80085c8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, RESET); // сбрасываем пин Е
 8003032:	2200      	movs	r2, #0
 8003034:	2120      	movs	r1, #32
 8003036:	4805      	ldr	r0, [pc, #20]	; (800304c <sendByte+0x118>)
 8003038:	f005 fac6 	bl	80085c8 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 800303c:	2001      	movs	r0, #1
 800303e:	f002 fce5 	bl	8005a0c <HAL_Delay>
}
 8003042:	bf00      	nop
 8003044:	3708      	adds	r7, #8
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40020400 	.word	0x40020400

08003050 <sendStr>:


void sendStr( char *str, int row , int position )
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
	char start_address;

	switch (row)
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	2b03      	cmp	r3, #3
 8003060:	d816      	bhi.n	8003090 <sendStr+0x40>
 8003062:	a201      	add	r2, pc, #4	; (adr r2, 8003068 <sendStr+0x18>)
 8003064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003068:	08003079 	.word	0x08003079
 800306c:	0800307f 	.word	0x0800307f
 8003070:	08003085 	.word	0x08003085
 8003074:	0800308b 	.word	0x0800308b
	{

		case 0:
			start_address = 0x0; // 1 строка
 8003078:	2300      	movs	r3, #0
 800307a:	75fb      	strb	r3, [r7, #23]
			break;
 800307c:	e008      	b.n	8003090 <sendStr+0x40>

		case 1:
			start_address = 0x40; // 2 строка
 800307e:	2340      	movs	r3, #64	; 0x40
 8003080:	75fb      	strb	r3, [r7, #23]
			break;
 8003082:	e005      	b.n	8003090 <sendStr+0x40>

		case 2:
			start_address = 0x14; // 3 строка
 8003084:	2314      	movs	r3, #20
 8003086:	75fb      	strb	r3, [r7, #23]
			break;
 8003088:	e002      	b.n	8003090 <sendStr+0x40>

		case 3:
			start_address = 0x54; // 4 строка
 800308a:	2354      	movs	r3, #84	; 0x54
 800308c:	75fb      	strb	r3, [r7, #23]
			break;
 800308e:	bf00      	nop

	}

	start_address += position; // к началу строки прибавляем позицию в строке
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	b2da      	uxtb	r2, r3
 8003094:	7dfb      	ldrb	r3, [r7, #23]
 8003096:	4413      	add	r3, r2
 8003098:	75fb      	strb	r3, [r7, #23]

	sendByte((start_address |= SET_DDRAM_ADDRESS), 0); // ставим курсор на начало нужной строки  в DDRAM
 800309a:	7dfb      	ldrb	r3, [r7, #23]
 800309c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030a0:	75fb      	strb	r3, [r7, #23]
 80030a2:	7dfb      	ldrb	r3, [r7, #23]
 80030a4:	2100      	movs	r1, #0
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7ff ff44 	bl	8002f34 <sendByte>

	HAL_Delay(4);
 80030ac:	2004      	movs	r0, #4
 80030ae:	f002 fcad 	bl	8005a0c <HAL_Delay>
//	while(*str != '\0'){
//
//		sendByte(*str, 1);
//		str++;
//	}
	uint8_t byte  = 0;
 80030b2:	2300      	movs	r3, #0
 80030b4:	75bb      	strb	r3, [r7, #22]
	for (int i = 0; i < 20; ++i) {
 80030b6:	2300      	movs	r3, #0
 80030b8:	613b      	str	r3, [r7, #16]
 80030ba:	e011      	b.n	80030e0 <sendStr+0x90>
		byte = *(str+i);
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	4413      	add	r3, r2
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	75bb      	strb	r3, [r7, #22]
		if(byte==0)byte = 32;
 80030c6:	7dbb      	ldrb	r3, [r7, #22]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d101      	bne.n	80030d0 <sendStr+0x80>
 80030cc:	2320      	movs	r3, #32
 80030ce:	75bb      	strb	r3, [r7, #22]
		sendByte(byte, 1);
 80030d0:	7dbb      	ldrb	r3, [r7, #22]
 80030d2:	2101      	movs	r1, #1
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff ff2d 	bl	8002f34 <sendByte>
	for (int i = 0; i < 20; ++i) {
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	3301      	adds	r3, #1
 80030de:	613b      	str	r3, [r7, #16]
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	2b13      	cmp	r3, #19
 80030e4:	ddea      	ble.n	80030bc <sendStr+0x6c>
	}
}
 80030e6:	bf00      	nop
 80030e8:	bf00      	nop
 80030ea:	3718      	adds	r7, #24
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}

080030f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030f0:	b5b0      	push	{r4, r5, r7, lr}
 80030f2:	b08a      	sub	sp, #40	; 0x28
 80030f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	ModbusInit();
 80030f6:	f000 fc05 	bl	8003904 <ModbusInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80030fa:	f002 fc45 	bl	8005988 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030fe:	f000 f83f 	bl	8003180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003102:	f000 fa9b 	bl	800363c <MX_GPIO_Init>
  MX_DMA_Init();
 8003106:	f000 fa69 	bl	80035dc <MX_DMA_Init>
  MX_USART1_UART_Init();
 800310a:	f000 fa13 	bl	8003534 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800310e:	f000 fa3b 	bl	8003588 <MX_USART6_UART_Init>
  MX_SPI3_Init();
 8003112:	f000 f93d 	bl	8003390 <MX_SPI3_Init>
  MX_ADC1_Init();
 8003116:	f000 f8a3 	bl	8003260 <MX_ADC1_Init>
  MX_TIM3_Init();
 800311a:	f000 f96f 	bl	80033fc <MX_TIM3_Init>
  MX_TIM4_Init();
 800311e:	f000 f9bb 	bl	8003498 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8003122:	f7ff fe61 	bl	8002de8 <lcd_init>
  ethernet_reset();
 8003126:	f7fd ff35 	bl	8000f94 <ethernet_reset>
  Analog_Start();
 800312a:	f7fd fa2b 	bl	8000584 <Analog_Start>
  Start_Timers();
 800312e:	f002 f8f9 	bl	8005324 <Start_Timers>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of writeMemorySemaphore */
  osSemaphoreDef(writeMemorySemaphore);
 8003132:	2300      	movs	r3, #0
 8003134:	623b      	str	r3, [r7, #32]
 8003136:	2300      	movs	r3, #0
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
  writeMemorySemaphoreHandle = osSemaphoreCreate(osSemaphore(writeMemorySemaphore), 1);
 800313a:	f107 0320 	add.w	r3, r7, #32
 800313e:	2101      	movs	r1, #1
 8003140:	4618      	mov	r0, r3
 8003142:	f009 fb5f 	bl	800c804 <osSemaphoreCreate>
 8003146:	4603      	mov	r3, r0
 8003148:	4a0a      	ldr	r2, [pc, #40]	; (8003174 <main+0x84>)
 800314a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800314c:	4b0a      	ldr	r3, [pc, #40]	; (8003178 <main+0x88>)
 800314e:	1d3c      	adds	r4, r7, #4
 8003150:	461d      	mov	r5, r3
 8003152:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003154:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003156:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800315a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800315e:	1d3b      	adds	r3, r7, #4
 8003160:	2100      	movs	r1, #0
 8003162:	4618      	mov	r0, r3
 8003164:	f009 fa51 	bl	800c60a <osThreadCreate>
 8003168:	4603      	mov	r3, r0
 800316a:	4a04      	ldr	r2, [pc, #16]	; (800317c <main+0x8c>)
 800316c:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800316e:	f009 fa35 	bl	800c5dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003172:	e7fe      	b.n	8003172 <main+0x82>
 8003174:	20000bac 	.word	0x20000bac
 8003178:	0801e65c 	.word	0x0801e65c
 800317c:	20000ba8 	.word	0x20000ba8

08003180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b094      	sub	sp, #80	; 0x50
 8003184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003186:	f107 0320 	add.w	r3, r7, #32
 800318a:	2230      	movs	r2, #48	; 0x30
 800318c:	2100      	movs	r1, #0
 800318e:	4618      	mov	r0, r3
 8003190:	f019 fea8 	bl	801cee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003194:	f107 030c 	add.w	r3, r7, #12
 8003198:	2200      	movs	r2, #0
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	605a      	str	r2, [r3, #4]
 800319e:	609a      	str	r2, [r3, #8]
 80031a0:	60da      	str	r2, [r3, #12]
 80031a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80031a4:	2300      	movs	r3, #0
 80031a6:	60bb      	str	r3, [r7, #8]
 80031a8:	4b2b      	ldr	r3, [pc, #172]	; (8003258 <SystemClock_Config+0xd8>)
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	4a2a      	ldr	r2, [pc, #168]	; (8003258 <SystemClock_Config+0xd8>)
 80031ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031b2:	6413      	str	r3, [r2, #64]	; 0x40
 80031b4:	4b28      	ldr	r3, [pc, #160]	; (8003258 <SystemClock_Config+0xd8>)
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031bc:	60bb      	str	r3, [r7, #8]
 80031be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031c0:	2300      	movs	r3, #0
 80031c2:	607b      	str	r3, [r7, #4]
 80031c4:	4b25      	ldr	r3, [pc, #148]	; (800325c <SystemClock_Config+0xdc>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a24      	ldr	r2, [pc, #144]	; (800325c <SystemClock_Config+0xdc>)
 80031ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031ce:	6013      	str	r3, [r2, #0]
 80031d0:	4b22      	ldr	r3, [pc, #136]	; (800325c <SystemClock_Config+0xdc>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031d8:	607b      	str	r3, [r7, #4]
 80031da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80031dc:	2301      	movs	r3, #1
 80031de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80031e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031e6:	2302      	movs	r3, #2
 80031e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80031f0:	2319      	movs	r3, #25
 80031f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80031f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80031f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031fa:	2302      	movs	r3, #2
 80031fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80031fe:	2304      	movs	r3, #4
 8003200:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003202:	f107 0320 	add.w	r3, r7, #32
 8003206:	4618      	mov	r0, r3
 8003208:	f005 f9f8 	bl	80085fc <HAL_RCC_OscConfig>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8003212:	f000 fb5b 	bl	80038cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003216:	230f      	movs	r3, #15
 8003218:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800321a:	2302      	movs	r3, #2
 800321c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800321e:	2300      	movs	r3, #0
 8003220:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8003222:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8003226:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800322c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800322e:	f107 030c 	add.w	r3, r7, #12
 8003232:	2105      	movs	r1, #5
 8003234:	4618      	mov	r0, r3
 8003236:	f005 fc59 	bl	8008aec <HAL_RCC_ClockConfig>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	d001      	beq.n	8003244 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003240:	f000 fb44 	bl	80038cc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8003244:	2200      	movs	r2, #0
 8003246:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800324a:	2000      	movs	r0, #0
 800324c:	f005 fd34 	bl	8008cb8 <HAL_RCC_MCOConfig>
}
 8003250:	bf00      	nop
 8003252:	3750      	adds	r7, #80	; 0x50
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	40023800 	.word	0x40023800
 800325c:	40007000 	.word	0x40007000

08003260 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b084      	sub	sp, #16
 8003264:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003266:	463b      	mov	r3, r7
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]
 800326c:	605a      	str	r2, [r3, #4]
 800326e:	609a      	str	r2, [r3, #8]
 8003270:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003272:	4b45      	ldr	r3, [pc, #276]	; (8003388 <MX_ADC1_Init+0x128>)
 8003274:	4a45      	ldr	r2, [pc, #276]	; (800338c <MX_ADC1_Init+0x12c>)
 8003276:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003278:	4b43      	ldr	r3, [pc, #268]	; (8003388 <MX_ADC1_Init+0x128>)
 800327a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800327e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003280:	4b41      	ldr	r3, [pc, #260]	; (8003388 <MX_ADC1_Init+0x128>)
 8003282:	2200      	movs	r2, #0
 8003284:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8003286:	4b40      	ldr	r3, [pc, #256]	; (8003388 <MX_ADC1_Init+0x128>)
 8003288:	2201      	movs	r2, #1
 800328a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800328c:	4b3e      	ldr	r3, [pc, #248]	; (8003388 <MX_ADC1_Init+0x128>)
 800328e:	2200      	movs	r2, #0
 8003290:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003292:	4b3d      	ldr	r3, [pc, #244]	; (8003388 <MX_ADC1_Init+0x128>)
 8003294:	2200      	movs	r2, #0
 8003296:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800329a:	4b3b      	ldr	r3, [pc, #236]	; (8003388 <MX_ADC1_Init+0x128>)
 800329c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80032a2:	4b39      	ldr	r3, [pc, #228]	; (8003388 <MX_ADC1_Init+0x128>)
 80032a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80032aa:	4b37      	ldr	r3, [pc, #220]	; (8003388 <MX_ADC1_Init+0x128>)
 80032ac:	2200      	movs	r2, #0
 80032ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 80032b0:	4b35      	ldr	r3, [pc, #212]	; (8003388 <MX_ADC1_Init+0x128>)
 80032b2:	2206      	movs	r2, #6
 80032b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80032b6:	4b34      	ldr	r3, [pc, #208]	; (8003388 <MX_ADC1_Init+0x128>)
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80032be:	4b32      	ldr	r3, [pc, #200]	; (8003388 <MX_ADC1_Init+0x128>)
 80032c0:	2201      	movs	r2, #1
 80032c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80032c4:	4830      	ldr	r0, [pc, #192]	; (8003388 <MX_ADC1_Init+0x128>)
 80032c6:	f002 fbc5 	bl	8005a54 <HAL_ADC_Init>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80032d0:	f000 fafc 	bl	80038cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80032d4:	230a      	movs	r3, #10
 80032d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80032d8:	2301      	movs	r3, #1
 80032da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80032dc:	2307      	movs	r3, #7
 80032de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032e0:	463b      	mov	r3, r7
 80032e2:	4619      	mov	r1, r3
 80032e4:	4828      	ldr	r0, [pc, #160]	; (8003388 <MX_ADC1_Init+0x128>)
 80032e6:	f002 fd1d 	bl	8005d24 <HAL_ADC_ConfigChannel>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80032f0:	f000 faec 	bl	80038cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80032f4:	230c      	movs	r3, #12
 80032f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80032f8:	2302      	movs	r3, #2
 80032fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032fc:	463b      	mov	r3, r7
 80032fe:	4619      	mov	r1, r3
 8003300:	4821      	ldr	r0, [pc, #132]	; (8003388 <MX_ADC1_Init+0x128>)
 8003302:	f002 fd0f 	bl	8005d24 <HAL_ADC_ConfigChannel>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800330c:	f000 fade 	bl	80038cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8003310:	230d      	movs	r3, #13
 8003312:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8003314:	2303      	movs	r3, #3
 8003316:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003318:	463b      	mov	r3, r7
 800331a:	4619      	mov	r1, r3
 800331c:	481a      	ldr	r0, [pc, #104]	; (8003388 <MX_ADC1_Init+0x128>)
 800331e:	f002 fd01 	bl	8005d24 <HAL_ADC_ConfigChannel>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8003328:	f000 fad0 	bl	80038cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800332c:	2303      	movs	r3, #3
 800332e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8003330:	2304      	movs	r3, #4
 8003332:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003334:	463b      	mov	r3, r7
 8003336:	4619      	mov	r1, r3
 8003338:	4813      	ldr	r0, [pc, #76]	; (8003388 <MX_ADC1_Init+0x128>)
 800333a:	f002 fcf3 	bl	8005d24 <HAL_ADC_ConfigChannel>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8003344:	f000 fac2 	bl	80038cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003348:	2304      	movs	r3, #4
 800334a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800334c:	2305      	movs	r3, #5
 800334e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003350:	463b      	mov	r3, r7
 8003352:	4619      	mov	r1, r3
 8003354:	480c      	ldr	r0, [pc, #48]	; (8003388 <MX_ADC1_Init+0x128>)
 8003356:	f002 fce5 	bl	8005d24 <HAL_ADC_ConfigChannel>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8003360:	f000 fab4 	bl	80038cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8003364:	2311      	movs	r3, #17
 8003366:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8003368:	2306      	movs	r3, #6
 800336a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800336c:	463b      	mov	r3, r7
 800336e:	4619      	mov	r1, r3
 8003370:	4805      	ldr	r0, [pc, #20]	; (8003388 <MX_ADC1_Init+0x128>)
 8003372:	f002 fcd7 	bl	8005d24 <HAL_ADC_ConfigChannel>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 800337c:	f000 faa6 	bl	80038cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8003380:	bf00      	nop
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}
 8003388:	200008d0 	.word	0x200008d0
 800338c:	40012000 	.word	0x40012000

08003390 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8003394:	4b17      	ldr	r3, [pc, #92]	; (80033f4 <MX_SPI3_Init+0x64>)
 8003396:	4a18      	ldr	r2, [pc, #96]	; (80033f8 <MX_SPI3_Init+0x68>)
 8003398:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800339a:	4b16      	ldr	r3, [pc, #88]	; (80033f4 <MX_SPI3_Init+0x64>)
 800339c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80033a0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80033a2:	4b14      	ldr	r3, [pc, #80]	; (80033f4 <MX_SPI3_Init+0x64>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80033a8:	4b12      	ldr	r3, [pc, #72]	; (80033f4 <MX_SPI3_Init+0x64>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80033ae:	4b11      	ldr	r3, [pc, #68]	; (80033f4 <MX_SPI3_Init+0x64>)
 80033b0:	2200      	movs	r2, #0
 80033b2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80033b4:	4b0f      	ldr	r3, [pc, #60]	; (80033f4 <MX_SPI3_Init+0x64>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80033ba:	4b0e      	ldr	r3, [pc, #56]	; (80033f4 <MX_SPI3_Init+0x64>)
 80033bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033c0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033c2:	4b0c      	ldr	r3, [pc, #48]	; (80033f4 <MX_SPI3_Init+0x64>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033c8:	4b0a      	ldr	r3, [pc, #40]	; (80033f4 <MX_SPI3_Init+0x64>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80033ce:	4b09      	ldr	r3, [pc, #36]	; (80033f4 <MX_SPI3_Init+0x64>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033d4:	4b07      	ldr	r3, [pc, #28]	; (80033f4 <MX_SPI3_Init+0x64>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80033da:	4b06      	ldr	r3, [pc, #24]	; (80033f4 <MX_SPI3_Init+0x64>)
 80033dc:	220a      	movs	r2, #10
 80033de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80033e0:	4804      	ldr	r0, [pc, #16]	; (80033f4 <MX_SPI3_Init+0x64>)
 80033e2:	f005 fdfd 	bl	8008fe0 <HAL_SPI_Init>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d001      	beq.n	80033f0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80033ec:	f000 fa6e 	bl	80038cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80033f0:	bf00      	nop
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	20000978 	.word	0x20000978
 80033f8:	40003c00 	.word	0x40003c00

080033fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b086      	sub	sp, #24
 8003400:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003402:	f107 0308 	add.w	r3, r7, #8
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
 800340a:	605a      	str	r2, [r3, #4]
 800340c:	609a      	str	r2, [r3, #8]
 800340e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003410:	463b      	mov	r3, r7
 8003412:	2200      	movs	r2, #0
 8003414:	601a      	str	r2, [r3, #0]
 8003416:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003418:	4b1d      	ldr	r3, [pc, #116]	; (8003490 <MX_TIM3_Init+0x94>)
 800341a:	4a1e      	ldr	r2, [pc, #120]	; (8003494 <MX_TIM3_Init+0x98>)
 800341c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41;
 800341e:	4b1c      	ldr	r3, [pc, #112]	; (8003490 <MX_TIM3_Init+0x94>)
 8003420:	2229      	movs	r2, #41	; 0x29
 8003422:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003424:	4b1a      	ldr	r3, [pc, #104]	; (8003490 <MX_TIM3_Init+0x94>)
 8003426:	2200      	movs	r2, #0
 8003428:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800342a:	4b19      	ldr	r3, [pc, #100]	; (8003490 <MX_TIM3_Init+0x94>)
 800342c:	f242 720f 	movw	r2, #9999	; 0x270f
 8003430:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003432:	4b17      	ldr	r3, [pc, #92]	; (8003490 <MX_TIM3_Init+0x94>)
 8003434:	2200      	movs	r2, #0
 8003436:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003438:	4b15      	ldr	r3, [pc, #84]	; (8003490 <MX_TIM3_Init+0x94>)
 800343a:	2200      	movs	r2, #0
 800343c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800343e:	4814      	ldr	r0, [pc, #80]	; (8003490 <MX_TIM3_Init+0x94>)
 8003440:	f006 fb76 	bl	8009b30 <HAL_TIM_Base_Init>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800344a:	f000 fa3f 	bl	80038cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800344e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003452:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003454:	f107 0308 	add.w	r3, r7, #8
 8003458:	4619      	mov	r1, r3
 800345a:	480d      	ldr	r0, [pc, #52]	; (8003490 <MX_TIM3_Init+0x94>)
 800345c:	f006 fd98 	bl	8009f90 <HAL_TIM_ConfigClockSource>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d001      	beq.n	800346a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8003466:	f000 fa31 	bl	80038cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800346a:	2320      	movs	r3, #32
 800346c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800346e:	2300      	movs	r3, #0
 8003470:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003472:	463b      	mov	r3, r7
 8003474:	4619      	mov	r1, r3
 8003476:	4806      	ldr	r0, [pc, #24]	; (8003490 <MX_TIM3_Init+0x94>)
 8003478:	f006 ffb4 	bl	800a3e4 <HAL_TIMEx_MasterConfigSynchronization>
 800347c:	4603      	mov	r3, r0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d001      	beq.n	8003486 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8003482:	f000 fa23 	bl	80038cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003486:	bf00      	nop
 8003488:	3718      	adds	r7, #24
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	200009d0 	.word	0x200009d0
 8003494:	40000400 	.word	0x40000400

08003498 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800349e:	f107 0308 	add.w	r3, r7, #8
 80034a2:	2200      	movs	r2, #0
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	605a      	str	r2, [r3, #4]
 80034a8:	609a      	str	r2, [r3, #8]
 80034aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034ac:	463b      	mov	r3, r7
 80034ae:	2200      	movs	r2, #0
 80034b0:	601a      	str	r2, [r3, #0]
 80034b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80034b4:	4b1d      	ldr	r3, [pc, #116]	; (800352c <MX_TIM4_Init+0x94>)
 80034b6:	4a1e      	ldr	r2, [pc, #120]	; (8003530 <MX_TIM4_Init+0x98>)
 80034b8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 41;
 80034ba:	4b1c      	ldr	r3, [pc, #112]	; (800352c <MX_TIM4_Init+0x94>)
 80034bc:	2229      	movs	r2, #41	; 0x29
 80034be:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034c0:	4b1a      	ldr	r3, [pc, #104]	; (800352c <MX_TIM4_Init+0x94>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80034c6:	4b19      	ldr	r3, [pc, #100]	; (800352c <MX_TIM4_Init+0x94>)
 80034c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80034cc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034ce:	4b17      	ldr	r3, [pc, #92]	; (800352c <MX_TIM4_Init+0x94>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034d4:	4b15      	ldr	r3, [pc, #84]	; (800352c <MX_TIM4_Init+0x94>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80034da:	4814      	ldr	r0, [pc, #80]	; (800352c <MX_TIM4_Init+0x94>)
 80034dc:	f006 fb28 	bl	8009b30 <HAL_TIM_Base_Init>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80034e6:	f000 f9f1 	bl	80038cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80034f0:	f107 0308 	add.w	r3, r7, #8
 80034f4:	4619      	mov	r1, r3
 80034f6:	480d      	ldr	r0, [pc, #52]	; (800352c <MX_TIM4_Init+0x94>)
 80034f8:	f006 fd4a 	bl	8009f90 <HAL_TIM_ConfigClockSource>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8003502:	f000 f9e3 	bl	80038cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003506:	2320      	movs	r3, #32
 8003508:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800350a:	2300      	movs	r3, #0
 800350c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800350e:	463b      	mov	r3, r7
 8003510:	4619      	mov	r1, r3
 8003512:	4806      	ldr	r0, [pc, #24]	; (800352c <MX_TIM4_Init+0x94>)
 8003514:	f006 ff66 	bl	800a3e4 <HAL_TIMEx_MasterConfigSynchronization>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d001      	beq.n	8003522 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800351e:	f000 f9d5 	bl	80038cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003522:	bf00      	nop
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	20000a18 	.word	0x20000a18
 8003530:	40000800 	.word	0x40000800

08003534 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003538:	4b11      	ldr	r3, [pc, #68]	; (8003580 <MX_USART1_UART_Init+0x4c>)
 800353a:	4a12      	ldr	r2, [pc, #72]	; (8003584 <MX_USART1_UART_Init+0x50>)
 800353c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800353e:	4b10      	ldr	r3, [pc, #64]	; (8003580 <MX_USART1_UART_Init+0x4c>)
 8003540:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003544:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003546:	4b0e      	ldr	r3, [pc, #56]	; (8003580 <MX_USART1_UART_Init+0x4c>)
 8003548:	2200      	movs	r2, #0
 800354a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800354c:	4b0c      	ldr	r3, [pc, #48]	; (8003580 <MX_USART1_UART_Init+0x4c>)
 800354e:	2200      	movs	r2, #0
 8003550:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003552:	4b0b      	ldr	r3, [pc, #44]	; (8003580 <MX_USART1_UART_Init+0x4c>)
 8003554:	2200      	movs	r2, #0
 8003556:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003558:	4b09      	ldr	r3, [pc, #36]	; (8003580 <MX_USART1_UART_Init+0x4c>)
 800355a:	220c      	movs	r2, #12
 800355c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800355e:	4b08      	ldr	r3, [pc, #32]	; (8003580 <MX_USART1_UART_Init+0x4c>)
 8003560:	2200      	movs	r2, #0
 8003562:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003564:	4b06      	ldr	r3, [pc, #24]	; (8003580 <MX_USART1_UART_Init+0x4c>)
 8003566:	2200      	movs	r2, #0
 8003568:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800356a:	4805      	ldr	r0, [pc, #20]	; (8003580 <MX_USART1_UART_Init+0x4c>)
 800356c:	f006 ffca 	bl	800a504 <HAL_UART_Init>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003576:	f000 f9a9 	bl	80038cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800357a:	bf00      	nop
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	20000a60 	.word	0x20000a60
 8003584:	40011000 	.word	0x40011000

08003588 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800358c:	4b11      	ldr	r3, [pc, #68]	; (80035d4 <MX_USART6_UART_Init+0x4c>)
 800358e:	4a12      	ldr	r2, [pc, #72]	; (80035d8 <MX_USART6_UART_Init+0x50>)
 8003590:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8003592:	4b10      	ldr	r3, [pc, #64]	; (80035d4 <MX_USART6_UART_Init+0x4c>)
 8003594:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003598:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800359a:	4b0e      	ldr	r3, [pc, #56]	; (80035d4 <MX_USART6_UART_Init+0x4c>)
 800359c:	2200      	movs	r2, #0
 800359e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80035a0:	4b0c      	ldr	r3, [pc, #48]	; (80035d4 <MX_USART6_UART_Init+0x4c>)
 80035a2:	2200      	movs	r2, #0
 80035a4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80035a6:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <MX_USART6_UART_Init+0x4c>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80035ac:	4b09      	ldr	r3, [pc, #36]	; (80035d4 <MX_USART6_UART_Init+0x4c>)
 80035ae:	220c      	movs	r2, #12
 80035b0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80035b2:	4b08      	ldr	r3, [pc, #32]	; (80035d4 <MX_USART6_UART_Init+0x4c>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80035b8:	4b06      	ldr	r3, [pc, #24]	; (80035d4 <MX_USART6_UART_Init+0x4c>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80035be:	4805      	ldr	r0, [pc, #20]	; (80035d4 <MX_USART6_UART_Init+0x4c>)
 80035c0:	f006 ffa0 	bl	800a504 <HAL_UART_Init>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80035ca:	f000 f97f 	bl	80038cc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000aa4 	.word	0x20000aa4
 80035d8:	40011400 	.word	0x40011400

080035dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80035e2:	2300      	movs	r3, #0
 80035e4:	607b      	str	r3, [r7, #4]
 80035e6:	4b14      	ldr	r3, [pc, #80]	; (8003638 <MX_DMA_Init+0x5c>)
 80035e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ea:	4a13      	ldr	r2, [pc, #76]	; (8003638 <MX_DMA_Init+0x5c>)
 80035ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80035f0:	6313      	str	r3, [r2, #48]	; 0x30
 80035f2:	4b11      	ldr	r3, [pc, #68]	; (8003638 <MX_DMA_Init+0x5c>)
 80035f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035fa:	607b      	str	r3, [r7, #4]
 80035fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80035fe:	2200      	movs	r2, #0
 8003600:	2105      	movs	r1, #5
 8003602:	2038      	movs	r0, #56	; 0x38
 8003604:	f002 ff0a 	bl	800641c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003608:	2038      	movs	r0, #56	; 0x38
 800360a:	f002 ff23 	bl	8006454 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800360e:	2200      	movs	r2, #0
 8003610:	2105      	movs	r1, #5
 8003612:	2039      	movs	r0, #57	; 0x39
 8003614:	f002 ff02 	bl	800641c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8003618:	2039      	movs	r0, #57	; 0x39
 800361a:	f002 ff1b 	bl	8006454 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800361e:	2200      	movs	r2, #0
 8003620:	2105      	movs	r1, #5
 8003622:	203a      	movs	r0, #58	; 0x3a
 8003624:	f002 fefa 	bl	800641c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003628:	203a      	movs	r0, #58	; 0x3a
 800362a:	f002 ff13 	bl	8006454 <HAL_NVIC_EnableIRQ>

}
 800362e:	bf00      	nop
 8003630:	3708      	adds	r7, #8
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	40023800 	.word	0x40023800

0800363c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08c      	sub	sp, #48	; 0x30
 8003640:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003642:	f107 031c 	add.w	r3, r7, #28
 8003646:	2200      	movs	r2, #0
 8003648:	601a      	str	r2, [r3, #0]
 800364a:	605a      	str	r2, [r3, #4]
 800364c:	609a      	str	r2, [r3, #8]
 800364e:	60da      	str	r2, [r3, #12]
 8003650:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003652:	2300      	movs	r3, #0
 8003654:	61bb      	str	r3, [r7, #24]
 8003656:	4b83      	ldr	r3, [pc, #524]	; (8003864 <MX_GPIO_Init+0x228>)
 8003658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365a:	4a82      	ldr	r2, [pc, #520]	; (8003864 <MX_GPIO_Init+0x228>)
 800365c:	f043 0310 	orr.w	r3, r3, #16
 8003660:	6313      	str	r3, [r2, #48]	; 0x30
 8003662:	4b80      	ldr	r3, [pc, #512]	; (8003864 <MX_GPIO_Init+0x228>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	f003 0310 	and.w	r3, r3, #16
 800366a:	61bb      	str	r3, [r7, #24]
 800366c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800366e:	2300      	movs	r3, #0
 8003670:	617b      	str	r3, [r7, #20]
 8003672:	4b7c      	ldr	r3, [pc, #496]	; (8003864 <MX_GPIO_Init+0x228>)
 8003674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003676:	4a7b      	ldr	r2, [pc, #492]	; (8003864 <MX_GPIO_Init+0x228>)
 8003678:	f043 0304 	orr.w	r3, r3, #4
 800367c:	6313      	str	r3, [r2, #48]	; 0x30
 800367e:	4b79      	ldr	r3, [pc, #484]	; (8003864 <MX_GPIO_Init+0x228>)
 8003680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	617b      	str	r3, [r7, #20]
 8003688:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800368a:	2300      	movs	r3, #0
 800368c:	613b      	str	r3, [r7, #16]
 800368e:	4b75      	ldr	r3, [pc, #468]	; (8003864 <MX_GPIO_Init+0x228>)
 8003690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003692:	4a74      	ldr	r2, [pc, #464]	; (8003864 <MX_GPIO_Init+0x228>)
 8003694:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003698:	6313      	str	r3, [r2, #48]	; 0x30
 800369a:	4b72      	ldr	r3, [pc, #456]	; (8003864 <MX_GPIO_Init+0x228>)
 800369c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800369e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a2:	613b      	str	r3, [r7, #16]
 80036a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80036a6:	2300      	movs	r3, #0
 80036a8:	60fb      	str	r3, [r7, #12]
 80036aa:	4b6e      	ldr	r3, [pc, #440]	; (8003864 <MX_GPIO_Init+0x228>)
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	4a6d      	ldr	r2, [pc, #436]	; (8003864 <MX_GPIO_Init+0x228>)
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	6313      	str	r3, [r2, #48]	; 0x30
 80036b6:	4b6b      	ldr	r3, [pc, #428]	; (8003864 <MX_GPIO_Init+0x228>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	60fb      	str	r3, [r7, #12]
 80036c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80036c2:	2300      	movs	r3, #0
 80036c4:	60bb      	str	r3, [r7, #8]
 80036c6:	4b67      	ldr	r3, [pc, #412]	; (8003864 <MX_GPIO_Init+0x228>)
 80036c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ca:	4a66      	ldr	r2, [pc, #408]	; (8003864 <MX_GPIO_Init+0x228>)
 80036cc:	f043 0302 	orr.w	r3, r3, #2
 80036d0:	6313      	str	r3, [r2, #48]	; 0x30
 80036d2:	4b64      	ldr	r3, [pc, #400]	; (8003864 <MX_GPIO_Init+0x228>)
 80036d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	60bb      	str	r3, [r7, #8]
 80036dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80036de:	2300      	movs	r3, #0
 80036e0:	607b      	str	r3, [r7, #4]
 80036e2:	4b60      	ldr	r3, [pc, #384]	; (8003864 <MX_GPIO_Init+0x228>)
 80036e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e6:	4a5f      	ldr	r2, [pc, #380]	; (8003864 <MX_GPIO_Init+0x228>)
 80036e8:	f043 0308 	orr.w	r3, r3, #8
 80036ec:	6313      	str	r3, [r2, #48]	; 0x30
 80036ee:	4b5d      	ldr	r3, [pc, #372]	; (8003864 <MX_GPIO_Init+0x228>)
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	607b      	str	r3, [r7, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERESET_GPIO_Port, ERESET_Pin, GPIO_PIN_RESET);
 80036fa:	2200      	movs	r2, #0
 80036fc:	2101      	movs	r1, #1
 80036fe:	485a      	ldr	r0, [pc, #360]	; (8003868 <MX_GPIO_Init+0x22c>)
 8003700:	f004 ff62 	bl	80085c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD0_Pin|LCD1_Pin|LCD2_Pin|DOUT_9_Pin
 8003704:	2200      	movs	r2, #0
 8003706:	f24c 417f 	movw	r1, #50303	; 0xc47f
 800370a:	4858      	ldr	r0, [pc, #352]	; (800386c <MX_GPIO_Init+0x230>)
 800370c:	f004 ff5c 	bl	80085c8 <HAL_GPIO_WritePin>
                          |LED_Pin|LCDLED_Pin|LCD3_Pin|LCDR_Pin
                          |LCDE_Pin|LCDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DOUT_0_Pin|DOUT_1_Pin|DOUT_2_Pin|DOUT_3_Pin
 8003710:	2200      	movs	r2, #0
 8003712:	f64f 7180 	movw	r1, #65408	; 0xff80
 8003716:	4856      	ldr	r0, [pc, #344]	; (8003870 <MX_GPIO_Init+0x234>)
 8003718:	f004 ff56 	bl	80085c8 <HAL_GPIO_WritePin>
                          |DOUT_4_Pin|DOUT_5_Pin|DOUT_6_Pin|DOUT_7_Pin
                          |DOUT_8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DOUT_10_Pin|DOUT_11_Pin|KEYB_C0_Pin|KEYB_C1_Pin
 800371c:	2200      	movs	r2, #0
 800371e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8003722:	4854      	ldr	r0, [pc, #336]	; (8003874 <MX_GPIO_Init+0x238>)
 8003724:	f004 ff50 	bl	80085c8 <HAL_GPIO_WritePin>
                          |KEYB_C2_Pin|KEYB_C3_Pin|KEYB_C4_Pin|KEYB_C5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_TX_GPIO_Port, RS485_TX_Pin, GPIO_PIN_RESET);
 8003728:	2200      	movs	r2, #0
 800372a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800372e:	4852      	ldr	r0, [pc, #328]	; (8003878 <MX_GPIO_Init+0x23c>)
 8003730:	f004 ff4a 	bl	80085c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_SET);
 8003734:	2201      	movs	r2, #1
 8003736:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800373a:	484b      	ldr	r0, [pc, #300]	; (8003868 <MX_GPIO_Init+0x22c>)
 800373c:	f004 ff44 	bl	80085c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIN_4_Pin DIN_5_Pin DIN_6_Pin DIN_7_Pin
                           DIN_8_Pin DIN_2_Pin DIN_3_Pin */
  GPIO_InitStruct.Pin = DIN_4_Pin|DIN_5_Pin|DIN_6_Pin|DIN_7_Pin
 8003740:	237f      	movs	r3, #127	; 0x7f
 8003742:	61fb      	str	r3, [r7, #28]
                          |DIN_8_Pin|DIN_2_Pin|DIN_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003744:	2300      	movs	r3, #0
 8003746:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003748:	2301      	movs	r3, #1
 800374a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800374c:	f107 031c 	add.w	r3, r7, #28
 8003750:	4619      	mov	r1, r3
 8003752:	4847      	ldr	r0, [pc, #284]	; (8003870 <MX_GPIO_Init+0x234>)
 8003754:	f004 fc88 	bl	8008068 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIN_9_Pin DIN_10_Pin DIN_11_Pin */
  GPIO_InitStruct.Pin = DIN_9_Pin|DIN_10_Pin|DIN_11_Pin;
 8003758:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800375c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800375e:	2300      	movs	r3, #0
 8003760:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003762:	2301      	movs	r3, #1
 8003764:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003766:	f107 031c 	add.w	r3, r7, #28
 800376a:	4619      	mov	r1, r3
 800376c:	4842      	ldr	r0, [pc, #264]	; (8003878 <MX_GPIO_Init+0x23c>)
 800376e:	f004 fc7b 	bl	8008068 <HAL_GPIO_Init>

  /*Configure GPIO pins : ERESET_Pin S3CS0_Pin */
  GPIO_InitStruct.Pin = ERESET_Pin|S3CS0_Pin;
 8003772:	f248 0301 	movw	r3, #32769	; 0x8001
 8003776:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003778:	2301      	movs	r3, #1
 800377a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800377c:	2300      	movs	r3, #0
 800377e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003780:	2300      	movs	r3, #0
 8003782:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003784:	f107 031c 	add.w	r3, r7, #28
 8003788:	4619      	mov	r1, r3
 800378a:	4837      	ldr	r0, [pc, #220]	; (8003868 <MX_GPIO_Init+0x22c>)
 800378c:	f004 fc6c 	bl	8008068 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD0_Pin LCD1_Pin LCD2_Pin DOUT_9_Pin
                           LED_Pin LCDLED_Pin LCD3_Pin LCDR_Pin
                           LCDE_Pin LCDA_Pin */
  GPIO_InitStruct.Pin = LCD0_Pin|LCD1_Pin|LCD2_Pin|DOUT_9_Pin
 8003790:	f24c 437f 	movw	r3, #50303	; 0xc47f
 8003794:	61fb      	str	r3, [r7, #28]
                          |LED_Pin|LCDLED_Pin|LCD3_Pin|LCDR_Pin
                          |LCDE_Pin|LCDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003796:	2301      	movs	r3, #1
 8003798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379a:	2300      	movs	r3, #0
 800379c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800379e:	2300      	movs	r3, #0
 80037a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037a2:	f107 031c 	add.w	r3, r7, #28
 80037a6:	4619      	mov	r1, r3
 80037a8:	4830      	ldr	r0, [pc, #192]	; (800386c <MX_GPIO_Init+0x230>)
 80037aa:	f004 fc5d 	bl	8008068 <HAL_GPIO_Init>

  /*Configure GPIO pins : DOUT_0_Pin DOUT_1_Pin DOUT_2_Pin DOUT_3_Pin
                           DOUT_4_Pin DOUT_5_Pin DOUT_6_Pin DOUT_7_Pin
                           DOUT_8_Pin */
  GPIO_InitStruct.Pin = DOUT_0_Pin|DOUT_1_Pin|DOUT_2_Pin|DOUT_3_Pin
 80037ae:	f64f 7380 	movw	r3, #65408	; 0xff80
 80037b2:	61fb      	str	r3, [r7, #28]
                          |DOUT_4_Pin|DOUT_5_Pin|DOUT_6_Pin|DOUT_7_Pin
                          |DOUT_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037b4:	2301      	movs	r3, #1
 80037b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037b8:	2300      	movs	r3, #0
 80037ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037bc:	2300      	movs	r3, #0
 80037be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80037c0:	f107 031c 	add.w	r3, r7, #28
 80037c4:	4619      	mov	r1, r3
 80037c6:	482a      	ldr	r0, [pc, #168]	; (8003870 <MX_GPIO_Init+0x234>)
 80037c8:	f004 fc4e 	bl	8008068 <HAL_GPIO_Init>

  /*Configure GPIO pins : DOUT_10_Pin DOUT_11_Pin KEYB_C0_Pin KEYB_C1_Pin
                           KEYB_C2_Pin KEYB_C3_Pin KEYB_C4_Pin KEYB_C5_Pin */
  GPIO_InitStruct.Pin = DOUT_10_Pin|DOUT_11_Pin|KEYB_C0_Pin|KEYB_C1_Pin
 80037cc:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 80037d0:	61fb      	str	r3, [r7, #28]
                          |KEYB_C2_Pin|KEYB_C3_Pin|KEYB_C4_Pin|KEYB_C5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037d2:	2301      	movs	r3, #1
 80037d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d6:	2300      	movs	r3, #0
 80037d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037da:	2300      	movs	r3, #0
 80037dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037de:	f107 031c 	add.w	r3, r7, #28
 80037e2:	4619      	mov	r1, r3
 80037e4:	4823      	ldr	r0, [pc, #140]	; (8003874 <MX_GPIO_Init+0x238>)
 80037e6:	f004 fc3f 	bl	8008068 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_TX_Pin */
  GPIO_InitStruct.Pin = RS485_TX_Pin;
 80037ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80037f0:	2301      	movs	r3, #1
 80037f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037f4:	2300      	movs	r3, #0
 80037f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037f8:	2300      	movs	r3, #0
 80037fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 80037fc:	f107 031c 	add.w	r3, r7, #28
 8003800:	4619      	mov	r1, r3
 8003802:	481d      	ldr	r0, [pc, #116]	; (8003878 <MX_GPIO_Init+0x23c>)
 8003804:	f004 fc30 	bl	8008068 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003808:	f44f 7380 	mov.w	r3, #256	; 0x100
 800380c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800380e:	2302      	movs	r3, #2
 8003810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003812:	2300      	movs	r3, #0
 8003814:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003816:	2300      	movs	r3, #0
 8003818:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800381a:	2300      	movs	r3, #0
 800381c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800381e:	f107 031c 	add.w	r3, r7, #28
 8003822:	4619      	mov	r1, r3
 8003824:	4810      	ldr	r0, [pc, #64]	; (8003868 <MX_GPIO_Init+0x22c>)
 8003826:	f004 fc1f 	bl	8008068 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYB_R0_Pin KEYB_R1_Pin KEYB_R2_Pin KEYB_R3_Pin
                           KEYB_R4_Pin KEYB_R5_Pin */
  GPIO_InitStruct.Pin = KEYB_R0_Pin|KEYB_R1_Pin|KEYB_R2_Pin|KEYB_R3_Pin
 800382a:	233f      	movs	r3, #63	; 0x3f
 800382c:	61fb      	str	r3, [r7, #28]
                          |KEYB_R4_Pin|KEYB_R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800382e:	2300      	movs	r3, #0
 8003830:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003832:	2302      	movs	r3, #2
 8003834:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003836:	f107 031c 	add.w	r3, r7, #28
 800383a:	4619      	mov	r1, r3
 800383c:	480d      	ldr	r0, [pc, #52]	; (8003874 <MX_GPIO_Init+0x238>)
 800383e:	f004 fc13 	bl	8008068 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIN_0_Pin DIN_1_Pin */
  GPIO_InitStruct.Pin = DIN_0_Pin|DIN_1_Pin;
 8003842:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003846:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003848:	2300      	movs	r3, #0
 800384a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800384c:	2301      	movs	r3, #1
 800384e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003850:	f107 031c 	add.w	r3, r7, #28
 8003854:	4619      	mov	r1, r3
 8003856:	4805      	ldr	r0, [pc, #20]	; (800386c <MX_GPIO_Init+0x230>)
 8003858:	f004 fc06 	bl	8008068 <HAL_GPIO_Init>

}
 800385c:	bf00      	nop
 800385e:	3730      	adds	r7, #48	; 0x30
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40023800 	.word	0x40023800
 8003868:	40020000 	.word	0x40020000
 800386c:	40020400 	.word	0x40020400
 8003870:	40021000 	.word	0x40021000
 8003874:	40020c00 	.word	0x40020c00
 8003878:	40020800 	.word	0x40020800

0800387c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8003884:	f008 f962 	bl	800bb4c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  int result = 0;
 8003888:	2300      	movs	r3, #0
 800388a:	60fb      	str	r3, [r7, #12]
  task_init();
 800388c:	f7fd fd5a 	bl	8001344 <task_init>
  result = settingsLoadFRAM();
 8003890:	f001 f88a 	bl	80049a8 <settingsLoadFRAM>
 8003894:	60f8      	str	r0, [r7, #12]
  main_process_init();
 8003896:	f000 f82d 	bl	80038f4 <main_process_init>
  /* Infinite loop */
  for(;;)
  {
	main_process();
 800389a:	f000 f81c 	bl	80038d6 <main_process>
    osDelay(1);
 800389e:	2001      	movs	r0, #1
 80038a0:	f008 feff 	bl	800c6a2 <osDelay>
	main_process();
 80038a4:	e7f9      	b.n	800389a <StartDefaultTask+0x1e>
	...

080038a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a04      	ldr	r2, [pc, #16]	; (80038c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d101      	bne.n	80038be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80038ba:	f002 f887 	bl	80059cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80038be:	bf00      	nop
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40010000 	.word	0x40010000

080038cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80038d0:	b672      	cpsid	i
}
 80038d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80038d4:	e7fe      	b.n	80038d4 <Error_Handler+0x8>

080038d6 <main_process>:
#include <probotbornik.h>



void main_process()
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	af00      	add	r7, sp, #0
	Read_Inputs();
 80038da:	f7fc ff5d 	bl	8000798 <Read_Inputs>
	Analog_Read();
 80038de:	f7fc fe63 	bl	80005a8 <Analog_Read>
	probotbor_process();
 80038e2:	f000 fc47 	bl	8004174 <probotbor_process>
	Write_Outputs();
 80038e6:	f7fd f8eb 	bl	8000ac0 <Write_Outputs>

	osDelay(1);
 80038ea:	2001      	movs	r0, #1
 80038ec:	f008 fed9 	bl	800c6a2 <osDelay>
}
 80038f0:	bf00      	nop
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <main_process_init>:

void main_process_init()
{
 80038f4:	b480      	push	{r7}
 80038f6:	af00      	add	r7, sp, #0

}
 80038f8:	bf00      	nop
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
	...

08003904 <ModbusInit>:
static int WriteSingleRegister(uint8_t* request, uint8_t* answer, ModbusSource source);
static int WrieMultiplyRegisters(uint8_t* request, uint8_t* answer,ModbusSource source);
static int WriteToHoldings(uint8_t* request, uint8_t* answer,ModbusSource source, int (*write)(uint8_t*,uint8_t*,ModbusSource));

void ModbusInit()
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
	holding_pointer = (uint16_t*)&settings;
 8003908:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <ModbusInit+0x34>)
 800390a:	4a0c      	ldr	r2, [pc, #48]	; (800393c <ModbusInit+0x38>)
 800390c:	601a      	str	r2, [r3, #0]
	reading_pointer = (uint16_t*)&meas_data;
 800390e:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <ModbusInit+0x3c>)
 8003910:	4a0c      	ldr	r2, [pc, #48]	; (8003944 <ModbusInit+0x40>)
 8003912:	601a      	str	r2, [r3, #0]
	holding_size = sizeof(settings)/2;
 8003914:	4b0c      	ldr	r3, [pc, #48]	; (8003948 <ModbusInit+0x44>)
 8003916:	224e      	movs	r2, #78	; 0x4e
 8003918:	801a      	strh	r2, [r3, #0]
	reading_size = sizeof(meas_data)/2;
 800391a:	4b0c      	ldr	r3, [pc, #48]	; (800394c <ModbusInit+0x48>)
 800391c:	2236      	movs	r2, #54	; 0x36
 800391e:	801a      	strh	r2, [r3, #0]
	if(settings.retain.mb_addr==0)settings.retain.mb_addr = 1;
 8003920:	4b06      	ldr	r3, [pc, #24]	; (800393c <ModbusInit+0x38>)
 8003922:	891b      	ldrh	r3, [r3, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d102      	bne.n	800392e <ModbusInit+0x2a>
 8003928:	4b04      	ldr	r3, [pc, #16]	; (800393c <ModbusInit+0x38>)
 800392a:	2201      	movs	r2, #1
 800392c:	811a      	strh	r2, [r3, #8]
}
 800392e:	bf00      	nop
 8003930:	46bd      	mov	sp, r7
 8003932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003936:	4770      	bx	lr
 8003938:	20000bb0 	.word	0x20000bb0
 800393c:	20000bf0 	.word	0x20000bf0
 8003940:	20000bb4 	.word	0x20000bb4
 8003944:	20000c8c 	.word	0x20000c8c
 8003948:	20000bb8 	.word	0x20000bb8
 800394c:	20000bba 	.word	0x20000bba

08003950 <ModbusParse>:


//Ф-я парсинга входящего буфера, если это Modbus, то возвращает кол-во байт
int ModbusParse(uint8_t *request, uint16_t req_length, uint8_t *answer, ModbusSource source)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	607a      	str	r2, [r7, #4]
 800395a:	461a      	mov	r2, r3
 800395c:	460b      	mov	r3, r1
 800395e:	817b      	strh	r3, [r7, #10]
 8003960:	4613      	mov	r3, r2
 8003962:	727b      	strb	r3, [r7, #9]
	settings.non_retain.data[37]++;
 8003964:	4b26      	ldr	r3, [pc, #152]	; (8003a00 <ModbusParse+0xb0>)
 8003966:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 800396a:	3301      	adds	r3, #1
 800396c:	b29a      	uxth	r2, r3
 800396e:	4b24      	ldr	r3, [pc, #144]	; (8003a00 <ModbusParse+0xb0>)
 8003970:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
	if(answer==NULL)return 0; // Проверка, выделилась ли память под ответ
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d101      	bne.n	800397e <ModbusParse+0x2e>
 800397a:	2300      	movs	r3, #0
 800397c:	e03c      	b.n	80039f8 <ModbusParse+0xa8>
	if(!CheckRequestLength(request,req_length,source))return 0; // Проверка корректности длины пакета
 800397e:	897b      	ldrh	r3, [r7, #10]
 8003980:	7a7a      	ldrb	r2, [r7, #9]
 8003982:	4619      	mov	r1, r3
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f000 f83d 	bl	8003a04 <CheckRequestLength>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d101      	bne.n	8003994 <ModbusParse+0x44>
 8003990:	2300      	movs	r3, #0
 8003992:	e031      	b.n	80039f8 <ModbusParse+0xa8>
	if(!CheckMbAddr(request, source))return 0; // Проверка корректности адреса
 8003994:	7a7b      	ldrb	r3, [r7, #9]
 8003996:	4619      	mov	r1, r3
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 f857 	bl	8003a4c <CheckMbAddr>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d101      	bne.n	80039a8 <ModbusParse+0x58>
 80039a4:	2300      	movs	r3, #0
 80039a6:	e027      	b.n	80039f8 <ModbusParse+0xa8>
	if(!IsCorrectMbCommand(request, source))// Проверка корректности функционального кода
 80039a8:	7a7b      	ldrb	r3, [r7, #9]
 80039aa:	4619      	mov	r1, r3
 80039ac:	68f8      	ldr	r0, [r7, #12]
 80039ae:	f000 f873 	bl	8003a98 <IsCorrectMbCommand>
 80039b2:	4603      	mov	r3, r0
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d107      	bne.n	80039c8 <ModbusParse+0x78>
	{
		return SetInvalidCommand(request, answer, 1, source);
 80039b8:	7a7b      	ldrb	r3, [r7, #9]
 80039ba:	2201      	movs	r2, #1
 80039bc:	6879      	ldr	r1, [r7, #4]
 80039be:	68f8      	ldr	r0, [r7, #12]
 80039c0:	f000 f89e 	bl	8003b00 <SetInvalidCommand>
 80039c4:	4603      	mov	r3, r0
 80039c6:	e017      	b.n	80039f8 <ModbusParse+0xa8>
	}
	if(!CheckCrc(request, req_length, source))
 80039c8:	897b      	ldrh	r3, [r7, #10]
 80039ca:	7a7a      	ldrb	r2, [r7, #9]
 80039cc:	4619      	mov	r1, r3
 80039ce:	68f8      	ldr	r0, [r7, #12]
 80039d0:	f000 f93f 	bl	8003c52 <CheckCrc>
 80039d4:	4603      	mov	r3, r0
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d107      	bne.n	80039ea <ModbusParse+0x9a>
	{
		return SetInvalidCommand(request, answer, 3, source);
 80039da:	7a7b      	ldrb	r3, [r7, #9]
 80039dc:	2203      	movs	r2, #3
 80039de:	6879      	ldr	r1, [r7, #4]
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 f88d 	bl	8003b00 <SetInvalidCommand>
 80039e6:	4603      	mov	r3, r0
 80039e8:	e006      	b.n	80039f8 <ModbusParse+0xa8>
	}
	return GetModbusAnswer(request, answer, source);
 80039ea:	7a7b      	ldrb	r3, [r7, #9]
 80039ec:	461a      	mov	r2, r3
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f000 f963 	bl	8003cbc <GetModbusAnswer>
 80039f6:	4603      	mov	r3, r0
}
 80039f8:	4618      	mov	r0, r3
 80039fa:	3710      	adds	r7, #16
 80039fc:	46bd      	mov	sp, r7
 80039fe:	bd80      	pop	{r7, pc}
 8003a00:	20000bf0 	.word	0x20000bf0

08003a04 <CheckRequestLength>:

//Проверка соответствия длины данных, передаваемых в буфере
static uint8_t CheckRequestLength(uint8_t* request_pointer,int request_length, ModbusSource source)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b087      	sub	sp, #28
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	71fb      	strb	r3, [r7, #7]
	if(source==RS485)return 1;
 8003a12:	79fb      	ldrb	r3, [r7, #7]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <CheckRequestLength+0x18>
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e010      	b.n	8003a3e <CheckRequestLength+0x3a>
    int len_from_packet = (*(request_pointer+4))*256 + *(request_pointer+5);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	3304      	adds	r3, #4
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	021b      	lsls	r3, r3, #8
 8003a24:	68fa      	ldr	r2, [r7, #12]
 8003a26:	3205      	adds	r2, #5
 8003a28:	7812      	ldrb	r2, [r2, #0]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	617b      	str	r3, [r7, #20]
    return len_from_packet+6 == request_length;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	3306      	adds	r3, #6
 8003a32:	68ba      	ldr	r2, [r7, #8]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	bf0c      	ite	eq
 8003a38:	2301      	moveq	r3, #1
 8003a3a:	2300      	movne	r3, #0
 8003a3c:	b2db      	uxtb	r3, r3
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	371c      	adds	r7, #28
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
	...

08003a4c <CheckMbAddr>:

//Проверка соответсия адреса в сети Modbus сервера
static uint8_t CheckMbAddr(uint8_t *request,ModbusSource source)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	70fb      	strb	r3, [r7, #3]
	uint8_t addr = 0;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	73fb      	strb	r3, [r7, #15]
	if(source==ETHERNET)
 8003a5c:	78fb      	ldrb	r3, [r7, #3]
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d103      	bne.n	8003a6a <CheckMbAddr+0x1e>
	{
		addr =  *(request+6);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	799b      	ldrb	r3, [r3, #6]
 8003a66:	73fb      	strb	r3, [r7, #15]
 8003a68:	e005      	b.n	8003a76 <CheckMbAddr+0x2a>
	}
	else if(source==RS485)
 8003a6a:	78fb      	ldrb	r3, [r7, #3]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d102      	bne.n	8003a76 <CheckMbAddr+0x2a>
	{
		addr =  *(request);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	73fb      	strb	r3, [r7, #15]
	}
	return addr == settings.retain.mb_addr;
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <CheckMbAddr+0x48>)
 8003a7c:	891b      	ldrh	r3, [r3, #8]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	bf0c      	ite	eq
 8003a82:	2301      	moveq	r3, #1
 8003a84:	2300      	movne	r3, #0
 8003a86:	b2db      	uxtb	r3, r3
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	20000bf0 	.word	0x20000bf0

08003a98 <IsCorrectMbCommand>:

//Проверка корректности функционального кода
static uint8_t IsCorrectMbCommand(uint8_t *request,ModbusSource source)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = 0;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	73fb      	strb	r3, [r7, #15]
	if(source==ETHERNET)
 8003aa8:	78fb      	ldrb	r3, [r7, #3]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d103      	bne.n	8003ab6 <IsCorrectMbCommand+0x1e>
	{
		cmd = *(request+7);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	79db      	ldrb	r3, [r3, #7]
 8003ab2:	73fb      	strb	r3, [r7, #15]
 8003ab4:	e005      	b.n	8003ac2 <IsCorrectMbCommand+0x2a>
	}
	else if(source==RS485)
 8003ab6:	78fb      	ldrb	r3, [r7, #3]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d102      	bne.n	8003ac2 <IsCorrectMbCommand+0x2a>
	{
		cmd = *(request+1);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	785b      	ldrb	r3, [r3, #1]
 8003ac0:	73fb      	strb	r3, [r7, #15]
	}
	/*
	 * Функция возвращает 1, если номер команды корректен, 0 - если некорректен
	 * cmd - номер команды
	 * */
	switch (cmd) {
 8003ac2:	7bfb      	ldrb	r3, [r7, #15]
 8003ac4:	2b10      	cmp	r3, #16
 8003ac6:	bf8c      	ite	hi
 8003ac8:	2201      	movhi	r2, #1
 8003aca:	2200      	movls	r2, #0
 8003acc:	b2d2      	uxtb	r2, r2
 8003ace:	2a00      	cmp	r2, #0
 8003ad0:	d10c      	bne.n	8003aec <IsCorrectMbCommand+0x54>
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	409a      	lsls	r2, r3
 8003ad6:	4b09      	ldr	r3, [pc, #36]	; (8003afc <IsCorrectMbCommand+0x64>)
 8003ad8:	4013      	ands	r3, r2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	bf14      	ite	ne
 8003ade:	2301      	movne	r3, #1
 8003ae0:	2300      	moveq	r3, #0
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <IsCorrectMbCommand+0x54>
		case 3:
		case 4:
		case 6:
		//case 5:
        case 16:
            return 1;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e000      	b.n	8003aee <IsCorrectMbCommand+0x56>
		default:
			return 0;
 8003aec:	2300      	movs	r3, #0
	}
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	00010058 	.word	0x00010058

08003b00 <SetInvalidCommand>:

//Формирует телеграмму ошиобного запроса
static int SetInvalidCommand(uint8_t *request, uint8_t *answer, uint8_t code, ModbusSource source)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	60b9      	str	r1, [r7, #8]
 8003b0a:	4611      	mov	r1, r2
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	460b      	mov	r3, r1
 8003b10:	71fb      	strb	r3, [r7, #7]
 8003b12:	4613      	mov	r3, r2
 8003b14:	71bb      	strb	r3, [r7, #6]
	uint8_t func_code = source ? *(request+1) : *(request+1);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	785b      	ldrb	r3, [r3, #1]
 8003b1a:	75fb      	strb	r3, [r7, #23]
	func_code = set_bit(func_code, 7);
 8003b1c:	7dfb      	ldrb	r3, [r7, #23]
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	2107      	movs	r1, #7
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7fc fe20 	bl	8000768 <set_bit>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	75fb      	strb	r3, [r7, #23]
	if(source==RS485)
 8003b2c:	79bb      	ldrb	r3, [r7, #6]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d11d      	bne.n	8003b6e <SetInvalidCommand+0x6e>
	{
		uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 8003b32:	2300      	movs	r3, #0
 8003b34:	82bb      	strh	r3, [r7, #20]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	781a      	ldrb	r2, [r3, #0]
		memcpy(answer,request,1);
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	701a      	strb	r2, [r3, #0]
		*(answer+1) = func_code;//Функциональный код с измененным битом
 8003b3e:	68bb      	ldr	r3, [r7, #8]
 8003b40:	3301      	adds	r3, #1
 8003b42:	7dfa      	ldrb	r2, [r7, #23]
 8003b44:	701a      	strb	r2, [r3, #0]
		*(answer+2) = code;//Функциональный код с измененным битом
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	3302      	adds	r3, #2
 8003b4a:	79fa      	ldrb	r2, [r7, #7]
 8003b4c:	701a      	strb	r2, [r3, #0]
		CRC16_CALC(answer,check_sum,3);
 8003b4e:	f107 0314 	add.w	r3, r7, #20
 8003b52:	2203      	movs	r2, #3
 8003b54:	4619      	mov	r1, r3
 8003b56:	68b8      	ldr	r0, [r7, #8]
 8003b58:	f000 f832 	bl	8003bc0 <CRC16_CALC>
		*(answer+3) = check_sum[0];
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	3303      	adds	r3, #3
 8003b60:	7d3a      	ldrb	r2, [r7, #20]
 8003b62:	701a      	strb	r2, [r3, #0]
		*(answer+4) = check_sum[1];
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	3304      	adds	r3, #4
 8003b68:	7d7a      	ldrb	r2, [r7, #21]
 8003b6a:	701a      	strb	r2, [r3, #0]
 8003b6c:	e01c      	b.n	8003ba8 <SetInvalidCommand+0xa8>
	}
	else if(source==ETHERNET)
 8003b6e:	79bb      	ldrb	r3, [r7, #6]
 8003b70:	2b01      	cmp	r3, #1
 8003b72:	d119      	bne.n	8003ba8 <SetInvalidCommand+0xa8>
	{
		memcpy(answer,request,8);
 8003b74:	2208      	movs	r2, #8
 8003b76:	68f9      	ldr	r1, [r7, #12]
 8003b78:	68b8      	ldr	r0, [r7, #8]
 8003b7a:	f019 f98b 	bl	801ce94 <memcpy>
		*(answer+4) = 0;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	3304      	adds	r3, #4
 8003b82:	2200      	movs	r2, #0
 8003b84:	701a      	strb	r2, [r3, #0]
		*(answer+5) = 3;
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	3305      	adds	r3, #5
 8003b8a:	2203      	movs	r2, #3
 8003b8c:	701a      	strb	r2, [r3, #0]
		*(answer+7) |= 128;
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	3307      	adds	r3, #7
 8003b92:	781a      	ldrb	r2, [r3, #0]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	3307      	adds	r3, #7
 8003b98:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	701a      	strb	r2, [r3, #0]
		*(answer+8) = code;
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	3308      	adds	r3, #8
 8003ba4:	79fa      	ldrb	r2, [r7, #7]
 8003ba6:	701a      	strb	r2, [r3, #0]
	}

	uint8_t len = source==RS485 ? 5 : 9;
 8003ba8:	79bb      	ldrb	r3, [r7, #6]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <SetInvalidCommand+0xb2>
 8003bae:	2305      	movs	r3, #5
 8003bb0:	e000      	b.n	8003bb4 <SetInvalidCommand+0xb4>
 8003bb2:	2309      	movs	r3, #9
 8003bb4:	75bb      	strb	r3, [r7, #22]
	return len;
 8003bb6:	7dbb      	ldrb	r3, [r7, #22]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3718      	adds	r7, #24
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <CRC16_CALC>:

static void CRC16_CALC(uint8_t* arr, uint8_t* checkSum, uint8_t messageLength)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b089      	sub	sp, #36	; 0x24
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	60f8      	str	r0, [r7, #12]
 8003bc8:	60b9      	str	r1, [r7, #8]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	71fb      	strb	r3, [r7, #7]
	/*Функция расчета контрольной суммы
		 * arr - указатель на массив байт, по которым нужно посчитать CRC
		 * checkSum - указатель на массив из 2 байт, куда нужно положить CRC
		 * messageLength - ко-во байт, по которым нужно считать CRC	 *
		 * */
		uint16_t reg = 0xFFFF;
 8003bce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bd2:	83fb      	strh	r3, [r7, #30]
		uint16_t polinom = 0xA001;
 8003bd4:	f24a 0301 	movw	r3, #40961	; 0xa001
 8003bd8:	827b      	strh	r3, [r7, #18]
		for(int i=0;i < messageLength;i++)
 8003bda:	2300      	movs	r3, #0
 8003bdc:	61bb      	str	r3, [r7, #24]
 8003bde:	e023      	b.n	8003c28 <CRC16_CALC+0x68>
		{
			reg^=*(arr+i);
 8003be0:	69bb      	ldr	r3, [r7, #24]
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	4413      	add	r3, r2
 8003be6:	781b      	ldrb	r3, [r3, #0]
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	8bfb      	ldrh	r3, [r7, #30]
 8003bec:	4053      	eors	r3, r2
 8003bee:	83fb      	strh	r3, [r7, #30]
			for (int j = 0; j < 8; j++)
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	617b      	str	r3, [r7, #20]
 8003bf4:	e012      	b.n	8003c1c <CRC16_CALC+0x5c>
			{
				if ((reg&1)==1) {
 8003bf6:	8bfb      	ldrh	r3, [r7, #30]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d007      	beq.n	8003c10 <CRC16_CALC+0x50>
					reg>>=1;
 8003c00:	8bfb      	ldrh	r3, [r7, #30]
 8003c02:	085b      	lsrs	r3, r3, #1
 8003c04:	83fb      	strh	r3, [r7, #30]
					reg^=polinom;
 8003c06:	8bfa      	ldrh	r2, [r7, #30]
 8003c08:	8a7b      	ldrh	r3, [r7, #18]
 8003c0a:	4053      	eors	r3, r2
 8003c0c:	83fb      	strh	r3, [r7, #30]
 8003c0e:	e002      	b.n	8003c16 <CRC16_CALC+0x56>
				}
				else reg>>=1;
 8003c10:	8bfb      	ldrh	r3, [r7, #30]
 8003c12:	085b      	lsrs	r3, r3, #1
 8003c14:	83fb      	strh	r3, [r7, #30]
			for (int j = 0; j < 8; j++)
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	3301      	adds	r3, #1
 8003c1a:	617b      	str	r3, [r7, #20]
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	2b07      	cmp	r3, #7
 8003c20:	dde9      	ble.n	8003bf6 <CRC16_CALC+0x36>
		for(int i=0;i < messageLength;i++)
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	3301      	adds	r3, #1
 8003c26:	61bb      	str	r3, [r7, #24]
 8003c28:	79fb      	ldrb	r3, [r7, #7]
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	dbd7      	blt.n	8003be0 <CRC16_CALC+0x20>
			}
		}
		*(checkSum+1)=(uint8_t)(reg>>8);
 8003c30:	8bfb      	ldrh	r3, [r7, #30]
 8003c32:	0a1b      	lsrs	r3, r3, #8
 8003c34:	b29a      	uxth	r2, r3
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	701a      	strb	r2, [r3, #0]
		*checkSum = (uint8_t)(reg & 0x00FF);
 8003c3e:	8bfb      	ldrh	r3, [r7, #30]
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	701a      	strb	r2, [r3, #0]
}
 8003c46:	bf00      	nop
 8003c48:	3724      	adds	r7, #36	; 0x24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <CheckCrc>:

//Проверка контрольной суммы запроса
static uint8_t CheckCrc(uint8_t* request_pointer,int request_length, ModbusSource source)
{
 8003c52:	b580      	push	{r7, lr}
 8003c54:	b086      	sub	sp, #24
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	60f8      	str	r0, [r7, #12]
 8003c5a:	60b9      	str	r1, [r7, #8]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	71fb      	strb	r3, [r7, #7]
	if(source==ETHERNET)return 1;
 8003c60:	79fb      	ldrb	r3, [r7, #7]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d101      	bne.n	8003c6a <CheckCrc+0x18>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e024      	b.n	8003cb4 <CheckCrc+0x62>
	uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	82bb      	strh	r3, [r7, #20]
	if(request_length<4)return 0;
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	2b03      	cmp	r3, #3
 8003c72:	dc01      	bgt.n	8003c78 <CheckCrc+0x26>
 8003c74:	2300      	movs	r3, #0
 8003c76:	e01d      	b.n	8003cb4 <CheckCrc+0x62>
	CRC16_CALC(request_pointer, check_sum, request_length-2);
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	3b02      	subs	r3, #2
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	f107 0314 	add.w	r3, r7, #20
 8003c84:	4619      	mov	r1, r3
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f7ff ff9a 	bl	8003bc0 <CRC16_CALC>
	return request_pointer[request_length-2]==check_sum[0] && request_pointer[request_length-1]==check_sum[1];
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	3b02      	subs	r3, #2
 8003c90:	68fa      	ldr	r2, [r7, #12]
 8003c92:	4413      	add	r3, r2
 8003c94:	781a      	ldrb	r2, [r3, #0]
 8003c96:	7d3b      	ldrb	r3, [r7, #20]
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d109      	bne.n	8003cb0 <CheckCrc+0x5e>
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	781a      	ldrb	r2, [r3, #0]
 8003ca6:	7d7b      	ldrb	r3, [r7, #21]
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d101      	bne.n	8003cb0 <CheckCrc+0x5e>
 8003cac:	2301      	movs	r3, #1
 8003cae:	e000      	b.n	8003cb2 <CheckCrc+0x60>
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	b2db      	uxtb	r3, r3
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3718      	adds	r7, #24
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <GetModbusAnswer>:

//Возвращает кол-во байт, котрые нужно передать обратно
static int GetModbusAnswer(uint8_t* request, uint8_t* answer, ModbusSource source)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b088      	sub	sp, #32
 8003cc0:	af02      	add	r7, sp, #8
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	71fb      	strb	r3, [r7, #7]
	uint8_t func_code = source==RS485 ? *(request+1) : *(request+7);
 8003cca:	79fb      	ldrb	r3, [r7, #7]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d102      	bne.n	8003cd6 <GetModbusAnswer+0x1a>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	785b      	ldrb	r3, [r3, #1]
 8003cd4:	e001      	b.n	8003cda <GetModbusAnswer+0x1e>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	79db      	ldrb	r3, [r3, #7]
 8003cda:	75fb      	strb	r3, [r7, #23]

	switch (func_code) {
 8003cdc:	7dfb      	ldrb	r3, [r7, #23]
 8003cde:	3b03      	subs	r3, #3
 8003ce0:	2b0d      	cmp	r3, #13
 8003ce2:	d849      	bhi.n	8003d78 <GetModbusAnswer+0xbc>
 8003ce4:	a201      	add	r2, pc, #4	; (adr r2, 8003cec <GetModbusAnswer+0x30>)
 8003ce6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cea:	bf00      	nop
 8003cec:	08003d25 	.word	0x08003d25
 8003cf0:	08003d3f 	.word	0x08003d3f
 8003cf4:	08003d79 	.word	0x08003d79
 8003cf8:	08003d59 	.word	0x08003d59
 8003cfc:	08003d79 	.word	0x08003d79
 8003d00:	08003d79 	.word	0x08003d79
 8003d04:	08003d79 	.word	0x08003d79
 8003d08:	08003d79 	.word	0x08003d79
 8003d0c:	08003d79 	.word	0x08003d79
 8003d10:	08003d79 	.word	0x08003d79
 8003d14:	08003d79 	.word	0x08003d79
 8003d18:	08003d79 	.word	0x08003d79
 8003d1c:	08003d79 	.word	0x08003d79
 8003d20:	08003d69 	.word	0x08003d69
		case READ_HOLDING_REGS:
			return ReadRegisters(request, answer, holding_pointer, holding_size, source);
 8003d24:	4b17      	ldr	r3, [pc, #92]	; (8003d84 <GetModbusAnswer+0xc8>)
 8003d26:	681a      	ldr	r2, [r3, #0]
 8003d28:	4b17      	ldr	r3, [pc, #92]	; (8003d88 <GetModbusAnswer+0xcc>)
 8003d2a:	8819      	ldrh	r1, [r3, #0]
 8003d2c:	79fb      	ldrb	r3, [r7, #7]
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	460b      	mov	r3, r1
 8003d32:	68b9      	ldr	r1, [r7, #8]
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 f831 	bl	8003d9c <ReadRegisters>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	e01e      	b.n	8003d7c <GetModbusAnswer+0xc0>
		case READ_INPUT_REGS:
			return ReadRegisters(request, answer, reading_pointer, reading_size, source);
 8003d3e:	4b13      	ldr	r3, [pc, #76]	; (8003d8c <GetModbusAnswer+0xd0>)
 8003d40:	681a      	ldr	r2, [r3, #0]
 8003d42:	4b13      	ldr	r3, [pc, #76]	; (8003d90 <GetModbusAnswer+0xd4>)
 8003d44:	8819      	ldrh	r1, [r3, #0]
 8003d46:	79fb      	ldrb	r3, [r7, #7]
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	460b      	mov	r3, r1
 8003d4c:	68b9      	ldr	r1, [r7, #8]
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 f824 	bl	8003d9c <ReadRegisters>
 8003d54:	4603      	mov	r3, r0
 8003d56:	e011      	b.n	8003d7c <GetModbusAnswer+0xc0>
		case WRITE_SINGLE_REG:
			return WriteToHoldings(request, answer, source, &WriteSingleRegister);
 8003d58:	79fa      	ldrb	r2, [r7, #7]
 8003d5a:	4b0e      	ldr	r3, [pc, #56]	; (8003d94 <GetModbusAnswer+0xd8>)
 8003d5c:	68b9      	ldr	r1, [r7, #8]
 8003d5e:	68f8      	ldr	r0, [r7, #12]
 8003d60:	f000 f9dc 	bl	800411c <WriteToHoldings>
 8003d64:	4603      	mov	r3, r0
 8003d66:	e009      	b.n	8003d7c <GetModbusAnswer+0xc0>
		case WRITE_MULTIPLY_REGS:
			return WriteToHoldings(request, answer, source, &WrieMultiplyRegisters);
 8003d68:	79fa      	ldrb	r2, [r7, #7]
 8003d6a:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <GetModbusAnswer+0xdc>)
 8003d6c:	68b9      	ldr	r1, [r7, #8]
 8003d6e:	68f8      	ldr	r0, [r7, #12]
 8003d70:	f000 f9d4 	bl	800411c <WriteToHoldings>
 8003d74:	4603      	mov	r3, r0
 8003d76:	e001      	b.n	8003d7c <GetModbusAnswer+0xc0>
		default:
			break;
 8003d78:	bf00      	nop
	}
	return 0;
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3718      	adds	r7, #24
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	20000bb0 	.word	0x20000bb0
 8003d88:	20000bb8 	.word	0x20000bb8
 8003d8c:	20000bb4 	.word	0x20000bb4
 8003d90:	20000bba 	.word	0x20000bba
 8003d94:	08003f7d 	.word	0x08003f7d
 8003d98:	08004021 	.word	0x08004021

08003d9c <ReadRegisters>:

//Ф-я чтения регистров из памяти memory_pointer размером memory_size
static int ReadRegisters(uint8_t *request, uint8_t *answer, uint16_t *memory_pointer, uint16_t memory_size, ModbusSource source)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b088      	sub	sp, #32
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
 8003da8:	807b      	strh	r3, [r7, #2]
	uint16_t  maxAddr = memory_size-1;
 8003daa:	887b      	ldrh	r3, [r7, #2]
 8003dac:	3b01      	subs	r3, #1
 8003dae:	83fb      	strh	r3, [r7, #30]
	uint16_t start_reg = GetWordFromBytes(request,source==RS485?2:8);
 8003db0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d101      	bne.n	8003dbc <ReadRegisters+0x20>
 8003db8:	2302      	movs	r3, #2
 8003dba:	e000      	b.n	8003dbe <ReadRegisters+0x22>
 8003dbc:	2308      	movs	r3, #8
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	68f8      	ldr	r0, [r7, #12]
 8003dc2:	f000 f882 	bl	8003eca <GetWordFromBytes>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	83bb      	strh	r3, [r7, #28]
	uint16_t reg_count = GetWordFromBytes(request,source==RS485?4:10);
 8003dca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <ReadRegisters+0x3a>
 8003dd2:	2304      	movs	r3, #4
 8003dd4:	e000      	b.n	8003dd8 <ReadRegisters+0x3c>
 8003dd6:	230a      	movs	r3, #10
 8003dd8:	4619      	mov	r1, r3
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 f875 	bl	8003eca <GetWordFromBytes>
 8003de0:	4603      	mov	r3, r0
 8003de2:	837b      	strh	r3, [r7, #26]
	if((start_reg+reg_count-1)>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 8003de4:	8bba      	ldrh	r2, [r7, #28]
 8003de6:	8b7b      	ldrh	r3, [r7, #26]
 8003de8:	4413      	add	r3, r2
 8003dea:	1e5a      	subs	r2, r3, #1
 8003dec:	8bfb      	ldrh	r3, [r7, #30]
 8003dee:	429a      	cmp	r2, r3
 8003df0:	dd08      	ble.n	8003e04 <ReadRegisters+0x68>
 8003df2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003df6:	2202      	movs	r2, #2
 8003df8:	68b9      	ldr	r1, [r7, #8]
 8003dfa:	68f8      	ldr	r0, [r7, #12]
 8003dfc:	f7ff fe80 	bl	8003b00 <SetInvalidCommand>
 8003e00:	4603      	mov	r3, r0
 8003e02:	e05e      	b.n	8003ec2 <ReadRegisters+0x126>
	if(source==ETHERNET)
 8003e04:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d124      	bne.n	8003e56 <ReadRegisters+0xba>
	{
		memcpy(answer,request,8);
 8003e0c:	2208      	movs	r2, #8
 8003e0e:	68f9      	ldr	r1, [r7, #12]
 8003e10:	68b8      	ldr	r0, [r7, #8]
 8003e12:	f019 f83f 	bl	801ce94 <memcpy>
		InsertWordToMemory(reg_count*2+3, answer+4);//Длина сообщения
 8003e16:	8b7b      	ldrh	r3, [r7, #26]
 8003e18:	005b      	lsls	r3, r3, #1
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	3303      	adds	r3, #3
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	3304      	adds	r3, #4
 8003e24:	4619      	mov	r1, r3
 8003e26:	4610      	mov	r0, r2
 8003e28:	f000 f86a 	bl	8003f00 <InsertWordToMemory>
		*(answer+8) = reg_count*2;//количесво байт далее
 8003e2c:	8b7b      	ldrh	r3, [r7, #26]
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	3308      	adds	r3, #8
 8003e34:	0052      	lsls	r2, r2, #1
 8003e36:	b2d2      	uxtb	r2, r2
 8003e38:	701a      	strb	r2, [r3, #0]
		InsertWordsToMemory(memory_pointer+start_reg,answer+9,reg_count);
 8003e3a:	8bbb      	ldrh	r3, [r7, #28]
 8003e3c:	005b      	lsls	r3, r3, #1
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	18d0      	adds	r0, r2, r3
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	3309      	adds	r3, #9
 8003e46:	8b7a      	ldrh	r2, [r7, #26]
 8003e48:	4619      	mov	r1, r3
 8003e4a:	f000 f869 	bl	8003f20 <InsertWordsToMemory>
		return 9+reg_count*2;
 8003e4e:	8b7b      	ldrh	r3, [r7, #26]
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	3309      	adds	r3, #9
 8003e54:	e035      	b.n	8003ec2 <ReadRegisters+0x126>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	881b      	ldrh	r3, [r3, #0]
 8003e5a:	b29a      	uxth	r2, r3
	}
	else
	{
		memcpy(answer,request,2);
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	801a      	strh	r2, [r3, #0]
		*(answer+2) = reg_count*2;//количесво байт далее
 8003e60:	8b7b      	ldrh	r3, [r7, #26]
 8003e62:	b2da      	uxtb	r2, r3
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	3302      	adds	r3, #2
 8003e68:	0052      	lsls	r2, r2, #1
 8003e6a:	b2d2      	uxtb	r2, r2
 8003e6c:	701a      	strb	r2, [r3, #0]
		InsertWordsToMemory(memory_pointer+start_reg,answer+3,reg_count);//Данные
 8003e6e:	8bbb      	ldrh	r3, [r7, #28]
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	18d0      	adds	r0, r2, r3
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	3303      	adds	r3, #3
 8003e7a:	8b7a      	ldrh	r2, [r7, #26]
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	f000 f84f 	bl	8003f20 <InsertWordsToMemory>
		uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 8003e82:	2300      	movs	r3, #0
 8003e84:	823b      	strh	r3, [r7, #16]
		CRC16_CALC(answer,check_sum,3+reg_count*2);
 8003e86:	8b7b      	ldrh	r3, [r7, #26]
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	3303      	adds	r3, #3
 8003e90:	b2da      	uxtb	r2, r3
 8003e92:	f107 0310 	add.w	r3, r7, #16
 8003e96:	4619      	mov	r1, r3
 8003e98:	68b8      	ldr	r0, [r7, #8]
 8003e9a:	f7ff fe91 	bl	8003bc0 <CRC16_CALC>
		int offset = 3+reg_count*2;
 8003e9e:	8b7b      	ldrh	r3, [r7, #26]
 8003ea0:	005b      	lsls	r3, r3, #1
 8003ea2:	3303      	adds	r3, #3
 8003ea4:	617b      	str	r3, [r7, #20]
		*(answer+offset)=check_sum[0];
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	4413      	add	r3, r2
 8003eac:	7c3a      	ldrb	r2, [r7, #16]
 8003eae:	701a      	strb	r2, [r3, #0]
		*(answer+offset+1)=check_sum[1];
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	7c7a      	ldrb	r2, [r7, #17]
 8003eba:	701a      	strb	r2, [r3, #0]
		return 5+reg_count*2;
 8003ebc:	8b7b      	ldrh	r3, [r7, #26]
 8003ebe:	005b      	lsls	r3, r3, #1
 8003ec0:	3305      	adds	r3, #5

	}
	return 0;
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3720      	adds	r7, #32
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <GetWordFromBytes>:

static uint16_t GetWordFromBytes(uint8_t *arr, uint8_t pos)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b083      	sub	sp, #12
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	70fb      	strb	r3, [r7, #3]
	/*Получает 16 битное число из 2x байт, и возвращает его
	 * arr -  указатель на массив байт, из которого нужно получить word
	 * pos - индекс первого байта в массиве
	 *
	 * */
	return (((uint16_t)(*(arr+pos)))<<8) + (uint16_t)(*(arr + pos+1));
 8003ed6:	78fb      	ldrb	r3, [r7, #3]
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	4413      	add	r3, r2
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	021b      	lsls	r3, r3, #8
 8003ee2:	b29a      	uxth	r2, r3
 8003ee4:	78fb      	ldrb	r3, [r7, #3]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	6879      	ldr	r1, [r7, #4]
 8003eea:	440b      	add	r3, r1
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	b29b      	uxth	r3, r3
 8003ef0:	4413      	add	r3, r2
 8003ef2:	b29b      	uxth	r3, r3
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <InsertWordToMemory>:

static void InsertWordToMemory(uint16_t value, uint8_t* memory)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	4603      	mov	r3, r0
 8003f08:	6039      	str	r1, [r7, #0]
 8003f0a:	80fb      	strh	r3, [r7, #6]
    InsertWordsToMemory(&value,memory,1);
 8003f0c:	1dbb      	adds	r3, r7, #6
 8003f0e:	2201      	movs	r2, #1
 8003f10:	6839      	ldr	r1, [r7, #0]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f000 f804 	bl	8003f20 <InsertWordsToMemory>
}
 8003f18:	bf00      	nop
 8003f1a:	3708      	adds	r7, #8
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <InsertWordsToMemory>:

static void InsertWordsToMemory(uint16_t *source, uint8_t * destination, uint16_t count)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	80fb      	strh	r3, [r7, #6]
    int i = 0;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	617b      	str	r3, [r7, #20]
    for(i=0;i<count*2;i+=2)
 8003f32:	2300      	movs	r3, #0
 8003f34:	617b      	str	r3, [r7, #20]
 8003f36:	e014      	b.n	8003f62 <InsertWordsToMemory+0x42>
    {
        *(destination+i+1)=*((uint8_t*)source+i);
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	68fa      	ldr	r2, [r7, #12]
 8003f3c:	441a      	add	r2, r3
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	3301      	adds	r3, #1
 8003f42:	68b9      	ldr	r1, [r7, #8]
 8003f44:	440b      	add	r3, r1
 8003f46:	7812      	ldrb	r2, [r2, #0]
 8003f48:	701a      	strb	r2, [r3, #0]
        *(destination+i)=*((uint8_t*)source+i+1);
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	3301      	adds	r3, #1
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	441a      	add	r2, r3
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	68b9      	ldr	r1, [r7, #8]
 8003f56:	440b      	add	r3, r1
 8003f58:	7812      	ldrb	r2, [r2, #0]
 8003f5a:	701a      	strb	r2, [r3, #0]
    for(i=0;i<count*2;i+=2)
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	3302      	adds	r3, #2
 8003f60:	617b      	str	r3, [r7, #20]
 8003f62:	88fb      	ldrh	r3, [r7, #6]
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	dbe5      	blt.n	8003f38 <InsertWordsToMemory+0x18>
    }
}
 8003f6c:	bf00      	nop
 8003f6e:	bf00      	nop
 8003f70:	371c      	adds	r7, #28
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
	...

08003f7c <WriteSingleRegister>:


static int WriteSingleRegister(uint8_t* request, uint8_t* answer, ModbusSource source)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	4613      	mov	r3, r2
 8003f88:	71fb      	strb	r3, [r7, #7]
    uint16_t  maxAddr = holding_size-1;
 8003f8a:	4b23      	ldr	r3, [pc, #140]	; (8004018 <WriteSingleRegister+0x9c>)
 8003f8c:	881b      	ldrh	r3, [r3, #0]
 8003f8e:	3b01      	subs	r3, #1
 8003f90:	82fb      	strh	r3, [r7, #22]
    uint16_t addr = GetWordFromBytes(request,source==RS485?2:8);
 8003f92:	79fb      	ldrb	r3, [r7, #7]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <WriteSingleRegister+0x20>
 8003f98:	2302      	movs	r3, #2
 8003f9a:	e000      	b.n	8003f9e <WriteSingleRegister+0x22>
 8003f9c:	2308      	movs	r3, #8
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f7ff ff92 	bl	8003eca <GetWordFromBytes>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	82bb      	strh	r3, [r7, #20]
    if(addr>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 8003faa:	8aba      	ldrh	r2, [r7, #20]
 8003fac:	8afb      	ldrh	r3, [r7, #22]
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d907      	bls.n	8003fc2 <WriteSingleRegister+0x46>
 8003fb2:	79fb      	ldrb	r3, [r7, #7]
 8003fb4:	2202      	movs	r2, #2
 8003fb6:	68b9      	ldr	r1, [r7, #8]
 8003fb8:	68f8      	ldr	r0, [r7, #12]
 8003fba:	f7ff fda1 	bl	8003b00 <SetInvalidCommand>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	e026      	b.n	8004010 <WriteSingleRegister+0x94>
    //если все нормально, то вставляем в пакет запрашиваемые данные
    if(source==ETHERNET)
 8003fc2:	79fb      	ldrb	r3, [r7, #7]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d112      	bne.n	8003fee <WriteSingleRegister+0x72>
    {
    	InsertWordsToMemory((uint16_t*)(request+10), ((uint8_t*)holding_pointer)+addr*2,1);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f103 000a 	add.w	r0, r3, #10
 8003fce:	4b13      	ldr	r3, [pc, #76]	; (800401c <WriteSingleRegister+0xa0>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	8aba      	ldrh	r2, [r7, #20]
 8003fd4:	0052      	lsls	r2, r2, #1
 8003fd6:	4413      	add	r3, r2
 8003fd8:	2201      	movs	r2, #1
 8003fda:	4619      	mov	r1, r3
 8003fdc:	f7ff ffa0 	bl	8003f20 <InsertWordsToMemory>
    	memcpy(answer, request,12);
 8003fe0:	220c      	movs	r2, #12
 8003fe2:	68f9      	ldr	r1, [r7, #12]
 8003fe4:	68b8      	ldr	r0, [r7, #8]
 8003fe6:	f018 ff55 	bl	801ce94 <memcpy>
    	return 12;
 8003fea:	230c      	movs	r3, #12
 8003fec:	e010      	b.n	8004010 <WriteSingleRegister+0x94>
    }
    else
    {
    	InsertWordsToMemory((uint16_t*)(request+4), ((uint8_t*)holding_pointer)+addr*2,1);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	1d18      	adds	r0, r3, #4
 8003ff2:	4b0a      	ldr	r3, [pc, #40]	; (800401c <WriteSingleRegister+0xa0>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	8aba      	ldrh	r2, [r7, #20]
 8003ff8:	0052      	lsls	r2, r2, #1
 8003ffa:	4413      	add	r3, r2
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	4619      	mov	r1, r3
 8004000:	f7ff ff8e 	bl	8003f20 <InsertWordsToMemory>
    	memcpy(answer, request,8);
 8004004:	2208      	movs	r2, #8
 8004006:	68f9      	ldr	r1, [r7, #12]
 8004008:	68b8      	ldr	r0, [r7, #8]
 800400a:	f018 ff43 	bl	801ce94 <memcpy>
    	return 8;
 800400e:	2308      	movs	r3, #8
    }
    settingsSaveFRAM();
    return 0;
}
 8004010:	4618      	mov	r0, r3
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	20000bb8 	.word	0x20000bb8
 800401c:	20000bb0 	.word	0x20000bb0

08004020 <WrieMultiplyRegisters>:

static int WrieMultiplyRegisters(uint8_t* request, uint8_t* answer,ModbusSource source)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	4613      	mov	r3, r2
 800402c:	71fb      	strb	r3, [r7, #7]
	uint16_t  maxAddr = holding_size-1;
 800402e:	4b39      	ldr	r3, [pc, #228]	; (8004114 <WrieMultiplyRegisters+0xf4>)
 8004030:	881b      	ldrh	r3, [r3, #0]
 8004032:	3b01      	subs	r3, #1
 8004034:	82fb      	strh	r3, [r7, #22]
	uint16_t start_reg = GetWordFromBytes(request,source==RS485?2:8);
 8004036:	79fb      	ldrb	r3, [r7, #7]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <WrieMultiplyRegisters+0x20>
 800403c:	2302      	movs	r3, #2
 800403e:	e000      	b.n	8004042 <WrieMultiplyRegisters+0x22>
 8004040:	2308      	movs	r3, #8
 8004042:	4619      	mov	r1, r3
 8004044:	68f8      	ldr	r0, [r7, #12]
 8004046:	f7ff ff40 	bl	8003eca <GetWordFromBytes>
 800404a:	4603      	mov	r3, r0
 800404c:	82bb      	strh	r3, [r7, #20]
	uint16_t reg_count = GetWordFromBytes(request,source==RS485?4:10);
 800404e:	79fb      	ldrb	r3, [r7, #7]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d101      	bne.n	8004058 <WrieMultiplyRegisters+0x38>
 8004054:	2304      	movs	r3, #4
 8004056:	e000      	b.n	800405a <WrieMultiplyRegisters+0x3a>
 8004058:	230a      	movs	r3, #10
 800405a:	4619      	mov	r1, r3
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f7ff ff34 	bl	8003eca <GetWordFromBytes>
 8004062:	4603      	mov	r3, r0
 8004064:	827b      	strh	r3, [r7, #18]
    if((start_reg+reg_count-1)>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 8004066:	8aba      	ldrh	r2, [r7, #20]
 8004068:	8a7b      	ldrh	r3, [r7, #18]
 800406a:	4413      	add	r3, r2
 800406c:	1e5a      	subs	r2, r3, #1
 800406e:	8afb      	ldrh	r3, [r7, #22]
 8004070:	429a      	cmp	r2, r3
 8004072:	dd07      	ble.n	8004084 <WrieMultiplyRegisters+0x64>
 8004074:	79fb      	ldrb	r3, [r7, #7]
 8004076:	2202      	movs	r2, #2
 8004078:	68b9      	ldr	r1, [r7, #8]
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f7ff fd40 	bl	8003b00 <SetInvalidCommand>
 8004080:	4603      	mov	r3, r0
 8004082:	e042      	b.n	800410a <WrieMultiplyRegisters+0xea>
    //если все нормально, то вставляем в пакет запрашиваемые данные
    if(source==ETHERNET)
 8004084:	79fb      	ldrb	r3, [r7, #7]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d11d      	bne.n	80040c6 <WrieMultiplyRegisters+0xa6>
    {
    	memcpy(answer, request,12);//сначала повторяющиеся с запросом данные
 800408a:	220c      	movs	r2, #12
 800408c:	68f9      	ldr	r1, [r7, #12]
 800408e:	68b8      	ldr	r0, [r7, #8]
 8004090:	f018 ff00 	bl	801ce94 <memcpy>
    	InsertWordToMemory(reg_count*2+4, answer+4);//Длина сообщения
 8004094:	8a7b      	ldrh	r3, [r7, #18]
 8004096:	3302      	adds	r3, #2
 8004098:	b29b      	uxth	r3, r3
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	b29a      	uxth	r2, r3
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	3304      	adds	r3, #4
 80040a2:	4619      	mov	r1, r3
 80040a4:	4610      	mov	r0, r2
 80040a6:	f7ff ff2b 	bl	8003f00 <InsertWordToMemory>
    	InsertWordsToMemory((uint16_t*)(request+13), ((uint8_t*)holding_pointer)+start_reg*2,reg_count);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f103 000d 	add.w	r0, r3, #13
 80040b0:	4b19      	ldr	r3, [pc, #100]	; (8004118 <WrieMultiplyRegisters+0xf8>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	8aba      	ldrh	r2, [r7, #20]
 80040b6:	0052      	lsls	r2, r2, #1
 80040b8:	4413      	add	r3, r2
 80040ba:	8a7a      	ldrh	r2, [r7, #18]
 80040bc:	4619      	mov	r1, r3
 80040be:	f7ff ff2f 	bl	8003f20 <InsertWordsToMemory>
        return 12;
 80040c2:	230c      	movs	r3, #12
 80040c4:	e021      	b.n	800410a <WrieMultiplyRegisters+0xea>
    }
    else
    {
    	memcpy(answer, request,6);//сначала повторяющиеся с запросом данные
 80040c6:	2206      	movs	r2, #6
 80040c8:	68f9      	ldr	r1, [r7, #12]
 80040ca:	68b8      	ldr	r0, [r7, #8]
 80040cc:	f018 fee2 	bl	801ce94 <memcpy>
    	uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 80040d0:	2300      	movs	r3, #0
 80040d2:	823b      	strh	r3, [r7, #16]
    	CRC16_CALC(answer,check_sum,6);
 80040d4:	f107 0310 	add.w	r3, r7, #16
 80040d8:	2206      	movs	r2, #6
 80040da:	4619      	mov	r1, r3
 80040dc:	68b8      	ldr	r0, [r7, #8]
 80040de:	f7ff fd6f 	bl	8003bc0 <CRC16_CALC>
		*(answer+6)=check_sum[0];
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	3306      	adds	r3, #6
 80040e6:	7c3a      	ldrb	r2, [r7, #16]
 80040e8:	701a      	strb	r2, [r3, #0]
		*(answer+7)=check_sum[1];
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	3307      	adds	r3, #7
 80040ee:	7c7a      	ldrb	r2, [r7, #17]
 80040f0:	701a      	strb	r2, [r3, #0]
		InsertWordsToMemory((uint16_t*)(request+7), ((uint8_t*)holding_pointer)+start_reg*2,reg_count);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	1dd8      	adds	r0, r3, #7
 80040f6:	4b08      	ldr	r3, [pc, #32]	; (8004118 <WrieMultiplyRegisters+0xf8>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	8aba      	ldrh	r2, [r7, #20]
 80040fc:	0052      	lsls	r2, r2, #1
 80040fe:	4413      	add	r3, r2
 8004100:	8a7a      	ldrh	r2, [r7, #18]
 8004102:	4619      	mov	r1, r3
 8004104:	f7ff ff0c 	bl	8003f20 <InsertWordsToMemory>
		return 8;
 8004108:	2308      	movs	r3, #8
    }

    return 0;
}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	20000bb8 	.word	0x20000bb8
 8004118:	20000bb0 	.word	0x20000bb0

0800411c <WriteToHoldings>:

static int WriteToHoldings(uint8_t* request, uint8_t* answer,ModbusSource source, int (*write)(uint8_t*,uint8_t*,ModbusSource))
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	603b      	str	r3, [r7, #0]
 8004128:	4613      	mov	r3, r2
 800412a:	71fb      	strb	r3, [r7, #7]
	int result = 0;
 800412c:	2300      	movs	r3, #0
 800412e:	617b      	str	r3, [r7, #20]
	if(writeMemorySemaphoreHandle!=NULL)
 8004130:	4b0f      	ldr	r3, [pc, #60]	; (8004170 <WriteToHoldings+0x54>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d016      	beq.n	8004166 <WriteToHoldings+0x4a>
	{
		if(osSemaphoreWait(writeMemorySemaphoreHandle, 1000)==osOK)
 8004138:	4b0d      	ldr	r3, [pc, #52]	; (8004170 <WriteToHoldings+0x54>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004140:	4618      	mov	r0, r3
 8004142:	f008 fb91 	bl	800c868 <osSemaphoreWait>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d10c      	bne.n	8004166 <WriteToHoldings+0x4a>
		{
			result =  (*write)(request,answer,source);
 800414c:	79fa      	ldrb	r2, [r7, #7]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	68b9      	ldr	r1, [r7, #8]
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	4798      	blx	r3
 8004156:	6178      	str	r0, [r7, #20]
			settingsSaveFRAM();
 8004158:	f000 fc6e 	bl	8004a38 <settingsSaveFRAM>
			osSemaphoreRelease(writeMemorySemaphoreHandle);
 800415c:	4b04      	ldr	r3, [pc, #16]	; (8004170 <WriteToHoldings+0x54>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f008 fbcf 	bl	800c904 <osSemaphoreRelease>
		}
	}
	return result;
 8004166:	697b      	ldr	r3, [r7, #20]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3718      	adds	r7, #24
 800416c:	46bd      	mov	sp, r7
 800416e:	bd80      	pop	{r7, pc}
 8004170:	20000bac 	.word	0x20000bac

08004174 <probotbor_process>:
static void StopCycles();
static void Indication();
static void GetPositiveFronts();

void probotbor_process()
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
	SetTimers();
 8004178:	f000 f918 	bl	80043ac <SetTimers>
	if(!initialized)
 800417c:	4b13      	ldr	r3, [pc, #76]	; (80041cc <probotbor_process+0x58>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d108      	bne.n	8004196 <probotbor_process+0x22>
	{
		if(!Init_timers())return;
 8004184:	f000 f8d6 	bl	8004334 <Init_timers>
 8004188:	4603      	mov	r3, r0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d01c      	beq.n	80041c8 <probotbor_process+0x54>
		initialized = 1;
 800418e:	4b0f      	ldr	r3, [pc, #60]	; (80041cc <probotbor_process+0x58>)
 8004190:	2201      	movs	r2, #1
 8004192:	701a      	strb	r2, [r3, #0]
		return;
 8004194:	e019      	b.n	80041ca <probotbor_process+0x56>
	}
	GetPositiveFronts();
 8004196:	f000 fb6f 	bl	8004878 <GetPositiveFronts>
	GetErrors();
 800419a:	f000 f81f 	bl	80041dc <GetErrors>
	OnCommandCycle();
 800419e:	f000 fa85 	bl	80046ac <OnCommandCycle>
	Moving();
 80041a2:	f000 f96f 	bl	8004484 <Moving>
	if(automatTON.OUT && d_outputs.prob_ready)
 80041a6:	4b0a      	ldr	r3, [pc, #40]	; (80041d0 <probotbor_process+0x5c>)
 80041a8:	7a5b      	ldrb	r3, [r3, #9]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d009      	beq.n	80041c2 <probotbor_process+0x4e>
 80041ae:	4b09      	ldr	r3, [pc, #36]	; (80041d4 <probotbor_process+0x60>)
 80041b0:	781b      	ldrb	r3, [r3, #0]
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d002      	beq.n	80041c2 <probotbor_process+0x4e>
	{
		startOtborCommand = 1;
 80041bc:	4b06      	ldr	r3, [pc, #24]	; (80041d8 <probotbor_process+0x64>)
 80041be:	2201      	movs	r2, #1
 80041c0:	701a      	strb	r2, [r3, #0]
	}
	Indication();
 80041c2:	f000 fb1b 	bl	80047fc <Indication>
 80041c6:	e000      	b.n	80041ca <probotbor_process+0x56>
		if(!Init_timers())return;
 80041c8:	bf00      	nop

}
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	20000bbc 	.word	0x20000bbc
 80041d0:	20000be4 	.word	0x20000be4
 80041d4:	20000444 	.word	0x20000444
 80041d8:	20000bbf 	.word	0x20000bbf

080041dc <GetErrors>:

static void GetErrors()
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
	// Inputs
	meas_data.errors.nakopitel_door_err = !d_inputs.sq_kanistra_door;
 80041e0:	4b4d      	ldr	r3, [pc, #308]	; (8004318 <GetErrors+0x13c>)
 80041e2:	785b      	ldrb	r3, [r3, #1]
 80041e4:	f003 0304 	and.w	r3, r3, #4
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	bf0c      	ite	eq
 80041ee:	2301      	moveq	r3, #1
 80041f0:	2300      	movne	r3, #0
 80041f2:	b2d9      	uxtb	r1, r3
 80041f4:	4a49      	ldr	r2, [pc, #292]	; (800431c <GetErrors+0x140>)
 80041f6:	7e13      	ldrb	r3, [r2, #24]
 80041f8:	f361 0341 	bfi	r3, r1, #1, #1
 80041fc:	7613      	strb	r3, [r2, #24]
	meas_data.errors.nakopitel_kanistra_err = !d_inputs.sq_kanistra;
 80041fe:	4b46      	ldr	r3, [pc, #280]	; (8004318 <GetErrors+0x13c>)
 8004200:	785b      	ldrb	r3, [r3, #1]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b00      	cmp	r3, #0
 800420a:	bf0c      	ite	eq
 800420c:	2301      	moveq	r3, #1
 800420e:	2300      	movne	r3, #0
 8004210:	b2d9      	uxtb	r1, r3
 8004212:	4a42      	ldr	r2, [pc, #264]	; (800431c <GetErrors+0x140>)
 8004214:	7e13      	ldrb	r3, [r2, #24]
 8004216:	f361 0300 	bfi	r3, r1, #0, #1
 800421a:	7613      	strb	r3, [r2, #24]
	meas_data.errors.uz_err = !d_inputs.uz_prob_fail;
 800421c:	4b3e      	ldr	r3, [pc, #248]	; (8004318 <GetErrors+0x13c>)
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	bf0c      	ite	eq
 800422a:	2301      	moveq	r3, #1
 800422c:	2300      	movne	r3, #0
 800422e:	b2d9      	uxtb	r1, r3
 8004230:	4a3a      	ldr	r2, [pc, #232]	; (800431c <GetErrors+0x140>)
 8004232:	7e13      	ldrb	r3, [r2, #24]
 8004234:	f361 0382 	bfi	r3, r1, #2, #1
 8004238:	7613      	strb	r3, [r2, #24]
	meas_data.errors.sb_abort_err = d_inputs.sb_stop;
 800423a:	4b37      	ldr	r3, [pc, #220]	; (8004318 <GetErrors+0x13c>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8004242:	b2d9      	uxtb	r1, r3
 8004244:	4a35      	ldr	r2, [pc, #212]	; (800431c <GetErrors+0x140>)
 8004246:	7e13      	ldrb	r3, [r2, #24]
 8004248:	f361 03c3 	bfi	r3, r1, #3, #1
 800424c:	7613      	strb	r3, [r2, #24]
	meas_data.errors.sq_left_err = d_inputs.sq_kovsh_prob_left_1;
 800424e:	4b32      	ldr	r3, [pc, #200]	; (8004318 <GetErrors+0x13c>)
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8004256:	b2d9      	uxtb	r1, r3
 8004258:	4a30      	ldr	r2, [pc, #192]	; (800431c <GetErrors+0x140>)
 800425a:	7e13      	ldrb	r3, [r2, #24]
 800425c:	f361 1304 	bfi	r3, r1, #4, #1
 8004260:	7613      	strb	r3, [r2, #24]
	meas_data.errors.sq_right_err = d_inputs.sq_kovsh_prob_right_1;
 8004262:	4b2d      	ldr	r3, [pc, #180]	; (8004318 <GetErrors+0x13c>)
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800426a:	b2d9      	uxtb	r1, r3
 800426c:	4a2b      	ldr	r2, [pc, #172]	; (800431c <GetErrors+0x140>)
 800426e:	7e13      	ldrb	r3, [r2, #24]
 8004270:	f361 1345 	bfi	r3, r1, #5, #1
 8004274:	7613      	strb	r3, [r2, #24]

	//Timeouts
	if(sqHomeTON.OUT){
 8004276:	4b2a      	ldr	r3, [pc, #168]	; (8004320 <GetErrors+0x144>)
 8004278:	7a5b      	ldrb	r3, [r3, #9]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d004      	beq.n	8004288 <GetErrors+0xac>
		meas_data.errors.timeout_moving_left_err = 1;
 800427e:	4a27      	ldr	r2, [pc, #156]	; (800431c <GetErrors+0x140>)
 8004280:	7e13      	ldrb	r3, [r2, #24]
 8004282:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004286:	7613      	strb	r3, [r2, #24]
	}
	if(sqWorkTON.OUT){
 8004288:	4b26      	ldr	r3, [pc, #152]	; (8004324 <GetErrors+0x148>)
 800428a:	7a5b      	ldrb	r3, [r3, #9]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d004      	beq.n	800429a <GetErrors+0xbe>
		meas_data.errors.timeout_moving_right_err = 1;
 8004290:	4a22      	ldr	r2, [pc, #136]	; (800431c <GetErrors+0x140>)
 8004292:	7e13      	ldrb	r3, [r2, #24]
 8004294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004298:	7613      	strb	r3, [r2, #24]
	}
	if(rtSbMakeProba|| rtSbMakeVozvrat)
 800429a:	4b23      	ldr	r3, [pc, #140]	; (8004328 <GetErrors+0x14c>)
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d103      	bne.n	80042aa <GetErrors+0xce>
 80042a2:	4b22      	ldr	r3, [pc, #136]	; (800432c <GetErrors+0x150>)
 80042a4:	781b      	ldrb	r3, [r3, #0]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d009      	beq.n	80042be <GetErrors+0xe2>
	{
		meas_data.errors.timeout_moving_left_err = 0;
 80042aa:	4a1c      	ldr	r2, [pc, #112]	; (800431c <GetErrors+0x140>)
 80042ac:	7e13      	ldrb	r3, [r2, #24]
 80042ae:	f36f 13c7 	bfc	r3, #7, #1
 80042b2:	7613      	strb	r3, [r2, #24]
		meas_data.errors.timeout_moving_right_err = 0;
 80042b4:	4a19      	ldr	r2, [pc, #100]	; (800431c <GetErrors+0x140>)
 80042b6:	7e13      	ldrb	r3, [r2, #24]
 80042b8:	f36f 1386 	bfc	r3, #6, #1
 80042bc:	7613      	strb	r3, [r2, #24]
	}
	// Need Return
	meas_data.errors.need_return_err = (!d_outputs.uz_prob_forv && !d_outputs.uz_prob_rev) &&
 80042be:	4b1c      	ldr	r3, [pc, #112]	; (8004330 <GetErrors+0x154>)
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d116      	bne.n	80042fa <GetErrors+0x11e>
 80042cc:	4b18      	ldr	r3, [pc, #96]	; (8004330 <GetErrors+0x154>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10f      	bne.n	80042fa <GetErrors+0x11e>
			(!d_inputs.sq_kovsh_prob_left_2 && !d_inputs.sq_kovsh_prob_right_2);
 80042da:	4b0f      	ldr	r3, [pc, #60]	; (8004318 <GetErrors+0x13c>)
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	f003 0310 	and.w	r3, r3, #16
 80042e2:	b2db      	uxtb	r3, r3
	meas_data.errors.need_return_err = (!d_outputs.uz_prob_forv && !d_outputs.uz_prob_rev) &&
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d108      	bne.n	80042fa <GetErrors+0x11e>
			(!d_inputs.sq_kovsh_prob_left_2 && !d_inputs.sq_kovsh_prob_right_2);
 80042e8:	4b0b      	ldr	r3, [pc, #44]	; (8004318 <GetErrors+0x13c>)
 80042ea:	781b      	ldrb	r3, [r3, #0]
 80042ec:	f003 0304 	and.w	r3, r3, #4
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <GetErrors+0x11e>
	meas_data.errors.need_return_err = (!d_outputs.uz_prob_forv && !d_outputs.uz_prob_rev) &&
 80042f6:	2301      	movs	r3, #1
 80042f8:	e000      	b.n	80042fc <GetErrors+0x120>
 80042fa:	2300      	movs	r3, #0
 80042fc:	f003 0301 	and.w	r3, r3, #1
 8004300:	b2d9      	uxtb	r1, r3
 8004302:	4a06      	ldr	r2, [pc, #24]	; (800431c <GetErrors+0x140>)
 8004304:	7e53      	ldrb	r3, [r2, #25]
 8004306:	f361 0300 	bfi	r3, r1, #0, #1
 800430a:	7653      	strb	r3, [r2, #25]

}
 800430c:	bf00      	nop
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	20000440 	.word	0x20000440
 800431c:	20000c8c 	.word	0x20000c8c
 8004320:	20000bcc 	.word	0x20000bcc
 8004324:	20000bd8 	.word	0x20000bd8
 8004328:	20000bc6 	.word	0x20000bc6
 800432c:	20000bc8 	.word	0x20000bc8
 8004330:	20000444 	.word	0x20000444

08004334 <Init_timers>:

static uint8_t Init_timers()
{
 8004334:	b580      	push	{r7, lr}
 8004336:	af00      	add	r7, sp, #0
	if(Timer_Init(&(sqHomeTON))==TIMER_FAIL)return 0;
 8004338:	4818      	ldr	r0, [pc, #96]	; (800439c <Init_timers+0x68>)
 800433a:	f000 fffd 	bl	8005338 <Timer_Init>
 800433e:	4603      	mov	r3, r0
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <Init_timers+0x14>
 8004344:	2300      	movs	r3, #0
 8004346:	e027      	b.n	8004398 <Init_timers+0x64>
	if(Timer_Init(&(sqWorkTON))==TIMER_FAIL)return 0;
 8004348:	4815      	ldr	r0, [pc, #84]	; (80043a0 <Init_timers+0x6c>)
 800434a:	f000 fff5 	bl	8005338 <Timer_Init>
 800434e:	4603      	mov	r3, r0
 8004350:	2b01      	cmp	r3, #1
 8004352:	d101      	bne.n	8004358 <Init_timers+0x24>
 8004354:	2300      	movs	r3, #0
 8004356:	e01f      	b.n	8004398 <Init_timers+0x64>
	if(Timer_Init(&(automatTON))==TIMER_FAIL)return 0;
 8004358:	4812      	ldr	r0, [pc, #72]	; (80043a4 <Init_timers+0x70>)
 800435a:	f000 ffed 	bl	8005338 <Timer_Init>
 800435e:	4603      	mov	r3, r0
 8004360:	2b01      	cmp	r3, #1
 8004362:	d101      	bne.n	8004368 <Init_timers+0x34>
 8004364:	2300      	movs	r3, #0
 8004366:	e017      	b.n	8004398 <Init_timers+0x64>
	if(settings.retain.prob_toHomeTime==0)settings.retain.prob_toHomeTime = 10;
 8004368:	4b0f      	ldr	r3, [pc, #60]	; (80043a8 <Init_timers+0x74>)
 800436a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800436c:	2b00      	cmp	r3, #0
 800436e:	d102      	bne.n	8004376 <Init_timers+0x42>
 8004370:	4b0d      	ldr	r3, [pc, #52]	; (80043a8 <Init_timers+0x74>)
 8004372:	220a      	movs	r2, #10
 8004374:	859a      	strh	r2, [r3, #44]	; 0x2c
	if(settings.retain.prob_toWorkTime==0)settings.retain.prob_toWorkTime = 10;
 8004376:	4b0c      	ldr	r3, [pc, #48]	; (80043a8 <Init_timers+0x74>)
 8004378:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800437a:	2b00      	cmp	r3, #0
 800437c:	d102      	bne.n	8004384 <Init_timers+0x50>
 800437e:	4b0a      	ldr	r3, [pc, #40]	; (80043a8 <Init_timers+0x74>)
 8004380:	220a      	movs	r2, #10
 8004382:	85da      	strh	r2, [r3, #46]	; 0x2e
	if(settings.retain.automat_timer==0)settings.retain.automat_timer = 60;
 8004384:	4b08      	ldr	r3, [pc, #32]	; (80043a8 <Init_timers+0x74>)
 8004386:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004388:	2b00      	cmp	r3, #0
 800438a:	d102      	bne.n	8004392 <Init_timers+0x5e>
 800438c:	4b06      	ldr	r3, [pc, #24]	; (80043a8 <Init_timers+0x74>)
 800438e:	223c      	movs	r2, #60	; 0x3c
 8004390:	861a      	strh	r2, [r3, #48]	; 0x30
	SetTimers();
 8004392:	f000 f80b 	bl	80043ac <SetTimers>
	return 1;
 8004396:	2301      	movs	r3, #1
}
 8004398:	4618      	mov	r0, r3
 800439a:	bd80      	pop	{r7, pc}
 800439c:	20000bcc 	.word	0x20000bcc
 80043a0:	20000bd8 	.word	0x20000bd8
 80043a4:	20000be4 	.word	0x20000be4
 80043a8:	20000bf0 	.word	0x20000bf0

080043ac <SetTimers>:

static void SetTimers()
{
 80043ac:	b480      	push	{r7}
 80043ae:	af00      	add	r7, sp, #0
	// Тайм-аут движения влево
	sqHomeTON.IN = !d_inputs.sq_kovsh_prob_left_2 && d_outputs.uz_prob_rev;
 80043b0:	4b2d      	ldr	r3, [pc, #180]	; (8004468 <SetTimers+0xbc>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	f003 0310 	and.w	r3, r3, #16
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d108      	bne.n	80043d0 <SetTimers+0x24>
 80043be:	4b2b      	ldr	r3, [pc, #172]	; (800446c <SetTimers+0xc0>)
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	b2db      	uxtb	r3, r3
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d001      	beq.n	80043d0 <SetTimers+0x24>
 80043cc:	2301      	movs	r3, #1
 80043ce:	e000      	b.n	80043d2 <SetTimers+0x26>
 80043d0:	2300      	movs	r3, #0
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	4b26      	ldr	r3, [pc, #152]	; (8004470 <SetTimers+0xc4>)
 80043d6:	721a      	strb	r2, [r3, #8]
	sqHomeTON.SV = settings.retain.prob_toHomeTime * 1000;
 80043d8:	4b26      	ldr	r3, [pc, #152]	; (8004474 <SetTimers+0xc8>)
 80043da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043dc:	461a      	mov	r2, r3
 80043de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80043e2:	fb02 f303 	mul.w	r3, r2, r3
 80043e6:	461a      	mov	r2, r3
 80043e8:	4b21      	ldr	r3, [pc, #132]	; (8004470 <SetTimers+0xc4>)
 80043ea:	601a      	str	r2, [r3, #0]

	// Тайм-аут движения вправо
	sqWorkTON.IN = !d_inputs.sq_kovsh_prob_right_2 && d_outputs.uz_prob_forv;
 80043ec:	4b1e      	ldr	r3, [pc, #120]	; (8004468 <SetTimers+0xbc>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	f003 0304 	and.w	r3, r3, #4
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d108      	bne.n	800440c <SetTimers+0x60>
 80043fa:	4b1c      	ldr	r3, [pc, #112]	; (800446c <SetTimers+0xc0>)
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <SetTimers+0x60>
 8004408:	2301      	movs	r3, #1
 800440a:	e000      	b.n	800440e <SetTimers+0x62>
 800440c:	2300      	movs	r3, #0
 800440e:	b2da      	uxtb	r2, r3
 8004410:	4b19      	ldr	r3, [pc, #100]	; (8004478 <SetTimers+0xcc>)
 8004412:	721a      	strb	r2, [r3, #8]
	sqWorkTON.SV = settings.retain.prob_toWorkTime * 1000;
 8004414:	4b17      	ldr	r3, [pc, #92]	; (8004474 <SetTimers+0xc8>)
 8004416:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004418:	461a      	mov	r2, r3
 800441a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800441e:	fb02 f303 	mul.w	r3, r2, r3
 8004422:	461a      	mov	r2, r3
 8004424:	4b14      	ldr	r3, [pc, #80]	; (8004478 <SetTimers+0xcc>)
 8004426:	601a      	str	r2, [r3, #0]

	// Таймер автоматической работы
	automatTON.IN = d_inputs.sb_auto_local && !cycle_probotbor;
 8004428:	4b0f      	ldr	r3, [pc, #60]	; (8004468 <SetTimers+0xbc>)
 800442a:	785b      	ldrb	r3, [r3, #1]
 800442c:	f003 0301 	and.w	r3, r3, #1
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d005      	beq.n	8004442 <SetTimers+0x96>
 8004436:	4b11      	ldr	r3, [pc, #68]	; (800447c <SetTimers+0xd0>)
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <SetTimers+0x96>
 800443e:	2301      	movs	r3, #1
 8004440:	e000      	b.n	8004444 <SetTimers+0x98>
 8004442:	2300      	movs	r3, #0
 8004444:	b2da      	uxtb	r2, r3
 8004446:	4b0e      	ldr	r3, [pc, #56]	; (8004480 <SetTimers+0xd4>)
 8004448:	721a      	strb	r2, [r3, #8]
	automatTON.SV = settings.retain.automat_timer * 1000;
 800444a:	4b0a      	ldr	r3, [pc, #40]	; (8004474 <SetTimers+0xc8>)
 800444c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800444e:	461a      	mov	r2, r3
 8004450:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004454:	fb02 f303 	mul.w	r3, r2, r3
 8004458:	461a      	mov	r2, r3
 800445a:	4b09      	ldr	r3, [pc, #36]	; (8004480 <SetTimers+0xd4>)
 800445c:	601a      	str	r2, [r3, #0]

	// Осталось до следующей пробы
}
 800445e:	bf00      	nop
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr
 8004468:	20000440 	.word	0x20000440
 800446c:	20000444 	.word	0x20000444
 8004470:	20000bcc 	.word	0x20000bcc
 8004474:	20000bf0 	.word	0x20000bf0
 8004478:	20000bd8 	.word	0x20000bd8
 800447c:	20000bbd 	.word	0x20000bbd
 8004480:	20000be4 	.word	0x20000be4

08004484 <Moving>:

static void Moving()
{
 8004484:	b580      	push	{r7, lr}
 8004486:	af00      	add	r7, sp, #0
	if(!CheckCriticalError())
 8004488:	f000 f8ae 	bl	80045e8 <CheckCriticalError>
 800448c:	4603      	mov	r3, r0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d102      	bne.n	8004498 <Moving+0x14>
	{
		cycle_probotbor = 0;
 8004492:	4b42      	ldr	r3, [pc, #264]	; (800459c <Moving+0x118>)
 8004494:	2200      	movs	r2, #0
 8004496:	701a      	strb	r2, [r3, #0]
	}
	// Условия остановки движения
	if(cycle_probotbor || cycle_vozvrat)
 8004498:	4b40      	ldr	r3, [pc, #256]	; (800459c <Moving+0x118>)
 800449a:	781b      	ldrb	r3, [r3, #0]
 800449c:	2b00      	cmp	r3, #0
 800449e:	d103      	bne.n	80044a8 <Moving+0x24>
 80044a0:	4b3f      	ldr	r3, [pc, #252]	; (80045a0 <Moving+0x11c>)
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d034      	beq.n	8004512 <Moving+0x8e>
	{
		// остановка по концевикам b
		if((targetSq && (d_inputs.sq_kovsh_prob_right_1 || d_inputs.sq_kovsh_prob_right_2))||
 80044a8:	4b3e      	ldr	r3, [pc, #248]	; (80045a4 <Moving+0x120>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00d      	beq.n	80044cc <Moving+0x48>
 80044b0:	4b3d      	ldr	r3, [pc, #244]	; (80045a8 <Moving+0x124>)
 80044b2:	781b      	ldrb	r3, [r3, #0]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d120      	bne.n	8004500 <Moving+0x7c>
 80044be:	4b3a      	ldr	r3, [pc, #232]	; (80045a8 <Moving+0x124>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	f003 0304 	and.w	r3, r3, #4
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d119      	bne.n	8004500 <Moving+0x7c>
				(!targetSq && (d_inputs.sq_kovsh_prob_left_1 || d_inputs.sq_kovsh_prob_left_2))
 80044cc:	4b35      	ldr	r3, [pc, #212]	; (80045a4 <Moving+0x120>)
 80044ce:	781b      	ldrb	r3, [r3, #0]
		if((targetSq && (d_inputs.sq_kovsh_prob_right_1 || d_inputs.sq_kovsh_prob_right_2))||
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10d      	bne.n	80044f0 <Moving+0x6c>
				(!targetSq && (d_inputs.sq_kovsh_prob_left_1 || d_inputs.sq_kovsh_prob_left_2))
 80044d4:	4b34      	ldr	r3, [pc, #208]	; (80045a8 <Moving+0x124>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	f003 0308 	and.w	r3, r3, #8
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d10e      	bne.n	8004500 <Moving+0x7c>
 80044e2:	4b31      	ldr	r3, [pc, #196]	; (80045a8 <Moving+0x124>)
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	f003 0310 	and.w	r3, r3, #16
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d107      	bne.n	8004500 <Moving+0x7c>
				|| rtSq_kovsh_left_1 || rtSq_kovsh_right_1)
 80044f0:	4b2e      	ldr	r3, [pc, #184]	; (80045ac <Moving+0x128>)
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d103      	bne.n	8004500 <Moving+0x7c>
 80044f8:	4b2d      	ldr	r3, [pc, #180]	; (80045b0 <Moving+0x12c>)
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d001      	beq.n	8004504 <Moving+0x80>
		{
			StopCycles();
 8004500:	f000 f8c2 	bl	8004688 <StopCycles>
		}
		// остановка по критической ошибке
		if(!CheckCriticalError()){
 8004504:	f000 f870 	bl	80045e8 <CheckCriticalError>
 8004508:	4603      	mov	r3, r0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d101      	bne.n	8004512 <Moving+0x8e>
			StopCycles();
 800450e:	f000 f8bb 	bl	8004688 <StopCycles>
		}
	}


	// Управление двигателем
	if(cycle_probotbor || cycle_vozvrat)
 8004512:	4b22      	ldr	r3, [pc, #136]	; (800459c <Moving+0x118>)
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d103      	bne.n	8004522 <Moving+0x9e>
 800451a:	4b21      	ldr	r3, [pc, #132]	; (80045a0 <Moving+0x11c>)
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d023      	beq.n	800456a <Moving+0xe6>
	{
		d_outputs.prob_ready=0;
 8004522:	4a24      	ldr	r2, [pc, #144]	; (80045b4 <Moving+0x130>)
 8004524:	7813      	ldrb	r3, [r2, #0]
 8004526:	f36f 0382 	bfc	r3, #2, #1
 800452a:	7013      	strb	r3, [r2, #0]
		if(targetSq)
 800452c:	4b1d      	ldr	r3, [pc, #116]	; (80045a4 <Moving+0x120>)
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00a      	beq.n	800454a <Moving+0xc6>
		{
			d_outputs.uz_prob_forv = 1;
 8004534:	4a1f      	ldr	r2, [pc, #124]	; (80045b4 <Moving+0x130>)
 8004536:	7813      	ldrb	r3, [r2, #0]
 8004538:	f043 0301 	orr.w	r3, r3, #1
 800453c:	7013      	strb	r3, [r2, #0]
			d_outputs.uz_prob_rev = 0;
 800453e:	4a1d      	ldr	r2, [pc, #116]	; (80045b4 <Moving+0x130>)
 8004540:	7813      	ldrb	r3, [r2, #0]
 8004542:	f36f 0341 	bfc	r3, #1, #1
 8004546:	7013      	strb	r3, [r2, #0]
 8004548:	e009      	b.n	800455e <Moving+0xda>
		}
		else
		{
			d_outputs.uz_prob_forv = 0;
 800454a:	4a1a      	ldr	r2, [pc, #104]	; (80045b4 <Moving+0x130>)
 800454c:	7813      	ldrb	r3, [r2, #0]
 800454e:	f36f 0300 	bfc	r3, #0, #1
 8004552:	7013      	strb	r3, [r2, #0]
			d_outputs.uz_prob_rev = 1;
 8004554:	4a17      	ldr	r2, [pc, #92]	; (80045b4 <Moving+0x130>)
 8004556:	7813      	ldrb	r3, [r2, #0]
 8004558:	f043 0302 	orr.w	r3, r3, #2
 800455c:	7013      	strb	r3, [r2, #0]
		}
		d_outputs.prob_ready = 0;
 800455e:	4a15      	ldr	r2, [pc, #84]	; (80045b4 <Moving+0x130>)
 8004560:	7813      	ldrb	r3, [r2, #0]
 8004562:	f36f 0382 	bfc	r3, #2, #1
 8004566:	7013      	strb	r3, [r2, #0]
 8004568:	e015      	b.n	8004596 <Moving+0x112>
	}
	else
	{
		d_outputs.uz_prob_forv =0 ;
 800456a:	4a12      	ldr	r2, [pc, #72]	; (80045b4 <Moving+0x130>)
 800456c:	7813      	ldrb	r3, [r2, #0]
 800456e:	f36f 0300 	bfc	r3, #0, #1
 8004572:	7013      	strb	r3, [r2, #0]
		d_outputs.uz_prob_rev = 0 ;
 8004574:	4a0f      	ldr	r2, [pc, #60]	; (80045b4 <Moving+0x130>)
 8004576:	7813      	ldrb	r3, [r2, #0]
 8004578:	f36f 0341 	bfc	r3, #1, #1
 800457c:	7013      	strb	r3, [r2, #0]
		d_outputs.prob_ready = CheckCommonError();
 800457e:	f000 f81b 	bl	80045b8 <CheckCommonError>
 8004582:	4603      	mov	r3, r0
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	b2d9      	uxtb	r1, r3
 800458a:	4a0a      	ldr	r2, [pc, #40]	; (80045b4 <Moving+0x130>)
 800458c:	7813      	ldrb	r3, [r2, #0]
 800458e:	f361 0382 	bfi	r3, r1, #2, #1
 8004592:	7013      	strb	r3, [r2, #0]
	}
}
 8004594:	bf00      	nop
 8004596:	bf00      	nop
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	20000bbd 	.word	0x20000bbd
 80045a0:	20000bbe 	.word	0x20000bbe
 80045a4:	20000bc0 	.word	0x20000bc0
 80045a8:	20000440 	.word	0x20000440
 80045ac:	20000bc3 	.word	0x20000bc3
 80045b0:	20000bc4 	.word	0x20000bc4
 80045b4:	20000444 	.word	0x20000444

080045b8 <CheckCommonError>:

static uint8_t CheckCommonError()
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
	uint16_t *errPointer = (uint16_t*)&(meas_data.errors);
 80045be:	4b09      	ldr	r3, [pc, #36]	; (80045e4 <CheckCommonError+0x2c>)
 80045c0:	607b      	str	r3, [r7, #4]
	uint16_t result = *errPointer ? 0 : 1;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	881b      	ldrh	r3, [r3, #0]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	bf0c      	ite	eq
 80045ca:	2301      	moveq	r3, #1
 80045cc:	2300      	movne	r3, #0
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	807b      	strh	r3, [r7, #2]
	return result;
 80045d2:	887b      	ldrh	r3, [r7, #2]
 80045d4:	b2db      	uxtb	r3, r3

}
 80045d6:	4618      	mov	r0, r3
 80045d8:	370c      	adds	r7, #12
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	20000ca4 	.word	0x20000ca4

080045e8 <CheckCriticalError>:

static uint8_t CheckCriticalError()
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
	// Ошибки, при которых нужно срочно остановить ковш
	uint8_t error =  meas_data.errors.sb_abort_err ||
 80045ee:	4b24      	ldr	r3, [pc, #144]	; (8004680 <CheckCriticalError+0x98>)
 80045f0:	7e1b      	ldrb	r3, [r3, #24]
 80045f2:	f003 0308 	and.w	r3, r3, #8
 80045f6:	b2db      	uxtb	r3, r3
			meas_data.errors.uz_err ||
			(meas_data.errors.sq_left_err && d_outputs.uz_prob_rev)||
			(meas_data.errors.sq_right_err && d_outputs.uz_prob_forv)||
			(meas_data.errors.timeout_moving_left_err)||
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d130      	bne.n	800465e <CheckCriticalError+0x76>
	uint8_t error =  meas_data.errors.sb_abort_err ||
 80045fc:	4b20      	ldr	r3, [pc, #128]	; (8004680 <CheckCriticalError+0x98>)
 80045fe:	7e1b      	ldrb	r3, [r3, #24]
 8004600:	f003 0304 	and.w	r3, r3, #4
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d129      	bne.n	800465e <CheckCriticalError+0x76>
			(meas_data.errors.sq_left_err && d_outputs.uz_prob_rev)||
 800460a:	4b1d      	ldr	r3, [pc, #116]	; (8004680 <CheckCriticalError+0x98>)
 800460c:	7e1b      	ldrb	r3, [r3, #24]
 800460e:	f003 0310 	and.w	r3, r3, #16
 8004612:	b2db      	uxtb	r3, r3
			meas_data.errors.uz_err ||
 8004614:	2b00      	cmp	r3, #0
 8004616:	d006      	beq.n	8004626 <CheckCriticalError+0x3e>
			(meas_data.errors.sq_left_err && d_outputs.uz_prob_rev)||
 8004618:	4b1a      	ldr	r3, [pc, #104]	; (8004684 <CheckCriticalError+0x9c>)
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	f003 0302 	and.w	r3, r3, #2
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d11b      	bne.n	800465e <CheckCriticalError+0x76>
			(meas_data.errors.sq_right_err && d_outputs.uz_prob_forv)||
 8004626:	4b16      	ldr	r3, [pc, #88]	; (8004680 <CheckCriticalError+0x98>)
 8004628:	7e1b      	ldrb	r3, [r3, #24]
 800462a:	f003 0320 	and.w	r3, r3, #32
 800462e:	b2db      	uxtb	r3, r3
			(meas_data.errors.sq_left_err && d_outputs.uz_prob_rev)||
 8004630:	2b00      	cmp	r3, #0
 8004632:	d006      	beq.n	8004642 <CheckCriticalError+0x5a>
			(meas_data.errors.sq_right_err && d_outputs.uz_prob_forv)||
 8004634:	4b13      	ldr	r3, [pc, #76]	; (8004684 <CheckCriticalError+0x9c>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d10d      	bne.n	800465e <CheckCriticalError+0x76>
 8004642:	4b0f      	ldr	r3, [pc, #60]	; (8004680 <CheckCriticalError+0x98>)
 8004644:	7e1b      	ldrb	r3, [r3, #24]
 8004646:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800464a:	b2db      	uxtb	r3, r3
 800464c:	2b00      	cmp	r3, #0
 800464e:	d106      	bne.n	800465e <CheckCriticalError+0x76>
			(meas_data.errors.timeout_moving_left_err)||
 8004650:	4b0b      	ldr	r3, [pc, #44]	; (8004680 <CheckCriticalError+0x98>)
 8004652:	7e1b      	ldrb	r3, [r3, #24]
 8004654:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004658:	b2db      	uxtb	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <CheckCriticalError+0x7a>
 800465e:	2301      	movs	r3, #1
 8004660:	e000      	b.n	8004664 <CheckCriticalError+0x7c>
 8004662:	2300      	movs	r3, #0
	uint8_t error =  meas_data.errors.sb_abort_err ||
 8004664:	71fb      	strb	r3, [r7, #7]
			(meas_data.errors.timeout_moving_right_err);
	return !error;
 8004666:	79fb      	ldrb	r3, [r7, #7]
 8004668:	2b00      	cmp	r3, #0
 800466a:	bf0c      	ite	eq
 800466c:	2301      	moveq	r3, #1
 800466e:	2300      	movne	r3, #0
 8004670:	b2db      	uxtb	r3, r3
}
 8004672:	4618      	mov	r0, r3
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
 800467e:	bf00      	nop
 8004680:	20000c8c 	.word	0x20000c8c
 8004684:	20000444 	.word	0x20000444

08004688 <StopCycles>:

static void StopCycles()
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
	cycle_probotbor = 0;
 800468c:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <StopCycles+0x1c>)
 800468e:	2200      	movs	r2, #0
 8004690:	701a      	strb	r2, [r3, #0]
	cycle_vozvrat = 0;
 8004692:	4b05      	ldr	r3, [pc, #20]	; (80046a8 <StopCycles+0x20>)
 8004694:	2200      	movs	r2, #0
 8004696:	701a      	strb	r2, [r3, #0]
}
 8004698:	bf00      	nop
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	20000bbd 	.word	0x20000bbd
 80046a8:	20000bbe 	.word	0x20000bbe

080046ac <OnCommandCycle>:

static void OnCommandCycle()
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	af00      	add	r7, sp, #0
	// действия по нажатию кнопки
	if(d_inputs.sb_make_proba ||
 80046b0:	4b4a      	ldr	r3, [pc, #296]	; (80047dc <OnCommandCycle+0x130>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d103      	bne.n	80046c6 <OnCommandCycle+0x1a>
			settings.non_retain.start_otbor)
 80046be:	4b48      	ldr	r3, [pc, #288]	; (80047e0 <OnCommandCycle+0x134>)
 80046c0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
	if(d_inputs.sb_make_proba ||
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d005      	beq.n	80046d2 <OnCommandCycle+0x26>
	{
		settings.non_retain.start_otbor = 0;
 80046c6:	4b46      	ldr	r3, [pc, #280]	; (80047e0 <OnCommandCycle+0x134>)
 80046c8:	2200      	movs	r2, #0
 80046ca:	869a      	strh	r2, [r3, #52]	; 0x34
		startOtborCommand = 1;
 80046cc:	4b45      	ldr	r3, [pc, #276]	; (80047e4 <OnCommandCycle+0x138>)
 80046ce:	2201      	movs	r2, #1
 80046d0:	701a      	strb	r2, [r3, #0]
	}

	if(meas_data.errors.need_return_err &&
 80046d2:	4b45      	ldr	r3, [pc, #276]	; (80047e8 <OnCommandCycle+0x13c>)
 80046d4:	7e5b      	ldrb	r3, [r3, #25]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d040      	beq.n	8004762 <OnCommandCycle+0xb6>
			CheckCriticalError() &&
 80046e0:	f7ff ff82 	bl	80045e8 <CheckCriticalError>
 80046e4:	4603      	mov	r3, r0
	if(meas_data.errors.need_return_err &&
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d03b      	beq.n	8004762 <OnCommandCycle+0xb6>
			!cycle_vozvrat &&
 80046ea:	4b40      	ldr	r3, [pc, #256]	; (80047ec <OnCommandCycle+0x140>)
 80046ec:	781b      	ldrb	r3, [r3, #0]
			CheckCriticalError() &&
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d137      	bne.n	8004762 <OnCommandCycle+0xb6>
			(d_inputs.sb_vozvrat || settings.non_retain.start_vozvrat))
 80046f2:	4b3a      	ldr	r3, [pc, #232]	; (80047dc <OnCommandCycle+0x130>)
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80046fa:	b2db      	uxtb	r3, r3
			!cycle_vozvrat &&
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d103      	bne.n	8004708 <OnCommandCycle+0x5c>
			(d_inputs.sb_vozvrat || settings.non_retain.start_vozvrat))
 8004700:	4b37      	ldr	r3, [pc, #220]	; (80047e0 <OnCommandCycle+0x134>)
 8004702:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004704:	2b00      	cmp	r3, #0
 8004706:	d02c      	beq.n	8004762 <OnCommandCycle+0xb6>
	{
		cycle_probotbor = 0;
 8004708:	4b39      	ldr	r3, [pc, #228]	; (80047f0 <OnCommandCycle+0x144>)
 800470a:	2200      	movs	r2, #0
 800470c:	701a      	strb	r2, [r3, #0]
		cycle_vozvrat = 1;
 800470e:	4b37      	ldr	r3, [pc, #220]	; (80047ec <OnCommandCycle+0x140>)
 8004710:	2201      	movs	r2, #1
 8004712:	701a      	strb	r2, [r3, #0]
		if(d_inputs.sq_kovsh_prob_left_1 || d_inputs.sq_kovsh_prob_left_2 ){
 8004714:	4b31      	ldr	r3, [pc, #196]	; (80047dc <OnCommandCycle+0x130>)
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	f003 0308 	and.w	r3, r3, #8
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d106      	bne.n	8004730 <OnCommandCycle+0x84>
 8004722:	4b2e      	ldr	r3, [pc, #184]	; (80047dc <OnCommandCycle+0x130>)
 8004724:	781b      	ldrb	r3, [r3, #0]
 8004726:	f003 0310 	and.w	r3, r3, #16
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b00      	cmp	r3, #0
 800472e:	d003      	beq.n	8004738 <OnCommandCycle+0x8c>
			targetSq = 0;
 8004730:	4b30      	ldr	r3, [pc, #192]	; (80047f4 <OnCommandCycle+0x148>)
 8004732:	2200      	movs	r2, #0
 8004734:	701a      	strb	r2, [r3, #0]
 8004736:	e014      	b.n	8004762 <OnCommandCycle+0xb6>
		}
		else if(d_inputs.sq_kovsh_prob_right_1 || d_inputs.sq_kovsh_prob_right_2){
 8004738:	4b28      	ldr	r3, [pc, #160]	; (80047dc <OnCommandCycle+0x130>)
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d106      	bne.n	8004754 <OnCommandCycle+0xa8>
 8004746:	4b25      	ldr	r3, [pc, #148]	; (80047dc <OnCommandCycle+0x130>)
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	f003 0304 	and.w	r3, r3, #4
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b00      	cmp	r3, #0
 8004752:	d003      	beq.n	800475c <OnCommandCycle+0xb0>
			targetSq = 1;
 8004754:	4b27      	ldr	r3, [pc, #156]	; (80047f4 <OnCommandCycle+0x148>)
 8004756:	2201      	movs	r2, #1
 8004758:	701a      	strb	r2, [r3, #0]
 800475a:	e002      	b.n	8004762 <OnCommandCycle+0xb6>
		}
		else{
			targetSq = 0;
 800475c:	4b25      	ldr	r3, [pc, #148]	; (80047f4 <OnCommandCycle+0x148>)
 800475e:	2200      	movs	r2, #0
 8004760:	701a      	strb	r2, [r3, #0]
		};
	}
	settings.non_retain.start_vozvrat = 0;
 8004762:	4b1f      	ldr	r3, [pc, #124]	; (80047e0 <OnCommandCycle+0x134>)
 8004764:	2200      	movs	r2, #0
 8004766:	86da      	strh	r2, [r3, #54]	; 0x36

	if(startOtborCommand)
 8004768:	4b1e      	ldr	r3, [pc, #120]	; (80047e4 <OnCommandCycle+0x138>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d032      	beq.n	80047d6 <OnCommandCycle+0x12a>
	{
		startOtborCommand = 0;
 8004770:	4b1c      	ldr	r3, [pc, #112]	; (80047e4 <OnCommandCycle+0x138>)
 8004772:	2200      	movs	r2, #0
 8004774:	701a      	strb	r2, [r3, #0]
		if(d_outputs.prob_ready)
 8004776:	4b20      	ldr	r3, [pc, #128]	; (80047f8 <OnCommandCycle+0x14c>)
 8004778:	781b      	ldrb	r3, [r3, #0]
 800477a:	f003 0304 	and.w	r3, r3, #4
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d028      	beq.n	80047d6 <OnCommandCycle+0x12a>
		{
			cycle_probotbor = 1;
 8004784:	4b1a      	ldr	r3, [pc, #104]	; (80047f0 <OnCommandCycle+0x144>)
 8004786:	2201      	movs	r2, #1
 8004788:	701a      	strb	r2, [r3, #0]
			cycle_vozvrat = 0;
 800478a:	4b18      	ldr	r3, [pc, #96]	; (80047ec <OnCommandCycle+0x140>)
 800478c:	2200      	movs	r2, #0
 800478e:	701a      	strb	r2, [r3, #0]

			if(d_inputs.sq_kovsh_prob_left_2 || d_inputs.sq_kovsh_prob_left_1)
 8004790:	4b12      	ldr	r3, [pc, #72]	; (80047dc <OnCommandCycle+0x130>)
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	f003 0310 	and.w	r3, r3, #16
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d106      	bne.n	80047ac <OnCommandCycle+0x100>
 800479e:	4b0f      	ldr	r3, [pc, #60]	; (80047dc <OnCommandCycle+0x130>)
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <OnCommandCycle+0x108>
			{
				targetSq = 1;
 80047ac:	4b11      	ldr	r3, [pc, #68]	; (80047f4 <OnCommandCycle+0x148>)
 80047ae:	2201      	movs	r2, #1
 80047b0:	701a      	strb	r2, [r3, #0]
			{
				targetSq = 0;
			}
		}
	}
}
 80047b2:	e010      	b.n	80047d6 <OnCommandCycle+0x12a>
			else if(d_inputs.sq_kovsh_prob_right_2 || d_inputs.sq_kovsh_prob_right_1)
 80047b4:	4b09      	ldr	r3, [pc, #36]	; (80047dc <OnCommandCycle+0x130>)
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	f003 0304 	and.w	r3, r3, #4
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d106      	bne.n	80047d0 <OnCommandCycle+0x124>
 80047c2:	4b06      	ldr	r3, [pc, #24]	; (80047dc <OnCommandCycle+0x130>)
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d002      	beq.n	80047d6 <OnCommandCycle+0x12a>
				targetSq = 0;
 80047d0:	4b08      	ldr	r3, [pc, #32]	; (80047f4 <OnCommandCycle+0x148>)
 80047d2:	2200      	movs	r2, #0
 80047d4:	701a      	strb	r2, [r3, #0]
}
 80047d6:	bf00      	nop
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	20000440 	.word	0x20000440
 80047e0:	20000bf0 	.word	0x20000bf0
 80047e4:	20000bbf 	.word	0x20000bbf
 80047e8:	20000c8c 	.word	0x20000c8c
 80047ec:	20000bbe 	.word	0x20000bbe
 80047f0:	20000bbd 	.word	0x20000bbd
 80047f4:	20000bc0 	.word	0x20000bc0
 80047f8:	20000444 	.word	0x20000444

080047fc <Indication>:

static void Indication()
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
	meas_data.probotbor_ready = d_outputs.prob_ready;
 8004800:	4b15      	ldr	r3, [pc, #84]	; (8004858 <Indication+0x5c>)
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8004808:	b2db      	uxtb	r3, r3
 800480a:	b29a      	uxth	r2, r3
 800480c:	4b13      	ldr	r3, [pc, #76]	; (800485c <Indication+0x60>)
 800480e:	819a      	strh	r2, [r3, #12]
	meas_data.probotbor_busy = cycle_probotbor;
 8004810:	4b13      	ldr	r3, [pc, #76]	; (8004860 <Indication+0x64>)
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	b29a      	uxth	r2, r3
 8004816:	4b11      	ldr	r3, [pc, #68]	; (800485c <Indication+0x60>)
 8004818:	81da      	strh	r2, [r3, #14]
	meas_data.vozvrat_probotbor_busy = cycle_vozvrat;
 800481a:	4b12      	ldr	r3, [pc, #72]	; (8004864 <Indication+0x68>)
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	b29a      	uxth	r2, r3
 8004820:	4b0e      	ldr	r3, [pc, #56]	; (800485c <Indication+0x60>)
 8004822:	821a      	strh	r2, [r3, #16]
	meas_data.automat_mode = d_inputs.sb_auto_local;
 8004824:	4b10      	ldr	r3, [pc, #64]	; (8004868 <Indication+0x6c>)
 8004826:	785b      	ldrb	r3, [r3, #1]
 8004828:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800482c:	b2db      	uxtb	r3, r3
 800482e:	b29a      	uxth	r2, r3
 8004830:	4b0a      	ldr	r3, [pc, #40]	; (800485c <Indication+0x60>)
 8004832:	825a      	strh	r2, [r3, #18]
	meas_data.toNextOtborTime = settings.retain.automat_timer - (uint16_t)(automatTON.ET/1000);
 8004834:	4b0d      	ldr	r3, [pc, #52]	; (800486c <Indication+0x70>)
 8004836:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8004838:	4b0d      	ldr	r3, [pc, #52]	; (8004870 <Indication+0x74>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	490d      	ldr	r1, [pc, #52]	; (8004874 <Indication+0x78>)
 800483e:	fba1 1303 	umull	r1, r3, r1, r3
 8004842:	099b      	lsrs	r3, r3, #6
 8004844:	b29b      	uxth	r3, r3
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	b29a      	uxth	r2, r3
 800484a:	4b04      	ldr	r3, [pc, #16]	; (800485c <Indication+0x60>)
 800484c:	829a      	strh	r2, [r3, #20]
}
 800484e:	bf00      	nop
 8004850:	46bd      	mov	sp, r7
 8004852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004856:	4770      	bx	lr
 8004858:	20000444 	.word	0x20000444
 800485c:	20000c8c 	.word	0x20000c8c
 8004860:	20000bbd 	.word	0x20000bbd
 8004864:	20000bbe 	.word	0x20000bbe
 8004868:	20000440 	.word	0x20000440
 800486c:	20000bf0 	.word	0x20000bf0
 8004870:	20000be4 	.word	0x20000be4
 8004874:	10624dd3 	.word	0x10624dd3

08004878 <GetPositiveFronts>:

static void GetPositiveFronts()
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0
	rtSq_kovsh_left_1 = d_inputs.sq_kovsh_prob_left_1 && !lastSq_kovsh_left_1;
 800487c:	4b41      	ldr	r3, [pc, #260]	; (8004984 <GetPositiveFronts+0x10c>)
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	f003 0308 	and.w	r3, r3, #8
 8004884:	b2db      	uxtb	r3, r3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d005      	beq.n	8004896 <GetPositiveFronts+0x1e>
 800488a:	4b3f      	ldr	r3, [pc, #252]	; (8004988 <GetPositiveFronts+0x110>)
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <GetPositiveFronts+0x1e>
 8004892:	2301      	movs	r3, #1
 8004894:	e000      	b.n	8004898 <GetPositiveFronts+0x20>
 8004896:	2300      	movs	r3, #0
 8004898:	b2da      	uxtb	r2, r3
 800489a:	4b3c      	ldr	r3, [pc, #240]	; (800498c <GetPositiveFronts+0x114>)
 800489c:	701a      	strb	r2, [r3, #0]
	rtSq_kovsh_left_1 = d_inputs.sq_kovsh_prob_right_1 && !lastSq_kovsh_right_1;
 800489e:	4b39      	ldr	r3, [pc, #228]	; (8004984 <GetPositiveFronts+0x10c>)
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d005      	beq.n	80048b8 <GetPositiveFronts+0x40>
 80048ac:	4b38      	ldr	r3, [pc, #224]	; (8004990 <GetPositiveFronts+0x118>)
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <GetPositiveFronts+0x40>
 80048b4:	2301      	movs	r3, #1
 80048b6:	e000      	b.n	80048ba <GetPositiveFronts+0x42>
 80048b8:	2300      	movs	r3, #0
 80048ba:	b2da      	uxtb	r2, r3
 80048bc:	4b33      	ldr	r3, [pc, #204]	; (800498c <GetPositiveFronts+0x114>)
 80048be:	701a      	strb	r2, [r3, #0]
	rtSbMakeProba =  (d_inputs.sb_make_proba || settings.non_retain.start_otbor) && !lastSbMakeProba;
 80048c0:	4b30      	ldr	r3, [pc, #192]	; (8004984 <GetPositiveFronts+0x10c>)
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d103      	bne.n	80048d6 <GetPositiveFronts+0x5e>
 80048ce:	4b31      	ldr	r3, [pc, #196]	; (8004994 <GetPositiveFronts+0x11c>)
 80048d0:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d005      	beq.n	80048e2 <GetPositiveFronts+0x6a>
 80048d6:	4b30      	ldr	r3, [pc, #192]	; (8004998 <GetPositiveFronts+0x120>)
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <GetPositiveFronts+0x6a>
 80048de:	2301      	movs	r3, #1
 80048e0:	e000      	b.n	80048e4 <GetPositiveFronts+0x6c>
 80048e2:	2300      	movs	r3, #0
 80048e4:	b2da      	uxtb	r2, r3
 80048e6:	4b2d      	ldr	r3, [pc, #180]	; (800499c <GetPositiveFronts+0x124>)
 80048e8:	701a      	strb	r2, [r3, #0]
	rtSbMakeVozvrat = (d_inputs.sb_vozvrat || settings.non_retain.start_vozvrat) && !lastSbMakeVozvrat;
 80048ea:	4b26      	ldr	r3, [pc, #152]	; (8004984 <GetPositiveFronts+0x10c>)
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d103      	bne.n	8004900 <GetPositiveFronts+0x88>
 80048f8:	4b26      	ldr	r3, [pc, #152]	; (8004994 <GetPositiveFronts+0x11c>)
 80048fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d005      	beq.n	800490c <GetPositiveFronts+0x94>
 8004900:	4b27      	ldr	r3, [pc, #156]	; (80049a0 <GetPositiveFronts+0x128>)
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d101      	bne.n	800490c <GetPositiveFronts+0x94>
 8004908:	2301      	movs	r3, #1
 800490a:	e000      	b.n	800490e <GetPositiveFronts+0x96>
 800490c:	2300      	movs	r3, #0
 800490e:	b2da      	uxtb	r2, r3
 8004910:	4b24      	ldr	r3, [pc, #144]	; (80049a4 <GetPositiveFronts+0x12c>)
 8004912:	701a      	strb	r2, [r3, #0]
	lastSq_kovsh_left_1 = d_inputs.sq_kovsh_prob_left_1;
 8004914:	4b1b      	ldr	r3, [pc, #108]	; (8004984 <GetPositiveFronts+0x10c>)
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800491c:	b2db      	uxtb	r3, r3
 800491e:	461a      	mov	r2, r3
 8004920:	4b19      	ldr	r3, [pc, #100]	; (8004988 <GetPositiveFronts+0x110>)
 8004922:	701a      	strb	r2, [r3, #0]
	lastSq_kovsh_right_1 = d_inputs.sq_kovsh_prob_right_1;
 8004924:	4b17      	ldr	r3, [pc, #92]	; (8004984 <GetPositiveFronts+0x10c>)
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800492c:	b2db      	uxtb	r3, r3
 800492e:	461a      	mov	r2, r3
 8004930:	4b17      	ldr	r3, [pc, #92]	; (8004990 <GetPositiveFronts+0x118>)
 8004932:	701a      	strb	r2, [r3, #0]
	lastSbMakeProba = d_inputs.sb_make_proba || settings.non_retain.start_otbor;
 8004934:	4b13      	ldr	r3, [pc, #76]	; (8004984 <GetPositiveFronts+0x10c>)
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d103      	bne.n	800494a <GetPositiveFronts+0xd2>
 8004942:	4b14      	ldr	r3, [pc, #80]	; (8004994 <GetPositiveFronts+0x11c>)
 8004944:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004946:	2b00      	cmp	r3, #0
 8004948:	d001      	beq.n	800494e <GetPositiveFronts+0xd6>
 800494a:	2301      	movs	r3, #1
 800494c:	e000      	b.n	8004950 <GetPositiveFronts+0xd8>
 800494e:	2300      	movs	r3, #0
 8004950:	b2da      	uxtb	r2, r3
 8004952:	4b11      	ldr	r3, [pc, #68]	; (8004998 <GetPositiveFronts+0x120>)
 8004954:	701a      	strb	r2, [r3, #0]
	lastSbMakeVozvrat = d_inputs.sb_vozvrat || settings.non_retain.start_vozvrat;
 8004956:	4b0b      	ldr	r3, [pc, #44]	; (8004984 <GetPositiveFronts+0x10c>)
 8004958:	781b      	ldrb	r3, [r3, #0]
 800495a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b00      	cmp	r3, #0
 8004962:	d103      	bne.n	800496c <GetPositiveFronts+0xf4>
 8004964:	4b0b      	ldr	r3, [pc, #44]	; (8004994 <GetPositiveFronts+0x11c>)
 8004966:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <GetPositiveFronts+0xf8>
 800496c:	2301      	movs	r3, #1
 800496e:	e000      	b.n	8004972 <GetPositiveFronts+0xfa>
 8004970:	2300      	movs	r3, #0
 8004972:	b2da      	uxtb	r2, r3
 8004974:	4b0a      	ldr	r3, [pc, #40]	; (80049a0 <GetPositiveFronts+0x128>)
 8004976:	701a      	strb	r2, [r3, #0]

}
 8004978:	bf00      	nop
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	20000440 	.word	0x20000440
 8004988:	20000bc1 	.word	0x20000bc1
 800498c:	20000bc3 	.word	0x20000bc3
 8004990:	20000bc2 	.word	0x20000bc2
 8004994:	20000bf0 	.word	0x20000bf0
 8004998:	20000bc5 	.word	0x20000bc5
 800499c:	20000bc6 	.word	0x20000bc6
 80049a0:	20000bc7 	.word	0x20000bc7
 80049a4:	20000bc8 	.word	0x20000bc8

080049a8 <settingsLoadFRAM>:
Meas_Data meas_data;

static uint8_t checksumCalc (uint8_t * data, uint16_t size);

int settingsLoadFRAM (void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
	int result = 0;
 80049ae:	2300      	movs	r3, #0
 80049b0:	60fb      	str	r3, [r7, #12]
	uint16_t header;

	result = framDataRead(FRAM_SETTINGS_ADDR, (uint8_t *) &header, sizeof(header));
 80049b2:	f107 0308 	add.w	r3, r7, #8
 80049b6:	2202      	movs	r2, #2
 80049b8:	4619      	mov	r1, r3
 80049ba:	2000      	movs	r0, #0
 80049bc:	f7fc fbd4 	bl	8001168 <framDataRead>
 80049c0:	60f8      	str	r0, [r7, #12]
	if (!result)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d130      	bne.n	8004a2a <settingsLoadFRAM+0x82>
	{
		if (header == FRAM_SETTINGS_HEADER)
 80049c8:	893b      	ldrh	r3, [r7, #8]
 80049ca:	f64a 32d8 	movw	r2, #43992	; 0xabd8
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d128      	bne.n	8004a24 <settingsLoadFRAM+0x7c>
		{
			result = framDataRead(FRAM_SETTINGS_ADDR + sizeof(header), (uint8_t *) &(settings.retain), sizeof(Retain));
 80049d2:	2234      	movs	r2, #52	; 0x34
 80049d4:	4917      	ldr	r1, [pc, #92]	; (8004a34 <settingsLoadFRAM+0x8c>)
 80049d6:	2002      	movs	r0, #2
 80049d8:	f7fc fbc6 	bl	8001168 <framDataRead>
 80049dc:	60f8      	str	r0, [r7, #12]
			if (!result)
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d11b      	bne.n	8004a1c <settingsLoadFRAM+0x74>
			{

				uint8_t xor = checksumCalc((uint8_t *) &(settings.retain), sizeof(Retain));
 80049e4:	2134      	movs	r1, #52	; 0x34
 80049e6:	4813      	ldr	r0, [pc, #76]	; (8004a34 <settingsLoadFRAM+0x8c>)
 80049e8:	f000 f864 	bl	8004ab4 <checksumCalc>
 80049ec:	4603      	mov	r3, r0
 80049ee:	72fb      	strb	r3, [r7, #11]
				uint8_t checksum;
				result = framDataRead(FRAM_SETTINGS_ADDR + sizeof(header) + sizeof(Retain), &checksum, sizeof(checksum));
 80049f0:	1dfb      	adds	r3, r7, #7
 80049f2:	2201      	movs	r2, #1
 80049f4:	4619      	mov	r1, r3
 80049f6:	2036      	movs	r0, #54	; 0x36
 80049f8:	f7fc fbb6 	bl	8001168 <framDataRead>
 80049fc:	60f8      	str	r0, [r7, #12]
 				if (!result)
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d107      	bne.n	8004a14 <settingsLoadFRAM+0x6c>
				{
					if (xor != checksum)
 8004a04:	79fb      	ldrb	r3, [r7, #7]
 8004a06:	7afa      	ldrb	r2, [r7, #11]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d00e      	beq.n	8004a2a <settingsLoadFRAM+0x82>
						result = -2;
 8004a0c:	f06f 0301 	mvn.w	r3, #1
 8004a10:	60fb      	str	r3, [r7, #12]
 8004a12:	e00a      	b.n	8004a2a <settingsLoadFRAM+0x82>
				}
				else
					result = -1;
 8004a14:	f04f 33ff 	mov.w	r3, #4294967295
 8004a18:	60fb      	str	r3, [r7, #12]
 8004a1a:	e006      	b.n	8004a2a <settingsLoadFRAM+0x82>
			}
			else
				result = -1;
 8004a1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004a20:	60fb      	str	r3, [r7, #12]
 8004a22:	e002      	b.n	8004a2a <settingsLoadFRAM+0x82>
		}
		else
			result = -1;
 8004a24:	f04f 33ff 	mov.w	r3, #4294967295
 8004a28:	60fb      	str	r3, [r7, #12]
	}

	return result;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	20000bf0 	.word	0x20000bf0

08004a38 <settingsSaveFRAM>:

int settingsSaveFRAM (void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b084      	sub	sp, #16
 8004a3c:	af00      	add	r7, sp, #0
	int result = 0;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	60fb      	str	r3, [r7, #12]
	uint16_t header = FRAM_SETTINGS_HEADER, address = FRAM_SETTINGS_ADDR;
 8004a42:	f64a 33d8 	movw	r3, #43992	; 0xabd8
 8004a46:	813b      	strh	r3, [r7, #8]
 8004a48:	2300      	movs	r3, #0
 8004a4a:	817b      	strh	r3, [r7, #10]

	result = framDataWrite(address, (uint8_t *) &header, sizeof(header));
 8004a4c:	f107 0108 	add.w	r1, r7, #8
 8004a50:	897b      	ldrh	r3, [r7, #10]
 8004a52:	2202      	movs	r2, #2
 8004a54:	4618      	mov	r0, r3
 8004a56:	f7fc fbc5 	bl	80011e4 <framDataWrite>
 8004a5a:	60f8      	str	r0, [r7, #12]
	address += sizeof(header);
 8004a5c:	897b      	ldrh	r3, [r7, #10]
 8004a5e:	3302      	adds	r3, #2
 8004a60:	817b      	strh	r3, [r7, #10]
	vTaskSuspendAll();	// Останавливаем планировщик, чтобы предотвратить фоновое изменение структуры settings
 8004a62:	f009 fd99 	bl	800e598 <vTaskSuspendAll>
	result |= framDataWrite(address, (uint8_t *) &(settings.retain), sizeof(Retain));
 8004a66:	897b      	ldrh	r3, [r7, #10]
 8004a68:	2234      	movs	r2, #52	; 0x34
 8004a6a:	4911      	ldr	r1, [pc, #68]	; (8004ab0 <settingsSaveFRAM+0x78>)
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f7fc fbb9 	bl	80011e4 <framDataWrite>
 8004a72:	4602      	mov	r2, r0
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	4313      	orrs	r3, r2
 8004a78:	60fb      	str	r3, [r7, #12]
	address += sizeof(Retain);
 8004a7a:	897b      	ldrh	r3, [r7, #10]
 8004a7c:	3334      	adds	r3, #52	; 0x34
 8004a7e:	817b      	strh	r3, [r7, #10]
	uint8_t xor = checksumCalc((uint8_t *) &(settings.retain), sizeof(Retain));
 8004a80:	2134      	movs	r1, #52	; 0x34
 8004a82:	480b      	ldr	r0, [pc, #44]	; (8004ab0 <settingsSaveFRAM+0x78>)
 8004a84:	f000 f816 	bl	8004ab4 <checksumCalc>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	71fb      	strb	r3, [r7, #7]
	xTaskResumeAll();	// Возобновляем работу планировщика
 8004a8c:	f009 fd92 	bl	800e5b4 <xTaskResumeAll>
	result |= framDataWrite(address, &xor, sizeof(xor));
 8004a90:	1df9      	adds	r1, r7, #7
 8004a92:	897b      	ldrh	r3, [r7, #10]
 8004a94:	2201      	movs	r2, #1
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fc fba4 	bl	80011e4 <framDataWrite>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	4313      	orrs	r3, r2
 8004aa2:	60fb      	str	r3, [r7, #12]

	return result;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	20000bf0 	.word	0x20000bf0

08004ab4 <checksumCalc>:

static uint8_t checksumCalc (uint8_t * data, uint16_t size)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	460b      	mov	r3, r1
 8004abe:	807b      	strh	r3, [r7, #2]
	uint8_t xor = 0;
 8004ac0:	2300      	movs	r3, #0
 8004ac2:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < size; i++)
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	60bb      	str	r3, [r7, #8]
 8004ac8:	e009      	b.n	8004ade <checksumCalc+0x2a>
		xor ^= data[i];
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	4413      	add	r3, r2
 8004ad0:	781a      	ldrb	r2, [r3, #0]
 8004ad2:	7bfb      	ldrb	r3, [r7, #15]
 8004ad4:	4053      	eors	r3, r2
 8004ad6:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < size; i++)
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	3301      	adds	r3, #1
 8004adc:	60bb      	str	r3, [r7, #8]
 8004ade:	887b      	ldrh	r3, [r7, #2]
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	dbf1      	blt.n	8004aca <checksumCalc+0x16>
	return xor;
 8004ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3714      	adds	r7, #20
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b082      	sub	sp, #8
 8004af8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004afa:	2300      	movs	r3, #0
 8004afc:	607b      	str	r3, [r7, #4]
 8004afe:	4b12      	ldr	r3, [pc, #72]	; (8004b48 <HAL_MspInit+0x54>)
 8004b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b02:	4a11      	ldr	r2, [pc, #68]	; (8004b48 <HAL_MspInit+0x54>)
 8004b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004b08:	6453      	str	r3, [r2, #68]	; 0x44
 8004b0a:	4b0f      	ldr	r3, [pc, #60]	; (8004b48 <HAL_MspInit+0x54>)
 8004b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b12:	607b      	str	r3, [r7, #4]
 8004b14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004b16:	2300      	movs	r3, #0
 8004b18:	603b      	str	r3, [r7, #0]
 8004b1a:	4b0b      	ldr	r3, [pc, #44]	; (8004b48 <HAL_MspInit+0x54>)
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	4a0a      	ldr	r2, [pc, #40]	; (8004b48 <HAL_MspInit+0x54>)
 8004b20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b24:	6413      	str	r3, [r2, #64]	; 0x40
 8004b26:	4b08      	ldr	r3, [pc, #32]	; (8004b48 <HAL_MspInit+0x54>)
 8004b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b2e:	603b      	str	r3, [r7, #0]
 8004b30:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004b32:	2200      	movs	r2, #0
 8004b34:	210f      	movs	r1, #15
 8004b36:	f06f 0001 	mvn.w	r0, #1
 8004b3a:	f001 fc6f 	bl	800641c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b3e:	bf00      	nop
 8004b40:	3708      	adds	r7, #8
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	40023800 	.word	0x40023800

08004b4c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b08a      	sub	sp, #40	; 0x28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b54:	f107 0314 	add.w	r3, r7, #20
 8004b58:	2200      	movs	r2, #0
 8004b5a:	601a      	str	r2, [r3, #0]
 8004b5c:	605a      	str	r2, [r3, #4]
 8004b5e:	609a      	str	r2, [r3, #8]
 8004b60:	60da      	str	r2, [r3, #12]
 8004b62:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a3c      	ldr	r2, [pc, #240]	; (8004c5c <HAL_ADC_MspInit+0x110>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d171      	bne.n	8004c52 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004b6e:	2300      	movs	r3, #0
 8004b70:	613b      	str	r3, [r7, #16]
 8004b72:	4b3b      	ldr	r3, [pc, #236]	; (8004c60 <HAL_ADC_MspInit+0x114>)
 8004b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b76:	4a3a      	ldr	r2, [pc, #232]	; (8004c60 <HAL_ADC_MspInit+0x114>)
 8004b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b7c:	6453      	str	r3, [r2, #68]	; 0x44
 8004b7e:	4b38      	ldr	r3, [pc, #224]	; (8004c60 <HAL_ADC_MspInit+0x114>)
 8004b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b86:	613b      	str	r3, [r7, #16]
 8004b88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	60fb      	str	r3, [r7, #12]
 8004b8e:	4b34      	ldr	r3, [pc, #208]	; (8004c60 <HAL_ADC_MspInit+0x114>)
 8004b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b92:	4a33      	ldr	r2, [pc, #204]	; (8004c60 <HAL_ADC_MspInit+0x114>)
 8004b94:	f043 0304 	orr.w	r3, r3, #4
 8004b98:	6313      	str	r3, [r2, #48]	; 0x30
 8004b9a:	4b31      	ldr	r3, [pc, #196]	; (8004c60 <HAL_ADC_MspInit+0x114>)
 8004b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b9e:	f003 0304 	and.w	r3, r3, #4
 8004ba2:	60fb      	str	r3, [r7, #12]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	60bb      	str	r3, [r7, #8]
 8004baa:	4b2d      	ldr	r3, [pc, #180]	; (8004c60 <HAL_ADC_MspInit+0x114>)
 8004bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bae:	4a2c      	ldr	r2, [pc, #176]	; (8004c60 <HAL_ADC_MspInit+0x114>)
 8004bb0:	f043 0301 	orr.w	r3, r3, #1
 8004bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8004bb6:	4b2a      	ldr	r3, [pc, #168]	; (8004c60 <HAL_ADC_MspInit+0x114>)
 8004bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	60bb      	str	r3, [r7, #8]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC_T0_Pin|ADC_T1_Pin|ADC_T2_Pin;
 8004bc2:	230d      	movs	r3, #13
 8004bc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bce:	f107 0314 	add.w	r3, r7, #20
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	4823      	ldr	r0, [pc, #140]	; (8004c64 <HAL_ADC_MspInit+0x118>)
 8004bd6:	f003 fa47 	bl	8008068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AD_T3_Pin|ADC_T4_Pin;
 8004bda:	2318      	movs	r3, #24
 8004bdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004bde:	2303      	movs	r3, #3
 8004be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004be2:	2300      	movs	r3, #0
 8004be4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004be6:	f107 0314 	add.w	r3, r7, #20
 8004bea:	4619      	mov	r1, r3
 8004bec:	481e      	ldr	r0, [pc, #120]	; (8004c68 <HAL_ADC_MspInit+0x11c>)
 8004bee:	f003 fa3b 	bl	8008068 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004bf2:	4b1e      	ldr	r3, [pc, #120]	; (8004c6c <HAL_ADC_MspInit+0x120>)
 8004bf4:	4a1e      	ldr	r2, [pc, #120]	; (8004c70 <HAL_ADC_MspInit+0x124>)
 8004bf6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004bf8:	4b1c      	ldr	r3, [pc, #112]	; (8004c6c <HAL_ADC_MspInit+0x120>)
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004bfe:	4b1b      	ldr	r3, [pc, #108]	; (8004c6c <HAL_ADC_MspInit+0x120>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c04:	4b19      	ldr	r3, [pc, #100]	; (8004c6c <HAL_ADC_MspInit+0x120>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004c0a:	4b18      	ldr	r3, [pc, #96]	; (8004c6c <HAL_ADC_MspInit+0x120>)
 8004c0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c10:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004c12:	4b16      	ldr	r3, [pc, #88]	; (8004c6c <HAL_ADC_MspInit+0x120>)
 8004c14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c18:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004c1a:	4b14      	ldr	r3, [pc, #80]	; (8004c6c <HAL_ADC_MspInit+0x120>)
 8004c1c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004c20:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004c22:	4b12      	ldr	r3, [pc, #72]	; (8004c6c <HAL_ADC_MspInit+0x120>)
 8004c24:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004c28:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004c2a:	4b10      	ldr	r3, [pc, #64]	; (8004c6c <HAL_ADC_MspInit+0x120>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c30:	4b0e      	ldr	r3, [pc, #56]	; (8004c6c <HAL_ADC_MspInit+0x120>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004c36:	480d      	ldr	r0, [pc, #52]	; (8004c6c <HAL_ADC_MspInit+0x120>)
 8004c38:	f001 fc28 	bl	800648c <HAL_DMA_Init>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8004c42:	f7fe fe43 	bl	80038cc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	4a08      	ldr	r2, [pc, #32]	; (8004c6c <HAL_ADC_MspInit+0x120>)
 8004c4a:	639a      	str	r2, [r3, #56]	; 0x38
 8004c4c:	4a07      	ldr	r2, [pc, #28]	; (8004c6c <HAL_ADC_MspInit+0x120>)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004c52:	bf00      	nop
 8004c54:	3728      	adds	r7, #40	; 0x28
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	40012000 	.word	0x40012000
 8004c60:	40023800 	.word	0x40023800
 8004c64:	40020800 	.word	0x40020800
 8004c68:	40020000 	.word	0x40020000
 8004c6c:	20000918 	.word	0x20000918
 8004c70:	40026410 	.word	0x40026410

08004c74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b08a      	sub	sp, #40	; 0x28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c7c:	f107 0314 	add.w	r3, r7, #20
 8004c80:	2200      	movs	r2, #0
 8004c82:	601a      	str	r2, [r3, #0]
 8004c84:	605a      	str	r2, [r3, #4]
 8004c86:	609a      	str	r2, [r3, #8]
 8004c88:	60da      	str	r2, [r3, #12]
 8004c8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4a19      	ldr	r2, [pc, #100]	; (8004cf8 <HAL_SPI_MspInit+0x84>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d12c      	bne.n	8004cf0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004c96:	2300      	movs	r3, #0
 8004c98:	613b      	str	r3, [r7, #16]
 8004c9a:	4b18      	ldr	r3, [pc, #96]	; (8004cfc <HAL_SPI_MspInit+0x88>)
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	4a17      	ldr	r2, [pc, #92]	; (8004cfc <HAL_SPI_MspInit+0x88>)
 8004ca0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ca6:	4b15      	ldr	r3, [pc, #84]	; (8004cfc <HAL_SPI_MspInit+0x88>)
 8004ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004caa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cae:	613b      	str	r3, [r7, #16]
 8004cb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	4b11      	ldr	r3, [pc, #68]	; (8004cfc <HAL_SPI_MspInit+0x88>)
 8004cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cba:	4a10      	ldr	r2, [pc, #64]	; (8004cfc <HAL_SPI_MspInit+0x88>)
 8004cbc:	f043 0304 	orr.w	r3, r3, #4
 8004cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8004cc2:	4b0e      	ldr	r3, [pc, #56]	; (8004cfc <HAL_SPI_MspInit+0x88>)
 8004cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc6:	f003 0304 	and.w	r3, r3, #4
 8004cca:	60fb      	str	r3, [r7, #12]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = S3SCK_Pin|S3MISO_Pin|S3MOSI_Pin;
 8004cce:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004ce0:	2306      	movs	r3, #6
 8004ce2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ce4:	f107 0314 	add.w	r3, r7, #20
 8004ce8:	4619      	mov	r1, r3
 8004cea:	4805      	ldr	r0, [pc, #20]	; (8004d00 <HAL_SPI_MspInit+0x8c>)
 8004cec:	f003 f9bc 	bl	8008068 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8004cf0:	bf00      	nop
 8004cf2:	3728      	adds	r7, #40	; 0x28
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	40003c00 	.word	0x40003c00
 8004cfc:	40023800 	.word	0x40023800
 8004d00:	40020800 	.word	0x40020800

08004d04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a18      	ldr	r2, [pc, #96]	; (8004d74 <HAL_TIM_Base_MspInit+0x70>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d10e      	bne.n	8004d34 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004d16:	2300      	movs	r3, #0
 8004d18:	60fb      	str	r3, [r7, #12]
 8004d1a:	4b17      	ldr	r3, [pc, #92]	; (8004d78 <HAL_TIM_Base_MspInit+0x74>)
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1e:	4a16      	ldr	r2, [pc, #88]	; (8004d78 <HAL_TIM_Base_MspInit+0x74>)
 8004d20:	f043 0302 	orr.w	r3, r3, #2
 8004d24:	6413      	str	r3, [r2, #64]	; 0x40
 8004d26:	4b14      	ldr	r3, [pc, #80]	; (8004d78 <HAL_TIM_Base_MspInit+0x74>)
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	60fb      	str	r3, [r7, #12]
 8004d30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004d32:	e01a      	b.n	8004d6a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a10      	ldr	r2, [pc, #64]	; (8004d7c <HAL_TIM_Base_MspInit+0x78>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d115      	bne.n	8004d6a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004d3e:	2300      	movs	r3, #0
 8004d40:	60bb      	str	r3, [r7, #8]
 8004d42:	4b0d      	ldr	r3, [pc, #52]	; (8004d78 <HAL_TIM_Base_MspInit+0x74>)
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	4a0c      	ldr	r2, [pc, #48]	; (8004d78 <HAL_TIM_Base_MspInit+0x74>)
 8004d48:	f043 0304 	orr.w	r3, r3, #4
 8004d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d4e:	4b0a      	ldr	r3, [pc, #40]	; (8004d78 <HAL_TIM_Base_MspInit+0x74>)
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	f003 0304 	and.w	r3, r3, #4
 8004d56:	60bb      	str	r3, [r7, #8]
 8004d58:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	2105      	movs	r1, #5
 8004d5e:	201e      	movs	r0, #30
 8004d60:	f001 fb5c 	bl	800641c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8004d64:	201e      	movs	r0, #30
 8004d66:	f001 fb75 	bl	8006454 <HAL_NVIC_EnableIRQ>
}
 8004d6a:	bf00      	nop
 8004d6c:	3710      	adds	r7, #16
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	40000400 	.word	0x40000400
 8004d78:	40023800 	.word	0x40023800
 8004d7c:	40000800 	.word	0x40000800

08004d80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b08c      	sub	sp, #48	; 0x30
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d88:	f107 031c 	add.w	r3, r7, #28
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	601a      	str	r2, [r3, #0]
 8004d90:	605a      	str	r2, [r3, #4]
 8004d92:	609a      	str	r2, [r3, #8]
 8004d94:	60da      	str	r2, [r3, #12]
 8004d96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a68      	ldr	r2, [pc, #416]	; (8004f40 <HAL_UART_MspInit+0x1c0>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d163      	bne.n	8004e6a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004da2:	2300      	movs	r3, #0
 8004da4:	61bb      	str	r3, [r7, #24]
 8004da6:	4b67      	ldr	r3, [pc, #412]	; (8004f44 <HAL_UART_MspInit+0x1c4>)
 8004da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004daa:	4a66      	ldr	r2, [pc, #408]	; (8004f44 <HAL_UART_MspInit+0x1c4>)
 8004dac:	f043 0310 	orr.w	r3, r3, #16
 8004db0:	6453      	str	r3, [r2, #68]	; 0x44
 8004db2:	4b64      	ldr	r3, [pc, #400]	; (8004f44 <HAL_UART_MspInit+0x1c4>)
 8004db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db6:	f003 0310 	and.w	r3, r3, #16
 8004dba:	61bb      	str	r3, [r7, #24]
 8004dbc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	617b      	str	r3, [r7, #20]
 8004dc2:	4b60      	ldr	r3, [pc, #384]	; (8004f44 <HAL_UART_MspInit+0x1c4>)
 8004dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc6:	4a5f      	ldr	r2, [pc, #380]	; (8004f44 <HAL_UART_MspInit+0x1c4>)
 8004dc8:	f043 0301 	orr.w	r3, r3, #1
 8004dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8004dce:	4b5d      	ldr	r3, [pc, #372]	; (8004f44 <HAL_UART_MspInit+0x1c4>)
 8004dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	617b      	str	r3, [r7, #20]
 8004dd8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004dda:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004dde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004de0:	2302      	movs	r3, #2
 8004de2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004de4:	2300      	movs	r3, #0
 8004de6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004de8:	2303      	movs	r3, #3
 8004dea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004dec:	2307      	movs	r3, #7
 8004dee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004df0:	f107 031c 	add.w	r3, r7, #28
 8004df4:	4619      	mov	r1, r3
 8004df6:	4854      	ldr	r0, [pc, #336]	; (8004f48 <HAL_UART_MspInit+0x1c8>)
 8004df8:	f003 f936 	bl	8008068 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8004dfc:	4b53      	ldr	r3, [pc, #332]	; (8004f4c <HAL_UART_MspInit+0x1cc>)
 8004dfe:	4a54      	ldr	r2, [pc, #336]	; (8004f50 <HAL_UART_MspInit+0x1d0>)
 8004e00:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8004e02:	4b52      	ldr	r3, [pc, #328]	; (8004f4c <HAL_UART_MspInit+0x1cc>)
 8004e04:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004e08:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004e0a:	4b50      	ldr	r3, [pc, #320]	; (8004f4c <HAL_UART_MspInit+0x1cc>)
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004e10:	4b4e      	ldr	r3, [pc, #312]	; (8004f4c <HAL_UART_MspInit+0x1cc>)
 8004e12:	2200      	movs	r2, #0
 8004e14:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004e16:	4b4d      	ldr	r3, [pc, #308]	; (8004f4c <HAL_UART_MspInit+0x1cc>)
 8004e18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e1c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004e1e:	4b4b      	ldr	r3, [pc, #300]	; (8004f4c <HAL_UART_MspInit+0x1cc>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004e24:	4b49      	ldr	r3, [pc, #292]	; (8004f4c <HAL_UART_MspInit+0x1cc>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004e2a:	4b48      	ldr	r3, [pc, #288]	; (8004f4c <HAL_UART_MspInit+0x1cc>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004e30:	4b46      	ldr	r3, [pc, #280]	; (8004f4c <HAL_UART_MspInit+0x1cc>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004e36:	4b45      	ldr	r3, [pc, #276]	; (8004f4c <HAL_UART_MspInit+0x1cc>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8004e3c:	4843      	ldr	r0, [pc, #268]	; (8004f4c <HAL_UART_MspInit+0x1cc>)
 8004e3e:	f001 fb25 	bl	800648c <HAL_DMA_Init>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d001      	beq.n	8004e4c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8004e48:	f7fe fd40 	bl	80038cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	4a3f      	ldr	r2, [pc, #252]	; (8004f4c <HAL_UART_MspInit+0x1cc>)
 8004e50:	639a      	str	r2, [r3, #56]	; 0x38
 8004e52:	4a3e      	ldr	r2, [pc, #248]	; (8004f4c <HAL_UART_MspInit+0x1cc>)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8004e58:	2200      	movs	r2, #0
 8004e5a:	2105      	movs	r1, #5
 8004e5c:	2025      	movs	r0, #37	; 0x25
 8004e5e:	f001 fadd 	bl	800641c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004e62:	2025      	movs	r0, #37	; 0x25
 8004e64:	f001 faf6 	bl	8006454 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004e68:	e066      	b.n	8004f38 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART6)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a39      	ldr	r2, [pc, #228]	; (8004f54 <HAL_UART_MspInit+0x1d4>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d161      	bne.n	8004f38 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004e74:	2300      	movs	r3, #0
 8004e76:	613b      	str	r3, [r7, #16]
 8004e78:	4b32      	ldr	r3, [pc, #200]	; (8004f44 <HAL_UART_MspInit+0x1c4>)
 8004e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7c:	4a31      	ldr	r2, [pc, #196]	; (8004f44 <HAL_UART_MspInit+0x1c4>)
 8004e7e:	f043 0320 	orr.w	r3, r3, #32
 8004e82:	6453      	str	r3, [r2, #68]	; 0x44
 8004e84:	4b2f      	ldr	r3, [pc, #188]	; (8004f44 <HAL_UART_MspInit+0x1c4>)
 8004e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e88:	f003 0320 	and.w	r3, r3, #32
 8004e8c:	613b      	str	r3, [r7, #16]
 8004e8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e90:	2300      	movs	r3, #0
 8004e92:	60fb      	str	r3, [r7, #12]
 8004e94:	4b2b      	ldr	r3, [pc, #172]	; (8004f44 <HAL_UART_MspInit+0x1c4>)
 8004e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e98:	4a2a      	ldr	r2, [pc, #168]	; (8004f44 <HAL_UART_MspInit+0x1c4>)
 8004e9a:	f043 0304 	orr.w	r3, r3, #4
 8004e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8004ea0:	4b28      	ldr	r3, [pc, #160]	; (8004f44 <HAL_UART_MspInit+0x1c4>)
 8004ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004eac:	23c0      	movs	r3, #192	; 0xc0
 8004eae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004eb0:	2302      	movs	r3, #2
 8004eb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004ebc:	2308      	movs	r3, #8
 8004ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ec0:	f107 031c 	add.w	r3, r7, #28
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	4824      	ldr	r0, [pc, #144]	; (8004f58 <HAL_UART_MspInit+0x1d8>)
 8004ec8:	f003 f8ce 	bl	8008068 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004ecc:	4b23      	ldr	r3, [pc, #140]	; (8004f5c <HAL_UART_MspInit+0x1dc>)
 8004ece:	4a24      	ldr	r2, [pc, #144]	; (8004f60 <HAL_UART_MspInit+0x1e0>)
 8004ed0:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8004ed2:	4b22      	ldr	r3, [pc, #136]	; (8004f5c <HAL_UART_MspInit+0x1dc>)
 8004ed4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8004ed8:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004eda:	4b20      	ldr	r3, [pc, #128]	; (8004f5c <HAL_UART_MspInit+0x1dc>)
 8004edc:	2200      	movs	r2, #0
 8004ede:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ee0:	4b1e      	ldr	r3, [pc, #120]	; (8004f5c <HAL_UART_MspInit+0x1dc>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004ee6:	4b1d      	ldr	r3, [pc, #116]	; (8004f5c <HAL_UART_MspInit+0x1dc>)
 8004ee8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004eec:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004eee:	4b1b      	ldr	r3, [pc, #108]	; (8004f5c <HAL_UART_MspInit+0x1dc>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004ef4:	4b19      	ldr	r3, [pc, #100]	; (8004f5c <HAL_UART_MspInit+0x1dc>)
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8004efa:	4b18      	ldr	r3, [pc, #96]	; (8004f5c <HAL_UART_MspInit+0x1dc>)
 8004efc:	2200      	movs	r2, #0
 8004efe:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004f00:	4b16      	ldr	r3, [pc, #88]	; (8004f5c <HAL_UART_MspInit+0x1dc>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004f06:	4b15      	ldr	r3, [pc, #84]	; (8004f5c <HAL_UART_MspInit+0x1dc>)
 8004f08:	2200      	movs	r2, #0
 8004f0a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004f0c:	4813      	ldr	r0, [pc, #76]	; (8004f5c <HAL_UART_MspInit+0x1dc>)
 8004f0e:	f001 fabd 	bl	800648c <HAL_DMA_Init>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d001      	beq.n	8004f1c <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8004f18:	f7fe fcd8 	bl	80038cc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a0f      	ldr	r2, [pc, #60]	; (8004f5c <HAL_UART_MspInit+0x1dc>)
 8004f20:	639a      	str	r2, [r3, #56]	; 0x38
 8004f22:	4a0e      	ldr	r2, [pc, #56]	; (8004f5c <HAL_UART_MspInit+0x1dc>)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8004f28:	2200      	movs	r2, #0
 8004f2a:	2105      	movs	r1, #5
 8004f2c:	2047      	movs	r0, #71	; 0x47
 8004f2e:	f001 fa75 	bl	800641c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8004f32:	2047      	movs	r0, #71	; 0x47
 8004f34:	f001 fa8e 	bl	8006454 <HAL_NVIC_EnableIRQ>
}
 8004f38:	bf00      	nop
 8004f3a:	3730      	adds	r7, #48	; 0x30
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}
 8004f40:	40011000 	.word	0x40011000
 8004f44:	40023800 	.word	0x40023800
 8004f48:	40020000 	.word	0x40020000
 8004f4c:	20000ae8 	.word	0x20000ae8
 8004f50:	40026440 	.word	0x40026440
 8004f54:	40011400 	.word	0x40011400
 8004f58:	40020800 	.word	0x40020800
 8004f5c:	20000b48 	.word	0x20000b48
 8004f60:	40026428 	.word	0x40026428

08004f64 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a18      	ldr	r2, [pc, #96]	; (8004fd4 <HAL_UART_MspDeInit+0x70>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d113      	bne.n	8004f9e <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8004f76:	4b18      	ldr	r3, [pc, #96]	; (8004fd8 <HAL_UART_MspDeInit+0x74>)
 8004f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7a:	4a17      	ldr	r2, [pc, #92]	; (8004fd8 <HAL_UART_MspDeInit+0x74>)
 8004f7c:	f023 0310 	bic.w	r3, r3, #16
 8004f80:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8004f82:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004f86:	4815      	ldr	r0, [pc, #84]	; (8004fdc <HAL_UART_MspDeInit+0x78>)
 8004f88:	f003 fa0a 	bl	80083a0 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f90:	4618      	mov	r0, r3
 8004f92:	f001 fb29 	bl	80065e8 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8004f96:	2025      	movs	r0, #37	; 0x25
 8004f98:	f001 fa6a 	bl	8006470 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 8004f9c:	e016      	b.n	8004fcc <HAL_UART_MspDeInit+0x68>
  else if(huart->Instance==USART6)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a0f      	ldr	r2, [pc, #60]	; (8004fe0 <HAL_UART_MspDeInit+0x7c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d111      	bne.n	8004fcc <HAL_UART_MspDeInit+0x68>
    __HAL_RCC_USART6_CLK_DISABLE();
 8004fa8:	4b0b      	ldr	r3, [pc, #44]	; (8004fd8 <HAL_UART_MspDeInit+0x74>)
 8004faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fac:	4a0a      	ldr	r2, [pc, #40]	; (8004fd8 <HAL_UART_MspDeInit+0x74>)
 8004fae:	f023 0320 	bic.w	r3, r3, #32
 8004fb2:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6|GPIO_PIN_7);
 8004fb4:	21c0      	movs	r1, #192	; 0xc0
 8004fb6:	480b      	ldr	r0, [pc, #44]	; (8004fe4 <HAL_UART_MspDeInit+0x80>)
 8004fb8:	f003 f9f2 	bl	80083a0 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f001 fb11 	bl	80065e8 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8004fc6:	2047      	movs	r0, #71	; 0x47
 8004fc8:	f001 fa52 	bl	8006470 <HAL_NVIC_DisableIRQ>
}
 8004fcc:	bf00      	nop
 8004fce:	3708      	adds	r7, #8
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	40011000 	.word	0x40011000
 8004fd8:	40023800 	.word	0x40023800
 8004fdc:	40020000 	.word	0x40020000
 8004fe0:	40011400 	.word	0x40011400
 8004fe4:	40020800 	.word	0x40020800

08004fe8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b08c      	sub	sp, #48	; 0x30
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	6879      	ldr	r1, [r7, #4]
 8004ffc:	2019      	movs	r0, #25
 8004ffe:	f001 fa0d 	bl	800641c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8005002:	2019      	movs	r0, #25
 8005004:	f001 fa26 	bl	8006454 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8005008:	2300      	movs	r3, #0
 800500a:	60fb      	str	r3, [r7, #12]
 800500c:	4b1f      	ldr	r3, [pc, #124]	; (800508c <HAL_InitTick+0xa4>)
 800500e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005010:	4a1e      	ldr	r2, [pc, #120]	; (800508c <HAL_InitTick+0xa4>)
 8005012:	f043 0301 	orr.w	r3, r3, #1
 8005016:	6453      	str	r3, [r2, #68]	; 0x44
 8005018:	4b1c      	ldr	r3, [pc, #112]	; (800508c <HAL_InitTick+0xa4>)
 800501a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800501c:	f003 0301 	and.w	r3, r3, #1
 8005020:	60fb      	str	r3, [r7, #12]
 8005022:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005024:	f107 0210 	add.w	r2, r7, #16
 8005028:	f107 0314 	add.w	r3, r7, #20
 800502c:	4611      	mov	r1, r2
 800502e:	4618      	mov	r0, r3
 8005030:	f003 ffa4 	bl	8008f7c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8005034:	f003 ff8e 	bl	8008f54 <HAL_RCC_GetPCLK2Freq>
 8005038:	4603      	mov	r3, r0
 800503a:	005b      	lsls	r3, r3, #1
 800503c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800503e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005040:	4a13      	ldr	r2, [pc, #76]	; (8005090 <HAL_InitTick+0xa8>)
 8005042:	fba2 2303 	umull	r2, r3, r2, r3
 8005046:	0c9b      	lsrs	r3, r3, #18
 8005048:	3b01      	subs	r3, #1
 800504a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800504c:	4b11      	ldr	r3, [pc, #68]	; (8005094 <HAL_InitTick+0xac>)
 800504e:	4a12      	ldr	r2, [pc, #72]	; (8005098 <HAL_InitTick+0xb0>)
 8005050:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8005052:	4b10      	ldr	r3, [pc, #64]	; (8005094 <HAL_InitTick+0xac>)
 8005054:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005058:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800505a:	4a0e      	ldr	r2, [pc, #56]	; (8005094 <HAL_InitTick+0xac>)
 800505c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8005060:	4b0c      	ldr	r3, [pc, #48]	; (8005094 <HAL_InitTick+0xac>)
 8005062:	2200      	movs	r2, #0
 8005064:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005066:	4b0b      	ldr	r3, [pc, #44]	; (8005094 <HAL_InitTick+0xac>)
 8005068:	2200      	movs	r2, #0
 800506a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800506c:	4809      	ldr	r0, [pc, #36]	; (8005094 <HAL_InitTick+0xac>)
 800506e:	f004 fd5f 	bl	8009b30 <HAL_TIM_Base_Init>
 8005072:	4603      	mov	r3, r0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d104      	bne.n	8005082 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8005078:	4806      	ldr	r0, [pc, #24]	; (8005094 <HAL_InitTick+0xac>)
 800507a:	f004 fe11 	bl	8009ca0 <HAL_TIM_Base_Start_IT>
 800507e:	4603      	mov	r3, r0
 8005080:	e000      	b.n	8005084 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
}
 8005084:	4618      	mov	r0, r3
 8005086:	3730      	adds	r7, #48	; 0x30
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	40023800 	.word	0x40023800
 8005090:	431bde83 	.word	0x431bde83
 8005094:	20000cf8 	.word	0x20000cf8
 8005098:	40010000 	.word	0x40010000

0800509c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800509c:	b480      	push	{r7}
 800509e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80050a0:	e7fe      	b.n	80050a0 <NMI_Handler+0x4>

080050a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050a2:	b480      	push	{r7}
 80050a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050a6:	e7fe      	b.n	80050a6 <HardFault_Handler+0x4>

080050a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80050a8:	b480      	push	{r7}
 80050aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80050ac:	e7fe      	b.n	80050ac <MemManage_Handler+0x4>

080050ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80050ae:	b480      	push	{r7}
 80050b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80050b2:	e7fe      	b.n	80050b2 <BusFault_Handler+0x4>

080050b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80050b4:	b480      	push	{r7}
 80050b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80050b8:	e7fe      	b.n	80050b8 <UsageFault_Handler+0x4>

080050ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80050ba:	b480      	push	{r7}
 80050bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80050be:	bf00      	nop
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80050cc:	4802      	ldr	r0, [pc, #8]	; (80050d8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80050ce:	f004 fe57 	bl	8009d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80050d2:	bf00      	nop
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	20000cf8 	.word	0x20000cf8

080050dc <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80050e0:	4803      	ldr	r0, [pc, #12]	; (80050f0 <TIM4_IRQHandler+0x14>)
 80050e2:	f004 fe4d 	bl	8009d80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  UpdateTimers();
 80050e6:	f000 f965 	bl	80053b4 <UpdateTimers>
  /* USER CODE END TIM4_IRQn 1 */
}
 80050ea:	bf00      	nop
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	20000a18 	.word	0x20000a18

080050f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80050f8:	4802      	ldr	r0, [pc, #8]	; (8005104 <USART1_IRQHandler+0x10>)
 80050fa:	f005 fb77 	bl	800a7ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80050fe:	bf00      	nop
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	20000a60 	.word	0x20000a60

08005108 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800510c:	4802      	ldr	r0, [pc, #8]	; (8005118 <DMA2_Stream0_IRQHandler+0x10>)
 800510e:	f001 fbb3 	bl	8006878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8005112:	bf00      	nop
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	20000918 	.word	0x20000918

0800511c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8005120:	4802      	ldr	r0, [pc, #8]	; (800512c <DMA2_Stream1_IRQHandler+0x10>)
 8005122:	f001 fba9 	bl	8006878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8005126:	bf00      	nop
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	20000b48 	.word	0x20000b48

08005130 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005134:	4802      	ldr	r0, [pc, #8]	; (8005140 <DMA2_Stream2_IRQHandler+0x10>)
 8005136:	f001 fb9f 	bl	8006878 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800513a:	bf00      	nop
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	20000ae8 	.word	0x20000ae8

08005144 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8005148:	4802      	ldr	r0, [pc, #8]	; (8005154 <ETH_IRQHandler+0x10>)
 800514a:	f002 f9df 	bl	800750c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800514e:	bf00      	nop
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	2000416c 	.word	0x2000416c

08005158 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800515c:	4802      	ldr	r0, [pc, #8]	; (8005168 <USART6_IRQHandler+0x10>)
 800515e:	f005 fb45 	bl	800a7ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8005162:	bf00      	nop
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	20000aa4 	.word	0x20000aa4

0800516c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800516c:	b480      	push	{r7}
 800516e:	af00      	add	r7, sp, #0
	return 1;
 8005170:	2301      	movs	r3, #1
}
 8005172:	4618      	mov	r0, r3
 8005174:	46bd      	mov	sp, r7
 8005176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517a:	4770      	bx	lr

0800517c <_kill>:

int _kill(int pid, int sig)
{
 800517c:	b480      	push	{r7}
 800517e:	b083      	sub	sp, #12
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005186:	4b05      	ldr	r3, [pc, #20]	; (800519c <_kill+0x20>)
 8005188:	2216      	movs	r2, #22
 800518a:	601a      	str	r2, [r3, #0]
	return -1;
 800518c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005190:	4618      	mov	r0, r3
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	2000df24 	.word	0x2000df24

080051a0 <_exit>:

void _exit (int status)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80051a8:	f04f 31ff 	mov.w	r1, #4294967295
 80051ac:	6878      	ldr	r0, [r7, #4]
 80051ae:	f7ff ffe5 	bl	800517c <_kill>
	while (1) {}		/* Make sure we hang here */
 80051b2:	e7fe      	b.n	80051b2 <_exit+0x12>

080051b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051c0:	2300      	movs	r3, #0
 80051c2:	617b      	str	r3, [r7, #20]
 80051c4:	e00a      	b.n	80051dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80051c6:	f3af 8000 	nop.w
 80051ca:	4601      	mov	r1, r0
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	1c5a      	adds	r2, r3, #1
 80051d0:	60ba      	str	r2, [r7, #8]
 80051d2:	b2ca      	uxtb	r2, r1
 80051d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	3301      	adds	r3, #1
 80051da:	617b      	str	r3, [r7, #20]
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	dbf0      	blt.n	80051c6 <_read+0x12>
	}

return len;
 80051e4:	687b      	ldr	r3, [r7, #4]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3718      	adds	r7, #24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b086      	sub	sp, #24
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	60f8      	str	r0, [r7, #12]
 80051f6:	60b9      	str	r1, [r7, #8]
 80051f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80051fa:	2300      	movs	r3, #0
 80051fc:	617b      	str	r3, [r7, #20]
 80051fe:	e009      	b.n	8005214 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	60ba      	str	r2, [r7, #8]
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	4618      	mov	r0, r3
 800520a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	3301      	adds	r3, #1
 8005212:	617b      	str	r3, [r7, #20]
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	429a      	cmp	r2, r3
 800521a:	dbf1      	blt.n	8005200 <_write+0x12>
	}
	return len;
 800521c:	687b      	ldr	r3, [r7, #4]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3718      	adds	r7, #24
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <_close>:

int _close(int file)
{
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
	return -1;
 800522e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005232:	4618      	mov	r0, r3
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800523e:	b480      	push	{r7}
 8005240:	b083      	sub	sp, #12
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
 8005246:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800524e:	605a      	str	r2, [r3, #4]
	return 0;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <_isatty>:

int _isatty(int file)
{
 800525e:	b480      	push	{r7}
 8005260:	b083      	sub	sp, #12
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
	return 1;
 8005266:	2301      	movs	r3, #1
}
 8005268:	4618      	mov	r0, r3
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
	return 0;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
	...

08005290 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005290:	b480      	push	{r7}
 8005292:	b087      	sub	sp, #28
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005298:	4a14      	ldr	r2, [pc, #80]	; (80052ec <_sbrk+0x5c>)
 800529a:	4b15      	ldr	r3, [pc, #84]	; (80052f0 <_sbrk+0x60>)
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80052a4:	4b13      	ldr	r3, [pc, #76]	; (80052f4 <_sbrk+0x64>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d102      	bne.n	80052b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80052ac:	4b11      	ldr	r3, [pc, #68]	; (80052f4 <_sbrk+0x64>)
 80052ae:	4a12      	ldr	r2, [pc, #72]	; (80052f8 <_sbrk+0x68>)
 80052b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80052b2:	4b10      	ldr	r3, [pc, #64]	; (80052f4 <_sbrk+0x64>)
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4413      	add	r3, r2
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d205      	bcs.n	80052cc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80052c0:	4b0e      	ldr	r3, [pc, #56]	; (80052fc <_sbrk+0x6c>)
 80052c2:	220c      	movs	r2, #12
 80052c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80052c6:	f04f 33ff 	mov.w	r3, #4294967295
 80052ca:	e009      	b.n	80052e0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80052cc:	4b09      	ldr	r3, [pc, #36]	; (80052f4 <_sbrk+0x64>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80052d2:	4b08      	ldr	r3, [pc, #32]	; (80052f4 <_sbrk+0x64>)
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4413      	add	r3, r2
 80052da:	4a06      	ldr	r2, [pc, #24]	; (80052f4 <_sbrk+0x64>)
 80052dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80052de:	68fb      	ldr	r3, [r7, #12]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	371c      	adds	r7, #28
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	20020000 	.word	0x20020000
 80052f0:	00000400 	.word	0x00000400
 80052f4:	20000d40 	.word	0x20000d40
 80052f8:	2000df28 	.word	0x2000df28
 80052fc:	2000df24 	.word	0x2000df24

08005300 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005300:	b480      	push	{r7}
 8005302:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005304:	4b06      	ldr	r3, [pc, #24]	; (8005320 <SystemInit+0x20>)
 8005306:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800530a:	4a05      	ldr	r2, [pc, #20]	; (8005320 <SystemInit+0x20>)
 800530c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005310:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005314:	bf00      	nop
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
 800531e:	bf00      	nop
 8005320:	e000ed00 	.word	0xe000ed00

08005324 <Start_Timers>:

static Timer_Init_State Push_To_List(TON *timer);
static void UpdateTimer(TON *timer);

void Start_Timers(void)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim4);
 8005328:	4802      	ldr	r0, [pc, #8]	; (8005334 <Start_Timers+0x10>)
 800532a:	f004 fcb9 	bl	8009ca0 <HAL_TIM_Base_Start_IT>

}
 800532e:	bf00      	nop
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	20000a18 	.word	0x20000a18

08005338 <Timer_Init>:

Timer_Init_State Timer_Init(TON *timer)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b082      	sub	sp, #8
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
	return Push_To_List(timer);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 f805 	bl	8005350 <Push_To_List>
 8005346:	4603      	mov	r3, r0

}
 8005348:	4618      	mov	r0, r3
 800534a:	3708      	adds	r7, #8
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <Push_To_List>:

static Timer_Init_State Push_To_List(TON *timer)
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
	struct list_item *tmp, *top;
	tmp = malloc(sizeof(struct list_item));
 8005358:	2008      	movs	r0, #8
 800535a:	f017 fd83 	bl	801ce64 <malloc>
 800535e:	4603      	mov	r3, r0
 8005360:	60bb      	str	r3, [r7, #8]
	if(tmp == NULL)return TIMER_FAIL;
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <Push_To_List+0x1c>
 8005368:	2301      	movs	r3, #1
 800536a:	e01c      	b.n	80053a6 <Push_To_List+0x56>
	tmp->next = NULL;
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	2200      	movs	r2, #0
 8005370:	605a      	str	r2, [r3, #4]
	tmp->timer = timer;
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	687a      	ldr	r2, [r7, #4]
 8005376:	601a      	str	r2, [r3, #0]
	if(timers)
 8005378:	4b0d      	ldr	r3, [pc, #52]	; (80053b0 <Push_To_List+0x60>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d00e      	beq.n	800539e <Push_To_List+0x4e>
	{
		top = timers;
 8005380:	4b0b      	ldr	r3, [pc, #44]	; (80053b0 <Push_To_List+0x60>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	60fb      	str	r3, [r7, #12]
		while(top->next)
 8005386:	e002      	b.n	800538e <Push_To_List+0x3e>
		{
			top = top->next;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	60fb      	str	r3, [r7, #12]
		while(top->next)
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1f8      	bne.n	8005388 <Push_To_List+0x38>
		}
		top->next = tmp;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	68ba      	ldr	r2, [r7, #8]
 800539a:	605a      	str	r2, [r3, #4]
 800539c:	e002      	b.n	80053a4 <Push_To_List+0x54>
	}
	else
	{
		timers = tmp;
 800539e:	4a04      	ldr	r2, [pc, #16]	; (80053b0 <Push_To_List+0x60>)
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	6013      	str	r3, [r2, #0]
	}
	return TIMER_OK;
 80053a4:	2300      	movs	r3, #0
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	20000d44 	.word	0x20000d44

080053b4 <UpdateTimers>:

/*Функция обновления значений всех таймеров*/
void UpdateTimers()
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
	struct list_item *tmp = timers;
 80053ba:	4b0a      	ldr	r3, [pc, #40]	; (80053e4 <UpdateTimers+0x30>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	607b      	str	r3, [r7, #4]
	while(tmp)
 80053c0:	e007      	b.n	80053d2 <UpdateTimers+0x1e>
	{
		UpdateTimer(tmp->timer);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f000 f80e 	bl	80053e8 <UpdateTimer>
		tmp = tmp->next;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	607b      	str	r3, [r7, #4]
	while(tmp)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1f4      	bne.n	80053c2 <UpdateTimers+0xe>
	}
}
 80053d8:	bf00      	nop
 80053da:	bf00      	nop
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	20000d44 	.word	0x20000d44

080053e8 <UpdateTimer>:

/*Функция обновления значений одного таймера*/
static void UpdateTimer(TON *timer)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
	if(timer->IN)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	7a1b      	ldrb	r3, [r3, #8]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00e      	beq.n	8005416 <UpdateTimer+0x2e>
	{
		timer->ET = timer->ET < timer->SV ? timer->ET+1 : timer->ET;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	429a      	cmp	r2, r3
 8005402:	d203      	bcs.n	800540c <UpdateTimer+0x24>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	3301      	adds	r3, #1
 800540a:	e001      	b.n	8005410 <UpdateTimer+0x28>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	687a      	ldr	r2, [r7, #4]
 8005412:	6053      	str	r3, [r2, #4]
 8005414:	e002      	b.n	800541c <UpdateTimer+0x34>
	}
	else
	{
		timer->ET = 0;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	605a      	str	r2, [r3, #4]
	}
	timer->OUT = timer->ET == timer->SV;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	429a      	cmp	r2, r3
 8005426:	bf0c      	ite	eq
 8005428:	2301      	moveq	r3, #1
 800542a:	2300      	movne	r3, #0
 800542c:	b2db      	uxtb	r3, r3
 800542e:	461a      	mov	r2, r3
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	725a      	strb	r2, [r3, #9]
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <uart_thread>:
static void Transmit(UART_HandleTypeDef *huart, uint8_t *p, uint16_t size);



void uart_thread(void *argument)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b088      	sub	sp, #32
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
	osEvent event;
	Uart_Queue_Struct *queue_arg;
	RsReInit();
 8005448:	f000 f958 	bl	80056fc <RsReInit>
	StartReciveUartAll();
 800544c:	f000 f82c 	bl	80054a8 <StartReciveUartAll>
	while(1)
	{
		event = osMailGet(uart_queue, osWaitForever);
 8005450:	4b14      	ldr	r3, [pc, #80]	; (80054a4 <uart_thread+0x64>)
 8005452:	6819      	ldr	r1, [r3, #0]
 8005454:	f107 030c 	add.w	r3, r7, #12
 8005458:	f04f 32ff 	mov.w	r2, #4294967295
 800545c:	4618      	mov	r0, r3
 800545e:	f007 fd23 	bl	800cea8 <osMailGet>
		if(event.status == osEventMail)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2b20      	cmp	r3, #32
 8005466:	d1f3      	bne.n	8005450 <uart_thread+0x10>
		{
			int result = 0;
 8005468:	2300      	movs	r3, #0
 800546a:	61fb      	str	r3, [r7, #28]
			queue_arg = event.value.p;
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	61bb      	str	r3, [r7, #24]
			result = RecognizePacket(queue_arg);
 8005470:	69b8      	ldr	r0, [r7, #24]
 8005472:	f000 f8c5 	bl	8005600 <RecognizePacket>
 8005476:	61f8      	str	r0, [r7, #28]
			if(result)Transmit(queue_arg->huart, queue_arg->output_pointer, result);
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d008      	beq.n	8005490 <uart_thread+0x50>
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	68d8      	ldr	r0, [r3, #12]
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	69fa      	ldr	r2, [r7, #28]
 8005488:	b292      	uxth	r2, r2
 800548a:	4619      	mov	r1, r3
 800548c:	f000 f90e 	bl	80056ac <Transmit>
			StartReceive(1);
 8005490:	2001      	movs	r0, #1
 8005492:	f000 f81d 	bl	80054d0 <StartReceive>
			osMailFree(uart_queue, queue_arg);
 8005496:	4b03      	ldr	r3, [pc, #12]	; (80054a4 <uart_thread+0x64>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	69b9      	ldr	r1, [r7, #24]
 800549c:	4618      	mov	r0, r3
 800549e:	f007 fd77 	bl	800cf90 <osMailFree>
		event = osMailGet(uart_queue, osWaitForever);
 80054a2:	e7d5      	b.n	8005450 <uart_thread+0x10>
 80054a4:	20000448 	.word	0x20000448

080054a8 <StartReciveUartAll>:
	}
}


static void StartReciveUartAll()
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b082      	sub	sp, #8
 80054ac:	af00      	add	r7, sp, #0
	for (int i = 0; i < 2; ++i) {
 80054ae:	2300      	movs	r3, #0
 80054b0:	607b      	str	r3, [r7, #4]
 80054b2:	e005      	b.n	80054c0 <StartReciveUartAll+0x18>
		StartReceive(i);
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f000 f80b 	bl	80054d0 <StartReceive>
	for (int i = 0; i < 2; ++i) {
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	3301      	adds	r3, #1
 80054be:	607b      	str	r3, [r7, #4]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	ddf6      	ble.n	80054b4 <StartReciveUartAll+0xc>
	}
}
 80054c6:	bf00      	nop
 80054c8:	bf00      	nop
 80054ca:	3708      	adds	r7, #8
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <StartReceive>:


static void StartReceive(int index)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
	switch (index) {
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <StartReceive+0x16>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d016      	beq.n	8005512 <StartReceive+0x42>
				HAL_UARTEx_ReceiveToIdle_DMA(&huart6, uart_input_buffer[1], UART_INPUT_BUFFER_SZ);
				__HAL_DMA_DISABLE_IT(&hdma_usart6_rx,DMA_IT_HT);
			}
			break;
		default:
			break;
 80054e4:	e02e      	b.n	8005544 <StartReceive+0x74>
			if (huart1.hdmarx->State==HAL_DMA_STATE_READY) {
 80054e6:	4b19      	ldr	r3, [pc, #100]	; (800554c <StartReceive+0x7c>)
 80054e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d124      	bne.n	800553e <StartReceive+0x6e>
				HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_input_buffer[0], UART_INPUT_BUFFER_SZ);
 80054f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80054f8:	4915      	ldr	r1, [pc, #84]	; (8005550 <StartReceive+0x80>)
 80054fa:	4814      	ldr	r0, [pc, #80]	; (800554c <StartReceive+0x7c>)
 80054fc:	f005 f910 	bl	800a720 <HAL_UARTEx_ReceiveToIdle_DMA>
				__HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 8005500:	4b14      	ldr	r3, [pc, #80]	; (8005554 <StartReceive+0x84>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	4b13      	ldr	r3, [pc, #76]	; (8005554 <StartReceive+0x84>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f022 0208 	bic.w	r2, r2, #8
 800550e:	601a      	str	r2, [r3, #0]
			break;
 8005510:	e015      	b.n	800553e <StartReceive+0x6e>
			if(huart6.hdmarx->State==HAL_DMA_STATE_READY){
 8005512:	4b11      	ldr	r3, [pc, #68]	; (8005558 <StartReceive+0x88>)
 8005514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005516:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b01      	cmp	r3, #1
 800551e:	d110      	bne.n	8005542 <StartReceive+0x72>
				HAL_UARTEx_ReceiveToIdle_DMA(&huart6, uart_input_buffer[1], UART_INPUT_BUFFER_SZ);
 8005520:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005524:	490d      	ldr	r1, [pc, #52]	; (800555c <StartReceive+0x8c>)
 8005526:	480c      	ldr	r0, [pc, #48]	; (8005558 <StartReceive+0x88>)
 8005528:	f005 f8fa 	bl	800a720 <HAL_UARTEx_ReceiveToIdle_DMA>
				__HAL_DMA_DISABLE_IT(&hdma_usart6_rx,DMA_IT_HT);
 800552c:	4b0c      	ldr	r3, [pc, #48]	; (8005560 <StartReceive+0x90>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	4b0b      	ldr	r3, [pc, #44]	; (8005560 <StartReceive+0x90>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0208 	bic.w	r2, r2, #8
 800553a:	601a      	str	r2, [r3, #0]
			break;
 800553c:	e001      	b.n	8005542 <StartReceive+0x72>
			break;
 800553e:	bf00      	nop
 8005540:	e000      	b.n	8005544 <StartReceive+0x74>
			break;
 8005542:	bf00      	nop
	}
}
 8005544:	bf00      	nop
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	20000a60 	.word	0x20000a60
 8005550:	20000d48 	.word	0x20000d48
 8005554:	20000ae8 	.word	0x20000ae8
 8005558:	20000aa4 	.word	0x20000aa4
 800555c:	20000e48 	.word	0x20000e48
 8005560:	20000b48 	.word	0x20000b48

08005564 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	460b      	mov	r3, r1
 800556e:	807b      	strh	r3, [r7, #2]
	Uart_Queue_Struct *queue_arg;
	uint8_t *input_pointer = NULL;
 8005570:	2300      	movs	r3, #0
 8005572:	617b      	str	r3, [r7, #20]
	uint8_t *output_pointer = NULL;
 8005574:	2300      	movs	r3, #0
 8005576:	613b      	str	r3, [r7, #16]
	if (huart->Instance==USART1) {
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a1a      	ldr	r2, [pc, #104]	; (80055e8 <HAL_UARTEx_RxEventCallback+0x84>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d105      	bne.n	800558e <HAL_UARTEx_RxEventCallback+0x2a>
		input_pointer = uart_input_buffer[0];
 8005582:	4b1a      	ldr	r3, [pc, #104]	; (80055ec <HAL_UARTEx_RxEventCallback+0x88>)
 8005584:	617b      	str	r3, [r7, #20]
		StartReceive(0);
 8005586:	2000      	movs	r0, #0
 8005588:	f7ff ffa2 	bl	80054d0 <StartReceive>
 800558c:	e008      	b.n	80055a0 <HAL_UARTEx_RxEventCallback+0x3c>
	}
	else if(huart->Instance==USART6){
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a17      	ldr	r2, [pc, #92]	; (80055f0 <HAL_UARTEx_RxEventCallback+0x8c>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d120      	bne.n	80055da <HAL_UARTEx_RxEventCallback+0x76>
		input_pointer = uart_input_buffer[1];
 8005598:	4b16      	ldr	r3, [pc, #88]	; (80055f4 <HAL_UARTEx_RxEventCallback+0x90>)
 800559a:	617b      	str	r3, [r7, #20]
		output_pointer = rs_answer;
 800559c:	4b16      	ldr	r3, [pc, #88]	; (80055f8 <HAL_UARTEx_RxEventCallback+0x94>)
 800559e:	613b      	str	r3, [r7, #16]

	}
	else return;
	queue_arg = osMailAlloc(uart_queue, 0);
 80055a0:	4b16      	ldr	r3, [pc, #88]	; (80055fc <HAL_UARTEx_RxEventCallback+0x98>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	2100      	movs	r1, #0
 80055a6:	4618      	mov	r0, r3
 80055a8:	f007 fc2a 	bl	800ce00 <osMailAlloc>
 80055ac:	60f8      	str	r0, [r7, #12]
	if(queue_arg==NULL)return;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d014      	beq.n	80055de <HAL_UARTEx_RxEventCallback+0x7a>
	queue_arg->inpit_size = size;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	887a      	ldrh	r2, [r7, #2]
 80055b8:	811a      	strh	r2, [r3, #8]
	queue_arg->input_pointer = input_pointer;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	697a      	ldr	r2, [r7, #20]
 80055be:	601a      	str	r2, [r3, #0]
	queue_arg->output_pointer = output_pointer;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	605a      	str	r2, [r3, #4]
	queue_arg->huart = huart;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	60da      	str	r2, [r3, #12]
	osMailPut(uart_queue, queue_arg);
 80055cc:	4b0b      	ldr	r3, [pc, #44]	; (80055fc <HAL_UARTEx_RxEventCallback+0x98>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68f9      	ldr	r1, [r7, #12]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f007 fc2a 	bl	800ce2c <osMailPut>
 80055d8:	e002      	b.n	80055e0 <HAL_UARTEx_RxEventCallback+0x7c>
	else return;
 80055da:	bf00      	nop
 80055dc:	e000      	b.n	80055e0 <HAL_UARTEx_RxEventCallback+0x7c>
	if(queue_arg==NULL)return;
 80055de:	bf00      	nop
}
 80055e0:	3718      	adds	r7, #24
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	40011000 	.word	0x40011000
 80055ec:	20000d48 	.word	0x20000d48
 80055f0:	40011400 	.word	0x40011400
 80055f4:	20000e48 	.word	0x20000e48
 80055f8:	20000f48 	.word	0x20000f48
 80055fc:	20000448 	.word	0x20000448

08005600 <RecognizePacket>:

static int RecognizePacket(Uart_Queue_Struct *request)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b084      	sub	sp, #16
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
	int result = 0;
 8005608:	2300      	movs	r3, #0
 800560a:	60fb      	str	r3, [r7, #12]
	if(request->input_pointer==NULL)return 0;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d101      	bne.n	8005618 <RecognizePacket+0x18>
 8005614:	2300      	movs	r3, #0
 8005616:	e03e      	b.n	8005696 <RecognizePacket+0x96>
	if(request->huart->Instance==USART1)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a20      	ldr	r2, [pc, #128]	; (80056a0 <RecognizePacket+0xa0>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d121      	bne.n	8005668 <RecognizePacket+0x68>
	{
		float analog = 0;
 8005624:	f04f 0300 	mov.w	r3, #0
 8005628:	60bb      	str	r3, [r7, #8]
		if(request->inpit_size==6 && *(request->input_pointer)==0x0A && *(request->input_pointer+5)==0x0D)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	891b      	ldrh	r3, [r3, #8]
 800562e:	2b06      	cmp	r3, #6
 8005630:	d118      	bne.n	8005664 <RecognizePacket+0x64>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	2b0a      	cmp	r3, #10
 800563a:	d113      	bne.n	8005664 <RecognizePacket+0x64>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	3305      	adds	r3, #5
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	2b0d      	cmp	r3, #13
 8005646:	d10d      	bne.n	8005664 <RecognizePacket+0x64>
		{
			memcpy(&analog,(request->input_pointer)+1,sizeof(float));
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	3301      	adds	r3, #1
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	60bb      	str	r3, [r7, #8]
			meas_data.analog_input = analog * 10;
 8005652:	edd7 7a02 	vldr	s15, [r7, #8]
 8005656:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800565a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800565e:	4b11      	ldr	r3, [pc, #68]	; (80056a4 <RecognizePacket+0xa4>)
 8005660:	edc3 7a01 	vstr	s15, [r3, #4]
		}
		return 0;
 8005664:	2300      	movs	r3, #0
 8005666:	e016      	b.n	8005696 <RecognizePacket+0x96>
	}
	else if (request->huart->Instance==USART6) {
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a0e      	ldr	r2, [pc, #56]	; (80056a8 <RecognizePacket+0xa8>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d10f      	bne.n	8005694 <RecognizePacket+0x94>
		if(request->output_pointer == NULL)return 0;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d101      	bne.n	8005680 <RecognizePacket+0x80>
 800567c:	2300      	movs	r3, #0
 800567e:	e00a      	b.n	8005696 <RecognizePacket+0x96>
		result = ModbusParse(request->input_pointer, request->inpit_size, request->output_pointer, RS485);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6818      	ldr	r0, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	8919      	ldrh	r1, [r3, #8]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685a      	ldr	r2, [r3, #4]
 800568c:	2300      	movs	r3, #0
 800568e:	f7fe f95f 	bl	8003950 <ModbusParse>
 8005692:	60f8      	str	r0, [r7, #12]
	}
	return result;
 8005694:	68fb      	ldr	r3, [r7, #12]
}
 8005696:	4618      	mov	r0, r3
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	40011000 	.word	0x40011000
 80056a4:	20000c8c 	.word	0x20000c8c
 80056a8:	40011400 	.word	0x40011400

080056ac <Transmit>:

static void Transmit(UART_HandleTypeDef *huart, uint8_t *p, uint16_t size)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	4613      	mov	r3, r2
 80056b8:	80fb      	strh	r3, [r7, #6]
	if(huart->Instance==USART6)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	4a0d      	ldr	r2, [pc, #52]	; (80056f4 <Transmit+0x48>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d112      	bne.n	80056ea <Transmit+0x3e>
	{
		HAL_GPIO_WritePin(RS485_TX_GPIO_Port, RS485_TX_Pin, SET);
 80056c4:	2201      	movs	r2, #1
 80056c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80056ca:	480b      	ldr	r0, [pc, #44]	; (80056f8 <Transmit+0x4c>)
 80056cc:	f002 ff7c 	bl	80085c8 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(huart, p, size, 1000);
 80056d0:	88fa      	ldrh	r2, [r7, #6]
 80056d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80056d6:	68b9      	ldr	r1, [r7, #8]
 80056d8:	68f8      	ldr	r0, [r7, #12]
 80056da:	f004 ff8f 	bl	800a5fc <HAL_UART_Transmit>
		HAL_GPIO_WritePin(RS485_TX_GPIO_Port, RS485_TX_Pin, RESET);
 80056de:	2200      	movs	r2, #0
 80056e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80056e4:	4804      	ldr	r0, [pc, #16]	; (80056f8 <Transmit+0x4c>)
 80056e6:	f002 ff6f 	bl	80085c8 <HAL_GPIO_WritePin>

	}
}
 80056ea:	bf00      	nop
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
 80056f2:	bf00      	nop
 80056f4:	40011400 	.word	0x40011400
 80056f8:	40020800 	.word	0x40020800

080056fc <RsReInit>:

int RsReInit (void)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
	int result = 0;
 8005702:	2300      	movs	r3, #0
 8005704:	607b      	str	r3, [r7, #4]
	result = HAL_UART_DeInit(&huart1);
 8005706:	4823      	ldr	r0, [pc, #140]	; (8005794 <RsReInit+0x98>)
 8005708:	f004 ff49 	bl	800a59e <HAL_UART_DeInit>
 800570c:	4603      	mov	r3, r0
 800570e:	607b      	str	r3, [r7, #4]
	if (result == HAL_OK)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d138      	bne.n	8005788 <RsReInit+0x8c>
	{
		uint32_t parity = 0;
 8005716:	2300      	movs	r3, #0
 8005718:	603b      	str	r3, [r7, #0]
		switch (settings.retain.rs_sett.parity) {
 800571a:	4b1f      	ldr	r3, [pc, #124]	; (8005798 <RsReInit+0x9c>)
 800571c:	8a1b      	ldrh	r3, [r3, #16]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d002      	beq.n	8005728 <RsReInit+0x2c>
 8005722:	2b01      	cmp	r3, #1
 8005724:	d003      	beq.n	800572e <RsReInit+0x32>
 8005726:	e006      	b.n	8005736 <RsReInit+0x3a>
			case 0:
				parity = UART_PARITY_NONE;
 8005728:	2300      	movs	r3, #0
 800572a:	603b      	str	r3, [r7, #0]
				break;
 800572c:	e007      	b.n	800573e <RsReInit+0x42>
			case 1:
				parity = UART_PARITY_EVEN;
 800572e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005732:	603b      	str	r3, [r7, #0]
				break;
 8005734:	e003      	b.n	800573e <RsReInit+0x42>
			default:
				parity = UART_PARITY_ODD;
 8005736:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800573a:	603b      	str	r3, [r7, #0]
				break;
 800573c:	bf00      	nop
		}
		huart6.Instance = USART6;
 800573e:	4b17      	ldr	r3, [pc, #92]	; (800579c <RsReInit+0xa0>)
 8005740:	4a17      	ldr	r2, [pc, #92]	; (80057a0 <RsReInit+0xa4>)
 8005742:	601a      	str	r2, [r3, #0]
		huart6.Init.BaudRate = settings.retain.rs_sett.baudrate>0 ? settings.retain.rs_sett.baudrate : 9600;
 8005744:	4b14      	ldr	r3, [pc, #80]	; (8005798 <RsReInit+0x9c>)
 8005746:	68db      	ldr	r3, [r3, #12]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d002      	beq.n	8005752 <RsReInit+0x56>
 800574c:	4b12      	ldr	r3, [pc, #72]	; (8005798 <RsReInit+0x9c>)
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	e001      	b.n	8005756 <RsReInit+0x5a>
 8005752:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8005756:	4a11      	ldr	r2, [pc, #68]	; (800579c <RsReInit+0xa0>)
 8005758:	6053      	str	r3, [r2, #4]
		huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800575a:	4b10      	ldr	r3, [pc, #64]	; (800579c <RsReInit+0xa0>)
 800575c:	2200      	movs	r2, #0
 800575e:	609a      	str	r2, [r3, #8]
		huart6.Init.StopBits = UART_STOPBITS_1;
 8005760:	4b0e      	ldr	r3, [pc, #56]	; (800579c <RsReInit+0xa0>)
 8005762:	2200      	movs	r2, #0
 8005764:	60da      	str	r2, [r3, #12]
		huart6.Init.Parity = parity;
 8005766:	4a0d      	ldr	r2, [pc, #52]	; (800579c <RsReInit+0xa0>)
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	6113      	str	r3, [r2, #16]
		huart6.Init.Mode = UART_MODE_TX_RX;
 800576c:	4b0b      	ldr	r3, [pc, #44]	; (800579c <RsReInit+0xa0>)
 800576e:	220c      	movs	r2, #12
 8005770:	615a      	str	r2, [r3, #20]
		huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005772:	4b0a      	ldr	r3, [pc, #40]	; (800579c <RsReInit+0xa0>)
 8005774:	2200      	movs	r2, #0
 8005776:	619a      	str	r2, [r3, #24]
		huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8005778:	4b08      	ldr	r3, [pc, #32]	; (800579c <RsReInit+0xa0>)
 800577a:	2200      	movs	r2, #0
 800577c:	61da      	str	r2, [r3, #28]
		result = HAL_UART_Init(&huart6);
 800577e:	4807      	ldr	r0, [pc, #28]	; (800579c <RsReInit+0xa0>)
 8005780:	f004 fec0 	bl	800a504 <HAL_UART_Init>
 8005784:	4603      	mov	r3, r0
 8005786:	607b      	str	r3, [r7, #4]
	}
  return result;
 8005788:	687b      	ldr	r3, [r7, #4]
}
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	20000a60 	.word	0x20000a60
 8005798:	20000bf0 	.word	0x20000bf0
 800579c:	20000aa4 	.word	0x20000aa4
 80057a0:	40011400 	.word	0x40011400

080057a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80057a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80057dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80057a8:	480d      	ldr	r0, [pc, #52]	; (80057e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80057aa:	490e      	ldr	r1, [pc, #56]	; (80057e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80057ac:	4a0e      	ldr	r2, [pc, #56]	; (80057e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80057ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80057b0:	e002      	b.n	80057b8 <LoopCopyDataInit>

080057b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80057b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80057b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80057b6:	3304      	adds	r3, #4

080057b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80057b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80057ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80057bc:	d3f9      	bcc.n	80057b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80057be:	4a0b      	ldr	r2, [pc, #44]	; (80057ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80057c0:	4c0b      	ldr	r4, [pc, #44]	; (80057f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80057c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80057c4:	e001      	b.n	80057ca <LoopFillZerobss>

080057c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80057c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80057c8:	3204      	adds	r2, #4

080057ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80057ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80057cc:	d3fb      	bcc.n	80057c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80057ce:	f7ff fd97 	bl	8005300 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80057d2:	f017 fb23 	bl	801ce1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80057d6:	f7fd fc8b 	bl	80030f0 <main>
  bx  lr    
 80057da:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80057dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80057e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80057e4:	2000035c 	.word	0x2000035c
  ldr r2, =_sidata
 80057e8:	08021e70 	.word	0x08021e70
  ldr r2, =_sbss
 80057ec:	2000035c 	.word	0x2000035c
  ldr r4, =_ebss
 80057f0:	2000df28 	.word	0x2000df28

080057f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80057f4:	e7fe      	b.n	80057f4 <ADC_IRQHandler>

080057f6 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b084      	sub	sp, #16
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d104      	bne.n	800580e <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8005804:	b672      	cpsid	i
}
 8005806:	bf00      	nop
 8005808:	f7fe f860 	bl	80038cc <Error_Handler>
 800580c:	e7fe      	b.n	800580c <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 800580e:	2300      	movs	r3, #0
 8005810:	60fb      	str	r3, [r7, #12]
 8005812:	e007      	b.n	8005824 <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	2100      	movs	r1, #0
 800581a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	3301      	adds	r3, #1
 8005822:	60fb      	str	r3, [r7, #12]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d9f4      	bls.n	8005814 <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2200      	movs	r2, #0
 800582e:	721a      	strb	r2, [r3, #8]
}
 8005830:	bf00      	nop
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d104      	bne.n	8005850 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8005846:	b672      	cpsid	i
}
 8005848:	bf00      	nop
 800584a:	f7fe f83f 	bl	80038cc <Error_Handler>
 800584e:	e7fe      	b.n	800584e <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	7a1b      	ldrb	r3, [r3, #8]
 8005854:	2b01      	cmp	r3, #1
 8005856:	d904      	bls.n	8005862 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8005858:	b672      	cpsid	i
}
 800585a:	bf00      	nop
 800585c:	f7fe f836 	bl	80038cc <Error_Handler>
 8005860:	e7fe      	b.n	8005860 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	7a1b      	ldrb	r3, [r3, #8]
 8005866:	1c5a      	adds	r2, r3, #1
 8005868:	b2d1      	uxtb	r1, r2
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	7211      	strb	r1, [r2, #8]
 800586e:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005870:	f3ef 8211 	mrs	r2, BASEPRI
 8005874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005878:	f383 8811 	msr	BASEPRI, r3
 800587c:	f3bf 8f6f 	isb	sy
 8005880:	f3bf 8f4f 	dsb	sy
 8005884:	60fa      	str	r2, [r7, #12]
 8005886:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8005890:	bf00      	nop
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d104      	bne.n	80058b0 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80058a6:	b672      	cpsid	i
}
 80058a8:	bf00      	nop
 80058aa:	f7fe f80f 	bl	80038cc <Error_Handler>
 80058ae:	e7fe      	b.n	80058ae <stm32_lock_release+0x16>
  lock->nesting_level--;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	7a1b      	ldrb	r3, [r3, #8]
 80058b4:	3b01      	subs	r3, #1
 80058b6:	b2da      	uxtb	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	7a1b      	ldrb	r3, [r3, #8]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d904      	bls.n	80058ce <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 80058c4:	b672      	cpsid	i
}
 80058c6:	bf00      	nop
 80058c8:	f7fe f800 	bl	80038cc <Error_Handler>
 80058cc:	e7fe      	b.n	80058cc <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	7a1b      	ldrb	r3, [r3, #8]
 80058d2:	461a      	mov	r2, r3
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058da:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80058e2:	bf00      	nop
}
 80058e4:	bf00      	nop
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d103      	bne.n	8005902 <__retarget_lock_init_recursive+0x16>
  {
    errno = EINVAL;
 80058fa:	4b0e      	ldr	r3, [pc, #56]	; (8005934 <__retarget_lock_init_recursive+0x48>)
 80058fc:	2216      	movs	r2, #22
 80058fe:	601a      	str	r2, [r3, #0]
    return;
 8005900:	e015      	b.n	800592e <__retarget_lock_init_recursive+0x42>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8005902:	200c      	movs	r0, #12
 8005904:	f017 faae 	bl	801ce64 <malloc>
 8005908:	4603      	mov	r3, r0
 800590a:	461a      	mov	r2, r3
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d005      	beq.n	8005924 <__retarget_lock_init_recursive+0x38>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4618      	mov	r0, r3
 800591e:	f7ff ff6a 	bl	80057f6 <stm32_lock_init>
    return;
 8005922:	e004      	b.n	800592e <__retarget_lock_init_recursive+0x42>
  __ASM volatile ("cpsid i" : : : "memory");
 8005924:	b672      	cpsid	i
}
 8005926:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8005928:	f7fd ffd0 	bl	80038cc <Error_Handler>
 800592c:	e7fe      	b.n	800592c <__retarget_lock_init_recursive+0x40>
}
 800592e:	3708      	adds	r7, #8
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}
 8005934:	2000df24 	.word	0x2000df24

08005938 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d104      	bne.n	8005950 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8005946:	b672      	cpsid	i
}
 8005948:	bf00      	nop
 800594a:	f7fd ffbf 	bl	80038cc <Error_Handler>
 800594e:	e7fe      	b.n	800594e <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4618      	mov	r0, r3
 8005954:	f7ff ff70 	bl	8005838 <stm32_lock_acquire>
}
 8005958:	bf00      	nop
 800595a:	3708      	adds	r7, #8
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}

08005960 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d104      	bne.n	8005978 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800596e:	b672      	cpsid	i
}
 8005970:	bf00      	nop
 8005972:	f7fd ffab 	bl	80038cc <Error_Handler>
 8005976:	e7fe      	b.n	8005976 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4618      	mov	r0, r3
 800597c:	f7ff ff8c 	bl	8005898 <stm32_lock_release>
}
 8005980:	bf00      	nop
 8005982:	3708      	adds	r7, #8
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800598c:	4b0e      	ldr	r3, [pc, #56]	; (80059c8 <HAL_Init+0x40>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a0d      	ldr	r2, [pc, #52]	; (80059c8 <HAL_Init+0x40>)
 8005992:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005996:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005998:	4b0b      	ldr	r3, [pc, #44]	; (80059c8 <HAL_Init+0x40>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a0a      	ldr	r2, [pc, #40]	; (80059c8 <HAL_Init+0x40>)
 800599e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80059a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80059a4:	4b08      	ldr	r3, [pc, #32]	; (80059c8 <HAL_Init+0x40>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a07      	ldr	r2, [pc, #28]	; (80059c8 <HAL_Init+0x40>)
 80059aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80059b0:	2003      	movs	r0, #3
 80059b2:	f000 fd28 	bl	8006406 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80059b6:	200f      	movs	r0, #15
 80059b8:	f7ff fb16 	bl	8004fe8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80059bc:	f7ff f89a 	bl	8004af4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80059c0:	2300      	movs	r3, #0
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	40023c00 	.word	0x40023c00

080059cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80059d0:	4b06      	ldr	r3, [pc, #24]	; (80059ec <HAL_IncTick+0x20>)
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	461a      	mov	r2, r3
 80059d6:	4b06      	ldr	r3, [pc, #24]	; (80059f0 <HAL_IncTick+0x24>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4413      	add	r3, r2
 80059dc:	4a04      	ldr	r2, [pc, #16]	; (80059f0 <HAL_IncTick+0x24>)
 80059de:	6013      	str	r3, [r2, #0]
}
 80059e0:	bf00      	nop
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	200002e4 	.word	0x200002e4
 80059f0:	2000106c 	.word	0x2000106c

080059f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059f4:	b480      	push	{r7}
 80059f6:	af00      	add	r7, sp, #0
  return uwTick;
 80059f8:	4b03      	ldr	r3, [pc, #12]	; (8005a08 <HAL_GetTick+0x14>)
 80059fa:	681b      	ldr	r3, [r3, #0]
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr
 8005a06:	bf00      	nop
 8005a08:	2000106c 	.word	0x2000106c

08005a0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b084      	sub	sp, #16
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005a14:	f7ff ffee 	bl	80059f4 <HAL_GetTick>
 8005a18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a24:	d005      	beq.n	8005a32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005a26:	4b0a      	ldr	r3, [pc, #40]	; (8005a50 <HAL_Delay+0x44>)
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	4413      	add	r3, r2
 8005a30:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005a32:	bf00      	nop
 8005a34:	f7ff ffde 	bl	80059f4 <HAL_GetTick>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d8f7      	bhi.n	8005a34 <HAL_Delay+0x28>
  {
  }
}
 8005a44:	bf00      	nop
 8005a46:	bf00      	nop
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	200002e4 	.word	0x200002e4

08005a54 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d101      	bne.n	8005a6a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e033      	b.n	8005ad2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d109      	bne.n	8005a86 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7ff f86a 	bl	8004b4c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8a:	f003 0310 	and.w	r3, r3, #16
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d118      	bne.n	8005ac4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005a9a:	f023 0302 	bic.w	r3, r3, #2
 8005a9e:	f043 0202 	orr.w	r2, r3, #2
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 fa5e 	bl	8005f68 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab6:	f023 0303 	bic.w	r3, r3, #3
 8005aba:	f043 0201 	orr.w	r2, r3, #1
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	641a      	str	r2, [r3, #64]	; 0x40
 8005ac2:	e001      	b.n	8005ac8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005ac4:	2301      	movs	r3, #1
 8005ac6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005ad0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
	...

08005adc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d101      	bne.n	8005afa <HAL_ADC_Start_DMA+0x1e>
 8005af6:	2302      	movs	r3, #2
 8005af8:	e0e9      	b.n	8005cce <HAL_ADC_Start_DMA+0x1f2>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f003 0301 	and.w	r3, r3, #1
 8005b0c:	2b01      	cmp	r3, #1
 8005b0e:	d018      	beq.n	8005b42 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	689a      	ldr	r2, [r3, #8]
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f042 0201 	orr.w	r2, r2, #1
 8005b1e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005b20:	4b6d      	ldr	r3, [pc, #436]	; (8005cd8 <HAL_ADC_Start_DMA+0x1fc>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a6d      	ldr	r2, [pc, #436]	; (8005cdc <HAL_ADC_Start_DMA+0x200>)
 8005b26:	fba2 2303 	umull	r2, r3, r2, r3
 8005b2a:	0c9a      	lsrs	r2, r3, #18
 8005b2c:	4613      	mov	r3, r2
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	4413      	add	r3, r2
 8005b32:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005b34:	e002      	b.n	8005b3c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	3b01      	subs	r3, #1
 8005b3a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1f9      	bne.n	8005b36 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b50:	d107      	bne.n	8005b62 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b60:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	f003 0301 	and.w	r3, r3, #1
 8005b6c:	2b01      	cmp	r3, #1
 8005b6e:	f040 80a1 	bne.w	8005cb4 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005b7a:	f023 0301 	bic.w	r3, r3, #1
 8005b7e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d007      	beq.n	8005ba4 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b98:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005b9c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bb0:	d106      	bne.n	8005bc0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb6:	f023 0206 	bic.w	r2, r3, #6
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	645a      	str	r2, [r3, #68]	; 0x44
 8005bbe:	e002      	b.n	8005bc6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005bce:	4b44      	ldr	r3, [pc, #272]	; (8005ce0 <HAL_ADC_Start_DMA+0x204>)
 8005bd0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd6:	4a43      	ldr	r2, [pc, #268]	; (8005ce4 <HAL_ADC_Start_DMA+0x208>)
 8005bd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bde:	4a42      	ldr	r2, [pc, #264]	; (8005ce8 <HAL_ADC_Start_DMA+0x20c>)
 8005be0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be6:	4a41      	ldr	r2, [pc, #260]	; (8005cec <HAL_ADC_Start_DMA+0x210>)
 8005be8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005bf2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	685a      	ldr	r2, [r3, #4]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005c02:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689a      	ldr	r2, [r3, #8]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c12:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	334c      	adds	r3, #76	; 0x4c
 8005c1e:	4619      	mov	r1, r3
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f000 fd3e 	bl	80066a4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	685b      	ldr	r3, [r3, #4]
 8005c2c:	f003 031f 	and.w	r3, r3, #31
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d12a      	bne.n	8005c8a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	4a2d      	ldr	r2, [pc, #180]	; (8005cf0 <HAL_ADC_Start_DMA+0x214>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d015      	beq.n	8005c6a <HAL_ADC_Start_DMA+0x18e>
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	4a2c      	ldr	r2, [pc, #176]	; (8005cf4 <HAL_ADC_Start_DMA+0x218>)
 8005c44:	4293      	cmp	r3, r2
 8005c46:	d105      	bne.n	8005c54 <HAL_ADC_Start_DMA+0x178>
 8005c48:	4b25      	ldr	r3, [pc, #148]	; (8005ce0 <HAL_ADC_Start_DMA+0x204>)
 8005c4a:	685b      	ldr	r3, [r3, #4]
 8005c4c:	f003 031f 	and.w	r3, r3, #31
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d00a      	beq.n	8005c6a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a27      	ldr	r2, [pc, #156]	; (8005cf8 <HAL_ADC_Start_DMA+0x21c>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d136      	bne.n	8005ccc <HAL_ADC_Start_DMA+0x1f0>
 8005c5e:	4b20      	ldr	r3, [pc, #128]	; (8005ce0 <HAL_ADC_Start_DMA+0x204>)
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f003 0310 	and.w	r3, r3, #16
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d130      	bne.n	8005ccc <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d129      	bne.n	8005ccc <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	689a      	ldr	r2, [r3, #8]
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005c86:	609a      	str	r2, [r3, #8]
 8005c88:	e020      	b.n	8005ccc <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a18      	ldr	r2, [pc, #96]	; (8005cf0 <HAL_ADC_Start_DMA+0x214>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d11b      	bne.n	8005ccc <HAL_ADC_Start_DMA+0x1f0>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d114      	bne.n	8005ccc <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	689a      	ldr	r2, [r3, #8]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005cb0:	609a      	str	r2, [r3, #8]
 8005cb2:	e00b      	b.n	8005ccc <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb8:	f043 0210 	orr.w	r2, r3, #16
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cc4:	f043 0201 	orr.w	r2, r3, #1
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3718      	adds	r7, #24
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop
 8005cd8:	200002dc 	.word	0x200002dc
 8005cdc:	431bde83 	.word	0x431bde83
 8005ce0:	40012300 	.word	0x40012300
 8005ce4:	08006161 	.word	0x08006161
 8005ce8:	0800621b 	.word	0x0800621b
 8005cec:	08006237 	.word	0x08006237
 8005cf0:	40012000 	.word	0x40012000
 8005cf4:	40012100 	.word	0x40012100
 8005cf8:	40012200 	.word	0x40012200

08005cfc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d101      	bne.n	8005d40 <HAL_ADC_ConfigChannel+0x1c>
 8005d3c:	2302      	movs	r3, #2
 8005d3e:	e105      	b.n	8005f4c <HAL_ADC_ConfigChannel+0x228>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2201      	movs	r2, #1
 8005d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b09      	cmp	r3, #9
 8005d4e:	d925      	bls.n	8005d9c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68d9      	ldr	r1, [r3, #12]
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	4613      	mov	r3, r2
 8005d60:	005b      	lsls	r3, r3, #1
 8005d62:	4413      	add	r3, r2
 8005d64:	3b1e      	subs	r3, #30
 8005d66:	2207      	movs	r2, #7
 8005d68:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6c:	43da      	mvns	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	400a      	ands	r2, r1
 8005d74:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68d9      	ldr	r1, [r3, #12]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	689a      	ldr	r2, [r3, #8]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	4618      	mov	r0, r3
 8005d88:	4603      	mov	r3, r0
 8005d8a:	005b      	lsls	r3, r3, #1
 8005d8c:	4403      	add	r3, r0
 8005d8e:	3b1e      	subs	r3, #30
 8005d90:	409a      	lsls	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	430a      	orrs	r2, r1
 8005d98:	60da      	str	r2, [r3, #12]
 8005d9a:	e022      	b.n	8005de2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	6919      	ldr	r1, [r3, #16]
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	461a      	mov	r2, r3
 8005daa:	4613      	mov	r3, r2
 8005dac:	005b      	lsls	r3, r3, #1
 8005dae:	4413      	add	r3, r2
 8005db0:	2207      	movs	r2, #7
 8005db2:	fa02 f303 	lsl.w	r3, r2, r3
 8005db6:	43da      	mvns	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	400a      	ands	r2, r1
 8005dbe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6919      	ldr	r1, [r3, #16]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	689a      	ldr	r2, [r3, #8]
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	005b      	lsls	r3, r3, #1
 8005dd6:	4403      	add	r3, r0
 8005dd8:	409a      	lsls	r2, r3
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	430a      	orrs	r2, r1
 8005de0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	2b06      	cmp	r3, #6
 8005de8:	d824      	bhi.n	8005e34 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	685a      	ldr	r2, [r3, #4]
 8005df4:	4613      	mov	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	3b05      	subs	r3, #5
 8005dfc:	221f      	movs	r2, #31
 8005dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8005e02:	43da      	mvns	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	400a      	ands	r2, r1
 8005e0a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	4618      	mov	r0, r3
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4413      	add	r3, r2
 8005e24:	3b05      	subs	r3, #5
 8005e26:	fa00 f203 	lsl.w	r2, r0, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	430a      	orrs	r2, r1
 8005e30:	635a      	str	r2, [r3, #52]	; 0x34
 8005e32:	e04c      	b.n	8005ece <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	685b      	ldr	r3, [r3, #4]
 8005e38:	2b0c      	cmp	r3, #12
 8005e3a:	d824      	bhi.n	8005e86 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	4613      	mov	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	3b23      	subs	r3, #35	; 0x23
 8005e4e:	221f      	movs	r2, #31
 8005e50:	fa02 f303 	lsl.w	r3, r2, r3
 8005e54:	43da      	mvns	r2, r3
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	400a      	ands	r2, r1
 8005e5c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685a      	ldr	r2, [r3, #4]
 8005e70:	4613      	mov	r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	4413      	add	r3, r2
 8005e76:	3b23      	subs	r3, #35	; 0x23
 8005e78:	fa00 f203 	lsl.w	r2, r0, r3
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	430a      	orrs	r2, r1
 8005e82:	631a      	str	r2, [r3, #48]	; 0x30
 8005e84:	e023      	b.n	8005ece <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	685a      	ldr	r2, [r3, #4]
 8005e90:	4613      	mov	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	3b41      	subs	r3, #65	; 0x41
 8005e98:	221f      	movs	r2, #31
 8005e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9e:	43da      	mvns	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	400a      	ands	r2, r1
 8005ea6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	b29b      	uxth	r3, r3
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	685a      	ldr	r2, [r3, #4]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4413      	add	r3, r2
 8005ec0:	3b41      	subs	r3, #65	; 0x41
 8005ec2:	fa00 f203 	lsl.w	r2, r0, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005ece:	4b22      	ldr	r3, [pc, #136]	; (8005f58 <HAL_ADC_ConfigChannel+0x234>)
 8005ed0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a21      	ldr	r2, [pc, #132]	; (8005f5c <HAL_ADC_ConfigChannel+0x238>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d109      	bne.n	8005ef0 <HAL_ADC_ConfigChannel+0x1cc>
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b12      	cmp	r3, #18
 8005ee2:	d105      	bne.n	8005ef0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a19      	ldr	r2, [pc, #100]	; (8005f5c <HAL_ADC_ConfigChannel+0x238>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d123      	bne.n	8005f42 <HAL_ADC_ConfigChannel+0x21e>
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2b10      	cmp	r3, #16
 8005f00:	d003      	beq.n	8005f0a <HAL_ADC_ConfigChannel+0x1e6>
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2b11      	cmp	r3, #17
 8005f08:	d11b      	bne.n	8005f42 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2b10      	cmp	r3, #16
 8005f1c:	d111      	bne.n	8005f42 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005f1e:	4b10      	ldr	r3, [pc, #64]	; (8005f60 <HAL_ADC_ConfigChannel+0x23c>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a10      	ldr	r2, [pc, #64]	; (8005f64 <HAL_ADC_ConfigChannel+0x240>)
 8005f24:	fba2 2303 	umull	r2, r3, r2, r3
 8005f28:	0c9a      	lsrs	r2, r3, #18
 8005f2a:	4613      	mov	r3, r2
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4413      	add	r3, r2
 8005f30:	005b      	lsls	r3, r3, #1
 8005f32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005f34:	e002      	b.n	8005f3c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	3b01      	subs	r3, #1
 8005f3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d1f9      	bne.n	8005f36 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3714      	adds	r7, #20
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr
 8005f58:	40012300 	.word	0x40012300
 8005f5c:	40012000 	.word	0x40012000
 8005f60:	200002dc 	.word	0x200002dc
 8005f64:	431bde83 	.word	0x431bde83

08005f68 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005f70:	4b79      	ldr	r3, [pc, #484]	; (8006158 <ADC_Init+0x1f0>)
 8005f72:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	431a      	orrs	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	685a      	ldr	r2, [r3, #4]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	6859      	ldr	r1, [r3, #4]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	691b      	ldr	r3, [r3, #16]
 8005fa8:	021a      	lsls	r2, r3, #8
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	685a      	ldr	r2, [r3, #4]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005fc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6859      	ldr	r1, [r3, #4]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	689a      	ldr	r2, [r3, #8]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	689a      	ldr	r2, [r3, #8]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fe2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6899      	ldr	r1, [r3, #8]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	68da      	ldr	r2, [r3, #12]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffa:	4a58      	ldr	r2, [pc, #352]	; (800615c <ADC_Init+0x1f4>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d022      	beq.n	8006046 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689a      	ldr	r2, [r3, #8]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800600e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	6899      	ldr	r1, [r3, #8]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	430a      	orrs	r2, r1
 8006020:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689a      	ldr	r2, [r3, #8]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006030:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	6899      	ldr	r1, [r3, #8]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	430a      	orrs	r2, r1
 8006042:	609a      	str	r2, [r3, #8]
 8006044:	e00f      	b.n	8006066 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689a      	ldr	r2, [r3, #8]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006054:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	689a      	ldr	r2, [r3, #8]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006064:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	f022 0202 	bic.w	r2, r2, #2
 8006074:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	6899      	ldr	r1, [r3, #8]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	7e1b      	ldrb	r3, [r3, #24]
 8006080:	005a      	lsls	r2, r3, #1
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	430a      	orrs	r2, r1
 8006088:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d01b      	beq.n	80060cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	685a      	ldr	r2, [r3, #4]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685a      	ldr	r2, [r3, #4]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80060b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	6859      	ldr	r1, [r3, #4]
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060be:	3b01      	subs	r3, #1
 80060c0:	035a      	lsls	r2, r3, #13
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	430a      	orrs	r2, r1
 80060c8:	605a      	str	r2, [r3, #4]
 80060ca:	e007      	b.n	80060dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	685a      	ldr	r2, [r3, #4]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80060ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	69db      	ldr	r3, [r3, #28]
 80060f6:	3b01      	subs	r3, #1
 80060f8:	051a      	lsls	r2, r3, #20
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	689a      	ldr	r2, [r3, #8]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006110:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	6899      	ldr	r1, [r3, #8]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800611e:	025a      	lsls	r2, r3, #9
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	430a      	orrs	r2, r1
 8006126:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689a      	ldr	r2, [r3, #8]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006136:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6899      	ldr	r1, [r3, #8]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	695b      	ldr	r3, [r3, #20]
 8006142:	029a      	lsls	r2, r3, #10
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	430a      	orrs	r2, r1
 800614a:	609a      	str	r2, [r3, #8]
}
 800614c:	bf00      	nop
 800614e:	3714      	adds	r7, #20
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	40012300 	.word	0x40012300
 800615c:	0f000001 	.word	0x0f000001

08006160 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b084      	sub	sp, #16
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006172:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006176:	2b00      	cmp	r3, #0
 8006178:	d13c      	bne.n	80061f4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800617e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006190:	2b00      	cmp	r3, #0
 8006192:	d12b      	bne.n	80061ec <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8006198:	2b00      	cmp	r3, #0
 800619a:	d127      	bne.n	80061ec <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d006      	beq.n	80061b8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d119      	bne.n	80061ec <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685a      	ldr	r2, [r3, #4]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f022 0220 	bic.w	r2, r2, #32
 80061c6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d105      	bne.n	80061ec <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e4:	f043 0201 	orr.w	r2, r3, #1
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f7fa fa1b 	bl	8000628 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80061f2:	e00e      	b.n	8006212 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f8:	f003 0310 	and.w	r3, r3, #16
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d003      	beq.n	8006208 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8006200:	68f8      	ldr	r0, [r7, #12]
 8006202:	f7ff fd85 	bl	8005d10 <HAL_ADC_ErrorCallback>
}
 8006206:	e004      	b.n	8006212 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	4798      	blx	r3
}
 8006212:	bf00      	nop
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}

0800621a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800621a:	b580      	push	{r7, lr}
 800621c:	b084      	sub	sp, #16
 800621e:	af00      	add	r7, sp, #0
 8006220:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006226:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	f7ff fd67 	bl	8005cfc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800622e:	bf00      	nop
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b084      	sub	sp, #16
 800623a:	af00      	add	r7, sp, #0
 800623c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006242:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2240      	movs	r2, #64	; 0x40
 8006248:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800624e:	f043 0204 	orr.w	r2, r3, #4
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f7ff fd5a 	bl	8005d10 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800625c:	bf00      	nop
 800625e:	3710      	adds	r7, #16
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f003 0307 	and.w	r3, r3, #7
 8006272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006274:	4b0c      	ldr	r3, [pc, #48]	; (80062a8 <__NVIC_SetPriorityGrouping+0x44>)
 8006276:	68db      	ldr	r3, [r3, #12]
 8006278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800627a:	68ba      	ldr	r2, [r7, #8]
 800627c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006280:	4013      	ands	r3, r2
 8006282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800628c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006296:	4a04      	ldr	r2, [pc, #16]	; (80062a8 <__NVIC_SetPriorityGrouping+0x44>)
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	60d3      	str	r3, [r2, #12]
}
 800629c:	bf00      	nop
 800629e:	3714      	adds	r7, #20
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr
 80062a8:	e000ed00 	.word	0xe000ed00

080062ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80062ac:	b480      	push	{r7}
 80062ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062b0:	4b04      	ldr	r3, [pc, #16]	; (80062c4 <__NVIC_GetPriorityGrouping+0x18>)
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	0a1b      	lsrs	r3, r3, #8
 80062b6:	f003 0307 	and.w	r3, r3, #7
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr
 80062c4:	e000ed00 	.word	0xe000ed00

080062c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	4603      	mov	r3, r0
 80062d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80062d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	db0b      	blt.n	80062f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062da:	79fb      	ldrb	r3, [r7, #7]
 80062dc:	f003 021f 	and.w	r2, r3, #31
 80062e0:	4907      	ldr	r1, [pc, #28]	; (8006300 <__NVIC_EnableIRQ+0x38>)
 80062e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062e6:	095b      	lsrs	r3, r3, #5
 80062e8:	2001      	movs	r0, #1
 80062ea:	fa00 f202 	lsl.w	r2, r0, r2
 80062ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80062f2:	bf00      	nop
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
 80062fe:	bf00      	nop
 8006300:	e000e100 	.word	0xe000e100

08006304 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006304:	b480      	push	{r7}
 8006306:	b083      	sub	sp, #12
 8006308:	af00      	add	r7, sp, #0
 800630a:	4603      	mov	r3, r0
 800630c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800630e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006312:	2b00      	cmp	r3, #0
 8006314:	db12      	blt.n	800633c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006316:	79fb      	ldrb	r3, [r7, #7]
 8006318:	f003 021f 	and.w	r2, r3, #31
 800631c:	490a      	ldr	r1, [pc, #40]	; (8006348 <__NVIC_DisableIRQ+0x44>)
 800631e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006322:	095b      	lsrs	r3, r3, #5
 8006324:	2001      	movs	r0, #1
 8006326:	fa00 f202 	lsl.w	r2, r0, r2
 800632a:	3320      	adds	r3, #32
 800632c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006330:	f3bf 8f4f 	dsb	sy
}
 8006334:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006336:	f3bf 8f6f 	isb	sy
}
 800633a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800633c:	bf00      	nop
 800633e:	370c      	adds	r7, #12
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr
 8006348:	e000e100 	.word	0xe000e100

0800634c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	4603      	mov	r3, r0
 8006354:	6039      	str	r1, [r7, #0]
 8006356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800635c:	2b00      	cmp	r3, #0
 800635e:	db0a      	blt.n	8006376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	b2da      	uxtb	r2, r3
 8006364:	490c      	ldr	r1, [pc, #48]	; (8006398 <__NVIC_SetPriority+0x4c>)
 8006366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800636a:	0112      	lsls	r2, r2, #4
 800636c:	b2d2      	uxtb	r2, r2
 800636e:	440b      	add	r3, r1
 8006370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006374:	e00a      	b.n	800638c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	b2da      	uxtb	r2, r3
 800637a:	4908      	ldr	r1, [pc, #32]	; (800639c <__NVIC_SetPriority+0x50>)
 800637c:	79fb      	ldrb	r3, [r7, #7]
 800637e:	f003 030f 	and.w	r3, r3, #15
 8006382:	3b04      	subs	r3, #4
 8006384:	0112      	lsls	r2, r2, #4
 8006386:	b2d2      	uxtb	r2, r2
 8006388:	440b      	add	r3, r1
 800638a:	761a      	strb	r2, [r3, #24]
}
 800638c:	bf00      	nop
 800638e:	370c      	adds	r7, #12
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr
 8006398:	e000e100 	.word	0xe000e100
 800639c:	e000ed00 	.word	0xe000ed00

080063a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b089      	sub	sp, #36	; 0x24
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f003 0307 	and.w	r3, r3, #7
 80063b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	f1c3 0307 	rsb	r3, r3, #7
 80063ba:	2b04      	cmp	r3, #4
 80063bc:	bf28      	it	cs
 80063be:	2304      	movcs	r3, #4
 80063c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	3304      	adds	r3, #4
 80063c6:	2b06      	cmp	r3, #6
 80063c8:	d902      	bls.n	80063d0 <NVIC_EncodePriority+0x30>
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	3b03      	subs	r3, #3
 80063ce:	e000      	b.n	80063d2 <NVIC_EncodePriority+0x32>
 80063d0:	2300      	movs	r3, #0
 80063d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063d4:	f04f 32ff 	mov.w	r2, #4294967295
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	fa02 f303 	lsl.w	r3, r2, r3
 80063de:	43da      	mvns	r2, r3
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	401a      	ands	r2, r3
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80063e8:	f04f 31ff 	mov.w	r1, #4294967295
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	fa01 f303 	lsl.w	r3, r1, r3
 80063f2:	43d9      	mvns	r1, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063f8:	4313      	orrs	r3, r2
         );
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3724      	adds	r7, #36	; 0x24
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b082      	sub	sp, #8
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f7ff ff28 	bl	8006264 <__NVIC_SetPriorityGrouping>
}
 8006414:	bf00      	nop
 8006416:	3708      	adds	r7, #8
 8006418:	46bd      	mov	sp, r7
 800641a:	bd80      	pop	{r7, pc}

0800641c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800641c:	b580      	push	{r7, lr}
 800641e:	b086      	sub	sp, #24
 8006420:	af00      	add	r7, sp, #0
 8006422:	4603      	mov	r3, r0
 8006424:	60b9      	str	r1, [r7, #8]
 8006426:	607a      	str	r2, [r7, #4]
 8006428:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800642a:	2300      	movs	r3, #0
 800642c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800642e:	f7ff ff3d 	bl	80062ac <__NVIC_GetPriorityGrouping>
 8006432:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	68b9      	ldr	r1, [r7, #8]
 8006438:	6978      	ldr	r0, [r7, #20]
 800643a:	f7ff ffb1 	bl	80063a0 <NVIC_EncodePriority>
 800643e:	4602      	mov	r2, r0
 8006440:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006444:	4611      	mov	r1, r2
 8006446:	4618      	mov	r0, r3
 8006448:	f7ff ff80 	bl	800634c <__NVIC_SetPriority>
}
 800644c:	bf00      	nop
 800644e:	3718      	adds	r7, #24
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}

08006454 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	4603      	mov	r3, r0
 800645c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800645e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006462:	4618      	mov	r0, r3
 8006464:	f7ff ff30 	bl	80062c8 <__NVIC_EnableIRQ>
}
 8006468:	bf00      	nop
 800646a:	3708      	adds	r7, #8
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b082      	sub	sp, #8
 8006474:	af00      	add	r7, sp, #0
 8006476:	4603      	mov	r3, r0
 8006478:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800647a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800647e:	4618      	mov	r0, r3
 8006480:	f7ff ff40 	bl	8006304 <__NVIC_DisableIRQ>
}
 8006484:	bf00      	nop
 8006486:	3708      	adds	r7, #8
 8006488:	46bd      	mov	sp, r7
 800648a:	bd80      	pop	{r7, pc}

0800648c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b086      	sub	sp, #24
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006494:	2300      	movs	r3, #0
 8006496:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006498:	f7ff faac 	bl	80059f4 <HAL_GetTick>
 800649c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d101      	bne.n	80064a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e099      	b.n	80065dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2202      	movs	r2, #2
 80064ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f022 0201 	bic.w	r2, r2, #1
 80064c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80064c8:	e00f      	b.n	80064ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80064ca:	f7ff fa93 	bl	80059f4 <HAL_GetTick>
 80064ce:	4602      	mov	r2, r0
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	2b05      	cmp	r3, #5
 80064d6:	d908      	bls.n	80064ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2220      	movs	r2, #32
 80064dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2203      	movs	r2, #3
 80064e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	e078      	b.n	80065dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 0301 	and.w	r3, r3, #1
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1e8      	bne.n	80064ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006500:	697a      	ldr	r2, [r7, #20]
 8006502:	4b38      	ldr	r3, [pc, #224]	; (80065e4 <HAL_DMA_Init+0x158>)
 8006504:	4013      	ands	r3, r2
 8006506:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	689b      	ldr	r3, [r3, #8]
 8006510:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006516:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	691b      	ldr	r3, [r3, #16]
 800651c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006522:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800652e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a1b      	ldr	r3, [r3, #32]
 8006534:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	4313      	orrs	r3, r2
 800653a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006540:	2b04      	cmp	r3, #4
 8006542:	d107      	bne.n	8006554 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654c:	4313      	orrs	r3, r2
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	4313      	orrs	r3, r2
 8006552:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	697a      	ldr	r2, [r7, #20]
 800655a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	695b      	ldr	r3, [r3, #20]
 8006562:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	f023 0307 	bic.w	r3, r3, #7
 800656a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	4313      	orrs	r3, r2
 8006574:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657a:	2b04      	cmp	r3, #4
 800657c:	d117      	bne.n	80065ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006582:	697a      	ldr	r2, [r7, #20]
 8006584:	4313      	orrs	r3, r2
 8006586:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800658c:	2b00      	cmp	r3, #0
 800658e:	d00e      	beq.n	80065ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 fb5f 	bl	8006c54 <DMA_CheckFifoParam>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d008      	beq.n	80065ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2240      	movs	r2, #64	; 0x40
 80065a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80065aa:	2301      	movs	r3, #1
 80065ac:	e016      	b.n	80065dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 fb16 	bl	8006be8 <DMA_CalcBaseAndBitshift>
 80065bc:	4603      	mov	r3, r0
 80065be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065c4:	223f      	movs	r2, #63	; 0x3f
 80065c6:	409a      	lsls	r2, r3
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2200      	movs	r2, #0
 80065d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3718      	adds	r7, #24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	f010803f 	.word	0xf010803f

080065e8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b084      	sub	sp, #16
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d101      	bne.n	80065fa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80065f6:	2301      	movs	r3, #1
 80065f8:	e050      	b.n	800669c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006600:	b2db      	uxtb	r3, r3
 8006602:	2b02      	cmp	r3, #2
 8006604:	d101      	bne.n	800660a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8006606:	2302      	movs	r3, #2
 8006608:	e048      	b.n	800669c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681a      	ldr	r2, [r3, #0]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f022 0201 	bic.w	r2, r2, #1
 8006618:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2200      	movs	r2, #0
 8006620:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	2200      	movs	r2, #0
 8006628:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	2200      	movs	r2, #0
 8006630:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2200      	movs	r2, #0
 8006638:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	2200      	movs	r2, #0
 8006640:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2221      	movs	r2, #33	; 0x21
 8006648:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 facc 	bl	8006be8 <DMA_CalcBaseAndBitshift>
 8006650:	4603      	mov	r3, r0
 8006652:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2200      	movs	r2, #0
 8006658:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2200      	movs	r2, #0
 800665e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2200      	movs	r2, #0
 8006664:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2200      	movs	r2, #0
 800666a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800667c:	223f      	movs	r2, #63	; 0x3f
 800667e:	409a      	lsls	r2, r3
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2200      	movs	r2, #0
 8006696:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b086      	sub	sp, #24
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	607a      	str	r2, [r7, #4]
 80066b0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066b2:	2300      	movs	r3, #0
 80066b4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ba:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d101      	bne.n	80066ca <HAL_DMA_Start_IT+0x26>
 80066c6:	2302      	movs	r3, #2
 80066c8:	e040      	b.n	800674c <HAL_DMA_Start_IT+0xa8>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2201      	movs	r2, #1
 80066ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d12f      	bne.n	800673e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2202      	movs	r2, #2
 80066e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	687a      	ldr	r2, [r7, #4]
 80066f0:	68b9      	ldr	r1, [r7, #8]
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f000 fa4a 	bl	8006b8c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066fc:	223f      	movs	r2, #63	; 0x3f
 80066fe:	409a      	lsls	r2, r3
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f042 0216 	orr.w	r2, r2, #22
 8006712:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006718:	2b00      	cmp	r3, #0
 800671a:	d007      	beq.n	800672c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	681a      	ldr	r2, [r3, #0]
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f042 0208 	orr.w	r2, r2, #8
 800672a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	681a      	ldr	r2, [r3, #0]
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f042 0201 	orr.w	r2, r2, #1
 800673a:	601a      	str	r2, [r3, #0]
 800673c:	e005      	b.n	800674a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006746:	2302      	movs	r3, #2
 8006748:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800674a:	7dfb      	ldrb	r3, [r7, #23]
}
 800674c:	4618      	mov	r0, r3
 800674e:	3718      	adds	r7, #24
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}

08006754 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006760:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006762:	f7ff f947 	bl	80059f4 <HAL_GetTick>
 8006766:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800676e:	b2db      	uxtb	r3, r3
 8006770:	2b02      	cmp	r3, #2
 8006772:	d008      	beq.n	8006786 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2280      	movs	r2, #128	; 0x80
 8006778:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e052      	b.n	800682c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	681a      	ldr	r2, [r3, #0]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f022 0216 	bic.w	r2, r2, #22
 8006794:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	695a      	ldr	r2, [r3, #20]
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067a4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d103      	bne.n	80067b6 <HAL_DMA_Abort+0x62>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d007      	beq.n	80067c6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f022 0208 	bic.w	r2, r2, #8
 80067c4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f022 0201 	bic.w	r2, r2, #1
 80067d4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80067d6:	e013      	b.n	8006800 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80067d8:	f7ff f90c 	bl	80059f4 <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	2b05      	cmp	r3, #5
 80067e4:	d90c      	bls.n	8006800 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2220      	movs	r2, #32
 80067ea:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2203      	movs	r2, #3
 80067f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80067fc:	2303      	movs	r3, #3
 80067fe:	e015      	b.n	800682c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0301 	and.w	r3, r3, #1
 800680a:	2b00      	cmp	r3, #0
 800680c:	d1e4      	bne.n	80067d8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006812:	223f      	movs	r2, #63	; 0x3f
 8006814:	409a      	lsls	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800682a:	2300      	movs	r3, #0
}
 800682c:	4618      	mov	r0, r3
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006834:	b480      	push	{r7}
 8006836:	b083      	sub	sp, #12
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b02      	cmp	r3, #2
 8006846:	d004      	beq.n	8006852 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2280      	movs	r2, #128	; 0x80
 800684c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e00c      	b.n	800686c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2205      	movs	r2, #5
 8006856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f022 0201 	bic.w	r2, r2, #1
 8006868:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	370c      	adds	r7, #12
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b086      	sub	sp, #24
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006880:	2300      	movs	r3, #0
 8006882:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006884:	4b8e      	ldr	r3, [pc, #568]	; (8006ac0 <HAL_DMA_IRQHandler+0x248>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a8e      	ldr	r2, [pc, #568]	; (8006ac4 <HAL_DMA_IRQHandler+0x24c>)
 800688a:	fba2 2303 	umull	r2, r3, r2, r3
 800688e:	0a9b      	lsrs	r3, r3, #10
 8006890:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006896:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068a2:	2208      	movs	r2, #8
 80068a4:	409a      	lsls	r2, r3
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	4013      	ands	r3, r2
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d01a      	beq.n	80068e4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f003 0304 	and.w	r3, r3, #4
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d013      	beq.n	80068e4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f022 0204 	bic.w	r2, r2, #4
 80068ca:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068d0:	2208      	movs	r2, #8
 80068d2:	409a      	lsls	r2, r3
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068dc:	f043 0201 	orr.w	r2, r3, #1
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068e8:	2201      	movs	r2, #1
 80068ea:	409a      	lsls	r2, r3
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	4013      	ands	r3, r2
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d012      	beq.n	800691a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	695b      	ldr	r3, [r3, #20]
 80068fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00b      	beq.n	800691a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006906:	2201      	movs	r2, #1
 8006908:	409a      	lsls	r2, r3
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006912:	f043 0202 	orr.w	r2, r3, #2
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800691e:	2204      	movs	r2, #4
 8006920:	409a      	lsls	r2, r3
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	4013      	ands	r3, r2
 8006926:	2b00      	cmp	r3, #0
 8006928:	d012      	beq.n	8006950 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f003 0302 	and.w	r3, r3, #2
 8006934:	2b00      	cmp	r3, #0
 8006936:	d00b      	beq.n	8006950 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800693c:	2204      	movs	r2, #4
 800693e:	409a      	lsls	r2, r3
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006948:	f043 0204 	orr.w	r2, r3, #4
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006954:	2210      	movs	r2, #16
 8006956:	409a      	lsls	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	4013      	ands	r3, r2
 800695c:	2b00      	cmp	r3, #0
 800695e:	d043      	beq.n	80069e8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f003 0308 	and.w	r3, r3, #8
 800696a:	2b00      	cmp	r3, #0
 800696c:	d03c      	beq.n	80069e8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006972:	2210      	movs	r2, #16
 8006974:	409a      	lsls	r2, r3
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006984:	2b00      	cmp	r3, #0
 8006986:	d018      	beq.n	80069ba <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d108      	bne.n	80069a8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800699a:	2b00      	cmp	r3, #0
 800699c:	d024      	beq.n	80069e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	4798      	blx	r3
 80069a6:	e01f      	b.n	80069e8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d01b      	beq.n	80069e8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	4798      	blx	r3
 80069b8:	e016      	b.n	80069e8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d107      	bne.n	80069d8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f022 0208 	bic.w	r2, r2, #8
 80069d6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d003      	beq.n	80069e8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069ec:	2220      	movs	r2, #32
 80069ee:	409a      	lsls	r2, r3
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	4013      	ands	r3, r2
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f000 808f 	beq.w	8006b18 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0310 	and.w	r3, r3, #16
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 8087 	beq.w	8006b18 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a0e:	2220      	movs	r2, #32
 8006a10:	409a      	lsls	r2, r3
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b05      	cmp	r3, #5
 8006a20:	d136      	bne.n	8006a90 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f022 0216 	bic.w	r2, r2, #22
 8006a30:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	695a      	ldr	r2, [r3, #20]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a40:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d103      	bne.n	8006a52 <HAL_DMA_IRQHandler+0x1da>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d007      	beq.n	8006a62 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f022 0208 	bic.w	r2, r2, #8
 8006a60:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a66:	223f      	movs	r2, #63	; 0x3f
 8006a68:	409a      	lsls	r2, r3
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d07e      	beq.n	8006b84 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	4798      	blx	r3
        }
        return;
 8006a8e:	e079      	b.n	8006b84 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d01d      	beq.n	8006ada <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d10d      	bne.n	8006ac8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d031      	beq.n	8006b18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	4798      	blx	r3
 8006abc:	e02c      	b.n	8006b18 <HAL_DMA_IRQHandler+0x2a0>
 8006abe:	bf00      	nop
 8006ac0:	200002dc 	.word	0x200002dc
 8006ac4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d023      	beq.n	8006b18 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	4798      	blx	r3
 8006ad8:	e01e      	b.n	8006b18 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d10f      	bne.n	8006b08 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f022 0210 	bic.w	r2, r2, #16
 8006af6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2200      	movs	r2, #0
 8006b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d003      	beq.n	8006b18 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d032      	beq.n	8006b86 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b24:	f003 0301 	and.w	r3, r3, #1
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d022      	beq.n	8006b72 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2205      	movs	r2, #5
 8006b30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681a      	ldr	r2, [r3, #0]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f022 0201 	bic.w	r2, r2, #1
 8006b42:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	3301      	adds	r3, #1
 8006b48:	60bb      	str	r3, [r7, #8]
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d307      	bcc.n	8006b60 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0301 	and.w	r3, r3, #1
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d1f2      	bne.n	8006b44 <HAL_DMA_IRQHandler+0x2cc>
 8006b5e:	e000      	b.n	8006b62 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006b60:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2201      	movs	r2, #1
 8006b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d005      	beq.n	8006b86 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	4798      	blx	r3
 8006b82:	e000      	b.n	8006b86 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006b84:	bf00      	nop
    }
  }
}
 8006b86:	3718      	adds	r7, #24
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	bd80      	pop	{r7, pc}

08006b8c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	60b9      	str	r1, [r7, #8]
 8006b96:	607a      	str	r2, [r7, #4]
 8006b98:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006ba8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	683a      	ldr	r2, [r7, #0]
 8006bb0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	2b40      	cmp	r3, #64	; 0x40
 8006bb8:	d108      	bne.n	8006bcc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	687a      	ldr	r2, [r7, #4]
 8006bc0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68ba      	ldr	r2, [r7, #8]
 8006bc8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006bca:	e007      	b.n	8006bdc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68ba      	ldr	r2, [r7, #8]
 8006bd2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	687a      	ldr	r2, [r7, #4]
 8006bda:	60da      	str	r2, [r3, #12]
}
 8006bdc:	bf00      	nop
 8006bde:	3714      	adds	r7, #20
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	b2db      	uxtb	r3, r3
 8006bf6:	3b10      	subs	r3, #16
 8006bf8:	4a14      	ldr	r2, [pc, #80]	; (8006c4c <DMA_CalcBaseAndBitshift+0x64>)
 8006bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8006bfe:	091b      	lsrs	r3, r3, #4
 8006c00:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006c02:	4a13      	ldr	r2, [pc, #76]	; (8006c50 <DMA_CalcBaseAndBitshift+0x68>)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	4413      	add	r3, r2
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2b03      	cmp	r3, #3
 8006c14:	d909      	bls.n	8006c2a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006c1e:	f023 0303 	bic.w	r3, r3, #3
 8006c22:	1d1a      	adds	r2, r3, #4
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	659a      	str	r2, [r3, #88]	; 0x58
 8006c28:	e007      	b.n	8006c3a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006c32:	f023 0303 	bic.w	r3, r3, #3
 8006c36:	687a      	ldr	r2, [r7, #4]
 8006c38:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3714      	adds	r7, #20
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr
 8006c4a:	bf00      	nop
 8006c4c:	aaaaaaab 	.word	0xaaaaaaab
 8006c50:	08021be0 	.word	0x08021be0

08006c54 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b085      	sub	sp, #20
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c64:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	699b      	ldr	r3, [r3, #24]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d11f      	bne.n	8006cae <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	2b03      	cmp	r3, #3
 8006c72:	d856      	bhi.n	8006d22 <DMA_CheckFifoParam+0xce>
 8006c74:	a201      	add	r2, pc, #4	; (adr r2, 8006c7c <DMA_CheckFifoParam+0x28>)
 8006c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7a:	bf00      	nop
 8006c7c:	08006c8d 	.word	0x08006c8d
 8006c80:	08006c9f 	.word	0x08006c9f
 8006c84:	08006c8d 	.word	0x08006c8d
 8006c88:	08006d23 	.word	0x08006d23
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c90:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d046      	beq.n	8006d26 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006c98:	2301      	movs	r3, #1
 8006c9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006c9c:	e043      	b.n	8006d26 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006ca6:	d140      	bne.n	8006d2a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cac:	e03d      	b.n	8006d2a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	699b      	ldr	r3, [r3, #24]
 8006cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cb6:	d121      	bne.n	8006cfc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	2b03      	cmp	r3, #3
 8006cbc:	d837      	bhi.n	8006d2e <DMA_CheckFifoParam+0xda>
 8006cbe:	a201      	add	r2, pc, #4	; (adr r2, 8006cc4 <DMA_CheckFifoParam+0x70>)
 8006cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc4:	08006cd5 	.word	0x08006cd5
 8006cc8:	08006cdb 	.word	0x08006cdb
 8006ccc:	08006cd5 	.word	0x08006cd5
 8006cd0:	08006ced 	.word	0x08006ced
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8006cd8:	e030      	b.n	8006d3c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d025      	beq.n	8006d32 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006cea:	e022      	b.n	8006d32 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cf0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006cf4:	d11f      	bne.n	8006d36 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006cfa:	e01c      	b.n	8006d36 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	d903      	bls.n	8006d0a <DMA_CheckFifoParam+0xb6>
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	2b03      	cmp	r3, #3
 8006d06:	d003      	beq.n	8006d10 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006d08:	e018      	b.n	8006d3c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	73fb      	strb	r3, [r7, #15]
      break;
 8006d0e:	e015      	b.n	8006d3c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d14:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d00e      	beq.n	8006d3a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d20:	e00b      	b.n	8006d3a <DMA_CheckFifoParam+0xe6>
      break;
 8006d22:	bf00      	nop
 8006d24:	e00a      	b.n	8006d3c <DMA_CheckFifoParam+0xe8>
      break;
 8006d26:	bf00      	nop
 8006d28:	e008      	b.n	8006d3c <DMA_CheckFifoParam+0xe8>
      break;
 8006d2a:	bf00      	nop
 8006d2c:	e006      	b.n	8006d3c <DMA_CheckFifoParam+0xe8>
      break;
 8006d2e:	bf00      	nop
 8006d30:	e004      	b.n	8006d3c <DMA_CheckFifoParam+0xe8>
      break;
 8006d32:	bf00      	nop
 8006d34:	e002      	b.n	8006d3c <DMA_CheckFifoParam+0xe8>
      break;   
 8006d36:	bf00      	nop
 8006d38:	e000      	b.n	8006d3c <DMA_CheckFifoParam+0xe8>
      break;
 8006d3a:	bf00      	nop
    }
  } 
  
  return status; 
 8006d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3714      	adds	r7, #20
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop

08006d4c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b088      	sub	sp, #32
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8006d54:	2300      	movs	r3, #0
 8006d56:	61fb      	str	r3, [r7, #28]
 8006d58:	2300      	movs	r3, #0
 8006d5a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8006d5c:	4ba1      	ldr	r3, [pc, #644]	; (8006fe4 <HAL_ETH_Init+0x298>)
 8006d5e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8006d60:	2300      	movs	r3, #0
 8006d62:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8006d64:	2300      	movs	r3, #0
 8006d66:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d101      	bne.n	8006d72 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e182      	b.n	8007078 <HAL_ETH_Init+0x32c>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d106      	bne.n	8006d8c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f005 f82e 	bl	800bde8 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	60bb      	str	r3, [r7, #8]
 8006d90:	4b95      	ldr	r3, [pc, #596]	; (8006fe8 <HAL_ETH_Init+0x29c>)
 8006d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d94:	4a94      	ldr	r2, [pc, #592]	; (8006fe8 <HAL_ETH_Init+0x29c>)
 8006d96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d9a:	6453      	str	r3, [r2, #68]	; 0x44
 8006d9c:	4b92      	ldr	r3, [pc, #584]	; (8006fe8 <HAL_ETH_Init+0x29c>)
 8006d9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006da0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006da4:	60bb      	str	r3, [r7, #8]
 8006da6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8006da8:	4b90      	ldr	r3, [pc, #576]	; (8006fec <HAL_ETH_Init+0x2a0>)
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	4a8f      	ldr	r2, [pc, #572]	; (8006fec <HAL_ETH_Init+0x2a0>)
 8006dae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006db2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8006db4:	4b8d      	ldr	r3, [pc, #564]	; (8006fec <HAL_ETH_Init+0x2a0>)
 8006db6:	685a      	ldr	r2, [r3, #4]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a1b      	ldr	r3, [r3, #32]
 8006dbc:	498b      	ldr	r1, [pc, #556]	; (8006fec <HAL_ETH_Init+0x2a0>)
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	6812      	ldr	r2, [r2, #0]
 8006dd0:	f043 0301 	orr.w	r3, r3, #1
 8006dd4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006dd8:	6013      	str	r3, [r2, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8006dda:	f7fe fe0b 	bl	80059f4 <HAL_GetTick>
 8006dde:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8006de0:	e011      	b.n	8006e06 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8006de2:	f7fe fe07 	bl	80059f4 <HAL_GetTick>
 8006de6:	4602      	mov	r2, r0
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	1ad3      	subs	r3, r2, r3
 8006dec:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006df0:	d909      	bls.n	8006e06 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2203      	movs	r2, #3
 8006df6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e138      	b.n	8007078 <HAL_ETH_Init+0x32c>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1e4      	bne.n	8006de2 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	691b      	ldr	r3, [r3, #16]
 8006e1e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8006e20:	69fb      	ldr	r3, [r7, #28]
 8006e22:	f023 031c 	bic.w	r3, r3, #28
 8006e26:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8006e28:	f002 f874 	bl	8008f14 <HAL_RCC_GetHCLKFreq>
 8006e2c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	4a6f      	ldr	r2, [pc, #444]	; (8006ff0 <HAL_ETH_Init+0x2a4>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d908      	bls.n	8006e48 <HAL_ETH_Init+0xfc>
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	4a6e      	ldr	r2, [pc, #440]	; (8006ff4 <HAL_ETH_Init+0x2a8>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d804      	bhi.n	8006e48 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	f043 0308 	orr.w	r3, r3, #8
 8006e44:	61fb      	str	r3, [r7, #28]
 8006e46:	e027      	b.n	8006e98 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8006e48:	69bb      	ldr	r3, [r7, #24]
 8006e4a:	4a6a      	ldr	r2, [pc, #424]	; (8006ff4 <HAL_ETH_Init+0x2a8>)
 8006e4c:	4293      	cmp	r3, r2
 8006e4e:	d908      	bls.n	8006e62 <HAL_ETH_Init+0x116>
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	4a64      	ldr	r2, [pc, #400]	; (8006fe4 <HAL_ETH_Init+0x298>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d204      	bcs.n	8006e62 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8006e58:	69fb      	ldr	r3, [r7, #28]
 8006e5a:	f043 030c 	orr.w	r3, r3, #12
 8006e5e:	61fb      	str	r3, [r7, #28]
 8006e60:	e01a      	b.n	8006e98 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	4a5f      	ldr	r2, [pc, #380]	; (8006fe4 <HAL_ETH_Init+0x298>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d303      	bcc.n	8006e72 <HAL_ETH_Init+0x126>
 8006e6a:	69bb      	ldr	r3, [r7, #24]
 8006e6c:	4a62      	ldr	r2, [pc, #392]	; (8006ff8 <HAL_ETH_Init+0x2ac>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d911      	bls.n	8006e96 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	4a60      	ldr	r2, [pc, #384]	; (8006ff8 <HAL_ETH_Init+0x2ac>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d908      	bls.n	8006e8c <HAL_ETH_Init+0x140>
 8006e7a:	69bb      	ldr	r3, [r7, #24]
 8006e7c:	4a5f      	ldr	r2, [pc, #380]	; (8006ffc <HAL_ETH_Init+0x2b0>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d804      	bhi.n	8006e8c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	f043 0304 	orr.w	r3, r3, #4
 8006e88:	61fb      	str	r3, [r7, #28]
 8006e8a:	e005      	b.n	8006e98 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8006e8c:	69fb      	ldr	r3, [r7, #28]
 8006e8e:	f043 0310 	orr.w	r3, r3, #16
 8006e92:	61fb      	str	r3, [r7, #28]
 8006e94:	e000      	b.n	8006e98 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8006e96:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	69fa      	ldr	r2, [r7, #28]
 8006e9e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8006ea0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006ea4:	2100      	movs	r1, #0
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 fc10 	bl	80076cc <HAL_ETH_WritePHYRegister>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00b      	beq.n	8006eca <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8006eb6:	6939      	ldr	r1, [r7, #16]
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 fdc5 	bl	8007a48 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e0d6      	b.n	8007078 <HAL_ETH_Init+0x32c>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8006eca:	20ff      	movs	r0, #255	; 0xff
 8006ecc:	f7fe fd9e 	bl	8005a0c <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	f000 80a4 	beq.w	8007022 <HAL_ETH_Init+0x2d6>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006eda:	f7fe fd8b 	bl	80059f4 <HAL_GetTick>
 8006ede:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8006ee0:	f107 030c 	add.w	r3, r7, #12
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	2101      	movs	r1, #1
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 fb87 	bl	80075fc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8006eee:	f7fe fd81 	bl	80059f4 <HAL_GetTick>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	1ad3      	subs	r3, r2, r3
 8006ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d90f      	bls.n	8006f20 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8006f00:	2301      	movs	r3, #1
 8006f02:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8006f04:	6939      	ldr	r1, [r7, #16]
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 fd9e 	bl	8007a48 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8006f1c:	2303      	movs	r3, #3
 8006f1e:	e0ab      	b.n	8007078 <HAL_ETH_Init+0x32c>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f003 0304 	and.w	r3, r3, #4
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d0da      	beq.n	8006ee0 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8006f2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006f2e:	2100      	movs	r1, #0
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 fbcb 	bl	80076cc <HAL_ETH_WritePHYRegister>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d00b      	beq.n	8006f54 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8006f3c:	2301      	movs	r3, #1
 8006f3e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8006f40:	6939      	ldr	r1, [r7, #16]
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 fd80 	bl	8007a48 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8006f50:	2301      	movs	r3, #1
 8006f52:	e091      	b.n	8007078 <HAL_ETH_Init+0x32c>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8006f54:	f7fe fd4e 	bl	80059f4 <HAL_GetTick>
 8006f58:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8006f5a:	f107 030c 	add.w	r3, r7, #12
 8006f5e:	461a      	mov	r2, r3
 8006f60:	2101      	movs	r1, #1
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 fb4a 	bl	80075fc <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8006f68:	f7fe fd44 	bl	80059f4 <HAL_GetTick>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d90f      	bls.n	8006f9a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8006f7e:	6939      	ldr	r1, [r7, #16]
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 fd61 	bl	8007a48 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8006f96:	2303      	movs	r3, #3
 8006f98:	e06e      	b.n	8007078 <HAL_ETH_Init+0x32c>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f003 0320 	and.w	r3, r3, #32
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d0da      	beq.n	8006f5a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8006fa4:	f107 030c 	add.w	r3, r7, #12
 8006fa8:	461a      	mov	r2, r3
 8006faa:	2110      	movs	r1, #16
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 fb25 	bl	80075fc <HAL_ETH_ReadPHYRegister>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d00b      	beq.n	8006fd0 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8006fbc:	6939      	ldr	r1, [r7, #16]
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fd42 	bl	8007a48 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e053      	b.n	8007078 <HAL_ETH_Init+0x32c>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f003 0304 	and.w	r3, r3, #4
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d012      	beq.n	8007000 <HAL_ETH_Init+0x2b4>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006fe0:	60da      	str	r2, [r3, #12]
 8006fe2:	e010      	b.n	8007006 <HAL_ETH_Init+0x2ba>
 8006fe4:	03938700 	.word	0x03938700
 8006fe8:	40023800 	.word	0x40023800
 8006fec:	40013800 	.word	0x40013800
 8006ff0:	01312cff 	.word	0x01312cff
 8006ff4:	02160ebf 	.word	0x02160ebf
 8006ff8:	05f5e0ff 	.word	0x05f5e0ff
 8006ffc:	08f0d17f 	.word	0x08f0d17f
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f003 0302 	and.w	r3, r3, #2
 800700c:	2b00      	cmp	r3, #0
 800700e:	d003      	beq.n	8007018 <HAL_ETH_Init+0x2cc>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	609a      	str	r2, [r3, #8]
 8007016:	e026      	b.n	8007066 <HAL_ETH_Init+0x31a>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800701e:	609a      	str	r2, [r3, #8]
 8007020:	e021      	b.n	8007066 <HAL_ETH_Init+0x31a>
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	68db      	ldr	r3, [r3, #12]
 8007026:	08db      	lsrs	r3, r3, #3
 8007028:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	085b      	lsrs	r3, r3, #1
 8007030:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8007032:	4313      	orrs	r3, r2
 8007034:	b29b      	uxth	r3, r3
 8007036:	461a      	mov	r2, r3
 8007038:	2100      	movs	r1, #0
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fb46 	bl	80076cc <HAL_ETH_WritePHYRegister>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d00b      	beq.n	800705e <HAL_ETH_Init+0x312>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8007046:	2301      	movs	r3, #1
 8007048:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800704a:	6939      	ldr	r1, [r7, #16]
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 fcfb 	bl	8007a48 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2201      	movs	r2, #1
 8007056:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800705a:	2301      	movs	r3, #1
 800705c:	e00c      	b.n	8007078 <HAL_ETH_Init+0x32c>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800705e:	f640 70ff 	movw	r0, #4095	; 0xfff
 8007062:	f7fe fcd3 	bl	8005a0c <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8007066:	6939      	ldr	r1, [r7, #16]
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 fced 	bl	8007a48 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3720      	adds	r7, #32
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}

08007080 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8007080:	b480      	push	{r7}
 8007082:	b087      	sub	sp, #28
 8007084:	af00      	add	r7, sp, #0
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
 800708c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800708e:	2300      	movs	r3, #0
 8007090:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007098:	2b01      	cmp	r3, #1
 800709a:	d101      	bne.n	80070a0 <HAL_ETH_DMATxDescListInit+0x20>
 800709c:	2302      	movs	r3, #2
 800709e:	e051      	b.n	8007144 <HAL_ETH_DMATxDescListInit+0xc4>
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2201      	movs	r2, #1
 80070a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2202      	movs	r2, #2
 80070ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80070b6:	2300      	movs	r3, #0
 80070b8:	617b      	str	r3, [r7, #20]
 80070ba:	e030      	b.n	800711e <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	015b      	lsls	r3, r3, #5
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	4413      	add	r3, r2
 80070c4:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80070cc:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80070ce:	697b      	ldr	r3, [r7, #20]
 80070d0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80070d4:	fb02 f303 	mul.w	r3, r2, r3
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	4413      	add	r3, r2
 80070dc:	461a      	mov	r2, r3
 80070de:	693b      	ldr	r3, [r7, #16]
 80070e0:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	69db      	ldr	r3, [r3, #28]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d105      	bne.n	80070f6 <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	3b01      	subs	r3, #1
 80070fa:	697a      	ldr	r2, [r7, #20]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d208      	bcs.n	8007112 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	3301      	adds	r3, #1
 8007104:	015b      	lsls	r3, r3, #5
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	4413      	add	r3, r2
 800710a:	461a      	mov	r2, r3
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	60da      	str	r2, [r3, #12]
 8007110:	e002      	b.n	8007118 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8007118:	697b      	ldr	r3, [r7, #20]
 800711a:	3301      	adds	r3, #1
 800711c:	617b      	str	r3, [r7, #20]
 800711e:	697a      	ldr	r2, [r7, #20]
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	429a      	cmp	r2, r3
 8007124:	d3ca      	bcc.n	80070bc <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681a      	ldr	r2, [r3, #0]
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007130:	6113      	str	r3, [r2, #16]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	371c      	adds	r7, #28
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8007150:	b480      	push	{r7}
 8007152:	b087      	sub	sp, #28
 8007154:	af00      	add	r7, sp, #0
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	607a      	str	r2, [r7, #4]
 800715c:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 800715e:	2300      	movs	r3, #0
 8007160:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007168:	2b01      	cmp	r3, #1
 800716a:	d101      	bne.n	8007170 <HAL_ETH_DMARxDescListInit+0x20>
 800716c:	2302      	movs	r3, #2
 800716e:	e055      	b.n	800721c <HAL_ETH_DMARxDescListInit+0xcc>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2202      	movs	r2, #2
 800717c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	68ba      	ldr	r2, [r7, #8]
 8007184:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8007186:	2300      	movs	r3, #0
 8007188:	617b      	str	r3, [r7, #20]
 800718a:	e034      	b.n	80071f6 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	015b      	lsls	r3, r3, #5
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	4413      	add	r3, r2
 8007194:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800719c:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80071a4:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80071ac:	fb02 f303 	mul.w	r3, r2, r3
 80071b0:	687a      	ldr	r2, [r7, #4]
 80071b2:	4413      	add	r3, r2
 80071b4:	461a      	mov	r2, r3
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d105      	bne.n	80071ce <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	685b      	ldr	r3, [r3, #4]
 80071c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	3b01      	subs	r3, #1
 80071d2:	697a      	ldr	r2, [r7, #20]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d208      	bcs.n	80071ea <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80071d8:	697b      	ldr	r3, [r7, #20]
 80071da:	3301      	adds	r3, #1
 80071dc:	015b      	lsls	r3, r3, #5
 80071de:	68ba      	ldr	r2, [r7, #8]
 80071e0:	4413      	add	r3, r2
 80071e2:	461a      	mov	r2, r3
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	60da      	str	r2, [r3, #12]
 80071e8:	e002      	b.n	80071f0 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80071f0:	697b      	ldr	r3, [r7, #20]
 80071f2:	3301      	adds	r3, #1
 80071f4:	617b      	str	r3, [r7, #20]
 80071f6:	697a      	ldr	r2, [r7, #20]
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d3c6      	bcc.n	800718c <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007208:	60d3      	str	r3, [r2, #12]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800721a:	2300      	movs	r3, #0
}
 800721c:	4618      	mov	r0, r3
 800721e:	371c      	adds	r7, #28
 8007220:	46bd      	mov	sp, r7
 8007222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007226:	4770      	bx	lr

08007228 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8007228:	b480      	push	{r7}
 800722a:	b087      	sub	sp, #28
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8007232:	2300      	movs	r3, #0
 8007234:	617b      	str	r3, [r7, #20]
 8007236:	2300      	movs	r3, #0
 8007238:	60fb      	str	r3, [r7, #12]
 800723a:	2300      	movs	r3, #0
 800723c:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007244:	2b01      	cmp	r3, #1
 8007246:	d101      	bne.n	800724c <HAL_ETH_TransmitFrame+0x24>
 8007248:	2302      	movs	r3, #2
 800724a:	e0cc      	b.n	80073e6 <HAL_ETH_TransmitFrame+0x1be>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2201      	movs	r2, #1
 8007250:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2202      	movs	r2, #2
 8007258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d109      	bne.n	8007276 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2201      	movs	r2, #1
 8007266:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2200      	movs	r2, #0
 800726e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8007272:	2301      	movs	r3, #1
 8007274:	e0b7      	b.n	80073e6 <HAL_ETH_TransmitFrame+0x1be>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	da09      	bge.n	8007294 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2212      	movs	r2, #18
 8007284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2200      	movs	r2, #0
 800728c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e0a8      	b.n	80073e6 <HAL_ETH_TransmitFrame+0x1be>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800729a:	4293      	cmp	r3, r2
 800729c:	d915      	bls.n	80072ca <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	4a54      	ldr	r2, [pc, #336]	; (80073f4 <HAL_ETH_TransmitFrame+0x1cc>)
 80072a2:	fba2 2303 	umull	r2, r3, r2, r3
 80072a6:	0a9b      	lsrs	r3, r3, #10
 80072a8:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80072aa:	683a      	ldr	r2, [r7, #0]
 80072ac:	4b51      	ldr	r3, [pc, #324]	; (80073f4 <HAL_ETH_TransmitFrame+0x1cc>)
 80072ae:	fba3 1302 	umull	r1, r3, r3, r2
 80072b2:	0a9b      	lsrs	r3, r3, #10
 80072b4:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80072b8:	fb01 f303 	mul.w	r3, r1, r3
 80072bc:	1ad3      	subs	r3, r2, r3
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d005      	beq.n	80072ce <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	3301      	adds	r3, #1
 80072c6:	617b      	str	r3, [r7, #20]
 80072c8:	e001      	b.n	80072ce <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80072ca:	2301      	movs	r3, #1
 80072cc:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d11c      	bne.n	800730e <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d8:	681a      	ldr	r2, [r3, #0]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072de:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80072e2:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072e8:	683a      	ldr	r2, [r7, #0]
 80072ea:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80072ee:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072fa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80072fe:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	461a      	mov	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	62da      	str	r2, [r3, #44]	; 0x2c
 800730c:	e04b      	b.n	80073a6 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 800730e:	2300      	movs	r3, #0
 8007310:	613b      	str	r3, [r7, #16]
 8007312:	e044      	b.n	800739e <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007318:	681a      	ldr	r2, [r3, #0]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800731e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007322:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d107      	bne.n	800733a <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007334:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007338:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800733e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007342:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	3b01      	subs	r3, #1
 8007348:	693a      	ldr	r2, [r7, #16]
 800734a:	429a      	cmp	r2, r3
 800734c:	d116      	bne.n	800737c <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007358:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800735c:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	4a25      	ldr	r2, [pc, #148]	; (80073f8 <HAL_ETH_TransmitFrame+0x1d0>)
 8007362:	fb03 f202 	mul.w	r2, r3, r2
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	4413      	add	r3, r2
 800736a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800736e:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	f3c2 020c 	ubfx	r2, r2, #0, #13
 800737a:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007386:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800738a:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	461a      	mov	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8007398:	693b      	ldr	r3, [r7, #16]
 800739a:	3301      	adds	r3, #1
 800739c:	613b      	str	r3, [r7, #16]
 800739e:	693a      	ldr	r2, [r7, #16]
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d3b6      	bcc.n	8007314 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073ae:	695b      	ldr	r3, [r3, #20]
 80073b0:	f003 0304 	and.w	r3, r3, #4
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00d      	beq.n	80073d4 <HAL_ETH_TransmitFrame+0x1ac>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073c0:	461a      	mov	r2, r3
 80073c2:	2304      	movs	r3, #4
 80073c4:	6153      	str	r3, [r2, #20]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073ce:	461a      	mov	r2, r3
 80073d0:	2300      	movs	r3, #0
 80073d2:	6053      	str	r3, [r2, #4]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80073e4:	2300      	movs	r3, #0
}
 80073e6:	4618      	mov	r0, r3
 80073e8:	371c      	adds	r7, #28
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr
 80073f2:	bf00      	nop
 80073f4:	ac02b00b 	.word	0xac02b00b
 80073f8:	fffffa0c 	.word	0xfffffa0c

080073fc <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80073fc:	b480      	push	{r7}
 80073fe:	b085      	sub	sp, #20
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8007404:	2300      	movs	r3, #0
 8007406:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800740e:	2b01      	cmp	r3, #1
 8007410:	d101      	bne.n	8007416 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8007412:	2302      	movs	r3, #2
 8007414:	e074      	b.n	8007500 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2201      	movs	r2, #1
 800741a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2202      	movs	r2, #2
 8007422:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8007426:	e05a      	b.n	80074de <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	3301      	adds	r3, #1
 800742c:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007438:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800743c:	d10d      	bne.n	800745a <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2201      	movs	r2, #1
 800744a:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007450:	68db      	ldr	r3, [r3, #12]
 8007452:	461a      	mov	r2, r3
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	629a      	str	r2, [r3, #40]	; 0x28
 8007458:	e041      	b.n	80074de <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007464:	2b00      	cmp	r3, #0
 8007466:	d10b      	bne.n	8007480 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746c:	1c5a      	adds	r2, r3, #1
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	461a      	mov	r2, r3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	629a      	str	r2, [r3, #40]	; 0x28
 800747e:	e02e      	b.n	80074de <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748c:	1c5a      	adds	r2, r3, #1
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007496:	2b01      	cmp	r3, #1
 8007498:	d103      	bne.n	80074a2 <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	0c1b      	lsrs	r3, r3, #16
 80074aa:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80074ae:	1f1a      	subs	r2, r3, #4
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074b8:	689a      	ldr	r2, [r3, #8]
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	461a      	mov	r2, r3
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2200      	movs	r2, #0
 80074d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80074da:	2300      	movs	r3, #0
 80074dc:	e010      	b.n	8007500 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	db02      	blt.n	80074ee <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2b03      	cmp	r3, #3
 80074ec:	d99c      	bls.n	8007428 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2201      	movs	r2, #1
 80074f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80074fe:	2301      	movs	r3, #1
}
 8007500:	4618      	mov	r0, r3
 8007502:	3714      	adds	r7, #20
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800751c:	695b      	ldr	r3, [r3, #20]
 800751e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007522:	2b40      	cmp	r3, #64	; 0x40
 8007524:	d112      	bne.n	800754c <HAL_ETH_IRQHandler+0x40>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f004 fd0c 	bl	800bf44 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007534:	461a      	mov	r2, r3
 8007536:	2340      	movs	r3, #64	; 0x40
 8007538:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	2201      	movs	r2, #1
 800753e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2200      	movs	r2, #0
 8007546:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800754a:	e01a      	b.n	8007582 <HAL_ETH_IRQHandler+0x76>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	f003 0301 	and.w	r3, r3, #1
 800755a:	2b01      	cmp	r3, #1
 800755c:	d111      	bne.n	8007582 <HAL_ETH_IRQHandler+0x76>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f000 f838 	bl	80075d4 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800756c:	461a      	mov	r2, r3
 800756e:	2301      	movs	r3, #1
 8007570:	6153      	str	r3, [r2, #20]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2201      	movs	r2, #1
 8007576:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	2200      	movs	r2, #0
 800757e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800758a:	461a      	mov	r2, r3
 800758c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007590:	6153      	str	r3, [r2, #20]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800759a:	695b      	ldr	r3, [r3, #20]
 800759c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80075a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075a4:	d112      	bne.n	80075cc <HAL_ETH_IRQHandler+0xc0>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f81e 	bl	80075e8 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80075b4:	461a      	mov	r2, r3
 80075b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075ba:	6153      	str	r3, [r2, #20]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2201      	movs	r2, #1
 80075c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80075cc:	bf00      	nop
 80075ce:	3708      	adds	r7, #8
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80075f0:	bf00      	nop
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80075fc:	b580      	push	{r7, lr}
 80075fe:	b086      	sub	sp, #24
 8007600:	af00      	add	r7, sp, #0
 8007602:	60f8      	str	r0, [r7, #12]
 8007604:	460b      	mov	r3, r1
 8007606:	607a      	str	r2, [r7, #4]
 8007608:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800760a:	2300      	movs	r3, #0
 800760c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800760e:	2300      	movs	r3, #0
 8007610:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007618:	b2db      	uxtb	r3, r3
 800761a:	2b82      	cmp	r3, #130	; 0x82
 800761c:	d101      	bne.n	8007622 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800761e:	2302      	movs	r3, #2
 8007620:	e050      	b.n	80076c4 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	2282      	movs	r2, #130	; 0x82
 8007626:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	f003 031c 	and.w	r3, r3, #28
 8007638:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	8a1b      	ldrh	r3, [r3, #16]
 800763e:	02db      	lsls	r3, r3, #11
 8007640:	b29b      	uxth	r3, r3
 8007642:	697a      	ldr	r2, [r7, #20]
 8007644:	4313      	orrs	r3, r2
 8007646:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8007648:	897b      	ldrh	r3, [r7, #10]
 800764a:	019b      	lsls	r3, r3, #6
 800764c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8007650:	697a      	ldr	r2, [r7, #20]
 8007652:	4313      	orrs	r3, r2
 8007654:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	f023 0302 	bic.w	r3, r3, #2
 800765c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	f043 0301 	orr.w	r3, r3, #1
 8007664:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	697a      	ldr	r2, [r7, #20]
 800766c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800766e:	f7fe f9c1 	bl	80059f4 <HAL_GetTick>
 8007672:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8007674:	e015      	b.n	80076a2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8007676:	f7fe f9bd 	bl	80059f4 <HAL_GetTick>
 800767a:	4602      	mov	r2, r0
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007684:	d309      	bcc.n	800769a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	2201      	movs	r2, #1
 800768a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2200      	movs	r2, #0
 8007692:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8007696:	2303      	movs	r3, #3
 8007698:	e014      	b.n	80076c4 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	f003 0301 	and.w	r3, r3, #1
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1e4      	bne.n	8007676 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	695b      	ldr	r3, [r3, #20]
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	461a      	mov	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2201      	movs	r2, #1
 80076be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80076c2:	2300      	movs	r3, #0
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3718      	adds	r7, #24
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b086      	sub	sp, #24
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	460b      	mov	r3, r1
 80076d6:	607a      	str	r2, [r7, #4]
 80076d8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80076da:	2300      	movs	r3, #0
 80076dc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80076de:	2300      	movs	r3, #0
 80076e0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b42      	cmp	r3, #66	; 0x42
 80076ec:	d101      	bne.n	80076f2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80076ee:	2302      	movs	r3, #2
 80076f0:	e04e      	b.n	8007790 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2242      	movs	r2, #66	; 0x42
 80076f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	f003 031c 	and.w	r3, r3, #28
 8007708:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	8a1b      	ldrh	r3, [r3, #16]
 800770e:	02db      	lsls	r3, r3, #11
 8007710:	b29b      	uxth	r3, r3
 8007712:	697a      	ldr	r2, [r7, #20]
 8007714:	4313      	orrs	r3, r2
 8007716:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8007718:	897b      	ldrh	r3, [r7, #10]
 800771a:	019b      	lsls	r3, r3, #6
 800771c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8007720:	697a      	ldr	r2, [r7, #20]
 8007722:	4313      	orrs	r3, r2
 8007724:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8007726:	697b      	ldr	r3, [r7, #20]
 8007728:	f043 0302 	orr.w	r3, r3, #2
 800772c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800772e:	697b      	ldr	r3, [r7, #20]
 8007730:	f043 0301 	orr.w	r3, r3, #1
 8007734:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	b29a      	uxth	r2, r3
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	697a      	ldr	r2, [r7, #20]
 8007746:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8007748:	f7fe f954 	bl	80059f4 <HAL_GetTick>
 800774c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800774e:	e015      	b.n	800777c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8007750:	f7fe f950 	bl	80059f4 <HAL_GetTick>
 8007754:	4602      	mov	r2, r0
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	1ad3      	subs	r3, r2, r3
 800775a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800775e:	d309      	bcc.n	8007774 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2201      	movs	r2, #1
 8007764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8007770:	2303      	movs	r3, #3
 8007772:	e00d      	b.n	8007790 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1e4      	bne.n	8007750 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2201      	movs	r2, #1
 800778a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3718      	adds	r7, #24
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077a6:	2b01      	cmp	r3, #1
 80077a8:	d101      	bne.n	80077ae <HAL_ETH_Start+0x16>
 80077aa:	2302      	movs	r3, #2
 80077ac:	e01f      	b.n	80077ee <HAL_ETH_Start+0x56>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2201      	movs	r2, #1
 80077b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2202      	movs	r2, #2
 80077ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 fb40 	bl	8007e44 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 fb77 	bl	8007eb8 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80077ca:	6878      	ldr	r0, [r7, #4]
 80077cc:	f000 fc06 	bl	8007fdc <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 fbab 	bl	8007f2c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80077d6:	6878      	ldr	r0, [r7, #4]
 80077d8:	f000 fbd4 	bl	8007f84 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3708      	adds	r7, #8
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}

080077f6 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80077f6:	b580      	push	{r7, lr}
 80077f8:	b082      	sub	sp, #8
 80077fa:	af00      	add	r7, sp, #0
 80077fc:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007804:	2b01      	cmp	r3, #1
 8007806:	d101      	bne.n	800780c <HAL_ETH_Stop+0x16>
 8007808:	2302      	movs	r3, #2
 800780a:	e01f      	b.n	800784c <HAL_ETH_Stop+0x56>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2202      	movs	r2, #2
 8007818:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fb9b 	bl	8007f58 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8007822:	6878      	ldr	r0, [r7, #4]
 8007824:	f000 fbc4 	bl	8007fb0 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 fb62 	bl	8007ef2 <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 fbd4 	bl	8007fdc <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fb22 	bl	8007e7e <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2201      	movs	r2, #1
 800783e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2200      	movs	r2, #0
 8007846:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800784a:	2300      	movs	r3, #0
}
 800784c:	4618      	mov	r0, r3
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
 800785c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800785e:	2300      	movs	r3, #0
 8007860:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007868:	2b01      	cmp	r3, #1
 800786a:	d101      	bne.n	8007870 <HAL_ETH_ConfigMAC+0x1c>
 800786c:	2302      	movs	r3, #2
 800786e:	e0e4      	b.n	8007a3a <HAL_ETH_ConfigMAC+0x1e6>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2201      	movs	r2, #1
 8007874:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2202      	movs	r2, #2
 800787c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	2b00      	cmp	r3, #0
 8007884:	f000 80b1 	beq.w	80079ea <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8007890:	68fa      	ldr	r2, [r7, #12]
 8007892:	4b6c      	ldr	r3, [pc, #432]	; (8007a44 <HAL_ETH_ConfigMAC+0x1f0>)
 8007894:	4013      	ands	r3, r2
 8007896:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80078a0:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80078a6:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80078ac:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 80078b2:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 80078b8:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 80078be:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 80078c4:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 80078ca:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80078d0:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80078d6:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80078dc:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80078e2:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80078e4:	68fa      	ldr	r2, [r7, #12]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80078fa:	2001      	movs	r0, #1
 80078fc:	f7fe f886 	bl	8005a0c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800790c:	683b      	ldr	r3, [r7, #0]
 800790e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8007910:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8007916:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 800791c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8007922:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8007928:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800792e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800793a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800793c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8007946:	2001      	movs	r0, #1
 8007948:	f7fe f860 	bl	8005a0c <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	683a      	ldr	r2, [r7, #0]
 800795a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800795c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	683a      	ldr	r2, [r7, #0]
 8007964:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007966:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	699b      	ldr	r3, [r3, #24]
 800796e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8007970:	68fa      	ldr	r2, [r7, #12]
 8007972:	f64f 7341 	movw	r3, #65345	; 0xff41
 8007976:	4013      	ands	r3, r2
 8007978:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800797a:	683b      	ldr	r3, [r7, #0]
 800797c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800797e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8007984:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800798a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 800798c:	683b      	ldr	r3, [r7, #0]
 800798e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8007990:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8007996:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800799c:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800799e:	68fa      	ldr	r2, [r7, #12]
 80079a0:	4313      	orrs	r3, r2
 80079a2:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80079b4:	2001      	movs	r0, #1
 80079b6:	f7fe f829 	bl	8005a0c <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	68fa      	ldr	r2, [r7, #12]
 80079c0:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 80079c6:	683b      	ldr	r3, [r7, #0]
 80079c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	430a      	orrs	r2, r1
 80079d0:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	69db      	ldr	r3, [r3, #28]
 80079d8:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80079da:	2001      	movs	r0, #1
 80079dc:	f7fe f816 	bl	8005a0c <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	68fa      	ldr	r2, [r7, #12]
 80079e6:	61da      	str	r2, [r3, #28]
 80079e8:	e01e      	b.n	8007a28 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80079f8:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	689a      	ldr	r2, [r3, #8]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	68db      	ldr	r3, [r3, #12]
 8007a02:	4313      	orrs	r3, r2
 8007a04:	68fa      	ldr	r2, [r7, #12]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68fa      	ldr	r2, [r7, #12]
 8007a10:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8007a1a:	2001      	movs	r0, #1
 8007a1c:	f7fd fff6 	bl	8005a0c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3710      	adds	r7, #16
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}
 8007a42:	bf00      	nop
 8007a44:	ff20810f 	.word	0xff20810f

08007a48 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b0b0      	sub	sp, #192	; 0xc0
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8007a52:	2300      	movs	r3, #0
 8007a54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d007      	beq.n	8007a6e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a64:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007a6c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8007a72:	2300      	movs	r3, #0
 8007a74:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8007a76:	2300      	movs	r3, #0
 8007a78:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8007a82:	2300      	movs	r3, #0
 8007a84:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	69db      	ldr	r3, [r3, #28]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d103      	bne.n	8007a96 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8007a8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a92:	663b      	str	r3, [r7, #96]	; 0x60
 8007a94:	e001      	b.n	8007a9a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8007a96:	2300      	movs	r3, #0
 8007a98:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8007a9a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a9e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8007aac:	2300      	movs	r3, #0
 8007aae:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8007ab4:	2340      	movs	r3, #64	; 0x40
 8007ab6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8007aca:	2300      	movs	r3, #0
 8007acc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8007adc:	2300      	movs	r3, #0
 8007ade:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8007ae8:	2380      	movs	r3, #128	; 0x80
 8007aea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8007aee:	2300      	movs	r3, #0
 8007af0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8007af4:	2300      	movs	r3, #0
 8007af6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8007afa:	2300      	movs	r3, #0
 8007afc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8007b00:	2300      	movs	r3, #0
 8007b02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8007b06:	2300      	movs	r3, #0
 8007b08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8007b1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007b20:	4baa      	ldr	r3, [pc, #680]	; (8007dcc <ETH_MACDMAConfig+0x384>)
 8007b22:	4013      	ands	r3, r2
 8007b24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8007b28:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8007b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8007b2c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8007b2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8007b30:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8007b32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8007b34:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8007b3a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8007b3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8007b3e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8007b40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8007b42:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8007b48:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8007b4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8007b4c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8007b4e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8007b50:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8007b52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8007b54:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8007b56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8007b58:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8007b5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8007b5c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8007b5e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007b62:	4313      	orrs	r3, r2
 8007b64:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007b70:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8007b7c:	2001      	movs	r0, #1
 8007b7e:	f7fd ff45 	bl	8005a0c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007b8a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8007b8c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8007b8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8007b90:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8007b92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8007b94:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8007b96:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8007b9a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8007b9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8007ba0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8007ba2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8007ba6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8007ba8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8007bac:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8007bb0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8007bb8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8007bba:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8007bc6:	2001      	movs	r0, #1
 8007bc8:	f7fd ff20 	bl	8005a0c <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007bd4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007bde:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8007be8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	699b      	ldr	r3, [r3, #24]
 8007bf0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8007bf4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007bf8:	f64f 7341 	movw	r3, #65345	; 0xff41
 8007bfc:	4013      	ands	r3, r2
 8007bfe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8007c02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c06:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8007c08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8007c0c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8007c0e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8007c12:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8007c14:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8007c18:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8007c1a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8007c1e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8007c20:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8007c24:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8007c26:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007c38:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	699b      	ldr	r3, [r3, #24]
 8007c40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8007c44:	2001      	movs	r0, #1
 8007c46:	f7fd fee1 	bl	8005a0c <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007c52:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8007c54:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8007c58:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	430a      	orrs	r2, r1
 8007c62:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	69db      	ldr	r3, [r3, #28]
 8007c6a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8007c6e:	2001      	movs	r0, #1
 8007c70:	f7fd fecc 	bl	8005a0c <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007c7c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8007c82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007c86:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8007c8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007c90:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8007c92:	2300      	movs	r3, #0
 8007c94:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8007c96:	2300      	movs	r3, #0
 8007c98:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8007ca2:	2304      	movs	r3, #4
 8007ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8007ca6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8007cac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007cb0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8007cb2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007cb6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8007cb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007cbc:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8007cbe:	2380      	movs	r3, #128	; 0x80
 8007cc0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8007cd8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007cdc:	4b3c      	ldr	r3, [pc, #240]	; (8007dd0 <ETH_MACDMAConfig+0x388>)
 8007cde:	4013      	ands	r3, r2
 8007ce0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8007ce4:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8007ce6:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8007ce8:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8007cea:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8007cec:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8007cee:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8007cf0:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8007cf2:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8007cf4:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8007cf6:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8007cf8:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8007cfa:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8007cfc:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8007cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8007d00:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8007d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8007d04:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8007d06:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8007d0a:	4313      	orrs	r3, r2
 8007d0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d18:	461a      	mov	r2, r3
 8007d1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007d1e:	6193      	str	r3, [r2, #24]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d28:	699b      	ldr	r3, [r3, #24]
 8007d2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8007d2e:	2001      	movs	r0, #1
 8007d30:	f7fd fe6c 	bl	8005a0c <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d3c:	461a      	mov	r2, r3
 8007d3e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007d42:	6193      	str	r3, [r2, #24]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8007d44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8007d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8007d48:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8007d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8007d4c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8007d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8007d50:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8007d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8007d54:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8007d56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007d58:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8007d5a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8007d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8007d5e:	4313      	orrs	r3, r2
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8007d60:	687a      	ldr	r2, [r7, #4]
 8007d62:	6812      	ldr	r2, [r2, #0]
 8007d64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007d68:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007d6c:	6013      	str	r3, [r2, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8007d7c:	2001      	movs	r0, #1
 8007d7e:	f7fd fe45 	bl	8005a0c <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007d8a:	461a      	mov	r2, r3
 8007d8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007d90:	6013      	str	r3, [r2, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	699b      	ldr	r3, [r3, #24]
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d10d      	bne.n	8007db6 <ETH_MACDMAConfig+0x36e>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007da2:	69db      	ldr	r3, [r3, #28]
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	6812      	ldr	r2, [r2, #0]
 8007da8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007db0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007db4:	61d3      	str	r3, [r2, #28]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	695b      	ldr	r3, [r3, #20]
 8007dba:	461a      	mov	r2, r3
 8007dbc:	2100      	movs	r1, #0
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f808 	bl	8007dd4 <ETH_MACAddressConfig>
}
 8007dc4:	bf00      	nop
 8007dc6:	37c0      	adds	r7, #192	; 0xc0
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	ff20810f 	.word	0xff20810f
 8007dd0:	f8de3f23 	.word	0xf8de3f23

08007dd4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b087      	sub	sp, #28
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	3305      	adds	r3, #5
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	021b      	lsls	r3, r3, #8
 8007de8:	687a      	ldr	r2, [r7, #4]
 8007dea:	3204      	adds	r2, #4
 8007dec:	7812      	ldrb	r2, [r2, #0]
 8007dee:	4313      	orrs	r3, r2
 8007df0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8007df2:	68ba      	ldr	r2, [r7, #8]
 8007df4:	4b11      	ldr	r3, [pc, #68]	; (8007e3c <ETH_MACAddressConfig+0x68>)
 8007df6:	4413      	add	r3, r2
 8007df8:	461a      	mov	r2, r3
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	3303      	adds	r3, #3
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	061a      	lsls	r2, r3, #24
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	3302      	adds	r3, #2
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	041b      	lsls	r3, r3, #16
 8007e0e:	431a      	orrs	r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	3301      	adds	r3, #1
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	021b      	lsls	r3, r3, #8
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	687a      	ldr	r2, [r7, #4]
 8007e1c:	7812      	ldrb	r2, [r2, #0]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8007e22:	68ba      	ldr	r2, [r7, #8]
 8007e24:	4b06      	ldr	r3, [pc, #24]	; (8007e40 <ETH_MACAddressConfig+0x6c>)
 8007e26:	4413      	add	r3, r2
 8007e28:	461a      	mov	r2, r3
 8007e2a:	697b      	ldr	r3, [r7, #20]
 8007e2c:	6013      	str	r3, [r2, #0]
}
 8007e2e:	bf00      	nop
 8007e30:	371c      	adds	r7, #28
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	40028040 	.word	0x40028040
 8007e40:	40028044 	.word	0x40028044

08007e44 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8007e44:	b580      	push	{r7, lr}
 8007e46:	b084      	sub	sp, #16
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681a      	ldr	r2, [r3, #0]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f042 0208 	orr.w	r2, r2, #8
 8007e5e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8007e68:	2001      	movs	r0, #1
 8007e6a:	f000 f8dd 	bl	8008028 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	68fa      	ldr	r2, [r7, #12]
 8007e74:	601a      	str	r2, [r3, #0]
}
 8007e76:	bf00      	nop
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b084      	sub	sp, #16
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8007e86:	2300      	movs	r3, #0
 8007e88:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f022 0208 	bic.w	r2, r2, #8
 8007e98:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8007ea2:	2001      	movs	r0, #1
 8007ea4:	f000 f8c0 	bl	8008028 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	601a      	str	r2, [r3, #0]
}
 8007eb0:	bf00      	nop
 8007eb2:	3710      	adds	r7, #16
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	bd80      	pop	{r7, pc}

08007eb8 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b084      	sub	sp, #16
 8007ebc:	af00      	add	r7, sp, #0
 8007ebe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f042 0204 	orr.w	r2, r2, #4
 8007ed2:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8007edc:	2001      	movs	r0, #1
 8007ede:	f000 f8a3 	bl	8008028 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	601a      	str	r2, [r3, #0]
}
 8007eea:	bf00      	nop
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b084      	sub	sp, #16
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8007efa:	2300      	movs	r3, #0
 8007efc:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	681a      	ldr	r2, [r3, #0]
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f022 0204 	bic.w	r2, r2, #4
 8007f0c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8007f16:	2001      	movs	r0, #1
 8007f18:	f000 f886 	bl	8008028 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	68fa      	ldr	r2, [r7, #12]
 8007f22:	601a      	str	r2, [r3, #0]
}
 8007f24:	bf00      	nop
 8007f26:	3710      	adds	r7, #16
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}

08007f2c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f3c:	699b      	ldr	r3, [r3, #24]
 8007f3e:	687a      	ldr	r2, [r7, #4]
 8007f40:	6812      	ldr	r2, [r2, #0]
 8007f42:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007f46:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007f4a:	6193      	str	r3, [r2, #24]
}
 8007f4c:	bf00      	nop
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8007f58:	b480      	push	{r7}
 8007f5a:	b083      	sub	sp, #12
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f68:	699b      	ldr	r3, [r3, #24]
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	6812      	ldr	r2, [r2, #0]
 8007f6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f72:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007f76:	6193      	str	r3, [r2, #24]
}
 8007f78:	bf00      	nop
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8007f84:	b480      	push	{r7}
 8007f86:	b083      	sub	sp, #12
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f94:	699b      	ldr	r3, [r3, #24]
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	6812      	ldr	r2, [r2, #0]
 8007f9a:	f043 0302 	orr.w	r3, r3, #2
 8007f9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007fa2:	6193      	str	r3, [r2, #24]
}
 8007fa4:	bf00      	nop
 8007fa6:	370c      	adds	r7, #12
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007fc0:	699b      	ldr	r3, [r3, #24]
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	6812      	ldr	r2, [r2, #0]
 8007fc6:	f023 0302 	bic.w	r3, r3, #2
 8007fca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007fce:	6193      	str	r3, [r2, #24]
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ff0:	699b      	ldr	r3, [r3, #24]
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	6812      	ldr	r2, [r2, #0]
 8007ff6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ffa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007ffe:	6193      	str	r3, [r2, #24]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008008:	699b      	ldr	r3, [r3, #24]
 800800a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800800c:	2001      	movs	r0, #1
 800800e:	f000 f80b 	bl	8008028 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800801c:	6193      	str	r3, [r2, #24]
}
 800801e:	bf00      	nop
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
	...

08008028 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8008028:	b480      	push	{r7}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8008030:	4b0b      	ldr	r3, [pc, #44]	; (8008060 <ETH_Delay+0x38>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a0b      	ldr	r2, [pc, #44]	; (8008064 <ETH_Delay+0x3c>)
 8008036:	fba2 2303 	umull	r2, r3, r2, r3
 800803a:	0a5b      	lsrs	r3, r3, #9
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	fb02 f303 	mul.w	r3, r2, r3
 8008042:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8008044:	bf00      	nop
  } 
  while (Delay --);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	1e5a      	subs	r2, r3, #1
 800804a:	60fa      	str	r2, [r7, #12]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d1f9      	bne.n	8008044 <ETH_Delay+0x1c>
}
 8008050:	bf00      	nop
 8008052:	bf00      	nop
 8008054:	3714      	adds	r7, #20
 8008056:	46bd      	mov	sp, r7
 8008058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805c:	4770      	bx	lr
 800805e:	bf00      	nop
 8008060:	200002dc 	.word	0x200002dc
 8008064:	10624dd3 	.word	0x10624dd3

08008068 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008068:	b480      	push	{r7}
 800806a:	b089      	sub	sp, #36	; 0x24
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008072:	2300      	movs	r3, #0
 8008074:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008076:	2300      	movs	r3, #0
 8008078:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800807a:	2300      	movs	r3, #0
 800807c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800807e:	2300      	movs	r3, #0
 8008080:	61fb      	str	r3, [r7, #28]
 8008082:	e16b      	b.n	800835c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008084:	2201      	movs	r2, #1
 8008086:	69fb      	ldr	r3, [r7, #28]
 8008088:	fa02 f303 	lsl.w	r3, r2, r3
 800808c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	697a      	ldr	r2, [r7, #20]
 8008094:	4013      	ands	r3, r2
 8008096:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	429a      	cmp	r2, r3
 800809e:	f040 815a 	bne.w	8008356 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	f003 0303 	and.w	r3, r3, #3
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d005      	beq.n	80080ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	685b      	ldr	r3, [r3, #4]
 80080b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d130      	bne.n	800811c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	689b      	ldr	r3, [r3, #8]
 80080be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	005b      	lsls	r3, r3, #1
 80080c4:	2203      	movs	r2, #3
 80080c6:	fa02 f303 	lsl.w	r3, r2, r3
 80080ca:	43db      	mvns	r3, r3
 80080cc:	69ba      	ldr	r2, [r7, #24]
 80080ce:	4013      	ands	r3, r2
 80080d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	68da      	ldr	r2, [r3, #12]
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	005b      	lsls	r3, r3, #1
 80080da:	fa02 f303 	lsl.w	r3, r2, r3
 80080de:	69ba      	ldr	r2, [r7, #24]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	69ba      	ldr	r2, [r7, #24]
 80080e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80080f0:	2201      	movs	r2, #1
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	fa02 f303 	lsl.w	r3, r2, r3
 80080f8:	43db      	mvns	r3, r3
 80080fa:	69ba      	ldr	r2, [r7, #24]
 80080fc:	4013      	ands	r3, r2
 80080fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	685b      	ldr	r3, [r3, #4]
 8008104:	091b      	lsrs	r3, r3, #4
 8008106:	f003 0201 	and.w	r2, r3, #1
 800810a:	69fb      	ldr	r3, [r7, #28]
 800810c:	fa02 f303 	lsl.w	r3, r2, r3
 8008110:	69ba      	ldr	r2, [r7, #24]
 8008112:	4313      	orrs	r3, r2
 8008114:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	69ba      	ldr	r2, [r7, #24]
 800811a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	685b      	ldr	r3, [r3, #4]
 8008120:	f003 0303 	and.w	r3, r3, #3
 8008124:	2b03      	cmp	r3, #3
 8008126:	d017      	beq.n	8008158 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	68db      	ldr	r3, [r3, #12]
 800812c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800812e:	69fb      	ldr	r3, [r7, #28]
 8008130:	005b      	lsls	r3, r3, #1
 8008132:	2203      	movs	r2, #3
 8008134:	fa02 f303 	lsl.w	r3, r2, r3
 8008138:	43db      	mvns	r3, r3
 800813a:	69ba      	ldr	r2, [r7, #24]
 800813c:	4013      	ands	r3, r2
 800813e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	689a      	ldr	r2, [r3, #8]
 8008144:	69fb      	ldr	r3, [r7, #28]
 8008146:	005b      	lsls	r3, r3, #1
 8008148:	fa02 f303 	lsl.w	r3, r2, r3
 800814c:	69ba      	ldr	r2, [r7, #24]
 800814e:	4313      	orrs	r3, r2
 8008150:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	69ba      	ldr	r2, [r7, #24]
 8008156:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	f003 0303 	and.w	r3, r3, #3
 8008160:	2b02      	cmp	r3, #2
 8008162:	d123      	bne.n	80081ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008164:	69fb      	ldr	r3, [r7, #28]
 8008166:	08da      	lsrs	r2, r3, #3
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	3208      	adds	r2, #8
 800816c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008170:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008172:	69fb      	ldr	r3, [r7, #28]
 8008174:	f003 0307 	and.w	r3, r3, #7
 8008178:	009b      	lsls	r3, r3, #2
 800817a:	220f      	movs	r2, #15
 800817c:	fa02 f303 	lsl.w	r3, r2, r3
 8008180:	43db      	mvns	r3, r3
 8008182:	69ba      	ldr	r2, [r7, #24]
 8008184:	4013      	ands	r3, r2
 8008186:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	691a      	ldr	r2, [r3, #16]
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	f003 0307 	and.w	r3, r3, #7
 8008192:	009b      	lsls	r3, r3, #2
 8008194:	fa02 f303 	lsl.w	r3, r2, r3
 8008198:	69ba      	ldr	r2, [r7, #24]
 800819a:	4313      	orrs	r3, r2
 800819c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	08da      	lsrs	r2, r3, #3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	3208      	adds	r2, #8
 80081a6:	69b9      	ldr	r1, [r7, #24]
 80081a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	005b      	lsls	r3, r3, #1
 80081b6:	2203      	movs	r2, #3
 80081b8:	fa02 f303 	lsl.w	r3, r2, r3
 80081bc:	43db      	mvns	r3, r3
 80081be:	69ba      	ldr	r2, [r7, #24]
 80081c0:	4013      	ands	r3, r2
 80081c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	f003 0203 	and.w	r2, r3, #3
 80081cc:	69fb      	ldr	r3, [r7, #28]
 80081ce:	005b      	lsls	r3, r3, #1
 80081d0:	fa02 f303 	lsl.w	r3, r2, r3
 80081d4:	69ba      	ldr	r2, [r7, #24]
 80081d6:	4313      	orrs	r3, r2
 80081d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	69ba      	ldr	r2, [r7, #24]
 80081de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f000 80b4 	beq.w	8008356 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80081ee:	2300      	movs	r3, #0
 80081f0:	60fb      	str	r3, [r7, #12]
 80081f2:	4b60      	ldr	r3, [pc, #384]	; (8008374 <HAL_GPIO_Init+0x30c>)
 80081f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081f6:	4a5f      	ldr	r2, [pc, #380]	; (8008374 <HAL_GPIO_Init+0x30c>)
 80081f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80081fc:	6453      	str	r3, [r2, #68]	; 0x44
 80081fe:	4b5d      	ldr	r3, [pc, #372]	; (8008374 <HAL_GPIO_Init+0x30c>)
 8008200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008206:	60fb      	str	r3, [r7, #12]
 8008208:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800820a:	4a5b      	ldr	r2, [pc, #364]	; (8008378 <HAL_GPIO_Init+0x310>)
 800820c:	69fb      	ldr	r3, [r7, #28]
 800820e:	089b      	lsrs	r3, r3, #2
 8008210:	3302      	adds	r3, #2
 8008212:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008216:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008218:	69fb      	ldr	r3, [r7, #28]
 800821a:	f003 0303 	and.w	r3, r3, #3
 800821e:	009b      	lsls	r3, r3, #2
 8008220:	220f      	movs	r2, #15
 8008222:	fa02 f303 	lsl.w	r3, r2, r3
 8008226:	43db      	mvns	r3, r3
 8008228:	69ba      	ldr	r2, [r7, #24]
 800822a:	4013      	ands	r3, r2
 800822c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	4a52      	ldr	r2, [pc, #328]	; (800837c <HAL_GPIO_Init+0x314>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d02b      	beq.n	800828e <HAL_GPIO_Init+0x226>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	4a51      	ldr	r2, [pc, #324]	; (8008380 <HAL_GPIO_Init+0x318>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d025      	beq.n	800828a <HAL_GPIO_Init+0x222>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	4a50      	ldr	r2, [pc, #320]	; (8008384 <HAL_GPIO_Init+0x31c>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d01f      	beq.n	8008286 <HAL_GPIO_Init+0x21e>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	4a4f      	ldr	r2, [pc, #316]	; (8008388 <HAL_GPIO_Init+0x320>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d019      	beq.n	8008282 <HAL_GPIO_Init+0x21a>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4a4e      	ldr	r2, [pc, #312]	; (800838c <HAL_GPIO_Init+0x324>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d013      	beq.n	800827e <HAL_GPIO_Init+0x216>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	4a4d      	ldr	r2, [pc, #308]	; (8008390 <HAL_GPIO_Init+0x328>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d00d      	beq.n	800827a <HAL_GPIO_Init+0x212>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	4a4c      	ldr	r2, [pc, #304]	; (8008394 <HAL_GPIO_Init+0x32c>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d007      	beq.n	8008276 <HAL_GPIO_Init+0x20e>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	4a4b      	ldr	r2, [pc, #300]	; (8008398 <HAL_GPIO_Init+0x330>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d101      	bne.n	8008272 <HAL_GPIO_Init+0x20a>
 800826e:	2307      	movs	r3, #7
 8008270:	e00e      	b.n	8008290 <HAL_GPIO_Init+0x228>
 8008272:	2308      	movs	r3, #8
 8008274:	e00c      	b.n	8008290 <HAL_GPIO_Init+0x228>
 8008276:	2306      	movs	r3, #6
 8008278:	e00a      	b.n	8008290 <HAL_GPIO_Init+0x228>
 800827a:	2305      	movs	r3, #5
 800827c:	e008      	b.n	8008290 <HAL_GPIO_Init+0x228>
 800827e:	2304      	movs	r3, #4
 8008280:	e006      	b.n	8008290 <HAL_GPIO_Init+0x228>
 8008282:	2303      	movs	r3, #3
 8008284:	e004      	b.n	8008290 <HAL_GPIO_Init+0x228>
 8008286:	2302      	movs	r3, #2
 8008288:	e002      	b.n	8008290 <HAL_GPIO_Init+0x228>
 800828a:	2301      	movs	r3, #1
 800828c:	e000      	b.n	8008290 <HAL_GPIO_Init+0x228>
 800828e:	2300      	movs	r3, #0
 8008290:	69fa      	ldr	r2, [r7, #28]
 8008292:	f002 0203 	and.w	r2, r2, #3
 8008296:	0092      	lsls	r2, r2, #2
 8008298:	4093      	lsls	r3, r2
 800829a:	69ba      	ldr	r2, [r7, #24]
 800829c:	4313      	orrs	r3, r2
 800829e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80082a0:	4935      	ldr	r1, [pc, #212]	; (8008378 <HAL_GPIO_Init+0x310>)
 80082a2:	69fb      	ldr	r3, [r7, #28]
 80082a4:	089b      	lsrs	r3, r3, #2
 80082a6:	3302      	adds	r3, #2
 80082a8:	69ba      	ldr	r2, [r7, #24]
 80082aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80082ae:	4b3b      	ldr	r3, [pc, #236]	; (800839c <HAL_GPIO_Init+0x334>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	43db      	mvns	r3, r3
 80082b8:	69ba      	ldr	r2, [r7, #24]
 80082ba:	4013      	ands	r3, r2
 80082bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	685b      	ldr	r3, [r3, #4]
 80082c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d003      	beq.n	80082d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80082ca:	69ba      	ldr	r2, [r7, #24]
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80082d2:	4a32      	ldr	r2, [pc, #200]	; (800839c <HAL_GPIO_Init+0x334>)
 80082d4:	69bb      	ldr	r3, [r7, #24]
 80082d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80082d8:	4b30      	ldr	r3, [pc, #192]	; (800839c <HAL_GPIO_Init+0x334>)
 80082da:	685b      	ldr	r3, [r3, #4]
 80082dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80082de:	693b      	ldr	r3, [r7, #16]
 80082e0:	43db      	mvns	r3, r3
 80082e2:	69ba      	ldr	r2, [r7, #24]
 80082e4:	4013      	ands	r3, r2
 80082e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d003      	beq.n	80082fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80082f4:	69ba      	ldr	r2, [r7, #24]
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	4313      	orrs	r3, r2
 80082fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80082fc:	4a27      	ldr	r2, [pc, #156]	; (800839c <HAL_GPIO_Init+0x334>)
 80082fe:	69bb      	ldr	r3, [r7, #24]
 8008300:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008302:	4b26      	ldr	r3, [pc, #152]	; (800839c <HAL_GPIO_Init+0x334>)
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	43db      	mvns	r3, r3
 800830c:	69ba      	ldr	r2, [r7, #24]
 800830e:	4013      	ands	r3, r2
 8008310:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800831a:	2b00      	cmp	r3, #0
 800831c:	d003      	beq.n	8008326 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800831e:	69ba      	ldr	r2, [r7, #24]
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	4313      	orrs	r3, r2
 8008324:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008326:	4a1d      	ldr	r2, [pc, #116]	; (800839c <HAL_GPIO_Init+0x334>)
 8008328:	69bb      	ldr	r3, [r7, #24]
 800832a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800832c:	4b1b      	ldr	r3, [pc, #108]	; (800839c <HAL_GPIO_Init+0x334>)
 800832e:	68db      	ldr	r3, [r3, #12]
 8008330:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008332:	693b      	ldr	r3, [r7, #16]
 8008334:	43db      	mvns	r3, r3
 8008336:	69ba      	ldr	r2, [r7, #24]
 8008338:	4013      	ands	r3, r2
 800833a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008344:	2b00      	cmp	r3, #0
 8008346:	d003      	beq.n	8008350 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008348:	69ba      	ldr	r2, [r7, #24]
 800834a:	693b      	ldr	r3, [r7, #16]
 800834c:	4313      	orrs	r3, r2
 800834e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008350:	4a12      	ldr	r2, [pc, #72]	; (800839c <HAL_GPIO_Init+0x334>)
 8008352:	69bb      	ldr	r3, [r7, #24]
 8008354:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008356:	69fb      	ldr	r3, [r7, #28]
 8008358:	3301      	adds	r3, #1
 800835a:	61fb      	str	r3, [r7, #28]
 800835c:	69fb      	ldr	r3, [r7, #28]
 800835e:	2b0f      	cmp	r3, #15
 8008360:	f67f ae90 	bls.w	8008084 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008364:	bf00      	nop
 8008366:	bf00      	nop
 8008368:	3724      	adds	r7, #36	; 0x24
 800836a:	46bd      	mov	sp, r7
 800836c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	40023800 	.word	0x40023800
 8008378:	40013800 	.word	0x40013800
 800837c:	40020000 	.word	0x40020000
 8008380:	40020400 	.word	0x40020400
 8008384:	40020800 	.word	0x40020800
 8008388:	40020c00 	.word	0x40020c00
 800838c:	40021000 	.word	0x40021000
 8008390:	40021400 	.word	0x40021400
 8008394:	40021800 	.word	0x40021800
 8008398:	40021c00 	.word	0x40021c00
 800839c:	40013c00 	.word	0x40013c00

080083a0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80083a0:	b480      	push	{r7}
 80083a2:	b087      	sub	sp, #28
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	6078      	str	r0, [r7, #4]
 80083a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80083aa:	2300      	movs	r3, #0
 80083ac:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80083ae:	2300      	movs	r3, #0
 80083b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80083b2:	2300      	movs	r3, #0
 80083b4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80083b6:	2300      	movs	r3, #0
 80083b8:	617b      	str	r3, [r7, #20]
 80083ba:	e0cd      	b.n	8008558 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80083bc:	2201      	movs	r2, #1
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	fa02 f303 	lsl.w	r3, r2, r3
 80083c4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80083c6:	683a      	ldr	r2, [r7, #0]
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	4013      	ands	r3, r2
 80083cc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80083ce:	68fa      	ldr	r2, [r7, #12]
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	429a      	cmp	r2, r3
 80083d4:	f040 80bd 	bne.w	8008552 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80083d8:	4a65      	ldr	r2, [pc, #404]	; (8008570 <HAL_GPIO_DeInit+0x1d0>)
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	089b      	lsrs	r3, r3, #2
 80083de:	3302      	adds	r3, #2
 80083e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083e4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	f003 0303 	and.w	r3, r3, #3
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	220f      	movs	r2, #15
 80083f0:	fa02 f303 	lsl.w	r3, r2, r3
 80083f4:	68ba      	ldr	r2, [r7, #8]
 80083f6:	4013      	ands	r3, r2
 80083f8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a5d      	ldr	r2, [pc, #372]	; (8008574 <HAL_GPIO_DeInit+0x1d4>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d02b      	beq.n	800845a <HAL_GPIO_DeInit+0xba>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a5c      	ldr	r2, [pc, #368]	; (8008578 <HAL_GPIO_DeInit+0x1d8>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d025      	beq.n	8008456 <HAL_GPIO_DeInit+0xb6>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4a5b      	ldr	r2, [pc, #364]	; (800857c <HAL_GPIO_DeInit+0x1dc>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d01f      	beq.n	8008452 <HAL_GPIO_DeInit+0xb2>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	4a5a      	ldr	r2, [pc, #360]	; (8008580 <HAL_GPIO_DeInit+0x1e0>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d019      	beq.n	800844e <HAL_GPIO_DeInit+0xae>
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a59      	ldr	r2, [pc, #356]	; (8008584 <HAL_GPIO_DeInit+0x1e4>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d013      	beq.n	800844a <HAL_GPIO_DeInit+0xaa>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a58      	ldr	r2, [pc, #352]	; (8008588 <HAL_GPIO_DeInit+0x1e8>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d00d      	beq.n	8008446 <HAL_GPIO_DeInit+0xa6>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a57      	ldr	r2, [pc, #348]	; (800858c <HAL_GPIO_DeInit+0x1ec>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d007      	beq.n	8008442 <HAL_GPIO_DeInit+0xa2>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a56      	ldr	r2, [pc, #344]	; (8008590 <HAL_GPIO_DeInit+0x1f0>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d101      	bne.n	800843e <HAL_GPIO_DeInit+0x9e>
 800843a:	2307      	movs	r3, #7
 800843c:	e00e      	b.n	800845c <HAL_GPIO_DeInit+0xbc>
 800843e:	2308      	movs	r3, #8
 8008440:	e00c      	b.n	800845c <HAL_GPIO_DeInit+0xbc>
 8008442:	2306      	movs	r3, #6
 8008444:	e00a      	b.n	800845c <HAL_GPIO_DeInit+0xbc>
 8008446:	2305      	movs	r3, #5
 8008448:	e008      	b.n	800845c <HAL_GPIO_DeInit+0xbc>
 800844a:	2304      	movs	r3, #4
 800844c:	e006      	b.n	800845c <HAL_GPIO_DeInit+0xbc>
 800844e:	2303      	movs	r3, #3
 8008450:	e004      	b.n	800845c <HAL_GPIO_DeInit+0xbc>
 8008452:	2302      	movs	r3, #2
 8008454:	e002      	b.n	800845c <HAL_GPIO_DeInit+0xbc>
 8008456:	2301      	movs	r3, #1
 8008458:	e000      	b.n	800845c <HAL_GPIO_DeInit+0xbc>
 800845a:	2300      	movs	r3, #0
 800845c:	697a      	ldr	r2, [r7, #20]
 800845e:	f002 0203 	and.w	r2, r2, #3
 8008462:	0092      	lsls	r2, r2, #2
 8008464:	4093      	lsls	r3, r2
 8008466:	68ba      	ldr	r2, [r7, #8]
 8008468:	429a      	cmp	r2, r3
 800846a:	d132      	bne.n	80084d2 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800846c:	4b49      	ldr	r3, [pc, #292]	; (8008594 <HAL_GPIO_DeInit+0x1f4>)
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	43db      	mvns	r3, r3
 8008474:	4947      	ldr	r1, [pc, #284]	; (8008594 <HAL_GPIO_DeInit+0x1f4>)
 8008476:	4013      	ands	r3, r2
 8008478:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800847a:	4b46      	ldr	r3, [pc, #280]	; (8008594 <HAL_GPIO_DeInit+0x1f4>)
 800847c:	685a      	ldr	r2, [r3, #4]
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	43db      	mvns	r3, r3
 8008482:	4944      	ldr	r1, [pc, #272]	; (8008594 <HAL_GPIO_DeInit+0x1f4>)
 8008484:	4013      	ands	r3, r2
 8008486:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8008488:	4b42      	ldr	r3, [pc, #264]	; (8008594 <HAL_GPIO_DeInit+0x1f4>)
 800848a:	689a      	ldr	r2, [r3, #8]
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	43db      	mvns	r3, r3
 8008490:	4940      	ldr	r1, [pc, #256]	; (8008594 <HAL_GPIO_DeInit+0x1f4>)
 8008492:	4013      	ands	r3, r2
 8008494:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008496:	4b3f      	ldr	r3, [pc, #252]	; (8008594 <HAL_GPIO_DeInit+0x1f4>)
 8008498:	68da      	ldr	r2, [r3, #12]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	43db      	mvns	r3, r3
 800849e:	493d      	ldr	r1, [pc, #244]	; (8008594 <HAL_GPIO_DeInit+0x1f4>)
 80084a0:	4013      	ands	r3, r2
 80084a2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	f003 0303 	and.w	r3, r3, #3
 80084aa:	009b      	lsls	r3, r3, #2
 80084ac:	220f      	movs	r2, #15
 80084ae:	fa02 f303 	lsl.w	r3, r2, r3
 80084b2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80084b4:	4a2e      	ldr	r2, [pc, #184]	; (8008570 <HAL_GPIO_DeInit+0x1d0>)
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	089b      	lsrs	r3, r3, #2
 80084ba:	3302      	adds	r3, #2
 80084bc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80084c0:	68bb      	ldr	r3, [r7, #8]
 80084c2:	43da      	mvns	r2, r3
 80084c4:	482a      	ldr	r0, [pc, #168]	; (8008570 <HAL_GPIO_DeInit+0x1d0>)
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	089b      	lsrs	r3, r3, #2
 80084ca:	400a      	ands	r2, r1
 80084cc:	3302      	adds	r3, #2
 80084ce:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	005b      	lsls	r3, r3, #1
 80084da:	2103      	movs	r1, #3
 80084dc:	fa01 f303 	lsl.w	r3, r1, r3
 80084e0:	43db      	mvns	r3, r3
 80084e2:	401a      	ands	r2, r3
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	08da      	lsrs	r2, r3, #3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	3208      	adds	r2, #8
 80084f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80084f4:	697b      	ldr	r3, [r7, #20]
 80084f6:	f003 0307 	and.w	r3, r3, #7
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	220f      	movs	r2, #15
 80084fe:	fa02 f303 	lsl.w	r3, r2, r3
 8008502:	43db      	mvns	r3, r3
 8008504:	697a      	ldr	r2, [r7, #20]
 8008506:	08d2      	lsrs	r2, r2, #3
 8008508:	4019      	ands	r1, r3
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	3208      	adds	r2, #8
 800850e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	68da      	ldr	r2, [r3, #12]
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	005b      	lsls	r3, r3, #1
 800851a:	2103      	movs	r1, #3
 800851c:	fa01 f303 	lsl.w	r3, r1, r3
 8008520:	43db      	mvns	r3, r3
 8008522:	401a      	ands	r2, r3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	685a      	ldr	r2, [r3, #4]
 800852c:	2101      	movs	r1, #1
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	fa01 f303 	lsl.w	r3, r1, r3
 8008534:	43db      	mvns	r3, r3
 8008536:	401a      	ands	r2, r3
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	689a      	ldr	r2, [r3, #8]
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	005b      	lsls	r3, r3, #1
 8008544:	2103      	movs	r1, #3
 8008546:	fa01 f303 	lsl.w	r3, r1, r3
 800854a:	43db      	mvns	r3, r3
 800854c:	401a      	ands	r2, r3
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	3301      	adds	r3, #1
 8008556:	617b      	str	r3, [r7, #20]
 8008558:	697b      	ldr	r3, [r7, #20]
 800855a:	2b0f      	cmp	r3, #15
 800855c:	f67f af2e 	bls.w	80083bc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8008560:	bf00      	nop
 8008562:	bf00      	nop
 8008564:	371c      	adds	r7, #28
 8008566:	46bd      	mov	sp, r7
 8008568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856c:	4770      	bx	lr
 800856e:	bf00      	nop
 8008570:	40013800 	.word	0x40013800
 8008574:	40020000 	.word	0x40020000
 8008578:	40020400 	.word	0x40020400
 800857c:	40020800 	.word	0x40020800
 8008580:	40020c00 	.word	0x40020c00
 8008584:	40021000 	.word	0x40021000
 8008588:	40021400 	.word	0x40021400
 800858c:	40021800 	.word	0x40021800
 8008590:	40021c00 	.word	0x40021c00
 8008594:	40013c00 	.word	0x40013c00

08008598 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
 80085a0:	460b      	mov	r3, r1
 80085a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	691a      	ldr	r2, [r3, #16]
 80085a8:	887b      	ldrh	r3, [r7, #2]
 80085aa:	4013      	ands	r3, r2
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d002      	beq.n	80085b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80085b0:	2301      	movs	r3, #1
 80085b2:	73fb      	strb	r3, [r7, #15]
 80085b4:	e001      	b.n	80085ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80085b6:	2300      	movs	r3, #0
 80085b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80085ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3714      	adds	r7, #20
 80085c0:	46bd      	mov	sp, r7
 80085c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085c6:	4770      	bx	lr

080085c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80085c8:	b480      	push	{r7}
 80085ca:	b083      	sub	sp, #12
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	6078      	str	r0, [r7, #4]
 80085d0:	460b      	mov	r3, r1
 80085d2:	807b      	strh	r3, [r7, #2]
 80085d4:	4613      	mov	r3, r2
 80085d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80085d8:	787b      	ldrb	r3, [r7, #1]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d003      	beq.n	80085e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80085de:	887a      	ldrh	r2, [r7, #2]
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80085e4:	e003      	b.n	80085ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80085e6:	887b      	ldrh	r3, [r7, #2]
 80085e8:	041a      	lsls	r2, r3, #16
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	619a      	str	r2, [r3, #24]
}
 80085ee:	bf00      	nop
 80085f0:	370c      	adds	r7, #12
 80085f2:	46bd      	mov	sp, r7
 80085f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f8:	4770      	bx	lr
	...

080085fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80085fc:	b580      	push	{r7, lr}
 80085fe:	b086      	sub	sp, #24
 8008600:	af00      	add	r7, sp, #0
 8008602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d101      	bne.n	800860e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	e267      	b.n	8008ade <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f003 0301 	and.w	r3, r3, #1
 8008616:	2b00      	cmp	r3, #0
 8008618:	d075      	beq.n	8008706 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800861a:	4b88      	ldr	r3, [pc, #544]	; (800883c <HAL_RCC_OscConfig+0x240>)
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	f003 030c 	and.w	r3, r3, #12
 8008622:	2b04      	cmp	r3, #4
 8008624:	d00c      	beq.n	8008640 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008626:	4b85      	ldr	r3, [pc, #532]	; (800883c <HAL_RCC_OscConfig+0x240>)
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800862e:	2b08      	cmp	r3, #8
 8008630:	d112      	bne.n	8008658 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008632:	4b82      	ldr	r3, [pc, #520]	; (800883c <HAL_RCC_OscConfig+0x240>)
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800863a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800863e:	d10b      	bne.n	8008658 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008640:	4b7e      	ldr	r3, [pc, #504]	; (800883c <HAL_RCC_OscConfig+0x240>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008648:	2b00      	cmp	r3, #0
 800864a:	d05b      	beq.n	8008704 <HAL_RCC_OscConfig+0x108>
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	2b00      	cmp	r3, #0
 8008652:	d157      	bne.n	8008704 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008654:	2301      	movs	r3, #1
 8008656:	e242      	b.n	8008ade <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008660:	d106      	bne.n	8008670 <HAL_RCC_OscConfig+0x74>
 8008662:	4b76      	ldr	r3, [pc, #472]	; (800883c <HAL_RCC_OscConfig+0x240>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	4a75      	ldr	r2, [pc, #468]	; (800883c <HAL_RCC_OscConfig+0x240>)
 8008668:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800866c:	6013      	str	r3, [r2, #0]
 800866e:	e01d      	b.n	80086ac <HAL_RCC_OscConfig+0xb0>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	685b      	ldr	r3, [r3, #4]
 8008674:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008678:	d10c      	bne.n	8008694 <HAL_RCC_OscConfig+0x98>
 800867a:	4b70      	ldr	r3, [pc, #448]	; (800883c <HAL_RCC_OscConfig+0x240>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a6f      	ldr	r2, [pc, #444]	; (800883c <HAL_RCC_OscConfig+0x240>)
 8008680:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008684:	6013      	str	r3, [r2, #0]
 8008686:	4b6d      	ldr	r3, [pc, #436]	; (800883c <HAL_RCC_OscConfig+0x240>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a6c      	ldr	r2, [pc, #432]	; (800883c <HAL_RCC_OscConfig+0x240>)
 800868c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008690:	6013      	str	r3, [r2, #0]
 8008692:	e00b      	b.n	80086ac <HAL_RCC_OscConfig+0xb0>
 8008694:	4b69      	ldr	r3, [pc, #420]	; (800883c <HAL_RCC_OscConfig+0x240>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a68      	ldr	r2, [pc, #416]	; (800883c <HAL_RCC_OscConfig+0x240>)
 800869a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800869e:	6013      	str	r3, [r2, #0]
 80086a0:	4b66      	ldr	r3, [pc, #408]	; (800883c <HAL_RCC_OscConfig+0x240>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a65      	ldr	r2, [pc, #404]	; (800883c <HAL_RCC_OscConfig+0x240>)
 80086a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80086aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d013      	beq.n	80086dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086b4:	f7fd f99e 	bl	80059f4 <HAL_GetTick>
 80086b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086ba:	e008      	b.n	80086ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086bc:	f7fd f99a 	bl	80059f4 <HAL_GetTick>
 80086c0:	4602      	mov	r2, r0
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	1ad3      	subs	r3, r2, r3
 80086c6:	2b64      	cmp	r3, #100	; 0x64
 80086c8:	d901      	bls.n	80086ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80086ca:	2303      	movs	r3, #3
 80086cc:	e207      	b.n	8008ade <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80086ce:	4b5b      	ldr	r3, [pc, #364]	; (800883c <HAL_RCC_OscConfig+0x240>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d0f0      	beq.n	80086bc <HAL_RCC_OscConfig+0xc0>
 80086da:	e014      	b.n	8008706 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086dc:	f7fd f98a 	bl	80059f4 <HAL_GetTick>
 80086e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086e2:	e008      	b.n	80086f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80086e4:	f7fd f986 	bl	80059f4 <HAL_GetTick>
 80086e8:	4602      	mov	r2, r0
 80086ea:	693b      	ldr	r3, [r7, #16]
 80086ec:	1ad3      	subs	r3, r2, r3
 80086ee:	2b64      	cmp	r3, #100	; 0x64
 80086f0:	d901      	bls.n	80086f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80086f2:	2303      	movs	r3, #3
 80086f4:	e1f3      	b.n	8008ade <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80086f6:	4b51      	ldr	r3, [pc, #324]	; (800883c <HAL_RCC_OscConfig+0x240>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d1f0      	bne.n	80086e4 <HAL_RCC_OscConfig+0xe8>
 8008702:	e000      	b.n	8008706 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	f003 0302 	and.w	r3, r3, #2
 800870e:	2b00      	cmp	r3, #0
 8008710:	d063      	beq.n	80087da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008712:	4b4a      	ldr	r3, [pc, #296]	; (800883c <HAL_RCC_OscConfig+0x240>)
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	f003 030c 	and.w	r3, r3, #12
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00b      	beq.n	8008736 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800871e:	4b47      	ldr	r3, [pc, #284]	; (800883c <HAL_RCC_OscConfig+0x240>)
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008726:	2b08      	cmp	r3, #8
 8008728:	d11c      	bne.n	8008764 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800872a:	4b44      	ldr	r3, [pc, #272]	; (800883c <HAL_RCC_OscConfig+0x240>)
 800872c:	685b      	ldr	r3, [r3, #4]
 800872e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008732:	2b00      	cmp	r3, #0
 8008734:	d116      	bne.n	8008764 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008736:	4b41      	ldr	r3, [pc, #260]	; (800883c <HAL_RCC_OscConfig+0x240>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f003 0302 	and.w	r3, r3, #2
 800873e:	2b00      	cmp	r3, #0
 8008740:	d005      	beq.n	800874e <HAL_RCC_OscConfig+0x152>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	68db      	ldr	r3, [r3, #12]
 8008746:	2b01      	cmp	r3, #1
 8008748:	d001      	beq.n	800874e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800874a:	2301      	movs	r3, #1
 800874c:	e1c7      	b.n	8008ade <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800874e:	4b3b      	ldr	r3, [pc, #236]	; (800883c <HAL_RCC_OscConfig+0x240>)
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	691b      	ldr	r3, [r3, #16]
 800875a:	00db      	lsls	r3, r3, #3
 800875c:	4937      	ldr	r1, [pc, #220]	; (800883c <HAL_RCC_OscConfig+0x240>)
 800875e:	4313      	orrs	r3, r2
 8008760:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008762:	e03a      	b.n	80087da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	68db      	ldr	r3, [r3, #12]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d020      	beq.n	80087ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800876c:	4b34      	ldr	r3, [pc, #208]	; (8008840 <HAL_RCC_OscConfig+0x244>)
 800876e:	2201      	movs	r2, #1
 8008770:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008772:	f7fd f93f 	bl	80059f4 <HAL_GetTick>
 8008776:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008778:	e008      	b.n	800878c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800877a:	f7fd f93b 	bl	80059f4 <HAL_GetTick>
 800877e:	4602      	mov	r2, r0
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	1ad3      	subs	r3, r2, r3
 8008784:	2b02      	cmp	r3, #2
 8008786:	d901      	bls.n	800878c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008788:	2303      	movs	r3, #3
 800878a:	e1a8      	b.n	8008ade <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800878c:	4b2b      	ldr	r3, [pc, #172]	; (800883c <HAL_RCC_OscConfig+0x240>)
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f003 0302 	and.w	r3, r3, #2
 8008794:	2b00      	cmp	r3, #0
 8008796:	d0f0      	beq.n	800877a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008798:	4b28      	ldr	r3, [pc, #160]	; (800883c <HAL_RCC_OscConfig+0x240>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	691b      	ldr	r3, [r3, #16]
 80087a4:	00db      	lsls	r3, r3, #3
 80087a6:	4925      	ldr	r1, [pc, #148]	; (800883c <HAL_RCC_OscConfig+0x240>)
 80087a8:	4313      	orrs	r3, r2
 80087aa:	600b      	str	r3, [r1, #0]
 80087ac:	e015      	b.n	80087da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80087ae:	4b24      	ldr	r3, [pc, #144]	; (8008840 <HAL_RCC_OscConfig+0x244>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087b4:	f7fd f91e 	bl	80059f4 <HAL_GetTick>
 80087b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087ba:	e008      	b.n	80087ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80087bc:	f7fd f91a 	bl	80059f4 <HAL_GetTick>
 80087c0:	4602      	mov	r2, r0
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	1ad3      	subs	r3, r2, r3
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d901      	bls.n	80087ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80087ca:	2303      	movs	r3, #3
 80087cc:	e187      	b.n	8008ade <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80087ce:	4b1b      	ldr	r3, [pc, #108]	; (800883c <HAL_RCC_OscConfig+0x240>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f003 0302 	and.w	r3, r3, #2
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1f0      	bne.n	80087bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f003 0308 	and.w	r3, r3, #8
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d036      	beq.n	8008854 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	695b      	ldr	r3, [r3, #20]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d016      	beq.n	800881c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80087ee:	4b15      	ldr	r3, [pc, #84]	; (8008844 <HAL_RCC_OscConfig+0x248>)
 80087f0:	2201      	movs	r2, #1
 80087f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087f4:	f7fd f8fe 	bl	80059f4 <HAL_GetTick>
 80087f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087fa:	e008      	b.n	800880e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087fc:	f7fd f8fa 	bl	80059f4 <HAL_GetTick>
 8008800:	4602      	mov	r2, r0
 8008802:	693b      	ldr	r3, [r7, #16]
 8008804:	1ad3      	subs	r3, r2, r3
 8008806:	2b02      	cmp	r3, #2
 8008808:	d901      	bls.n	800880e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800880a:	2303      	movs	r3, #3
 800880c:	e167      	b.n	8008ade <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800880e:	4b0b      	ldr	r3, [pc, #44]	; (800883c <HAL_RCC_OscConfig+0x240>)
 8008810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008812:	f003 0302 	and.w	r3, r3, #2
 8008816:	2b00      	cmp	r3, #0
 8008818:	d0f0      	beq.n	80087fc <HAL_RCC_OscConfig+0x200>
 800881a:	e01b      	b.n	8008854 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800881c:	4b09      	ldr	r3, [pc, #36]	; (8008844 <HAL_RCC_OscConfig+0x248>)
 800881e:	2200      	movs	r2, #0
 8008820:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008822:	f7fd f8e7 	bl	80059f4 <HAL_GetTick>
 8008826:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008828:	e00e      	b.n	8008848 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800882a:	f7fd f8e3 	bl	80059f4 <HAL_GetTick>
 800882e:	4602      	mov	r2, r0
 8008830:	693b      	ldr	r3, [r7, #16]
 8008832:	1ad3      	subs	r3, r2, r3
 8008834:	2b02      	cmp	r3, #2
 8008836:	d907      	bls.n	8008848 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008838:	2303      	movs	r3, #3
 800883a:	e150      	b.n	8008ade <HAL_RCC_OscConfig+0x4e2>
 800883c:	40023800 	.word	0x40023800
 8008840:	42470000 	.word	0x42470000
 8008844:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008848:	4b88      	ldr	r3, [pc, #544]	; (8008a6c <HAL_RCC_OscConfig+0x470>)
 800884a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800884c:	f003 0302 	and.w	r3, r3, #2
 8008850:	2b00      	cmp	r3, #0
 8008852:	d1ea      	bne.n	800882a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f003 0304 	and.w	r3, r3, #4
 800885c:	2b00      	cmp	r3, #0
 800885e:	f000 8097 	beq.w	8008990 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008862:	2300      	movs	r3, #0
 8008864:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008866:	4b81      	ldr	r3, [pc, #516]	; (8008a6c <HAL_RCC_OscConfig+0x470>)
 8008868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800886e:	2b00      	cmp	r3, #0
 8008870:	d10f      	bne.n	8008892 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008872:	2300      	movs	r3, #0
 8008874:	60bb      	str	r3, [r7, #8]
 8008876:	4b7d      	ldr	r3, [pc, #500]	; (8008a6c <HAL_RCC_OscConfig+0x470>)
 8008878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800887a:	4a7c      	ldr	r2, [pc, #496]	; (8008a6c <HAL_RCC_OscConfig+0x470>)
 800887c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008880:	6413      	str	r3, [r2, #64]	; 0x40
 8008882:	4b7a      	ldr	r3, [pc, #488]	; (8008a6c <HAL_RCC_OscConfig+0x470>)
 8008884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800888a:	60bb      	str	r3, [r7, #8]
 800888c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800888e:	2301      	movs	r3, #1
 8008890:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008892:	4b77      	ldr	r3, [pc, #476]	; (8008a70 <HAL_RCC_OscConfig+0x474>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800889a:	2b00      	cmp	r3, #0
 800889c:	d118      	bne.n	80088d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800889e:	4b74      	ldr	r3, [pc, #464]	; (8008a70 <HAL_RCC_OscConfig+0x474>)
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a73      	ldr	r2, [pc, #460]	; (8008a70 <HAL_RCC_OscConfig+0x474>)
 80088a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80088aa:	f7fd f8a3 	bl	80059f4 <HAL_GetTick>
 80088ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088b0:	e008      	b.n	80088c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80088b2:	f7fd f89f 	bl	80059f4 <HAL_GetTick>
 80088b6:	4602      	mov	r2, r0
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	1ad3      	subs	r3, r2, r3
 80088bc:	2b02      	cmp	r3, #2
 80088be:	d901      	bls.n	80088c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80088c0:	2303      	movs	r3, #3
 80088c2:	e10c      	b.n	8008ade <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80088c4:	4b6a      	ldr	r3, [pc, #424]	; (8008a70 <HAL_RCC_OscConfig+0x474>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d0f0      	beq.n	80088b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	2b01      	cmp	r3, #1
 80088d6:	d106      	bne.n	80088e6 <HAL_RCC_OscConfig+0x2ea>
 80088d8:	4b64      	ldr	r3, [pc, #400]	; (8008a6c <HAL_RCC_OscConfig+0x470>)
 80088da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088dc:	4a63      	ldr	r2, [pc, #396]	; (8008a6c <HAL_RCC_OscConfig+0x470>)
 80088de:	f043 0301 	orr.w	r3, r3, #1
 80088e2:	6713      	str	r3, [r2, #112]	; 0x70
 80088e4:	e01c      	b.n	8008920 <HAL_RCC_OscConfig+0x324>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	2b05      	cmp	r3, #5
 80088ec:	d10c      	bne.n	8008908 <HAL_RCC_OscConfig+0x30c>
 80088ee:	4b5f      	ldr	r3, [pc, #380]	; (8008a6c <HAL_RCC_OscConfig+0x470>)
 80088f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088f2:	4a5e      	ldr	r2, [pc, #376]	; (8008a6c <HAL_RCC_OscConfig+0x470>)
 80088f4:	f043 0304 	orr.w	r3, r3, #4
 80088f8:	6713      	str	r3, [r2, #112]	; 0x70
 80088fa:	4b5c      	ldr	r3, [pc, #368]	; (8008a6c <HAL_RCC_OscConfig+0x470>)
 80088fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088fe:	4a5b      	ldr	r2, [pc, #364]	; (8008a6c <HAL_RCC_OscConfig+0x470>)
 8008900:	f043 0301 	orr.w	r3, r3, #1
 8008904:	6713      	str	r3, [r2, #112]	; 0x70
 8008906:	e00b      	b.n	8008920 <HAL_RCC_OscConfig+0x324>
 8008908:	4b58      	ldr	r3, [pc, #352]	; (8008a6c <HAL_RCC_OscConfig+0x470>)
 800890a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800890c:	4a57      	ldr	r2, [pc, #348]	; (8008a6c <HAL_RCC_OscConfig+0x470>)
 800890e:	f023 0301 	bic.w	r3, r3, #1
 8008912:	6713      	str	r3, [r2, #112]	; 0x70
 8008914:	4b55      	ldr	r3, [pc, #340]	; (8008a6c <HAL_RCC_OscConfig+0x470>)
 8008916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008918:	4a54      	ldr	r2, [pc, #336]	; (8008a6c <HAL_RCC_OscConfig+0x470>)
 800891a:	f023 0304 	bic.w	r3, r3, #4
 800891e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d015      	beq.n	8008954 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008928:	f7fd f864 	bl	80059f4 <HAL_GetTick>
 800892c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800892e:	e00a      	b.n	8008946 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008930:	f7fd f860 	bl	80059f4 <HAL_GetTick>
 8008934:	4602      	mov	r2, r0
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	1ad3      	subs	r3, r2, r3
 800893a:	f241 3288 	movw	r2, #5000	; 0x1388
 800893e:	4293      	cmp	r3, r2
 8008940:	d901      	bls.n	8008946 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008942:	2303      	movs	r3, #3
 8008944:	e0cb      	b.n	8008ade <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008946:	4b49      	ldr	r3, [pc, #292]	; (8008a6c <HAL_RCC_OscConfig+0x470>)
 8008948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800894a:	f003 0302 	and.w	r3, r3, #2
 800894e:	2b00      	cmp	r3, #0
 8008950:	d0ee      	beq.n	8008930 <HAL_RCC_OscConfig+0x334>
 8008952:	e014      	b.n	800897e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008954:	f7fd f84e 	bl	80059f4 <HAL_GetTick>
 8008958:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800895a:	e00a      	b.n	8008972 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800895c:	f7fd f84a 	bl	80059f4 <HAL_GetTick>
 8008960:	4602      	mov	r2, r0
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	1ad3      	subs	r3, r2, r3
 8008966:	f241 3288 	movw	r2, #5000	; 0x1388
 800896a:	4293      	cmp	r3, r2
 800896c:	d901      	bls.n	8008972 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800896e:	2303      	movs	r3, #3
 8008970:	e0b5      	b.n	8008ade <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008972:	4b3e      	ldr	r3, [pc, #248]	; (8008a6c <HAL_RCC_OscConfig+0x470>)
 8008974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008976:	f003 0302 	and.w	r3, r3, #2
 800897a:	2b00      	cmp	r3, #0
 800897c:	d1ee      	bne.n	800895c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800897e:	7dfb      	ldrb	r3, [r7, #23]
 8008980:	2b01      	cmp	r3, #1
 8008982:	d105      	bne.n	8008990 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008984:	4b39      	ldr	r3, [pc, #228]	; (8008a6c <HAL_RCC_OscConfig+0x470>)
 8008986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008988:	4a38      	ldr	r2, [pc, #224]	; (8008a6c <HAL_RCC_OscConfig+0x470>)
 800898a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800898e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	699b      	ldr	r3, [r3, #24]
 8008994:	2b00      	cmp	r3, #0
 8008996:	f000 80a1 	beq.w	8008adc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800899a:	4b34      	ldr	r3, [pc, #208]	; (8008a6c <HAL_RCC_OscConfig+0x470>)
 800899c:	689b      	ldr	r3, [r3, #8]
 800899e:	f003 030c 	and.w	r3, r3, #12
 80089a2:	2b08      	cmp	r3, #8
 80089a4:	d05c      	beq.n	8008a60 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	699b      	ldr	r3, [r3, #24]
 80089aa:	2b02      	cmp	r3, #2
 80089ac:	d141      	bne.n	8008a32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089ae:	4b31      	ldr	r3, [pc, #196]	; (8008a74 <HAL_RCC_OscConfig+0x478>)
 80089b0:	2200      	movs	r2, #0
 80089b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80089b4:	f7fd f81e 	bl	80059f4 <HAL_GetTick>
 80089b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089ba:	e008      	b.n	80089ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80089bc:	f7fd f81a 	bl	80059f4 <HAL_GetTick>
 80089c0:	4602      	mov	r2, r0
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	1ad3      	subs	r3, r2, r3
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d901      	bls.n	80089ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80089ca:	2303      	movs	r3, #3
 80089cc:	e087      	b.n	8008ade <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089ce:	4b27      	ldr	r3, [pc, #156]	; (8008a6c <HAL_RCC_OscConfig+0x470>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d1f0      	bne.n	80089bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	69da      	ldr	r2, [r3, #28]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a1b      	ldr	r3, [r3, #32]
 80089e2:	431a      	orrs	r2, r3
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089e8:	019b      	lsls	r3, r3, #6
 80089ea:	431a      	orrs	r2, r3
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089f0:	085b      	lsrs	r3, r3, #1
 80089f2:	3b01      	subs	r3, #1
 80089f4:	041b      	lsls	r3, r3, #16
 80089f6:	431a      	orrs	r2, r3
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089fc:	061b      	lsls	r3, r3, #24
 80089fe:	491b      	ldr	r1, [pc, #108]	; (8008a6c <HAL_RCC_OscConfig+0x470>)
 8008a00:	4313      	orrs	r3, r2
 8008a02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008a04:	4b1b      	ldr	r3, [pc, #108]	; (8008a74 <HAL_RCC_OscConfig+0x478>)
 8008a06:	2201      	movs	r2, #1
 8008a08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a0a:	f7fc fff3 	bl	80059f4 <HAL_GetTick>
 8008a0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a10:	e008      	b.n	8008a24 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a12:	f7fc ffef 	bl	80059f4 <HAL_GetTick>
 8008a16:	4602      	mov	r2, r0
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	1ad3      	subs	r3, r2, r3
 8008a1c:	2b02      	cmp	r3, #2
 8008a1e:	d901      	bls.n	8008a24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008a20:	2303      	movs	r3, #3
 8008a22:	e05c      	b.n	8008ade <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008a24:	4b11      	ldr	r3, [pc, #68]	; (8008a6c <HAL_RCC_OscConfig+0x470>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d0f0      	beq.n	8008a12 <HAL_RCC_OscConfig+0x416>
 8008a30:	e054      	b.n	8008adc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008a32:	4b10      	ldr	r3, [pc, #64]	; (8008a74 <HAL_RCC_OscConfig+0x478>)
 8008a34:	2200      	movs	r2, #0
 8008a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a38:	f7fc ffdc 	bl	80059f4 <HAL_GetTick>
 8008a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a3e:	e008      	b.n	8008a52 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008a40:	f7fc ffd8 	bl	80059f4 <HAL_GetTick>
 8008a44:	4602      	mov	r2, r0
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	1ad3      	subs	r3, r2, r3
 8008a4a:	2b02      	cmp	r3, #2
 8008a4c:	d901      	bls.n	8008a52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008a4e:	2303      	movs	r3, #3
 8008a50:	e045      	b.n	8008ade <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008a52:	4b06      	ldr	r3, [pc, #24]	; (8008a6c <HAL_RCC_OscConfig+0x470>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d1f0      	bne.n	8008a40 <HAL_RCC_OscConfig+0x444>
 8008a5e:	e03d      	b.n	8008adc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	699b      	ldr	r3, [r3, #24]
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	d107      	bne.n	8008a78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e038      	b.n	8008ade <HAL_RCC_OscConfig+0x4e2>
 8008a6c:	40023800 	.word	0x40023800
 8008a70:	40007000 	.word	0x40007000
 8008a74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008a78:	4b1b      	ldr	r3, [pc, #108]	; (8008ae8 <HAL_RCC_OscConfig+0x4ec>)
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	699b      	ldr	r3, [r3, #24]
 8008a82:	2b01      	cmp	r3, #1
 8008a84:	d028      	beq.n	8008ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008a90:	429a      	cmp	r2, r3
 8008a92:	d121      	bne.n	8008ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d11a      	bne.n	8008ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008aa2:	68fa      	ldr	r2, [r7, #12]
 8008aa4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008aa8:	4013      	ands	r3, r2
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008aae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d111      	bne.n	8008ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008abe:	085b      	lsrs	r3, r3, #1
 8008ac0:	3b01      	subs	r3, #1
 8008ac2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008ac4:	429a      	cmp	r2, r3
 8008ac6:	d107      	bne.n	8008ad8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008ad4:	429a      	cmp	r2, r3
 8008ad6:	d001      	beq.n	8008adc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008ad8:	2301      	movs	r3, #1
 8008ada:	e000      	b.n	8008ade <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008adc:	2300      	movs	r3, #0
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	3718      	adds	r7, #24
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	40023800 	.word	0x40023800

08008aec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008aec:	b580      	push	{r7, lr}
 8008aee:	b084      	sub	sp, #16
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d101      	bne.n	8008b00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008afc:	2301      	movs	r3, #1
 8008afe:	e0cc      	b.n	8008c9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008b00:	4b68      	ldr	r3, [pc, #416]	; (8008ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	f003 0307 	and.w	r3, r3, #7
 8008b08:	683a      	ldr	r2, [r7, #0]
 8008b0a:	429a      	cmp	r2, r3
 8008b0c:	d90c      	bls.n	8008b28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b0e:	4b65      	ldr	r3, [pc, #404]	; (8008ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8008b10:	683a      	ldr	r2, [r7, #0]
 8008b12:	b2d2      	uxtb	r2, r2
 8008b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b16:	4b63      	ldr	r3, [pc, #396]	; (8008ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f003 0307 	and.w	r3, r3, #7
 8008b1e:	683a      	ldr	r2, [r7, #0]
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d001      	beq.n	8008b28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008b24:	2301      	movs	r3, #1
 8008b26:	e0b8      	b.n	8008c9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f003 0302 	and.w	r3, r3, #2
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d020      	beq.n	8008b76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	f003 0304 	and.w	r3, r3, #4
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d005      	beq.n	8008b4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008b40:	4b59      	ldr	r3, [pc, #356]	; (8008ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8008b42:	689b      	ldr	r3, [r3, #8]
 8008b44:	4a58      	ldr	r2, [pc, #352]	; (8008ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8008b46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008b4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f003 0308 	and.w	r3, r3, #8
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d005      	beq.n	8008b64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008b58:	4b53      	ldr	r3, [pc, #332]	; (8008ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	4a52      	ldr	r2, [pc, #328]	; (8008ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8008b5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008b62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b64:	4b50      	ldr	r3, [pc, #320]	; (8008ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	494d      	ldr	r1, [pc, #308]	; (8008ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8008b72:	4313      	orrs	r3, r2
 8008b74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f003 0301 	and.w	r3, r3, #1
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d044      	beq.n	8008c0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	685b      	ldr	r3, [r3, #4]
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d107      	bne.n	8008b9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008b8a:	4b47      	ldr	r3, [pc, #284]	; (8008ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d119      	bne.n	8008bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	e07f      	b.n	8008c9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	2b02      	cmp	r3, #2
 8008ba0:	d003      	beq.n	8008baa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008ba6:	2b03      	cmp	r3, #3
 8008ba8:	d107      	bne.n	8008bba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008baa:	4b3f      	ldr	r3, [pc, #252]	; (8008ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d109      	bne.n	8008bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	e06f      	b.n	8008c9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008bba:	4b3b      	ldr	r3, [pc, #236]	; (8008ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f003 0302 	and.w	r3, r3, #2
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d101      	bne.n	8008bca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008bc6:	2301      	movs	r3, #1
 8008bc8:	e067      	b.n	8008c9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008bca:	4b37      	ldr	r3, [pc, #220]	; (8008ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8008bcc:	689b      	ldr	r3, [r3, #8]
 8008bce:	f023 0203 	bic.w	r2, r3, #3
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	4934      	ldr	r1, [pc, #208]	; (8008ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8008bd8:	4313      	orrs	r3, r2
 8008bda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008bdc:	f7fc ff0a 	bl	80059f4 <HAL_GetTick>
 8008be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008be2:	e00a      	b.n	8008bfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008be4:	f7fc ff06 	bl	80059f4 <HAL_GetTick>
 8008be8:	4602      	mov	r2, r0
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	1ad3      	subs	r3, r2, r3
 8008bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d901      	bls.n	8008bfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008bf6:	2303      	movs	r3, #3
 8008bf8:	e04f      	b.n	8008c9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008bfa:	4b2b      	ldr	r3, [pc, #172]	; (8008ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8008bfc:	689b      	ldr	r3, [r3, #8]
 8008bfe:	f003 020c 	and.w	r2, r3, #12
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	009b      	lsls	r3, r3, #2
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d1eb      	bne.n	8008be4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008c0c:	4b25      	ldr	r3, [pc, #148]	; (8008ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f003 0307 	and.w	r3, r3, #7
 8008c14:	683a      	ldr	r2, [r7, #0]
 8008c16:	429a      	cmp	r2, r3
 8008c18:	d20c      	bcs.n	8008c34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c1a:	4b22      	ldr	r3, [pc, #136]	; (8008ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8008c1c:	683a      	ldr	r2, [r7, #0]
 8008c1e:	b2d2      	uxtb	r2, r2
 8008c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c22:	4b20      	ldr	r3, [pc, #128]	; (8008ca4 <HAL_RCC_ClockConfig+0x1b8>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f003 0307 	and.w	r3, r3, #7
 8008c2a:	683a      	ldr	r2, [r7, #0]
 8008c2c:	429a      	cmp	r2, r3
 8008c2e:	d001      	beq.n	8008c34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008c30:	2301      	movs	r3, #1
 8008c32:	e032      	b.n	8008c9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 0304 	and.w	r3, r3, #4
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d008      	beq.n	8008c52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008c40:	4b19      	ldr	r3, [pc, #100]	; (8008ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	4916      	ldr	r1, [pc, #88]	; (8008ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c4e:	4313      	orrs	r3, r2
 8008c50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f003 0308 	and.w	r3, r3, #8
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d009      	beq.n	8008c72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008c5e:	4b12      	ldr	r3, [pc, #72]	; (8008ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	00db      	lsls	r3, r3, #3
 8008c6c:	490e      	ldr	r1, [pc, #56]	; (8008ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008c72:	f000 f889 	bl	8008d88 <HAL_RCC_GetSysClockFreq>
 8008c76:	4602      	mov	r2, r0
 8008c78:	4b0b      	ldr	r3, [pc, #44]	; (8008ca8 <HAL_RCC_ClockConfig+0x1bc>)
 8008c7a:	689b      	ldr	r3, [r3, #8]
 8008c7c:	091b      	lsrs	r3, r3, #4
 8008c7e:	f003 030f 	and.w	r3, r3, #15
 8008c82:	490a      	ldr	r1, [pc, #40]	; (8008cac <HAL_RCC_ClockConfig+0x1c0>)
 8008c84:	5ccb      	ldrb	r3, [r1, r3]
 8008c86:	fa22 f303 	lsr.w	r3, r2, r3
 8008c8a:	4a09      	ldr	r2, [pc, #36]	; (8008cb0 <HAL_RCC_ClockConfig+0x1c4>)
 8008c8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008c8e:	4b09      	ldr	r3, [pc, #36]	; (8008cb4 <HAL_RCC_ClockConfig+0x1c8>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4618      	mov	r0, r3
 8008c94:	f7fc f9a8 	bl	8004fe8 <HAL_InitTick>

  return HAL_OK;
 8008c98:	2300      	movs	r3, #0
}
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	3710      	adds	r7, #16
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	bd80      	pop	{r7, pc}
 8008ca2:	bf00      	nop
 8008ca4:	40023c00 	.word	0x40023c00
 8008ca8:	40023800 	.word	0x40023800
 8008cac:	08021bc8 	.word	0x08021bc8
 8008cb0:	200002dc 	.word	0x200002dc
 8008cb4:	200002e0 	.word	0x200002e0

08008cb8 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b08c      	sub	sp, #48	; 0x30
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	60f8      	str	r0, [r7, #12]
 8008cc0:	60b9      	str	r1, [r7, #8]
 8008cc2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d129      	bne.n	8008d1e <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8008cca:	2300      	movs	r3, #0
 8008ccc:	61bb      	str	r3, [r7, #24]
 8008cce:	4b2b      	ldr	r3, [pc, #172]	; (8008d7c <HAL_RCC_MCOConfig+0xc4>)
 8008cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd2:	4a2a      	ldr	r2, [pc, #168]	; (8008d7c <HAL_RCC_MCOConfig+0xc4>)
 8008cd4:	f043 0301 	orr.w	r3, r3, #1
 8008cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8008cda:	4b28      	ldr	r3, [pc, #160]	; (8008d7c <HAL_RCC_MCOConfig+0xc4>)
 8008cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cde:	f003 0301 	and.w	r3, r3, #1
 8008ce2:	61bb      	str	r3, [r7, #24]
 8008ce4:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8008ce6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008cea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cec:	2302      	movs	r3, #2
 8008cee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008cf0:	2303      	movs	r3, #3
 8008cf2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8008cfc:	f107 031c 	add.w	r3, r7, #28
 8008d00:	4619      	mov	r1, r3
 8008d02:	481f      	ldr	r0, [pc, #124]	; (8008d80 <HAL_RCC_MCOConfig+0xc8>)
 8008d04:	f7ff f9b0 	bl	8008068 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8008d08:	4b1c      	ldr	r3, [pc, #112]	; (8008d7c <HAL_RCC_MCOConfig+0xc4>)
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8008d10:	68b9      	ldr	r1, [r7, #8]
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	430b      	orrs	r3, r1
 8008d16:	4919      	ldr	r1, [pc, #100]	; (8008d7c <HAL_RCC_MCOConfig+0xc4>)
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8008d1c:	e029      	b.n	8008d72 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8008d1e:	2300      	movs	r3, #0
 8008d20:	617b      	str	r3, [r7, #20]
 8008d22:	4b16      	ldr	r3, [pc, #88]	; (8008d7c <HAL_RCC_MCOConfig+0xc4>)
 8008d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d26:	4a15      	ldr	r2, [pc, #84]	; (8008d7c <HAL_RCC_MCOConfig+0xc4>)
 8008d28:	f043 0304 	orr.w	r3, r3, #4
 8008d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8008d2e:	4b13      	ldr	r3, [pc, #76]	; (8008d7c <HAL_RCC_MCOConfig+0xc4>)
 8008d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d32:	f003 0304 	and.w	r3, r3, #4
 8008d36:	617b      	str	r3, [r7, #20]
 8008d38:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8008d3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d40:	2302      	movs	r3, #2
 8008d42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008d44:	2303      	movs	r3, #3
 8008d46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8008d50:	f107 031c 	add.w	r3, r7, #28
 8008d54:	4619      	mov	r1, r3
 8008d56:	480b      	ldr	r0, [pc, #44]	; (8008d84 <HAL_RCC_MCOConfig+0xcc>)
 8008d58:	f7ff f986 	bl	8008068 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8008d5c:	4b07      	ldr	r3, [pc, #28]	; (8008d7c <HAL_RCC_MCOConfig+0xc4>)
 8008d5e:	689b      	ldr	r3, [r3, #8]
 8008d60:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	00d9      	lsls	r1, r3, #3
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	430b      	orrs	r3, r1
 8008d6c:	4903      	ldr	r1, [pc, #12]	; (8008d7c <HAL_RCC_MCOConfig+0xc4>)
 8008d6e:	4313      	orrs	r3, r2
 8008d70:	608b      	str	r3, [r1, #8]
}
 8008d72:	bf00      	nop
 8008d74:	3730      	adds	r7, #48	; 0x30
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
 8008d7a:	bf00      	nop
 8008d7c:	40023800 	.word	0x40023800
 8008d80:	40020000 	.word	0x40020000
 8008d84:	40020800 	.word	0x40020800

08008d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d8c:	b090      	sub	sp, #64	; 0x40
 8008d8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008d90:	2300      	movs	r3, #0
 8008d92:	637b      	str	r3, [r7, #52]	; 0x34
 8008d94:	2300      	movs	r3, #0
 8008d96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008d98:	2300      	movs	r3, #0
 8008d9a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008da0:	4b59      	ldr	r3, [pc, #356]	; (8008f08 <HAL_RCC_GetSysClockFreq+0x180>)
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	f003 030c 	and.w	r3, r3, #12
 8008da8:	2b08      	cmp	r3, #8
 8008daa:	d00d      	beq.n	8008dc8 <HAL_RCC_GetSysClockFreq+0x40>
 8008dac:	2b08      	cmp	r3, #8
 8008dae:	f200 80a1 	bhi.w	8008ef4 <HAL_RCC_GetSysClockFreq+0x16c>
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d002      	beq.n	8008dbc <HAL_RCC_GetSysClockFreq+0x34>
 8008db6:	2b04      	cmp	r3, #4
 8008db8:	d003      	beq.n	8008dc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8008dba:	e09b      	b.n	8008ef4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008dbc:	4b53      	ldr	r3, [pc, #332]	; (8008f0c <HAL_RCC_GetSysClockFreq+0x184>)
 8008dbe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008dc0:	e09b      	b.n	8008efa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008dc2:	4b53      	ldr	r3, [pc, #332]	; (8008f10 <HAL_RCC_GetSysClockFreq+0x188>)
 8008dc4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008dc6:	e098      	b.n	8008efa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008dc8:	4b4f      	ldr	r3, [pc, #316]	; (8008f08 <HAL_RCC_GetSysClockFreq+0x180>)
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008dd0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008dd2:	4b4d      	ldr	r3, [pc, #308]	; (8008f08 <HAL_RCC_GetSysClockFreq+0x180>)
 8008dd4:	685b      	ldr	r3, [r3, #4]
 8008dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d028      	beq.n	8008e30 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008dde:	4b4a      	ldr	r3, [pc, #296]	; (8008f08 <HAL_RCC_GetSysClockFreq+0x180>)
 8008de0:	685b      	ldr	r3, [r3, #4]
 8008de2:	099b      	lsrs	r3, r3, #6
 8008de4:	2200      	movs	r2, #0
 8008de6:	623b      	str	r3, [r7, #32]
 8008de8:	627a      	str	r2, [r7, #36]	; 0x24
 8008dea:	6a3b      	ldr	r3, [r7, #32]
 8008dec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008df0:	2100      	movs	r1, #0
 8008df2:	4b47      	ldr	r3, [pc, #284]	; (8008f10 <HAL_RCC_GetSysClockFreq+0x188>)
 8008df4:	fb03 f201 	mul.w	r2, r3, r1
 8008df8:	2300      	movs	r3, #0
 8008dfa:	fb00 f303 	mul.w	r3, r0, r3
 8008dfe:	4413      	add	r3, r2
 8008e00:	4a43      	ldr	r2, [pc, #268]	; (8008f10 <HAL_RCC_GetSysClockFreq+0x188>)
 8008e02:	fba0 1202 	umull	r1, r2, r0, r2
 8008e06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008e08:	460a      	mov	r2, r1
 8008e0a:	62ba      	str	r2, [r7, #40]	; 0x28
 8008e0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008e0e:	4413      	add	r3, r2
 8008e10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e14:	2200      	movs	r2, #0
 8008e16:	61bb      	str	r3, [r7, #24]
 8008e18:	61fa      	str	r2, [r7, #28]
 8008e1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008e22:	f7f7 fa2d 	bl	8000280 <__aeabi_uldivmod>
 8008e26:	4602      	mov	r2, r0
 8008e28:	460b      	mov	r3, r1
 8008e2a:	4613      	mov	r3, r2
 8008e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e2e:	e053      	b.n	8008ed8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e30:	4b35      	ldr	r3, [pc, #212]	; (8008f08 <HAL_RCC_GetSysClockFreq+0x180>)
 8008e32:	685b      	ldr	r3, [r3, #4]
 8008e34:	099b      	lsrs	r3, r3, #6
 8008e36:	2200      	movs	r2, #0
 8008e38:	613b      	str	r3, [r7, #16]
 8008e3a:	617a      	str	r2, [r7, #20]
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008e42:	f04f 0b00 	mov.w	fp, #0
 8008e46:	4652      	mov	r2, sl
 8008e48:	465b      	mov	r3, fp
 8008e4a:	f04f 0000 	mov.w	r0, #0
 8008e4e:	f04f 0100 	mov.w	r1, #0
 8008e52:	0159      	lsls	r1, r3, #5
 8008e54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008e58:	0150      	lsls	r0, r2, #5
 8008e5a:	4602      	mov	r2, r0
 8008e5c:	460b      	mov	r3, r1
 8008e5e:	ebb2 080a 	subs.w	r8, r2, sl
 8008e62:	eb63 090b 	sbc.w	r9, r3, fp
 8008e66:	f04f 0200 	mov.w	r2, #0
 8008e6a:	f04f 0300 	mov.w	r3, #0
 8008e6e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008e72:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008e76:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008e7a:	ebb2 0408 	subs.w	r4, r2, r8
 8008e7e:	eb63 0509 	sbc.w	r5, r3, r9
 8008e82:	f04f 0200 	mov.w	r2, #0
 8008e86:	f04f 0300 	mov.w	r3, #0
 8008e8a:	00eb      	lsls	r3, r5, #3
 8008e8c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008e90:	00e2      	lsls	r2, r4, #3
 8008e92:	4614      	mov	r4, r2
 8008e94:	461d      	mov	r5, r3
 8008e96:	eb14 030a 	adds.w	r3, r4, sl
 8008e9a:	603b      	str	r3, [r7, #0]
 8008e9c:	eb45 030b 	adc.w	r3, r5, fp
 8008ea0:	607b      	str	r3, [r7, #4]
 8008ea2:	f04f 0200 	mov.w	r2, #0
 8008ea6:	f04f 0300 	mov.w	r3, #0
 8008eaa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008eae:	4629      	mov	r1, r5
 8008eb0:	028b      	lsls	r3, r1, #10
 8008eb2:	4621      	mov	r1, r4
 8008eb4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008eb8:	4621      	mov	r1, r4
 8008eba:	028a      	lsls	r2, r1, #10
 8008ebc:	4610      	mov	r0, r2
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	60bb      	str	r3, [r7, #8]
 8008ec6:	60fa      	str	r2, [r7, #12]
 8008ec8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ecc:	f7f7 f9d8 	bl	8000280 <__aeabi_uldivmod>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	4613      	mov	r3, r2
 8008ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008ed8:	4b0b      	ldr	r3, [pc, #44]	; (8008f08 <HAL_RCC_GetSysClockFreq+0x180>)
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	0c1b      	lsrs	r3, r3, #16
 8008ede:	f003 0303 	and.w	r3, r3, #3
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	005b      	lsls	r3, r3, #1
 8008ee6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8008ee8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ef0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008ef2:	e002      	b.n	8008efa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008ef4:	4b05      	ldr	r3, [pc, #20]	; (8008f0c <HAL_RCC_GetSysClockFreq+0x184>)
 8008ef6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008ef8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008efc:	4618      	mov	r0, r3
 8008efe:	3740      	adds	r7, #64	; 0x40
 8008f00:	46bd      	mov	sp, r7
 8008f02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f06:	bf00      	nop
 8008f08:	40023800 	.word	0x40023800
 8008f0c:	00f42400 	.word	0x00f42400
 8008f10:	017d7840 	.word	0x017d7840

08008f14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f14:	b480      	push	{r7}
 8008f16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f18:	4b03      	ldr	r3, [pc, #12]	; (8008f28 <HAL_RCC_GetHCLKFreq+0x14>)
 8008f1a:	681b      	ldr	r3, [r3, #0]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr
 8008f26:	bf00      	nop
 8008f28:	200002dc 	.word	0x200002dc

08008f2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008f30:	f7ff fff0 	bl	8008f14 <HAL_RCC_GetHCLKFreq>
 8008f34:	4602      	mov	r2, r0
 8008f36:	4b05      	ldr	r3, [pc, #20]	; (8008f4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008f38:	689b      	ldr	r3, [r3, #8]
 8008f3a:	0a9b      	lsrs	r3, r3, #10
 8008f3c:	f003 0307 	and.w	r3, r3, #7
 8008f40:	4903      	ldr	r1, [pc, #12]	; (8008f50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008f42:	5ccb      	ldrb	r3, [r1, r3]
 8008f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	bd80      	pop	{r7, pc}
 8008f4c:	40023800 	.word	0x40023800
 8008f50:	08021bd8 	.word	0x08021bd8

08008f54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008f58:	f7ff ffdc 	bl	8008f14 <HAL_RCC_GetHCLKFreq>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	4b05      	ldr	r3, [pc, #20]	; (8008f74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	0b5b      	lsrs	r3, r3, #13
 8008f64:	f003 0307 	and.w	r3, r3, #7
 8008f68:	4903      	ldr	r1, [pc, #12]	; (8008f78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008f6a:	5ccb      	ldrb	r3, [r1, r3]
 8008f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	40023800 	.word	0x40023800
 8008f78:	08021bd8 	.word	0x08021bd8

08008f7c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	220f      	movs	r2, #15
 8008f8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008f8c:	4b12      	ldr	r3, [pc, #72]	; (8008fd8 <HAL_RCC_GetClockConfig+0x5c>)
 8008f8e:	689b      	ldr	r3, [r3, #8]
 8008f90:	f003 0203 	and.w	r2, r3, #3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008f98:	4b0f      	ldr	r3, [pc, #60]	; (8008fd8 <HAL_RCC_GetClockConfig+0x5c>)
 8008f9a:	689b      	ldr	r3, [r3, #8]
 8008f9c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008fa4:	4b0c      	ldr	r3, [pc, #48]	; (8008fd8 <HAL_RCC_GetClockConfig+0x5c>)
 8008fa6:	689b      	ldr	r3, [r3, #8]
 8008fa8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008fb0:	4b09      	ldr	r3, [pc, #36]	; (8008fd8 <HAL_RCC_GetClockConfig+0x5c>)
 8008fb2:	689b      	ldr	r3, [r3, #8]
 8008fb4:	08db      	lsrs	r3, r3, #3
 8008fb6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008fbe:	4b07      	ldr	r3, [pc, #28]	; (8008fdc <HAL_RCC_GetClockConfig+0x60>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f003 0207 	and.w	r2, r3, #7
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	601a      	str	r2, [r3, #0]
}
 8008fca:	bf00      	nop
 8008fcc:	370c      	adds	r7, #12
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr
 8008fd6:	bf00      	nop
 8008fd8:	40023800 	.word	0x40023800
 8008fdc:	40023c00 	.word	0x40023c00

08008fe0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	b082      	sub	sp, #8
 8008fe4:	af00      	add	r7, sp, #0
 8008fe6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d101      	bne.n	8008ff2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	e07b      	b.n	80090ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d108      	bne.n	800900c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009002:	d009      	beq.n	8009018 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2200      	movs	r2, #0
 8009008:	61da      	str	r2, [r3, #28]
 800900a:	e005      	b.n	8009018 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2200      	movs	r2, #0
 800901c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009024:	b2db      	uxtb	r3, r3
 8009026:	2b00      	cmp	r3, #0
 8009028:	d106      	bne.n	8009038 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2200      	movs	r2, #0
 800902e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	f7fb fe1e 	bl	8004c74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2202      	movs	r2, #2
 800903c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	681a      	ldr	r2, [r3, #0]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800904e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	685b      	ldr	r3, [r3, #4]
 8009054:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009060:	431a      	orrs	r2, r3
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800906a:	431a      	orrs	r2, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	691b      	ldr	r3, [r3, #16]
 8009070:	f003 0302 	and.w	r3, r3, #2
 8009074:	431a      	orrs	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	695b      	ldr	r3, [r3, #20]
 800907a:	f003 0301 	and.w	r3, r3, #1
 800907e:	431a      	orrs	r2, r3
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	699b      	ldr	r3, [r3, #24]
 8009084:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009088:	431a      	orrs	r2, r3
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	69db      	ldr	r3, [r3, #28]
 800908e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009092:	431a      	orrs	r2, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6a1b      	ldr	r3, [r3, #32]
 8009098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800909c:	ea42 0103 	orr.w	r1, r2, r3
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	430a      	orrs	r2, r1
 80090ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	699b      	ldr	r3, [r3, #24]
 80090b4:	0c1b      	lsrs	r3, r3, #16
 80090b6:	f003 0104 	and.w	r1, r3, #4
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090be:	f003 0210 	and.w	r2, r3, #16
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	430a      	orrs	r2, r1
 80090c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	69da      	ldr	r2, [r3, #28]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80090d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2200      	movs	r2, #0
 80090de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2201      	movs	r2, #1
 80090e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80090e8:	2300      	movs	r3, #0
}
 80090ea:	4618      	mov	r0, r3
 80090ec:	3708      	adds	r7, #8
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bd80      	pop	{r7, pc}

080090f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80090f2:	b580      	push	{r7, lr}
 80090f4:	b088      	sub	sp, #32
 80090f6:	af00      	add	r7, sp, #0
 80090f8:	60f8      	str	r0, [r7, #12]
 80090fa:	60b9      	str	r1, [r7, #8]
 80090fc:	603b      	str	r3, [r7, #0]
 80090fe:	4613      	mov	r3, r2
 8009100:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009102:	2300      	movs	r3, #0
 8009104:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800910c:	2b01      	cmp	r3, #1
 800910e:	d101      	bne.n	8009114 <HAL_SPI_Transmit+0x22>
 8009110:	2302      	movs	r3, #2
 8009112:	e126      	b.n	8009362 <HAL_SPI_Transmit+0x270>
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2201      	movs	r2, #1
 8009118:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800911c:	f7fc fc6a 	bl	80059f4 <HAL_GetTick>
 8009120:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009122:	88fb      	ldrh	r3, [r7, #6]
 8009124:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800912c:	b2db      	uxtb	r3, r3
 800912e:	2b01      	cmp	r3, #1
 8009130:	d002      	beq.n	8009138 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009132:	2302      	movs	r3, #2
 8009134:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009136:	e10b      	b.n	8009350 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	2b00      	cmp	r3, #0
 800913c:	d002      	beq.n	8009144 <HAL_SPI_Transmit+0x52>
 800913e:	88fb      	ldrh	r3, [r7, #6]
 8009140:	2b00      	cmp	r3, #0
 8009142:	d102      	bne.n	800914a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009144:	2301      	movs	r3, #1
 8009146:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009148:	e102      	b.n	8009350 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	2203      	movs	r2, #3
 800914e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	2200      	movs	r2, #0
 8009156:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	68ba      	ldr	r2, [r7, #8]
 800915c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	88fa      	ldrh	r2, [r7, #6]
 8009162:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	88fa      	ldrh	r2, [r7, #6]
 8009168:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2200      	movs	r2, #0
 800916e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	2200      	movs	r2, #0
 8009174:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	2200      	movs	r2, #0
 800917a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2200      	movs	r2, #0
 8009180:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	2200      	movs	r2, #0
 8009186:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009190:	d10f      	bne.n	80091b2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	681a      	ldr	r2, [r3, #0]
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	681a      	ldr	r2, [r3, #0]
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80091b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091bc:	2b40      	cmp	r3, #64	; 0x40
 80091be:	d007      	beq.n	80091d0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80091ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	68db      	ldr	r3, [r3, #12]
 80091d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80091d8:	d14b      	bne.n	8009272 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	685b      	ldr	r3, [r3, #4]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d002      	beq.n	80091e8 <HAL_SPI_Transmit+0xf6>
 80091e2:	8afb      	ldrh	r3, [r7, #22]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d13e      	bne.n	8009266 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ec:	881a      	ldrh	r2, [r3, #0]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091f8:	1c9a      	adds	r2, r3, #2
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009202:	b29b      	uxth	r3, r3
 8009204:	3b01      	subs	r3, #1
 8009206:	b29a      	uxth	r2, r3
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800920c:	e02b      	b.n	8009266 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	f003 0302 	and.w	r3, r3, #2
 8009218:	2b02      	cmp	r3, #2
 800921a:	d112      	bne.n	8009242 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009220:	881a      	ldrh	r2, [r3, #0]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800922c:	1c9a      	adds	r2, r3, #2
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009236:	b29b      	uxth	r3, r3
 8009238:	3b01      	subs	r3, #1
 800923a:	b29a      	uxth	r2, r3
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	86da      	strh	r2, [r3, #54]	; 0x36
 8009240:	e011      	b.n	8009266 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009242:	f7fc fbd7 	bl	80059f4 <HAL_GetTick>
 8009246:	4602      	mov	r2, r0
 8009248:	69bb      	ldr	r3, [r7, #24]
 800924a:	1ad3      	subs	r3, r2, r3
 800924c:	683a      	ldr	r2, [r7, #0]
 800924e:	429a      	cmp	r2, r3
 8009250:	d803      	bhi.n	800925a <HAL_SPI_Transmit+0x168>
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009258:	d102      	bne.n	8009260 <HAL_SPI_Transmit+0x16e>
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d102      	bne.n	8009266 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8009260:	2303      	movs	r3, #3
 8009262:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009264:	e074      	b.n	8009350 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800926a:	b29b      	uxth	r3, r3
 800926c:	2b00      	cmp	r3, #0
 800926e:	d1ce      	bne.n	800920e <HAL_SPI_Transmit+0x11c>
 8009270:	e04c      	b.n	800930c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d002      	beq.n	8009280 <HAL_SPI_Transmit+0x18e>
 800927a:	8afb      	ldrh	r3, [r7, #22]
 800927c:	2b01      	cmp	r3, #1
 800927e:	d140      	bne.n	8009302 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	330c      	adds	r3, #12
 800928a:	7812      	ldrb	r2, [r2, #0]
 800928c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009292:	1c5a      	adds	r2, r3, #1
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800929c:	b29b      	uxth	r3, r3
 800929e:	3b01      	subs	r3, #1
 80092a0:	b29a      	uxth	r2, r3
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80092a6:	e02c      	b.n	8009302 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	689b      	ldr	r3, [r3, #8]
 80092ae:	f003 0302 	and.w	r3, r3, #2
 80092b2:	2b02      	cmp	r3, #2
 80092b4:	d113      	bne.n	80092de <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	330c      	adds	r3, #12
 80092c0:	7812      	ldrb	r2, [r2, #0]
 80092c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092c8:	1c5a      	adds	r2, r3, #1
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80092d2:	b29b      	uxth	r3, r3
 80092d4:	3b01      	subs	r3, #1
 80092d6:	b29a      	uxth	r2, r3
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	86da      	strh	r2, [r3, #54]	; 0x36
 80092dc:	e011      	b.n	8009302 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80092de:	f7fc fb89 	bl	80059f4 <HAL_GetTick>
 80092e2:	4602      	mov	r2, r0
 80092e4:	69bb      	ldr	r3, [r7, #24]
 80092e6:	1ad3      	subs	r3, r2, r3
 80092e8:	683a      	ldr	r2, [r7, #0]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d803      	bhi.n	80092f6 <HAL_SPI_Transmit+0x204>
 80092ee:	683b      	ldr	r3, [r7, #0]
 80092f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092f4:	d102      	bne.n	80092fc <HAL_SPI_Transmit+0x20a>
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d102      	bne.n	8009302 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80092fc:	2303      	movs	r3, #3
 80092fe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009300:	e026      	b.n	8009350 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009306:	b29b      	uxth	r3, r3
 8009308:	2b00      	cmp	r3, #0
 800930a:	d1cd      	bne.n	80092a8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800930c:	69ba      	ldr	r2, [r7, #24]
 800930e:	6839      	ldr	r1, [r7, #0]
 8009310:	68f8      	ldr	r0, [r7, #12]
 8009312:	f000 fbcb 	bl	8009aac <SPI_EndRxTxTransaction>
 8009316:	4603      	mov	r3, r0
 8009318:	2b00      	cmp	r3, #0
 800931a:	d002      	beq.n	8009322 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2220      	movs	r2, #32
 8009320:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d10a      	bne.n	8009340 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800932a:	2300      	movs	r3, #0
 800932c:	613b      	str	r3, [r7, #16]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	68db      	ldr	r3, [r3, #12]
 8009334:	613b      	str	r3, [r7, #16]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	613b      	str	r3, [r7, #16]
 800933e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009344:	2b00      	cmp	r3, #0
 8009346:	d002      	beq.n	800934e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8009348:	2301      	movs	r3, #1
 800934a:	77fb      	strb	r3, [r7, #31]
 800934c:	e000      	b.n	8009350 <HAL_SPI_Transmit+0x25e>
  }

error:
 800934e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2201      	movs	r2, #1
 8009354:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2200      	movs	r2, #0
 800935c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009360:	7ffb      	ldrb	r3, [r7, #31]
}
 8009362:	4618      	mov	r0, r3
 8009364:	3720      	adds	r7, #32
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}

0800936a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800936a:	b580      	push	{r7, lr}
 800936c:	b088      	sub	sp, #32
 800936e:	af02      	add	r7, sp, #8
 8009370:	60f8      	str	r0, [r7, #12]
 8009372:	60b9      	str	r1, [r7, #8]
 8009374:	603b      	str	r3, [r7, #0]
 8009376:	4613      	mov	r3, r2
 8009378:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800937a:	2300      	movs	r3, #0
 800937c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009386:	d112      	bne.n	80093ae <HAL_SPI_Receive+0x44>
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d10e      	bne.n	80093ae <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	2204      	movs	r2, #4
 8009394:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8009398:	88fa      	ldrh	r2, [r7, #6]
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	9300      	str	r3, [sp, #0]
 800939e:	4613      	mov	r3, r2
 80093a0:	68ba      	ldr	r2, [r7, #8]
 80093a2:	68b9      	ldr	r1, [r7, #8]
 80093a4:	68f8      	ldr	r0, [r7, #12]
 80093a6:	f000 f8f1 	bl	800958c <HAL_SPI_TransmitReceive>
 80093aa:	4603      	mov	r3, r0
 80093ac:	e0ea      	b.n	8009584 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d101      	bne.n	80093bc <HAL_SPI_Receive+0x52>
 80093b8:	2302      	movs	r3, #2
 80093ba:	e0e3      	b.n	8009584 <HAL_SPI_Receive+0x21a>
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2201      	movs	r2, #1
 80093c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80093c4:	f7fc fb16 	bl	80059f4 <HAL_GetTick>
 80093c8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80093d0:	b2db      	uxtb	r3, r3
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	d002      	beq.n	80093dc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80093d6:	2302      	movs	r3, #2
 80093d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 80093da:	e0ca      	b.n	8009572 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d002      	beq.n	80093e8 <HAL_SPI_Receive+0x7e>
 80093e2:	88fb      	ldrh	r3, [r7, #6]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d102      	bne.n	80093ee <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80093e8:	2301      	movs	r3, #1
 80093ea:	75fb      	strb	r3, [r7, #23]
    goto error;
 80093ec:	e0c1      	b.n	8009572 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2204      	movs	r2, #4
 80093f2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2200      	movs	r2, #0
 80093fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	68ba      	ldr	r2, [r7, #8]
 8009400:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	88fa      	ldrh	r2, [r7, #6]
 8009406:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	88fa      	ldrh	r2, [r7, #6]
 800940c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2200      	movs	r2, #0
 8009412:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2200      	movs	r2, #0
 8009418:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2200      	movs	r2, #0
 800941e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2200      	movs	r2, #0
 8009424:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2200      	movs	r2, #0
 800942a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	689b      	ldr	r3, [r3, #8]
 8009430:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009434:	d10f      	bne.n	8009456 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	681a      	ldr	r2, [r3, #0]
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009444:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	681a      	ldr	r2, [r3, #0]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009454:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009460:	2b40      	cmp	r3, #64	; 0x40
 8009462:	d007      	beq.n	8009474 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009472:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	68db      	ldr	r3, [r3, #12]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d162      	bne.n	8009542 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800947c:	e02e      	b.n	80094dc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	f003 0301 	and.w	r3, r3, #1
 8009488:	2b01      	cmp	r3, #1
 800948a:	d115      	bne.n	80094b8 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	f103 020c 	add.w	r2, r3, #12
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009498:	7812      	ldrb	r2, [r2, #0]
 800949a:	b2d2      	uxtb	r2, r2
 800949c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a2:	1c5a      	adds	r2, r3, #1
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094ac:	b29b      	uxth	r3, r3
 80094ae:	3b01      	subs	r3, #1
 80094b0:	b29a      	uxth	r2, r3
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80094b6:	e011      	b.n	80094dc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094b8:	f7fc fa9c 	bl	80059f4 <HAL_GetTick>
 80094bc:	4602      	mov	r2, r0
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	1ad3      	subs	r3, r2, r3
 80094c2:	683a      	ldr	r2, [r7, #0]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d803      	bhi.n	80094d0 <HAL_SPI_Receive+0x166>
 80094c8:	683b      	ldr	r3, [r7, #0]
 80094ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ce:	d102      	bne.n	80094d6 <HAL_SPI_Receive+0x16c>
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d102      	bne.n	80094dc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80094d6:	2303      	movs	r3, #3
 80094d8:	75fb      	strb	r3, [r7, #23]
          goto error;
 80094da:	e04a      	b.n	8009572 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094e0:	b29b      	uxth	r3, r3
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d1cb      	bne.n	800947e <HAL_SPI_Receive+0x114>
 80094e6:	e031      	b.n	800954c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	f003 0301 	and.w	r3, r3, #1
 80094f2:	2b01      	cmp	r3, #1
 80094f4:	d113      	bne.n	800951e <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	68da      	ldr	r2, [r3, #12]
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009500:	b292      	uxth	r2, r2
 8009502:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009508:	1c9a      	adds	r2, r3, #2
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009512:	b29b      	uxth	r3, r3
 8009514:	3b01      	subs	r3, #1
 8009516:	b29a      	uxth	r2, r3
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800951c:	e011      	b.n	8009542 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800951e:	f7fc fa69 	bl	80059f4 <HAL_GetTick>
 8009522:	4602      	mov	r2, r0
 8009524:	693b      	ldr	r3, [r7, #16]
 8009526:	1ad3      	subs	r3, r2, r3
 8009528:	683a      	ldr	r2, [r7, #0]
 800952a:	429a      	cmp	r2, r3
 800952c:	d803      	bhi.n	8009536 <HAL_SPI_Receive+0x1cc>
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009534:	d102      	bne.n	800953c <HAL_SPI_Receive+0x1d2>
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	2b00      	cmp	r3, #0
 800953a:	d102      	bne.n	8009542 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800953c:	2303      	movs	r3, #3
 800953e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009540:	e017      	b.n	8009572 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009546:	b29b      	uxth	r3, r3
 8009548:	2b00      	cmp	r3, #0
 800954a:	d1cd      	bne.n	80094e8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800954c:	693a      	ldr	r2, [r7, #16]
 800954e:	6839      	ldr	r1, [r7, #0]
 8009550:	68f8      	ldr	r0, [r7, #12]
 8009552:	f000 fa45 	bl	80099e0 <SPI_EndRxTransaction>
 8009556:	4603      	mov	r3, r0
 8009558:	2b00      	cmp	r3, #0
 800955a:	d002      	beq.n	8009562 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	2220      	movs	r2, #32
 8009560:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009566:	2b00      	cmp	r3, #0
 8009568:	d002      	beq.n	8009570 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800956a:	2301      	movs	r3, #1
 800956c:	75fb      	strb	r3, [r7, #23]
 800956e:	e000      	b.n	8009572 <HAL_SPI_Receive+0x208>
  }

error :
 8009570:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2201      	movs	r2, #1
 8009576:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2200      	movs	r2, #0
 800957e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009582:	7dfb      	ldrb	r3, [r7, #23]
}
 8009584:	4618      	mov	r0, r3
 8009586:	3718      	adds	r7, #24
 8009588:	46bd      	mov	sp, r7
 800958a:	bd80      	pop	{r7, pc}

0800958c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b08c      	sub	sp, #48	; 0x30
 8009590:	af00      	add	r7, sp, #0
 8009592:	60f8      	str	r0, [r7, #12]
 8009594:	60b9      	str	r1, [r7, #8]
 8009596:	607a      	str	r2, [r7, #4]
 8009598:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800959a:	2301      	movs	r3, #1
 800959c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800959e:	2300      	movs	r3, #0
 80095a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d101      	bne.n	80095b2 <HAL_SPI_TransmitReceive+0x26>
 80095ae:	2302      	movs	r3, #2
 80095b0:	e18a      	b.n	80098c8 <HAL_SPI_TransmitReceive+0x33c>
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2201      	movs	r2, #1
 80095b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80095ba:	f7fc fa1b 	bl	80059f4 <HAL_GetTick>
 80095be:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80095c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80095d0:	887b      	ldrh	r3, [r7, #2]
 80095d2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80095d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d00f      	beq.n	80095fc <HAL_SPI_TransmitReceive+0x70>
 80095dc:	69fb      	ldr	r3, [r7, #28]
 80095de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80095e2:	d107      	bne.n	80095f4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d103      	bne.n	80095f4 <HAL_SPI_TransmitReceive+0x68>
 80095ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80095f0:	2b04      	cmp	r3, #4
 80095f2:	d003      	beq.n	80095fc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80095f4:	2302      	movs	r3, #2
 80095f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80095fa:	e15b      	b.n	80098b4 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d005      	beq.n	800960e <HAL_SPI_TransmitReceive+0x82>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d002      	beq.n	800960e <HAL_SPI_TransmitReceive+0x82>
 8009608:	887b      	ldrh	r3, [r7, #2]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d103      	bne.n	8009616 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800960e:	2301      	movs	r3, #1
 8009610:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009614:	e14e      	b.n	80098b4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800961c:	b2db      	uxtb	r3, r3
 800961e:	2b04      	cmp	r3, #4
 8009620:	d003      	beq.n	800962a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2205      	movs	r2, #5
 8009626:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	2200      	movs	r2, #0
 800962e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	887a      	ldrh	r2, [r7, #2]
 800963a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	887a      	ldrh	r2, [r7, #2]
 8009640:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	68ba      	ldr	r2, [r7, #8]
 8009646:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	887a      	ldrh	r2, [r7, #2]
 800964c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	887a      	ldrh	r2, [r7, #2]
 8009652:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	2200      	movs	r2, #0
 8009658:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2200      	movs	r2, #0
 800965e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800966a:	2b40      	cmp	r3, #64	; 0x40
 800966c:	d007      	beq.n	800967e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800967c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	68db      	ldr	r3, [r3, #12]
 8009682:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009686:	d178      	bne.n	800977a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	685b      	ldr	r3, [r3, #4]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d002      	beq.n	8009696 <HAL_SPI_TransmitReceive+0x10a>
 8009690:	8b7b      	ldrh	r3, [r7, #26]
 8009692:	2b01      	cmp	r3, #1
 8009694:	d166      	bne.n	8009764 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800969a:	881a      	ldrh	r2, [r3, #0]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096a6:	1c9a      	adds	r2, r3, #2
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096b0:	b29b      	uxth	r3, r3
 80096b2:	3b01      	subs	r3, #1
 80096b4:	b29a      	uxth	r2, r3
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80096ba:	e053      	b.n	8009764 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	f003 0302 	and.w	r3, r3, #2
 80096c6:	2b02      	cmp	r3, #2
 80096c8:	d11b      	bne.n	8009702 <HAL_SPI_TransmitReceive+0x176>
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096ce:	b29b      	uxth	r3, r3
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d016      	beq.n	8009702 <HAL_SPI_TransmitReceive+0x176>
 80096d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d113      	bne.n	8009702 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096de:	881a      	ldrh	r2, [r3, #0]
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ea:	1c9a      	adds	r2, r3, #2
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80096f4:	b29b      	uxth	r3, r3
 80096f6:	3b01      	subs	r3, #1
 80096f8:	b29a      	uxth	r2, r3
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80096fe:	2300      	movs	r3, #0
 8009700:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	689b      	ldr	r3, [r3, #8]
 8009708:	f003 0301 	and.w	r3, r3, #1
 800970c:	2b01      	cmp	r3, #1
 800970e:	d119      	bne.n	8009744 <HAL_SPI_TransmitReceive+0x1b8>
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009714:	b29b      	uxth	r3, r3
 8009716:	2b00      	cmp	r3, #0
 8009718:	d014      	beq.n	8009744 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68da      	ldr	r2, [r3, #12]
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009724:	b292      	uxth	r2, r2
 8009726:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800972c:	1c9a      	adds	r2, r3, #2
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009736:	b29b      	uxth	r3, r3
 8009738:	3b01      	subs	r3, #1
 800973a:	b29a      	uxth	r2, r3
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009740:	2301      	movs	r3, #1
 8009742:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009744:	f7fc f956 	bl	80059f4 <HAL_GetTick>
 8009748:	4602      	mov	r2, r0
 800974a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800974c:	1ad3      	subs	r3, r2, r3
 800974e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009750:	429a      	cmp	r2, r3
 8009752:	d807      	bhi.n	8009764 <HAL_SPI_TransmitReceive+0x1d8>
 8009754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800975a:	d003      	beq.n	8009764 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800975c:	2303      	movs	r3, #3
 800975e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009762:	e0a7      	b.n	80098b4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009768:	b29b      	uxth	r3, r3
 800976a:	2b00      	cmp	r3, #0
 800976c:	d1a6      	bne.n	80096bc <HAL_SPI_TransmitReceive+0x130>
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009772:	b29b      	uxth	r3, r3
 8009774:	2b00      	cmp	r3, #0
 8009776:	d1a1      	bne.n	80096bc <HAL_SPI_TransmitReceive+0x130>
 8009778:	e07c      	b.n	8009874 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d002      	beq.n	8009788 <HAL_SPI_TransmitReceive+0x1fc>
 8009782:	8b7b      	ldrh	r3, [r7, #26]
 8009784:	2b01      	cmp	r3, #1
 8009786:	d16b      	bne.n	8009860 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	330c      	adds	r3, #12
 8009792:	7812      	ldrb	r2, [r2, #0]
 8009794:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800979a:	1c5a      	adds	r2, r3, #1
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097a4:	b29b      	uxth	r3, r3
 80097a6:	3b01      	subs	r3, #1
 80097a8:	b29a      	uxth	r2, r3
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80097ae:	e057      	b.n	8009860 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	689b      	ldr	r3, [r3, #8]
 80097b6:	f003 0302 	and.w	r3, r3, #2
 80097ba:	2b02      	cmp	r3, #2
 80097bc:	d11c      	bne.n	80097f8 <HAL_SPI_TransmitReceive+0x26c>
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d017      	beq.n	80097f8 <HAL_SPI_TransmitReceive+0x26c>
 80097c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ca:	2b01      	cmp	r3, #1
 80097cc:	d114      	bne.n	80097f8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	330c      	adds	r3, #12
 80097d8:	7812      	ldrb	r2, [r2, #0]
 80097da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097e0:	1c5a      	adds	r2, r3, #1
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80097ea:	b29b      	uxth	r3, r3
 80097ec:	3b01      	subs	r3, #1
 80097ee:	b29a      	uxth	r2, r3
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80097f4:	2300      	movs	r3, #0
 80097f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	f003 0301 	and.w	r3, r3, #1
 8009802:	2b01      	cmp	r3, #1
 8009804:	d119      	bne.n	800983a <HAL_SPI_TransmitReceive+0x2ae>
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800980a:	b29b      	uxth	r3, r3
 800980c:	2b00      	cmp	r3, #0
 800980e:	d014      	beq.n	800983a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	68da      	ldr	r2, [r3, #12]
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800981a:	b2d2      	uxtb	r2, r2
 800981c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009822:	1c5a      	adds	r2, r3, #1
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800982c:	b29b      	uxth	r3, r3
 800982e:	3b01      	subs	r3, #1
 8009830:	b29a      	uxth	r2, r3
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009836:	2301      	movs	r3, #1
 8009838:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800983a:	f7fc f8db 	bl	80059f4 <HAL_GetTick>
 800983e:	4602      	mov	r2, r0
 8009840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009842:	1ad3      	subs	r3, r2, r3
 8009844:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009846:	429a      	cmp	r2, r3
 8009848:	d803      	bhi.n	8009852 <HAL_SPI_TransmitReceive+0x2c6>
 800984a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800984c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009850:	d102      	bne.n	8009858 <HAL_SPI_TransmitReceive+0x2cc>
 8009852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009854:	2b00      	cmp	r3, #0
 8009856:	d103      	bne.n	8009860 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009858:	2303      	movs	r3, #3
 800985a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800985e:	e029      	b.n	80098b4 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009864:	b29b      	uxth	r3, r3
 8009866:	2b00      	cmp	r3, #0
 8009868:	d1a2      	bne.n	80097b0 <HAL_SPI_TransmitReceive+0x224>
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800986e:	b29b      	uxth	r3, r3
 8009870:	2b00      	cmp	r3, #0
 8009872:	d19d      	bne.n	80097b0 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009876:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009878:	68f8      	ldr	r0, [r7, #12]
 800987a:	f000 f917 	bl	8009aac <SPI_EndRxTxTransaction>
 800987e:	4603      	mov	r3, r0
 8009880:	2b00      	cmp	r3, #0
 8009882:	d006      	beq.n	8009892 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009884:	2301      	movs	r3, #1
 8009886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	2220      	movs	r2, #32
 800988e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009890:	e010      	b.n	80098b4 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	689b      	ldr	r3, [r3, #8]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d10b      	bne.n	80098b2 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800989a:	2300      	movs	r3, #0
 800989c:	617b      	str	r3, [r7, #20]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	68db      	ldr	r3, [r3, #12]
 80098a4:	617b      	str	r3, [r7, #20]
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	689b      	ldr	r3, [r3, #8]
 80098ac:	617b      	str	r3, [r7, #20]
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	e000      	b.n	80098b4 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80098b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2201      	movs	r2, #1
 80098b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	2200      	movs	r2, #0
 80098c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80098c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80098c8:	4618      	mov	r0, r3
 80098ca:	3730      	adds	r7, #48	; 0x30
 80098cc:	46bd      	mov	sp, r7
 80098ce:	bd80      	pop	{r7, pc}

080098d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b088      	sub	sp, #32
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	603b      	str	r3, [r7, #0]
 80098dc:	4613      	mov	r3, r2
 80098de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80098e0:	f7fc f888 	bl	80059f4 <HAL_GetTick>
 80098e4:	4602      	mov	r2, r0
 80098e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098e8:	1a9b      	subs	r3, r3, r2
 80098ea:	683a      	ldr	r2, [r7, #0]
 80098ec:	4413      	add	r3, r2
 80098ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80098f0:	f7fc f880 	bl	80059f4 <HAL_GetTick>
 80098f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80098f6:	4b39      	ldr	r3, [pc, #228]	; (80099dc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	015b      	lsls	r3, r3, #5
 80098fc:	0d1b      	lsrs	r3, r3, #20
 80098fe:	69fa      	ldr	r2, [r7, #28]
 8009900:	fb02 f303 	mul.w	r3, r2, r3
 8009904:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009906:	e054      	b.n	80099b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800990e:	d050      	beq.n	80099b2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8009910:	f7fc f870 	bl	80059f4 <HAL_GetTick>
 8009914:	4602      	mov	r2, r0
 8009916:	69bb      	ldr	r3, [r7, #24]
 8009918:	1ad3      	subs	r3, r2, r3
 800991a:	69fa      	ldr	r2, [r7, #28]
 800991c:	429a      	cmp	r2, r3
 800991e:	d902      	bls.n	8009926 <SPI_WaitFlagStateUntilTimeout+0x56>
 8009920:	69fb      	ldr	r3, [r7, #28]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d13d      	bne.n	80099a2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	685a      	ldr	r2, [r3, #4]
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009934:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800993e:	d111      	bne.n	8009964 <SPI_WaitFlagStateUntilTimeout+0x94>
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	689b      	ldr	r3, [r3, #8]
 8009944:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009948:	d004      	beq.n	8009954 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009952:	d107      	bne.n	8009964 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009962:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009968:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800996c:	d10f      	bne.n	800998e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800997c:	601a      	str	r2, [r3, #0]
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	681a      	ldr	r2, [r3, #0]
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800998c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	2201      	movs	r2, #1
 8009992:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	2200      	movs	r2, #0
 800999a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800999e:	2303      	movs	r3, #3
 80099a0:	e017      	b.n	80099d2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d101      	bne.n	80099ac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80099a8:	2300      	movs	r3, #0
 80099aa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	3b01      	subs	r3, #1
 80099b0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	689a      	ldr	r2, [r3, #8]
 80099b8:	68bb      	ldr	r3, [r7, #8]
 80099ba:	4013      	ands	r3, r2
 80099bc:	68ba      	ldr	r2, [r7, #8]
 80099be:	429a      	cmp	r2, r3
 80099c0:	bf0c      	ite	eq
 80099c2:	2301      	moveq	r3, #1
 80099c4:	2300      	movne	r3, #0
 80099c6:	b2db      	uxtb	r3, r3
 80099c8:	461a      	mov	r2, r3
 80099ca:	79fb      	ldrb	r3, [r7, #7]
 80099cc:	429a      	cmp	r2, r3
 80099ce:	d19b      	bne.n	8009908 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80099d0:	2300      	movs	r3, #0
}
 80099d2:	4618      	mov	r0, r3
 80099d4:	3720      	adds	r7, #32
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd80      	pop	{r7, pc}
 80099da:	bf00      	nop
 80099dc:	200002dc 	.word	0x200002dc

080099e0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b086      	sub	sp, #24
 80099e4:	af02      	add	r7, sp, #8
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80099f4:	d111      	bne.n	8009a1a <SPI_EndRxTransaction+0x3a>
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	689b      	ldr	r3, [r3, #8]
 80099fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80099fe:	d004      	beq.n	8009a0a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a08:	d107      	bne.n	8009a1a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a18:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009a22:	d12a      	bne.n	8009a7a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a2c:	d012      	beq.n	8009a54 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	9300      	str	r3, [sp, #0]
 8009a32:	68bb      	ldr	r3, [r7, #8]
 8009a34:	2200      	movs	r2, #0
 8009a36:	2180      	movs	r1, #128	; 0x80
 8009a38:	68f8      	ldr	r0, [r7, #12]
 8009a3a:	f7ff ff49 	bl	80098d0 <SPI_WaitFlagStateUntilTimeout>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d02d      	beq.n	8009aa0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a48:	f043 0220 	orr.w	r2, r3, #32
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009a50:	2303      	movs	r3, #3
 8009a52:	e026      	b.n	8009aa2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	9300      	str	r3, [sp, #0]
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	2101      	movs	r1, #1
 8009a5e:	68f8      	ldr	r0, [r7, #12]
 8009a60:	f7ff ff36 	bl	80098d0 <SPI_WaitFlagStateUntilTimeout>
 8009a64:	4603      	mov	r3, r0
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d01a      	beq.n	8009aa0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a6e:	f043 0220 	orr.w	r2, r3, #32
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009a76:	2303      	movs	r3, #3
 8009a78:	e013      	b.n	8009aa2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	9300      	str	r3, [sp, #0]
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	2200      	movs	r2, #0
 8009a82:	2101      	movs	r1, #1
 8009a84:	68f8      	ldr	r0, [r7, #12]
 8009a86:	f7ff ff23 	bl	80098d0 <SPI_WaitFlagStateUntilTimeout>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d007      	beq.n	8009aa0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009a90:	68fb      	ldr	r3, [r7, #12]
 8009a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a94:	f043 0220 	orr.w	r2, r3, #32
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009a9c:	2303      	movs	r3, #3
 8009a9e:	e000      	b.n	8009aa2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009aa0:	2300      	movs	r3, #0
}
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	3710      	adds	r7, #16
 8009aa6:	46bd      	mov	sp, r7
 8009aa8:	bd80      	pop	{r7, pc}
	...

08009aac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b088      	sub	sp, #32
 8009ab0:	af02      	add	r7, sp, #8
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	60b9      	str	r1, [r7, #8]
 8009ab6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009ab8:	4b1b      	ldr	r3, [pc, #108]	; (8009b28 <SPI_EndRxTxTransaction+0x7c>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a1b      	ldr	r2, [pc, #108]	; (8009b2c <SPI_EndRxTxTransaction+0x80>)
 8009abe:	fba2 2303 	umull	r2, r3, r2, r3
 8009ac2:	0d5b      	lsrs	r3, r3, #21
 8009ac4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009ac8:	fb02 f303 	mul.w	r3, r2, r3
 8009acc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009ad6:	d112      	bne.n	8009afe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	9300      	str	r3, [sp, #0]
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	2200      	movs	r2, #0
 8009ae0:	2180      	movs	r1, #128	; 0x80
 8009ae2:	68f8      	ldr	r0, [r7, #12]
 8009ae4:	f7ff fef4 	bl	80098d0 <SPI_WaitFlagStateUntilTimeout>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d016      	beq.n	8009b1c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009af2:	f043 0220 	orr.w	r2, r3, #32
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009afa:	2303      	movs	r3, #3
 8009afc:	e00f      	b.n	8009b1e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009afe:	697b      	ldr	r3, [r7, #20]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d00a      	beq.n	8009b1a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	3b01      	subs	r3, #1
 8009b08:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b14:	2b80      	cmp	r3, #128	; 0x80
 8009b16:	d0f2      	beq.n	8009afe <SPI_EndRxTxTransaction+0x52>
 8009b18:	e000      	b.n	8009b1c <SPI_EndRxTxTransaction+0x70>
        break;
 8009b1a:	bf00      	nop
  }

  return HAL_OK;
 8009b1c:	2300      	movs	r3, #0
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	3718      	adds	r7, #24
 8009b22:	46bd      	mov	sp, r7
 8009b24:	bd80      	pop	{r7, pc}
 8009b26:	bf00      	nop
 8009b28:	200002dc 	.word	0x200002dc
 8009b2c:	165e9f81 	.word	0x165e9f81

08009b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d101      	bne.n	8009b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	e041      	b.n	8009bc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b48:	b2db      	uxtb	r3, r3
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d106      	bne.n	8009b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009b56:	6878      	ldr	r0, [r7, #4]
 8009b58:	f7fb f8d4 	bl	8004d04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2202      	movs	r2, #2
 8009b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	3304      	adds	r3, #4
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	4610      	mov	r0, r2
 8009b70:	f000 fafe 	bl	800a170 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2201      	movs	r2, #1
 8009b78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	2201      	movs	r2, #1
 8009b80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2201      	movs	r2, #1
 8009b88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2201      	movs	r2, #1
 8009b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2201      	movs	r2, #1
 8009b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2201      	movs	r2, #1
 8009ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2201      	movs	r2, #1
 8009ba8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3708      	adds	r7, #8
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
	...

08009bd0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009bd0:	b480      	push	{r7}
 8009bd2:	b085      	sub	sp, #20
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bde:	b2db      	uxtb	r3, r3
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d001      	beq.n	8009be8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009be4:	2301      	movs	r3, #1
 8009be6:	e046      	b.n	8009c76 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2202      	movs	r2, #2
 8009bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a23      	ldr	r2, [pc, #140]	; (8009c84 <HAL_TIM_Base_Start+0xb4>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d022      	beq.n	8009c40 <HAL_TIM_Base_Start+0x70>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c02:	d01d      	beq.n	8009c40 <HAL_TIM_Base_Start+0x70>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a1f      	ldr	r2, [pc, #124]	; (8009c88 <HAL_TIM_Base_Start+0xb8>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d018      	beq.n	8009c40 <HAL_TIM_Base_Start+0x70>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4a1e      	ldr	r2, [pc, #120]	; (8009c8c <HAL_TIM_Base_Start+0xbc>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d013      	beq.n	8009c40 <HAL_TIM_Base_Start+0x70>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a1c      	ldr	r2, [pc, #112]	; (8009c90 <HAL_TIM_Base_Start+0xc0>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d00e      	beq.n	8009c40 <HAL_TIM_Base_Start+0x70>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4a1b      	ldr	r2, [pc, #108]	; (8009c94 <HAL_TIM_Base_Start+0xc4>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d009      	beq.n	8009c40 <HAL_TIM_Base_Start+0x70>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a19      	ldr	r2, [pc, #100]	; (8009c98 <HAL_TIM_Base_Start+0xc8>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d004      	beq.n	8009c40 <HAL_TIM_Base_Start+0x70>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a18      	ldr	r2, [pc, #96]	; (8009c9c <HAL_TIM_Base_Start+0xcc>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d111      	bne.n	8009c64 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	689b      	ldr	r3, [r3, #8]
 8009c46:	f003 0307 	and.w	r3, r3, #7
 8009c4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2b06      	cmp	r3, #6
 8009c50:	d010      	beq.n	8009c74 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	681a      	ldr	r2, [r3, #0]
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	f042 0201 	orr.w	r2, r2, #1
 8009c60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c62:	e007      	b.n	8009c74 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	681a      	ldr	r2, [r3, #0]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	f042 0201 	orr.w	r2, r2, #1
 8009c72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009c74:	2300      	movs	r3, #0
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3714      	adds	r7, #20
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c80:	4770      	bx	lr
 8009c82:	bf00      	nop
 8009c84:	40010000 	.word	0x40010000
 8009c88:	40000400 	.word	0x40000400
 8009c8c:	40000800 	.word	0x40000800
 8009c90:	40000c00 	.word	0x40000c00
 8009c94:	40010400 	.word	0x40010400
 8009c98:	40014000 	.word	0x40014000
 8009c9c:	40001800 	.word	0x40001800

08009ca0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009ca0:	b480      	push	{r7}
 8009ca2:	b085      	sub	sp, #20
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d001      	beq.n	8009cb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	e04e      	b.n	8009d56 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2202      	movs	r2, #2
 8009cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	68da      	ldr	r2, [r3, #12]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f042 0201 	orr.w	r2, r2, #1
 8009cce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a23      	ldr	r2, [pc, #140]	; (8009d64 <HAL_TIM_Base_Start_IT+0xc4>)
 8009cd6:	4293      	cmp	r3, r2
 8009cd8:	d022      	beq.n	8009d20 <HAL_TIM_Base_Start_IT+0x80>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ce2:	d01d      	beq.n	8009d20 <HAL_TIM_Base_Start_IT+0x80>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4a1f      	ldr	r2, [pc, #124]	; (8009d68 <HAL_TIM_Base_Start_IT+0xc8>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d018      	beq.n	8009d20 <HAL_TIM_Base_Start_IT+0x80>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	4a1e      	ldr	r2, [pc, #120]	; (8009d6c <HAL_TIM_Base_Start_IT+0xcc>)
 8009cf4:	4293      	cmp	r3, r2
 8009cf6:	d013      	beq.n	8009d20 <HAL_TIM_Base_Start_IT+0x80>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	4a1c      	ldr	r2, [pc, #112]	; (8009d70 <HAL_TIM_Base_Start_IT+0xd0>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d00e      	beq.n	8009d20 <HAL_TIM_Base_Start_IT+0x80>
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	4a1b      	ldr	r2, [pc, #108]	; (8009d74 <HAL_TIM_Base_Start_IT+0xd4>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d009      	beq.n	8009d20 <HAL_TIM_Base_Start_IT+0x80>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	4a19      	ldr	r2, [pc, #100]	; (8009d78 <HAL_TIM_Base_Start_IT+0xd8>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d004      	beq.n	8009d20 <HAL_TIM_Base_Start_IT+0x80>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a18      	ldr	r2, [pc, #96]	; (8009d7c <HAL_TIM_Base_Start_IT+0xdc>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d111      	bne.n	8009d44 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	f003 0307 	and.w	r3, r3, #7
 8009d2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2b06      	cmp	r3, #6
 8009d30:	d010      	beq.n	8009d54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	681a      	ldr	r2, [r3, #0]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f042 0201 	orr.w	r2, r2, #1
 8009d40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009d42:	e007      	b.n	8009d54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f042 0201 	orr.w	r2, r2, #1
 8009d52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009d54:	2300      	movs	r3, #0
}
 8009d56:	4618      	mov	r0, r3
 8009d58:	3714      	adds	r7, #20
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr
 8009d62:	bf00      	nop
 8009d64:	40010000 	.word	0x40010000
 8009d68:	40000400 	.word	0x40000400
 8009d6c:	40000800 	.word	0x40000800
 8009d70:	40000c00 	.word	0x40000c00
 8009d74:	40010400 	.word	0x40010400
 8009d78:	40014000 	.word	0x40014000
 8009d7c:	40001800 	.word	0x40001800

08009d80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	691b      	ldr	r3, [r3, #16]
 8009d8e:	f003 0302 	and.w	r3, r3, #2
 8009d92:	2b02      	cmp	r3, #2
 8009d94:	d122      	bne.n	8009ddc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	f003 0302 	and.w	r3, r3, #2
 8009da0:	2b02      	cmp	r3, #2
 8009da2:	d11b      	bne.n	8009ddc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	f06f 0202 	mvn.w	r2, #2
 8009dac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2201      	movs	r2, #1
 8009db2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	699b      	ldr	r3, [r3, #24]
 8009dba:	f003 0303 	and.w	r3, r3, #3
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d003      	beq.n	8009dca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009dc2:	6878      	ldr	r0, [r7, #4]
 8009dc4:	f000 f9b5 	bl	800a132 <HAL_TIM_IC_CaptureCallback>
 8009dc8:	e005      	b.n	8009dd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 f9a7 	bl	800a11e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f000 f9b8 	bl	800a146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	691b      	ldr	r3, [r3, #16]
 8009de2:	f003 0304 	and.w	r3, r3, #4
 8009de6:	2b04      	cmp	r3, #4
 8009de8:	d122      	bne.n	8009e30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	68db      	ldr	r3, [r3, #12]
 8009df0:	f003 0304 	and.w	r3, r3, #4
 8009df4:	2b04      	cmp	r3, #4
 8009df6:	d11b      	bne.n	8009e30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f06f 0204 	mvn.w	r2, #4
 8009e00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2202      	movs	r2, #2
 8009e06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	699b      	ldr	r3, [r3, #24]
 8009e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d003      	beq.n	8009e1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 f98b 	bl	800a132 <HAL_TIM_IC_CaptureCallback>
 8009e1c:	e005      	b.n	8009e2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f000 f97d 	bl	800a11e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 f98e 	bl	800a146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	691b      	ldr	r3, [r3, #16]
 8009e36:	f003 0308 	and.w	r3, r3, #8
 8009e3a:	2b08      	cmp	r3, #8
 8009e3c:	d122      	bne.n	8009e84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	68db      	ldr	r3, [r3, #12]
 8009e44:	f003 0308 	and.w	r3, r3, #8
 8009e48:	2b08      	cmp	r3, #8
 8009e4a:	d11b      	bne.n	8009e84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f06f 0208 	mvn.w	r2, #8
 8009e54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2204      	movs	r2, #4
 8009e5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	69db      	ldr	r3, [r3, #28]
 8009e62:	f003 0303 	and.w	r3, r3, #3
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d003      	beq.n	8009e72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 f961 	bl	800a132 <HAL_TIM_IC_CaptureCallback>
 8009e70:	e005      	b.n	8009e7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	f000 f953 	bl	800a11e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 f964 	bl	800a146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	2200      	movs	r2, #0
 8009e82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	691b      	ldr	r3, [r3, #16]
 8009e8a:	f003 0310 	and.w	r3, r3, #16
 8009e8e:	2b10      	cmp	r3, #16
 8009e90:	d122      	bne.n	8009ed8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	68db      	ldr	r3, [r3, #12]
 8009e98:	f003 0310 	and.w	r3, r3, #16
 8009e9c:	2b10      	cmp	r3, #16
 8009e9e:	d11b      	bne.n	8009ed8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	f06f 0210 	mvn.w	r2, #16
 8009ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2208      	movs	r2, #8
 8009eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	69db      	ldr	r3, [r3, #28]
 8009eb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d003      	beq.n	8009ec6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ebe:	6878      	ldr	r0, [r7, #4]
 8009ec0:	f000 f937 	bl	800a132 <HAL_TIM_IC_CaptureCallback>
 8009ec4:	e005      	b.n	8009ed2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 f929 	bl	800a11e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 f93a 	bl	800a146 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2200      	movs	r2, #0
 8009ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	691b      	ldr	r3, [r3, #16]
 8009ede:	f003 0301 	and.w	r3, r3, #1
 8009ee2:	2b01      	cmp	r3, #1
 8009ee4:	d10e      	bne.n	8009f04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	68db      	ldr	r3, [r3, #12]
 8009eec:	f003 0301 	and.w	r3, r3, #1
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	d107      	bne.n	8009f04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f06f 0201 	mvn.w	r2, #1
 8009efc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009efe:	6878      	ldr	r0, [r7, #4]
 8009f00:	f7f9 fcd2 	bl	80038a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	691b      	ldr	r3, [r3, #16]
 8009f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f0e:	2b80      	cmp	r3, #128	; 0x80
 8009f10:	d10e      	bne.n	8009f30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	68db      	ldr	r3, [r3, #12]
 8009f18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f1c:	2b80      	cmp	r3, #128	; 0x80
 8009f1e:	d107      	bne.n	8009f30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 fae0 	bl	800a4f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	691b      	ldr	r3, [r3, #16]
 8009f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f3a:	2b40      	cmp	r3, #64	; 0x40
 8009f3c:	d10e      	bne.n	8009f5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	68db      	ldr	r3, [r3, #12]
 8009f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f48:	2b40      	cmp	r3, #64	; 0x40
 8009f4a:	d107      	bne.n	8009f5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009f54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009f56:	6878      	ldr	r0, [r7, #4]
 8009f58:	f000 f8ff 	bl	800a15a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	691b      	ldr	r3, [r3, #16]
 8009f62:	f003 0320 	and.w	r3, r3, #32
 8009f66:	2b20      	cmp	r3, #32
 8009f68:	d10e      	bne.n	8009f88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	68db      	ldr	r3, [r3, #12]
 8009f70:	f003 0320 	and.w	r3, r3, #32
 8009f74:	2b20      	cmp	r3, #32
 8009f76:	d107      	bne.n	8009f88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f06f 0220 	mvn.w	r2, #32
 8009f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 faaa 	bl	800a4dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009f88:	bf00      	nop
 8009f8a:	3708      	adds	r7, #8
 8009f8c:	46bd      	mov	sp, r7
 8009f8e:	bd80      	pop	{r7, pc}

08009f90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b084      	sub	sp, #16
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
 8009f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f9a:	2300      	movs	r3, #0
 8009f9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fa4:	2b01      	cmp	r3, #1
 8009fa6:	d101      	bne.n	8009fac <HAL_TIM_ConfigClockSource+0x1c>
 8009fa8:	2302      	movs	r3, #2
 8009faa:	e0b4      	b.n	800a116 <HAL_TIM_ConfigClockSource+0x186>
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2201      	movs	r2, #1
 8009fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2202      	movs	r2, #2
 8009fb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	689b      	ldr	r3, [r3, #8]
 8009fc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009fca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009fd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	68ba      	ldr	r2, [r7, #8]
 8009fda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fe4:	d03e      	beq.n	800a064 <HAL_TIM_ConfigClockSource+0xd4>
 8009fe6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009fea:	f200 8087 	bhi.w	800a0fc <HAL_TIM_ConfigClockSource+0x16c>
 8009fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ff2:	f000 8086 	beq.w	800a102 <HAL_TIM_ConfigClockSource+0x172>
 8009ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ffa:	d87f      	bhi.n	800a0fc <HAL_TIM_ConfigClockSource+0x16c>
 8009ffc:	2b70      	cmp	r3, #112	; 0x70
 8009ffe:	d01a      	beq.n	800a036 <HAL_TIM_ConfigClockSource+0xa6>
 800a000:	2b70      	cmp	r3, #112	; 0x70
 800a002:	d87b      	bhi.n	800a0fc <HAL_TIM_ConfigClockSource+0x16c>
 800a004:	2b60      	cmp	r3, #96	; 0x60
 800a006:	d050      	beq.n	800a0aa <HAL_TIM_ConfigClockSource+0x11a>
 800a008:	2b60      	cmp	r3, #96	; 0x60
 800a00a:	d877      	bhi.n	800a0fc <HAL_TIM_ConfigClockSource+0x16c>
 800a00c:	2b50      	cmp	r3, #80	; 0x50
 800a00e:	d03c      	beq.n	800a08a <HAL_TIM_ConfigClockSource+0xfa>
 800a010:	2b50      	cmp	r3, #80	; 0x50
 800a012:	d873      	bhi.n	800a0fc <HAL_TIM_ConfigClockSource+0x16c>
 800a014:	2b40      	cmp	r3, #64	; 0x40
 800a016:	d058      	beq.n	800a0ca <HAL_TIM_ConfigClockSource+0x13a>
 800a018:	2b40      	cmp	r3, #64	; 0x40
 800a01a:	d86f      	bhi.n	800a0fc <HAL_TIM_ConfigClockSource+0x16c>
 800a01c:	2b30      	cmp	r3, #48	; 0x30
 800a01e:	d064      	beq.n	800a0ea <HAL_TIM_ConfigClockSource+0x15a>
 800a020:	2b30      	cmp	r3, #48	; 0x30
 800a022:	d86b      	bhi.n	800a0fc <HAL_TIM_ConfigClockSource+0x16c>
 800a024:	2b20      	cmp	r3, #32
 800a026:	d060      	beq.n	800a0ea <HAL_TIM_ConfigClockSource+0x15a>
 800a028:	2b20      	cmp	r3, #32
 800a02a:	d867      	bhi.n	800a0fc <HAL_TIM_ConfigClockSource+0x16c>
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d05c      	beq.n	800a0ea <HAL_TIM_ConfigClockSource+0x15a>
 800a030:	2b10      	cmp	r3, #16
 800a032:	d05a      	beq.n	800a0ea <HAL_TIM_ConfigClockSource+0x15a>
 800a034:	e062      	b.n	800a0fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6818      	ldr	r0, [r3, #0]
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	6899      	ldr	r1, [r3, #8]
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	685a      	ldr	r2, [r3, #4]
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	68db      	ldr	r3, [r3, #12]
 800a046:	f000 f9ad 	bl	800a3a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a058:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	68ba      	ldr	r2, [r7, #8]
 800a060:	609a      	str	r2, [r3, #8]
      break;
 800a062:	e04f      	b.n	800a104 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6818      	ldr	r0, [r3, #0]
 800a068:	683b      	ldr	r3, [r7, #0]
 800a06a:	6899      	ldr	r1, [r3, #8]
 800a06c:	683b      	ldr	r3, [r7, #0]
 800a06e:	685a      	ldr	r2, [r3, #4]
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	68db      	ldr	r3, [r3, #12]
 800a074:	f000 f996 	bl	800a3a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	689a      	ldr	r2, [r3, #8]
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a086:	609a      	str	r2, [r3, #8]
      break;
 800a088:	e03c      	b.n	800a104 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	6818      	ldr	r0, [r3, #0]
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	6859      	ldr	r1, [r3, #4]
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	461a      	mov	r2, r3
 800a098:	f000 f90a 	bl	800a2b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	2150      	movs	r1, #80	; 0x50
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f000 f963 	bl	800a36e <TIM_ITRx_SetConfig>
      break;
 800a0a8:	e02c      	b.n	800a104 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6818      	ldr	r0, [r3, #0]
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	6859      	ldr	r1, [r3, #4]
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	461a      	mov	r2, r3
 800a0b8:	f000 f929 	bl	800a30e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	2160      	movs	r1, #96	; 0x60
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f000 f953 	bl	800a36e <TIM_ITRx_SetConfig>
      break;
 800a0c8:	e01c      	b.n	800a104 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	6818      	ldr	r0, [r3, #0]
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	6859      	ldr	r1, [r3, #4]
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	68db      	ldr	r3, [r3, #12]
 800a0d6:	461a      	mov	r2, r3
 800a0d8:	f000 f8ea 	bl	800a2b0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	2140      	movs	r1, #64	; 0x40
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f000 f943 	bl	800a36e <TIM_ITRx_SetConfig>
      break;
 800a0e8:	e00c      	b.n	800a104 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	4610      	mov	r0, r2
 800a0f6:	f000 f93a 	bl	800a36e <TIM_ITRx_SetConfig>
      break;
 800a0fa:	e003      	b.n	800a104 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	73fb      	strb	r3, [r7, #15]
      break;
 800a100:	e000      	b.n	800a104 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a102:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2201      	movs	r2, #1
 800a108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2200      	movs	r2, #0
 800a110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a114:	7bfb      	ldrb	r3, [r7, #15]
}
 800a116:	4618      	mov	r0, r3
 800a118:	3710      	adds	r7, #16
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}

0800a11e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a11e:	b480      	push	{r7}
 800a120:	b083      	sub	sp, #12
 800a122:	af00      	add	r7, sp, #0
 800a124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a126:	bf00      	nop
 800a128:	370c      	adds	r7, #12
 800a12a:	46bd      	mov	sp, r7
 800a12c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a130:	4770      	bx	lr

0800a132 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a132:	b480      	push	{r7}
 800a134:	b083      	sub	sp, #12
 800a136:	af00      	add	r7, sp, #0
 800a138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a13a:	bf00      	nop
 800a13c:	370c      	adds	r7, #12
 800a13e:	46bd      	mov	sp, r7
 800a140:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a144:	4770      	bx	lr

0800a146 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a146:	b480      	push	{r7}
 800a148:	b083      	sub	sp, #12
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a14e:	bf00      	nop
 800a150:	370c      	adds	r7, #12
 800a152:	46bd      	mov	sp, r7
 800a154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a158:	4770      	bx	lr

0800a15a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a15a:	b480      	push	{r7}
 800a15c:	b083      	sub	sp, #12
 800a15e:	af00      	add	r7, sp, #0
 800a160:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a162:	bf00      	nop
 800a164:	370c      	adds	r7, #12
 800a166:	46bd      	mov	sp, r7
 800a168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16c:	4770      	bx	lr
	...

0800a170 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a170:	b480      	push	{r7}
 800a172:	b085      	sub	sp, #20
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	4a40      	ldr	r2, [pc, #256]	; (800a284 <TIM_Base_SetConfig+0x114>)
 800a184:	4293      	cmp	r3, r2
 800a186:	d013      	beq.n	800a1b0 <TIM_Base_SetConfig+0x40>
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a18e:	d00f      	beq.n	800a1b0 <TIM_Base_SetConfig+0x40>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	4a3d      	ldr	r2, [pc, #244]	; (800a288 <TIM_Base_SetConfig+0x118>)
 800a194:	4293      	cmp	r3, r2
 800a196:	d00b      	beq.n	800a1b0 <TIM_Base_SetConfig+0x40>
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	4a3c      	ldr	r2, [pc, #240]	; (800a28c <TIM_Base_SetConfig+0x11c>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d007      	beq.n	800a1b0 <TIM_Base_SetConfig+0x40>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	4a3b      	ldr	r2, [pc, #236]	; (800a290 <TIM_Base_SetConfig+0x120>)
 800a1a4:	4293      	cmp	r3, r2
 800a1a6:	d003      	beq.n	800a1b0 <TIM_Base_SetConfig+0x40>
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	4a3a      	ldr	r2, [pc, #232]	; (800a294 <TIM_Base_SetConfig+0x124>)
 800a1ac:	4293      	cmp	r3, r2
 800a1ae:	d108      	bne.n	800a1c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	68fa      	ldr	r2, [r7, #12]
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4a2f      	ldr	r2, [pc, #188]	; (800a284 <TIM_Base_SetConfig+0x114>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d02b      	beq.n	800a222 <TIM_Base_SetConfig+0xb2>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1d0:	d027      	beq.n	800a222 <TIM_Base_SetConfig+0xb2>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	4a2c      	ldr	r2, [pc, #176]	; (800a288 <TIM_Base_SetConfig+0x118>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d023      	beq.n	800a222 <TIM_Base_SetConfig+0xb2>
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	4a2b      	ldr	r2, [pc, #172]	; (800a28c <TIM_Base_SetConfig+0x11c>)
 800a1de:	4293      	cmp	r3, r2
 800a1e0:	d01f      	beq.n	800a222 <TIM_Base_SetConfig+0xb2>
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	4a2a      	ldr	r2, [pc, #168]	; (800a290 <TIM_Base_SetConfig+0x120>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d01b      	beq.n	800a222 <TIM_Base_SetConfig+0xb2>
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	4a29      	ldr	r2, [pc, #164]	; (800a294 <TIM_Base_SetConfig+0x124>)
 800a1ee:	4293      	cmp	r3, r2
 800a1f0:	d017      	beq.n	800a222 <TIM_Base_SetConfig+0xb2>
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	4a28      	ldr	r2, [pc, #160]	; (800a298 <TIM_Base_SetConfig+0x128>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d013      	beq.n	800a222 <TIM_Base_SetConfig+0xb2>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	4a27      	ldr	r2, [pc, #156]	; (800a29c <TIM_Base_SetConfig+0x12c>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d00f      	beq.n	800a222 <TIM_Base_SetConfig+0xb2>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	4a26      	ldr	r2, [pc, #152]	; (800a2a0 <TIM_Base_SetConfig+0x130>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d00b      	beq.n	800a222 <TIM_Base_SetConfig+0xb2>
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	4a25      	ldr	r2, [pc, #148]	; (800a2a4 <TIM_Base_SetConfig+0x134>)
 800a20e:	4293      	cmp	r3, r2
 800a210:	d007      	beq.n	800a222 <TIM_Base_SetConfig+0xb2>
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	4a24      	ldr	r2, [pc, #144]	; (800a2a8 <TIM_Base_SetConfig+0x138>)
 800a216:	4293      	cmp	r3, r2
 800a218:	d003      	beq.n	800a222 <TIM_Base_SetConfig+0xb2>
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	4a23      	ldr	r2, [pc, #140]	; (800a2ac <TIM_Base_SetConfig+0x13c>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d108      	bne.n	800a234 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a228:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a22a:	683b      	ldr	r3, [r7, #0]
 800a22c:	68db      	ldr	r3, [r3, #12]
 800a22e:	68fa      	ldr	r2, [r7, #12]
 800a230:	4313      	orrs	r3, r2
 800a232:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	695b      	ldr	r3, [r3, #20]
 800a23e:	4313      	orrs	r3, r2
 800a240:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	68fa      	ldr	r2, [r7, #12]
 800a246:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	689a      	ldr	r2, [r3, #8]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	681a      	ldr	r2, [r3, #0]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	4a0a      	ldr	r2, [pc, #40]	; (800a284 <TIM_Base_SetConfig+0x114>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d003      	beq.n	800a268 <TIM_Base_SetConfig+0xf8>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	4a0c      	ldr	r2, [pc, #48]	; (800a294 <TIM_Base_SetConfig+0x124>)
 800a264:	4293      	cmp	r3, r2
 800a266:	d103      	bne.n	800a270 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	691a      	ldr	r2, [r3, #16]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	2201      	movs	r2, #1
 800a274:	615a      	str	r2, [r3, #20]
}
 800a276:	bf00      	nop
 800a278:	3714      	adds	r7, #20
 800a27a:	46bd      	mov	sp, r7
 800a27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a280:	4770      	bx	lr
 800a282:	bf00      	nop
 800a284:	40010000 	.word	0x40010000
 800a288:	40000400 	.word	0x40000400
 800a28c:	40000800 	.word	0x40000800
 800a290:	40000c00 	.word	0x40000c00
 800a294:	40010400 	.word	0x40010400
 800a298:	40014000 	.word	0x40014000
 800a29c:	40014400 	.word	0x40014400
 800a2a0:	40014800 	.word	0x40014800
 800a2a4:	40001800 	.word	0x40001800
 800a2a8:	40001c00 	.word	0x40001c00
 800a2ac:	40002000 	.word	0x40002000

0800a2b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b087      	sub	sp, #28
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	6a1b      	ldr	r3, [r3, #32]
 800a2c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	6a1b      	ldr	r3, [r3, #32]
 800a2c6:	f023 0201 	bic.w	r2, r3, #1
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	699b      	ldr	r3, [r3, #24]
 800a2d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a2d4:	693b      	ldr	r3, [r7, #16]
 800a2d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a2da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	011b      	lsls	r3, r3, #4
 800a2e0:	693a      	ldr	r2, [r7, #16]
 800a2e2:	4313      	orrs	r3, r2
 800a2e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a2e6:	697b      	ldr	r3, [r7, #20]
 800a2e8:	f023 030a 	bic.w	r3, r3, #10
 800a2ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a2ee:	697a      	ldr	r2, [r7, #20]
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	4313      	orrs	r3, r2
 800a2f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	693a      	ldr	r2, [r7, #16]
 800a2fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	697a      	ldr	r2, [r7, #20]
 800a300:	621a      	str	r2, [r3, #32]
}
 800a302:	bf00      	nop
 800a304:	371c      	adds	r7, #28
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr

0800a30e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a30e:	b480      	push	{r7}
 800a310:	b087      	sub	sp, #28
 800a312:	af00      	add	r7, sp, #0
 800a314:	60f8      	str	r0, [r7, #12]
 800a316:	60b9      	str	r1, [r7, #8]
 800a318:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	6a1b      	ldr	r3, [r3, #32]
 800a31e:	f023 0210 	bic.w	r2, r3, #16
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	699b      	ldr	r3, [r3, #24]
 800a32a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	6a1b      	ldr	r3, [r3, #32]
 800a330:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a332:	697b      	ldr	r3, [r7, #20]
 800a334:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a338:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	031b      	lsls	r3, r3, #12
 800a33e:	697a      	ldr	r2, [r7, #20]
 800a340:	4313      	orrs	r3, r2
 800a342:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a34a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	011b      	lsls	r3, r3, #4
 800a350:	693a      	ldr	r2, [r7, #16]
 800a352:	4313      	orrs	r3, r2
 800a354:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	697a      	ldr	r2, [r7, #20]
 800a35a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	693a      	ldr	r2, [r7, #16]
 800a360:	621a      	str	r2, [r3, #32]
}
 800a362:	bf00      	nop
 800a364:	371c      	adds	r7, #28
 800a366:	46bd      	mov	sp, r7
 800a368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36c:	4770      	bx	lr

0800a36e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a36e:	b480      	push	{r7}
 800a370:	b085      	sub	sp, #20
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
 800a376:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	689b      	ldr	r3, [r3, #8]
 800a37c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a384:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a386:	683a      	ldr	r2, [r7, #0]
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	4313      	orrs	r3, r2
 800a38c:	f043 0307 	orr.w	r3, r3, #7
 800a390:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	68fa      	ldr	r2, [r7, #12]
 800a396:	609a      	str	r2, [r3, #8]
}
 800a398:	bf00      	nop
 800a39a:	3714      	adds	r7, #20
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr

0800a3a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a3a4:	b480      	push	{r7}
 800a3a6:	b087      	sub	sp, #28
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	60f8      	str	r0, [r7, #12]
 800a3ac:	60b9      	str	r1, [r7, #8]
 800a3ae:	607a      	str	r2, [r7, #4]
 800a3b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	689b      	ldr	r3, [r3, #8]
 800a3b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a3be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	021a      	lsls	r2, r3, #8
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	431a      	orrs	r2, r3
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	697a      	ldr	r2, [r7, #20]
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	697a      	ldr	r2, [r7, #20]
 800a3d6:	609a      	str	r2, [r3, #8]
}
 800a3d8:	bf00      	nop
 800a3da:	371c      	adds	r7, #28
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b085      	sub	sp, #20
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
 800a3ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	d101      	bne.n	800a3fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a3f8:	2302      	movs	r3, #2
 800a3fa:	e05a      	b.n	800a4b2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2201      	movs	r2, #1
 800a400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	2202      	movs	r2, #2
 800a408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	689b      	ldr	r3, [r3, #8]
 800a41a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a422:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	68fa      	ldr	r2, [r7, #12]
 800a42a:	4313      	orrs	r3, r2
 800a42c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	68fa      	ldr	r2, [r7, #12]
 800a434:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4a21      	ldr	r2, [pc, #132]	; (800a4c0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d022      	beq.n	800a486 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a448:	d01d      	beq.n	800a486 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	4a1d      	ldr	r2, [pc, #116]	; (800a4c4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d018      	beq.n	800a486 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4a1b      	ldr	r2, [pc, #108]	; (800a4c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	d013      	beq.n	800a486 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a1a      	ldr	r2, [pc, #104]	; (800a4cc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800a464:	4293      	cmp	r3, r2
 800a466:	d00e      	beq.n	800a486 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	4a18      	ldr	r2, [pc, #96]	; (800a4d0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d009      	beq.n	800a486 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4a17      	ldr	r2, [pc, #92]	; (800a4d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d004      	beq.n	800a486 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4a15      	ldr	r2, [pc, #84]	; (800a4d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800a482:	4293      	cmp	r3, r2
 800a484:	d10c      	bne.n	800a4a0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a48c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	68ba      	ldr	r2, [r7, #8]
 800a494:	4313      	orrs	r3, r2
 800a496:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	68ba      	ldr	r2, [r7, #8]
 800a49e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a4b0:	2300      	movs	r3, #0
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3714      	adds	r7, #20
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr
 800a4be:	bf00      	nop
 800a4c0:	40010000 	.word	0x40010000
 800a4c4:	40000400 	.word	0x40000400
 800a4c8:	40000800 	.word	0x40000800
 800a4cc:	40000c00 	.word	0x40000c00
 800a4d0:	40010400 	.word	0x40010400
 800a4d4:	40014000 	.word	0x40014000
 800a4d8:	40001800 	.word	0x40001800

0800a4dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a4dc:	b480      	push	{r7}
 800a4de:	b083      	sub	sp, #12
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a4e4:	bf00      	nop
 800a4e6:	370c      	adds	r7, #12
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b083      	sub	sp, #12
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a4f8:	bf00      	nop
 800a4fa:	370c      	adds	r7, #12
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b082      	sub	sp, #8
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d101      	bne.n	800a516 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a512:	2301      	movs	r3, #1
 800a514:	e03f      	b.n	800a596 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a51c:	b2db      	uxtb	r3, r3
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d106      	bne.n	800a530 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2200      	movs	r2, #0
 800a526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f7fa fc28 	bl	8004d80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2224      	movs	r2, #36	; 0x24
 800a534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	68da      	ldr	r2, [r3, #12]
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a546:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a548:	6878      	ldr	r0, [r7, #4]
 800a54a:	f000 ffc7 	bl	800b4dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	691a      	ldr	r2, [r3, #16]
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a55c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	695a      	ldr	r2, [r3, #20]
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a56c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	68da      	ldr	r2, [r3, #12]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a57c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2200      	movs	r2, #0
 800a582:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2220      	movs	r2, #32
 800a588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	2220      	movs	r2, #32
 800a590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a594:	2300      	movs	r3, #0
}
 800a596:	4618      	mov	r0, r3
 800a598:	3708      	adds	r7, #8
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}

0800a59e <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800a59e:	b580      	push	{r7, lr}
 800a5a0:	b082      	sub	sp, #8
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d101      	bne.n	800a5b0 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	e021      	b.n	800a5f4 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2224      	movs	r2, #36	; 0x24
 800a5b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	68da      	ldr	r2, [r3, #12]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a5c6:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800a5c8:	6878      	ldr	r0, [r7, #4]
 800a5ca:	f7fa fccb 	bl	8004f64 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2200      	movs	r2, #0
 800a5d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a5f2:	2300      	movs	r3, #0
}
 800a5f4:	4618      	mov	r0, r3
 800a5f6:	3708      	adds	r7, #8
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}

0800a5fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b08a      	sub	sp, #40	; 0x28
 800a600:	af02      	add	r7, sp, #8
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	603b      	str	r3, [r7, #0]
 800a608:	4613      	mov	r3, r2
 800a60a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800a60c:	2300      	movs	r3, #0
 800a60e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a616:	b2db      	uxtb	r3, r3
 800a618:	2b20      	cmp	r3, #32
 800a61a:	d17c      	bne.n	800a716 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d002      	beq.n	800a628 <HAL_UART_Transmit+0x2c>
 800a622:	88fb      	ldrh	r3, [r7, #6]
 800a624:	2b00      	cmp	r3, #0
 800a626:	d101      	bne.n	800a62c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800a628:	2301      	movs	r3, #1
 800a62a:	e075      	b.n	800a718 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a632:	2b01      	cmp	r3, #1
 800a634:	d101      	bne.n	800a63a <HAL_UART_Transmit+0x3e>
 800a636:	2302      	movs	r3, #2
 800a638:	e06e      	b.n	800a718 <HAL_UART_Transmit+0x11c>
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	2201      	movs	r2, #1
 800a63e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	2200      	movs	r2, #0
 800a646:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2221      	movs	r2, #33	; 0x21
 800a64c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a650:	f7fb f9d0 	bl	80059f4 <HAL_GetTick>
 800a654:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	88fa      	ldrh	r2, [r7, #6]
 800a65a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	88fa      	ldrh	r2, [r7, #6]
 800a660:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	689b      	ldr	r3, [r3, #8]
 800a666:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a66a:	d108      	bne.n	800a67e <HAL_UART_Transmit+0x82>
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	691b      	ldr	r3, [r3, #16]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d104      	bne.n	800a67e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800a674:	2300      	movs	r3, #0
 800a676:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	61bb      	str	r3, [r7, #24]
 800a67c:	e003      	b.n	800a686 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800a67e:	68bb      	ldr	r3, [r7, #8]
 800a680:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a682:	2300      	movs	r3, #0
 800a684:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2200      	movs	r2, #0
 800a68a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800a68e:	e02a      	b.n	800a6e6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	9300      	str	r3, [sp, #0]
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	2200      	movs	r2, #0
 800a698:	2180      	movs	r1, #128	; 0x80
 800a69a:	68f8      	ldr	r0, [r7, #12]
 800a69c:	f000 fc54 	bl	800af48 <UART_WaitOnFlagUntilTimeout>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d001      	beq.n	800a6aa <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800a6a6:	2303      	movs	r3, #3
 800a6a8:	e036      	b.n	800a718 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800a6aa:	69fb      	ldr	r3, [r7, #28]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d10b      	bne.n	800a6c8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a6b0:	69bb      	ldr	r3, [r7, #24]
 800a6b2:	881b      	ldrh	r3, [r3, #0]
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a6be:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	3302      	adds	r3, #2
 800a6c4:	61bb      	str	r3, [r7, #24]
 800a6c6:	e007      	b.n	800a6d8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800a6c8:	69fb      	ldr	r3, [r7, #28]
 800a6ca:	781a      	ldrb	r2, [r3, #0]
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800a6d2:	69fb      	ldr	r3, [r7, #28]
 800a6d4:	3301      	adds	r3, #1
 800a6d6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a6dc:	b29b      	uxth	r3, r3
 800a6de:	3b01      	subs	r3, #1
 800a6e0:	b29a      	uxth	r2, r3
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a6ea:	b29b      	uxth	r3, r3
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d1cf      	bne.n	800a690 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	9300      	str	r3, [sp, #0]
 800a6f4:	697b      	ldr	r3, [r7, #20]
 800a6f6:	2200      	movs	r2, #0
 800a6f8:	2140      	movs	r1, #64	; 0x40
 800a6fa:	68f8      	ldr	r0, [r7, #12]
 800a6fc:	f000 fc24 	bl	800af48 <UART_WaitOnFlagUntilTimeout>
 800a700:	4603      	mov	r3, r0
 800a702:	2b00      	cmp	r3, #0
 800a704:	d001      	beq.n	800a70a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800a706:	2303      	movs	r3, #3
 800a708:	e006      	b.n	800a718 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	2220      	movs	r2, #32
 800a70e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800a712:	2300      	movs	r3, #0
 800a714:	e000      	b.n	800a718 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800a716:	2302      	movs	r3, #2
  }
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3720      	adds	r7, #32
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}

0800a720 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b08c      	sub	sp, #48	; 0x30
 800a724:	af00      	add	r7, sp, #0
 800a726:	60f8      	str	r0, [r7, #12]
 800a728:	60b9      	str	r1, [r7, #8]
 800a72a:	4613      	mov	r3, r2
 800a72c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a734:	b2db      	uxtb	r3, r3
 800a736:	2b20      	cmp	r3, #32
 800a738:	d152      	bne.n	800a7e0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d002      	beq.n	800a746 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800a740:	88fb      	ldrh	r3, [r7, #6]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d101      	bne.n	800a74a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800a746:	2301      	movs	r3, #1
 800a748:	e04b      	b.n	800a7e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a750:	2b01      	cmp	r3, #1
 800a752:	d101      	bne.n	800a758 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800a754:	2302      	movs	r3, #2
 800a756:	e044      	b.n	800a7e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2201      	movs	r2, #1
 800a75c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2201      	movs	r2, #1
 800a764:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800a766:	88fb      	ldrh	r3, [r7, #6]
 800a768:	461a      	mov	r2, r3
 800a76a:	68b9      	ldr	r1, [r7, #8]
 800a76c:	68f8      	ldr	r0, [r7, #12]
 800a76e:	f000 fc59 	bl	800b024 <UART_Start_Receive_DMA>
 800a772:	4603      	mov	r3, r0
 800a774:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800a778:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d12c      	bne.n	800a7da <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a784:	2b01      	cmp	r3, #1
 800a786:	d125      	bne.n	800a7d4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a788:	2300      	movs	r3, #0
 800a78a:	613b      	str	r3, [r7, #16]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	613b      	str	r3, [r7, #16]
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	613b      	str	r3, [r7, #16]
 800a79c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	330c      	adds	r3, #12
 800a7a4:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7a6:	69bb      	ldr	r3, [r7, #24]
 800a7a8:	e853 3f00 	ldrex	r3, [r3]
 800a7ac:	617b      	str	r3, [r7, #20]
   return(result);
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	f043 0310 	orr.w	r3, r3, #16
 800a7b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	330c      	adds	r3, #12
 800a7bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7be:	627a      	str	r2, [r7, #36]	; 0x24
 800a7c0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c2:	6a39      	ldr	r1, [r7, #32]
 800a7c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7c6:	e841 2300 	strex	r3, r2, [r1]
 800a7ca:	61fb      	str	r3, [r7, #28]
   return(result);
 800a7cc:	69fb      	ldr	r3, [r7, #28]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d1e5      	bne.n	800a79e <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800a7d2:	e002      	b.n	800a7da <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800a7da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800a7de:	e000      	b.n	800a7e2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800a7e0:	2302      	movs	r3, #2
  }
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3730      	adds	r7, #48	; 0x30
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
	...

0800a7ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b0ba      	sub	sp, #232	; 0xe8
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	68db      	ldr	r3, [r3, #12]
 800a804:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	695b      	ldr	r3, [r3, #20]
 800a80e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800a812:	2300      	movs	r3, #0
 800a814:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800a818:	2300      	movs	r3, #0
 800a81a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800a81e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a822:	f003 030f 	and.w	r3, r3, #15
 800a826:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800a82a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d10f      	bne.n	800a852 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a836:	f003 0320 	and.w	r3, r3, #32
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d009      	beq.n	800a852 <HAL_UART_IRQHandler+0x66>
 800a83e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a842:	f003 0320 	and.w	r3, r3, #32
 800a846:	2b00      	cmp	r3, #0
 800a848:	d003      	beq.n	800a852 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f000 fd8b 	bl	800b366 <UART_Receive_IT>
      return;
 800a850:	e256      	b.n	800ad00 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800a852:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800a856:	2b00      	cmp	r3, #0
 800a858:	f000 80de 	beq.w	800aa18 <HAL_UART_IRQHandler+0x22c>
 800a85c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a860:	f003 0301 	and.w	r3, r3, #1
 800a864:	2b00      	cmp	r3, #0
 800a866:	d106      	bne.n	800a876 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800a868:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a86c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a870:	2b00      	cmp	r3, #0
 800a872:	f000 80d1 	beq.w	800aa18 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800a876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a87a:	f003 0301 	and.w	r3, r3, #1
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d00b      	beq.n	800a89a <HAL_UART_IRQHandler+0xae>
 800a882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d005      	beq.n	800a89a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a892:	f043 0201 	orr.w	r2, r3, #1
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a89a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a89e:	f003 0304 	and.w	r3, r3, #4
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d00b      	beq.n	800a8be <HAL_UART_IRQHandler+0xd2>
 800a8a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8aa:	f003 0301 	and.w	r3, r3, #1
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d005      	beq.n	800a8be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8b6:	f043 0202 	orr.w	r2, r3, #2
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800a8be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8c2:	f003 0302 	and.w	r3, r3, #2
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d00b      	beq.n	800a8e2 <HAL_UART_IRQHandler+0xf6>
 800a8ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8ce:	f003 0301 	and.w	r3, r3, #1
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d005      	beq.n	800a8e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8da:	f043 0204 	orr.w	r2, r3, #4
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800a8e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a8e6:	f003 0308 	and.w	r3, r3, #8
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d011      	beq.n	800a912 <HAL_UART_IRQHandler+0x126>
 800a8ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a8f2:	f003 0320 	and.w	r3, r3, #32
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d105      	bne.n	800a906 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800a8fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800a8fe:	f003 0301 	and.w	r3, r3, #1
 800a902:	2b00      	cmp	r3, #0
 800a904:	d005      	beq.n	800a912 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a90a:	f043 0208 	orr.w	r2, r3, #8
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a916:	2b00      	cmp	r3, #0
 800a918:	f000 81ed 	beq.w	800acf6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800a91c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a920:	f003 0320 	and.w	r3, r3, #32
 800a924:	2b00      	cmp	r3, #0
 800a926:	d008      	beq.n	800a93a <HAL_UART_IRQHandler+0x14e>
 800a928:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a92c:	f003 0320 	and.w	r3, r3, #32
 800a930:	2b00      	cmp	r3, #0
 800a932:	d002      	beq.n	800a93a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800a934:	6878      	ldr	r0, [r7, #4]
 800a936:	f000 fd16 	bl	800b366 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	695b      	ldr	r3, [r3, #20]
 800a940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a944:	2b40      	cmp	r3, #64	; 0x40
 800a946:	bf0c      	ite	eq
 800a948:	2301      	moveq	r3, #1
 800a94a:	2300      	movne	r3, #0
 800a94c:	b2db      	uxtb	r3, r3
 800a94e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a956:	f003 0308 	and.w	r3, r3, #8
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d103      	bne.n	800a966 <HAL_UART_IRQHandler+0x17a>
 800a95e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800a962:	2b00      	cmp	r3, #0
 800a964:	d04f      	beq.n	800aa06 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a966:	6878      	ldr	r0, [r7, #4]
 800a968:	f000 fc1e 	bl	800b1a8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	695b      	ldr	r3, [r3, #20]
 800a972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a976:	2b40      	cmp	r3, #64	; 0x40
 800a978:	d141      	bne.n	800a9fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	3314      	adds	r3, #20
 800a980:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a984:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800a988:	e853 3f00 	ldrex	r3, [r3]
 800a98c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800a990:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a994:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a998:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	3314      	adds	r3, #20
 800a9a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800a9a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800a9aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800a9b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800a9b6:	e841 2300 	strex	r3, r2, [r1]
 800a9ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800a9be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d1d9      	bne.n	800a97a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d013      	beq.n	800a9f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9d2:	4a7d      	ldr	r2, [pc, #500]	; (800abc8 <HAL_UART_IRQHandler+0x3dc>)
 800a9d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7fb ff2a 	bl	8006834 <HAL_DMA_Abort_IT>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d016      	beq.n	800aa14 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9ec:	687a      	ldr	r2, [r7, #4]
 800a9ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a9f0:	4610      	mov	r0, r2
 800a9f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9f4:	e00e      	b.n	800aa14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a9f6:	6878      	ldr	r0, [r7, #4]
 800a9f8:	f000 f9a4 	bl	800ad44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a9fc:	e00a      	b.n	800aa14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 f9a0 	bl	800ad44 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa04:	e006      	b.n	800aa14 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aa06:	6878      	ldr	r0, [r7, #4]
 800aa08:	f000 f99c 	bl	800ad44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800aa12:	e170      	b.n	800acf6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa14:	bf00      	nop
    return;
 800aa16:	e16e      	b.n	800acf6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa1c:	2b01      	cmp	r3, #1
 800aa1e:	f040 814a 	bne.w	800acb6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800aa22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aa26:	f003 0310 	and.w	r3, r3, #16
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	f000 8143 	beq.w	800acb6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800aa30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aa34:	f003 0310 	and.w	r3, r3, #16
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	f000 813c 	beq.w	800acb6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800aa3e:	2300      	movs	r3, #0
 800aa40:	60bb      	str	r3, [r7, #8]
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	60bb      	str	r3, [r7, #8]
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	685b      	ldr	r3, [r3, #4]
 800aa50:	60bb      	str	r3, [r7, #8]
 800aa52:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	695b      	ldr	r3, [r3, #20]
 800aa5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa5e:	2b40      	cmp	r3, #64	; 0x40
 800aa60:	f040 80b4 	bne.w	800abcc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800aa70:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	f000 8140 	beq.w	800acfa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800aa7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aa82:	429a      	cmp	r2, r3
 800aa84:	f080 8139 	bcs.w	800acfa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800aa8e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa94:	69db      	ldr	r3, [r3, #28]
 800aa96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa9a:	f000 8088 	beq.w	800abae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	330c      	adds	r3, #12
 800aaa4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaa8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aaac:	e853 3f00 	ldrex	r3, [r3]
 800aab0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800aab4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800aab8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aabc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	330c      	adds	r3, #12
 800aac6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800aaca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800aace:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aad2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800aad6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800aada:	e841 2300 	strex	r3, r2, [r1]
 800aade:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800aae2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d1d9      	bne.n	800aa9e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	3314      	adds	r3, #20
 800aaf0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aaf4:	e853 3f00 	ldrex	r3, [r3]
 800aaf8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800aafa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aafc:	f023 0301 	bic.w	r3, r3, #1
 800ab00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	681b      	ldr	r3, [r3, #0]
 800ab08:	3314      	adds	r3, #20
 800ab0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800ab0e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800ab12:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800ab16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800ab1a:	e841 2300 	strex	r3, r2, [r1]
 800ab1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800ab20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d1e1      	bne.n	800aaea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	3314      	adds	r3, #20
 800ab2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ab30:	e853 3f00 	ldrex	r3, [r3]
 800ab34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800ab36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ab3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	3314      	adds	r3, #20
 800ab46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800ab4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800ab4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800ab50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ab52:	e841 2300 	strex	r3, r2, [r1]
 800ab56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800ab58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d1e3      	bne.n	800ab26 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2220      	movs	r2, #32
 800ab62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	681b      	ldr	r3, [r3, #0]
 800ab70:	330c      	adds	r3, #12
 800ab72:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab76:	e853 3f00 	ldrex	r3, [r3]
 800ab7a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ab7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab7e:	f023 0310 	bic.w	r3, r3, #16
 800ab82:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	330c      	adds	r3, #12
 800ab8c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ab90:	65ba      	str	r2, [r7, #88]	; 0x58
 800ab92:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab94:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ab96:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ab98:	e841 2300 	strex	r3, r2, [r1]
 800ab9c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ab9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d1e3      	bne.n	800ab6c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aba8:	4618      	mov	r0, r3
 800abaa:	f7fb fdd3 	bl	8006754 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800abb6:	b29b      	uxth	r3, r3
 800abb8:	1ad3      	subs	r3, r2, r3
 800abba:	b29b      	uxth	r3, r3
 800abbc:	4619      	mov	r1, r3
 800abbe:	6878      	ldr	r0, [r7, #4]
 800abc0:	f7fa fcd0 	bl	8005564 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800abc4:	e099      	b.n	800acfa <HAL_UART_IRQHandler+0x50e>
 800abc6:	bf00      	nop
 800abc8:	0800b26f 	.word	0x0800b26f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	1ad3      	subs	r3, r2, r3
 800abd8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800abe0:	b29b      	uxth	r3, r3
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	f000 808b 	beq.w	800acfe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800abe8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800abec:	2b00      	cmp	r3, #0
 800abee:	f000 8086 	beq.w	800acfe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	330c      	adds	r3, #12
 800abf8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abfc:	e853 3f00 	ldrex	r3, [r3]
 800ac00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ac02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ac08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	330c      	adds	r3, #12
 800ac12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800ac16:	647a      	str	r2, [r7, #68]	; 0x44
 800ac18:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ac1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ac1e:	e841 2300 	strex	r3, r2, [r1]
 800ac22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ac24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d1e3      	bne.n	800abf2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	3314      	adds	r3, #20
 800ac30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac34:	e853 3f00 	ldrex	r3, [r3]
 800ac38:	623b      	str	r3, [r7, #32]
   return(result);
 800ac3a:	6a3b      	ldr	r3, [r7, #32]
 800ac3c:	f023 0301 	bic.w	r3, r3, #1
 800ac40:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	3314      	adds	r3, #20
 800ac4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ac4e:	633a      	str	r2, [r7, #48]	; 0x30
 800ac50:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac56:	e841 2300 	strex	r3, r2, [r1]
 800ac5a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ac5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d1e3      	bne.n	800ac2a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	2220      	movs	r2, #32
 800ac66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	330c      	adds	r3, #12
 800ac76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	e853 3f00 	ldrex	r3, [r3]
 800ac7e:	60fb      	str	r3, [r7, #12]
   return(result);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f023 0310 	bic.w	r3, r3, #16
 800ac86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	330c      	adds	r3, #12
 800ac90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800ac94:	61fa      	str	r2, [r7, #28]
 800ac96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac98:	69b9      	ldr	r1, [r7, #24]
 800ac9a:	69fa      	ldr	r2, [r7, #28]
 800ac9c:	e841 2300 	strex	r3, r2, [r1]
 800aca0:	617b      	str	r3, [r7, #20]
   return(result);
 800aca2:	697b      	ldr	r3, [r7, #20]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d1e3      	bne.n	800ac70 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800aca8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800acac:	4619      	mov	r1, r3
 800acae:	6878      	ldr	r0, [r7, #4]
 800acb0:	f7fa fc58 	bl	8005564 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800acb4:	e023      	b.n	800acfe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800acb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d009      	beq.n	800acd6 <HAL_UART_IRQHandler+0x4ea>
 800acc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800acc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acca:	2b00      	cmp	r3, #0
 800accc:	d003      	beq.n	800acd6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	f000 fae1 	bl	800b296 <UART_Transmit_IT>
    return;
 800acd4:	e014      	b.n	800ad00 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800acd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d00e      	beq.n	800ad00 <HAL_UART_IRQHandler+0x514>
 800ace2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ace6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acea:	2b00      	cmp	r3, #0
 800acec:	d008      	beq.n	800ad00 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f000 fb21 	bl	800b336 <UART_EndTransmit_IT>
    return;
 800acf4:	e004      	b.n	800ad00 <HAL_UART_IRQHandler+0x514>
    return;
 800acf6:	bf00      	nop
 800acf8:	e002      	b.n	800ad00 <HAL_UART_IRQHandler+0x514>
      return;
 800acfa:	bf00      	nop
 800acfc:	e000      	b.n	800ad00 <HAL_UART_IRQHandler+0x514>
      return;
 800acfe:	bf00      	nop
  }
}
 800ad00:	37e8      	adds	r7, #232	; 0xe8
 800ad02:	46bd      	mov	sp, r7
 800ad04:	bd80      	pop	{r7, pc}
 800ad06:	bf00      	nop

0800ad08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ad10:	bf00      	nop
 800ad12:	370c      	adds	r7, #12
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr

0800ad1c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b083      	sub	sp, #12
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ad24:	bf00      	nop
 800ad26:	370c      	adds	r7, #12
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr

0800ad30 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b083      	sub	sp, #12
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800ad38:	bf00      	nop
 800ad3a:	370c      	adds	r7, #12
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad42:	4770      	bx	lr

0800ad44 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ad44:	b480      	push	{r7}
 800ad46:	b083      	sub	sp, #12
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ad4c:	bf00      	nop
 800ad4e:	370c      	adds	r7, #12
 800ad50:	46bd      	mov	sp, r7
 800ad52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad56:	4770      	bx	lr

0800ad58 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b09c      	sub	sp, #112	; 0x70
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad64:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d172      	bne.n	800ae5a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800ad74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad76:	2200      	movs	r2, #0
 800ad78:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ad7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	330c      	adds	r3, #12
 800ad80:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad84:	e853 3f00 	ldrex	r3, [r3]
 800ad88:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ad8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad90:	66bb      	str	r3, [r7, #104]	; 0x68
 800ad92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	330c      	adds	r3, #12
 800ad98:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ad9a:	65ba      	str	r2, [r7, #88]	; 0x58
 800ad9c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ada0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ada2:	e841 2300 	strex	r3, r2, [r1]
 800ada6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ada8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d1e5      	bne.n	800ad7a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800adae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	3314      	adds	r3, #20
 800adb4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adb8:	e853 3f00 	ldrex	r3, [r3]
 800adbc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800adbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800adc0:	f023 0301 	bic.w	r3, r3, #1
 800adc4:	667b      	str	r3, [r7, #100]	; 0x64
 800adc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	3314      	adds	r3, #20
 800adcc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800adce:	647a      	str	r2, [r7, #68]	; 0x44
 800add0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800add2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800add4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800add6:	e841 2300 	strex	r3, r2, [r1]
 800adda:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800addc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d1e5      	bne.n	800adae <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ade2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	3314      	adds	r3, #20
 800ade8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800adea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adec:	e853 3f00 	ldrex	r3, [r3]
 800adf0:	623b      	str	r3, [r7, #32]
   return(result);
 800adf2:	6a3b      	ldr	r3, [r7, #32]
 800adf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800adf8:	663b      	str	r3, [r7, #96]	; 0x60
 800adfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	3314      	adds	r3, #20
 800ae00:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ae02:	633a      	str	r2, [r7, #48]	; 0x30
 800ae04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ae08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ae0a:	e841 2300 	strex	r3, r2, [r1]
 800ae0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ae10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d1e5      	bne.n	800ade2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ae16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae18:	2220      	movs	r2, #32
 800ae1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae22:	2b01      	cmp	r3, #1
 800ae24:	d119      	bne.n	800ae5a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ae26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	330c      	adds	r3, #12
 800ae2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae2e:	693b      	ldr	r3, [r7, #16]
 800ae30:	e853 3f00 	ldrex	r3, [r3]
 800ae34:	60fb      	str	r3, [r7, #12]
   return(result);
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	f023 0310 	bic.w	r3, r3, #16
 800ae3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ae3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	330c      	adds	r3, #12
 800ae44:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ae46:	61fa      	str	r2, [r7, #28]
 800ae48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae4a:	69b9      	ldr	r1, [r7, #24]
 800ae4c:	69fa      	ldr	r2, [r7, #28]
 800ae4e:	e841 2300 	strex	r3, r2, [r1]
 800ae52:	617b      	str	r3, [r7, #20]
   return(result);
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d1e5      	bne.n	800ae26 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae5e:	2b01      	cmp	r3, #1
 800ae60:	d106      	bne.n	800ae70 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ae62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ae64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ae66:	4619      	mov	r1, r3
 800ae68:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ae6a:	f7fa fb7b 	bl	8005564 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ae6e:	e002      	b.n	800ae76 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800ae70:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ae72:	f7ff ff53 	bl	800ad1c <HAL_UART_RxCpltCallback>
}
 800ae76:	bf00      	nop
 800ae78:	3770      	adds	r7, #112	; 0x70
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	bd80      	pop	{r7, pc}

0800ae7e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ae7e:	b580      	push	{r7, lr}
 800ae80:	b084      	sub	sp, #16
 800ae82:	af00      	add	r7, sp, #0
 800ae84:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae8a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d108      	bne.n	800aea6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ae98:	085b      	lsrs	r3, r3, #1
 800ae9a:	b29b      	uxth	r3, r3
 800ae9c:	4619      	mov	r1, r3
 800ae9e:	68f8      	ldr	r0, [r7, #12]
 800aea0:	f7fa fb60 	bl	8005564 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800aea4:	e002      	b.n	800aeac <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800aea6:	68f8      	ldr	r0, [r7, #12]
 800aea8:	f7ff ff42 	bl	800ad30 <HAL_UART_RxHalfCpltCallback>
}
 800aeac:	bf00      	nop
 800aeae:	3710      	adds	r7, #16
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b084      	sub	sp, #16
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800aebc:	2300      	movs	r3, #0
 800aebe:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aec4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800aec6:	68bb      	ldr	r3, [r7, #8]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	695b      	ldr	r3, [r3, #20]
 800aecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aed0:	2b80      	cmp	r3, #128	; 0x80
 800aed2:	bf0c      	ite	eq
 800aed4:	2301      	moveq	r3, #1
 800aed6:	2300      	movne	r3, #0
 800aed8:	b2db      	uxtb	r3, r3
 800aeda:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800aedc:	68bb      	ldr	r3, [r7, #8]
 800aede:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aee2:	b2db      	uxtb	r3, r3
 800aee4:	2b21      	cmp	r3, #33	; 0x21
 800aee6:	d108      	bne.n	800aefa <UART_DMAError+0x46>
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d005      	beq.n	800aefa <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	2200      	movs	r2, #0
 800aef2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800aef4:	68b8      	ldr	r0, [r7, #8]
 800aef6:	f000 f92f 	bl	800b158 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800aefa:	68bb      	ldr	r3, [r7, #8]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	695b      	ldr	r3, [r3, #20]
 800af00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af04:	2b40      	cmp	r3, #64	; 0x40
 800af06:	bf0c      	ite	eq
 800af08:	2301      	moveq	r3, #1
 800af0a:	2300      	movne	r3, #0
 800af0c:	b2db      	uxtb	r3, r3
 800af0e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800af16:	b2db      	uxtb	r3, r3
 800af18:	2b22      	cmp	r3, #34	; 0x22
 800af1a:	d108      	bne.n	800af2e <UART_DMAError+0x7a>
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d005      	beq.n	800af2e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	2200      	movs	r2, #0
 800af26:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800af28:	68b8      	ldr	r0, [r7, #8]
 800af2a:	f000 f93d 	bl	800b1a8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800af2e:	68bb      	ldr	r3, [r7, #8]
 800af30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af32:	f043 0210 	orr.w	r2, r3, #16
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800af3a:	68b8      	ldr	r0, [r7, #8]
 800af3c:	f7ff ff02 	bl	800ad44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800af40:	bf00      	nop
 800af42:	3710      	adds	r7, #16
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b090      	sub	sp, #64	; 0x40
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	60b9      	str	r1, [r7, #8]
 800af52:	603b      	str	r3, [r7, #0]
 800af54:	4613      	mov	r3, r2
 800af56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af58:	e050      	b.n	800affc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af60:	d04c      	beq.n	800affc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800af62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800af64:	2b00      	cmp	r3, #0
 800af66:	d007      	beq.n	800af78 <UART_WaitOnFlagUntilTimeout+0x30>
 800af68:	f7fa fd44 	bl	80059f4 <HAL_GetTick>
 800af6c:	4602      	mov	r2, r0
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	1ad3      	subs	r3, r2, r3
 800af72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af74:	429a      	cmp	r2, r3
 800af76:	d241      	bcs.n	800affc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	330c      	adds	r3, #12
 800af7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af82:	e853 3f00 	ldrex	r3, [r3]
 800af86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800af88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af8a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800af8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	330c      	adds	r3, #12
 800af96:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800af98:	637a      	str	r2, [r7, #52]	; 0x34
 800af9a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800af9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800af9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800afa0:	e841 2300 	strex	r3, r2, [r1]
 800afa4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800afa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d1e5      	bne.n	800af78 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	3314      	adds	r3, #20
 800afb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afb4:	697b      	ldr	r3, [r7, #20]
 800afb6:	e853 3f00 	ldrex	r3, [r3]
 800afba:	613b      	str	r3, [r7, #16]
   return(result);
 800afbc:	693b      	ldr	r3, [r7, #16]
 800afbe:	f023 0301 	bic.w	r3, r3, #1
 800afc2:	63bb      	str	r3, [r7, #56]	; 0x38
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	3314      	adds	r3, #20
 800afca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afcc:	623a      	str	r2, [r7, #32]
 800afce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afd0:	69f9      	ldr	r1, [r7, #28]
 800afd2:	6a3a      	ldr	r2, [r7, #32]
 800afd4:	e841 2300 	strex	r3, r2, [r1]
 800afd8:	61bb      	str	r3, [r7, #24]
   return(result);
 800afda:	69bb      	ldr	r3, [r7, #24]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d1e5      	bne.n	800afac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	2220      	movs	r2, #32
 800afe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2220      	movs	r2, #32
 800afec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2200      	movs	r2, #0
 800aff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800aff8:	2303      	movs	r3, #3
 800affa:	e00f      	b.n	800b01c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	681a      	ldr	r2, [r3, #0]
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	4013      	ands	r3, r2
 800b006:	68ba      	ldr	r2, [r7, #8]
 800b008:	429a      	cmp	r2, r3
 800b00a:	bf0c      	ite	eq
 800b00c:	2301      	moveq	r3, #1
 800b00e:	2300      	movne	r3, #0
 800b010:	b2db      	uxtb	r3, r3
 800b012:	461a      	mov	r2, r3
 800b014:	79fb      	ldrb	r3, [r7, #7]
 800b016:	429a      	cmp	r2, r3
 800b018:	d09f      	beq.n	800af5a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b01a:	2300      	movs	r3, #0
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3740      	adds	r7, #64	; 0x40
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}

0800b024 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b098      	sub	sp, #96	; 0x60
 800b028:	af00      	add	r7, sp, #0
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	4613      	mov	r3, r2
 800b030:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800b032:	68ba      	ldr	r2, [r7, #8]
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	88fa      	ldrh	r2, [r7, #6]
 800b03c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	2200      	movs	r2, #0
 800b042:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	2222      	movs	r2, #34	; 0x22
 800b048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b050:	4a3e      	ldr	r2, [pc, #248]	; (800b14c <UART_Start_Receive_DMA+0x128>)
 800b052:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b058:	4a3d      	ldr	r2, [pc, #244]	; (800b150 <UART_Start_Receive_DMA+0x12c>)
 800b05a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b060:	4a3c      	ldr	r2, [pc, #240]	; (800b154 <UART_Start_Receive_DMA+0x130>)
 800b062:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b068:	2200      	movs	r2, #0
 800b06a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800b06c:	f107 0308 	add.w	r3, r7, #8
 800b070:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	681b      	ldr	r3, [r3, #0]
 800b07a:	3304      	adds	r3, #4
 800b07c:	4619      	mov	r1, r3
 800b07e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b080:	681a      	ldr	r2, [r3, #0]
 800b082:	88fb      	ldrh	r3, [r7, #6]
 800b084:	f7fb fb0e 	bl	80066a4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800b088:	2300      	movs	r3, #0
 800b08a:	613b      	str	r3, [r7, #16]
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	613b      	str	r3, [r7, #16]
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	685b      	ldr	r3, [r3, #4]
 800b09a:	613b      	str	r3, [r7, #16]
 800b09c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	330c      	adds	r3, #12
 800b0ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0b0:	e853 3f00 	ldrex	r3, [r3]
 800b0b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b0b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b0bc:	65bb      	str	r3, [r7, #88]	; 0x58
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	330c      	adds	r3, #12
 800b0c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b0c6:	64fa      	str	r2, [r7, #76]	; 0x4c
 800b0c8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0ca:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b0cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b0ce:	e841 2300 	strex	r3, r2, [r1]
 800b0d2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b0d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d1e5      	bne.n	800b0a6 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	3314      	adds	r3, #20
 800b0e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0e4:	e853 3f00 	ldrex	r3, [r3]
 800b0e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b0ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ec:	f043 0301 	orr.w	r3, r3, #1
 800b0f0:	657b      	str	r3, [r7, #84]	; 0x54
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	3314      	adds	r3, #20
 800b0f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b0fa:	63ba      	str	r2, [r7, #56]	; 0x38
 800b0fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0fe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b100:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b102:	e841 2300 	strex	r3, r2, [r1]
 800b106:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d1e5      	bne.n	800b0da <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b10e:	68fb      	ldr	r3, [r7, #12]
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	3314      	adds	r3, #20
 800b114:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b116:	69bb      	ldr	r3, [r7, #24]
 800b118:	e853 3f00 	ldrex	r3, [r3]
 800b11c:	617b      	str	r3, [r7, #20]
   return(result);
 800b11e:	697b      	ldr	r3, [r7, #20]
 800b120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b124:	653b      	str	r3, [r7, #80]	; 0x50
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	3314      	adds	r3, #20
 800b12c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b12e:	627a      	str	r2, [r7, #36]	; 0x24
 800b130:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b132:	6a39      	ldr	r1, [r7, #32]
 800b134:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b136:	e841 2300 	strex	r3, r2, [r1]
 800b13a:	61fb      	str	r3, [r7, #28]
   return(result);
 800b13c:	69fb      	ldr	r3, [r7, #28]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d1e5      	bne.n	800b10e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800b142:	2300      	movs	r3, #0
}
 800b144:	4618      	mov	r0, r3
 800b146:	3760      	adds	r7, #96	; 0x60
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}
 800b14c:	0800ad59 	.word	0x0800ad59
 800b150:	0800ae7f 	.word	0x0800ae7f
 800b154:	0800aeb5 	.word	0x0800aeb5

0800b158 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b158:	b480      	push	{r7}
 800b15a:	b089      	sub	sp, #36	; 0x24
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	330c      	adds	r3, #12
 800b166:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	e853 3f00 	ldrex	r3, [r3]
 800b16e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b170:	68bb      	ldr	r3, [r7, #8]
 800b172:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b176:	61fb      	str	r3, [r7, #28]
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	330c      	adds	r3, #12
 800b17e:	69fa      	ldr	r2, [r7, #28]
 800b180:	61ba      	str	r2, [r7, #24]
 800b182:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b184:	6979      	ldr	r1, [r7, #20]
 800b186:	69ba      	ldr	r2, [r7, #24]
 800b188:	e841 2300 	strex	r3, r2, [r1]
 800b18c:	613b      	str	r3, [r7, #16]
   return(result);
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d1e5      	bne.n	800b160 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2220      	movs	r2, #32
 800b198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b19c:	bf00      	nop
 800b19e:	3724      	adds	r7, #36	; 0x24
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr

0800b1a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b095      	sub	sp, #84	; 0x54
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	330c      	adds	r3, #12
 800b1b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1ba:	e853 3f00 	ldrex	r3, [r3]
 800b1be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b1c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b1c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	330c      	adds	r3, #12
 800b1ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b1d0:	643a      	str	r2, [r7, #64]	; 0x40
 800b1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b1d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b1d8:	e841 2300 	strex	r3, r2, [r1]
 800b1dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d1e5      	bne.n	800b1b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	3314      	adds	r3, #20
 800b1ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1ec:	6a3b      	ldr	r3, [r7, #32]
 800b1ee:	e853 3f00 	ldrex	r3, [r3]
 800b1f2:	61fb      	str	r3, [r7, #28]
   return(result);
 800b1f4:	69fb      	ldr	r3, [r7, #28]
 800b1f6:	f023 0301 	bic.w	r3, r3, #1
 800b1fa:	64bb      	str	r3, [r7, #72]	; 0x48
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	3314      	adds	r3, #20
 800b202:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b204:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b206:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b208:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b20a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b20c:	e841 2300 	strex	r3, r2, [r1]
 800b210:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b214:	2b00      	cmp	r3, #0
 800b216:	d1e5      	bne.n	800b1e4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b21c:	2b01      	cmp	r3, #1
 800b21e:	d119      	bne.n	800b254 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	330c      	adds	r3, #12
 800b226:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	e853 3f00 	ldrex	r3, [r3]
 800b22e:	60bb      	str	r3, [r7, #8]
   return(result);
 800b230:	68bb      	ldr	r3, [r7, #8]
 800b232:	f023 0310 	bic.w	r3, r3, #16
 800b236:	647b      	str	r3, [r7, #68]	; 0x44
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	330c      	adds	r3, #12
 800b23e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b240:	61ba      	str	r2, [r7, #24]
 800b242:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b244:	6979      	ldr	r1, [r7, #20]
 800b246:	69ba      	ldr	r2, [r7, #24]
 800b248:	e841 2300 	strex	r3, r2, [r1]
 800b24c:	613b      	str	r3, [r7, #16]
   return(result);
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	2b00      	cmp	r3, #0
 800b252:	d1e5      	bne.n	800b220 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2220      	movs	r2, #32
 800b258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	2200      	movs	r2, #0
 800b260:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b262:	bf00      	nop
 800b264:	3754      	adds	r7, #84	; 0x54
 800b266:	46bd      	mov	sp, r7
 800b268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26c:	4770      	bx	lr

0800b26e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b26e:	b580      	push	{r7, lr}
 800b270:	b084      	sub	sp, #16
 800b272:	af00      	add	r7, sp, #0
 800b274:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b27a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	2200      	movs	r2, #0
 800b280:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	2200      	movs	r2, #0
 800b286:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b288:	68f8      	ldr	r0, [r7, #12]
 800b28a:	f7ff fd5b 	bl	800ad44 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b28e:	bf00      	nop
 800b290:	3710      	adds	r7, #16
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}

0800b296 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b296:	b480      	push	{r7}
 800b298:	b085      	sub	sp, #20
 800b29a:	af00      	add	r7, sp, #0
 800b29c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2a4:	b2db      	uxtb	r3, r3
 800b2a6:	2b21      	cmp	r3, #33	; 0x21
 800b2a8:	d13e      	bne.n	800b328 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	689b      	ldr	r3, [r3, #8]
 800b2ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2b2:	d114      	bne.n	800b2de <UART_Transmit_IT+0x48>
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	691b      	ldr	r3, [r3, #16]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d110      	bne.n	800b2de <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6a1b      	ldr	r3, [r3, #32]
 800b2c0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	881b      	ldrh	r3, [r3, #0]
 800b2c6:	461a      	mov	r2, r3
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b2d0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6a1b      	ldr	r3, [r3, #32]
 800b2d6:	1c9a      	adds	r2, r3, #2
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	621a      	str	r2, [r3, #32]
 800b2dc:	e008      	b.n	800b2f0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	6a1b      	ldr	r3, [r3, #32]
 800b2e2:	1c59      	adds	r1, r3, #1
 800b2e4:	687a      	ldr	r2, [r7, #4]
 800b2e6:	6211      	str	r1, [r2, #32]
 800b2e8:	781a      	ldrb	r2, [r3, #0]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b2f4:	b29b      	uxth	r3, r3
 800b2f6:	3b01      	subs	r3, #1
 800b2f8:	b29b      	uxth	r3, r3
 800b2fa:	687a      	ldr	r2, [r7, #4]
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b300:	2b00      	cmp	r3, #0
 800b302:	d10f      	bne.n	800b324 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	68da      	ldr	r2, [r3, #12]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b312:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	68da      	ldr	r2, [r3, #12]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b322:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b324:	2300      	movs	r3, #0
 800b326:	e000      	b.n	800b32a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b328:	2302      	movs	r3, #2
  }
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3714      	adds	r7, #20
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr

0800b336 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b336:	b580      	push	{r7, lr}
 800b338:	b082      	sub	sp, #8
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	68da      	ldr	r2, [r3, #12]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b34c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	2220      	movs	r2, #32
 800b352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f7ff fcd6 	bl	800ad08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b35c:	2300      	movs	r3, #0
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3708      	adds	r7, #8
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}

0800b366 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b366:	b580      	push	{r7, lr}
 800b368:	b08c      	sub	sp, #48	; 0x30
 800b36a:	af00      	add	r7, sp, #0
 800b36c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b374:	b2db      	uxtb	r3, r3
 800b376:	2b22      	cmp	r3, #34	; 0x22
 800b378:	f040 80ab 	bne.w	800b4d2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b384:	d117      	bne.n	800b3b6 <UART_Receive_IT+0x50>
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	691b      	ldr	r3, [r3, #16]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d113      	bne.n	800b3b6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b38e:	2300      	movs	r3, #0
 800b390:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b396:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	681b      	ldr	r3, [r3, #0]
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b3a4:	b29a      	uxth	r2, r3
 800b3a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ae:	1c9a      	adds	r2, r3, #2
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	629a      	str	r2, [r3, #40]	; 0x28
 800b3b4:	e026      	b.n	800b404 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b3bc:	2300      	movs	r3, #0
 800b3be:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	689b      	ldr	r3, [r3, #8]
 800b3c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3c8:	d007      	beq.n	800b3da <UART_Receive_IT+0x74>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	689b      	ldr	r3, [r3, #8]
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d10a      	bne.n	800b3e8 <UART_Receive_IT+0x82>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	691b      	ldr	r3, [r3, #16]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d106      	bne.n	800b3e8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	b2da      	uxtb	r2, r3
 800b3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e4:	701a      	strb	r2, [r3, #0]
 800b3e6:	e008      	b.n	800b3fa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	685b      	ldr	r3, [r3, #4]
 800b3ee:	b2db      	uxtb	r3, r3
 800b3f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b3f4:	b2da      	uxtb	r2, r3
 800b3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3f8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3fe:	1c5a      	adds	r2, r3, #1
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b408:	b29b      	uxth	r3, r3
 800b40a:	3b01      	subs	r3, #1
 800b40c:	b29b      	uxth	r3, r3
 800b40e:	687a      	ldr	r2, [r7, #4]
 800b410:	4619      	mov	r1, r3
 800b412:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b414:	2b00      	cmp	r3, #0
 800b416:	d15a      	bne.n	800b4ce <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	68da      	ldr	r2, [r3, #12]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f022 0220 	bic.w	r2, r2, #32
 800b426:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	68da      	ldr	r2, [r3, #12]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b436:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	681b      	ldr	r3, [r3, #0]
 800b43c:	695a      	ldr	r2, [r3, #20]
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f022 0201 	bic.w	r2, r2, #1
 800b446:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2220      	movs	r2, #32
 800b44c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b454:	2b01      	cmp	r3, #1
 800b456:	d135      	bne.n	800b4c4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2200      	movs	r2, #0
 800b45c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	330c      	adds	r3, #12
 800b464:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	e853 3f00 	ldrex	r3, [r3]
 800b46c:	613b      	str	r3, [r7, #16]
   return(result);
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	f023 0310 	bic.w	r3, r3, #16
 800b474:	627b      	str	r3, [r7, #36]	; 0x24
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	330c      	adds	r3, #12
 800b47c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b47e:	623a      	str	r2, [r7, #32]
 800b480:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b482:	69f9      	ldr	r1, [r7, #28]
 800b484:	6a3a      	ldr	r2, [r7, #32]
 800b486:	e841 2300 	strex	r3, r2, [r1]
 800b48a:	61bb      	str	r3, [r7, #24]
   return(result);
 800b48c:	69bb      	ldr	r3, [r7, #24]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d1e5      	bne.n	800b45e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f003 0310 	and.w	r3, r3, #16
 800b49c:	2b10      	cmp	r3, #16
 800b49e:	d10a      	bne.n	800b4b6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	60fb      	str	r3, [r7, #12]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	60fb      	str	r3, [r7, #12]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	60fb      	str	r3, [r7, #12]
 800b4b4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b4ba:	4619      	mov	r1, r3
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f7fa f851 	bl	8005564 <HAL_UARTEx_RxEventCallback>
 800b4c2:	e002      	b.n	800b4ca <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b4c4:	6878      	ldr	r0, [r7, #4]
 800b4c6:	f7ff fc29 	bl	800ad1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	e002      	b.n	800b4d4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	e000      	b.n	800b4d4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800b4d2:	2302      	movs	r3, #2
  }
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3730      	adds	r7, #48	; 0x30
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b4dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b4e0:	b0c0      	sub	sp, #256	; 0x100
 800b4e2:	af00      	add	r7, sp, #0
 800b4e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b4e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	691b      	ldr	r3, [r3, #16]
 800b4f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b4f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4f8:	68d9      	ldr	r1, [r3, #12]
 800b4fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b4fe:	681a      	ldr	r2, [r3, #0]
 800b500:	ea40 0301 	orr.w	r3, r0, r1
 800b504:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b50a:	689a      	ldr	r2, [r3, #8]
 800b50c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b510:	691b      	ldr	r3, [r3, #16]
 800b512:	431a      	orrs	r2, r3
 800b514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b518:	695b      	ldr	r3, [r3, #20]
 800b51a:	431a      	orrs	r2, r3
 800b51c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b520:	69db      	ldr	r3, [r3, #28]
 800b522:	4313      	orrs	r3, r2
 800b524:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	68db      	ldr	r3, [r3, #12]
 800b530:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b534:	f021 010c 	bic.w	r1, r1, #12
 800b538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b53c:	681a      	ldr	r2, [r3, #0]
 800b53e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b542:	430b      	orrs	r3, r1
 800b544:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	695b      	ldr	r3, [r3, #20]
 800b54e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b556:	6999      	ldr	r1, [r3, #24]
 800b558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b55c:	681a      	ldr	r2, [r3, #0]
 800b55e:	ea40 0301 	orr.w	r3, r0, r1
 800b562:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b568:	681a      	ldr	r2, [r3, #0]
 800b56a:	4b8f      	ldr	r3, [pc, #572]	; (800b7a8 <UART_SetConfig+0x2cc>)
 800b56c:	429a      	cmp	r2, r3
 800b56e:	d005      	beq.n	800b57c <UART_SetConfig+0xa0>
 800b570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b574:	681a      	ldr	r2, [r3, #0]
 800b576:	4b8d      	ldr	r3, [pc, #564]	; (800b7ac <UART_SetConfig+0x2d0>)
 800b578:	429a      	cmp	r2, r3
 800b57a:	d104      	bne.n	800b586 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b57c:	f7fd fcea 	bl	8008f54 <HAL_RCC_GetPCLK2Freq>
 800b580:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b584:	e003      	b.n	800b58e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b586:	f7fd fcd1 	bl	8008f2c <HAL_RCC_GetPCLK1Freq>
 800b58a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b58e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b592:	69db      	ldr	r3, [r3, #28]
 800b594:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b598:	f040 810c 	bne.w	800b7b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b59c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b5a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b5aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b5ae:	4622      	mov	r2, r4
 800b5b0:	462b      	mov	r3, r5
 800b5b2:	1891      	adds	r1, r2, r2
 800b5b4:	65b9      	str	r1, [r7, #88]	; 0x58
 800b5b6:	415b      	adcs	r3, r3
 800b5b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b5ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b5be:	4621      	mov	r1, r4
 800b5c0:	eb12 0801 	adds.w	r8, r2, r1
 800b5c4:	4629      	mov	r1, r5
 800b5c6:	eb43 0901 	adc.w	r9, r3, r1
 800b5ca:	f04f 0200 	mov.w	r2, #0
 800b5ce:	f04f 0300 	mov.w	r3, #0
 800b5d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b5d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b5da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b5de:	4690      	mov	r8, r2
 800b5e0:	4699      	mov	r9, r3
 800b5e2:	4623      	mov	r3, r4
 800b5e4:	eb18 0303 	adds.w	r3, r8, r3
 800b5e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b5ec:	462b      	mov	r3, r5
 800b5ee:	eb49 0303 	adc.w	r3, r9, r3
 800b5f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b5f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b602:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b606:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b60a:	460b      	mov	r3, r1
 800b60c:	18db      	adds	r3, r3, r3
 800b60e:	653b      	str	r3, [r7, #80]	; 0x50
 800b610:	4613      	mov	r3, r2
 800b612:	eb42 0303 	adc.w	r3, r2, r3
 800b616:	657b      	str	r3, [r7, #84]	; 0x54
 800b618:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b61c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b620:	f7f4 fe2e 	bl	8000280 <__aeabi_uldivmod>
 800b624:	4602      	mov	r2, r0
 800b626:	460b      	mov	r3, r1
 800b628:	4b61      	ldr	r3, [pc, #388]	; (800b7b0 <UART_SetConfig+0x2d4>)
 800b62a:	fba3 2302 	umull	r2, r3, r3, r2
 800b62e:	095b      	lsrs	r3, r3, #5
 800b630:	011c      	lsls	r4, r3, #4
 800b632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b636:	2200      	movs	r2, #0
 800b638:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b63c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b640:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b644:	4642      	mov	r2, r8
 800b646:	464b      	mov	r3, r9
 800b648:	1891      	adds	r1, r2, r2
 800b64a:	64b9      	str	r1, [r7, #72]	; 0x48
 800b64c:	415b      	adcs	r3, r3
 800b64e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b650:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b654:	4641      	mov	r1, r8
 800b656:	eb12 0a01 	adds.w	sl, r2, r1
 800b65a:	4649      	mov	r1, r9
 800b65c:	eb43 0b01 	adc.w	fp, r3, r1
 800b660:	f04f 0200 	mov.w	r2, #0
 800b664:	f04f 0300 	mov.w	r3, #0
 800b668:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b66c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b670:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b674:	4692      	mov	sl, r2
 800b676:	469b      	mov	fp, r3
 800b678:	4643      	mov	r3, r8
 800b67a:	eb1a 0303 	adds.w	r3, sl, r3
 800b67e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b682:	464b      	mov	r3, r9
 800b684:	eb4b 0303 	adc.w	r3, fp, r3
 800b688:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b68c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b690:	685b      	ldr	r3, [r3, #4]
 800b692:	2200      	movs	r2, #0
 800b694:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b698:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800b69c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	18db      	adds	r3, r3, r3
 800b6a4:	643b      	str	r3, [r7, #64]	; 0x40
 800b6a6:	4613      	mov	r3, r2
 800b6a8:	eb42 0303 	adc.w	r3, r2, r3
 800b6ac:	647b      	str	r3, [r7, #68]	; 0x44
 800b6ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800b6b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800b6b6:	f7f4 fde3 	bl	8000280 <__aeabi_uldivmod>
 800b6ba:	4602      	mov	r2, r0
 800b6bc:	460b      	mov	r3, r1
 800b6be:	4611      	mov	r1, r2
 800b6c0:	4b3b      	ldr	r3, [pc, #236]	; (800b7b0 <UART_SetConfig+0x2d4>)
 800b6c2:	fba3 2301 	umull	r2, r3, r3, r1
 800b6c6:	095b      	lsrs	r3, r3, #5
 800b6c8:	2264      	movs	r2, #100	; 0x64
 800b6ca:	fb02 f303 	mul.w	r3, r2, r3
 800b6ce:	1acb      	subs	r3, r1, r3
 800b6d0:	00db      	lsls	r3, r3, #3
 800b6d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800b6d6:	4b36      	ldr	r3, [pc, #216]	; (800b7b0 <UART_SetConfig+0x2d4>)
 800b6d8:	fba3 2302 	umull	r2, r3, r3, r2
 800b6dc:	095b      	lsrs	r3, r3, #5
 800b6de:	005b      	lsls	r3, r3, #1
 800b6e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b6e4:	441c      	add	r4, r3
 800b6e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b6f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800b6f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800b6f8:	4642      	mov	r2, r8
 800b6fa:	464b      	mov	r3, r9
 800b6fc:	1891      	adds	r1, r2, r2
 800b6fe:	63b9      	str	r1, [r7, #56]	; 0x38
 800b700:	415b      	adcs	r3, r3
 800b702:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b704:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800b708:	4641      	mov	r1, r8
 800b70a:	1851      	adds	r1, r2, r1
 800b70c:	6339      	str	r1, [r7, #48]	; 0x30
 800b70e:	4649      	mov	r1, r9
 800b710:	414b      	adcs	r3, r1
 800b712:	637b      	str	r3, [r7, #52]	; 0x34
 800b714:	f04f 0200 	mov.w	r2, #0
 800b718:	f04f 0300 	mov.w	r3, #0
 800b71c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800b720:	4659      	mov	r1, fp
 800b722:	00cb      	lsls	r3, r1, #3
 800b724:	4651      	mov	r1, sl
 800b726:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b72a:	4651      	mov	r1, sl
 800b72c:	00ca      	lsls	r2, r1, #3
 800b72e:	4610      	mov	r0, r2
 800b730:	4619      	mov	r1, r3
 800b732:	4603      	mov	r3, r0
 800b734:	4642      	mov	r2, r8
 800b736:	189b      	adds	r3, r3, r2
 800b738:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b73c:	464b      	mov	r3, r9
 800b73e:	460a      	mov	r2, r1
 800b740:	eb42 0303 	adc.w	r3, r2, r3
 800b744:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b74c:	685b      	ldr	r3, [r3, #4]
 800b74e:	2200      	movs	r2, #0
 800b750:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b754:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800b758:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b75c:	460b      	mov	r3, r1
 800b75e:	18db      	adds	r3, r3, r3
 800b760:	62bb      	str	r3, [r7, #40]	; 0x28
 800b762:	4613      	mov	r3, r2
 800b764:	eb42 0303 	adc.w	r3, r2, r3
 800b768:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b76a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800b76e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800b772:	f7f4 fd85 	bl	8000280 <__aeabi_uldivmod>
 800b776:	4602      	mov	r2, r0
 800b778:	460b      	mov	r3, r1
 800b77a:	4b0d      	ldr	r3, [pc, #52]	; (800b7b0 <UART_SetConfig+0x2d4>)
 800b77c:	fba3 1302 	umull	r1, r3, r3, r2
 800b780:	095b      	lsrs	r3, r3, #5
 800b782:	2164      	movs	r1, #100	; 0x64
 800b784:	fb01 f303 	mul.w	r3, r1, r3
 800b788:	1ad3      	subs	r3, r2, r3
 800b78a:	00db      	lsls	r3, r3, #3
 800b78c:	3332      	adds	r3, #50	; 0x32
 800b78e:	4a08      	ldr	r2, [pc, #32]	; (800b7b0 <UART_SetConfig+0x2d4>)
 800b790:	fba2 2303 	umull	r2, r3, r2, r3
 800b794:	095b      	lsrs	r3, r3, #5
 800b796:	f003 0207 	and.w	r2, r3, #7
 800b79a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	4422      	add	r2, r4
 800b7a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800b7a4:	e105      	b.n	800b9b2 <UART_SetConfig+0x4d6>
 800b7a6:	bf00      	nop
 800b7a8:	40011000 	.word	0x40011000
 800b7ac:	40011400 	.word	0x40011400
 800b7b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b7b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b7be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800b7c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800b7c6:	4642      	mov	r2, r8
 800b7c8:	464b      	mov	r3, r9
 800b7ca:	1891      	adds	r1, r2, r2
 800b7cc:	6239      	str	r1, [r7, #32]
 800b7ce:	415b      	adcs	r3, r3
 800b7d0:	627b      	str	r3, [r7, #36]	; 0x24
 800b7d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800b7d6:	4641      	mov	r1, r8
 800b7d8:	1854      	adds	r4, r2, r1
 800b7da:	4649      	mov	r1, r9
 800b7dc:	eb43 0501 	adc.w	r5, r3, r1
 800b7e0:	f04f 0200 	mov.w	r2, #0
 800b7e4:	f04f 0300 	mov.w	r3, #0
 800b7e8:	00eb      	lsls	r3, r5, #3
 800b7ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b7ee:	00e2      	lsls	r2, r4, #3
 800b7f0:	4614      	mov	r4, r2
 800b7f2:	461d      	mov	r5, r3
 800b7f4:	4643      	mov	r3, r8
 800b7f6:	18e3      	adds	r3, r4, r3
 800b7f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b7fc:	464b      	mov	r3, r9
 800b7fe:	eb45 0303 	adc.w	r3, r5, r3
 800b802:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b806:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b80a:	685b      	ldr	r3, [r3, #4]
 800b80c:	2200      	movs	r2, #0
 800b80e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b812:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b816:	f04f 0200 	mov.w	r2, #0
 800b81a:	f04f 0300 	mov.w	r3, #0
 800b81e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800b822:	4629      	mov	r1, r5
 800b824:	008b      	lsls	r3, r1, #2
 800b826:	4621      	mov	r1, r4
 800b828:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b82c:	4621      	mov	r1, r4
 800b82e:	008a      	lsls	r2, r1, #2
 800b830:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800b834:	f7f4 fd24 	bl	8000280 <__aeabi_uldivmod>
 800b838:	4602      	mov	r2, r0
 800b83a:	460b      	mov	r3, r1
 800b83c:	4b60      	ldr	r3, [pc, #384]	; (800b9c0 <UART_SetConfig+0x4e4>)
 800b83e:	fba3 2302 	umull	r2, r3, r3, r2
 800b842:	095b      	lsrs	r3, r3, #5
 800b844:	011c      	lsls	r4, r3, #4
 800b846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b84a:	2200      	movs	r2, #0
 800b84c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b850:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b854:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800b858:	4642      	mov	r2, r8
 800b85a:	464b      	mov	r3, r9
 800b85c:	1891      	adds	r1, r2, r2
 800b85e:	61b9      	str	r1, [r7, #24]
 800b860:	415b      	adcs	r3, r3
 800b862:	61fb      	str	r3, [r7, #28]
 800b864:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b868:	4641      	mov	r1, r8
 800b86a:	1851      	adds	r1, r2, r1
 800b86c:	6139      	str	r1, [r7, #16]
 800b86e:	4649      	mov	r1, r9
 800b870:	414b      	adcs	r3, r1
 800b872:	617b      	str	r3, [r7, #20]
 800b874:	f04f 0200 	mov.w	r2, #0
 800b878:	f04f 0300 	mov.w	r3, #0
 800b87c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b880:	4659      	mov	r1, fp
 800b882:	00cb      	lsls	r3, r1, #3
 800b884:	4651      	mov	r1, sl
 800b886:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b88a:	4651      	mov	r1, sl
 800b88c:	00ca      	lsls	r2, r1, #3
 800b88e:	4610      	mov	r0, r2
 800b890:	4619      	mov	r1, r3
 800b892:	4603      	mov	r3, r0
 800b894:	4642      	mov	r2, r8
 800b896:	189b      	adds	r3, r3, r2
 800b898:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b89c:	464b      	mov	r3, r9
 800b89e:	460a      	mov	r2, r1
 800b8a0:	eb42 0303 	adc.w	r3, r2, r3
 800b8a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b8a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8ac:	685b      	ldr	r3, [r3, #4]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	67bb      	str	r3, [r7, #120]	; 0x78
 800b8b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800b8b4:	f04f 0200 	mov.w	r2, #0
 800b8b8:	f04f 0300 	mov.w	r3, #0
 800b8bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800b8c0:	4649      	mov	r1, r9
 800b8c2:	008b      	lsls	r3, r1, #2
 800b8c4:	4641      	mov	r1, r8
 800b8c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b8ca:	4641      	mov	r1, r8
 800b8cc:	008a      	lsls	r2, r1, #2
 800b8ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800b8d2:	f7f4 fcd5 	bl	8000280 <__aeabi_uldivmod>
 800b8d6:	4602      	mov	r2, r0
 800b8d8:	460b      	mov	r3, r1
 800b8da:	4b39      	ldr	r3, [pc, #228]	; (800b9c0 <UART_SetConfig+0x4e4>)
 800b8dc:	fba3 1302 	umull	r1, r3, r3, r2
 800b8e0:	095b      	lsrs	r3, r3, #5
 800b8e2:	2164      	movs	r1, #100	; 0x64
 800b8e4:	fb01 f303 	mul.w	r3, r1, r3
 800b8e8:	1ad3      	subs	r3, r2, r3
 800b8ea:	011b      	lsls	r3, r3, #4
 800b8ec:	3332      	adds	r3, #50	; 0x32
 800b8ee:	4a34      	ldr	r2, [pc, #208]	; (800b9c0 <UART_SetConfig+0x4e4>)
 800b8f0:	fba2 2303 	umull	r2, r3, r2, r3
 800b8f4:	095b      	lsrs	r3, r3, #5
 800b8f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b8fa:	441c      	add	r4, r3
 800b8fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b900:	2200      	movs	r2, #0
 800b902:	673b      	str	r3, [r7, #112]	; 0x70
 800b904:	677a      	str	r2, [r7, #116]	; 0x74
 800b906:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800b90a:	4642      	mov	r2, r8
 800b90c:	464b      	mov	r3, r9
 800b90e:	1891      	adds	r1, r2, r2
 800b910:	60b9      	str	r1, [r7, #8]
 800b912:	415b      	adcs	r3, r3
 800b914:	60fb      	str	r3, [r7, #12]
 800b916:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800b91a:	4641      	mov	r1, r8
 800b91c:	1851      	adds	r1, r2, r1
 800b91e:	6039      	str	r1, [r7, #0]
 800b920:	4649      	mov	r1, r9
 800b922:	414b      	adcs	r3, r1
 800b924:	607b      	str	r3, [r7, #4]
 800b926:	f04f 0200 	mov.w	r2, #0
 800b92a:	f04f 0300 	mov.w	r3, #0
 800b92e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800b932:	4659      	mov	r1, fp
 800b934:	00cb      	lsls	r3, r1, #3
 800b936:	4651      	mov	r1, sl
 800b938:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800b93c:	4651      	mov	r1, sl
 800b93e:	00ca      	lsls	r2, r1, #3
 800b940:	4610      	mov	r0, r2
 800b942:	4619      	mov	r1, r3
 800b944:	4603      	mov	r3, r0
 800b946:	4642      	mov	r2, r8
 800b948:	189b      	adds	r3, r3, r2
 800b94a:	66bb      	str	r3, [r7, #104]	; 0x68
 800b94c:	464b      	mov	r3, r9
 800b94e:	460a      	mov	r2, r1
 800b950:	eb42 0303 	adc.w	r3, r2, r3
 800b954:	66fb      	str	r3, [r7, #108]	; 0x6c
 800b956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b95a:	685b      	ldr	r3, [r3, #4]
 800b95c:	2200      	movs	r2, #0
 800b95e:	663b      	str	r3, [r7, #96]	; 0x60
 800b960:	667a      	str	r2, [r7, #100]	; 0x64
 800b962:	f04f 0200 	mov.w	r2, #0
 800b966:	f04f 0300 	mov.w	r3, #0
 800b96a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800b96e:	4649      	mov	r1, r9
 800b970:	008b      	lsls	r3, r1, #2
 800b972:	4641      	mov	r1, r8
 800b974:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800b978:	4641      	mov	r1, r8
 800b97a:	008a      	lsls	r2, r1, #2
 800b97c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800b980:	f7f4 fc7e 	bl	8000280 <__aeabi_uldivmod>
 800b984:	4602      	mov	r2, r0
 800b986:	460b      	mov	r3, r1
 800b988:	4b0d      	ldr	r3, [pc, #52]	; (800b9c0 <UART_SetConfig+0x4e4>)
 800b98a:	fba3 1302 	umull	r1, r3, r3, r2
 800b98e:	095b      	lsrs	r3, r3, #5
 800b990:	2164      	movs	r1, #100	; 0x64
 800b992:	fb01 f303 	mul.w	r3, r1, r3
 800b996:	1ad3      	subs	r3, r2, r3
 800b998:	011b      	lsls	r3, r3, #4
 800b99a:	3332      	adds	r3, #50	; 0x32
 800b99c:	4a08      	ldr	r2, [pc, #32]	; (800b9c0 <UART_SetConfig+0x4e4>)
 800b99e:	fba2 2303 	umull	r2, r3, r2, r3
 800b9a2:	095b      	lsrs	r3, r3, #5
 800b9a4:	f003 020f 	and.w	r2, r3, #15
 800b9a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	4422      	add	r2, r4
 800b9b0:	609a      	str	r2, [r3, #8]
}
 800b9b2:	bf00      	nop
 800b9b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b9be:	bf00      	nop
 800b9c0:	51eb851f 	.word	0x51eb851f

0800b9c4 <LWIP_ReInit>:
uint8_t NETMASK_ADDRESS[4];
uint8_t GATEWAY_ADDRESS[4];

/* USER CODE BEGIN 2 */
static void LWIP_ReInit()
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	af00      	add	r7, sp, #0
	if(((uint8_t)settings.retain.eth_sett.addr0 ||
 800b9c8:	4b5c      	ldr	r3, [pc, #368]	; (800bb3c <LWIP_ReInit+0x178>)
 800b9ca:	8a9b      	ldrh	r3, [r3, #20]
 800b9cc:	b2db      	uxtb	r3, r3
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d10e      	bne.n	800b9f0 <LWIP_ReInit+0x2c>
			(uint8_t)settings.retain.eth_sett.addr1 ||
 800b9d2:	4b5a      	ldr	r3, [pc, #360]	; (800bb3c <LWIP_ReInit+0x178>)
 800b9d4:	8adb      	ldrh	r3, [r3, #22]
 800b9d6:	b2db      	uxtb	r3, r3
	if(((uint8_t)settings.retain.eth_sett.addr0 ||
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d109      	bne.n	800b9f0 <LWIP_ReInit+0x2c>
			(uint8_t)settings.retain.eth_sett.addr2 ||
 800b9dc:	4b57      	ldr	r3, [pc, #348]	; (800bb3c <LWIP_ReInit+0x178>)
 800b9de:	8b1b      	ldrh	r3, [r3, #24]
 800b9e0:	b2db      	uxtb	r3, r3
			(uint8_t)settings.retain.eth_sett.addr1 ||
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d104      	bne.n	800b9f0 <LWIP_ReInit+0x2c>
			(uint8_t)settings.retain.eth_sett.addr3))
 800b9e6:	4b55      	ldr	r3, [pc, #340]	; (800bb3c <LWIP_ReInit+0x178>)
 800b9e8:	8b5b      	ldrh	r3, [r3, #26]
 800b9ea:	b2db      	uxtb	r3, r3
			(uint8_t)settings.retain.eth_sett.addr2 ||
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d013      	beq.n	800ba18 <LWIP_ReInit+0x54>
	{
		  IP_ADDRESS[0] = (uint8_t)settings.retain.eth_sett.addr0;
 800b9f0:	4b52      	ldr	r3, [pc, #328]	; (800bb3c <LWIP_ReInit+0x178>)
 800b9f2:	8a9b      	ldrh	r3, [r3, #20]
 800b9f4:	b2da      	uxtb	r2, r3
 800b9f6:	4b52      	ldr	r3, [pc, #328]	; (800bb40 <LWIP_ReInit+0x17c>)
 800b9f8:	701a      	strb	r2, [r3, #0]
		  IP_ADDRESS[1] = (uint8_t)settings.retain.eth_sett.addr1;
 800b9fa:	4b50      	ldr	r3, [pc, #320]	; (800bb3c <LWIP_ReInit+0x178>)
 800b9fc:	8adb      	ldrh	r3, [r3, #22]
 800b9fe:	b2da      	uxtb	r2, r3
 800ba00:	4b4f      	ldr	r3, [pc, #316]	; (800bb40 <LWIP_ReInit+0x17c>)
 800ba02:	705a      	strb	r2, [r3, #1]
		  IP_ADDRESS[2] = (uint8_t)settings.retain.eth_sett.addr2;
 800ba04:	4b4d      	ldr	r3, [pc, #308]	; (800bb3c <LWIP_ReInit+0x178>)
 800ba06:	8b1b      	ldrh	r3, [r3, #24]
 800ba08:	b2da      	uxtb	r2, r3
 800ba0a:	4b4d      	ldr	r3, [pc, #308]	; (800bb40 <LWIP_ReInit+0x17c>)
 800ba0c:	709a      	strb	r2, [r3, #2]
		  IP_ADDRESS[3] = (uint8_t)settings.retain.eth_sett.addr3;
 800ba0e:	4b4b      	ldr	r3, [pc, #300]	; (800bb3c <LWIP_ReInit+0x178>)
 800ba10:	8b5b      	ldrh	r3, [r3, #26]
 800ba12:	b2da      	uxtb	r2, r3
 800ba14:	4b4a      	ldr	r3, [pc, #296]	; (800bb40 <LWIP_ReInit+0x17c>)
 800ba16:	70da      	strb	r2, [r3, #3]
	}

	if(((uint8_t)settings.retain.eth_sett.mask0 ||
 800ba18:	4b48      	ldr	r3, [pc, #288]	; (800bb3c <LWIP_ReInit+0x178>)
 800ba1a:	8b9b      	ldrh	r3, [r3, #28]
 800ba1c:	b2db      	uxtb	r3, r3
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d10e      	bne.n	800ba40 <LWIP_ReInit+0x7c>
			(uint8_t)settings.retain.eth_sett.mask1 ||
 800ba22:	4b46      	ldr	r3, [pc, #280]	; (800bb3c <LWIP_ReInit+0x178>)
 800ba24:	8bdb      	ldrh	r3, [r3, #30]
 800ba26:	b2db      	uxtb	r3, r3
	if(((uint8_t)settings.retain.eth_sett.mask0 ||
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d109      	bne.n	800ba40 <LWIP_ReInit+0x7c>
			(uint8_t)settings.retain.eth_sett.mask2 ||
 800ba2c:	4b43      	ldr	r3, [pc, #268]	; (800bb3c <LWIP_ReInit+0x178>)
 800ba2e:	8c1b      	ldrh	r3, [r3, #32]
 800ba30:	b2db      	uxtb	r3, r3
			(uint8_t)settings.retain.eth_sett.mask1 ||
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d104      	bne.n	800ba40 <LWIP_ReInit+0x7c>
			(uint8_t)settings.retain.eth_sett.mask3))
 800ba36:	4b41      	ldr	r3, [pc, #260]	; (800bb3c <LWIP_ReInit+0x178>)
 800ba38:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ba3a:	b2db      	uxtb	r3, r3
			(uint8_t)settings.retain.eth_sett.mask2 ||
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d013      	beq.n	800ba68 <LWIP_ReInit+0xa4>
	{
		  NETMASK_ADDRESS[0] = (uint8_t)settings.retain.eth_sett.mask0;
 800ba40:	4b3e      	ldr	r3, [pc, #248]	; (800bb3c <LWIP_ReInit+0x178>)
 800ba42:	8b9b      	ldrh	r3, [r3, #28]
 800ba44:	b2da      	uxtb	r2, r3
 800ba46:	4b3f      	ldr	r3, [pc, #252]	; (800bb44 <LWIP_ReInit+0x180>)
 800ba48:	701a      	strb	r2, [r3, #0]
		  NETMASK_ADDRESS[1] = (uint8_t)settings.retain.eth_sett.mask1;
 800ba4a:	4b3c      	ldr	r3, [pc, #240]	; (800bb3c <LWIP_ReInit+0x178>)
 800ba4c:	8bdb      	ldrh	r3, [r3, #30]
 800ba4e:	b2da      	uxtb	r2, r3
 800ba50:	4b3c      	ldr	r3, [pc, #240]	; (800bb44 <LWIP_ReInit+0x180>)
 800ba52:	705a      	strb	r2, [r3, #1]
		  NETMASK_ADDRESS[2] = (uint8_t)settings.retain.eth_sett.mask2;
 800ba54:	4b39      	ldr	r3, [pc, #228]	; (800bb3c <LWIP_ReInit+0x178>)
 800ba56:	8c1b      	ldrh	r3, [r3, #32]
 800ba58:	b2da      	uxtb	r2, r3
 800ba5a:	4b3a      	ldr	r3, [pc, #232]	; (800bb44 <LWIP_ReInit+0x180>)
 800ba5c:	709a      	strb	r2, [r3, #2]
		  NETMASK_ADDRESS[3] = (uint8_t)settings.retain.eth_sett.mask3;
 800ba5e:	4b37      	ldr	r3, [pc, #220]	; (800bb3c <LWIP_ReInit+0x178>)
 800ba60:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ba62:	b2da      	uxtb	r2, r3
 800ba64:	4b37      	ldr	r3, [pc, #220]	; (800bb44 <LWIP_ReInit+0x180>)
 800ba66:	70da      	strb	r2, [r3, #3]
	}
	if(((uint8_t)settings.retain.eth_sett.gateway0 ||
 800ba68:	4b34      	ldr	r3, [pc, #208]	; (800bb3c <LWIP_ReInit+0x178>)
 800ba6a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ba6c:	b2db      	uxtb	r3, r3
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d10e      	bne.n	800ba90 <LWIP_ReInit+0xcc>
			(uint8_t)settings.retain.eth_sett.gateway1 ||
 800ba72:	4b32      	ldr	r3, [pc, #200]	; (800bb3c <LWIP_ReInit+0x178>)
 800ba74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ba76:	b2db      	uxtb	r3, r3
	if(((uint8_t)settings.retain.eth_sett.gateway0 ||
 800ba78:	2b00      	cmp	r3, #0
 800ba7a:	d109      	bne.n	800ba90 <LWIP_ReInit+0xcc>
			(uint8_t)settings.retain.eth_sett.gateway2 ||
 800ba7c:	4b2f      	ldr	r3, [pc, #188]	; (800bb3c <LWIP_ReInit+0x178>)
 800ba7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba80:	b2db      	uxtb	r3, r3
			(uint8_t)settings.retain.eth_sett.gateway1 ||
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d104      	bne.n	800ba90 <LWIP_ReInit+0xcc>
			(uint8_t)settings.retain.eth_sett.gateway3))
 800ba86:	4b2d      	ldr	r3, [pc, #180]	; (800bb3c <LWIP_ReInit+0x178>)
 800ba88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ba8a:	b2db      	uxtb	r3, r3
			(uint8_t)settings.retain.eth_sett.gateway2 ||
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d013      	beq.n	800bab8 <LWIP_ReInit+0xf4>
	{
		  GATEWAY_ADDRESS[0] = (uint8_t)settings.retain.eth_sett.gateway0;
 800ba90:	4b2a      	ldr	r3, [pc, #168]	; (800bb3c <LWIP_ReInit+0x178>)
 800ba92:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ba94:	b2da      	uxtb	r2, r3
 800ba96:	4b2c      	ldr	r3, [pc, #176]	; (800bb48 <LWIP_ReInit+0x184>)
 800ba98:	701a      	strb	r2, [r3, #0]
		  GATEWAY_ADDRESS[1] = (uint8_t)settings.retain.eth_sett.gateway1;
 800ba9a:	4b28      	ldr	r3, [pc, #160]	; (800bb3c <LWIP_ReInit+0x178>)
 800ba9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ba9e:	b2da      	uxtb	r2, r3
 800baa0:	4b29      	ldr	r3, [pc, #164]	; (800bb48 <LWIP_ReInit+0x184>)
 800baa2:	705a      	strb	r2, [r3, #1]
		  GATEWAY_ADDRESS[2] = (uint8_t)settings.retain.eth_sett.gateway2;
 800baa4:	4b25      	ldr	r3, [pc, #148]	; (800bb3c <LWIP_ReInit+0x178>)
 800baa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800baa8:	b2da      	uxtb	r2, r3
 800baaa:	4b27      	ldr	r3, [pc, #156]	; (800bb48 <LWIP_ReInit+0x184>)
 800baac:	709a      	strb	r2, [r3, #2]
		  GATEWAY_ADDRESS[3] = (uint8_t)settings.retain.eth_sett.gateway3;
 800baae:	4b23      	ldr	r3, [pc, #140]	; (800bb3c <LWIP_ReInit+0x178>)
 800bab0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800bab2:	b2da      	uxtb	r2, r3
 800bab4:	4b24      	ldr	r3, [pc, #144]	; (800bb48 <LWIP_ReInit+0x184>)
 800bab6:	70da      	strb	r2, [r3, #3]
	}
	settings.retain.eth_sett.addr0 = IP_ADDRESS[0];
 800bab8:	4b21      	ldr	r3, [pc, #132]	; (800bb40 <LWIP_ReInit+0x17c>)
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	b29a      	uxth	r2, r3
 800babe:	4b1f      	ldr	r3, [pc, #124]	; (800bb3c <LWIP_ReInit+0x178>)
 800bac0:	829a      	strh	r2, [r3, #20]
	settings.retain.eth_sett.addr1 = IP_ADDRESS[1];
 800bac2:	4b1f      	ldr	r3, [pc, #124]	; (800bb40 <LWIP_ReInit+0x17c>)
 800bac4:	785b      	ldrb	r3, [r3, #1]
 800bac6:	b29a      	uxth	r2, r3
 800bac8:	4b1c      	ldr	r3, [pc, #112]	; (800bb3c <LWIP_ReInit+0x178>)
 800baca:	82da      	strh	r2, [r3, #22]
	settings.retain.eth_sett.addr2 = IP_ADDRESS[2];
 800bacc:	4b1c      	ldr	r3, [pc, #112]	; (800bb40 <LWIP_ReInit+0x17c>)
 800bace:	789b      	ldrb	r3, [r3, #2]
 800bad0:	b29a      	uxth	r2, r3
 800bad2:	4b1a      	ldr	r3, [pc, #104]	; (800bb3c <LWIP_ReInit+0x178>)
 800bad4:	831a      	strh	r2, [r3, #24]
	settings.retain.eth_sett.addr3 = IP_ADDRESS[3];
 800bad6:	4b1a      	ldr	r3, [pc, #104]	; (800bb40 <LWIP_ReInit+0x17c>)
 800bad8:	78db      	ldrb	r3, [r3, #3]
 800bada:	b29a      	uxth	r2, r3
 800badc:	4b17      	ldr	r3, [pc, #92]	; (800bb3c <LWIP_ReInit+0x178>)
 800bade:	835a      	strh	r2, [r3, #26]

	settings.retain.eth_sett.mask0 = NETMASK_ADDRESS[0];
 800bae0:	4b18      	ldr	r3, [pc, #96]	; (800bb44 <LWIP_ReInit+0x180>)
 800bae2:	781b      	ldrb	r3, [r3, #0]
 800bae4:	b29a      	uxth	r2, r3
 800bae6:	4b15      	ldr	r3, [pc, #84]	; (800bb3c <LWIP_ReInit+0x178>)
 800bae8:	839a      	strh	r2, [r3, #28]
	settings.retain.eth_sett.mask1 = NETMASK_ADDRESS[1];
 800baea:	4b16      	ldr	r3, [pc, #88]	; (800bb44 <LWIP_ReInit+0x180>)
 800baec:	785b      	ldrb	r3, [r3, #1]
 800baee:	b29a      	uxth	r2, r3
 800baf0:	4b12      	ldr	r3, [pc, #72]	; (800bb3c <LWIP_ReInit+0x178>)
 800baf2:	83da      	strh	r2, [r3, #30]
	settings.retain.eth_sett.mask2 = NETMASK_ADDRESS[2];
 800baf4:	4b13      	ldr	r3, [pc, #76]	; (800bb44 <LWIP_ReInit+0x180>)
 800baf6:	789b      	ldrb	r3, [r3, #2]
 800baf8:	b29a      	uxth	r2, r3
 800bafa:	4b10      	ldr	r3, [pc, #64]	; (800bb3c <LWIP_ReInit+0x178>)
 800bafc:	841a      	strh	r2, [r3, #32]
	settings.retain.eth_sett.mask3 = NETMASK_ADDRESS[3];
 800bafe:	4b11      	ldr	r3, [pc, #68]	; (800bb44 <LWIP_ReInit+0x180>)
 800bb00:	78db      	ldrb	r3, [r3, #3]
 800bb02:	b29a      	uxth	r2, r3
 800bb04:	4b0d      	ldr	r3, [pc, #52]	; (800bb3c <LWIP_ReInit+0x178>)
 800bb06:	845a      	strh	r2, [r3, #34]	; 0x22

	settings.retain.eth_sett.gateway0 =  GATEWAY_ADDRESS[0];
 800bb08:	4b0f      	ldr	r3, [pc, #60]	; (800bb48 <LWIP_ReInit+0x184>)
 800bb0a:	781b      	ldrb	r3, [r3, #0]
 800bb0c:	b29a      	uxth	r2, r3
 800bb0e:	4b0b      	ldr	r3, [pc, #44]	; (800bb3c <LWIP_ReInit+0x178>)
 800bb10:	849a      	strh	r2, [r3, #36]	; 0x24
	settings.retain.eth_sett.gateway1 =  GATEWAY_ADDRESS[1];
 800bb12:	4b0d      	ldr	r3, [pc, #52]	; (800bb48 <LWIP_ReInit+0x184>)
 800bb14:	785b      	ldrb	r3, [r3, #1]
 800bb16:	b29a      	uxth	r2, r3
 800bb18:	4b08      	ldr	r3, [pc, #32]	; (800bb3c <LWIP_ReInit+0x178>)
 800bb1a:	84da      	strh	r2, [r3, #38]	; 0x26
	settings.retain.eth_sett.gateway2 =  GATEWAY_ADDRESS[2];
 800bb1c:	4b0a      	ldr	r3, [pc, #40]	; (800bb48 <LWIP_ReInit+0x184>)
 800bb1e:	789b      	ldrb	r3, [r3, #2]
 800bb20:	b29a      	uxth	r2, r3
 800bb22:	4b06      	ldr	r3, [pc, #24]	; (800bb3c <LWIP_ReInit+0x178>)
 800bb24:	851a      	strh	r2, [r3, #40]	; 0x28
	settings.retain.eth_sett.gateway3 =  GATEWAY_ADDRESS[3];
 800bb26:	4b08      	ldr	r3, [pc, #32]	; (800bb48 <LWIP_ReInit+0x184>)
 800bb28:	78db      	ldrb	r3, [r3, #3]
 800bb2a:	b29a      	uxth	r2, r3
 800bb2c:	4b03      	ldr	r3, [pc, #12]	; (800bb3c <LWIP_ReInit+0x178>)
 800bb2e:	855a      	strh	r2, [r3, #42]	; 0x2a


}
 800bb30:	bf00      	nop
 800bb32:	46bd      	mov	sp, r7
 800bb34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb38:	4770      	bx	lr
 800bb3a:	bf00      	nop
 800bb3c:	20000bf0 	.word	0x20000bf0
 800bb40:	200010bc 	.word	0x200010bc
 800bb44:	200010c0 	.word	0x200010c0
 800bb48:	200010c4 	.word	0x200010c4

0800bb4c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b086      	sub	sp, #24
 800bb50:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800bb52:	4b99      	ldr	r3, [pc, #612]	; (800bdb8 <MX_LWIP_Init+0x26c>)
 800bb54:	22c0      	movs	r2, #192	; 0xc0
 800bb56:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800bb58:	4b97      	ldr	r3, [pc, #604]	; (800bdb8 <MX_LWIP_Init+0x26c>)
 800bb5a:	22a8      	movs	r2, #168	; 0xa8
 800bb5c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 100;
 800bb5e:	4b96      	ldr	r3, [pc, #600]	; (800bdb8 <MX_LWIP_Init+0x26c>)
 800bb60:	2264      	movs	r2, #100	; 0x64
 800bb62:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 177;
 800bb64:	4b94      	ldr	r3, [pc, #592]	; (800bdb8 <MX_LWIP_Init+0x26c>)
 800bb66:	22b1      	movs	r2, #177	; 0xb1
 800bb68:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800bb6a:	4b94      	ldr	r3, [pc, #592]	; (800bdbc <MX_LWIP_Init+0x270>)
 800bb6c:	22ff      	movs	r2, #255	; 0xff
 800bb6e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800bb70:	4b92      	ldr	r3, [pc, #584]	; (800bdbc <MX_LWIP_Init+0x270>)
 800bb72:	22ff      	movs	r2, #255	; 0xff
 800bb74:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800bb76:	4b91      	ldr	r3, [pc, #580]	; (800bdbc <MX_LWIP_Init+0x270>)
 800bb78:	22ff      	movs	r2, #255	; 0xff
 800bb7a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800bb7c:	4b8f      	ldr	r3, [pc, #572]	; (800bdbc <MX_LWIP_Init+0x270>)
 800bb7e:	2200      	movs	r2, #0
 800bb80:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800bb82:	4b8f      	ldr	r3, [pc, #572]	; (800bdc0 <MX_LWIP_Init+0x274>)
 800bb84:	22c0      	movs	r2, #192	; 0xc0
 800bb86:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800bb88:	4b8d      	ldr	r3, [pc, #564]	; (800bdc0 <MX_LWIP_Init+0x274>)
 800bb8a:	22a8      	movs	r2, #168	; 0xa8
 800bb8c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 100;
 800bb8e:	4b8c      	ldr	r3, [pc, #560]	; (800bdc0 <MX_LWIP_Init+0x274>)
 800bb90:	2264      	movs	r2, #100	; 0x64
 800bb92:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800bb94:	4b8a      	ldr	r3, [pc, #552]	; (800bdc0 <MX_LWIP_Init+0x274>)
 800bb96:	2201      	movs	r2, #1
 800bb98:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
  LWIP_ReInit();
 800bb9a:	f7ff ff13 	bl	800b9c4 <LWIP_ReInit>
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800bb9e:	2100      	movs	r1, #0
 800bba0:	2000      	movs	r0, #0
 800bba2:	f005 ff41 	bl	8011a28 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800bba6:	4b84      	ldr	r3, [pc, #528]	; (800bdb8 <MX_LWIP_Init+0x26c>)
 800bba8:	781b      	ldrb	r3, [r3, #0]
 800bbaa:	061a      	lsls	r2, r3, #24
 800bbac:	4b82      	ldr	r3, [pc, #520]	; (800bdb8 <MX_LWIP_Init+0x26c>)
 800bbae:	785b      	ldrb	r3, [r3, #1]
 800bbb0:	041b      	lsls	r3, r3, #16
 800bbb2:	431a      	orrs	r2, r3
 800bbb4:	4b80      	ldr	r3, [pc, #512]	; (800bdb8 <MX_LWIP_Init+0x26c>)
 800bbb6:	789b      	ldrb	r3, [r3, #2]
 800bbb8:	021b      	lsls	r3, r3, #8
 800bbba:	4313      	orrs	r3, r2
 800bbbc:	4a7e      	ldr	r2, [pc, #504]	; (800bdb8 <MX_LWIP_Init+0x26c>)
 800bbbe:	78d2      	ldrb	r2, [r2, #3]
 800bbc0:	4313      	orrs	r3, r2
 800bbc2:	061a      	lsls	r2, r3, #24
 800bbc4:	4b7c      	ldr	r3, [pc, #496]	; (800bdb8 <MX_LWIP_Init+0x26c>)
 800bbc6:	781b      	ldrb	r3, [r3, #0]
 800bbc8:	0619      	lsls	r1, r3, #24
 800bbca:	4b7b      	ldr	r3, [pc, #492]	; (800bdb8 <MX_LWIP_Init+0x26c>)
 800bbcc:	785b      	ldrb	r3, [r3, #1]
 800bbce:	041b      	lsls	r3, r3, #16
 800bbd0:	4319      	orrs	r1, r3
 800bbd2:	4b79      	ldr	r3, [pc, #484]	; (800bdb8 <MX_LWIP_Init+0x26c>)
 800bbd4:	789b      	ldrb	r3, [r3, #2]
 800bbd6:	021b      	lsls	r3, r3, #8
 800bbd8:	430b      	orrs	r3, r1
 800bbda:	4977      	ldr	r1, [pc, #476]	; (800bdb8 <MX_LWIP_Init+0x26c>)
 800bbdc:	78c9      	ldrb	r1, [r1, #3]
 800bbde:	430b      	orrs	r3, r1
 800bbe0:	021b      	lsls	r3, r3, #8
 800bbe2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bbe6:	431a      	orrs	r2, r3
 800bbe8:	4b73      	ldr	r3, [pc, #460]	; (800bdb8 <MX_LWIP_Init+0x26c>)
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	0619      	lsls	r1, r3, #24
 800bbee:	4b72      	ldr	r3, [pc, #456]	; (800bdb8 <MX_LWIP_Init+0x26c>)
 800bbf0:	785b      	ldrb	r3, [r3, #1]
 800bbf2:	041b      	lsls	r3, r3, #16
 800bbf4:	4319      	orrs	r1, r3
 800bbf6:	4b70      	ldr	r3, [pc, #448]	; (800bdb8 <MX_LWIP_Init+0x26c>)
 800bbf8:	789b      	ldrb	r3, [r3, #2]
 800bbfa:	021b      	lsls	r3, r3, #8
 800bbfc:	430b      	orrs	r3, r1
 800bbfe:	496e      	ldr	r1, [pc, #440]	; (800bdb8 <MX_LWIP_Init+0x26c>)
 800bc00:	78c9      	ldrb	r1, [r1, #3]
 800bc02:	430b      	orrs	r3, r1
 800bc04:	0a1b      	lsrs	r3, r3, #8
 800bc06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bc0a:	431a      	orrs	r2, r3
 800bc0c:	4b6a      	ldr	r3, [pc, #424]	; (800bdb8 <MX_LWIP_Init+0x26c>)
 800bc0e:	781b      	ldrb	r3, [r3, #0]
 800bc10:	0619      	lsls	r1, r3, #24
 800bc12:	4b69      	ldr	r3, [pc, #420]	; (800bdb8 <MX_LWIP_Init+0x26c>)
 800bc14:	785b      	ldrb	r3, [r3, #1]
 800bc16:	041b      	lsls	r3, r3, #16
 800bc18:	4319      	orrs	r1, r3
 800bc1a:	4b67      	ldr	r3, [pc, #412]	; (800bdb8 <MX_LWIP_Init+0x26c>)
 800bc1c:	789b      	ldrb	r3, [r3, #2]
 800bc1e:	021b      	lsls	r3, r3, #8
 800bc20:	430b      	orrs	r3, r1
 800bc22:	4965      	ldr	r1, [pc, #404]	; (800bdb8 <MX_LWIP_Init+0x26c>)
 800bc24:	78c9      	ldrb	r1, [r1, #3]
 800bc26:	430b      	orrs	r3, r1
 800bc28:	0e1b      	lsrs	r3, r3, #24
 800bc2a:	4313      	orrs	r3, r2
 800bc2c:	4a65      	ldr	r2, [pc, #404]	; (800bdc4 <MX_LWIP_Init+0x278>)
 800bc2e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800bc30:	4b62      	ldr	r3, [pc, #392]	; (800bdbc <MX_LWIP_Init+0x270>)
 800bc32:	781b      	ldrb	r3, [r3, #0]
 800bc34:	061a      	lsls	r2, r3, #24
 800bc36:	4b61      	ldr	r3, [pc, #388]	; (800bdbc <MX_LWIP_Init+0x270>)
 800bc38:	785b      	ldrb	r3, [r3, #1]
 800bc3a:	041b      	lsls	r3, r3, #16
 800bc3c:	431a      	orrs	r2, r3
 800bc3e:	4b5f      	ldr	r3, [pc, #380]	; (800bdbc <MX_LWIP_Init+0x270>)
 800bc40:	789b      	ldrb	r3, [r3, #2]
 800bc42:	021b      	lsls	r3, r3, #8
 800bc44:	4313      	orrs	r3, r2
 800bc46:	4a5d      	ldr	r2, [pc, #372]	; (800bdbc <MX_LWIP_Init+0x270>)
 800bc48:	78d2      	ldrb	r2, [r2, #3]
 800bc4a:	4313      	orrs	r3, r2
 800bc4c:	061a      	lsls	r2, r3, #24
 800bc4e:	4b5b      	ldr	r3, [pc, #364]	; (800bdbc <MX_LWIP_Init+0x270>)
 800bc50:	781b      	ldrb	r3, [r3, #0]
 800bc52:	0619      	lsls	r1, r3, #24
 800bc54:	4b59      	ldr	r3, [pc, #356]	; (800bdbc <MX_LWIP_Init+0x270>)
 800bc56:	785b      	ldrb	r3, [r3, #1]
 800bc58:	041b      	lsls	r3, r3, #16
 800bc5a:	4319      	orrs	r1, r3
 800bc5c:	4b57      	ldr	r3, [pc, #348]	; (800bdbc <MX_LWIP_Init+0x270>)
 800bc5e:	789b      	ldrb	r3, [r3, #2]
 800bc60:	021b      	lsls	r3, r3, #8
 800bc62:	430b      	orrs	r3, r1
 800bc64:	4955      	ldr	r1, [pc, #340]	; (800bdbc <MX_LWIP_Init+0x270>)
 800bc66:	78c9      	ldrb	r1, [r1, #3]
 800bc68:	430b      	orrs	r3, r1
 800bc6a:	021b      	lsls	r3, r3, #8
 800bc6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bc70:	431a      	orrs	r2, r3
 800bc72:	4b52      	ldr	r3, [pc, #328]	; (800bdbc <MX_LWIP_Init+0x270>)
 800bc74:	781b      	ldrb	r3, [r3, #0]
 800bc76:	0619      	lsls	r1, r3, #24
 800bc78:	4b50      	ldr	r3, [pc, #320]	; (800bdbc <MX_LWIP_Init+0x270>)
 800bc7a:	785b      	ldrb	r3, [r3, #1]
 800bc7c:	041b      	lsls	r3, r3, #16
 800bc7e:	4319      	orrs	r1, r3
 800bc80:	4b4e      	ldr	r3, [pc, #312]	; (800bdbc <MX_LWIP_Init+0x270>)
 800bc82:	789b      	ldrb	r3, [r3, #2]
 800bc84:	021b      	lsls	r3, r3, #8
 800bc86:	430b      	orrs	r3, r1
 800bc88:	494c      	ldr	r1, [pc, #304]	; (800bdbc <MX_LWIP_Init+0x270>)
 800bc8a:	78c9      	ldrb	r1, [r1, #3]
 800bc8c:	430b      	orrs	r3, r1
 800bc8e:	0a1b      	lsrs	r3, r3, #8
 800bc90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bc94:	431a      	orrs	r2, r3
 800bc96:	4b49      	ldr	r3, [pc, #292]	; (800bdbc <MX_LWIP_Init+0x270>)
 800bc98:	781b      	ldrb	r3, [r3, #0]
 800bc9a:	0619      	lsls	r1, r3, #24
 800bc9c:	4b47      	ldr	r3, [pc, #284]	; (800bdbc <MX_LWIP_Init+0x270>)
 800bc9e:	785b      	ldrb	r3, [r3, #1]
 800bca0:	041b      	lsls	r3, r3, #16
 800bca2:	4319      	orrs	r1, r3
 800bca4:	4b45      	ldr	r3, [pc, #276]	; (800bdbc <MX_LWIP_Init+0x270>)
 800bca6:	789b      	ldrb	r3, [r3, #2]
 800bca8:	021b      	lsls	r3, r3, #8
 800bcaa:	430b      	orrs	r3, r1
 800bcac:	4943      	ldr	r1, [pc, #268]	; (800bdbc <MX_LWIP_Init+0x270>)
 800bcae:	78c9      	ldrb	r1, [r1, #3]
 800bcb0:	430b      	orrs	r3, r1
 800bcb2:	0e1b      	lsrs	r3, r3, #24
 800bcb4:	4313      	orrs	r3, r2
 800bcb6:	4a44      	ldr	r2, [pc, #272]	; (800bdc8 <MX_LWIP_Init+0x27c>)
 800bcb8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800bcba:	4b41      	ldr	r3, [pc, #260]	; (800bdc0 <MX_LWIP_Init+0x274>)
 800bcbc:	781b      	ldrb	r3, [r3, #0]
 800bcbe:	061a      	lsls	r2, r3, #24
 800bcc0:	4b3f      	ldr	r3, [pc, #252]	; (800bdc0 <MX_LWIP_Init+0x274>)
 800bcc2:	785b      	ldrb	r3, [r3, #1]
 800bcc4:	041b      	lsls	r3, r3, #16
 800bcc6:	431a      	orrs	r2, r3
 800bcc8:	4b3d      	ldr	r3, [pc, #244]	; (800bdc0 <MX_LWIP_Init+0x274>)
 800bcca:	789b      	ldrb	r3, [r3, #2]
 800bccc:	021b      	lsls	r3, r3, #8
 800bcce:	4313      	orrs	r3, r2
 800bcd0:	4a3b      	ldr	r2, [pc, #236]	; (800bdc0 <MX_LWIP_Init+0x274>)
 800bcd2:	78d2      	ldrb	r2, [r2, #3]
 800bcd4:	4313      	orrs	r3, r2
 800bcd6:	061a      	lsls	r2, r3, #24
 800bcd8:	4b39      	ldr	r3, [pc, #228]	; (800bdc0 <MX_LWIP_Init+0x274>)
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	0619      	lsls	r1, r3, #24
 800bcde:	4b38      	ldr	r3, [pc, #224]	; (800bdc0 <MX_LWIP_Init+0x274>)
 800bce0:	785b      	ldrb	r3, [r3, #1]
 800bce2:	041b      	lsls	r3, r3, #16
 800bce4:	4319      	orrs	r1, r3
 800bce6:	4b36      	ldr	r3, [pc, #216]	; (800bdc0 <MX_LWIP_Init+0x274>)
 800bce8:	789b      	ldrb	r3, [r3, #2]
 800bcea:	021b      	lsls	r3, r3, #8
 800bcec:	430b      	orrs	r3, r1
 800bcee:	4934      	ldr	r1, [pc, #208]	; (800bdc0 <MX_LWIP_Init+0x274>)
 800bcf0:	78c9      	ldrb	r1, [r1, #3]
 800bcf2:	430b      	orrs	r3, r1
 800bcf4:	021b      	lsls	r3, r3, #8
 800bcf6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800bcfa:	431a      	orrs	r2, r3
 800bcfc:	4b30      	ldr	r3, [pc, #192]	; (800bdc0 <MX_LWIP_Init+0x274>)
 800bcfe:	781b      	ldrb	r3, [r3, #0]
 800bd00:	0619      	lsls	r1, r3, #24
 800bd02:	4b2f      	ldr	r3, [pc, #188]	; (800bdc0 <MX_LWIP_Init+0x274>)
 800bd04:	785b      	ldrb	r3, [r3, #1]
 800bd06:	041b      	lsls	r3, r3, #16
 800bd08:	4319      	orrs	r1, r3
 800bd0a:	4b2d      	ldr	r3, [pc, #180]	; (800bdc0 <MX_LWIP_Init+0x274>)
 800bd0c:	789b      	ldrb	r3, [r3, #2]
 800bd0e:	021b      	lsls	r3, r3, #8
 800bd10:	430b      	orrs	r3, r1
 800bd12:	492b      	ldr	r1, [pc, #172]	; (800bdc0 <MX_LWIP_Init+0x274>)
 800bd14:	78c9      	ldrb	r1, [r1, #3]
 800bd16:	430b      	orrs	r3, r1
 800bd18:	0a1b      	lsrs	r3, r3, #8
 800bd1a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bd1e:	431a      	orrs	r2, r3
 800bd20:	4b27      	ldr	r3, [pc, #156]	; (800bdc0 <MX_LWIP_Init+0x274>)
 800bd22:	781b      	ldrb	r3, [r3, #0]
 800bd24:	0619      	lsls	r1, r3, #24
 800bd26:	4b26      	ldr	r3, [pc, #152]	; (800bdc0 <MX_LWIP_Init+0x274>)
 800bd28:	785b      	ldrb	r3, [r3, #1]
 800bd2a:	041b      	lsls	r3, r3, #16
 800bd2c:	4319      	orrs	r1, r3
 800bd2e:	4b24      	ldr	r3, [pc, #144]	; (800bdc0 <MX_LWIP_Init+0x274>)
 800bd30:	789b      	ldrb	r3, [r3, #2]
 800bd32:	021b      	lsls	r3, r3, #8
 800bd34:	430b      	orrs	r3, r1
 800bd36:	4922      	ldr	r1, [pc, #136]	; (800bdc0 <MX_LWIP_Init+0x274>)
 800bd38:	78c9      	ldrb	r1, [r1, #3]
 800bd3a:	430b      	orrs	r3, r1
 800bd3c:	0e1b      	lsrs	r3, r3, #24
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	4a22      	ldr	r2, [pc, #136]	; (800bdcc <MX_LWIP_Init+0x280>)
 800bd42:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800bd44:	4b22      	ldr	r3, [pc, #136]	; (800bdd0 <MX_LWIP_Init+0x284>)
 800bd46:	9302      	str	r3, [sp, #8]
 800bd48:	4b22      	ldr	r3, [pc, #136]	; (800bdd4 <MX_LWIP_Init+0x288>)
 800bd4a:	9301      	str	r3, [sp, #4]
 800bd4c:	2300      	movs	r3, #0
 800bd4e:	9300      	str	r3, [sp, #0]
 800bd50:	4b1e      	ldr	r3, [pc, #120]	; (800bdcc <MX_LWIP_Init+0x280>)
 800bd52:	4a1d      	ldr	r2, [pc, #116]	; (800bdc8 <MX_LWIP_Init+0x27c>)
 800bd54:	491b      	ldr	r1, [pc, #108]	; (800bdc4 <MX_LWIP_Init+0x278>)
 800bd56:	4820      	ldr	r0, [pc, #128]	; (800bdd8 <MX_LWIP_Init+0x28c>)
 800bd58:	f006 fbea 	bl	8012530 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800bd5c:	481e      	ldr	r0, [pc, #120]	; (800bdd8 <MX_LWIP_Init+0x28c>)
 800bd5e:	f006 fd99 	bl	8012894 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800bd62:	4b1d      	ldr	r3, [pc, #116]	; (800bdd8 <MX_LWIP_Init+0x28c>)
 800bd64:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bd68:	089b      	lsrs	r3, r3, #2
 800bd6a:	f003 0301 	and.w	r3, r3, #1
 800bd6e:	b2db      	uxtb	r3, r3
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d003      	beq.n	800bd7c <MX_LWIP_Init+0x230>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800bd74:	4818      	ldr	r0, [pc, #96]	; (800bdd8 <MX_LWIP_Init+0x28c>)
 800bd76:	f006 fd9d 	bl	80128b4 <netif_set_up>
 800bd7a:	e002      	b.n	800bd82 <MX_LWIP_Init+0x236>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800bd7c:	4816      	ldr	r0, [pc, #88]	; (800bdd8 <MX_LWIP_Init+0x28c>)
 800bd7e:	f006 fe05 	bl	801298c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800bd82:	4916      	ldr	r1, [pc, #88]	; (800bddc <MX_LWIP_Init+0x290>)
 800bd84:	4814      	ldr	r0, [pc, #80]	; (800bdd8 <MX_LWIP_Init+0x28c>)
 800bd86:	f006 fe33 	bl	80129f0 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	603b      	str	r3, [r7, #0]
 800bd8e:	2300      	movs	r3, #0
 800bd90:	607b      	str	r3, [r7, #4]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800bd92:	463b      	mov	r3, r7
 800bd94:	2101      	movs	r1, #1
 800bd96:	4618      	mov	r0, r3
 800bd98:	f000 fd34 	bl	800c804 <osSemaphoreCreate>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	4a10      	ldr	r2, [pc, #64]	; (800bde0 <MX_LWIP_Init+0x294>)
 800bda0:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 800bda2:	4b10      	ldr	r3, [pc, #64]	; (800bde4 <MX_LWIP_Init+0x298>)
 800bda4:	4a0c      	ldr	r2, [pc, #48]	; (800bdd8 <MX_LWIP_Init+0x28c>)
 800bda6:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800bda8:	4b0d      	ldr	r3, [pc, #52]	; (800bde0 <MX_LWIP_Init+0x294>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4a0d      	ldr	r2, [pc, #52]	; (800bde4 <MX_LWIP_Init+0x298>)
 800bdae:	6053      	str	r3, [r2, #4]
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800bdb0:	bf00      	nop
 800bdb2:	3708      	adds	r7, #8
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}
 800bdb8:	200010bc 	.word	0x200010bc
 800bdbc:	200010c0 	.word	0x200010c0
 800bdc0:	200010c4 	.word	0x200010c4
 800bdc4:	200010b0 	.word	0x200010b0
 800bdc8:	200010b4 	.word	0x200010b4
 800bdcc:	200010b8 	.word	0x200010b8
 800bdd0:	08011939 	.word	0x08011939
 800bdd4:	0800c411 	.word	0x0800c411
 800bdd8:	2000107c 	.word	0x2000107c
 800bddc:	0800c47d 	.word	0x0800c47d
 800bde0:	20001070 	.word	0x20001070
 800bde4:	20001074 	.word	0x20001074

0800bde8 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b08e      	sub	sp, #56	; 0x38
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bdf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	601a      	str	r2, [r3, #0]
 800bdf8:	605a      	str	r2, [r3, #4]
 800bdfa:	609a      	str	r2, [r3, #8]
 800bdfc:	60da      	str	r2, [r3, #12]
 800bdfe:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	4a4a      	ldr	r2, [pc, #296]	; (800bf30 <HAL_ETH_MspInit+0x148>)
 800be06:	4293      	cmp	r3, r2
 800be08:	f040 808d 	bne.w	800bf26 <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800be0c:	2300      	movs	r3, #0
 800be0e:	623b      	str	r3, [r7, #32]
 800be10:	4b48      	ldr	r3, [pc, #288]	; (800bf34 <HAL_ETH_MspInit+0x14c>)
 800be12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be14:	4a47      	ldr	r2, [pc, #284]	; (800bf34 <HAL_ETH_MspInit+0x14c>)
 800be16:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800be1a:	6313      	str	r3, [r2, #48]	; 0x30
 800be1c:	4b45      	ldr	r3, [pc, #276]	; (800bf34 <HAL_ETH_MspInit+0x14c>)
 800be1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be24:	623b      	str	r3, [r7, #32]
 800be26:	6a3b      	ldr	r3, [r7, #32]
 800be28:	2300      	movs	r3, #0
 800be2a:	61fb      	str	r3, [r7, #28]
 800be2c:	4b41      	ldr	r3, [pc, #260]	; (800bf34 <HAL_ETH_MspInit+0x14c>)
 800be2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be30:	4a40      	ldr	r2, [pc, #256]	; (800bf34 <HAL_ETH_MspInit+0x14c>)
 800be32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800be36:	6313      	str	r3, [r2, #48]	; 0x30
 800be38:	4b3e      	ldr	r3, [pc, #248]	; (800bf34 <HAL_ETH_MspInit+0x14c>)
 800be3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800be40:	61fb      	str	r3, [r7, #28]
 800be42:	69fb      	ldr	r3, [r7, #28]
 800be44:	2300      	movs	r3, #0
 800be46:	61bb      	str	r3, [r7, #24]
 800be48:	4b3a      	ldr	r3, [pc, #232]	; (800bf34 <HAL_ETH_MspInit+0x14c>)
 800be4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be4c:	4a39      	ldr	r2, [pc, #228]	; (800bf34 <HAL_ETH_MspInit+0x14c>)
 800be4e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800be52:	6313      	str	r3, [r2, #48]	; 0x30
 800be54:	4b37      	ldr	r3, [pc, #220]	; (800bf34 <HAL_ETH_MspInit+0x14c>)
 800be56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be58:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be5c:	61bb      	str	r3, [r7, #24]
 800be5e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800be60:	2300      	movs	r3, #0
 800be62:	617b      	str	r3, [r7, #20]
 800be64:	4b33      	ldr	r3, [pc, #204]	; (800bf34 <HAL_ETH_MspInit+0x14c>)
 800be66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be68:	4a32      	ldr	r2, [pc, #200]	; (800bf34 <HAL_ETH_MspInit+0x14c>)
 800be6a:	f043 0304 	orr.w	r3, r3, #4
 800be6e:	6313      	str	r3, [r2, #48]	; 0x30
 800be70:	4b30      	ldr	r3, [pc, #192]	; (800bf34 <HAL_ETH_MspInit+0x14c>)
 800be72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be74:	f003 0304 	and.w	r3, r3, #4
 800be78:	617b      	str	r3, [r7, #20]
 800be7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800be7c:	2300      	movs	r3, #0
 800be7e:	613b      	str	r3, [r7, #16]
 800be80:	4b2c      	ldr	r3, [pc, #176]	; (800bf34 <HAL_ETH_MspInit+0x14c>)
 800be82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be84:	4a2b      	ldr	r2, [pc, #172]	; (800bf34 <HAL_ETH_MspInit+0x14c>)
 800be86:	f043 0301 	orr.w	r3, r3, #1
 800be8a:	6313      	str	r3, [r2, #48]	; 0x30
 800be8c:	4b29      	ldr	r3, [pc, #164]	; (800bf34 <HAL_ETH_MspInit+0x14c>)
 800be8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be90:	f003 0301 	and.w	r3, r3, #1
 800be94:	613b      	str	r3, [r7, #16]
 800be96:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800be98:	2300      	movs	r3, #0
 800be9a:	60fb      	str	r3, [r7, #12]
 800be9c:	4b25      	ldr	r3, [pc, #148]	; (800bf34 <HAL_ETH_MspInit+0x14c>)
 800be9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bea0:	4a24      	ldr	r2, [pc, #144]	; (800bf34 <HAL_ETH_MspInit+0x14c>)
 800bea2:	f043 0302 	orr.w	r3, r3, #2
 800bea6:	6313      	str	r3, [r2, #48]	; 0x30
 800bea8:	4b22      	ldr	r3, [pc, #136]	; (800bf34 <HAL_ETH_MspInit+0x14c>)
 800beaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800beac:	f003 0302 	and.w	r3, r3, #2
 800beb0:	60fb      	str	r3, [r7, #12]
 800beb2:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800beb4:	2332      	movs	r3, #50	; 0x32
 800beb6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800beb8:	2302      	movs	r3, #2
 800beba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bebc:	2300      	movs	r3, #0
 800bebe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bec0:	2303      	movs	r3, #3
 800bec2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bec4:	230b      	movs	r3, #11
 800bec6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800bec8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800becc:	4619      	mov	r1, r3
 800bece:	481a      	ldr	r0, [pc, #104]	; (800bf38 <HAL_ETH_MspInit+0x150>)
 800bed0:	f7fc f8ca 	bl	8008068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800bed4:	2386      	movs	r3, #134	; 0x86
 800bed6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bed8:	2302      	movs	r3, #2
 800beda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bedc:	2300      	movs	r3, #0
 800bede:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bee0:	2303      	movs	r3, #3
 800bee2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bee4:	230b      	movs	r3, #11
 800bee6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bee8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800beec:	4619      	mov	r1, r3
 800beee:	4813      	ldr	r0, [pc, #76]	; (800bf3c <HAL_ETH_MspInit+0x154>)
 800bef0:	f7fc f8ba 	bl	8008068 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800bef4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800bef8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800befa:	2302      	movs	r3, #2
 800befc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800befe:	2300      	movs	r3, #0
 800bf00:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bf02:	2303      	movs	r3, #3
 800bf04:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800bf06:	230b      	movs	r3, #11
 800bf08:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bf0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf0e:	4619      	mov	r1, r3
 800bf10:	480b      	ldr	r0, [pc, #44]	; (800bf40 <HAL_ETH_MspInit+0x158>)
 800bf12:	f7fc f8a9 	bl	8008068 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800bf16:	2200      	movs	r2, #0
 800bf18:	2105      	movs	r1, #5
 800bf1a:	203d      	movs	r0, #61	; 0x3d
 800bf1c:	f7fa fa7e 	bl	800641c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800bf20:	203d      	movs	r0, #61	; 0x3d
 800bf22:	f7fa fa97 	bl	8006454 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800bf26:	bf00      	nop
 800bf28:	3738      	adds	r7, #56	; 0x38
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	40028000 	.word	0x40028000
 800bf34:	40023800 	.word	0x40023800
 800bf38:	40020800 	.word	0x40020800
 800bf3c:	40020000 	.word	0x40020000
 800bf40:	40020400 	.word	0x40020400

0800bf44 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b082      	sub	sp, #8
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800bf4c:	4b04      	ldr	r3, [pc, #16]	; (800bf60 <HAL_ETH_RxCpltCallback+0x1c>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4618      	mov	r0, r3
 800bf52:	f000 fcd7 	bl	800c904 <osSemaphoreRelease>
}
 800bf56:	bf00      	nop
 800bf58:	3708      	adds	r7, #8
 800bf5a:	46bd      	mov	sp, r7
 800bf5c:	bd80      	pop	{r7, pc}
 800bf5e:	bf00      	nop
 800bf60:	20004168 	.word	0x20004168

0800bf64 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800bf64:	b5b0      	push	{r4, r5, r7, lr}
 800bf66:	b090      	sub	sp, #64	; 0x40
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800bf70:	4b5f      	ldr	r3, [pc, #380]	; (800c0f0 <low_level_init+0x18c>)
 800bf72:	4a60      	ldr	r2, [pc, #384]	; (800c0f4 <low_level_init+0x190>)
 800bf74:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_DISABLE;
 800bf76:	4b5e      	ldr	r3, [pc, #376]	; (800c0f0 <low_level_init+0x18c>)
 800bf78:	2200      	movs	r2, #0
 800bf7a:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800bf7c:	4b5c      	ldr	r3, [pc, #368]	; (800c0f0 <low_level_init+0x18c>)
 800bf7e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800bf82:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800bf84:	4b5a      	ldr	r3, [pc, #360]	; (800c0f0 <low_level_init+0x18c>)
 800bf86:	2200      	movs	r2, #0
 800bf88:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800bf8a:	4b59      	ldr	r3, [pc, #356]	; (800c0f0 <low_level_init+0x18c>)
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800bf90:	2300      	movs	r3, #0
 800bf92:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800bf96:	2380      	movs	r3, #128	; 0x80
 800bf98:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800bf9c:	23e1      	movs	r3, #225	; 0xe1
 800bf9e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x13;
 800bfa8:	2313      	movs	r3, #19
 800bfaa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800bfb4:	4a4e      	ldr	r2, [pc, #312]	; (800c0f0 <low_level_init+0x18c>)
 800bfb6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800bfba:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800bfbc:	4b4c      	ldr	r3, [pc, #304]	; (800c0f0 <low_level_init+0x18c>)
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800bfc2:	4b4b      	ldr	r3, [pc, #300]	; (800c0f0 <low_level_init+0x18c>)
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800bfc8:	4b49      	ldr	r3, [pc, #292]	; (800c0f0 <low_level_init+0x18c>)
 800bfca:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800bfce:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800bfd0:	4847      	ldr	r0, [pc, #284]	; (800c0f0 <low_level_init+0x18c>)
 800bfd2:	f7fa febb 	bl	8006d4c <HAL_ETH_Init>
 800bfd6:	4603      	mov	r3, r0
 800bfd8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800bfdc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	d108      	bne.n	800bff6 <low_level_init+0x92>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bfea:	f043 0304 	orr.w	r3, r3, #4
 800bfee:	b2da      	uxtb	r2, r3
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800bff6:	2304      	movs	r3, #4
 800bff8:	4a3f      	ldr	r2, [pc, #252]	; (800c0f8 <low_level_init+0x194>)
 800bffa:	4940      	ldr	r1, [pc, #256]	; (800c0fc <low_level_init+0x198>)
 800bffc:	483c      	ldr	r0, [pc, #240]	; (800c0f0 <low_level_init+0x18c>)
 800bffe:	f7fb f83f 	bl	8007080 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800c002:	2304      	movs	r3, #4
 800c004:	4a3e      	ldr	r2, [pc, #248]	; (800c100 <low_level_init+0x19c>)
 800c006:	493f      	ldr	r1, [pc, #252]	; (800c104 <low_level_init+0x1a0>)
 800c008:	4839      	ldr	r0, [pc, #228]	; (800c0f0 <low_level_init+0x18c>)
 800c00a:	f7fb f8a1 	bl	8007150 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	2206      	movs	r2, #6
 800c012:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800c016:	4b36      	ldr	r3, [pc, #216]	; (800c0f0 <low_level_init+0x18c>)
 800c018:	695b      	ldr	r3, [r3, #20]
 800c01a:	781a      	ldrb	r2, [r3, #0]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800c022:	4b33      	ldr	r3, [pc, #204]	; (800c0f0 <low_level_init+0x18c>)
 800c024:	695b      	ldr	r3, [r3, #20]
 800c026:	785a      	ldrb	r2, [r3, #1]
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800c02e:	4b30      	ldr	r3, [pc, #192]	; (800c0f0 <low_level_init+0x18c>)
 800c030:	695b      	ldr	r3, [r3, #20]
 800c032:	789a      	ldrb	r2, [r3, #2]
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800c03a:	4b2d      	ldr	r3, [pc, #180]	; (800c0f0 <low_level_init+0x18c>)
 800c03c:	695b      	ldr	r3, [r3, #20]
 800c03e:	78da      	ldrb	r2, [r3, #3]
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800c046:	4b2a      	ldr	r3, [pc, #168]	; (800c0f0 <low_level_init+0x18c>)
 800c048:	695b      	ldr	r3, [r3, #20]
 800c04a:	791a      	ldrb	r2, [r3, #4]
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800c052:	4b27      	ldr	r3, [pc, #156]	; (800c0f0 <low_level_init+0x18c>)
 800c054:	695b      	ldr	r3, [r3, #20]
 800c056:	795a      	ldrb	r2, [r3, #5]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800c064:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c06c:	f043 030a 	orr.w	r3, r3, #10
 800c070:	b2da      	uxtb	r2, r3
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800c078:	2300      	movs	r3, #0
 800c07a:	62bb      	str	r3, [r7, #40]	; 0x28
 800c07c:	2300      	movs	r3, #0
 800c07e:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800c080:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800c084:	2101      	movs	r1, #1
 800c086:	4618      	mov	r0, r3
 800c088:	f000 fbbc 	bl	800c804 <osSemaphoreCreate>
 800c08c:	4603      	mov	r3, r0
 800c08e:	4a1e      	ldr	r2, [pc, #120]	; (800c108 <low_level_init+0x1a4>)
 800c090:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800c092:	4b1e      	ldr	r3, [pc, #120]	; (800c10c <low_level_init+0x1a8>)
 800c094:	f107 040c 	add.w	r4, r7, #12
 800c098:	461d      	mov	r5, r3
 800c09a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c09c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c09e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800c0a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800c0a6:	f107 030c 	add.w	r3, r7, #12
 800c0aa:	6879      	ldr	r1, [r7, #4]
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f000 faac 	bl	800c60a <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800c0b2:	480f      	ldr	r0, [pc, #60]	; (800c0f0 <low_level_init+0x18c>)
 800c0b4:	f7fb fb70 	bl	8007798 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800c0b8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c0bc:	461a      	mov	r2, r3
 800c0be:	211d      	movs	r1, #29
 800c0c0:	480b      	ldr	r0, [pc, #44]	; (800c0f0 <low_level_init+0x18c>)
 800c0c2:	f7fb fa9b 	bl	80075fc <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800c0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0c8:	f043 030b 	orr.w	r3, r3, #11
 800c0cc:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800c0ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0d0:	461a      	mov	r2, r3
 800c0d2:	211d      	movs	r1, #29
 800c0d4:	4806      	ldr	r0, [pc, #24]	; (800c0f0 <low_level_init+0x18c>)
 800c0d6:	f7fb faf9 	bl	80076cc <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800c0da:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800c0de:	461a      	mov	r2, r3
 800c0e0:	211d      	movs	r1, #29
 800c0e2:	4803      	ldr	r0, [pc, #12]	; (800c0f0 <low_level_init+0x18c>)
 800c0e4:	f7fb fa8a 	bl	80075fc <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800c0e8:	bf00      	nop
 800c0ea:	3740      	adds	r7, #64	; 0x40
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bdb0      	pop	{r4, r5, r7, pc}
 800c0f0:	2000416c 	.word	0x2000416c
 800c0f4:	40028000 	.word	0x40028000
 800c0f8:	20002998 	.word	0x20002998
 800c0fc:	20001148 	.word	0x20001148
 800c100:	200011c8 	.word	0x200011c8
 800c104:	200010c8 	.word	0x200010c8
 800c108:	20004168 	.word	0x20004168
 800c10c:	0801e680 	.word	0x0801e680

0800c110 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800c110:	b580      	push	{r7, lr}
 800c112:	b08a      	sub	sp, #40	; 0x28
 800c114:	af00      	add	r7, sp, #0
 800c116:	6078      	str	r0, [r7, #4]
 800c118:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800c11a:	4b4b      	ldr	r3, [pc, #300]	; (800c248 <low_level_output+0x138>)
 800c11c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c11e:	689b      	ldr	r3, [r3, #8]
 800c120:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800c122:	2300      	movs	r3, #0
 800c124:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800c126:	2300      	movs	r3, #0
 800c128:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800c12a:	2300      	movs	r3, #0
 800c12c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800c12e:	2300      	movs	r3, #0
 800c130:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800c132:	4b45      	ldr	r3, [pc, #276]	; (800c248 <low_level_output+0x138>)
 800c134:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c136:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800c138:	2300      	movs	r3, #0
 800c13a:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800c13c:	683b      	ldr	r3, [r7, #0]
 800c13e:	623b      	str	r3, [r7, #32]
 800c140:	e05a      	b.n	800c1f8 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800c142:	69bb      	ldr	r3, [r7, #24]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	2b00      	cmp	r3, #0
 800c148:	da03      	bge.n	800c152 <low_level_output+0x42>
      {
        errval = ERR_USE;
 800c14a:	23f8      	movs	r3, #248	; 0xf8
 800c14c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800c150:	e05c      	b.n	800c20c <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800c152:	6a3b      	ldr	r3, [r7, #32]
 800c154:	895b      	ldrh	r3, [r3, #10]
 800c156:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800c158:	2300      	movs	r3, #0
 800c15a:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800c15c:	e02f      	b.n	800c1be <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800c15e:	69fa      	ldr	r2, [r7, #28]
 800c160:	693b      	ldr	r3, [r7, #16]
 800c162:	18d0      	adds	r0, r2, r3
 800c164:	6a3b      	ldr	r3, [r7, #32]
 800c166:	685a      	ldr	r2, [r3, #4]
 800c168:	68bb      	ldr	r3, [r7, #8]
 800c16a:	18d1      	adds	r1, r2, r3
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800c172:	3304      	adds	r3, #4
 800c174:	461a      	mov	r2, r3
 800c176:	f010 fe8d 	bl	801ce94 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800c17a:	69bb      	ldr	r3, [r7, #24]
 800c17c:	68db      	ldr	r3, [r3, #12]
 800c17e:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800c180:	69bb      	ldr	r3, [r7, #24]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	2b00      	cmp	r3, #0
 800c186:	da03      	bge.n	800c190 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800c188:	23f8      	movs	r3, #248	; 0xf8
 800c18a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800c18e:	e03d      	b.n	800c20c <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800c190:	69bb      	ldr	r3, [r7, #24]
 800c192:	689b      	ldr	r3, [r3, #8]
 800c194:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800c196:	693a      	ldr	r2, [r7, #16]
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	4413      	add	r3, r2
 800c19c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800c1a0:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800c1a2:	68ba      	ldr	r2, [r7, #8]
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	1ad3      	subs	r3, r2, r3
 800c1a8:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800c1ac:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800c1ae:	697a      	ldr	r2, [r7, #20]
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	1ad3      	subs	r3, r2, r3
 800c1b4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800c1b8:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800c1be:	68fa      	ldr	r2, [r7, #12]
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	4413      	add	r3, r2
 800c1c4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800c1c8:	4293      	cmp	r3, r2
 800c1ca:	d8c8      	bhi.n	800c15e <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800c1cc:	69fa      	ldr	r2, [r7, #28]
 800c1ce:	693b      	ldr	r3, [r7, #16]
 800c1d0:	18d0      	adds	r0, r2, r3
 800c1d2:	6a3b      	ldr	r3, [r7, #32]
 800c1d4:	685a      	ldr	r2, [r3, #4]
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	4413      	add	r3, r2
 800c1da:	68fa      	ldr	r2, [r7, #12]
 800c1dc:	4619      	mov	r1, r3
 800c1de:	f010 fe59 	bl	801ce94 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800c1e2:	693a      	ldr	r2, [r7, #16]
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	4413      	add	r3, r2
 800c1e8:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800c1ea:	697a      	ldr	r2, [r7, #20]
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	4413      	add	r3, r2
 800c1f0:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800c1f2:	6a3b      	ldr	r3, [r7, #32]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	623b      	str	r3, [r7, #32]
 800c1f8:	6a3b      	ldr	r3, [r7, #32]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d1a1      	bne.n	800c142 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800c1fe:	6979      	ldr	r1, [r7, #20]
 800c200:	4811      	ldr	r0, [pc, #68]	; (800c248 <low_level_output+0x138>)
 800c202:	f7fb f811 	bl	8007228 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800c206:	2300      	movs	r3, #0
 800c208:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800c20c:	4b0e      	ldr	r3, [pc, #56]	; (800c248 <low_level_output+0x138>)
 800c20e:	681b      	ldr	r3, [r3, #0]
 800c210:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c214:	695b      	ldr	r3, [r3, #20]
 800c216:	f003 0320 	and.w	r3, r3, #32
 800c21a:	2b00      	cmp	r3, #0
 800c21c:	d00d      	beq.n	800c23a <low_level_output+0x12a>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800c21e:	4b0a      	ldr	r3, [pc, #40]	; (800c248 <low_level_output+0x138>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c226:	461a      	mov	r2, r3
 800c228:	2320      	movs	r3, #32
 800c22a:	6153      	str	r3, [r2, #20]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800c22c:	4b06      	ldr	r3, [pc, #24]	; (800c248 <low_level_output+0x138>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c234:	461a      	mov	r2, r3
 800c236:	2300      	movs	r3, #0
 800c238:	6053      	str	r3, [r2, #4]
  }
  return errval;
 800c23a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800c23e:	4618      	mov	r0, r3
 800c240:	3728      	adds	r7, #40	; 0x28
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}
 800c246:	bf00      	nop
 800c248:	2000416c 	.word	0x2000416c

0800c24c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b08c      	sub	sp, #48	; 0x30
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800c254:	2300      	movs	r3, #0
 800c256:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800c258:	2300      	movs	r3, #0
 800c25a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800c25c:	2300      	movs	r3, #0
 800c25e:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800c260:	2300      	movs	r3, #0
 800c262:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800c264:	2300      	movs	r3, #0
 800c266:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800c268:	2300      	movs	r3, #0
 800c26a:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800c26c:	2300      	movs	r3, #0
 800c26e:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800c270:	484e      	ldr	r0, [pc, #312]	; (800c3ac <low_level_input+0x160>)
 800c272:	f7fb f8c3 	bl	80073fc <HAL_ETH_GetReceivedFrame_IT>
 800c276:	4603      	mov	r3, r0
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d001      	beq.n	800c280 <low_level_input+0x34>

    return NULL;
 800c27c:	2300      	movs	r3, #0
 800c27e:	e091      	b.n	800c3a4 <low_level_input+0x158>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800c280:	4b4a      	ldr	r3, [pc, #296]	; (800c3ac <low_level_input+0x160>)
 800c282:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c284:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800c286:	4b49      	ldr	r3, [pc, #292]	; (800c3ac <low_level_input+0x160>)
 800c288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c28a:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800c28c:	89fb      	ldrh	r3, [r7, #14]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d007      	beq.n	800c2a2 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800c292:	89fb      	ldrh	r3, [r7, #14]
 800c294:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800c298:	4619      	mov	r1, r3
 800c29a:	2000      	movs	r0, #0
 800c29c:	f006 fc72 	bl	8012b84 <pbuf_alloc>
 800c2a0:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800c2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d04b      	beq.n	800c340 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800c2a8:	4b40      	ldr	r3, [pc, #256]	; (800c3ac <low_level_input+0x160>)
 800c2aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2ac:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800c2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b4:	62bb      	str	r3, [r7, #40]	; 0x28
 800c2b6:	e040      	b.n	800c33a <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800c2b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ba:	895b      	ldrh	r3, [r3, #10]
 800c2bc:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800c2c2:	e021      	b.n	800c308 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800c2c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c6:	685a      	ldr	r2, [r3, #4]
 800c2c8:	69bb      	ldr	r3, [r7, #24]
 800c2ca:	18d0      	adds	r0, r2, r3
 800c2cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2ce:	69fb      	ldr	r3, [r7, #28]
 800c2d0:	18d1      	adds	r1, r2, r3
 800c2d2:	69fb      	ldr	r3, [r7, #28]
 800c2d4:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800c2d8:	3304      	adds	r3, #4
 800c2da:	461a      	mov	r2, r3
 800c2dc:	f010 fdda 	bl	801ce94 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800c2e0:	6a3b      	ldr	r3, [r7, #32]
 800c2e2:	68db      	ldr	r3, [r3, #12]
 800c2e4:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800c2e6:	6a3b      	ldr	r3, [r7, #32]
 800c2e8:	689b      	ldr	r3, [r3, #8]
 800c2ea:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800c2ec:	69fa      	ldr	r2, [r7, #28]
 800c2ee:	697b      	ldr	r3, [r7, #20]
 800c2f0:	4413      	add	r3, r2
 800c2f2:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800c2f6:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800c2f8:	69ba      	ldr	r2, [r7, #24]
 800c2fa:	69fb      	ldr	r3, [r7, #28]
 800c2fc:	1ad3      	subs	r3, r2, r3
 800c2fe:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800c302:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800c304:	2300      	movs	r3, #0
 800c306:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800c308:	697a      	ldr	r2, [r7, #20]
 800c30a:	69fb      	ldr	r3, [r7, #28]
 800c30c:	4413      	add	r3, r2
 800c30e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800c312:	4293      	cmp	r3, r2
 800c314:	d8d6      	bhi.n	800c2c4 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800c316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c318:	685a      	ldr	r2, [r3, #4]
 800c31a:	69bb      	ldr	r3, [r7, #24]
 800c31c:	18d0      	adds	r0, r2, r3
 800c31e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c320:	69fb      	ldr	r3, [r7, #28]
 800c322:	4413      	add	r3, r2
 800c324:	697a      	ldr	r2, [r7, #20]
 800c326:	4619      	mov	r1, r3
 800c328:	f010 fdb4 	bl	801ce94 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800c32c:	69fa      	ldr	r2, [r7, #28]
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	4413      	add	r3, r2
 800c332:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800c334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	62bb      	str	r3, [r7, #40]	; 0x28
 800c33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d1bb      	bne.n	800c2b8 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800c340:	4b1a      	ldr	r3, [pc, #104]	; (800c3ac <low_level_input+0x160>)
 800c342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c344:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800c346:	2300      	movs	r3, #0
 800c348:	613b      	str	r3, [r7, #16]
 800c34a:	e00b      	b.n	800c364 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800c34c:	6a3b      	ldr	r3, [r7, #32]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800c354:	6a3b      	ldr	r3, [r7, #32]
 800c356:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800c358:	6a3b      	ldr	r3, [r7, #32]
 800c35a:	68db      	ldr	r3, [r3, #12]
 800c35c:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	3301      	adds	r3, #1
 800c362:	613b      	str	r3, [r7, #16]
 800c364:	4b11      	ldr	r3, [pc, #68]	; (800c3ac <low_level_input+0x160>)
 800c366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c368:	693a      	ldr	r2, [r7, #16]
 800c36a:	429a      	cmp	r2, r3
 800c36c:	d3ee      	bcc.n	800c34c <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800c36e:	4b0f      	ldr	r3, [pc, #60]	; (800c3ac <low_level_input+0x160>)
 800c370:	2200      	movs	r2, #0
 800c372:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800c374:	4b0d      	ldr	r3, [pc, #52]	; (800c3ac <low_level_input+0x160>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c37c:	695b      	ldr	r3, [r3, #20]
 800c37e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c382:	2b00      	cmp	r3, #0
 800c384:	d00d      	beq.n	800c3a2 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800c386:	4b09      	ldr	r3, [pc, #36]	; (800c3ac <low_level_input+0x160>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c38e:	461a      	mov	r2, r3
 800c390:	2380      	movs	r3, #128	; 0x80
 800c392:	6153      	str	r3, [r2, #20]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800c394:	4b05      	ldr	r3, [pc, #20]	; (800c3ac <low_level_input+0x160>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c39c:	461a      	mov	r2, r3
 800c39e:	2300      	movs	r3, #0
 800c3a0:	6093      	str	r3, [r2, #8]
  }
  return p;
 800c3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	3730      	adds	r7, #48	; 0x30
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}
 800c3ac:	2000416c 	.word	0x2000416c

0800c3b0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800c3b0:	b580      	push	{r7, lr}
 800c3b2:	b084      	sub	sp, #16
 800c3b4:	af00      	add	r7, sp, #0
 800c3b6:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c3bc:	4b12      	ldr	r3, [pc, #72]	; (800c408 <ethernetif_input+0x58>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f04f 31ff 	mov.w	r1, #4294967295
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f000 fa4f 	bl	800c868 <osSemaphoreWait>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d1f5      	bne.n	800c3bc <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800c3d0:	480e      	ldr	r0, [pc, #56]	; (800c40c <ethernetif_input+0x5c>)
 800c3d2:	f010 fbcd 	bl	801cb70 <sys_mutex_lock>
        p = low_level_input( netif );
 800c3d6:	68f8      	ldr	r0, [r7, #12]
 800c3d8:	f7ff ff38 	bl	800c24c <low_level_input>
 800c3dc:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d00a      	beq.n	800c3fa <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	691b      	ldr	r3, [r3, #16]
 800c3e8:	68f9      	ldr	r1, [r7, #12]
 800c3ea:	68b8      	ldr	r0, [r7, #8]
 800c3ec:	4798      	blx	r3
 800c3ee:	4603      	mov	r3, r0
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d002      	beq.n	800c3fa <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800c3f4:	68b8      	ldr	r0, [r7, #8]
 800c3f6:	f006 fea9 	bl	801314c <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800c3fa:	4804      	ldr	r0, [pc, #16]	; (800c40c <ethernetif_input+0x5c>)
 800c3fc:	f010 fbc7 	bl	801cb8e <sys_mutex_unlock>
      } while(p!=NULL);
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d1e4      	bne.n	800c3d0 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800c406:	e7d9      	b.n	800c3bc <ethernetif_input+0xc>
 800c408:	20004168 	.word	0x20004168
 800c40c:	2000a664 	.word	0x2000a664

0800c410 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800c410:	b580      	push	{r7, lr}
 800c412:	b082      	sub	sp, #8
 800c414:	af00      	add	r7, sp, #0
 800c416:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d106      	bne.n	800c42c <ethernetif_init+0x1c>
 800c41e:	4b0e      	ldr	r3, [pc, #56]	; (800c458 <ethernetif_init+0x48>)
 800c420:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800c424:	490d      	ldr	r1, [pc, #52]	; (800c45c <ethernetif_init+0x4c>)
 800c426:	480e      	ldr	r0, [pc, #56]	; (800c460 <ethernetif_init+0x50>)
 800c428:	f010 fe44 	bl	801d0b4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2273      	movs	r2, #115	; 0x73
 800c430:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2274      	movs	r2, #116	; 0x74
 800c438:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	4a09      	ldr	r2, [pc, #36]	; (800c464 <ethernetif_init+0x54>)
 800c440:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	4a08      	ldr	r2, [pc, #32]	; (800c468 <ethernetif_init+0x58>)
 800c446:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800c448:	6878      	ldr	r0, [r7, #4]
 800c44a:	f7ff fd8b 	bl	800bf64 <low_level_init>

  return ERR_OK;
 800c44e:	2300      	movs	r3, #0
}
 800c450:	4618      	mov	r0, r3
 800c452:	3708      	adds	r7, #8
 800c454:	46bd      	mov	sp, r7
 800c456:	bd80      	pop	{r7, pc}
 800c458:	0801e69c 	.word	0x0801e69c
 800c45c:	0801e6b8 	.word	0x0801e6b8
 800c460:	0801e6c8 	.word	0x0801e6c8
 800c464:	0801ab79 	.word	0x0801ab79
 800c468:	0800c111 	.word	0x0800c111

0800c46c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800c470:	f7f9 fac0 	bl	80059f4 <HAL_GetTick>
 800c474:	4603      	mov	r3, r0
}
 800c476:	4618      	mov	r0, r3
 800c478:	bd80      	pop	{r7, pc}
	...

0800c47c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b084      	sub	sp, #16
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800c484:	2300      	movs	r3, #0
 800c486:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800c488:	2300      	movs	r3, #0
 800c48a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c492:	089b      	lsrs	r3, r3, #2
 800c494:	f003 0301 	and.w	r3, r3, #1
 800c498:	b2db      	uxtb	r3, r3
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d05d      	beq.n	800c55a <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800c49e:	4b34      	ldr	r3, [pc, #208]	; (800c570 <ethernetif_update_config+0xf4>)
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d03f      	beq.n	800c526 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800c4a6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800c4aa:	2100      	movs	r1, #0
 800c4ac:	4830      	ldr	r0, [pc, #192]	; (800c570 <ethernetif_update_config+0xf4>)
 800c4ae:	f7fb f90d 	bl	80076cc <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800c4b2:	f7f9 fa9f 	bl	80059f4 <HAL_GetTick>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800c4ba:	f107 0308 	add.w	r3, r7, #8
 800c4be:	461a      	mov	r2, r3
 800c4c0:	2101      	movs	r1, #1
 800c4c2:	482b      	ldr	r0, [pc, #172]	; (800c570 <ethernetif_update_config+0xf4>)
 800c4c4:	f7fb f89a 	bl	80075fc <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800c4c8:	f7f9 fa94 	bl	80059f4 <HAL_GetTick>
 800c4cc:	4602      	mov	r2, r0
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	1ad3      	subs	r3, r2, r3
 800c4d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c4d6:	d828      	bhi.n	800c52a <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	f003 0320 	and.w	r3, r3, #32
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d0eb      	beq.n	800c4ba <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800c4e2:	f107 0308 	add.w	r3, r7, #8
 800c4e6:	461a      	mov	r2, r3
 800c4e8:	2110      	movs	r1, #16
 800c4ea:	4821      	ldr	r0, [pc, #132]	; (800c570 <ethernetif_update_config+0xf4>)
 800c4ec:	f7fb f886 	bl	80075fc <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	f003 0304 	and.w	r3, r3, #4
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d004      	beq.n	800c504 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800c4fa:	4b1d      	ldr	r3, [pc, #116]	; (800c570 <ethernetif_update_config+0xf4>)
 800c4fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c500:	60da      	str	r2, [r3, #12]
 800c502:	e002      	b.n	800c50a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800c504:	4b1a      	ldr	r3, [pc, #104]	; (800c570 <ethernetif_update_config+0xf4>)
 800c506:	2200      	movs	r2, #0
 800c508:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	f003 0302 	and.w	r3, r3, #2
 800c510:	2b00      	cmp	r3, #0
 800c512:	d003      	beq.n	800c51c <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800c514:	4b16      	ldr	r3, [pc, #88]	; (800c570 <ethernetif_update_config+0xf4>)
 800c516:	2200      	movs	r2, #0
 800c518:	609a      	str	r2, [r3, #8]
 800c51a:	e016      	b.n	800c54a <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800c51c:	4b14      	ldr	r3, [pc, #80]	; (800c570 <ethernetif_update_config+0xf4>)
 800c51e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800c522:	609a      	str	r2, [r3, #8]
 800c524:	e011      	b.n	800c54a <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800c526:	bf00      	nop
 800c528:	e000      	b.n	800c52c <ethernetif_update_config+0xb0>
          goto error;
 800c52a:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800c52c:	4b10      	ldr	r3, [pc, #64]	; (800c570 <ethernetif_update_config+0xf4>)
 800c52e:	68db      	ldr	r3, [r3, #12]
 800c530:	08db      	lsrs	r3, r3, #3
 800c532:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800c534:	4b0e      	ldr	r3, [pc, #56]	; (800c570 <ethernetif_update_config+0xf4>)
 800c536:	689b      	ldr	r3, [r3, #8]
 800c538:	085b      	lsrs	r3, r3, #1
 800c53a:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800c53c:	4313      	orrs	r3, r2
 800c53e:	b29b      	uxth	r3, r3
 800c540:	461a      	mov	r2, r3
 800c542:	2100      	movs	r1, #0
 800c544:	480a      	ldr	r0, [pc, #40]	; (800c570 <ethernetif_update_config+0xf4>)
 800c546:	f7fb f8c1 	bl	80076cc <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800c54a:	2100      	movs	r1, #0
 800c54c:	4808      	ldr	r0, [pc, #32]	; (800c570 <ethernetif_update_config+0xf4>)
 800c54e:	f7fb f981 	bl	8007854 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800c552:	4807      	ldr	r0, [pc, #28]	; (800c570 <ethernetif_update_config+0xf4>)
 800c554:	f7fb f920 	bl	8007798 <HAL_ETH_Start>
 800c558:	e002      	b.n	800c560 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800c55a:	4805      	ldr	r0, [pc, #20]	; (800c570 <ethernetif_update_config+0xf4>)
 800c55c:	f7fb f94b 	bl	80077f6 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800c560:	6878      	ldr	r0, [r7, #4]
 800c562:	f000 f807 	bl	800c574 <ethernetif_notify_conn_changed>
}
 800c566:	bf00      	nop
 800c568:	3710      	adds	r7, #16
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	2000416c 	.word	0x2000416c

0800c574 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800c574:	b480      	push	{r7}
 800c576:	b083      	sub	sp, #12
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800c57c:	bf00      	nop
 800c57e:	370c      	adds	r7, #12
 800c580:	46bd      	mov	sp, r7
 800c582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c586:	4770      	bx	lr

0800c588 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c588:	b480      	push	{r7}
 800c58a:	b085      	sub	sp, #20
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	4603      	mov	r3, r0
 800c590:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c592:	2300      	movs	r3, #0
 800c594:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c596:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c59a:	2b84      	cmp	r3, #132	; 0x84
 800c59c:	d005      	beq.n	800c5aa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c59e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	4413      	add	r3, r2
 800c5a6:	3303      	adds	r3, #3
 800c5a8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3714      	adds	r7, #20
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b6:	4770      	bx	lr

0800c5b8 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b083      	sub	sp, #12
 800c5bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c5be:	f3ef 8305 	mrs	r3, IPSR
 800c5c2:	607b      	str	r3, [r7, #4]
  return(result);
 800c5c4:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	bf14      	ite	ne
 800c5ca:	2301      	movne	r3, #1
 800c5cc:	2300      	moveq	r3, #0
 800c5ce:	b2db      	uxtb	r3, r3
}
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	370c      	adds	r7, #12
 800c5d4:	46bd      	mov	sp, r7
 800c5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5da:	4770      	bx	lr

0800c5dc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c5dc:	b580      	push	{r7, lr}
 800c5de:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c5e0:	f001 ff70 	bl	800e4c4 <vTaskStartScheduler>
  
  return osOK;
 800c5e4:	2300      	movs	r3, #0
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	bd80      	pop	{r7, pc}

0800c5ea <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800c5ea:	b580      	push	{r7, lr}
 800c5ec:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800c5ee:	f7ff ffe3 	bl	800c5b8 <inHandlerMode>
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d003      	beq.n	800c600 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800c5f8:	f002 f888 	bl	800e70c <xTaskGetTickCountFromISR>
 800c5fc:	4603      	mov	r3, r0
 800c5fe:	e002      	b.n	800c606 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800c600:	f002 f874 	bl	800e6ec <xTaskGetTickCount>
 800c604:	4603      	mov	r3, r0
  }
}
 800c606:	4618      	mov	r0, r3
 800c608:	bd80      	pop	{r7, pc}

0800c60a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c60a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c60c:	b089      	sub	sp, #36	; 0x24
 800c60e:	af04      	add	r7, sp, #16
 800c610:	6078      	str	r0, [r7, #4]
 800c612:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	695b      	ldr	r3, [r3, #20]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d020      	beq.n	800c65e <osThreadCreate+0x54>
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	699b      	ldr	r3, [r3, #24]
 800c620:	2b00      	cmp	r3, #0
 800c622:	d01c      	beq.n	800c65e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	685c      	ldr	r4, [r3, #4]
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681d      	ldr	r5, [r3, #0]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	691e      	ldr	r6, [r3, #16]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c636:	4618      	mov	r0, r3
 800c638:	f7ff ffa6 	bl	800c588 <makeFreeRtosPriority>
 800c63c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	695b      	ldr	r3, [r3, #20]
 800c642:	687a      	ldr	r2, [r7, #4]
 800c644:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c646:	9202      	str	r2, [sp, #8]
 800c648:	9301      	str	r3, [sp, #4]
 800c64a:	9100      	str	r1, [sp, #0]
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	4632      	mov	r2, r6
 800c650:	4629      	mov	r1, r5
 800c652:	4620      	mov	r0, r4
 800c654:	f001 fd58 	bl	800e108 <xTaskCreateStatic>
 800c658:	4603      	mov	r3, r0
 800c65a:	60fb      	str	r3, [r7, #12]
 800c65c:	e01c      	b.n	800c698 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	685c      	ldr	r4, [r3, #4]
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c66a:	b29e      	uxth	r6, r3
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c672:	4618      	mov	r0, r3
 800c674:	f7ff ff88 	bl	800c588 <makeFreeRtosPriority>
 800c678:	4602      	mov	r2, r0
 800c67a:	f107 030c 	add.w	r3, r7, #12
 800c67e:	9301      	str	r3, [sp, #4]
 800c680:	9200      	str	r2, [sp, #0]
 800c682:	683b      	ldr	r3, [r7, #0]
 800c684:	4632      	mov	r2, r6
 800c686:	4629      	mov	r1, r5
 800c688:	4620      	mov	r0, r4
 800c68a:	f001 fd9a 	bl	800e1c2 <xTaskCreate>
 800c68e:	4603      	mov	r3, r0
 800c690:	2b01      	cmp	r3, #1
 800c692:	d001      	beq.n	800c698 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c694:	2300      	movs	r3, #0
 800c696:	e000      	b.n	800c69a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c698:	68fb      	ldr	r3, [r7, #12]
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3714      	adds	r7, #20
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c6a2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c6a2:	b580      	push	{r7, lr}
 800c6a4:	b084      	sub	sp, #16
 800c6a6:	af00      	add	r7, sp, #0
 800c6a8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	2b00      	cmp	r3, #0
 800c6b2:	d001      	beq.n	800c6b8 <osDelay+0x16>
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	e000      	b.n	800c6ba <osDelay+0x18>
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	4618      	mov	r0, r3
 800c6bc:	f001 fece 	bl	800e45c <vTaskDelay>
  
  return osOK;
 800c6c0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3710      	adds	r7, #16
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}

0800c6ca <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800c6ca:	b580      	push	{r7, lr}
 800c6cc:	b082      	sub	sp, #8
 800c6ce:	af00      	add	r7, sp, #0
 800c6d0:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	685b      	ldr	r3, [r3, #4]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d007      	beq.n	800c6ea <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	685b      	ldr	r3, [r3, #4]
 800c6de:	4619      	mov	r1, r3
 800c6e0:	2001      	movs	r0, #1
 800c6e2:	f000 feb2 	bl	800d44a <xQueueCreateMutexStatic>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	e003      	b.n	800c6f2 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800c6ea:	2001      	movs	r0, #1
 800c6ec:	f000 fe95 	bl	800d41a <xQueueCreateMutex>
 800c6f0:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3708      	adds	r7, #8
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}
	...

0800c6fc <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b084      	sub	sp, #16
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
 800c704:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c706:	2300      	movs	r3, #0
 800c708:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d101      	bne.n	800c714 <osMutexWait+0x18>
    return osErrorParameter;
 800c710:	2380      	movs	r3, #128	; 0x80
 800c712:	e03a      	b.n	800c78a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800c714:	2300      	movs	r3, #0
 800c716:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c718:	683b      	ldr	r3, [r7, #0]
 800c71a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c71e:	d103      	bne.n	800c728 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800c720:	f04f 33ff 	mov.w	r3, #4294967295
 800c724:	60fb      	str	r3, [r7, #12]
 800c726:	e009      	b.n	800c73c <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d006      	beq.n	800c73c <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d101      	bne.n	800c73c <osMutexWait+0x40>
      ticks = 1;
 800c738:	2301      	movs	r3, #1
 800c73a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c73c:	f7ff ff3c 	bl	800c5b8 <inHandlerMode>
 800c740:	4603      	mov	r3, r0
 800c742:	2b00      	cmp	r3, #0
 800c744:	d017      	beq.n	800c776 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800c746:	f107 0308 	add.w	r3, r7, #8
 800c74a:	461a      	mov	r2, r3
 800c74c:	2100      	movs	r1, #0
 800c74e:	6878      	ldr	r0, [r7, #4]
 800c750:	f001 faa8 	bl	800dca4 <xQueueReceiveFromISR>
 800c754:	4603      	mov	r3, r0
 800c756:	2b01      	cmp	r3, #1
 800c758:	d001      	beq.n	800c75e <osMutexWait+0x62>
      return osErrorOS;
 800c75a:	23ff      	movs	r3, #255	; 0xff
 800c75c:	e015      	b.n	800c78a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c75e:	68bb      	ldr	r3, [r7, #8]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d011      	beq.n	800c788 <osMutexWait+0x8c>
 800c764:	4b0b      	ldr	r3, [pc, #44]	; (800c794 <osMutexWait+0x98>)
 800c766:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c76a:	601a      	str	r2, [r3, #0]
 800c76c:	f3bf 8f4f 	dsb	sy
 800c770:	f3bf 8f6f 	isb	sy
 800c774:	e008      	b.n	800c788 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800c776:	68f9      	ldr	r1, [r7, #12]
 800c778:	6878      	ldr	r0, [r7, #4]
 800c77a:	f001 f987 	bl	800da8c <xQueueSemaphoreTake>
 800c77e:	4603      	mov	r3, r0
 800c780:	2b01      	cmp	r3, #1
 800c782:	d001      	beq.n	800c788 <osMutexWait+0x8c>
    return osErrorOS;
 800c784:	23ff      	movs	r3, #255	; 0xff
 800c786:	e000      	b.n	800c78a <osMutexWait+0x8e>
  }
  
  return osOK;
 800c788:	2300      	movs	r3, #0
}
 800c78a:	4618      	mov	r0, r3
 800c78c:	3710      	adds	r7, #16
 800c78e:	46bd      	mov	sp, r7
 800c790:	bd80      	pop	{r7, pc}
 800c792:	bf00      	nop
 800c794:	e000ed04 	.word	0xe000ed04

0800c798 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b084      	sub	sp, #16
 800c79c:	af00      	add	r7, sp, #0
 800c79e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c7a0:	2300      	movs	r3, #0
 800c7a2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800c7a8:	f7ff ff06 	bl	800c5b8 <inHandlerMode>
 800c7ac:	4603      	mov	r3, r0
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d016      	beq.n	800c7e0 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800c7b2:	f107 0308 	add.w	r3, r7, #8
 800c7b6:	4619      	mov	r1, r3
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f000 fffa 	bl	800d7b2 <xQueueGiveFromISR>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	2b01      	cmp	r3, #1
 800c7c2:	d001      	beq.n	800c7c8 <osMutexRelease+0x30>
      return osErrorOS;
 800c7c4:	23ff      	movs	r3, #255	; 0xff
 800c7c6:	e017      	b.n	800c7f8 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d013      	beq.n	800c7f6 <osMutexRelease+0x5e>
 800c7ce:	4b0c      	ldr	r3, [pc, #48]	; (800c800 <osMutexRelease+0x68>)
 800c7d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7d4:	601a      	str	r2, [r3, #0]
 800c7d6:	f3bf 8f4f 	dsb	sy
 800c7da:	f3bf 8f6f 	isb	sy
 800c7de:	e00a      	b.n	800c7f6 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800c7e0:	2300      	movs	r3, #0
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	2100      	movs	r1, #0
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f000 fe4a 	bl	800d480 <xQueueGenericSend>
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	2b01      	cmp	r3, #1
 800c7f0:	d001      	beq.n	800c7f6 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800c7f2:	23ff      	movs	r3, #255	; 0xff
 800c7f4:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3710      	adds	r7, #16
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}
 800c800:	e000ed04 	.word	0xe000ed04

0800c804 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800c804:	b580      	push	{r7, lr}
 800c806:	b086      	sub	sp, #24
 800c808:	af02      	add	r7, sp, #8
 800c80a:	6078      	str	r0, [r7, #4]
 800c80c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	685b      	ldr	r3, [r3, #4]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d00f      	beq.n	800c836 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800c816:	683b      	ldr	r3, [r7, #0]
 800c818:	2b01      	cmp	r3, #1
 800c81a:	d10a      	bne.n	800c832 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	685b      	ldr	r3, [r3, #4]
 800c820:	2203      	movs	r2, #3
 800c822:	9200      	str	r2, [sp, #0]
 800c824:	2200      	movs	r2, #0
 800c826:	2100      	movs	r1, #0
 800c828:	2001      	movs	r0, #1
 800c82a:	f000 fd0b 	bl	800d244 <xQueueGenericCreateStatic>
 800c82e:	4603      	mov	r3, r0
 800c830:	e016      	b.n	800c860 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800c832:	2300      	movs	r3, #0
 800c834:	e014      	b.n	800c860 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800c836:	683b      	ldr	r3, [r7, #0]
 800c838:	2b01      	cmp	r3, #1
 800c83a:	d110      	bne.n	800c85e <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800c83c:	2203      	movs	r2, #3
 800c83e:	2100      	movs	r1, #0
 800c840:	2001      	movs	r0, #1
 800c842:	f000 fd77 	bl	800d334 <xQueueGenericCreate>
 800c846:	60f8      	str	r0, [r7, #12]
 800c848:	68fb      	ldr	r3, [r7, #12]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d005      	beq.n	800c85a <osSemaphoreCreate+0x56>
 800c84e:	2300      	movs	r3, #0
 800c850:	2200      	movs	r2, #0
 800c852:	2100      	movs	r1, #0
 800c854:	68f8      	ldr	r0, [r7, #12]
 800c856:	f000 fe13 	bl	800d480 <xQueueGenericSend>
      return sema;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	e000      	b.n	800c860 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800c85e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800c860:	4618      	mov	r0, r3
 800c862:	3710      	adds	r7, #16
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b084      	sub	sp, #16
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800c872:	2300      	movs	r3, #0
 800c874:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d101      	bne.n	800c880 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800c87c:	2380      	movs	r3, #128	; 0x80
 800c87e:	e03a      	b.n	800c8f6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800c880:	2300      	movs	r3, #0
 800c882:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c88a:	d103      	bne.n	800c894 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800c88c:	f04f 33ff 	mov.w	r3, #4294967295
 800c890:	60fb      	str	r3, [r7, #12]
 800c892:	e009      	b.n	800c8a8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800c894:	683b      	ldr	r3, [r7, #0]
 800c896:	2b00      	cmp	r3, #0
 800c898:	d006      	beq.n	800c8a8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800c89a:	683b      	ldr	r3, [r7, #0]
 800c89c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d101      	bne.n	800c8a8 <osSemaphoreWait+0x40>
      ticks = 1;
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800c8a8:	f7ff fe86 	bl	800c5b8 <inHandlerMode>
 800c8ac:	4603      	mov	r3, r0
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d017      	beq.n	800c8e2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c8b2:	f107 0308 	add.w	r3, r7, #8
 800c8b6:	461a      	mov	r2, r3
 800c8b8:	2100      	movs	r1, #0
 800c8ba:	6878      	ldr	r0, [r7, #4]
 800c8bc:	f001 f9f2 	bl	800dca4 <xQueueReceiveFromISR>
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	2b01      	cmp	r3, #1
 800c8c4:	d001      	beq.n	800c8ca <osSemaphoreWait+0x62>
      return osErrorOS;
 800c8c6:	23ff      	movs	r3, #255	; 0xff
 800c8c8:	e015      	b.n	800c8f6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d011      	beq.n	800c8f4 <osSemaphoreWait+0x8c>
 800c8d0:	4b0b      	ldr	r3, [pc, #44]	; (800c900 <osSemaphoreWait+0x98>)
 800c8d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8d6:	601a      	str	r2, [r3, #0]
 800c8d8:	f3bf 8f4f 	dsb	sy
 800c8dc:	f3bf 8f6f 	isb	sy
 800c8e0:	e008      	b.n	800c8f4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800c8e2:	68f9      	ldr	r1, [r7, #12]
 800c8e4:	6878      	ldr	r0, [r7, #4]
 800c8e6:	f001 f8d1 	bl	800da8c <xQueueSemaphoreTake>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	2b01      	cmp	r3, #1
 800c8ee:	d001      	beq.n	800c8f4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800c8f0:	23ff      	movs	r3, #255	; 0xff
 800c8f2:	e000      	b.n	800c8f6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800c8f4:	2300      	movs	r3, #0
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	3710      	adds	r7, #16
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}
 800c8fe:	bf00      	nop
 800c900:	e000ed04 	.word	0xe000ed04

0800c904 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800c904:	b580      	push	{r7, lr}
 800c906:	b084      	sub	sp, #16
 800c908:	af00      	add	r7, sp, #0
 800c90a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800c90c:	2300      	movs	r3, #0
 800c90e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800c910:	2300      	movs	r3, #0
 800c912:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800c914:	f7ff fe50 	bl	800c5b8 <inHandlerMode>
 800c918:	4603      	mov	r3, r0
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d016      	beq.n	800c94c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800c91e:	f107 0308 	add.w	r3, r7, #8
 800c922:	4619      	mov	r1, r3
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f000 ff44 	bl	800d7b2 <xQueueGiveFromISR>
 800c92a:	4603      	mov	r3, r0
 800c92c:	2b01      	cmp	r3, #1
 800c92e:	d001      	beq.n	800c934 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800c930:	23ff      	movs	r3, #255	; 0xff
 800c932:	e017      	b.n	800c964 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d013      	beq.n	800c962 <osSemaphoreRelease+0x5e>
 800c93a:	4b0c      	ldr	r3, [pc, #48]	; (800c96c <osSemaphoreRelease+0x68>)
 800c93c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c940:	601a      	str	r2, [r3, #0]
 800c942:	f3bf 8f4f 	dsb	sy
 800c946:	f3bf 8f6f 	isb	sy
 800c94a:	e00a      	b.n	800c962 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800c94c:	2300      	movs	r3, #0
 800c94e:	2200      	movs	r2, #0
 800c950:	2100      	movs	r1, #0
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f000 fd94 	bl	800d480 <xQueueGenericSend>
 800c958:	4603      	mov	r3, r0
 800c95a:	2b01      	cmp	r3, #1
 800c95c:	d001      	beq.n	800c962 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800c95e:	23ff      	movs	r3, #255	; 0xff
 800c960:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800c962:	68fb      	ldr	r3, [r7, #12]
}
 800c964:	4618      	mov	r0, r3
 800c966:	3710      	adds	r7, #16
 800c968:	46bd      	mov	sp, r7
 800c96a:	bd80      	pop	{r7, pc}
 800c96c:	e000ed04 	.word	0xe000ed04

0800c970 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b082      	sub	sp, #8
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800c978:	f7ff fe1e 	bl	800c5b8 <inHandlerMode>
 800c97c:	4603      	mov	r3, r0
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d001      	beq.n	800c986 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800c982:	2382      	movs	r3, #130	; 0x82
 800c984:	e003      	b.n	800c98e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800c986:	6878      	ldr	r0, [r7, #4]
 800c988:	f001 fa48 	bl	800de1c <vQueueDelete>

  return osOK; 
 800c98c:	2300      	movs	r3, #0
}
 800c98e:	4618      	mov	r0, r3
 800c990:	3708      	adds	r7, #8
 800c992:	46bd      	mov	sp, r7
 800c994:	bd80      	pop	{r7, pc}

0800c996 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 800c996:	b580      	push	{r7, lr}
 800c998:	b086      	sub	sp, #24
 800c99a:	af00      	add	r7, sp, #0
 800c99c:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	685b      	ldr	r3, [r3, #4]
 800c9a2:	3303      	adds	r3, #3
 800c9a4:	f023 0303 	bic.w	r3, r3, #3
 800c9a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 800c9aa:	2014      	movs	r0, #20
 800c9ac:	f002 fe2c 	bl	800f608 <pvPortMalloc>
 800c9b0:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 800c9b2:	697b      	ldr	r3, [r7, #20]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d046      	beq.n	800ca46 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	681a      	ldr	r2, [r3, #0]
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 800c9c0:	68fa      	ldr	r2, [r7, #12]
 800c9c2:	697b      	ldr	r3, [r7, #20]
 800c9c4:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	f002 fe19 	bl	800f608 <pvPortMalloc>
 800c9d6:	4602      	mov	r2, r0
 800c9d8:	697b      	ldr	r3, [r7, #20]
 800c9da:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d02b      	beq.n	800ca3c <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	68fa      	ldr	r2, [r7, #12]
 800c9ea:	fb02 f303 	mul.w	r3, r2, r3
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f002 fe0a 	bl	800f608 <pvPortMalloc>
 800c9f4:	4602      	mov	r2, r0
 800c9f6:	697b      	ldr	r3, [r7, #20]
 800c9f8:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d011      	beq.n	800ca26 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 800ca02:	2300      	movs	r3, #0
 800ca04:	613b      	str	r3, [r7, #16]
 800ca06:	e008      	b.n	800ca1a <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	685a      	ldr	r2, [r3, #4]
 800ca0c:	693b      	ldr	r3, [r7, #16]
 800ca0e:	4413      	add	r3, r2
 800ca10:	2200      	movs	r2, #0
 800ca12:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 800ca14:	693b      	ldr	r3, [r7, #16]
 800ca16:	3301      	adds	r3, #1
 800ca18:	613b      	str	r3, [r7, #16]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	693a      	ldr	r2, [r7, #16]
 800ca20:	429a      	cmp	r2, r3
 800ca22:	d3f1      	bcc.n	800ca08 <osPoolCreate+0x72>
 800ca24:	e00f      	b.n	800ca46 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	685b      	ldr	r3, [r3, #4]
 800ca2a:	4618      	mov	r0, r3
 800ca2c:	f002 feb8 	bl	800f7a0 <vPortFree>
        vPortFree(thePool);
 800ca30:	6978      	ldr	r0, [r7, #20]
 800ca32:	f002 feb5 	bl	800f7a0 <vPortFree>
        thePool = NULL;
 800ca36:	2300      	movs	r3, #0
 800ca38:	617b      	str	r3, [r7, #20]
 800ca3a:	e004      	b.n	800ca46 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 800ca3c:	6978      	ldr	r0, [r7, #20]
 800ca3e:	f002 feaf 	bl	800f7a0 <vPortFree>
      thePool = NULL;
 800ca42:	2300      	movs	r3, #0
 800ca44:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 800ca46:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3718      	adds	r7, #24
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	bd80      	pop	{r7, pc}

0800ca50 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 800ca50:	b580      	push	{r7, lr}
 800ca52:	b08a      	sub	sp, #40	; 0x28
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 800ca58:	2300      	movs	r3, #0
 800ca5a:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 800ca60:	f7ff fdaa 	bl	800c5b8 <inHandlerMode>
 800ca64:	4603      	mov	r3, r0
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d00e      	beq.n	800ca88 <osPoolAlloc+0x38>
	__asm volatile
 800ca6a:	f3ef 8211 	mrs	r2, BASEPRI
 800ca6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca72:	f383 8811 	msr	BASEPRI, r3
 800ca76:	f3bf 8f6f 	isb	sy
 800ca7a:	f3bf 8f4f 	dsb	sy
 800ca7e:	617a      	str	r2, [r7, #20]
 800ca80:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ca82:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 800ca84:	627b      	str	r3, [r7, #36]	; 0x24
 800ca86:	e001      	b.n	800ca8c <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 800ca88:	f002 fc9c 	bl	800f3c4 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 800ca8c:	2300      	movs	r3, #0
 800ca8e:	61fb      	str	r3, [r7, #28]
 800ca90:	e029      	b.n	800cae6 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	691a      	ldr	r2, [r3, #16]
 800ca96:	69fb      	ldr	r3, [r7, #28]
 800ca98:	4413      	add	r3, r2
 800ca9a:	687a      	ldr	r2, [r7, #4]
 800ca9c:	6892      	ldr	r2, [r2, #8]
 800ca9e:	fbb3 f1f2 	udiv	r1, r3, r2
 800caa2:	fb01 f202 	mul.w	r2, r1, r2
 800caa6:	1a9b      	subs	r3, r3, r2
 800caa8:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	685a      	ldr	r2, [r3, #4]
 800caae:	69bb      	ldr	r3, [r7, #24]
 800cab0:	4413      	add	r3, r2
 800cab2:	781b      	ldrb	r3, [r3, #0]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d113      	bne.n	800cae0 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	685a      	ldr	r2, [r3, #4]
 800cabc:	69bb      	ldr	r3, [r7, #24]
 800cabe:	4413      	add	r3, r2
 800cac0:	2201      	movs	r2, #1
 800cac2:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	4619      	mov	r1, r3
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	68db      	ldr	r3, [r3, #12]
 800cace:	69ba      	ldr	r2, [r7, #24]
 800cad0:	fb02 f303 	mul.w	r3, r2, r3
 800cad4:	440b      	add	r3, r1
 800cad6:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	69ba      	ldr	r2, [r7, #24]
 800cadc:	611a      	str	r2, [r3, #16]
      break;
 800cade:	e007      	b.n	800caf0 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 800cae0:	69fb      	ldr	r3, [r7, #28]
 800cae2:	3301      	adds	r3, #1
 800cae4:	61fb      	str	r3, [r7, #28]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	689b      	ldr	r3, [r3, #8]
 800caea:	69fa      	ldr	r2, [r7, #28]
 800caec:	429a      	cmp	r2, r3
 800caee:	d3d0      	bcc.n	800ca92 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 800caf0:	f7ff fd62 	bl	800c5b8 <inHandlerMode>
 800caf4:	4603      	mov	r3, r0
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d005      	beq.n	800cb06 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 800cafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cafc:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	f383 8811 	msr	BASEPRI, r3
}
 800cb04:	e001      	b.n	800cb0a <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 800cb06:	f002 fc8d 	bl	800f424 <vPortExitCritical>
  }
  
  return p;
 800cb0a:	6a3b      	ldr	r3, [r7, #32]
}
 800cb0c:	4618      	mov	r0, r3
 800cb0e:	3728      	adds	r7, #40	; 0x28
 800cb10:	46bd      	mov	sp, r7
 800cb12:	bd80      	pop	{r7, pc}

0800cb14 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 800cb14:	b480      	push	{r7}
 800cb16:	b085      	sub	sp, #20
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
 800cb1c:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d101      	bne.n	800cb28 <osPoolFree+0x14>
    return osErrorParameter;
 800cb24:	2380      	movs	r3, #128	; 0x80
 800cb26:	e030      	b.n	800cb8a <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	d101      	bne.n	800cb32 <osPoolFree+0x1e>
    return osErrorParameter;
 800cb2e:	2380      	movs	r3, #128	; 0x80
 800cb30:	e02b      	b.n	800cb8a <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	683a      	ldr	r2, [r7, #0]
 800cb38:	429a      	cmp	r2, r3
 800cb3a:	d201      	bcs.n	800cb40 <osPoolFree+0x2c>
    return osErrorParameter;
 800cb3c:	2380      	movs	r3, #128	; 0x80
 800cb3e:	e024      	b.n	800cb8a <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	687a      	ldr	r2, [r7, #4]
 800cb44:	6812      	ldr	r2, [r2, #0]
 800cb46:	1a9b      	subs	r3, r3, r2
 800cb48:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	68da      	ldr	r2, [r3, #12]
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	fbb3 f1f2 	udiv	r1, r3, r2
 800cb54:	fb01 f202 	mul.w	r2, r1, r2
 800cb58:	1a9b      	subs	r3, r3, r2
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d001      	beq.n	800cb62 <osPoolFree+0x4e>
    return osErrorParameter;
 800cb5e:	2380      	movs	r3, #128	; 0x80
 800cb60:	e013      	b.n	800cb8a <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	68db      	ldr	r3, [r3, #12]
 800cb66:	68fa      	ldr	r2, [r7, #12]
 800cb68:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb6c:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	689b      	ldr	r3, [r3, #8]
 800cb72:	68fa      	ldr	r2, [r7, #12]
 800cb74:	429a      	cmp	r2, r3
 800cb76:	d301      	bcc.n	800cb7c <osPoolFree+0x68>
    return osErrorParameter;
 800cb78:	2380      	movs	r3, #128	; 0x80
 800cb7a:	e006      	b.n	800cb8a <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	685a      	ldr	r2, [r3, #4]
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	4413      	add	r3, r2
 800cb84:	2200      	movs	r2, #0
 800cb86:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 800cb88:	2300      	movs	r3, #0
}
 800cb8a:	4618      	mov	r0, r3
 800cb8c:	3714      	adds	r7, #20
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb94:	4770      	bx	lr

0800cb96 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800cb96:	b590      	push	{r4, r7, lr}
 800cb98:	b085      	sub	sp, #20
 800cb9a:	af02      	add	r7, sp, #8
 800cb9c:	6078      	str	r0, [r7, #4]
 800cb9e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	689b      	ldr	r3, [r3, #8]
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d011      	beq.n	800cbcc <osMessageCreate+0x36>
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	68db      	ldr	r3, [r3, #12]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d00d      	beq.n	800cbcc <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	6818      	ldr	r0, [r3, #0]
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	6859      	ldr	r1, [r3, #4]
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	689a      	ldr	r2, [r3, #8]
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	68db      	ldr	r3, [r3, #12]
 800cbc0:	2400      	movs	r4, #0
 800cbc2:	9400      	str	r4, [sp, #0]
 800cbc4:	f000 fb3e 	bl	800d244 <xQueueGenericCreateStatic>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	e008      	b.n	800cbde <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6818      	ldr	r0, [r3, #0]
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	685b      	ldr	r3, [r3, #4]
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	4619      	mov	r1, r3
 800cbd8:	f000 fbac 	bl	800d334 <xQueueGenericCreate>
 800cbdc:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800cbde:	4618      	mov	r0, r3
 800cbe0:	370c      	adds	r7, #12
 800cbe2:	46bd      	mov	sp, r7
 800cbe4:	bd90      	pop	{r4, r7, pc}
	...

0800cbe8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b086      	sub	sp, #24
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	60f8      	str	r0, [r7, #12]
 800cbf0:	60b9      	str	r1, [r7, #8]
 800cbf2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800cbfc:	697b      	ldr	r3, [r7, #20]
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d101      	bne.n	800cc06 <osMessagePut+0x1e>
    ticks = 1;
 800cc02:	2301      	movs	r3, #1
 800cc04:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800cc06:	f7ff fcd7 	bl	800c5b8 <inHandlerMode>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d018      	beq.n	800cc42 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800cc10:	f107 0210 	add.w	r2, r7, #16
 800cc14:	f107 0108 	add.w	r1, r7, #8
 800cc18:	2300      	movs	r3, #0
 800cc1a:	68f8      	ldr	r0, [r7, #12]
 800cc1c:	f000 fd2e 	bl	800d67c <xQueueGenericSendFromISR>
 800cc20:	4603      	mov	r3, r0
 800cc22:	2b01      	cmp	r3, #1
 800cc24:	d001      	beq.n	800cc2a <osMessagePut+0x42>
      return osErrorOS;
 800cc26:	23ff      	movs	r3, #255	; 0xff
 800cc28:	e018      	b.n	800cc5c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d014      	beq.n	800cc5a <osMessagePut+0x72>
 800cc30:	4b0c      	ldr	r3, [pc, #48]	; (800cc64 <osMessagePut+0x7c>)
 800cc32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc36:	601a      	str	r2, [r3, #0]
 800cc38:	f3bf 8f4f 	dsb	sy
 800cc3c:	f3bf 8f6f 	isb	sy
 800cc40:	e00b      	b.n	800cc5a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800cc42:	f107 0108 	add.w	r1, r7, #8
 800cc46:	2300      	movs	r3, #0
 800cc48:	697a      	ldr	r2, [r7, #20]
 800cc4a:	68f8      	ldr	r0, [r7, #12]
 800cc4c:	f000 fc18 	bl	800d480 <xQueueGenericSend>
 800cc50:	4603      	mov	r3, r0
 800cc52:	2b01      	cmp	r3, #1
 800cc54:	d001      	beq.n	800cc5a <osMessagePut+0x72>
      return osErrorOS;
 800cc56:	23ff      	movs	r3, #255	; 0xff
 800cc58:	e000      	b.n	800cc5c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800cc5a:	2300      	movs	r3, #0
}
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	3718      	adds	r7, #24
 800cc60:	46bd      	mov	sp, r7
 800cc62:	bd80      	pop	{r7, pc}
 800cc64:	e000ed04 	.word	0xe000ed04

0800cc68 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800cc68:	b590      	push	{r4, r7, lr}
 800cc6a:	b08b      	sub	sp, #44	; 0x2c
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	60f8      	str	r0, [r7, #12]
 800cc70:	60b9      	str	r1, [r7, #8]
 800cc72:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800cc74:	68bb      	ldr	r3, [r7, #8]
 800cc76:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d10a      	bne.n	800cc98 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800cc82:	2380      	movs	r3, #128	; 0x80
 800cc84:	617b      	str	r3, [r7, #20]
    return event;
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	461c      	mov	r4, r3
 800cc8a:	f107 0314 	add.w	r3, r7, #20
 800cc8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cc92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cc96:	e054      	b.n	800cd42 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800cc98:	2300      	movs	r3, #0
 800cc9a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cca6:	d103      	bne.n	800ccb0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800cca8:	f04f 33ff 	mov.w	r3, #4294967295
 800ccac:	627b      	str	r3, [r7, #36]	; 0x24
 800ccae:	e009      	b.n	800ccc4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d006      	beq.n	800ccc4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800ccb6:	687b      	ldr	r3, [r7, #4]
 800ccb8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800ccba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d101      	bne.n	800ccc4 <osMessageGet+0x5c>
      ticks = 1;
 800ccc0:	2301      	movs	r3, #1
 800ccc2:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800ccc4:	f7ff fc78 	bl	800c5b8 <inHandlerMode>
 800ccc8:	4603      	mov	r3, r0
 800ccca:	2b00      	cmp	r3, #0
 800cccc:	d01c      	beq.n	800cd08 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800ccce:	f107 0220 	add.w	r2, r7, #32
 800ccd2:	f107 0314 	add.w	r3, r7, #20
 800ccd6:	3304      	adds	r3, #4
 800ccd8:	4619      	mov	r1, r3
 800ccda:	68b8      	ldr	r0, [r7, #8]
 800ccdc:	f000 ffe2 	bl	800dca4 <xQueueReceiveFromISR>
 800cce0:	4603      	mov	r3, r0
 800cce2:	2b01      	cmp	r3, #1
 800cce4:	d102      	bne.n	800ccec <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800cce6:	2310      	movs	r3, #16
 800cce8:	617b      	str	r3, [r7, #20]
 800ccea:	e001      	b.n	800ccf0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800ccec:	2300      	movs	r3, #0
 800ccee:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ccf0:	6a3b      	ldr	r3, [r7, #32]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d01d      	beq.n	800cd32 <osMessageGet+0xca>
 800ccf6:	4b15      	ldr	r3, [pc, #84]	; (800cd4c <osMessageGet+0xe4>)
 800ccf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccfc:	601a      	str	r2, [r3, #0]
 800ccfe:	f3bf 8f4f 	dsb	sy
 800cd02:	f3bf 8f6f 	isb	sy
 800cd06:	e014      	b.n	800cd32 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800cd08:	f107 0314 	add.w	r3, r7, #20
 800cd0c:	3304      	adds	r3, #4
 800cd0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd10:	4619      	mov	r1, r3
 800cd12:	68b8      	ldr	r0, [r7, #8]
 800cd14:	f000 fdda 	bl	800d8cc <xQueueReceive>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	2b01      	cmp	r3, #1
 800cd1c:	d102      	bne.n	800cd24 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800cd1e:	2310      	movs	r3, #16
 800cd20:	617b      	str	r3, [r7, #20]
 800cd22:	e006      	b.n	800cd32 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800cd24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d101      	bne.n	800cd2e <osMessageGet+0xc6>
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	e000      	b.n	800cd30 <osMessageGet+0xc8>
 800cd2e:	2340      	movs	r3, #64	; 0x40
 800cd30:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	461c      	mov	r4, r3
 800cd36:	f107 0314 	add.w	r3, r7, #20
 800cd3a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cd3e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800cd42:	68f8      	ldr	r0, [r7, #12]
 800cd44:	372c      	adds	r7, #44	; 0x2c
 800cd46:	46bd      	mov	sp, r7
 800cd48:	bd90      	pop	{r4, r7, pc}
 800cd4a:	bf00      	nop
 800cd4c:	e000ed04 	.word	0xe000ed04

0800cd50 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 800cd50:	b590      	push	{r4, r7, lr}
 800cd52:	b087      	sub	sp, #28
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
 800cd58:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	60fb      	str	r3, [r7, #12]
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	685b      	ldr	r3, [r3, #4]
 800cd64:	613b      	str	r3, [r7, #16]
 800cd66:	2300      	movs	r3, #0
 800cd68:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	689c      	ldr	r4, [r3, #8]
 800cd6e:	200c      	movs	r0, #12
 800cd70:	f002 fc4a 	bl	800f608 <pvPortMalloc>
 800cd74:	4603      	mov	r3, r0
 800cd76:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	689b      	ldr	r3, [r3, #8]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d101      	bne.n	800cd86 <osMailCreate+0x36>
    return NULL;
 800cd82:	2300      	movs	r3, #0
 800cd84:	e038      	b.n	800cdf8 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	689b      	ldr	r3, [r3, #8]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	687a      	ldr	r2, [r7, #4]
 800cd8e:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	6818      	ldr	r0, [r3, #0]
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	689b      	ldr	r3, [r3, #8]
 800cd98:	681c      	ldr	r4, [r3, #0]
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	2104      	movs	r1, #4
 800cd9e:	f000 fac9 	bl	800d334 <xQueueGenericCreate>
 800cda2:	4603      	mov	r3, r0
 800cda4:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	689b      	ldr	r3, [r3, #8]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	685b      	ldr	r3, [r3, #4]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	d107      	bne.n	800cdc2 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	689b      	ldr	r3, [r3, #8]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f002 fcf1 	bl	800f7a0 <vPortFree>
    return NULL;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	e01a      	b.n	800cdf8 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	689b      	ldr	r3, [r3, #8]
 800cdc6:	681c      	ldr	r4, [r3, #0]
 800cdc8:	f107 030c 	add.w	r3, r7, #12
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f7ff fde2 	bl	800c996 <osPoolCreate>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	689b      	ldr	r3, [r3, #8]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	689b      	ldr	r3, [r3, #8]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d107      	bne.n	800cdf2 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	689b      	ldr	r3, [r3, #8]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	4618      	mov	r0, r3
 800cdea:	f002 fcd9 	bl	800f7a0 <vPortFree>
    return NULL;
 800cdee:	2300      	movs	r3, #0
 800cdf0:	e002      	b.n	800cdf8 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	689b      	ldr	r3, [r3, #8]
 800cdf6:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	371c      	adds	r7, #28
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	bd90      	pop	{r4, r7, pc}

0800ce00 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b084      	sub	sp, #16
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
 800ce08:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d101      	bne.n	800ce14 <osMailAlloc+0x14>
    return NULL;
 800ce10:	2300      	movs	r3, #0
 800ce12:	e006      	b.n	800ce22 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	689b      	ldr	r3, [r3, #8]
 800ce18:	4618      	mov	r0, r3
 800ce1a:	f7ff fe19 	bl	800ca50 <osPoolAlloc>
 800ce1e:	60f8      	str	r0, [r7, #12]
  
  return p;
 800ce20:	68fb      	ldr	r3, [r7, #12]
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3710      	adds	r7, #16
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}
	...

0800ce2c <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 800ce2c:	b580      	push	{r7, lr}
 800ce2e:	b084      	sub	sp, #16
 800ce30:	af00      	add	r7, sp, #0
 800ce32:	6078      	str	r0, [r7, #4]
 800ce34:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d101      	bne.n	800ce40 <osMailPut+0x14>
    return osErrorParameter;
 800ce3c:	2380      	movs	r3, #128	; 0x80
 800ce3e:	e02c      	b.n	800ce9a <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 800ce40:	2300      	movs	r3, #0
 800ce42:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 800ce44:	f7ff fbb8 	bl	800c5b8 <inHandlerMode>
 800ce48:	4603      	mov	r3, r0
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d018      	beq.n	800ce80 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	6858      	ldr	r0, [r3, #4]
 800ce52:	f107 020c 	add.w	r2, r7, #12
 800ce56:	4639      	mov	r1, r7
 800ce58:	2300      	movs	r3, #0
 800ce5a:	f000 fc0f 	bl	800d67c <xQueueGenericSendFromISR>
 800ce5e:	4603      	mov	r3, r0
 800ce60:	2b01      	cmp	r3, #1
 800ce62:	d001      	beq.n	800ce68 <osMailPut+0x3c>
      return osErrorOS;
 800ce64:	23ff      	movs	r3, #255	; 0xff
 800ce66:	e018      	b.n	800ce9a <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d014      	beq.n	800ce98 <osMailPut+0x6c>
 800ce6e:	4b0d      	ldr	r3, [pc, #52]	; (800cea4 <osMailPut+0x78>)
 800ce70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce74:	601a      	str	r2, [r3, #0]
 800ce76:	f3bf 8f4f 	dsb	sy
 800ce7a:	f3bf 8f6f 	isb	sy
 800ce7e:	e00b      	b.n	800ce98 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	6858      	ldr	r0, [r3, #4]
 800ce84:	4639      	mov	r1, r7
 800ce86:	2300      	movs	r3, #0
 800ce88:	2200      	movs	r2, #0
 800ce8a:	f000 faf9 	bl	800d480 <xQueueGenericSend>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	2b01      	cmp	r3, #1
 800ce92:	d001      	beq.n	800ce98 <osMailPut+0x6c>
      return osErrorOS;
 800ce94:	23ff      	movs	r3, #255	; 0xff
 800ce96:	e000      	b.n	800ce9a <osMailPut+0x6e>
    }
  }
  
  return osOK;
 800ce98:	2300      	movs	r3, #0
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3710      	adds	r7, #16
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}
 800cea2:	bf00      	nop
 800cea4:	e000ed04 	.word	0xe000ed04

0800cea8 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 800cea8:	b590      	push	{r4, r7, lr}
 800ceaa:	b08b      	sub	sp, #44	; 0x2c
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	60f8      	str	r0, [r7, #12]
 800ceb0:	60b9      	str	r1, [r7, #8]
 800ceb2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d10a      	bne.n	800ced4 <osMailGet+0x2c>
    event.status = osErrorParameter;
 800cebe:	2380      	movs	r3, #128	; 0x80
 800cec0:	617b      	str	r3, [r7, #20]
    return event;
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	461c      	mov	r4, r3
 800cec6:	f107 0314 	add.w	r3, r7, #20
 800ceca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cece:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ced2:	e056      	b.n	800cf82 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800ced4:	2300      	movs	r3, #0
 800ced6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800ced8:	2300      	movs	r3, #0
 800ceda:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cee2:	d103      	bne.n	800ceec <osMailGet+0x44>
    ticks = portMAX_DELAY;
 800cee4:	f04f 33ff 	mov.w	r3, #4294967295
 800cee8:	627b      	str	r3, [r7, #36]	; 0x24
 800ceea:	e009      	b.n	800cf00 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d006      	beq.n	800cf00 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800cef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d101      	bne.n	800cf00 <osMailGet+0x58>
      ticks = 1;
 800cefc:	2301      	movs	r3, #1
 800cefe:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800cf00:	f7ff fb5a 	bl	800c5b8 <inHandlerMode>
 800cf04:	4603      	mov	r3, r0
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d01d      	beq.n	800cf46 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 800cf0a:	68bb      	ldr	r3, [r7, #8]
 800cf0c:	6858      	ldr	r0, [r3, #4]
 800cf0e:	f107 0220 	add.w	r2, r7, #32
 800cf12:	f107 0314 	add.w	r3, r7, #20
 800cf16:	3304      	adds	r3, #4
 800cf18:	4619      	mov	r1, r3
 800cf1a:	f000 fec3 	bl	800dca4 <xQueueReceiveFromISR>
 800cf1e:	4603      	mov	r3, r0
 800cf20:	2b01      	cmp	r3, #1
 800cf22:	d102      	bne.n	800cf2a <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 800cf24:	2320      	movs	r3, #32
 800cf26:	617b      	str	r3, [r7, #20]
 800cf28:	e001      	b.n	800cf2e <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800cf2e:	6a3b      	ldr	r3, [r7, #32]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d01e      	beq.n	800cf72 <osMailGet+0xca>
 800cf34:	4b15      	ldr	r3, [pc, #84]	; (800cf8c <osMailGet+0xe4>)
 800cf36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf3a:	601a      	str	r2, [r3, #0]
 800cf3c:	f3bf 8f4f 	dsb	sy
 800cf40:	f3bf 8f6f 	isb	sy
 800cf44:	e015      	b.n	800cf72 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 800cf46:	68bb      	ldr	r3, [r7, #8]
 800cf48:	6858      	ldr	r0, [r3, #4]
 800cf4a:	f107 0314 	add.w	r3, r7, #20
 800cf4e:	3304      	adds	r3, #4
 800cf50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cf52:	4619      	mov	r1, r3
 800cf54:	f000 fcba 	bl	800d8cc <xQueueReceive>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	2b01      	cmp	r3, #1
 800cf5c:	d102      	bne.n	800cf64 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 800cf5e:	2320      	movs	r3, #32
 800cf60:	617b      	str	r3, [r7, #20]
 800cf62:	e006      	b.n	800cf72 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800cf64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d101      	bne.n	800cf6e <osMailGet+0xc6>
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	e000      	b.n	800cf70 <osMailGet+0xc8>
 800cf6e:	2340      	movs	r3, #64	; 0x40
 800cf70:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	461c      	mov	r4, r3
 800cf76:	f107 0314 	add.w	r3, r7, #20
 800cf7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cf7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800cf82:	68f8      	ldr	r0, [r7, #12]
 800cf84:	372c      	adds	r7, #44	; 0x2c
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd90      	pop	{r4, r7, pc}
 800cf8a:	bf00      	nop
 800cf8c:	e000ed04 	.word	0xe000ed04

0800cf90 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b082      	sub	sp, #8
 800cf94:	af00      	add	r7, sp, #0
 800cf96:	6078      	str	r0, [r7, #4]
 800cf98:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d101      	bne.n	800cfa4 <osMailFree+0x14>
    return osErrorParameter;
 800cfa0:	2380      	movs	r3, #128	; 0x80
 800cfa2:	e006      	b.n	800cfb2 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	689b      	ldr	r3, [r3, #8]
 800cfa8:	6839      	ldr	r1, [r7, #0]
 800cfaa:	4618      	mov	r0, r3
 800cfac:	f7ff fdb2 	bl	800cb14 <osPoolFree>
 800cfb0:	4603      	mov	r3, r0
}
 800cfb2:	4618      	mov	r0, r3
 800cfb4:	3708      	adds	r7, #8
 800cfb6:	46bd      	mov	sp, r7
 800cfb8:	bd80      	pop	{r7, pc}

0800cfba <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800cfba:	b580      	push	{r7, lr}
 800cfbc:	b082      	sub	sp, #8
 800cfbe:	af00      	add	r7, sp, #0
 800cfc0:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800cfc2:	f7ff faf9 	bl	800c5b8 <inHandlerMode>
 800cfc6:	4603      	mov	r3, r0
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d004      	beq.n	800cfd6 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f000 ff07 	bl	800dde0 <uxQueueMessagesWaitingFromISR>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	e003      	b.n	800cfde <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800cfd6:	6878      	ldr	r0, [r7, #4]
 800cfd8:	f000 fee4 	bl	800dda4 <uxQueueMessagesWaiting>
 800cfdc:	4603      	mov	r3, r0
  }
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3708      	adds	r7, #8
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}

0800cfe6 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800cfe6:	b580      	push	{r7, lr}
 800cfe8:	b082      	sub	sp, #8
 800cfea:	af00      	add	r7, sp, #0
 800cfec:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800cfee:	f7ff fae3 	bl	800c5b8 <inHandlerMode>
 800cff2:	4603      	mov	r3, r0
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d001      	beq.n	800cffc <osMessageDelete+0x16>
    return osErrorISR;
 800cff8:	2382      	movs	r3, #130	; 0x82
 800cffa:	e003      	b.n	800d004 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800cffc:	6878      	ldr	r0, [r7, #4]
 800cffe:	f000 ff0d 	bl	800de1c <vQueueDelete>

  return osOK; 
 800d002:	2300      	movs	r3, #0
}
 800d004:	4618      	mov	r0, r3
 800d006:	3708      	adds	r7, #8
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}

0800d00c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f103 0208 	add.w	r2, r3, #8
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	f04f 32ff 	mov.w	r2, #4294967295
 800d024:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f103 0208 	add.w	r2, r3, #8
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f103 0208 	add.w	r2, r3, #8
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	2200      	movs	r2, #0
 800d03e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d040:	bf00      	nop
 800d042:	370c      	adds	r7, #12
 800d044:	46bd      	mov	sp, r7
 800d046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d04a:	4770      	bx	lr

0800d04c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d04c:	b480      	push	{r7}
 800d04e:	b083      	sub	sp, #12
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2200      	movs	r2, #0
 800d058:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d05a:	bf00      	nop
 800d05c:	370c      	adds	r7, #12
 800d05e:	46bd      	mov	sp, r7
 800d060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d064:	4770      	bx	lr

0800d066 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d066:	b480      	push	{r7}
 800d068:	b085      	sub	sp, #20
 800d06a:	af00      	add	r7, sp, #0
 800d06c:	6078      	str	r0, [r7, #4]
 800d06e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	685b      	ldr	r3, [r3, #4]
 800d074:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	68fa      	ldr	r2, [r7, #12]
 800d07a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d07c:	68fb      	ldr	r3, [r7, #12]
 800d07e:	689a      	ldr	r2, [r3, #8]
 800d080:	683b      	ldr	r3, [r7, #0]
 800d082:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	689b      	ldr	r3, [r3, #8]
 800d088:	683a      	ldr	r2, [r7, #0]
 800d08a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	683a      	ldr	r2, [r7, #0]
 800d090:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d092:	683b      	ldr	r3, [r7, #0]
 800d094:	687a      	ldr	r2, [r7, #4]
 800d096:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	1c5a      	adds	r2, r3, #1
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	601a      	str	r2, [r3, #0]
}
 800d0a2:	bf00      	nop
 800d0a4:	3714      	adds	r7, #20
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ac:	4770      	bx	lr

0800d0ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d0ae:	b480      	push	{r7}
 800d0b0:	b085      	sub	sp, #20
 800d0b2:	af00      	add	r7, sp, #0
 800d0b4:	6078      	str	r0, [r7, #4]
 800d0b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	681b      	ldr	r3, [r3, #0]
 800d0bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0c4:	d103      	bne.n	800d0ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	691b      	ldr	r3, [r3, #16]
 800d0ca:	60fb      	str	r3, [r7, #12]
 800d0cc:	e00c      	b.n	800d0e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	3308      	adds	r3, #8
 800d0d2:	60fb      	str	r3, [r7, #12]
 800d0d4:	e002      	b.n	800d0dc <vListInsert+0x2e>
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	685b      	ldr	r3, [r3, #4]
 800d0da:	60fb      	str	r3, [r7, #12]
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	685b      	ldr	r3, [r3, #4]
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	68ba      	ldr	r2, [r7, #8]
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d2f6      	bcs.n	800d0d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	685a      	ldr	r2, [r3, #4]
 800d0ec:	683b      	ldr	r3, [r7, #0]
 800d0ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d0f0:	683b      	ldr	r3, [r7, #0]
 800d0f2:	685b      	ldr	r3, [r3, #4]
 800d0f4:	683a      	ldr	r2, [r7, #0]
 800d0f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	68fa      	ldr	r2, [r7, #12]
 800d0fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	683a      	ldr	r2, [r7, #0]
 800d102:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d104:	683b      	ldr	r3, [r7, #0]
 800d106:	687a      	ldr	r2, [r7, #4]
 800d108:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	1c5a      	adds	r2, r3, #1
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	601a      	str	r2, [r3, #0]
}
 800d114:	bf00      	nop
 800d116:	3714      	adds	r7, #20
 800d118:	46bd      	mov	sp, r7
 800d11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d11e:	4770      	bx	lr

0800d120 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d120:	b480      	push	{r7}
 800d122:	b085      	sub	sp, #20
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	691b      	ldr	r3, [r3, #16]
 800d12c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	685b      	ldr	r3, [r3, #4]
 800d132:	687a      	ldr	r2, [r7, #4]
 800d134:	6892      	ldr	r2, [r2, #8]
 800d136:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	689b      	ldr	r3, [r3, #8]
 800d13c:	687a      	ldr	r2, [r7, #4]
 800d13e:	6852      	ldr	r2, [r2, #4]
 800d140:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	685b      	ldr	r3, [r3, #4]
 800d146:	687a      	ldr	r2, [r7, #4]
 800d148:	429a      	cmp	r2, r3
 800d14a:	d103      	bne.n	800d154 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	689a      	ldr	r2, [r3, #8]
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2200      	movs	r2, #0
 800d158:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d15a:	68fb      	ldr	r3, [r7, #12]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	1e5a      	subs	r2, r3, #1
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	681b      	ldr	r3, [r3, #0]
}
 800d168:	4618      	mov	r0, r3
 800d16a:	3714      	adds	r7, #20
 800d16c:	46bd      	mov	sp, r7
 800d16e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d172:	4770      	bx	lr

0800d174 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b084      	sub	sp, #16
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
 800d17c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d10a      	bne.n	800d19e <xQueueGenericReset+0x2a>
	__asm volatile
 800d188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d18c:	f383 8811 	msr	BASEPRI, r3
 800d190:	f3bf 8f6f 	isb	sy
 800d194:	f3bf 8f4f 	dsb	sy
 800d198:	60bb      	str	r3, [r7, #8]
}
 800d19a:	bf00      	nop
 800d19c:	e7fe      	b.n	800d19c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800d19e:	f002 f911 	bl	800f3c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d1a2:	68fb      	ldr	r3, [r7, #12]
 800d1a4:	681a      	ldr	r2, [r3, #0]
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1aa:	68f9      	ldr	r1, [r7, #12]
 800d1ac:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d1ae:	fb01 f303 	mul.w	r3, r1, r3
 800d1b2:	441a      	add	r2, r3
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	2200      	movs	r2, #0
 800d1bc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	681a      	ldr	r2, [r3, #0]
 800d1c2:	68fb      	ldr	r3, [r7, #12]
 800d1c4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	681a      	ldr	r2, [r3, #0]
 800d1ca:	68fb      	ldr	r3, [r7, #12]
 800d1cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1ce:	3b01      	subs	r3, #1
 800d1d0:	68f9      	ldr	r1, [r7, #12]
 800d1d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d1d4:	fb01 f303 	mul.w	r3, r1, r3
 800d1d8:	441a      	add	r2, r3
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	22ff      	movs	r2, #255	; 0xff
 800d1e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	22ff      	movs	r2, #255	; 0xff
 800d1ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d1ee:	683b      	ldr	r3, [r7, #0]
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d114      	bne.n	800d21e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d1f4:	68fb      	ldr	r3, [r7, #12]
 800d1f6:	691b      	ldr	r3, [r3, #16]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d01a      	beq.n	800d232 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	3310      	adds	r3, #16
 800d200:	4618      	mov	r0, r3
 800d202:	f001 fbd3 	bl	800e9ac <xTaskRemoveFromEventList>
 800d206:	4603      	mov	r3, r0
 800d208:	2b00      	cmp	r3, #0
 800d20a:	d012      	beq.n	800d232 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d20c:	4b0c      	ldr	r3, [pc, #48]	; (800d240 <xQueueGenericReset+0xcc>)
 800d20e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d212:	601a      	str	r2, [r3, #0]
 800d214:	f3bf 8f4f 	dsb	sy
 800d218:	f3bf 8f6f 	isb	sy
 800d21c:	e009      	b.n	800d232 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	3310      	adds	r3, #16
 800d222:	4618      	mov	r0, r3
 800d224:	f7ff fef2 	bl	800d00c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	3324      	adds	r3, #36	; 0x24
 800d22c:	4618      	mov	r0, r3
 800d22e:	f7ff feed 	bl	800d00c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d232:	f002 f8f7 	bl	800f424 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d236:	2301      	movs	r3, #1
}
 800d238:	4618      	mov	r0, r3
 800d23a:	3710      	adds	r7, #16
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}
 800d240:	e000ed04 	.word	0xe000ed04

0800d244 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d244:	b580      	push	{r7, lr}
 800d246:	b08e      	sub	sp, #56	; 0x38
 800d248:	af02      	add	r7, sp, #8
 800d24a:	60f8      	str	r0, [r7, #12]
 800d24c:	60b9      	str	r1, [r7, #8]
 800d24e:	607a      	str	r2, [r7, #4]
 800d250:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d10a      	bne.n	800d26e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800d258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d25c:	f383 8811 	msr	BASEPRI, r3
 800d260:	f3bf 8f6f 	isb	sy
 800d264:	f3bf 8f4f 	dsb	sy
 800d268:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d26a:	bf00      	nop
 800d26c:	e7fe      	b.n	800d26c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d26e:	683b      	ldr	r3, [r7, #0]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d10a      	bne.n	800d28a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800d274:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d278:	f383 8811 	msr	BASEPRI, r3
 800d27c:	f3bf 8f6f 	isb	sy
 800d280:	f3bf 8f4f 	dsb	sy
 800d284:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d286:	bf00      	nop
 800d288:	e7fe      	b.n	800d288 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d002      	beq.n	800d296 <xQueueGenericCreateStatic+0x52>
 800d290:	68bb      	ldr	r3, [r7, #8]
 800d292:	2b00      	cmp	r3, #0
 800d294:	d001      	beq.n	800d29a <xQueueGenericCreateStatic+0x56>
 800d296:	2301      	movs	r3, #1
 800d298:	e000      	b.n	800d29c <xQueueGenericCreateStatic+0x58>
 800d29a:	2300      	movs	r3, #0
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d10a      	bne.n	800d2b6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800d2a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2a4:	f383 8811 	msr	BASEPRI, r3
 800d2a8:	f3bf 8f6f 	isb	sy
 800d2ac:	f3bf 8f4f 	dsb	sy
 800d2b0:	623b      	str	r3, [r7, #32]
}
 800d2b2:	bf00      	nop
 800d2b4:	e7fe      	b.n	800d2b4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d102      	bne.n	800d2c2 <xQueueGenericCreateStatic+0x7e>
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d101      	bne.n	800d2c6 <xQueueGenericCreateStatic+0x82>
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	e000      	b.n	800d2c8 <xQueueGenericCreateStatic+0x84>
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d10a      	bne.n	800d2e2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800d2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2d0:	f383 8811 	msr	BASEPRI, r3
 800d2d4:	f3bf 8f6f 	isb	sy
 800d2d8:	f3bf 8f4f 	dsb	sy
 800d2dc:	61fb      	str	r3, [r7, #28]
}
 800d2de:	bf00      	nop
 800d2e0:	e7fe      	b.n	800d2e0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d2e2:	2348      	movs	r3, #72	; 0x48
 800d2e4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d2e6:	697b      	ldr	r3, [r7, #20]
 800d2e8:	2b48      	cmp	r3, #72	; 0x48
 800d2ea:	d00a      	beq.n	800d302 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800d2ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2f0:	f383 8811 	msr	BASEPRI, r3
 800d2f4:	f3bf 8f6f 	isb	sy
 800d2f8:	f3bf 8f4f 	dsb	sy
 800d2fc:	61bb      	str	r3, [r7, #24]
}
 800d2fe:	bf00      	nop
 800d300:	e7fe      	b.n	800d300 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d302:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d304:	683b      	ldr	r3, [r7, #0]
 800d306:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d00d      	beq.n	800d32a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d310:	2201      	movs	r2, #1
 800d312:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d316:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d31c:	9300      	str	r3, [sp, #0]
 800d31e:	4613      	mov	r3, r2
 800d320:	687a      	ldr	r2, [r7, #4]
 800d322:	68b9      	ldr	r1, [r7, #8]
 800d324:	68f8      	ldr	r0, [r7, #12]
 800d326:	f000 f83f 	bl	800d3a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d32c:	4618      	mov	r0, r3
 800d32e:	3730      	adds	r7, #48	; 0x30
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}

0800d334 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800d334:	b580      	push	{r7, lr}
 800d336:	b08a      	sub	sp, #40	; 0x28
 800d338:	af02      	add	r7, sp, #8
 800d33a:	60f8      	str	r0, [r7, #12]
 800d33c:	60b9      	str	r1, [r7, #8]
 800d33e:	4613      	mov	r3, r2
 800d340:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d10a      	bne.n	800d35e <xQueueGenericCreate+0x2a>
	__asm volatile
 800d348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d34c:	f383 8811 	msr	BASEPRI, r3
 800d350:	f3bf 8f6f 	isb	sy
 800d354:	f3bf 8f4f 	dsb	sy
 800d358:	613b      	str	r3, [r7, #16]
}
 800d35a:	bf00      	nop
 800d35c:	e7fe      	b.n	800d35c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d35e:	68fb      	ldr	r3, [r7, #12]
 800d360:	68ba      	ldr	r2, [r7, #8]
 800d362:	fb02 f303 	mul.w	r3, r2, r3
 800d366:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d368:	69fb      	ldr	r3, [r7, #28]
 800d36a:	3348      	adds	r3, #72	; 0x48
 800d36c:	4618      	mov	r0, r3
 800d36e:	f002 f94b 	bl	800f608 <pvPortMalloc>
 800d372:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800d374:	69bb      	ldr	r3, [r7, #24]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d011      	beq.n	800d39e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800d37a:	69bb      	ldr	r3, [r7, #24]
 800d37c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d37e:	697b      	ldr	r3, [r7, #20]
 800d380:	3348      	adds	r3, #72	; 0x48
 800d382:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d384:	69bb      	ldr	r3, [r7, #24]
 800d386:	2200      	movs	r2, #0
 800d388:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d38c:	79fa      	ldrb	r2, [r7, #7]
 800d38e:	69bb      	ldr	r3, [r7, #24]
 800d390:	9300      	str	r3, [sp, #0]
 800d392:	4613      	mov	r3, r2
 800d394:	697a      	ldr	r2, [r7, #20]
 800d396:	68b9      	ldr	r1, [r7, #8]
 800d398:	68f8      	ldr	r0, [r7, #12]
 800d39a:	f000 f805 	bl	800d3a8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d39e:	69bb      	ldr	r3, [r7, #24]
	}
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	3720      	adds	r7, #32
 800d3a4:	46bd      	mov	sp, r7
 800d3a6:	bd80      	pop	{r7, pc}

0800d3a8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d3a8:	b580      	push	{r7, lr}
 800d3aa:	b084      	sub	sp, #16
 800d3ac:	af00      	add	r7, sp, #0
 800d3ae:	60f8      	str	r0, [r7, #12]
 800d3b0:	60b9      	str	r1, [r7, #8]
 800d3b2:	607a      	str	r2, [r7, #4]
 800d3b4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d103      	bne.n	800d3c4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d3bc:	69bb      	ldr	r3, [r7, #24]
 800d3be:	69ba      	ldr	r2, [r7, #24]
 800d3c0:	601a      	str	r2, [r3, #0]
 800d3c2:	e002      	b.n	800d3ca <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d3c4:	69bb      	ldr	r3, [r7, #24]
 800d3c6:	687a      	ldr	r2, [r7, #4]
 800d3c8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d3ca:	69bb      	ldr	r3, [r7, #24]
 800d3cc:	68fa      	ldr	r2, [r7, #12]
 800d3ce:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d3d0:	69bb      	ldr	r3, [r7, #24]
 800d3d2:	68ba      	ldr	r2, [r7, #8]
 800d3d4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d3d6:	2101      	movs	r1, #1
 800d3d8:	69b8      	ldr	r0, [r7, #24]
 800d3da:	f7ff fecb 	bl	800d174 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d3de:	bf00      	nop
 800d3e0:	3710      	adds	r7, #16
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}

0800d3e6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800d3e6:	b580      	push	{r7, lr}
 800d3e8:	b082      	sub	sp, #8
 800d3ea:	af00      	add	r7, sp, #0
 800d3ec:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d00e      	beq.n	800d412 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2200      	movs	r2, #0
 800d404:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d406:	2300      	movs	r3, #0
 800d408:	2200      	movs	r2, #0
 800d40a:	2100      	movs	r1, #0
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f000 f837 	bl	800d480 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800d412:	bf00      	nop
 800d414:	3708      	adds	r7, #8
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}

0800d41a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800d41a:	b580      	push	{r7, lr}
 800d41c:	b086      	sub	sp, #24
 800d41e:	af00      	add	r7, sp, #0
 800d420:	4603      	mov	r3, r0
 800d422:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d424:	2301      	movs	r3, #1
 800d426:	617b      	str	r3, [r7, #20]
 800d428:	2300      	movs	r3, #0
 800d42a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800d42c:	79fb      	ldrb	r3, [r7, #7]
 800d42e:	461a      	mov	r2, r3
 800d430:	6939      	ldr	r1, [r7, #16]
 800d432:	6978      	ldr	r0, [r7, #20]
 800d434:	f7ff ff7e 	bl	800d334 <xQueueGenericCreate>
 800d438:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d43a:	68f8      	ldr	r0, [r7, #12]
 800d43c:	f7ff ffd3 	bl	800d3e6 <prvInitialiseMutex>

		return xNewQueue;
 800d440:	68fb      	ldr	r3, [r7, #12]
	}
 800d442:	4618      	mov	r0, r3
 800d444:	3718      	adds	r7, #24
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}

0800d44a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800d44a:	b580      	push	{r7, lr}
 800d44c:	b088      	sub	sp, #32
 800d44e:	af02      	add	r7, sp, #8
 800d450:	4603      	mov	r3, r0
 800d452:	6039      	str	r1, [r7, #0]
 800d454:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800d456:	2301      	movs	r3, #1
 800d458:	617b      	str	r3, [r7, #20]
 800d45a:	2300      	movs	r3, #0
 800d45c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d45e:	79fb      	ldrb	r3, [r7, #7]
 800d460:	9300      	str	r3, [sp, #0]
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	2200      	movs	r2, #0
 800d466:	6939      	ldr	r1, [r7, #16]
 800d468:	6978      	ldr	r0, [r7, #20]
 800d46a:	f7ff feeb 	bl	800d244 <xQueueGenericCreateStatic>
 800d46e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800d470:	68f8      	ldr	r0, [r7, #12]
 800d472:	f7ff ffb8 	bl	800d3e6 <prvInitialiseMutex>

		return xNewQueue;
 800d476:	68fb      	ldr	r3, [r7, #12]
	}
 800d478:	4618      	mov	r0, r3
 800d47a:	3718      	adds	r7, #24
 800d47c:	46bd      	mov	sp, r7
 800d47e:	bd80      	pop	{r7, pc}

0800d480 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d480:	b580      	push	{r7, lr}
 800d482:	b08e      	sub	sp, #56	; 0x38
 800d484:	af00      	add	r7, sp, #0
 800d486:	60f8      	str	r0, [r7, #12]
 800d488:	60b9      	str	r1, [r7, #8]
 800d48a:	607a      	str	r2, [r7, #4]
 800d48c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d48e:	2300      	movs	r3, #0
 800d490:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d10a      	bne.n	800d4b2 <xQueueGenericSend+0x32>
	__asm volatile
 800d49c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4a0:	f383 8811 	msr	BASEPRI, r3
 800d4a4:	f3bf 8f6f 	isb	sy
 800d4a8:	f3bf 8f4f 	dsb	sy
 800d4ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d4ae:	bf00      	nop
 800d4b0:	e7fe      	b.n	800d4b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d103      	bne.n	800d4c0 <xQueueGenericSend+0x40>
 800d4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d101      	bne.n	800d4c4 <xQueueGenericSend+0x44>
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	e000      	b.n	800d4c6 <xQueueGenericSend+0x46>
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d10a      	bne.n	800d4e0 <xQueueGenericSend+0x60>
	__asm volatile
 800d4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ce:	f383 8811 	msr	BASEPRI, r3
 800d4d2:	f3bf 8f6f 	isb	sy
 800d4d6:	f3bf 8f4f 	dsb	sy
 800d4da:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d4dc:	bf00      	nop
 800d4de:	e7fe      	b.n	800d4de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	2b02      	cmp	r3, #2
 800d4e4:	d103      	bne.n	800d4ee <xQueueGenericSend+0x6e>
 800d4e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4ea:	2b01      	cmp	r3, #1
 800d4ec:	d101      	bne.n	800d4f2 <xQueueGenericSend+0x72>
 800d4ee:	2301      	movs	r3, #1
 800d4f0:	e000      	b.n	800d4f4 <xQueueGenericSend+0x74>
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d10a      	bne.n	800d50e <xQueueGenericSend+0x8e>
	__asm volatile
 800d4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4fc:	f383 8811 	msr	BASEPRI, r3
 800d500:	f3bf 8f6f 	isb	sy
 800d504:	f3bf 8f4f 	dsb	sy
 800d508:	623b      	str	r3, [r7, #32]
}
 800d50a:	bf00      	nop
 800d50c:	e7fe      	b.n	800d50c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d50e:	f001 fc0d 	bl	800ed2c <xTaskGetSchedulerState>
 800d512:	4603      	mov	r3, r0
 800d514:	2b00      	cmp	r3, #0
 800d516:	d102      	bne.n	800d51e <xQueueGenericSend+0x9e>
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d101      	bne.n	800d522 <xQueueGenericSend+0xa2>
 800d51e:	2301      	movs	r3, #1
 800d520:	e000      	b.n	800d524 <xQueueGenericSend+0xa4>
 800d522:	2300      	movs	r3, #0
 800d524:	2b00      	cmp	r3, #0
 800d526:	d10a      	bne.n	800d53e <xQueueGenericSend+0xbe>
	__asm volatile
 800d528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d52c:	f383 8811 	msr	BASEPRI, r3
 800d530:	f3bf 8f6f 	isb	sy
 800d534:	f3bf 8f4f 	dsb	sy
 800d538:	61fb      	str	r3, [r7, #28]
}
 800d53a:	bf00      	nop
 800d53c:	e7fe      	b.n	800d53c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d53e:	f001 ff41 	bl	800f3c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d544:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d548:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d54a:	429a      	cmp	r2, r3
 800d54c:	d302      	bcc.n	800d554 <xQueueGenericSend+0xd4>
 800d54e:	683b      	ldr	r3, [r7, #0]
 800d550:	2b02      	cmp	r3, #2
 800d552:	d129      	bne.n	800d5a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d554:	683a      	ldr	r2, [r7, #0]
 800d556:	68b9      	ldr	r1, [r7, #8]
 800d558:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d55a:	f000 fc9a 	bl	800de92 <prvCopyDataToQueue>
 800d55e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d564:	2b00      	cmp	r3, #0
 800d566:	d010      	beq.n	800d58a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d56a:	3324      	adds	r3, #36	; 0x24
 800d56c:	4618      	mov	r0, r3
 800d56e:	f001 fa1d 	bl	800e9ac <xTaskRemoveFromEventList>
 800d572:	4603      	mov	r3, r0
 800d574:	2b00      	cmp	r3, #0
 800d576:	d013      	beq.n	800d5a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d578:	4b3f      	ldr	r3, [pc, #252]	; (800d678 <xQueueGenericSend+0x1f8>)
 800d57a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d57e:	601a      	str	r2, [r3, #0]
 800d580:	f3bf 8f4f 	dsb	sy
 800d584:	f3bf 8f6f 	isb	sy
 800d588:	e00a      	b.n	800d5a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d58a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d007      	beq.n	800d5a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d590:	4b39      	ldr	r3, [pc, #228]	; (800d678 <xQueueGenericSend+0x1f8>)
 800d592:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d596:	601a      	str	r2, [r3, #0]
 800d598:	f3bf 8f4f 	dsb	sy
 800d59c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d5a0:	f001 ff40 	bl	800f424 <vPortExitCritical>
				return pdPASS;
 800d5a4:	2301      	movs	r3, #1
 800d5a6:	e063      	b.n	800d670 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d103      	bne.n	800d5b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d5ae:	f001 ff39 	bl	800f424 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	e05c      	b.n	800d670 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d5b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d106      	bne.n	800d5ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d5bc:	f107 0314 	add.w	r3, r7, #20
 800d5c0:	4618      	mov	r0, r3
 800d5c2:	f001 fa55 	bl	800ea70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d5c6:	2301      	movs	r3, #1
 800d5c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d5ca:	f001 ff2b 	bl	800f424 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d5ce:	f000 ffe3 	bl	800e598 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d5d2:	f001 fef7 	bl	800f3c4 <vPortEnterCritical>
 800d5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d5dc:	b25b      	sxtb	r3, r3
 800d5de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5e2:	d103      	bne.n	800d5ec <xQueueGenericSend+0x16c>
 800d5e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e6:	2200      	movs	r2, #0
 800d5e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d5ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d5f2:	b25b      	sxtb	r3, r3
 800d5f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d5f8:	d103      	bne.n	800d602 <xQueueGenericSend+0x182>
 800d5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d602:	f001 ff0f 	bl	800f424 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d606:	1d3a      	adds	r2, r7, #4
 800d608:	f107 0314 	add.w	r3, r7, #20
 800d60c:	4611      	mov	r1, r2
 800d60e:	4618      	mov	r0, r3
 800d610:	f001 fa44 	bl	800ea9c <xTaskCheckForTimeOut>
 800d614:	4603      	mov	r3, r0
 800d616:	2b00      	cmp	r3, #0
 800d618:	d124      	bne.n	800d664 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d61a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d61c:	f000 fd31 	bl	800e082 <prvIsQueueFull>
 800d620:	4603      	mov	r3, r0
 800d622:	2b00      	cmp	r3, #0
 800d624:	d018      	beq.n	800d658 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d628:	3310      	adds	r3, #16
 800d62a:	687a      	ldr	r2, [r7, #4]
 800d62c:	4611      	mov	r1, r2
 800d62e:	4618      	mov	r0, r3
 800d630:	f001 f998 	bl	800e964 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d634:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d636:	f000 fcbc 	bl	800dfb2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d63a:	f000 ffbb 	bl	800e5b4 <xTaskResumeAll>
 800d63e:	4603      	mov	r3, r0
 800d640:	2b00      	cmp	r3, #0
 800d642:	f47f af7c 	bne.w	800d53e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d646:	4b0c      	ldr	r3, [pc, #48]	; (800d678 <xQueueGenericSend+0x1f8>)
 800d648:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d64c:	601a      	str	r2, [r3, #0]
 800d64e:	f3bf 8f4f 	dsb	sy
 800d652:	f3bf 8f6f 	isb	sy
 800d656:	e772      	b.n	800d53e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d658:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d65a:	f000 fcaa 	bl	800dfb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d65e:	f000 ffa9 	bl	800e5b4 <xTaskResumeAll>
 800d662:	e76c      	b.n	800d53e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d666:	f000 fca4 	bl	800dfb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d66a:	f000 ffa3 	bl	800e5b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d66e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d670:	4618      	mov	r0, r3
 800d672:	3738      	adds	r7, #56	; 0x38
 800d674:	46bd      	mov	sp, r7
 800d676:	bd80      	pop	{r7, pc}
 800d678:	e000ed04 	.word	0xe000ed04

0800d67c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b090      	sub	sp, #64	; 0x40
 800d680:	af00      	add	r7, sp, #0
 800d682:	60f8      	str	r0, [r7, #12]
 800d684:	60b9      	str	r1, [r7, #8]
 800d686:	607a      	str	r2, [r7, #4]
 800d688:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d690:	2b00      	cmp	r3, #0
 800d692:	d10a      	bne.n	800d6aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d694:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d698:	f383 8811 	msr	BASEPRI, r3
 800d69c:	f3bf 8f6f 	isb	sy
 800d6a0:	f3bf 8f4f 	dsb	sy
 800d6a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d6a6:	bf00      	nop
 800d6a8:	e7fe      	b.n	800d6a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d103      	bne.n	800d6b8 <xQueueGenericSendFromISR+0x3c>
 800d6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d101      	bne.n	800d6bc <xQueueGenericSendFromISR+0x40>
 800d6b8:	2301      	movs	r3, #1
 800d6ba:	e000      	b.n	800d6be <xQueueGenericSendFromISR+0x42>
 800d6bc:	2300      	movs	r3, #0
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d10a      	bne.n	800d6d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d6c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6c6:	f383 8811 	msr	BASEPRI, r3
 800d6ca:	f3bf 8f6f 	isb	sy
 800d6ce:	f3bf 8f4f 	dsb	sy
 800d6d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d6d4:	bf00      	nop
 800d6d6:	e7fe      	b.n	800d6d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d6d8:	683b      	ldr	r3, [r7, #0]
 800d6da:	2b02      	cmp	r3, #2
 800d6dc:	d103      	bne.n	800d6e6 <xQueueGenericSendFromISR+0x6a>
 800d6de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d6e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6e2:	2b01      	cmp	r3, #1
 800d6e4:	d101      	bne.n	800d6ea <xQueueGenericSendFromISR+0x6e>
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	e000      	b.n	800d6ec <xQueueGenericSendFromISR+0x70>
 800d6ea:	2300      	movs	r3, #0
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d10a      	bne.n	800d706 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f4:	f383 8811 	msr	BASEPRI, r3
 800d6f8:	f3bf 8f6f 	isb	sy
 800d6fc:	f3bf 8f4f 	dsb	sy
 800d700:	623b      	str	r3, [r7, #32]
}
 800d702:	bf00      	nop
 800d704:	e7fe      	b.n	800d704 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d706:	f001 ff3f 	bl	800f588 <vPortValidateInterruptPriority>
	__asm volatile
 800d70a:	f3ef 8211 	mrs	r2, BASEPRI
 800d70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d712:	f383 8811 	msr	BASEPRI, r3
 800d716:	f3bf 8f6f 	isb	sy
 800d71a:	f3bf 8f4f 	dsb	sy
 800d71e:	61fa      	str	r2, [r7, #28]
 800d720:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800d722:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d724:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d728:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d72c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d72e:	429a      	cmp	r2, r3
 800d730:	d302      	bcc.n	800d738 <xQueueGenericSendFromISR+0xbc>
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	2b02      	cmp	r3, #2
 800d736:	d12f      	bne.n	800d798 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d73a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d73e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d746:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d748:	683a      	ldr	r2, [r7, #0]
 800d74a:	68b9      	ldr	r1, [r7, #8]
 800d74c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d74e:	f000 fba0 	bl	800de92 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d752:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d75a:	d112      	bne.n	800d782 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d75e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d760:	2b00      	cmp	r3, #0
 800d762:	d016      	beq.n	800d792 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d766:	3324      	adds	r3, #36	; 0x24
 800d768:	4618      	mov	r0, r3
 800d76a:	f001 f91f 	bl	800e9ac <xTaskRemoveFromEventList>
 800d76e:	4603      	mov	r3, r0
 800d770:	2b00      	cmp	r3, #0
 800d772:	d00e      	beq.n	800d792 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d00b      	beq.n	800d792 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	2201      	movs	r2, #1
 800d77e:	601a      	str	r2, [r3, #0]
 800d780:	e007      	b.n	800d792 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d782:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d786:	3301      	adds	r3, #1
 800d788:	b2db      	uxtb	r3, r3
 800d78a:	b25a      	sxtb	r2, r3
 800d78c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d78e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d792:	2301      	movs	r3, #1
 800d794:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d796:	e001      	b.n	800d79c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d798:	2300      	movs	r3, #0
 800d79a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d79c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d79e:	617b      	str	r3, [r7, #20]
	__asm volatile
 800d7a0:	697b      	ldr	r3, [r7, #20]
 800d7a2:	f383 8811 	msr	BASEPRI, r3
}
 800d7a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d7a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	3740      	adds	r7, #64	; 0x40
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	bd80      	pop	{r7, pc}

0800d7b2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d7b2:	b580      	push	{r7, lr}
 800d7b4:	b08e      	sub	sp, #56	; 0x38
 800d7b6:	af00      	add	r7, sp, #0
 800d7b8:	6078      	str	r0, [r7, #4]
 800d7ba:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d10a      	bne.n	800d7dc <xQueueGiveFromISR+0x2a>
	__asm volatile
 800d7c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ca:	f383 8811 	msr	BASEPRI, r3
 800d7ce:	f3bf 8f6f 	isb	sy
 800d7d2:	f3bf 8f4f 	dsb	sy
 800d7d6:	623b      	str	r3, [r7, #32]
}
 800d7d8:	bf00      	nop
 800d7da:	e7fe      	b.n	800d7da <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d00a      	beq.n	800d7fa <xQueueGiveFromISR+0x48>
	__asm volatile
 800d7e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e8:	f383 8811 	msr	BASEPRI, r3
 800d7ec:	f3bf 8f6f 	isb	sy
 800d7f0:	f3bf 8f4f 	dsb	sy
 800d7f4:	61fb      	str	r3, [r7, #28]
}
 800d7f6:	bf00      	nop
 800d7f8:	e7fe      	b.n	800d7f8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d7fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	d103      	bne.n	800d80a <xQueueGiveFromISR+0x58>
 800d802:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d804:	689b      	ldr	r3, [r3, #8]
 800d806:	2b00      	cmp	r3, #0
 800d808:	d101      	bne.n	800d80e <xQueueGiveFromISR+0x5c>
 800d80a:	2301      	movs	r3, #1
 800d80c:	e000      	b.n	800d810 <xQueueGiveFromISR+0x5e>
 800d80e:	2300      	movs	r3, #0
 800d810:	2b00      	cmp	r3, #0
 800d812:	d10a      	bne.n	800d82a <xQueueGiveFromISR+0x78>
	__asm volatile
 800d814:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d818:	f383 8811 	msr	BASEPRI, r3
 800d81c:	f3bf 8f6f 	isb	sy
 800d820:	f3bf 8f4f 	dsb	sy
 800d824:	61bb      	str	r3, [r7, #24]
}
 800d826:	bf00      	nop
 800d828:	e7fe      	b.n	800d828 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d82a:	f001 fead 	bl	800f588 <vPortValidateInterruptPriority>
	__asm volatile
 800d82e:	f3ef 8211 	mrs	r2, BASEPRI
 800d832:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d836:	f383 8811 	msr	BASEPRI, r3
 800d83a:	f3bf 8f6f 	isb	sy
 800d83e:	f3bf 8f4f 	dsb	sy
 800d842:	617a      	str	r2, [r7, #20]
 800d844:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d846:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d848:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d84a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d84e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d854:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d856:	429a      	cmp	r2, r3
 800d858:	d22b      	bcs.n	800d8b2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d85a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d85c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d860:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d866:	1c5a      	adds	r2, r3, #1
 800d868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d86a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d86c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d870:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d874:	d112      	bne.n	800d89c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d016      	beq.n	800d8ac <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d880:	3324      	adds	r3, #36	; 0x24
 800d882:	4618      	mov	r0, r3
 800d884:	f001 f892 	bl	800e9ac <xTaskRemoveFromEventList>
 800d888:	4603      	mov	r3, r0
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d00e      	beq.n	800d8ac <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d00b      	beq.n	800d8ac <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d894:	683b      	ldr	r3, [r7, #0]
 800d896:	2201      	movs	r2, #1
 800d898:	601a      	str	r2, [r3, #0]
 800d89a:	e007      	b.n	800d8ac <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d89c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8a0:	3301      	adds	r3, #1
 800d8a2:	b2db      	uxtb	r3, r3
 800d8a4:	b25a      	sxtb	r2, r3
 800d8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d8ac:	2301      	movs	r3, #1
 800d8ae:	637b      	str	r3, [r7, #52]	; 0x34
 800d8b0:	e001      	b.n	800d8b6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	637b      	str	r3, [r7, #52]	; 0x34
 800d8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	f383 8811 	msr	BASEPRI, r3
}
 800d8c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d8c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	3738      	adds	r7, #56	; 0x38
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}

0800d8cc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b08c      	sub	sp, #48	; 0x30
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	60f8      	str	r0, [r7, #12]
 800d8d4:	60b9      	str	r1, [r7, #8]
 800d8d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d8d8:	2300      	movs	r3, #0
 800d8da:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d10a      	bne.n	800d8fc <xQueueReceive+0x30>
	__asm volatile
 800d8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8ea:	f383 8811 	msr	BASEPRI, r3
 800d8ee:	f3bf 8f6f 	isb	sy
 800d8f2:	f3bf 8f4f 	dsb	sy
 800d8f6:	623b      	str	r3, [r7, #32]
}
 800d8f8:	bf00      	nop
 800d8fa:	e7fe      	b.n	800d8fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d8fc:	68bb      	ldr	r3, [r7, #8]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d103      	bne.n	800d90a <xQueueReceive+0x3e>
 800d902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d906:	2b00      	cmp	r3, #0
 800d908:	d101      	bne.n	800d90e <xQueueReceive+0x42>
 800d90a:	2301      	movs	r3, #1
 800d90c:	e000      	b.n	800d910 <xQueueReceive+0x44>
 800d90e:	2300      	movs	r3, #0
 800d910:	2b00      	cmp	r3, #0
 800d912:	d10a      	bne.n	800d92a <xQueueReceive+0x5e>
	__asm volatile
 800d914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d918:	f383 8811 	msr	BASEPRI, r3
 800d91c:	f3bf 8f6f 	isb	sy
 800d920:	f3bf 8f4f 	dsb	sy
 800d924:	61fb      	str	r3, [r7, #28]
}
 800d926:	bf00      	nop
 800d928:	e7fe      	b.n	800d928 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d92a:	f001 f9ff 	bl	800ed2c <xTaskGetSchedulerState>
 800d92e:	4603      	mov	r3, r0
 800d930:	2b00      	cmp	r3, #0
 800d932:	d102      	bne.n	800d93a <xQueueReceive+0x6e>
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d101      	bne.n	800d93e <xQueueReceive+0x72>
 800d93a:	2301      	movs	r3, #1
 800d93c:	e000      	b.n	800d940 <xQueueReceive+0x74>
 800d93e:	2300      	movs	r3, #0
 800d940:	2b00      	cmp	r3, #0
 800d942:	d10a      	bne.n	800d95a <xQueueReceive+0x8e>
	__asm volatile
 800d944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d948:	f383 8811 	msr	BASEPRI, r3
 800d94c:	f3bf 8f6f 	isb	sy
 800d950:	f3bf 8f4f 	dsb	sy
 800d954:	61bb      	str	r3, [r7, #24]
}
 800d956:	bf00      	nop
 800d958:	e7fe      	b.n	800d958 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d95a:	f001 fd33 	bl	800f3c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d95e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d962:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d966:	2b00      	cmp	r3, #0
 800d968:	d01f      	beq.n	800d9aa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d96a:	68b9      	ldr	r1, [r7, #8]
 800d96c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d96e:	f000 fafa 	bl	800df66 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d974:	1e5a      	subs	r2, r3, #1
 800d976:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d978:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d97c:	691b      	ldr	r3, [r3, #16]
 800d97e:	2b00      	cmp	r3, #0
 800d980:	d00f      	beq.n	800d9a2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d984:	3310      	adds	r3, #16
 800d986:	4618      	mov	r0, r3
 800d988:	f001 f810 	bl	800e9ac <xTaskRemoveFromEventList>
 800d98c:	4603      	mov	r3, r0
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d007      	beq.n	800d9a2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d992:	4b3d      	ldr	r3, [pc, #244]	; (800da88 <xQueueReceive+0x1bc>)
 800d994:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d998:	601a      	str	r2, [r3, #0]
 800d99a:	f3bf 8f4f 	dsb	sy
 800d99e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d9a2:	f001 fd3f 	bl	800f424 <vPortExitCritical>
				return pdPASS;
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	e069      	b.n	800da7e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d103      	bne.n	800d9b8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d9b0:	f001 fd38 	bl	800f424 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	e062      	b.n	800da7e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d106      	bne.n	800d9cc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d9be:	f107 0310 	add.w	r3, r7, #16
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f001 f854 	bl	800ea70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d9c8:	2301      	movs	r3, #1
 800d9ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d9cc:	f001 fd2a 	bl	800f424 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d9d0:	f000 fde2 	bl	800e598 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d9d4:	f001 fcf6 	bl	800f3c4 <vPortEnterCritical>
 800d9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d9de:	b25b      	sxtb	r3, r3
 800d9e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9e4:	d103      	bne.n	800d9ee <xQueueReceive+0x122>
 800d9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d9ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d9f4:	b25b      	sxtb	r3, r3
 800d9f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9fa:	d103      	bne.n	800da04 <xQueueReceive+0x138>
 800d9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9fe:	2200      	movs	r2, #0
 800da00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800da04:	f001 fd0e 	bl	800f424 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800da08:	1d3a      	adds	r2, r7, #4
 800da0a:	f107 0310 	add.w	r3, r7, #16
 800da0e:	4611      	mov	r1, r2
 800da10:	4618      	mov	r0, r3
 800da12:	f001 f843 	bl	800ea9c <xTaskCheckForTimeOut>
 800da16:	4603      	mov	r3, r0
 800da18:	2b00      	cmp	r3, #0
 800da1a:	d123      	bne.n	800da64 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da1e:	f000 fb1a 	bl	800e056 <prvIsQueueEmpty>
 800da22:	4603      	mov	r3, r0
 800da24:	2b00      	cmp	r3, #0
 800da26:	d017      	beq.n	800da58 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800da28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da2a:	3324      	adds	r3, #36	; 0x24
 800da2c:	687a      	ldr	r2, [r7, #4]
 800da2e:	4611      	mov	r1, r2
 800da30:	4618      	mov	r0, r3
 800da32:	f000 ff97 	bl	800e964 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800da36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da38:	f000 fabb 	bl	800dfb2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800da3c:	f000 fdba 	bl	800e5b4 <xTaskResumeAll>
 800da40:	4603      	mov	r3, r0
 800da42:	2b00      	cmp	r3, #0
 800da44:	d189      	bne.n	800d95a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800da46:	4b10      	ldr	r3, [pc, #64]	; (800da88 <xQueueReceive+0x1bc>)
 800da48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da4c:	601a      	str	r2, [r3, #0]
 800da4e:	f3bf 8f4f 	dsb	sy
 800da52:	f3bf 8f6f 	isb	sy
 800da56:	e780      	b.n	800d95a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800da58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da5a:	f000 faaa 	bl	800dfb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800da5e:	f000 fda9 	bl	800e5b4 <xTaskResumeAll>
 800da62:	e77a      	b.n	800d95a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800da64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da66:	f000 faa4 	bl	800dfb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800da6a:	f000 fda3 	bl	800e5b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800da70:	f000 faf1 	bl	800e056 <prvIsQueueEmpty>
 800da74:	4603      	mov	r3, r0
 800da76:	2b00      	cmp	r3, #0
 800da78:	f43f af6f 	beq.w	800d95a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800da7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800da7e:	4618      	mov	r0, r3
 800da80:	3730      	adds	r7, #48	; 0x30
 800da82:	46bd      	mov	sp, r7
 800da84:	bd80      	pop	{r7, pc}
 800da86:	bf00      	nop
 800da88:	e000ed04 	.word	0xe000ed04

0800da8c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b08e      	sub	sp, #56	; 0x38
 800da90:	af00      	add	r7, sp, #0
 800da92:	6078      	str	r0, [r7, #4]
 800da94:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800da96:	2300      	movs	r3, #0
 800da98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800da9e:	2300      	movs	r3, #0
 800daa0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800daa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d10a      	bne.n	800dabe <xQueueSemaphoreTake+0x32>
	__asm volatile
 800daa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daac:	f383 8811 	msr	BASEPRI, r3
 800dab0:	f3bf 8f6f 	isb	sy
 800dab4:	f3bf 8f4f 	dsb	sy
 800dab8:	623b      	str	r3, [r7, #32]
}
 800daba:	bf00      	nop
 800dabc:	e7fe      	b.n	800dabc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800dabe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d00a      	beq.n	800dadc <xQueueSemaphoreTake+0x50>
	__asm volatile
 800dac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daca:	f383 8811 	msr	BASEPRI, r3
 800dace:	f3bf 8f6f 	isb	sy
 800dad2:	f3bf 8f4f 	dsb	sy
 800dad6:	61fb      	str	r3, [r7, #28]
}
 800dad8:	bf00      	nop
 800dada:	e7fe      	b.n	800dada <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800dadc:	f001 f926 	bl	800ed2c <xTaskGetSchedulerState>
 800dae0:	4603      	mov	r3, r0
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d102      	bne.n	800daec <xQueueSemaphoreTake+0x60>
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d101      	bne.n	800daf0 <xQueueSemaphoreTake+0x64>
 800daec:	2301      	movs	r3, #1
 800daee:	e000      	b.n	800daf2 <xQueueSemaphoreTake+0x66>
 800daf0:	2300      	movs	r3, #0
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d10a      	bne.n	800db0c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800daf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dafa:	f383 8811 	msr	BASEPRI, r3
 800dafe:	f3bf 8f6f 	isb	sy
 800db02:	f3bf 8f4f 	dsb	sy
 800db06:	61bb      	str	r3, [r7, #24]
}
 800db08:	bf00      	nop
 800db0a:	e7fe      	b.n	800db0a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800db0c:	f001 fc5a 	bl	800f3c4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800db10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db14:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800db16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d024      	beq.n	800db66 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800db1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db1e:	1e5a      	subs	r2, r3, #1
 800db20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db22:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800db24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d104      	bne.n	800db36 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800db2c:	f001 faa6 	bl	800f07c <pvTaskIncrementMutexHeldCount>
 800db30:	4602      	mov	r2, r0
 800db32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db34:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800db36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db38:	691b      	ldr	r3, [r3, #16]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d00f      	beq.n	800db5e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800db3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db40:	3310      	adds	r3, #16
 800db42:	4618      	mov	r0, r3
 800db44:	f000 ff32 	bl	800e9ac <xTaskRemoveFromEventList>
 800db48:	4603      	mov	r3, r0
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d007      	beq.n	800db5e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800db4e:	4b54      	ldr	r3, [pc, #336]	; (800dca0 <xQueueSemaphoreTake+0x214>)
 800db50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db54:	601a      	str	r2, [r3, #0]
 800db56:	f3bf 8f4f 	dsb	sy
 800db5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800db5e:	f001 fc61 	bl	800f424 <vPortExitCritical>
				return pdPASS;
 800db62:	2301      	movs	r3, #1
 800db64:	e097      	b.n	800dc96 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800db66:	683b      	ldr	r3, [r7, #0]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d111      	bne.n	800db90 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800db6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db6e:	2b00      	cmp	r3, #0
 800db70:	d00a      	beq.n	800db88 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800db72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db76:	f383 8811 	msr	BASEPRI, r3
 800db7a:	f3bf 8f6f 	isb	sy
 800db7e:	f3bf 8f4f 	dsb	sy
 800db82:	617b      	str	r3, [r7, #20]
}
 800db84:	bf00      	nop
 800db86:	e7fe      	b.n	800db86 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800db88:	f001 fc4c 	bl	800f424 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800db8c:	2300      	movs	r3, #0
 800db8e:	e082      	b.n	800dc96 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800db90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db92:	2b00      	cmp	r3, #0
 800db94:	d106      	bne.n	800dba4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800db96:	f107 030c 	add.w	r3, r7, #12
 800db9a:	4618      	mov	r0, r3
 800db9c:	f000 ff68 	bl	800ea70 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800dba0:	2301      	movs	r3, #1
 800dba2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800dba4:	f001 fc3e 	bl	800f424 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800dba8:	f000 fcf6 	bl	800e598 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800dbac:	f001 fc0a 	bl	800f3c4 <vPortEnterCritical>
 800dbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dbb6:	b25b      	sxtb	r3, r3
 800dbb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbbc:	d103      	bne.n	800dbc6 <xQueueSemaphoreTake+0x13a>
 800dbbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbc0:	2200      	movs	r2, #0
 800dbc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dbc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dbcc:	b25b      	sxtb	r3, r3
 800dbce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbd2:	d103      	bne.n	800dbdc <xQueueSemaphoreTake+0x150>
 800dbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dbdc:	f001 fc22 	bl	800f424 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800dbe0:	463a      	mov	r2, r7
 800dbe2:	f107 030c 	add.w	r3, r7, #12
 800dbe6:	4611      	mov	r1, r2
 800dbe8:	4618      	mov	r0, r3
 800dbea:	f000 ff57 	bl	800ea9c <xTaskCheckForTimeOut>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d132      	bne.n	800dc5a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dbf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dbf6:	f000 fa2e 	bl	800e056 <prvIsQueueEmpty>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d026      	beq.n	800dc4e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dc00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d109      	bne.n	800dc1c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800dc08:	f001 fbdc 	bl	800f3c4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dc0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc0e:	689b      	ldr	r3, [r3, #8]
 800dc10:	4618      	mov	r0, r3
 800dc12:	f001 f8a9 	bl	800ed68 <xTaskPriorityInherit>
 800dc16:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800dc18:	f001 fc04 	bl	800f424 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800dc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc1e:	3324      	adds	r3, #36	; 0x24
 800dc20:	683a      	ldr	r2, [r7, #0]
 800dc22:	4611      	mov	r1, r2
 800dc24:	4618      	mov	r0, r3
 800dc26:	f000 fe9d 	bl	800e964 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dc2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc2c:	f000 f9c1 	bl	800dfb2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dc30:	f000 fcc0 	bl	800e5b4 <xTaskResumeAll>
 800dc34:	4603      	mov	r3, r0
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	f47f af68 	bne.w	800db0c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800dc3c:	4b18      	ldr	r3, [pc, #96]	; (800dca0 <xQueueSemaphoreTake+0x214>)
 800dc3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc42:	601a      	str	r2, [r3, #0]
 800dc44:	f3bf 8f4f 	dsb	sy
 800dc48:	f3bf 8f6f 	isb	sy
 800dc4c:	e75e      	b.n	800db0c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800dc4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc50:	f000 f9af 	bl	800dfb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dc54:	f000 fcae 	bl	800e5b4 <xTaskResumeAll>
 800dc58:	e758      	b.n	800db0c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800dc5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc5c:	f000 f9a9 	bl	800dfb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800dc60:	f000 fca8 	bl	800e5b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800dc64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc66:	f000 f9f6 	bl	800e056 <prvIsQueueEmpty>
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	f43f af4d 	beq.w	800db0c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800dc72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d00d      	beq.n	800dc94 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800dc78:	f001 fba4 	bl	800f3c4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800dc7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dc7e:	f000 f8f0 	bl	800de62 <prvGetDisinheritPriorityAfterTimeout>
 800dc82:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800dc84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc86:	689b      	ldr	r3, [r3, #8]
 800dc88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	f001 f968 	bl	800ef60 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800dc90:	f001 fbc8 	bl	800f424 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800dc94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	3738      	adds	r7, #56	; 0x38
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}
 800dc9e:	bf00      	nop
 800dca0:	e000ed04 	.word	0xe000ed04

0800dca4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800dca4:	b580      	push	{r7, lr}
 800dca6:	b08e      	sub	sp, #56	; 0x38
 800dca8:	af00      	add	r7, sp, #0
 800dcaa:	60f8      	str	r0, [r7, #12]
 800dcac:	60b9      	str	r1, [r7, #8]
 800dcae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800dcb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d10a      	bne.n	800dcd0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800dcba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcbe:	f383 8811 	msr	BASEPRI, r3
 800dcc2:	f3bf 8f6f 	isb	sy
 800dcc6:	f3bf 8f4f 	dsb	sy
 800dcca:	623b      	str	r3, [r7, #32]
}
 800dccc:	bf00      	nop
 800dcce:	e7fe      	b.n	800dcce <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	2b00      	cmp	r3, #0
 800dcd4:	d103      	bne.n	800dcde <xQueueReceiveFromISR+0x3a>
 800dcd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d101      	bne.n	800dce2 <xQueueReceiveFromISR+0x3e>
 800dcde:	2301      	movs	r3, #1
 800dce0:	e000      	b.n	800dce4 <xQueueReceiveFromISR+0x40>
 800dce2:	2300      	movs	r3, #0
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d10a      	bne.n	800dcfe <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800dce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcec:	f383 8811 	msr	BASEPRI, r3
 800dcf0:	f3bf 8f6f 	isb	sy
 800dcf4:	f3bf 8f4f 	dsb	sy
 800dcf8:	61fb      	str	r3, [r7, #28]
}
 800dcfa:	bf00      	nop
 800dcfc:	e7fe      	b.n	800dcfc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800dcfe:	f001 fc43 	bl	800f588 <vPortValidateInterruptPriority>
	__asm volatile
 800dd02:	f3ef 8211 	mrs	r2, BASEPRI
 800dd06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd0a:	f383 8811 	msr	BASEPRI, r3
 800dd0e:	f3bf 8f6f 	isb	sy
 800dd12:	f3bf 8f4f 	dsb	sy
 800dd16:	61ba      	str	r2, [r7, #24]
 800dd18:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800dd1a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800dd1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd22:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d02f      	beq.n	800dd8a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800dd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dd34:	68b9      	ldr	r1, [r7, #8]
 800dd36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800dd38:	f000 f915 	bl	800df66 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd3e:	1e5a      	subs	r2, r3, #1
 800dd40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd42:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800dd44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800dd48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd4c:	d112      	bne.n	800dd74 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dd4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd50:	691b      	ldr	r3, [r3, #16]
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	d016      	beq.n	800dd84 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd58:	3310      	adds	r3, #16
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f000 fe26 	bl	800e9ac <xTaskRemoveFromEventList>
 800dd60:	4603      	mov	r3, r0
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d00e      	beq.n	800dd84 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d00b      	beq.n	800dd84 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	2201      	movs	r2, #1
 800dd70:	601a      	str	r2, [r3, #0]
 800dd72:	e007      	b.n	800dd84 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800dd74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dd78:	3301      	adds	r3, #1
 800dd7a:	b2db      	uxtb	r3, r3
 800dd7c:	b25a      	sxtb	r2, r3
 800dd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800dd84:	2301      	movs	r3, #1
 800dd86:	637b      	str	r3, [r7, #52]	; 0x34
 800dd88:	e001      	b.n	800dd8e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	637b      	str	r3, [r7, #52]	; 0x34
 800dd8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd90:	613b      	str	r3, [r7, #16]
	__asm volatile
 800dd92:	693b      	ldr	r3, [r7, #16]
 800dd94:	f383 8811 	msr	BASEPRI, r3
}
 800dd98:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800dd9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800dd9c:	4618      	mov	r0, r3
 800dd9e:	3738      	adds	r7, #56	; 0x38
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}

0800dda4 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b084      	sub	sp, #16
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d10a      	bne.n	800ddc8 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800ddb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb6:	f383 8811 	msr	BASEPRI, r3
 800ddba:	f3bf 8f6f 	isb	sy
 800ddbe:	f3bf 8f4f 	dsb	sy
 800ddc2:	60bb      	str	r3, [r7, #8]
}
 800ddc4:	bf00      	nop
 800ddc6:	e7fe      	b.n	800ddc6 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800ddc8:	f001 fafc 	bl	800f3c4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddd0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800ddd2:	f001 fb27 	bl	800f424 <vPortExitCritical>

	return uxReturn;
 800ddd6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800ddd8:	4618      	mov	r0, r3
 800ddda:	3710      	adds	r7, #16
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}

0800dde0 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800dde0:	b480      	push	{r7}
 800dde2:	b087      	sub	sp, #28
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800ddec:	697b      	ldr	r3, [r7, #20]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d10a      	bne.n	800de08 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800ddf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddf6:	f383 8811 	msr	BASEPRI, r3
 800ddfa:	f3bf 8f6f 	isb	sy
 800ddfe:	f3bf 8f4f 	dsb	sy
 800de02:	60fb      	str	r3, [r7, #12]
}
 800de04:	bf00      	nop
 800de06:	e7fe      	b.n	800de06 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800de08:	697b      	ldr	r3, [r7, #20]
 800de0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de0c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800de0e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800de10:	4618      	mov	r0, r3
 800de12:	371c      	adds	r7, #28
 800de14:	46bd      	mov	sp, r7
 800de16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1a:	4770      	bx	lr

0800de1c <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b084      	sub	sp, #16
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d10a      	bne.n	800de44 <vQueueDelete+0x28>
	__asm volatile
 800de2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de32:	f383 8811 	msr	BASEPRI, r3
 800de36:	f3bf 8f6f 	isb	sy
 800de3a:	f3bf 8f4f 	dsb	sy
 800de3e:	60bb      	str	r3, [r7, #8]
}
 800de40:	bf00      	nop
 800de42:	e7fe      	b.n	800de42 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800de44:	68f8      	ldr	r0, [r7, #12]
 800de46:	f000 f935 	bl	800e0b4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800de50:	2b00      	cmp	r3, #0
 800de52:	d102      	bne.n	800de5a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800de54:	68f8      	ldr	r0, [r7, #12]
 800de56:	f001 fca3 	bl	800f7a0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800de5a:	bf00      	nop
 800de5c:	3710      	adds	r7, #16
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}

0800de62 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800de62:	b480      	push	{r7}
 800de64:	b085      	sub	sp, #20
 800de66:	af00      	add	r7, sp, #0
 800de68:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d006      	beq.n	800de80 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	f1c3 0307 	rsb	r3, r3, #7
 800de7c:	60fb      	str	r3, [r7, #12]
 800de7e:	e001      	b.n	800de84 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800de80:	2300      	movs	r3, #0
 800de82:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800de84:	68fb      	ldr	r3, [r7, #12]
	}
 800de86:	4618      	mov	r0, r3
 800de88:	3714      	adds	r7, #20
 800de8a:	46bd      	mov	sp, r7
 800de8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de90:	4770      	bx	lr

0800de92 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800de92:	b580      	push	{r7, lr}
 800de94:	b086      	sub	sp, #24
 800de96:	af00      	add	r7, sp, #0
 800de98:	60f8      	str	r0, [r7, #12]
 800de9a:	60b9      	str	r1, [r7, #8]
 800de9c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800de9e:	2300      	movs	r3, #0
 800dea0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dea6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deac:	2b00      	cmp	r3, #0
 800deae:	d10d      	bne.n	800decc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d14d      	bne.n	800df54 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	689b      	ldr	r3, [r3, #8]
 800debc:	4618      	mov	r0, r3
 800debe:	f000 ffc9 	bl	800ee54 <xTaskPriorityDisinherit>
 800dec2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	2200      	movs	r2, #0
 800dec8:	609a      	str	r2, [r3, #8]
 800deca:	e043      	b.n	800df54 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	d119      	bne.n	800df06 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	6858      	ldr	r0, [r3, #4]
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deda:	461a      	mov	r2, r3
 800dedc:	68b9      	ldr	r1, [r7, #8]
 800dede:	f00e ffd9 	bl	801ce94 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	685a      	ldr	r2, [r3, #4]
 800dee6:	68fb      	ldr	r3, [r7, #12]
 800dee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800deea:	441a      	add	r2, r3
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	685a      	ldr	r2, [r3, #4]
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	689b      	ldr	r3, [r3, #8]
 800def8:	429a      	cmp	r2, r3
 800defa:	d32b      	bcc.n	800df54 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	681a      	ldr	r2, [r3, #0]
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	605a      	str	r2, [r3, #4]
 800df04:	e026      	b.n	800df54 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	68d8      	ldr	r0, [r3, #12]
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df0e:	461a      	mov	r2, r3
 800df10:	68b9      	ldr	r1, [r7, #8]
 800df12:	f00e ffbf 	bl	801ce94 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	68da      	ldr	r2, [r3, #12]
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df1e:	425b      	negs	r3, r3
 800df20:	441a      	add	r2, r3
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	68da      	ldr	r2, [r3, #12]
 800df2a:	68fb      	ldr	r3, [r7, #12]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	429a      	cmp	r2, r3
 800df30:	d207      	bcs.n	800df42 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	689a      	ldr	r2, [r3, #8]
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df3a:	425b      	negs	r3, r3
 800df3c:	441a      	add	r2, r3
 800df3e:	68fb      	ldr	r3, [r7, #12]
 800df40:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	2b02      	cmp	r3, #2
 800df46:	d105      	bne.n	800df54 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800df48:	693b      	ldr	r3, [r7, #16]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d002      	beq.n	800df54 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800df4e:	693b      	ldr	r3, [r7, #16]
 800df50:	3b01      	subs	r3, #1
 800df52:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800df54:	693b      	ldr	r3, [r7, #16]
 800df56:	1c5a      	adds	r2, r3, #1
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800df5c:	697b      	ldr	r3, [r7, #20]
}
 800df5e:	4618      	mov	r0, r3
 800df60:	3718      	adds	r7, #24
 800df62:	46bd      	mov	sp, r7
 800df64:	bd80      	pop	{r7, pc}

0800df66 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800df66:	b580      	push	{r7, lr}
 800df68:	b082      	sub	sp, #8
 800df6a:	af00      	add	r7, sp, #0
 800df6c:	6078      	str	r0, [r7, #4]
 800df6e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df74:	2b00      	cmp	r3, #0
 800df76:	d018      	beq.n	800dfaa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	68da      	ldr	r2, [r3, #12]
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800df80:	441a      	add	r2, r3
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	68da      	ldr	r2, [r3, #12]
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	689b      	ldr	r3, [r3, #8]
 800df8e:	429a      	cmp	r2, r3
 800df90:	d303      	bcc.n	800df9a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681a      	ldr	r2, [r3, #0]
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	68d9      	ldr	r1, [r3, #12]
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dfa2:	461a      	mov	r2, r3
 800dfa4:	6838      	ldr	r0, [r7, #0]
 800dfa6:	f00e ff75 	bl	801ce94 <memcpy>
	}
}
 800dfaa:	bf00      	nop
 800dfac:	3708      	adds	r7, #8
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	bd80      	pop	{r7, pc}

0800dfb2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dfb2:	b580      	push	{r7, lr}
 800dfb4:	b084      	sub	sp, #16
 800dfb6:	af00      	add	r7, sp, #0
 800dfb8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dfba:	f001 fa03 	bl	800f3c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dfc4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dfc6:	e011      	b.n	800dfec <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d012      	beq.n	800dff6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	3324      	adds	r3, #36	; 0x24
 800dfd4:	4618      	mov	r0, r3
 800dfd6:	f000 fce9 	bl	800e9ac <xTaskRemoveFromEventList>
 800dfda:	4603      	mov	r3, r0
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d001      	beq.n	800dfe4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dfe0:	f000 fdbe 	bl	800eb60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dfe4:	7bfb      	ldrb	r3, [r7, #15]
 800dfe6:	3b01      	subs	r3, #1
 800dfe8:	b2db      	uxtb	r3, r3
 800dfea:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dfec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	dce9      	bgt.n	800dfc8 <prvUnlockQueue+0x16>
 800dff4:	e000      	b.n	800dff8 <prvUnlockQueue+0x46>
					break;
 800dff6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	22ff      	movs	r2, #255	; 0xff
 800dffc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800e000:	f001 fa10 	bl	800f424 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800e004:	f001 f9de 	bl	800f3c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e00e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e010:	e011      	b.n	800e036 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	691b      	ldr	r3, [r3, #16]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d012      	beq.n	800e040 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	3310      	adds	r3, #16
 800e01e:	4618      	mov	r0, r3
 800e020:	f000 fcc4 	bl	800e9ac <xTaskRemoveFromEventList>
 800e024:	4603      	mov	r3, r0
 800e026:	2b00      	cmp	r3, #0
 800e028:	d001      	beq.n	800e02e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800e02a:	f000 fd99 	bl	800eb60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800e02e:	7bbb      	ldrb	r3, [r7, #14]
 800e030:	3b01      	subs	r3, #1
 800e032:	b2db      	uxtb	r3, r3
 800e034:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e036:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	dce9      	bgt.n	800e012 <prvUnlockQueue+0x60>
 800e03e:	e000      	b.n	800e042 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800e040:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	22ff      	movs	r2, #255	; 0xff
 800e046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800e04a:	f001 f9eb 	bl	800f424 <vPortExitCritical>
}
 800e04e:	bf00      	nop
 800e050:	3710      	adds	r7, #16
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}

0800e056 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e056:	b580      	push	{r7, lr}
 800e058:	b084      	sub	sp, #16
 800e05a:	af00      	add	r7, sp, #0
 800e05c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e05e:	f001 f9b1 	bl	800f3c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e066:	2b00      	cmp	r3, #0
 800e068:	d102      	bne.n	800e070 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800e06a:	2301      	movs	r3, #1
 800e06c:	60fb      	str	r3, [r7, #12]
 800e06e:	e001      	b.n	800e074 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800e070:	2300      	movs	r3, #0
 800e072:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e074:	f001 f9d6 	bl	800f424 <vPortExitCritical>

	return xReturn;
 800e078:	68fb      	ldr	r3, [r7, #12]
}
 800e07a:	4618      	mov	r0, r3
 800e07c:	3710      	adds	r7, #16
 800e07e:	46bd      	mov	sp, r7
 800e080:	bd80      	pop	{r7, pc}

0800e082 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800e082:	b580      	push	{r7, lr}
 800e084:	b084      	sub	sp, #16
 800e086:	af00      	add	r7, sp, #0
 800e088:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e08a:	f001 f99b 	bl	800f3c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e096:	429a      	cmp	r2, r3
 800e098:	d102      	bne.n	800e0a0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800e09a:	2301      	movs	r3, #1
 800e09c:	60fb      	str	r3, [r7, #12]
 800e09e:	e001      	b.n	800e0a4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800e0a0:	2300      	movs	r3, #0
 800e0a2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800e0a4:	f001 f9be 	bl	800f424 <vPortExitCritical>

	return xReturn;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3710      	adds	r7, #16
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}
	...

0800e0b4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800e0b4:	b480      	push	{r7}
 800e0b6:	b085      	sub	sp, #20
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e0bc:	2300      	movs	r3, #0
 800e0be:	60fb      	str	r3, [r7, #12]
 800e0c0:	e016      	b.n	800e0f0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800e0c2:	4a10      	ldr	r2, [pc, #64]	; (800e104 <vQueueUnregisterQueue+0x50>)
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	00db      	lsls	r3, r3, #3
 800e0c8:	4413      	add	r3, r2
 800e0ca:	685b      	ldr	r3, [r3, #4]
 800e0cc:	687a      	ldr	r2, [r7, #4]
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	d10b      	bne.n	800e0ea <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800e0d2:	4a0c      	ldr	r2, [pc, #48]	; (800e104 <vQueueUnregisterQueue+0x50>)
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	2100      	movs	r1, #0
 800e0d8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800e0dc:	4a09      	ldr	r2, [pc, #36]	; (800e104 <vQueueUnregisterQueue+0x50>)
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	00db      	lsls	r3, r3, #3
 800e0e2:	4413      	add	r3, r2
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	605a      	str	r2, [r3, #4]
				break;
 800e0e8:	e006      	b.n	800e0f8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	3301      	adds	r3, #1
 800e0ee:	60fb      	str	r3, [r7, #12]
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	2b07      	cmp	r3, #7
 800e0f4:	d9e5      	bls.n	800e0c2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800e0f6:	bf00      	nop
 800e0f8:	bf00      	nop
 800e0fa:	3714      	adds	r7, #20
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e102:	4770      	bx	lr
 800e104:	200041b4 	.word	0x200041b4

0800e108 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b08e      	sub	sp, #56	; 0x38
 800e10c:	af04      	add	r7, sp, #16
 800e10e:	60f8      	str	r0, [r7, #12]
 800e110:	60b9      	str	r1, [r7, #8]
 800e112:	607a      	str	r2, [r7, #4]
 800e114:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800e116:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d10a      	bne.n	800e132 <xTaskCreateStatic+0x2a>
	__asm volatile
 800e11c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e120:	f383 8811 	msr	BASEPRI, r3
 800e124:	f3bf 8f6f 	isb	sy
 800e128:	f3bf 8f4f 	dsb	sy
 800e12c:	623b      	str	r3, [r7, #32]
}
 800e12e:	bf00      	nop
 800e130:	e7fe      	b.n	800e130 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800e132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e134:	2b00      	cmp	r3, #0
 800e136:	d10a      	bne.n	800e14e <xTaskCreateStatic+0x46>
	__asm volatile
 800e138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e13c:	f383 8811 	msr	BASEPRI, r3
 800e140:	f3bf 8f6f 	isb	sy
 800e144:	f3bf 8f4f 	dsb	sy
 800e148:	61fb      	str	r3, [r7, #28]
}
 800e14a:	bf00      	nop
 800e14c:	e7fe      	b.n	800e14c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800e14e:	23b4      	movs	r3, #180	; 0xb4
 800e150:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800e152:	693b      	ldr	r3, [r7, #16]
 800e154:	2bb4      	cmp	r3, #180	; 0xb4
 800e156:	d00a      	beq.n	800e16e <xTaskCreateStatic+0x66>
	__asm volatile
 800e158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e15c:	f383 8811 	msr	BASEPRI, r3
 800e160:	f3bf 8f6f 	isb	sy
 800e164:	f3bf 8f4f 	dsb	sy
 800e168:	61bb      	str	r3, [r7, #24]
}
 800e16a:	bf00      	nop
 800e16c:	e7fe      	b.n	800e16c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800e16e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800e170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e172:	2b00      	cmp	r3, #0
 800e174:	d01e      	beq.n	800e1b4 <xTaskCreateStatic+0xac>
 800e176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d01b      	beq.n	800e1b4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e17c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e17e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e182:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e184:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e188:	2202      	movs	r2, #2
 800e18a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e18e:	2300      	movs	r3, #0
 800e190:	9303      	str	r3, [sp, #12]
 800e192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e194:	9302      	str	r3, [sp, #8]
 800e196:	f107 0314 	add.w	r3, r7, #20
 800e19a:	9301      	str	r3, [sp, #4]
 800e19c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e19e:	9300      	str	r3, [sp, #0]
 800e1a0:	683b      	ldr	r3, [r7, #0]
 800e1a2:	687a      	ldr	r2, [r7, #4]
 800e1a4:	68b9      	ldr	r1, [r7, #8]
 800e1a6:	68f8      	ldr	r0, [r7, #12]
 800e1a8:	f000 f850 	bl	800e24c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e1ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1ae:	f000 f8eb 	bl	800e388 <prvAddNewTaskToReadyList>
 800e1b2:	e001      	b.n	800e1b8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e1b4:	2300      	movs	r3, #0
 800e1b6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e1b8:	697b      	ldr	r3, [r7, #20]
	}
 800e1ba:	4618      	mov	r0, r3
 800e1bc:	3728      	adds	r7, #40	; 0x28
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	bd80      	pop	{r7, pc}

0800e1c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e1c2:	b580      	push	{r7, lr}
 800e1c4:	b08c      	sub	sp, #48	; 0x30
 800e1c6:	af04      	add	r7, sp, #16
 800e1c8:	60f8      	str	r0, [r7, #12]
 800e1ca:	60b9      	str	r1, [r7, #8]
 800e1cc:	603b      	str	r3, [r7, #0]
 800e1ce:	4613      	mov	r3, r2
 800e1d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e1d2:	88fb      	ldrh	r3, [r7, #6]
 800e1d4:	009b      	lsls	r3, r3, #2
 800e1d6:	4618      	mov	r0, r3
 800e1d8:	f001 fa16 	bl	800f608 <pvPortMalloc>
 800e1dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e1de:	697b      	ldr	r3, [r7, #20]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d00e      	beq.n	800e202 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e1e4:	20b4      	movs	r0, #180	; 0xb4
 800e1e6:	f001 fa0f 	bl	800f608 <pvPortMalloc>
 800e1ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e1ec:	69fb      	ldr	r3, [r7, #28]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d003      	beq.n	800e1fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e1f2:	69fb      	ldr	r3, [r7, #28]
 800e1f4:	697a      	ldr	r2, [r7, #20]
 800e1f6:	631a      	str	r2, [r3, #48]	; 0x30
 800e1f8:	e005      	b.n	800e206 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e1fa:	6978      	ldr	r0, [r7, #20]
 800e1fc:	f001 fad0 	bl	800f7a0 <vPortFree>
 800e200:	e001      	b.n	800e206 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e202:	2300      	movs	r3, #0
 800e204:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e206:	69fb      	ldr	r3, [r7, #28]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d017      	beq.n	800e23c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e20c:	69fb      	ldr	r3, [r7, #28]
 800e20e:	2200      	movs	r2, #0
 800e210:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e214:	88fa      	ldrh	r2, [r7, #6]
 800e216:	2300      	movs	r3, #0
 800e218:	9303      	str	r3, [sp, #12]
 800e21a:	69fb      	ldr	r3, [r7, #28]
 800e21c:	9302      	str	r3, [sp, #8]
 800e21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e220:	9301      	str	r3, [sp, #4]
 800e222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e224:	9300      	str	r3, [sp, #0]
 800e226:	683b      	ldr	r3, [r7, #0]
 800e228:	68b9      	ldr	r1, [r7, #8]
 800e22a:	68f8      	ldr	r0, [r7, #12]
 800e22c:	f000 f80e 	bl	800e24c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e230:	69f8      	ldr	r0, [r7, #28]
 800e232:	f000 f8a9 	bl	800e388 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e236:	2301      	movs	r3, #1
 800e238:	61bb      	str	r3, [r7, #24]
 800e23a:	e002      	b.n	800e242 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e23c:	f04f 33ff 	mov.w	r3, #4294967295
 800e240:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e242:	69bb      	ldr	r3, [r7, #24]
	}
 800e244:	4618      	mov	r0, r3
 800e246:	3720      	adds	r7, #32
 800e248:	46bd      	mov	sp, r7
 800e24a:	bd80      	pop	{r7, pc}

0800e24c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e24c:	b580      	push	{r7, lr}
 800e24e:	b088      	sub	sp, #32
 800e250:	af00      	add	r7, sp, #0
 800e252:	60f8      	str	r0, [r7, #12]
 800e254:	60b9      	str	r1, [r7, #8]
 800e256:	607a      	str	r2, [r7, #4]
 800e258:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e25c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e264:	3b01      	subs	r3, #1
 800e266:	009b      	lsls	r3, r3, #2
 800e268:	4413      	add	r3, r2
 800e26a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e26c:	69bb      	ldr	r3, [r7, #24]
 800e26e:	f023 0307 	bic.w	r3, r3, #7
 800e272:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e274:	69bb      	ldr	r3, [r7, #24]
 800e276:	f003 0307 	and.w	r3, r3, #7
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d00a      	beq.n	800e294 <prvInitialiseNewTask+0x48>
	__asm volatile
 800e27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e282:	f383 8811 	msr	BASEPRI, r3
 800e286:	f3bf 8f6f 	isb	sy
 800e28a:	f3bf 8f4f 	dsb	sy
 800e28e:	617b      	str	r3, [r7, #20]
}
 800e290:	bf00      	nop
 800e292:	e7fe      	b.n	800e292 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e294:	68bb      	ldr	r3, [r7, #8]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d01f      	beq.n	800e2da <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e29a:	2300      	movs	r3, #0
 800e29c:	61fb      	str	r3, [r7, #28]
 800e29e:	e012      	b.n	800e2c6 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e2a0:	68ba      	ldr	r2, [r7, #8]
 800e2a2:	69fb      	ldr	r3, [r7, #28]
 800e2a4:	4413      	add	r3, r2
 800e2a6:	7819      	ldrb	r1, [r3, #0]
 800e2a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e2aa:	69fb      	ldr	r3, [r7, #28]
 800e2ac:	4413      	add	r3, r2
 800e2ae:	3334      	adds	r3, #52	; 0x34
 800e2b0:	460a      	mov	r2, r1
 800e2b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e2b4:	68ba      	ldr	r2, [r7, #8]
 800e2b6:	69fb      	ldr	r3, [r7, #28]
 800e2b8:	4413      	add	r3, r2
 800e2ba:	781b      	ldrb	r3, [r3, #0]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	d006      	beq.n	800e2ce <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e2c0:	69fb      	ldr	r3, [r7, #28]
 800e2c2:	3301      	adds	r3, #1
 800e2c4:	61fb      	str	r3, [r7, #28]
 800e2c6:	69fb      	ldr	r3, [r7, #28]
 800e2c8:	2b0f      	cmp	r3, #15
 800e2ca:	d9e9      	bls.n	800e2a0 <prvInitialiseNewTask+0x54>
 800e2cc:	e000      	b.n	800e2d0 <prvInitialiseNewTask+0x84>
			{
				break;
 800e2ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e2d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e2d8:	e003      	b.n	800e2e2 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e2da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2dc:	2200      	movs	r2, #0
 800e2de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e2e4:	2b06      	cmp	r3, #6
 800e2e6:	d901      	bls.n	800e2ec <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e2e8:	2306      	movs	r3, #6
 800e2ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e2ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e2f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e2f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e2f6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e2fa:	2200      	movs	r2, #0
 800e2fc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e300:	3304      	adds	r3, #4
 800e302:	4618      	mov	r0, r3
 800e304:	f7fe fea2 	bl	800d04c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e30a:	3318      	adds	r3, #24
 800e30c:	4618      	mov	r0, r3
 800e30e:	f7fe fe9d 	bl	800d04c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e314:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e316:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e31a:	f1c3 0207 	rsb	r2, r3, #7
 800e31e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e320:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e326:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e328:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e32a:	2200      	movs	r2, #0
 800e32c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e330:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e332:	2200      	movs	r2, #0
 800e334:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e33a:	334c      	adds	r3, #76	; 0x4c
 800e33c:	2260      	movs	r2, #96	; 0x60
 800e33e:	2100      	movs	r1, #0
 800e340:	4618      	mov	r0, r3
 800e342:	f00e fdcf 	bl	801cee4 <memset>
 800e346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e348:	4a0c      	ldr	r2, [pc, #48]	; (800e37c <prvInitialiseNewTask+0x130>)
 800e34a:	651a      	str	r2, [r3, #80]	; 0x50
 800e34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e34e:	4a0c      	ldr	r2, [pc, #48]	; (800e380 <prvInitialiseNewTask+0x134>)
 800e350:	655a      	str	r2, [r3, #84]	; 0x54
 800e352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e354:	4a0b      	ldr	r2, [pc, #44]	; (800e384 <prvInitialiseNewTask+0x138>)
 800e356:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e358:	683a      	ldr	r2, [r7, #0]
 800e35a:	68f9      	ldr	r1, [r7, #12]
 800e35c:	69b8      	ldr	r0, [r7, #24]
 800e35e:	f000 ff07 	bl	800f170 <pxPortInitialiseStack>
 800e362:	4602      	mov	r2, r0
 800e364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e366:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d002      	beq.n	800e374 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e36e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e372:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e374:	bf00      	nop
 800e376:	3720      	adds	r7, #32
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}
 800e37c:	08021d38 	.word	0x08021d38
 800e380:	08021d58 	.word	0x08021d58
 800e384:	08021d18 	.word	0x08021d18

0800e388 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e388:	b580      	push	{r7, lr}
 800e38a:	b082      	sub	sp, #8
 800e38c:	af00      	add	r7, sp, #0
 800e38e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e390:	f001 f818 	bl	800f3c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e394:	4b2a      	ldr	r3, [pc, #168]	; (800e440 <prvAddNewTaskToReadyList+0xb8>)
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	3301      	adds	r3, #1
 800e39a:	4a29      	ldr	r2, [pc, #164]	; (800e440 <prvAddNewTaskToReadyList+0xb8>)
 800e39c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e39e:	4b29      	ldr	r3, [pc, #164]	; (800e444 <prvAddNewTaskToReadyList+0xbc>)
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	2b00      	cmp	r3, #0
 800e3a4:	d109      	bne.n	800e3ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e3a6:	4a27      	ldr	r2, [pc, #156]	; (800e444 <prvAddNewTaskToReadyList+0xbc>)
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e3ac:	4b24      	ldr	r3, [pc, #144]	; (800e440 <prvAddNewTaskToReadyList+0xb8>)
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	2b01      	cmp	r3, #1
 800e3b2:	d110      	bne.n	800e3d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e3b4:	f000 fbf8 	bl	800eba8 <prvInitialiseTaskLists>
 800e3b8:	e00d      	b.n	800e3d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e3ba:	4b23      	ldr	r3, [pc, #140]	; (800e448 <prvAddNewTaskToReadyList+0xc0>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d109      	bne.n	800e3d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e3c2:	4b20      	ldr	r3, [pc, #128]	; (800e444 <prvAddNewTaskToReadyList+0xbc>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3cc:	429a      	cmp	r2, r3
 800e3ce:	d802      	bhi.n	800e3d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e3d0:	4a1c      	ldr	r2, [pc, #112]	; (800e444 <prvAddNewTaskToReadyList+0xbc>)
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e3d6:	4b1d      	ldr	r3, [pc, #116]	; (800e44c <prvAddNewTaskToReadyList+0xc4>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	3301      	adds	r3, #1
 800e3dc:	4a1b      	ldr	r2, [pc, #108]	; (800e44c <prvAddNewTaskToReadyList+0xc4>)
 800e3de:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3e4:	2201      	movs	r2, #1
 800e3e6:	409a      	lsls	r2, r3
 800e3e8:	4b19      	ldr	r3, [pc, #100]	; (800e450 <prvAddNewTaskToReadyList+0xc8>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	4313      	orrs	r3, r2
 800e3ee:	4a18      	ldr	r2, [pc, #96]	; (800e450 <prvAddNewTaskToReadyList+0xc8>)
 800e3f0:	6013      	str	r3, [r2, #0]
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e3f6:	4613      	mov	r3, r2
 800e3f8:	009b      	lsls	r3, r3, #2
 800e3fa:	4413      	add	r3, r2
 800e3fc:	009b      	lsls	r3, r3, #2
 800e3fe:	4a15      	ldr	r2, [pc, #84]	; (800e454 <prvAddNewTaskToReadyList+0xcc>)
 800e400:	441a      	add	r2, r3
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	3304      	adds	r3, #4
 800e406:	4619      	mov	r1, r3
 800e408:	4610      	mov	r0, r2
 800e40a:	f7fe fe2c 	bl	800d066 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e40e:	f001 f809 	bl	800f424 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e412:	4b0d      	ldr	r3, [pc, #52]	; (800e448 <prvAddNewTaskToReadyList+0xc0>)
 800e414:	681b      	ldr	r3, [r3, #0]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d00e      	beq.n	800e438 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e41a:	4b0a      	ldr	r3, [pc, #40]	; (800e444 <prvAddNewTaskToReadyList+0xbc>)
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e424:	429a      	cmp	r2, r3
 800e426:	d207      	bcs.n	800e438 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e428:	4b0b      	ldr	r3, [pc, #44]	; (800e458 <prvAddNewTaskToReadyList+0xd0>)
 800e42a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e42e:	601a      	str	r2, [r3, #0]
 800e430:	f3bf 8f4f 	dsb	sy
 800e434:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e438:	bf00      	nop
 800e43a:	3708      	adds	r7, #8
 800e43c:	46bd      	mov	sp, r7
 800e43e:	bd80      	pop	{r7, pc}
 800e440:	200042f4 	.word	0x200042f4
 800e444:	200041f4 	.word	0x200041f4
 800e448:	20004300 	.word	0x20004300
 800e44c:	20004310 	.word	0x20004310
 800e450:	200042fc 	.word	0x200042fc
 800e454:	200041f8 	.word	0x200041f8
 800e458:	e000ed04 	.word	0xe000ed04

0800e45c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e45c:	b580      	push	{r7, lr}
 800e45e:	b084      	sub	sp, #16
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e464:	2300      	movs	r3, #0
 800e466:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d017      	beq.n	800e49e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e46e:	4b13      	ldr	r3, [pc, #76]	; (800e4bc <vTaskDelay+0x60>)
 800e470:	681b      	ldr	r3, [r3, #0]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d00a      	beq.n	800e48c <vTaskDelay+0x30>
	__asm volatile
 800e476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e47a:	f383 8811 	msr	BASEPRI, r3
 800e47e:	f3bf 8f6f 	isb	sy
 800e482:	f3bf 8f4f 	dsb	sy
 800e486:	60bb      	str	r3, [r7, #8]
}
 800e488:	bf00      	nop
 800e48a:	e7fe      	b.n	800e48a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e48c:	f000 f884 	bl	800e598 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e490:	2100      	movs	r1, #0
 800e492:	6878      	ldr	r0, [r7, #4]
 800e494:	f000 fe06 	bl	800f0a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e498:	f000 f88c 	bl	800e5b4 <xTaskResumeAll>
 800e49c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e49e:	68fb      	ldr	r3, [r7, #12]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d107      	bne.n	800e4b4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e4a4:	4b06      	ldr	r3, [pc, #24]	; (800e4c0 <vTaskDelay+0x64>)
 800e4a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4aa:	601a      	str	r2, [r3, #0]
 800e4ac:	f3bf 8f4f 	dsb	sy
 800e4b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e4b4:	bf00      	nop
 800e4b6:	3710      	adds	r7, #16
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}
 800e4bc:	2000431c 	.word	0x2000431c
 800e4c0:	e000ed04 	.word	0xe000ed04

0800e4c4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e4c4:	b580      	push	{r7, lr}
 800e4c6:	b08a      	sub	sp, #40	; 0x28
 800e4c8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e4ce:	2300      	movs	r3, #0
 800e4d0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e4d2:	463a      	mov	r2, r7
 800e4d4:	1d39      	adds	r1, r7, #4
 800e4d6:	f107 0308 	add.w	r3, r7, #8
 800e4da:	4618      	mov	r0, r3
 800e4dc:	f7f2 ff18 	bl	8001310 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e4e0:	6839      	ldr	r1, [r7, #0]
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	68ba      	ldr	r2, [r7, #8]
 800e4e6:	9202      	str	r2, [sp, #8]
 800e4e8:	9301      	str	r3, [sp, #4]
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	9300      	str	r3, [sp, #0]
 800e4ee:	2300      	movs	r3, #0
 800e4f0:	460a      	mov	r2, r1
 800e4f2:	4921      	ldr	r1, [pc, #132]	; (800e578 <vTaskStartScheduler+0xb4>)
 800e4f4:	4821      	ldr	r0, [pc, #132]	; (800e57c <vTaskStartScheduler+0xb8>)
 800e4f6:	f7ff fe07 	bl	800e108 <xTaskCreateStatic>
 800e4fa:	4603      	mov	r3, r0
 800e4fc:	4a20      	ldr	r2, [pc, #128]	; (800e580 <vTaskStartScheduler+0xbc>)
 800e4fe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e500:	4b1f      	ldr	r3, [pc, #124]	; (800e580 <vTaskStartScheduler+0xbc>)
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d002      	beq.n	800e50e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e508:	2301      	movs	r3, #1
 800e50a:	617b      	str	r3, [r7, #20]
 800e50c:	e001      	b.n	800e512 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e50e:	2300      	movs	r3, #0
 800e510:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e512:	697b      	ldr	r3, [r7, #20]
 800e514:	2b01      	cmp	r3, #1
 800e516:	d11b      	bne.n	800e550 <vTaskStartScheduler+0x8c>
	__asm volatile
 800e518:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e51c:	f383 8811 	msr	BASEPRI, r3
 800e520:	f3bf 8f6f 	isb	sy
 800e524:	f3bf 8f4f 	dsb	sy
 800e528:	613b      	str	r3, [r7, #16]
}
 800e52a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e52c:	4b15      	ldr	r3, [pc, #84]	; (800e584 <vTaskStartScheduler+0xc0>)
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	334c      	adds	r3, #76	; 0x4c
 800e532:	4a15      	ldr	r2, [pc, #84]	; (800e588 <vTaskStartScheduler+0xc4>)
 800e534:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e536:	4b15      	ldr	r3, [pc, #84]	; (800e58c <vTaskStartScheduler+0xc8>)
 800e538:	f04f 32ff 	mov.w	r2, #4294967295
 800e53c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e53e:	4b14      	ldr	r3, [pc, #80]	; (800e590 <vTaskStartScheduler+0xcc>)
 800e540:	2201      	movs	r2, #1
 800e542:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e544:	4b13      	ldr	r3, [pc, #76]	; (800e594 <vTaskStartScheduler+0xd0>)
 800e546:	2200      	movs	r2, #0
 800e548:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e54a:	f000 fe99 	bl	800f280 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e54e:	e00e      	b.n	800e56e <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e550:	697b      	ldr	r3, [r7, #20]
 800e552:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e556:	d10a      	bne.n	800e56e <vTaskStartScheduler+0xaa>
	__asm volatile
 800e558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e55c:	f383 8811 	msr	BASEPRI, r3
 800e560:	f3bf 8f6f 	isb	sy
 800e564:	f3bf 8f4f 	dsb	sy
 800e568:	60fb      	str	r3, [r7, #12]
}
 800e56a:	bf00      	nop
 800e56c:	e7fe      	b.n	800e56c <vTaskStartScheduler+0xa8>
}
 800e56e:	bf00      	nop
 800e570:	3718      	adds	r7, #24
 800e572:	46bd      	mov	sp, r7
 800e574:	bd80      	pop	{r7, pc}
 800e576:	bf00      	nop
 800e578:	0801e6f0 	.word	0x0801e6f0
 800e57c:	0800eb79 	.word	0x0800eb79
 800e580:	20004318 	.word	0x20004318
 800e584:	200041f4 	.word	0x200041f4
 800e588:	200002f8 	.word	0x200002f8
 800e58c:	20004314 	.word	0x20004314
 800e590:	20004300 	.word	0x20004300
 800e594:	200042f8 	.word	0x200042f8

0800e598 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e598:	b480      	push	{r7}
 800e59a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e59c:	4b04      	ldr	r3, [pc, #16]	; (800e5b0 <vTaskSuspendAll+0x18>)
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	3301      	adds	r3, #1
 800e5a2:	4a03      	ldr	r2, [pc, #12]	; (800e5b0 <vTaskSuspendAll+0x18>)
 800e5a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e5a6:	bf00      	nop
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ae:	4770      	bx	lr
 800e5b0:	2000431c 	.word	0x2000431c

0800e5b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e5b4:	b580      	push	{r7, lr}
 800e5b6:	b084      	sub	sp, #16
 800e5b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e5ba:	2300      	movs	r3, #0
 800e5bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e5c2:	4b41      	ldr	r3, [pc, #260]	; (800e6c8 <xTaskResumeAll+0x114>)
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d10a      	bne.n	800e5e0 <xTaskResumeAll+0x2c>
	__asm volatile
 800e5ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5ce:	f383 8811 	msr	BASEPRI, r3
 800e5d2:	f3bf 8f6f 	isb	sy
 800e5d6:	f3bf 8f4f 	dsb	sy
 800e5da:	603b      	str	r3, [r7, #0]
}
 800e5dc:	bf00      	nop
 800e5de:	e7fe      	b.n	800e5de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e5e0:	f000 fef0 	bl	800f3c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e5e4:	4b38      	ldr	r3, [pc, #224]	; (800e6c8 <xTaskResumeAll+0x114>)
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	3b01      	subs	r3, #1
 800e5ea:	4a37      	ldr	r2, [pc, #220]	; (800e6c8 <xTaskResumeAll+0x114>)
 800e5ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5ee:	4b36      	ldr	r3, [pc, #216]	; (800e6c8 <xTaskResumeAll+0x114>)
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d161      	bne.n	800e6ba <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e5f6:	4b35      	ldr	r3, [pc, #212]	; (800e6cc <xTaskResumeAll+0x118>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	2b00      	cmp	r3, #0
 800e5fc:	d05d      	beq.n	800e6ba <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e5fe:	e02e      	b.n	800e65e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e600:	4b33      	ldr	r3, [pc, #204]	; (800e6d0 <xTaskResumeAll+0x11c>)
 800e602:	68db      	ldr	r3, [r3, #12]
 800e604:	68db      	ldr	r3, [r3, #12]
 800e606:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e608:	68fb      	ldr	r3, [r7, #12]
 800e60a:	3318      	adds	r3, #24
 800e60c:	4618      	mov	r0, r3
 800e60e:	f7fe fd87 	bl	800d120 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	3304      	adds	r3, #4
 800e616:	4618      	mov	r0, r3
 800e618:	f7fe fd82 	bl	800d120 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e620:	2201      	movs	r2, #1
 800e622:	409a      	lsls	r2, r3
 800e624:	4b2b      	ldr	r3, [pc, #172]	; (800e6d4 <xTaskResumeAll+0x120>)
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	4313      	orrs	r3, r2
 800e62a:	4a2a      	ldr	r2, [pc, #168]	; (800e6d4 <xTaskResumeAll+0x120>)
 800e62c:	6013      	str	r3, [r2, #0]
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e632:	4613      	mov	r3, r2
 800e634:	009b      	lsls	r3, r3, #2
 800e636:	4413      	add	r3, r2
 800e638:	009b      	lsls	r3, r3, #2
 800e63a:	4a27      	ldr	r2, [pc, #156]	; (800e6d8 <xTaskResumeAll+0x124>)
 800e63c:	441a      	add	r2, r3
 800e63e:	68fb      	ldr	r3, [r7, #12]
 800e640:	3304      	adds	r3, #4
 800e642:	4619      	mov	r1, r3
 800e644:	4610      	mov	r0, r2
 800e646:	f7fe fd0e 	bl	800d066 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e64a:	68fb      	ldr	r3, [r7, #12]
 800e64c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e64e:	4b23      	ldr	r3, [pc, #140]	; (800e6dc <xTaskResumeAll+0x128>)
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e654:	429a      	cmp	r2, r3
 800e656:	d302      	bcc.n	800e65e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800e658:	4b21      	ldr	r3, [pc, #132]	; (800e6e0 <xTaskResumeAll+0x12c>)
 800e65a:	2201      	movs	r2, #1
 800e65c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e65e:	4b1c      	ldr	r3, [pc, #112]	; (800e6d0 <xTaskResumeAll+0x11c>)
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d1cc      	bne.n	800e600 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d001      	beq.n	800e670 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e66c:	f000 fb3e 	bl	800ecec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e670:	4b1c      	ldr	r3, [pc, #112]	; (800e6e4 <xTaskResumeAll+0x130>)
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d010      	beq.n	800e69e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e67c:	f000 f858 	bl	800e730 <xTaskIncrementTick>
 800e680:	4603      	mov	r3, r0
 800e682:	2b00      	cmp	r3, #0
 800e684:	d002      	beq.n	800e68c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e686:	4b16      	ldr	r3, [pc, #88]	; (800e6e0 <xTaskResumeAll+0x12c>)
 800e688:	2201      	movs	r2, #1
 800e68a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	3b01      	subs	r3, #1
 800e690:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d1f1      	bne.n	800e67c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800e698:	4b12      	ldr	r3, [pc, #72]	; (800e6e4 <xTaskResumeAll+0x130>)
 800e69a:	2200      	movs	r2, #0
 800e69c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e69e:	4b10      	ldr	r3, [pc, #64]	; (800e6e0 <xTaskResumeAll+0x12c>)
 800e6a0:	681b      	ldr	r3, [r3, #0]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d009      	beq.n	800e6ba <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e6a6:	2301      	movs	r3, #1
 800e6a8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e6aa:	4b0f      	ldr	r3, [pc, #60]	; (800e6e8 <xTaskResumeAll+0x134>)
 800e6ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6b0:	601a      	str	r2, [r3, #0]
 800e6b2:	f3bf 8f4f 	dsb	sy
 800e6b6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e6ba:	f000 feb3 	bl	800f424 <vPortExitCritical>

	return xAlreadyYielded;
 800e6be:	68bb      	ldr	r3, [r7, #8]
}
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	3710      	adds	r7, #16
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}
 800e6c8:	2000431c 	.word	0x2000431c
 800e6cc:	200042f4 	.word	0x200042f4
 800e6d0:	200042b4 	.word	0x200042b4
 800e6d4:	200042fc 	.word	0x200042fc
 800e6d8:	200041f8 	.word	0x200041f8
 800e6dc:	200041f4 	.word	0x200041f4
 800e6e0:	20004308 	.word	0x20004308
 800e6e4:	20004304 	.word	0x20004304
 800e6e8:	e000ed04 	.word	0xe000ed04

0800e6ec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e6ec:	b480      	push	{r7}
 800e6ee:	b083      	sub	sp, #12
 800e6f0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e6f2:	4b05      	ldr	r3, [pc, #20]	; (800e708 <xTaskGetTickCount+0x1c>)
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e6f8:	687b      	ldr	r3, [r7, #4]
}
 800e6fa:	4618      	mov	r0, r3
 800e6fc:	370c      	adds	r7, #12
 800e6fe:	46bd      	mov	sp, r7
 800e700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e704:	4770      	bx	lr
 800e706:	bf00      	nop
 800e708:	200042f8 	.word	0x200042f8

0800e70c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b082      	sub	sp, #8
 800e710:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e712:	f000 ff39 	bl	800f588 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800e716:	2300      	movs	r3, #0
 800e718:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800e71a:	4b04      	ldr	r3, [pc, #16]	; (800e72c <xTaskGetTickCountFromISR+0x20>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e720:	683b      	ldr	r3, [r7, #0]
}
 800e722:	4618      	mov	r0, r3
 800e724:	3708      	adds	r7, #8
 800e726:	46bd      	mov	sp, r7
 800e728:	bd80      	pop	{r7, pc}
 800e72a:	bf00      	nop
 800e72c:	200042f8 	.word	0x200042f8

0800e730 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b086      	sub	sp, #24
 800e734:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e736:	2300      	movs	r3, #0
 800e738:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e73a:	4b4e      	ldr	r3, [pc, #312]	; (800e874 <xTaskIncrementTick+0x144>)
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	2b00      	cmp	r3, #0
 800e740:	f040 808e 	bne.w	800e860 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e744:	4b4c      	ldr	r3, [pc, #304]	; (800e878 <xTaskIncrementTick+0x148>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	3301      	adds	r3, #1
 800e74a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e74c:	4a4a      	ldr	r2, [pc, #296]	; (800e878 <xTaskIncrementTick+0x148>)
 800e74e:	693b      	ldr	r3, [r7, #16]
 800e750:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e752:	693b      	ldr	r3, [r7, #16]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d120      	bne.n	800e79a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e758:	4b48      	ldr	r3, [pc, #288]	; (800e87c <xTaskIncrementTick+0x14c>)
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d00a      	beq.n	800e778 <xTaskIncrementTick+0x48>
	__asm volatile
 800e762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e766:	f383 8811 	msr	BASEPRI, r3
 800e76a:	f3bf 8f6f 	isb	sy
 800e76e:	f3bf 8f4f 	dsb	sy
 800e772:	603b      	str	r3, [r7, #0]
}
 800e774:	bf00      	nop
 800e776:	e7fe      	b.n	800e776 <xTaskIncrementTick+0x46>
 800e778:	4b40      	ldr	r3, [pc, #256]	; (800e87c <xTaskIncrementTick+0x14c>)
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	60fb      	str	r3, [r7, #12]
 800e77e:	4b40      	ldr	r3, [pc, #256]	; (800e880 <xTaskIncrementTick+0x150>)
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	4a3e      	ldr	r2, [pc, #248]	; (800e87c <xTaskIncrementTick+0x14c>)
 800e784:	6013      	str	r3, [r2, #0]
 800e786:	4a3e      	ldr	r2, [pc, #248]	; (800e880 <xTaskIncrementTick+0x150>)
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	6013      	str	r3, [r2, #0]
 800e78c:	4b3d      	ldr	r3, [pc, #244]	; (800e884 <xTaskIncrementTick+0x154>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	3301      	adds	r3, #1
 800e792:	4a3c      	ldr	r2, [pc, #240]	; (800e884 <xTaskIncrementTick+0x154>)
 800e794:	6013      	str	r3, [r2, #0]
 800e796:	f000 faa9 	bl	800ecec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e79a:	4b3b      	ldr	r3, [pc, #236]	; (800e888 <xTaskIncrementTick+0x158>)
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	693a      	ldr	r2, [r7, #16]
 800e7a0:	429a      	cmp	r2, r3
 800e7a2:	d348      	bcc.n	800e836 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e7a4:	4b35      	ldr	r3, [pc, #212]	; (800e87c <xTaskIncrementTick+0x14c>)
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	681b      	ldr	r3, [r3, #0]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d104      	bne.n	800e7b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7ae:	4b36      	ldr	r3, [pc, #216]	; (800e888 <xTaskIncrementTick+0x158>)
 800e7b0:	f04f 32ff 	mov.w	r2, #4294967295
 800e7b4:	601a      	str	r2, [r3, #0]
					break;
 800e7b6:	e03e      	b.n	800e836 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e7b8:	4b30      	ldr	r3, [pc, #192]	; (800e87c <xTaskIncrementTick+0x14c>)
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	68db      	ldr	r3, [r3, #12]
 800e7be:	68db      	ldr	r3, [r3, #12]
 800e7c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e7c2:	68bb      	ldr	r3, [r7, #8]
 800e7c4:	685b      	ldr	r3, [r3, #4]
 800e7c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e7c8:	693a      	ldr	r2, [r7, #16]
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d203      	bcs.n	800e7d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e7d0:	4a2d      	ldr	r2, [pc, #180]	; (800e888 <xTaskIncrementTick+0x158>)
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e7d6:	e02e      	b.n	800e836 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	3304      	adds	r3, #4
 800e7dc:	4618      	mov	r0, r3
 800e7de:	f7fe fc9f 	bl	800d120 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e7e2:	68bb      	ldr	r3, [r7, #8]
 800e7e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d004      	beq.n	800e7f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e7ea:	68bb      	ldr	r3, [r7, #8]
 800e7ec:	3318      	adds	r3, #24
 800e7ee:	4618      	mov	r0, r3
 800e7f0:	f7fe fc96 	bl	800d120 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e7f4:	68bb      	ldr	r3, [r7, #8]
 800e7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7f8:	2201      	movs	r2, #1
 800e7fa:	409a      	lsls	r2, r3
 800e7fc:	4b23      	ldr	r3, [pc, #140]	; (800e88c <xTaskIncrementTick+0x15c>)
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	4313      	orrs	r3, r2
 800e802:	4a22      	ldr	r2, [pc, #136]	; (800e88c <xTaskIncrementTick+0x15c>)
 800e804:	6013      	str	r3, [r2, #0]
 800e806:	68bb      	ldr	r3, [r7, #8]
 800e808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e80a:	4613      	mov	r3, r2
 800e80c:	009b      	lsls	r3, r3, #2
 800e80e:	4413      	add	r3, r2
 800e810:	009b      	lsls	r3, r3, #2
 800e812:	4a1f      	ldr	r2, [pc, #124]	; (800e890 <xTaskIncrementTick+0x160>)
 800e814:	441a      	add	r2, r3
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	3304      	adds	r3, #4
 800e81a:	4619      	mov	r1, r3
 800e81c:	4610      	mov	r0, r2
 800e81e:	f7fe fc22 	bl	800d066 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e826:	4b1b      	ldr	r3, [pc, #108]	; (800e894 <xTaskIncrementTick+0x164>)
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e82c:	429a      	cmp	r2, r3
 800e82e:	d3b9      	bcc.n	800e7a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e830:	2301      	movs	r3, #1
 800e832:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e834:	e7b6      	b.n	800e7a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e836:	4b17      	ldr	r3, [pc, #92]	; (800e894 <xTaskIncrementTick+0x164>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e83c:	4914      	ldr	r1, [pc, #80]	; (800e890 <xTaskIncrementTick+0x160>)
 800e83e:	4613      	mov	r3, r2
 800e840:	009b      	lsls	r3, r3, #2
 800e842:	4413      	add	r3, r2
 800e844:	009b      	lsls	r3, r3, #2
 800e846:	440b      	add	r3, r1
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	2b01      	cmp	r3, #1
 800e84c:	d901      	bls.n	800e852 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800e84e:	2301      	movs	r3, #1
 800e850:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e852:	4b11      	ldr	r3, [pc, #68]	; (800e898 <xTaskIncrementTick+0x168>)
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	2b00      	cmp	r3, #0
 800e858:	d007      	beq.n	800e86a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800e85a:	2301      	movs	r3, #1
 800e85c:	617b      	str	r3, [r7, #20]
 800e85e:	e004      	b.n	800e86a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e860:	4b0e      	ldr	r3, [pc, #56]	; (800e89c <xTaskIncrementTick+0x16c>)
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	3301      	adds	r3, #1
 800e866:	4a0d      	ldr	r2, [pc, #52]	; (800e89c <xTaskIncrementTick+0x16c>)
 800e868:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e86a:	697b      	ldr	r3, [r7, #20]
}
 800e86c:	4618      	mov	r0, r3
 800e86e:	3718      	adds	r7, #24
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}
 800e874:	2000431c 	.word	0x2000431c
 800e878:	200042f8 	.word	0x200042f8
 800e87c:	200042ac 	.word	0x200042ac
 800e880:	200042b0 	.word	0x200042b0
 800e884:	2000430c 	.word	0x2000430c
 800e888:	20004314 	.word	0x20004314
 800e88c:	200042fc 	.word	0x200042fc
 800e890:	200041f8 	.word	0x200041f8
 800e894:	200041f4 	.word	0x200041f4
 800e898:	20004308 	.word	0x20004308
 800e89c:	20004304 	.word	0x20004304

0800e8a0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e8a0:	b480      	push	{r7}
 800e8a2:	b087      	sub	sp, #28
 800e8a4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e8a6:	4b29      	ldr	r3, [pc, #164]	; (800e94c <vTaskSwitchContext+0xac>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d003      	beq.n	800e8b6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e8ae:	4b28      	ldr	r3, [pc, #160]	; (800e950 <vTaskSwitchContext+0xb0>)
 800e8b0:	2201      	movs	r2, #1
 800e8b2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e8b4:	e044      	b.n	800e940 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800e8b6:	4b26      	ldr	r3, [pc, #152]	; (800e950 <vTaskSwitchContext+0xb0>)
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8bc:	4b25      	ldr	r3, [pc, #148]	; (800e954 <vTaskSwitchContext+0xb4>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e8c2:	68fb      	ldr	r3, [r7, #12]
 800e8c4:	fab3 f383 	clz	r3, r3
 800e8c8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e8ca:	7afb      	ldrb	r3, [r7, #11]
 800e8cc:	f1c3 031f 	rsb	r3, r3, #31
 800e8d0:	617b      	str	r3, [r7, #20]
 800e8d2:	4921      	ldr	r1, [pc, #132]	; (800e958 <vTaskSwitchContext+0xb8>)
 800e8d4:	697a      	ldr	r2, [r7, #20]
 800e8d6:	4613      	mov	r3, r2
 800e8d8:	009b      	lsls	r3, r3, #2
 800e8da:	4413      	add	r3, r2
 800e8dc:	009b      	lsls	r3, r3, #2
 800e8de:	440b      	add	r3, r1
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	d10a      	bne.n	800e8fc <vTaskSwitchContext+0x5c>
	__asm volatile
 800e8e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ea:	f383 8811 	msr	BASEPRI, r3
 800e8ee:	f3bf 8f6f 	isb	sy
 800e8f2:	f3bf 8f4f 	dsb	sy
 800e8f6:	607b      	str	r3, [r7, #4]
}
 800e8f8:	bf00      	nop
 800e8fa:	e7fe      	b.n	800e8fa <vTaskSwitchContext+0x5a>
 800e8fc:	697a      	ldr	r2, [r7, #20]
 800e8fe:	4613      	mov	r3, r2
 800e900:	009b      	lsls	r3, r3, #2
 800e902:	4413      	add	r3, r2
 800e904:	009b      	lsls	r3, r3, #2
 800e906:	4a14      	ldr	r2, [pc, #80]	; (800e958 <vTaskSwitchContext+0xb8>)
 800e908:	4413      	add	r3, r2
 800e90a:	613b      	str	r3, [r7, #16]
 800e90c:	693b      	ldr	r3, [r7, #16]
 800e90e:	685b      	ldr	r3, [r3, #4]
 800e910:	685a      	ldr	r2, [r3, #4]
 800e912:	693b      	ldr	r3, [r7, #16]
 800e914:	605a      	str	r2, [r3, #4]
 800e916:	693b      	ldr	r3, [r7, #16]
 800e918:	685a      	ldr	r2, [r3, #4]
 800e91a:	693b      	ldr	r3, [r7, #16]
 800e91c:	3308      	adds	r3, #8
 800e91e:	429a      	cmp	r2, r3
 800e920:	d104      	bne.n	800e92c <vTaskSwitchContext+0x8c>
 800e922:	693b      	ldr	r3, [r7, #16]
 800e924:	685b      	ldr	r3, [r3, #4]
 800e926:	685a      	ldr	r2, [r3, #4]
 800e928:	693b      	ldr	r3, [r7, #16]
 800e92a:	605a      	str	r2, [r3, #4]
 800e92c:	693b      	ldr	r3, [r7, #16]
 800e92e:	685b      	ldr	r3, [r3, #4]
 800e930:	68db      	ldr	r3, [r3, #12]
 800e932:	4a0a      	ldr	r2, [pc, #40]	; (800e95c <vTaskSwitchContext+0xbc>)
 800e934:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e936:	4b09      	ldr	r3, [pc, #36]	; (800e95c <vTaskSwitchContext+0xbc>)
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	334c      	adds	r3, #76	; 0x4c
 800e93c:	4a08      	ldr	r2, [pc, #32]	; (800e960 <vTaskSwitchContext+0xc0>)
 800e93e:	6013      	str	r3, [r2, #0]
}
 800e940:	bf00      	nop
 800e942:	371c      	adds	r7, #28
 800e944:	46bd      	mov	sp, r7
 800e946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94a:	4770      	bx	lr
 800e94c:	2000431c 	.word	0x2000431c
 800e950:	20004308 	.word	0x20004308
 800e954:	200042fc 	.word	0x200042fc
 800e958:	200041f8 	.word	0x200041f8
 800e95c:	200041f4 	.word	0x200041f4
 800e960:	200002f8 	.word	0x200002f8

0800e964 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e964:	b580      	push	{r7, lr}
 800e966:	b084      	sub	sp, #16
 800e968:	af00      	add	r7, sp, #0
 800e96a:	6078      	str	r0, [r7, #4]
 800e96c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d10a      	bne.n	800e98a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e978:	f383 8811 	msr	BASEPRI, r3
 800e97c:	f3bf 8f6f 	isb	sy
 800e980:	f3bf 8f4f 	dsb	sy
 800e984:	60fb      	str	r3, [r7, #12]
}
 800e986:	bf00      	nop
 800e988:	e7fe      	b.n	800e988 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e98a:	4b07      	ldr	r3, [pc, #28]	; (800e9a8 <vTaskPlaceOnEventList+0x44>)
 800e98c:	681b      	ldr	r3, [r3, #0]
 800e98e:	3318      	adds	r3, #24
 800e990:	4619      	mov	r1, r3
 800e992:	6878      	ldr	r0, [r7, #4]
 800e994:	f7fe fb8b 	bl	800d0ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e998:	2101      	movs	r1, #1
 800e99a:	6838      	ldr	r0, [r7, #0]
 800e99c:	f000 fb82 	bl	800f0a4 <prvAddCurrentTaskToDelayedList>
}
 800e9a0:	bf00      	nop
 800e9a2:	3710      	adds	r7, #16
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd80      	pop	{r7, pc}
 800e9a8:	200041f4 	.word	0x200041f4

0800e9ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e9ac:	b580      	push	{r7, lr}
 800e9ae:	b086      	sub	sp, #24
 800e9b0:	af00      	add	r7, sp, #0
 800e9b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	68db      	ldr	r3, [r3, #12]
 800e9b8:	68db      	ldr	r3, [r3, #12]
 800e9ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e9bc:	693b      	ldr	r3, [r7, #16]
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d10a      	bne.n	800e9d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9c6:	f383 8811 	msr	BASEPRI, r3
 800e9ca:	f3bf 8f6f 	isb	sy
 800e9ce:	f3bf 8f4f 	dsb	sy
 800e9d2:	60fb      	str	r3, [r7, #12]
}
 800e9d4:	bf00      	nop
 800e9d6:	e7fe      	b.n	800e9d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e9d8:	693b      	ldr	r3, [r7, #16]
 800e9da:	3318      	adds	r3, #24
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f7fe fb9f 	bl	800d120 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e9e2:	4b1d      	ldr	r3, [pc, #116]	; (800ea58 <xTaskRemoveFromEventList+0xac>)
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d11c      	bne.n	800ea24 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e9ea:	693b      	ldr	r3, [r7, #16]
 800e9ec:	3304      	adds	r3, #4
 800e9ee:	4618      	mov	r0, r3
 800e9f0:	f7fe fb96 	bl	800d120 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e9f4:	693b      	ldr	r3, [r7, #16]
 800e9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9f8:	2201      	movs	r2, #1
 800e9fa:	409a      	lsls	r2, r3
 800e9fc:	4b17      	ldr	r3, [pc, #92]	; (800ea5c <xTaskRemoveFromEventList+0xb0>)
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	4313      	orrs	r3, r2
 800ea02:	4a16      	ldr	r2, [pc, #88]	; (800ea5c <xTaskRemoveFromEventList+0xb0>)
 800ea04:	6013      	str	r3, [r2, #0]
 800ea06:	693b      	ldr	r3, [r7, #16]
 800ea08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea0a:	4613      	mov	r3, r2
 800ea0c:	009b      	lsls	r3, r3, #2
 800ea0e:	4413      	add	r3, r2
 800ea10:	009b      	lsls	r3, r3, #2
 800ea12:	4a13      	ldr	r2, [pc, #76]	; (800ea60 <xTaskRemoveFromEventList+0xb4>)
 800ea14:	441a      	add	r2, r3
 800ea16:	693b      	ldr	r3, [r7, #16]
 800ea18:	3304      	adds	r3, #4
 800ea1a:	4619      	mov	r1, r3
 800ea1c:	4610      	mov	r0, r2
 800ea1e:	f7fe fb22 	bl	800d066 <vListInsertEnd>
 800ea22:	e005      	b.n	800ea30 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ea24:	693b      	ldr	r3, [r7, #16]
 800ea26:	3318      	adds	r3, #24
 800ea28:	4619      	mov	r1, r3
 800ea2a:	480e      	ldr	r0, [pc, #56]	; (800ea64 <xTaskRemoveFromEventList+0xb8>)
 800ea2c:	f7fe fb1b 	bl	800d066 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ea30:	693b      	ldr	r3, [r7, #16]
 800ea32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea34:	4b0c      	ldr	r3, [pc, #48]	; (800ea68 <xTaskRemoveFromEventList+0xbc>)
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ea3a:	429a      	cmp	r2, r3
 800ea3c:	d905      	bls.n	800ea4a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ea3e:	2301      	movs	r3, #1
 800ea40:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ea42:	4b0a      	ldr	r3, [pc, #40]	; (800ea6c <xTaskRemoveFromEventList+0xc0>)
 800ea44:	2201      	movs	r2, #1
 800ea46:	601a      	str	r2, [r3, #0]
 800ea48:	e001      	b.n	800ea4e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800ea4e:	697b      	ldr	r3, [r7, #20]
}
 800ea50:	4618      	mov	r0, r3
 800ea52:	3718      	adds	r7, #24
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd80      	pop	{r7, pc}
 800ea58:	2000431c 	.word	0x2000431c
 800ea5c:	200042fc 	.word	0x200042fc
 800ea60:	200041f8 	.word	0x200041f8
 800ea64:	200042b4 	.word	0x200042b4
 800ea68:	200041f4 	.word	0x200041f4
 800ea6c:	20004308 	.word	0x20004308

0800ea70 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ea70:	b480      	push	{r7}
 800ea72:	b083      	sub	sp, #12
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ea78:	4b06      	ldr	r3, [pc, #24]	; (800ea94 <vTaskInternalSetTimeOutState+0x24>)
 800ea7a:	681a      	ldr	r2, [r3, #0]
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ea80:	4b05      	ldr	r3, [pc, #20]	; (800ea98 <vTaskInternalSetTimeOutState+0x28>)
 800ea82:	681a      	ldr	r2, [r3, #0]
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	605a      	str	r2, [r3, #4]
}
 800ea88:	bf00      	nop
 800ea8a:	370c      	adds	r7, #12
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea92:	4770      	bx	lr
 800ea94:	2000430c 	.word	0x2000430c
 800ea98:	200042f8 	.word	0x200042f8

0800ea9c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ea9c:	b580      	push	{r7, lr}
 800ea9e:	b088      	sub	sp, #32
 800eaa0:	af00      	add	r7, sp, #0
 800eaa2:	6078      	str	r0, [r7, #4]
 800eaa4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d10a      	bne.n	800eac2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800eaac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eab0:	f383 8811 	msr	BASEPRI, r3
 800eab4:	f3bf 8f6f 	isb	sy
 800eab8:	f3bf 8f4f 	dsb	sy
 800eabc:	613b      	str	r3, [r7, #16]
}
 800eabe:	bf00      	nop
 800eac0:	e7fe      	b.n	800eac0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d10a      	bne.n	800eade <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800eac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eacc:	f383 8811 	msr	BASEPRI, r3
 800ead0:	f3bf 8f6f 	isb	sy
 800ead4:	f3bf 8f4f 	dsb	sy
 800ead8:	60fb      	str	r3, [r7, #12]
}
 800eada:	bf00      	nop
 800eadc:	e7fe      	b.n	800eadc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800eade:	f000 fc71 	bl	800f3c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800eae2:	4b1d      	ldr	r3, [pc, #116]	; (800eb58 <xTaskCheckForTimeOut+0xbc>)
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	685b      	ldr	r3, [r3, #4]
 800eaec:	69ba      	ldr	r2, [r7, #24]
 800eaee:	1ad3      	subs	r3, r2, r3
 800eaf0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800eaf2:	683b      	ldr	r3, [r7, #0]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eafa:	d102      	bne.n	800eb02 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800eafc:	2300      	movs	r3, #0
 800eafe:	61fb      	str	r3, [r7, #28]
 800eb00:	e023      	b.n	800eb4a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681a      	ldr	r2, [r3, #0]
 800eb06:	4b15      	ldr	r3, [pc, #84]	; (800eb5c <xTaskCheckForTimeOut+0xc0>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	429a      	cmp	r2, r3
 800eb0c:	d007      	beq.n	800eb1e <xTaskCheckForTimeOut+0x82>
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	685b      	ldr	r3, [r3, #4]
 800eb12:	69ba      	ldr	r2, [r7, #24]
 800eb14:	429a      	cmp	r2, r3
 800eb16:	d302      	bcc.n	800eb1e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800eb18:	2301      	movs	r3, #1
 800eb1a:	61fb      	str	r3, [r7, #28]
 800eb1c:	e015      	b.n	800eb4a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	697a      	ldr	r2, [r7, #20]
 800eb24:	429a      	cmp	r2, r3
 800eb26:	d20b      	bcs.n	800eb40 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800eb28:	683b      	ldr	r3, [r7, #0]
 800eb2a:	681a      	ldr	r2, [r3, #0]
 800eb2c:	697b      	ldr	r3, [r7, #20]
 800eb2e:	1ad2      	subs	r2, r2, r3
 800eb30:	683b      	ldr	r3, [r7, #0]
 800eb32:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800eb34:	6878      	ldr	r0, [r7, #4]
 800eb36:	f7ff ff9b 	bl	800ea70 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	61fb      	str	r3, [r7, #28]
 800eb3e:	e004      	b.n	800eb4a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800eb40:	683b      	ldr	r3, [r7, #0]
 800eb42:	2200      	movs	r2, #0
 800eb44:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800eb46:	2301      	movs	r3, #1
 800eb48:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800eb4a:	f000 fc6b 	bl	800f424 <vPortExitCritical>

	return xReturn;
 800eb4e:	69fb      	ldr	r3, [r7, #28]
}
 800eb50:	4618      	mov	r0, r3
 800eb52:	3720      	adds	r7, #32
 800eb54:	46bd      	mov	sp, r7
 800eb56:	bd80      	pop	{r7, pc}
 800eb58:	200042f8 	.word	0x200042f8
 800eb5c:	2000430c 	.word	0x2000430c

0800eb60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800eb60:	b480      	push	{r7}
 800eb62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800eb64:	4b03      	ldr	r3, [pc, #12]	; (800eb74 <vTaskMissedYield+0x14>)
 800eb66:	2201      	movs	r2, #1
 800eb68:	601a      	str	r2, [r3, #0]
}
 800eb6a:	bf00      	nop
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb72:	4770      	bx	lr
 800eb74:	20004308 	.word	0x20004308

0800eb78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b082      	sub	sp, #8
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800eb80:	f000 f852 	bl	800ec28 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800eb84:	4b06      	ldr	r3, [pc, #24]	; (800eba0 <prvIdleTask+0x28>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	2b01      	cmp	r3, #1
 800eb8a:	d9f9      	bls.n	800eb80 <prvIdleTask+0x8>
			{
				taskYIELD();
 800eb8c:	4b05      	ldr	r3, [pc, #20]	; (800eba4 <prvIdleTask+0x2c>)
 800eb8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb92:	601a      	str	r2, [r3, #0]
 800eb94:	f3bf 8f4f 	dsb	sy
 800eb98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800eb9c:	e7f0      	b.n	800eb80 <prvIdleTask+0x8>
 800eb9e:	bf00      	nop
 800eba0:	200041f8 	.word	0x200041f8
 800eba4:	e000ed04 	.word	0xe000ed04

0800eba8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b082      	sub	sp, #8
 800ebac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ebae:	2300      	movs	r3, #0
 800ebb0:	607b      	str	r3, [r7, #4]
 800ebb2:	e00c      	b.n	800ebce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ebb4:	687a      	ldr	r2, [r7, #4]
 800ebb6:	4613      	mov	r3, r2
 800ebb8:	009b      	lsls	r3, r3, #2
 800ebba:	4413      	add	r3, r2
 800ebbc:	009b      	lsls	r3, r3, #2
 800ebbe:	4a12      	ldr	r2, [pc, #72]	; (800ec08 <prvInitialiseTaskLists+0x60>)
 800ebc0:	4413      	add	r3, r2
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f7fe fa22 	bl	800d00c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	3301      	adds	r3, #1
 800ebcc:	607b      	str	r3, [r7, #4]
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	2b06      	cmp	r3, #6
 800ebd2:	d9ef      	bls.n	800ebb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ebd4:	480d      	ldr	r0, [pc, #52]	; (800ec0c <prvInitialiseTaskLists+0x64>)
 800ebd6:	f7fe fa19 	bl	800d00c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ebda:	480d      	ldr	r0, [pc, #52]	; (800ec10 <prvInitialiseTaskLists+0x68>)
 800ebdc:	f7fe fa16 	bl	800d00c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ebe0:	480c      	ldr	r0, [pc, #48]	; (800ec14 <prvInitialiseTaskLists+0x6c>)
 800ebe2:	f7fe fa13 	bl	800d00c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ebe6:	480c      	ldr	r0, [pc, #48]	; (800ec18 <prvInitialiseTaskLists+0x70>)
 800ebe8:	f7fe fa10 	bl	800d00c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ebec:	480b      	ldr	r0, [pc, #44]	; (800ec1c <prvInitialiseTaskLists+0x74>)
 800ebee:	f7fe fa0d 	bl	800d00c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ebf2:	4b0b      	ldr	r3, [pc, #44]	; (800ec20 <prvInitialiseTaskLists+0x78>)
 800ebf4:	4a05      	ldr	r2, [pc, #20]	; (800ec0c <prvInitialiseTaskLists+0x64>)
 800ebf6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ebf8:	4b0a      	ldr	r3, [pc, #40]	; (800ec24 <prvInitialiseTaskLists+0x7c>)
 800ebfa:	4a05      	ldr	r2, [pc, #20]	; (800ec10 <prvInitialiseTaskLists+0x68>)
 800ebfc:	601a      	str	r2, [r3, #0]
}
 800ebfe:	bf00      	nop
 800ec00:	3708      	adds	r7, #8
 800ec02:	46bd      	mov	sp, r7
 800ec04:	bd80      	pop	{r7, pc}
 800ec06:	bf00      	nop
 800ec08:	200041f8 	.word	0x200041f8
 800ec0c:	20004284 	.word	0x20004284
 800ec10:	20004298 	.word	0x20004298
 800ec14:	200042b4 	.word	0x200042b4
 800ec18:	200042c8 	.word	0x200042c8
 800ec1c:	200042e0 	.word	0x200042e0
 800ec20:	200042ac 	.word	0x200042ac
 800ec24:	200042b0 	.word	0x200042b0

0800ec28 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ec28:	b580      	push	{r7, lr}
 800ec2a:	b082      	sub	sp, #8
 800ec2c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ec2e:	e019      	b.n	800ec64 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ec30:	f000 fbc8 	bl	800f3c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec34:	4b10      	ldr	r3, [pc, #64]	; (800ec78 <prvCheckTasksWaitingTermination+0x50>)
 800ec36:	68db      	ldr	r3, [r3, #12]
 800ec38:	68db      	ldr	r3, [r3, #12]
 800ec3a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	3304      	adds	r3, #4
 800ec40:	4618      	mov	r0, r3
 800ec42:	f7fe fa6d 	bl	800d120 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ec46:	4b0d      	ldr	r3, [pc, #52]	; (800ec7c <prvCheckTasksWaitingTermination+0x54>)
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	3b01      	subs	r3, #1
 800ec4c:	4a0b      	ldr	r2, [pc, #44]	; (800ec7c <prvCheckTasksWaitingTermination+0x54>)
 800ec4e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ec50:	4b0b      	ldr	r3, [pc, #44]	; (800ec80 <prvCheckTasksWaitingTermination+0x58>)
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	3b01      	subs	r3, #1
 800ec56:	4a0a      	ldr	r2, [pc, #40]	; (800ec80 <prvCheckTasksWaitingTermination+0x58>)
 800ec58:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ec5a:	f000 fbe3 	bl	800f424 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ec5e:	6878      	ldr	r0, [r7, #4]
 800ec60:	f000 f810 	bl	800ec84 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ec64:	4b06      	ldr	r3, [pc, #24]	; (800ec80 <prvCheckTasksWaitingTermination+0x58>)
 800ec66:	681b      	ldr	r3, [r3, #0]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d1e1      	bne.n	800ec30 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ec6c:	bf00      	nop
 800ec6e:	bf00      	nop
 800ec70:	3708      	adds	r7, #8
 800ec72:	46bd      	mov	sp, r7
 800ec74:	bd80      	pop	{r7, pc}
 800ec76:	bf00      	nop
 800ec78:	200042c8 	.word	0x200042c8
 800ec7c:	200042f4 	.word	0x200042f4
 800ec80:	200042dc 	.word	0x200042dc

0800ec84 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b084      	sub	sp, #16
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	334c      	adds	r3, #76	; 0x4c
 800ec90:	4618      	mov	r0, r3
 800ec92:	f00e fa73 	bl	801d17c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d108      	bne.n	800ecb2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eca4:	4618      	mov	r0, r3
 800eca6:	f000 fd7b 	bl	800f7a0 <vPortFree>
				vPortFree( pxTCB );
 800ecaa:	6878      	ldr	r0, [r7, #4]
 800ecac:	f000 fd78 	bl	800f7a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ecb0:	e018      	b.n	800ece4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ecb8:	2b01      	cmp	r3, #1
 800ecba:	d103      	bne.n	800ecc4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ecbc:	6878      	ldr	r0, [r7, #4]
 800ecbe:	f000 fd6f 	bl	800f7a0 <vPortFree>
	}
 800ecc2:	e00f      	b.n	800ece4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800ecca:	2b02      	cmp	r3, #2
 800eccc:	d00a      	beq.n	800ece4 <prvDeleteTCB+0x60>
	__asm volatile
 800ecce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecd2:	f383 8811 	msr	BASEPRI, r3
 800ecd6:	f3bf 8f6f 	isb	sy
 800ecda:	f3bf 8f4f 	dsb	sy
 800ecde:	60fb      	str	r3, [r7, #12]
}
 800ece0:	bf00      	nop
 800ece2:	e7fe      	b.n	800ece2 <prvDeleteTCB+0x5e>
	}
 800ece4:	bf00      	nop
 800ece6:	3710      	adds	r7, #16
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}

0800ecec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ecec:	b480      	push	{r7}
 800ecee:	b083      	sub	sp, #12
 800ecf0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ecf2:	4b0c      	ldr	r3, [pc, #48]	; (800ed24 <prvResetNextTaskUnblockTime+0x38>)
 800ecf4:	681b      	ldr	r3, [r3, #0]
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	2b00      	cmp	r3, #0
 800ecfa:	d104      	bne.n	800ed06 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ecfc:	4b0a      	ldr	r3, [pc, #40]	; (800ed28 <prvResetNextTaskUnblockTime+0x3c>)
 800ecfe:	f04f 32ff 	mov.w	r2, #4294967295
 800ed02:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ed04:	e008      	b.n	800ed18 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ed06:	4b07      	ldr	r3, [pc, #28]	; (800ed24 <prvResetNextTaskUnblockTime+0x38>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	68db      	ldr	r3, [r3, #12]
 800ed0c:	68db      	ldr	r3, [r3, #12]
 800ed0e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	685b      	ldr	r3, [r3, #4]
 800ed14:	4a04      	ldr	r2, [pc, #16]	; (800ed28 <prvResetNextTaskUnblockTime+0x3c>)
 800ed16:	6013      	str	r3, [r2, #0]
}
 800ed18:	bf00      	nop
 800ed1a:	370c      	adds	r7, #12
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed22:	4770      	bx	lr
 800ed24:	200042ac 	.word	0x200042ac
 800ed28:	20004314 	.word	0x20004314

0800ed2c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ed2c:	b480      	push	{r7}
 800ed2e:	b083      	sub	sp, #12
 800ed30:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ed32:	4b0b      	ldr	r3, [pc, #44]	; (800ed60 <xTaskGetSchedulerState+0x34>)
 800ed34:	681b      	ldr	r3, [r3, #0]
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d102      	bne.n	800ed40 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ed3a:	2301      	movs	r3, #1
 800ed3c:	607b      	str	r3, [r7, #4]
 800ed3e:	e008      	b.n	800ed52 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ed40:	4b08      	ldr	r3, [pc, #32]	; (800ed64 <xTaskGetSchedulerState+0x38>)
 800ed42:	681b      	ldr	r3, [r3, #0]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d102      	bne.n	800ed4e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ed48:	2302      	movs	r3, #2
 800ed4a:	607b      	str	r3, [r7, #4]
 800ed4c:	e001      	b.n	800ed52 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ed4e:	2300      	movs	r3, #0
 800ed50:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ed52:	687b      	ldr	r3, [r7, #4]
	}
 800ed54:	4618      	mov	r0, r3
 800ed56:	370c      	adds	r7, #12
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed5e:	4770      	bx	lr
 800ed60:	20004300 	.word	0x20004300
 800ed64:	2000431c 	.word	0x2000431c

0800ed68 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b084      	sub	sp, #16
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ed74:	2300      	movs	r3, #0
 800ed76:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d05e      	beq.n	800ee3c <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ed7e:	68bb      	ldr	r3, [r7, #8]
 800ed80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed82:	4b31      	ldr	r3, [pc, #196]	; (800ee48 <xTaskPriorityInherit+0xe0>)
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed88:	429a      	cmp	r2, r3
 800ed8a:	d24e      	bcs.n	800ee2a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	699b      	ldr	r3, [r3, #24]
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	db06      	blt.n	800eda2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed94:	4b2c      	ldr	r3, [pc, #176]	; (800ee48 <xTaskPriorityInherit+0xe0>)
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed9a:	f1c3 0207 	rsb	r2, r3, #7
 800ed9e:	68bb      	ldr	r3, [r7, #8]
 800eda0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800eda2:	68bb      	ldr	r3, [r7, #8]
 800eda4:	6959      	ldr	r1, [r3, #20]
 800eda6:	68bb      	ldr	r3, [r7, #8]
 800eda8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800edaa:	4613      	mov	r3, r2
 800edac:	009b      	lsls	r3, r3, #2
 800edae:	4413      	add	r3, r2
 800edb0:	009b      	lsls	r3, r3, #2
 800edb2:	4a26      	ldr	r2, [pc, #152]	; (800ee4c <xTaskPriorityInherit+0xe4>)
 800edb4:	4413      	add	r3, r2
 800edb6:	4299      	cmp	r1, r3
 800edb8:	d12f      	bne.n	800ee1a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800edba:	68bb      	ldr	r3, [r7, #8]
 800edbc:	3304      	adds	r3, #4
 800edbe:	4618      	mov	r0, r3
 800edc0:	f7fe f9ae 	bl	800d120 <uxListRemove>
 800edc4:	4603      	mov	r3, r0
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d10a      	bne.n	800ede0 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edce:	2201      	movs	r2, #1
 800edd0:	fa02 f303 	lsl.w	r3, r2, r3
 800edd4:	43da      	mvns	r2, r3
 800edd6:	4b1e      	ldr	r3, [pc, #120]	; (800ee50 <xTaskPriorityInherit+0xe8>)
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	4013      	ands	r3, r2
 800eddc:	4a1c      	ldr	r2, [pc, #112]	; (800ee50 <xTaskPriorityInherit+0xe8>)
 800edde:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ede0:	4b19      	ldr	r3, [pc, #100]	; (800ee48 <xTaskPriorityInherit+0xe0>)
 800ede2:	681b      	ldr	r3, [r3, #0]
 800ede4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ede6:	68bb      	ldr	r3, [r7, #8]
 800ede8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800edea:	68bb      	ldr	r3, [r7, #8]
 800edec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edee:	2201      	movs	r2, #1
 800edf0:	409a      	lsls	r2, r3
 800edf2:	4b17      	ldr	r3, [pc, #92]	; (800ee50 <xTaskPriorityInherit+0xe8>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	4313      	orrs	r3, r2
 800edf8:	4a15      	ldr	r2, [pc, #84]	; (800ee50 <xTaskPriorityInherit+0xe8>)
 800edfa:	6013      	str	r3, [r2, #0]
 800edfc:	68bb      	ldr	r3, [r7, #8]
 800edfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee00:	4613      	mov	r3, r2
 800ee02:	009b      	lsls	r3, r3, #2
 800ee04:	4413      	add	r3, r2
 800ee06:	009b      	lsls	r3, r3, #2
 800ee08:	4a10      	ldr	r2, [pc, #64]	; (800ee4c <xTaskPriorityInherit+0xe4>)
 800ee0a:	441a      	add	r2, r3
 800ee0c:	68bb      	ldr	r3, [r7, #8]
 800ee0e:	3304      	adds	r3, #4
 800ee10:	4619      	mov	r1, r3
 800ee12:	4610      	mov	r0, r2
 800ee14:	f7fe f927 	bl	800d066 <vListInsertEnd>
 800ee18:	e004      	b.n	800ee24 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ee1a:	4b0b      	ldr	r3, [pc, #44]	; (800ee48 <xTaskPriorityInherit+0xe0>)
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ee24:	2301      	movs	r3, #1
 800ee26:	60fb      	str	r3, [r7, #12]
 800ee28:	e008      	b.n	800ee3c <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ee2a:	68bb      	ldr	r3, [r7, #8]
 800ee2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ee2e:	4b06      	ldr	r3, [pc, #24]	; (800ee48 <xTaskPriorityInherit+0xe0>)
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee34:	429a      	cmp	r2, r3
 800ee36:	d201      	bcs.n	800ee3c <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ee38:	2301      	movs	r3, #1
 800ee3a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ee3c:	68fb      	ldr	r3, [r7, #12]
	}
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3710      	adds	r7, #16
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}
 800ee46:	bf00      	nop
 800ee48:	200041f4 	.word	0x200041f4
 800ee4c:	200041f8 	.word	0x200041f8
 800ee50:	200042fc 	.word	0x200042fc

0800ee54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b086      	sub	sp, #24
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ee60:	2300      	movs	r3, #0
 800ee62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d06e      	beq.n	800ef48 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ee6a:	4b3a      	ldr	r3, [pc, #232]	; (800ef54 <xTaskPriorityDisinherit+0x100>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	693a      	ldr	r2, [r7, #16]
 800ee70:	429a      	cmp	r2, r3
 800ee72:	d00a      	beq.n	800ee8a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800ee74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee78:	f383 8811 	msr	BASEPRI, r3
 800ee7c:	f3bf 8f6f 	isb	sy
 800ee80:	f3bf 8f4f 	dsb	sy
 800ee84:	60fb      	str	r3, [r7, #12]
}
 800ee86:	bf00      	nop
 800ee88:	e7fe      	b.n	800ee88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ee8a:	693b      	ldr	r3, [r7, #16]
 800ee8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d10a      	bne.n	800eea8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ee92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee96:	f383 8811 	msr	BASEPRI, r3
 800ee9a:	f3bf 8f6f 	isb	sy
 800ee9e:	f3bf 8f4f 	dsb	sy
 800eea2:	60bb      	str	r3, [r7, #8]
}
 800eea4:	bf00      	nop
 800eea6:	e7fe      	b.n	800eea6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800eea8:	693b      	ldr	r3, [r7, #16]
 800eeaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eeac:	1e5a      	subs	r2, r3, #1
 800eeae:	693b      	ldr	r3, [r7, #16]
 800eeb0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800eeb2:	693b      	ldr	r3, [r7, #16]
 800eeb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eeb6:	693b      	ldr	r3, [r7, #16]
 800eeb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eeba:	429a      	cmp	r2, r3
 800eebc:	d044      	beq.n	800ef48 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800eebe:	693b      	ldr	r3, [r7, #16]
 800eec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d140      	bne.n	800ef48 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800eec6:	693b      	ldr	r3, [r7, #16]
 800eec8:	3304      	adds	r3, #4
 800eeca:	4618      	mov	r0, r3
 800eecc:	f7fe f928 	bl	800d120 <uxListRemove>
 800eed0:	4603      	mov	r3, r0
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d115      	bne.n	800ef02 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800eed6:	693b      	ldr	r3, [r7, #16]
 800eed8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eeda:	491f      	ldr	r1, [pc, #124]	; (800ef58 <xTaskPriorityDisinherit+0x104>)
 800eedc:	4613      	mov	r3, r2
 800eede:	009b      	lsls	r3, r3, #2
 800eee0:	4413      	add	r3, r2
 800eee2:	009b      	lsls	r3, r3, #2
 800eee4:	440b      	add	r3, r1
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d10a      	bne.n	800ef02 <xTaskPriorityDisinherit+0xae>
 800eeec:	693b      	ldr	r3, [r7, #16]
 800eeee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eef0:	2201      	movs	r2, #1
 800eef2:	fa02 f303 	lsl.w	r3, r2, r3
 800eef6:	43da      	mvns	r2, r3
 800eef8:	4b18      	ldr	r3, [pc, #96]	; (800ef5c <xTaskPriorityDisinherit+0x108>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	4013      	ands	r3, r2
 800eefe:	4a17      	ldr	r2, [pc, #92]	; (800ef5c <xTaskPriorityDisinherit+0x108>)
 800ef00:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ef02:	693b      	ldr	r3, [r7, #16]
 800ef04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ef06:	693b      	ldr	r3, [r7, #16]
 800ef08:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef0a:	693b      	ldr	r3, [r7, #16]
 800ef0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef0e:	f1c3 0207 	rsb	r2, r3, #7
 800ef12:	693b      	ldr	r3, [r7, #16]
 800ef14:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ef16:	693b      	ldr	r3, [r7, #16]
 800ef18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef1a:	2201      	movs	r2, #1
 800ef1c:	409a      	lsls	r2, r3
 800ef1e:	4b0f      	ldr	r3, [pc, #60]	; (800ef5c <xTaskPriorityDisinherit+0x108>)
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	4313      	orrs	r3, r2
 800ef24:	4a0d      	ldr	r2, [pc, #52]	; (800ef5c <xTaskPriorityDisinherit+0x108>)
 800ef26:	6013      	str	r3, [r2, #0]
 800ef28:	693b      	ldr	r3, [r7, #16]
 800ef2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef2c:	4613      	mov	r3, r2
 800ef2e:	009b      	lsls	r3, r3, #2
 800ef30:	4413      	add	r3, r2
 800ef32:	009b      	lsls	r3, r3, #2
 800ef34:	4a08      	ldr	r2, [pc, #32]	; (800ef58 <xTaskPriorityDisinherit+0x104>)
 800ef36:	441a      	add	r2, r3
 800ef38:	693b      	ldr	r3, [r7, #16]
 800ef3a:	3304      	adds	r3, #4
 800ef3c:	4619      	mov	r1, r3
 800ef3e:	4610      	mov	r0, r2
 800ef40:	f7fe f891 	bl	800d066 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ef44:	2301      	movs	r3, #1
 800ef46:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ef48:	697b      	ldr	r3, [r7, #20]
	}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3718      	adds	r7, #24
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
 800ef52:	bf00      	nop
 800ef54:	200041f4 	.word	0x200041f4
 800ef58:	200041f8 	.word	0x200041f8
 800ef5c:	200042fc 	.word	0x200042fc

0800ef60 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800ef60:	b580      	push	{r7, lr}
 800ef62:	b088      	sub	sp, #32
 800ef64:	af00      	add	r7, sp, #0
 800ef66:	6078      	str	r0, [r7, #4]
 800ef68:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800ef6e:	2301      	movs	r3, #1
 800ef70:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d077      	beq.n	800f068 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800ef78:	69bb      	ldr	r3, [r7, #24]
 800ef7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d10a      	bne.n	800ef96 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800ef80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef84:	f383 8811 	msr	BASEPRI, r3
 800ef88:	f3bf 8f6f 	isb	sy
 800ef8c:	f3bf 8f4f 	dsb	sy
 800ef90:	60fb      	str	r3, [r7, #12]
}
 800ef92:	bf00      	nop
 800ef94:	e7fe      	b.n	800ef94 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800ef96:	69bb      	ldr	r3, [r7, #24]
 800ef98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef9a:	683a      	ldr	r2, [r7, #0]
 800ef9c:	429a      	cmp	r2, r3
 800ef9e:	d902      	bls.n	800efa6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800efa0:	683b      	ldr	r3, [r7, #0]
 800efa2:	61fb      	str	r3, [r7, #28]
 800efa4:	e002      	b.n	800efac <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800efa6:	69bb      	ldr	r3, [r7, #24]
 800efa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800efaa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800efac:	69bb      	ldr	r3, [r7, #24]
 800efae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efb0:	69fa      	ldr	r2, [r7, #28]
 800efb2:	429a      	cmp	r2, r3
 800efb4:	d058      	beq.n	800f068 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800efb6:	69bb      	ldr	r3, [r7, #24]
 800efb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800efba:	697a      	ldr	r2, [r7, #20]
 800efbc:	429a      	cmp	r2, r3
 800efbe:	d153      	bne.n	800f068 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800efc0:	4b2b      	ldr	r3, [pc, #172]	; (800f070 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	69ba      	ldr	r2, [r7, #24]
 800efc6:	429a      	cmp	r2, r3
 800efc8:	d10a      	bne.n	800efe0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800efca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efce:	f383 8811 	msr	BASEPRI, r3
 800efd2:	f3bf 8f6f 	isb	sy
 800efd6:	f3bf 8f4f 	dsb	sy
 800efda:	60bb      	str	r3, [r7, #8]
}
 800efdc:	bf00      	nop
 800efde:	e7fe      	b.n	800efde <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800efe0:	69bb      	ldr	r3, [r7, #24]
 800efe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800efe4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800efe6:	69bb      	ldr	r3, [r7, #24]
 800efe8:	69fa      	ldr	r2, [r7, #28]
 800efea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800efec:	69bb      	ldr	r3, [r7, #24]
 800efee:	699b      	ldr	r3, [r3, #24]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	db04      	blt.n	800effe <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800eff4:	69fb      	ldr	r3, [r7, #28]
 800eff6:	f1c3 0207 	rsb	r2, r3, #7
 800effa:	69bb      	ldr	r3, [r7, #24]
 800effc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800effe:	69bb      	ldr	r3, [r7, #24]
 800f000:	6959      	ldr	r1, [r3, #20]
 800f002:	693a      	ldr	r2, [r7, #16]
 800f004:	4613      	mov	r3, r2
 800f006:	009b      	lsls	r3, r3, #2
 800f008:	4413      	add	r3, r2
 800f00a:	009b      	lsls	r3, r3, #2
 800f00c:	4a19      	ldr	r2, [pc, #100]	; (800f074 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800f00e:	4413      	add	r3, r2
 800f010:	4299      	cmp	r1, r3
 800f012:	d129      	bne.n	800f068 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f014:	69bb      	ldr	r3, [r7, #24]
 800f016:	3304      	adds	r3, #4
 800f018:	4618      	mov	r0, r3
 800f01a:	f7fe f881 	bl	800d120 <uxListRemove>
 800f01e:	4603      	mov	r3, r0
 800f020:	2b00      	cmp	r3, #0
 800f022:	d10a      	bne.n	800f03a <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800f024:	69bb      	ldr	r3, [r7, #24]
 800f026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f028:	2201      	movs	r2, #1
 800f02a:	fa02 f303 	lsl.w	r3, r2, r3
 800f02e:	43da      	mvns	r2, r3
 800f030:	4b11      	ldr	r3, [pc, #68]	; (800f078 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	4013      	ands	r3, r2
 800f036:	4a10      	ldr	r2, [pc, #64]	; (800f078 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f038:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800f03a:	69bb      	ldr	r3, [r7, #24]
 800f03c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f03e:	2201      	movs	r2, #1
 800f040:	409a      	lsls	r2, r3
 800f042:	4b0d      	ldr	r3, [pc, #52]	; (800f078 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	4313      	orrs	r3, r2
 800f048:	4a0b      	ldr	r2, [pc, #44]	; (800f078 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800f04a:	6013      	str	r3, [r2, #0]
 800f04c:	69bb      	ldr	r3, [r7, #24]
 800f04e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f050:	4613      	mov	r3, r2
 800f052:	009b      	lsls	r3, r3, #2
 800f054:	4413      	add	r3, r2
 800f056:	009b      	lsls	r3, r3, #2
 800f058:	4a06      	ldr	r2, [pc, #24]	; (800f074 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800f05a:	441a      	add	r2, r3
 800f05c:	69bb      	ldr	r3, [r7, #24]
 800f05e:	3304      	adds	r3, #4
 800f060:	4619      	mov	r1, r3
 800f062:	4610      	mov	r0, r2
 800f064:	f7fd ffff 	bl	800d066 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f068:	bf00      	nop
 800f06a:	3720      	adds	r7, #32
 800f06c:	46bd      	mov	sp, r7
 800f06e:	bd80      	pop	{r7, pc}
 800f070:	200041f4 	.word	0x200041f4
 800f074:	200041f8 	.word	0x200041f8
 800f078:	200042fc 	.word	0x200042fc

0800f07c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800f07c:	b480      	push	{r7}
 800f07e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800f080:	4b07      	ldr	r3, [pc, #28]	; (800f0a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	2b00      	cmp	r3, #0
 800f086:	d004      	beq.n	800f092 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800f088:	4b05      	ldr	r3, [pc, #20]	; (800f0a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f08e:	3201      	adds	r2, #1
 800f090:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800f092:	4b03      	ldr	r3, [pc, #12]	; (800f0a0 <pvTaskIncrementMutexHeldCount+0x24>)
 800f094:	681b      	ldr	r3, [r3, #0]
	}
 800f096:	4618      	mov	r0, r3
 800f098:	46bd      	mov	sp, r7
 800f09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09e:	4770      	bx	lr
 800f0a0:	200041f4 	.word	0x200041f4

0800f0a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b084      	sub	sp, #16
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
 800f0ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f0ae:	4b29      	ldr	r3, [pc, #164]	; (800f154 <prvAddCurrentTaskToDelayedList+0xb0>)
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f0b4:	4b28      	ldr	r3, [pc, #160]	; (800f158 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	3304      	adds	r3, #4
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f7fe f830 	bl	800d120 <uxListRemove>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d10b      	bne.n	800f0de <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800f0c6:	4b24      	ldr	r3, [pc, #144]	; (800f158 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0cc:	2201      	movs	r2, #1
 800f0ce:	fa02 f303 	lsl.w	r3, r2, r3
 800f0d2:	43da      	mvns	r2, r3
 800f0d4:	4b21      	ldr	r3, [pc, #132]	; (800f15c <prvAddCurrentTaskToDelayedList+0xb8>)
 800f0d6:	681b      	ldr	r3, [r3, #0]
 800f0d8:	4013      	ands	r3, r2
 800f0da:	4a20      	ldr	r2, [pc, #128]	; (800f15c <prvAddCurrentTaskToDelayedList+0xb8>)
 800f0dc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0e4:	d10a      	bne.n	800f0fc <prvAddCurrentTaskToDelayedList+0x58>
 800f0e6:	683b      	ldr	r3, [r7, #0]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d007      	beq.n	800f0fc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f0ec:	4b1a      	ldr	r3, [pc, #104]	; (800f158 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	3304      	adds	r3, #4
 800f0f2:	4619      	mov	r1, r3
 800f0f4:	481a      	ldr	r0, [pc, #104]	; (800f160 <prvAddCurrentTaskToDelayedList+0xbc>)
 800f0f6:	f7fd ffb6 	bl	800d066 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f0fa:	e026      	b.n	800f14a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f0fc:	68fa      	ldr	r2, [r7, #12]
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	4413      	add	r3, r2
 800f102:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f104:	4b14      	ldr	r3, [pc, #80]	; (800f158 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	68ba      	ldr	r2, [r7, #8]
 800f10a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f10c:	68ba      	ldr	r2, [r7, #8]
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	429a      	cmp	r2, r3
 800f112:	d209      	bcs.n	800f128 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f114:	4b13      	ldr	r3, [pc, #76]	; (800f164 <prvAddCurrentTaskToDelayedList+0xc0>)
 800f116:	681a      	ldr	r2, [r3, #0]
 800f118:	4b0f      	ldr	r3, [pc, #60]	; (800f158 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	3304      	adds	r3, #4
 800f11e:	4619      	mov	r1, r3
 800f120:	4610      	mov	r0, r2
 800f122:	f7fd ffc4 	bl	800d0ae <vListInsert>
}
 800f126:	e010      	b.n	800f14a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f128:	4b0f      	ldr	r3, [pc, #60]	; (800f168 <prvAddCurrentTaskToDelayedList+0xc4>)
 800f12a:	681a      	ldr	r2, [r3, #0]
 800f12c:	4b0a      	ldr	r3, [pc, #40]	; (800f158 <prvAddCurrentTaskToDelayedList+0xb4>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	3304      	adds	r3, #4
 800f132:	4619      	mov	r1, r3
 800f134:	4610      	mov	r0, r2
 800f136:	f7fd ffba 	bl	800d0ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f13a:	4b0c      	ldr	r3, [pc, #48]	; (800f16c <prvAddCurrentTaskToDelayedList+0xc8>)
 800f13c:	681b      	ldr	r3, [r3, #0]
 800f13e:	68ba      	ldr	r2, [r7, #8]
 800f140:	429a      	cmp	r2, r3
 800f142:	d202      	bcs.n	800f14a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800f144:	4a09      	ldr	r2, [pc, #36]	; (800f16c <prvAddCurrentTaskToDelayedList+0xc8>)
 800f146:	68bb      	ldr	r3, [r7, #8]
 800f148:	6013      	str	r3, [r2, #0]
}
 800f14a:	bf00      	nop
 800f14c:	3710      	adds	r7, #16
 800f14e:	46bd      	mov	sp, r7
 800f150:	bd80      	pop	{r7, pc}
 800f152:	bf00      	nop
 800f154:	200042f8 	.word	0x200042f8
 800f158:	200041f4 	.word	0x200041f4
 800f15c:	200042fc 	.word	0x200042fc
 800f160:	200042e0 	.word	0x200042e0
 800f164:	200042b0 	.word	0x200042b0
 800f168:	200042ac 	.word	0x200042ac
 800f16c:	20004314 	.word	0x20004314

0800f170 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f170:	b480      	push	{r7}
 800f172:	b085      	sub	sp, #20
 800f174:	af00      	add	r7, sp, #0
 800f176:	60f8      	str	r0, [r7, #12]
 800f178:	60b9      	str	r1, [r7, #8]
 800f17a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	3b04      	subs	r3, #4
 800f180:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f188:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	3b04      	subs	r3, #4
 800f18e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f190:	68bb      	ldr	r3, [r7, #8]
 800f192:	f023 0201 	bic.w	r2, r3, #1
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f19a:	68fb      	ldr	r3, [r7, #12]
 800f19c:	3b04      	subs	r3, #4
 800f19e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f1a0:	4a0c      	ldr	r2, [pc, #48]	; (800f1d4 <pxPortInitialiseStack+0x64>)
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	3b14      	subs	r3, #20
 800f1aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f1ac:	687a      	ldr	r2, [r7, #4]
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	3b04      	subs	r3, #4
 800f1b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f1b8:	68fb      	ldr	r3, [r7, #12]
 800f1ba:	f06f 0202 	mvn.w	r2, #2
 800f1be:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f1c0:	68fb      	ldr	r3, [r7, #12]
 800f1c2:	3b20      	subs	r3, #32
 800f1c4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
}
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	3714      	adds	r7, #20
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d2:	4770      	bx	lr
 800f1d4:	0800f1d9 	.word	0x0800f1d9

0800f1d8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f1d8:	b480      	push	{r7}
 800f1da:	b085      	sub	sp, #20
 800f1dc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f1de:	2300      	movs	r3, #0
 800f1e0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f1e2:	4b12      	ldr	r3, [pc, #72]	; (800f22c <prvTaskExitError+0x54>)
 800f1e4:	681b      	ldr	r3, [r3, #0]
 800f1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1ea:	d00a      	beq.n	800f202 <prvTaskExitError+0x2a>
	__asm volatile
 800f1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1f0:	f383 8811 	msr	BASEPRI, r3
 800f1f4:	f3bf 8f6f 	isb	sy
 800f1f8:	f3bf 8f4f 	dsb	sy
 800f1fc:	60fb      	str	r3, [r7, #12]
}
 800f1fe:	bf00      	nop
 800f200:	e7fe      	b.n	800f200 <prvTaskExitError+0x28>
	__asm volatile
 800f202:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f206:	f383 8811 	msr	BASEPRI, r3
 800f20a:	f3bf 8f6f 	isb	sy
 800f20e:	f3bf 8f4f 	dsb	sy
 800f212:	60bb      	str	r3, [r7, #8]
}
 800f214:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f216:	bf00      	nop
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	d0fc      	beq.n	800f218 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f21e:	bf00      	nop
 800f220:	bf00      	nop
 800f222:	3714      	adds	r7, #20
 800f224:	46bd      	mov	sp, r7
 800f226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f22a:	4770      	bx	lr
 800f22c:	200002e8 	.word	0x200002e8

0800f230 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f230:	4b07      	ldr	r3, [pc, #28]	; (800f250 <pxCurrentTCBConst2>)
 800f232:	6819      	ldr	r1, [r3, #0]
 800f234:	6808      	ldr	r0, [r1, #0]
 800f236:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f23a:	f380 8809 	msr	PSP, r0
 800f23e:	f3bf 8f6f 	isb	sy
 800f242:	f04f 0000 	mov.w	r0, #0
 800f246:	f380 8811 	msr	BASEPRI, r0
 800f24a:	4770      	bx	lr
 800f24c:	f3af 8000 	nop.w

0800f250 <pxCurrentTCBConst2>:
 800f250:	200041f4 	.word	0x200041f4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f254:	bf00      	nop
 800f256:	bf00      	nop

0800f258 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f258:	4808      	ldr	r0, [pc, #32]	; (800f27c <prvPortStartFirstTask+0x24>)
 800f25a:	6800      	ldr	r0, [r0, #0]
 800f25c:	6800      	ldr	r0, [r0, #0]
 800f25e:	f380 8808 	msr	MSP, r0
 800f262:	f04f 0000 	mov.w	r0, #0
 800f266:	f380 8814 	msr	CONTROL, r0
 800f26a:	b662      	cpsie	i
 800f26c:	b661      	cpsie	f
 800f26e:	f3bf 8f4f 	dsb	sy
 800f272:	f3bf 8f6f 	isb	sy
 800f276:	df00      	svc	0
 800f278:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f27a:	bf00      	nop
 800f27c:	e000ed08 	.word	0xe000ed08

0800f280 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f280:	b580      	push	{r7, lr}
 800f282:	b086      	sub	sp, #24
 800f284:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f286:	4b46      	ldr	r3, [pc, #280]	; (800f3a0 <xPortStartScheduler+0x120>)
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	4a46      	ldr	r2, [pc, #280]	; (800f3a4 <xPortStartScheduler+0x124>)
 800f28c:	4293      	cmp	r3, r2
 800f28e:	d10a      	bne.n	800f2a6 <xPortStartScheduler+0x26>
	__asm volatile
 800f290:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f294:	f383 8811 	msr	BASEPRI, r3
 800f298:	f3bf 8f6f 	isb	sy
 800f29c:	f3bf 8f4f 	dsb	sy
 800f2a0:	613b      	str	r3, [r7, #16]
}
 800f2a2:	bf00      	nop
 800f2a4:	e7fe      	b.n	800f2a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f2a6:	4b3e      	ldr	r3, [pc, #248]	; (800f3a0 <xPortStartScheduler+0x120>)
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	4a3f      	ldr	r2, [pc, #252]	; (800f3a8 <xPortStartScheduler+0x128>)
 800f2ac:	4293      	cmp	r3, r2
 800f2ae:	d10a      	bne.n	800f2c6 <xPortStartScheduler+0x46>
	__asm volatile
 800f2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2b4:	f383 8811 	msr	BASEPRI, r3
 800f2b8:	f3bf 8f6f 	isb	sy
 800f2bc:	f3bf 8f4f 	dsb	sy
 800f2c0:	60fb      	str	r3, [r7, #12]
}
 800f2c2:	bf00      	nop
 800f2c4:	e7fe      	b.n	800f2c4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f2c6:	4b39      	ldr	r3, [pc, #228]	; (800f3ac <xPortStartScheduler+0x12c>)
 800f2c8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f2ca:	697b      	ldr	r3, [r7, #20]
 800f2cc:	781b      	ldrb	r3, [r3, #0]
 800f2ce:	b2db      	uxtb	r3, r3
 800f2d0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f2d2:	697b      	ldr	r3, [r7, #20]
 800f2d4:	22ff      	movs	r2, #255	; 0xff
 800f2d6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f2d8:	697b      	ldr	r3, [r7, #20]
 800f2da:	781b      	ldrb	r3, [r3, #0]
 800f2dc:	b2db      	uxtb	r3, r3
 800f2de:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f2e0:	78fb      	ldrb	r3, [r7, #3]
 800f2e2:	b2db      	uxtb	r3, r3
 800f2e4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f2e8:	b2da      	uxtb	r2, r3
 800f2ea:	4b31      	ldr	r3, [pc, #196]	; (800f3b0 <xPortStartScheduler+0x130>)
 800f2ec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f2ee:	4b31      	ldr	r3, [pc, #196]	; (800f3b4 <xPortStartScheduler+0x134>)
 800f2f0:	2207      	movs	r2, #7
 800f2f2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f2f4:	e009      	b.n	800f30a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f2f6:	4b2f      	ldr	r3, [pc, #188]	; (800f3b4 <xPortStartScheduler+0x134>)
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	3b01      	subs	r3, #1
 800f2fc:	4a2d      	ldr	r2, [pc, #180]	; (800f3b4 <xPortStartScheduler+0x134>)
 800f2fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f300:	78fb      	ldrb	r3, [r7, #3]
 800f302:	b2db      	uxtb	r3, r3
 800f304:	005b      	lsls	r3, r3, #1
 800f306:	b2db      	uxtb	r3, r3
 800f308:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f30a:	78fb      	ldrb	r3, [r7, #3]
 800f30c:	b2db      	uxtb	r3, r3
 800f30e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f312:	2b80      	cmp	r3, #128	; 0x80
 800f314:	d0ef      	beq.n	800f2f6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f316:	4b27      	ldr	r3, [pc, #156]	; (800f3b4 <xPortStartScheduler+0x134>)
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	f1c3 0307 	rsb	r3, r3, #7
 800f31e:	2b04      	cmp	r3, #4
 800f320:	d00a      	beq.n	800f338 <xPortStartScheduler+0xb8>
	__asm volatile
 800f322:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f326:	f383 8811 	msr	BASEPRI, r3
 800f32a:	f3bf 8f6f 	isb	sy
 800f32e:	f3bf 8f4f 	dsb	sy
 800f332:	60bb      	str	r3, [r7, #8]
}
 800f334:	bf00      	nop
 800f336:	e7fe      	b.n	800f336 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f338:	4b1e      	ldr	r3, [pc, #120]	; (800f3b4 <xPortStartScheduler+0x134>)
 800f33a:	681b      	ldr	r3, [r3, #0]
 800f33c:	021b      	lsls	r3, r3, #8
 800f33e:	4a1d      	ldr	r2, [pc, #116]	; (800f3b4 <xPortStartScheduler+0x134>)
 800f340:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f342:	4b1c      	ldr	r3, [pc, #112]	; (800f3b4 <xPortStartScheduler+0x134>)
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f34a:	4a1a      	ldr	r2, [pc, #104]	; (800f3b4 <xPortStartScheduler+0x134>)
 800f34c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	b2da      	uxtb	r2, r3
 800f352:	697b      	ldr	r3, [r7, #20]
 800f354:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f356:	4b18      	ldr	r3, [pc, #96]	; (800f3b8 <xPortStartScheduler+0x138>)
 800f358:	681b      	ldr	r3, [r3, #0]
 800f35a:	4a17      	ldr	r2, [pc, #92]	; (800f3b8 <xPortStartScheduler+0x138>)
 800f35c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f360:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f362:	4b15      	ldr	r3, [pc, #84]	; (800f3b8 <xPortStartScheduler+0x138>)
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	4a14      	ldr	r2, [pc, #80]	; (800f3b8 <xPortStartScheduler+0x138>)
 800f368:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f36c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f36e:	f000 f8dd 	bl	800f52c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f372:	4b12      	ldr	r3, [pc, #72]	; (800f3bc <xPortStartScheduler+0x13c>)
 800f374:	2200      	movs	r2, #0
 800f376:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f378:	f000 f8fc 	bl	800f574 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f37c:	4b10      	ldr	r3, [pc, #64]	; (800f3c0 <xPortStartScheduler+0x140>)
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	4a0f      	ldr	r2, [pc, #60]	; (800f3c0 <xPortStartScheduler+0x140>)
 800f382:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f386:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f388:	f7ff ff66 	bl	800f258 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f38c:	f7ff fa88 	bl	800e8a0 <vTaskSwitchContext>
	prvTaskExitError();
 800f390:	f7ff ff22 	bl	800f1d8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f394:	2300      	movs	r3, #0
}
 800f396:	4618      	mov	r0, r3
 800f398:	3718      	adds	r7, #24
 800f39a:	46bd      	mov	sp, r7
 800f39c:	bd80      	pop	{r7, pc}
 800f39e:	bf00      	nop
 800f3a0:	e000ed00 	.word	0xe000ed00
 800f3a4:	410fc271 	.word	0x410fc271
 800f3a8:	410fc270 	.word	0x410fc270
 800f3ac:	e000e400 	.word	0xe000e400
 800f3b0:	20004320 	.word	0x20004320
 800f3b4:	20004324 	.word	0x20004324
 800f3b8:	e000ed20 	.word	0xe000ed20
 800f3bc:	200002e8 	.word	0x200002e8
 800f3c0:	e000ef34 	.word	0xe000ef34

0800f3c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f3c4:	b480      	push	{r7}
 800f3c6:	b083      	sub	sp, #12
 800f3c8:	af00      	add	r7, sp, #0
	__asm volatile
 800f3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3ce:	f383 8811 	msr	BASEPRI, r3
 800f3d2:	f3bf 8f6f 	isb	sy
 800f3d6:	f3bf 8f4f 	dsb	sy
 800f3da:	607b      	str	r3, [r7, #4]
}
 800f3dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f3de:	4b0f      	ldr	r3, [pc, #60]	; (800f41c <vPortEnterCritical+0x58>)
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	3301      	adds	r3, #1
 800f3e4:	4a0d      	ldr	r2, [pc, #52]	; (800f41c <vPortEnterCritical+0x58>)
 800f3e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f3e8:	4b0c      	ldr	r3, [pc, #48]	; (800f41c <vPortEnterCritical+0x58>)
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	2b01      	cmp	r3, #1
 800f3ee:	d10f      	bne.n	800f410 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f3f0:	4b0b      	ldr	r3, [pc, #44]	; (800f420 <vPortEnterCritical+0x5c>)
 800f3f2:	681b      	ldr	r3, [r3, #0]
 800f3f4:	b2db      	uxtb	r3, r3
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d00a      	beq.n	800f410 <vPortEnterCritical+0x4c>
	__asm volatile
 800f3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3fe:	f383 8811 	msr	BASEPRI, r3
 800f402:	f3bf 8f6f 	isb	sy
 800f406:	f3bf 8f4f 	dsb	sy
 800f40a:	603b      	str	r3, [r7, #0]
}
 800f40c:	bf00      	nop
 800f40e:	e7fe      	b.n	800f40e <vPortEnterCritical+0x4a>
	}
}
 800f410:	bf00      	nop
 800f412:	370c      	adds	r7, #12
 800f414:	46bd      	mov	sp, r7
 800f416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41a:	4770      	bx	lr
 800f41c:	200002e8 	.word	0x200002e8
 800f420:	e000ed04 	.word	0xe000ed04

0800f424 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f424:	b480      	push	{r7}
 800f426:	b083      	sub	sp, #12
 800f428:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f42a:	4b12      	ldr	r3, [pc, #72]	; (800f474 <vPortExitCritical+0x50>)
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d10a      	bne.n	800f448 <vPortExitCritical+0x24>
	__asm volatile
 800f432:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f436:	f383 8811 	msr	BASEPRI, r3
 800f43a:	f3bf 8f6f 	isb	sy
 800f43e:	f3bf 8f4f 	dsb	sy
 800f442:	607b      	str	r3, [r7, #4]
}
 800f444:	bf00      	nop
 800f446:	e7fe      	b.n	800f446 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800f448:	4b0a      	ldr	r3, [pc, #40]	; (800f474 <vPortExitCritical+0x50>)
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	3b01      	subs	r3, #1
 800f44e:	4a09      	ldr	r2, [pc, #36]	; (800f474 <vPortExitCritical+0x50>)
 800f450:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f452:	4b08      	ldr	r3, [pc, #32]	; (800f474 <vPortExitCritical+0x50>)
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d105      	bne.n	800f466 <vPortExitCritical+0x42>
 800f45a:	2300      	movs	r3, #0
 800f45c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	f383 8811 	msr	BASEPRI, r3
}
 800f464:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800f466:	bf00      	nop
 800f468:	370c      	adds	r7, #12
 800f46a:	46bd      	mov	sp, r7
 800f46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f470:	4770      	bx	lr
 800f472:	bf00      	nop
 800f474:	200002e8 	.word	0x200002e8
	...

0800f480 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f480:	f3ef 8009 	mrs	r0, PSP
 800f484:	f3bf 8f6f 	isb	sy
 800f488:	4b15      	ldr	r3, [pc, #84]	; (800f4e0 <pxCurrentTCBConst>)
 800f48a:	681a      	ldr	r2, [r3, #0]
 800f48c:	f01e 0f10 	tst.w	lr, #16
 800f490:	bf08      	it	eq
 800f492:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f496:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f49a:	6010      	str	r0, [r2, #0]
 800f49c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f4a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f4a4:	f380 8811 	msr	BASEPRI, r0
 800f4a8:	f3bf 8f4f 	dsb	sy
 800f4ac:	f3bf 8f6f 	isb	sy
 800f4b0:	f7ff f9f6 	bl	800e8a0 <vTaskSwitchContext>
 800f4b4:	f04f 0000 	mov.w	r0, #0
 800f4b8:	f380 8811 	msr	BASEPRI, r0
 800f4bc:	bc09      	pop	{r0, r3}
 800f4be:	6819      	ldr	r1, [r3, #0]
 800f4c0:	6808      	ldr	r0, [r1, #0]
 800f4c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4c6:	f01e 0f10 	tst.w	lr, #16
 800f4ca:	bf08      	it	eq
 800f4cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f4d0:	f380 8809 	msr	PSP, r0
 800f4d4:	f3bf 8f6f 	isb	sy
 800f4d8:	4770      	bx	lr
 800f4da:	bf00      	nop
 800f4dc:	f3af 8000 	nop.w

0800f4e0 <pxCurrentTCBConst>:
 800f4e0:	200041f4 	.word	0x200041f4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f4e4:	bf00      	nop
 800f4e6:	bf00      	nop

0800f4e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f4e8:	b580      	push	{r7, lr}
 800f4ea:	b082      	sub	sp, #8
 800f4ec:	af00      	add	r7, sp, #0
	__asm volatile
 800f4ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4f2:	f383 8811 	msr	BASEPRI, r3
 800f4f6:	f3bf 8f6f 	isb	sy
 800f4fa:	f3bf 8f4f 	dsb	sy
 800f4fe:	607b      	str	r3, [r7, #4]
}
 800f500:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f502:	f7ff f915 	bl	800e730 <xTaskIncrementTick>
 800f506:	4603      	mov	r3, r0
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d003      	beq.n	800f514 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f50c:	4b06      	ldr	r3, [pc, #24]	; (800f528 <SysTick_Handler+0x40>)
 800f50e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f512:	601a      	str	r2, [r3, #0]
 800f514:	2300      	movs	r3, #0
 800f516:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	f383 8811 	msr	BASEPRI, r3
}
 800f51e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800f520:	bf00      	nop
 800f522:	3708      	adds	r7, #8
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}
 800f528:	e000ed04 	.word	0xe000ed04

0800f52c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f52c:	b480      	push	{r7}
 800f52e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f530:	4b0b      	ldr	r3, [pc, #44]	; (800f560 <vPortSetupTimerInterrupt+0x34>)
 800f532:	2200      	movs	r2, #0
 800f534:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f536:	4b0b      	ldr	r3, [pc, #44]	; (800f564 <vPortSetupTimerInterrupt+0x38>)
 800f538:	2200      	movs	r2, #0
 800f53a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f53c:	4b0a      	ldr	r3, [pc, #40]	; (800f568 <vPortSetupTimerInterrupt+0x3c>)
 800f53e:	681b      	ldr	r3, [r3, #0]
 800f540:	4a0a      	ldr	r2, [pc, #40]	; (800f56c <vPortSetupTimerInterrupt+0x40>)
 800f542:	fba2 2303 	umull	r2, r3, r2, r3
 800f546:	099b      	lsrs	r3, r3, #6
 800f548:	4a09      	ldr	r2, [pc, #36]	; (800f570 <vPortSetupTimerInterrupt+0x44>)
 800f54a:	3b01      	subs	r3, #1
 800f54c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f54e:	4b04      	ldr	r3, [pc, #16]	; (800f560 <vPortSetupTimerInterrupt+0x34>)
 800f550:	2207      	movs	r2, #7
 800f552:	601a      	str	r2, [r3, #0]
}
 800f554:	bf00      	nop
 800f556:	46bd      	mov	sp, r7
 800f558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55c:	4770      	bx	lr
 800f55e:	bf00      	nop
 800f560:	e000e010 	.word	0xe000e010
 800f564:	e000e018 	.word	0xe000e018
 800f568:	200002dc 	.word	0x200002dc
 800f56c:	10624dd3 	.word	0x10624dd3
 800f570:	e000e014 	.word	0xe000e014

0800f574 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f574:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f584 <vPortEnableVFP+0x10>
 800f578:	6801      	ldr	r1, [r0, #0]
 800f57a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f57e:	6001      	str	r1, [r0, #0]
 800f580:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f582:	bf00      	nop
 800f584:	e000ed88 	.word	0xe000ed88

0800f588 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f588:	b480      	push	{r7}
 800f58a:	b085      	sub	sp, #20
 800f58c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f58e:	f3ef 8305 	mrs	r3, IPSR
 800f592:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	2b0f      	cmp	r3, #15
 800f598:	d914      	bls.n	800f5c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f59a:	4a17      	ldr	r2, [pc, #92]	; (800f5f8 <vPortValidateInterruptPriority+0x70>)
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	4413      	add	r3, r2
 800f5a0:	781b      	ldrb	r3, [r3, #0]
 800f5a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f5a4:	4b15      	ldr	r3, [pc, #84]	; (800f5fc <vPortValidateInterruptPriority+0x74>)
 800f5a6:	781b      	ldrb	r3, [r3, #0]
 800f5a8:	7afa      	ldrb	r2, [r7, #11]
 800f5aa:	429a      	cmp	r2, r3
 800f5ac:	d20a      	bcs.n	800f5c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800f5ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5b2:	f383 8811 	msr	BASEPRI, r3
 800f5b6:	f3bf 8f6f 	isb	sy
 800f5ba:	f3bf 8f4f 	dsb	sy
 800f5be:	607b      	str	r3, [r7, #4]
}
 800f5c0:	bf00      	nop
 800f5c2:	e7fe      	b.n	800f5c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f5c4:	4b0e      	ldr	r3, [pc, #56]	; (800f600 <vPortValidateInterruptPriority+0x78>)
 800f5c6:	681b      	ldr	r3, [r3, #0]
 800f5c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f5cc:	4b0d      	ldr	r3, [pc, #52]	; (800f604 <vPortValidateInterruptPriority+0x7c>)
 800f5ce:	681b      	ldr	r3, [r3, #0]
 800f5d0:	429a      	cmp	r2, r3
 800f5d2:	d90a      	bls.n	800f5ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800f5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5d8:	f383 8811 	msr	BASEPRI, r3
 800f5dc:	f3bf 8f6f 	isb	sy
 800f5e0:	f3bf 8f4f 	dsb	sy
 800f5e4:	603b      	str	r3, [r7, #0]
}
 800f5e6:	bf00      	nop
 800f5e8:	e7fe      	b.n	800f5e8 <vPortValidateInterruptPriority+0x60>
	}
 800f5ea:	bf00      	nop
 800f5ec:	3714      	adds	r7, #20
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f4:	4770      	bx	lr
 800f5f6:	bf00      	nop
 800f5f8:	e000e3f0 	.word	0xe000e3f0
 800f5fc:	20004320 	.word	0x20004320
 800f600:	e000ed0c 	.word	0xe000ed0c
 800f604:	20004324 	.word	0x20004324

0800f608 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b08a      	sub	sp, #40	; 0x28
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f610:	2300      	movs	r3, #0
 800f612:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f614:	f7fe ffc0 	bl	800e598 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f618:	4b5b      	ldr	r3, [pc, #364]	; (800f788 <pvPortMalloc+0x180>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	d101      	bne.n	800f624 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f620:	f000 f92c 	bl	800f87c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f624:	4b59      	ldr	r3, [pc, #356]	; (800f78c <pvPortMalloc+0x184>)
 800f626:	681a      	ldr	r2, [r3, #0]
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	4013      	ands	r3, r2
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	f040 8093 	bne.w	800f758 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	2b00      	cmp	r3, #0
 800f636:	d01d      	beq.n	800f674 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800f638:	2208      	movs	r2, #8
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	4413      	add	r3, r2
 800f63e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	f003 0307 	and.w	r3, r3, #7
 800f646:	2b00      	cmp	r3, #0
 800f648:	d014      	beq.n	800f674 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	f023 0307 	bic.w	r3, r3, #7
 800f650:	3308      	adds	r3, #8
 800f652:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	f003 0307 	and.w	r3, r3, #7
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d00a      	beq.n	800f674 <pvPortMalloc+0x6c>
	__asm volatile
 800f65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f662:	f383 8811 	msr	BASEPRI, r3
 800f666:	f3bf 8f6f 	isb	sy
 800f66a:	f3bf 8f4f 	dsb	sy
 800f66e:	617b      	str	r3, [r7, #20]
}
 800f670:	bf00      	nop
 800f672:	e7fe      	b.n	800f672 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d06e      	beq.n	800f758 <pvPortMalloc+0x150>
 800f67a:	4b45      	ldr	r3, [pc, #276]	; (800f790 <pvPortMalloc+0x188>)
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	687a      	ldr	r2, [r7, #4]
 800f680:	429a      	cmp	r2, r3
 800f682:	d869      	bhi.n	800f758 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f684:	4b43      	ldr	r3, [pc, #268]	; (800f794 <pvPortMalloc+0x18c>)
 800f686:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f688:	4b42      	ldr	r3, [pc, #264]	; (800f794 <pvPortMalloc+0x18c>)
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f68e:	e004      	b.n	800f69a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800f690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f692:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f69c:	685b      	ldr	r3, [r3, #4]
 800f69e:	687a      	ldr	r2, [r7, #4]
 800f6a0:	429a      	cmp	r2, r3
 800f6a2:	d903      	bls.n	800f6ac <pvPortMalloc+0xa4>
 800f6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d1f1      	bne.n	800f690 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f6ac:	4b36      	ldr	r3, [pc, #216]	; (800f788 <pvPortMalloc+0x180>)
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6b2:	429a      	cmp	r2, r3
 800f6b4:	d050      	beq.n	800f758 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f6b6:	6a3b      	ldr	r3, [r7, #32]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	2208      	movs	r2, #8
 800f6bc:	4413      	add	r3, r2
 800f6be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6c2:	681a      	ldr	r2, [r3, #0]
 800f6c4:	6a3b      	ldr	r3, [r7, #32]
 800f6c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ca:	685a      	ldr	r2, [r3, #4]
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	1ad2      	subs	r2, r2, r3
 800f6d0:	2308      	movs	r3, #8
 800f6d2:	005b      	lsls	r3, r3, #1
 800f6d4:	429a      	cmp	r2, r3
 800f6d6:	d91f      	bls.n	800f718 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f6d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	4413      	add	r3, r2
 800f6de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f6e0:	69bb      	ldr	r3, [r7, #24]
 800f6e2:	f003 0307 	and.w	r3, r3, #7
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d00a      	beq.n	800f700 <pvPortMalloc+0xf8>
	__asm volatile
 800f6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6ee:	f383 8811 	msr	BASEPRI, r3
 800f6f2:	f3bf 8f6f 	isb	sy
 800f6f6:	f3bf 8f4f 	dsb	sy
 800f6fa:	613b      	str	r3, [r7, #16]
}
 800f6fc:	bf00      	nop
 800f6fe:	e7fe      	b.n	800f6fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f702:	685a      	ldr	r2, [r3, #4]
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	1ad2      	subs	r2, r2, r3
 800f708:	69bb      	ldr	r3, [r7, #24]
 800f70a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f70e:	687a      	ldr	r2, [r7, #4]
 800f710:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f712:	69b8      	ldr	r0, [r7, #24]
 800f714:	f000 f914 	bl	800f940 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f718:	4b1d      	ldr	r3, [pc, #116]	; (800f790 <pvPortMalloc+0x188>)
 800f71a:	681a      	ldr	r2, [r3, #0]
 800f71c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f71e:	685b      	ldr	r3, [r3, #4]
 800f720:	1ad3      	subs	r3, r2, r3
 800f722:	4a1b      	ldr	r2, [pc, #108]	; (800f790 <pvPortMalloc+0x188>)
 800f724:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f726:	4b1a      	ldr	r3, [pc, #104]	; (800f790 <pvPortMalloc+0x188>)
 800f728:	681a      	ldr	r2, [r3, #0]
 800f72a:	4b1b      	ldr	r3, [pc, #108]	; (800f798 <pvPortMalloc+0x190>)
 800f72c:	681b      	ldr	r3, [r3, #0]
 800f72e:	429a      	cmp	r2, r3
 800f730:	d203      	bcs.n	800f73a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f732:	4b17      	ldr	r3, [pc, #92]	; (800f790 <pvPortMalloc+0x188>)
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	4a18      	ldr	r2, [pc, #96]	; (800f798 <pvPortMalloc+0x190>)
 800f738:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f73c:	685a      	ldr	r2, [r3, #4]
 800f73e:	4b13      	ldr	r3, [pc, #76]	; (800f78c <pvPortMalloc+0x184>)
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	431a      	orrs	r2, r3
 800f744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f746:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f74a:	2200      	movs	r2, #0
 800f74c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800f74e:	4b13      	ldr	r3, [pc, #76]	; (800f79c <pvPortMalloc+0x194>)
 800f750:	681b      	ldr	r3, [r3, #0]
 800f752:	3301      	adds	r3, #1
 800f754:	4a11      	ldr	r2, [pc, #68]	; (800f79c <pvPortMalloc+0x194>)
 800f756:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f758:	f7fe ff2c 	bl	800e5b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f75c:	69fb      	ldr	r3, [r7, #28]
 800f75e:	f003 0307 	and.w	r3, r3, #7
 800f762:	2b00      	cmp	r3, #0
 800f764:	d00a      	beq.n	800f77c <pvPortMalloc+0x174>
	__asm volatile
 800f766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f76a:	f383 8811 	msr	BASEPRI, r3
 800f76e:	f3bf 8f6f 	isb	sy
 800f772:	f3bf 8f4f 	dsb	sy
 800f776:	60fb      	str	r3, [r7, #12]
}
 800f778:	bf00      	nop
 800f77a:	e7fe      	b.n	800f77a <pvPortMalloc+0x172>
	return pvReturn;
 800f77c:	69fb      	ldr	r3, [r7, #28]
}
 800f77e:	4618      	mov	r0, r3
 800f780:	3728      	adds	r7, #40	; 0x28
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}
 800f786:	bf00      	nop
 800f788:	2000a640 	.word	0x2000a640
 800f78c:	2000a654 	.word	0x2000a654
 800f790:	2000a644 	.word	0x2000a644
 800f794:	2000a638 	.word	0x2000a638
 800f798:	2000a648 	.word	0x2000a648
 800f79c:	2000a64c 	.word	0x2000a64c

0800f7a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b086      	sub	sp, #24
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d04d      	beq.n	800f84e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f7b2:	2308      	movs	r3, #8
 800f7b4:	425b      	negs	r3, r3
 800f7b6:	697a      	ldr	r2, [r7, #20]
 800f7b8:	4413      	add	r3, r2
 800f7ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f7bc:	697b      	ldr	r3, [r7, #20]
 800f7be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f7c0:	693b      	ldr	r3, [r7, #16]
 800f7c2:	685a      	ldr	r2, [r3, #4]
 800f7c4:	4b24      	ldr	r3, [pc, #144]	; (800f858 <vPortFree+0xb8>)
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	4013      	ands	r3, r2
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d10a      	bne.n	800f7e4 <vPortFree+0x44>
	__asm volatile
 800f7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7d2:	f383 8811 	msr	BASEPRI, r3
 800f7d6:	f3bf 8f6f 	isb	sy
 800f7da:	f3bf 8f4f 	dsb	sy
 800f7de:	60fb      	str	r3, [r7, #12]
}
 800f7e0:	bf00      	nop
 800f7e2:	e7fe      	b.n	800f7e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f7e4:	693b      	ldr	r3, [r7, #16]
 800f7e6:	681b      	ldr	r3, [r3, #0]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d00a      	beq.n	800f802 <vPortFree+0x62>
	__asm volatile
 800f7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7f0:	f383 8811 	msr	BASEPRI, r3
 800f7f4:	f3bf 8f6f 	isb	sy
 800f7f8:	f3bf 8f4f 	dsb	sy
 800f7fc:	60bb      	str	r3, [r7, #8]
}
 800f7fe:	bf00      	nop
 800f800:	e7fe      	b.n	800f800 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f802:	693b      	ldr	r3, [r7, #16]
 800f804:	685a      	ldr	r2, [r3, #4]
 800f806:	4b14      	ldr	r3, [pc, #80]	; (800f858 <vPortFree+0xb8>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	4013      	ands	r3, r2
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d01e      	beq.n	800f84e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f810:	693b      	ldr	r3, [r7, #16]
 800f812:	681b      	ldr	r3, [r3, #0]
 800f814:	2b00      	cmp	r3, #0
 800f816:	d11a      	bne.n	800f84e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f818:	693b      	ldr	r3, [r7, #16]
 800f81a:	685a      	ldr	r2, [r3, #4]
 800f81c:	4b0e      	ldr	r3, [pc, #56]	; (800f858 <vPortFree+0xb8>)
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	43db      	mvns	r3, r3
 800f822:	401a      	ands	r2, r3
 800f824:	693b      	ldr	r3, [r7, #16]
 800f826:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f828:	f7fe feb6 	bl	800e598 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f82c:	693b      	ldr	r3, [r7, #16]
 800f82e:	685a      	ldr	r2, [r3, #4]
 800f830:	4b0a      	ldr	r3, [pc, #40]	; (800f85c <vPortFree+0xbc>)
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	4413      	add	r3, r2
 800f836:	4a09      	ldr	r2, [pc, #36]	; (800f85c <vPortFree+0xbc>)
 800f838:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f83a:	6938      	ldr	r0, [r7, #16]
 800f83c:	f000 f880 	bl	800f940 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f840:	4b07      	ldr	r3, [pc, #28]	; (800f860 <vPortFree+0xc0>)
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	3301      	adds	r3, #1
 800f846:	4a06      	ldr	r2, [pc, #24]	; (800f860 <vPortFree+0xc0>)
 800f848:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f84a:	f7fe feb3 	bl	800e5b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f84e:	bf00      	nop
 800f850:	3718      	adds	r7, #24
 800f852:	46bd      	mov	sp, r7
 800f854:	bd80      	pop	{r7, pc}
 800f856:	bf00      	nop
 800f858:	2000a654 	.word	0x2000a654
 800f85c:	2000a644 	.word	0x2000a644
 800f860:	2000a650 	.word	0x2000a650

0800f864 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800f864:	b480      	push	{r7}
 800f866:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800f868:	4b03      	ldr	r3, [pc, #12]	; (800f878 <xPortGetFreeHeapSize+0x14>)
 800f86a:	681b      	ldr	r3, [r3, #0]
}
 800f86c:	4618      	mov	r0, r3
 800f86e:	46bd      	mov	sp, r7
 800f870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f874:	4770      	bx	lr
 800f876:	bf00      	nop
 800f878:	2000a644 	.word	0x2000a644

0800f87c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f87c:	b480      	push	{r7}
 800f87e:	b085      	sub	sp, #20
 800f880:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f882:	f246 3310 	movw	r3, #25360	; 0x6310
 800f886:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f888:	4b27      	ldr	r3, [pc, #156]	; (800f928 <prvHeapInit+0xac>)
 800f88a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	f003 0307 	and.w	r3, r3, #7
 800f892:	2b00      	cmp	r3, #0
 800f894:	d00c      	beq.n	800f8b0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	3307      	adds	r3, #7
 800f89a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	f023 0307 	bic.w	r3, r3, #7
 800f8a2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f8a4:	68ba      	ldr	r2, [r7, #8]
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	1ad3      	subs	r3, r2, r3
 800f8aa:	4a1f      	ldr	r2, [pc, #124]	; (800f928 <prvHeapInit+0xac>)
 800f8ac:	4413      	add	r3, r2
 800f8ae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f8b4:	4a1d      	ldr	r2, [pc, #116]	; (800f92c <prvHeapInit+0xb0>)
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f8ba:	4b1c      	ldr	r3, [pc, #112]	; (800f92c <prvHeapInit+0xb0>)
 800f8bc:	2200      	movs	r2, #0
 800f8be:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	68ba      	ldr	r2, [r7, #8]
 800f8c4:	4413      	add	r3, r2
 800f8c6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f8c8:	2208      	movs	r2, #8
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	1a9b      	subs	r3, r3, r2
 800f8ce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	f023 0307 	bic.w	r3, r3, #7
 800f8d6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	4a15      	ldr	r2, [pc, #84]	; (800f930 <prvHeapInit+0xb4>)
 800f8dc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f8de:	4b14      	ldr	r3, [pc, #80]	; (800f930 <prvHeapInit+0xb4>)
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	2200      	movs	r2, #0
 800f8e4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f8e6:	4b12      	ldr	r3, [pc, #72]	; (800f930 <prvHeapInit+0xb4>)
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f8f2:	683b      	ldr	r3, [r7, #0]
 800f8f4:	68fa      	ldr	r2, [r7, #12]
 800f8f6:	1ad2      	subs	r2, r2, r3
 800f8f8:	683b      	ldr	r3, [r7, #0]
 800f8fa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f8fc:	4b0c      	ldr	r3, [pc, #48]	; (800f930 <prvHeapInit+0xb4>)
 800f8fe:	681a      	ldr	r2, [r3, #0]
 800f900:	683b      	ldr	r3, [r7, #0]
 800f902:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f904:	683b      	ldr	r3, [r7, #0]
 800f906:	685b      	ldr	r3, [r3, #4]
 800f908:	4a0a      	ldr	r2, [pc, #40]	; (800f934 <prvHeapInit+0xb8>)
 800f90a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f90c:	683b      	ldr	r3, [r7, #0]
 800f90e:	685b      	ldr	r3, [r3, #4]
 800f910:	4a09      	ldr	r2, [pc, #36]	; (800f938 <prvHeapInit+0xbc>)
 800f912:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f914:	4b09      	ldr	r3, [pc, #36]	; (800f93c <prvHeapInit+0xc0>)
 800f916:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f91a:	601a      	str	r2, [r3, #0]
}
 800f91c:	bf00      	nop
 800f91e:	3714      	adds	r7, #20
 800f920:	46bd      	mov	sp, r7
 800f922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f926:	4770      	bx	lr
 800f928:	20004328 	.word	0x20004328
 800f92c:	2000a638 	.word	0x2000a638
 800f930:	2000a640 	.word	0x2000a640
 800f934:	2000a648 	.word	0x2000a648
 800f938:	2000a644 	.word	0x2000a644
 800f93c:	2000a654 	.word	0x2000a654

0800f940 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f940:	b480      	push	{r7}
 800f942:	b085      	sub	sp, #20
 800f944:	af00      	add	r7, sp, #0
 800f946:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f948:	4b28      	ldr	r3, [pc, #160]	; (800f9ec <prvInsertBlockIntoFreeList+0xac>)
 800f94a:	60fb      	str	r3, [r7, #12]
 800f94c:	e002      	b.n	800f954 <prvInsertBlockIntoFreeList+0x14>
 800f94e:	68fb      	ldr	r3, [r7, #12]
 800f950:	681b      	ldr	r3, [r3, #0]
 800f952:	60fb      	str	r3, [r7, #12]
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	687a      	ldr	r2, [r7, #4]
 800f95a:	429a      	cmp	r2, r3
 800f95c:	d8f7      	bhi.n	800f94e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f95e:	68fb      	ldr	r3, [r7, #12]
 800f960:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	685b      	ldr	r3, [r3, #4]
 800f966:	68ba      	ldr	r2, [r7, #8]
 800f968:	4413      	add	r3, r2
 800f96a:	687a      	ldr	r2, [r7, #4]
 800f96c:	429a      	cmp	r2, r3
 800f96e:	d108      	bne.n	800f982 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	685a      	ldr	r2, [r3, #4]
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	685b      	ldr	r3, [r3, #4]
 800f978:	441a      	add	r2, r3
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	685b      	ldr	r3, [r3, #4]
 800f98a:	68ba      	ldr	r2, [r7, #8]
 800f98c:	441a      	add	r2, r3
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	429a      	cmp	r2, r3
 800f994:	d118      	bne.n	800f9c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	681a      	ldr	r2, [r3, #0]
 800f99a:	4b15      	ldr	r3, [pc, #84]	; (800f9f0 <prvInsertBlockIntoFreeList+0xb0>)
 800f99c:	681b      	ldr	r3, [r3, #0]
 800f99e:	429a      	cmp	r2, r3
 800f9a0:	d00d      	beq.n	800f9be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	685a      	ldr	r2, [r3, #4]
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	685b      	ldr	r3, [r3, #4]
 800f9ac:	441a      	add	r2, r3
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	681a      	ldr	r2, [r3, #0]
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	601a      	str	r2, [r3, #0]
 800f9bc:	e008      	b.n	800f9d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f9be:	4b0c      	ldr	r3, [pc, #48]	; (800f9f0 <prvInsertBlockIntoFreeList+0xb0>)
 800f9c0:	681a      	ldr	r2, [r3, #0]
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	601a      	str	r2, [r3, #0]
 800f9c6:	e003      	b.n	800f9d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	681a      	ldr	r2, [r3, #0]
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f9d0:	68fa      	ldr	r2, [r7, #12]
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	429a      	cmp	r2, r3
 800f9d6:	d002      	beq.n	800f9de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f9d8:	68fb      	ldr	r3, [r7, #12]
 800f9da:	687a      	ldr	r2, [r7, #4]
 800f9dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f9de:	bf00      	nop
 800f9e0:	3714      	adds	r7, #20
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e8:	4770      	bx	lr
 800f9ea:	bf00      	nop
 800f9ec:	2000a638 	.word	0x2000a638
 800f9f0:	2000a640 	.word	0x2000a640

0800f9f4 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b084      	sub	sp, #16
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
 800f9fc:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	330c      	adds	r3, #12
 800fa04:	461a      	mov	r2, r3
 800fa06:	6839      	ldr	r1, [r7, #0]
 800fa08:	6878      	ldr	r0, [r7, #4]
 800fa0a:	f001 fff7 	bl	80119fc <tcpip_send_msg_wait_sem>
 800fa0e:	4603      	mov	r3, r0
 800fa10:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800fa12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d103      	bne.n	800fa22 <netconn_apimsg+0x2e>
    return apimsg->err;
 800fa1a:	683b      	ldr	r3, [r7, #0]
 800fa1c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800fa20:	e001      	b.n	800fa26 <netconn_apimsg+0x32>
  }
  return err;
 800fa22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fa26:	4618      	mov	r0, r3
 800fa28:	3710      	adds	r7, #16
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	bd80      	pop	{r7, pc}
	...

0800fa30 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b08c      	sub	sp, #48	; 0x30
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	4603      	mov	r3, r0
 800fa38:	603a      	str	r2, [r7, #0]
 800fa3a:	71fb      	strb	r3, [r7, #7]
 800fa3c:	460b      	mov	r3, r1
 800fa3e:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800fa40:	79fb      	ldrb	r3, [r7, #7]
 800fa42:	6839      	ldr	r1, [r7, #0]
 800fa44:	4618      	mov	r0, r3
 800fa46:	f000 ff21 	bl	801088c <netconn_alloc>
 800fa4a:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800fa4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d054      	beq.n	800fafc <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800fa52:	79bb      	ldrb	r3, [r7, #6]
 800fa54:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800fa56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa58:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800fa5a:	f107 0308 	add.w	r3, r7, #8
 800fa5e:	4619      	mov	r1, r3
 800fa60:	4829      	ldr	r0, [pc, #164]	; (800fb08 <netconn_new_with_proto_and_callback+0xd8>)
 800fa62:	f7ff ffc7 	bl	800f9f4 <netconn_apimsg>
 800fa66:	4603      	mov	r3, r0
 800fa68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800fa6c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d043      	beq.n	800fafc <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800fa74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa76:	685b      	ldr	r3, [r3, #4]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d005      	beq.n	800fa88 <netconn_new_with_proto_and_callback+0x58>
 800fa7c:	4b23      	ldr	r3, [pc, #140]	; (800fb0c <netconn_new_with_proto_and_callback+0xdc>)
 800fa7e:	22a3      	movs	r2, #163	; 0xa3
 800fa80:	4923      	ldr	r1, [pc, #140]	; (800fb10 <netconn_new_with_proto_and_callback+0xe0>)
 800fa82:	4824      	ldr	r0, [pc, #144]	; (800fb14 <netconn_new_with_proto_and_callback+0xe4>)
 800fa84:	f00d fb16 	bl	801d0b4 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800fa88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa8a:	3310      	adds	r3, #16
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	f00c ff96 	bl	801c9be <sys_mbox_valid>
 800fa92:	4603      	mov	r3, r0
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d105      	bne.n	800faa4 <netconn_new_with_proto_and_callback+0x74>
 800fa98:	4b1c      	ldr	r3, [pc, #112]	; (800fb0c <netconn_new_with_proto_and_callback+0xdc>)
 800fa9a:	22a4      	movs	r2, #164	; 0xa4
 800fa9c:	491e      	ldr	r1, [pc, #120]	; (800fb18 <netconn_new_with_proto_and_callback+0xe8>)
 800fa9e:	481d      	ldr	r0, [pc, #116]	; (800fb14 <netconn_new_with_proto_and_callback+0xe4>)
 800faa0:	f00d fb08 	bl	801d0b4 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800faa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faa6:	3314      	adds	r3, #20
 800faa8:	4618      	mov	r0, r3
 800faaa:	f00c ff88 	bl	801c9be <sys_mbox_valid>
 800faae:	4603      	mov	r3, r0
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d005      	beq.n	800fac0 <netconn_new_with_proto_and_callback+0x90>
 800fab4:	4b15      	ldr	r3, [pc, #84]	; (800fb0c <netconn_new_with_proto_and_callback+0xdc>)
 800fab6:	22a6      	movs	r2, #166	; 0xa6
 800fab8:	4918      	ldr	r1, [pc, #96]	; (800fb1c <netconn_new_with_proto_and_callback+0xec>)
 800faba:	4816      	ldr	r0, [pc, #88]	; (800fb14 <netconn_new_with_proto_and_callback+0xe4>)
 800fabc:	f00d fafa 	bl	801d0b4 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800fac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fac2:	330c      	adds	r3, #12
 800fac4:	4618      	mov	r0, r3
 800fac6:	f00d f80b 	bl	801cae0 <sys_sem_valid>
 800faca:	4603      	mov	r3, r0
 800facc:	2b00      	cmp	r3, #0
 800face:	d105      	bne.n	800fadc <netconn_new_with_proto_and_callback+0xac>
 800fad0:	4b0e      	ldr	r3, [pc, #56]	; (800fb0c <netconn_new_with_proto_and_callback+0xdc>)
 800fad2:	22a9      	movs	r2, #169	; 0xa9
 800fad4:	4912      	ldr	r1, [pc, #72]	; (800fb20 <netconn_new_with_proto_and_callback+0xf0>)
 800fad6:	480f      	ldr	r0, [pc, #60]	; (800fb14 <netconn_new_with_proto_and_callback+0xe4>)
 800fad8:	f00d faec 	bl	801d0b4 <iprintf>
      sys_sem_free(&conn->op_completed);
 800fadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fade:	330c      	adds	r3, #12
 800fae0:	4618      	mov	r0, r3
 800fae2:	f00c fff0 	bl	801cac6 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800fae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fae8:	3310      	adds	r3, #16
 800faea:	4618      	mov	r0, r3
 800faec:	f00c fee0 	bl	801c8b0 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800faf0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800faf2:	2007      	movs	r0, #7
 800faf4:	f002 fcea 	bl	80124cc <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800faf8:	2300      	movs	r3, #0
 800fafa:	e000      	b.n	800fafe <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800fafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800fafe:	4618      	mov	r0, r3
 800fb00:	3730      	adds	r7, #48	; 0x30
 800fb02:	46bd      	mov	sp, r7
 800fb04:	bd80      	pop	{r7, pc}
 800fb06:	bf00      	nop
 800fb08:	08010861 	.word	0x08010861
 800fb0c:	0801e6f8 	.word	0x0801e6f8
 800fb10:	0801e72c 	.word	0x0801e72c
 800fb14:	0801e750 	.word	0x0801e750
 800fb18:	0801e778 	.word	0x0801e778
 800fb1c:	0801e790 	.word	0x0801e790
 800fb20:	0801e7b4 	.word	0x0801e7b4

0800fb24 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b08c      	sub	sp, #48	; 0x30
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d101      	bne.n	800fb36 <netconn_prepare_delete+0x12>
    return ERR_OK;
 800fb32:	2300      	movs	r3, #0
 800fb34:	e014      	b.n	800fb60 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800fb36:	687b      	ldr	r3, [r7, #4]
 800fb38:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800fb3a:	2329      	movs	r3, #41	; 0x29
 800fb3c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800fb3e:	f107 030c 	add.w	r3, r7, #12
 800fb42:	4619      	mov	r1, r3
 800fb44:	4808      	ldr	r0, [pc, #32]	; (800fb68 <netconn_prepare_delete+0x44>)
 800fb46:	f7ff ff55 	bl	800f9f4 <netconn_apimsg>
 800fb4a:	4603      	mov	r3, r0
 800fb4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800fb50:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800fb54:	2b00      	cmp	r3, #0
 800fb56:	d002      	beq.n	800fb5e <netconn_prepare_delete+0x3a>
    return err;
 800fb58:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800fb5c:	e000      	b.n	800fb60 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800fb5e:	2300      	movs	r3, #0
}
 800fb60:	4618      	mov	r0, r3
 800fb62:	3730      	adds	r7, #48	; 0x30
 800fb64:	46bd      	mov	sp, r7
 800fb66:	bd80      	pop	{r7, pc}
 800fb68:	08010dcd 	.word	0x08010dcd

0800fb6c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b084      	sub	sp, #16
 800fb70:	af00      	add	r7, sp, #0
 800fb72:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2b00      	cmp	r3, #0
 800fb78:	d101      	bne.n	800fb7e <netconn_delete+0x12>
    return ERR_OK;
 800fb7a:	2300      	movs	r3, #0
 800fb7c:	e00d      	b.n	800fb9a <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800fb7e:	6878      	ldr	r0, [r7, #4]
 800fb80:	f7ff ffd0 	bl	800fb24 <netconn_prepare_delete>
 800fb84:	4603      	mov	r3, r0
 800fb86:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800fb88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d102      	bne.n	800fb96 <netconn_delete+0x2a>
    netconn_free(conn);
 800fb90:	6878      	ldr	r0, [r7, #4]
 800fb92:	f000 fee9 	bl	8010968 <netconn_free>
  }
  return err;
 800fb96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	3710      	adds	r7, #16
 800fb9e:	46bd      	mov	sp, r7
 800fba0:	bd80      	pop	{r7, pc}
	...

0800fba4 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b08e      	sub	sp, #56	; 0x38
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	60f8      	str	r0, [r7, #12]
 800fbac:	60b9      	str	r1, [r7, #8]
 800fbae:	4613      	mov	r3, r2
 800fbb0:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d109      	bne.n	800fbcc <netconn_bind+0x28>
 800fbb8:	4b11      	ldr	r3, [pc, #68]	; (800fc00 <netconn_bind+0x5c>)
 800fbba:	f44f 729c 	mov.w	r2, #312	; 0x138
 800fbbe:	4911      	ldr	r1, [pc, #68]	; (800fc04 <netconn_bind+0x60>)
 800fbc0:	4811      	ldr	r0, [pc, #68]	; (800fc08 <netconn_bind+0x64>)
 800fbc2:	f00d fa77 	bl	801d0b4 <iprintf>
 800fbc6:	f06f 030f 	mvn.w	r3, #15
 800fbca:	e015      	b.n	800fbf8 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800fbcc:	68bb      	ldr	r3, [r7, #8]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d101      	bne.n	800fbd6 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800fbd2:	4b0e      	ldr	r3, [pc, #56]	; (800fc0c <netconn_bind+0x68>)
 800fbd4:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800fbda:	68bb      	ldr	r3, [r7, #8]
 800fbdc:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800fbde:	88fb      	ldrh	r3, [r7, #6]
 800fbe0:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800fbe2:	f107 0314 	add.w	r3, r7, #20
 800fbe6:	4619      	mov	r1, r3
 800fbe8:	4809      	ldr	r0, [pc, #36]	; (800fc10 <netconn_bind+0x6c>)
 800fbea:	f7ff ff03 	bl	800f9f4 <netconn_apimsg>
 800fbee:	4603      	mov	r3, r0
 800fbf0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800fbf4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800fbf8:	4618      	mov	r0, r3
 800fbfa:	3738      	adds	r7, #56	; 0x38
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bd80      	pop	{r7, pc}
 800fc00:	0801e6f8 	.word	0x0801e6f8
 800fc04:	0801e830 	.word	0x0801e830
 800fc08:	0801e750 	.word	0x0801e750
 800fc0c:	08021cfc 	.word	0x08021cfc
 800fc10:	08010f95 	.word	0x08010f95

0800fc14 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b088      	sub	sp, #32
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	60f8      	str	r0, [r7, #12]
 800fc1c:	60b9      	str	r1, [r7, #8]
 800fc1e:	4613      	mov	r3, r2
 800fc20:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800fc22:	2300      	movs	r3, #0
 800fc24:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800fc26:	68bb      	ldr	r3, [r7, #8]
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d109      	bne.n	800fc40 <netconn_recv_data+0x2c>
 800fc2c:	4b58      	ldr	r3, [pc, #352]	; (800fd90 <netconn_recv_data+0x17c>)
 800fc2e:	f44f 7212 	mov.w	r2, #584	; 0x248
 800fc32:	4958      	ldr	r1, [pc, #352]	; (800fd94 <netconn_recv_data+0x180>)
 800fc34:	4858      	ldr	r0, [pc, #352]	; (800fd98 <netconn_recv_data+0x184>)
 800fc36:	f00d fa3d 	bl	801d0b4 <iprintf>
 800fc3a:	f06f 030f 	mvn.w	r3, #15
 800fc3e:	e0a2      	b.n	800fd86 <netconn_recv_data+0x172>
  *new_buf = NULL;
 800fc40:	68bb      	ldr	r3, [r7, #8]
 800fc42:	2200      	movs	r2, #0
 800fc44:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800fc46:	68fb      	ldr	r3, [r7, #12]
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	d109      	bne.n	800fc60 <netconn_recv_data+0x4c>
 800fc4c:	4b50      	ldr	r3, [pc, #320]	; (800fd90 <netconn_recv_data+0x17c>)
 800fc4e:	f240 224a 	movw	r2, #586	; 0x24a
 800fc52:	4952      	ldr	r1, [pc, #328]	; (800fd9c <netconn_recv_data+0x188>)
 800fc54:	4850      	ldr	r0, [pc, #320]	; (800fd98 <netconn_recv_data+0x184>)
 800fc56:	f00d fa2d 	bl	801d0b4 <iprintf>
 800fc5a:	f06f 030f 	mvn.w	r3, #15
 800fc5e:	e092      	b.n	800fd86 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	3310      	adds	r3, #16
 800fc64:	4618      	mov	r0, r3
 800fc66:	f00c feaa 	bl	801c9be <sys_mbox_valid>
 800fc6a:	4603      	mov	r3, r0
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	d10e      	bne.n	800fc8e <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800fc70:	68f8      	ldr	r0, [r7, #12]
 800fc72:	f000 fa45 	bl	8010100 <netconn_err>
 800fc76:	4603      	mov	r3, r0
 800fc78:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800fc7a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d002      	beq.n	800fc88 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800fc82:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800fc86:	e07e      	b.n	800fd86 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800fc88:	f06f 030a 	mvn.w	r3, #10
 800fc8c:	e07b      	b.n	800fd86 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800fc8e:	68fb      	ldr	r3, [r7, #12]
 800fc90:	7f1b      	ldrb	r3, [r3, #28]
 800fc92:	f003 0302 	and.w	r3, r3, #2
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d10f      	bne.n	800fcba <netconn_recv_data+0xa6>
 800fc9a:	79fb      	ldrb	r3, [r7, #7]
 800fc9c:	f003 0304 	and.w	r3, r3, #4
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d10a      	bne.n	800fcba <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	7f1b      	ldrb	r3, [r3, #28]
 800fca8:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d104      	bne.n	800fcba <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d023      	beq.n	800fd02 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	3310      	adds	r3, #16
 800fcbe:	f107 0218 	add.w	r2, r7, #24
 800fcc2:	4611      	mov	r1, r2
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	f00c fe5e 	bl	801c986 <sys_arch_mbox_tryfetch>
 800fcca:	4603      	mov	r3, r0
 800fccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcd0:	d11f      	bne.n	800fd12 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800fcd2:	68f8      	ldr	r0, [r7, #12]
 800fcd4:	f000 fa14 	bl	8010100 <netconn_err>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800fcdc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800fce0:	2b00      	cmp	r3, #0
 800fce2:	d002      	beq.n	800fcea <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800fce4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800fce8:	e04d      	b.n	800fd86 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	7f1b      	ldrb	r3, [r3, #28]
 800fcee:	f003 0301 	and.w	r3, r3, #1
 800fcf2:	2b00      	cmp	r3, #0
 800fcf4:	d002      	beq.n	800fcfc <netconn_recv_data+0xe8>
        return ERR_CONN;
 800fcf6:	f06f 030a 	mvn.w	r3, #10
 800fcfa:	e044      	b.n	800fd86 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800fcfc:	f06f 0306 	mvn.w	r3, #6
 800fd00:	e041      	b.n	800fd86 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	3310      	adds	r3, #16
 800fd06:	f107 0118 	add.w	r1, r7, #24
 800fd0a:	2200      	movs	r2, #0
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	f00c fdfb 	bl	801c908 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	781b      	ldrb	r3, [r3, #0]
 800fd16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fd1a:	2b10      	cmp	r3, #16
 800fd1c:	d117      	bne.n	800fd4e <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800fd1e:	69bb      	ldr	r3, [r7, #24]
 800fd20:	f107 0217 	add.w	r2, r7, #23
 800fd24:	4611      	mov	r1, r2
 800fd26:	4618      	mov	r0, r3
 800fd28:	f000 fa3c 	bl	80101a4 <lwip_netconn_is_err_msg>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	d009      	beq.n	800fd46 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800fd32:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fd36:	f113 0f0f 	cmn.w	r3, #15
 800fd3a:	d101      	bne.n	800fd40 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	e022      	b.n	800fd86 <netconn_recv_data+0x172>
      }
      return err;
 800fd40:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800fd44:	e01f      	b.n	800fd86 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800fd46:	69bb      	ldr	r3, [r7, #24]
 800fd48:	891b      	ldrh	r3, [r3, #8]
 800fd4a:	83fb      	strh	r3, [r7, #30]
 800fd4c:	e00d      	b.n	800fd6a <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800fd4e:	69bb      	ldr	r3, [r7, #24]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d106      	bne.n	800fd62 <netconn_recv_data+0x14e>
 800fd54:	4b0e      	ldr	r3, [pc, #56]	; (800fd90 <netconn_recv_data+0x17c>)
 800fd56:	f240 2291 	movw	r2, #657	; 0x291
 800fd5a:	4911      	ldr	r1, [pc, #68]	; (800fda0 <netconn_recv_data+0x18c>)
 800fd5c:	480e      	ldr	r0, [pc, #56]	; (800fd98 <netconn_recv_data+0x184>)
 800fd5e:	f00d f9a9 	bl	801d0b4 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800fd62:	69bb      	ldr	r3, [r7, #24]
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	891b      	ldrh	r3, [r3, #8]
 800fd68:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800fd6a:	68fb      	ldr	r3, [r7, #12]
 800fd6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d005      	beq.n	800fd7e <netconn_recv_data+0x16a>
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd76:	8bfa      	ldrh	r2, [r7, #30]
 800fd78:	2101      	movs	r1, #1
 800fd7a:	68f8      	ldr	r0, [r7, #12]
 800fd7c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800fd7e:	69ba      	ldr	r2, [r7, #24]
 800fd80:	68bb      	ldr	r3, [r7, #8]
 800fd82:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800fd84:	2300      	movs	r3, #0
}
 800fd86:	4618      	mov	r0, r3
 800fd88:	3720      	adds	r7, #32
 800fd8a:	46bd      	mov	sp, r7
 800fd8c:	bd80      	pop	{r7, pc}
 800fd8e:	bf00      	nop
 800fd90:	0801e6f8 	.word	0x0801e6f8
 800fd94:	0801e910 	.word	0x0801e910
 800fd98:	0801e750 	.word	0x0801e750
 800fd9c:	0801e930 	.word	0x0801e930
 800fda0:	0801e94c 	.word	0x0801e94c

0800fda4 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800fda4:	b580      	push	{r7, lr}
 800fda6:	b084      	sub	sp, #16
 800fda8:	af00      	add	r7, sp, #0
 800fdaa:	60f8      	str	r0, [r7, #12]
 800fdac:	60b9      	str	r1, [r7, #8]
 800fdae:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d005      	beq.n	800fdc2 <netconn_tcp_recvd_msg+0x1e>
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	781b      	ldrb	r3, [r3, #0]
 800fdba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fdbe:	2b10      	cmp	r3, #16
 800fdc0:	d009      	beq.n	800fdd6 <netconn_tcp_recvd_msg+0x32>
 800fdc2:	4b0c      	ldr	r3, [pc, #48]	; (800fdf4 <netconn_tcp_recvd_msg+0x50>)
 800fdc4:	f240 22a7 	movw	r2, #679	; 0x2a7
 800fdc8:	490b      	ldr	r1, [pc, #44]	; (800fdf8 <netconn_tcp_recvd_msg+0x54>)
 800fdca:	480c      	ldr	r0, [pc, #48]	; (800fdfc <netconn_tcp_recvd_msg+0x58>)
 800fdcc:	f00d f972 	bl	801d0b4 <iprintf>
 800fdd0:	f06f 030f 	mvn.w	r3, #15
 800fdd4:	e00a      	b.n	800fdec <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	68fa      	ldr	r2, [r7, #12]
 800fdda:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	68ba      	ldr	r2, [r7, #8]
 800fde0:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800fde2:	6879      	ldr	r1, [r7, #4]
 800fde4:	4806      	ldr	r0, [pc, #24]	; (800fe00 <netconn_tcp_recvd_msg+0x5c>)
 800fde6:	f7ff fe05 	bl	800f9f4 <netconn_apimsg>
 800fdea:	4603      	mov	r3, r0
}
 800fdec:	4618      	mov	r0, r3
 800fdee:	3710      	adds	r7, #16
 800fdf0:	46bd      	mov	sp, r7
 800fdf2:	bd80      	pop	{r7, pc}
 800fdf4:	0801e6f8 	.word	0x0801e6f8
 800fdf8:	0801e958 	.word	0x0801e958
 800fdfc:	0801e750 	.word	0x0801e750
 800fe00:	080110a3 	.word	0x080110a3

0800fe04 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b090      	sub	sp, #64	; 0x40
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	60f8      	str	r0, [r7, #12]
 800fe0c:	60b9      	str	r1, [r7, #8]
 800fe0e:	4613      	mov	r3, r2
 800fe10:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	3310      	adds	r3, #16
 800fe16:	4618      	mov	r0, r3
 800fe18:	f00c fdd1 	bl	801c9be <sys_mbox_valid>
 800fe1c:	4603      	mov	r3, r0
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d102      	bne.n	800fe28 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800fe22:	f06f 030a 	mvn.w	r3, #10
 800fe26:	e06d      	b.n	800ff04 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800fe28:	68fb      	ldr	r3, [r7, #12]
 800fe2a:	7f1b      	ldrb	r3, [r3, #28]
 800fe2c:	b25b      	sxtb	r3, r3
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	da07      	bge.n	800fe42 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	7f1b      	ldrb	r3, [r3, #28]
 800fe36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fe3a:	b2da      	uxtb	r2, r3
 800fe3c:	68fb      	ldr	r3, [r7, #12]
 800fe3e:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800fe40:	e039      	b.n	800feb6 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800fe42:	79fb      	ldrb	r3, [r7, #7]
 800fe44:	461a      	mov	r2, r3
 800fe46:	68b9      	ldr	r1, [r7, #8]
 800fe48:	68f8      	ldr	r0, [r7, #12]
 800fe4a:	f7ff fee3 	bl	800fc14 <netconn_recv_data>
 800fe4e:	4603      	mov	r3, r0
 800fe50:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800fe54:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d002      	beq.n	800fe62 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800fe5c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fe60:	e050      	b.n	800ff04 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800fe62:	68bb      	ldr	r3, [r7, #8]
 800fe64:	681b      	ldr	r3, [r3, #0]
 800fe66:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800fe68:	79fb      	ldrb	r3, [r7, #7]
 800fe6a:	f003 0308 	and.w	r3, r3, #8
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d10e      	bne.n	800fe90 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800fe72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d002      	beq.n	800fe7e <netconn_recv_data_tcp+0x7a>
 800fe78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe7a:	891b      	ldrh	r3, [r3, #8]
 800fe7c:	e000      	b.n	800fe80 <netconn_recv_data_tcp+0x7c>
 800fe7e:	2301      	movs	r3, #1
 800fe80:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800fe82:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fe84:	f107 0214 	add.w	r2, r7, #20
 800fe88:	4619      	mov	r1, r3
 800fe8a:	68f8      	ldr	r0, [r7, #12]
 800fe8c:	f7ff ff8a 	bl	800fda4 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800fe90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d134      	bne.n	800ff00 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800fe96:	79fb      	ldrb	r3, [r7, #7]
 800fe98:	f003 0310 	and.w	r3, r3, #16
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d009      	beq.n	800feb4 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	7f1b      	ldrb	r3, [r3, #28]
 800fea4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fea8:	b2da      	uxtb	r2, r3
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800feae:	f06f 0306 	mvn.w	r3, #6
 800feb2:	e027      	b.n	800ff04 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800feb4:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800feb6:	68fb      	ldr	r3, [r7, #12]
 800feb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feba:	2b00      	cmp	r3, #0
 800febc:	d005      	beq.n	800feca <netconn_recv_data_tcp+0xc6>
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fec2:	2200      	movs	r2, #0
 800fec4:	2101      	movs	r1, #1
 800fec6:	68f8      	ldr	r0, [r7, #12]
 800fec8:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	685b      	ldr	r3, [r3, #4]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d10f      	bne.n	800fef2 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800fed2:	68f8      	ldr	r0, [r7, #12]
 800fed4:	f000 f914 	bl	8010100 <netconn_err>
 800fed8:	4603      	mov	r3, r0
 800feda:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800fede:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800fee2:	2b00      	cmp	r3, #0
 800fee4:	d002      	beq.n	800feec <netconn_recv_data_tcp+0xe8>
          return err;
 800fee6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800feea:	e00b      	b.n	800ff04 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800feec:	f06f 030d 	mvn.w	r3, #13
 800fef0:	e008      	b.n	800ff04 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800fef2:	2101      	movs	r1, #1
 800fef4:	68f8      	ldr	r0, [r7, #12]
 800fef6:	f000 f8d3 	bl	80100a0 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800fefa:	f06f 030e 	mvn.w	r3, #14
 800fefe:	e001      	b.n	800ff04 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800ff00:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800ff04:	4618      	mov	r0, r3
 800ff06:	3740      	adds	r7, #64	; 0x40
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	bd80      	pop	{r7, pc}

0800ff0c <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800ff0c:	b580      	push	{r7, lr}
 800ff0e:	b086      	sub	sp, #24
 800ff10:	af00      	add	r7, sp, #0
 800ff12:	6078      	str	r0, [r7, #4]
 800ff14:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800ff16:	2300      	movs	r3, #0
 800ff18:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800ff1a:	683b      	ldr	r3, [r7, #0]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d109      	bne.n	800ff34 <netconn_recv+0x28>
 800ff20:	4b32      	ldr	r3, [pc, #200]	; (800ffec <netconn_recv+0xe0>)
 800ff22:	f240 3263 	movw	r2, #867	; 0x363
 800ff26:	4932      	ldr	r1, [pc, #200]	; (800fff0 <netconn_recv+0xe4>)
 800ff28:	4832      	ldr	r0, [pc, #200]	; (800fff4 <netconn_recv+0xe8>)
 800ff2a:	f00d f8c3 	bl	801d0b4 <iprintf>
 800ff2e:	f06f 030f 	mvn.w	r3, #15
 800ff32:	e056      	b.n	800ffe2 <netconn_recv+0xd6>
  *new_buf = NULL;
 800ff34:	683b      	ldr	r3, [r7, #0]
 800ff36:	2200      	movs	r2, #0
 800ff38:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	2b00      	cmp	r3, #0
 800ff3e:	d109      	bne.n	800ff54 <netconn_recv+0x48>
 800ff40:	4b2a      	ldr	r3, [pc, #168]	; (800ffec <netconn_recv+0xe0>)
 800ff42:	f240 3265 	movw	r2, #869	; 0x365
 800ff46:	492c      	ldr	r1, [pc, #176]	; (800fff8 <netconn_recv+0xec>)
 800ff48:	482a      	ldr	r0, [pc, #168]	; (800fff4 <netconn_recv+0xe8>)
 800ff4a:	f00d f8b3 	bl	801d0b4 <iprintf>
 800ff4e:	f06f 030f 	mvn.w	r3, #15
 800ff52:	e046      	b.n	800ffe2 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	781b      	ldrb	r3, [r3, #0]
 800ff58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ff5c:	2b10      	cmp	r3, #16
 800ff5e:	d13a      	bne.n	800ffd6 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800ff60:	2300      	movs	r3, #0
 800ff62:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800ff64:	2006      	movs	r0, #6
 800ff66:	f002 fa5f 	bl	8012428 <memp_malloc>
 800ff6a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800ff6c:	697b      	ldr	r3, [r7, #20]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d102      	bne.n	800ff78 <netconn_recv+0x6c>
      return ERR_MEM;
 800ff72:	f04f 33ff 	mov.w	r3, #4294967295
 800ff76:	e034      	b.n	800ffe2 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800ff78:	f107 030c 	add.w	r3, r7, #12
 800ff7c:	2200      	movs	r2, #0
 800ff7e:	4619      	mov	r1, r3
 800ff80:	6878      	ldr	r0, [r7, #4]
 800ff82:	f7ff ff3f 	bl	800fe04 <netconn_recv_data_tcp>
 800ff86:	4603      	mov	r3, r0
 800ff88:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800ff8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d006      	beq.n	800ffa0 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800ff92:	6979      	ldr	r1, [r7, #20]
 800ff94:	2006      	movs	r0, #6
 800ff96:	f002 fa99 	bl	80124cc <memp_free>
      return err;
 800ff9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ff9e:	e020      	b.n	800ffe2 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800ffa0:	68fb      	ldr	r3, [r7, #12]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d106      	bne.n	800ffb4 <netconn_recv+0xa8>
 800ffa6:	4b11      	ldr	r3, [pc, #68]	; (800ffec <netconn_recv+0xe0>)
 800ffa8:	f240 3279 	movw	r2, #889	; 0x379
 800ffac:	4913      	ldr	r1, [pc, #76]	; (800fffc <netconn_recv+0xf0>)
 800ffae:	4811      	ldr	r0, [pc, #68]	; (800fff4 <netconn_recv+0xe8>)
 800ffb0:	f00d f880 	bl	801d0b4 <iprintf>

    buf->p = p;
 800ffb4:	68fa      	ldr	r2, [r7, #12]
 800ffb6:	697b      	ldr	r3, [r7, #20]
 800ffb8:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800ffba:	68fa      	ldr	r2, [r7, #12]
 800ffbc:	697b      	ldr	r3, [r7, #20]
 800ffbe:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800ffc0:	697b      	ldr	r3, [r7, #20]
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800ffc6:	697b      	ldr	r3, [r7, #20]
 800ffc8:	2200      	movs	r2, #0
 800ffca:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800ffcc:	683b      	ldr	r3, [r7, #0]
 800ffce:	697a      	ldr	r2, [r7, #20]
 800ffd0:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800ffd2:	2300      	movs	r3, #0
 800ffd4:	e005      	b.n	800ffe2 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	6839      	ldr	r1, [r7, #0]
 800ffda:	6878      	ldr	r0, [r7, #4]
 800ffdc:	f7ff fe1a 	bl	800fc14 <netconn_recv_data>
 800ffe0:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800ffe2:	4618      	mov	r0, r3
 800ffe4:	3718      	adds	r7, #24
 800ffe6:	46bd      	mov	sp, r7
 800ffe8:	bd80      	pop	{r7, pc}
 800ffea:	bf00      	nop
 800ffec:	0801e6f8 	.word	0x0801e6f8
 800fff0:	0801e910 	.word	0x0801e910
 800fff4:	0801e750 	.word	0x0801e750
 800fff8:	0801e930 	.word	0x0801e930
 800fffc:	0801e9a8 	.word	0x0801e9a8

08010000 <netconn_sendto>:
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, const ip_addr_t *addr, u16_t port)
{
 8010000:	b580      	push	{r7, lr}
 8010002:	b084      	sub	sp, #16
 8010004:	af00      	add	r7, sp, #0
 8010006:	60f8      	str	r0, [r7, #12]
 8010008:	60b9      	str	r1, [r7, #8]
 801000a:	607a      	str	r2, [r7, #4]
 801000c:	807b      	strh	r3, [r7, #2]
  if (buf != NULL) {
 801000e:	68bb      	ldr	r3, [r7, #8]
 8010010:	2b00      	cmp	r3, #0
 8010012:	d011      	beq.n	8010038 <netconn_sendto+0x38>
    ip_addr_set(&buf->addr, addr);
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	2b00      	cmp	r3, #0
 8010018:	d002      	beq.n	8010020 <netconn_sendto+0x20>
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	e000      	b.n	8010022 <netconn_sendto+0x22>
 8010020:	2300      	movs	r3, #0
 8010022:	68ba      	ldr	r2, [r7, #8]
 8010024:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8010026:	68bb      	ldr	r3, [r7, #8]
 8010028:	887a      	ldrh	r2, [r7, #2]
 801002a:	819a      	strh	r2, [r3, #12]
    return netconn_send(conn, buf);
 801002c:	68b9      	ldr	r1, [r7, #8]
 801002e:	68f8      	ldr	r0, [r7, #12]
 8010030:	f000 f808 	bl	8010044 <netconn_send>
 8010034:	4603      	mov	r3, r0
 8010036:	e001      	b.n	801003c <netconn_sendto+0x3c>
  }
  return ERR_VAL;
 8010038:	f06f 0305 	mvn.w	r3, #5
}
 801003c:	4618      	mov	r0, r3
 801003e:	3710      	adds	r7, #16
 8010040:	46bd      	mov	sp, r7
 8010042:	bd80      	pop	{r7, pc}

08010044 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 8010044:	b580      	push	{r7, lr}
 8010046:	b08c      	sub	sp, #48	; 0x30
 8010048:	af00      	add	r7, sp, #0
 801004a:	6078      	str	r0, [r7, #4]
 801004c:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d109      	bne.n	8010068 <netconn_send+0x24>
 8010054:	4b0e      	ldr	r3, [pc, #56]	; (8010090 <netconn_send+0x4c>)
 8010056:	f240 32b2 	movw	r2, #946	; 0x3b2
 801005a:	490e      	ldr	r1, [pc, #56]	; (8010094 <netconn_send+0x50>)
 801005c:	480e      	ldr	r0, [pc, #56]	; (8010098 <netconn_send+0x54>)
 801005e:	f00d f829 	bl	801d0b4 <iprintf>
 8010062:	f06f 030f 	mvn.w	r3, #15
 8010066:	e00e      	b.n	8010086 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 801006c:	683b      	ldr	r3, [r7, #0]
 801006e:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8010070:	f107 030c 	add.w	r3, r7, #12
 8010074:	4619      	mov	r1, r3
 8010076:	4809      	ldr	r0, [pc, #36]	; (801009c <netconn_send+0x58>)
 8010078:	f7ff fcbc 	bl	800f9f4 <netconn_apimsg>
 801007c:	4603      	mov	r3, r0
 801007e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8010082:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8010086:	4618      	mov	r0, r3
 8010088:	3730      	adds	r7, #48	; 0x30
 801008a:	46bd      	mov	sp, r7
 801008c:	bd80      	pop	{r7, pc}
 801008e:	bf00      	nop
 8010090:	0801e6f8 	.word	0x0801e6f8
 8010094:	0801e9b4 	.word	0x0801e9b4
 8010098:	0801e750 	.word	0x0801e750
 801009c:	08011009 	.word	0x08011009

080100a0 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80100a0:	b580      	push	{r7, lr}
 80100a2:	b08c      	sub	sp, #48	; 0x30
 80100a4:	af00      	add	r7, sp, #0
 80100a6:	6078      	str	r0, [r7, #4]
 80100a8:	460b      	mov	r3, r1
 80100aa:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d109      	bne.n	80100c6 <netconn_close_shutdown+0x26>
 80100b2:	4b0f      	ldr	r3, [pc, #60]	; (80100f0 <netconn_close_shutdown+0x50>)
 80100b4:	f240 4247 	movw	r2, #1095	; 0x447
 80100b8:	490e      	ldr	r1, [pc, #56]	; (80100f4 <netconn_close_shutdown+0x54>)
 80100ba:	480f      	ldr	r0, [pc, #60]	; (80100f8 <netconn_close_shutdown+0x58>)
 80100bc:	f00c fffa 	bl	801d0b4 <iprintf>
 80100c0:	f06f 030f 	mvn.w	r3, #15
 80100c4:	e010      	b.n	80100e8 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 80100ca:	78fb      	ldrb	r3, [r7, #3]
 80100cc:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 80100ce:	2329      	movs	r3, #41	; 0x29
 80100d0:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 80100d2:	f107 030c 	add.w	r3, r7, #12
 80100d6:	4619      	mov	r1, r3
 80100d8:	4808      	ldr	r0, [pc, #32]	; (80100fc <netconn_close_shutdown+0x5c>)
 80100da:	f7ff fc8b 	bl	800f9f4 <netconn_apimsg>
 80100de:	4603      	mov	r3, r0
 80100e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 80100e4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 80100e8:	4618      	mov	r0, r3
 80100ea:	3730      	adds	r7, #48	; 0x30
 80100ec:	46bd      	mov	sp, r7
 80100ee:	bd80      	pop	{r7, pc}
 80100f0:	0801e6f8 	.word	0x0801e6f8
 80100f4:	0801ea34 	.word	0x0801ea34
 80100f8:	0801e750 	.word	0x0801e750
 80100fc:	080114a5 	.word	0x080114a5

08010100 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8010100:	b580      	push	{r7, lr}
 8010102:	b084      	sub	sp, #16
 8010104:	af00      	add	r7, sp, #0
 8010106:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	2b00      	cmp	r3, #0
 801010c:	d101      	bne.n	8010112 <netconn_err+0x12>
    return ERR_OK;
 801010e:	2300      	movs	r3, #0
 8010110:	e00d      	b.n	801012e <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8010112:	f00c fd6f 	bl	801cbf4 <sys_arch_protect>
 8010116:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	7a1b      	ldrb	r3, [r3, #8]
 801011c:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	2200      	movs	r2, #0
 8010122:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8010124:	68f8      	ldr	r0, [r7, #12]
 8010126:	f00c fd73 	bl	801cc10 <sys_arch_unprotect>
  return err;
 801012a:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801012e:	4618      	mov	r0, r3
 8010130:	3710      	adds	r7, #16
 8010132:	46bd      	mov	sp, r7
 8010134:	bd80      	pop	{r7, pc}
	...

08010138 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8010138:	b580      	push	{r7, lr}
 801013a:	b082      	sub	sp, #8
 801013c:	af00      	add	r7, sp, #0
 801013e:	4603      	mov	r3, r0
 8010140:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8010142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010146:	f113 0f0d 	cmn.w	r3, #13
 801014a:	d009      	beq.n	8010160 <lwip_netconn_err_to_msg+0x28>
 801014c:	f113 0f0d 	cmn.w	r3, #13
 8010150:	dc0c      	bgt.n	801016c <lwip_netconn_err_to_msg+0x34>
 8010152:	f113 0f0f 	cmn.w	r3, #15
 8010156:	d007      	beq.n	8010168 <lwip_netconn_err_to_msg+0x30>
 8010158:	f113 0f0e 	cmn.w	r3, #14
 801015c:	d002      	beq.n	8010164 <lwip_netconn_err_to_msg+0x2c>
 801015e:	e005      	b.n	801016c <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8010160:	4b0a      	ldr	r3, [pc, #40]	; (801018c <lwip_netconn_err_to_msg+0x54>)
 8010162:	e00e      	b.n	8010182 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8010164:	4b0a      	ldr	r3, [pc, #40]	; (8010190 <lwip_netconn_err_to_msg+0x58>)
 8010166:	e00c      	b.n	8010182 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8010168:	4b0a      	ldr	r3, [pc, #40]	; (8010194 <lwip_netconn_err_to_msg+0x5c>)
 801016a:	e00a      	b.n	8010182 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 801016c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8010170:	2b00      	cmp	r3, #0
 8010172:	d005      	beq.n	8010180 <lwip_netconn_err_to_msg+0x48>
 8010174:	4b08      	ldr	r3, [pc, #32]	; (8010198 <lwip_netconn_err_to_msg+0x60>)
 8010176:	227d      	movs	r2, #125	; 0x7d
 8010178:	4908      	ldr	r1, [pc, #32]	; (801019c <lwip_netconn_err_to_msg+0x64>)
 801017a:	4809      	ldr	r0, [pc, #36]	; (80101a0 <lwip_netconn_err_to_msg+0x68>)
 801017c:	f00c ff9a 	bl	801d0b4 <iprintf>
      return NULL;
 8010180:	2300      	movs	r3, #0
  }
}
 8010182:	4618      	mov	r0, r3
 8010184:	3708      	adds	r7, #8
 8010186:	46bd      	mov	sp, r7
 8010188:	bd80      	pop	{r7, pc}
 801018a:	bf00      	nop
 801018c:	08021be8 	.word	0x08021be8
 8010190:	08021be9 	.word	0x08021be9
 8010194:	08021bea 	.word	0x08021bea
 8010198:	0801ea50 	.word	0x0801ea50
 801019c:	0801ea84 	.word	0x0801ea84
 80101a0:	0801ea94 	.word	0x0801ea94

080101a4 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 80101a4:	b580      	push	{r7, lr}
 80101a6:	b082      	sub	sp, #8
 80101a8:	af00      	add	r7, sp, #0
 80101aa:	6078      	str	r0, [r7, #4]
 80101ac:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 80101ae:	683b      	ldr	r3, [r7, #0]
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	d105      	bne.n	80101c0 <lwip_netconn_is_err_msg+0x1c>
 80101b4:	4b12      	ldr	r3, [pc, #72]	; (8010200 <lwip_netconn_is_err_msg+0x5c>)
 80101b6:	2285      	movs	r2, #133	; 0x85
 80101b8:	4912      	ldr	r1, [pc, #72]	; (8010204 <lwip_netconn_is_err_msg+0x60>)
 80101ba:	4813      	ldr	r0, [pc, #76]	; (8010208 <lwip_netconn_is_err_msg+0x64>)
 80101bc:	f00c ff7a 	bl	801d0b4 <iprintf>

  if (msg == &netconn_aborted) {
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	4a12      	ldr	r2, [pc, #72]	; (801020c <lwip_netconn_is_err_msg+0x68>)
 80101c4:	4293      	cmp	r3, r2
 80101c6:	d104      	bne.n	80101d2 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 80101c8:	683b      	ldr	r3, [r7, #0]
 80101ca:	22f3      	movs	r2, #243	; 0xf3
 80101cc:	701a      	strb	r2, [r3, #0]
    return 1;
 80101ce:	2301      	movs	r3, #1
 80101d0:	e012      	b.n	80101f8 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	4a0e      	ldr	r2, [pc, #56]	; (8010210 <lwip_netconn_is_err_msg+0x6c>)
 80101d6:	4293      	cmp	r3, r2
 80101d8:	d104      	bne.n	80101e4 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 80101da:	683b      	ldr	r3, [r7, #0]
 80101dc:	22f2      	movs	r2, #242	; 0xf2
 80101de:	701a      	strb	r2, [r3, #0]
    return 1;
 80101e0:	2301      	movs	r3, #1
 80101e2:	e009      	b.n	80101f8 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	4a0b      	ldr	r2, [pc, #44]	; (8010214 <lwip_netconn_is_err_msg+0x70>)
 80101e8:	4293      	cmp	r3, r2
 80101ea:	d104      	bne.n	80101f6 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	22f1      	movs	r2, #241	; 0xf1
 80101f0:	701a      	strb	r2, [r3, #0]
    return 1;
 80101f2:	2301      	movs	r3, #1
 80101f4:	e000      	b.n	80101f8 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 80101f6:	2300      	movs	r3, #0
}
 80101f8:	4618      	mov	r0, r3
 80101fa:	3708      	adds	r7, #8
 80101fc:	46bd      	mov	sp, r7
 80101fe:	bd80      	pop	{r7, pc}
 8010200:	0801ea50 	.word	0x0801ea50
 8010204:	0801eabc 	.word	0x0801eabc
 8010208:	0801ea94 	.word	0x0801ea94
 801020c:	08021be8 	.word	0x08021be8
 8010210:	08021be9 	.word	0x08021be9
 8010214:	08021bea 	.word	0x08021bea

08010218 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8010218:	b580      	push	{r7, lr}
 801021a:	b088      	sub	sp, #32
 801021c:	af00      	add	r7, sp, #0
 801021e:	60f8      	str	r0, [r7, #12]
 8010220:	60b9      	str	r1, [r7, #8]
 8010222:	607a      	str	r2, [r7, #4]
 8010224:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8010226:	68bb      	ldr	r3, [r7, #8]
 8010228:	2b00      	cmp	r3, #0
 801022a:	d105      	bne.n	8010238 <recv_udp+0x20>
 801022c:	4b34      	ldr	r3, [pc, #208]	; (8010300 <recv_udp+0xe8>)
 801022e:	22e5      	movs	r2, #229	; 0xe5
 8010230:	4934      	ldr	r1, [pc, #208]	; (8010304 <recv_udp+0xec>)
 8010232:	4835      	ldr	r0, [pc, #212]	; (8010308 <recv_udp+0xf0>)
 8010234:	f00c ff3e 	bl	801d0b4 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	2b00      	cmp	r3, #0
 801023c:	d105      	bne.n	801024a <recv_udp+0x32>
 801023e:	4b30      	ldr	r3, [pc, #192]	; (8010300 <recv_udp+0xe8>)
 8010240:	22e6      	movs	r2, #230	; 0xe6
 8010242:	4932      	ldr	r1, [pc, #200]	; (801030c <recv_udp+0xf4>)
 8010244:	4830      	ldr	r0, [pc, #192]	; (8010308 <recv_udp+0xf0>)
 8010246:	f00c ff35 	bl	801d0b4 <iprintf>
  conn = (struct netconn *)arg;
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 801024e:	69fb      	ldr	r3, [r7, #28]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d103      	bne.n	801025c <recv_udp+0x44>
    pbuf_free(p);
 8010254:	6878      	ldr	r0, [r7, #4]
 8010256:	f002 ff79 	bl	801314c <pbuf_free>
    return;
 801025a:	e04d      	b.n	80102f8 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 801025c:	69fb      	ldr	r3, [r7, #28]
 801025e:	685b      	ldr	r3, [r3, #4]
 8010260:	68ba      	ldr	r2, [r7, #8]
 8010262:	429a      	cmp	r2, r3
 8010264:	d005      	beq.n	8010272 <recv_udp+0x5a>
 8010266:	4b26      	ldr	r3, [pc, #152]	; (8010300 <recv_udp+0xe8>)
 8010268:	22ee      	movs	r2, #238	; 0xee
 801026a:	4929      	ldr	r1, [pc, #164]	; (8010310 <recv_udp+0xf8>)
 801026c:	4826      	ldr	r0, [pc, #152]	; (8010308 <recv_udp+0xf0>)
 801026e:	f00c ff21 	bl	801d0b4 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8010272:	69fb      	ldr	r3, [r7, #28]
 8010274:	3310      	adds	r3, #16
 8010276:	4618      	mov	r0, r3
 8010278:	f00c fba1 	bl	801c9be <sys_mbox_valid>
 801027c:	4603      	mov	r3, r0
 801027e:	2b00      	cmp	r3, #0
 8010280:	d103      	bne.n	801028a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8010282:	6878      	ldr	r0, [r7, #4]
 8010284:	f002 ff62 	bl	801314c <pbuf_free>
    return;
 8010288:	e036      	b.n	80102f8 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 801028a:	2006      	movs	r0, #6
 801028c:	f002 f8cc 	bl	8012428 <memp_malloc>
 8010290:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8010292:	69bb      	ldr	r3, [r7, #24]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d103      	bne.n	80102a0 <recv_udp+0x88>
    pbuf_free(p);
 8010298:	6878      	ldr	r0, [r7, #4]
 801029a:	f002 ff57 	bl	801314c <pbuf_free>
    return;
 801029e:	e02b      	b.n	80102f8 <recv_udp+0xe0>
  } else {
    buf->p = p;
 80102a0:	69bb      	ldr	r3, [r7, #24]
 80102a2:	687a      	ldr	r2, [r7, #4]
 80102a4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80102a6:	69bb      	ldr	r3, [r7, #24]
 80102a8:	687a      	ldr	r2, [r7, #4]
 80102aa:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 80102ac:	683b      	ldr	r3, [r7, #0]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d002      	beq.n	80102b8 <recv_udp+0xa0>
 80102b2:	683b      	ldr	r3, [r7, #0]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	e000      	b.n	80102ba <recv_udp+0xa2>
 80102b8:	2300      	movs	r3, #0
 80102ba:	69ba      	ldr	r2, [r7, #24]
 80102bc:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80102be:	69bb      	ldr	r3, [r7, #24]
 80102c0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80102c2:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	891b      	ldrh	r3, [r3, #8]
 80102c8:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 80102ca:	69fb      	ldr	r3, [r7, #28]
 80102cc:	3310      	adds	r3, #16
 80102ce:	69b9      	ldr	r1, [r7, #24]
 80102d0:	4618      	mov	r0, r3
 80102d2:	f00c faff 	bl	801c8d4 <sys_mbox_trypost>
 80102d6:	4603      	mov	r3, r0
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d003      	beq.n	80102e4 <recv_udp+0xcc>
    netbuf_delete(buf);
 80102dc:	69b8      	ldr	r0, [r7, #24]
 80102de:	f001 f981 	bl	80115e4 <netbuf_delete>
    return;
 80102e2:	e009      	b.n	80102f8 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80102e4:	69fb      	ldr	r3, [r7, #28]
 80102e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d005      	beq.n	80102f8 <recv_udp+0xe0>
 80102ec:	69fb      	ldr	r3, [r7, #28]
 80102ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102f0:	8afa      	ldrh	r2, [r7, #22]
 80102f2:	2100      	movs	r1, #0
 80102f4:	69f8      	ldr	r0, [r7, #28]
 80102f6:	4798      	blx	r3
  }
}
 80102f8:	3720      	adds	r7, #32
 80102fa:	46bd      	mov	sp, r7
 80102fc:	bd80      	pop	{r7, pc}
 80102fe:	bf00      	nop
 8010300:	0801ea50 	.word	0x0801ea50
 8010304:	0801eac8 	.word	0x0801eac8
 8010308:	0801ea94 	.word	0x0801ea94
 801030c:	0801eaec 	.word	0x0801eaec
 8010310:	0801eb0c 	.word	0x0801eb0c

08010314 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b088      	sub	sp, #32
 8010318:	af00      	add	r7, sp, #0
 801031a:	60f8      	str	r0, [r7, #12]
 801031c:	60b9      	str	r1, [r7, #8]
 801031e:	607a      	str	r2, [r7, #4]
 8010320:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 8010322:	68bb      	ldr	r3, [r7, #8]
 8010324:	2b00      	cmp	r3, #0
 8010326:	d106      	bne.n	8010336 <recv_tcp+0x22>
 8010328:	4b36      	ldr	r3, [pc, #216]	; (8010404 <recv_tcp+0xf0>)
 801032a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801032e:	4936      	ldr	r1, [pc, #216]	; (8010408 <recv_tcp+0xf4>)
 8010330:	4836      	ldr	r0, [pc, #216]	; (801040c <recv_tcp+0xf8>)
 8010332:	f00c febf 	bl	801d0b4 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d106      	bne.n	801034a <recv_tcp+0x36>
 801033c:	4b31      	ldr	r3, [pc, #196]	; (8010404 <recv_tcp+0xf0>)
 801033e:	f240 122d 	movw	r2, #301	; 0x12d
 8010342:	4933      	ldr	r1, [pc, #204]	; (8010410 <recv_tcp+0xfc>)
 8010344:	4831      	ldr	r0, [pc, #196]	; (801040c <recv_tcp+0xf8>)
 8010346:	f00c feb5 	bl	801d0b4 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 801034a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d006      	beq.n	8010360 <recv_tcp+0x4c>
 8010352:	4b2c      	ldr	r3, [pc, #176]	; (8010404 <recv_tcp+0xf0>)
 8010354:	f44f 7297 	mov.w	r2, #302	; 0x12e
 8010358:	492e      	ldr	r1, [pc, #184]	; (8010414 <recv_tcp+0x100>)
 801035a:	482c      	ldr	r0, [pc, #176]	; (801040c <recv_tcp+0xf8>)
 801035c:	f00c feaa 	bl	801d0b4 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 8010364:	697b      	ldr	r3, [r7, #20]
 8010366:	2b00      	cmp	r3, #0
 8010368:	d102      	bne.n	8010370 <recv_tcp+0x5c>
    return ERR_VAL;
 801036a:	f06f 0305 	mvn.w	r3, #5
 801036e:	e045      	b.n	80103fc <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8010370:	697b      	ldr	r3, [r7, #20]
 8010372:	685b      	ldr	r3, [r3, #4]
 8010374:	68ba      	ldr	r2, [r7, #8]
 8010376:	429a      	cmp	r2, r3
 8010378:	d006      	beq.n	8010388 <recv_tcp+0x74>
 801037a:	4b22      	ldr	r3, [pc, #136]	; (8010404 <recv_tcp+0xf0>)
 801037c:	f240 1235 	movw	r2, #309	; 0x135
 8010380:	4925      	ldr	r1, [pc, #148]	; (8010418 <recv_tcp+0x104>)
 8010382:	4822      	ldr	r0, [pc, #136]	; (801040c <recv_tcp+0xf8>)
 8010384:	f00c fe96 	bl	801d0b4 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8010388:	697b      	ldr	r3, [r7, #20]
 801038a:	3310      	adds	r3, #16
 801038c:	4618      	mov	r0, r3
 801038e:	f00c fb16 	bl	801c9be <sys_mbox_valid>
 8010392:	4603      	mov	r3, r0
 8010394:	2b00      	cmp	r3, #0
 8010396:	d10d      	bne.n	80103b4 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d008      	beq.n	80103b0 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 801039e:	687b      	ldr	r3, [r7, #4]
 80103a0:	891b      	ldrh	r3, [r3, #8]
 80103a2:	4619      	mov	r1, r3
 80103a4:	68b8      	ldr	r0, [r7, #8]
 80103a6:	f003 fdcf 	bl	8013f48 <tcp_recved>
      pbuf_free(p);
 80103aa:	6878      	ldr	r0, [r7, #4]
 80103ac:	f002 fece 	bl	801314c <pbuf_free>
    }
    return ERR_OK;
 80103b0:	2300      	movs	r3, #0
 80103b2:	e023      	b.n	80103fc <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d005      	beq.n	80103c6 <recv_tcp+0xb2>
    msg = p;
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	891b      	ldrh	r3, [r3, #8]
 80103c2:	83fb      	strh	r3, [r7, #30]
 80103c4:	e003      	b.n	80103ce <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 80103c6:	4b15      	ldr	r3, [pc, #84]	; (801041c <recv_tcp+0x108>)
 80103c8:	61bb      	str	r3, [r7, #24]
    len = 0;
 80103ca:	2300      	movs	r3, #0
 80103cc:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 80103ce:	697b      	ldr	r3, [r7, #20]
 80103d0:	3310      	adds	r3, #16
 80103d2:	69b9      	ldr	r1, [r7, #24]
 80103d4:	4618      	mov	r0, r3
 80103d6:	f00c fa7d 	bl	801c8d4 <sys_mbox_trypost>
 80103da:	4603      	mov	r3, r0
 80103dc:	2b00      	cmp	r3, #0
 80103de:	d002      	beq.n	80103e6 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 80103e0:	f04f 33ff 	mov.w	r3, #4294967295
 80103e4:	e00a      	b.n	80103fc <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 80103e6:	697b      	ldr	r3, [r7, #20]
 80103e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d005      	beq.n	80103fa <recv_tcp+0xe6>
 80103ee:	697b      	ldr	r3, [r7, #20]
 80103f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103f2:	8bfa      	ldrh	r2, [r7, #30]
 80103f4:	2100      	movs	r1, #0
 80103f6:	6978      	ldr	r0, [r7, #20]
 80103f8:	4798      	blx	r3
  }

  return ERR_OK;
 80103fa:	2300      	movs	r3, #0
}
 80103fc:	4618      	mov	r0, r3
 80103fe:	3720      	adds	r7, #32
 8010400:	46bd      	mov	sp, r7
 8010402:	bd80      	pop	{r7, pc}
 8010404:	0801ea50 	.word	0x0801ea50
 8010408:	0801eb2c 	.word	0x0801eb2c
 801040c:	0801ea94 	.word	0x0801ea94
 8010410:	0801eb50 	.word	0x0801eb50
 8010414:	0801eb70 	.word	0x0801eb70
 8010418:	0801eb88 	.word	0x0801eb88
 801041c:	08021bea 	.word	0x08021bea

08010420 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8010420:	b580      	push	{r7, lr}
 8010422:	b084      	sub	sp, #16
 8010424:	af00      	add	r7, sp, #0
 8010426:	6078      	str	r0, [r7, #4]
 8010428:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 801042a:	687b      	ldr	r3, [r7, #4]
 801042c:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	2b00      	cmp	r3, #0
 8010432:	d106      	bne.n	8010442 <poll_tcp+0x22>
 8010434:	4b29      	ldr	r3, [pc, #164]	; (80104dc <poll_tcp+0xbc>)
 8010436:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 801043a:	4929      	ldr	r1, [pc, #164]	; (80104e0 <poll_tcp+0xc0>)
 801043c:	4829      	ldr	r0, [pc, #164]	; (80104e4 <poll_tcp+0xc4>)
 801043e:	f00c fe39 	bl	801d0b4 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 8010442:	68fb      	ldr	r3, [r7, #12]
 8010444:	785b      	ldrb	r3, [r3, #1]
 8010446:	2b01      	cmp	r3, #1
 8010448:	d104      	bne.n	8010454 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 801044a:	2101      	movs	r1, #1
 801044c:	68f8      	ldr	r0, [r7, #12]
 801044e:	f000 fe5d 	bl	801110c <lwip_netconn_do_writemore>
 8010452:	e016      	b.n	8010482 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 8010454:	68fb      	ldr	r3, [r7, #12]
 8010456:	785b      	ldrb	r3, [r3, #1]
 8010458:	2b04      	cmp	r3, #4
 801045a:	d112      	bne.n	8010482 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 801045c:	68fb      	ldr	r3, [r7, #12]
 801045e:	6a1b      	ldr	r3, [r3, #32]
 8010460:	2b00      	cmp	r3, #0
 8010462:	d00a      	beq.n	801047a <poll_tcp+0x5a>
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	6a1b      	ldr	r3, [r3, #32]
 8010468:	7a5b      	ldrb	r3, [r3, #9]
 801046a:	2b00      	cmp	r3, #0
 801046c:	d005      	beq.n	801047a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 801046e:	68fb      	ldr	r3, [r7, #12]
 8010470:	6a1b      	ldr	r3, [r3, #32]
 8010472:	7a5a      	ldrb	r2, [r3, #9]
 8010474:	3a01      	subs	r2, #1
 8010476:	b2d2      	uxtb	r2, r2
 8010478:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801047a:	2101      	movs	r1, #1
 801047c:	68f8      	ldr	r0, [r7, #12]
 801047e:	f000 fb3b 	bl	8010af8 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	7f1b      	ldrb	r3, [r3, #28]
 8010486:	f003 0310 	and.w	r3, r3, #16
 801048a:	2b00      	cmp	r3, #0
 801048c:	d021      	beq.n	80104d2 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	685b      	ldr	r3, [r3, #4]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d01d      	beq.n	80104d2 <poll_tcp+0xb2>
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	685b      	ldr	r3, [r3, #4]
 801049a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801049e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80104a2:	d316      	bcc.n	80104d2 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	685b      	ldr	r3, [r3, #4]
 80104a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80104ac:	2b04      	cmp	r3, #4
 80104ae:	d810      	bhi.n	80104d2 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	7f1b      	ldrb	r3, [r3, #28]
 80104b4:	f023 0310 	bic.w	r3, r3, #16
 80104b8:	b2da      	uxtb	r2, r3
 80104ba:	68fb      	ldr	r3, [r7, #12]
 80104bc:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d005      	beq.n	80104d2 <poll_tcp+0xb2>
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104ca:	2200      	movs	r2, #0
 80104cc:	2102      	movs	r1, #2
 80104ce:	68f8      	ldr	r0, [r7, #12]
 80104d0:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80104d2:	2300      	movs	r3, #0
}
 80104d4:	4618      	mov	r0, r3
 80104d6:	3710      	adds	r7, #16
 80104d8:	46bd      	mov	sp, r7
 80104da:	bd80      	pop	{r7, pc}
 80104dc:	0801ea50 	.word	0x0801ea50
 80104e0:	0801eba8 	.word	0x0801eba8
 80104e4:	0801ea94 	.word	0x0801ea94

080104e8 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 80104e8:	b580      	push	{r7, lr}
 80104ea:	b086      	sub	sp, #24
 80104ec:	af00      	add	r7, sp, #0
 80104ee:	60f8      	str	r0, [r7, #12]
 80104f0:	60b9      	str	r1, [r7, #8]
 80104f2:	4613      	mov	r3, r2
 80104f4:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80104fa:	697b      	ldr	r3, [r7, #20]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d106      	bne.n	801050e <sent_tcp+0x26>
 8010500:	4b20      	ldr	r3, [pc, #128]	; (8010584 <sent_tcp+0x9c>)
 8010502:	f240 1293 	movw	r2, #403	; 0x193
 8010506:	4920      	ldr	r1, [pc, #128]	; (8010588 <sent_tcp+0xa0>)
 8010508:	4820      	ldr	r0, [pc, #128]	; (801058c <sent_tcp+0xa4>)
 801050a:	f00c fdd3 	bl	801d0b4 <iprintf>

  if (conn) {
 801050e:	697b      	ldr	r3, [r7, #20]
 8010510:	2b00      	cmp	r3, #0
 8010512:	d032      	beq.n	801057a <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8010514:	697b      	ldr	r3, [r7, #20]
 8010516:	785b      	ldrb	r3, [r3, #1]
 8010518:	2b01      	cmp	r3, #1
 801051a:	d104      	bne.n	8010526 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 801051c:	2101      	movs	r1, #1
 801051e:	6978      	ldr	r0, [r7, #20]
 8010520:	f000 fdf4 	bl	801110c <lwip_netconn_do_writemore>
 8010524:	e007      	b.n	8010536 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8010526:	697b      	ldr	r3, [r7, #20]
 8010528:	785b      	ldrb	r3, [r3, #1]
 801052a:	2b04      	cmp	r3, #4
 801052c:	d103      	bne.n	8010536 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801052e:	2101      	movs	r1, #1
 8010530:	6978      	ldr	r0, [r7, #20]
 8010532:	f000 fae1 	bl	8010af8 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8010536:	697b      	ldr	r3, [r7, #20]
 8010538:	685b      	ldr	r3, [r3, #4]
 801053a:	2b00      	cmp	r3, #0
 801053c:	d01d      	beq.n	801057a <sent_tcp+0x92>
 801053e:	697b      	ldr	r3, [r7, #20]
 8010540:	685b      	ldr	r3, [r3, #4]
 8010542:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010546:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 801054a:	d316      	bcc.n	801057a <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 801054c:	697b      	ldr	r3, [r7, #20]
 801054e:	685b      	ldr	r3, [r3, #4]
 8010550:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8010554:	2b04      	cmp	r3, #4
 8010556:	d810      	bhi.n	801057a <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8010558:	697b      	ldr	r3, [r7, #20]
 801055a:	7f1b      	ldrb	r3, [r3, #28]
 801055c:	f023 0310 	bic.w	r3, r3, #16
 8010560:	b2da      	uxtb	r2, r3
 8010562:	697b      	ldr	r3, [r7, #20]
 8010564:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8010566:	697b      	ldr	r3, [r7, #20]
 8010568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801056a:	2b00      	cmp	r3, #0
 801056c:	d005      	beq.n	801057a <sent_tcp+0x92>
 801056e:	697b      	ldr	r3, [r7, #20]
 8010570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010572:	88fa      	ldrh	r2, [r7, #6]
 8010574:	2102      	movs	r1, #2
 8010576:	6978      	ldr	r0, [r7, #20]
 8010578:	4798      	blx	r3
    }
  }

  return ERR_OK;
 801057a:	2300      	movs	r3, #0
}
 801057c:	4618      	mov	r0, r3
 801057e:	3718      	adds	r7, #24
 8010580:	46bd      	mov	sp, r7
 8010582:	bd80      	pop	{r7, pc}
 8010584:	0801ea50 	.word	0x0801ea50
 8010588:	0801eba8 	.word	0x0801eba8
 801058c:	0801ea94 	.word	0x0801ea94

08010590 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8010590:	b580      	push	{r7, lr}
 8010592:	b088      	sub	sp, #32
 8010594:	af00      	add	r7, sp, #0
 8010596:	6078      	str	r0, [r7, #4]
 8010598:	460b      	mov	r3, r1
 801059a:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80105a0:	69fb      	ldr	r3, [r7, #28]
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	d106      	bne.n	80105b4 <err_tcp+0x24>
 80105a6:	4b5f      	ldr	r3, [pc, #380]	; (8010724 <err_tcp+0x194>)
 80105a8:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80105ac:	495e      	ldr	r1, [pc, #376]	; (8010728 <err_tcp+0x198>)
 80105ae:	485f      	ldr	r0, [pc, #380]	; (801072c <err_tcp+0x19c>)
 80105b0:	f00c fd80 	bl	801d0b4 <iprintf>

  SYS_ARCH_PROTECT(lev);
 80105b4:	f00c fb1e 	bl	801cbf4 <sys_arch_protect>
 80105b8:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 80105ba:	69fb      	ldr	r3, [r7, #28]
 80105bc:	2200      	movs	r2, #0
 80105be:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 80105c0:	69fb      	ldr	r3, [r7, #28]
 80105c2:	78fa      	ldrb	r2, [r7, #3]
 80105c4:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 80105c6:	69fb      	ldr	r3, [r7, #28]
 80105c8:	7f1b      	ldrb	r3, [r3, #28]
 80105ca:	f043 0301 	orr.w	r3, r3, #1
 80105ce:	b2da      	uxtb	r2, r3
 80105d0:	69fb      	ldr	r3, [r7, #28]
 80105d2:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 80105d4:	69fb      	ldr	r3, [r7, #28]
 80105d6:	785b      	ldrb	r3, [r3, #1]
 80105d8:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 80105da:	69fb      	ldr	r3, [r7, #28]
 80105dc:	2200      	movs	r2, #0
 80105de:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 80105e0:	69b8      	ldr	r0, [r7, #24]
 80105e2:	f00c fb15 	bl	801cc10 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80105e6:	69fb      	ldr	r3, [r7, #28]
 80105e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d005      	beq.n	80105fa <err_tcp+0x6a>
 80105ee:	69fb      	ldr	r3, [r7, #28]
 80105f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105f2:	2200      	movs	r2, #0
 80105f4:	2104      	movs	r1, #4
 80105f6:	69f8      	ldr	r0, [r7, #28]
 80105f8:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80105fa:	69fb      	ldr	r3, [r7, #28]
 80105fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d005      	beq.n	801060e <err_tcp+0x7e>
 8010602:	69fb      	ldr	r3, [r7, #28]
 8010604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010606:	2200      	movs	r2, #0
 8010608:	2100      	movs	r1, #0
 801060a:	69f8      	ldr	r0, [r7, #28]
 801060c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801060e:	69fb      	ldr	r3, [r7, #28]
 8010610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010612:	2b00      	cmp	r3, #0
 8010614:	d005      	beq.n	8010622 <err_tcp+0x92>
 8010616:	69fb      	ldr	r3, [r7, #28]
 8010618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801061a:	2200      	movs	r2, #0
 801061c:	2102      	movs	r1, #2
 801061e:	69f8      	ldr	r0, [r7, #28]
 8010620:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8010622:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8010626:	4618      	mov	r0, r3
 8010628:	f7ff fd86 	bl	8010138 <lwip_netconn_err_to_msg>
 801062c:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 801062e:	69fb      	ldr	r3, [r7, #28]
 8010630:	3310      	adds	r3, #16
 8010632:	4618      	mov	r0, r3
 8010634:	f00c f9c3 	bl	801c9be <sys_mbox_valid>
 8010638:	4603      	mov	r3, r0
 801063a:	2b00      	cmp	r3, #0
 801063c:	d005      	beq.n	801064a <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 801063e:	69fb      	ldr	r3, [r7, #28]
 8010640:	3310      	adds	r3, #16
 8010642:	6939      	ldr	r1, [r7, #16]
 8010644:	4618      	mov	r0, r3
 8010646:	f00c f945 	bl	801c8d4 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 801064a:	69fb      	ldr	r3, [r7, #28]
 801064c:	3314      	adds	r3, #20
 801064e:	4618      	mov	r0, r3
 8010650:	f00c f9b5 	bl	801c9be <sys_mbox_valid>
 8010654:	4603      	mov	r3, r0
 8010656:	2b00      	cmp	r3, #0
 8010658:	d005      	beq.n	8010666 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 801065a:	69fb      	ldr	r3, [r7, #28]
 801065c:	3314      	adds	r3, #20
 801065e:	6939      	ldr	r1, [r7, #16]
 8010660:	4618      	mov	r0, r3
 8010662:	f00c f937 	bl	801c8d4 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8010666:	7dfb      	ldrb	r3, [r7, #23]
 8010668:	2b01      	cmp	r3, #1
 801066a:	d005      	beq.n	8010678 <err_tcp+0xe8>
 801066c:	7dfb      	ldrb	r3, [r7, #23]
 801066e:	2b04      	cmp	r3, #4
 8010670:	d002      	beq.n	8010678 <err_tcp+0xe8>
 8010672:	7dfb      	ldrb	r3, [r7, #23]
 8010674:	2b03      	cmp	r3, #3
 8010676:	d143      	bne.n	8010700 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8010678:	69fb      	ldr	r3, [r7, #28]
 801067a:	7f1b      	ldrb	r3, [r3, #28]
 801067c:	f003 0304 	and.w	r3, r3, #4
 8010680:	2b00      	cmp	r3, #0
 8010682:	bf14      	ite	ne
 8010684:	2301      	movne	r3, #1
 8010686:	2300      	moveq	r3, #0
 8010688:	b2db      	uxtb	r3, r3
 801068a:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 801068c:	69fb      	ldr	r3, [r7, #28]
 801068e:	7f1b      	ldrb	r3, [r3, #28]
 8010690:	f023 0304 	bic.w	r3, r3, #4
 8010694:	b2da      	uxtb	r2, r3
 8010696:	69fb      	ldr	r3, [r7, #28]
 8010698:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 801069a:	68fb      	ldr	r3, [r7, #12]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d13b      	bne.n	8010718 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80106a0:	69fb      	ldr	r3, [r7, #28]
 80106a2:	6a1b      	ldr	r3, [r3, #32]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d106      	bne.n	80106b6 <err_tcp+0x126>
 80106a8:	4b1e      	ldr	r3, [pc, #120]	; (8010724 <err_tcp+0x194>)
 80106aa:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80106ae:	4920      	ldr	r1, [pc, #128]	; (8010730 <err_tcp+0x1a0>)
 80106b0:	481e      	ldr	r0, [pc, #120]	; (801072c <err_tcp+0x19c>)
 80106b2:	f00c fcff 	bl	801d0b4 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 80106b6:	7dfb      	ldrb	r3, [r7, #23]
 80106b8:	2b04      	cmp	r3, #4
 80106ba:	d104      	bne.n	80106c6 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 80106bc:	69fb      	ldr	r3, [r7, #28]
 80106be:	6a1b      	ldr	r3, [r3, #32]
 80106c0:	2200      	movs	r2, #0
 80106c2:	711a      	strb	r2, [r3, #4]
 80106c4:	e003      	b.n	80106ce <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 80106c6:	69fb      	ldr	r3, [r7, #28]
 80106c8:	6a1b      	ldr	r3, [r3, #32]
 80106ca:	78fa      	ldrb	r2, [r7, #3]
 80106cc:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80106ce:	69fb      	ldr	r3, [r7, #28]
 80106d0:	6a1b      	ldr	r3, [r3, #32]
 80106d2:	681b      	ldr	r3, [r3, #0]
 80106d4:	330c      	adds	r3, #12
 80106d6:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 80106d8:	68b8      	ldr	r0, [r7, #8]
 80106da:	f00c fa01 	bl	801cae0 <sys_sem_valid>
 80106de:	4603      	mov	r3, r0
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d106      	bne.n	80106f2 <err_tcp+0x162>
 80106e4:	4b0f      	ldr	r3, [pc, #60]	; (8010724 <err_tcp+0x194>)
 80106e6:	f240 12ef 	movw	r2, #495	; 0x1ef
 80106ea:	4912      	ldr	r1, [pc, #72]	; (8010734 <err_tcp+0x1a4>)
 80106ec:	480f      	ldr	r0, [pc, #60]	; (801072c <err_tcp+0x19c>)
 80106ee:	f00c fce1 	bl	801d0b4 <iprintf>
      conn->current_msg = NULL;
 80106f2:	69fb      	ldr	r3, [r7, #28]
 80106f4:	2200      	movs	r2, #0
 80106f6:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 80106f8:	68b8      	ldr	r0, [r7, #8]
 80106fa:	f00c f9d7 	bl	801caac <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 80106fe:	e00b      	b.n	8010718 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8010700:	69fb      	ldr	r3, [r7, #28]
 8010702:	6a1b      	ldr	r3, [r3, #32]
 8010704:	2b00      	cmp	r3, #0
 8010706:	d008      	beq.n	801071a <err_tcp+0x18a>
 8010708:	4b06      	ldr	r3, [pc, #24]	; (8010724 <err_tcp+0x194>)
 801070a:	f240 12f7 	movw	r2, #503	; 0x1f7
 801070e:	490a      	ldr	r1, [pc, #40]	; (8010738 <err_tcp+0x1a8>)
 8010710:	4806      	ldr	r0, [pc, #24]	; (801072c <err_tcp+0x19c>)
 8010712:	f00c fccf 	bl	801d0b4 <iprintf>
  }
}
 8010716:	e000      	b.n	801071a <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8010718:	bf00      	nop
}
 801071a:	bf00      	nop
 801071c:	3720      	adds	r7, #32
 801071e:	46bd      	mov	sp, r7
 8010720:	bd80      	pop	{r7, pc}
 8010722:	bf00      	nop
 8010724:	0801ea50 	.word	0x0801ea50
 8010728:	0801eba8 	.word	0x0801eba8
 801072c:	0801ea94 	.word	0x0801ea94
 8010730:	0801ebb8 	.word	0x0801ebb8
 8010734:	0801ebd4 	.word	0x0801ebd4
 8010738:	0801ebf0 	.word	0x0801ebf0

0801073c <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 801073c:	b580      	push	{r7, lr}
 801073e:	b084      	sub	sp, #16
 8010740:	af00      	add	r7, sp, #0
 8010742:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	685b      	ldr	r3, [r3, #4]
 8010748:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 801074a:	6879      	ldr	r1, [r7, #4]
 801074c:	68f8      	ldr	r0, [r7, #12]
 801074e:	f004 fac1 	bl	8014cd4 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8010752:	490a      	ldr	r1, [pc, #40]	; (801077c <setup_tcp+0x40>)
 8010754:	68f8      	ldr	r0, [r7, #12]
 8010756:	f004 facf 	bl	8014cf8 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 801075a:	4909      	ldr	r1, [pc, #36]	; (8010780 <setup_tcp+0x44>)
 801075c:	68f8      	ldr	r0, [r7, #12]
 801075e:	f004 faed 	bl	8014d3c <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8010762:	2202      	movs	r2, #2
 8010764:	4907      	ldr	r1, [pc, #28]	; (8010784 <setup_tcp+0x48>)
 8010766:	68f8      	ldr	r0, [r7, #12]
 8010768:	f004 fb44 	bl	8014df4 <tcp_poll>
  tcp_err(pcb, err_tcp);
 801076c:	4906      	ldr	r1, [pc, #24]	; (8010788 <setup_tcp+0x4c>)
 801076e:	68f8      	ldr	r0, [r7, #12]
 8010770:	f004 fb06 	bl	8014d80 <tcp_err>
}
 8010774:	bf00      	nop
 8010776:	3710      	adds	r7, #16
 8010778:	46bd      	mov	sp, r7
 801077a:	bd80      	pop	{r7, pc}
 801077c:	08010315 	.word	0x08010315
 8010780:	080104e9 	.word	0x080104e9
 8010784:	08010421 	.word	0x08010421
 8010788:	08010591 	.word	0x08010591

0801078c <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 801078c:	b590      	push	{r4, r7, lr}
 801078e:	b085      	sub	sp, #20
 8010790:	af00      	add	r7, sp, #0
 8010792:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8010794:	2300      	movs	r3, #0
 8010796:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	681b      	ldr	r3, [r3, #0]
 801079c:	685b      	ldr	r3, [r3, #4]
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d006      	beq.n	80107b0 <pcb_new+0x24>
 80107a2:	4b2b      	ldr	r3, [pc, #172]	; (8010850 <pcb_new+0xc4>)
 80107a4:	f240 2265 	movw	r2, #613	; 0x265
 80107a8:	492a      	ldr	r1, [pc, #168]	; (8010854 <pcb_new+0xc8>)
 80107aa:	482b      	ldr	r0, [pc, #172]	; (8010858 <pcb_new+0xcc>)
 80107ac:	f00c fc82 	bl	801d0b4 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	781b      	ldrb	r3, [r3, #0]
 80107b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80107ba:	2b10      	cmp	r3, #16
 80107bc:	d022      	beq.n	8010804 <pcb_new+0x78>
 80107be:	2b20      	cmp	r3, #32
 80107c0:	d133      	bne.n	801082a <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 80107c2:	687b      	ldr	r3, [r7, #4]
 80107c4:	681c      	ldr	r4, [r3, #0]
 80107c6:	7bfb      	ldrb	r3, [r7, #15]
 80107c8:	4618      	mov	r0, r3
 80107ca:	f009 fd4c 	bl	801a266 <udp_new_ip_type>
 80107ce:	4603      	mov	r3, r0
 80107d0:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	685b      	ldr	r3, [r3, #4]
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d02a      	beq.n	8010832 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	781b      	ldrb	r3, [r3, #0]
 80107e2:	2b22      	cmp	r3, #34	; 0x22
 80107e4:	d104      	bne.n	80107f0 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 80107e6:	687b      	ldr	r3, [r7, #4]
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	685b      	ldr	r3, [r3, #4]
 80107ec:	2201      	movs	r2, #1
 80107ee:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	6858      	ldr	r0, [r3, #4]
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	461a      	mov	r2, r3
 80107fc:	4917      	ldr	r1, [pc, #92]	; (801085c <pcb_new+0xd0>)
 80107fe:	f009 fcb9 	bl	801a174 <udp_recv>
      }
      break;
 8010802:	e016      	b.n	8010832 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	681c      	ldr	r4, [r3, #0]
 8010808:	7bfb      	ldrb	r3, [r7, #15]
 801080a:	4618      	mov	r0, r3
 801080c:	f004 fa54 	bl	8014cb8 <tcp_new_ip_type>
 8010810:	4603      	mov	r3, r0
 8010812:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	681b      	ldr	r3, [r3, #0]
 8010818:	685b      	ldr	r3, [r3, #4]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d00b      	beq.n	8010836 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 801081e:	687b      	ldr	r3, [r7, #4]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	4618      	mov	r0, r3
 8010824:	f7ff ff8a 	bl	801073c <setup_tcp>
      }
      break;
 8010828:	e005      	b.n	8010836 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	22fa      	movs	r2, #250	; 0xfa
 801082e:	711a      	strb	r2, [r3, #4]
      return;
 8010830:	e00a      	b.n	8010848 <pcb_new+0xbc>
      break;
 8010832:	bf00      	nop
 8010834:	e000      	b.n	8010838 <pcb_new+0xac>
      break;
 8010836:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	681b      	ldr	r3, [r3, #0]
 801083c:	685b      	ldr	r3, [r3, #4]
 801083e:	2b00      	cmp	r3, #0
 8010840:	d102      	bne.n	8010848 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	22ff      	movs	r2, #255	; 0xff
 8010846:	711a      	strb	r2, [r3, #4]
  }
}
 8010848:	3714      	adds	r7, #20
 801084a:	46bd      	mov	sp, r7
 801084c:	bd90      	pop	{r4, r7, pc}
 801084e:	bf00      	nop
 8010850:	0801ea50 	.word	0x0801ea50
 8010854:	0801ec34 	.word	0x0801ec34
 8010858:	0801ea94 	.word	0x0801ea94
 801085c:	08010219 	.word	0x08010219

08010860 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8010860:	b580      	push	{r7, lr}
 8010862:	b084      	sub	sp, #16
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 801086c:	68fb      	ldr	r3, [r7, #12]
 801086e:	2200      	movs	r2, #0
 8010870:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8010872:	68fb      	ldr	r3, [r7, #12]
 8010874:	681b      	ldr	r3, [r3, #0]
 8010876:	685b      	ldr	r3, [r3, #4]
 8010878:	2b00      	cmp	r3, #0
 801087a:	d102      	bne.n	8010882 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 801087c:	68f8      	ldr	r0, [r7, #12]
 801087e:	f7ff ff85 	bl	801078c <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8010882:	bf00      	nop
 8010884:	3710      	adds	r7, #16
 8010886:	46bd      	mov	sp, r7
 8010888:	bd80      	pop	{r7, pc}
	...

0801088c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 801088c:	b580      	push	{r7, lr}
 801088e:	b086      	sub	sp, #24
 8010890:	af00      	add	r7, sp, #0
 8010892:	4603      	mov	r3, r0
 8010894:	6039      	str	r1, [r7, #0]
 8010896:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8010898:	2300      	movs	r3, #0
 801089a:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 801089c:	2007      	movs	r0, #7
 801089e:	f001 fdc3 	bl	8012428 <memp_malloc>
 80108a2:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d101      	bne.n	80108ae <netconn_alloc+0x22>
    return NULL;
 80108aa:	2300      	movs	r3, #0
 80108ac:	e052      	b.n	8010954 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	2200      	movs	r2, #0
 80108b2:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	79fa      	ldrb	r2, [r7, #7]
 80108b8:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 80108ba:	68fb      	ldr	r3, [r7, #12]
 80108bc:	2200      	movs	r2, #0
 80108be:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 80108c0:	79fb      	ldrb	r3, [r7, #7]
 80108c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80108c6:	2b10      	cmp	r3, #16
 80108c8:	d004      	beq.n	80108d4 <netconn_alloc+0x48>
 80108ca:	2b20      	cmp	r3, #32
 80108cc:	d105      	bne.n	80108da <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 80108ce:	2306      	movs	r3, #6
 80108d0:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 80108d2:	e00a      	b.n	80108ea <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 80108d4:	2306      	movs	r3, #6
 80108d6:	617b      	str	r3, [r7, #20]
      break;
 80108d8:	e007      	b.n	80108ea <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 80108da:	4b20      	ldr	r3, [pc, #128]	; (801095c <netconn_alloc+0xd0>)
 80108dc:	f240 22e5 	movw	r2, #741	; 0x2e5
 80108e0:	491f      	ldr	r1, [pc, #124]	; (8010960 <netconn_alloc+0xd4>)
 80108e2:	4820      	ldr	r0, [pc, #128]	; (8010964 <netconn_alloc+0xd8>)
 80108e4:	f00c fbe6 	bl	801d0b4 <iprintf>
      goto free_and_return;
 80108e8:	e02f      	b.n	801094a <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	3310      	adds	r3, #16
 80108ee:	6979      	ldr	r1, [r7, #20]
 80108f0:	4618      	mov	r0, r3
 80108f2:	f00b ffbb 	bl	801c86c <sys_mbox_new>
 80108f6:	4603      	mov	r3, r0
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d125      	bne.n	8010948 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	330c      	adds	r3, #12
 8010900:	2100      	movs	r1, #0
 8010902:	4618      	mov	r0, r3
 8010904:	f00c f879 	bl	801c9fa <sys_sem_new>
 8010908:	4603      	mov	r3, r0
 801090a:	2b00      	cmp	r3, #0
 801090c:	d005      	beq.n	801091a <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	3310      	adds	r3, #16
 8010912:	4618      	mov	r0, r3
 8010914:	f00b ffcc 	bl	801c8b0 <sys_mbox_free>
    goto free_and_return;
 8010918:	e017      	b.n	801094a <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	3314      	adds	r3, #20
 801091e:	4618      	mov	r0, r3
 8010920:	f00c f85e 	bl	801c9e0 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8010924:	68fb      	ldr	r3, [r7, #12]
 8010926:	2200      	movs	r2, #0
 8010928:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 801092a:	68fb      	ldr	r3, [r7, #12]
 801092c:	f04f 32ff 	mov.w	r2, #4294967295
 8010930:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	683a      	ldr	r2, [r7, #0]
 8010936:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	2200      	movs	r2, #0
 801093c:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	7cfa      	ldrb	r2, [r7, #19]
 8010942:	771a      	strb	r2, [r3, #28]
  return conn;
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	e005      	b.n	8010954 <netconn_alloc+0xc8>
    goto free_and_return;
 8010948:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 801094a:	68f9      	ldr	r1, [r7, #12]
 801094c:	2007      	movs	r0, #7
 801094e:	f001 fdbd 	bl	80124cc <memp_free>
  return NULL;
 8010952:	2300      	movs	r3, #0
}
 8010954:	4618      	mov	r0, r3
 8010956:	3718      	adds	r7, #24
 8010958:	46bd      	mov	sp, r7
 801095a:	bd80      	pop	{r7, pc}
 801095c:	0801ea50 	.word	0x0801ea50
 8010960:	0801ec54 	.word	0x0801ec54
 8010964:	0801ea94 	.word	0x0801ea94

08010968 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8010968:	b580      	push	{r7, lr}
 801096a:	b082      	sub	sp, #8
 801096c:	af00      	add	r7, sp, #0
 801096e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	685b      	ldr	r3, [r3, #4]
 8010974:	2b00      	cmp	r3, #0
 8010976:	d006      	beq.n	8010986 <netconn_free+0x1e>
 8010978:	4b1b      	ldr	r3, [pc, #108]	; (80109e8 <netconn_free+0x80>)
 801097a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801097e:	491b      	ldr	r1, [pc, #108]	; (80109ec <netconn_free+0x84>)
 8010980:	481b      	ldr	r0, [pc, #108]	; (80109f0 <netconn_free+0x88>)
 8010982:	f00c fb97 	bl	801d0b4 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	3310      	adds	r3, #16
 801098a:	4618      	mov	r0, r3
 801098c:	f00c f817 	bl	801c9be <sys_mbox_valid>
 8010990:	4603      	mov	r3, r0
 8010992:	2b00      	cmp	r3, #0
 8010994:	d006      	beq.n	80109a4 <netconn_free+0x3c>
 8010996:	4b14      	ldr	r3, [pc, #80]	; (80109e8 <netconn_free+0x80>)
 8010998:	f240 3223 	movw	r2, #803	; 0x323
 801099c:	4915      	ldr	r1, [pc, #84]	; (80109f4 <netconn_free+0x8c>)
 801099e:	4814      	ldr	r0, [pc, #80]	; (80109f0 <netconn_free+0x88>)
 80109a0:	f00c fb88 	bl	801d0b4 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	3314      	adds	r3, #20
 80109a8:	4618      	mov	r0, r3
 80109aa:	f00c f808 	bl	801c9be <sys_mbox_valid>
 80109ae:	4603      	mov	r3, r0
 80109b0:	2b00      	cmp	r3, #0
 80109b2:	d006      	beq.n	80109c2 <netconn_free+0x5a>
 80109b4:	4b0c      	ldr	r3, [pc, #48]	; (80109e8 <netconn_free+0x80>)
 80109b6:	f240 3226 	movw	r2, #806	; 0x326
 80109ba:	490f      	ldr	r1, [pc, #60]	; (80109f8 <netconn_free+0x90>)
 80109bc:	480c      	ldr	r0, [pc, #48]	; (80109f0 <netconn_free+0x88>)
 80109be:	f00c fb79 	bl	801d0b4 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	330c      	adds	r3, #12
 80109c6:	4618      	mov	r0, r3
 80109c8:	f00c f87d 	bl	801cac6 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	330c      	adds	r3, #12
 80109d0:	4618      	mov	r0, r3
 80109d2:	f00c f896 	bl	801cb02 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 80109d6:	6879      	ldr	r1, [r7, #4]
 80109d8:	2007      	movs	r0, #7
 80109da:	f001 fd77 	bl	80124cc <memp_free>
}
 80109de:	bf00      	nop
 80109e0:	3708      	adds	r7, #8
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bd80      	pop	{r7, pc}
 80109e6:	bf00      	nop
 80109e8:	0801ea50 	.word	0x0801ea50
 80109ec:	0801ec7c 	.word	0x0801ec7c
 80109f0:	0801ea94 	.word	0x0801ea94
 80109f4:	0801ecac 	.word	0x0801ecac
 80109f8:	0801ece8 	.word	0x0801ece8

080109fc <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 80109fc:	b580      	push	{r7, lr}
 80109fe:	b086      	sub	sp, #24
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	3310      	adds	r3, #16
 8010a08:	4618      	mov	r0, r3
 8010a0a:	f00b ffd8 	bl	801c9be <sys_mbox_valid>
 8010a0e:	4603      	mov	r3, r0
 8010a10:	2b00      	cmp	r3, #0
 8010a12:	d02f      	beq.n	8010a74 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8010a14:	e018      	b.n	8010a48 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	781b      	ldrb	r3, [r3, #0]
 8010a1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010a1e:	2b10      	cmp	r3, #16
 8010a20:	d10e      	bne.n	8010a40 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8010a22:	693b      	ldr	r3, [r7, #16]
 8010a24:	f107 020f 	add.w	r2, r7, #15
 8010a28:	4611      	mov	r1, r2
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	f7ff fbba 	bl	80101a4 <lwip_netconn_is_err_msg>
 8010a30:	4603      	mov	r3, r0
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d108      	bne.n	8010a48 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8010a36:	693b      	ldr	r3, [r7, #16]
 8010a38:	4618      	mov	r0, r3
 8010a3a:	f002 fb87 	bl	801314c <pbuf_free>
 8010a3e:	e003      	b.n	8010a48 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8010a40:	693b      	ldr	r3, [r7, #16]
 8010a42:	4618      	mov	r0, r3
 8010a44:	f000 fdce 	bl	80115e4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	3310      	adds	r3, #16
 8010a4c:	f107 0210 	add.w	r2, r7, #16
 8010a50:	4611      	mov	r1, r2
 8010a52:	4618      	mov	r0, r3
 8010a54:	f00b ff97 	bl	801c986 <sys_arch_mbox_tryfetch>
 8010a58:	4603      	mov	r3, r0
 8010a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a5e:	d1da      	bne.n	8010a16 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	3310      	adds	r3, #16
 8010a64:	4618      	mov	r0, r3
 8010a66:	f00b ff23 	bl	801c8b0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	3310      	adds	r3, #16
 8010a6e:	4618      	mov	r0, r3
 8010a70:	f00b ffb6 	bl	801c9e0 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	3314      	adds	r3, #20
 8010a78:	4618      	mov	r0, r3
 8010a7a:	f00b ffa0 	bl	801c9be <sys_mbox_valid>
 8010a7e:	4603      	mov	r3, r0
 8010a80:	2b00      	cmp	r3, #0
 8010a82:	d034      	beq.n	8010aee <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8010a84:	e01d      	b.n	8010ac2 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8010a86:	693b      	ldr	r3, [r7, #16]
 8010a88:	f107 020e 	add.w	r2, r7, #14
 8010a8c:	4611      	mov	r1, r2
 8010a8e:	4618      	mov	r0, r3
 8010a90:	f7ff fb88 	bl	80101a4 <lwip_netconn_is_err_msg>
 8010a94:	4603      	mov	r3, r0
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d113      	bne.n	8010ac2 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8010a9a:	693b      	ldr	r3, [r7, #16]
 8010a9c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8010a9e:	6978      	ldr	r0, [r7, #20]
 8010aa0:	f7ff ffac 	bl	80109fc <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8010aa4:	697b      	ldr	r3, [r7, #20]
 8010aa6:	685b      	ldr	r3, [r3, #4]
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d007      	beq.n	8010abc <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8010aac:	697b      	ldr	r3, [r7, #20]
 8010aae:	685b      	ldr	r3, [r3, #4]
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	f003 f94b 	bl	8013d4c <tcp_abort>
            newconn->pcb.tcp = NULL;
 8010ab6:	697b      	ldr	r3, [r7, #20]
 8010ab8:	2200      	movs	r2, #0
 8010aba:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8010abc:	6978      	ldr	r0, [r7, #20]
 8010abe:	f7ff ff53 	bl	8010968 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	3314      	adds	r3, #20
 8010ac6:	f107 0210 	add.w	r2, r7, #16
 8010aca:	4611      	mov	r1, r2
 8010acc:	4618      	mov	r0, r3
 8010ace:	f00b ff5a 	bl	801c986 <sys_arch_mbox_tryfetch>
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ad8:	d1d5      	bne.n	8010a86 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	3314      	adds	r3, #20
 8010ade:	4618      	mov	r0, r3
 8010ae0:	f00b fee6 	bl	801c8b0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	3314      	adds	r3, #20
 8010ae8:	4618      	mov	r0, r3
 8010aea:	f00b ff79 	bl	801c9e0 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8010aee:	bf00      	nop
 8010af0:	3718      	adds	r7, #24
 8010af2:	46bd      	mov	sp, r7
 8010af4:	bd80      	pop	{r7, pc}
	...

08010af8 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8010af8:	b580      	push	{r7, lr}
 8010afa:	b086      	sub	sp, #24
 8010afc:	af00      	add	r7, sp, #0
 8010afe:	6078      	str	r0, [r7, #4]
 8010b00:	460b      	mov	r3, r1
 8010b02:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8010b04:	2300      	movs	r3, #0
 8010b06:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d106      	bne.n	8010b1c <lwip_netconn_do_close_internal+0x24>
 8010b0e:	4b87      	ldr	r3, [pc, #540]	; (8010d2c <lwip_netconn_do_close_internal+0x234>)
 8010b10:	f240 32a2 	movw	r2, #930	; 0x3a2
 8010b14:	4986      	ldr	r1, [pc, #536]	; (8010d30 <lwip_netconn_do_close_internal+0x238>)
 8010b16:	4887      	ldr	r0, [pc, #540]	; (8010d34 <lwip_netconn_do_close_internal+0x23c>)
 8010b18:	f00c facc 	bl	801d0b4 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8010b1c:	687b      	ldr	r3, [r7, #4]
 8010b1e:	781b      	ldrb	r3, [r3, #0]
 8010b20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010b24:	2b10      	cmp	r3, #16
 8010b26:	d006      	beq.n	8010b36 <lwip_netconn_do_close_internal+0x3e>
 8010b28:	4b80      	ldr	r3, [pc, #512]	; (8010d2c <lwip_netconn_do_close_internal+0x234>)
 8010b2a:	f240 32a3 	movw	r2, #931	; 0x3a3
 8010b2e:	4982      	ldr	r1, [pc, #520]	; (8010d38 <lwip_netconn_do_close_internal+0x240>)
 8010b30:	4880      	ldr	r0, [pc, #512]	; (8010d34 <lwip_netconn_do_close_internal+0x23c>)
 8010b32:	f00c fabf 	bl	801d0b4 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	785b      	ldrb	r3, [r3, #1]
 8010b3a:	2b04      	cmp	r3, #4
 8010b3c:	d006      	beq.n	8010b4c <lwip_netconn_do_close_internal+0x54>
 8010b3e:	4b7b      	ldr	r3, [pc, #492]	; (8010d2c <lwip_netconn_do_close_internal+0x234>)
 8010b40:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8010b44:	497d      	ldr	r1, [pc, #500]	; (8010d3c <lwip_netconn_do_close_internal+0x244>)
 8010b46:	487b      	ldr	r0, [pc, #492]	; (8010d34 <lwip_netconn_do_close_internal+0x23c>)
 8010b48:	f00c fab4 	bl	801d0b4 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	685b      	ldr	r3, [r3, #4]
 8010b50:	2b00      	cmp	r3, #0
 8010b52:	d106      	bne.n	8010b62 <lwip_netconn_do_close_internal+0x6a>
 8010b54:	4b75      	ldr	r3, [pc, #468]	; (8010d2c <lwip_netconn_do_close_internal+0x234>)
 8010b56:	f240 32a5 	movw	r2, #933	; 0x3a5
 8010b5a:	4979      	ldr	r1, [pc, #484]	; (8010d40 <lwip_netconn_do_close_internal+0x248>)
 8010b5c:	4875      	ldr	r0, [pc, #468]	; (8010d34 <lwip_netconn_do_close_internal+0x23c>)
 8010b5e:	f00c faa9 	bl	801d0b4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	6a1b      	ldr	r3, [r3, #32]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d106      	bne.n	8010b78 <lwip_netconn_do_close_internal+0x80>
 8010b6a:	4b70      	ldr	r3, [pc, #448]	; (8010d2c <lwip_netconn_do_close_internal+0x234>)
 8010b6c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8010b70:	4974      	ldr	r1, [pc, #464]	; (8010d44 <lwip_netconn_do_close_internal+0x24c>)
 8010b72:	4870      	ldr	r0, [pc, #448]	; (8010d34 <lwip_netconn_do_close_internal+0x23c>)
 8010b74:	f00c fa9e 	bl	801d0b4 <iprintf>

  tpcb = conn->pcb.tcp;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	685b      	ldr	r3, [r3, #4]
 8010b7c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	6a1b      	ldr	r3, [r3, #32]
 8010b82:	7a1b      	ldrb	r3, [r3, #8]
 8010b84:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8010b86:	7bfb      	ldrb	r3, [r7, #15]
 8010b88:	f003 0301 	and.w	r3, r3, #1
 8010b8c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 8010b8e:	7bfb      	ldrb	r3, [r7, #15]
 8010b90:	f003 0302 	and.w	r3, r3, #2
 8010b94:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8010b96:	7bfb      	ldrb	r3, [r7, #15]
 8010b98:	2b03      	cmp	r3, #3
 8010b9a:	d102      	bne.n	8010ba2 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 8010b9c:	2301      	movs	r3, #1
 8010b9e:	75bb      	strb	r3, [r7, #22]
 8010ba0:	e01f      	b.n	8010be2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8010ba2:	7bbb      	ldrb	r3, [r7, #14]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d00e      	beq.n	8010bc6 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8010ba8:	693b      	ldr	r3, [r7, #16]
 8010baa:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8010bac:	2b05      	cmp	r3, #5
 8010bae:	d007      	beq.n	8010bc0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8010bb0:	693b      	ldr	r3, [r7, #16]
 8010bb2:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8010bb4:	2b06      	cmp	r3, #6
 8010bb6:	d003      	beq.n	8010bc0 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8010bb8:	693b      	ldr	r3, [r7, #16]
 8010bba:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8010bbc:	2b08      	cmp	r3, #8
 8010bbe:	d102      	bne.n	8010bc6 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8010bc0:	2301      	movs	r3, #1
 8010bc2:	75bb      	strb	r3, [r7, #22]
 8010bc4:	e00d      	b.n	8010be2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8010bc6:	7b7b      	ldrb	r3, [r7, #13]
 8010bc8:	2b00      	cmp	r3, #0
 8010bca:	d008      	beq.n	8010bde <lwip_netconn_do_close_internal+0xe6>
 8010bcc:	693b      	ldr	r3, [r7, #16]
 8010bce:	8b5b      	ldrh	r3, [r3, #26]
 8010bd0:	f003 0310 	and.w	r3, r3, #16
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d002      	beq.n	8010bde <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8010bd8:	2301      	movs	r3, #1
 8010bda:	75bb      	strb	r3, [r7, #22]
 8010bdc:	e001      	b.n	8010be2 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 8010bde:	2300      	movs	r3, #0
 8010be0:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8010be2:	7dbb      	ldrb	r3, [r7, #22]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d003      	beq.n	8010bf0 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8010be8:	2100      	movs	r1, #0
 8010bea:	6938      	ldr	r0, [r7, #16]
 8010bec:	f004 f872 	bl	8014cd4 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8010bf0:	693b      	ldr	r3, [r7, #16]
 8010bf2:	7d1b      	ldrb	r3, [r3, #20]
 8010bf4:	2b01      	cmp	r3, #1
 8010bf6:	d104      	bne.n	8010c02 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8010bf8:	2100      	movs	r1, #0
 8010bfa:	6938      	ldr	r0, [r7, #16]
 8010bfc:	f004 f8e2 	bl	8014dc4 <tcp_accept>
 8010c00:	e01d      	b.n	8010c3e <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8010c02:	7bbb      	ldrb	r3, [r7, #14]
 8010c04:	2b00      	cmp	r3, #0
 8010c06:	d007      	beq.n	8010c18 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8010c08:	2100      	movs	r1, #0
 8010c0a:	6938      	ldr	r0, [r7, #16]
 8010c0c:	f004 f874 	bl	8014cf8 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8010c10:	2100      	movs	r1, #0
 8010c12:	6938      	ldr	r0, [r7, #16]
 8010c14:	f004 f8d6 	bl	8014dc4 <tcp_accept>
    }
    if (shut_tx) {
 8010c18:	7b7b      	ldrb	r3, [r7, #13]
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d003      	beq.n	8010c26 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8010c1e:	2100      	movs	r1, #0
 8010c20:	6938      	ldr	r0, [r7, #16]
 8010c22:	f004 f88b 	bl	8014d3c <tcp_sent>
    }
    if (shut_close) {
 8010c26:	7dbb      	ldrb	r3, [r7, #22]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d008      	beq.n	8010c3e <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8010c2c:	2200      	movs	r2, #0
 8010c2e:	2100      	movs	r1, #0
 8010c30:	6938      	ldr	r0, [r7, #16]
 8010c32:	f004 f8df 	bl	8014df4 <tcp_poll>
      tcp_err(tpcb, NULL);
 8010c36:	2100      	movs	r1, #0
 8010c38:	6938      	ldr	r0, [r7, #16]
 8010c3a:	f004 f8a1 	bl	8014d80 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 8010c3e:	7dbb      	ldrb	r3, [r7, #22]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d005      	beq.n	8010c50 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8010c44:	6938      	ldr	r0, [r7, #16]
 8010c46:	f002 ff3b 	bl	8013ac0 <tcp_close>
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	75fb      	strb	r3, [r7, #23]
 8010c4e:	e007      	b.n	8010c60 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8010c50:	7bbb      	ldrb	r3, [r7, #14]
 8010c52:	7b7a      	ldrb	r2, [r7, #13]
 8010c54:	4619      	mov	r1, r3
 8010c56:	6938      	ldr	r0, [r7, #16]
 8010c58:	f002 ff5e 	bl	8013b18 <tcp_shutdown>
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8010c60:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010c64:	2b00      	cmp	r3, #0
 8010c66:	d102      	bne.n	8010c6e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8010c68:	2301      	movs	r3, #1
 8010c6a:	757b      	strb	r3, [r7, #21]
 8010c6c:	e016      	b.n	8010c9c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8010c6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c76:	d10f      	bne.n	8010c98 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	6a1b      	ldr	r3, [r3, #32]
 8010c7c:	7a5b      	ldrb	r3, [r3, #9]
 8010c7e:	2b00      	cmp	r3, #0
 8010c80:	d10c      	bne.n	8010c9c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8010c82:	2301      	movs	r3, #1
 8010c84:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8010c86:	7dbb      	ldrb	r3, [r7, #22]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d007      	beq.n	8010c9c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8010c8c:	6938      	ldr	r0, [r7, #16]
 8010c8e:	f003 f85d 	bl	8013d4c <tcp_abort>
          err = ERR_OK;
 8010c92:	2300      	movs	r3, #0
 8010c94:	75fb      	strb	r3, [r7, #23]
 8010c96:	e001      	b.n	8010c9c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8010c98:	2301      	movs	r3, #1
 8010c9a:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 8010c9c:	7d7b      	ldrb	r3, [r7, #21]
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d052      	beq.n	8010d48 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	6a1b      	ldr	r3, [r3, #32]
 8010ca6:	681b      	ldr	r3, [r3, #0]
 8010ca8:	330c      	adds	r3, #12
 8010caa:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	6a1b      	ldr	r3, [r3, #32]
 8010cb0:	7dfa      	ldrb	r2, [r7, #23]
 8010cb2:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	2200      	movs	r2, #0
 8010cb8:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	2200      	movs	r2, #0
 8010cbe:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8010cc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d129      	bne.n	8010d1c <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8010cc8:	7dbb      	ldrb	r3, [r7, #22]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d00c      	beq.n	8010ce8 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	2200      	movs	r2, #0
 8010cd2:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	d005      	beq.n	8010ce8 <lwip_netconn_do_close_internal+0x1f0>
 8010cdc:	687b      	ldr	r3, [r7, #4]
 8010cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ce0:	2200      	movs	r2, #0
 8010ce2:	2104      	movs	r1, #4
 8010ce4:	6878      	ldr	r0, [r7, #4]
 8010ce6:	4798      	blx	r3
      }
      if (shut_rx) {
 8010ce8:	7bbb      	ldrb	r3, [r7, #14]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d009      	beq.n	8010d02 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d005      	beq.n	8010d02 <lwip_netconn_do_close_internal+0x20a>
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010cfa:	2200      	movs	r2, #0
 8010cfc:	2100      	movs	r1, #0
 8010cfe:	6878      	ldr	r0, [r7, #4]
 8010d00:	4798      	blx	r3
      }
      if (shut_tx) {
 8010d02:	7b7b      	ldrb	r3, [r7, #13]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d009      	beq.n	8010d1c <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d005      	beq.n	8010d1c <lwip_netconn_do_close_internal+0x224>
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d14:	2200      	movs	r2, #0
 8010d16:	2102      	movs	r1, #2
 8010d18:	6878      	ldr	r0, [r7, #4]
 8010d1a:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8010d1c:	78fb      	ldrb	r3, [r7, #3]
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d002      	beq.n	8010d28 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 8010d22:	68b8      	ldr	r0, [r7, #8]
 8010d24:	f00b fec2 	bl	801caac <sys_sem_signal>
    }
    return ERR_OK;
 8010d28:	2300      	movs	r3, #0
 8010d2a:	e03c      	b.n	8010da6 <lwip_netconn_do_close_internal+0x2ae>
 8010d2c:	0801ea50 	.word	0x0801ea50
 8010d30:	0801ed24 	.word	0x0801ed24
 8010d34:	0801ea94 	.word	0x0801ea94
 8010d38:	0801ed34 	.word	0x0801ed34
 8010d3c:	0801ed54 	.word	0x0801ed54
 8010d40:	0801ed78 	.word	0x0801ed78
 8010d44:	0801ebb8 	.word	0x0801ebb8
  }
  if (!close_finished) {
 8010d48:	7d7b      	ldrb	r3, [r7, #21]
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	d11e      	bne.n	8010d8c <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 8010d4e:	693b      	ldr	r3, [r7, #16]
 8010d50:	7d1b      	ldrb	r3, [r3, #20]
 8010d52:	2b01      	cmp	r3, #1
 8010d54:	d106      	bne.n	8010d64 <lwip_netconn_do_close_internal+0x26c>
 8010d56:	4b16      	ldr	r3, [pc, #88]	; (8010db0 <lwip_netconn_do_close_internal+0x2b8>)
 8010d58:	f240 4241 	movw	r2, #1089	; 0x441
 8010d5c:	4915      	ldr	r1, [pc, #84]	; (8010db4 <lwip_netconn_do_close_internal+0x2bc>)
 8010d5e:	4816      	ldr	r0, [pc, #88]	; (8010db8 <lwip_netconn_do_close_internal+0x2c0>)
 8010d60:	f00c f9a8 	bl	801d0b4 <iprintf>
    if (shut_tx) {
 8010d64:	7b7b      	ldrb	r3, [r7, #13]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d003      	beq.n	8010d72 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 8010d6a:	4914      	ldr	r1, [pc, #80]	; (8010dbc <lwip_netconn_do_close_internal+0x2c4>)
 8010d6c:	6938      	ldr	r0, [r7, #16]
 8010d6e:	f003 ffe5 	bl	8014d3c <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8010d72:	2201      	movs	r2, #1
 8010d74:	4912      	ldr	r1, [pc, #72]	; (8010dc0 <lwip_netconn_do_close_internal+0x2c8>)
 8010d76:	6938      	ldr	r0, [r7, #16]
 8010d78:	f004 f83c 	bl	8014df4 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 8010d7c:	4911      	ldr	r1, [pc, #68]	; (8010dc4 <lwip_netconn_do_close_internal+0x2cc>)
 8010d7e:	6938      	ldr	r0, [r7, #16]
 8010d80:	f003 fffe 	bl	8014d80 <tcp_err>
    tcp_arg(tpcb, conn);
 8010d84:	6879      	ldr	r1, [r7, #4]
 8010d86:	6938      	ldr	r0, [r7, #16]
 8010d88:	f003 ffa4 	bl	8014cd4 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8010d8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d106      	bne.n	8010da2 <lwip_netconn_do_close_internal+0x2aa>
 8010d94:	4b06      	ldr	r3, [pc, #24]	; (8010db0 <lwip_netconn_do_close_internal+0x2b8>)
 8010d96:	f240 424d 	movw	r2, #1101	; 0x44d
 8010d9a:	490b      	ldr	r1, [pc, #44]	; (8010dc8 <lwip_netconn_do_close_internal+0x2d0>)
 8010d9c:	4806      	ldr	r0, [pc, #24]	; (8010db8 <lwip_netconn_do_close_internal+0x2c0>)
 8010d9e:	f00c f989 	bl	801d0b4 <iprintf>
  return err;
 8010da2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010da6:	4618      	mov	r0, r3
 8010da8:	3718      	adds	r7, #24
 8010daa:	46bd      	mov	sp, r7
 8010dac:	bd80      	pop	{r7, pc}
 8010dae:	bf00      	nop
 8010db0:	0801ea50 	.word	0x0801ea50
 8010db4:	0801ed8c 	.word	0x0801ed8c
 8010db8:	0801ea94 	.word	0x0801ea94
 8010dbc:	080104e9 	.word	0x080104e9
 8010dc0:	08010421 	.word	0x08010421
 8010dc4:	08010591 	.word	0x08010591
 8010dc8:	0801edb0 	.word	0x0801edb0

08010dcc <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	b084      	sub	sp, #16
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	681b      	ldr	r3, [r3, #0]
 8010ddc:	785b      	ldrb	r3, [r3, #1]
 8010dde:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8010de0:	7afb      	ldrb	r3, [r7, #11]
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d00d      	beq.n	8010e02 <lwip_netconn_do_delconn+0x36>
 8010de6:	68fb      	ldr	r3, [r7, #12]
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	781b      	ldrb	r3, [r3, #0]
 8010dec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010df0:	2b10      	cmp	r3, #16
 8010df2:	d006      	beq.n	8010e02 <lwip_netconn_do_delconn+0x36>
 8010df4:	4b60      	ldr	r3, [pc, #384]	; (8010f78 <lwip_netconn_do_delconn+0x1ac>)
 8010df6:	f240 425e 	movw	r2, #1118	; 0x45e
 8010dfa:	4960      	ldr	r1, [pc, #384]	; (8010f7c <lwip_netconn_do_delconn+0x1b0>)
 8010dfc:	4860      	ldr	r0, [pc, #384]	; (8010f80 <lwip_netconn_do_delconn+0x1b4>)
 8010dfe:	f00c f959 	bl	801d0b4 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8010e02:	7afb      	ldrb	r3, [r7, #11]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d005      	beq.n	8010e14 <lwip_netconn_do_delconn+0x48>
 8010e08:	7afb      	ldrb	r3, [r7, #11]
 8010e0a:	2b02      	cmp	r3, #2
 8010e0c:	d002      	beq.n	8010e14 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8010e0e:	7afb      	ldrb	r3, [r7, #11]
 8010e10:	2b03      	cmp	r3, #3
 8010e12:	d109      	bne.n	8010e28 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 8010e14:	7afb      	ldrb	r3, [r7, #11]
 8010e16:	2b03      	cmp	r3, #3
 8010e18:	d10a      	bne.n	8010e30 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	7f1b      	ldrb	r3, [r3, #28]
 8010e20:	f003 0304 	and.w	r3, r3, #4
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d103      	bne.n	8010e30 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 8010e28:	68fb      	ldr	r3, [r7, #12]
 8010e2a:	22fb      	movs	r2, #251	; 0xfb
 8010e2c:	711a      	strb	r2, [r3, #4]
 8010e2e:	e097      	b.n	8010f60 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8010e30:	7afb      	ldrb	r3, [r7, #11]
 8010e32:	2b03      	cmp	r3, #3
 8010e34:	d10d      	bne.n	8010e52 <lwip_netconn_do_delconn+0x86>
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	7f1b      	ldrb	r3, [r3, #28]
 8010e3c:	f003 0304 	and.w	r3, r3, #4
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d106      	bne.n	8010e52 <lwip_netconn_do_delconn+0x86>
 8010e44:	4b4c      	ldr	r3, [pc, #304]	; (8010f78 <lwip_netconn_do_delconn+0x1ac>)
 8010e46:	f240 427a 	movw	r2, #1146	; 0x47a
 8010e4a:	494e      	ldr	r1, [pc, #312]	; (8010f84 <lwip_netconn_do_delconn+0x1b8>)
 8010e4c:	484c      	ldr	r0, [pc, #304]	; (8010f80 <lwip_netconn_do_delconn+0x1b4>)
 8010e4e:	f00c f931 	bl	801d0b4 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8010e52:	68fb      	ldr	r3, [r7, #12]
 8010e54:	2200      	movs	r2, #0
 8010e56:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	681b      	ldr	r3, [r3, #0]
 8010e5c:	4618      	mov	r0, r3
 8010e5e:	f7ff fdcd 	bl	80109fc <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8010e62:	68fb      	ldr	r3, [r7, #12]
 8010e64:	681b      	ldr	r3, [r3, #0]
 8010e66:	685b      	ldr	r3, [r3, #4]
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d05f      	beq.n	8010f2c <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	781b      	ldrb	r3, [r3, #0]
 8010e72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010e76:	2b10      	cmp	r3, #16
 8010e78:	d00d      	beq.n	8010e96 <lwip_netconn_do_delconn+0xca>
 8010e7a:	2b20      	cmp	r3, #32
 8010e7c:	d151      	bne.n	8010f22 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8010e7e:	68fb      	ldr	r3, [r7, #12]
 8010e80:	681b      	ldr	r3, [r3, #0]
 8010e82:	685b      	ldr	r3, [r3, #4]
 8010e84:	2200      	movs	r2, #0
 8010e86:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	685b      	ldr	r3, [r3, #4]
 8010e8e:	4618      	mov	r0, r3
 8010e90:	f009 f990 	bl	801a1b4 <udp_remove>
          break;
 8010e94:	e046      	b.n	8010f24 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	6a1b      	ldr	r3, [r3, #32]
 8010e9c:	2b00      	cmp	r3, #0
 8010e9e:	d006      	beq.n	8010eae <lwip_netconn_do_delconn+0xe2>
 8010ea0:	4b35      	ldr	r3, [pc, #212]	; (8010f78 <lwip_netconn_do_delconn+0x1ac>)
 8010ea2:	f240 4294 	movw	r2, #1172	; 0x494
 8010ea6:	4938      	ldr	r1, [pc, #224]	; (8010f88 <lwip_netconn_do_delconn+0x1bc>)
 8010ea8:	4835      	ldr	r0, [pc, #212]	; (8010f80 <lwip_netconn_do_delconn+0x1b4>)
 8010eaa:	f00c f903 	bl	801d0b4 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	681b      	ldr	r3, [r3, #0]
 8010eb2:	2204      	movs	r2, #4
 8010eb4:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8010eb6:	68fb      	ldr	r3, [r7, #12]
 8010eb8:	2203      	movs	r2, #3
 8010eba:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	681b      	ldr	r3, [r3, #0]
 8010ec0:	68fa      	ldr	r2, [r7, #12]
 8010ec2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	2100      	movs	r1, #0
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f7ff fe14 	bl	8010af8 <lwip_netconn_do_close_internal>
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	2b00      	cmp	r3, #0
 8010ed4:	d04b      	beq.n	8010f6e <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8010ed6:	68fb      	ldr	r3, [r7, #12]
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	785b      	ldrb	r3, [r3, #1]
 8010edc:	2b04      	cmp	r3, #4
 8010ede:	d006      	beq.n	8010eee <lwip_netconn_do_delconn+0x122>
 8010ee0:	4b25      	ldr	r3, [pc, #148]	; (8010f78 <lwip_netconn_do_delconn+0x1ac>)
 8010ee2:	f240 429a 	movw	r2, #1178	; 0x49a
 8010ee6:	4929      	ldr	r1, [pc, #164]	; (8010f8c <lwip_netconn_do_delconn+0x1c0>)
 8010ee8:	4825      	ldr	r0, [pc, #148]	; (8010f80 <lwip_netconn_do_delconn+0x1b4>)
 8010eea:	f00c f8e3 	bl	801d0b4 <iprintf>
            UNLOCK_TCPIP_CORE();
 8010eee:	4828      	ldr	r0, [pc, #160]	; (8010f90 <lwip_netconn_do_delconn+0x1c4>)
 8010ef0:	f00b fe4d 	bl	801cb8e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	330c      	adds	r3, #12
 8010efa:	2100      	movs	r1, #0
 8010efc:	4618      	mov	r0, r3
 8010efe:	f00b fda4 	bl	801ca4a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 8010f02:	4823      	ldr	r0, [pc, #140]	; (8010f90 <lwip_netconn_do_delconn+0x1c4>)
 8010f04:	f00b fe34 	bl	801cb70 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8010f08:	68fb      	ldr	r3, [r7, #12]
 8010f0a:	681b      	ldr	r3, [r3, #0]
 8010f0c:	785b      	ldrb	r3, [r3, #1]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d02d      	beq.n	8010f6e <lwip_netconn_do_delconn+0x1a2>
 8010f12:	4b19      	ldr	r3, [pc, #100]	; (8010f78 <lwip_netconn_do_delconn+0x1ac>)
 8010f14:	f240 429e 	movw	r2, #1182	; 0x49e
 8010f18:	491c      	ldr	r1, [pc, #112]	; (8010f8c <lwip_netconn_do_delconn+0x1c0>)
 8010f1a:	4819      	ldr	r0, [pc, #100]	; (8010f80 <lwip_netconn_do_delconn+0x1b4>)
 8010f1c:	f00c f8ca 	bl	801d0b4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 8010f20:	e025      	b.n	8010f6e <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 8010f22:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 8010f24:	68fb      	ldr	r3, [r7, #12]
 8010f26:	681b      	ldr	r3, [r3, #0]
 8010f28:	2200      	movs	r2, #0
 8010f2a:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 8010f2c:	68fb      	ldr	r3, [r7, #12]
 8010f2e:	681b      	ldr	r3, [r3, #0]
 8010f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d007      	beq.n	8010f46 <lwip_netconn_do_delconn+0x17a>
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f3c:	68fa      	ldr	r2, [r7, #12]
 8010f3e:	6810      	ldr	r0, [r2, #0]
 8010f40:	2200      	movs	r2, #0
 8010f42:	2100      	movs	r1, #0
 8010f44:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8010f46:	68fb      	ldr	r3, [r7, #12]
 8010f48:	681b      	ldr	r3, [r3, #0]
 8010f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d007      	beq.n	8010f60 <lwip_netconn_do_delconn+0x194>
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f56:	68fa      	ldr	r2, [r7, #12]
 8010f58:	6810      	ldr	r0, [r2, #0]
 8010f5a:	2200      	movs	r2, #0
 8010f5c:	2102      	movs	r1, #2
 8010f5e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8010f60:	68fb      	ldr	r3, [r7, #12]
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	330c      	adds	r3, #12
 8010f66:	4618      	mov	r0, r3
 8010f68:	f00b fdba 	bl	801cae0 <sys_sem_valid>
 8010f6c:	e000      	b.n	8010f70 <lwip_netconn_do_delconn+0x1a4>
          return;
 8010f6e:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8010f70:	3710      	adds	r7, #16
 8010f72:	46bd      	mov	sp, r7
 8010f74:	bd80      	pop	{r7, pc}
 8010f76:	bf00      	nop
 8010f78:	0801ea50 	.word	0x0801ea50
 8010f7c:	0801edc0 	.word	0x0801edc0
 8010f80:	0801ea94 	.word	0x0801ea94
 8010f84:	0801edd4 	.word	0x0801edd4
 8010f88:	0801edf4 	.word	0x0801edf4
 8010f8c:	0801ee10 	.word	0x0801ee10
 8010f90:	2000a664 	.word	0x2000a664

08010f94 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b084      	sub	sp, #16
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8010fa0:	68bb      	ldr	r3, [r7, #8]
 8010fa2:	681b      	ldr	r3, [r3, #0]
 8010fa4:	685b      	ldr	r3, [r3, #4]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d025      	beq.n	8010ff6 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8010faa:	68bb      	ldr	r3, [r7, #8]
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	781b      	ldrb	r3, [r3, #0]
 8010fb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8010fb4:	2b10      	cmp	r3, #16
 8010fb6:	d00e      	beq.n	8010fd6 <lwip_netconn_do_bind+0x42>
 8010fb8:	2b20      	cmp	r3, #32
 8010fba:	d119      	bne.n	8010ff0 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8010fbc:	68bb      	ldr	r3, [r7, #8]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	6858      	ldr	r0, [r3, #4]
 8010fc2:	68bb      	ldr	r3, [r7, #8]
 8010fc4:	6899      	ldr	r1, [r3, #8]
 8010fc6:	68bb      	ldr	r3, [r7, #8]
 8010fc8:	899b      	ldrh	r3, [r3, #12]
 8010fca:	461a      	mov	r2, r3
 8010fcc:	f009 f84a 	bl	801a064 <udp_bind>
 8010fd0:	4603      	mov	r3, r0
 8010fd2:	73fb      	strb	r3, [r7, #15]
        break;
 8010fd4:	e011      	b.n	8010ffa <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8010fd6:	68bb      	ldr	r3, [r7, #8]
 8010fd8:	681b      	ldr	r3, [r3, #0]
 8010fda:	6858      	ldr	r0, [r3, #4]
 8010fdc:	68bb      	ldr	r3, [r7, #8]
 8010fde:	6899      	ldr	r1, [r3, #8]
 8010fe0:	68bb      	ldr	r3, [r7, #8]
 8010fe2:	899b      	ldrh	r3, [r3, #12]
 8010fe4:	461a      	mov	r2, r3
 8010fe6:	f002 febd 	bl	8013d64 <tcp_bind>
 8010fea:	4603      	mov	r3, r0
 8010fec:	73fb      	strb	r3, [r7, #15]
        break;
 8010fee:	e004      	b.n	8010ffa <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8010ff0:	23fa      	movs	r3, #250	; 0xfa
 8010ff2:	73fb      	strb	r3, [r7, #15]
        break;
 8010ff4:	e001      	b.n	8010ffa <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 8010ff6:	23fa      	movs	r3, #250	; 0xfa
 8010ff8:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8010ffa:	68bb      	ldr	r3, [r7, #8]
 8010ffc:	7bfa      	ldrb	r2, [r7, #15]
 8010ffe:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8011000:	bf00      	nop
 8011002:	3710      	adds	r7, #16
 8011004:	46bd      	mov	sp, r7
 8011006:	bd80      	pop	{r7, pc}

08011008 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8011008:	b580      	push	{r7, lr}
 801100a:	b084      	sub	sp, #16
 801100c:	af00      	add	r7, sp, #0
 801100e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8011014:	68bb      	ldr	r3, [r7, #8]
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	4618      	mov	r0, r3
 801101a:	f7ff f871 	bl	8010100 <netconn_err>
 801101e:	4603      	mov	r3, r0
 8011020:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8011022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011026:	2b00      	cmp	r3, #0
 8011028:	d134      	bne.n	8011094 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 801102a:	68bb      	ldr	r3, [r7, #8]
 801102c:	681b      	ldr	r3, [r3, #0]
 801102e:	685b      	ldr	r3, [r3, #4]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d02d      	beq.n	8011090 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8011034:	68bb      	ldr	r3, [r7, #8]
 8011036:	681b      	ldr	r3, [r3, #0]
 8011038:	781b      	ldrb	r3, [r3, #0]
 801103a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801103e:	2b20      	cmp	r3, #32
 8011040:	d123      	bne.n	801108a <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8011042:	68bb      	ldr	r3, [r7, #8]
 8011044:	689b      	ldr	r3, [r3, #8]
 8011046:	689b      	ldr	r3, [r3, #8]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d10c      	bne.n	8011066 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 801104c:	68bb      	ldr	r3, [r7, #8]
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	685a      	ldr	r2, [r3, #4]
 8011052:	68bb      	ldr	r3, [r7, #8]
 8011054:	689b      	ldr	r3, [r3, #8]
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	4619      	mov	r1, r3
 801105a:	4610      	mov	r0, r2
 801105c:	f008 fe18 	bl	8019c90 <udp_send>
 8011060:	4603      	mov	r3, r0
 8011062:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8011064:	e016      	b.n	8011094 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8011066:	68bb      	ldr	r3, [r7, #8]
 8011068:	681b      	ldr	r3, [r3, #0]
 801106a:	6858      	ldr	r0, [r3, #4]
 801106c:	68bb      	ldr	r3, [r7, #8]
 801106e:	689b      	ldr	r3, [r3, #8]
 8011070:	6819      	ldr	r1, [r3, #0]
 8011072:	68bb      	ldr	r3, [r7, #8]
 8011074:	689b      	ldr	r3, [r3, #8]
 8011076:	f103 0208 	add.w	r2, r3, #8
 801107a:	68bb      	ldr	r3, [r7, #8]
 801107c:	689b      	ldr	r3, [r3, #8]
 801107e:	899b      	ldrh	r3, [r3, #12]
 8011080:	f008 fe3a 	bl	8019cf8 <udp_sendto>
 8011084:	4603      	mov	r3, r0
 8011086:	73fb      	strb	r3, [r7, #15]
          break;
 8011088:	e004      	b.n	8011094 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 801108a:	23f5      	movs	r3, #245	; 0xf5
 801108c:	73fb      	strb	r3, [r7, #15]
          break;
 801108e:	e001      	b.n	8011094 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 8011090:	23f5      	movs	r3, #245	; 0xf5
 8011092:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8011094:	68bb      	ldr	r3, [r7, #8]
 8011096:	7bfa      	ldrb	r2, [r7, #15]
 8011098:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 801109a:	bf00      	nop
 801109c:	3710      	adds	r7, #16
 801109e:	46bd      	mov	sp, r7
 80110a0:	bd80      	pop	{r7, pc}

080110a2 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 80110a2:	b580      	push	{r7, lr}
 80110a4:	b086      	sub	sp, #24
 80110a6:	af00      	add	r7, sp, #0
 80110a8:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 80110ae:	693b      	ldr	r3, [r7, #16]
 80110b0:	2200      	movs	r2, #0
 80110b2:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 80110b4:	693b      	ldr	r3, [r7, #16]
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	685b      	ldr	r3, [r3, #4]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d022      	beq.n	8011104 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 80110be:	693b      	ldr	r3, [r7, #16]
 80110c0:	681b      	ldr	r3, [r3, #0]
 80110c2:	781b      	ldrb	r3, [r3, #0]
 80110c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80110c8:	2b10      	cmp	r3, #16
 80110ca:	d11b      	bne.n	8011104 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 80110cc:	693b      	ldr	r3, [r7, #16]
 80110ce:	689b      	ldr	r3, [r3, #8]
 80110d0:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 80110d2:	697b      	ldr	r3, [r7, #20]
 80110d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80110d8:	d202      	bcs.n	80110e0 <lwip_netconn_do_recv+0x3e>
 80110da:	697b      	ldr	r3, [r7, #20]
 80110dc:	b29b      	uxth	r3, r3
 80110de:	e001      	b.n	80110e4 <lwip_netconn_do_recv+0x42>
 80110e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80110e4:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 80110e6:	693b      	ldr	r3, [r7, #16]
 80110e8:	681b      	ldr	r3, [r3, #0]
 80110ea:	685b      	ldr	r3, [r3, #4]
 80110ec:	89fa      	ldrh	r2, [r7, #14]
 80110ee:	4611      	mov	r1, r2
 80110f0:	4618      	mov	r0, r3
 80110f2:	f002 ff29 	bl	8013f48 <tcp_recved>
        remaining -= recved;
 80110f6:	89fb      	ldrh	r3, [r7, #14]
 80110f8:	697a      	ldr	r2, [r7, #20]
 80110fa:	1ad3      	subs	r3, r2, r3
 80110fc:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 80110fe:	697b      	ldr	r3, [r7, #20]
 8011100:	2b00      	cmp	r3, #0
 8011102:	d1e6      	bne.n	80110d2 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8011104:	bf00      	nop
 8011106:	3718      	adds	r7, #24
 8011108:	46bd      	mov	sp, r7
 801110a:	bd80      	pop	{r7, pc}

0801110c <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 801110c:	b580      	push	{r7, lr}
 801110e:	b088      	sub	sp, #32
 8011110:	af00      	add	r7, sp, #0
 8011112:	6078      	str	r0, [r7, #4]
 8011114:	460b      	mov	r3, r1
 8011116:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8011118:	2300      	movs	r3, #0
 801111a:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	2b00      	cmp	r3, #0
 8011120:	d106      	bne.n	8011130 <lwip_netconn_do_writemore+0x24>
 8011122:	4b96      	ldr	r3, [pc, #600]	; (801137c <lwip_netconn_do_writemore+0x270>)
 8011124:	f240 6273 	movw	r2, #1651	; 0x673
 8011128:	4995      	ldr	r1, [pc, #596]	; (8011380 <lwip_netconn_do_writemore+0x274>)
 801112a:	4896      	ldr	r0, [pc, #600]	; (8011384 <lwip_netconn_do_writemore+0x278>)
 801112c:	f00b ffc2 	bl	801d0b4 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8011130:	687b      	ldr	r3, [r7, #4]
 8011132:	785b      	ldrb	r3, [r3, #1]
 8011134:	2b01      	cmp	r3, #1
 8011136:	d006      	beq.n	8011146 <lwip_netconn_do_writemore+0x3a>
 8011138:	4b90      	ldr	r3, [pc, #576]	; (801137c <lwip_netconn_do_writemore+0x270>)
 801113a:	f240 6274 	movw	r2, #1652	; 0x674
 801113e:	4992      	ldr	r1, [pc, #584]	; (8011388 <lwip_netconn_do_writemore+0x27c>)
 8011140:	4890      	ldr	r0, [pc, #576]	; (8011384 <lwip_netconn_do_writemore+0x278>)
 8011142:	f00b ffb7 	bl	801d0b4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	6a1b      	ldr	r3, [r3, #32]
 801114a:	2b00      	cmp	r3, #0
 801114c:	d106      	bne.n	801115c <lwip_netconn_do_writemore+0x50>
 801114e:	4b8b      	ldr	r3, [pc, #556]	; (801137c <lwip_netconn_do_writemore+0x270>)
 8011150:	f240 6275 	movw	r2, #1653	; 0x675
 8011154:	498d      	ldr	r1, [pc, #564]	; (801138c <lwip_netconn_do_writemore+0x280>)
 8011156:	488b      	ldr	r0, [pc, #556]	; (8011384 <lwip_netconn_do_writemore+0x278>)
 8011158:	f00b ffac 	bl	801d0b4 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 801115c:	687b      	ldr	r3, [r7, #4]
 801115e:	685b      	ldr	r3, [r3, #4]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d106      	bne.n	8011172 <lwip_netconn_do_writemore+0x66>
 8011164:	4b85      	ldr	r3, [pc, #532]	; (801137c <lwip_netconn_do_writemore+0x270>)
 8011166:	f240 6276 	movw	r2, #1654	; 0x676
 801116a:	4989      	ldr	r1, [pc, #548]	; (8011390 <lwip_netconn_do_writemore+0x284>)
 801116c:	4885      	ldr	r0, [pc, #532]	; (8011384 <lwip_netconn_do_writemore+0x278>)
 801116e:	f00b ffa1 	bl	801d0b4 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	6a1b      	ldr	r3, [r3, #32]
 8011176:	699a      	ldr	r2, [r3, #24]
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	6a1b      	ldr	r3, [r3, #32]
 801117c:	695b      	ldr	r3, [r3, #20]
 801117e:	429a      	cmp	r2, r3
 8011180:	d306      	bcc.n	8011190 <lwip_netconn_do_writemore+0x84>
 8011182:	4b7e      	ldr	r3, [pc, #504]	; (801137c <lwip_netconn_do_writemore+0x270>)
 8011184:	f240 6277 	movw	r2, #1655	; 0x677
 8011188:	4982      	ldr	r1, [pc, #520]	; (8011394 <lwip_netconn_do_writemore+0x288>)
 801118a:	487e      	ldr	r0, [pc, #504]	; (8011384 <lwip_netconn_do_writemore+0x278>)
 801118c:	f00b ff92 	bl	801d0b4 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	6a1b      	ldr	r3, [r3, #32]
 8011194:	899b      	ldrh	r3, [r3, #12]
 8011196:	2b00      	cmp	r3, #0
 8011198:	d106      	bne.n	80111a8 <lwip_netconn_do_writemore+0x9c>
 801119a:	4b78      	ldr	r3, [pc, #480]	; (801137c <lwip_netconn_do_writemore+0x270>)
 801119c:	f240 6279 	movw	r2, #1657	; 0x679
 80111a0:	497d      	ldr	r1, [pc, #500]	; (8011398 <lwip_netconn_do_writemore+0x28c>)
 80111a2:	4878      	ldr	r0, [pc, #480]	; (8011384 <lwip_netconn_do_writemore+0x278>)
 80111a4:	f00b ff86 	bl	801d0b4 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 80111a8:	687b      	ldr	r3, [r7, #4]
 80111aa:	6a1b      	ldr	r3, [r3, #32]
 80111ac:	7f1b      	ldrb	r3, [r3, #28]
 80111ae:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	7f1b      	ldrb	r3, [r3, #28]
 80111b4:	f003 0302 	and.w	r3, r3, #2
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d104      	bne.n	80111c6 <lwip_netconn_do_writemore+0xba>
 80111bc:	7ebb      	ldrb	r3, [r7, #26]
 80111be:	f003 0304 	and.w	r3, r3, #4
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d001      	beq.n	80111ca <lwip_netconn_do_writemore+0xbe>
 80111c6:	2301      	movs	r3, #1
 80111c8:	e000      	b.n	80111cc <lwip_netconn_do_writemore+0xc0>
 80111ca:	2300      	movs	r3, #0
 80111cc:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	6a1b      	ldr	r3, [r3, #32]
 80111d2:	689b      	ldr	r3, [r3, #8]
 80111d4:	681a      	ldr	r2, [r3, #0]
 80111d6:	687b      	ldr	r3, [r7, #4]
 80111d8:	6a1b      	ldr	r3, [r3, #32]
 80111da:	691b      	ldr	r3, [r3, #16]
 80111dc:	4413      	add	r3, r2
 80111de:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 80111e0:	687b      	ldr	r3, [r7, #4]
 80111e2:	6a1b      	ldr	r3, [r3, #32]
 80111e4:	689b      	ldr	r3, [r3, #8]
 80111e6:	685a      	ldr	r2, [r3, #4]
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	6a1b      	ldr	r3, [r3, #32]
 80111ec:	691b      	ldr	r3, [r3, #16]
 80111ee:	1ad3      	subs	r3, r2, r3
 80111f0:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 80111f2:	693b      	ldr	r3, [r7, #16]
 80111f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80111f8:	d307      	bcc.n	801120a <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 80111fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80111fe:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8011200:	7ebb      	ldrb	r3, [r7, #26]
 8011202:	f043 0302 	orr.w	r3, r3, #2
 8011206:	76bb      	strb	r3, [r7, #26]
 8011208:	e001      	b.n	801120e <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 801120a:	693b      	ldr	r3, [r7, #16]
 801120c:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	685b      	ldr	r3, [r3, #4]
 8011212:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011216:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8011218:	89fa      	ldrh	r2, [r7, #14]
 801121a:	8bbb      	ldrh	r3, [r7, #28]
 801121c:	429a      	cmp	r2, r3
 801121e:	d216      	bcs.n	801124e <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8011220:	89fb      	ldrh	r3, [r7, #14]
 8011222:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8011224:	7e3b      	ldrb	r3, [r7, #24]
 8011226:	2b00      	cmp	r3, #0
 8011228:	d00d      	beq.n	8011246 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 801122a:	8bbb      	ldrh	r3, [r7, #28]
 801122c:	2b00      	cmp	r3, #0
 801122e:	d10e      	bne.n	801124e <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	6a1b      	ldr	r3, [r3, #32]
 8011234:	699b      	ldr	r3, [r3, #24]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d102      	bne.n	8011240 <lwip_netconn_do_writemore+0x134>
 801123a:	f06f 0306 	mvn.w	r3, #6
 801123e:	e000      	b.n	8011242 <lwip_netconn_do_writemore+0x136>
 8011240:	2300      	movs	r3, #0
 8011242:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8011244:	e07d      	b.n	8011342 <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8011246:	7ebb      	ldrb	r3, [r7, #26]
 8011248:	f043 0302 	orr.w	r3, r3, #2
 801124c:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	6a1b      	ldr	r3, [r3, #32]
 8011252:	691a      	ldr	r2, [r3, #16]
 8011254:	8bbb      	ldrh	r3, [r7, #28]
 8011256:	441a      	add	r2, r3
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	6a1b      	ldr	r3, [r3, #32]
 801125c:	689b      	ldr	r3, [r3, #8]
 801125e:	685b      	ldr	r3, [r3, #4]
 8011260:	429a      	cmp	r2, r3
 8011262:	d906      	bls.n	8011272 <lwip_netconn_do_writemore+0x166>
 8011264:	4b45      	ldr	r3, [pc, #276]	; (801137c <lwip_netconn_do_writemore+0x270>)
 8011266:	f240 62a3 	movw	r2, #1699	; 0x6a3
 801126a:	494c      	ldr	r1, [pc, #304]	; (801139c <lwip_netconn_do_writemore+0x290>)
 801126c:	4845      	ldr	r0, [pc, #276]	; (8011384 <lwip_netconn_do_writemore+0x278>)
 801126e:	f00b ff21 	bl	801d0b4 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8011272:	8bbb      	ldrh	r3, [r7, #28]
 8011274:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011278:	4293      	cmp	r3, r2
 801127a:	d103      	bne.n	8011284 <lwip_netconn_do_writemore+0x178>
 801127c:	693b      	ldr	r3, [r7, #16]
 801127e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011282:	d209      	bcs.n	8011298 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8011284:	693b      	ldr	r3, [r7, #16]
 8011286:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8011288:	8bba      	ldrh	r2, [r7, #28]
 801128a:	429a      	cmp	r2, r3
 801128c:	d10b      	bne.n	80112a6 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	6a1b      	ldr	r3, [r3, #32]
 8011292:	899b      	ldrh	r3, [r3, #12]
 8011294:	2b01      	cmp	r3, #1
 8011296:	d906      	bls.n	80112a6 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8011298:	2301      	movs	r3, #1
 801129a:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 801129c:	7ebb      	ldrb	r3, [r7, #26]
 801129e:	f043 0302 	orr.w	r3, r3, #2
 80112a2:	76bb      	strb	r3, [r7, #26]
 80112a4:	e001      	b.n	80112aa <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 80112a6:	2300      	movs	r3, #0
 80112a8:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	6858      	ldr	r0, [r3, #4]
 80112ae:	7ebb      	ldrb	r3, [r7, #26]
 80112b0:	8bba      	ldrh	r2, [r7, #28]
 80112b2:	6979      	ldr	r1, [r7, #20]
 80112b4:	f006 fc50 	bl	8017b58 <tcp_write>
 80112b8:	4603      	mov	r3, r0
 80112ba:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 80112bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80112c0:	2b00      	cmp	r3, #0
 80112c2:	d12c      	bne.n	801131e <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	6a1b      	ldr	r3, [r3, #32]
 80112c8:	6999      	ldr	r1, [r3, #24]
 80112ca:	8bba      	ldrh	r2, [r7, #28]
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	6a1b      	ldr	r3, [r3, #32]
 80112d0:	440a      	add	r2, r1
 80112d2:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	6a1b      	ldr	r3, [r3, #32]
 80112d8:	6919      	ldr	r1, [r3, #16]
 80112da:	8bba      	ldrh	r2, [r7, #28]
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	6a1b      	ldr	r3, [r3, #32]
 80112e0:	440a      	add	r2, r1
 80112e2:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	6a1b      	ldr	r3, [r3, #32]
 80112e8:	691a      	ldr	r2, [r3, #16]
 80112ea:	687b      	ldr	r3, [r7, #4]
 80112ec:	6a1b      	ldr	r3, [r3, #32]
 80112ee:	689b      	ldr	r3, [r3, #8]
 80112f0:	685b      	ldr	r3, [r3, #4]
 80112f2:	429a      	cmp	r2, r3
 80112f4:	d113      	bne.n	801131e <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	6a1b      	ldr	r3, [r3, #32]
 80112fa:	899a      	ldrh	r2, [r3, #12]
 80112fc:	3a01      	subs	r2, #1
 80112fe:	b292      	uxth	r2, r2
 8011300:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	6a1b      	ldr	r3, [r3, #32]
 8011306:	899b      	ldrh	r3, [r3, #12]
 8011308:	2b00      	cmp	r3, #0
 801130a:	d008      	beq.n	801131e <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 801130c:	687b      	ldr	r3, [r7, #4]
 801130e:	6a1b      	ldr	r3, [r3, #32]
 8011310:	689a      	ldr	r2, [r3, #8]
 8011312:	3208      	adds	r2, #8
 8011314:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8011316:	687b      	ldr	r3, [r7, #4]
 8011318:	6a1b      	ldr	r3, [r3, #32]
 801131a:	2200      	movs	r2, #0
 801131c:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 801131e:	7e7b      	ldrb	r3, [r7, #25]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d004      	beq.n	801132e <lwip_netconn_do_writemore+0x222>
 8011324:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011328:	2b00      	cmp	r3, #0
 801132a:	f43f af50 	beq.w	80111ce <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 801132e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011332:	2b00      	cmp	r3, #0
 8011334:	d004      	beq.n	8011340 <lwip_netconn_do_writemore+0x234>
 8011336:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801133a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801133e:	d146      	bne.n	80113ce <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8011340:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8011342:	7e3b      	ldrb	r3, [r7, #24]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d02b      	beq.n	80113a0 <lwip_netconn_do_writemore+0x294>
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	6a1b      	ldr	r3, [r3, #32]
 801134c:	699a      	ldr	r2, [r3, #24]
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	6a1b      	ldr	r3, [r3, #32]
 8011352:	695b      	ldr	r3, [r3, #20]
 8011354:	429a      	cmp	r2, r3
 8011356:	d223      	bcs.n	80113a0 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801135c:	2b00      	cmp	r3, #0
 801135e:	d005      	beq.n	801136c <lwip_netconn_do_writemore+0x260>
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011364:	2200      	movs	r2, #0
 8011366:	2103      	movs	r1, #3
 8011368:	6878      	ldr	r0, [r7, #4]
 801136a:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	7f1b      	ldrb	r3, [r3, #28]
 8011370:	f043 0310 	orr.w	r3, r3, #16
 8011374:	b2da      	uxtb	r2, r3
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	771a      	strb	r2, [r3, #28]
 801137a:	e028      	b.n	80113ce <lwip_netconn_do_writemore+0x2c2>
 801137c:	0801ea50 	.word	0x0801ea50
 8011380:	0801eba8 	.word	0x0801eba8
 8011384:	0801ea94 	.word	0x0801ea94
 8011388:	0801eeb0 	.word	0x0801eeb0
 801138c:	0801ebb8 	.word	0x0801ebb8
 8011390:	0801eed0 	.word	0x0801eed0
 8011394:	0801eee8 	.word	0x0801eee8
 8011398:	0801ef28 	.word	0x0801ef28
 801139c:	0801ef50 	.word	0x0801ef50
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	685b      	ldr	r3, [r3, #4]
 80113a4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80113a8:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80113ac:	d305      	bcc.n	80113ba <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	685b      	ldr	r3, [r3, #4]
 80113b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80113b6:	2b04      	cmp	r3, #4
 80113b8:	d909      	bls.n	80113ce <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d005      	beq.n	80113ce <lwip_netconn_do_writemore+0x2c2>
 80113c2:	687b      	ldr	r3, [r7, #4]
 80113c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113c6:	2200      	movs	r2, #0
 80113c8:	2103      	movs	r1, #3
 80113ca:	6878      	ldr	r0, [r7, #4]
 80113cc:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 80113ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d11d      	bne.n	8011412 <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 80113d6:	687b      	ldr	r3, [r7, #4]
 80113d8:	6a1b      	ldr	r3, [r3, #32]
 80113da:	699a      	ldr	r2, [r3, #24]
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	6a1b      	ldr	r3, [r3, #32]
 80113e0:	695b      	ldr	r3, [r3, #20]
 80113e2:	429a      	cmp	r2, r3
 80113e4:	d002      	beq.n	80113ec <lwip_netconn_do_writemore+0x2e0>
 80113e6:	7e3b      	ldrb	r3, [r7, #24]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d001      	beq.n	80113f0 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 80113ec:	2301      	movs	r3, #1
 80113ee:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	685b      	ldr	r3, [r3, #4]
 80113f4:	4618      	mov	r0, r3
 80113f6:	f007 f999 	bl	801872c <tcp_output>
 80113fa:	4603      	mov	r3, r0
 80113fc:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 80113fe:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8011402:	f113 0f04 	cmn.w	r3, #4
 8011406:	d12c      	bne.n	8011462 <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8011408:	7b3b      	ldrb	r3, [r7, #12]
 801140a:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 801140c:	2301      	movs	r3, #1
 801140e:	76fb      	strb	r3, [r7, #27]
 8011410:	e027      	b.n	8011462 <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8011412:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011416:	f1b3 3fff 	cmp.w	r3, #4294967295
 801141a:	d120      	bne.n	801145e <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 801141c:	687b      	ldr	r3, [r7, #4]
 801141e:	685b      	ldr	r3, [r3, #4]
 8011420:	4618      	mov	r0, r3
 8011422:	f007 f983 	bl	801872c <tcp_output>
 8011426:	4603      	mov	r3, r0
 8011428:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 801142a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 801142e:	f113 0f04 	cmn.w	r3, #4
 8011432:	d104      	bne.n	801143e <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8011434:	7b7b      	ldrb	r3, [r7, #13]
 8011436:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8011438:	2301      	movs	r3, #1
 801143a:	76fb      	strb	r3, [r7, #27]
 801143c:	e011      	b.n	8011462 <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 801143e:	7e3b      	ldrb	r3, [r7, #24]
 8011440:	2b00      	cmp	r3, #0
 8011442:	d00e      	beq.n	8011462 <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8011444:	687b      	ldr	r3, [r7, #4]
 8011446:	6a1b      	ldr	r3, [r3, #32]
 8011448:	699b      	ldr	r3, [r3, #24]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d102      	bne.n	8011454 <lwip_netconn_do_writemore+0x348>
 801144e:	f06f 0306 	mvn.w	r3, #6
 8011452:	e000      	b.n	8011456 <lwip_netconn_do_writemore+0x34a>
 8011454:	2300      	movs	r3, #0
 8011456:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8011458:	2301      	movs	r3, #1
 801145a:	76fb      	strb	r3, [r7, #27]
 801145c:	e001      	b.n	8011462 <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 801145e:	2301      	movs	r3, #1
 8011460:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8011462:	7efb      	ldrb	r3, [r7, #27]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d015      	beq.n	8011494 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	6a1b      	ldr	r3, [r3, #32]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	330c      	adds	r3, #12
 8011470:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	6a1b      	ldr	r3, [r3, #32]
 8011476:	7ffa      	ldrb	r2, [r7, #31]
 8011478:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	2200      	movs	r2, #0
 801147e:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	2200      	movs	r2, #0
 8011484:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8011486:	78fb      	ldrb	r3, [r7, #3]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d006      	beq.n	801149a <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 801148c:	68b8      	ldr	r0, [r7, #8]
 801148e:	f00b fb0d 	bl	801caac <sys_sem_signal>
 8011492:	e002      	b.n	801149a <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8011494:	f04f 33ff 	mov.w	r3, #4294967295
 8011498:	e000      	b.n	801149c <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 801149a:	2300      	movs	r3, #0
}
 801149c:	4618      	mov	r0, r3
 801149e:	3720      	adds	r7, #32
 80114a0:	46bd      	mov	sp, r7
 80114a2:	bd80      	pop	{r7, pc}

080114a4 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 80114a4:	b580      	push	{r7, lr}
 80114a6:	b084      	sub	sp, #16
 80114a8:	af00      	add	r7, sp, #0
 80114aa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	785b      	ldrb	r3, [r3, #1]
 80114b6:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 80114b8:	68fb      	ldr	r3, [r7, #12]
 80114ba:	681b      	ldr	r3, [r3, #0]
 80114bc:	685b      	ldr	r3, [r3, #4]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d069      	beq.n	8011596 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	681b      	ldr	r3, [r3, #0]
 80114c6:	781b      	ldrb	r3, [r3, #0]
 80114c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 80114cc:	2b10      	cmp	r3, #16
 80114ce:	d162      	bne.n	8011596 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80114d0:	68fb      	ldr	r3, [r7, #12]
 80114d2:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80114d4:	2b03      	cmp	r3, #3
 80114d6:	d002      	beq.n	80114de <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80114d8:	7afb      	ldrb	r3, [r7, #11]
 80114da:	2b02      	cmp	r3, #2
 80114dc:	d05b      	beq.n	8011596 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 80114de:	7afb      	ldrb	r3, [r7, #11]
 80114e0:	2b03      	cmp	r3, #3
 80114e2:	d103      	bne.n	80114ec <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	22f5      	movs	r2, #245	; 0xf5
 80114e8:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80114ea:	e059      	b.n	80115a0 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 80114ec:	7afb      	ldrb	r3, [r7, #11]
 80114ee:	2b01      	cmp	r3, #1
 80114f0:	d103      	bne.n	80114fa <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	22fb      	movs	r2, #251	; 0xfb
 80114f6:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80114f8:	e052      	b.n	80115a0 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	7a1b      	ldrb	r3, [r3, #8]
 80114fe:	f003 0301 	and.w	r3, r3, #1
 8011502:	2b00      	cmp	r3, #0
 8011504:	d004      	beq.n	8011510 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	4618      	mov	r0, r3
 801150c:	f7ff fa76 	bl	80109fc <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	6a1b      	ldr	r3, [r3, #32]
 8011516:	2b00      	cmp	r3, #0
 8011518:	d006      	beq.n	8011528 <lwip_netconn_do_close+0x84>
 801151a:	4b23      	ldr	r3, [pc, #140]	; (80115a8 <lwip_netconn_do_close+0x104>)
 801151c:	f240 72bd 	movw	r2, #1981	; 0x7bd
 8011520:	4922      	ldr	r1, [pc, #136]	; (80115ac <lwip_netconn_do_close+0x108>)
 8011522:	4823      	ldr	r0, [pc, #140]	; (80115b0 <lwip_netconn_do_close+0x10c>)
 8011524:	f00b fdc6 	bl	801d0b4 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	2204      	movs	r2, #4
 801152e:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8011530:	68fb      	ldr	r3, [r7, #12]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	68fa      	ldr	r2, [r7, #12]
 8011536:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	681b      	ldr	r3, [r3, #0]
 801153c:	2100      	movs	r1, #0
 801153e:	4618      	mov	r0, r3
 8011540:	f7ff fada 	bl	8010af8 <lwip_netconn_do_close_internal>
 8011544:	4603      	mov	r3, r0
 8011546:	2b00      	cmp	r3, #0
 8011548:	d029      	beq.n	801159e <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	785b      	ldrb	r3, [r3, #1]
 8011550:	2b04      	cmp	r3, #4
 8011552:	d006      	beq.n	8011562 <lwip_netconn_do_close+0xbe>
 8011554:	4b14      	ldr	r3, [pc, #80]	; (80115a8 <lwip_netconn_do_close+0x104>)
 8011556:	f240 72c2 	movw	r2, #1986	; 0x7c2
 801155a:	4916      	ldr	r1, [pc, #88]	; (80115b4 <lwip_netconn_do_close+0x110>)
 801155c:	4814      	ldr	r0, [pc, #80]	; (80115b0 <lwip_netconn_do_close+0x10c>)
 801155e:	f00b fda9 	bl	801d0b4 <iprintf>
        UNLOCK_TCPIP_CORE();
 8011562:	4815      	ldr	r0, [pc, #84]	; (80115b8 <lwip_netconn_do_close+0x114>)
 8011564:	f00b fb13 	bl	801cb8e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8011568:	68fb      	ldr	r3, [r7, #12]
 801156a:	681b      	ldr	r3, [r3, #0]
 801156c:	330c      	adds	r3, #12
 801156e:	2100      	movs	r1, #0
 8011570:	4618      	mov	r0, r3
 8011572:	f00b fa6a 	bl	801ca4a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8011576:	4810      	ldr	r0, [pc, #64]	; (80115b8 <lwip_netconn_do_close+0x114>)
 8011578:	f00b fafa 	bl	801cb70 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	785b      	ldrb	r3, [r3, #1]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d00b      	beq.n	801159e <lwip_netconn_do_close+0xfa>
 8011586:	4b08      	ldr	r3, [pc, #32]	; (80115a8 <lwip_netconn_do_close+0x104>)
 8011588:	f240 72c6 	movw	r2, #1990	; 0x7c6
 801158c:	4909      	ldr	r1, [pc, #36]	; (80115b4 <lwip_netconn_do_close+0x110>)
 801158e:	4808      	ldr	r0, [pc, #32]	; (80115b0 <lwip_netconn_do_close+0x10c>)
 8011590:	f00b fd90 	bl	801d0b4 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8011594:	e003      	b.n	801159e <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8011596:	68fb      	ldr	r3, [r7, #12]
 8011598:	22f5      	movs	r2, #245	; 0xf5
 801159a:	711a      	strb	r2, [r3, #4]
 801159c:	e000      	b.n	80115a0 <lwip_netconn_do_close+0xfc>
      return;
 801159e:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 80115a0:	3710      	adds	r7, #16
 80115a2:	46bd      	mov	sp, r7
 80115a4:	bd80      	pop	{r7, pc}
 80115a6:	bf00      	nop
 80115a8:	0801ea50 	.word	0x0801ea50
 80115ac:	0801edf4 	.word	0x0801edf4
 80115b0:	0801ea94 	.word	0x0801ea94
 80115b4:	0801ee10 	.word	0x0801ee10
 80115b8:	2000a664 	.word	0x2000a664

080115bc <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 80115bc:	b580      	push	{r7, lr}
 80115be:	b082      	sub	sp, #8
 80115c0:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80115c2:	2006      	movs	r0, #6
 80115c4:	f000 ff30 	bl	8012428 <memp_malloc>
 80115c8:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80115ca:	687b      	ldr	r3, [r7, #4]
 80115cc:	2b00      	cmp	r3, #0
 80115ce:	d004      	beq.n	80115da <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 80115d0:	2210      	movs	r2, #16
 80115d2:	2100      	movs	r1, #0
 80115d4:	6878      	ldr	r0, [r7, #4]
 80115d6:	f00b fc85 	bl	801cee4 <memset>
  }
  return buf;
 80115da:	687b      	ldr	r3, [r7, #4]
}
 80115dc:	4618      	mov	r0, r3
 80115de:	3708      	adds	r7, #8
 80115e0:	46bd      	mov	sp, r7
 80115e2:	bd80      	pop	{r7, pc}

080115e4 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b082      	sub	sp, #8
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d013      	beq.n	801161a <netbuf_delete+0x36>
    if (buf->p != NULL) {
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	2b00      	cmp	r3, #0
 80115f8:	d00b      	beq.n	8011612 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	4618      	mov	r0, r3
 8011600:	f001 fda4 	bl	801314c <pbuf_free>
      buf->p = buf->ptr = NULL;
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	2200      	movs	r2, #0
 8011608:	605a      	str	r2, [r3, #4]
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	685a      	ldr	r2, [r3, #4]
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8011612:	6879      	ldr	r1, [r7, #4]
 8011614:	2006      	movs	r0, #6
 8011616:	f000 ff59 	bl	80124cc <memp_free>
  }
}
 801161a:	bf00      	nop
 801161c:	3708      	adds	r7, #8
 801161e:	46bd      	mov	sp, r7
 8011620:	bd80      	pop	{r7, pc}
	...

08011624 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 8011624:	b580      	push	{r7, lr}
 8011626:	b084      	sub	sp, #16
 8011628:	af00      	add	r7, sp, #0
 801162a:	60f8      	str	r0, [r7, #12]
 801162c:	60b9      	str	r1, [r7, #8]
 801162e:	4613      	mov	r3, r2
 8011630:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	2b00      	cmp	r3, #0
 8011636:	d108      	bne.n	801164a <netbuf_ref+0x26>
 8011638:	4b1c      	ldr	r3, [pc, #112]	; (80116ac <netbuf_ref+0x88>)
 801163a:	2299      	movs	r2, #153	; 0x99
 801163c:	491c      	ldr	r1, [pc, #112]	; (80116b0 <netbuf_ref+0x8c>)
 801163e:	481d      	ldr	r0, [pc, #116]	; (80116b4 <netbuf_ref+0x90>)
 8011640:	f00b fd38 	bl	801d0b4 <iprintf>
 8011644:	f06f 030f 	mvn.w	r3, #15
 8011648:	e02b      	b.n	80116a2 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	681b      	ldr	r3, [r3, #0]
 801164e:	2b00      	cmp	r3, #0
 8011650:	d004      	beq.n	801165c <netbuf_ref+0x38>
    pbuf_free(buf->p);
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	681b      	ldr	r3, [r3, #0]
 8011656:	4618      	mov	r0, r3
 8011658:	f001 fd78 	bl	801314c <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 801165c:	2241      	movs	r2, #65	; 0x41
 801165e:	2100      	movs	r1, #0
 8011660:	2036      	movs	r0, #54	; 0x36
 8011662:	f001 fa8f 	bl	8012b84 <pbuf_alloc>
 8011666:	4602      	mov	r2, r0
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d105      	bne.n	8011680 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	2200      	movs	r2, #0
 8011678:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 801167a:	f04f 33ff 	mov.w	r3, #4294967295
 801167e:	e010      	b.n	80116a2 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	681b      	ldr	r3, [r3, #0]
 8011684:	68ba      	ldr	r2, [r7, #8]
 8011686:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	88fa      	ldrh	r2, [r7, #6]
 801168e:	811a      	strh	r2, [r3, #8]
 8011690:	68fa      	ldr	r2, [r7, #12]
 8011692:	6812      	ldr	r2, [r2, #0]
 8011694:	891b      	ldrh	r3, [r3, #8]
 8011696:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	681a      	ldr	r2, [r3, #0]
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 80116a0:	2300      	movs	r3, #0
}
 80116a2:	4618      	mov	r0, r3
 80116a4:	3710      	adds	r7, #16
 80116a6:	46bd      	mov	sp, r7
 80116a8:	bd80      	pop	{r7, pc}
 80116aa:	bf00      	nop
 80116ac:	0801efa8 	.word	0x0801efa8
 80116b0:	0801f060 	.word	0x0801f060
 80116b4:	0801eff8 	.word	0x0801eff8

080116b8 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b084      	sub	sp, #16
 80116bc:	af00      	add	r7, sp, #0
 80116be:	60f8      	str	r0, [r7, #12]
 80116c0:	60b9      	str	r1, [r7, #8]
 80116c2:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d108      	bne.n	80116dc <netbuf_data+0x24>
 80116ca:	4b1b      	ldr	r3, [pc, #108]	; (8011738 <netbuf_data+0x80>)
 80116cc:	22c6      	movs	r2, #198	; 0xc6
 80116ce:	491b      	ldr	r1, [pc, #108]	; (801173c <netbuf_data+0x84>)
 80116d0:	481b      	ldr	r0, [pc, #108]	; (8011740 <netbuf_data+0x88>)
 80116d2:	f00b fcef 	bl	801d0b4 <iprintf>
 80116d6:	f06f 030f 	mvn.w	r3, #15
 80116da:	e029      	b.n	8011730 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 80116dc:	68bb      	ldr	r3, [r7, #8]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d108      	bne.n	80116f4 <netbuf_data+0x3c>
 80116e2:	4b15      	ldr	r3, [pc, #84]	; (8011738 <netbuf_data+0x80>)
 80116e4:	22c7      	movs	r2, #199	; 0xc7
 80116e6:	4917      	ldr	r1, [pc, #92]	; (8011744 <netbuf_data+0x8c>)
 80116e8:	4815      	ldr	r0, [pc, #84]	; (8011740 <netbuf_data+0x88>)
 80116ea:	f00b fce3 	bl	801d0b4 <iprintf>
 80116ee:	f06f 030f 	mvn.w	r3, #15
 80116f2:	e01d      	b.n	8011730 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 80116f4:	687b      	ldr	r3, [r7, #4]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d108      	bne.n	801170c <netbuf_data+0x54>
 80116fa:	4b0f      	ldr	r3, [pc, #60]	; (8011738 <netbuf_data+0x80>)
 80116fc:	22c8      	movs	r2, #200	; 0xc8
 80116fe:	4912      	ldr	r1, [pc, #72]	; (8011748 <netbuf_data+0x90>)
 8011700:	480f      	ldr	r0, [pc, #60]	; (8011740 <netbuf_data+0x88>)
 8011702:	f00b fcd7 	bl	801d0b4 <iprintf>
 8011706:	f06f 030f 	mvn.w	r3, #15
 801170a:	e011      	b.n	8011730 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	685b      	ldr	r3, [r3, #4]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d102      	bne.n	801171a <netbuf_data+0x62>
    return ERR_BUF;
 8011714:	f06f 0301 	mvn.w	r3, #1
 8011718:	e00a      	b.n	8011730 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	685b      	ldr	r3, [r3, #4]
 801171e:	685a      	ldr	r2, [r3, #4]
 8011720:	68bb      	ldr	r3, [r7, #8]
 8011722:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	685b      	ldr	r3, [r3, #4]
 8011728:	895a      	ldrh	r2, [r3, #10]
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 801172e:	2300      	movs	r3, #0
}
 8011730:	4618      	mov	r0, r3
 8011732:	3710      	adds	r7, #16
 8011734:	46bd      	mov	sp, r7
 8011736:	bd80      	pop	{r7, pc}
 8011738:	0801efa8 	.word	0x0801efa8
 801173c:	0801f0b0 	.word	0x0801f0b0
 8011740:	0801eff8 	.word	0x0801eff8
 8011744:	0801f0cc 	.word	0x0801f0cc
 8011748:	0801f0ec 	.word	0x0801f0ec

0801174c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 801174c:	b580      	push	{r7, lr}
 801174e:	b084      	sub	sp, #16
 8011750:	af00      	add	r7, sp, #0
 8011752:	6078      	str	r0, [r7, #4]
 8011754:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8011756:	f008 f8a1 	bl	801989c <sys_timeouts_sleeptime>
 801175a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011762:	d10b      	bne.n	801177c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8011764:	4813      	ldr	r0, [pc, #76]	; (80117b4 <tcpip_timeouts_mbox_fetch+0x68>)
 8011766:	f00b fa12 	bl	801cb8e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801176a:	2200      	movs	r2, #0
 801176c:	6839      	ldr	r1, [r7, #0]
 801176e:	6878      	ldr	r0, [r7, #4]
 8011770:	f00b f8ca 	bl	801c908 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8011774:	480f      	ldr	r0, [pc, #60]	; (80117b4 <tcpip_timeouts_mbox_fetch+0x68>)
 8011776:	f00b f9fb 	bl	801cb70 <sys_mutex_lock>
    return;
 801177a:	e018      	b.n	80117ae <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d102      	bne.n	8011788 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8011782:	f008 f851 	bl	8019828 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8011786:	e7e6      	b.n	8011756 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8011788:	480a      	ldr	r0, [pc, #40]	; (80117b4 <tcpip_timeouts_mbox_fetch+0x68>)
 801178a:	f00b fa00 	bl	801cb8e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801178e:	68fa      	ldr	r2, [r7, #12]
 8011790:	6839      	ldr	r1, [r7, #0]
 8011792:	6878      	ldr	r0, [r7, #4]
 8011794:	f00b f8b8 	bl	801c908 <sys_arch_mbox_fetch>
 8011798:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801179a:	4806      	ldr	r0, [pc, #24]	; (80117b4 <tcpip_timeouts_mbox_fetch+0x68>)
 801179c:	f00b f9e8 	bl	801cb70 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80117a0:	68bb      	ldr	r3, [r7, #8]
 80117a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117a6:	d102      	bne.n	80117ae <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80117a8:	f008 f83e 	bl	8019828 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80117ac:	e7d3      	b.n	8011756 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80117ae:	3710      	adds	r7, #16
 80117b0:	46bd      	mov	sp, r7
 80117b2:	bd80      	pop	{r7, pc}
 80117b4:	2000a664 	.word	0x2000a664

080117b8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80117b8:	b580      	push	{r7, lr}
 80117ba:	b084      	sub	sp, #16
 80117bc:	af00      	add	r7, sp, #0
 80117be:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80117c0:	4810      	ldr	r0, [pc, #64]	; (8011804 <tcpip_thread+0x4c>)
 80117c2:	f00b f9d5 	bl	801cb70 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80117c6:	4b10      	ldr	r3, [pc, #64]	; (8011808 <tcpip_thread+0x50>)
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d005      	beq.n	80117da <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 80117ce:	4b0e      	ldr	r3, [pc, #56]	; (8011808 <tcpip_thread+0x50>)
 80117d0:	681b      	ldr	r3, [r3, #0]
 80117d2:	4a0e      	ldr	r2, [pc, #56]	; (801180c <tcpip_thread+0x54>)
 80117d4:	6812      	ldr	r2, [r2, #0]
 80117d6:	4610      	mov	r0, r2
 80117d8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 80117da:	f107 030c 	add.w	r3, r7, #12
 80117de:	4619      	mov	r1, r3
 80117e0:	480b      	ldr	r0, [pc, #44]	; (8011810 <tcpip_thread+0x58>)
 80117e2:	f7ff ffb3 	bl	801174c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d106      	bne.n	80117fa <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80117ec:	4b09      	ldr	r3, [pc, #36]	; (8011814 <tcpip_thread+0x5c>)
 80117ee:	2291      	movs	r2, #145	; 0x91
 80117f0:	4909      	ldr	r1, [pc, #36]	; (8011818 <tcpip_thread+0x60>)
 80117f2:	480a      	ldr	r0, [pc, #40]	; (801181c <tcpip_thread+0x64>)
 80117f4:	f00b fc5e 	bl	801d0b4 <iprintf>
      continue;
 80117f8:	e003      	b.n	8011802 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	4618      	mov	r0, r3
 80117fe:	f000 f80f 	bl	8011820 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8011802:	e7ea      	b.n	80117da <tcpip_thread+0x22>
 8011804:	2000a664 	.word	0x2000a664
 8011808:	2000a658 	.word	0x2000a658
 801180c:	2000a65c 	.word	0x2000a65c
 8011810:	2000a660 	.word	0x2000a660
 8011814:	0801f140 	.word	0x0801f140
 8011818:	0801f170 	.word	0x0801f170
 801181c:	0801f190 	.word	0x0801f190

08011820 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8011820:	b580      	push	{r7, lr}
 8011822:	b082      	sub	sp, #8
 8011824:	af00      	add	r7, sp, #0
 8011826:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	781b      	ldrb	r3, [r3, #0]
 801182c:	2b02      	cmp	r3, #2
 801182e:	d026      	beq.n	801187e <tcpip_thread_handle_msg+0x5e>
 8011830:	2b02      	cmp	r3, #2
 8011832:	dc2b      	bgt.n	801188c <tcpip_thread_handle_msg+0x6c>
 8011834:	2b00      	cmp	r3, #0
 8011836:	d002      	beq.n	801183e <tcpip_thread_handle_msg+0x1e>
 8011838:	2b01      	cmp	r3, #1
 801183a:	d015      	beq.n	8011868 <tcpip_thread_handle_msg+0x48>
 801183c:	e026      	b.n	801188c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	68db      	ldr	r3, [r3, #12]
 8011842:	687a      	ldr	r2, [r7, #4]
 8011844:	6850      	ldr	r0, [r2, #4]
 8011846:	687a      	ldr	r2, [r7, #4]
 8011848:	6892      	ldr	r2, [r2, #8]
 801184a:	4611      	mov	r1, r2
 801184c:	4798      	blx	r3
 801184e:	4603      	mov	r3, r0
 8011850:	2b00      	cmp	r3, #0
 8011852:	d004      	beq.n	801185e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	685b      	ldr	r3, [r3, #4]
 8011858:	4618      	mov	r0, r3
 801185a:	f001 fc77 	bl	801314c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801185e:	6879      	ldr	r1, [r7, #4]
 8011860:	2009      	movs	r0, #9
 8011862:	f000 fe33 	bl	80124cc <memp_free>
      break;
 8011866:	e018      	b.n	801189a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	685b      	ldr	r3, [r3, #4]
 801186c:	687a      	ldr	r2, [r7, #4]
 801186e:	6892      	ldr	r2, [r2, #8]
 8011870:	4610      	mov	r0, r2
 8011872:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8011874:	6879      	ldr	r1, [r7, #4]
 8011876:	2008      	movs	r0, #8
 8011878:	f000 fe28 	bl	80124cc <memp_free>
      break;
 801187c:	e00d      	b.n	801189a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	685b      	ldr	r3, [r3, #4]
 8011882:	687a      	ldr	r2, [r7, #4]
 8011884:	6892      	ldr	r2, [r2, #8]
 8011886:	4610      	mov	r0, r2
 8011888:	4798      	blx	r3
      break;
 801188a:	e006      	b.n	801189a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801188c:	4b05      	ldr	r3, [pc, #20]	; (80118a4 <tcpip_thread_handle_msg+0x84>)
 801188e:	22cf      	movs	r2, #207	; 0xcf
 8011890:	4905      	ldr	r1, [pc, #20]	; (80118a8 <tcpip_thread_handle_msg+0x88>)
 8011892:	4806      	ldr	r0, [pc, #24]	; (80118ac <tcpip_thread_handle_msg+0x8c>)
 8011894:	f00b fc0e 	bl	801d0b4 <iprintf>
      break;
 8011898:	bf00      	nop
  }
}
 801189a:	bf00      	nop
 801189c:	3708      	adds	r7, #8
 801189e:	46bd      	mov	sp, r7
 80118a0:	bd80      	pop	{r7, pc}
 80118a2:	bf00      	nop
 80118a4:	0801f140 	.word	0x0801f140
 80118a8:	0801f170 	.word	0x0801f170
 80118ac:	0801f190 	.word	0x0801f190

080118b0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80118b0:	b580      	push	{r7, lr}
 80118b2:	b086      	sub	sp, #24
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	60f8      	str	r0, [r7, #12]
 80118b8:	60b9      	str	r1, [r7, #8]
 80118ba:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80118bc:	481a      	ldr	r0, [pc, #104]	; (8011928 <tcpip_inpkt+0x78>)
 80118be:	f00b f87e 	bl	801c9be <sys_mbox_valid>
 80118c2:	4603      	mov	r3, r0
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d105      	bne.n	80118d4 <tcpip_inpkt+0x24>
 80118c8:	4b18      	ldr	r3, [pc, #96]	; (801192c <tcpip_inpkt+0x7c>)
 80118ca:	22fc      	movs	r2, #252	; 0xfc
 80118cc:	4918      	ldr	r1, [pc, #96]	; (8011930 <tcpip_inpkt+0x80>)
 80118ce:	4819      	ldr	r0, [pc, #100]	; (8011934 <tcpip_inpkt+0x84>)
 80118d0:	f00b fbf0 	bl	801d0b4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80118d4:	2009      	movs	r0, #9
 80118d6:	f000 fda7 	bl	8012428 <memp_malloc>
 80118da:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80118dc:	697b      	ldr	r3, [r7, #20]
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d102      	bne.n	80118e8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 80118e2:	f04f 33ff 	mov.w	r3, #4294967295
 80118e6:	e01a      	b.n	801191e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80118e8:	697b      	ldr	r3, [r7, #20]
 80118ea:	2200      	movs	r2, #0
 80118ec:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 80118ee:	697b      	ldr	r3, [r7, #20]
 80118f0:	68fa      	ldr	r2, [r7, #12]
 80118f2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 80118f4:	697b      	ldr	r3, [r7, #20]
 80118f6:	68ba      	ldr	r2, [r7, #8]
 80118f8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 80118fa:	697b      	ldr	r3, [r7, #20]
 80118fc:	687a      	ldr	r2, [r7, #4]
 80118fe:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8011900:	6979      	ldr	r1, [r7, #20]
 8011902:	4809      	ldr	r0, [pc, #36]	; (8011928 <tcpip_inpkt+0x78>)
 8011904:	f00a ffe6 	bl	801c8d4 <sys_mbox_trypost>
 8011908:	4603      	mov	r3, r0
 801190a:	2b00      	cmp	r3, #0
 801190c:	d006      	beq.n	801191c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801190e:	6979      	ldr	r1, [r7, #20]
 8011910:	2009      	movs	r0, #9
 8011912:	f000 fddb 	bl	80124cc <memp_free>
    return ERR_MEM;
 8011916:	f04f 33ff 	mov.w	r3, #4294967295
 801191a:	e000      	b.n	801191e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801191c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801191e:	4618      	mov	r0, r3
 8011920:	3718      	adds	r7, #24
 8011922:	46bd      	mov	sp, r7
 8011924:	bd80      	pop	{r7, pc}
 8011926:	bf00      	nop
 8011928:	2000a660 	.word	0x2000a660
 801192c:	0801f140 	.word	0x0801f140
 8011930:	0801f1b8 	.word	0x0801f1b8
 8011934:	0801f190 	.word	0x0801f190

08011938 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8011938:	b580      	push	{r7, lr}
 801193a:	b082      	sub	sp, #8
 801193c:	af00      	add	r7, sp, #0
 801193e:	6078      	str	r0, [r7, #4]
 8011940:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8011942:	683b      	ldr	r3, [r7, #0]
 8011944:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011948:	f003 0318 	and.w	r3, r3, #24
 801194c:	2b00      	cmp	r3, #0
 801194e:	d006      	beq.n	801195e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8011950:	4a08      	ldr	r2, [pc, #32]	; (8011974 <tcpip_input+0x3c>)
 8011952:	6839      	ldr	r1, [r7, #0]
 8011954:	6878      	ldr	r0, [r7, #4]
 8011956:	f7ff ffab 	bl	80118b0 <tcpip_inpkt>
 801195a:	4603      	mov	r3, r0
 801195c:	e005      	b.n	801196a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 801195e:	4a06      	ldr	r2, [pc, #24]	; (8011978 <tcpip_input+0x40>)
 8011960:	6839      	ldr	r1, [r7, #0]
 8011962:	6878      	ldr	r0, [r7, #4]
 8011964:	f7ff ffa4 	bl	80118b0 <tcpip_inpkt>
 8011968:	4603      	mov	r3, r0
}
 801196a:	4618      	mov	r0, r3
 801196c:	3708      	adds	r7, #8
 801196e:	46bd      	mov	sp, r7
 8011970:	bd80      	pop	{r7, pc}
 8011972:	bf00      	nop
 8011974:	0801c6c1 	.word	0x0801c6c1
 8011978:	0801b5c9 	.word	0x0801b5c9

0801197c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 801197c:	b580      	push	{r7, lr}
 801197e:	b084      	sub	sp, #16
 8011980:	af00      	add	r7, sp, #0
 8011982:	6078      	str	r0, [r7, #4]
 8011984:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8011986:	4819      	ldr	r0, [pc, #100]	; (80119ec <tcpip_try_callback+0x70>)
 8011988:	f00b f819 	bl	801c9be <sys_mbox_valid>
 801198c:	4603      	mov	r3, r0
 801198e:	2b00      	cmp	r3, #0
 8011990:	d106      	bne.n	80119a0 <tcpip_try_callback+0x24>
 8011992:	4b17      	ldr	r3, [pc, #92]	; (80119f0 <tcpip_try_callback+0x74>)
 8011994:	f240 125d 	movw	r2, #349	; 0x15d
 8011998:	4916      	ldr	r1, [pc, #88]	; (80119f4 <tcpip_try_callback+0x78>)
 801199a:	4817      	ldr	r0, [pc, #92]	; (80119f8 <tcpip_try_callback+0x7c>)
 801199c:	f00b fb8a 	bl	801d0b4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80119a0:	2008      	movs	r0, #8
 80119a2:	f000 fd41 	bl	8012428 <memp_malloc>
 80119a6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	2b00      	cmp	r3, #0
 80119ac:	d102      	bne.n	80119b4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80119ae:	f04f 33ff 	mov.w	r3, #4294967295
 80119b2:	e017      	b.n	80119e4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	2201      	movs	r2, #1
 80119b8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80119ba:	68fb      	ldr	r3, [r7, #12]
 80119bc:	687a      	ldr	r2, [r7, #4]
 80119be:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	683a      	ldr	r2, [r7, #0]
 80119c4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 80119c6:	68f9      	ldr	r1, [r7, #12]
 80119c8:	4808      	ldr	r0, [pc, #32]	; (80119ec <tcpip_try_callback+0x70>)
 80119ca:	f00a ff83 	bl	801c8d4 <sys_mbox_trypost>
 80119ce:	4603      	mov	r3, r0
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d006      	beq.n	80119e2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 80119d4:	68f9      	ldr	r1, [r7, #12]
 80119d6:	2008      	movs	r0, #8
 80119d8:	f000 fd78 	bl	80124cc <memp_free>
    return ERR_MEM;
 80119dc:	f04f 33ff 	mov.w	r3, #4294967295
 80119e0:	e000      	b.n	80119e4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 80119e2:	2300      	movs	r3, #0
}
 80119e4:	4618      	mov	r0, r3
 80119e6:	3710      	adds	r7, #16
 80119e8:	46bd      	mov	sp, r7
 80119ea:	bd80      	pop	{r7, pc}
 80119ec:	2000a660 	.word	0x2000a660
 80119f0:	0801f140 	.word	0x0801f140
 80119f4:	0801f1b8 	.word	0x0801f1b8
 80119f8:	0801f190 	.word	0x0801f190

080119fc <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 80119fc:	b580      	push	{r7, lr}
 80119fe:	b084      	sub	sp, #16
 8011a00:	af00      	add	r7, sp, #0
 8011a02:	60f8      	str	r0, [r7, #12]
 8011a04:	60b9      	str	r1, [r7, #8]
 8011a06:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8011a08:	4806      	ldr	r0, [pc, #24]	; (8011a24 <tcpip_send_msg_wait_sem+0x28>)
 8011a0a:	f00b f8b1 	bl	801cb70 <sys_mutex_lock>
  fn(apimsg);
 8011a0e:	68fb      	ldr	r3, [r7, #12]
 8011a10:	68b8      	ldr	r0, [r7, #8]
 8011a12:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8011a14:	4803      	ldr	r0, [pc, #12]	; (8011a24 <tcpip_send_msg_wait_sem+0x28>)
 8011a16:	f00b f8ba 	bl	801cb8e <sys_mutex_unlock>
  return ERR_OK;
 8011a1a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	3710      	adds	r7, #16
 8011a20:	46bd      	mov	sp, r7
 8011a22:	bd80      	pop	{r7, pc}
 8011a24:	2000a664 	.word	0x2000a664

08011a28 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	b084      	sub	sp, #16
 8011a2c:	af02      	add	r7, sp, #8
 8011a2e:	6078      	str	r0, [r7, #4]
 8011a30:	6039      	str	r1, [r7, #0]
  lwip_init();
 8011a32:	f000 f871 	bl	8011b18 <lwip_init>

  tcpip_init_done = initfunc;
 8011a36:	4a17      	ldr	r2, [pc, #92]	; (8011a94 <tcpip_init+0x6c>)
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8011a3c:	4a16      	ldr	r2, [pc, #88]	; (8011a98 <tcpip_init+0x70>)
 8011a3e:	683b      	ldr	r3, [r7, #0]
 8011a40:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8011a42:	2106      	movs	r1, #6
 8011a44:	4815      	ldr	r0, [pc, #84]	; (8011a9c <tcpip_init+0x74>)
 8011a46:	f00a ff11 	bl	801c86c <sys_mbox_new>
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d006      	beq.n	8011a5e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8011a50:	4b13      	ldr	r3, [pc, #76]	; (8011aa0 <tcpip_init+0x78>)
 8011a52:	f240 2261 	movw	r2, #609	; 0x261
 8011a56:	4913      	ldr	r1, [pc, #76]	; (8011aa4 <tcpip_init+0x7c>)
 8011a58:	4813      	ldr	r0, [pc, #76]	; (8011aa8 <tcpip_init+0x80>)
 8011a5a:	f00b fb2b 	bl	801d0b4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8011a5e:	4813      	ldr	r0, [pc, #76]	; (8011aac <tcpip_init+0x84>)
 8011a60:	f00b f86a 	bl	801cb38 <sys_mutex_new>
 8011a64:	4603      	mov	r3, r0
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d006      	beq.n	8011a78 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8011a6a:	4b0d      	ldr	r3, [pc, #52]	; (8011aa0 <tcpip_init+0x78>)
 8011a6c:	f240 2265 	movw	r2, #613	; 0x265
 8011a70:	490f      	ldr	r1, [pc, #60]	; (8011ab0 <tcpip_init+0x88>)
 8011a72:	480d      	ldr	r0, [pc, #52]	; (8011aa8 <tcpip_init+0x80>)
 8011a74:	f00b fb1e 	bl	801d0b4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8011a78:	2300      	movs	r3, #0
 8011a7a:	9300      	str	r3, [sp, #0]
 8011a7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011a80:	2200      	movs	r2, #0
 8011a82:	490c      	ldr	r1, [pc, #48]	; (8011ab4 <tcpip_init+0x8c>)
 8011a84:	480c      	ldr	r0, [pc, #48]	; (8011ab8 <tcpip_init+0x90>)
 8011a86:	f00b f88f 	bl	801cba8 <sys_thread_new>
}
 8011a8a:	bf00      	nop
 8011a8c:	3708      	adds	r7, #8
 8011a8e:	46bd      	mov	sp, r7
 8011a90:	bd80      	pop	{r7, pc}
 8011a92:	bf00      	nop
 8011a94:	2000a658 	.word	0x2000a658
 8011a98:	2000a65c 	.word	0x2000a65c
 8011a9c:	2000a660 	.word	0x2000a660
 8011aa0:	0801f140 	.word	0x0801f140
 8011aa4:	0801f1c8 	.word	0x0801f1c8
 8011aa8:	0801f190 	.word	0x0801f190
 8011aac:	2000a664 	.word	0x2000a664
 8011ab0:	0801f1ec 	.word	0x0801f1ec
 8011ab4:	080117b9 	.word	0x080117b9
 8011ab8:	0801f210 	.word	0x0801f210

08011abc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8011abc:	b480      	push	{r7}
 8011abe:	b083      	sub	sp, #12
 8011ac0:	af00      	add	r7, sp, #0
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8011ac6:	88fb      	ldrh	r3, [r7, #6]
 8011ac8:	021b      	lsls	r3, r3, #8
 8011aca:	b21a      	sxth	r2, r3
 8011acc:	88fb      	ldrh	r3, [r7, #6]
 8011ace:	0a1b      	lsrs	r3, r3, #8
 8011ad0:	b29b      	uxth	r3, r3
 8011ad2:	b21b      	sxth	r3, r3
 8011ad4:	4313      	orrs	r3, r2
 8011ad6:	b21b      	sxth	r3, r3
 8011ad8:	b29b      	uxth	r3, r3
}
 8011ada:	4618      	mov	r0, r3
 8011adc:	370c      	adds	r7, #12
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ae4:	4770      	bx	lr

08011ae6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8011ae6:	b480      	push	{r7}
 8011ae8:	b083      	sub	sp, #12
 8011aea:	af00      	add	r7, sp, #0
 8011aec:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8011aee:	687b      	ldr	r3, [r7, #4]
 8011af0:	061a      	lsls	r2, r3, #24
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	021b      	lsls	r3, r3, #8
 8011af6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8011afa:	431a      	orrs	r2, r3
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	0a1b      	lsrs	r3, r3, #8
 8011b00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8011b04:	431a      	orrs	r2, r3
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	0e1b      	lsrs	r3, r3, #24
 8011b0a:	4313      	orrs	r3, r2
}
 8011b0c:	4618      	mov	r0, r3
 8011b0e:	370c      	adds	r7, #12
 8011b10:	46bd      	mov	sp, r7
 8011b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b16:	4770      	bx	lr

08011b18 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b082      	sub	sp, #8
 8011b1c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8011b1e:	2300      	movs	r3, #0
 8011b20:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8011b22:	f00a fffb 	bl	801cb1c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8011b26:	f000 f8d5 	bl	8011cd4 <mem_init>
  memp_init();
 8011b2a:	f000 fc31 	bl	8012390 <memp_init>
  pbuf_init();
  netif_init();
 8011b2e:	f000 fcf7 	bl	8012520 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8011b32:	f007 feeb 	bl	801990c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8011b36:	f001 fdb3 	bl	80136a0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8011b3a:	f007 fe2d 	bl	8019798 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8011b3e:	bf00      	nop
 8011b40:	3708      	adds	r7, #8
 8011b42:	46bd      	mov	sp, r7
 8011b44:	bd80      	pop	{r7, pc}
	...

08011b48 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8011b48:	b480      	push	{r7}
 8011b4a:	b083      	sub	sp, #12
 8011b4c:	af00      	add	r7, sp, #0
 8011b4e:	4603      	mov	r3, r0
 8011b50:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8011b52:	4b05      	ldr	r3, [pc, #20]	; (8011b68 <ptr_to_mem+0x20>)
 8011b54:	681a      	ldr	r2, [r3, #0]
 8011b56:	88fb      	ldrh	r3, [r7, #6]
 8011b58:	4413      	add	r3, r2
}
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	370c      	adds	r7, #12
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b64:	4770      	bx	lr
 8011b66:	bf00      	nop
 8011b68:	2000acd4 	.word	0x2000acd4

08011b6c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8011b6c:	b480      	push	{r7}
 8011b6e:	b083      	sub	sp, #12
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8011b74:	4b05      	ldr	r3, [pc, #20]	; (8011b8c <mem_to_ptr+0x20>)
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	687a      	ldr	r2, [r7, #4]
 8011b7a:	1ad3      	subs	r3, r2, r3
 8011b7c:	b29b      	uxth	r3, r3
}
 8011b7e:	4618      	mov	r0, r3
 8011b80:	370c      	adds	r7, #12
 8011b82:	46bd      	mov	sp, r7
 8011b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b88:	4770      	bx	lr
 8011b8a:	bf00      	nop
 8011b8c:	2000acd4 	.word	0x2000acd4

08011b90 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8011b90:	b590      	push	{r4, r7, lr}
 8011b92:	b085      	sub	sp, #20
 8011b94:	af00      	add	r7, sp, #0
 8011b96:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8011b98:	4b45      	ldr	r3, [pc, #276]	; (8011cb0 <plug_holes+0x120>)
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	687a      	ldr	r2, [r7, #4]
 8011b9e:	429a      	cmp	r2, r3
 8011ba0:	d206      	bcs.n	8011bb0 <plug_holes+0x20>
 8011ba2:	4b44      	ldr	r3, [pc, #272]	; (8011cb4 <plug_holes+0x124>)
 8011ba4:	f240 12df 	movw	r2, #479	; 0x1df
 8011ba8:	4943      	ldr	r1, [pc, #268]	; (8011cb8 <plug_holes+0x128>)
 8011baa:	4844      	ldr	r0, [pc, #272]	; (8011cbc <plug_holes+0x12c>)
 8011bac:	f00b fa82 	bl	801d0b4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8011bb0:	4b43      	ldr	r3, [pc, #268]	; (8011cc0 <plug_holes+0x130>)
 8011bb2:	681b      	ldr	r3, [r3, #0]
 8011bb4:	687a      	ldr	r2, [r7, #4]
 8011bb6:	429a      	cmp	r2, r3
 8011bb8:	d306      	bcc.n	8011bc8 <plug_holes+0x38>
 8011bba:	4b3e      	ldr	r3, [pc, #248]	; (8011cb4 <plug_holes+0x124>)
 8011bbc:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8011bc0:	4940      	ldr	r1, [pc, #256]	; (8011cc4 <plug_holes+0x134>)
 8011bc2:	483e      	ldr	r0, [pc, #248]	; (8011cbc <plug_holes+0x12c>)
 8011bc4:	f00b fa76 	bl	801d0b4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	791b      	ldrb	r3, [r3, #4]
 8011bcc:	2b00      	cmp	r3, #0
 8011bce:	d006      	beq.n	8011bde <plug_holes+0x4e>
 8011bd0:	4b38      	ldr	r3, [pc, #224]	; (8011cb4 <plug_holes+0x124>)
 8011bd2:	f240 12e1 	movw	r2, #481	; 0x1e1
 8011bd6:	493c      	ldr	r1, [pc, #240]	; (8011cc8 <plug_holes+0x138>)
 8011bd8:	4838      	ldr	r0, [pc, #224]	; (8011cbc <plug_holes+0x12c>)
 8011bda:	f00b fa6b 	bl	801d0b4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8011bde:	687b      	ldr	r3, [r7, #4]
 8011be0:	881b      	ldrh	r3, [r3, #0]
 8011be2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011be6:	d906      	bls.n	8011bf6 <plug_holes+0x66>
 8011be8:	4b32      	ldr	r3, [pc, #200]	; (8011cb4 <plug_holes+0x124>)
 8011bea:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8011bee:	4937      	ldr	r1, [pc, #220]	; (8011ccc <plug_holes+0x13c>)
 8011bf0:	4832      	ldr	r0, [pc, #200]	; (8011cbc <plug_holes+0x12c>)
 8011bf2:	f00b fa5f 	bl	801d0b4 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8011bf6:	687b      	ldr	r3, [r7, #4]
 8011bf8:	881b      	ldrh	r3, [r3, #0]
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	f7ff ffa4 	bl	8011b48 <ptr_to_mem>
 8011c00:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8011c02:	687a      	ldr	r2, [r7, #4]
 8011c04:	68fb      	ldr	r3, [r7, #12]
 8011c06:	429a      	cmp	r2, r3
 8011c08:	d024      	beq.n	8011c54 <plug_holes+0xc4>
 8011c0a:	68fb      	ldr	r3, [r7, #12]
 8011c0c:	791b      	ldrb	r3, [r3, #4]
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d120      	bne.n	8011c54 <plug_holes+0xc4>
 8011c12:	4b2b      	ldr	r3, [pc, #172]	; (8011cc0 <plug_holes+0x130>)
 8011c14:	681b      	ldr	r3, [r3, #0]
 8011c16:	68fa      	ldr	r2, [r7, #12]
 8011c18:	429a      	cmp	r2, r3
 8011c1a:	d01b      	beq.n	8011c54 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8011c1c:	4b2c      	ldr	r3, [pc, #176]	; (8011cd0 <plug_holes+0x140>)
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	68fa      	ldr	r2, [r7, #12]
 8011c22:	429a      	cmp	r2, r3
 8011c24:	d102      	bne.n	8011c2c <plug_holes+0x9c>
      lfree = mem;
 8011c26:	4a2a      	ldr	r2, [pc, #168]	; (8011cd0 <plug_holes+0x140>)
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8011c2c:	68fb      	ldr	r3, [r7, #12]
 8011c2e:	881a      	ldrh	r2, [r3, #0]
 8011c30:	687b      	ldr	r3, [r7, #4]
 8011c32:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	881b      	ldrh	r3, [r3, #0]
 8011c38:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011c3c:	d00a      	beq.n	8011c54 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8011c3e:	68fb      	ldr	r3, [r7, #12]
 8011c40:	881b      	ldrh	r3, [r3, #0]
 8011c42:	4618      	mov	r0, r3
 8011c44:	f7ff ff80 	bl	8011b48 <ptr_to_mem>
 8011c48:	4604      	mov	r4, r0
 8011c4a:	6878      	ldr	r0, [r7, #4]
 8011c4c:	f7ff ff8e 	bl	8011b6c <mem_to_ptr>
 8011c50:	4603      	mov	r3, r0
 8011c52:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8011c54:	687b      	ldr	r3, [r7, #4]
 8011c56:	885b      	ldrh	r3, [r3, #2]
 8011c58:	4618      	mov	r0, r3
 8011c5a:	f7ff ff75 	bl	8011b48 <ptr_to_mem>
 8011c5e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8011c60:	68ba      	ldr	r2, [r7, #8]
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	429a      	cmp	r2, r3
 8011c66:	d01f      	beq.n	8011ca8 <plug_holes+0x118>
 8011c68:	68bb      	ldr	r3, [r7, #8]
 8011c6a:	791b      	ldrb	r3, [r3, #4]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d11b      	bne.n	8011ca8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8011c70:	4b17      	ldr	r3, [pc, #92]	; (8011cd0 <plug_holes+0x140>)
 8011c72:	681b      	ldr	r3, [r3, #0]
 8011c74:	687a      	ldr	r2, [r7, #4]
 8011c76:	429a      	cmp	r2, r3
 8011c78:	d102      	bne.n	8011c80 <plug_holes+0xf0>
      lfree = pmem;
 8011c7a:	4a15      	ldr	r2, [pc, #84]	; (8011cd0 <plug_holes+0x140>)
 8011c7c:	68bb      	ldr	r3, [r7, #8]
 8011c7e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	881a      	ldrh	r2, [r3, #0]
 8011c84:	68bb      	ldr	r3, [r7, #8]
 8011c86:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8011c88:	687b      	ldr	r3, [r7, #4]
 8011c8a:	881b      	ldrh	r3, [r3, #0]
 8011c8c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011c90:	d00a      	beq.n	8011ca8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	881b      	ldrh	r3, [r3, #0]
 8011c96:	4618      	mov	r0, r3
 8011c98:	f7ff ff56 	bl	8011b48 <ptr_to_mem>
 8011c9c:	4604      	mov	r4, r0
 8011c9e:	68b8      	ldr	r0, [r7, #8]
 8011ca0:	f7ff ff64 	bl	8011b6c <mem_to_ptr>
 8011ca4:	4603      	mov	r3, r0
 8011ca6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8011ca8:	bf00      	nop
 8011caa:	3714      	adds	r7, #20
 8011cac:	46bd      	mov	sp, r7
 8011cae:	bd90      	pop	{r4, r7, pc}
 8011cb0:	2000acd4 	.word	0x2000acd4
 8011cb4:	0801f220 	.word	0x0801f220
 8011cb8:	0801f250 	.word	0x0801f250
 8011cbc:	0801f268 	.word	0x0801f268
 8011cc0:	2000acd8 	.word	0x2000acd8
 8011cc4:	0801f290 	.word	0x0801f290
 8011cc8:	0801f2ac 	.word	0x0801f2ac
 8011ccc:	0801f2c8 	.word	0x0801f2c8
 8011cd0:	2000ace0 	.word	0x2000ace0

08011cd4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8011cd4:	b580      	push	{r7, lr}
 8011cd6:	b082      	sub	sp, #8
 8011cd8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8011cda:	4b1f      	ldr	r3, [pc, #124]	; (8011d58 <mem_init+0x84>)
 8011cdc:	3303      	adds	r3, #3
 8011cde:	f023 0303 	bic.w	r3, r3, #3
 8011ce2:	461a      	mov	r2, r3
 8011ce4:	4b1d      	ldr	r3, [pc, #116]	; (8011d5c <mem_init+0x88>)
 8011ce6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8011ce8:	4b1c      	ldr	r3, [pc, #112]	; (8011d5c <mem_init+0x88>)
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8011cf4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	2200      	movs	r2, #0
 8011cfa:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	2200      	movs	r2, #0
 8011d00:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8011d02:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8011d06:	f7ff ff1f 	bl	8011b48 <ptr_to_mem>
 8011d0a:	4603      	mov	r3, r0
 8011d0c:	4a14      	ldr	r2, [pc, #80]	; (8011d60 <mem_init+0x8c>)
 8011d0e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8011d10:	4b13      	ldr	r3, [pc, #76]	; (8011d60 <mem_init+0x8c>)
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	2201      	movs	r2, #1
 8011d16:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8011d18:	4b11      	ldr	r3, [pc, #68]	; (8011d60 <mem_init+0x8c>)
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8011d20:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8011d22:	4b0f      	ldr	r3, [pc, #60]	; (8011d60 <mem_init+0x8c>)
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8011d2a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8011d2c:	4b0b      	ldr	r3, [pc, #44]	; (8011d5c <mem_init+0x88>)
 8011d2e:	681b      	ldr	r3, [r3, #0]
 8011d30:	4a0c      	ldr	r2, [pc, #48]	; (8011d64 <mem_init+0x90>)
 8011d32:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8011d34:	480c      	ldr	r0, [pc, #48]	; (8011d68 <mem_init+0x94>)
 8011d36:	f00a feff 	bl	801cb38 <sys_mutex_new>
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d006      	beq.n	8011d4e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8011d40:	4b0a      	ldr	r3, [pc, #40]	; (8011d6c <mem_init+0x98>)
 8011d42:	f240 221f 	movw	r2, #543	; 0x21f
 8011d46:	490a      	ldr	r1, [pc, #40]	; (8011d70 <mem_init+0x9c>)
 8011d48:	480a      	ldr	r0, [pc, #40]	; (8011d74 <mem_init+0xa0>)
 8011d4a:	f00b f9b3 	bl	801d0b4 <iprintf>
  }
}
 8011d4e:	bf00      	nop
 8011d50:	3708      	adds	r7, #8
 8011d52:	46bd      	mov	sp, r7
 8011d54:	bd80      	pop	{r7, pc}
 8011d56:	bf00      	nop
 8011d58:	2000a680 	.word	0x2000a680
 8011d5c:	2000acd4 	.word	0x2000acd4
 8011d60:	2000acd8 	.word	0x2000acd8
 8011d64:	2000ace0 	.word	0x2000ace0
 8011d68:	2000acdc 	.word	0x2000acdc
 8011d6c:	0801f220 	.word	0x0801f220
 8011d70:	0801f2f4 	.word	0x0801f2f4
 8011d74:	0801f268 	.word	0x0801f268

08011d78 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8011d78:	b580      	push	{r7, lr}
 8011d7a:	b086      	sub	sp, #24
 8011d7c:	af00      	add	r7, sp, #0
 8011d7e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8011d80:	6878      	ldr	r0, [r7, #4]
 8011d82:	f7ff fef3 	bl	8011b6c <mem_to_ptr>
 8011d86:	4603      	mov	r3, r0
 8011d88:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	881b      	ldrh	r3, [r3, #0]
 8011d8e:	4618      	mov	r0, r3
 8011d90:	f7ff feda 	bl	8011b48 <ptr_to_mem>
 8011d94:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	885b      	ldrh	r3, [r3, #2]
 8011d9a:	4618      	mov	r0, r3
 8011d9c:	f7ff fed4 	bl	8011b48 <ptr_to_mem>
 8011da0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	881b      	ldrh	r3, [r3, #0]
 8011da6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011daa:	d818      	bhi.n	8011dde <mem_link_valid+0x66>
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	885b      	ldrh	r3, [r3, #2]
 8011db0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011db4:	d813      	bhi.n	8011dde <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011dba:	8afa      	ldrh	r2, [r7, #22]
 8011dbc:	429a      	cmp	r2, r3
 8011dbe:	d004      	beq.n	8011dca <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011dc0:	68fb      	ldr	r3, [r7, #12]
 8011dc2:	881b      	ldrh	r3, [r3, #0]
 8011dc4:	8afa      	ldrh	r2, [r7, #22]
 8011dc6:	429a      	cmp	r2, r3
 8011dc8:	d109      	bne.n	8011dde <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8011dca:	4b08      	ldr	r3, [pc, #32]	; (8011dec <mem_link_valid+0x74>)
 8011dcc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011dce:	693a      	ldr	r2, [r7, #16]
 8011dd0:	429a      	cmp	r2, r3
 8011dd2:	d006      	beq.n	8011de2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8011dd4:	693b      	ldr	r3, [r7, #16]
 8011dd6:	885b      	ldrh	r3, [r3, #2]
 8011dd8:	8afa      	ldrh	r2, [r7, #22]
 8011dda:	429a      	cmp	r2, r3
 8011ddc:	d001      	beq.n	8011de2 <mem_link_valid+0x6a>
    return 0;
 8011dde:	2300      	movs	r3, #0
 8011de0:	e000      	b.n	8011de4 <mem_link_valid+0x6c>
  }
  return 1;
 8011de2:	2301      	movs	r3, #1
}
 8011de4:	4618      	mov	r0, r3
 8011de6:	3718      	adds	r7, #24
 8011de8:	46bd      	mov	sp, r7
 8011dea:	bd80      	pop	{r7, pc}
 8011dec:	2000acd8 	.word	0x2000acd8

08011df0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8011df0:	b580      	push	{r7, lr}
 8011df2:	b088      	sub	sp, #32
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	2b00      	cmp	r3, #0
 8011dfc:	d070      	beq.n	8011ee0 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	f003 0303 	and.w	r3, r3, #3
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d00d      	beq.n	8011e24 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8011e08:	4b37      	ldr	r3, [pc, #220]	; (8011ee8 <mem_free+0xf8>)
 8011e0a:	f240 2273 	movw	r2, #627	; 0x273
 8011e0e:	4937      	ldr	r1, [pc, #220]	; (8011eec <mem_free+0xfc>)
 8011e10:	4837      	ldr	r0, [pc, #220]	; (8011ef0 <mem_free+0x100>)
 8011e12:	f00b f94f 	bl	801d0b4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011e16:	f00a feed 	bl	801cbf4 <sys_arch_protect>
 8011e1a:	60f8      	str	r0, [r7, #12]
 8011e1c:	68f8      	ldr	r0, [r7, #12]
 8011e1e:	f00a fef7 	bl	801cc10 <sys_arch_unprotect>
    return;
 8011e22:	e05e      	b.n	8011ee2 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	3b08      	subs	r3, #8
 8011e28:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 8011e2a:	4b32      	ldr	r3, [pc, #200]	; (8011ef4 <mem_free+0x104>)
 8011e2c:	681b      	ldr	r3, [r3, #0]
 8011e2e:	69fa      	ldr	r2, [r7, #28]
 8011e30:	429a      	cmp	r2, r3
 8011e32:	d306      	bcc.n	8011e42 <mem_free+0x52>
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	f103 020c 	add.w	r2, r3, #12
 8011e3a:	4b2f      	ldr	r3, [pc, #188]	; (8011ef8 <mem_free+0x108>)
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	429a      	cmp	r2, r3
 8011e40:	d90d      	bls.n	8011e5e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8011e42:	4b29      	ldr	r3, [pc, #164]	; (8011ee8 <mem_free+0xf8>)
 8011e44:	f240 227f 	movw	r2, #639	; 0x27f
 8011e48:	492c      	ldr	r1, [pc, #176]	; (8011efc <mem_free+0x10c>)
 8011e4a:	4829      	ldr	r0, [pc, #164]	; (8011ef0 <mem_free+0x100>)
 8011e4c:	f00b f932 	bl	801d0b4 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011e50:	f00a fed0 	bl	801cbf4 <sys_arch_protect>
 8011e54:	6138      	str	r0, [r7, #16]
 8011e56:	6938      	ldr	r0, [r7, #16]
 8011e58:	f00a feda 	bl	801cc10 <sys_arch_unprotect>
    return;
 8011e5c:	e041      	b.n	8011ee2 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8011e5e:	4828      	ldr	r0, [pc, #160]	; (8011f00 <mem_free+0x110>)
 8011e60:	f00a fe86 	bl	801cb70 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8011e64:	69fb      	ldr	r3, [r7, #28]
 8011e66:	791b      	ldrb	r3, [r3, #4]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d110      	bne.n	8011e8e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8011e6c:	4b1e      	ldr	r3, [pc, #120]	; (8011ee8 <mem_free+0xf8>)
 8011e6e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8011e72:	4924      	ldr	r1, [pc, #144]	; (8011f04 <mem_free+0x114>)
 8011e74:	481e      	ldr	r0, [pc, #120]	; (8011ef0 <mem_free+0x100>)
 8011e76:	f00b f91d 	bl	801d0b4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011e7a:	4821      	ldr	r0, [pc, #132]	; (8011f00 <mem_free+0x110>)
 8011e7c:	f00a fe87 	bl	801cb8e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011e80:	f00a feb8 	bl	801cbf4 <sys_arch_protect>
 8011e84:	6178      	str	r0, [r7, #20]
 8011e86:	6978      	ldr	r0, [r7, #20]
 8011e88:	f00a fec2 	bl	801cc10 <sys_arch_unprotect>
    return;
 8011e8c:	e029      	b.n	8011ee2 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8011e8e:	69f8      	ldr	r0, [r7, #28]
 8011e90:	f7ff ff72 	bl	8011d78 <mem_link_valid>
 8011e94:	4603      	mov	r3, r0
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d110      	bne.n	8011ebc <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8011e9a:	4b13      	ldr	r3, [pc, #76]	; (8011ee8 <mem_free+0xf8>)
 8011e9c:	f240 2295 	movw	r2, #661	; 0x295
 8011ea0:	4919      	ldr	r1, [pc, #100]	; (8011f08 <mem_free+0x118>)
 8011ea2:	4813      	ldr	r0, [pc, #76]	; (8011ef0 <mem_free+0x100>)
 8011ea4:	f00b f906 	bl	801d0b4 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8011ea8:	4815      	ldr	r0, [pc, #84]	; (8011f00 <mem_free+0x110>)
 8011eaa:	f00a fe70 	bl	801cb8e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011eae:	f00a fea1 	bl	801cbf4 <sys_arch_protect>
 8011eb2:	61b8      	str	r0, [r7, #24]
 8011eb4:	69b8      	ldr	r0, [r7, #24]
 8011eb6:	f00a feab 	bl	801cc10 <sys_arch_unprotect>
    return;
 8011eba:	e012      	b.n	8011ee2 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8011ebc:	69fb      	ldr	r3, [r7, #28]
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8011ec2:	4b12      	ldr	r3, [pc, #72]	; (8011f0c <mem_free+0x11c>)
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	69fa      	ldr	r2, [r7, #28]
 8011ec8:	429a      	cmp	r2, r3
 8011eca:	d202      	bcs.n	8011ed2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8011ecc:	4a0f      	ldr	r2, [pc, #60]	; (8011f0c <mem_free+0x11c>)
 8011ece:	69fb      	ldr	r3, [r7, #28]
 8011ed0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8011ed2:	69f8      	ldr	r0, [r7, #28]
 8011ed4:	f7ff fe5c 	bl	8011b90 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8011ed8:	4809      	ldr	r0, [pc, #36]	; (8011f00 <mem_free+0x110>)
 8011eda:	f00a fe58 	bl	801cb8e <sys_mutex_unlock>
 8011ede:	e000      	b.n	8011ee2 <mem_free+0xf2>
    return;
 8011ee0:	bf00      	nop
}
 8011ee2:	3720      	adds	r7, #32
 8011ee4:	46bd      	mov	sp, r7
 8011ee6:	bd80      	pop	{r7, pc}
 8011ee8:	0801f220 	.word	0x0801f220
 8011eec:	0801f310 	.word	0x0801f310
 8011ef0:	0801f268 	.word	0x0801f268
 8011ef4:	2000acd4 	.word	0x2000acd4
 8011ef8:	2000acd8 	.word	0x2000acd8
 8011efc:	0801f334 	.word	0x0801f334
 8011f00:	2000acdc 	.word	0x2000acdc
 8011f04:	0801f350 	.word	0x0801f350
 8011f08:	0801f378 	.word	0x0801f378
 8011f0c:	2000ace0 	.word	0x2000ace0

08011f10 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8011f10:	b580      	push	{r7, lr}
 8011f12:	b088      	sub	sp, #32
 8011f14:	af00      	add	r7, sp, #0
 8011f16:	6078      	str	r0, [r7, #4]
 8011f18:	460b      	mov	r3, r1
 8011f1a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8011f1c:	887b      	ldrh	r3, [r7, #2]
 8011f1e:	3303      	adds	r3, #3
 8011f20:	b29b      	uxth	r3, r3
 8011f22:	f023 0303 	bic.w	r3, r3, #3
 8011f26:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8011f28:	8bfb      	ldrh	r3, [r7, #30]
 8011f2a:	2b0b      	cmp	r3, #11
 8011f2c:	d801      	bhi.n	8011f32 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8011f2e:	230c      	movs	r3, #12
 8011f30:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8011f32:	8bfb      	ldrh	r3, [r7, #30]
 8011f34:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011f38:	d803      	bhi.n	8011f42 <mem_trim+0x32>
 8011f3a:	8bfa      	ldrh	r2, [r7, #30]
 8011f3c:	887b      	ldrh	r3, [r7, #2]
 8011f3e:	429a      	cmp	r2, r3
 8011f40:	d201      	bcs.n	8011f46 <mem_trim+0x36>
    return NULL;
 8011f42:	2300      	movs	r3, #0
 8011f44:	e0d8      	b.n	80120f8 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8011f46:	4b6e      	ldr	r3, [pc, #440]	; (8012100 <mem_trim+0x1f0>)
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	687a      	ldr	r2, [r7, #4]
 8011f4c:	429a      	cmp	r2, r3
 8011f4e:	d304      	bcc.n	8011f5a <mem_trim+0x4a>
 8011f50:	4b6c      	ldr	r3, [pc, #432]	; (8012104 <mem_trim+0x1f4>)
 8011f52:	681b      	ldr	r3, [r3, #0]
 8011f54:	687a      	ldr	r2, [r7, #4]
 8011f56:	429a      	cmp	r2, r3
 8011f58:	d306      	bcc.n	8011f68 <mem_trim+0x58>
 8011f5a:	4b6b      	ldr	r3, [pc, #428]	; (8012108 <mem_trim+0x1f8>)
 8011f5c:	f240 22d1 	movw	r2, #721	; 0x2d1
 8011f60:	496a      	ldr	r1, [pc, #424]	; (801210c <mem_trim+0x1fc>)
 8011f62:	486b      	ldr	r0, [pc, #428]	; (8012110 <mem_trim+0x200>)
 8011f64:	f00b f8a6 	bl	801d0b4 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8011f68:	4b65      	ldr	r3, [pc, #404]	; (8012100 <mem_trim+0x1f0>)
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	687a      	ldr	r2, [r7, #4]
 8011f6e:	429a      	cmp	r2, r3
 8011f70:	d304      	bcc.n	8011f7c <mem_trim+0x6c>
 8011f72:	4b64      	ldr	r3, [pc, #400]	; (8012104 <mem_trim+0x1f4>)
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	687a      	ldr	r2, [r7, #4]
 8011f78:	429a      	cmp	r2, r3
 8011f7a:	d307      	bcc.n	8011f8c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8011f7c:	f00a fe3a 	bl	801cbf4 <sys_arch_protect>
 8011f80:	60b8      	str	r0, [r7, #8]
 8011f82:	68b8      	ldr	r0, [r7, #8]
 8011f84:	f00a fe44 	bl	801cc10 <sys_arch_unprotect>
    return rmem;
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	e0b5      	b.n	80120f8 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	3b08      	subs	r3, #8
 8011f90:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8011f92:	69b8      	ldr	r0, [r7, #24]
 8011f94:	f7ff fdea 	bl	8011b6c <mem_to_ptr>
 8011f98:	4603      	mov	r3, r0
 8011f9a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8011f9c:	69bb      	ldr	r3, [r7, #24]
 8011f9e:	881a      	ldrh	r2, [r3, #0]
 8011fa0:	8afb      	ldrh	r3, [r7, #22]
 8011fa2:	1ad3      	subs	r3, r2, r3
 8011fa4:	b29b      	uxth	r3, r3
 8011fa6:	3b08      	subs	r3, #8
 8011fa8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8011faa:	8bfa      	ldrh	r2, [r7, #30]
 8011fac:	8abb      	ldrh	r3, [r7, #20]
 8011fae:	429a      	cmp	r2, r3
 8011fb0:	d906      	bls.n	8011fc0 <mem_trim+0xb0>
 8011fb2:	4b55      	ldr	r3, [pc, #340]	; (8012108 <mem_trim+0x1f8>)
 8011fb4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8011fb8:	4956      	ldr	r1, [pc, #344]	; (8012114 <mem_trim+0x204>)
 8011fba:	4855      	ldr	r0, [pc, #340]	; (8012110 <mem_trim+0x200>)
 8011fbc:	f00b f87a 	bl	801d0b4 <iprintf>
  if (newsize > size) {
 8011fc0:	8bfa      	ldrh	r2, [r7, #30]
 8011fc2:	8abb      	ldrh	r3, [r7, #20]
 8011fc4:	429a      	cmp	r2, r3
 8011fc6:	d901      	bls.n	8011fcc <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8011fc8:	2300      	movs	r3, #0
 8011fca:	e095      	b.n	80120f8 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8011fcc:	8bfa      	ldrh	r2, [r7, #30]
 8011fce:	8abb      	ldrh	r3, [r7, #20]
 8011fd0:	429a      	cmp	r2, r3
 8011fd2:	d101      	bne.n	8011fd8 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	e08f      	b.n	80120f8 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8011fd8:	484f      	ldr	r0, [pc, #316]	; (8012118 <mem_trim+0x208>)
 8011fda:	f00a fdc9 	bl	801cb70 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8011fde:	69bb      	ldr	r3, [r7, #24]
 8011fe0:	881b      	ldrh	r3, [r3, #0]
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	f7ff fdb0 	bl	8011b48 <ptr_to_mem>
 8011fe8:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8011fea:	693b      	ldr	r3, [r7, #16]
 8011fec:	791b      	ldrb	r3, [r3, #4]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d13f      	bne.n	8012072 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8011ff2:	69bb      	ldr	r3, [r7, #24]
 8011ff4:	881b      	ldrh	r3, [r3, #0]
 8011ff6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8011ffa:	d106      	bne.n	801200a <mem_trim+0xfa>
 8011ffc:	4b42      	ldr	r3, [pc, #264]	; (8012108 <mem_trim+0x1f8>)
 8011ffe:	f240 22f5 	movw	r2, #757	; 0x2f5
 8012002:	4946      	ldr	r1, [pc, #280]	; (801211c <mem_trim+0x20c>)
 8012004:	4842      	ldr	r0, [pc, #264]	; (8012110 <mem_trim+0x200>)
 8012006:	f00b f855 	bl	801d0b4 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801200a:	693b      	ldr	r3, [r7, #16]
 801200c:	881b      	ldrh	r3, [r3, #0]
 801200e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8012010:	8afa      	ldrh	r2, [r7, #22]
 8012012:	8bfb      	ldrh	r3, [r7, #30]
 8012014:	4413      	add	r3, r2
 8012016:	b29b      	uxth	r3, r3
 8012018:	3308      	adds	r3, #8
 801201a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801201c:	4b40      	ldr	r3, [pc, #256]	; (8012120 <mem_trim+0x210>)
 801201e:	681b      	ldr	r3, [r3, #0]
 8012020:	693a      	ldr	r2, [r7, #16]
 8012022:	429a      	cmp	r2, r3
 8012024:	d106      	bne.n	8012034 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8012026:	89fb      	ldrh	r3, [r7, #14]
 8012028:	4618      	mov	r0, r3
 801202a:	f7ff fd8d 	bl	8011b48 <ptr_to_mem>
 801202e:	4603      	mov	r3, r0
 8012030:	4a3b      	ldr	r2, [pc, #236]	; (8012120 <mem_trim+0x210>)
 8012032:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8012034:	89fb      	ldrh	r3, [r7, #14]
 8012036:	4618      	mov	r0, r3
 8012038:	f7ff fd86 	bl	8011b48 <ptr_to_mem>
 801203c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801203e:	693b      	ldr	r3, [r7, #16]
 8012040:	2200      	movs	r2, #0
 8012042:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8012044:	693b      	ldr	r3, [r7, #16]
 8012046:	89ba      	ldrh	r2, [r7, #12]
 8012048:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801204a:	693b      	ldr	r3, [r7, #16]
 801204c:	8afa      	ldrh	r2, [r7, #22]
 801204e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8012050:	69bb      	ldr	r3, [r7, #24]
 8012052:	89fa      	ldrh	r2, [r7, #14]
 8012054:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8012056:	693b      	ldr	r3, [r7, #16]
 8012058:	881b      	ldrh	r3, [r3, #0]
 801205a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801205e:	d047      	beq.n	80120f0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8012060:	693b      	ldr	r3, [r7, #16]
 8012062:	881b      	ldrh	r3, [r3, #0]
 8012064:	4618      	mov	r0, r3
 8012066:	f7ff fd6f 	bl	8011b48 <ptr_to_mem>
 801206a:	4602      	mov	r2, r0
 801206c:	89fb      	ldrh	r3, [r7, #14]
 801206e:	8053      	strh	r3, [r2, #2]
 8012070:	e03e      	b.n	80120f0 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8012072:	8bfb      	ldrh	r3, [r7, #30]
 8012074:	f103 0214 	add.w	r2, r3, #20
 8012078:	8abb      	ldrh	r3, [r7, #20]
 801207a:	429a      	cmp	r2, r3
 801207c:	d838      	bhi.n	80120f0 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801207e:	8afa      	ldrh	r2, [r7, #22]
 8012080:	8bfb      	ldrh	r3, [r7, #30]
 8012082:	4413      	add	r3, r2
 8012084:	b29b      	uxth	r3, r3
 8012086:	3308      	adds	r3, #8
 8012088:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801208a:	69bb      	ldr	r3, [r7, #24]
 801208c:	881b      	ldrh	r3, [r3, #0]
 801208e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012092:	d106      	bne.n	80120a2 <mem_trim+0x192>
 8012094:	4b1c      	ldr	r3, [pc, #112]	; (8012108 <mem_trim+0x1f8>)
 8012096:	f240 3216 	movw	r2, #790	; 0x316
 801209a:	4920      	ldr	r1, [pc, #128]	; (801211c <mem_trim+0x20c>)
 801209c:	481c      	ldr	r0, [pc, #112]	; (8012110 <mem_trim+0x200>)
 801209e:	f00b f809 	bl	801d0b4 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80120a2:	89fb      	ldrh	r3, [r7, #14]
 80120a4:	4618      	mov	r0, r3
 80120a6:	f7ff fd4f 	bl	8011b48 <ptr_to_mem>
 80120aa:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80120ac:	4b1c      	ldr	r3, [pc, #112]	; (8012120 <mem_trim+0x210>)
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	693a      	ldr	r2, [r7, #16]
 80120b2:	429a      	cmp	r2, r3
 80120b4:	d202      	bcs.n	80120bc <mem_trim+0x1ac>
      lfree = mem2;
 80120b6:	4a1a      	ldr	r2, [pc, #104]	; (8012120 <mem_trim+0x210>)
 80120b8:	693b      	ldr	r3, [r7, #16]
 80120ba:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80120bc:	693b      	ldr	r3, [r7, #16]
 80120be:	2200      	movs	r2, #0
 80120c0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80120c2:	69bb      	ldr	r3, [r7, #24]
 80120c4:	881a      	ldrh	r2, [r3, #0]
 80120c6:	693b      	ldr	r3, [r7, #16]
 80120c8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80120ca:	693b      	ldr	r3, [r7, #16]
 80120cc:	8afa      	ldrh	r2, [r7, #22]
 80120ce:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80120d0:	69bb      	ldr	r3, [r7, #24]
 80120d2:	89fa      	ldrh	r2, [r7, #14]
 80120d4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80120d6:	693b      	ldr	r3, [r7, #16]
 80120d8:	881b      	ldrh	r3, [r3, #0]
 80120da:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80120de:	d007      	beq.n	80120f0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80120e0:	693b      	ldr	r3, [r7, #16]
 80120e2:	881b      	ldrh	r3, [r3, #0]
 80120e4:	4618      	mov	r0, r3
 80120e6:	f7ff fd2f 	bl	8011b48 <ptr_to_mem>
 80120ea:	4602      	mov	r2, r0
 80120ec:	89fb      	ldrh	r3, [r7, #14]
 80120ee:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80120f0:	4809      	ldr	r0, [pc, #36]	; (8012118 <mem_trim+0x208>)
 80120f2:	f00a fd4c 	bl	801cb8e <sys_mutex_unlock>
  return rmem;
 80120f6:	687b      	ldr	r3, [r7, #4]
}
 80120f8:	4618      	mov	r0, r3
 80120fa:	3720      	adds	r7, #32
 80120fc:	46bd      	mov	sp, r7
 80120fe:	bd80      	pop	{r7, pc}
 8012100:	2000acd4 	.word	0x2000acd4
 8012104:	2000acd8 	.word	0x2000acd8
 8012108:	0801f220 	.word	0x0801f220
 801210c:	0801f3ac 	.word	0x0801f3ac
 8012110:	0801f268 	.word	0x0801f268
 8012114:	0801f3c4 	.word	0x0801f3c4
 8012118:	2000acdc 	.word	0x2000acdc
 801211c:	0801f3e4 	.word	0x0801f3e4
 8012120:	2000ace0 	.word	0x2000ace0

08012124 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8012124:	b580      	push	{r7, lr}
 8012126:	b088      	sub	sp, #32
 8012128:	af00      	add	r7, sp, #0
 801212a:	4603      	mov	r3, r0
 801212c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801212e:	88fb      	ldrh	r3, [r7, #6]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d101      	bne.n	8012138 <mem_malloc+0x14>
    return NULL;
 8012134:	2300      	movs	r3, #0
 8012136:	e0e2      	b.n	80122fe <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8012138:	88fb      	ldrh	r3, [r7, #6]
 801213a:	3303      	adds	r3, #3
 801213c:	b29b      	uxth	r3, r3
 801213e:	f023 0303 	bic.w	r3, r3, #3
 8012142:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8012144:	8bbb      	ldrh	r3, [r7, #28]
 8012146:	2b0b      	cmp	r3, #11
 8012148:	d801      	bhi.n	801214e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801214a:	230c      	movs	r3, #12
 801214c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801214e:	8bbb      	ldrh	r3, [r7, #28]
 8012150:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8012154:	d803      	bhi.n	801215e <mem_malloc+0x3a>
 8012156:	8bba      	ldrh	r2, [r7, #28]
 8012158:	88fb      	ldrh	r3, [r7, #6]
 801215a:	429a      	cmp	r2, r3
 801215c:	d201      	bcs.n	8012162 <mem_malloc+0x3e>
    return NULL;
 801215e:	2300      	movs	r3, #0
 8012160:	e0cd      	b.n	80122fe <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8012162:	4869      	ldr	r0, [pc, #420]	; (8012308 <mem_malloc+0x1e4>)
 8012164:	f00a fd04 	bl	801cb70 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8012168:	4b68      	ldr	r3, [pc, #416]	; (801230c <mem_malloc+0x1e8>)
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	4618      	mov	r0, r3
 801216e:	f7ff fcfd 	bl	8011b6c <mem_to_ptr>
 8012172:	4603      	mov	r3, r0
 8012174:	83fb      	strh	r3, [r7, #30]
 8012176:	e0b7      	b.n	80122e8 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8012178:	8bfb      	ldrh	r3, [r7, #30]
 801217a:	4618      	mov	r0, r3
 801217c:	f7ff fce4 	bl	8011b48 <ptr_to_mem>
 8012180:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8012182:	697b      	ldr	r3, [r7, #20]
 8012184:	791b      	ldrb	r3, [r3, #4]
 8012186:	2b00      	cmp	r3, #0
 8012188:	f040 80a7 	bne.w	80122da <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801218c:	697b      	ldr	r3, [r7, #20]
 801218e:	881b      	ldrh	r3, [r3, #0]
 8012190:	461a      	mov	r2, r3
 8012192:	8bfb      	ldrh	r3, [r7, #30]
 8012194:	1ad3      	subs	r3, r2, r3
 8012196:	f1a3 0208 	sub.w	r2, r3, #8
 801219a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 801219c:	429a      	cmp	r2, r3
 801219e:	f0c0 809c 	bcc.w	80122da <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80121a2:	697b      	ldr	r3, [r7, #20]
 80121a4:	881b      	ldrh	r3, [r3, #0]
 80121a6:	461a      	mov	r2, r3
 80121a8:	8bfb      	ldrh	r3, [r7, #30]
 80121aa:	1ad3      	subs	r3, r2, r3
 80121ac:	f1a3 0208 	sub.w	r2, r3, #8
 80121b0:	8bbb      	ldrh	r3, [r7, #28]
 80121b2:	3314      	adds	r3, #20
 80121b4:	429a      	cmp	r2, r3
 80121b6:	d333      	bcc.n	8012220 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80121b8:	8bfa      	ldrh	r2, [r7, #30]
 80121ba:	8bbb      	ldrh	r3, [r7, #28]
 80121bc:	4413      	add	r3, r2
 80121be:	b29b      	uxth	r3, r3
 80121c0:	3308      	adds	r3, #8
 80121c2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80121c4:	8a7b      	ldrh	r3, [r7, #18]
 80121c6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80121ca:	d106      	bne.n	80121da <mem_malloc+0xb6>
 80121cc:	4b50      	ldr	r3, [pc, #320]	; (8012310 <mem_malloc+0x1ec>)
 80121ce:	f240 3287 	movw	r2, #903	; 0x387
 80121d2:	4950      	ldr	r1, [pc, #320]	; (8012314 <mem_malloc+0x1f0>)
 80121d4:	4850      	ldr	r0, [pc, #320]	; (8012318 <mem_malloc+0x1f4>)
 80121d6:	f00a ff6d 	bl	801d0b4 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80121da:	8a7b      	ldrh	r3, [r7, #18]
 80121dc:	4618      	mov	r0, r3
 80121de:	f7ff fcb3 	bl	8011b48 <ptr_to_mem>
 80121e2:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 80121e4:	68fb      	ldr	r3, [r7, #12]
 80121e6:	2200      	movs	r2, #0
 80121e8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 80121ea:	697b      	ldr	r3, [r7, #20]
 80121ec:	881a      	ldrh	r2, [r3, #0]
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 80121f2:	68fb      	ldr	r3, [r7, #12]
 80121f4:	8bfa      	ldrh	r2, [r7, #30]
 80121f6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 80121f8:	697b      	ldr	r3, [r7, #20]
 80121fa:	8a7a      	ldrh	r2, [r7, #18]
 80121fc:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 80121fe:	697b      	ldr	r3, [r7, #20]
 8012200:	2201      	movs	r2, #1
 8012202:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8012204:	68fb      	ldr	r3, [r7, #12]
 8012206:	881b      	ldrh	r3, [r3, #0]
 8012208:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801220c:	d00b      	beq.n	8012226 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	881b      	ldrh	r3, [r3, #0]
 8012212:	4618      	mov	r0, r3
 8012214:	f7ff fc98 	bl	8011b48 <ptr_to_mem>
 8012218:	4602      	mov	r2, r0
 801221a:	8a7b      	ldrh	r3, [r7, #18]
 801221c:	8053      	strh	r3, [r2, #2]
 801221e:	e002      	b.n	8012226 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8012220:	697b      	ldr	r3, [r7, #20]
 8012222:	2201      	movs	r2, #1
 8012224:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8012226:	4b39      	ldr	r3, [pc, #228]	; (801230c <mem_malloc+0x1e8>)
 8012228:	681b      	ldr	r3, [r3, #0]
 801222a:	697a      	ldr	r2, [r7, #20]
 801222c:	429a      	cmp	r2, r3
 801222e:	d127      	bne.n	8012280 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8012230:	4b36      	ldr	r3, [pc, #216]	; (801230c <mem_malloc+0x1e8>)
 8012232:	681b      	ldr	r3, [r3, #0]
 8012234:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8012236:	e005      	b.n	8012244 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8012238:	69bb      	ldr	r3, [r7, #24]
 801223a:	881b      	ldrh	r3, [r3, #0]
 801223c:	4618      	mov	r0, r3
 801223e:	f7ff fc83 	bl	8011b48 <ptr_to_mem>
 8012242:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8012244:	69bb      	ldr	r3, [r7, #24]
 8012246:	791b      	ldrb	r3, [r3, #4]
 8012248:	2b00      	cmp	r3, #0
 801224a:	d004      	beq.n	8012256 <mem_malloc+0x132>
 801224c:	4b33      	ldr	r3, [pc, #204]	; (801231c <mem_malloc+0x1f8>)
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	69ba      	ldr	r2, [r7, #24]
 8012252:	429a      	cmp	r2, r3
 8012254:	d1f0      	bne.n	8012238 <mem_malloc+0x114>
          }
          lfree = cur;
 8012256:	4a2d      	ldr	r2, [pc, #180]	; (801230c <mem_malloc+0x1e8>)
 8012258:	69bb      	ldr	r3, [r7, #24]
 801225a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801225c:	4b2b      	ldr	r3, [pc, #172]	; (801230c <mem_malloc+0x1e8>)
 801225e:	681a      	ldr	r2, [r3, #0]
 8012260:	4b2e      	ldr	r3, [pc, #184]	; (801231c <mem_malloc+0x1f8>)
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	429a      	cmp	r2, r3
 8012266:	d00b      	beq.n	8012280 <mem_malloc+0x15c>
 8012268:	4b28      	ldr	r3, [pc, #160]	; (801230c <mem_malloc+0x1e8>)
 801226a:	681b      	ldr	r3, [r3, #0]
 801226c:	791b      	ldrb	r3, [r3, #4]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d006      	beq.n	8012280 <mem_malloc+0x15c>
 8012272:	4b27      	ldr	r3, [pc, #156]	; (8012310 <mem_malloc+0x1ec>)
 8012274:	f240 32b5 	movw	r2, #949	; 0x3b5
 8012278:	4929      	ldr	r1, [pc, #164]	; (8012320 <mem_malloc+0x1fc>)
 801227a:	4827      	ldr	r0, [pc, #156]	; (8012318 <mem_malloc+0x1f4>)
 801227c:	f00a ff1a 	bl	801d0b4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8012280:	4821      	ldr	r0, [pc, #132]	; (8012308 <mem_malloc+0x1e4>)
 8012282:	f00a fc84 	bl	801cb8e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8012286:	8bba      	ldrh	r2, [r7, #28]
 8012288:	697b      	ldr	r3, [r7, #20]
 801228a:	4413      	add	r3, r2
 801228c:	3308      	adds	r3, #8
 801228e:	4a23      	ldr	r2, [pc, #140]	; (801231c <mem_malloc+0x1f8>)
 8012290:	6812      	ldr	r2, [r2, #0]
 8012292:	4293      	cmp	r3, r2
 8012294:	d906      	bls.n	80122a4 <mem_malloc+0x180>
 8012296:	4b1e      	ldr	r3, [pc, #120]	; (8012310 <mem_malloc+0x1ec>)
 8012298:	f240 32b9 	movw	r2, #953	; 0x3b9
 801229c:	4921      	ldr	r1, [pc, #132]	; (8012324 <mem_malloc+0x200>)
 801229e:	481e      	ldr	r0, [pc, #120]	; (8012318 <mem_malloc+0x1f4>)
 80122a0:	f00a ff08 	bl	801d0b4 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80122a4:	697b      	ldr	r3, [r7, #20]
 80122a6:	f003 0303 	and.w	r3, r3, #3
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d006      	beq.n	80122bc <mem_malloc+0x198>
 80122ae:	4b18      	ldr	r3, [pc, #96]	; (8012310 <mem_malloc+0x1ec>)
 80122b0:	f240 32bb 	movw	r2, #955	; 0x3bb
 80122b4:	491c      	ldr	r1, [pc, #112]	; (8012328 <mem_malloc+0x204>)
 80122b6:	4818      	ldr	r0, [pc, #96]	; (8012318 <mem_malloc+0x1f4>)
 80122b8:	f00a fefc 	bl	801d0b4 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80122bc:	697b      	ldr	r3, [r7, #20]
 80122be:	f003 0303 	and.w	r3, r3, #3
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d006      	beq.n	80122d4 <mem_malloc+0x1b0>
 80122c6:	4b12      	ldr	r3, [pc, #72]	; (8012310 <mem_malloc+0x1ec>)
 80122c8:	f240 32bd 	movw	r2, #957	; 0x3bd
 80122cc:	4917      	ldr	r1, [pc, #92]	; (801232c <mem_malloc+0x208>)
 80122ce:	4812      	ldr	r0, [pc, #72]	; (8012318 <mem_malloc+0x1f4>)
 80122d0:	f00a fef0 	bl	801d0b4 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80122d4:	697b      	ldr	r3, [r7, #20]
 80122d6:	3308      	adds	r3, #8
 80122d8:	e011      	b.n	80122fe <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 80122da:	8bfb      	ldrh	r3, [r7, #30]
 80122dc:	4618      	mov	r0, r3
 80122de:	f7ff fc33 	bl	8011b48 <ptr_to_mem>
 80122e2:	4603      	mov	r3, r0
 80122e4:	881b      	ldrh	r3, [r3, #0]
 80122e6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80122e8:	8bfa      	ldrh	r2, [r7, #30]
 80122ea:	8bbb      	ldrh	r3, [r7, #28]
 80122ec:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 80122f0:	429a      	cmp	r2, r3
 80122f2:	f4ff af41 	bcc.w	8012178 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 80122f6:	4804      	ldr	r0, [pc, #16]	; (8012308 <mem_malloc+0x1e4>)
 80122f8:	f00a fc49 	bl	801cb8e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 80122fc:	2300      	movs	r3, #0
}
 80122fe:	4618      	mov	r0, r3
 8012300:	3720      	adds	r7, #32
 8012302:	46bd      	mov	sp, r7
 8012304:	bd80      	pop	{r7, pc}
 8012306:	bf00      	nop
 8012308:	2000acdc 	.word	0x2000acdc
 801230c:	2000ace0 	.word	0x2000ace0
 8012310:	0801f220 	.word	0x0801f220
 8012314:	0801f3e4 	.word	0x0801f3e4
 8012318:	0801f268 	.word	0x0801f268
 801231c:	2000acd8 	.word	0x2000acd8
 8012320:	0801f3f8 	.word	0x0801f3f8
 8012324:	0801f414 	.word	0x0801f414
 8012328:	0801f444 	.word	0x0801f444
 801232c:	0801f474 	.word	0x0801f474

08012330 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8012330:	b480      	push	{r7}
 8012332:	b085      	sub	sp, #20
 8012334:	af00      	add	r7, sp, #0
 8012336:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	689b      	ldr	r3, [r3, #8]
 801233c:	2200      	movs	r2, #0
 801233e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	685b      	ldr	r3, [r3, #4]
 8012344:	3303      	adds	r3, #3
 8012346:	f023 0303 	bic.w	r3, r3, #3
 801234a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 801234c:	2300      	movs	r3, #0
 801234e:	60fb      	str	r3, [r7, #12]
 8012350:	e011      	b.n	8012376 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	689b      	ldr	r3, [r3, #8]
 8012356:	681a      	ldr	r2, [r3, #0]
 8012358:	68bb      	ldr	r3, [r7, #8]
 801235a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 801235c:	687b      	ldr	r3, [r7, #4]
 801235e:	689b      	ldr	r3, [r3, #8]
 8012360:	68ba      	ldr	r2, [r7, #8]
 8012362:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	881b      	ldrh	r3, [r3, #0]
 8012368:	461a      	mov	r2, r3
 801236a:	68bb      	ldr	r3, [r7, #8]
 801236c:	4413      	add	r3, r2
 801236e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8012370:	68fb      	ldr	r3, [r7, #12]
 8012372:	3301      	adds	r3, #1
 8012374:	60fb      	str	r3, [r7, #12]
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	885b      	ldrh	r3, [r3, #2]
 801237a:	461a      	mov	r2, r3
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	4293      	cmp	r3, r2
 8012380:	dbe7      	blt.n	8012352 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8012382:	bf00      	nop
 8012384:	bf00      	nop
 8012386:	3714      	adds	r7, #20
 8012388:	46bd      	mov	sp, r7
 801238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801238e:	4770      	bx	lr

08012390 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b082      	sub	sp, #8
 8012394:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8012396:	2300      	movs	r3, #0
 8012398:	80fb      	strh	r3, [r7, #6]
 801239a:	e009      	b.n	80123b0 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801239c:	88fb      	ldrh	r3, [r7, #6]
 801239e:	4a08      	ldr	r2, [pc, #32]	; (80123c0 <memp_init+0x30>)
 80123a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80123a4:	4618      	mov	r0, r3
 80123a6:	f7ff ffc3 	bl	8012330 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80123aa:	88fb      	ldrh	r3, [r7, #6]
 80123ac:	3301      	adds	r3, #1
 80123ae:	80fb      	strh	r3, [r7, #6]
 80123b0:	88fb      	ldrh	r3, [r7, #6]
 80123b2:	2b0c      	cmp	r3, #12
 80123b4:	d9f2      	bls.n	801239c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80123b6:	bf00      	nop
 80123b8:	bf00      	nop
 80123ba:	3708      	adds	r7, #8
 80123bc:	46bd      	mov	sp, r7
 80123be:	bd80      	pop	{r7, pc}
 80123c0:	08021c88 	.word	0x08021c88

080123c4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80123c4:	b580      	push	{r7, lr}
 80123c6:	b084      	sub	sp, #16
 80123c8:	af00      	add	r7, sp, #0
 80123ca:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80123cc:	f00a fc12 	bl	801cbf4 <sys_arch_protect>
 80123d0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	689b      	ldr	r3, [r3, #8]
 80123d6:	681b      	ldr	r3, [r3, #0]
 80123d8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 80123da:	68bb      	ldr	r3, [r7, #8]
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d015      	beq.n	801240c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	689b      	ldr	r3, [r3, #8]
 80123e4:	68ba      	ldr	r2, [r7, #8]
 80123e6:	6812      	ldr	r2, [r2, #0]
 80123e8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 80123ea:	68bb      	ldr	r3, [r7, #8]
 80123ec:	f003 0303 	and.w	r3, r3, #3
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d006      	beq.n	8012402 <do_memp_malloc_pool+0x3e>
 80123f4:	4b09      	ldr	r3, [pc, #36]	; (801241c <do_memp_malloc_pool+0x58>)
 80123f6:	f44f 728c 	mov.w	r2, #280	; 0x118
 80123fa:	4909      	ldr	r1, [pc, #36]	; (8012420 <do_memp_malloc_pool+0x5c>)
 80123fc:	4809      	ldr	r0, [pc, #36]	; (8012424 <do_memp_malloc_pool+0x60>)
 80123fe:	f00a fe59 	bl	801d0b4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8012402:	68f8      	ldr	r0, [r7, #12]
 8012404:	f00a fc04 	bl	801cc10 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8012408:	68bb      	ldr	r3, [r7, #8]
 801240a:	e003      	b.n	8012414 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801240c:	68f8      	ldr	r0, [r7, #12]
 801240e:	f00a fbff 	bl	801cc10 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8012412:	2300      	movs	r3, #0
}
 8012414:	4618      	mov	r0, r3
 8012416:	3710      	adds	r7, #16
 8012418:	46bd      	mov	sp, r7
 801241a:	bd80      	pop	{r7, pc}
 801241c:	0801f498 	.word	0x0801f498
 8012420:	0801f4c8 	.word	0x0801f4c8
 8012424:	0801f4ec 	.word	0x0801f4ec

08012428 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b084      	sub	sp, #16
 801242c:	af00      	add	r7, sp, #0
 801242e:	4603      	mov	r3, r0
 8012430:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8012432:	79fb      	ldrb	r3, [r7, #7]
 8012434:	2b0c      	cmp	r3, #12
 8012436:	d908      	bls.n	801244a <memp_malloc+0x22>
 8012438:	4b0a      	ldr	r3, [pc, #40]	; (8012464 <memp_malloc+0x3c>)
 801243a:	f240 1257 	movw	r2, #343	; 0x157
 801243e:	490a      	ldr	r1, [pc, #40]	; (8012468 <memp_malloc+0x40>)
 8012440:	480a      	ldr	r0, [pc, #40]	; (801246c <memp_malloc+0x44>)
 8012442:	f00a fe37 	bl	801d0b4 <iprintf>
 8012446:	2300      	movs	r3, #0
 8012448:	e008      	b.n	801245c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801244a:	79fb      	ldrb	r3, [r7, #7]
 801244c:	4a08      	ldr	r2, [pc, #32]	; (8012470 <memp_malloc+0x48>)
 801244e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012452:	4618      	mov	r0, r3
 8012454:	f7ff ffb6 	bl	80123c4 <do_memp_malloc_pool>
 8012458:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801245a:	68fb      	ldr	r3, [r7, #12]
}
 801245c:	4618      	mov	r0, r3
 801245e:	3710      	adds	r7, #16
 8012460:	46bd      	mov	sp, r7
 8012462:	bd80      	pop	{r7, pc}
 8012464:	0801f498 	.word	0x0801f498
 8012468:	0801f528 	.word	0x0801f528
 801246c:	0801f4ec 	.word	0x0801f4ec
 8012470:	08021c88 	.word	0x08021c88

08012474 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8012474:	b580      	push	{r7, lr}
 8012476:	b084      	sub	sp, #16
 8012478:	af00      	add	r7, sp, #0
 801247a:	6078      	str	r0, [r7, #4]
 801247c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801247e:	683b      	ldr	r3, [r7, #0]
 8012480:	f003 0303 	and.w	r3, r3, #3
 8012484:	2b00      	cmp	r3, #0
 8012486:	d006      	beq.n	8012496 <do_memp_free_pool+0x22>
 8012488:	4b0d      	ldr	r3, [pc, #52]	; (80124c0 <do_memp_free_pool+0x4c>)
 801248a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 801248e:	490d      	ldr	r1, [pc, #52]	; (80124c4 <do_memp_free_pool+0x50>)
 8012490:	480d      	ldr	r0, [pc, #52]	; (80124c8 <do_memp_free_pool+0x54>)
 8012492:	f00a fe0f 	bl	801d0b4 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8012496:	683b      	ldr	r3, [r7, #0]
 8012498:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801249a:	f00a fbab 	bl	801cbf4 <sys_arch_protect>
 801249e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	689b      	ldr	r3, [r3, #8]
 80124a4:	681a      	ldr	r2, [r3, #0]
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	689b      	ldr	r3, [r3, #8]
 80124ae:	68fa      	ldr	r2, [r7, #12]
 80124b0:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 80124b2:	68b8      	ldr	r0, [r7, #8]
 80124b4:	f00a fbac 	bl	801cc10 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 80124b8:	bf00      	nop
 80124ba:	3710      	adds	r7, #16
 80124bc:	46bd      	mov	sp, r7
 80124be:	bd80      	pop	{r7, pc}
 80124c0:	0801f498 	.word	0x0801f498
 80124c4:	0801f548 	.word	0x0801f548
 80124c8:	0801f4ec 	.word	0x0801f4ec

080124cc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	b082      	sub	sp, #8
 80124d0:	af00      	add	r7, sp, #0
 80124d2:	4603      	mov	r3, r0
 80124d4:	6039      	str	r1, [r7, #0]
 80124d6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80124d8:	79fb      	ldrb	r3, [r7, #7]
 80124da:	2b0c      	cmp	r3, #12
 80124dc:	d907      	bls.n	80124ee <memp_free+0x22>
 80124de:	4b0c      	ldr	r3, [pc, #48]	; (8012510 <memp_free+0x44>)
 80124e0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80124e4:	490b      	ldr	r1, [pc, #44]	; (8012514 <memp_free+0x48>)
 80124e6:	480c      	ldr	r0, [pc, #48]	; (8012518 <memp_free+0x4c>)
 80124e8:	f00a fde4 	bl	801d0b4 <iprintf>
 80124ec:	e00c      	b.n	8012508 <memp_free+0x3c>

  if (mem == NULL) {
 80124ee:	683b      	ldr	r3, [r7, #0]
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d008      	beq.n	8012506 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80124f4:	79fb      	ldrb	r3, [r7, #7]
 80124f6:	4a09      	ldr	r2, [pc, #36]	; (801251c <memp_free+0x50>)
 80124f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80124fc:	6839      	ldr	r1, [r7, #0]
 80124fe:	4618      	mov	r0, r3
 8012500:	f7ff ffb8 	bl	8012474 <do_memp_free_pool>
 8012504:	e000      	b.n	8012508 <memp_free+0x3c>
    return;
 8012506:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8012508:	3708      	adds	r7, #8
 801250a:	46bd      	mov	sp, r7
 801250c:	bd80      	pop	{r7, pc}
 801250e:	bf00      	nop
 8012510:	0801f498 	.word	0x0801f498
 8012514:	0801f568 	.word	0x0801f568
 8012518:	0801f4ec 	.word	0x0801f4ec
 801251c:	08021c88 	.word	0x08021c88

08012520 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8012520:	b480      	push	{r7}
 8012522:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8012524:	bf00      	nop
 8012526:	46bd      	mov	sp, r7
 8012528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252c:	4770      	bx	lr
	...

08012530 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8012530:	b580      	push	{r7, lr}
 8012532:	b086      	sub	sp, #24
 8012534:	af00      	add	r7, sp, #0
 8012536:	60f8      	str	r0, [r7, #12]
 8012538:	60b9      	str	r1, [r7, #8]
 801253a:	607a      	str	r2, [r7, #4]
 801253c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801253e:	68fb      	ldr	r3, [r7, #12]
 8012540:	2b00      	cmp	r3, #0
 8012542:	d108      	bne.n	8012556 <netif_add+0x26>
 8012544:	4b57      	ldr	r3, [pc, #348]	; (80126a4 <netif_add+0x174>)
 8012546:	f240 1227 	movw	r2, #295	; 0x127
 801254a:	4957      	ldr	r1, [pc, #348]	; (80126a8 <netif_add+0x178>)
 801254c:	4857      	ldr	r0, [pc, #348]	; (80126ac <netif_add+0x17c>)
 801254e:	f00a fdb1 	bl	801d0b4 <iprintf>
 8012552:	2300      	movs	r3, #0
 8012554:	e0a2      	b.n	801269c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8012556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012558:	2b00      	cmp	r3, #0
 801255a:	d108      	bne.n	801256e <netif_add+0x3e>
 801255c:	4b51      	ldr	r3, [pc, #324]	; (80126a4 <netif_add+0x174>)
 801255e:	f44f 7294 	mov.w	r2, #296	; 0x128
 8012562:	4953      	ldr	r1, [pc, #332]	; (80126b0 <netif_add+0x180>)
 8012564:	4851      	ldr	r0, [pc, #324]	; (80126ac <netif_add+0x17c>)
 8012566:	f00a fda5 	bl	801d0b4 <iprintf>
 801256a:	2300      	movs	r3, #0
 801256c:	e096      	b.n	801269c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801256e:	68bb      	ldr	r3, [r7, #8]
 8012570:	2b00      	cmp	r3, #0
 8012572:	d101      	bne.n	8012578 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8012574:	4b4f      	ldr	r3, [pc, #316]	; (80126b4 <netif_add+0x184>)
 8012576:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	2b00      	cmp	r3, #0
 801257c:	d101      	bne.n	8012582 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801257e:	4b4d      	ldr	r3, [pc, #308]	; (80126b4 <netif_add+0x184>)
 8012580:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8012582:	683b      	ldr	r3, [r7, #0]
 8012584:	2b00      	cmp	r3, #0
 8012586:	d101      	bne.n	801258c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8012588:	4b4a      	ldr	r3, [pc, #296]	; (80126b4 <netif_add+0x184>)
 801258a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	2200      	movs	r2, #0
 8012590:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	2200      	movs	r2, #0
 8012596:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	2200      	movs	r2, #0
 801259c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	4a45      	ldr	r2, [pc, #276]	; (80126b8 <netif_add+0x188>)
 80125a2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	2200      	movs	r2, #0
 80125a8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80125aa:	68fb      	ldr	r3, [r7, #12]
 80125ac:	2200      	movs	r2, #0
 80125ae:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	2200      	movs	r2, #0
 80125b6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80125b8:	68fb      	ldr	r3, [r7, #12]
 80125ba:	6a3a      	ldr	r2, [r7, #32]
 80125bc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80125be:	4b3f      	ldr	r3, [pc, #252]	; (80126bc <netif_add+0x18c>)
 80125c0:	781a      	ldrb	r2, [r3, #0]
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80125c8:	68fb      	ldr	r3, [r7, #12]
 80125ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80125cc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80125ce:	683b      	ldr	r3, [r7, #0]
 80125d0:	687a      	ldr	r2, [r7, #4]
 80125d2:	68b9      	ldr	r1, [r7, #8]
 80125d4:	68f8      	ldr	r0, [r7, #12]
 80125d6:	f000 f913 	bl	8012800 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80125da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125dc:	68f8      	ldr	r0, [r7, #12]
 80125de:	4798      	blx	r3
 80125e0:	4603      	mov	r3, r0
 80125e2:	2b00      	cmp	r3, #0
 80125e4:	d001      	beq.n	80125ea <netif_add+0xba>
    return NULL;
 80125e6:	2300      	movs	r3, #0
 80125e8:	e058      	b.n	801269c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80125f0:	2bff      	cmp	r3, #255	; 0xff
 80125f2:	d103      	bne.n	80125fc <netif_add+0xcc>
        netif->num = 0;
 80125f4:	68fb      	ldr	r3, [r7, #12]
 80125f6:	2200      	movs	r2, #0
 80125f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80125fc:	2300      	movs	r3, #0
 80125fe:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8012600:	4b2f      	ldr	r3, [pc, #188]	; (80126c0 <netif_add+0x190>)
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	617b      	str	r3, [r7, #20]
 8012606:	e02b      	b.n	8012660 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8012608:	697a      	ldr	r2, [r7, #20]
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	429a      	cmp	r2, r3
 801260e:	d106      	bne.n	801261e <netif_add+0xee>
 8012610:	4b24      	ldr	r3, [pc, #144]	; (80126a4 <netif_add+0x174>)
 8012612:	f240 128b 	movw	r2, #395	; 0x18b
 8012616:	492b      	ldr	r1, [pc, #172]	; (80126c4 <netif_add+0x194>)
 8012618:	4824      	ldr	r0, [pc, #144]	; (80126ac <netif_add+0x17c>)
 801261a:	f00a fd4b 	bl	801d0b4 <iprintf>
        num_netifs++;
 801261e:	693b      	ldr	r3, [r7, #16]
 8012620:	3301      	adds	r3, #1
 8012622:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8012624:	693b      	ldr	r3, [r7, #16]
 8012626:	2bff      	cmp	r3, #255	; 0xff
 8012628:	dd06      	ble.n	8012638 <netif_add+0x108>
 801262a:	4b1e      	ldr	r3, [pc, #120]	; (80126a4 <netif_add+0x174>)
 801262c:	f240 128d 	movw	r2, #397	; 0x18d
 8012630:	4925      	ldr	r1, [pc, #148]	; (80126c8 <netif_add+0x198>)
 8012632:	481e      	ldr	r0, [pc, #120]	; (80126ac <netif_add+0x17c>)
 8012634:	f00a fd3e 	bl	801d0b4 <iprintf>
        if (netif2->num == netif->num) {
 8012638:	697b      	ldr	r3, [r7, #20]
 801263a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012644:	429a      	cmp	r2, r3
 8012646:	d108      	bne.n	801265a <netif_add+0x12a>
          netif->num++;
 8012648:	68fb      	ldr	r3, [r7, #12]
 801264a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801264e:	3301      	adds	r3, #1
 8012650:	b2da      	uxtb	r2, r3
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8012658:	e005      	b.n	8012666 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801265a:	697b      	ldr	r3, [r7, #20]
 801265c:	681b      	ldr	r3, [r3, #0]
 801265e:	617b      	str	r3, [r7, #20]
 8012660:	697b      	ldr	r3, [r7, #20]
 8012662:	2b00      	cmp	r3, #0
 8012664:	d1d0      	bne.n	8012608 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8012666:	697b      	ldr	r3, [r7, #20]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d1be      	bne.n	80125ea <netif_add+0xba>
  }
  if (netif->num == 254) {
 801266c:	68fb      	ldr	r3, [r7, #12]
 801266e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012672:	2bfe      	cmp	r3, #254	; 0xfe
 8012674:	d103      	bne.n	801267e <netif_add+0x14e>
    netif_num = 0;
 8012676:	4b11      	ldr	r3, [pc, #68]	; (80126bc <netif_add+0x18c>)
 8012678:	2200      	movs	r2, #0
 801267a:	701a      	strb	r2, [r3, #0]
 801267c:	e006      	b.n	801268c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012684:	3301      	adds	r3, #1
 8012686:	b2da      	uxtb	r2, r3
 8012688:	4b0c      	ldr	r3, [pc, #48]	; (80126bc <netif_add+0x18c>)
 801268a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801268c:	4b0c      	ldr	r3, [pc, #48]	; (80126c0 <netif_add+0x190>)
 801268e:	681a      	ldr	r2, [r3, #0]
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8012694:	4a0a      	ldr	r2, [pc, #40]	; (80126c0 <netif_add+0x190>)
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801269a:	68fb      	ldr	r3, [r7, #12]
}
 801269c:	4618      	mov	r0, r3
 801269e:	3718      	adds	r7, #24
 80126a0:	46bd      	mov	sp, r7
 80126a2:	bd80      	pop	{r7, pc}
 80126a4:	0801f584 	.word	0x0801f584
 80126a8:	0801f618 	.word	0x0801f618
 80126ac:	0801f5d4 	.word	0x0801f5d4
 80126b0:	0801f634 	.word	0x0801f634
 80126b4:	08021cfc 	.word	0x08021cfc
 80126b8:	08012a13 	.word	0x08012a13
 80126bc:	2000ddb8 	.word	0x2000ddb8
 80126c0:	2000ddb0 	.word	0x2000ddb0
 80126c4:	0801f658 	.word	0x0801f658
 80126c8:	0801f66c 	.word	0x0801f66c

080126cc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80126cc:	b580      	push	{r7, lr}
 80126ce:	b082      	sub	sp, #8
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	6078      	str	r0, [r7, #4]
 80126d4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80126d6:	6839      	ldr	r1, [r7, #0]
 80126d8:	6878      	ldr	r0, [r7, #4]
 80126da:	f002 fd31 	bl	8015140 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80126de:	6839      	ldr	r1, [r7, #0]
 80126e0:	6878      	ldr	r0, [r7, #4]
 80126e2:	f007 fdcd 	bl	801a280 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80126e6:	bf00      	nop
 80126e8:	3708      	adds	r7, #8
 80126ea:	46bd      	mov	sp, r7
 80126ec:	bd80      	pop	{r7, pc}
	...

080126f0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80126f0:	b580      	push	{r7, lr}
 80126f2:	b086      	sub	sp, #24
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	60f8      	str	r0, [r7, #12]
 80126f8:	60b9      	str	r1, [r7, #8]
 80126fa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80126fc:	68bb      	ldr	r3, [r7, #8]
 80126fe:	2b00      	cmp	r3, #0
 8012700:	d106      	bne.n	8012710 <netif_do_set_ipaddr+0x20>
 8012702:	4b1d      	ldr	r3, [pc, #116]	; (8012778 <netif_do_set_ipaddr+0x88>)
 8012704:	f240 12cb 	movw	r2, #459	; 0x1cb
 8012708:	491c      	ldr	r1, [pc, #112]	; (801277c <netif_do_set_ipaddr+0x8c>)
 801270a:	481d      	ldr	r0, [pc, #116]	; (8012780 <netif_do_set_ipaddr+0x90>)
 801270c:	f00a fcd2 	bl	801d0b4 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d106      	bne.n	8012724 <netif_do_set_ipaddr+0x34>
 8012716:	4b18      	ldr	r3, [pc, #96]	; (8012778 <netif_do_set_ipaddr+0x88>)
 8012718:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801271c:	4917      	ldr	r1, [pc, #92]	; (801277c <netif_do_set_ipaddr+0x8c>)
 801271e:	4818      	ldr	r0, [pc, #96]	; (8012780 <netif_do_set_ipaddr+0x90>)
 8012720:	f00a fcc8 	bl	801d0b4 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8012724:	68bb      	ldr	r3, [r7, #8]
 8012726:	681a      	ldr	r2, [r3, #0]
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	3304      	adds	r3, #4
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	429a      	cmp	r2, r3
 8012730:	d01c      	beq.n	801276c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8012732:	68bb      	ldr	r3, [r7, #8]
 8012734:	681b      	ldr	r3, [r3, #0]
 8012736:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	3304      	adds	r3, #4
 801273c:	681a      	ldr	r2, [r3, #0]
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8012742:	f107 0314 	add.w	r3, r7, #20
 8012746:	4619      	mov	r1, r3
 8012748:	6878      	ldr	r0, [r7, #4]
 801274a:	f7ff ffbf 	bl	80126cc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801274e:	68bb      	ldr	r3, [r7, #8]
 8012750:	2b00      	cmp	r3, #0
 8012752:	d002      	beq.n	801275a <netif_do_set_ipaddr+0x6a>
 8012754:	68bb      	ldr	r3, [r7, #8]
 8012756:	681b      	ldr	r3, [r3, #0]
 8012758:	e000      	b.n	801275c <netif_do_set_ipaddr+0x6c>
 801275a:	2300      	movs	r3, #0
 801275c:	68fa      	ldr	r2, [r7, #12]
 801275e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8012760:	2101      	movs	r1, #1
 8012762:	68f8      	ldr	r0, [r7, #12]
 8012764:	f000 f8d2 	bl	801290c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8012768:	2301      	movs	r3, #1
 801276a:	e000      	b.n	801276e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 801276c:	2300      	movs	r3, #0
}
 801276e:	4618      	mov	r0, r3
 8012770:	3718      	adds	r7, #24
 8012772:	46bd      	mov	sp, r7
 8012774:	bd80      	pop	{r7, pc}
 8012776:	bf00      	nop
 8012778:	0801f584 	.word	0x0801f584
 801277c:	0801f69c 	.word	0x0801f69c
 8012780:	0801f5d4 	.word	0x0801f5d4

08012784 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8012784:	b480      	push	{r7}
 8012786:	b085      	sub	sp, #20
 8012788:	af00      	add	r7, sp, #0
 801278a:	60f8      	str	r0, [r7, #12]
 801278c:	60b9      	str	r1, [r7, #8]
 801278e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8012790:	68bb      	ldr	r3, [r7, #8]
 8012792:	681a      	ldr	r2, [r3, #0]
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	3308      	adds	r3, #8
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	429a      	cmp	r2, r3
 801279c:	d00a      	beq.n	80127b4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801279e:	68bb      	ldr	r3, [r7, #8]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d002      	beq.n	80127aa <netif_do_set_netmask+0x26>
 80127a4:	68bb      	ldr	r3, [r7, #8]
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	e000      	b.n	80127ac <netif_do_set_netmask+0x28>
 80127aa:	2300      	movs	r3, #0
 80127ac:	68fa      	ldr	r2, [r7, #12]
 80127ae:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80127b0:	2301      	movs	r3, #1
 80127b2:	e000      	b.n	80127b6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80127b4:	2300      	movs	r3, #0
}
 80127b6:	4618      	mov	r0, r3
 80127b8:	3714      	adds	r7, #20
 80127ba:	46bd      	mov	sp, r7
 80127bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c0:	4770      	bx	lr

080127c2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80127c2:	b480      	push	{r7}
 80127c4:	b085      	sub	sp, #20
 80127c6:	af00      	add	r7, sp, #0
 80127c8:	60f8      	str	r0, [r7, #12]
 80127ca:	60b9      	str	r1, [r7, #8]
 80127cc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80127ce:	68bb      	ldr	r3, [r7, #8]
 80127d0:	681a      	ldr	r2, [r3, #0]
 80127d2:	68fb      	ldr	r3, [r7, #12]
 80127d4:	330c      	adds	r3, #12
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	429a      	cmp	r2, r3
 80127da:	d00a      	beq.n	80127f2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80127dc:	68bb      	ldr	r3, [r7, #8]
 80127de:	2b00      	cmp	r3, #0
 80127e0:	d002      	beq.n	80127e8 <netif_do_set_gw+0x26>
 80127e2:	68bb      	ldr	r3, [r7, #8]
 80127e4:	681b      	ldr	r3, [r3, #0]
 80127e6:	e000      	b.n	80127ea <netif_do_set_gw+0x28>
 80127e8:	2300      	movs	r3, #0
 80127ea:	68fa      	ldr	r2, [r7, #12]
 80127ec:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80127ee:	2301      	movs	r3, #1
 80127f0:	e000      	b.n	80127f4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80127f2:	2300      	movs	r3, #0
}
 80127f4:	4618      	mov	r0, r3
 80127f6:	3714      	adds	r7, #20
 80127f8:	46bd      	mov	sp, r7
 80127fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127fe:	4770      	bx	lr

08012800 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8012800:	b580      	push	{r7, lr}
 8012802:	b088      	sub	sp, #32
 8012804:	af00      	add	r7, sp, #0
 8012806:	60f8      	str	r0, [r7, #12]
 8012808:	60b9      	str	r1, [r7, #8]
 801280a:	607a      	str	r2, [r7, #4]
 801280c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801280e:	2300      	movs	r3, #0
 8012810:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8012812:	2300      	movs	r3, #0
 8012814:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012816:	68bb      	ldr	r3, [r7, #8]
 8012818:	2b00      	cmp	r3, #0
 801281a:	d101      	bne.n	8012820 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 801281c:	4b1c      	ldr	r3, [pc, #112]	; (8012890 <netif_set_addr+0x90>)
 801281e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8012820:	687b      	ldr	r3, [r7, #4]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d101      	bne.n	801282a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8012826:	4b1a      	ldr	r3, [pc, #104]	; (8012890 <netif_set_addr+0x90>)
 8012828:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801282a:	683b      	ldr	r3, [r7, #0]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d101      	bne.n	8012834 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8012830:	4b17      	ldr	r3, [pc, #92]	; (8012890 <netif_set_addr+0x90>)
 8012832:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8012834:	68bb      	ldr	r3, [r7, #8]
 8012836:	2b00      	cmp	r3, #0
 8012838:	d003      	beq.n	8012842 <netif_set_addr+0x42>
 801283a:	68bb      	ldr	r3, [r7, #8]
 801283c:	681b      	ldr	r3, [r3, #0]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d101      	bne.n	8012846 <netif_set_addr+0x46>
 8012842:	2301      	movs	r3, #1
 8012844:	e000      	b.n	8012848 <netif_set_addr+0x48>
 8012846:	2300      	movs	r3, #0
 8012848:	617b      	str	r3, [r7, #20]
  if (remove) {
 801284a:	697b      	ldr	r3, [r7, #20]
 801284c:	2b00      	cmp	r3, #0
 801284e:	d006      	beq.n	801285e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8012850:	f107 0310 	add.w	r3, r7, #16
 8012854:	461a      	mov	r2, r3
 8012856:	68b9      	ldr	r1, [r7, #8]
 8012858:	68f8      	ldr	r0, [r7, #12]
 801285a:	f7ff ff49 	bl	80126f0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801285e:	69fa      	ldr	r2, [r7, #28]
 8012860:	6879      	ldr	r1, [r7, #4]
 8012862:	68f8      	ldr	r0, [r7, #12]
 8012864:	f7ff ff8e 	bl	8012784 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8012868:	69ba      	ldr	r2, [r7, #24]
 801286a:	6839      	ldr	r1, [r7, #0]
 801286c:	68f8      	ldr	r0, [r7, #12]
 801286e:	f7ff ffa8 	bl	80127c2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8012872:	697b      	ldr	r3, [r7, #20]
 8012874:	2b00      	cmp	r3, #0
 8012876:	d106      	bne.n	8012886 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8012878:	f107 0310 	add.w	r3, r7, #16
 801287c:	461a      	mov	r2, r3
 801287e:	68b9      	ldr	r1, [r7, #8]
 8012880:	68f8      	ldr	r0, [r7, #12]
 8012882:	f7ff ff35 	bl	80126f0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8012886:	bf00      	nop
 8012888:	3720      	adds	r7, #32
 801288a:	46bd      	mov	sp, r7
 801288c:	bd80      	pop	{r7, pc}
 801288e:	bf00      	nop
 8012890:	08021cfc 	.word	0x08021cfc

08012894 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8012894:	b480      	push	{r7}
 8012896:	b083      	sub	sp, #12
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801289c:	4a04      	ldr	r2, [pc, #16]	; (80128b0 <netif_set_default+0x1c>)
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80128a2:	bf00      	nop
 80128a4:	370c      	adds	r7, #12
 80128a6:	46bd      	mov	sp, r7
 80128a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128ac:	4770      	bx	lr
 80128ae:	bf00      	nop
 80128b0:	2000ddb4 	.word	0x2000ddb4

080128b4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80128b4:	b580      	push	{r7, lr}
 80128b6:	b082      	sub	sp, #8
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d107      	bne.n	80128d2 <netif_set_up+0x1e>
 80128c2:	4b0f      	ldr	r3, [pc, #60]	; (8012900 <netif_set_up+0x4c>)
 80128c4:	f44f 7254 	mov.w	r2, #848	; 0x350
 80128c8:	490e      	ldr	r1, [pc, #56]	; (8012904 <netif_set_up+0x50>)
 80128ca:	480f      	ldr	r0, [pc, #60]	; (8012908 <netif_set_up+0x54>)
 80128cc:	f00a fbf2 	bl	801d0b4 <iprintf>
 80128d0:	e013      	b.n	80128fa <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80128d8:	f003 0301 	and.w	r3, r3, #1
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d10c      	bne.n	80128fa <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80128e6:	f043 0301 	orr.w	r3, r3, #1
 80128ea:	b2da      	uxtb	r2, r3
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80128f2:	2103      	movs	r1, #3
 80128f4:	6878      	ldr	r0, [r7, #4]
 80128f6:	f000 f809 	bl	801290c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80128fa:	3708      	adds	r7, #8
 80128fc:	46bd      	mov	sp, r7
 80128fe:	bd80      	pop	{r7, pc}
 8012900:	0801f584 	.word	0x0801f584
 8012904:	0801f70c 	.word	0x0801f70c
 8012908:	0801f5d4 	.word	0x0801f5d4

0801290c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 801290c:	b580      	push	{r7, lr}
 801290e:	b082      	sub	sp, #8
 8012910:	af00      	add	r7, sp, #0
 8012912:	6078      	str	r0, [r7, #4]
 8012914:	460b      	mov	r3, r1
 8012916:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	2b00      	cmp	r3, #0
 801291c:	d106      	bne.n	801292c <netif_issue_reports+0x20>
 801291e:	4b18      	ldr	r3, [pc, #96]	; (8012980 <netif_issue_reports+0x74>)
 8012920:	f240 326d 	movw	r2, #877	; 0x36d
 8012924:	4917      	ldr	r1, [pc, #92]	; (8012984 <netif_issue_reports+0x78>)
 8012926:	4818      	ldr	r0, [pc, #96]	; (8012988 <netif_issue_reports+0x7c>)
 8012928:	f00a fbc4 	bl	801d0b4 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012932:	f003 0304 	and.w	r3, r3, #4
 8012936:	2b00      	cmp	r3, #0
 8012938:	d01e      	beq.n	8012978 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801293a:	687b      	ldr	r3, [r7, #4]
 801293c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012940:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8012944:	2b00      	cmp	r3, #0
 8012946:	d017      	beq.n	8012978 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8012948:	78fb      	ldrb	r3, [r7, #3]
 801294a:	f003 0301 	and.w	r3, r3, #1
 801294e:	2b00      	cmp	r3, #0
 8012950:	d013      	beq.n	801297a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	3304      	adds	r3, #4
 8012956:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8012958:	2b00      	cmp	r3, #0
 801295a:	d00e      	beq.n	801297a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012962:	f003 0308 	and.w	r3, r3, #8
 8012966:	2b00      	cmp	r3, #0
 8012968:	d007      	beq.n	801297a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	3304      	adds	r3, #4
 801296e:	4619      	mov	r1, r3
 8012970:	6878      	ldr	r0, [r7, #4]
 8012972:	f008 fbef 	bl	801b154 <etharp_request>
 8012976:	e000      	b.n	801297a <netif_issue_reports+0x6e>
    return;
 8012978:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801297a:	3708      	adds	r7, #8
 801297c:	46bd      	mov	sp, r7
 801297e:	bd80      	pop	{r7, pc}
 8012980:	0801f584 	.word	0x0801f584
 8012984:	0801f728 	.word	0x0801f728
 8012988:	0801f5d4 	.word	0x0801f5d4

0801298c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801298c:	b580      	push	{r7, lr}
 801298e:	b082      	sub	sp, #8
 8012990:	af00      	add	r7, sp, #0
 8012992:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	2b00      	cmp	r3, #0
 8012998:	d107      	bne.n	80129aa <netif_set_down+0x1e>
 801299a:	4b12      	ldr	r3, [pc, #72]	; (80129e4 <netif_set_down+0x58>)
 801299c:	f240 329b 	movw	r2, #923	; 0x39b
 80129a0:	4911      	ldr	r1, [pc, #68]	; (80129e8 <netif_set_down+0x5c>)
 80129a2:	4812      	ldr	r0, [pc, #72]	; (80129ec <netif_set_down+0x60>)
 80129a4:	f00a fb86 	bl	801d0b4 <iprintf>
 80129a8:	e019      	b.n	80129de <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80129b0:	f003 0301 	and.w	r3, r3, #1
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d012      	beq.n	80129de <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80129be:	f023 0301 	bic.w	r3, r3, #1
 80129c2:	b2da      	uxtb	r2, r3
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80129ca:	687b      	ldr	r3, [r7, #4]
 80129cc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80129d0:	f003 0308 	and.w	r3, r3, #8
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d002      	beq.n	80129de <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80129d8:	6878      	ldr	r0, [r7, #4]
 80129da:	f007 ff79 	bl	801a8d0 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80129de:	3708      	adds	r7, #8
 80129e0:	46bd      	mov	sp, r7
 80129e2:	bd80      	pop	{r7, pc}
 80129e4:	0801f584 	.word	0x0801f584
 80129e8:	0801f74c 	.word	0x0801f74c
 80129ec:	0801f5d4 	.word	0x0801f5d4

080129f0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80129f0:	b480      	push	{r7}
 80129f2:	b083      	sub	sp, #12
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	6078      	str	r0, [r7, #4]
 80129f8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	2b00      	cmp	r3, #0
 80129fe:	d002      	beq.n	8012a06 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8012a00:	687b      	ldr	r3, [r7, #4]
 8012a02:	683a      	ldr	r2, [r7, #0]
 8012a04:	61da      	str	r2, [r3, #28]
  }
}
 8012a06:	bf00      	nop
 8012a08:	370c      	adds	r7, #12
 8012a0a:	46bd      	mov	sp, r7
 8012a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a10:	4770      	bx	lr

08012a12 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8012a12:	b480      	push	{r7}
 8012a14:	b085      	sub	sp, #20
 8012a16:	af00      	add	r7, sp, #0
 8012a18:	60f8      	str	r0, [r7, #12]
 8012a1a:	60b9      	str	r1, [r7, #8]
 8012a1c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8012a1e:	f06f 030b 	mvn.w	r3, #11
}
 8012a22:	4618      	mov	r0, r3
 8012a24:	3714      	adds	r7, #20
 8012a26:	46bd      	mov	sp, r7
 8012a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a2c:	4770      	bx	lr
	...

08012a30 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8012a30:	b480      	push	{r7}
 8012a32:	b085      	sub	sp, #20
 8012a34:	af00      	add	r7, sp, #0
 8012a36:	4603      	mov	r3, r0
 8012a38:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8012a3a:	79fb      	ldrb	r3, [r7, #7]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d013      	beq.n	8012a68 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8012a40:	4b0d      	ldr	r3, [pc, #52]	; (8012a78 <netif_get_by_index+0x48>)
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	60fb      	str	r3, [r7, #12]
 8012a46:	e00c      	b.n	8012a62 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012a4e:	3301      	adds	r3, #1
 8012a50:	b2db      	uxtb	r3, r3
 8012a52:	79fa      	ldrb	r2, [r7, #7]
 8012a54:	429a      	cmp	r2, r3
 8012a56:	d101      	bne.n	8012a5c <netif_get_by_index+0x2c>
        return netif; /* found! */
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	e006      	b.n	8012a6a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8012a5c:	68fb      	ldr	r3, [r7, #12]
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	60fb      	str	r3, [r7, #12]
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d1ef      	bne.n	8012a48 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8012a68:	2300      	movs	r3, #0
}
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	3714      	adds	r7, #20
 8012a6e:	46bd      	mov	sp, r7
 8012a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a74:	4770      	bx	lr
 8012a76:	bf00      	nop
 8012a78:	2000ddb0 	.word	0x2000ddb0

08012a7c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8012a7c:	b580      	push	{r7, lr}
 8012a7e:	b082      	sub	sp, #8
 8012a80:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8012a82:	f00a f8b7 	bl	801cbf4 <sys_arch_protect>
 8012a86:	6038      	str	r0, [r7, #0]
 8012a88:	4b0d      	ldr	r3, [pc, #52]	; (8012ac0 <pbuf_free_ooseq+0x44>)
 8012a8a:	2200      	movs	r2, #0
 8012a8c:	701a      	strb	r2, [r3, #0]
 8012a8e:	6838      	ldr	r0, [r7, #0]
 8012a90:	f00a f8be 	bl	801cc10 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012a94:	4b0b      	ldr	r3, [pc, #44]	; (8012ac4 <pbuf_free_ooseq+0x48>)
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	607b      	str	r3, [r7, #4]
 8012a9a:	e00a      	b.n	8012ab2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d003      	beq.n	8012aac <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8012aa4:	6878      	ldr	r0, [r7, #4]
 8012aa6:	f002 fb89 	bl	80151bc <tcp_free_ooseq>
      return;
 8012aaa:	e005      	b.n	8012ab8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	68db      	ldr	r3, [r3, #12]
 8012ab0:	607b      	str	r3, [r7, #4]
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d1f1      	bne.n	8012a9c <pbuf_free_ooseq+0x20>
    }
  }
}
 8012ab8:	3708      	adds	r7, #8
 8012aba:	46bd      	mov	sp, r7
 8012abc:	bd80      	pop	{r7, pc}
 8012abe:	bf00      	nop
 8012ac0:	2000ddb9 	.word	0x2000ddb9
 8012ac4:	2000ddc8 	.word	0x2000ddc8

08012ac8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8012ac8:	b580      	push	{r7, lr}
 8012aca:	b082      	sub	sp, #8
 8012acc:	af00      	add	r7, sp, #0
 8012ace:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8012ad0:	f7ff ffd4 	bl	8012a7c <pbuf_free_ooseq>
}
 8012ad4:	bf00      	nop
 8012ad6:	3708      	adds	r7, #8
 8012ad8:	46bd      	mov	sp, r7
 8012ada:	bd80      	pop	{r7, pc}

08012adc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8012adc:	b580      	push	{r7, lr}
 8012ade:	b082      	sub	sp, #8
 8012ae0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8012ae2:	f00a f887 	bl	801cbf4 <sys_arch_protect>
 8012ae6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8012ae8:	4b0f      	ldr	r3, [pc, #60]	; (8012b28 <pbuf_pool_is_empty+0x4c>)
 8012aea:	781b      	ldrb	r3, [r3, #0]
 8012aec:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8012aee:	4b0e      	ldr	r3, [pc, #56]	; (8012b28 <pbuf_pool_is_empty+0x4c>)
 8012af0:	2201      	movs	r2, #1
 8012af2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8012af4:	6878      	ldr	r0, [r7, #4]
 8012af6:	f00a f88b 	bl	801cc10 <sys_arch_unprotect>

  if (!queued) {
 8012afa:	78fb      	ldrb	r3, [r7, #3]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d10f      	bne.n	8012b20 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8012b00:	2100      	movs	r1, #0
 8012b02:	480a      	ldr	r0, [pc, #40]	; (8012b2c <pbuf_pool_is_empty+0x50>)
 8012b04:	f7fe ff3a 	bl	801197c <tcpip_try_callback>
 8012b08:	4603      	mov	r3, r0
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d008      	beq.n	8012b20 <pbuf_pool_is_empty+0x44>
 8012b0e:	f00a f871 	bl	801cbf4 <sys_arch_protect>
 8012b12:	6078      	str	r0, [r7, #4]
 8012b14:	4b04      	ldr	r3, [pc, #16]	; (8012b28 <pbuf_pool_is_empty+0x4c>)
 8012b16:	2200      	movs	r2, #0
 8012b18:	701a      	strb	r2, [r3, #0]
 8012b1a:	6878      	ldr	r0, [r7, #4]
 8012b1c:	f00a f878 	bl	801cc10 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8012b20:	bf00      	nop
 8012b22:	3708      	adds	r7, #8
 8012b24:	46bd      	mov	sp, r7
 8012b26:	bd80      	pop	{r7, pc}
 8012b28:	2000ddb9 	.word	0x2000ddb9
 8012b2c:	08012ac9 	.word	0x08012ac9

08012b30 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8012b30:	b480      	push	{r7}
 8012b32:	b085      	sub	sp, #20
 8012b34:	af00      	add	r7, sp, #0
 8012b36:	60f8      	str	r0, [r7, #12]
 8012b38:	60b9      	str	r1, [r7, #8]
 8012b3a:	4611      	mov	r1, r2
 8012b3c:	461a      	mov	r2, r3
 8012b3e:	460b      	mov	r3, r1
 8012b40:	80fb      	strh	r3, [r7, #6]
 8012b42:	4613      	mov	r3, r2
 8012b44:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	2200      	movs	r2, #0
 8012b4a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	68ba      	ldr	r2, [r7, #8]
 8012b50:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	88fa      	ldrh	r2, [r7, #6]
 8012b56:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	88ba      	ldrh	r2, [r7, #4]
 8012b5c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8012b5e:	8b3b      	ldrh	r3, [r7, #24]
 8012b60:	b2da      	uxtb	r2, r3
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8012b66:	68fb      	ldr	r3, [r7, #12]
 8012b68:	7f3a      	ldrb	r2, [r7, #28]
 8012b6a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	2201      	movs	r2, #1
 8012b70:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8012b72:	68fb      	ldr	r3, [r7, #12]
 8012b74:	2200      	movs	r2, #0
 8012b76:	73da      	strb	r2, [r3, #15]
}
 8012b78:	bf00      	nop
 8012b7a:	3714      	adds	r7, #20
 8012b7c:	46bd      	mov	sp, r7
 8012b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b82:	4770      	bx	lr

08012b84 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8012b84:	b580      	push	{r7, lr}
 8012b86:	b08c      	sub	sp, #48	; 0x30
 8012b88:	af02      	add	r7, sp, #8
 8012b8a:	4603      	mov	r3, r0
 8012b8c:	71fb      	strb	r3, [r7, #7]
 8012b8e:	460b      	mov	r3, r1
 8012b90:	80bb      	strh	r3, [r7, #4]
 8012b92:	4613      	mov	r3, r2
 8012b94:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8012b96:	79fb      	ldrb	r3, [r7, #7]
 8012b98:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8012b9a:	887b      	ldrh	r3, [r7, #2]
 8012b9c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8012ba0:	d07f      	beq.n	8012ca2 <pbuf_alloc+0x11e>
 8012ba2:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8012ba6:	f300 80c8 	bgt.w	8012d3a <pbuf_alloc+0x1b6>
 8012baa:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8012bae:	d010      	beq.n	8012bd2 <pbuf_alloc+0x4e>
 8012bb0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8012bb4:	f300 80c1 	bgt.w	8012d3a <pbuf_alloc+0x1b6>
 8012bb8:	2b01      	cmp	r3, #1
 8012bba:	d002      	beq.n	8012bc2 <pbuf_alloc+0x3e>
 8012bbc:	2b41      	cmp	r3, #65	; 0x41
 8012bbe:	f040 80bc 	bne.w	8012d3a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8012bc2:	887a      	ldrh	r2, [r7, #2]
 8012bc4:	88bb      	ldrh	r3, [r7, #4]
 8012bc6:	4619      	mov	r1, r3
 8012bc8:	2000      	movs	r0, #0
 8012bca:	f000 f8d1 	bl	8012d70 <pbuf_alloc_reference>
 8012bce:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8012bd0:	e0bd      	b.n	8012d4e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8012bd6:	2300      	movs	r3, #0
 8012bd8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8012bda:	88bb      	ldrh	r3, [r7, #4]
 8012bdc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8012bde:	200c      	movs	r0, #12
 8012be0:	f7ff fc22 	bl	8012428 <memp_malloc>
 8012be4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8012be6:	693b      	ldr	r3, [r7, #16]
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	d109      	bne.n	8012c00 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8012bec:	f7ff ff76 	bl	8012adc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8012bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d002      	beq.n	8012bfc <pbuf_alloc+0x78>
            pbuf_free(p);
 8012bf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012bf8:	f000 faa8 	bl	801314c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8012bfc:	2300      	movs	r3, #0
 8012bfe:	e0a7      	b.n	8012d50 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8012c00:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012c02:	3303      	adds	r3, #3
 8012c04:	b29b      	uxth	r3, r3
 8012c06:	f023 0303 	bic.w	r3, r3, #3
 8012c0a:	b29b      	uxth	r3, r3
 8012c0c:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8012c10:	b29b      	uxth	r3, r3
 8012c12:	8b7a      	ldrh	r2, [r7, #26]
 8012c14:	4293      	cmp	r3, r2
 8012c16:	bf28      	it	cs
 8012c18:	4613      	movcs	r3, r2
 8012c1a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8012c1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012c1e:	3310      	adds	r3, #16
 8012c20:	693a      	ldr	r2, [r7, #16]
 8012c22:	4413      	add	r3, r2
 8012c24:	3303      	adds	r3, #3
 8012c26:	f023 0303 	bic.w	r3, r3, #3
 8012c2a:	4618      	mov	r0, r3
 8012c2c:	89f9      	ldrh	r1, [r7, #14]
 8012c2e:	8b7a      	ldrh	r2, [r7, #26]
 8012c30:	2300      	movs	r3, #0
 8012c32:	9301      	str	r3, [sp, #4]
 8012c34:	887b      	ldrh	r3, [r7, #2]
 8012c36:	9300      	str	r3, [sp, #0]
 8012c38:	460b      	mov	r3, r1
 8012c3a:	4601      	mov	r1, r0
 8012c3c:	6938      	ldr	r0, [r7, #16]
 8012c3e:	f7ff ff77 	bl	8012b30 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8012c42:	693b      	ldr	r3, [r7, #16]
 8012c44:	685b      	ldr	r3, [r3, #4]
 8012c46:	f003 0303 	and.w	r3, r3, #3
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d006      	beq.n	8012c5c <pbuf_alloc+0xd8>
 8012c4e:	4b42      	ldr	r3, [pc, #264]	; (8012d58 <pbuf_alloc+0x1d4>)
 8012c50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012c54:	4941      	ldr	r1, [pc, #260]	; (8012d5c <pbuf_alloc+0x1d8>)
 8012c56:	4842      	ldr	r0, [pc, #264]	; (8012d60 <pbuf_alloc+0x1dc>)
 8012c58:	f00a fa2c 	bl	801d0b4 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8012c5c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012c5e:	3303      	adds	r3, #3
 8012c60:	f023 0303 	bic.w	r3, r3, #3
 8012c64:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8012c68:	d106      	bne.n	8012c78 <pbuf_alloc+0xf4>
 8012c6a:	4b3b      	ldr	r3, [pc, #236]	; (8012d58 <pbuf_alloc+0x1d4>)
 8012c6c:	f44f 7281 	mov.w	r2, #258	; 0x102
 8012c70:	493c      	ldr	r1, [pc, #240]	; (8012d64 <pbuf_alloc+0x1e0>)
 8012c72:	483b      	ldr	r0, [pc, #236]	; (8012d60 <pbuf_alloc+0x1dc>)
 8012c74:	f00a fa1e 	bl	801d0b4 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8012c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d102      	bne.n	8012c84 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8012c7e:	693b      	ldr	r3, [r7, #16]
 8012c80:	627b      	str	r3, [r7, #36]	; 0x24
 8012c82:	e002      	b.n	8012c8a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8012c84:	69fb      	ldr	r3, [r7, #28]
 8012c86:	693a      	ldr	r2, [r7, #16]
 8012c88:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8012c8a:	693b      	ldr	r3, [r7, #16]
 8012c8c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8012c8e:	8b7a      	ldrh	r2, [r7, #26]
 8012c90:	89fb      	ldrh	r3, [r7, #14]
 8012c92:	1ad3      	subs	r3, r2, r3
 8012c94:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8012c96:	2300      	movs	r3, #0
 8012c98:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8012c9a:	8b7b      	ldrh	r3, [r7, #26]
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d19e      	bne.n	8012bde <pbuf_alloc+0x5a>
      break;
 8012ca0:	e055      	b.n	8012d4e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8012ca2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012ca4:	3303      	adds	r3, #3
 8012ca6:	b29b      	uxth	r3, r3
 8012ca8:	f023 0303 	bic.w	r3, r3, #3
 8012cac:	b29a      	uxth	r2, r3
 8012cae:	88bb      	ldrh	r3, [r7, #4]
 8012cb0:	3303      	adds	r3, #3
 8012cb2:	b29b      	uxth	r3, r3
 8012cb4:	f023 0303 	bic.w	r3, r3, #3
 8012cb8:	b29b      	uxth	r3, r3
 8012cba:	4413      	add	r3, r2
 8012cbc:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8012cbe:	8b3b      	ldrh	r3, [r7, #24]
 8012cc0:	3310      	adds	r3, #16
 8012cc2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012cc4:	8b3a      	ldrh	r2, [r7, #24]
 8012cc6:	88bb      	ldrh	r3, [r7, #4]
 8012cc8:	3303      	adds	r3, #3
 8012cca:	f023 0303 	bic.w	r3, r3, #3
 8012cce:	429a      	cmp	r2, r3
 8012cd0:	d306      	bcc.n	8012ce0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8012cd2:	8afa      	ldrh	r2, [r7, #22]
 8012cd4:	88bb      	ldrh	r3, [r7, #4]
 8012cd6:	3303      	adds	r3, #3
 8012cd8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8012cdc:	429a      	cmp	r2, r3
 8012cde:	d201      	bcs.n	8012ce4 <pbuf_alloc+0x160>
        return NULL;
 8012ce0:	2300      	movs	r3, #0
 8012ce2:	e035      	b.n	8012d50 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8012ce4:	8afb      	ldrh	r3, [r7, #22]
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	f7ff fa1c 	bl	8012124 <mem_malloc>
 8012cec:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8012cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d101      	bne.n	8012cf8 <pbuf_alloc+0x174>
        return NULL;
 8012cf4:	2300      	movs	r3, #0
 8012cf6:	e02b      	b.n	8012d50 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8012cf8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012cfa:	3310      	adds	r3, #16
 8012cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012cfe:	4413      	add	r3, r2
 8012d00:	3303      	adds	r3, #3
 8012d02:	f023 0303 	bic.w	r3, r3, #3
 8012d06:	4618      	mov	r0, r3
 8012d08:	88b9      	ldrh	r1, [r7, #4]
 8012d0a:	88ba      	ldrh	r2, [r7, #4]
 8012d0c:	2300      	movs	r3, #0
 8012d0e:	9301      	str	r3, [sp, #4]
 8012d10:	887b      	ldrh	r3, [r7, #2]
 8012d12:	9300      	str	r3, [sp, #0]
 8012d14:	460b      	mov	r3, r1
 8012d16:	4601      	mov	r1, r0
 8012d18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012d1a:	f7ff ff09 	bl	8012b30 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8012d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d20:	685b      	ldr	r3, [r3, #4]
 8012d22:	f003 0303 	and.w	r3, r3, #3
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d010      	beq.n	8012d4c <pbuf_alloc+0x1c8>
 8012d2a:	4b0b      	ldr	r3, [pc, #44]	; (8012d58 <pbuf_alloc+0x1d4>)
 8012d2c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8012d30:	490d      	ldr	r1, [pc, #52]	; (8012d68 <pbuf_alloc+0x1e4>)
 8012d32:	480b      	ldr	r0, [pc, #44]	; (8012d60 <pbuf_alloc+0x1dc>)
 8012d34:	f00a f9be 	bl	801d0b4 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8012d38:	e008      	b.n	8012d4c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8012d3a:	4b07      	ldr	r3, [pc, #28]	; (8012d58 <pbuf_alloc+0x1d4>)
 8012d3c:	f240 1227 	movw	r2, #295	; 0x127
 8012d40:	490a      	ldr	r1, [pc, #40]	; (8012d6c <pbuf_alloc+0x1e8>)
 8012d42:	4807      	ldr	r0, [pc, #28]	; (8012d60 <pbuf_alloc+0x1dc>)
 8012d44:	f00a f9b6 	bl	801d0b4 <iprintf>
      return NULL;
 8012d48:	2300      	movs	r3, #0
 8012d4a:	e001      	b.n	8012d50 <pbuf_alloc+0x1cc>
      break;
 8012d4c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8012d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8012d50:	4618      	mov	r0, r3
 8012d52:	3728      	adds	r7, #40	; 0x28
 8012d54:	46bd      	mov	sp, r7
 8012d56:	bd80      	pop	{r7, pc}
 8012d58:	0801f7b4 	.word	0x0801f7b4
 8012d5c:	0801f7e4 	.word	0x0801f7e4
 8012d60:	0801f814 	.word	0x0801f814
 8012d64:	0801f83c 	.word	0x0801f83c
 8012d68:	0801f870 	.word	0x0801f870
 8012d6c:	0801f89c 	.word	0x0801f89c

08012d70 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b086      	sub	sp, #24
 8012d74:	af02      	add	r7, sp, #8
 8012d76:	6078      	str	r0, [r7, #4]
 8012d78:	460b      	mov	r3, r1
 8012d7a:	807b      	strh	r3, [r7, #2]
 8012d7c:	4613      	mov	r3, r2
 8012d7e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8012d80:	883b      	ldrh	r3, [r7, #0]
 8012d82:	2b41      	cmp	r3, #65	; 0x41
 8012d84:	d009      	beq.n	8012d9a <pbuf_alloc_reference+0x2a>
 8012d86:	883b      	ldrh	r3, [r7, #0]
 8012d88:	2b01      	cmp	r3, #1
 8012d8a:	d006      	beq.n	8012d9a <pbuf_alloc_reference+0x2a>
 8012d8c:	4b0f      	ldr	r3, [pc, #60]	; (8012dcc <pbuf_alloc_reference+0x5c>)
 8012d8e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8012d92:	490f      	ldr	r1, [pc, #60]	; (8012dd0 <pbuf_alloc_reference+0x60>)
 8012d94:	480f      	ldr	r0, [pc, #60]	; (8012dd4 <pbuf_alloc_reference+0x64>)
 8012d96:	f00a f98d 	bl	801d0b4 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8012d9a:	200b      	movs	r0, #11
 8012d9c:	f7ff fb44 	bl	8012428 <memp_malloc>
 8012da0:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8012da2:	68fb      	ldr	r3, [r7, #12]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d101      	bne.n	8012dac <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8012da8:	2300      	movs	r3, #0
 8012daa:	e00b      	b.n	8012dc4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8012dac:	8879      	ldrh	r1, [r7, #2]
 8012dae:	887a      	ldrh	r2, [r7, #2]
 8012db0:	2300      	movs	r3, #0
 8012db2:	9301      	str	r3, [sp, #4]
 8012db4:	883b      	ldrh	r3, [r7, #0]
 8012db6:	9300      	str	r3, [sp, #0]
 8012db8:	460b      	mov	r3, r1
 8012dba:	6879      	ldr	r1, [r7, #4]
 8012dbc:	68f8      	ldr	r0, [r7, #12]
 8012dbe:	f7ff feb7 	bl	8012b30 <pbuf_init_alloced_pbuf>
  return p;
 8012dc2:	68fb      	ldr	r3, [r7, #12]
}
 8012dc4:	4618      	mov	r0, r3
 8012dc6:	3710      	adds	r7, #16
 8012dc8:	46bd      	mov	sp, r7
 8012dca:	bd80      	pop	{r7, pc}
 8012dcc:	0801f7b4 	.word	0x0801f7b4
 8012dd0:	0801f8b8 	.word	0x0801f8b8
 8012dd4:	0801f814 	.word	0x0801f814

08012dd8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8012dd8:	b580      	push	{r7, lr}
 8012dda:	b088      	sub	sp, #32
 8012ddc:	af02      	add	r7, sp, #8
 8012dde:	607b      	str	r3, [r7, #4]
 8012de0:	4603      	mov	r3, r0
 8012de2:	73fb      	strb	r3, [r7, #15]
 8012de4:	460b      	mov	r3, r1
 8012de6:	81bb      	strh	r3, [r7, #12]
 8012de8:	4613      	mov	r3, r2
 8012dea:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8012dec:	7bfb      	ldrb	r3, [r7, #15]
 8012dee:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8012df0:	8a7b      	ldrh	r3, [r7, #18]
 8012df2:	3303      	adds	r3, #3
 8012df4:	f023 0203 	bic.w	r2, r3, #3
 8012df8:	89bb      	ldrh	r3, [r7, #12]
 8012dfa:	441a      	add	r2, r3
 8012dfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8012dfe:	429a      	cmp	r2, r3
 8012e00:	d901      	bls.n	8012e06 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8012e02:	2300      	movs	r3, #0
 8012e04:	e018      	b.n	8012e38 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8012e06:	6a3b      	ldr	r3, [r7, #32]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d007      	beq.n	8012e1c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8012e0c:	8a7b      	ldrh	r3, [r7, #18]
 8012e0e:	3303      	adds	r3, #3
 8012e10:	f023 0303 	bic.w	r3, r3, #3
 8012e14:	6a3a      	ldr	r2, [r7, #32]
 8012e16:	4413      	add	r3, r2
 8012e18:	617b      	str	r3, [r7, #20]
 8012e1a:	e001      	b.n	8012e20 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8012e1c:	2300      	movs	r3, #0
 8012e1e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8012e20:	6878      	ldr	r0, [r7, #4]
 8012e22:	89b9      	ldrh	r1, [r7, #12]
 8012e24:	89ba      	ldrh	r2, [r7, #12]
 8012e26:	2302      	movs	r3, #2
 8012e28:	9301      	str	r3, [sp, #4]
 8012e2a:	897b      	ldrh	r3, [r7, #10]
 8012e2c:	9300      	str	r3, [sp, #0]
 8012e2e:	460b      	mov	r3, r1
 8012e30:	6979      	ldr	r1, [r7, #20]
 8012e32:	f7ff fe7d 	bl	8012b30 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8012e36:	687b      	ldr	r3, [r7, #4]
}
 8012e38:	4618      	mov	r0, r3
 8012e3a:	3718      	adds	r7, #24
 8012e3c:	46bd      	mov	sp, r7
 8012e3e:	bd80      	pop	{r7, pc}

08012e40 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b084      	sub	sp, #16
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
 8012e48:	460b      	mov	r3, r1
 8012e4a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	2b00      	cmp	r3, #0
 8012e50:	d106      	bne.n	8012e60 <pbuf_realloc+0x20>
 8012e52:	4b3a      	ldr	r3, [pc, #232]	; (8012f3c <pbuf_realloc+0xfc>)
 8012e54:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8012e58:	4939      	ldr	r1, [pc, #228]	; (8012f40 <pbuf_realloc+0x100>)
 8012e5a:	483a      	ldr	r0, [pc, #232]	; (8012f44 <pbuf_realloc+0x104>)
 8012e5c:	f00a f92a 	bl	801d0b4 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	891b      	ldrh	r3, [r3, #8]
 8012e64:	887a      	ldrh	r2, [r7, #2]
 8012e66:	429a      	cmp	r2, r3
 8012e68:	d263      	bcs.n	8012f32 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	891a      	ldrh	r2, [r3, #8]
 8012e6e:	887b      	ldrh	r3, [r7, #2]
 8012e70:	1ad3      	subs	r3, r2, r3
 8012e72:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8012e74:	887b      	ldrh	r3, [r7, #2]
 8012e76:	817b      	strh	r3, [r7, #10]
  q = p;
 8012e78:	687b      	ldr	r3, [r7, #4]
 8012e7a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8012e7c:	e018      	b.n	8012eb0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8012e7e:	68fb      	ldr	r3, [r7, #12]
 8012e80:	895b      	ldrh	r3, [r3, #10]
 8012e82:	897a      	ldrh	r2, [r7, #10]
 8012e84:	1ad3      	subs	r3, r2, r3
 8012e86:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8012e88:	68fb      	ldr	r3, [r7, #12]
 8012e8a:	891a      	ldrh	r2, [r3, #8]
 8012e8c:	893b      	ldrh	r3, [r7, #8]
 8012e8e:	1ad3      	subs	r3, r2, r3
 8012e90:	b29a      	uxth	r2, r3
 8012e92:	68fb      	ldr	r3, [r7, #12]
 8012e94:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d106      	bne.n	8012eb0 <pbuf_realloc+0x70>
 8012ea2:	4b26      	ldr	r3, [pc, #152]	; (8012f3c <pbuf_realloc+0xfc>)
 8012ea4:	f240 12af 	movw	r2, #431	; 0x1af
 8012ea8:	4927      	ldr	r1, [pc, #156]	; (8012f48 <pbuf_realloc+0x108>)
 8012eaa:	4826      	ldr	r0, [pc, #152]	; (8012f44 <pbuf_realloc+0x104>)
 8012eac:	f00a f902 	bl	801d0b4 <iprintf>
  while (rem_len > q->len) {
 8012eb0:	68fb      	ldr	r3, [r7, #12]
 8012eb2:	895b      	ldrh	r3, [r3, #10]
 8012eb4:	897a      	ldrh	r2, [r7, #10]
 8012eb6:	429a      	cmp	r2, r3
 8012eb8:	d8e1      	bhi.n	8012e7e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8012eba:	68fb      	ldr	r3, [r7, #12]
 8012ebc:	7b1b      	ldrb	r3, [r3, #12]
 8012ebe:	f003 030f 	and.w	r3, r3, #15
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	d121      	bne.n	8012f0a <pbuf_realloc+0xca>
 8012ec6:	68fb      	ldr	r3, [r7, #12]
 8012ec8:	895b      	ldrh	r3, [r3, #10]
 8012eca:	897a      	ldrh	r2, [r7, #10]
 8012ecc:	429a      	cmp	r2, r3
 8012ece:	d01c      	beq.n	8012f0a <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8012ed0:	68fb      	ldr	r3, [r7, #12]
 8012ed2:	7b5b      	ldrb	r3, [r3, #13]
 8012ed4:	f003 0302 	and.w	r3, r3, #2
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d116      	bne.n	8012f0a <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8012edc:	68fb      	ldr	r3, [r7, #12]
 8012ede:	685a      	ldr	r2, [r3, #4]
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	1ad3      	subs	r3, r2, r3
 8012ee4:	b29a      	uxth	r2, r3
 8012ee6:	897b      	ldrh	r3, [r7, #10]
 8012ee8:	4413      	add	r3, r2
 8012eea:	b29b      	uxth	r3, r3
 8012eec:	4619      	mov	r1, r3
 8012eee:	68f8      	ldr	r0, [r7, #12]
 8012ef0:	f7ff f80e 	bl	8011f10 <mem_trim>
 8012ef4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d106      	bne.n	8012f0a <pbuf_realloc+0xca>
 8012efc:	4b0f      	ldr	r3, [pc, #60]	; (8012f3c <pbuf_realloc+0xfc>)
 8012efe:	f240 12bd 	movw	r2, #445	; 0x1bd
 8012f02:	4912      	ldr	r1, [pc, #72]	; (8012f4c <pbuf_realloc+0x10c>)
 8012f04:	480f      	ldr	r0, [pc, #60]	; (8012f44 <pbuf_realloc+0x104>)
 8012f06:	f00a f8d5 	bl	801d0b4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8012f0a:	68fb      	ldr	r3, [r7, #12]
 8012f0c:	897a      	ldrh	r2, [r7, #10]
 8012f0e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8012f10:	68fb      	ldr	r3, [r7, #12]
 8012f12:	895a      	ldrh	r2, [r3, #10]
 8012f14:	68fb      	ldr	r3, [r7, #12]
 8012f16:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8012f18:	68fb      	ldr	r3, [r7, #12]
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	2b00      	cmp	r3, #0
 8012f1e:	d004      	beq.n	8012f2a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	4618      	mov	r0, r3
 8012f26:	f000 f911 	bl	801314c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8012f2a:	68fb      	ldr	r3, [r7, #12]
 8012f2c:	2200      	movs	r2, #0
 8012f2e:	601a      	str	r2, [r3, #0]
 8012f30:	e000      	b.n	8012f34 <pbuf_realloc+0xf4>
    return;
 8012f32:	bf00      	nop

}
 8012f34:	3710      	adds	r7, #16
 8012f36:	46bd      	mov	sp, r7
 8012f38:	bd80      	pop	{r7, pc}
 8012f3a:	bf00      	nop
 8012f3c:	0801f7b4 	.word	0x0801f7b4
 8012f40:	0801f8cc 	.word	0x0801f8cc
 8012f44:	0801f814 	.word	0x0801f814
 8012f48:	0801f8e4 	.word	0x0801f8e4
 8012f4c:	0801f8fc 	.word	0x0801f8fc

08012f50 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8012f50:	b580      	push	{r7, lr}
 8012f52:	b086      	sub	sp, #24
 8012f54:	af00      	add	r7, sp, #0
 8012f56:	60f8      	str	r0, [r7, #12]
 8012f58:	60b9      	str	r1, [r7, #8]
 8012f5a:	4613      	mov	r3, r2
 8012f5c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d106      	bne.n	8012f72 <pbuf_add_header_impl+0x22>
 8012f64:	4b2b      	ldr	r3, [pc, #172]	; (8013014 <pbuf_add_header_impl+0xc4>)
 8012f66:	f240 12df 	movw	r2, #479	; 0x1df
 8012f6a:	492b      	ldr	r1, [pc, #172]	; (8013018 <pbuf_add_header_impl+0xc8>)
 8012f6c:	482b      	ldr	r0, [pc, #172]	; (801301c <pbuf_add_header_impl+0xcc>)
 8012f6e:	f00a f8a1 	bl	801d0b4 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	2b00      	cmp	r3, #0
 8012f76:	d003      	beq.n	8012f80 <pbuf_add_header_impl+0x30>
 8012f78:	68bb      	ldr	r3, [r7, #8]
 8012f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012f7e:	d301      	bcc.n	8012f84 <pbuf_add_header_impl+0x34>
    return 1;
 8012f80:	2301      	movs	r3, #1
 8012f82:	e043      	b.n	801300c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8012f84:	68bb      	ldr	r3, [r7, #8]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d101      	bne.n	8012f8e <pbuf_add_header_impl+0x3e>
    return 0;
 8012f8a:	2300      	movs	r3, #0
 8012f8c:	e03e      	b.n	801300c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8012f8e:	68bb      	ldr	r3, [r7, #8]
 8012f90:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	891a      	ldrh	r2, [r3, #8]
 8012f96:	8a7b      	ldrh	r3, [r7, #18]
 8012f98:	4413      	add	r3, r2
 8012f9a:	b29b      	uxth	r3, r3
 8012f9c:	8a7a      	ldrh	r2, [r7, #18]
 8012f9e:	429a      	cmp	r2, r3
 8012fa0:	d901      	bls.n	8012fa6 <pbuf_add_header_impl+0x56>
    return 1;
 8012fa2:	2301      	movs	r3, #1
 8012fa4:	e032      	b.n	801300c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8012fa6:	68fb      	ldr	r3, [r7, #12]
 8012fa8:	7b1b      	ldrb	r3, [r3, #12]
 8012faa:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8012fac:	8a3b      	ldrh	r3, [r7, #16]
 8012fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012fb2:	2b00      	cmp	r3, #0
 8012fb4:	d00c      	beq.n	8012fd0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	685a      	ldr	r2, [r3, #4]
 8012fba:	68bb      	ldr	r3, [r7, #8]
 8012fbc:	425b      	negs	r3, r3
 8012fbe:	4413      	add	r3, r2
 8012fc0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	3310      	adds	r3, #16
 8012fc6:	697a      	ldr	r2, [r7, #20]
 8012fc8:	429a      	cmp	r2, r3
 8012fca:	d20d      	bcs.n	8012fe8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8012fcc:	2301      	movs	r3, #1
 8012fce:	e01d      	b.n	801300c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8012fd0:	79fb      	ldrb	r3, [r7, #7]
 8012fd2:	2b00      	cmp	r3, #0
 8012fd4:	d006      	beq.n	8012fe4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	685a      	ldr	r2, [r3, #4]
 8012fda:	68bb      	ldr	r3, [r7, #8]
 8012fdc:	425b      	negs	r3, r3
 8012fde:	4413      	add	r3, r2
 8012fe0:	617b      	str	r3, [r7, #20]
 8012fe2:	e001      	b.n	8012fe8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8012fe4:	2301      	movs	r3, #1
 8012fe6:	e011      	b.n	801300c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8012fe8:	68fb      	ldr	r3, [r7, #12]
 8012fea:	697a      	ldr	r2, [r7, #20]
 8012fec:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8012fee:	68fb      	ldr	r3, [r7, #12]
 8012ff0:	895a      	ldrh	r2, [r3, #10]
 8012ff2:	8a7b      	ldrh	r3, [r7, #18]
 8012ff4:	4413      	add	r3, r2
 8012ff6:	b29a      	uxth	r2, r3
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	891a      	ldrh	r2, [r3, #8]
 8013000:	8a7b      	ldrh	r3, [r7, #18]
 8013002:	4413      	add	r3, r2
 8013004:	b29a      	uxth	r2, r3
 8013006:	68fb      	ldr	r3, [r7, #12]
 8013008:	811a      	strh	r2, [r3, #8]


  return 0;
 801300a:	2300      	movs	r3, #0
}
 801300c:	4618      	mov	r0, r3
 801300e:	3718      	adds	r7, #24
 8013010:	46bd      	mov	sp, r7
 8013012:	bd80      	pop	{r7, pc}
 8013014:	0801f7b4 	.word	0x0801f7b4
 8013018:	0801f918 	.word	0x0801f918
 801301c:	0801f814 	.word	0x0801f814

08013020 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8013020:	b580      	push	{r7, lr}
 8013022:	b082      	sub	sp, #8
 8013024:	af00      	add	r7, sp, #0
 8013026:	6078      	str	r0, [r7, #4]
 8013028:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801302a:	2200      	movs	r2, #0
 801302c:	6839      	ldr	r1, [r7, #0]
 801302e:	6878      	ldr	r0, [r7, #4]
 8013030:	f7ff ff8e 	bl	8012f50 <pbuf_add_header_impl>
 8013034:	4603      	mov	r3, r0
}
 8013036:	4618      	mov	r0, r3
 8013038:	3708      	adds	r7, #8
 801303a:	46bd      	mov	sp, r7
 801303c:	bd80      	pop	{r7, pc}
	...

08013040 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8013040:	b580      	push	{r7, lr}
 8013042:	b084      	sub	sp, #16
 8013044:	af00      	add	r7, sp, #0
 8013046:	6078      	str	r0, [r7, #4]
 8013048:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	2b00      	cmp	r3, #0
 801304e:	d106      	bne.n	801305e <pbuf_remove_header+0x1e>
 8013050:	4b20      	ldr	r3, [pc, #128]	; (80130d4 <pbuf_remove_header+0x94>)
 8013052:	f240 224b 	movw	r2, #587	; 0x24b
 8013056:	4920      	ldr	r1, [pc, #128]	; (80130d8 <pbuf_remove_header+0x98>)
 8013058:	4820      	ldr	r0, [pc, #128]	; (80130dc <pbuf_remove_header+0x9c>)
 801305a:	f00a f82b 	bl	801d0b4 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801305e:	687b      	ldr	r3, [r7, #4]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d003      	beq.n	801306c <pbuf_remove_header+0x2c>
 8013064:	683b      	ldr	r3, [r7, #0]
 8013066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801306a:	d301      	bcc.n	8013070 <pbuf_remove_header+0x30>
    return 1;
 801306c:	2301      	movs	r3, #1
 801306e:	e02c      	b.n	80130ca <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8013070:	683b      	ldr	r3, [r7, #0]
 8013072:	2b00      	cmp	r3, #0
 8013074:	d101      	bne.n	801307a <pbuf_remove_header+0x3a>
    return 0;
 8013076:	2300      	movs	r3, #0
 8013078:	e027      	b.n	80130ca <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801307a:	683b      	ldr	r3, [r7, #0]
 801307c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	895b      	ldrh	r3, [r3, #10]
 8013082:	89fa      	ldrh	r2, [r7, #14]
 8013084:	429a      	cmp	r2, r3
 8013086:	d908      	bls.n	801309a <pbuf_remove_header+0x5a>
 8013088:	4b12      	ldr	r3, [pc, #72]	; (80130d4 <pbuf_remove_header+0x94>)
 801308a:	f240 2255 	movw	r2, #597	; 0x255
 801308e:	4914      	ldr	r1, [pc, #80]	; (80130e0 <pbuf_remove_header+0xa0>)
 8013090:	4812      	ldr	r0, [pc, #72]	; (80130dc <pbuf_remove_header+0x9c>)
 8013092:	f00a f80f 	bl	801d0b4 <iprintf>
 8013096:	2301      	movs	r3, #1
 8013098:	e017      	b.n	80130ca <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	685b      	ldr	r3, [r3, #4]
 801309e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	685a      	ldr	r2, [r3, #4]
 80130a4:	683b      	ldr	r3, [r7, #0]
 80130a6:	441a      	add	r2, r3
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	895a      	ldrh	r2, [r3, #10]
 80130b0:	89fb      	ldrh	r3, [r7, #14]
 80130b2:	1ad3      	subs	r3, r2, r3
 80130b4:	b29a      	uxth	r2, r3
 80130b6:	687b      	ldr	r3, [r7, #4]
 80130b8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80130ba:	687b      	ldr	r3, [r7, #4]
 80130bc:	891a      	ldrh	r2, [r3, #8]
 80130be:	89fb      	ldrh	r3, [r7, #14]
 80130c0:	1ad3      	subs	r3, r2, r3
 80130c2:	b29a      	uxth	r2, r3
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80130c8:	2300      	movs	r3, #0
}
 80130ca:	4618      	mov	r0, r3
 80130cc:	3710      	adds	r7, #16
 80130ce:	46bd      	mov	sp, r7
 80130d0:	bd80      	pop	{r7, pc}
 80130d2:	bf00      	nop
 80130d4:	0801f7b4 	.word	0x0801f7b4
 80130d8:	0801f918 	.word	0x0801f918
 80130dc:	0801f814 	.word	0x0801f814
 80130e0:	0801f924 	.word	0x0801f924

080130e4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80130e4:	b580      	push	{r7, lr}
 80130e6:	b082      	sub	sp, #8
 80130e8:	af00      	add	r7, sp, #0
 80130ea:	6078      	str	r0, [r7, #4]
 80130ec:	460b      	mov	r3, r1
 80130ee:	807b      	strh	r3, [r7, #2]
 80130f0:	4613      	mov	r3, r2
 80130f2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80130f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80130f8:	2b00      	cmp	r3, #0
 80130fa:	da08      	bge.n	801310e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80130fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013100:	425b      	negs	r3, r3
 8013102:	4619      	mov	r1, r3
 8013104:	6878      	ldr	r0, [r7, #4]
 8013106:	f7ff ff9b 	bl	8013040 <pbuf_remove_header>
 801310a:	4603      	mov	r3, r0
 801310c:	e007      	b.n	801311e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801310e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013112:	787a      	ldrb	r2, [r7, #1]
 8013114:	4619      	mov	r1, r3
 8013116:	6878      	ldr	r0, [r7, #4]
 8013118:	f7ff ff1a 	bl	8012f50 <pbuf_add_header_impl>
 801311c:	4603      	mov	r3, r0
  }
}
 801311e:	4618      	mov	r0, r3
 8013120:	3708      	adds	r7, #8
 8013122:	46bd      	mov	sp, r7
 8013124:	bd80      	pop	{r7, pc}

08013126 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8013126:	b580      	push	{r7, lr}
 8013128:	b082      	sub	sp, #8
 801312a:	af00      	add	r7, sp, #0
 801312c:	6078      	str	r0, [r7, #4]
 801312e:	460b      	mov	r3, r1
 8013130:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8013132:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013136:	2201      	movs	r2, #1
 8013138:	4619      	mov	r1, r3
 801313a:	6878      	ldr	r0, [r7, #4]
 801313c:	f7ff ffd2 	bl	80130e4 <pbuf_header_impl>
 8013140:	4603      	mov	r3, r0
}
 8013142:	4618      	mov	r0, r3
 8013144:	3708      	adds	r7, #8
 8013146:	46bd      	mov	sp, r7
 8013148:	bd80      	pop	{r7, pc}
	...

0801314c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801314c:	b580      	push	{r7, lr}
 801314e:	b088      	sub	sp, #32
 8013150:	af00      	add	r7, sp, #0
 8013152:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8013154:	687b      	ldr	r3, [r7, #4]
 8013156:	2b00      	cmp	r3, #0
 8013158:	d10b      	bne.n	8013172 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	2b00      	cmp	r3, #0
 801315e:	d106      	bne.n	801316e <pbuf_free+0x22>
 8013160:	4b3b      	ldr	r3, [pc, #236]	; (8013250 <pbuf_free+0x104>)
 8013162:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8013166:	493b      	ldr	r1, [pc, #236]	; (8013254 <pbuf_free+0x108>)
 8013168:	483b      	ldr	r0, [pc, #236]	; (8013258 <pbuf_free+0x10c>)
 801316a:	f009 ffa3 	bl	801d0b4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801316e:	2300      	movs	r3, #0
 8013170:	e069      	b.n	8013246 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8013172:	2300      	movs	r3, #0
 8013174:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8013176:	e062      	b.n	801323e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8013178:	f009 fd3c 	bl	801cbf4 <sys_arch_protect>
 801317c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	7b9b      	ldrb	r3, [r3, #14]
 8013182:	2b00      	cmp	r3, #0
 8013184:	d106      	bne.n	8013194 <pbuf_free+0x48>
 8013186:	4b32      	ldr	r3, [pc, #200]	; (8013250 <pbuf_free+0x104>)
 8013188:	f240 22f1 	movw	r2, #753	; 0x2f1
 801318c:	4933      	ldr	r1, [pc, #204]	; (801325c <pbuf_free+0x110>)
 801318e:	4832      	ldr	r0, [pc, #200]	; (8013258 <pbuf_free+0x10c>)
 8013190:	f009 ff90 	bl	801d0b4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	7b9b      	ldrb	r3, [r3, #14]
 8013198:	3b01      	subs	r3, #1
 801319a:	b2da      	uxtb	r2, r3
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	739a      	strb	r2, [r3, #14]
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	7b9b      	ldrb	r3, [r3, #14]
 80131a4:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 80131a6:	69b8      	ldr	r0, [r7, #24]
 80131a8:	f009 fd32 	bl	801cc10 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80131ac:	7dfb      	ldrb	r3, [r7, #23]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d143      	bne.n	801323a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	681b      	ldr	r3, [r3, #0]
 80131b6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80131b8:	687b      	ldr	r3, [r7, #4]
 80131ba:	7b1b      	ldrb	r3, [r3, #12]
 80131bc:	f003 030f 	and.w	r3, r3, #15
 80131c0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	7b5b      	ldrb	r3, [r3, #13]
 80131c6:	f003 0302 	and.w	r3, r3, #2
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d011      	beq.n	80131f2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80131d2:	68bb      	ldr	r3, [r7, #8]
 80131d4:	691b      	ldr	r3, [r3, #16]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d106      	bne.n	80131e8 <pbuf_free+0x9c>
 80131da:	4b1d      	ldr	r3, [pc, #116]	; (8013250 <pbuf_free+0x104>)
 80131dc:	f240 22ff 	movw	r2, #767	; 0x2ff
 80131e0:	491f      	ldr	r1, [pc, #124]	; (8013260 <pbuf_free+0x114>)
 80131e2:	481d      	ldr	r0, [pc, #116]	; (8013258 <pbuf_free+0x10c>)
 80131e4:	f009 ff66 	bl	801d0b4 <iprintf>
        pc->custom_free_function(p);
 80131e8:	68bb      	ldr	r3, [r7, #8]
 80131ea:	691b      	ldr	r3, [r3, #16]
 80131ec:	6878      	ldr	r0, [r7, #4]
 80131ee:	4798      	blx	r3
 80131f0:	e01d      	b.n	801322e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80131f2:	7bfb      	ldrb	r3, [r7, #15]
 80131f4:	2b02      	cmp	r3, #2
 80131f6:	d104      	bne.n	8013202 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 80131f8:	6879      	ldr	r1, [r7, #4]
 80131fa:	200c      	movs	r0, #12
 80131fc:	f7ff f966 	bl	80124cc <memp_free>
 8013200:	e015      	b.n	801322e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8013202:	7bfb      	ldrb	r3, [r7, #15]
 8013204:	2b01      	cmp	r3, #1
 8013206:	d104      	bne.n	8013212 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8013208:	6879      	ldr	r1, [r7, #4]
 801320a:	200b      	movs	r0, #11
 801320c:	f7ff f95e 	bl	80124cc <memp_free>
 8013210:	e00d      	b.n	801322e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8013212:	7bfb      	ldrb	r3, [r7, #15]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d103      	bne.n	8013220 <pbuf_free+0xd4>
          mem_free(p);
 8013218:	6878      	ldr	r0, [r7, #4]
 801321a:	f7fe fde9 	bl	8011df0 <mem_free>
 801321e:	e006      	b.n	801322e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8013220:	4b0b      	ldr	r3, [pc, #44]	; (8013250 <pbuf_free+0x104>)
 8013222:	f240 320f 	movw	r2, #783	; 0x30f
 8013226:	490f      	ldr	r1, [pc, #60]	; (8013264 <pbuf_free+0x118>)
 8013228:	480b      	ldr	r0, [pc, #44]	; (8013258 <pbuf_free+0x10c>)
 801322a:	f009 ff43 	bl	801d0b4 <iprintf>
        }
      }
      count++;
 801322e:	7ffb      	ldrb	r3, [r7, #31]
 8013230:	3301      	adds	r3, #1
 8013232:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8013234:	693b      	ldr	r3, [r7, #16]
 8013236:	607b      	str	r3, [r7, #4]
 8013238:	e001      	b.n	801323e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801323a:	2300      	movs	r3, #0
 801323c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d199      	bne.n	8013178 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8013244:	7ffb      	ldrb	r3, [r7, #31]
}
 8013246:	4618      	mov	r0, r3
 8013248:	3720      	adds	r7, #32
 801324a:	46bd      	mov	sp, r7
 801324c:	bd80      	pop	{r7, pc}
 801324e:	bf00      	nop
 8013250:	0801f7b4 	.word	0x0801f7b4
 8013254:	0801f918 	.word	0x0801f918
 8013258:	0801f814 	.word	0x0801f814
 801325c:	0801f944 	.word	0x0801f944
 8013260:	0801f95c 	.word	0x0801f95c
 8013264:	0801f980 	.word	0x0801f980

08013268 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8013268:	b480      	push	{r7}
 801326a:	b085      	sub	sp, #20
 801326c:	af00      	add	r7, sp, #0
 801326e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8013270:	2300      	movs	r3, #0
 8013272:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8013274:	e005      	b.n	8013282 <pbuf_clen+0x1a>
    ++len;
 8013276:	89fb      	ldrh	r3, [r7, #14]
 8013278:	3301      	adds	r3, #1
 801327a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	2b00      	cmp	r3, #0
 8013286:	d1f6      	bne.n	8013276 <pbuf_clen+0xe>
  }
  return len;
 8013288:	89fb      	ldrh	r3, [r7, #14]
}
 801328a:	4618      	mov	r0, r3
 801328c:	3714      	adds	r7, #20
 801328e:	46bd      	mov	sp, r7
 8013290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013294:	4770      	bx	lr
	...

08013298 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8013298:	b580      	push	{r7, lr}
 801329a:	b084      	sub	sp, #16
 801329c:	af00      	add	r7, sp, #0
 801329e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d016      	beq.n	80132d4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80132a6:	f009 fca5 	bl	801cbf4 <sys_arch_protect>
 80132aa:	60f8      	str	r0, [r7, #12]
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	7b9b      	ldrb	r3, [r3, #14]
 80132b0:	3301      	adds	r3, #1
 80132b2:	b2da      	uxtb	r2, r3
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	739a      	strb	r2, [r3, #14]
 80132b8:	68f8      	ldr	r0, [r7, #12]
 80132ba:	f009 fca9 	bl	801cc10 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	7b9b      	ldrb	r3, [r3, #14]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d106      	bne.n	80132d4 <pbuf_ref+0x3c>
 80132c6:	4b05      	ldr	r3, [pc, #20]	; (80132dc <pbuf_ref+0x44>)
 80132c8:	f240 3242 	movw	r2, #834	; 0x342
 80132cc:	4904      	ldr	r1, [pc, #16]	; (80132e0 <pbuf_ref+0x48>)
 80132ce:	4805      	ldr	r0, [pc, #20]	; (80132e4 <pbuf_ref+0x4c>)
 80132d0:	f009 fef0 	bl	801d0b4 <iprintf>
  }
}
 80132d4:	bf00      	nop
 80132d6:	3710      	adds	r7, #16
 80132d8:	46bd      	mov	sp, r7
 80132da:	bd80      	pop	{r7, pc}
 80132dc:	0801f7b4 	.word	0x0801f7b4
 80132e0:	0801f994 	.word	0x0801f994
 80132e4:	0801f814 	.word	0x0801f814

080132e8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b084      	sub	sp, #16
 80132ec:	af00      	add	r7, sp, #0
 80132ee:	6078      	str	r0, [r7, #4]
 80132f0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d002      	beq.n	80132fe <pbuf_cat+0x16>
 80132f8:	683b      	ldr	r3, [r7, #0]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d107      	bne.n	801330e <pbuf_cat+0x26>
 80132fe:	4b20      	ldr	r3, [pc, #128]	; (8013380 <pbuf_cat+0x98>)
 8013300:	f240 3259 	movw	r2, #857	; 0x359
 8013304:	491f      	ldr	r1, [pc, #124]	; (8013384 <pbuf_cat+0x9c>)
 8013306:	4820      	ldr	r0, [pc, #128]	; (8013388 <pbuf_cat+0xa0>)
 8013308:	f009 fed4 	bl	801d0b4 <iprintf>
 801330c:	e034      	b.n	8013378 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	60fb      	str	r3, [r7, #12]
 8013312:	e00a      	b.n	801332a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	891a      	ldrh	r2, [r3, #8]
 8013318:	683b      	ldr	r3, [r7, #0]
 801331a:	891b      	ldrh	r3, [r3, #8]
 801331c:	4413      	add	r3, r2
 801331e:	b29a      	uxth	r2, r3
 8013320:	68fb      	ldr	r3, [r7, #12]
 8013322:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	60fb      	str	r3, [r7, #12]
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	681b      	ldr	r3, [r3, #0]
 801332e:	2b00      	cmp	r3, #0
 8013330:	d1f0      	bne.n	8013314 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	891a      	ldrh	r2, [r3, #8]
 8013336:	68fb      	ldr	r3, [r7, #12]
 8013338:	895b      	ldrh	r3, [r3, #10]
 801333a:	429a      	cmp	r2, r3
 801333c:	d006      	beq.n	801334c <pbuf_cat+0x64>
 801333e:	4b10      	ldr	r3, [pc, #64]	; (8013380 <pbuf_cat+0x98>)
 8013340:	f240 3262 	movw	r2, #866	; 0x362
 8013344:	4911      	ldr	r1, [pc, #68]	; (801338c <pbuf_cat+0xa4>)
 8013346:	4810      	ldr	r0, [pc, #64]	; (8013388 <pbuf_cat+0xa0>)
 8013348:	f009 feb4 	bl	801d0b4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	2b00      	cmp	r3, #0
 8013352:	d006      	beq.n	8013362 <pbuf_cat+0x7a>
 8013354:	4b0a      	ldr	r3, [pc, #40]	; (8013380 <pbuf_cat+0x98>)
 8013356:	f240 3263 	movw	r2, #867	; 0x363
 801335a:	490d      	ldr	r1, [pc, #52]	; (8013390 <pbuf_cat+0xa8>)
 801335c:	480a      	ldr	r0, [pc, #40]	; (8013388 <pbuf_cat+0xa0>)
 801335e:	f009 fea9 	bl	801d0b4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	891a      	ldrh	r2, [r3, #8]
 8013366:	683b      	ldr	r3, [r7, #0]
 8013368:	891b      	ldrh	r3, [r3, #8]
 801336a:	4413      	add	r3, r2
 801336c:	b29a      	uxth	r2, r3
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	683a      	ldr	r2, [r7, #0]
 8013376:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8013378:	3710      	adds	r7, #16
 801337a:	46bd      	mov	sp, r7
 801337c:	bd80      	pop	{r7, pc}
 801337e:	bf00      	nop
 8013380:	0801f7b4 	.word	0x0801f7b4
 8013384:	0801f9a8 	.word	0x0801f9a8
 8013388:	0801f814 	.word	0x0801f814
 801338c:	0801f9e0 	.word	0x0801f9e0
 8013390:	0801fa10 	.word	0x0801fa10

08013394 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8013394:	b580      	push	{r7, lr}
 8013396:	b082      	sub	sp, #8
 8013398:	af00      	add	r7, sp, #0
 801339a:	6078      	str	r0, [r7, #4]
 801339c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801339e:	6839      	ldr	r1, [r7, #0]
 80133a0:	6878      	ldr	r0, [r7, #4]
 80133a2:	f7ff ffa1 	bl	80132e8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 80133a6:	6838      	ldr	r0, [r7, #0]
 80133a8:	f7ff ff76 	bl	8013298 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 80133ac:	bf00      	nop
 80133ae:	3708      	adds	r7, #8
 80133b0:	46bd      	mov	sp, r7
 80133b2:	bd80      	pop	{r7, pc}

080133b4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80133b4:	b580      	push	{r7, lr}
 80133b6:	b086      	sub	sp, #24
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	6078      	str	r0, [r7, #4]
 80133bc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80133be:	2300      	movs	r3, #0
 80133c0:	617b      	str	r3, [r7, #20]
 80133c2:	2300      	movs	r3, #0
 80133c4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d008      	beq.n	80133de <pbuf_copy+0x2a>
 80133cc:	683b      	ldr	r3, [r7, #0]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d005      	beq.n	80133de <pbuf_copy+0x2a>
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	891a      	ldrh	r2, [r3, #8]
 80133d6:	683b      	ldr	r3, [r7, #0]
 80133d8:	891b      	ldrh	r3, [r3, #8]
 80133da:	429a      	cmp	r2, r3
 80133dc:	d209      	bcs.n	80133f2 <pbuf_copy+0x3e>
 80133de:	4b57      	ldr	r3, [pc, #348]	; (801353c <pbuf_copy+0x188>)
 80133e0:	f240 32c9 	movw	r2, #969	; 0x3c9
 80133e4:	4956      	ldr	r1, [pc, #344]	; (8013540 <pbuf_copy+0x18c>)
 80133e6:	4857      	ldr	r0, [pc, #348]	; (8013544 <pbuf_copy+0x190>)
 80133e8:	f009 fe64 	bl	801d0b4 <iprintf>
 80133ec:	f06f 030f 	mvn.w	r3, #15
 80133f0:	e09f      	b.n	8013532 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80133f2:	687b      	ldr	r3, [r7, #4]
 80133f4:	895b      	ldrh	r3, [r3, #10]
 80133f6:	461a      	mov	r2, r3
 80133f8:	697b      	ldr	r3, [r7, #20]
 80133fa:	1ad2      	subs	r2, r2, r3
 80133fc:	683b      	ldr	r3, [r7, #0]
 80133fe:	895b      	ldrh	r3, [r3, #10]
 8013400:	4619      	mov	r1, r3
 8013402:	693b      	ldr	r3, [r7, #16]
 8013404:	1acb      	subs	r3, r1, r3
 8013406:	429a      	cmp	r2, r3
 8013408:	d306      	bcc.n	8013418 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801340a:	683b      	ldr	r3, [r7, #0]
 801340c:	895b      	ldrh	r3, [r3, #10]
 801340e:	461a      	mov	r2, r3
 8013410:	693b      	ldr	r3, [r7, #16]
 8013412:	1ad3      	subs	r3, r2, r3
 8013414:	60fb      	str	r3, [r7, #12]
 8013416:	e005      	b.n	8013424 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	895b      	ldrh	r3, [r3, #10]
 801341c:	461a      	mov	r2, r3
 801341e:	697b      	ldr	r3, [r7, #20]
 8013420:	1ad3      	subs	r3, r2, r3
 8013422:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	685a      	ldr	r2, [r3, #4]
 8013428:	697b      	ldr	r3, [r7, #20]
 801342a:	18d0      	adds	r0, r2, r3
 801342c:	683b      	ldr	r3, [r7, #0]
 801342e:	685a      	ldr	r2, [r3, #4]
 8013430:	693b      	ldr	r3, [r7, #16]
 8013432:	4413      	add	r3, r2
 8013434:	68fa      	ldr	r2, [r7, #12]
 8013436:	4619      	mov	r1, r3
 8013438:	f009 fd2c 	bl	801ce94 <memcpy>
    offset_to += len;
 801343c:	697a      	ldr	r2, [r7, #20]
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	4413      	add	r3, r2
 8013442:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8013444:	693a      	ldr	r2, [r7, #16]
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	4413      	add	r3, r2
 801344a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801344c:	687b      	ldr	r3, [r7, #4]
 801344e:	895b      	ldrh	r3, [r3, #10]
 8013450:	461a      	mov	r2, r3
 8013452:	697b      	ldr	r3, [r7, #20]
 8013454:	4293      	cmp	r3, r2
 8013456:	d906      	bls.n	8013466 <pbuf_copy+0xb2>
 8013458:	4b38      	ldr	r3, [pc, #224]	; (801353c <pbuf_copy+0x188>)
 801345a:	f240 32d9 	movw	r2, #985	; 0x3d9
 801345e:	493a      	ldr	r1, [pc, #232]	; (8013548 <pbuf_copy+0x194>)
 8013460:	4838      	ldr	r0, [pc, #224]	; (8013544 <pbuf_copy+0x190>)
 8013462:	f009 fe27 	bl	801d0b4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8013466:	683b      	ldr	r3, [r7, #0]
 8013468:	895b      	ldrh	r3, [r3, #10]
 801346a:	461a      	mov	r2, r3
 801346c:	693b      	ldr	r3, [r7, #16]
 801346e:	4293      	cmp	r3, r2
 8013470:	d906      	bls.n	8013480 <pbuf_copy+0xcc>
 8013472:	4b32      	ldr	r3, [pc, #200]	; (801353c <pbuf_copy+0x188>)
 8013474:	f240 32da 	movw	r2, #986	; 0x3da
 8013478:	4934      	ldr	r1, [pc, #208]	; (801354c <pbuf_copy+0x198>)
 801347a:	4832      	ldr	r0, [pc, #200]	; (8013544 <pbuf_copy+0x190>)
 801347c:	f009 fe1a 	bl	801d0b4 <iprintf>
    if (offset_from >= p_from->len) {
 8013480:	683b      	ldr	r3, [r7, #0]
 8013482:	895b      	ldrh	r3, [r3, #10]
 8013484:	461a      	mov	r2, r3
 8013486:	693b      	ldr	r3, [r7, #16]
 8013488:	4293      	cmp	r3, r2
 801348a:	d304      	bcc.n	8013496 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801348c:	2300      	movs	r3, #0
 801348e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8013490:	683b      	ldr	r3, [r7, #0]
 8013492:	681b      	ldr	r3, [r3, #0]
 8013494:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	895b      	ldrh	r3, [r3, #10]
 801349a:	461a      	mov	r2, r3
 801349c:	697b      	ldr	r3, [r7, #20]
 801349e:	4293      	cmp	r3, r2
 80134a0:	d114      	bne.n	80134cc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 80134a2:	2300      	movs	r3, #0
 80134a4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	681b      	ldr	r3, [r3, #0]
 80134aa:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 80134ac:	687b      	ldr	r3, [r7, #4]
 80134ae:	2b00      	cmp	r3, #0
 80134b0:	d10c      	bne.n	80134cc <pbuf_copy+0x118>
 80134b2:	683b      	ldr	r3, [r7, #0]
 80134b4:	2b00      	cmp	r3, #0
 80134b6:	d009      	beq.n	80134cc <pbuf_copy+0x118>
 80134b8:	4b20      	ldr	r3, [pc, #128]	; (801353c <pbuf_copy+0x188>)
 80134ba:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80134be:	4924      	ldr	r1, [pc, #144]	; (8013550 <pbuf_copy+0x19c>)
 80134c0:	4820      	ldr	r0, [pc, #128]	; (8013544 <pbuf_copy+0x190>)
 80134c2:	f009 fdf7 	bl	801d0b4 <iprintf>
 80134c6:	f06f 030f 	mvn.w	r3, #15
 80134ca:	e032      	b.n	8013532 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80134cc:	683b      	ldr	r3, [r7, #0]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d013      	beq.n	80134fa <pbuf_copy+0x146>
 80134d2:	683b      	ldr	r3, [r7, #0]
 80134d4:	895a      	ldrh	r2, [r3, #10]
 80134d6:	683b      	ldr	r3, [r7, #0]
 80134d8:	891b      	ldrh	r3, [r3, #8]
 80134da:	429a      	cmp	r2, r3
 80134dc:	d10d      	bne.n	80134fa <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80134de:	683b      	ldr	r3, [r7, #0]
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d009      	beq.n	80134fa <pbuf_copy+0x146>
 80134e6:	4b15      	ldr	r3, [pc, #84]	; (801353c <pbuf_copy+0x188>)
 80134e8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80134ec:	4919      	ldr	r1, [pc, #100]	; (8013554 <pbuf_copy+0x1a0>)
 80134ee:	4815      	ldr	r0, [pc, #84]	; (8013544 <pbuf_copy+0x190>)
 80134f0:	f009 fde0 	bl	801d0b4 <iprintf>
 80134f4:	f06f 0305 	mvn.w	r3, #5
 80134f8:	e01b      	b.n	8013532 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	2b00      	cmp	r3, #0
 80134fe:	d013      	beq.n	8013528 <pbuf_copy+0x174>
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	895a      	ldrh	r2, [r3, #10]
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	891b      	ldrh	r3, [r3, #8]
 8013508:	429a      	cmp	r2, r3
 801350a:	d10d      	bne.n	8013528 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	681b      	ldr	r3, [r3, #0]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d009      	beq.n	8013528 <pbuf_copy+0x174>
 8013514:	4b09      	ldr	r3, [pc, #36]	; (801353c <pbuf_copy+0x188>)
 8013516:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801351a:	490e      	ldr	r1, [pc, #56]	; (8013554 <pbuf_copy+0x1a0>)
 801351c:	4809      	ldr	r0, [pc, #36]	; (8013544 <pbuf_copy+0x190>)
 801351e:	f009 fdc9 	bl	801d0b4 <iprintf>
 8013522:	f06f 0305 	mvn.w	r3, #5
 8013526:	e004      	b.n	8013532 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8013528:	683b      	ldr	r3, [r7, #0]
 801352a:	2b00      	cmp	r3, #0
 801352c:	f47f af61 	bne.w	80133f2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8013530:	2300      	movs	r3, #0
}
 8013532:	4618      	mov	r0, r3
 8013534:	3718      	adds	r7, #24
 8013536:	46bd      	mov	sp, r7
 8013538:	bd80      	pop	{r7, pc}
 801353a:	bf00      	nop
 801353c:	0801f7b4 	.word	0x0801f7b4
 8013540:	0801fa5c 	.word	0x0801fa5c
 8013544:	0801f814 	.word	0x0801f814
 8013548:	0801fa8c 	.word	0x0801fa8c
 801354c:	0801faa4 	.word	0x0801faa4
 8013550:	0801fac0 	.word	0x0801fac0
 8013554:	0801fad0 	.word	0x0801fad0

08013558 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8013558:	b580      	push	{r7, lr}
 801355a:	b088      	sub	sp, #32
 801355c:	af00      	add	r7, sp, #0
 801355e:	60f8      	str	r0, [r7, #12]
 8013560:	60b9      	str	r1, [r7, #8]
 8013562:	4611      	mov	r1, r2
 8013564:	461a      	mov	r2, r3
 8013566:	460b      	mov	r3, r1
 8013568:	80fb      	strh	r3, [r7, #6]
 801356a:	4613      	mov	r3, r2
 801356c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801356e:	2300      	movs	r3, #0
 8013570:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8013572:	2300      	movs	r3, #0
 8013574:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8013576:	68fb      	ldr	r3, [r7, #12]
 8013578:	2b00      	cmp	r3, #0
 801357a:	d108      	bne.n	801358e <pbuf_copy_partial+0x36>
 801357c:	4b2b      	ldr	r3, [pc, #172]	; (801362c <pbuf_copy_partial+0xd4>)
 801357e:	f240 420a 	movw	r2, #1034	; 0x40a
 8013582:	492b      	ldr	r1, [pc, #172]	; (8013630 <pbuf_copy_partial+0xd8>)
 8013584:	482b      	ldr	r0, [pc, #172]	; (8013634 <pbuf_copy_partial+0xdc>)
 8013586:	f009 fd95 	bl	801d0b4 <iprintf>
 801358a:	2300      	movs	r3, #0
 801358c:	e04a      	b.n	8013624 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801358e:	68bb      	ldr	r3, [r7, #8]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d108      	bne.n	80135a6 <pbuf_copy_partial+0x4e>
 8013594:	4b25      	ldr	r3, [pc, #148]	; (801362c <pbuf_copy_partial+0xd4>)
 8013596:	f240 420b 	movw	r2, #1035	; 0x40b
 801359a:	4927      	ldr	r1, [pc, #156]	; (8013638 <pbuf_copy_partial+0xe0>)
 801359c:	4825      	ldr	r0, [pc, #148]	; (8013634 <pbuf_copy_partial+0xdc>)
 801359e:	f009 fd89 	bl	801d0b4 <iprintf>
 80135a2:	2300      	movs	r3, #0
 80135a4:	e03e      	b.n	8013624 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	61fb      	str	r3, [r7, #28]
 80135aa:	e034      	b.n	8013616 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80135ac:	88bb      	ldrh	r3, [r7, #4]
 80135ae:	2b00      	cmp	r3, #0
 80135b0:	d00a      	beq.n	80135c8 <pbuf_copy_partial+0x70>
 80135b2:	69fb      	ldr	r3, [r7, #28]
 80135b4:	895b      	ldrh	r3, [r3, #10]
 80135b6:	88ba      	ldrh	r2, [r7, #4]
 80135b8:	429a      	cmp	r2, r3
 80135ba:	d305      	bcc.n	80135c8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80135bc:	69fb      	ldr	r3, [r7, #28]
 80135be:	895b      	ldrh	r3, [r3, #10]
 80135c0:	88ba      	ldrh	r2, [r7, #4]
 80135c2:	1ad3      	subs	r3, r2, r3
 80135c4:	80bb      	strh	r3, [r7, #4]
 80135c6:	e023      	b.n	8013610 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80135c8:	69fb      	ldr	r3, [r7, #28]
 80135ca:	895a      	ldrh	r2, [r3, #10]
 80135cc:	88bb      	ldrh	r3, [r7, #4]
 80135ce:	1ad3      	subs	r3, r2, r3
 80135d0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80135d2:	8b3a      	ldrh	r2, [r7, #24]
 80135d4:	88fb      	ldrh	r3, [r7, #6]
 80135d6:	429a      	cmp	r2, r3
 80135d8:	d901      	bls.n	80135de <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80135da:	88fb      	ldrh	r3, [r7, #6]
 80135dc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80135de:	8b7b      	ldrh	r3, [r7, #26]
 80135e0:	68ba      	ldr	r2, [r7, #8]
 80135e2:	18d0      	adds	r0, r2, r3
 80135e4:	69fb      	ldr	r3, [r7, #28]
 80135e6:	685a      	ldr	r2, [r3, #4]
 80135e8:	88bb      	ldrh	r3, [r7, #4]
 80135ea:	4413      	add	r3, r2
 80135ec:	8b3a      	ldrh	r2, [r7, #24]
 80135ee:	4619      	mov	r1, r3
 80135f0:	f009 fc50 	bl	801ce94 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80135f4:	8afa      	ldrh	r2, [r7, #22]
 80135f6:	8b3b      	ldrh	r3, [r7, #24]
 80135f8:	4413      	add	r3, r2
 80135fa:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80135fc:	8b7a      	ldrh	r2, [r7, #26]
 80135fe:	8b3b      	ldrh	r3, [r7, #24]
 8013600:	4413      	add	r3, r2
 8013602:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8013604:	88fa      	ldrh	r2, [r7, #6]
 8013606:	8b3b      	ldrh	r3, [r7, #24]
 8013608:	1ad3      	subs	r3, r2, r3
 801360a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801360c:	2300      	movs	r3, #0
 801360e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8013610:	69fb      	ldr	r3, [r7, #28]
 8013612:	681b      	ldr	r3, [r3, #0]
 8013614:	61fb      	str	r3, [r7, #28]
 8013616:	88fb      	ldrh	r3, [r7, #6]
 8013618:	2b00      	cmp	r3, #0
 801361a:	d002      	beq.n	8013622 <pbuf_copy_partial+0xca>
 801361c:	69fb      	ldr	r3, [r7, #28]
 801361e:	2b00      	cmp	r3, #0
 8013620:	d1c4      	bne.n	80135ac <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8013622:	8afb      	ldrh	r3, [r7, #22]
}
 8013624:	4618      	mov	r0, r3
 8013626:	3720      	adds	r7, #32
 8013628:	46bd      	mov	sp, r7
 801362a:	bd80      	pop	{r7, pc}
 801362c:	0801f7b4 	.word	0x0801f7b4
 8013630:	0801fafc 	.word	0x0801fafc
 8013634:	0801f814 	.word	0x0801f814
 8013638:	0801fb1c 	.word	0x0801fb1c

0801363c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801363c:	b580      	push	{r7, lr}
 801363e:	b084      	sub	sp, #16
 8013640:	af00      	add	r7, sp, #0
 8013642:	4603      	mov	r3, r0
 8013644:	603a      	str	r2, [r7, #0]
 8013646:	71fb      	strb	r3, [r7, #7]
 8013648:	460b      	mov	r3, r1
 801364a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801364c:	683b      	ldr	r3, [r7, #0]
 801364e:	8919      	ldrh	r1, [r3, #8]
 8013650:	88ba      	ldrh	r2, [r7, #4]
 8013652:	79fb      	ldrb	r3, [r7, #7]
 8013654:	4618      	mov	r0, r3
 8013656:	f7ff fa95 	bl	8012b84 <pbuf_alloc>
 801365a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801365c:	68fb      	ldr	r3, [r7, #12]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d101      	bne.n	8013666 <pbuf_clone+0x2a>
    return NULL;
 8013662:	2300      	movs	r3, #0
 8013664:	e011      	b.n	801368a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8013666:	6839      	ldr	r1, [r7, #0]
 8013668:	68f8      	ldr	r0, [r7, #12]
 801366a:	f7ff fea3 	bl	80133b4 <pbuf_copy>
 801366e:	4603      	mov	r3, r0
 8013670:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8013672:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013676:	2b00      	cmp	r3, #0
 8013678:	d006      	beq.n	8013688 <pbuf_clone+0x4c>
 801367a:	4b06      	ldr	r3, [pc, #24]	; (8013694 <pbuf_clone+0x58>)
 801367c:	f240 5224 	movw	r2, #1316	; 0x524
 8013680:	4905      	ldr	r1, [pc, #20]	; (8013698 <pbuf_clone+0x5c>)
 8013682:	4806      	ldr	r0, [pc, #24]	; (801369c <pbuf_clone+0x60>)
 8013684:	f009 fd16 	bl	801d0b4 <iprintf>
  return q;
 8013688:	68fb      	ldr	r3, [r7, #12]
}
 801368a:	4618      	mov	r0, r3
 801368c:	3710      	adds	r7, #16
 801368e:	46bd      	mov	sp, r7
 8013690:	bd80      	pop	{r7, pc}
 8013692:	bf00      	nop
 8013694:	0801f7b4 	.word	0x0801f7b4
 8013698:	0801fc28 	.word	0x0801fc28
 801369c:	0801f814 	.word	0x0801f814

080136a0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80136a0:	b580      	push	{r7, lr}
 80136a2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80136a4:	f009 fd1e 	bl	801d0e4 <rand>
 80136a8:	4603      	mov	r3, r0
 80136aa:	b29b      	uxth	r3, r3
 80136ac:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80136b0:	b29b      	uxth	r3, r3
 80136b2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80136b6:	b29a      	uxth	r2, r3
 80136b8:	4b01      	ldr	r3, [pc, #4]	; (80136c0 <tcp_init+0x20>)
 80136ba:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80136bc:	bf00      	nop
 80136be:	bd80      	pop	{r7, pc}
 80136c0:	200002ec 	.word	0x200002ec

080136c4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80136c4:	b580      	push	{r7, lr}
 80136c6:	b082      	sub	sp, #8
 80136c8:	af00      	add	r7, sp, #0
 80136ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	7d1b      	ldrb	r3, [r3, #20]
 80136d0:	2b01      	cmp	r3, #1
 80136d2:	d105      	bne.n	80136e0 <tcp_free+0x1c>
 80136d4:	4b06      	ldr	r3, [pc, #24]	; (80136f0 <tcp_free+0x2c>)
 80136d6:	22d4      	movs	r2, #212	; 0xd4
 80136d8:	4906      	ldr	r1, [pc, #24]	; (80136f4 <tcp_free+0x30>)
 80136da:	4807      	ldr	r0, [pc, #28]	; (80136f8 <tcp_free+0x34>)
 80136dc:	f009 fcea 	bl	801d0b4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80136e0:	6879      	ldr	r1, [r7, #4]
 80136e2:	2001      	movs	r0, #1
 80136e4:	f7fe fef2 	bl	80124cc <memp_free>
}
 80136e8:	bf00      	nop
 80136ea:	3708      	adds	r7, #8
 80136ec:	46bd      	mov	sp, r7
 80136ee:	bd80      	pop	{r7, pc}
 80136f0:	0801fcb4 	.word	0x0801fcb4
 80136f4:	0801fce4 	.word	0x0801fce4
 80136f8:	0801fcf8 	.word	0x0801fcf8

080136fc <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80136fc:	b580      	push	{r7, lr}
 80136fe:	b082      	sub	sp, #8
 8013700:	af00      	add	r7, sp, #0
 8013702:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	7d1b      	ldrb	r3, [r3, #20]
 8013708:	2b01      	cmp	r3, #1
 801370a:	d105      	bne.n	8013718 <tcp_free_listen+0x1c>
 801370c:	4b06      	ldr	r3, [pc, #24]	; (8013728 <tcp_free_listen+0x2c>)
 801370e:	22df      	movs	r2, #223	; 0xdf
 8013710:	4906      	ldr	r1, [pc, #24]	; (801372c <tcp_free_listen+0x30>)
 8013712:	4807      	ldr	r0, [pc, #28]	; (8013730 <tcp_free_listen+0x34>)
 8013714:	f009 fcce 	bl	801d0b4 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8013718:	6879      	ldr	r1, [r7, #4]
 801371a:	2002      	movs	r0, #2
 801371c:	f7fe fed6 	bl	80124cc <memp_free>
}
 8013720:	bf00      	nop
 8013722:	3708      	adds	r7, #8
 8013724:	46bd      	mov	sp, r7
 8013726:	bd80      	pop	{r7, pc}
 8013728:	0801fcb4 	.word	0x0801fcb4
 801372c:	0801fd20 	.word	0x0801fd20
 8013730:	0801fcf8 	.word	0x0801fcf8

08013734 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8013734:	b580      	push	{r7, lr}
 8013736:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8013738:	f000 ffdc 	bl	80146f4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801373c:	4b07      	ldr	r3, [pc, #28]	; (801375c <tcp_tmr+0x28>)
 801373e:	781b      	ldrb	r3, [r3, #0]
 8013740:	3301      	adds	r3, #1
 8013742:	b2da      	uxtb	r2, r3
 8013744:	4b05      	ldr	r3, [pc, #20]	; (801375c <tcp_tmr+0x28>)
 8013746:	701a      	strb	r2, [r3, #0]
 8013748:	4b04      	ldr	r3, [pc, #16]	; (801375c <tcp_tmr+0x28>)
 801374a:	781b      	ldrb	r3, [r3, #0]
 801374c:	f003 0301 	and.w	r3, r3, #1
 8013750:	2b00      	cmp	r3, #0
 8013752:	d001      	beq.n	8013758 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8013754:	f000 fc8e 	bl	8014074 <tcp_slowtmr>
  }
}
 8013758:	bf00      	nop
 801375a:	bd80      	pop	{r7, pc}
 801375c:	2000ddd1 	.word	0x2000ddd1

08013760 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8013760:	b580      	push	{r7, lr}
 8013762:	b084      	sub	sp, #16
 8013764:	af00      	add	r7, sp, #0
 8013766:	6078      	str	r0, [r7, #4]
 8013768:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801376a:	683b      	ldr	r3, [r7, #0]
 801376c:	2b00      	cmp	r3, #0
 801376e:	d105      	bne.n	801377c <tcp_remove_listener+0x1c>
 8013770:	4b0d      	ldr	r3, [pc, #52]	; (80137a8 <tcp_remove_listener+0x48>)
 8013772:	22ff      	movs	r2, #255	; 0xff
 8013774:	490d      	ldr	r1, [pc, #52]	; (80137ac <tcp_remove_listener+0x4c>)
 8013776:	480e      	ldr	r0, [pc, #56]	; (80137b0 <tcp_remove_listener+0x50>)
 8013778:	f009 fc9c 	bl	801d0b4 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	60fb      	str	r3, [r7, #12]
 8013780:	e00a      	b.n	8013798 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8013782:	68fb      	ldr	r3, [r7, #12]
 8013784:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013786:	683a      	ldr	r2, [r7, #0]
 8013788:	429a      	cmp	r2, r3
 801378a:	d102      	bne.n	8013792 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 801378c:	68fb      	ldr	r3, [r7, #12]
 801378e:	2200      	movs	r2, #0
 8013790:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8013792:	68fb      	ldr	r3, [r7, #12]
 8013794:	68db      	ldr	r3, [r3, #12]
 8013796:	60fb      	str	r3, [r7, #12]
 8013798:	68fb      	ldr	r3, [r7, #12]
 801379a:	2b00      	cmp	r3, #0
 801379c:	d1f1      	bne.n	8013782 <tcp_remove_listener+0x22>
    }
  }
}
 801379e:	bf00      	nop
 80137a0:	bf00      	nop
 80137a2:	3710      	adds	r7, #16
 80137a4:	46bd      	mov	sp, r7
 80137a6:	bd80      	pop	{r7, pc}
 80137a8:	0801fcb4 	.word	0x0801fcb4
 80137ac:	0801fd3c 	.word	0x0801fd3c
 80137b0:	0801fcf8 	.word	0x0801fcf8

080137b4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80137b4:	b580      	push	{r7, lr}
 80137b6:	b084      	sub	sp, #16
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d106      	bne.n	80137d0 <tcp_listen_closed+0x1c>
 80137c2:	4b14      	ldr	r3, [pc, #80]	; (8013814 <tcp_listen_closed+0x60>)
 80137c4:	f240 1211 	movw	r2, #273	; 0x111
 80137c8:	4913      	ldr	r1, [pc, #76]	; (8013818 <tcp_listen_closed+0x64>)
 80137ca:	4814      	ldr	r0, [pc, #80]	; (801381c <tcp_listen_closed+0x68>)
 80137cc:	f009 fc72 	bl	801d0b4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	7d1b      	ldrb	r3, [r3, #20]
 80137d4:	2b01      	cmp	r3, #1
 80137d6:	d006      	beq.n	80137e6 <tcp_listen_closed+0x32>
 80137d8:	4b0e      	ldr	r3, [pc, #56]	; (8013814 <tcp_listen_closed+0x60>)
 80137da:	f44f 7289 	mov.w	r2, #274	; 0x112
 80137de:	4910      	ldr	r1, [pc, #64]	; (8013820 <tcp_listen_closed+0x6c>)
 80137e0:	480e      	ldr	r0, [pc, #56]	; (801381c <tcp_listen_closed+0x68>)
 80137e2:	f009 fc67 	bl	801d0b4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80137e6:	2301      	movs	r3, #1
 80137e8:	60fb      	str	r3, [r7, #12]
 80137ea:	e00b      	b.n	8013804 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80137ec:	4a0d      	ldr	r2, [pc, #52]	; (8013824 <tcp_listen_closed+0x70>)
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	6879      	ldr	r1, [r7, #4]
 80137f8:	4618      	mov	r0, r3
 80137fa:	f7ff ffb1 	bl	8013760 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80137fe:	68fb      	ldr	r3, [r7, #12]
 8013800:	3301      	adds	r3, #1
 8013802:	60fb      	str	r3, [r7, #12]
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	2b03      	cmp	r3, #3
 8013808:	d9f0      	bls.n	80137ec <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801380a:	bf00      	nop
 801380c:	bf00      	nop
 801380e:	3710      	adds	r7, #16
 8013810:	46bd      	mov	sp, r7
 8013812:	bd80      	pop	{r7, pc}
 8013814:	0801fcb4 	.word	0x0801fcb4
 8013818:	0801fd64 	.word	0x0801fd64
 801381c:	0801fcf8 	.word	0x0801fcf8
 8013820:	0801fd70 	.word	0x0801fd70
 8013824:	08021cd4 	.word	0x08021cd4

08013828 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8013828:	b5b0      	push	{r4, r5, r7, lr}
 801382a:	b088      	sub	sp, #32
 801382c:	af04      	add	r7, sp, #16
 801382e:	6078      	str	r0, [r7, #4]
 8013830:	460b      	mov	r3, r1
 8013832:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d106      	bne.n	8013848 <tcp_close_shutdown+0x20>
 801383a:	4b63      	ldr	r3, [pc, #396]	; (80139c8 <tcp_close_shutdown+0x1a0>)
 801383c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8013840:	4962      	ldr	r1, [pc, #392]	; (80139cc <tcp_close_shutdown+0x1a4>)
 8013842:	4863      	ldr	r0, [pc, #396]	; (80139d0 <tcp_close_shutdown+0x1a8>)
 8013844:	f009 fc36 	bl	801d0b4 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8013848:	78fb      	ldrb	r3, [r7, #3]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d066      	beq.n	801391c <tcp_close_shutdown+0xf4>
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	7d1b      	ldrb	r3, [r3, #20]
 8013852:	2b04      	cmp	r3, #4
 8013854:	d003      	beq.n	801385e <tcp_close_shutdown+0x36>
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	7d1b      	ldrb	r3, [r3, #20]
 801385a:	2b07      	cmp	r3, #7
 801385c:	d15e      	bne.n	801391c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013862:	2b00      	cmp	r3, #0
 8013864:	d104      	bne.n	8013870 <tcp_close_shutdown+0x48>
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801386a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801386e:	d055      	beq.n	801391c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	8b5b      	ldrh	r3, [r3, #26]
 8013874:	f003 0310 	and.w	r3, r3, #16
 8013878:	2b00      	cmp	r3, #0
 801387a:	d106      	bne.n	801388a <tcp_close_shutdown+0x62>
 801387c:	4b52      	ldr	r3, [pc, #328]	; (80139c8 <tcp_close_shutdown+0x1a0>)
 801387e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8013882:	4954      	ldr	r1, [pc, #336]	; (80139d4 <tcp_close_shutdown+0x1ac>)
 8013884:	4852      	ldr	r0, [pc, #328]	; (80139d0 <tcp_close_shutdown+0x1a8>)
 8013886:	f009 fc15 	bl	801d0b4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8013892:	687d      	ldr	r5, [r7, #4]
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	3304      	adds	r3, #4
 8013898:	687a      	ldr	r2, [r7, #4]
 801389a:	8ad2      	ldrh	r2, [r2, #22]
 801389c:	6879      	ldr	r1, [r7, #4]
 801389e:	8b09      	ldrh	r1, [r1, #24]
 80138a0:	9102      	str	r1, [sp, #8]
 80138a2:	9201      	str	r2, [sp, #4]
 80138a4:	9300      	str	r3, [sp, #0]
 80138a6:	462b      	mov	r3, r5
 80138a8:	4622      	mov	r2, r4
 80138aa:	4601      	mov	r1, r0
 80138ac:	6878      	ldr	r0, [r7, #4]
 80138ae:	f005 fcf1 	bl	8019294 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80138b2:	6878      	ldr	r0, [r7, #4]
 80138b4:	f001 face 	bl	8014e54 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80138b8:	4b47      	ldr	r3, [pc, #284]	; (80139d8 <tcp_close_shutdown+0x1b0>)
 80138ba:	681b      	ldr	r3, [r3, #0]
 80138bc:	687a      	ldr	r2, [r7, #4]
 80138be:	429a      	cmp	r2, r3
 80138c0:	d105      	bne.n	80138ce <tcp_close_shutdown+0xa6>
 80138c2:	4b45      	ldr	r3, [pc, #276]	; (80139d8 <tcp_close_shutdown+0x1b0>)
 80138c4:	681b      	ldr	r3, [r3, #0]
 80138c6:	68db      	ldr	r3, [r3, #12]
 80138c8:	4a43      	ldr	r2, [pc, #268]	; (80139d8 <tcp_close_shutdown+0x1b0>)
 80138ca:	6013      	str	r3, [r2, #0]
 80138cc:	e013      	b.n	80138f6 <tcp_close_shutdown+0xce>
 80138ce:	4b42      	ldr	r3, [pc, #264]	; (80139d8 <tcp_close_shutdown+0x1b0>)
 80138d0:	681b      	ldr	r3, [r3, #0]
 80138d2:	60fb      	str	r3, [r7, #12]
 80138d4:	e00c      	b.n	80138f0 <tcp_close_shutdown+0xc8>
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	68db      	ldr	r3, [r3, #12]
 80138da:	687a      	ldr	r2, [r7, #4]
 80138dc:	429a      	cmp	r2, r3
 80138de:	d104      	bne.n	80138ea <tcp_close_shutdown+0xc2>
 80138e0:	687b      	ldr	r3, [r7, #4]
 80138e2:	68da      	ldr	r2, [r3, #12]
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	60da      	str	r2, [r3, #12]
 80138e8:	e005      	b.n	80138f6 <tcp_close_shutdown+0xce>
 80138ea:	68fb      	ldr	r3, [r7, #12]
 80138ec:	68db      	ldr	r3, [r3, #12]
 80138ee:	60fb      	str	r3, [r7, #12]
 80138f0:	68fb      	ldr	r3, [r7, #12]
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d1ef      	bne.n	80138d6 <tcp_close_shutdown+0xae>
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	2200      	movs	r2, #0
 80138fa:	60da      	str	r2, [r3, #12]
 80138fc:	4b37      	ldr	r3, [pc, #220]	; (80139dc <tcp_close_shutdown+0x1b4>)
 80138fe:	2201      	movs	r2, #1
 8013900:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8013902:	4b37      	ldr	r3, [pc, #220]	; (80139e0 <tcp_close_shutdown+0x1b8>)
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	687a      	ldr	r2, [r7, #4]
 8013908:	429a      	cmp	r2, r3
 801390a:	d102      	bne.n	8013912 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801390c:	f003 ff66 	bl	80177dc <tcp_trigger_input_pcb_close>
 8013910:	e002      	b.n	8013918 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8013912:	6878      	ldr	r0, [r7, #4]
 8013914:	f7ff fed6 	bl	80136c4 <tcp_free>
      }
      return ERR_OK;
 8013918:	2300      	movs	r3, #0
 801391a:	e050      	b.n	80139be <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	7d1b      	ldrb	r3, [r3, #20]
 8013920:	2b02      	cmp	r3, #2
 8013922:	d03b      	beq.n	801399c <tcp_close_shutdown+0x174>
 8013924:	2b02      	cmp	r3, #2
 8013926:	dc44      	bgt.n	80139b2 <tcp_close_shutdown+0x18a>
 8013928:	2b00      	cmp	r3, #0
 801392a:	d002      	beq.n	8013932 <tcp_close_shutdown+0x10a>
 801392c:	2b01      	cmp	r3, #1
 801392e:	d02a      	beq.n	8013986 <tcp_close_shutdown+0x15e>
 8013930:	e03f      	b.n	80139b2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	8adb      	ldrh	r3, [r3, #22]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d021      	beq.n	801397e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801393a:	4b2a      	ldr	r3, [pc, #168]	; (80139e4 <tcp_close_shutdown+0x1bc>)
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	687a      	ldr	r2, [r7, #4]
 8013940:	429a      	cmp	r2, r3
 8013942:	d105      	bne.n	8013950 <tcp_close_shutdown+0x128>
 8013944:	4b27      	ldr	r3, [pc, #156]	; (80139e4 <tcp_close_shutdown+0x1bc>)
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	68db      	ldr	r3, [r3, #12]
 801394a:	4a26      	ldr	r2, [pc, #152]	; (80139e4 <tcp_close_shutdown+0x1bc>)
 801394c:	6013      	str	r3, [r2, #0]
 801394e:	e013      	b.n	8013978 <tcp_close_shutdown+0x150>
 8013950:	4b24      	ldr	r3, [pc, #144]	; (80139e4 <tcp_close_shutdown+0x1bc>)
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	60bb      	str	r3, [r7, #8]
 8013956:	e00c      	b.n	8013972 <tcp_close_shutdown+0x14a>
 8013958:	68bb      	ldr	r3, [r7, #8]
 801395a:	68db      	ldr	r3, [r3, #12]
 801395c:	687a      	ldr	r2, [r7, #4]
 801395e:	429a      	cmp	r2, r3
 8013960:	d104      	bne.n	801396c <tcp_close_shutdown+0x144>
 8013962:	687b      	ldr	r3, [r7, #4]
 8013964:	68da      	ldr	r2, [r3, #12]
 8013966:	68bb      	ldr	r3, [r7, #8]
 8013968:	60da      	str	r2, [r3, #12]
 801396a:	e005      	b.n	8013978 <tcp_close_shutdown+0x150>
 801396c:	68bb      	ldr	r3, [r7, #8]
 801396e:	68db      	ldr	r3, [r3, #12]
 8013970:	60bb      	str	r3, [r7, #8]
 8013972:	68bb      	ldr	r3, [r7, #8]
 8013974:	2b00      	cmp	r3, #0
 8013976:	d1ef      	bne.n	8013958 <tcp_close_shutdown+0x130>
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	2200      	movs	r2, #0
 801397c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801397e:	6878      	ldr	r0, [r7, #4]
 8013980:	f7ff fea0 	bl	80136c4 <tcp_free>
      break;
 8013984:	e01a      	b.n	80139bc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8013986:	6878      	ldr	r0, [r7, #4]
 8013988:	f7ff ff14 	bl	80137b4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 801398c:	6879      	ldr	r1, [r7, #4]
 801398e:	4816      	ldr	r0, [pc, #88]	; (80139e8 <tcp_close_shutdown+0x1c0>)
 8013990:	f001 fab0 	bl	8014ef4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8013994:	6878      	ldr	r0, [r7, #4]
 8013996:	f7ff feb1 	bl	80136fc <tcp_free_listen>
      break;
 801399a:	e00f      	b.n	80139bc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 801399c:	6879      	ldr	r1, [r7, #4]
 801399e:	480e      	ldr	r0, [pc, #56]	; (80139d8 <tcp_close_shutdown+0x1b0>)
 80139a0:	f001 faa8 	bl	8014ef4 <tcp_pcb_remove>
 80139a4:	4b0d      	ldr	r3, [pc, #52]	; (80139dc <tcp_close_shutdown+0x1b4>)
 80139a6:	2201      	movs	r2, #1
 80139a8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80139aa:	6878      	ldr	r0, [r7, #4]
 80139ac:	f7ff fe8a 	bl	80136c4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80139b0:	e004      	b.n	80139bc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80139b2:	6878      	ldr	r0, [r7, #4]
 80139b4:	f000 f81a 	bl	80139ec <tcp_close_shutdown_fin>
 80139b8:	4603      	mov	r3, r0
 80139ba:	e000      	b.n	80139be <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80139bc:	2300      	movs	r3, #0
}
 80139be:	4618      	mov	r0, r3
 80139c0:	3710      	adds	r7, #16
 80139c2:	46bd      	mov	sp, r7
 80139c4:	bdb0      	pop	{r4, r5, r7, pc}
 80139c6:	bf00      	nop
 80139c8:	0801fcb4 	.word	0x0801fcb4
 80139cc:	0801fd88 	.word	0x0801fd88
 80139d0:	0801fcf8 	.word	0x0801fcf8
 80139d4:	0801fda8 	.word	0x0801fda8
 80139d8:	2000ddc8 	.word	0x2000ddc8
 80139dc:	2000ddd0 	.word	0x2000ddd0
 80139e0:	2000de08 	.word	0x2000de08
 80139e4:	2000ddc0 	.word	0x2000ddc0
 80139e8:	2000ddc4 	.word	0x2000ddc4

080139ec <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80139ec:	b580      	push	{r7, lr}
 80139ee:	b084      	sub	sp, #16
 80139f0:	af00      	add	r7, sp, #0
 80139f2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80139f4:	687b      	ldr	r3, [r7, #4]
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d106      	bne.n	8013a08 <tcp_close_shutdown_fin+0x1c>
 80139fa:	4b2e      	ldr	r3, [pc, #184]	; (8013ab4 <tcp_close_shutdown_fin+0xc8>)
 80139fc:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8013a00:	492d      	ldr	r1, [pc, #180]	; (8013ab8 <tcp_close_shutdown_fin+0xcc>)
 8013a02:	482e      	ldr	r0, [pc, #184]	; (8013abc <tcp_close_shutdown_fin+0xd0>)
 8013a04:	f009 fb56 	bl	801d0b4 <iprintf>

  switch (pcb->state) {
 8013a08:	687b      	ldr	r3, [r7, #4]
 8013a0a:	7d1b      	ldrb	r3, [r3, #20]
 8013a0c:	2b07      	cmp	r3, #7
 8013a0e:	d020      	beq.n	8013a52 <tcp_close_shutdown_fin+0x66>
 8013a10:	2b07      	cmp	r3, #7
 8013a12:	dc2b      	bgt.n	8013a6c <tcp_close_shutdown_fin+0x80>
 8013a14:	2b03      	cmp	r3, #3
 8013a16:	d002      	beq.n	8013a1e <tcp_close_shutdown_fin+0x32>
 8013a18:	2b04      	cmp	r3, #4
 8013a1a:	d00d      	beq.n	8013a38 <tcp_close_shutdown_fin+0x4c>
 8013a1c:	e026      	b.n	8013a6c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8013a1e:	6878      	ldr	r0, [r7, #4]
 8013a20:	f004 fd46 	bl	80184b0 <tcp_send_fin>
 8013a24:	4603      	mov	r3, r0
 8013a26:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013a28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a2c:	2b00      	cmp	r3, #0
 8013a2e:	d11f      	bne.n	8013a70 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	2205      	movs	r2, #5
 8013a34:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013a36:	e01b      	b.n	8013a70 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8013a38:	6878      	ldr	r0, [r7, #4]
 8013a3a:	f004 fd39 	bl	80184b0 <tcp_send_fin>
 8013a3e:	4603      	mov	r3, r0
 8013a40:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d114      	bne.n	8013a74 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	2205      	movs	r2, #5
 8013a4e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013a50:	e010      	b.n	8013a74 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8013a52:	6878      	ldr	r0, [r7, #4]
 8013a54:	f004 fd2c 	bl	80184b0 <tcp_send_fin>
 8013a58:	4603      	mov	r3, r0
 8013a5a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013a5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a60:	2b00      	cmp	r3, #0
 8013a62:	d109      	bne.n	8013a78 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	2209      	movs	r2, #9
 8013a68:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013a6a:	e005      	b.n	8013a78 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8013a6c:	2300      	movs	r3, #0
 8013a6e:	e01c      	b.n	8013aaa <tcp_close_shutdown_fin+0xbe>
      break;
 8013a70:	bf00      	nop
 8013a72:	e002      	b.n	8013a7a <tcp_close_shutdown_fin+0x8e>
      break;
 8013a74:	bf00      	nop
 8013a76:	e000      	b.n	8013a7a <tcp_close_shutdown_fin+0x8e>
      break;
 8013a78:	bf00      	nop
  }

  if (err == ERR_OK) {
 8013a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a7e:	2b00      	cmp	r3, #0
 8013a80:	d103      	bne.n	8013a8a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8013a82:	6878      	ldr	r0, [r7, #4]
 8013a84:	f004 fe52 	bl	801872c <tcp_output>
 8013a88:	e00d      	b.n	8013aa6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8013a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a92:	d108      	bne.n	8013aa6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8013a94:	687b      	ldr	r3, [r7, #4]
 8013a96:	8b5b      	ldrh	r3, [r3, #26]
 8013a98:	f043 0308 	orr.w	r3, r3, #8
 8013a9c:	b29a      	uxth	r2, r3
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8013aa2:	2300      	movs	r3, #0
 8013aa4:	e001      	b.n	8013aaa <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8013aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013aaa:	4618      	mov	r0, r3
 8013aac:	3710      	adds	r7, #16
 8013aae:	46bd      	mov	sp, r7
 8013ab0:	bd80      	pop	{r7, pc}
 8013ab2:	bf00      	nop
 8013ab4:	0801fcb4 	.word	0x0801fcb4
 8013ab8:	0801fd64 	.word	0x0801fd64
 8013abc:	0801fcf8 	.word	0x0801fcf8

08013ac0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8013ac0:	b580      	push	{r7, lr}
 8013ac2:	b082      	sub	sp, #8
 8013ac4:	af00      	add	r7, sp, #0
 8013ac6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d109      	bne.n	8013ae2 <tcp_close+0x22>
 8013ace:	4b0f      	ldr	r3, [pc, #60]	; (8013b0c <tcp_close+0x4c>)
 8013ad0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8013ad4:	490e      	ldr	r1, [pc, #56]	; (8013b10 <tcp_close+0x50>)
 8013ad6:	480f      	ldr	r0, [pc, #60]	; (8013b14 <tcp_close+0x54>)
 8013ad8:	f009 faec 	bl	801d0b4 <iprintf>
 8013adc:	f06f 030f 	mvn.w	r3, #15
 8013ae0:	e00f      	b.n	8013b02 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	7d1b      	ldrb	r3, [r3, #20]
 8013ae6:	2b01      	cmp	r3, #1
 8013ae8:	d006      	beq.n	8013af8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	8b5b      	ldrh	r3, [r3, #26]
 8013aee:	f043 0310 	orr.w	r3, r3, #16
 8013af2:	b29a      	uxth	r2, r3
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8013af8:	2101      	movs	r1, #1
 8013afa:	6878      	ldr	r0, [r7, #4]
 8013afc:	f7ff fe94 	bl	8013828 <tcp_close_shutdown>
 8013b00:	4603      	mov	r3, r0
}
 8013b02:	4618      	mov	r0, r3
 8013b04:	3708      	adds	r7, #8
 8013b06:	46bd      	mov	sp, r7
 8013b08:	bd80      	pop	{r7, pc}
 8013b0a:	bf00      	nop
 8013b0c:	0801fcb4 	.word	0x0801fcb4
 8013b10:	0801fdc4 	.word	0x0801fdc4
 8013b14:	0801fcf8 	.word	0x0801fcf8

08013b18 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8013b18:	b580      	push	{r7, lr}
 8013b1a:	b084      	sub	sp, #16
 8013b1c:	af00      	add	r7, sp, #0
 8013b1e:	60f8      	str	r0, [r7, #12]
 8013b20:	60b9      	str	r1, [r7, #8]
 8013b22:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d109      	bne.n	8013b3e <tcp_shutdown+0x26>
 8013b2a:	4b26      	ldr	r3, [pc, #152]	; (8013bc4 <tcp_shutdown+0xac>)
 8013b2c:	f240 2207 	movw	r2, #519	; 0x207
 8013b30:	4925      	ldr	r1, [pc, #148]	; (8013bc8 <tcp_shutdown+0xb0>)
 8013b32:	4826      	ldr	r0, [pc, #152]	; (8013bcc <tcp_shutdown+0xb4>)
 8013b34:	f009 fabe 	bl	801d0b4 <iprintf>
 8013b38:	f06f 030f 	mvn.w	r3, #15
 8013b3c:	e03d      	b.n	8013bba <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	7d1b      	ldrb	r3, [r3, #20]
 8013b42:	2b01      	cmp	r3, #1
 8013b44:	d102      	bne.n	8013b4c <tcp_shutdown+0x34>
    return ERR_CONN;
 8013b46:	f06f 030a 	mvn.w	r3, #10
 8013b4a:	e036      	b.n	8013bba <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8013b4c:	68bb      	ldr	r3, [r7, #8]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d01b      	beq.n	8013b8a <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	8b5b      	ldrh	r3, [r3, #26]
 8013b56:	f043 0310 	orr.w	r3, r3, #16
 8013b5a:	b29a      	uxth	r2, r3
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	2b00      	cmp	r3, #0
 8013b64:	d005      	beq.n	8013b72 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8013b66:	2101      	movs	r1, #1
 8013b68:	68f8      	ldr	r0, [r7, #12]
 8013b6a:	f7ff fe5d 	bl	8013828 <tcp_close_shutdown>
 8013b6e:	4603      	mov	r3, r0
 8013b70:	e023      	b.n	8013bba <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	d007      	beq.n	8013b8a <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013b7e:	4618      	mov	r0, r3
 8013b80:	f7ff fae4 	bl	801314c <pbuf_free>
      pcb->refused_data = NULL;
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	2200      	movs	r2, #0
 8013b88:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d013      	beq.n	8013bb8 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	7d1b      	ldrb	r3, [r3, #20]
 8013b94:	2b04      	cmp	r3, #4
 8013b96:	dc02      	bgt.n	8013b9e <tcp_shutdown+0x86>
 8013b98:	2b03      	cmp	r3, #3
 8013b9a:	da02      	bge.n	8013ba2 <tcp_shutdown+0x8a>
 8013b9c:	e009      	b.n	8013bb2 <tcp_shutdown+0x9a>
 8013b9e:	2b07      	cmp	r3, #7
 8013ba0:	d107      	bne.n	8013bb2 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8013ba2:	68bb      	ldr	r3, [r7, #8]
 8013ba4:	b2db      	uxtb	r3, r3
 8013ba6:	4619      	mov	r1, r3
 8013ba8:	68f8      	ldr	r0, [r7, #12]
 8013baa:	f7ff fe3d 	bl	8013828 <tcp_close_shutdown>
 8013bae:	4603      	mov	r3, r0
 8013bb0:	e003      	b.n	8013bba <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8013bb2:	f06f 030a 	mvn.w	r3, #10
 8013bb6:	e000      	b.n	8013bba <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8013bb8:	2300      	movs	r3, #0
}
 8013bba:	4618      	mov	r0, r3
 8013bbc:	3710      	adds	r7, #16
 8013bbe:	46bd      	mov	sp, r7
 8013bc0:	bd80      	pop	{r7, pc}
 8013bc2:	bf00      	nop
 8013bc4:	0801fcb4 	.word	0x0801fcb4
 8013bc8:	0801fddc 	.word	0x0801fddc
 8013bcc:	0801fcf8 	.word	0x0801fcf8

08013bd0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8013bd0:	b580      	push	{r7, lr}
 8013bd2:	b08e      	sub	sp, #56	; 0x38
 8013bd4:	af04      	add	r7, sp, #16
 8013bd6:	6078      	str	r0, [r7, #4]
 8013bd8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d107      	bne.n	8013bf0 <tcp_abandon+0x20>
 8013be0:	4b52      	ldr	r3, [pc, #328]	; (8013d2c <tcp_abandon+0x15c>)
 8013be2:	f240 223d 	movw	r2, #573	; 0x23d
 8013be6:	4952      	ldr	r1, [pc, #328]	; (8013d30 <tcp_abandon+0x160>)
 8013be8:	4852      	ldr	r0, [pc, #328]	; (8013d34 <tcp_abandon+0x164>)
 8013bea:	f009 fa63 	bl	801d0b4 <iprintf>
 8013bee:	e099      	b.n	8013d24 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	7d1b      	ldrb	r3, [r3, #20]
 8013bf4:	2b01      	cmp	r3, #1
 8013bf6:	d106      	bne.n	8013c06 <tcp_abandon+0x36>
 8013bf8:	4b4c      	ldr	r3, [pc, #304]	; (8013d2c <tcp_abandon+0x15c>)
 8013bfa:	f44f 7210 	mov.w	r2, #576	; 0x240
 8013bfe:	494e      	ldr	r1, [pc, #312]	; (8013d38 <tcp_abandon+0x168>)
 8013c00:	484c      	ldr	r0, [pc, #304]	; (8013d34 <tcp_abandon+0x164>)
 8013c02:	f009 fa57 	bl	801d0b4 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	7d1b      	ldrb	r3, [r3, #20]
 8013c0a:	2b0a      	cmp	r3, #10
 8013c0c:	d107      	bne.n	8013c1e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8013c0e:	6879      	ldr	r1, [r7, #4]
 8013c10:	484a      	ldr	r0, [pc, #296]	; (8013d3c <tcp_abandon+0x16c>)
 8013c12:	f001 f96f 	bl	8014ef4 <tcp_pcb_remove>
    tcp_free(pcb);
 8013c16:	6878      	ldr	r0, [r7, #4]
 8013c18:	f7ff fd54 	bl	80136c4 <tcp_free>
 8013c1c:	e082      	b.n	8013d24 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8013c1e:	2300      	movs	r3, #0
 8013c20:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8013c22:	2300      	movs	r3, #0
 8013c24:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013c2a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c30:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013c38:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8013c3a:	687b      	ldr	r3, [r7, #4]
 8013c3c:	691b      	ldr	r3, [r3, #16]
 8013c3e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8013c40:	687b      	ldr	r3, [r7, #4]
 8013c42:	7d1b      	ldrb	r3, [r3, #20]
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d126      	bne.n	8013c96 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	8adb      	ldrh	r3, [r3, #22]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d02e      	beq.n	8013cae <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8013c50:	4b3b      	ldr	r3, [pc, #236]	; (8013d40 <tcp_abandon+0x170>)
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	687a      	ldr	r2, [r7, #4]
 8013c56:	429a      	cmp	r2, r3
 8013c58:	d105      	bne.n	8013c66 <tcp_abandon+0x96>
 8013c5a:	4b39      	ldr	r3, [pc, #228]	; (8013d40 <tcp_abandon+0x170>)
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	68db      	ldr	r3, [r3, #12]
 8013c60:	4a37      	ldr	r2, [pc, #220]	; (8013d40 <tcp_abandon+0x170>)
 8013c62:	6013      	str	r3, [r2, #0]
 8013c64:	e013      	b.n	8013c8e <tcp_abandon+0xbe>
 8013c66:	4b36      	ldr	r3, [pc, #216]	; (8013d40 <tcp_abandon+0x170>)
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	61fb      	str	r3, [r7, #28]
 8013c6c:	e00c      	b.n	8013c88 <tcp_abandon+0xb8>
 8013c6e:	69fb      	ldr	r3, [r7, #28]
 8013c70:	68db      	ldr	r3, [r3, #12]
 8013c72:	687a      	ldr	r2, [r7, #4]
 8013c74:	429a      	cmp	r2, r3
 8013c76:	d104      	bne.n	8013c82 <tcp_abandon+0xb2>
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	68da      	ldr	r2, [r3, #12]
 8013c7c:	69fb      	ldr	r3, [r7, #28]
 8013c7e:	60da      	str	r2, [r3, #12]
 8013c80:	e005      	b.n	8013c8e <tcp_abandon+0xbe>
 8013c82:	69fb      	ldr	r3, [r7, #28]
 8013c84:	68db      	ldr	r3, [r3, #12]
 8013c86:	61fb      	str	r3, [r7, #28]
 8013c88:	69fb      	ldr	r3, [r7, #28]
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	d1ef      	bne.n	8013c6e <tcp_abandon+0x9e>
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	2200      	movs	r2, #0
 8013c92:	60da      	str	r2, [r3, #12]
 8013c94:	e00b      	b.n	8013cae <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8013c96:	683b      	ldr	r3, [r7, #0]
 8013c98:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	8adb      	ldrh	r3, [r3, #22]
 8013c9e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8013ca0:	6879      	ldr	r1, [r7, #4]
 8013ca2:	4828      	ldr	r0, [pc, #160]	; (8013d44 <tcp_abandon+0x174>)
 8013ca4:	f001 f926 	bl	8014ef4 <tcp_pcb_remove>
 8013ca8:	4b27      	ldr	r3, [pc, #156]	; (8013d48 <tcp_abandon+0x178>)
 8013caa:	2201      	movs	r2, #1
 8013cac:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d004      	beq.n	8013cc0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013cba:	4618      	mov	r0, r3
 8013cbc:	f000 fdfa 	bl	80148b4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d004      	beq.n	8013cd2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013ccc:	4618      	mov	r0, r3
 8013cce:	f000 fdf1 	bl	80148b4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013cd6:	2b00      	cmp	r3, #0
 8013cd8:	d004      	beq.n	8013ce4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013cde:	4618      	mov	r0, r3
 8013ce0:	f000 fde8 	bl	80148b4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8013ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d00e      	beq.n	8013d08 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8013cea:	6879      	ldr	r1, [r7, #4]
 8013cec:	687b      	ldr	r3, [r7, #4]
 8013cee:	3304      	adds	r3, #4
 8013cf0:	687a      	ldr	r2, [r7, #4]
 8013cf2:	8b12      	ldrh	r2, [r2, #24]
 8013cf4:	9202      	str	r2, [sp, #8]
 8013cf6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013cf8:	9201      	str	r2, [sp, #4]
 8013cfa:	9300      	str	r3, [sp, #0]
 8013cfc:	460b      	mov	r3, r1
 8013cfe:	697a      	ldr	r2, [r7, #20]
 8013d00:	69b9      	ldr	r1, [r7, #24]
 8013d02:	6878      	ldr	r0, [r7, #4]
 8013d04:	f005 fac6 	bl	8019294 <tcp_rst>
    }
    last_state = pcb->state;
 8013d08:	687b      	ldr	r3, [r7, #4]
 8013d0a:	7d1b      	ldrb	r3, [r3, #20]
 8013d0c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8013d0e:	6878      	ldr	r0, [r7, #4]
 8013d10:	f7ff fcd8 	bl	80136c4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8013d14:	693b      	ldr	r3, [r7, #16]
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d004      	beq.n	8013d24 <tcp_abandon+0x154>
 8013d1a:	693b      	ldr	r3, [r7, #16]
 8013d1c:	f06f 010c 	mvn.w	r1, #12
 8013d20:	68f8      	ldr	r0, [r7, #12]
 8013d22:	4798      	blx	r3
  }
}
 8013d24:	3728      	adds	r7, #40	; 0x28
 8013d26:	46bd      	mov	sp, r7
 8013d28:	bd80      	pop	{r7, pc}
 8013d2a:	bf00      	nop
 8013d2c:	0801fcb4 	.word	0x0801fcb4
 8013d30:	0801fdf8 	.word	0x0801fdf8
 8013d34:	0801fcf8 	.word	0x0801fcf8
 8013d38:	0801fe14 	.word	0x0801fe14
 8013d3c:	2000ddcc 	.word	0x2000ddcc
 8013d40:	2000ddc0 	.word	0x2000ddc0
 8013d44:	2000ddc8 	.word	0x2000ddc8
 8013d48:	2000ddd0 	.word	0x2000ddd0

08013d4c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8013d4c:	b580      	push	{r7, lr}
 8013d4e:	b082      	sub	sp, #8
 8013d50:	af00      	add	r7, sp, #0
 8013d52:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8013d54:	2101      	movs	r1, #1
 8013d56:	6878      	ldr	r0, [r7, #4]
 8013d58:	f7ff ff3a 	bl	8013bd0 <tcp_abandon>
}
 8013d5c:	bf00      	nop
 8013d5e:	3708      	adds	r7, #8
 8013d60:	46bd      	mov	sp, r7
 8013d62:	bd80      	pop	{r7, pc}

08013d64 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013d64:	b580      	push	{r7, lr}
 8013d66:	b088      	sub	sp, #32
 8013d68:	af00      	add	r7, sp, #0
 8013d6a:	60f8      	str	r0, [r7, #12]
 8013d6c:	60b9      	str	r1, [r7, #8]
 8013d6e:	4613      	mov	r3, r2
 8013d70:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8013d72:	2304      	movs	r3, #4
 8013d74:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013d76:	68bb      	ldr	r3, [r7, #8]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d101      	bne.n	8013d80 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8013d7c:	4b3e      	ldr	r3, [pc, #248]	; (8013e78 <tcp_bind+0x114>)
 8013d7e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d109      	bne.n	8013d9a <tcp_bind+0x36>
 8013d86:	4b3d      	ldr	r3, [pc, #244]	; (8013e7c <tcp_bind+0x118>)
 8013d88:	f240 22a9 	movw	r2, #681	; 0x2a9
 8013d8c:	493c      	ldr	r1, [pc, #240]	; (8013e80 <tcp_bind+0x11c>)
 8013d8e:	483d      	ldr	r0, [pc, #244]	; (8013e84 <tcp_bind+0x120>)
 8013d90:	f009 f990 	bl	801d0b4 <iprintf>
 8013d94:	f06f 030f 	mvn.w	r3, #15
 8013d98:	e06a      	b.n	8013e70 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8013d9a:	68fb      	ldr	r3, [r7, #12]
 8013d9c:	7d1b      	ldrb	r3, [r3, #20]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d009      	beq.n	8013db6 <tcp_bind+0x52>
 8013da2:	4b36      	ldr	r3, [pc, #216]	; (8013e7c <tcp_bind+0x118>)
 8013da4:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013da8:	4937      	ldr	r1, [pc, #220]	; (8013e88 <tcp_bind+0x124>)
 8013daa:	4836      	ldr	r0, [pc, #216]	; (8013e84 <tcp_bind+0x120>)
 8013dac:	f009 f982 	bl	801d0b4 <iprintf>
 8013db0:	f06f 0305 	mvn.w	r3, #5
 8013db4:	e05c      	b.n	8013e70 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8013db6:	88fb      	ldrh	r3, [r7, #6]
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d109      	bne.n	8013dd0 <tcp_bind+0x6c>
    port = tcp_new_port();
 8013dbc:	f000 f914 	bl	8013fe8 <tcp_new_port>
 8013dc0:	4603      	mov	r3, r0
 8013dc2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013dc4:	88fb      	ldrh	r3, [r7, #6]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d135      	bne.n	8013e36 <tcp_bind+0xd2>
      return ERR_BUF;
 8013dca:	f06f 0301 	mvn.w	r3, #1
 8013dce:	e04f      	b.n	8013e70 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8013dd0:	2300      	movs	r3, #0
 8013dd2:	61fb      	str	r3, [r7, #28]
 8013dd4:	e02b      	b.n	8013e2e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8013dd6:	4a2d      	ldr	r2, [pc, #180]	; (8013e8c <tcp_bind+0x128>)
 8013dd8:	69fb      	ldr	r3, [r7, #28]
 8013dda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	61bb      	str	r3, [r7, #24]
 8013de2:	e01e      	b.n	8013e22 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8013de4:	69bb      	ldr	r3, [r7, #24]
 8013de6:	8adb      	ldrh	r3, [r3, #22]
 8013de8:	88fa      	ldrh	r2, [r7, #6]
 8013dea:	429a      	cmp	r2, r3
 8013dec:	d116      	bne.n	8013e1c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8013dee:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d010      	beq.n	8013e16 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8013df4:	69bb      	ldr	r3, [r7, #24]
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d00c      	beq.n	8013e16 <tcp_bind+0xb2>
 8013dfc:	68bb      	ldr	r3, [r7, #8]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d009      	beq.n	8013e16 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8013e02:	68bb      	ldr	r3, [r7, #8]
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d005      	beq.n	8013e16 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8013e0a:	69bb      	ldr	r3, [r7, #24]
 8013e0c:	681a      	ldr	r2, [r3, #0]
 8013e0e:	68bb      	ldr	r3, [r7, #8]
 8013e10:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8013e12:	429a      	cmp	r2, r3
 8013e14:	d102      	bne.n	8013e1c <tcp_bind+0xb8>
              return ERR_USE;
 8013e16:	f06f 0307 	mvn.w	r3, #7
 8013e1a:	e029      	b.n	8013e70 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8013e1c:	69bb      	ldr	r3, [r7, #24]
 8013e1e:	68db      	ldr	r3, [r3, #12]
 8013e20:	61bb      	str	r3, [r7, #24]
 8013e22:	69bb      	ldr	r3, [r7, #24]
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d1dd      	bne.n	8013de4 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8013e28:	69fb      	ldr	r3, [r7, #28]
 8013e2a:	3301      	adds	r3, #1
 8013e2c:	61fb      	str	r3, [r7, #28]
 8013e2e:	69fa      	ldr	r2, [r7, #28]
 8013e30:	697b      	ldr	r3, [r7, #20]
 8013e32:	429a      	cmp	r2, r3
 8013e34:	dbcf      	blt.n	8013dd6 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8013e36:	68bb      	ldr	r3, [r7, #8]
 8013e38:	2b00      	cmp	r3, #0
 8013e3a:	d00c      	beq.n	8013e56 <tcp_bind+0xf2>
 8013e3c:	68bb      	ldr	r3, [r7, #8]
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	2b00      	cmp	r3, #0
 8013e42:	d008      	beq.n	8013e56 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8013e44:	68bb      	ldr	r3, [r7, #8]
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d002      	beq.n	8013e50 <tcp_bind+0xec>
 8013e4a:	68bb      	ldr	r3, [r7, #8]
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	e000      	b.n	8013e52 <tcp_bind+0xee>
 8013e50:	2300      	movs	r3, #0
 8013e52:	68fa      	ldr	r2, [r7, #12]
 8013e54:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8013e56:	68fb      	ldr	r3, [r7, #12]
 8013e58:	88fa      	ldrh	r2, [r7, #6]
 8013e5a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8013e5c:	4b0c      	ldr	r3, [pc, #48]	; (8013e90 <tcp_bind+0x12c>)
 8013e5e:	681a      	ldr	r2, [r3, #0]
 8013e60:	68fb      	ldr	r3, [r7, #12]
 8013e62:	60da      	str	r2, [r3, #12]
 8013e64:	4a0a      	ldr	r2, [pc, #40]	; (8013e90 <tcp_bind+0x12c>)
 8013e66:	68fb      	ldr	r3, [r7, #12]
 8013e68:	6013      	str	r3, [r2, #0]
 8013e6a:	f005 fbd5 	bl	8019618 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8013e6e:	2300      	movs	r3, #0
}
 8013e70:	4618      	mov	r0, r3
 8013e72:	3720      	adds	r7, #32
 8013e74:	46bd      	mov	sp, r7
 8013e76:	bd80      	pop	{r7, pc}
 8013e78:	08021cfc 	.word	0x08021cfc
 8013e7c:	0801fcb4 	.word	0x0801fcb4
 8013e80:	0801fe48 	.word	0x0801fe48
 8013e84:	0801fcf8 	.word	0x0801fcf8
 8013e88:	0801fe60 	.word	0x0801fe60
 8013e8c:	08021cd4 	.word	0x08021cd4
 8013e90:	2000ddc0 	.word	0x2000ddc0

08013e94 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8013e94:	b580      	push	{r7, lr}
 8013e96:	b084      	sub	sp, #16
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8013e9c:	687b      	ldr	r3, [r7, #4]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d106      	bne.n	8013eb0 <tcp_update_rcv_ann_wnd+0x1c>
 8013ea2:	4b25      	ldr	r3, [pc, #148]	; (8013f38 <tcp_update_rcv_ann_wnd+0xa4>)
 8013ea4:	f240 32a6 	movw	r2, #934	; 0x3a6
 8013ea8:	4924      	ldr	r1, [pc, #144]	; (8013f3c <tcp_update_rcv_ann_wnd+0xa8>)
 8013eaa:	4825      	ldr	r0, [pc, #148]	; (8013f40 <tcp_update_rcv_ann_wnd+0xac>)
 8013eac:	f009 f902 	bl	801d0b4 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013eb4:	687a      	ldr	r2, [r7, #4]
 8013eb6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8013eb8:	4413      	add	r3, r2
 8013eba:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8013ebc:	687b      	ldr	r3, [r7, #4]
 8013ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ec0:	687a      	ldr	r2, [r7, #4]
 8013ec2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8013ec4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8013ec8:	bf28      	it	cs
 8013eca:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8013ece:	b292      	uxth	r2, r2
 8013ed0:	4413      	add	r3, r2
 8013ed2:	68fa      	ldr	r2, [r7, #12]
 8013ed4:	1ad3      	subs	r3, r2, r3
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	db08      	blt.n	8013eec <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ee6:	68fa      	ldr	r2, [r7, #12]
 8013ee8:	1ad3      	subs	r3, r2, r3
 8013eea:	e020      	b.n	8013f2e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013ef4:	1ad3      	subs	r3, r2, r3
 8013ef6:	2b00      	cmp	r3, #0
 8013ef8:	dd03      	ble.n	8013f02 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	2200      	movs	r2, #0
 8013efe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8013f00:	e014      	b.n	8013f2c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8013f02:	687b      	ldr	r3, [r7, #4]
 8013f04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013f0a:	1ad3      	subs	r3, r2, r3
 8013f0c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8013f0e:	68bb      	ldr	r3, [r7, #8]
 8013f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013f14:	d306      	bcc.n	8013f24 <tcp_update_rcv_ann_wnd+0x90>
 8013f16:	4b08      	ldr	r3, [pc, #32]	; (8013f38 <tcp_update_rcv_ann_wnd+0xa4>)
 8013f18:	f240 32b6 	movw	r2, #950	; 0x3b6
 8013f1c:	4909      	ldr	r1, [pc, #36]	; (8013f44 <tcp_update_rcv_ann_wnd+0xb0>)
 8013f1e:	4808      	ldr	r0, [pc, #32]	; (8013f40 <tcp_update_rcv_ann_wnd+0xac>)
 8013f20:	f009 f8c8 	bl	801d0b4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8013f24:	68bb      	ldr	r3, [r7, #8]
 8013f26:	b29a      	uxth	r2, r3
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8013f2c:	2300      	movs	r3, #0
  }
}
 8013f2e:	4618      	mov	r0, r3
 8013f30:	3710      	adds	r7, #16
 8013f32:	46bd      	mov	sp, r7
 8013f34:	bd80      	pop	{r7, pc}
 8013f36:	bf00      	nop
 8013f38:	0801fcb4 	.word	0x0801fcb4
 8013f3c:	0801ff10 	.word	0x0801ff10
 8013f40:	0801fcf8 	.word	0x0801fcf8
 8013f44:	0801ff34 	.word	0x0801ff34

08013f48 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8013f48:	b580      	push	{r7, lr}
 8013f4a:	b084      	sub	sp, #16
 8013f4c:	af00      	add	r7, sp, #0
 8013f4e:	6078      	str	r0, [r7, #4]
 8013f50:	460b      	mov	r3, r1
 8013f52:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d107      	bne.n	8013f6a <tcp_recved+0x22>
 8013f5a:	4b1f      	ldr	r3, [pc, #124]	; (8013fd8 <tcp_recved+0x90>)
 8013f5c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8013f60:	491e      	ldr	r1, [pc, #120]	; (8013fdc <tcp_recved+0x94>)
 8013f62:	481f      	ldr	r0, [pc, #124]	; (8013fe0 <tcp_recved+0x98>)
 8013f64:	f009 f8a6 	bl	801d0b4 <iprintf>
 8013f68:	e032      	b.n	8013fd0 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	7d1b      	ldrb	r3, [r3, #20]
 8013f6e:	2b01      	cmp	r3, #1
 8013f70:	d106      	bne.n	8013f80 <tcp_recved+0x38>
 8013f72:	4b19      	ldr	r3, [pc, #100]	; (8013fd8 <tcp_recved+0x90>)
 8013f74:	f240 32d2 	movw	r2, #978	; 0x3d2
 8013f78:	491a      	ldr	r1, [pc, #104]	; (8013fe4 <tcp_recved+0x9c>)
 8013f7a:	4819      	ldr	r0, [pc, #100]	; (8013fe0 <tcp_recved+0x98>)
 8013f7c:	f009 f89a 	bl	801d0b4 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013f84:	887b      	ldrh	r3, [r7, #2]
 8013f86:	4413      	add	r3, r2
 8013f88:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8013f8a:	89fb      	ldrh	r3, [r7, #14]
 8013f8c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013f90:	d804      	bhi.n	8013f9c <tcp_recved+0x54>
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013f96:	89fa      	ldrh	r2, [r7, #14]
 8013f98:	429a      	cmp	r2, r3
 8013f9a:	d204      	bcs.n	8013fa6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8013fa2:	851a      	strh	r2, [r3, #40]	; 0x28
 8013fa4:	e002      	b.n	8013fac <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	89fa      	ldrh	r2, [r7, #14]
 8013faa:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8013fac:	6878      	ldr	r0, [r7, #4]
 8013fae:	f7ff ff71 	bl	8013e94 <tcp_update_rcv_ann_wnd>
 8013fb2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8013fb4:	68bb      	ldr	r3, [r7, #8]
 8013fb6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8013fba:	d309      	bcc.n	8013fd0 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	8b5b      	ldrh	r3, [r3, #26]
 8013fc0:	f043 0302 	orr.w	r3, r3, #2
 8013fc4:	b29a      	uxth	r2, r3
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8013fca:	6878      	ldr	r0, [r7, #4]
 8013fcc:	f004 fbae 	bl	801872c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8013fd0:	3710      	adds	r7, #16
 8013fd2:	46bd      	mov	sp, r7
 8013fd4:	bd80      	pop	{r7, pc}
 8013fd6:	bf00      	nop
 8013fd8:	0801fcb4 	.word	0x0801fcb4
 8013fdc:	0801ff50 	.word	0x0801ff50
 8013fe0:	0801fcf8 	.word	0x0801fcf8
 8013fe4:	0801ff68 	.word	0x0801ff68

08013fe8 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8013fe8:	b480      	push	{r7}
 8013fea:	b083      	sub	sp, #12
 8013fec:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8013fee:	2300      	movs	r3, #0
 8013ff0:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8013ff2:	4b1e      	ldr	r3, [pc, #120]	; (801406c <tcp_new_port+0x84>)
 8013ff4:	881b      	ldrh	r3, [r3, #0]
 8013ff6:	3301      	adds	r3, #1
 8013ff8:	b29a      	uxth	r2, r3
 8013ffa:	4b1c      	ldr	r3, [pc, #112]	; (801406c <tcp_new_port+0x84>)
 8013ffc:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8013ffe:	4b1b      	ldr	r3, [pc, #108]	; (801406c <tcp_new_port+0x84>)
 8014000:	881b      	ldrh	r3, [r3, #0]
 8014002:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014006:	4293      	cmp	r3, r2
 8014008:	d103      	bne.n	8014012 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801400a:	4b18      	ldr	r3, [pc, #96]	; (801406c <tcp_new_port+0x84>)
 801400c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8014010:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8014012:	2300      	movs	r3, #0
 8014014:	71fb      	strb	r3, [r7, #7]
 8014016:	e01e      	b.n	8014056 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8014018:	79fb      	ldrb	r3, [r7, #7]
 801401a:	4a15      	ldr	r2, [pc, #84]	; (8014070 <tcp_new_port+0x88>)
 801401c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014020:	681b      	ldr	r3, [r3, #0]
 8014022:	603b      	str	r3, [r7, #0]
 8014024:	e011      	b.n	801404a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8014026:	683b      	ldr	r3, [r7, #0]
 8014028:	8ada      	ldrh	r2, [r3, #22]
 801402a:	4b10      	ldr	r3, [pc, #64]	; (801406c <tcp_new_port+0x84>)
 801402c:	881b      	ldrh	r3, [r3, #0]
 801402e:	429a      	cmp	r2, r3
 8014030:	d108      	bne.n	8014044 <tcp_new_port+0x5c>
        n++;
 8014032:	88bb      	ldrh	r3, [r7, #4]
 8014034:	3301      	adds	r3, #1
 8014036:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8014038:	88bb      	ldrh	r3, [r7, #4]
 801403a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801403e:	d3d8      	bcc.n	8013ff2 <tcp_new_port+0xa>
          return 0;
 8014040:	2300      	movs	r3, #0
 8014042:	e00d      	b.n	8014060 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8014044:	683b      	ldr	r3, [r7, #0]
 8014046:	68db      	ldr	r3, [r3, #12]
 8014048:	603b      	str	r3, [r7, #0]
 801404a:	683b      	ldr	r3, [r7, #0]
 801404c:	2b00      	cmp	r3, #0
 801404e:	d1ea      	bne.n	8014026 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8014050:	79fb      	ldrb	r3, [r7, #7]
 8014052:	3301      	adds	r3, #1
 8014054:	71fb      	strb	r3, [r7, #7]
 8014056:	79fb      	ldrb	r3, [r7, #7]
 8014058:	2b03      	cmp	r3, #3
 801405a:	d9dd      	bls.n	8014018 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801405c:	4b03      	ldr	r3, [pc, #12]	; (801406c <tcp_new_port+0x84>)
 801405e:	881b      	ldrh	r3, [r3, #0]
}
 8014060:	4618      	mov	r0, r3
 8014062:	370c      	adds	r7, #12
 8014064:	46bd      	mov	sp, r7
 8014066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801406a:	4770      	bx	lr
 801406c:	200002ec 	.word	0x200002ec
 8014070:	08021cd4 	.word	0x08021cd4

08014074 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8014074:	b5b0      	push	{r4, r5, r7, lr}
 8014076:	b090      	sub	sp, #64	; 0x40
 8014078:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801407a:	2300      	movs	r3, #0
 801407c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8014080:	4b94      	ldr	r3, [pc, #592]	; (80142d4 <tcp_slowtmr+0x260>)
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	3301      	adds	r3, #1
 8014086:	4a93      	ldr	r2, [pc, #588]	; (80142d4 <tcp_slowtmr+0x260>)
 8014088:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801408a:	4b93      	ldr	r3, [pc, #588]	; (80142d8 <tcp_slowtmr+0x264>)
 801408c:	781b      	ldrb	r3, [r3, #0]
 801408e:	3301      	adds	r3, #1
 8014090:	b2da      	uxtb	r2, r3
 8014092:	4b91      	ldr	r3, [pc, #580]	; (80142d8 <tcp_slowtmr+0x264>)
 8014094:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8014096:	2300      	movs	r3, #0
 8014098:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801409a:	4b90      	ldr	r3, [pc, #576]	; (80142dc <tcp_slowtmr+0x268>)
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80140a0:	e29f      	b.n	80145e2 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80140a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140a4:	7d1b      	ldrb	r3, [r3, #20]
 80140a6:	2b00      	cmp	r3, #0
 80140a8:	d106      	bne.n	80140b8 <tcp_slowtmr+0x44>
 80140aa:	4b8d      	ldr	r3, [pc, #564]	; (80142e0 <tcp_slowtmr+0x26c>)
 80140ac:	f240 42be 	movw	r2, #1214	; 0x4be
 80140b0:	498c      	ldr	r1, [pc, #560]	; (80142e4 <tcp_slowtmr+0x270>)
 80140b2:	488d      	ldr	r0, [pc, #564]	; (80142e8 <tcp_slowtmr+0x274>)
 80140b4:	f008 fffe 	bl	801d0b4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80140b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140ba:	7d1b      	ldrb	r3, [r3, #20]
 80140bc:	2b01      	cmp	r3, #1
 80140be:	d106      	bne.n	80140ce <tcp_slowtmr+0x5a>
 80140c0:	4b87      	ldr	r3, [pc, #540]	; (80142e0 <tcp_slowtmr+0x26c>)
 80140c2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80140c6:	4989      	ldr	r1, [pc, #548]	; (80142ec <tcp_slowtmr+0x278>)
 80140c8:	4887      	ldr	r0, [pc, #540]	; (80142e8 <tcp_slowtmr+0x274>)
 80140ca:	f008 fff3 	bl	801d0b4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80140ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140d0:	7d1b      	ldrb	r3, [r3, #20]
 80140d2:	2b0a      	cmp	r3, #10
 80140d4:	d106      	bne.n	80140e4 <tcp_slowtmr+0x70>
 80140d6:	4b82      	ldr	r3, [pc, #520]	; (80142e0 <tcp_slowtmr+0x26c>)
 80140d8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80140dc:	4984      	ldr	r1, [pc, #528]	; (80142f0 <tcp_slowtmr+0x27c>)
 80140de:	4882      	ldr	r0, [pc, #520]	; (80142e8 <tcp_slowtmr+0x274>)
 80140e0:	f008 ffe8 	bl	801d0b4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80140e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140e6:	7f9a      	ldrb	r2, [r3, #30]
 80140e8:	4b7b      	ldr	r3, [pc, #492]	; (80142d8 <tcp_slowtmr+0x264>)
 80140ea:	781b      	ldrb	r3, [r3, #0]
 80140ec:	429a      	cmp	r2, r3
 80140ee:	d105      	bne.n	80140fc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80140f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140f2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80140f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140f6:	68db      	ldr	r3, [r3, #12]
 80140f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80140fa:	e272      	b.n	80145e2 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 80140fc:	4b76      	ldr	r3, [pc, #472]	; (80142d8 <tcp_slowtmr+0x264>)
 80140fe:	781a      	ldrb	r2, [r3, #0]
 8014100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014102:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8014104:	2300      	movs	r3, #0
 8014106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 801410a:	2300      	movs	r3, #0
 801410c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8014110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014112:	7d1b      	ldrb	r3, [r3, #20]
 8014114:	2b02      	cmp	r3, #2
 8014116:	d10a      	bne.n	801412e <tcp_slowtmr+0xba>
 8014118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801411a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801411e:	2b05      	cmp	r3, #5
 8014120:	d905      	bls.n	801412e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8014122:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014126:	3301      	adds	r3, #1
 8014128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801412c:	e11e      	b.n	801436c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801412e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014130:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014134:	2b0b      	cmp	r3, #11
 8014136:	d905      	bls.n	8014144 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8014138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801413c:	3301      	adds	r3, #1
 801413e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014142:	e113      	b.n	801436c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8014144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014146:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801414a:	2b00      	cmp	r3, #0
 801414c:	d075      	beq.n	801423a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801414e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014152:	2b00      	cmp	r3, #0
 8014154:	d006      	beq.n	8014164 <tcp_slowtmr+0xf0>
 8014156:	4b62      	ldr	r3, [pc, #392]	; (80142e0 <tcp_slowtmr+0x26c>)
 8014158:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801415c:	4965      	ldr	r1, [pc, #404]	; (80142f4 <tcp_slowtmr+0x280>)
 801415e:	4862      	ldr	r0, [pc, #392]	; (80142e8 <tcp_slowtmr+0x274>)
 8014160:	f008 ffa8 	bl	801d0b4 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8014164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014168:	2b00      	cmp	r3, #0
 801416a:	d106      	bne.n	801417a <tcp_slowtmr+0x106>
 801416c:	4b5c      	ldr	r3, [pc, #368]	; (80142e0 <tcp_slowtmr+0x26c>)
 801416e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8014172:	4961      	ldr	r1, [pc, #388]	; (80142f8 <tcp_slowtmr+0x284>)
 8014174:	485c      	ldr	r0, [pc, #368]	; (80142e8 <tcp_slowtmr+0x274>)
 8014176:	f008 ff9d 	bl	801d0b4 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801417a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801417c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014180:	2b0b      	cmp	r3, #11
 8014182:	d905      	bls.n	8014190 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8014184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014188:	3301      	adds	r3, #1
 801418a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801418e:	e0ed      	b.n	801436c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8014190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014192:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014196:	3b01      	subs	r3, #1
 8014198:	4a58      	ldr	r2, [pc, #352]	; (80142fc <tcp_slowtmr+0x288>)
 801419a:	5cd3      	ldrb	r3, [r2, r3]
 801419c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801419e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141a0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80141a4:	7c7a      	ldrb	r2, [r7, #17]
 80141a6:	429a      	cmp	r2, r3
 80141a8:	d907      	bls.n	80141ba <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80141aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80141b0:	3301      	adds	r3, #1
 80141b2:	b2da      	uxtb	r2, r3
 80141b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141b6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80141ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141bc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80141c0:	7c7a      	ldrb	r2, [r7, #17]
 80141c2:	429a      	cmp	r2, r3
 80141c4:	f200 80d2 	bhi.w	801436c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80141c8:	2301      	movs	r3, #1
 80141ca:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80141cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	d108      	bne.n	80141e8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80141d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80141d8:	f005 f950 	bl	801947c <tcp_zero_window_probe>
 80141dc:	4603      	mov	r3, r0
 80141de:	2b00      	cmp	r3, #0
 80141e0:	d014      	beq.n	801420c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80141e2:	2300      	movs	r3, #0
 80141e4:	623b      	str	r3, [r7, #32]
 80141e6:	e011      	b.n	801420c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80141e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80141ee:	4619      	mov	r1, r3
 80141f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80141f2:	f004 f815 	bl	8018220 <tcp_split_unsent_seg>
 80141f6:	4603      	mov	r3, r0
 80141f8:	2b00      	cmp	r3, #0
 80141fa:	d107      	bne.n	801420c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 80141fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80141fe:	f004 fa95 	bl	801872c <tcp_output>
 8014202:	4603      	mov	r3, r0
 8014204:	2b00      	cmp	r3, #0
 8014206:	d101      	bne.n	801420c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8014208:	2300      	movs	r3, #0
 801420a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 801420c:	6a3b      	ldr	r3, [r7, #32]
 801420e:	2b00      	cmp	r3, #0
 8014210:	f000 80ac 	beq.w	801436c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8014214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014216:	2200      	movs	r2, #0
 8014218:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801421c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801421e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014222:	2b06      	cmp	r3, #6
 8014224:	f200 80a2 	bhi.w	801436c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8014228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801422a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801422e:	3301      	adds	r3, #1
 8014230:	b2da      	uxtb	r2, r3
 8014232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014234:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8014238:	e098      	b.n	801436c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801423a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801423c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014240:	2b00      	cmp	r3, #0
 8014242:	db0f      	blt.n	8014264 <tcp_slowtmr+0x1f0>
 8014244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014246:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801424a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801424e:	4293      	cmp	r3, r2
 8014250:	d008      	beq.n	8014264 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8014252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014254:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014258:	b29b      	uxth	r3, r3
 801425a:	3301      	adds	r3, #1
 801425c:	b29b      	uxth	r3, r3
 801425e:	b21a      	sxth	r2, r3
 8014260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014262:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8014264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014266:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801426a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801426c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8014270:	429a      	cmp	r2, r3
 8014272:	db7b      	blt.n	801436c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8014274:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014276:	f004 fd4b 	bl	8018d10 <tcp_rexmit_rto_prepare>
 801427a:	4603      	mov	r3, r0
 801427c:	2b00      	cmp	r3, #0
 801427e:	d007      	beq.n	8014290 <tcp_slowtmr+0x21c>
 8014280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014284:	2b00      	cmp	r3, #0
 8014286:	d171      	bne.n	801436c <tcp_slowtmr+0x2f8>
 8014288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801428a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801428c:	2b00      	cmp	r3, #0
 801428e:	d06d      	beq.n	801436c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8014290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014292:	7d1b      	ldrb	r3, [r3, #20]
 8014294:	2b02      	cmp	r3, #2
 8014296:	d03a      	beq.n	801430e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8014298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801429a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801429e:	2b0c      	cmp	r3, #12
 80142a0:	bf28      	it	cs
 80142a2:	230c      	movcs	r3, #12
 80142a4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80142a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80142ac:	10db      	asrs	r3, r3, #3
 80142ae:	b21b      	sxth	r3, r3
 80142b0:	461a      	mov	r2, r3
 80142b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142b4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80142b8:	4413      	add	r3, r2
 80142ba:	7efa      	ldrb	r2, [r7, #27]
 80142bc:	4910      	ldr	r1, [pc, #64]	; (8014300 <tcp_slowtmr+0x28c>)
 80142be:	5c8a      	ldrb	r2, [r1, r2]
 80142c0:	4093      	lsls	r3, r2
 80142c2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80142c4:	697b      	ldr	r3, [r7, #20]
 80142c6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80142ca:	4293      	cmp	r3, r2
 80142cc:	dc1a      	bgt.n	8014304 <tcp_slowtmr+0x290>
 80142ce:	697b      	ldr	r3, [r7, #20]
 80142d0:	b21a      	sxth	r2, r3
 80142d2:	e019      	b.n	8014308 <tcp_slowtmr+0x294>
 80142d4:	2000ddbc 	.word	0x2000ddbc
 80142d8:	2000ddd2 	.word	0x2000ddd2
 80142dc:	2000ddc8 	.word	0x2000ddc8
 80142e0:	0801fcb4 	.word	0x0801fcb4
 80142e4:	0801fff8 	.word	0x0801fff8
 80142e8:	0801fcf8 	.word	0x0801fcf8
 80142ec:	08020024 	.word	0x08020024
 80142f0:	08020050 	.word	0x08020050
 80142f4:	08020080 	.word	0x08020080
 80142f8:	080200b4 	.word	0x080200b4
 80142fc:	08021ccc 	.word	0x08021ccc
 8014300:	08021cbc 	.word	0x08021cbc
 8014304:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8014308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801430a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801430e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014310:	2200      	movs	r2, #0
 8014312:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8014314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014316:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801431a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801431c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014320:	4293      	cmp	r3, r2
 8014322:	bf28      	it	cs
 8014324:	4613      	movcs	r3, r2
 8014326:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8014328:	8a7b      	ldrh	r3, [r7, #18]
 801432a:	085b      	lsrs	r3, r3, #1
 801432c:	b29a      	uxth	r2, r3
 801432e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014330:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8014334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014336:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801433a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801433c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801433e:	005b      	lsls	r3, r3, #1
 8014340:	b29b      	uxth	r3, r3
 8014342:	429a      	cmp	r2, r3
 8014344:	d206      	bcs.n	8014354 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8014346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014348:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801434a:	005b      	lsls	r3, r3, #1
 801434c:	b29a      	uxth	r2, r3
 801434e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014350:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8014354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014356:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8014358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801435a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801435e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014360:	2200      	movs	r2, #0
 8014362:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8014366:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014368:	f004 fd42 	bl	8018df0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801436c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801436e:	7d1b      	ldrb	r3, [r3, #20]
 8014370:	2b06      	cmp	r3, #6
 8014372:	d111      	bne.n	8014398 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8014374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014376:	8b5b      	ldrh	r3, [r3, #26]
 8014378:	f003 0310 	and.w	r3, r3, #16
 801437c:	2b00      	cmp	r3, #0
 801437e:	d00b      	beq.n	8014398 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014380:	4b9d      	ldr	r3, [pc, #628]	; (80145f8 <tcp_slowtmr+0x584>)
 8014382:	681a      	ldr	r2, [r3, #0]
 8014384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014386:	6a1b      	ldr	r3, [r3, #32]
 8014388:	1ad3      	subs	r3, r2, r3
 801438a:	2b28      	cmp	r3, #40	; 0x28
 801438c:	d904      	bls.n	8014398 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801438e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014392:	3301      	adds	r3, #1
 8014394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8014398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801439a:	7a5b      	ldrb	r3, [r3, #9]
 801439c:	f003 0308 	and.w	r3, r3, #8
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d04c      	beq.n	801443e <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 80143a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143a6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80143a8:	2b04      	cmp	r3, #4
 80143aa:	d003      	beq.n	80143b4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80143ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143ae:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80143b0:	2b07      	cmp	r3, #7
 80143b2:	d144      	bne.n	801443e <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80143b4:	4b90      	ldr	r3, [pc, #576]	; (80145f8 <tcp_slowtmr+0x584>)
 80143b6:	681a      	ldr	r2, [r3, #0]
 80143b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143ba:	6a1b      	ldr	r3, [r3, #32]
 80143bc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80143be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80143c4:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 80143c8:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 80143cc:	498b      	ldr	r1, [pc, #556]	; (80145fc <tcp_slowtmr+0x588>)
 80143ce:	fba1 1303 	umull	r1, r3, r1, r3
 80143d2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80143d4:	429a      	cmp	r2, r3
 80143d6:	d90a      	bls.n	80143ee <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80143d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80143dc:	3301      	adds	r3, #1
 80143de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80143e2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80143e6:	3301      	adds	r3, #1
 80143e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80143ec:	e027      	b.n	801443e <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80143ee:	4b82      	ldr	r3, [pc, #520]	; (80145f8 <tcp_slowtmr+0x584>)
 80143f0:	681a      	ldr	r2, [r3, #0]
 80143f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143f4:	6a1b      	ldr	r3, [r3, #32]
 80143f6:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80143f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143fa:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80143fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014400:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8014404:	4618      	mov	r0, r3
 8014406:	4b7e      	ldr	r3, [pc, #504]	; (8014600 <tcp_slowtmr+0x58c>)
 8014408:	fb00 f303 	mul.w	r3, r0, r3
 801440c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801440e:	497b      	ldr	r1, [pc, #492]	; (80145fc <tcp_slowtmr+0x588>)
 8014410:	fba1 1303 	umull	r1, r3, r1, r3
 8014414:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014416:	429a      	cmp	r2, r3
 8014418:	d911      	bls.n	801443e <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 801441a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801441c:	f004 ffee 	bl	80193fc <tcp_keepalive>
 8014420:	4603      	mov	r3, r0
 8014422:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8014426:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801442a:	2b00      	cmp	r3, #0
 801442c:	d107      	bne.n	801443e <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 801442e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014430:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8014434:	3301      	adds	r3, #1
 8014436:	b2da      	uxtb	r2, r3
 8014438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801443a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801443e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014442:	2b00      	cmp	r3, #0
 8014444:	d011      	beq.n	801446a <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8014446:	4b6c      	ldr	r3, [pc, #432]	; (80145f8 <tcp_slowtmr+0x584>)
 8014448:	681a      	ldr	r2, [r3, #0]
 801444a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801444c:	6a1b      	ldr	r3, [r3, #32]
 801444e:	1ad2      	subs	r2, r2, r3
 8014450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014452:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8014456:	4619      	mov	r1, r3
 8014458:	460b      	mov	r3, r1
 801445a:	005b      	lsls	r3, r3, #1
 801445c:	440b      	add	r3, r1
 801445e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8014460:	429a      	cmp	r2, r3
 8014462:	d302      	bcc.n	801446a <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8014464:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014466:	f000 fea9 	bl	80151bc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801446a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801446c:	7d1b      	ldrb	r3, [r3, #20]
 801446e:	2b03      	cmp	r3, #3
 8014470:	d10b      	bne.n	801448a <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014472:	4b61      	ldr	r3, [pc, #388]	; (80145f8 <tcp_slowtmr+0x584>)
 8014474:	681a      	ldr	r2, [r3, #0]
 8014476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014478:	6a1b      	ldr	r3, [r3, #32]
 801447a:	1ad3      	subs	r3, r2, r3
 801447c:	2b28      	cmp	r3, #40	; 0x28
 801447e:	d904      	bls.n	801448a <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8014480:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014484:	3301      	adds	r3, #1
 8014486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801448a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801448c:	7d1b      	ldrb	r3, [r3, #20]
 801448e:	2b09      	cmp	r3, #9
 8014490:	d10b      	bne.n	80144aa <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8014492:	4b59      	ldr	r3, [pc, #356]	; (80145f8 <tcp_slowtmr+0x584>)
 8014494:	681a      	ldr	r2, [r3, #0]
 8014496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014498:	6a1b      	ldr	r3, [r3, #32]
 801449a:	1ad3      	subs	r3, r2, r3
 801449c:	2bf0      	cmp	r3, #240	; 0xf0
 801449e:	d904      	bls.n	80144aa <tcp_slowtmr+0x436>
        ++pcb_remove;
 80144a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80144a4:	3301      	adds	r3, #1
 80144a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80144aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d060      	beq.n	8014574 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80144b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80144b8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80144ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80144bc:	f000 fcca 	bl	8014e54 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80144c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d010      	beq.n	80144e8 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80144c6:	4b4f      	ldr	r3, [pc, #316]	; (8014604 <tcp_slowtmr+0x590>)
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80144cc:	429a      	cmp	r2, r3
 80144ce:	d106      	bne.n	80144de <tcp_slowtmr+0x46a>
 80144d0:	4b4d      	ldr	r3, [pc, #308]	; (8014608 <tcp_slowtmr+0x594>)
 80144d2:	f240 526d 	movw	r2, #1389	; 0x56d
 80144d6:	494d      	ldr	r1, [pc, #308]	; (801460c <tcp_slowtmr+0x598>)
 80144d8:	484d      	ldr	r0, [pc, #308]	; (8014610 <tcp_slowtmr+0x59c>)
 80144da:	f008 fdeb 	bl	801d0b4 <iprintf>
        prev->next = pcb->next;
 80144de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144e0:	68da      	ldr	r2, [r3, #12]
 80144e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80144e4:	60da      	str	r2, [r3, #12]
 80144e6:	e00f      	b.n	8014508 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80144e8:	4b46      	ldr	r3, [pc, #280]	; (8014604 <tcp_slowtmr+0x590>)
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80144ee:	429a      	cmp	r2, r3
 80144f0:	d006      	beq.n	8014500 <tcp_slowtmr+0x48c>
 80144f2:	4b45      	ldr	r3, [pc, #276]	; (8014608 <tcp_slowtmr+0x594>)
 80144f4:	f240 5271 	movw	r2, #1393	; 0x571
 80144f8:	4946      	ldr	r1, [pc, #280]	; (8014614 <tcp_slowtmr+0x5a0>)
 80144fa:	4845      	ldr	r0, [pc, #276]	; (8014610 <tcp_slowtmr+0x59c>)
 80144fc:	f008 fdda 	bl	801d0b4 <iprintf>
        tcp_active_pcbs = pcb->next;
 8014500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014502:	68db      	ldr	r3, [r3, #12]
 8014504:	4a3f      	ldr	r2, [pc, #252]	; (8014604 <tcp_slowtmr+0x590>)
 8014506:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8014508:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801450c:	2b00      	cmp	r3, #0
 801450e:	d013      	beq.n	8014538 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014512:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8014514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014516:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014518:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801451a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801451c:	3304      	adds	r3, #4
 801451e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014520:	8ad2      	ldrh	r2, [r2, #22]
 8014522:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014524:	8b09      	ldrh	r1, [r1, #24]
 8014526:	9102      	str	r1, [sp, #8]
 8014528:	9201      	str	r2, [sp, #4]
 801452a:	9300      	str	r3, [sp, #0]
 801452c:	462b      	mov	r3, r5
 801452e:	4622      	mov	r2, r4
 8014530:	4601      	mov	r1, r0
 8014532:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014534:	f004 feae 	bl	8019294 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8014538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801453a:	691b      	ldr	r3, [r3, #16]
 801453c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801453e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014540:	7d1b      	ldrb	r3, [r3, #20]
 8014542:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8014544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014546:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8014548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801454a:	68db      	ldr	r3, [r3, #12]
 801454c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801454e:	6838      	ldr	r0, [r7, #0]
 8014550:	f7ff f8b8 	bl	80136c4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8014554:	4b30      	ldr	r3, [pc, #192]	; (8014618 <tcp_slowtmr+0x5a4>)
 8014556:	2200      	movs	r2, #0
 8014558:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	2b00      	cmp	r3, #0
 801455e:	d004      	beq.n	801456a <tcp_slowtmr+0x4f6>
 8014560:	68fb      	ldr	r3, [r7, #12]
 8014562:	f06f 010c 	mvn.w	r1, #12
 8014566:	68b8      	ldr	r0, [r7, #8]
 8014568:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801456a:	4b2b      	ldr	r3, [pc, #172]	; (8014618 <tcp_slowtmr+0x5a4>)
 801456c:	781b      	ldrb	r3, [r3, #0]
 801456e:	2b00      	cmp	r3, #0
 8014570:	d037      	beq.n	80145e2 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8014572:	e590      	b.n	8014096 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8014574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014576:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8014578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801457a:	68db      	ldr	r3, [r3, #12]
 801457c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801457e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014580:	7f1b      	ldrb	r3, [r3, #28]
 8014582:	3301      	adds	r3, #1
 8014584:	b2da      	uxtb	r2, r3
 8014586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014588:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801458a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801458c:	7f1a      	ldrb	r2, [r3, #28]
 801458e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014590:	7f5b      	ldrb	r3, [r3, #29]
 8014592:	429a      	cmp	r2, r3
 8014594:	d325      	bcc.n	80145e2 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8014596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014598:	2200      	movs	r2, #0
 801459a:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801459c:	4b1e      	ldr	r3, [pc, #120]	; (8014618 <tcp_slowtmr+0x5a4>)
 801459e:	2200      	movs	r2, #0
 80145a0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80145a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d00b      	beq.n	80145c4 <tcp_slowtmr+0x550>
 80145ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80145b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80145b4:	6912      	ldr	r2, [r2, #16]
 80145b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80145b8:	4610      	mov	r0, r2
 80145ba:	4798      	blx	r3
 80145bc:	4603      	mov	r3, r0
 80145be:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80145c2:	e002      	b.n	80145ca <tcp_slowtmr+0x556>
 80145c4:	2300      	movs	r3, #0
 80145c6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80145ca:	4b13      	ldr	r3, [pc, #76]	; (8014618 <tcp_slowtmr+0x5a4>)
 80145cc:	781b      	ldrb	r3, [r3, #0]
 80145ce:	2b00      	cmp	r3, #0
 80145d0:	d000      	beq.n	80145d4 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 80145d2:	e560      	b.n	8014096 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80145d4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d102      	bne.n	80145e2 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 80145dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80145de:	f004 f8a5 	bl	801872c <tcp_output>
  while (pcb != NULL) {
 80145e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	f47f ad5c 	bne.w	80140a2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80145ea:	2300      	movs	r3, #0
 80145ec:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80145ee:	4b0b      	ldr	r3, [pc, #44]	; (801461c <tcp_slowtmr+0x5a8>)
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80145f4:	e067      	b.n	80146c6 <tcp_slowtmr+0x652>
 80145f6:	bf00      	nop
 80145f8:	2000ddbc 	.word	0x2000ddbc
 80145fc:	10624dd3 	.word	0x10624dd3
 8014600:	000124f8 	.word	0x000124f8
 8014604:	2000ddc8 	.word	0x2000ddc8
 8014608:	0801fcb4 	.word	0x0801fcb4
 801460c:	080200ec 	.word	0x080200ec
 8014610:	0801fcf8 	.word	0x0801fcf8
 8014614:	08020118 	.word	0x08020118
 8014618:	2000ddd0 	.word	0x2000ddd0
 801461c:	2000ddcc 	.word	0x2000ddcc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8014620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014622:	7d1b      	ldrb	r3, [r3, #20]
 8014624:	2b0a      	cmp	r3, #10
 8014626:	d006      	beq.n	8014636 <tcp_slowtmr+0x5c2>
 8014628:	4b2b      	ldr	r3, [pc, #172]	; (80146d8 <tcp_slowtmr+0x664>)
 801462a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801462e:	492b      	ldr	r1, [pc, #172]	; (80146dc <tcp_slowtmr+0x668>)
 8014630:	482b      	ldr	r0, [pc, #172]	; (80146e0 <tcp_slowtmr+0x66c>)
 8014632:	f008 fd3f 	bl	801d0b4 <iprintf>
    pcb_remove = 0;
 8014636:	2300      	movs	r3, #0
 8014638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801463c:	4b29      	ldr	r3, [pc, #164]	; (80146e4 <tcp_slowtmr+0x670>)
 801463e:	681a      	ldr	r2, [r3, #0]
 8014640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014642:	6a1b      	ldr	r3, [r3, #32]
 8014644:	1ad3      	subs	r3, r2, r3
 8014646:	2bf0      	cmp	r3, #240	; 0xf0
 8014648:	d904      	bls.n	8014654 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801464a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801464e:	3301      	adds	r3, #1
 8014650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8014654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014658:	2b00      	cmp	r3, #0
 801465a:	d02f      	beq.n	80146bc <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801465c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801465e:	f000 fbf9 	bl	8014e54 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8014662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014664:	2b00      	cmp	r3, #0
 8014666:	d010      	beq.n	801468a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8014668:	4b1f      	ldr	r3, [pc, #124]	; (80146e8 <tcp_slowtmr+0x674>)
 801466a:	681b      	ldr	r3, [r3, #0]
 801466c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801466e:	429a      	cmp	r2, r3
 8014670:	d106      	bne.n	8014680 <tcp_slowtmr+0x60c>
 8014672:	4b19      	ldr	r3, [pc, #100]	; (80146d8 <tcp_slowtmr+0x664>)
 8014674:	f240 52af 	movw	r2, #1455	; 0x5af
 8014678:	491c      	ldr	r1, [pc, #112]	; (80146ec <tcp_slowtmr+0x678>)
 801467a:	4819      	ldr	r0, [pc, #100]	; (80146e0 <tcp_slowtmr+0x66c>)
 801467c:	f008 fd1a 	bl	801d0b4 <iprintf>
        prev->next = pcb->next;
 8014680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014682:	68da      	ldr	r2, [r3, #12]
 8014684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014686:	60da      	str	r2, [r3, #12]
 8014688:	e00f      	b.n	80146aa <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801468a:	4b17      	ldr	r3, [pc, #92]	; (80146e8 <tcp_slowtmr+0x674>)
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014690:	429a      	cmp	r2, r3
 8014692:	d006      	beq.n	80146a2 <tcp_slowtmr+0x62e>
 8014694:	4b10      	ldr	r3, [pc, #64]	; (80146d8 <tcp_slowtmr+0x664>)
 8014696:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801469a:	4915      	ldr	r1, [pc, #84]	; (80146f0 <tcp_slowtmr+0x67c>)
 801469c:	4810      	ldr	r0, [pc, #64]	; (80146e0 <tcp_slowtmr+0x66c>)
 801469e:	f008 fd09 	bl	801d0b4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80146a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146a4:	68db      	ldr	r3, [r3, #12]
 80146a6:	4a10      	ldr	r2, [pc, #64]	; (80146e8 <tcp_slowtmr+0x674>)
 80146a8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80146aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146ac:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80146ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146b0:	68db      	ldr	r3, [r3, #12]
 80146b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80146b4:	69f8      	ldr	r0, [r7, #28]
 80146b6:	f7ff f805 	bl	80136c4 <tcp_free>
 80146ba:	e004      	b.n	80146c6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80146bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146be:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80146c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146c2:	68db      	ldr	r3, [r3, #12]
 80146c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80146c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d1a9      	bne.n	8014620 <tcp_slowtmr+0x5ac>
    }
  }
}
 80146cc:	bf00      	nop
 80146ce:	bf00      	nop
 80146d0:	3730      	adds	r7, #48	; 0x30
 80146d2:	46bd      	mov	sp, r7
 80146d4:	bdb0      	pop	{r4, r5, r7, pc}
 80146d6:	bf00      	nop
 80146d8:	0801fcb4 	.word	0x0801fcb4
 80146dc:	08020144 	.word	0x08020144
 80146e0:	0801fcf8 	.word	0x0801fcf8
 80146e4:	2000ddbc 	.word	0x2000ddbc
 80146e8:	2000ddcc 	.word	0x2000ddcc
 80146ec:	08020174 	.word	0x08020174
 80146f0:	0802019c 	.word	0x0802019c

080146f4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80146f4:	b580      	push	{r7, lr}
 80146f6:	b082      	sub	sp, #8
 80146f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 80146fa:	4b2d      	ldr	r3, [pc, #180]	; (80147b0 <tcp_fasttmr+0xbc>)
 80146fc:	781b      	ldrb	r3, [r3, #0]
 80146fe:	3301      	adds	r3, #1
 8014700:	b2da      	uxtb	r2, r3
 8014702:	4b2b      	ldr	r3, [pc, #172]	; (80147b0 <tcp_fasttmr+0xbc>)
 8014704:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8014706:	4b2b      	ldr	r3, [pc, #172]	; (80147b4 <tcp_fasttmr+0xc0>)
 8014708:	681b      	ldr	r3, [r3, #0]
 801470a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801470c:	e048      	b.n	80147a0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	7f9a      	ldrb	r2, [r3, #30]
 8014712:	4b27      	ldr	r3, [pc, #156]	; (80147b0 <tcp_fasttmr+0xbc>)
 8014714:	781b      	ldrb	r3, [r3, #0]
 8014716:	429a      	cmp	r2, r3
 8014718:	d03f      	beq.n	801479a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801471a:	4b25      	ldr	r3, [pc, #148]	; (80147b0 <tcp_fasttmr+0xbc>)
 801471c:	781a      	ldrb	r2, [r3, #0]
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	8b5b      	ldrh	r3, [r3, #26]
 8014726:	f003 0301 	and.w	r3, r3, #1
 801472a:	2b00      	cmp	r3, #0
 801472c:	d010      	beq.n	8014750 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	8b5b      	ldrh	r3, [r3, #26]
 8014732:	f043 0302 	orr.w	r3, r3, #2
 8014736:	b29a      	uxth	r2, r3
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801473c:	6878      	ldr	r0, [r7, #4]
 801473e:	f003 fff5 	bl	801872c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	8b5b      	ldrh	r3, [r3, #26]
 8014746:	f023 0303 	bic.w	r3, r3, #3
 801474a:	b29a      	uxth	r2, r3
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	8b5b      	ldrh	r3, [r3, #26]
 8014754:	f003 0308 	and.w	r3, r3, #8
 8014758:	2b00      	cmp	r3, #0
 801475a:	d009      	beq.n	8014770 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	8b5b      	ldrh	r3, [r3, #26]
 8014760:	f023 0308 	bic.w	r3, r3, #8
 8014764:	b29a      	uxth	r2, r3
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801476a:	6878      	ldr	r0, [r7, #4]
 801476c:	f7ff f93e 	bl	80139ec <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	68db      	ldr	r3, [r3, #12]
 8014774:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801477a:	2b00      	cmp	r3, #0
 801477c:	d00a      	beq.n	8014794 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801477e:	4b0e      	ldr	r3, [pc, #56]	; (80147b8 <tcp_fasttmr+0xc4>)
 8014780:	2200      	movs	r2, #0
 8014782:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8014784:	6878      	ldr	r0, [r7, #4]
 8014786:	f000 f819 	bl	80147bc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801478a:	4b0b      	ldr	r3, [pc, #44]	; (80147b8 <tcp_fasttmr+0xc4>)
 801478c:	781b      	ldrb	r3, [r3, #0]
 801478e:	2b00      	cmp	r3, #0
 8014790:	d000      	beq.n	8014794 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8014792:	e7b8      	b.n	8014706 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8014794:	683b      	ldr	r3, [r7, #0]
 8014796:	607b      	str	r3, [r7, #4]
 8014798:	e002      	b.n	80147a0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	68db      	ldr	r3, [r3, #12]
 801479e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d1b3      	bne.n	801470e <tcp_fasttmr+0x1a>
    }
  }
}
 80147a6:	bf00      	nop
 80147a8:	bf00      	nop
 80147aa:	3708      	adds	r7, #8
 80147ac:	46bd      	mov	sp, r7
 80147ae:	bd80      	pop	{r7, pc}
 80147b0:	2000ddd2 	.word	0x2000ddd2
 80147b4:	2000ddc8 	.word	0x2000ddc8
 80147b8:	2000ddd0 	.word	0x2000ddd0

080147bc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80147bc:	b590      	push	{r4, r7, lr}
 80147be:	b085      	sub	sp, #20
 80147c0:	af00      	add	r7, sp, #0
 80147c2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	2b00      	cmp	r3, #0
 80147c8:	d109      	bne.n	80147de <tcp_process_refused_data+0x22>
 80147ca:	4b37      	ldr	r3, [pc, #220]	; (80148a8 <tcp_process_refused_data+0xec>)
 80147cc:	f240 6209 	movw	r2, #1545	; 0x609
 80147d0:	4936      	ldr	r1, [pc, #216]	; (80148ac <tcp_process_refused_data+0xf0>)
 80147d2:	4837      	ldr	r0, [pc, #220]	; (80148b0 <tcp_process_refused_data+0xf4>)
 80147d4:	f008 fc6e 	bl	801d0b4 <iprintf>
 80147d8:	f06f 030f 	mvn.w	r3, #15
 80147dc:	e060      	b.n	80148a0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80147e2:	7b5b      	ldrb	r3, [r3, #13]
 80147e4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80147ea:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	2200      	movs	r2, #0
 80147f0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80147f2:	687b      	ldr	r3, [r7, #4]
 80147f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80147f8:	2b00      	cmp	r3, #0
 80147fa:	d00b      	beq.n	8014814 <tcp_process_refused_data+0x58>
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	6918      	ldr	r0, [r3, #16]
 8014806:	2300      	movs	r3, #0
 8014808:	68ba      	ldr	r2, [r7, #8]
 801480a:	6879      	ldr	r1, [r7, #4]
 801480c:	47a0      	blx	r4
 801480e:	4603      	mov	r3, r0
 8014810:	73fb      	strb	r3, [r7, #15]
 8014812:	e007      	b.n	8014824 <tcp_process_refused_data+0x68>
 8014814:	2300      	movs	r3, #0
 8014816:	68ba      	ldr	r2, [r7, #8]
 8014818:	6879      	ldr	r1, [r7, #4]
 801481a:	2000      	movs	r0, #0
 801481c:	f000 f8a4 	bl	8014968 <tcp_recv_null>
 8014820:	4603      	mov	r3, r0
 8014822:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8014824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014828:	2b00      	cmp	r3, #0
 801482a:	d12a      	bne.n	8014882 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801482c:	7bbb      	ldrb	r3, [r7, #14]
 801482e:	f003 0320 	and.w	r3, r3, #32
 8014832:	2b00      	cmp	r3, #0
 8014834:	d033      	beq.n	801489e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801483a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801483e:	d005      	beq.n	801484c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014844:	3301      	adds	r3, #1
 8014846:	b29a      	uxth	r2, r3
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014852:	2b00      	cmp	r3, #0
 8014854:	d00b      	beq.n	801486e <tcp_process_refused_data+0xb2>
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	6918      	ldr	r0, [r3, #16]
 8014860:	2300      	movs	r3, #0
 8014862:	2200      	movs	r2, #0
 8014864:	6879      	ldr	r1, [r7, #4]
 8014866:	47a0      	blx	r4
 8014868:	4603      	mov	r3, r0
 801486a:	73fb      	strb	r3, [r7, #15]
 801486c:	e001      	b.n	8014872 <tcp_process_refused_data+0xb6>
 801486e:	2300      	movs	r3, #0
 8014870:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8014872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014876:	f113 0f0d 	cmn.w	r3, #13
 801487a:	d110      	bne.n	801489e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801487c:	f06f 030c 	mvn.w	r3, #12
 8014880:	e00e      	b.n	80148a0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8014882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014886:	f113 0f0d 	cmn.w	r3, #13
 801488a:	d102      	bne.n	8014892 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801488c:	f06f 030c 	mvn.w	r3, #12
 8014890:	e006      	b.n	80148a0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8014892:	687b      	ldr	r3, [r7, #4]
 8014894:	68ba      	ldr	r2, [r7, #8]
 8014896:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8014898:	f06f 0304 	mvn.w	r3, #4
 801489c:	e000      	b.n	80148a0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801489e:	2300      	movs	r3, #0
}
 80148a0:	4618      	mov	r0, r3
 80148a2:	3714      	adds	r7, #20
 80148a4:	46bd      	mov	sp, r7
 80148a6:	bd90      	pop	{r4, r7, pc}
 80148a8:	0801fcb4 	.word	0x0801fcb4
 80148ac:	080201c4 	.word	0x080201c4
 80148b0:	0801fcf8 	.word	0x0801fcf8

080148b4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80148b4:	b580      	push	{r7, lr}
 80148b6:	b084      	sub	sp, #16
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80148bc:	e007      	b.n	80148ce <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	681b      	ldr	r3, [r3, #0]
 80148c2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80148c4:	6878      	ldr	r0, [r7, #4]
 80148c6:	f000 f80a 	bl	80148de <tcp_seg_free>
    seg = next;
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80148ce:	687b      	ldr	r3, [r7, #4]
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d1f4      	bne.n	80148be <tcp_segs_free+0xa>
  }
}
 80148d4:	bf00      	nop
 80148d6:	bf00      	nop
 80148d8:	3710      	adds	r7, #16
 80148da:	46bd      	mov	sp, r7
 80148dc:	bd80      	pop	{r7, pc}

080148de <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80148de:	b580      	push	{r7, lr}
 80148e0:	b082      	sub	sp, #8
 80148e2:	af00      	add	r7, sp, #0
 80148e4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	2b00      	cmp	r3, #0
 80148ea:	d00c      	beq.n	8014906 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80148ec:	687b      	ldr	r3, [r7, #4]
 80148ee:	685b      	ldr	r3, [r3, #4]
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	d004      	beq.n	80148fe <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	685b      	ldr	r3, [r3, #4]
 80148f8:	4618      	mov	r0, r3
 80148fa:	f7fe fc27 	bl	801314c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80148fe:	6879      	ldr	r1, [r7, #4]
 8014900:	2003      	movs	r0, #3
 8014902:	f7fd fde3 	bl	80124cc <memp_free>
  }
}
 8014906:	bf00      	nop
 8014908:	3708      	adds	r7, #8
 801490a:	46bd      	mov	sp, r7
 801490c:	bd80      	pop	{r7, pc}
	...

08014910 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8014910:	b580      	push	{r7, lr}
 8014912:	b084      	sub	sp, #16
 8014914:	af00      	add	r7, sp, #0
 8014916:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	2b00      	cmp	r3, #0
 801491c:	d106      	bne.n	801492c <tcp_seg_copy+0x1c>
 801491e:	4b0f      	ldr	r3, [pc, #60]	; (801495c <tcp_seg_copy+0x4c>)
 8014920:	f240 6282 	movw	r2, #1666	; 0x682
 8014924:	490e      	ldr	r1, [pc, #56]	; (8014960 <tcp_seg_copy+0x50>)
 8014926:	480f      	ldr	r0, [pc, #60]	; (8014964 <tcp_seg_copy+0x54>)
 8014928:	f008 fbc4 	bl	801d0b4 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801492c:	2003      	movs	r0, #3
 801492e:	f7fd fd7b 	bl	8012428 <memp_malloc>
 8014932:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8014934:	68fb      	ldr	r3, [r7, #12]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d101      	bne.n	801493e <tcp_seg_copy+0x2e>
    return NULL;
 801493a:	2300      	movs	r3, #0
 801493c:	e00a      	b.n	8014954 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801493e:	2210      	movs	r2, #16
 8014940:	6879      	ldr	r1, [r7, #4]
 8014942:	68f8      	ldr	r0, [r7, #12]
 8014944:	f008 faa6 	bl	801ce94 <memcpy>
  pbuf_ref(cseg->p);
 8014948:	68fb      	ldr	r3, [r7, #12]
 801494a:	685b      	ldr	r3, [r3, #4]
 801494c:	4618      	mov	r0, r3
 801494e:	f7fe fca3 	bl	8013298 <pbuf_ref>
  return cseg;
 8014952:	68fb      	ldr	r3, [r7, #12]
}
 8014954:	4618      	mov	r0, r3
 8014956:	3710      	adds	r7, #16
 8014958:	46bd      	mov	sp, r7
 801495a:	bd80      	pop	{r7, pc}
 801495c:	0801fcb4 	.word	0x0801fcb4
 8014960:	08020208 	.word	0x08020208
 8014964:	0801fcf8 	.word	0x0801fcf8

08014968 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8014968:	b580      	push	{r7, lr}
 801496a:	b084      	sub	sp, #16
 801496c:	af00      	add	r7, sp, #0
 801496e:	60f8      	str	r0, [r7, #12]
 8014970:	60b9      	str	r1, [r7, #8]
 8014972:	607a      	str	r2, [r7, #4]
 8014974:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8014976:	68bb      	ldr	r3, [r7, #8]
 8014978:	2b00      	cmp	r3, #0
 801497a:	d109      	bne.n	8014990 <tcp_recv_null+0x28>
 801497c:	4b12      	ldr	r3, [pc, #72]	; (80149c8 <tcp_recv_null+0x60>)
 801497e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8014982:	4912      	ldr	r1, [pc, #72]	; (80149cc <tcp_recv_null+0x64>)
 8014984:	4812      	ldr	r0, [pc, #72]	; (80149d0 <tcp_recv_null+0x68>)
 8014986:	f008 fb95 	bl	801d0b4 <iprintf>
 801498a:	f06f 030f 	mvn.w	r3, #15
 801498e:	e016      	b.n	80149be <tcp_recv_null+0x56>

  if (p != NULL) {
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d009      	beq.n	80149aa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	891b      	ldrh	r3, [r3, #8]
 801499a:	4619      	mov	r1, r3
 801499c:	68b8      	ldr	r0, [r7, #8]
 801499e:	f7ff fad3 	bl	8013f48 <tcp_recved>
    pbuf_free(p);
 80149a2:	6878      	ldr	r0, [r7, #4]
 80149a4:	f7fe fbd2 	bl	801314c <pbuf_free>
 80149a8:	e008      	b.n	80149bc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80149aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d104      	bne.n	80149bc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80149b2:	68b8      	ldr	r0, [r7, #8]
 80149b4:	f7ff f884 	bl	8013ac0 <tcp_close>
 80149b8:	4603      	mov	r3, r0
 80149ba:	e000      	b.n	80149be <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80149bc:	2300      	movs	r3, #0
}
 80149be:	4618      	mov	r0, r3
 80149c0:	3710      	adds	r7, #16
 80149c2:	46bd      	mov	sp, r7
 80149c4:	bd80      	pop	{r7, pc}
 80149c6:	bf00      	nop
 80149c8:	0801fcb4 	.word	0x0801fcb4
 80149cc:	08020224 	.word	0x08020224
 80149d0:	0801fcf8 	.word	0x0801fcf8

080149d4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80149d4:	b580      	push	{r7, lr}
 80149d6:	b086      	sub	sp, #24
 80149d8:	af00      	add	r7, sp, #0
 80149da:	4603      	mov	r3, r0
 80149dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80149de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	db01      	blt.n	80149ea <tcp_kill_prio+0x16>
 80149e6:	79fb      	ldrb	r3, [r7, #7]
 80149e8:	e000      	b.n	80149ec <tcp_kill_prio+0x18>
 80149ea:	237f      	movs	r3, #127	; 0x7f
 80149ec:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 80149ee:	7afb      	ldrb	r3, [r7, #11]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d034      	beq.n	8014a5e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80149f4:	7afb      	ldrb	r3, [r7, #11]
 80149f6:	3b01      	subs	r3, #1
 80149f8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80149fa:	2300      	movs	r3, #0
 80149fc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80149fe:	2300      	movs	r3, #0
 8014a00:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014a02:	4b19      	ldr	r3, [pc, #100]	; (8014a68 <tcp_kill_prio+0x94>)
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	617b      	str	r3, [r7, #20]
 8014a08:	e01f      	b.n	8014a4a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8014a0a:	697b      	ldr	r3, [r7, #20]
 8014a0c:	7d5b      	ldrb	r3, [r3, #21]
 8014a0e:	7afa      	ldrb	r2, [r7, #11]
 8014a10:	429a      	cmp	r2, r3
 8014a12:	d80c      	bhi.n	8014a2e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014a14:	697b      	ldr	r3, [r7, #20]
 8014a16:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8014a18:	7afa      	ldrb	r2, [r7, #11]
 8014a1a:	429a      	cmp	r2, r3
 8014a1c:	d112      	bne.n	8014a44 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014a1e:	4b13      	ldr	r3, [pc, #76]	; (8014a6c <tcp_kill_prio+0x98>)
 8014a20:	681a      	ldr	r2, [r3, #0]
 8014a22:	697b      	ldr	r3, [r7, #20]
 8014a24:	6a1b      	ldr	r3, [r3, #32]
 8014a26:	1ad3      	subs	r3, r2, r3
 8014a28:	68fa      	ldr	r2, [r7, #12]
 8014a2a:	429a      	cmp	r2, r3
 8014a2c:	d80a      	bhi.n	8014a44 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8014a2e:	4b0f      	ldr	r3, [pc, #60]	; (8014a6c <tcp_kill_prio+0x98>)
 8014a30:	681a      	ldr	r2, [r3, #0]
 8014a32:	697b      	ldr	r3, [r7, #20]
 8014a34:	6a1b      	ldr	r3, [r3, #32]
 8014a36:	1ad3      	subs	r3, r2, r3
 8014a38:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8014a3a:	697b      	ldr	r3, [r7, #20]
 8014a3c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8014a3e:	697b      	ldr	r3, [r7, #20]
 8014a40:	7d5b      	ldrb	r3, [r3, #21]
 8014a42:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014a44:	697b      	ldr	r3, [r7, #20]
 8014a46:	68db      	ldr	r3, [r3, #12]
 8014a48:	617b      	str	r3, [r7, #20]
 8014a4a:	697b      	ldr	r3, [r7, #20]
 8014a4c:	2b00      	cmp	r3, #0
 8014a4e:	d1dc      	bne.n	8014a0a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8014a50:	693b      	ldr	r3, [r7, #16]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d004      	beq.n	8014a60 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8014a56:	6938      	ldr	r0, [r7, #16]
 8014a58:	f7ff f978 	bl	8013d4c <tcp_abort>
 8014a5c:	e000      	b.n	8014a60 <tcp_kill_prio+0x8c>
    return;
 8014a5e:	bf00      	nop
  }
}
 8014a60:	3718      	adds	r7, #24
 8014a62:	46bd      	mov	sp, r7
 8014a64:	bd80      	pop	{r7, pc}
 8014a66:	bf00      	nop
 8014a68:	2000ddc8 	.word	0x2000ddc8
 8014a6c:	2000ddbc 	.word	0x2000ddbc

08014a70 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8014a70:	b580      	push	{r7, lr}
 8014a72:	b086      	sub	sp, #24
 8014a74:	af00      	add	r7, sp, #0
 8014a76:	4603      	mov	r3, r0
 8014a78:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8014a7a:	79fb      	ldrb	r3, [r7, #7]
 8014a7c:	2b08      	cmp	r3, #8
 8014a7e:	d009      	beq.n	8014a94 <tcp_kill_state+0x24>
 8014a80:	79fb      	ldrb	r3, [r7, #7]
 8014a82:	2b09      	cmp	r3, #9
 8014a84:	d006      	beq.n	8014a94 <tcp_kill_state+0x24>
 8014a86:	4b1a      	ldr	r3, [pc, #104]	; (8014af0 <tcp_kill_state+0x80>)
 8014a88:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8014a8c:	4919      	ldr	r1, [pc, #100]	; (8014af4 <tcp_kill_state+0x84>)
 8014a8e:	481a      	ldr	r0, [pc, #104]	; (8014af8 <tcp_kill_state+0x88>)
 8014a90:	f008 fb10 	bl	801d0b4 <iprintf>

  inactivity = 0;
 8014a94:	2300      	movs	r3, #0
 8014a96:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014a98:	2300      	movs	r3, #0
 8014a9a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014a9c:	4b17      	ldr	r3, [pc, #92]	; (8014afc <tcp_kill_state+0x8c>)
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	617b      	str	r3, [r7, #20]
 8014aa2:	e017      	b.n	8014ad4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8014aa4:	697b      	ldr	r3, [r7, #20]
 8014aa6:	7d1b      	ldrb	r3, [r3, #20]
 8014aa8:	79fa      	ldrb	r2, [r7, #7]
 8014aaa:	429a      	cmp	r2, r3
 8014aac:	d10f      	bne.n	8014ace <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8014aae:	4b14      	ldr	r3, [pc, #80]	; (8014b00 <tcp_kill_state+0x90>)
 8014ab0:	681a      	ldr	r2, [r3, #0]
 8014ab2:	697b      	ldr	r3, [r7, #20]
 8014ab4:	6a1b      	ldr	r3, [r3, #32]
 8014ab6:	1ad3      	subs	r3, r2, r3
 8014ab8:	68fa      	ldr	r2, [r7, #12]
 8014aba:	429a      	cmp	r2, r3
 8014abc:	d807      	bhi.n	8014ace <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8014abe:	4b10      	ldr	r3, [pc, #64]	; (8014b00 <tcp_kill_state+0x90>)
 8014ac0:	681a      	ldr	r2, [r3, #0]
 8014ac2:	697b      	ldr	r3, [r7, #20]
 8014ac4:	6a1b      	ldr	r3, [r3, #32]
 8014ac6:	1ad3      	subs	r3, r2, r3
 8014ac8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8014aca:	697b      	ldr	r3, [r7, #20]
 8014acc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014ace:	697b      	ldr	r3, [r7, #20]
 8014ad0:	68db      	ldr	r3, [r3, #12]
 8014ad2:	617b      	str	r3, [r7, #20]
 8014ad4:	697b      	ldr	r3, [r7, #20]
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d1e4      	bne.n	8014aa4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8014ada:	693b      	ldr	r3, [r7, #16]
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d003      	beq.n	8014ae8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8014ae0:	2100      	movs	r1, #0
 8014ae2:	6938      	ldr	r0, [r7, #16]
 8014ae4:	f7ff f874 	bl	8013bd0 <tcp_abandon>
  }
}
 8014ae8:	bf00      	nop
 8014aea:	3718      	adds	r7, #24
 8014aec:	46bd      	mov	sp, r7
 8014aee:	bd80      	pop	{r7, pc}
 8014af0:	0801fcb4 	.word	0x0801fcb4
 8014af4:	08020240 	.word	0x08020240
 8014af8:	0801fcf8 	.word	0x0801fcf8
 8014afc:	2000ddc8 	.word	0x2000ddc8
 8014b00:	2000ddbc 	.word	0x2000ddbc

08014b04 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8014b04:	b580      	push	{r7, lr}
 8014b06:	b084      	sub	sp, #16
 8014b08:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8014b0a:	2300      	movs	r3, #0
 8014b0c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8014b0e:	2300      	movs	r3, #0
 8014b10:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014b12:	4b12      	ldr	r3, [pc, #72]	; (8014b5c <tcp_kill_timewait+0x58>)
 8014b14:	681b      	ldr	r3, [r3, #0]
 8014b16:	60fb      	str	r3, [r7, #12]
 8014b18:	e012      	b.n	8014b40 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8014b1a:	4b11      	ldr	r3, [pc, #68]	; (8014b60 <tcp_kill_timewait+0x5c>)
 8014b1c:	681a      	ldr	r2, [r3, #0]
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	6a1b      	ldr	r3, [r3, #32]
 8014b22:	1ad3      	subs	r3, r2, r3
 8014b24:	687a      	ldr	r2, [r7, #4]
 8014b26:	429a      	cmp	r2, r3
 8014b28:	d807      	bhi.n	8014b3a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8014b2a:	4b0d      	ldr	r3, [pc, #52]	; (8014b60 <tcp_kill_timewait+0x5c>)
 8014b2c:	681a      	ldr	r2, [r3, #0]
 8014b2e:	68fb      	ldr	r3, [r7, #12]
 8014b30:	6a1b      	ldr	r3, [r3, #32]
 8014b32:	1ad3      	subs	r3, r2, r3
 8014b34:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8014b36:	68fb      	ldr	r3, [r7, #12]
 8014b38:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014b3a:	68fb      	ldr	r3, [r7, #12]
 8014b3c:	68db      	ldr	r3, [r3, #12]
 8014b3e:	60fb      	str	r3, [r7, #12]
 8014b40:	68fb      	ldr	r3, [r7, #12]
 8014b42:	2b00      	cmp	r3, #0
 8014b44:	d1e9      	bne.n	8014b1a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8014b46:	68bb      	ldr	r3, [r7, #8]
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d002      	beq.n	8014b52 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8014b4c:	68b8      	ldr	r0, [r7, #8]
 8014b4e:	f7ff f8fd 	bl	8013d4c <tcp_abort>
  }
}
 8014b52:	bf00      	nop
 8014b54:	3710      	adds	r7, #16
 8014b56:	46bd      	mov	sp, r7
 8014b58:	bd80      	pop	{r7, pc}
 8014b5a:	bf00      	nop
 8014b5c:	2000ddcc 	.word	0x2000ddcc
 8014b60:	2000ddbc 	.word	0x2000ddbc

08014b64 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8014b64:	b580      	push	{r7, lr}
 8014b66:	b082      	sub	sp, #8
 8014b68:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8014b6a:	4b10      	ldr	r3, [pc, #64]	; (8014bac <tcp_handle_closepend+0x48>)
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8014b70:	e014      	b.n	8014b9c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	68db      	ldr	r3, [r3, #12]
 8014b76:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	8b5b      	ldrh	r3, [r3, #26]
 8014b7c:	f003 0308 	and.w	r3, r3, #8
 8014b80:	2b00      	cmp	r3, #0
 8014b82:	d009      	beq.n	8014b98 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8014b84:	687b      	ldr	r3, [r7, #4]
 8014b86:	8b5b      	ldrh	r3, [r3, #26]
 8014b88:	f023 0308 	bic.w	r3, r3, #8
 8014b8c:	b29a      	uxth	r2, r3
 8014b8e:	687b      	ldr	r3, [r7, #4]
 8014b90:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8014b92:	6878      	ldr	r0, [r7, #4]
 8014b94:	f7fe ff2a 	bl	80139ec <tcp_close_shutdown_fin>
    }
    pcb = next;
 8014b98:	683b      	ldr	r3, [r7, #0]
 8014b9a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d1e7      	bne.n	8014b72 <tcp_handle_closepend+0xe>
  }
}
 8014ba2:	bf00      	nop
 8014ba4:	bf00      	nop
 8014ba6:	3708      	adds	r7, #8
 8014ba8:	46bd      	mov	sp, r7
 8014baa:	bd80      	pop	{r7, pc}
 8014bac:	2000ddc8 	.word	0x2000ddc8

08014bb0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8014bb0:	b580      	push	{r7, lr}
 8014bb2:	b084      	sub	sp, #16
 8014bb4:	af00      	add	r7, sp, #0
 8014bb6:	4603      	mov	r3, r0
 8014bb8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014bba:	2001      	movs	r0, #1
 8014bbc:	f7fd fc34 	bl	8012428 <memp_malloc>
 8014bc0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d126      	bne.n	8014c16 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8014bc8:	f7ff ffcc 	bl	8014b64 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8014bcc:	f7ff ff9a 	bl	8014b04 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014bd0:	2001      	movs	r0, #1
 8014bd2:	f7fd fc29 	bl	8012428 <memp_malloc>
 8014bd6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8014bd8:	68fb      	ldr	r3, [r7, #12]
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d11b      	bne.n	8014c16 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8014bde:	2009      	movs	r0, #9
 8014be0:	f7ff ff46 	bl	8014a70 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014be4:	2001      	movs	r0, #1
 8014be6:	f7fd fc1f 	bl	8012428 <memp_malloc>
 8014bea:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8014bec:	68fb      	ldr	r3, [r7, #12]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d111      	bne.n	8014c16 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8014bf2:	2008      	movs	r0, #8
 8014bf4:	f7ff ff3c 	bl	8014a70 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014bf8:	2001      	movs	r0, #1
 8014bfa:	f7fd fc15 	bl	8012428 <memp_malloc>
 8014bfe:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d107      	bne.n	8014c16 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8014c06:	79fb      	ldrb	r3, [r7, #7]
 8014c08:	4618      	mov	r0, r3
 8014c0a:	f7ff fee3 	bl	80149d4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014c0e:	2001      	movs	r0, #1
 8014c10:	f7fd fc0a 	bl	8012428 <memp_malloc>
 8014c14:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8014c16:	68fb      	ldr	r3, [r7, #12]
 8014c18:	2b00      	cmp	r3, #0
 8014c1a:	d03f      	beq.n	8014c9c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8014c1c:	229c      	movs	r2, #156	; 0x9c
 8014c1e:	2100      	movs	r1, #0
 8014c20:	68f8      	ldr	r0, [r7, #12]
 8014c22:	f008 f95f 	bl	801cee4 <memset>
    pcb->prio = prio;
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	79fa      	ldrb	r2, [r7, #7]
 8014c2a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8014c2c:	68fb      	ldr	r3, [r7, #12]
 8014c2e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8014c32:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8014c3c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	22ff      	movs	r2, #255	; 0xff
 8014c4a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8014c52:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8014c54:	68fb      	ldr	r3, [r7, #12]
 8014c56:	2206      	movs	r2, #6
 8014c58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8014c5c:	68fb      	ldr	r3, [r7, #12]
 8014c5e:	2206      	movs	r2, #6
 8014c60:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014c68:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8014c6a:	68fb      	ldr	r3, [r7, #12]
 8014c6c:	2201      	movs	r2, #1
 8014c6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8014c72:	4b0d      	ldr	r3, [pc, #52]	; (8014ca8 <tcp_alloc+0xf8>)
 8014c74:	681a      	ldr	r2, [r3, #0]
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8014c7a:	4b0c      	ldr	r3, [pc, #48]	; (8014cac <tcp_alloc+0xfc>)
 8014c7c:	781a      	ldrb	r2, [r3, #0]
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8014c82:	68fb      	ldr	r3, [r7, #12]
 8014c84:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8014c88:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	4a08      	ldr	r2, [pc, #32]	; (8014cb0 <tcp_alloc+0x100>)
 8014c90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8014c94:	68fb      	ldr	r3, [r7, #12]
 8014c96:	4a07      	ldr	r2, [pc, #28]	; (8014cb4 <tcp_alloc+0x104>)
 8014c98:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8014c9c:	68fb      	ldr	r3, [r7, #12]
}
 8014c9e:	4618      	mov	r0, r3
 8014ca0:	3710      	adds	r7, #16
 8014ca2:	46bd      	mov	sp, r7
 8014ca4:	bd80      	pop	{r7, pc}
 8014ca6:	bf00      	nop
 8014ca8:	2000ddbc 	.word	0x2000ddbc
 8014cac:	2000ddd2 	.word	0x2000ddd2
 8014cb0:	08014969 	.word	0x08014969
 8014cb4:	006ddd00 	.word	0x006ddd00

08014cb8 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8014cb8:	b580      	push	{r7, lr}
 8014cba:	b084      	sub	sp, #16
 8014cbc:	af00      	add	r7, sp, #0
 8014cbe:	4603      	mov	r3, r0
 8014cc0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 8014cc2:	2040      	movs	r0, #64	; 0x40
 8014cc4:	f7ff ff74 	bl	8014bb0 <tcp_alloc>
 8014cc8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8014cca:	68fb      	ldr	r3, [r7, #12]
}
 8014ccc:	4618      	mov	r0, r3
 8014cce:	3710      	adds	r7, #16
 8014cd0:	46bd      	mov	sp, r7
 8014cd2:	bd80      	pop	{r7, pc}

08014cd4 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8014cd4:	b480      	push	{r7}
 8014cd6:	b083      	sub	sp, #12
 8014cd8:	af00      	add	r7, sp, #0
 8014cda:	6078      	str	r0, [r7, #4]
 8014cdc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	2b00      	cmp	r3, #0
 8014ce2:	d002      	beq.n	8014cea <tcp_arg+0x16>
    pcb->callback_arg = arg;
 8014ce4:	687b      	ldr	r3, [r7, #4]
 8014ce6:	683a      	ldr	r2, [r7, #0]
 8014ce8:	611a      	str	r2, [r3, #16]
  }
}
 8014cea:	bf00      	nop
 8014cec:	370c      	adds	r7, #12
 8014cee:	46bd      	mov	sp, r7
 8014cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cf4:	4770      	bx	lr
	...

08014cf8 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8014cf8:	b580      	push	{r7, lr}
 8014cfa:	b082      	sub	sp, #8
 8014cfc:	af00      	add	r7, sp, #0
 8014cfe:	6078      	str	r0, [r7, #4]
 8014d00:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	2b00      	cmp	r3, #0
 8014d06:	d00e      	beq.n	8014d26 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	7d1b      	ldrb	r3, [r3, #20]
 8014d0c:	2b01      	cmp	r3, #1
 8014d0e:	d106      	bne.n	8014d1e <tcp_recv+0x26>
 8014d10:	4b07      	ldr	r3, [pc, #28]	; (8014d30 <tcp_recv+0x38>)
 8014d12:	f240 72df 	movw	r2, #2015	; 0x7df
 8014d16:	4907      	ldr	r1, [pc, #28]	; (8014d34 <tcp_recv+0x3c>)
 8014d18:	4807      	ldr	r0, [pc, #28]	; (8014d38 <tcp_recv+0x40>)
 8014d1a:	f008 f9cb 	bl	801d0b4 <iprintf>
    pcb->recv = recv;
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	683a      	ldr	r2, [r7, #0]
 8014d22:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 8014d26:	bf00      	nop
 8014d28:	3708      	adds	r7, #8
 8014d2a:	46bd      	mov	sp, r7
 8014d2c:	bd80      	pop	{r7, pc}
 8014d2e:	bf00      	nop
 8014d30:	0801fcb4 	.word	0x0801fcb4
 8014d34:	08020250 	.word	0x08020250
 8014d38:	0801fcf8 	.word	0x0801fcf8

08014d3c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8014d3c:	b580      	push	{r7, lr}
 8014d3e:	b082      	sub	sp, #8
 8014d40:	af00      	add	r7, sp, #0
 8014d42:	6078      	str	r0, [r7, #4]
 8014d44:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	2b00      	cmp	r3, #0
 8014d4a:	d00e      	beq.n	8014d6a <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	7d1b      	ldrb	r3, [r3, #20]
 8014d50:	2b01      	cmp	r3, #1
 8014d52:	d106      	bne.n	8014d62 <tcp_sent+0x26>
 8014d54:	4b07      	ldr	r3, [pc, #28]	; (8014d74 <tcp_sent+0x38>)
 8014d56:	f240 72f3 	movw	r2, #2035	; 0x7f3
 8014d5a:	4907      	ldr	r1, [pc, #28]	; (8014d78 <tcp_sent+0x3c>)
 8014d5c:	4807      	ldr	r0, [pc, #28]	; (8014d7c <tcp_sent+0x40>)
 8014d5e:	f008 f9a9 	bl	801d0b4 <iprintf>
    pcb->sent = sent;
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	683a      	ldr	r2, [r7, #0]
 8014d66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8014d6a:	bf00      	nop
 8014d6c:	3708      	adds	r7, #8
 8014d6e:	46bd      	mov	sp, r7
 8014d70:	bd80      	pop	{r7, pc}
 8014d72:	bf00      	nop
 8014d74:	0801fcb4 	.word	0x0801fcb4
 8014d78:	08020278 	.word	0x08020278
 8014d7c:	0801fcf8 	.word	0x0801fcf8

08014d80 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8014d80:	b580      	push	{r7, lr}
 8014d82:	b082      	sub	sp, #8
 8014d84:	af00      	add	r7, sp, #0
 8014d86:	6078      	str	r0, [r7, #4]
 8014d88:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d00e      	beq.n	8014dae <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	7d1b      	ldrb	r3, [r3, #20]
 8014d94:	2b01      	cmp	r3, #1
 8014d96:	d106      	bne.n	8014da6 <tcp_err+0x26>
 8014d98:	4b07      	ldr	r3, [pc, #28]	; (8014db8 <tcp_err+0x38>)
 8014d9a:	f640 020d 	movw	r2, #2061	; 0x80d
 8014d9e:	4907      	ldr	r1, [pc, #28]	; (8014dbc <tcp_err+0x3c>)
 8014da0:	4807      	ldr	r0, [pc, #28]	; (8014dc0 <tcp_err+0x40>)
 8014da2:	f008 f987 	bl	801d0b4 <iprintf>
    pcb->errf = err;
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	683a      	ldr	r2, [r7, #0]
 8014daa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8014dae:	bf00      	nop
 8014db0:	3708      	adds	r7, #8
 8014db2:	46bd      	mov	sp, r7
 8014db4:	bd80      	pop	{r7, pc}
 8014db6:	bf00      	nop
 8014db8:	0801fcb4 	.word	0x0801fcb4
 8014dbc:	080202a0 	.word	0x080202a0
 8014dc0:	0801fcf8 	.word	0x0801fcf8

08014dc4 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 8014dc4:	b480      	push	{r7}
 8014dc6:	b085      	sub	sp, #20
 8014dc8:	af00      	add	r7, sp, #0
 8014dca:	6078      	str	r0, [r7, #4]
 8014dcc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d008      	beq.n	8014de6 <tcp_accept+0x22>
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	7d1b      	ldrb	r3, [r3, #20]
 8014dd8:	2b01      	cmp	r3, #1
 8014dda:	d104      	bne.n	8014de6 <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8014de0:	68fb      	ldr	r3, [r7, #12]
 8014de2:	683a      	ldr	r2, [r7, #0]
 8014de4:	619a      	str	r2, [r3, #24]
  }
}
 8014de6:	bf00      	nop
 8014de8:	3714      	adds	r7, #20
 8014dea:	46bd      	mov	sp, r7
 8014dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014df0:	4770      	bx	lr
	...

08014df4 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 8014df4:	b580      	push	{r7, lr}
 8014df6:	b084      	sub	sp, #16
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	60f8      	str	r0, [r7, #12]
 8014dfc:	60b9      	str	r1, [r7, #8]
 8014dfe:	4613      	mov	r3, r2
 8014e00:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 8014e02:	68fb      	ldr	r3, [r7, #12]
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d107      	bne.n	8014e18 <tcp_poll+0x24>
 8014e08:	4b0e      	ldr	r3, [pc, #56]	; (8014e44 <tcp_poll+0x50>)
 8014e0a:	f640 023d 	movw	r2, #2109	; 0x83d
 8014e0e:	490e      	ldr	r1, [pc, #56]	; (8014e48 <tcp_poll+0x54>)
 8014e10:	480e      	ldr	r0, [pc, #56]	; (8014e4c <tcp_poll+0x58>)
 8014e12:	f008 f94f 	bl	801d0b4 <iprintf>
 8014e16:	e011      	b.n	8014e3c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8014e18:	68fb      	ldr	r3, [r7, #12]
 8014e1a:	7d1b      	ldrb	r3, [r3, #20]
 8014e1c:	2b01      	cmp	r3, #1
 8014e1e:	d106      	bne.n	8014e2e <tcp_poll+0x3a>
 8014e20:	4b08      	ldr	r3, [pc, #32]	; (8014e44 <tcp_poll+0x50>)
 8014e22:	f640 023e 	movw	r2, #2110	; 0x83e
 8014e26:	490a      	ldr	r1, [pc, #40]	; (8014e50 <tcp_poll+0x5c>)
 8014e28:	4808      	ldr	r0, [pc, #32]	; (8014e4c <tcp_poll+0x58>)
 8014e2a:	f008 f943 	bl	801d0b4 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8014e2e:	68fb      	ldr	r3, [r7, #12]
 8014e30:	68ba      	ldr	r2, [r7, #8]
 8014e32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	79fa      	ldrb	r2, [r7, #7]
 8014e3a:	775a      	strb	r2, [r3, #29]
}
 8014e3c:	3710      	adds	r7, #16
 8014e3e:	46bd      	mov	sp, r7
 8014e40:	bd80      	pop	{r7, pc}
 8014e42:	bf00      	nop
 8014e44:	0801fcb4 	.word	0x0801fcb4
 8014e48:	080202c8 	.word	0x080202c8
 8014e4c:	0801fcf8 	.word	0x0801fcf8
 8014e50:	080202e0 	.word	0x080202e0

08014e54 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8014e54:	b580      	push	{r7, lr}
 8014e56:	b082      	sub	sp, #8
 8014e58:	af00      	add	r7, sp, #0
 8014e5a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	2b00      	cmp	r3, #0
 8014e60:	d107      	bne.n	8014e72 <tcp_pcb_purge+0x1e>
 8014e62:	4b21      	ldr	r3, [pc, #132]	; (8014ee8 <tcp_pcb_purge+0x94>)
 8014e64:	f640 0251 	movw	r2, #2129	; 0x851
 8014e68:	4920      	ldr	r1, [pc, #128]	; (8014eec <tcp_pcb_purge+0x98>)
 8014e6a:	4821      	ldr	r0, [pc, #132]	; (8014ef0 <tcp_pcb_purge+0x9c>)
 8014e6c:	f008 f922 	bl	801d0b4 <iprintf>
 8014e70:	e037      	b.n	8014ee2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	7d1b      	ldrb	r3, [r3, #20]
 8014e76:	2b00      	cmp	r3, #0
 8014e78:	d033      	beq.n	8014ee2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8014e7e:	2b0a      	cmp	r3, #10
 8014e80:	d02f      	beq.n	8014ee2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8014e86:	2b01      	cmp	r3, #1
 8014e88:	d02b      	beq.n	8014ee2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d007      	beq.n	8014ea2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014e96:	4618      	mov	r0, r3
 8014e98:	f7fe f958 	bl	801314c <pbuf_free>
      pcb->refused_data = NULL;
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	2200      	movs	r2, #0
 8014ea0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d002      	beq.n	8014eb0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8014eaa:	6878      	ldr	r0, [r7, #4]
 8014eac:	f000 f986 	bl	80151bc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014eb6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	f7ff fcf9 	bl	80148b4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014ec6:	4618      	mov	r0, r3
 8014ec8:	f7ff fcf4 	bl	80148b4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	2200      	movs	r2, #0
 8014ed0:	66da      	str	r2, [r3, #108]	; 0x6c
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	2200      	movs	r2, #0
 8014ede:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8014ee2:	3708      	adds	r7, #8
 8014ee4:	46bd      	mov	sp, r7
 8014ee6:	bd80      	pop	{r7, pc}
 8014ee8:	0801fcb4 	.word	0x0801fcb4
 8014eec:	08020300 	.word	0x08020300
 8014ef0:	0801fcf8 	.word	0x0801fcf8

08014ef4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8014ef4:	b580      	push	{r7, lr}
 8014ef6:	b084      	sub	sp, #16
 8014ef8:	af00      	add	r7, sp, #0
 8014efa:	6078      	str	r0, [r7, #4]
 8014efc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8014efe:	683b      	ldr	r3, [r7, #0]
 8014f00:	2b00      	cmp	r3, #0
 8014f02:	d106      	bne.n	8014f12 <tcp_pcb_remove+0x1e>
 8014f04:	4b3e      	ldr	r3, [pc, #248]	; (8015000 <tcp_pcb_remove+0x10c>)
 8014f06:	f640 0283 	movw	r2, #2179	; 0x883
 8014f0a:	493e      	ldr	r1, [pc, #248]	; (8015004 <tcp_pcb_remove+0x110>)
 8014f0c:	483e      	ldr	r0, [pc, #248]	; (8015008 <tcp_pcb_remove+0x114>)
 8014f0e:	f008 f8d1 	bl	801d0b4 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8014f12:	687b      	ldr	r3, [r7, #4]
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d106      	bne.n	8014f26 <tcp_pcb_remove+0x32>
 8014f18:	4b39      	ldr	r3, [pc, #228]	; (8015000 <tcp_pcb_remove+0x10c>)
 8014f1a:	f640 0284 	movw	r2, #2180	; 0x884
 8014f1e:	493b      	ldr	r1, [pc, #236]	; (801500c <tcp_pcb_remove+0x118>)
 8014f20:	4839      	ldr	r0, [pc, #228]	; (8015008 <tcp_pcb_remove+0x114>)
 8014f22:	f008 f8c7 	bl	801d0b4 <iprintf>

  TCP_RMV(pcblist, pcb);
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	681b      	ldr	r3, [r3, #0]
 8014f2a:	683a      	ldr	r2, [r7, #0]
 8014f2c:	429a      	cmp	r2, r3
 8014f2e:	d105      	bne.n	8014f3c <tcp_pcb_remove+0x48>
 8014f30:	687b      	ldr	r3, [r7, #4]
 8014f32:	681b      	ldr	r3, [r3, #0]
 8014f34:	68da      	ldr	r2, [r3, #12]
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	601a      	str	r2, [r3, #0]
 8014f3a:	e013      	b.n	8014f64 <tcp_pcb_remove+0x70>
 8014f3c:	687b      	ldr	r3, [r7, #4]
 8014f3e:	681b      	ldr	r3, [r3, #0]
 8014f40:	60fb      	str	r3, [r7, #12]
 8014f42:	e00c      	b.n	8014f5e <tcp_pcb_remove+0x6a>
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	68db      	ldr	r3, [r3, #12]
 8014f48:	683a      	ldr	r2, [r7, #0]
 8014f4a:	429a      	cmp	r2, r3
 8014f4c:	d104      	bne.n	8014f58 <tcp_pcb_remove+0x64>
 8014f4e:	683b      	ldr	r3, [r7, #0]
 8014f50:	68da      	ldr	r2, [r3, #12]
 8014f52:	68fb      	ldr	r3, [r7, #12]
 8014f54:	60da      	str	r2, [r3, #12]
 8014f56:	e005      	b.n	8014f64 <tcp_pcb_remove+0x70>
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	68db      	ldr	r3, [r3, #12]
 8014f5c:	60fb      	str	r3, [r7, #12]
 8014f5e:	68fb      	ldr	r3, [r7, #12]
 8014f60:	2b00      	cmp	r3, #0
 8014f62:	d1ef      	bne.n	8014f44 <tcp_pcb_remove+0x50>
 8014f64:	683b      	ldr	r3, [r7, #0]
 8014f66:	2200      	movs	r2, #0
 8014f68:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8014f6a:	6838      	ldr	r0, [r7, #0]
 8014f6c:	f7ff ff72 	bl	8014e54 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8014f70:	683b      	ldr	r3, [r7, #0]
 8014f72:	7d1b      	ldrb	r3, [r3, #20]
 8014f74:	2b0a      	cmp	r3, #10
 8014f76:	d013      	beq.n	8014fa0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8014f78:	683b      	ldr	r3, [r7, #0]
 8014f7a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8014f7c:	2b01      	cmp	r3, #1
 8014f7e:	d00f      	beq.n	8014fa0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8014f80:	683b      	ldr	r3, [r7, #0]
 8014f82:	8b5b      	ldrh	r3, [r3, #26]
 8014f84:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d009      	beq.n	8014fa0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8014f8c:	683b      	ldr	r3, [r7, #0]
 8014f8e:	8b5b      	ldrh	r3, [r3, #26]
 8014f90:	f043 0302 	orr.w	r3, r3, #2
 8014f94:	b29a      	uxth	r2, r3
 8014f96:	683b      	ldr	r3, [r7, #0]
 8014f98:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014f9a:	6838      	ldr	r0, [r7, #0]
 8014f9c:	f003 fbc6 	bl	801872c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8014fa0:	683b      	ldr	r3, [r7, #0]
 8014fa2:	7d1b      	ldrb	r3, [r3, #20]
 8014fa4:	2b01      	cmp	r3, #1
 8014fa6:	d020      	beq.n	8014fea <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8014fa8:	683b      	ldr	r3, [r7, #0]
 8014faa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	d006      	beq.n	8014fbe <tcp_pcb_remove+0xca>
 8014fb0:	4b13      	ldr	r3, [pc, #76]	; (8015000 <tcp_pcb_remove+0x10c>)
 8014fb2:	f640 0293 	movw	r2, #2195	; 0x893
 8014fb6:	4916      	ldr	r1, [pc, #88]	; (8015010 <tcp_pcb_remove+0x11c>)
 8014fb8:	4813      	ldr	r0, [pc, #76]	; (8015008 <tcp_pcb_remove+0x114>)
 8014fba:	f008 f87b 	bl	801d0b4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8014fbe:	683b      	ldr	r3, [r7, #0]
 8014fc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014fc2:	2b00      	cmp	r3, #0
 8014fc4:	d006      	beq.n	8014fd4 <tcp_pcb_remove+0xe0>
 8014fc6:	4b0e      	ldr	r3, [pc, #56]	; (8015000 <tcp_pcb_remove+0x10c>)
 8014fc8:	f640 0294 	movw	r2, #2196	; 0x894
 8014fcc:	4911      	ldr	r1, [pc, #68]	; (8015014 <tcp_pcb_remove+0x120>)
 8014fce:	480e      	ldr	r0, [pc, #56]	; (8015008 <tcp_pcb_remove+0x114>)
 8014fd0:	f008 f870 	bl	801d0b4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8014fd4:	683b      	ldr	r3, [r7, #0]
 8014fd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014fd8:	2b00      	cmp	r3, #0
 8014fda:	d006      	beq.n	8014fea <tcp_pcb_remove+0xf6>
 8014fdc:	4b08      	ldr	r3, [pc, #32]	; (8015000 <tcp_pcb_remove+0x10c>)
 8014fde:	f640 0296 	movw	r2, #2198	; 0x896
 8014fe2:	490d      	ldr	r1, [pc, #52]	; (8015018 <tcp_pcb_remove+0x124>)
 8014fe4:	4808      	ldr	r0, [pc, #32]	; (8015008 <tcp_pcb_remove+0x114>)
 8014fe6:	f008 f865 	bl	801d0b4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8014fea:	683b      	ldr	r3, [r7, #0]
 8014fec:	2200      	movs	r2, #0
 8014fee:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8014ff0:	683b      	ldr	r3, [r7, #0]
 8014ff2:	2200      	movs	r2, #0
 8014ff4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8014ff6:	bf00      	nop
 8014ff8:	3710      	adds	r7, #16
 8014ffa:	46bd      	mov	sp, r7
 8014ffc:	bd80      	pop	{r7, pc}
 8014ffe:	bf00      	nop
 8015000:	0801fcb4 	.word	0x0801fcb4
 8015004:	0802031c 	.word	0x0802031c
 8015008:	0801fcf8 	.word	0x0801fcf8
 801500c:	08020338 	.word	0x08020338
 8015010:	08020358 	.word	0x08020358
 8015014:	08020370 	.word	0x08020370
 8015018:	0802038c 	.word	0x0802038c

0801501c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801501c:	b580      	push	{r7, lr}
 801501e:	b082      	sub	sp, #8
 8015020:	af00      	add	r7, sp, #0
 8015022:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	2b00      	cmp	r3, #0
 8015028:	d106      	bne.n	8015038 <tcp_next_iss+0x1c>
 801502a:	4b0a      	ldr	r3, [pc, #40]	; (8015054 <tcp_next_iss+0x38>)
 801502c:	f640 02af 	movw	r2, #2223	; 0x8af
 8015030:	4909      	ldr	r1, [pc, #36]	; (8015058 <tcp_next_iss+0x3c>)
 8015032:	480a      	ldr	r0, [pc, #40]	; (801505c <tcp_next_iss+0x40>)
 8015034:	f008 f83e 	bl	801d0b4 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8015038:	4b09      	ldr	r3, [pc, #36]	; (8015060 <tcp_next_iss+0x44>)
 801503a:	681a      	ldr	r2, [r3, #0]
 801503c:	4b09      	ldr	r3, [pc, #36]	; (8015064 <tcp_next_iss+0x48>)
 801503e:	681b      	ldr	r3, [r3, #0]
 8015040:	4413      	add	r3, r2
 8015042:	4a07      	ldr	r2, [pc, #28]	; (8015060 <tcp_next_iss+0x44>)
 8015044:	6013      	str	r3, [r2, #0]
  return iss;
 8015046:	4b06      	ldr	r3, [pc, #24]	; (8015060 <tcp_next_iss+0x44>)
 8015048:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801504a:	4618      	mov	r0, r3
 801504c:	3708      	adds	r7, #8
 801504e:	46bd      	mov	sp, r7
 8015050:	bd80      	pop	{r7, pc}
 8015052:	bf00      	nop
 8015054:	0801fcb4 	.word	0x0801fcb4
 8015058:	080203a4 	.word	0x080203a4
 801505c:	0801fcf8 	.word	0x0801fcf8
 8015060:	200002f0 	.word	0x200002f0
 8015064:	2000ddbc 	.word	0x2000ddbc

08015068 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8015068:	b580      	push	{r7, lr}
 801506a:	b086      	sub	sp, #24
 801506c:	af00      	add	r7, sp, #0
 801506e:	4603      	mov	r3, r0
 8015070:	60b9      	str	r1, [r7, #8]
 8015072:	607a      	str	r2, [r7, #4]
 8015074:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8015076:	687b      	ldr	r3, [r7, #4]
 8015078:	2b00      	cmp	r3, #0
 801507a:	d106      	bne.n	801508a <tcp_eff_send_mss_netif+0x22>
 801507c:	4b14      	ldr	r3, [pc, #80]	; (80150d0 <tcp_eff_send_mss_netif+0x68>)
 801507e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8015082:	4914      	ldr	r1, [pc, #80]	; (80150d4 <tcp_eff_send_mss_netif+0x6c>)
 8015084:	4814      	ldr	r0, [pc, #80]	; (80150d8 <tcp_eff_send_mss_netif+0x70>)
 8015086:	f008 f815 	bl	801d0b4 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801508a:	68bb      	ldr	r3, [r7, #8]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d101      	bne.n	8015094 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8015090:	89fb      	ldrh	r3, [r7, #14]
 8015092:	e019      	b.n	80150c8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8015094:	68bb      	ldr	r3, [r7, #8]
 8015096:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015098:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801509a:	8afb      	ldrh	r3, [r7, #22]
 801509c:	2b00      	cmp	r3, #0
 801509e:	d012      	beq.n	80150c6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80150a0:	2328      	movs	r3, #40	; 0x28
 80150a2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80150a4:	8afa      	ldrh	r2, [r7, #22]
 80150a6:	8abb      	ldrh	r3, [r7, #20]
 80150a8:	429a      	cmp	r2, r3
 80150aa:	d904      	bls.n	80150b6 <tcp_eff_send_mss_netif+0x4e>
 80150ac:	8afa      	ldrh	r2, [r7, #22]
 80150ae:	8abb      	ldrh	r3, [r7, #20]
 80150b0:	1ad3      	subs	r3, r2, r3
 80150b2:	b29b      	uxth	r3, r3
 80150b4:	e000      	b.n	80150b8 <tcp_eff_send_mss_netif+0x50>
 80150b6:	2300      	movs	r3, #0
 80150b8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80150ba:	8a7a      	ldrh	r2, [r7, #18]
 80150bc:	89fb      	ldrh	r3, [r7, #14]
 80150be:	4293      	cmp	r3, r2
 80150c0:	bf28      	it	cs
 80150c2:	4613      	movcs	r3, r2
 80150c4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80150c6:	89fb      	ldrh	r3, [r7, #14]
}
 80150c8:	4618      	mov	r0, r3
 80150ca:	3718      	adds	r7, #24
 80150cc:	46bd      	mov	sp, r7
 80150ce:	bd80      	pop	{r7, pc}
 80150d0:	0801fcb4 	.word	0x0801fcb4
 80150d4:	080203c0 	.word	0x080203c0
 80150d8:	0801fcf8 	.word	0x0801fcf8

080150dc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80150dc:	b580      	push	{r7, lr}
 80150de:	b084      	sub	sp, #16
 80150e0:	af00      	add	r7, sp, #0
 80150e2:	6078      	str	r0, [r7, #4]
 80150e4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80150e6:	683b      	ldr	r3, [r7, #0]
 80150e8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80150ea:	687b      	ldr	r3, [r7, #4]
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d119      	bne.n	8015124 <tcp_netif_ip_addr_changed_pcblist+0x48>
 80150f0:	4b10      	ldr	r3, [pc, #64]	; (8015134 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 80150f2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 80150f6:	4910      	ldr	r1, [pc, #64]	; (8015138 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 80150f8:	4810      	ldr	r0, [pc, #64]	; (801513c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 80150fa:	f007 ffdb 	bl	801d0b4 <iprintf>

  while (pcb != NULL) {
 80150fe:	e011      	b.n	8015124 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8015100:	68fb      	ldr	r3, [r7, #12]
 8015102:	681a      	ldr	r2, [r3, #0]
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	429a      	cmp	r2, r3
 801510a:	d108      	bne.n	801511e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	68db      	ldr	r3, [r3, #12]
 8015110:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8015112:	68f8      	ldr	r0, [r7, #12]
 8015114:	f7fe fe1a 	bl	8013d4c <tcp_abort>
      pcb = next;
 8015118:	68bb      	ldr	r3, [r7, #8]
 801511a:	60fb      	str	r3, [r7, #12]
 801511c:	e002      	b.n	8015124 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	68db      	ldr	r3, [r3, #12]
 8015122:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8015124:	68fb      	ldr	r3, [r7, #12]
 8015126:	2b00      	cmp	r3, #0
 8015128:	d1ea      	bne.n	8015100 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801512a:	bf00      	nop
 801512c:	bf00      	nop
 801512e:	3710      	adds	r7, #16
 8015130:	46bd      	mov	sp, r7
 8015132:	bd80      	pop	{r7, pc}
 8015134:	0801fcb4 	.word	0x0801fcb4
 8015138:	080203e8 	.word	0x080203e8
 801513c:	0801fcf8 	.word	0x0801fcf8

08015140 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8015140:	b580      	push	{r7, lr}
 8015142:	b084      	sub	sp, #16
 8015144:	af00      	add	r7, sp, #0
 8015146:	6078      	str	r0, [r7, #4]
 8015148:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	2b00      	cmp	r3, #0
 801514e:	d02a      	beq.n	80151a6 <tcp_netif_ip_addr_changed+0x66>
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	2b00      	cmp	r3, #0
 8015156:	d026      	beq.n	80151a6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8015158:	4b15      	ldr	r3, [pc, #84]	; (80151b0 <tcp_netif_ip_addr_changed+0x70>)
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	4619      	mov	r1, r3
 801515e:	6878      	ldr	r0, [r7, #4]
 8015160:	f7ff ffbc 	bl	80150dc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8015164:	4b13      	ldr	r3, [pc, #76]	; (80151b4 <tcp_netif_ip_addr_changed+0x74>)
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	4619      	mov	r1, r3
 801516a:	6878      	ldr	r0, [r7, #4]
 801516c:	f7ff ffb6 	bl	80150dc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8015170:	683b      	ldr	r3, [r7, #0]
 8015172:	2b00      	cmp	r3, #0
 8015174:	d017      	beq.n	80151a6 <tcp_netif_ip_addr_changed+0x66>
 8015176:	683b      	ldr	r3, [r7, #0]
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	2b00      	cmp	r3, #0
 801517c:	d013      	beq.n	80151a6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801517e:	4b0e      	ldr	r3, [pc, #56]	; (80151b8 <tcp_netif_ip_addr_changed+0x78>)
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	60fb      	str	r3, [r7, #12]
 8015184:	e00c      	b.n	80151a0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8015186:	68fb      	ldr	r3, [r7, #12]
 8015188:	681a      	ldr	r2, [r3, #0]
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	429a      	cmp	r2, r3
 8015190:	d103      	bne.n	801519a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8015192:	683b      	ldr	r3, [r7, #0]
 8015194:	681a      	ldr	r2, [r3, #0]
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801519a:	68fb      	ldr	r3, [r7, #12]
 801519c:	68db      	ldr	r3, [r3, #12]
 801519e:	60fb      	str	r3, [r7, #12]
 80151a0:	68fb      	ldr	r3, [r7, #12]
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d1ef      	bne.n	8015186 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80151a6:	bf00      	nop
 80151a8:	3710      	adds	r7, #16
 80151aa:	46bd      	mov	sp, r7
 80151ac:	bd80      	pop	{r7, pc}
 80151ae:	bf00      	nop
 80151b0:	2000ddc8 	.word	0x2000ddc8
 80151b4:	2000ddc0 	.word	0x2000ddc0
 80151b8:	2000ddc4 	.word	0x2000ddc4

080151bc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80151bc:	b580      	push	{r7, lr}
 80151be:	b082      	sub	sp, #8
 80151c0:	af00      	add	r7, sp, #0
 80151c2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80151c4:	687b      	ldr	r3, [r7, #4]
 80151c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d007      	beq.n	80151dc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80151d0:	4618      	mov	r0, r3
 80151d2:	f7ff fb6f 	bl	80148b4 <tcp_segs_free>
    pcb->ooseq = NULL;
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	2200      	movs	r2, #0
 80151da:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80151dc:	bf00      	nop
 80151de:	3708      	adds	r7, #8
 80151e0:	46bd      	mov	sp, r7
 80151e2:	bd80      	pop	{r7, pc}

080151e4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80151e4:	b590      	push	{r4, r7, lr}
 80151e6:	b08d      	sub	sp, #52	; 0x34
 80151e8:	af04      	add	r7, sp, #16
 80151ea:	6078      	str	r0, [r7, #4]
 80151ec:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80151ee:	687b      	ldr	r3, [r7, #4]
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d105      	bne.n	8015200 <tcp_input+0x1c>
 80151f4:	4b9b      	ldr	r3, [pc, #620]	; (8015464 <tcp_input+0x280>)
 80151f6:	2283      	movs	r2, #131	; 0x83
 80151f8:	499b      	ldr	r1, [pc, #620]	; (8015468 <tcp_input+0x284>)
 80151fa:	489c      	ldr	r0, [pc, #624]	; (801546c <tcp_input+0x288>)
 80151fc:	f007 ff5a 	bl	801d0b4 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	685b      	ldr	r3, [r3, #4]
 8015204:	4a9a      	ldr	r2, [pc, #616]	; (8015470 <tcp_input+0x28c>)
 8015206:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	895b      	ldrh	r3, [r3, #10]
 801520c:	2b13      	cmp	r3, #19
 801520e:	f240 83d1 	bls.w	80159b4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8015212:	4b98      	ldr	r3, [pc, #608]	; (8015474 <tcp_input+0x290>)
 8015214:	695b      	ldr	r3, [r3, #20]
 8015216:	4a97      	ldr	r2, [pc, #604]	; (8015474 <tcp_input+0x290>)
 8015218:	6812      	ldr	r2, [r2, #0]
 801521a:	4611      	mov	r1, r2
 801521c:	4618      	mov	r0, r3
 801521e:	f006 fbcf 	bl	801b9c0 <ip4_addr_isbroadcast_u32>
 8015222:	4603      	mov	r3, r0
 8015224:	2b00      	cmp	r3, #0
 8015226:	f040 83c7 	bne.w	80159b8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801522a:	4b92      	ldr	r3, [pc, #584]	; (8015474 <tcp_input+0x290>)
 801522c:	695b      	ldr	r3, [r3, #20]
 801522e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8015232:	2be0      	cmp	r3, #224	; 0xe0
 8015234:	f000 83c0 	beq.w	80159b8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8015238:	4b8d      	ldr	r3, [pc, #564]	; (8015470 <tcp_input+0x28c>)
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	899b      	ldrh	r3, [r3, #12]
 801523e:	b29b      	uxth	r3, r3
 8015240:	4618      	mov	r0, r3
 8015242:	f7fc fc3b 	bl	8011abc <lwip_htons>
 8015246:	4603      	mov	r3, r0
 8015248:	0b1b      	lsrs	r3, r3, #12
 801524a:	b29b      	uxth	r3, r3
 801524c:	b2db      	uxtb	r3, r3
 801524e:	009b      	lsls	r3, r3, #2
 8015250:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8015252:	7cbb      	ldrb	r3, [r7, #18]
 8015254:	2b13      	cmp	r3, #19
 8015256:	f240 83b1 	bls.w	80159bc <tcp_input+0x7d8>
 801525a:	7cbb      	ldrb	r3, [r7, #18]
 801525c:	b29a      	uxth	r2, r3
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	891b      	ldrh	r3, [r3, #8]
 8015262:	429a      	cmp	r2, r3
 8015264:	f200 83aa 	bhi.w	80159bc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8015268:	7cbb      	ldrb	r3, [r7, #18]
 801526a:	b29b      	uxth	r3, r3
 801526c:	3b14      	subs	r3, #20
 801526e:	b29a      	uxth	r2, r3
 8015270:	4b81      	ldr	r3, [pc, #516]	; (8015478 <tcp_input+0x294>)
 8015272:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8015274:	4b81      	ldr	r3, [pc, #516]	; (801547c <tcp_input+0x298>)
 8015276:	2200      	movs	r2, #0
 8015278:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	895a      	ldrh	r2, [r3, #10]
 801527e:	7cbb      	ldrb	r3, [r7, #18]
 8015280:	b29b      	uxth	r3, r3
 8015282:	429a      	cmp	r2, r3
 8015284:	d309      	bcc.n	801529a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8015286:	4b7c      	ldr	r3, [pc, #496]	; (8015478 <tcp_input+0x294>)
 8015288:	881a      	ldrh	r2, [r3, #0]
 801528a:	4b7d      	ldr	r3, [pc, #500]	; (8015480 <tcp_input+0x29c>)
 801528c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801528e:	7cbb      	ldrb	r3, [r7, #18]
 8015290:	4619      	mov	r1, r3
 8015292:	6878      	ldr	r0, [r7, #4]
 8015294:	f7fd fed4 	bl	8013040 <pbuf_remove_header>
 8015298:	e04e      	b.n	8015338 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801529a:	687b      	ldr	r3, [r7, #4]
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	2b00      	cmp	r3, #0
 80152a0:	d105      	bne.n	80152ae <tcp_input+0xca>
 80152a2:	4b70      	ldr	r3, [pc, #448]	; (8015464 <tcp_input+0x280>)
 80152a4:	22c2      	movs	r2, #194	; 0xc2
 80152a6:	4977      	ldr	r1, [pc, #476]	; (8015484 <tcp_input+0x2a0>)
 80152a8:	4870      	ldr	r0, [pc, #448]	; (801546c <tcp_input+0x288>)
 80152aa:	f007 ff03 	bl	801d0b4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80152ae:	2114      	movs	r1, #20
 80152b0:	6878      	ldr	r0, [r7, #4]
 80152b2:	f7fd fec5 	bl	8013040 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	895a      	ldrh	r2, [r3, #10]
 80152ba:	4b71      	ldr	r3, [pc, #452]	; (8015480 <tcp_input+0x29c>)
 80152bc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80152be:	4b6e      	ldr	r3, [pc, #440]	; (8015478 <tcp_input+0x294>)
 80152c0:	881a      	ldrh	r2, [r3, #0]
 80152c2:	4b6f      	ldr	r3, [pc, #444]	; (8015480 <tcp_input+0x29c>)
 80152c4:	881b      	ldrh	r3, [r3, #0]
 80152c6:	1ad3      	subs	r3, r2, r3
 80152c8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80152ca:	4b6d      	ldr	r3, [pc, #436]	; (8015480 <tcp_input+0x29c>)
 80152cc:	881b      	ldrh	r3, [r3, #0]
 80152ce:	4619      	mov	r1, r3
 80152d0:	6878      	ldr	r0, [r7, #4]
 80152d2:	f7fd feb5 	bl	8013040 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	681b      	ldr	r3, [r3, #0]
 80152da:	895b      	ldrh	r3, [r3, #10]
 80152dc:	8a3a      	ldrh	r2, [r7, #16]
 80152de:	429a      	cmp	r2, r3
 80152e0:	f200 836e 	bhi.w	80159c0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	681b      	ldr	r3, [r3, #0]
 80152e8:	685b      	ldr	r3, [r3, #4]
 80152ea:	4a64      	ldr	r2, [pc, #400]	; (801547c <tcp_input+0x298>)
 80152ec:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	681b      	ldr	r3, [r3, #0]
 80152f2:	8a3a      	ldrh	r2, [r7, #16]
 80152f4:	4611      	mov	r1, r2
 80152f6:	4618      	mov	r0, r3
 80152f8:	f7fd fea2 	bl	8013040 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	891a      	ldrh	r2, [r3, #8]
 8015300:	8a3b      	ldrh	r3, [r7, #16]
 8015302:	1ad3      	subs	r3, r2, r3
 8015304:	b29a      	uxth	r2, r3
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	895b      	ldrh	r3, [r3, #10]
 801530e:	2b00      	cmp	r3, #0
 8015310:	d005      	beq.n	801531e <tcp_input+0x13a>
 8015312:	4b54      	ldr	r3, [pc, #336]	; (8015464 <tcp_input+0x280>)
 8015314:	22df      	movs	r2, #223	; 0xdf
 8015316:	495c      	ldr	r1, [pc, #368]	; (8015488 <tcp_input+0x2a4>)
 8015318:	4854      	ldr	r0, [pc, #336]	; (801546c <tcp_input+0x288>)
 801531a:	f007 fecb 	bl	801d0b4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	891a      	ldrh	r2, [r3, #8]
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	891b      	ldrh	r3, [r3, #8]
 8015328:	429a      	cmp	r2, r3
 801532a:	d005      	beq.n	8015338 <tcp_input+0x154>
 801532c:	4b4d      	ldr	r3, [pc, #308]	; (8015464 <tcp_input+0x280>)
 801532e:	22e0      	movs	r2, #224	; 0xe0
 8015330:	4956      	ldr	r1, [pc, #344]	; (801548c <tcp_input+0x2a8>)
 8015332:	484e      	ldr	r0, [pc, #312]	; (801546c <tcp_input+0x288>)
 8015334:	f007 febe 	bl	801d0b4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8015338:	4b4d      	ldr	r3, [pc, #308]	; (8015470 <tcp_input+0x28c>)
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	881b      	ldrh	r3, [r3, #0]
 801533e:	b29b      	uxth	r3, r3
 8015340:	4a4b      	ldr	r2, [pc, #300]	; (8015470 <tcp_input+0x28c>)
 8015342:	6814      	ldr	r4, [r2, #0]
 8015344:	4618      	mov	r0, r3
 8015346:	f7fc fbb9 	bl	8011abc <lwip_htons>
 801534a:	4603      	mov	r3, r0
 801534c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801534e:	4b48      	ldr	r3, [pc, #288]	; (8015470 <tcp_input+0x28c>)
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	885b      	ldrh	r3, [r3, #2]
 8015354:	b29b      	uxth	r3, r3
 8015356:	4a46      	ldr	r2, [pc, #280]	; (8015470 <tcp_input+0x28c>)
 8015358:	6814      	ldr	r4, [r2, #0]
 801535a:	4618      	mov	r0, r3
 801535c:	f7fc fbae 	bl	8011abc <lwip_htons>
 8015360:	4603      	mov	r3, r0
 8015362:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8015364:	4b42      	ldr	r3, [pc, #264]	; (8015470 <tcp_input+0x28c>)
 8015366:	681b      	ldr	r3, [r3, #0]
 8015368:	685b      	ldr	r3, [r3, #4]
 801536a:	4a41      	ldr	r2, [pc, #260]	; (8015470 <tcp_input+0x28c>)
 801536c:	6814      	ldr	r4, [r2, #0]
 801536e:	4618      	mov	r0, r3
 8015370:	f7fc fbb9 	bl	8011ae6 <lwip_htonl>
 8015374:	4603      	mov	r3, r0
 8015376:	6063      	str	r3, [r4, #4]
 8015378:	6863      	ldr	r3, [r4, #4]
 801537a:	4a45      	ldr	r2, [pc, #276]	; (8015490 <tcp_input+0x2ac>)
 801537c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801537e:	4b3c      	ldr	r3, [pc, #240]	; (8015470 <tcp_input+0x28c>)
 8015380:	681b      	ldr	r3, [r3, #0]
 8015382:	689b      	ldr	r3, [r3, #8]
 8015384:	4a3a      	ldr	r2, [pc, #232]	; (8015470 <tcp_input+0x28c>)
 8015386:	6814      	ldr	r4, [r2, #0]
 8015388:	4618      	mov	r0, r3
 801538a:	f7fc fbac 	bl	8011ae6 <lwip_htonl>
 801538e:	4603      	mov	r3, r0
 8015390:	60a3      	str	r3, [r4, #8]
 8015392:	68a3      	ldr	r3, [r4, #8]
 8015394:	4a3f      	ldr	r2, [pc, #252]	; (8015494 <tcp_input+0x2b0>)
 8015396:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8015398:	4b35      	ldr	r3, [pc, #212]	; (8015470 <tcp_input+0x28c>)
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	89db      	ldrh	r3, [r3, #14]
 801539e:	b29b      	uxth	r3, r3
 80153a0:	4a33      	ldr	r2, [pc, #204]	; (8015470 <tcp_input+0x28c>)
 80153a2:	6814      	ldr	r4, [r2, #0]
 80153a4:	4618      	mov	r0, r3
 80153a6:	f7fc fb89 	bl	8011abc <lwip_htons>
 80153aa:	4603      	mov	r3, r0
 80153ac:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80153ae:	4b30      	ldr	r3, [pc, #192]	; (8015470 <tcp_input+0x28c>)
 80153b0:	681b      	ldr	r3, [r3, #0]
 80153b2:	899b      	ldrh	r3, [r3, #12]
 80153b4:	b29b      	uxth	r3, r3
 80153b6:	4618      	mov	r0, r3
 80153b8:	f7fc fb80 	bl	8011abc <lwip_htons>
 80153bc:	4603      	mov	r3, r0
 80153be:	b2db      	uxtb	r3, r3
 80153c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80153c4:	b2da      	uxtb	r2, r3
 80153c6:	4b34      	ldr	r3, [pc, #208]	; (8015498 <tcp_input+0x2b4>)
 80153c8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	891a      	ldrh	r2, [r3, #8]
 80153ce:	4b33      	ldr	r3, [pc, #204]	; (801549c <tcp_input+0x2b8>)
 80153d0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80153d2:	4b31      	ldr	r3, [pc, #196]	; (8015498 <tcp_input+0x2b4>)
 80153d4:	781b      	ldrb	r3, [r3, #0]
 80153d6:	f003 0303 	and.w	r3, r3, #3
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d00c      	beq.n	80153f8 <tcp_input+0x214>
    tcplen++;
 80153de:	4b2f      	ldr	r3, [pc, #188]	; (801549c <tcp_input+0x2b8>)
 80153e0:	881b      	ldrh	r3, [r3, #0]
 80153e2:	3301      	adds	r3, #1
 80153e4:	b29a      	uxth	r2, r3
 80153e6:	4b2d      	ldr	r3, [pc, #180]	; (801549c <tcp_input+0x2b8>)
 80153e8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	891a      	ldrh	r2, [r3, #8]
 80153ee:	4b2b      	ldr	r3, [pc, #172]	; (801549c <tcp_input+0x2b8>)
 80153f0:	881b      	ldrh	r3, [r3, #0]
 80153f2:	429a      	cmp	r2, r3
 80153f4:	f200 82e6 	bhi.w	80159c4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80153f8:	2300      	movs	r3, #0
 80153fa:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80153fc:	4b28      	ldr	r3, [pc, #160]	; (80154a0 <tcp_input+0x2bc>)
 80153fe:	681b      	ldr	r3, [r3, #0]
 8015400:	61fb      	str	r3, [r7, #28]
 8015402:	e09d      	b.n	8015540 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8015404:	69fb      	ldr	r3, [r7, #28]
 8015406:	7d1b      	ldrb	r3, [r3, #20]
 8015408:	2b00      	cmp	r3, #0
 801540a:	d105      	bne.n	8015418 <tcp_input+0x234>
 801540c:	4b15      	ldr	r3, [pc, #84]	; (8015464 <tcp_input+0x280>)
 801540e:	22fb      	movs	r2, #251	; 0xfb
 8015410:	4924      	ldr	r1, [pc, #144]	; (80154a4 <tcp_input+0x2c0>)
 8015412:	4816      	ldr	r0, [pc, #88]	; (801546c <tcp_input+0x288>)
 8015414:	f007 fe4e 	bl	801d0b4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8015418:	69fb      	ldr	r3, [r7, #28]
 801541a:	7d1b      	ldrb	r3, [r3, #20]
 801541c:	2b0a      	cmp	r3, #10
 801541e:	d105      	bne.n	801542c <tcp_input+0x248>
 8015420:	4b10      	ldr	r3, [pc, #64]	; (8015464 <tcp_input+0x280>)
 8015422:	22fc      	movs	r2, #252	; 0xfc
 8015424:	4920      	ldr	r1, [pc, #128]	; (80154a8 <tcp_input+0x2c4>)
 8015426:	4811      	ldr	r0, [pc, #68]	; (801546c <tcp_input+0x288>)
 8015428:	f007 fe44 	bl	801d0b4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801542c:	69fb      	ldr	r3, [r7, #28]
 801542e:	7d1b      	ldrb	r3, [r3, #20]
 8015430:	2b01      	cmp	r3, #1
 8015432:	d105      	bne.n	8015440 <tcp_input+0x25c>
 8015434:	4b0b      	ldr	r3, [pc, #44]	; (8015464 <tcp_input+0x280>)
 8015436:	22fd      	movs	r2, #253	; 0xfd
 8015438:	491c      	ldr	r1, [pc, #112]	; (80154ac <tcp_input+0x2c8>)
 801543a:	480c      	ldr	r0, [pc, #48]	; (801546c <tcp_input+0x288>)
 801543c:	f007 fe3a 	bl	801d0b4 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015440:	69fb      	ldr	r3, [r7, #28]
 8015442:	7a1b      	ldrb	r3, [r3, #8]
 8015444:	2b00      	cmp	r3, #0
 8015446:	d033      	beq.n	80154b0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015448:	69fb      	ldr	r3, [r7, #28]
 801544a:	7a1a      	ldrb	r2, [r3, #8]
 801544c:	4b09      	ldr	r3, [pc, #36]	; (8015474 <tcp_input+0x290>)
 801544e:	685b      	ldr	r3, [r3, #4]
 8015450:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015454:	3301      	adds	r3, #1
 8015456:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015458:	429a      	cmp	r2, r3
 801545a:	d029      	beq.n	80154b0 <tcp_input+0x2cc>
      prev = pcb;
 801545c:	69fb      	ldr	r3, [r7, #28]
 801545e:	61bb      	str	r3, [r7, #24]
      continue;
 8015460:	e06b      	b.n	801553a <tcp_input+0x356>
 8015462:	bf00      	nop
 8015464:	0802041c 	.word	0x0802041c
 8015468:	08020450 	.word	0x08020450
 801546c:	08020468 	.word	0x08020468
 8015470:	2000dde4 	.word	0x2000dde4
 8015474:	2000a668 	.word	0x2000a668
 8015478:	2000dde8 	.word	0x2000dde8
 801547c:	2000ddec 	.word	0x2000ddec
 8015480:	2000ddea 	.word	0x2000ddea
 8015484:	08020490 	.word	0x08020490
 8015488:	080204a0 	.word	0x080204a0
 801548c:	080204ac 	.word	0x080204ac
 8015490:	2000ddf4 	.word	0x2000ddf4
 8015494:	2000ddf8 	.word	0x2000ddf8
 8015498:	2000de00 	.word	0x2000de00
 801549c:	2000ddfe 	.word	0x2000ddfe
 80154a0:	2000ddc8 	.word	0x2000ddc8
 80154a4:	080204cc 	.word	0x080204cc
 80154a8:	080204f4 	.word	0x080204f4
 80154ac:	08020520 	.word	0x08020520
    }

    if (pcb->remote_port == tcphdr->src &&
 80154b0:	69fb      	ldr	r3, [r7, #28]
 80154b2:	8b1a      	ldrh	r2, [r3, #24]
 80154b4:	4b72      	ldr	r3, [pc, #456]	; (8015680 <tcp_input+0x49c>)
 80154b6:	681b      	ldr	r3, [r3, #0]
 80154b8:	881b      	ldrh	r3, [r3, #0]
 80154ba:	b29b      	uxth	r3, r3
 80154bc:	429a      	cmp	r2, r3
 80154be:	d13a      	bne.n	8015536 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80154c0:	69fb      	ldr	r3, [r7, #28]
 80154c2:	8ada      	ldrh	r2, [r3, #22]
 80154c4:	4b6e      	ldr	r3, [pc, #440]	; (8015680 <tcp_input+0x49c>)
 80154c6:	681b      	ldr	r3, [r3, #0]
 80154c8:	885b      	ldrh	r3, [r3, #2]
 80154ca:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80154cc:	429a      	cmp	r2, r3
 80154ce:	d132      	bne.n	8015536 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80154d0:	69fb      	ldr	r3, [r7, #28]
 80154d2:	685a      	ldr	r2, [r3, #4]
 80154d4:	4b6b      	ldr	r3, [pc, #428]	; (8015684 <tcp_input+0x4a0>)
 80154d6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 80154d8:	429a      	cmp	r2, r3
 80154da:	d12c      	bne.n	8015536 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80154dc:	69fb      	ldr	r3, [r7, #28]
 80154de:	681a      	ldr	r2, [r3, #0]
 80154e0:	4b68      	ldr	r3, [pc, #416]	; (8015684 <tcp_input+0x4a0>)
 80154e2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80154e4:	429a      	cmp	r2, r3
 80154e6:	d126      	bne.n	8015536 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80154e8:	69fb      	ldr	r3, [r7, #28]
 80154ea:	68db      	ldr	r3, [r3, #12]
 80154ec:	69fa      	ldr	r2, [r7, #28]
 80154ee:	429a      	cmp	r2, r3
 80154f0:	d106      	bne.n	8015500 <tcp_input+0x31c>
 80154f2:	4b65      	ldr	r3, [pc, #404]	; (8015688 <tcp_input+0x4a4>)
 80154f4:	f240 120d 	movw	r2, #269	; 0x10d
 80154f8:	4964      	ldr	r1, [pc, #400]	; (801568c <tcp_input+0x4a8>)
 80154fa:	4865      	ldr	r0, [pc, #404]	; (8015690 <tcp_input+0x4ac>)
 80154fc:	f007 fdda 	bl	801d0b4 <iprintf>
      if (prev != NULL) {
 8015500:	69bb      	ldr	r3, [r7, #24]
 8015502:	2b00      	cmp	r3, #0
 8015504:	d00a      	beq.n	801551c <tcp_input+0x338>
        prev->next = pcb->next;
 8015506:	69fb      	ldr	r3, [r7, #28]
 8015508:	68da      	ldr	r2, [r3, #12]
 801550a:	69bb      	ldr	r3, [r7, #24]
 801550c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801550e:	4b61      	ldr	r3, [pc, #388]	; (8015694 <tcp_input+0x4b0>)
 8015510:	681a      	ldr	r2, [r3, #0]
 8015512:	69fb      	ldr	r3, [r7, #28]
 8015514:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8015516:	4a5f      	ldr	r2, [pc, #380]	; (8015694 <tcp_input+0x4b0>)
 8015518:	69fb      	ldr	r3, [r7, #28]
 801551a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801551c:	69fb      	ldr	r3, [r7, #28]
 801551e:	68db      	ldr	r3, [r3, #12]
 8015520:	69fa      	ldr	r2, [r7, #28]
 8015522:	429a      	cmp	r2, r3
 8015524:	d111      	bne.n	801554a <tcp_input+0x366>
 8015526:	4b58      	ldr	r3, [pc, #352]	; (8015688 <tcp_input+0x4a4>)
 8015528:	f240 1215 	movw	r2, #277	; 0x115
 801552c:	495a      	ldr	r1, [pc, #360]	; (8015698 <tcp_input+0x4b4>)
 801552e:	4858      	ldr	r0, [pc, #352]	; (8015690 <tcp_input+0x4ac>)
 8015530:	f007 fdc0 	bl	801d0b4 <iprintf>
      break;
 8015534:	e009      	b.n	801554a <tcp_input+0x366>
    }
    prev = pcb;
 8015536:	69fb      	ldr	r3, [r7, #28]
 8015538:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801553a:	69fb      	ldr	r3, [r7, #28]
 801553c:	68db      	ldr	r3, [r3, #12]
 801553e:	61fb      	str	r3, [r7, #28]
 8015540:	69fb      	ldr	r3, [r7, #28]
 8015542:	2b00      	cmp	r3, #0
 8015544:	f47f af5e 	bne.w	8015404 <tcp_input+0x220>
 8015548:	e000      	b.n	801554c <tcp_input+0x368>
      break;
 801554a:	bf00      	nop
  }

  if (pcb == NULL) {
 801554c:	69fb      	ldr	r3, [r7, #28]
 801554e:	2b00      	cmp	r3, #0
 8015550:	f040 80aa 	bne.w	80156a8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015554:	4b51      	ldr	r3, [pc, #324]	; (801569c <tcp_input+0x4b8>)
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	61fb      	str	r3, [r7, #28]
 801555a:	e03f      	b.n	80155dc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801555c:	69fb      	ldr	r3, [r7, #28]
 801555e:	7d1b      	ldrb	r3, [r3, #20]
 8015560:	2b0a      	cmp	r3, #10
 8015562:	d006      	beq.n	8015572 <tcp_input+0x38e>
 8015564:	4b48      	ldr	r3, [pc, #288]	; (8015688 <tcp_input+0x4a4>)
 8015566:	f240 121f 	movw	r2, #287	; 0x11f
 801556a:	494d      	ldr	r1, [pc, #308]	; (80156a0 <tcp_input+0x4bc>)
 801556c:	4848      	ldr	r0, [pc, #288]	; (8015690 <tcp_input+0x4ac>)
 801556e:	f007 fda1 	bl	801d0b4 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015572:	69fb      	ldr	r3, [r7, #28]
 8015574:	7a1b      	ldrb	r3, [r3, #8]
 8015576:	2b00      	cmp	r3, #0
 8015578:	d009      	beq.n	801558e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801557a:	69fb      	ldr	r3, [r7, #28]
 801557c:	7a1a      	ldrb	r2, [r3, #8]
 801557e:	4b41      	ldr	r3, [pc, #260]	; (8015684 <tcp_input+0x4a0>)
 8015580:	685b      	ldr	r3, [r3, #4]
 8015582:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015586:	3301      	adds	r3, #1
 8015588:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801558a:	429a      	cmp	r2, r3
 801558c:	d122      	bne.n	80155d4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801558e:	69fb      	ldr	r3, [r7, #28]
 8015590:	8b1a      	ldrh	r2, [r3, #24]
 8015592:	4b3b      	ldr	r3, [pc, #236]	; (8015680 <tcp_input+0x49c>)
 8015594:	681b      	ldr	r3, [r3, #0]
 8015596:	881b      	ldrh	r3, [r3, #0]
 8015598:	b29b      	uxth	r3, r3
 801559a:	429a      	cmp	r2, r3
 801559c:	d11b      	bne.n	80155d6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801559e:	69fb      	ldr	r3, [r7, #28]
 80155a0:	8ada      	ldrh	r2, [r3, #22]
 80155a2:	4b37      	ldr	r3, [pc, #220]	; (8015680 <tcp_input+0x49c>)
 80155a4:	681b      	ldr	r3, [r3, #0]
 80155a6:	885b      	ldrh	r3, [r3, #2]
 80155a8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 80155aa:	429a      	cmp	r2, r3
 80155ac:	d113      	bne.n	80155d6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80155ae:	69fb      	ldr	r3, [r7, #28]
 80155b0:	685a      	ldr	r2, [r3, #4]
 80155b2:	4b34      	ldr	r3, [pc, #208]	; (8015684 <tcp_input+0x4a0>)
 80155b4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 80155b6:	429a      	cmp	r2, r3
 80155b8:	d10d      	bne.n	80155d6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80155ba:	69fb      	ldr	r3, [r7, #28]
 80155bc:	681a      	ldr	r2, [r3, #0]
 80155be:	4b31      	ldr	r3, [pc, #196]	; (8015684 <tcp_input+0x4a0>)
 80155c0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80155c2:	429a      	cmp	r2, r3
 80155c4:	d107      	bne.n	80155d6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 80155c6:	69f8      	ldr	r0, [r7, #28]
 80155c8:	f000 fb56 	bl	8015c78 <tcp_timewait_input>
        }
        pbuf_free(p);
 80155cc:	6878      	ldr	r0, [r7, #4]
 80155ce:	f7fd fdbd 	bl	801314c <pbuf_free>
        return;
 80155d2:	e1fd      	b.n	80159d0 <tcp_input+0x7ec>
        continue;
 80155d4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80155d6:	69fb      	ldr	r3, [r7, #28]
 80155d8:	68db      	ldr	r3, [r3, #12]
 80155da:	61fb      	str	r3, [r7, #28]
 80155dc:	69fb      	ldr	r3, [r7, #28]
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d1bc      	bne.n	801555c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80155e2:	2300      	movs	r3, #0
 80155e4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80155e6:	4b2f      	ldr	r3, [pc, #188]	; (80156a4 <tcp_input+0x4c0>)
 80155e8:	681b      	ldr	r3, [r3, #0]
 80155ea:	617b      	str	r3, [r7, #20]
 80155ec:	e02a      	b.n	8015644 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80155ee:	697b      	ldr	r3, [r7, #20]
 80155f0:	7a1b      	ldrb	r3, [r3, #8]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d00c      	beq.n	8015610 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80155f6:	697b      	ldr	r3, [r7, #20]
 80155f8:	7a1a      	ldrb	r2, [r3, #8]
 80155fa:	4b22      	ldr	r3, [pc, #136]	; (8015684 <tcp_input+0x4a0>)
 80155fc:	685b      	ldr	r3, [r3, #4]
 80155fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015602:	3301      	adds	r3, #1
 8015604:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8015606:	429a      	cmp	r2, r3
 8015608:	d002      	beq.n	8015610 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801560a:	697b      	ldr	r3, [r7, #20]
 801560c:	61bb      	str	r3, [r7, #24]
        continue;
 801560e:	e016      	b.n	801563e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8015610:	697b      	ldr	r3, [r7, #20]
 8015612:	8ada      	ldrh	r2, [r3, #22]
 8015614:	4b1a      	ldr	r3, [pc, #104]	; (8015680 <tcp_input+0x49c>)
 8015616:	681b      	ldr	r3, [r3, #0]
 8015618:	885b      	ldrh	r3, [r3, #2]
 801561a:	b29b      	uxth	r3, r3
 801561c:	429a      	cmp	r2, r3
 801561e:	d10c      	bne.n	801563a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8015620:	697b      	ldr	r3, [r7, #20]
 8015622:	681a      	ldr	r2, [r3, #0]
 8015624:	4b17      	ldr	r3, [pc, #92]	; (8015684 <tcp_input+0x4a0>)
 8015626:	695b      	ldr	r3, [r3, #20]
 8015628:	429a      	cmp	r2, r3
 801562a:	d00f      	beq.n	801564c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801562c:	697b      	ldr	r3, [r7, #20]
 801562e:	2b00      	cmp	r3, #0
 8015630:	d00d      	beq.n	801564e <tcp_input+0x46a>
 8015632:	697b      	ldr	r3, [r7, #20]
 8015634:	681b      	ldr	r3, [r3, #0]
 8015636:	2b00      	cmp	r3, #0
 8015638:	d009      	beq.n	801564e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801563a:	697b      	ldr	r3, [r7, #20]
 801563c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801563e:	697b      	ldr	r3, [r7, #20]
 8015640:	68db      	ldr	r3, [r3, #12]
 8015642:	617b      	str	r3, [r7, #20]
 8015644:	697b      	ldr	r3, [r7, #20]
 8015646:	2b00      	cmp	r3, #0
 8015648:	d1d1      	bne.n	80155ee <tcp_input+0x40a>
 801564a:	e000      	b.n	801564e <tcp_input+0x46a>
            break;
 801564c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801564e:	697b      	ldr	r3, [r7, #20]
 8015650:	2b00      	cmp	r3, #0
 8015652:	d029      	beq.n	80156a8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8015654:	69bb      	ldr	r3, [r7, #24]
 8015656:	2b00      	cmp	r3, #0
 8015658:	d00a      	beq.n	8015670 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801565a:	697b      	ldr	r3, [r7, #20]
 801565c:	68da      	ldr	r2, [r3, #12]
 801565e:	69bb      	ldr	r3, [r7, #24]
 8015660:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8015662:	4b10      	ldr	r3, [pc, #64]	; (80156a4 <tcp_input+0x4c0>)
 8015664:	681a      	ldr	r2, [r3, #0]
 8015666:	697b      	ldr	r3, [r7, #20]
 8015668:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801566a:	4a0e      	ldr	r2, [pc, #56]	; (80156a4 <tcp_input+0x4c0>)
 801566c:	697b      	ldr	r3, [r7, #20]
 801566e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8015670:	6978      	ldr	r0, [r7, #20]
 8015672:	f000 fa03 	bl	8015a7c <tcp_listen_input>
      }
      pbuf_free(p);
 8015676:	6878      	ldr	r0, [r7, #4]
 8015678:	f7fd fd68 	bl	801314c <pbuf_free>
      return;
 801567c:	e1a8      	b.n	80159d0 <tcp_input+0x7ec>
 801567e:	bf00      	nop
 8015680:	2000dde4 	.word	0x2000dde4
 8015684:	2000a668 	.word	0x2000a668
 8015688:	0802041c 	.word	0x0802041c
 801568c:	08020548 	.word	0x08020548
 8015690:	08020468 	.word	0x08020468
 8015694:	2000ddc8 	.word	0x2000ddc8
 8015698:	08020574 	.word	0x08020574
 801569c:	2000ddcc 	.word	0x2000ddcc
 80156a0:	080205a0 	.word	0x080205a0
 80156a4:	2000ddc4 	.word	0x2000ddc4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 80156a8:	69fb      	ldr	r3, [r7, #28]
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	f000 8158 	beq.w	8015960 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 80156b0:	4b95      	ldr	r3, [pc, #596]	; (8015908 <tcp_input+0x724>)
 80156b2:	2200      	movs	r2, #0
 80156b4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	891a      	ldrh	r2, [r3, #8]
 80156ba:	4b93      	ldr	r3, [pc, #588]	; (8015908 <tcp_input+0x724>)
 80156bc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 80156be:	4a92      	ldr	r2, [pc, #584]	; (8015908 <tcp_input+0x724>)
 80156c0:	687b      	ldr	r3, [r7, #4]
 80156c2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 80156c4:	4b91      	ldr	r3, [pc, #580]	; (801590c <tcp_input+0x728>)
 80156c6:	681b      	ldr	r3, [r3, #0]
 80156c8:	4a8f      	ldr	r2, [pc, #572]	; (8015908 <tcp_input+0x724>)
 80156ca:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 80156cc:	4b90      	ldr	r3, [pc, #576]	; (8015910 <tcp_input+0x72c>)
 80156ce:	2200      	movs	r2, #0
 80156d0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 80156d2:	4b90      	ldr	r3, [pc, #576]	; (8015914 <tcp_input+0x730>)
 80156d4:	2200      	movs	r2, #0
 80156d6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 80156d8:	4b8f      	ldr	r3, [pc, #572]	; (8015918 <tcp_input+0x734>)
 80156da:	2200      	movs	r2, #0
 80156dc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 80156de:	4b8f      	ldr	r3, [pc, #572]	; (801591c <tcp_input+0x738>)
 80156e0:	781b      	ldrb	r3, [r3, #0]
 80156e2:	f003 0308 	and.w	r3, r3, #8
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d006      	beq.n	80156f8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	7b5b      	ldrb	r3, [r3, #13]
 80156ee:	f043 0301 	orr.w	r3, r3, #1
 80156f2:	b2da      	uxtb	r2, r3
 80156f4:	687b      	ldr	r3, [r7, #4]
 80156f6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80156f8:	69fb      	ldr	r3, [r7, #28]
 80156fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d017      	beq.n	8015730 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8015700:	69f8      	ldr	r0, [r7, #28]
 8015702:	f7ff f85b 	bl	80147bc <tcp_process_refused_data>
 8015706:	4603      	mov	r3, r0
 8015708:	f113 0f0d 	cmn.w	r3, #13
 801570c:	d007      	beq.n	801571e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801570e:	69fb      	ldr	r3, [r7, #28]
 8015710:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8015712:	2b00      	cmp	r3, #0
 8015714:	d00c      	beq.n	8015730 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8015716:	4b82      	ldr	r3, [pc, #520]	; (8015920 <tcp_input+0x73c>)
 8015718:	881b      	ldrh	r3, [r3, #0]
 801571a:	2b00      	cmp	r3, #0
 801571c:	d008      	beq.n	8015730 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801571e:	69fb      	ldr	r3, [r7, #28]
 8015720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015722:	2b00      	cmp	r3, #0
 8015724:	f040 80e3 	bne.w	80158ee <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8015728:	69f8      	ldr	r0, [r7, #28]
 801572a:	f003 fe05 	bl	8019338 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801572e:	e0de      	b.n	80158ee <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8015730:	4a7c      	ldr	r2, [pc, #496]	; (8015924 <tcp_input+0x740>)
 8015732:	69fb      	ldr	r3, [r7, #28]
 8015734:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8015736:	69f8      	ldr	r0, [r7, #28]
 8015738:	f000 fb18 	bl	8015d6c <tcp_process>
 801573c:	4603      	mov	r3, r0
 801573e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8015740:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015744:	f113 0f0d 	cmn.w	r3, #13
 8015748:	f000 80d3 	beq.w	80158f2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 801574c:	4b71      	ldr	r3, [pc, #452]	; (8015914 <tcp_input+0x730>)
 801574e:	781b      	ldrb	r3, [r3, #0]
 8015750:	f003 0308 	and.w	r3, r3, #8
 8015754:	2b00      	cmp	r3, #0
 8015756:	d015      	beq.n	8015784 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8015758:	69fb      	ldr	r3, [r7, #28]
 801575a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801575e:	2b00      	cmp	r3, #0
 8015760:	d008      	beq.n	8015774 <tcp_input+0x590>
 8015762:	69fb      	ldr	r3, [r7, #28]
 8015764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015768:	69fa      	ldr	r2, [r7, #28]
 801576a:	6912      	ldr	r2, [r2, #16]
 801576c:	f06f 010d 	mvn.w	r1, #13
 8015770:	4610      	mov	r0, r2
 8015772:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8015774:	69f9      	ldr	r1, [r7, #28]
 8015776:	486c      	ldr	r0, [pc, #432]	; (8015928 <tcp_input+0x744>)
 8015778:	f7ff fbbc 	bl	8014ef4 <tcp_pcb_remove>
        tcp_free(pcb);
 801577c:	69f8      	ldr	r0, [r7, #28]
 801577e:	f7fd ffa1 	bl	80136c4 <tcp_free>
 8015782:	e0da      	b.n	801593a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8015784:	2300      	movs	r3, #0
 8015786:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8015788:	4b63      	ldr	r3, [pc, #396]	; (8015918 <tcp_input+0x734>)
 801578a:	881b      	ldrh	r3, [r3, #0]
 801578c:	2b00      	cmp	r3, #0
 801578e:	d01d      	beq.n	80157cc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8015790:	4b61      	ldr	r3, [pc, #388]	; (8015918 <tcp_input+0x734>)
 8015792:	881b      	ldrh	r3, [r3, #0]
 8015794:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8015796:	69fb      	ldr	r3, [r7, #28]
 8015798:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801579c:	2b00      	cmp	r3, #0
 801579e:	d00a      	beq.n	80157b6 <tcp_input+0x5d2>
 80157a0:	69fb      	ldr	r3, [r7, #28]
 80157a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80157a6:	69fa      	ldr	r2, [r7, #28]
 80157a8:	6910      	ldr	r0, [r2, #16]
 80157aa:	89fa      	ldrh	r2, [r7, #14]
 80157ac:	69f9      	ldr	r1, [r7, #28]
 80157ae:	4798      	blx	r3
 80157b0:	4603      	mov	r3, r0
 80157b2:	74fb      	strb	r3, [r7, #19]
 80157b4:	e001      	b.n	80157ba <tcp_input+0x5d6>
 80157b6:	2300      	movs	r3, #0
 80157b8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80157ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80157be:	f113 0f0d 	cmn.w	r3, #13
 80157c2:	f000 8098 	beq.w	80158f6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 80157c6:	4b54      	ldr	r3, [pc, #336]	; (8015918 <tcp_input+0x734>)
 80157c8:	2200      	movs	r2, #0
 80157ca:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 80157cc:	69f8      	ldr	r0, [r7, #28]
 80157ce:	f000 f915 	bl	80159fc <tcp_input_delayed_close>
 80157d2:	4603      	mov	r3, r0
 80157d4:	2b00      	cmp	r3, #0
 80157d6:	f040 8090 	bne.w	80158fa <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 80157da:	4b4d      	ldr	r3, [pc, #308]	; (8015910 <tcp_input+0x72c>)
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d041      	beq.n	8015866 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80157e2:	69fb      	ldr	r3, [r7, #28]
 80157e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80157e6:	2b00      	cmp	r3, #0
 80157e8:	d006      	beq.n	80157f8 <tcp_input+0x614>
 80157ea:	4b50      	ldr	r3, [pc, #320]	; (801592c <tcp_input+0x748>)
 80157ec:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80157f0:	494f      	ldr	r1, [pc, #316]	; (8015930 <tcp_input+0x74c>)
 80157f2:	4850      	ldr	r0, [pc, #320]	; (8015934 <tcp_input+0x750>)
 80157f4:	f007 fc5e 	bl	801d0b4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80157f8:	69fb      	ldr	r3, [r7, #28]
 80157fa:	8b5b      	ldrh	r3, [r3, #26]
 80157fc:	f003 0310 	and.w	r3, r3, #16
 8015800:	2b00      	cmp	r3, #0
 8015802:	d008      	beq.n	8015816 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8015804:	4b42      	ldr	r3, [pc, #264]	; (8015910 <tcp_input+0x72c>)
 8015806:	681b      	ldr	r3, [r3, #0]
 8015808:	4618      	mov	r0, r3
 801580a:	f7fd fc9f 	bl	801314c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801580e:	69f8      	ldr	r0, [r7, #28]
 8015810:	f7fe fa9c 	bl	8013d4c <tcp_abort>
            goto aborted;
 8015814:	e091      	b.n	801593a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8015816:	69fb      	ldr	r3, [r7, #28]
 8015818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801581c:	2b00      	cmp	r3, #0
 801581e:	d00c      	beq.n	801583a <tcp_input+0x656>
 8015820:	69fb      	ldr	r3, [r7, #28]
 8015822:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8015826:	69fb      	ldr	r3, [r7, #28]
 8015828:	6918      	ldr	r0, [r3, #16]
 801582a:	4b39      	ldr	r3, [pc, #228]	; (8015910 <tcp_input+0x72c>)
 801582c:	681a      	ldr	r2, [r3, #0]
 801582e:	2300      	movs	r3, #0
 8015830:	69f9      	ldr	r1, [r7, #28]
 8015832:	47a0      	blx	r4
 8015834:	4603      	mov	r3, r0
 8015836:	74fb      	strb	r3, [r7, #19]
 8015838:	e008      	b.n	801584c <tcp_input+0x668>
 801583a:	4b35      	ldr	r3, [pc, #212]	; (8015910 <tcp_input+0x72c>)
 801583c:	681a      	ldr	r2, [r3, #0]
 801583e:	2300      	movs	r3, #0
 8015840:	69f9      	ldr	r1, [r7, #28]
 8015842:	2000      	movs	r0, #0
 8015844:	f7ff f890 	bl	8014968 <tcp_recv_null>
 8015848:	4603      	mov	r3, r0
 801584a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801584c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015850:	f113 0f0d 	cmn.w	r3, #13
 8015854:	d053      	beq.n	80158fe <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8015856:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801585a:	2b00      	cmp	r3, #0
 801585c:	d003      	beq.n	8015866 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801585e:	4b2c      	ldr	r3, [pc, #176]	; (8015910 <tcp_input+0x72c>)
 8015860:	681a      	ldr	r2, [r3, #0]
 8015862:	69fb      	ldr	r3, [r7, #28]
 8015864:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8015866:	4b2b      	ldr	r3, [pc, #172]	; (8015914 <tcp_input+0x730>)
 8015868:	781b      	ldrb	r3, [r3, #0]
 801586a:	f003 0320 	and.w	r3, r3, #32
 801586e:	2b00      	cmp	r3, #0
 8015870:	d030      	beq.n	80158d4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8015872:	69fb      	ldr	r3, [r7, #28]
 8015874:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015876:	2b00      	cmp	r3, #0
 8015878:	d009      	beq.n	801588e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801587a:	69fb      	ldr	r3, [r7, #28]
 801587c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801587e:	7b5a      	ldrb	r2, [r3, #13]
 8015880:	69fb      	ldr	r3, [r7, #28]
 8015882:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015884:	f042 0220 	orr.w	r2, r2, #32
 8015888:	b2d2      	uxtb	r2, r2
 801588a:	735a      	strb	r2, [r3, #13]
 801588c:	e022      	b.n	80158d4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801588e:	69fb      	ldr	r3, [r7, #28]
 8015890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015892:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015896:	d005      	beq.n	80158a4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8015898:	69fb      	ldr	r3, [r7, #28]
 801589a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801589c:	3301      	adds	r3, #1
 801589e:	b29a      	uxth	r2, r3
 80158a0:	69fb      	ldr	r3, [r7, #28]
 80158a2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 80158a4:	69fb      	ldr	r3, [r7, #28]
 80158a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d00b      	beq.n	80158c6 <tcp_input+0x6e2>
 80158ae:	69fb      	ldr	r3, [r7, #28]
 80158b0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80158b4:	69fb      	ldr	r3, [r7, #28]
 80158b6:	6918      	ldr	r0, [r3, #16]
 80158b8:	2300      	movs	r3, #0
 80158ba:	2200      	movs	r2, #0
 80158bc:	69f9      	ldr	r1, [r7, #28]
 80158be:	47a0      	blx	r4
 80158c0:	4603      	mov	r3, r0
 80158c2:	74fb      	strb	r3, [r7, #19]
 80158c4:	e001      	b.n	80158ca <tcp_input+0x6e6>
 80158c6:	2300      	movs	r3, #0
 80158c8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 80158ca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80158ce:	f113 0f0d 	cmn.w	r3, #13
 80158d2:	d016      	beq.n	8015902 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 80158d4:	4b13      	ldr	r3, [pc, #76]	; (8015924 <tcp_input+0x740>)
 80158d6:	2200      	movs	r2, #0
 80158d8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 80158da:	69f8      	ldr	r0, [r7, #28]
 80158dc:	f000 f88e 	bl	80159fc <tcp_input_delayed_close>
 80158e0:	4603      	mov	r3, r0
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d128      	bne.n	8015938 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80158e6:	69f8      	ldr	r0, [r7, #28]
 80158e8:	f002 ff20 	bl	801872c <tcp_output>
 80158ec:	e025      	b.n	801593a <tcp_input+0x756>
        goto aborted;
 80158ee:	bf00      	nop
 80158f0:	e023      	b.n	801593a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80158f2:	bf00      	nop
 80158f4:	e021      	b.n	801593a <tcp_input+0x756>
              goto aborted;
 80158f6:	bf00      	nop
 80158f8:	e01f      	b.n	801593a <tcp_input+0x756>
          goto aborted;
 80158fa:	bf00      	nop
 80158fc:	e01d      	b.n	801593a <tcp_input+0x756>
            goto aborted;
 80158fe:	bf00      	nop
 8015900:	e01b      	b.n	801593a <tcp_input+0x756>
              goto aborted;
 8015902:	bf00      	nop
 8015904:	e019      	b.n	801593a <tcp_input+0x756>
 8015906:	bf00      	nop
 8015908:	2000ddd4 	.word	0x2000ddd4
 801590c:	2000dde4 	.word	0x2000dde4
 8015910:	2000de04 	.word	0x2000de04
 8015914:	2000de01 	.word	0x2000de01
 8015918:	2000ddfc 	.word	0x2000ddfc
 801591c:	2000de00 	.word	0x2000de00
 8015920:	2000ddfe 	.word	0x2000ddfe
 8015924:	2000de08 	.word	0x2000de08
 8015928:	2000ddc8 	.word	0x2000ddc8
 801592c:	0802041c 	.word	0x0802041c
 8015930:	080205d0 	.word	0x080205d0
 8015934:	08020468 	.word	0x08020468
          goto aborted;
 8015938:	bf00      	nop
    tcp_input_pcb = NULL;
 801593a:	4b27      	ldr	r3, [pc, #156]	; (80159d8 <tcp_input+0x7f4>)
 801593c:	2200      	movs	r2, #0
 801593e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8015940:	4b26      	ldr	r3, [pc, #152]	; (80159dc <tcp_input+0x7f8>)
 8015942:	2200      	movs	r2, #0
 8015944:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8015946:	4b26      	ldr	r3, [pc, #152]	; (80159e0 <tcp_input+0x7fc>)
 8015948:	685b      	ldr	r3, [r3, #4]
 801594a:	2b00      	cmp	r3, #0
 801594c:	d03f      	beq.n	80159ce <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801594e:	4b24      	ldr	r3, [pc, #144]	; (80159e0 <tcp_input+0x7fc>)
 8015950:	685b      	ldr	r3, [r3, #4]
 8015952:	4618      	mov	r0, r3
 8015954:	f7fd fbfa 	bl	801314c <pbuf_free>
      inseg.p = NULL;
 8015958:	4b21      	ldr	r3, [pc, #132]	; (80159e0 <tcp_input+0x7fc>)
 801595a:	2200      	movs	r2, #0
 801595c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801595e:	e036      	b.n	80159ce <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8015960:	4b20      	ldr	r3, [pc, #128]	; (80159e4 <tcp_input+0x800>)
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	899b      	ldrh	r3, [r3, #12]
 8015966:	b29b      	uxth	r3, r3
 8015968:	4618      	mov	r0, r3
 801596a:	f7fc f8a7 	bl	8011abc <lwip_htons>
 801596e:	4603      	mov	r3, r0
 8015970:	b2db      	uxtb	r3, r3
 8015972:	f003 0304 	and.w	r3, r3, #4
 8015976:	2b00      	cmp	r3, #0
 8015978:	d118      	bne.n	80159ac <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801597a:	4b1b      	ldr	r3, [pc, #108]	; (80159e8 <tcp_input+0x804>)
 801597c:	6819      	ldr	r1, [r3, #0]
 801597e:	4b1b      	ldr	r3, [pc, #108]	; (80159ec <tcp_input+0x808>)
 8015980:	881b      	ldrh	r3, [r3, #0]
 8015982:	461a      	mov	r2, r3
 8015984:	4b1a      	ldr	r3, [pc, #104]	; (80159f0 <tcp_input+0x80c>)
 8015986:	681b      	ldr	r3, [r3, #0]
 8015988:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801598a:	4b16      	ldr	r3, [pc, #88]	; (80159e4 <tcp_input+0x800>)
 801598c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801598e:	885b      	ldrh	r3, [r3, #2]
 8015990:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015992:	4a14      	ldr	r2, [pc, #80]	; (80159e4 <tcp_input+0x800>)
 8015994:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015996:	8812      	ldrh	r2, [r2, #0]
 8015998:	b292      	uxth	r2, r2
 801599a:	9202      	str	r2, [sp, #8]
 801599c:	9301      	str	r3, [sp, #4]
 801599e:	4b15      	ldr	r3, [pc, #84]	; (80159f4 <tcp_input+0x810>)
 80159a0:	9300      	str	r3, [sp, #0]
 80159a2:	4b15      	ldr	r3, [pc, #84]	; (80159f8 <tcp_input+0x814>)
 80159a4:	4602      	mov	r2, r0
 80159a6:	2000      	movs	r0, #0
 80159a8:	f003 fc74 	bl	8019294 <tcp_rst>
    pbuf_free(p);
 80159ac:	6878      	ldr	r0, [r7, #4]
 80159ae:	f7fd fbcd 	bl	801314c <pbuf_free>
  return;
 80159b2:	e00c      	b.n	80159ce <tcp_input+0x7ea>
    goto dropped;
 80159b4:	bf00      	nop
 80159b6:	e006      	b.n	80159c6 <tcp_input+0x7e2>
    goto dropped;
 80159b8:	bf00      	nop
 80159ba:	e004      	b.n	80159c6 <tcp_input+0x7e2>
    goto dropped;
 80159bc:	bf00      	nop
 80159be:	e002      	b.n	80159c6 <tcp_input+0x7e2>
      goto dropped;
 80159c0:	bf00      	nop
 80159c2:	e000      	b.n	80159c6 <tcp_input+0x7e2>
      goto dropped;
 80159c4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80159c6:	6878      	ldr	r0, [r7, #4]
 80159c8:	f7fd fbc0 	bl	801314c <pbuf_free>
 80159cc:	e000      	b.n	80159d0 <tcp_input+0x7ec>
  return;
 80159ce:	bf00      	nop
}
 80159d0:	3724      	adds	r7, #36	; 0x24
 80159d2:	46bd      	mov	sp, r7
 80159d4:	bd90      	pop	{r4, r7, pc}
 80159d6:	bf00      	nop
 80159d8:	2000de08 	.word	0x2000de08
 80159dc:	2000de04 	.word	0x2000de04
 80159e0:	2000ddd4 	.word	0x2000ddd4
 80159e4:	2000dde4 	.word	0x2000dde4
 80159e8:	2000ddf8 	.word	0x2000ddf8
 80159ec:	2000ddfe 	.word	0x2000ddfe
 80159f0:	2000ddf4 	.word	0x2000ddf4
 80159f4:	2000a678 	.word	0x2000a678
 80159f8:	2000a67c 	.word	0x2000a67c

080159fc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80159fc:	b580      	push	{r7, lr}
 80159fe:	b082      	sub	sp, #8
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8015a04:	687b      	ldr	r3, [r7, #4]
 8015a06:	2b00      	cmp	r3, #0
 8015a08:	d106      	bne.n	8015a18 <tcp_input_delayed_close+0x1c>
 8015a0a:	4b17      	ldr	r3, [pc, #92]	; (8015a68 <tcp_input_delayed_close+0x6c>)
 8015a0c:	f240 225a 	movw	r2, #602	; 0x25a
 8015a10:	4916      	ldr	r1, [pc, #88]	; (8015a6c <tcp_input_delayed_close+0x70>)
 8015a12:	4817      	ldr	r0, [pc, #92]	; (8015a70 <tcp_input_delayed_close+0x74>)
 8015a14:	f007 fb4e 	bl	801d0b4 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8015a18:	4b16      	ldr	r3, [pc, #88]	; (8015a74 <tcp_input_delayed_close+0x78>)
 8015a1a:	781b      	ldrb	r3, [r3, #0]
 8015a1c:	f003 0310 	and.w	r3, r3, #16
 8015a20:	2b00      	cmp	r3, #0
 8015a22:	d01c      	beq.n	8015a5e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	8b5b      	ldrh	r3, [r3, #26]
 8015a28:	f003 0310 	and.w	r3, r3, #16
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d10d      	bne.n	8015a4c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d008      	beq.n	8015a4c <tcp_input_delayed_close+0x50>
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015a40:	687a      	ldr	r2, [r7, #4]
 8015a42:	6912      	ldr	r2, [r2, #16]
 8015a44:	f06f 010e 	mvn.w	r1, #14
 8015a48:	4610      	mov	r0, r2
 8015a4a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8015a4c:	6879      	ldr	r1, [r7, #4]
 8015a4e:	480a      	ldr	r0, [pc, #40]	; (8015a78 <tcp_input_delayed_close+0x7c>)
 8015a50:	f7ff fa50 	bl	8014ef4 <tcp_pcb_remove>
    tcp_free(pcb);
 8015a54:	6878      	ldr	r0, [r7, #4]
 8015a56:	f7fd fe35 	bl	80136c4 <tcp_free>
    return 1;
 8015a5a:	2301      	movs	r3, #1
 8015a5c:	e000      	b.n	8015a60 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8015a5e:	2300      	movs	r3, #0
}
 8015a60:	4618      	mov	r0, r3
 8015a62:	3708      	adds	r7, #8
 8015a64:	46bd      	mov	sp, r7
 8015a66:	bd80      	pop	{r7, pc}
 8015a68:	0802041c 	.word	0x0802041c
 8015a6c:	080205ec 	.word	0x080205ec
 8015a70:	08020468 	.word	0x08020468
 8015a74:	2000de01 	.word	0x2000de01
 8015a78:	2000ddc8 	.word	0x2000ddc8

08015a7c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8015a7c:	b590      	push	{r4, r7, lr}
 8015a7e:	b08b      	sub	sp, #44	; 0x2c
 8015a80:	af04      	add	r7, sp, #16
 8015a82:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8015a84:	4b6f      	ldr	r3, [pc, #444]	; (8015c44 <tcp_listen_input+0x1c8>)
 8015a86:	781b      	ldrb	r3, [r3, #0]
 8015a88:	f003 0304 	and.w	r3, r3, #4
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	f040 80d2 	bne.w	8015c36 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	2b00      	cmp	r3, #0
 8015a96:	d106      	bne.n	8015aa6 <tcp_listen_input+0x2a>
 8015a98:	4b6b      	ldr	r3, [pc, #428]	; (8015c48 <tcp_listen_input+0x1cc>)
 8015a9a:	f240 2281 	movw	r2, #641	; 0x281
 8015a9e:	496b      	ldr	r1, [pc, #428]	; (8015c4c <tcp_listen_input+0x1d0>)
 8015aa0:	486b      	ldr	r0, [pc, #428]	; (8015c50 <tcp_listen_input+0x1d4>)
 8015aa2:	f007 fb07 	bl	801d0b4 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8015aa6:	4b67      	ldr	r3, [pc, #412]	; (8015c44 <tcp_listen_input+0x1c8>)
 8015aa8:	781b      	ldrb	r3, [r3, #0]
 8015aaa:	f003 0310 	and.w	r3, r3, #16
 8015aae:	2b00      	cmp	r3, #0
 8015ab0:	d019      	beq.n	8015ae6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015ab2:	4b68      	ldr	r3, [pc, #416]	; (8015c54 <tcp_listen_input+0x1d8>)
 8015ab4:	6819      	ldr	r1, [r3, #0]
 8015ab6:	4b68      	ldr	r3, [pc, #416]	; (8015c58 <tcp_listen_input+0x1dc>)
 8015ab8:	881b      	ldrh	r3, [r3, #0]
 8015aba:	461a      	mov	r2, r3
 8015abc:	4b67      	ldr	r3, [pc, #412]	; (8015c5c <tcp_listen_input+0x1e0>)
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015ac2:	4b67      	ldr	r3, [pc, #412]	; (8015c60 <tcp_listen_input+0x1e4>)
 8015ac4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015ac6:	885b      	ldrh	r3, [r3, #2]
 8015ac8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015aca:	4a65      	ldr	r2, [pc, #404]	; (8015c60 <tcp_listen_input+0x1e4>)
 8015acc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015ace:	8812      	ldrh	r2, [r2, #0]
 8015ad0:	b292      	uxth	r2, r2
 8015ad2:	9202      	str	r2, [sp, #8]
 8015ad4:	9301      	str	r3, [sp, #4]
 8015ad6:	4b63      	ldr	r3, [pc, #396]	; (8015c64 <tcp_listen_input+0x1e8>)
 8015ad8:	9300      	str	r3, [sp, #0]
 8015ada:	4b63      	ldr	r3, [pc, #396]	; (8015c68 <tcp_listen_input+0x1ec>)
 8015adc:	4602      	mov	r2, r0
 8015ade:	6878      	ldr	r0, [r7, #4]
 8015ae0:	f003 fbd8 	bl	8019294 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8015ae4:	e0a9      	b.n	8015c3a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8015ae6:	4b57      	ldr	r3, [pc, #348]	; (8015c44 <tcp_listen_input+0x1c8>)
 8015ae8:	781b      	ldrb	r3, [r3, #0]
 8015aea:	f003 0302 	and.w	r3, r3, #2
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	f000 80a3 	beq.w	8015c3a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	7d5b      	ldrb	r3, [r3, #21]
 8015af8:	4618      	mov	r0, r3
 8015afa:	f7ff f859 	bl	8014bb0 <tcp_alloc>
 8015afe:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8015b00:	697b      	ldr	r3, [r7, #20]
 8015b02:	2b00      	cmp	r3, #0
 8015b04:	d111      	bne.n	8015b2a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	699b      	ldr	r3, [r3, #24]
 8015b0a:	2b00      	cmp	r3, #0
 8015b0c:	d00a      	beq.n	8015b24 <tcp_listen_input+0xa8>
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	699b      	ldr	r3, [r3, #24]
 8015b12:	687a      	ldr	r2, [r7, #4]
 8015b14:	6910      	ldr	r0, [r2, #16]
 8015b16:	f04f 32ff 	mov.w	r2, #4294967295
 8015b1a:	2100      	movs	r1, #0
 8015b1c:	4798      	blx	r3
 8015b1e:	4603      	mov	r3, r0
 8015b20:	73bb      	strb	r3, [r7, #14]
      return;
 8015b22:	e08b      	b.n	8015c3c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8015b24:	23f0      	movs	r3, #240	; 0xf0
 8015b26:	73bb      	strb	r3, [r7, #14]
      return;
 8015b28:	e088      	b.n	8015c3c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8015b2a:	4b50      	ldr	r3, [pc, #320]	; (8015c6c <tcp_listen_input+0x1f0>)
 8015b2c:	695a      	ldr	r2, [r3, #20]
 8015b2e:	697b      	ldr	r3, [r7, #20]
 8015b30:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8015b32:	4b4e      	ldr	r3, [pc, #312]	; (8015c6c <tcp_listen_input+0x1f0>)
 8015b34:	691a      	ldr	r2, [r3, #16]
 8015b36:	697b      	ldr	r3, [r7, #20]
 8015b38:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	8ada      	ldrh	r2, [r3, #22]
 8015b3e:	697b      	ldr	r3, [r7, #20]
 8015b40:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8015b42:	4b47      	ldr	r3, [pc, #284]	; (8015c60 <tcp_listen_input+0x1e4>)
 8015b44:	681b      	ldr	r3, [r3, #0]
 8015b46:	881b      	ldrh	r3, [r3, #0]
 8015b48:	b29a      	uxth	r2, r3
 8015b4a:	697b      	ldr	r3, [r7, #20]
 8015b4c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8015b4e:	697b      	ldr	r3, [r7, #20]
 8015b50:	2203      	movs	r2, #3
 8015b52:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8015b54:	4b41      	ldr	r3, [pc, #260]	; (8015c5c <tcp_listen_input+0x1e0>)
 8015b56:	681b      	ldr	r3, [r3, #0]
 8015b58:	1c5a      	adds	r2, r3, #1
 8015b5a:	697b      	ldr	r3, [r7, #20]
 8015b5c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8015b5e:	697b      	ldr	r3, [r7, #20]
 8015b60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015b62:	697b      	ldr	r3, [r7, #20]
 8015b64:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8015b66:	6978      	ldr	r0, [r7, #20]
 8015b68:	f7ff fa58 	bl	801501c <tcp_next_iss>
 8015b6c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8015b6e:	697b      	ldr	r3, [r7, #20]
 8015b70:	693a      	ldr	r2, [r7, #16]
 8015b72:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8015b74:	697b      	ldr	r3, [r7, #20]
 8015b76:	693a      	ldr	r2, [r7, #16]
 8015b78:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8015b7a:	697b      	ldr	r3, [r7, #20]
 8015b7c:	693a      	ldr	r2, [r7, #16]
 8015b7e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8015b80:	697b      	ldr	r3, [r7, #20]
 8015b82:	693a      	ldr	r2, [r7, #16]
 8015b84:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8015b86:	4b35      	ldr	r3, [pc, #212]	; (8015c5c <tcp_listen_input+0x1e0>)
 8015b88:	681b      	ldr	r3, [r3, #0]
 8015b8a:	1e5a      	subs	r2, r3, #1
 8015b8c:	697b      	ldr	r3, [r7, #20]
 8015b8e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8015b90:	687b      	ldr	r3, [r7, #4]
 8015b92:	691a      	ldr	r2, [r3, #16]
 8015b94:	697b      	ldr	r3, [r7, #20]
 8015b96:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8015b98:	697b      	ldr	r3, [r7, #20]
 8015b9a:	687a      	ldr	r2, [r7, #4]
 8015b9c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8015b9e:	687b      	ldr	r3, [r7, #4]
 8015ba0:	7a5b      	ldrb	r3, [r3, #9]
 8015ba2:	f003 030c 	and.w	r3, r3, #12
 8015ba6:	b2da      	uxtb	r2, r3
 8015ba8:	697b      	ldr	r3, [r7, #20]
 8015baa:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8015bac:	687b      	ldr	r3, [r7, #4]
 8015bae:	7a1a      	ldrb	r2, [r3, #8]
 8015bb0:	697b      	ldr	r3, [r7, #20]
 8015bb2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8015bb4:	4b2e      	ldr	r3, [pc, #184]	; (8015c70 <tcp_listen_input+0x1f4>)
 8015bb6:	681a      	ldr	r2, [r3, #0]
 8015bb8:	697b      	ldr	r3, [r7, #20]
 8015bba:	60da      	str	r2, [r3, #12]
 8015bbc:	4a2c      	ldr	r2, [pc, #176]	; (8015c70 <tcp_listen_input+0x1f4>)
 8015bbe:	697b      	ldr	r3, [r7, #20]
 8015bc0:	6013      	str	r3, [r2, #0]
 8015bc2:	f003 fd29 	bl	8019618 <tcp_timer_needed>
 8015bc6:	4b2b      	ldr	r3, [pc, #172]	; (8015c74 <tcp_listen_input+0x1f8>)
 8015bc8:	2201      	movs	r2, #1
 8015bca:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8015bcc:	6978      	ldr	r0, [r7, #20]
 8015bce:	f001 fd8f 	bl	80176f0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8015bd2:	4b23      	ldr	r3, [pc, #140]	; (8015c60 <tcp_listen_input+0x1e4>)
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	89db      	ldrh	r3, [r3, #14]
 8015bd8:	b29a      	uxth	r2, r3
 8015bda:	697b      	ldr	r3, [r7, #20]
 8015bdc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8015be0:	697b      	ldr	r3, [r7, #20]
 8015be2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015be6:	697b      	ldr	r3, [r7, #20]
 8015be8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8015bec:	697b      	ldr	r3, [r7, #20]
 8015bee:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8015bf0:	697b      	ldr	r3, [r7, #20]
 8015bf2:	3304      	adds	r3, #4
 8015bf4:	4618      	mov	r0, r3
 8015bf6:	f005 fc4d 	bl	801b494 <ip4_route>
 8015bfa:	4601      	mov	r1, r0
 8015bfc:	697b      	ldr	r3, [r7, #20]
 8015bfe:	3304      	adds	r3, #4
 8015c00:	461a      	mov	r2, r3
 8015c02:	4620      	mov	r0, r4
 8015c04:	f7ff fa30 	bl	8015068 <tcp_eff_send_mss_netif>
 8015c08:	4603      	mov	r3, r0
 8015c0a:	461a      	mov	r2, r3
 8015c0c:	697b      	ldr	r3, [r7, #20]
 8015c0e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8015c10:	2112      	movs	r1, #18
 8015c12:	6978      	ldr	r0, [r7, #20]
 8015c14:	f002 fc9c 	bl	8018550 <tcp_enqueue_flags>
 8015c18:	4603      	mov	r3, r0
 8015c1a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8015c1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015c20:	2b00      	cmp	r3, #0
 8015c22:	d004      	beq.n	8015c2e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8015c24:	2100      	movs	r1, #0
 8015c26:	6978      	ldr	r0, [r7, #20]
 8015c28:	f7fd ffd2 	bl	8013bd0 <tcp_abandon>
      return;
 8015c2c:	e006      	b.n	8015c3c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8015c2e:	6978      	ldr	r0, [r7, #20]
 8015c30:	f002 fd7c 	bl	801872c <tcp_output>
  return;
 8015c34:	e001      	b.n	8015c3a <tcp_listen_input+0x1be>
    return;
 8015c36:	bf00      	nop
 8015c38:	e000      	b.n	8015c3c <tcp_listen_input+0x1c0>
  return;
 8015c3a:	bf00      	nop
}
 8015c3c:	371c      	adds	r7, #28
 8015c3e:	46bd      	mov	sp, r7
 8015c40:	bd90      	pop	{r4, r7, pc}
 8015c42:	bf00      	nop
 8015c44:	2000de00 	.word	0x2000de00
 8015c48:	0802041c 	.word	0x0802041c
 8015c4c:	08020614 	.word	0x08020614
 8015c50:	08020468 	.word	0x08020468
 8015c54:	2000ddf8 	.word	0x2000ddf8
 8015c58:	2000ddfe 	.word	0x2000ddfe
 8015c5c:	2000ddf4 	.word	0x2000ddf4
 8015c60:	2000dde4 	.word	0x2000dde4
 8015c64:	2000a678 	.word	0x2000a678
 8015c68:	2000a67c 	.word	0x2000a67c
 8015c6c:	2000a668 	.word	0x2000a668
 8015c70:	2000ddc8 	.word	0x2000ddc8
 8015c74:	2000ddd0 	.word	0x2000ddd0

08015c78 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8015c78:	b580      	push	{r7, lr}
 8015c7a:	b086      	sub	sp, #24
 8015c7c:	af04      	add	r7, sp, #16
 8015c7e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8015c80:	4b2f      	ldr	r3, [pc, #188]	; (8015d40 <tcp_timewait_input+0xc8>)
 8015c82:	781b      	ldrb	r3, [r3, #0]
 8015c84:	f003 0304 	and.w	r3, r3, #4
 8015c88:	2b00      	cmp	r3, #0
 8015c8a:	d153      	bne.n	8015d34 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	2b00      	cmp	r3, #0
 8015c90:	d106      	bne.n	8015ca0 <tcp_timewait_input+0x28>
 8015c92:	4b2c      	ldr	r3, [pc, #176]	; (8015d44 <tcp_timewait_input+0xcc>)
 8015c94:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015c98:	492b      	ldr	r1, [pc, #172]	; (8015d48 <tcp_timewait_input+0xd0>)
 8015c9a:	482c      	ldr	r0, [pc, #176]	; (8015d4c <tcp_timewait_input+0xd4>)
 8015c9c:	f007 fa0a 	bl	801d0b4 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8015ca0:	4b27      	ldr	r3, [pc, #156]	; (8015d40 <tcp_timewait_input+0xc8>)
 8015ca2:	781b      	ldrb	r3, [r3, #0]
 8015ca4:	f003 0302 	and.w	r3, r3, #2
 8015ca8:	2b00      	cmp	r3, #0
 8015caa:	d02a      	beq.n	8015d02 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8015cac:	4b28      	ldr	r3, [pc, #160]	; (8015d50 <tcp_timewait_input+0xd8>)
 8015cae:	681a      	ldr	r2, [r3, #0]
 8015cb0:	687b      	ldr	r3, [r7, #4]
 8015cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cb4:	1ad3      	subs	r3, r2, r3
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	db2d      	blt.n	8015d16 <tcp_timewait_input+0x9e>
 8015cba:	4b25      	ldr	r3, [pc, #148]	; (8015d50 <tcp_timewait_input+0xd8>)
 8015cbc:	681a      	ldr	r2, [r3, #0]
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cc2:	6879      	ldr	r1, [r7, #4]
 8015cc4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015cc6:	440b      	add	r3, r1
 8015cc8:	1ad3      	subs	r3, r2, r3
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	dc23      	bgt.n	8015d16 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015cce:	4b21      	ldr	r3, [pc, #132]	; (8015d54 <tcp_timewait_input+0xdc>)
 8015cd0:	6819      	ldr	r1, [r3, #0]
 8015cd2:	4b21      	ldr	r3, [pc, #132]	; (8015d58 <tcp_timewait_input+0xe0>)
 8015cd4:	881b      	ldrh	r3, [r3, #0]
 8015cd6:	461a      	mov	r2, r3
 8015cd8:	4b1d      	ldr	r3, [pc, #116]	; (8015d50 <tcp_timewait_input+0xd8>)
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015cde:	4b1f      	ldr	r3, [pc, #124]	; (8015d5c <tcp_timewait_input+0xe4>)
 8015ce0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015ce2:	885b      	ldrh	r3, [r3, #2]
 8015ce4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015ce6:	4a1d      	ldr	r2, [pc, #116]	; (8015d5c <tcp_timewait_input+0xe4>)
 8015ce8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015cea:	8812      	ldrh	r2, [r2, #0]
 8015cec:	b292      	uxth	r2, r2
 8015cee:	9202      	str	r2, [sp, #8]
 8015cf0:	9301      	str	r3, [sp, #4]
 8015cf2:	4b1b      	ldr	r3, [pc, #108]	; (8015d60 <tcp_timewait_input+0xe8>)
 8015cf4:	9300      	str	r3, [sp, #0]
 8015cf6:	4b1b      	ldr	r3, [pc, #108]	; (8015d64 <tcp_timewait_input+0xec>)
 8015cf8:	4602      	mov	r2, r0
 8015cfa:	6878      	ldr	r0, [r7, #4]
 8015cfc:	f003 faca 	bl	8019294 <tcp_rst>
      return;
 8015d00:	e01b      	b.n	8015d3a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8015d02:	4b0f      	ldr	r3, [pc, #60]	; (8015d40 <tcp_timewait_input+0xc8>)
 8015d04:	781b      	ldrb	r3, [r3, #0]
 8015d06:	f003 0301 	and.w	r3, r3, #1
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d003      	beq.n	8015d16 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8015d0e:	4b16      	ldr	r3, [pc, #88]	; (8015d68 <tcp_timewait_input+0xf0>)
 8015d10:	681a      	ldr	r2, [r3, #0]
 8015d12:	687b      	ldr	r3, [r7, #4]
 8015d14:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8015d16:	4b10      	ldr	r3, [pc, #64]	; (8015d58 <tcp_timewait_input+0xe0>)
 8015d18:	881b      	ldrh	r3, [r3, #0]
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d00c      	beq.n	8015d38 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8015d1e:	687b      	ldr	r3, [r7, #4]
 8015d20:	8b5b      	ldrh	r3, [r3, #26]
 8015d22:	f043 0302 	orr.w	r3, r3, #2
 8015d26:	b29a      	uxth	r2, r3
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015d2c:	6878      	ldr	r0, [r7, #4]
 8015d2e:	f002 fcfd 	bl	801872c <tcp_output>
  }
  return;
 8015d32:	e001      	b.n	8015d38 <tcp_timewait_input+0xc0>
    return;
 8015d34:	bf00      	nop
 8015d36:	e000      	b.n	8015d3a <tcp_timewait_input+0xc2>
  return;
 8015d38:	bf00      	nop
}
 8015d3a:	3708      	adds	r7, #8
 8015d3c:	46bd      	mov	sp, r7
 8015d3e:	bd80      	pop	{r7, pc}
 8015d40:	2000de00 	.word	0x2000de00
 8015d44:	0802041c 	.word	0x0802041c
 8015d48:	08020634 	.word	0x08020634
 8015d4c:	08020468 	.word	0x08020468
 8015d50:	2000ddf4 	.word	0x2000ddf4
 8015d54:	2000ddf8 	.word	0x2000ddf8
 8015d58:	2000ddfe 	.word	0x2000ddfe
 8015d5c:	2000dde4 	.word	0x2000dde4
 8015d60:	2000a678 	.word	0x2000a678
 8015d64:	2000a67c 	.word	0x2000a67c
 8015d68:	2000ddbc 	.word	0x2000ddbc

08015d6c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8015d6c:	b590      	push	{r4, r7, lr}
 8015d6e:	b08d      	sub	sp, #52	; 0x34
 8015d70:	af04      	add	r7, sp, #16
 8015d72:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8015d74:	2300      	movs	r3, #0
 8015d76:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8015d78:	2300      	movs	r3, #0
 8015d7a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d106      	bne.n	8015d90 <tcp_process+0x24>
 8015d82:	4b9d      	ldr	r3, [pc, #628]	; (8015ff8 <tcp_process+0x28c>)
 8015d84:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8015d88:	499c      	ldr	r1, [pc, #624]	; (8015ffc <tcp_process+0x290>)
 8015d8a:	489d      	ldr	r0, [pc, #628]	; (8016000 <tcp_process+0x294>)
 8015d8c:	f007 f992 	bl	801d0b4 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8015d90:	4b9c      	ldr	r3, [pc, #624]	; (8016004 <tcp_process+0x298>)
 8015d92:	781b      	ldrb	r3, [r3, #0]
 8015d94:	f003 0304 	and.w	r3, r3, #4
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d04e      	beq.n	8015e3a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8015d9c:	687b      	ldr	r3, [r7, #4]
 8015d9e:	7d1b      	ldrb	r3, [r3, #20]
 8015da0:	2b02      	cmp	r3, #2
 8015da2:	d108      	bne.n	8015db6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015da8:	4b97      	ldr	r3, [pc, #604]	; (8016008 <tcp_process+0x29c>)
 8015daa:	681b      	ldr	r3, [r3, #0]
 8015dac:	429a      	cmp	r2, r3
 8015dae:	d123      	bne.n	8015df8 <tcp_process+0x8c>
        acceptable = 1;
 8015db0:	2301      	movs	r3, #1
 8015db2:	76fb      	strb	r3, [r7, #27]
 8015db4:	e020      	b.n	8015df8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015dba:	4b94      	ldr	r3, [pc, #592]	; (801600c <tcp_process+0x2a0>)
 8015dbc:	681b      	ldr	r3, [r3, #0]
 8015dbe:	429a      	cmp	r2, r3
 8015dc0:	d102      	bne.n	8015dc8 <tcp_process+0x5c>
        acceptable = 1;
 8015dc2:	2301      	movs	r3, #1
 8015dc4:	76fb      	strb	r3, [r7, #27]
 8015dc6:	e017      	b.n	8015df8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015dc8:	4b90      	ldr	r3, [pc, #576]	; (801600c <tcp_process+0x2a0>)
 8015dca:	681a      	ldr	r2, [r3, #0]
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dd0:	1ad3      	subs	r3, r2, r3
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	db10      	blt.n	8015df8 <tcp_process+0x8c>
 8015dd6:	4b8d      	ldr	r3, [pc, #564]	; (801600c <tcp_process+0x2a0>)
 8015dd8:	681a      	ldr	r2, [r3, #0]
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dde:	6879      	ldr	r1, [r7, #4]
 8015de0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015de2:	440b      	add	r3, r1
 8015de4:	1ad3      	subs	r3, r2, r3
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	dc06      	bgt.n	8015df8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	8b5b      	ldrh	r3, [r3, #26]
 8015dee:	f043 0302 	orr.w	r3, r3, #2
 8015df2:	b29a      	uxth	r2, r3
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8015df8:	7efb      	ldrb	r3, [r7, #27]
 8015dfa:	2b00      	cmp	r3, #0
 8015dfc:	d01b      	beq.n	8015e36 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	7d1b      	ldrb	r3, [r3, #20]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d106      	bne.n	8015e14 <tcp_process+0xa8>
 8015e06:	4b7c      	ldr	r3, [pc, #496]	; (8015ff8 <tcp_process+0x28c>)
 8015e08:	f44f 724e 	mov.w	r2, #824	; 0x338
 8015e0c:	4980      	ldr	r1, [pc, #512]	; (8016010 <tcp_process+0x2a4>)
 8015e0e:	487c      	ldr	r0, [pc, #496]	; (8016000 <tcp_process+0x294>)
 8015e10:	f007 f950 	bl	801d0b4 <iprintf>
      recv_flags |= TF_RESET;
 8015e14:	4b7f      	ldr	r3, [pc, #508]	; (8016014 <tcp_process+0x2a8>)
 8015e16:	781b      	ldrb	r3, [r3, #0]
 8015e18:	f043 0308 	orr.w	r3, r3, #8
 8015e1c:	b2da      	uxtb	r2, r3
 8015e1e:	4b7d      	ldr	r3, [pc, #500]	; (8016014 <tcp_process+0x2a8>)
 8015e20:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	8b5b      	ldrh	r3, [r3, #26]
 8015e26:	f023 0301 	bic.w	r3, r3, #1
 8015e2a:	b29a      	uxth	r2, r3
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8015e30:	f06f 030d 	mvn.w	r3, #13
 8015e34:	e37a      	b.n	801652c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8015e36:	2300      	movs	r3, #0
 8015e38:	e378      	b.n	801652c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8015e3a:	4b72      	ldr	r3, [pc, #456]	; (8016004 <tcp_process+0x298>)
 8015e3c:	781b      	ldrb	r3, [r3, #0]
 8015e3e:	f003 0302 	and.w	r3, r3, #2
 8015e42:	2b00      	cmp	r3, #0
 8015e44:	d010      	beq.n	8015e68 <tcp_process+0xfc>
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	7d1b      	ldrb	r3, [r3, #20]
 8015e4a:	2b02      	cmp	r3, #2
 8015e4c:	d00c      	beq.n	8015e68 <tcp_process+0xfc>
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	7d1b      	ldrb	r3, [r3, #20]
 8015e52:	2b03      	cmp	r3, #3
 8015e54:	d008      	beq.n	8015e68 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	8b5b      	ldrh	r3, [r3, #26]
 8015e5a:	f043 0302 	orr.w	r3, r3, #2
 8015e5e:	b29a      	uxth	r2, r3
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8015e64:	2300      	movs	r3, #0
 8015e66:	e361      	b.n	801652c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	8b5b      	ldrh	r3, [r3, #26]
 8015e6c:	f003 0310 	and.w	r3, r3, #16
 8015e70:	2b00      	cmp	r3, #0
 8015e72:	d103      	bne.n	8015e7c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8015e74:	4b68      	ldr	r3, [pc, #416]	; (8016018 <tcp_process+0x2ac>)
 8015e76:	681a      	ldr	r2, [r3, #0]
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8015e7c:	687b      	ldr	r3, [r7, #4]
 8015e7e:	2200      	movs	r2, #0
 8015e80:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	2200      	movs	r2, #0
 8015e88:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8015e8c:	6878      	ldr	r0, [r7, #4]
 8015e8e:	f001 fc2f 	bl	80176f0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	7d1b      	ldrb	r3, [r3, #20]
 8015e96:	3b02      	subs	r3, #2
 8015e98:	2b07      	cmp	r3, #7
 8015e9a:	f200 8337 	bhi.w	801650c <tcp_process+0x7a0>
 8015e9e:	a201      	add	r2, pc, #4	; (adr r2, 8015ea4 <tcp_process+0x138>)
 8015ea0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ea4:	08015ec5 	.word	0x08015ec5
 8015ea8:	080160f5 	.word	0x080160f5
 8015eac:	0801626d 	.word	0x0801626d
 8015eb0:	08016297 	.word	0x08016297
 8015eb4:	080163bb 	.word	0x080163bb
 8015eb8:	0801626d 	.word	0x0801626d
 8015ebc:	08016447 	.word	0x08016447
 8015ec0:	080164d7 	.word	0x080164d7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8015ec4:	4b4f      	ldr	r3, [pc, #316]	; (8016004 <tcp_process+0x298>)
 8015ec6:	781b      	ldrb	r3, [r3, #0]
 8015ec8:	f003 0310 	and.w	r3, r3, #16
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	f000 80e4 	beq.w	801609a <tcp_process+0x32e>
 8015ed2:	4b4c      	ldr	r3, [pc, #304]	; (8016004 <tcp_process+0x298>)
 8015ed4:	781b      	ldrb	r3, [r3, #0]
 8015ed6:	f003 0302 	and.w	r3, r3, #2
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	f000 80dd 	beq.w	801609a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015ee4:	1c5a      	adds	r2, r3, #1
 8015ee6:	4b48      	ldr	r3, [pc, #288]	; (8016008 <tcp_process+0x29c>)
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	429a      	cmp	r2, r3
 8015eec:	f040 80d5 	bne.w	801609a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8015ef0:	4b46      	ldr	r3, [pc, #280]	; (801600c <tcp_process+0x2a0>)
 8015ef2:	681b      	ldr	r3, [r3, #0]
 8015ef4:	1c5a      	adds	r2, r3, #1
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8015f02:	4b41      	ldr	r3, [pc, #260]	; (8016008 <tcp_process+0x29c>)
 8015f04:	681a      	ldr	r2, [r3, #0]
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8015f0a:	4b44      	ldr	r3, [pc, #272]	; (801601c <tcp_process+0x2b0>)
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	89db      	ldrh	r3, [r3, #14]
 8015f10:	b29a      	uxth	r2, r3
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015f18:	687b      	ldr	r3, [r7, #4]
 8015f1a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8015f24:	4b39      	ldr	r3, [pc, #228]	; (801600c <tcp_process+0x2a0>)
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	1e5a      	subs	r2, r3, #1
 8015f2a:	687b      	ldr	r3, [r7, #4]
 8015f2c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	2204      	movs	r2, #4
 8015f32:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	3304      	adds	r3, #4
 8015f3c:	4618      	mov	r0, r3
 8015f3e:	f005 faa9 	bl	801b494 <ip4_route>
 8015f42:	4601      	mov	r1, r0
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	3304      	adds	r3, #4
 8015f48:	461a      	mov	r2, r3
 8015f4a:	4620      	mov	r0, r4
 8015f4c:	f7ff f88c 	bl	8015068 <tcp_eff_send_mss_netif>
 8015f50:	4603      	mov	r3, r0
 8015f52:	461a      	mov	r2, r3
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015f5c:	009a      	lsls	r2, r3, #2
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015f62:	005b      	lsls	r3, r3, #1
 8015f64:	f241 111c 	movw	r1, #4380	; 0x111c
 8015f68:	428b      	cmp	r3, r1
 8015f6a:	bf38      	it	cc
 8015f6c:	460b      	movcc	r3, r1
 8015f6e:	429a      	cmp	r2, r3
 8015f70:	d204      	bcs.n	8015f7c <tcp_process+0x210>
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015f76:	009b      	lsls	r3, r3, #2
 8015f78:	b29b      	uxth	r3, r3
 8015f7a:	e00d      	b.n	8015f98 <tcp_process+0x22c>
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015f80:	005b      	lsls	r3, r3, #1
 8015f82:	f241 121c 	movw	r2, #4380	; 0x111c
 8015f86:	4293      	cmp	r3, r2
 8015f88:	d904      	bls.n	8015f94 <tcp_process+0x228>
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015f8e:	005b      	lsls	r3, r3, #1
 8015f90:	b29b      	uxth	r3, r3
 8015f92:	e001      	b.n	8015f98 <tcp_process+0x22c>
 8015f94:	f241 131c 	movw	r3, #4380	; 0x111c
 8015f98:	687a      	ldr	r2, [r7, #4]
 8015f9a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d106      	bne.n	8015fb6 <tcp_process+0x24a>
 8015fa8:	4b13      	ldr	r3, [pc, #76]	; (8015ff8 <tcp_process+0x28c>)
 8015faa:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8015fae:	491c      	ldr	r1, [pc, #112]	; (8016020 <tcp_process+0x2b4>)
 8015fb0:	4813      	ldr	r0, [pc, #76]	; (8016000 <tcp_process+0x294>)
 8015fb2:	f007 f87f 	bl	801d0b4 <iprintf>
        --pcb->snd_queuelen;
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015fbc:	3b01      	subs	r3, #1
 8015fbe:	b29a      	uxth	r2, r3
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8015fc6:	687b      	ldr	r3, [r7, #4]
 8015fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015fca:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8015fcc:	69fb      	ldr	r3, [r7, #28]
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d12a      	bne.n	8016028 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8015fd2:	687b      	ldr	r3, [r7, #4]
 8015fd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015fd6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8015fd8:	69fb      	ldr	r3, [r7, #28]
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d106      	bne.n	8015fec <tcp_process+0x280>
 8015fde:	4b06      	ldr	r3, [pc, #24]	; (8015ff8 <tcp_process+0x28c>)
 8015fe0:	f44f 725d 	mov.w	r2, #884	; 0x374
 8015fe4:	490f      	ldr	r1, [pc, #60]	; (8016024 <tcp_process+0x2b8>)
 8015fe6:	4806      	ldr	r0, [pc, #24]	; (8016000 <tcp_process+0x294>)
 8015fe8:	f007 f864 	bl	801d0b4 <iprintf>
          pcb->unsent = rseg->next;
 8015fec:	69fb      	ldr	r3, [r7, #28]
 8015fee:	681a      	ldr	r2, [r3, #0]
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	66da      	str	r2, [r3, #108]	; 0x6c
 8015ff4:	e01c      	b.n	8016030 <tcp_process+0x2c4>
 8015ff6:	bf00      	nop
 8015ff8:	0802041c 	.word	0x0802041c
 8015ffc:	08020654 	.word	0x08020654
 8016000:	08020468 	.word	0x08020468
 8016004:	2000de00 	.word	0x2000de00
 8016008:	2000ddf8 	.word	0x2000ddf8
 801600c:	2000ddf4 	.word	0x2000ddf4
 8016010:	08020670 	.word	0x08020670
 8016014:	2000de01 	.word	0x2000de01
 8016018:	2000ddbc 	.word	0x2000ddbc
 801601c:	2000dde4 	.word	0x2000dde4
 8016020:	08020690 	.word	0x08020690
 8016024:	080206a8 	.word	0x080206a8
        } else {
          pcb->unacked = rseg->next;
 8016028:	69fb      	ldr	r3, [r7, #28]
 801602a:	681a      	ldr	r2, [r3, #0]
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8016030:	69f8      	ldr	r0, [r7, #28]
 8016032:	f7fe fc54 	bl	80148de <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801603a:	2b00      	cmp	r3, #0
 801603c:	d104      	bne.n	8016048 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016044:	861a      	strh	r2, [r3, #48]	; 0x30
 8016046:	e006      	b.n	8016056 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	2200      	movs	r2, #0
 801604c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	2200      	movs	r2, #0
 8016052:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801605c:	2b00      	cmp	r3, #0
 801605e:	d00a      	beq.n	8016076 <tcp_process+0x30a>
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016066:	687a      	ldr	r2, [r7, #4]
 8016068:	6910      	ldr	r0, [r2, #16]
 801606a:	2200      	movs	r2, #0
 801606c:	6879      	ldr	r1, [r7, #4]
 801606e:	4798      	blx	r3
 8016070:	4603      	mov	r3, r0
 8016072:	76bb      	strb	r3, [r7, #26]
 8016074:	e001      	b.n	801607a <tcp_process+0x30e>
 8016076:	2300      	movs	r3, #0
 8016078:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801607a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801607e:	f113 0f0d 	cmn.w	r3, #13
 8016082:	d102      	bne.n	801608a <tcp_process+0x31e>
          return ERR_ABRT;
 8016084:	f06f 030c 	mvn.w	r3, #12
 8016088:	e250      	b.n	801652c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801608a:	687b      	ldr	r3, [r7, #4]
 801608c:	8b5b      	ldrh	r3, [r3, #26]
 801608e:	f043 0302 	orr.w	r3, r3, #2
 8016092:	b29a      	uxth	r2, r3
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8016098:	e23a      	b.n	8016510 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801609a:	4b98      	ldr	r3, [pc, #608]	; (80162fc <tcp_process+0x590>)
 801609c:	781b      	ldrb	r3, [r3, #0]
 801609e:	f003 0310 	and.w	r3, r3, #16
 80160a2:	2b00      	cmp	r3, #0
 80160a4:	f000 8234 	beq.w	8016510 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80160a8:	4b95      	ldr	r3, [pc, #596]	; (8016300 <tcp_process+0x594>)
 80160aa:	6819      	ldr	r1, [r3, #0]
 80160ac:	4b95      	ldr	r3, [pc, #596]	; (8016304 <tcp_process+0x598>)
 80160ae:	881b      	ldrh	r3, [r3, #0]
 80160b0:	461a      	mov	r2, r3
 80160b2:	4b95      	ldr	r3, [pc, #596]	; (8016308 <tcp_process+0x59c>)
 80160b4:	681b      	ldr	r3, [r3, #0]
 80160b6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80160b8:	4b94      	ldr	r3, [pc, #592]	; (801630c <tcp_process+0x5a0>)
 80160ba:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80160bc:	885b      	ldrh	r3, [r3, #2]
 80160be:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80160c0:	4a92      	ldr	r2, [pc, #584]	; (801630c <tcp_process+0x5a0>)
 80160c2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80160c4:	8812      	ldrh	r2, [r2, #0]
 80160c6:	b292      	uxth	r2, r2
 80160c8:	9202      	str	r2, [sp, #8]
 80160ca:	9301      	str	r3, [sp, #4]
 80160cc:	4b90      	ldr	r3, [pc, #576]	; (8016310 <tcp_process+0x5a4>)
 80160ce:	9300      	str	r3, [sp, #0]
 80160d0:	4b90      	ldr	r3, [pc, #576]	; (8016314 <tcp_process+0x5a8>)
 80160d2:	4602      	mov	r2, r0
 80160d4:	6878      	ldr	r0, [r7, #4]
 80160d6:	f003 f8dd 	bl	8019294 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80160e0:	2b05      	cmp	r3, #5
 80160e2:	f200 8215 	bhi.w	8016510 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	2200      	movs	r2, #0
 80160ea:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80160ec:	6878      	ldr	r0, [r7, #4]
 80160ee:	f002 fea7 	bl	8018e40 <tcp_rexmit_rto>
      break;
 80160f2:	e20d      	b.n	8016510 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 80160f4:	4b81      	ldr	r3, [pc, #516]	; (80162fc <tcp_process+0x590>)
 80160f6:	781b      	ldrb	r3, [r3, #0]
 80160f8:	f003 0310 	and.w	r3, r3, #16
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	f000 80a1 	beq.w	8016244 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016102:	4b7f      	ldr	r3, [pc, #508]	; (8016300 <tcp_process+0x594>)
 8016104:	681a      	ldr	r2, [r3, #0]
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801610a:	1ad3      	subs	r3, r2, r3
 801610c:	3b01      	subs	r3, #1
 801610e:	2b00      	cmp	r3, #0
 8016110:	db7e      	blt.n	8016210 <tcp_process+0x4a4>
 8016112:	4b7b      	ldr	r3, [pc, #492]	; (8016300 <tcp_process+0x594>)
 8016114:	681a      	ldr	r2, [r3, #0]
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801611a:	1ad3      	subs	r3, r2, r3
 801611c:	2b00      	cmp	r3, #0
 801611e:	dc77      	bgt.n	8016210 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	2204      	movs	r2, #4
 8016124:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801612a:	2b00      	cmp	r3, #0
 801612c:	d102      	bne.n	8016134 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801612e:	23fa      	movs	r3, #250	; 0xfa
 8016130:	76bb      	strb	r3, [r7, #26]
 8016132:	e01d      	b.n	8016170 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016138:	699b      	ldr	r3, [r3, #24]
 801613a:	2b00      	cmp	r3, #0
 801613c:	d106      	bne.n	801614c <tcp_process+0x3e0>
 801613e:	4b76      	ldr	r3, [pc, #472]	; (8016318 <tcp_process+0x5ac>)
 8016140:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8016144:	4975      	ldr	r1, [pc, #468]	; (801631c <tcp_process+0x5b0>)
 8016146:	4876      	ldr	r0, [pc, #472]	; (8016320 <tcp_process+0x5b4>)
 8016148:	f006 ffb4 	bl	801d0b4 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016150:	699b      	ldr	r3, [r3, #24]
 8016152:	2b00      	cmp	r3, #0
 8016154:	d00a      	beq.n	801616c <tcp_process+0x400>
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801615a:	699b      	ldr	r3, [r3, #24]
 801615c:	687a      	ldr	r2, [r7, #4]
 801615e:	6910      	ldr	r0, [r2, #16]
 8016160:	2200      	movs	r2, #0
 8016162:	6879      	ldr	r1, [r7, #4]
 8016164:	4798      	blx	r3
 8016166:	4603      	mov	r3, r0
 8016168:	76bb      	strb	r3, [r7, #26]
 801616a:	e001      	b.n	8016170 <tcp_process+0x404>
 801616c:	23f0      	movs	r3, #240	; 0xf0
 801616e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8016170:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8016174:	2b00      	cmp	r3, #0
 8016176:	d00a      	beq.n	801618e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8016178:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801617c:	f113 0f0d 	cmn.w	r3, #13
 8016180:	d002      	beq.n	8016188 <tcp_process+0x41c>
              tcp_abort(pcb);
 8016182:	6878      	ldr	r0, [r7, #4]
 8016184:	f7fd fde2 	bl	8013d4c <tcp_abort>
            }
            return ERR_ABRT;
 8016188:	f06f 030c 	mvn.w	r3, #12
 801618c:	e1ce      	b.n	801652c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801618e:	6878      	ldr	r0, [r7, #4]
 8016190:	f000 fae0 	bl	8016754 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8016194:	4b63      	ldr	r3, [pc, #396]	; (8016324 <tcp_process+0x5b8>)
 8016196:	881b      	ldrh	r3, [r3, #0]
 8016198:	2b00      	cmp	r3, #0
 801619a:	d005      	beq.n	80161a8 <tcp_process+0x43c>
            recv_acked--;
 801619c:	4b61      	ldr	r3, [pc, #388]	; (8016324 <tcp_process+0x5b8>)
 801619e:	881b      	ldrh	r3, [r3, #0]
 80161a0:	3b01      	subs	r3, #1
 80161a2:	b29a      	uxth	r2, r3
 80161a4:	4b5f      	ldr	r3, [pc, #380]	; (8016324 <tcp_process+0x5b8>)
 80161a6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80161ac:	009a      	lsls	r2, r3, #2
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80161b2:	005b      	lsls	r3, r3, #1
 80161b4:	f241 111c 	movw	r1, #4380	; 0x111c
 80161b8:	428b      	cmp	r3, r1
 80161ba:	bf38      	it	cc
 80161bc:	460b      	movcc	r3, r1
 80161be:	429a      	cmp	r2, r3
 80161c0:	d204      	bcs.n	80161cc <tcp_process+0x460>
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80161c6:	009b      	lsls	r3, r3, #2
 80161c8:	b29b      	uxth	r3, r3
 80161ca:	e00d      	b.n	80161e8 <tcp_process+0x47c>
 80161cc:	687b      	ldr	r3, [r7, #4]
 80161ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80161d0:	005b      	lsls	r3, r3, #1
 80161d2:	f241 121c 	movw	r2, #4380	; 0x111c
 80161d6:	4293      	cmp	r3, r2
 80161d8:	d904      	bls.n	80161e4 <tcp_process+0x478>
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80161de:	005b      	lsls	r3, r3, #1
 80161e0:	b29b      	uxth	r3, r3
 80161e2:	e001      	b.n	80161e8 <tcp_process+0x47c>
 80161e4:	f241 131c 	movw	r3, #4380	; 0x111c
 80161e8:	687a      	ldr	r2, [r7, #4]
 80161ea:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80161ee:	4b4e      	ldr	r3, [pc, #312]	; (8016328 <tcp_process+0x5bc>)
 80161f0:	781b      	ldrb	r3, [r3, #0]
 80161f2:	f003 0320 	and.w	r3, r3, #32
 80161f6:	2b00      	cmp	r3, #0
 80161f8:	d037      	beq.n	801626a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	8b5b      	ldrh	r3, [r3, #26]
 80161fe:	f043 0302 	orr.w	r3, r3, #2
 8016202:	b29a      	uxth	r2, r3
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	2207      	movs	r2, #7
 801620c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801620e:	e02c      	b.n	801626a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016210:	4b3b      	ldr	r3, [pc, #236]	; (8016300 <tcp_process+0x594>)
 8016212:	6819      	ldr	r1, [r3, #0]
 8016214:	4b3b      	ldr	r3, [pc, #236]	; (8016304 <tcp_process+0x598>)
 8016216:	881b      	ldrh	r3, [r3, #0]
 8016218:	461a      	mov	r2, r3
 801621a:	4b3b      	ldr	r3, [pc, #236]	; (8016308 <tcp_process+0x59c>)
 801621c:	681b      	ldr	r3, [r3, #0]
 801621e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016220:	4b3a      	ldr	r3, [pc, #232]	; (801630c <tcp_process+0x5a0>)
 8016222:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016224:	885b      	ldrh	r3, [r3, #2]
 8016226:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016228:	4a38      	ldr	r2, [pc, #224]	; (801630c <tcp_process+0x5a0>)
 801622a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801622c:	8812      	ldrh	r2, [r2, #0]
 801622e:	b292      	uxth	r2, r2
 8016230:	9202      	str	r2, [sp, #8]
 8016232:	9301      	str	r3, [sp, #4]
 8016234:	4b36      	ldr	r3, [pc, #216]	; (8016310 <tcp_process+0x5a4>)
 8016236:	9300      	str	r3, [sp, #0]
 8016238:	4b36      	ldr	r3, [pc, #216]	; (8016314 <tcp_process+0x5a8>)
 801623a:	4602      	mov	r2, r0
 801623c:	6878      	ldr	r0, [r7, #4]
 801623e:	f003 f829 	bl	8019294 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8016242:	e167      	b.n	8016514 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8016244:	4b2d      	ldr	r3, [pc, #180]	; (80162fc <tcp_process+0x590>)
 8016246:	781b      	ldrb	r3, [r3, #0]
 8016248:	f003 0302 	and.w	r3, r3, #2
 801624c:	2b00      	cmp	r3, #0
 801624e:	f000 8161 	beq.w	8016514 <tcp_process+0x7a8>
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016256:	1e5a      	subs	r2, r3, #1
 8016258:	4b2b      	ldr	r3, [pc, #172]	; (8016308 <tcp_process+0x59c>)
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	429a      	cmp	r2, r3
 801625e:	f040 8159 	bne.w	8016514 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8016262:	6878      	ldr	r0, [r7, #4]
 8016264:	f002 fe0e 	bl	8018e84 <tcp_rexmit>
      break;
 8016268:	e154      	b.n	8016514 <tcp_process+0x7a8>
 801626a:	e153      	b.n	8016514 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801626c:	6878      	ldr	r0, [r7, #4]
 801626e:	f000 fa71 	bl	8016754 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8016272:	4b2d      	ldr	r3, [pc, #180]	; (8016328 <tcp_process+0x5bc>)
 8016274:	781b      	ldrb	r3, [r3, #0]
 8016276:	f003 0320 	and.w	r3, r3, #32
 801627a:	2b00      	cmp	r3, #0
 801627c:	f000 814c 	beq.w	8016518 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	8b5b      	ldrh	r3, [r3, #26]
 8016284:	f043 0302 	orr.w	r3, r3, #2
 8016288:	b29a      	uxth	r2, r3
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	2207      	movs	r2, #7
 8016292:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016294:	e140      	b.n	8016518 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8016296:	6878      	ldr	r0, [r7, #4]
 8016298:	f000 fa5c 	bl	8016754 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801629c:	4b22      	ldr	r3, [pc, #136]	; (8016328 <tcp_process+0x5bc>)
 801629e:	781b      	ldrb	r3, [r3, #0]
 80162a0:	f003 0320 	and.w	r3, r3, #32
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d071      	beq.n	801638c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80162a8:	4b14      	ldr	r3, [pc, #80]	; (80162fc <tcp_process+0x590>)
 80162aa:	781b      	ldrb	r3, [r3, #0]
 80162ac:	f003 0310 	and.w	r3, r3, #16
 80162b0:	2b00      	cmp	r3, #0
 80162b2:	d060      	beq.n	8016376 <tcp_process+0x60a>
 80162b4:	687b      	ldr	r3, [r7, #4]
 80162b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80162b8:	4b11      	ldr	r3, [pc, #68]	; (8016300 <tcp_process+0x594>)
 80162ba:	681b      	ldr	r3, [r3, #0]
 80162bc:	429a      	cmp	r2, r3
 80162be:	d15a      	bne.n	8016376 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80162c0:	687b      	ldr	r3, [r7, #4]
 80162c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d156      	bne.n	8016376 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	8b5b      	ldrh	r3, [r3, #26]
 80162cc:	f043 0302 	orr.w	r3, r3, #2
 80162d0:	b29a      	uxth	r2, r3
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80162d6:	6878      	ldr	r0, [r7, #4]
 80162d8:	f7fe fdbc 	bl	8014e54 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80162dc:	4b13      	ldr	r3, [pc, #76]	; (801632c <tcp_process+0x5c0>)
 80162de:	681b      	ldr	r3, [r3, #0]
 80162e0:	687a      	ldr	r2, [r7, #4]
 80162e2:	429a      	cmp	r2, r3
 80162e4:	d105      	bne.n	80162f2 <tcp_process+0x586>
 80162e6:	4b11      	ldr	r3, [pc, #68]	; (801632c <tcp_process+0x5c0>)
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	68db      	ldr	r3, [r3, #12]
 80162ec:	4a0f      	ldr	r2, [pc, #60]	; (801632c <tcp_process+0x5c0>)
 80162ee:	6013      	str	r3, [r2, #0]
 80162f0:	e02e      	b.n	8016350 <tcp_process+0x5e4>
 80162f2:	4b0e      	ldr	r3, [pc, #56]	; (801632c <tcp_process+0x5c0>)
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	617b      	str	r3, [r7, #20]
 80162f8:	e027      	b.n	801634a <tcp_process+0x5de>
 80162fa:	bf00      	nop
 80162fc:	2000de00 	.word	0x2000de00
 8016300:	2000ddf8 	.word	0x2000ddf8
 8016304:	2000ddfe 	.word	0x2000ddfe
 8016308:	2000ddf4 	.word	0x2000ddf4
 801630c:	2000dde4 	.word	0x2000dde4
 8016310:	2000a678 	.word	0x2000a678
 8016314:	2000a67c 	.word	0x2000a67c
 8016318:	0802041c 	.word	0x0802041c
 801631c:	080206bc 	.word	0x080206bc
 8016320:	08020468 	.word	0x08020468
 8016324:	2000ddfc 	.word	0x2000ddfc
 8016328:	2000de01 	.word	0x2000de01
 801632c:	2000ddc8 	.word	0x2000ddc8
 8016330:	697b      	ldr	r3, [r7, #20]
 8016332:	68db      	ldr	r3, [r3, #12]
 8016334:	687a      	ldr	r2, [r7, #4]
 8016336:	429a      	cmp	r2, r3
 8016338:	d104      	bne.n	8016344 <tcp_process+0x5d8>
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	68da      	ldr	r2, [r3, #12]
 801633e:	697b      	ldr	r3, [r7, #20]
 8016340:	60da      	str	r2, [r3, #12]
 8016342:	e005      	b.n	8016350 <tcp_process+0x5e4>
 8016344:	697b      	ldr	r3, [r7, #20]
 8016346:	68db      	ldr	r3, [r3, #12]
 8016348:	617b      	str	r3, [r7, #20]
 801634a:	697b      	ldr	r3, [r7, #20]
 801634c:	2b00      	cmp	r3, #0
 801634e:	d1ef      	bne.n	8016330 <tcp_process+0x5c4>
 8016350:	687b      	ldr	r3, [r7, #4]
 8016352:	2200      	movs	r2, #0
 8016354:	60da      	str	r2, [r3, #12]
 8016356:	4b77      	ldr	r3, [pc, #476]	; (8016534 <tcp_process+0x7c8>)
 8016358:	2201      	movs	r2, #1
 801635a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801635c:	687b      	ldr	r3, [r7, #4]
 801635e:	220a      	movs	r2, #10
 8016360:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8016362:	4b75      	ldr	r3, [pc, #468]	; (8016538 <tcp_process+0x7cc>)
 8016364:	681a      	ldr	r2, [r3, #0]
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	60da      	str	r2, [r3, #12]
 801636a:	4a73      	ldr	r2, [pc, #460]	; (8016538 <tcp_process+0x7cc>)
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	6013      	str	r3, [r2, #0]
 8016370:	f003 f952 	bl	8019618 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8016374:	e0d2      	b.n	801651c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	8b5b      	ldrh	r3, [r3, #26]
 801637a:	f043 0302 	orr.w	r3, r3, #2
 801637e:	b29a      	uxth	r2, r3
 8016380:	687b      	ldr	r3, [r7, #4]
 8016382:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	2208      	movs	r2, #8
 8016388:	751a      	strb	r2, [r3, #20]
      break;
 801638a:	e0c7      	b.n	801651c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801638c:	4b6b      	ldr	r3, [pc, #428]	; (801653c <tcp_process+0x7d0>)
 801638e:	781b      	ldrb	r3, [r3, #0]
 8016390:	f003 0310 	and.w	r3, r3, #16
 8016394:	2b00      	cmp	r3, #0
 8016396:	f000 80c1 	beq.w	801651c <tcp_process+0x7b0>
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801639e:	4b68      	ldr	r3, [pc, #416]	; (8016540 <tcp_process+0x7d4>)
 80163a0:	681b      	ldr	r3, [r3, #0]
 80163a2:	429a      	cmp	r2, r3
 80163a4:	f040 80ba 	bne.w	801651c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	f040 80b5 	bne.w	801651c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80163b2:	687b      	ldr	r3, [r7, #4]
 80163b4:	2206      	movs	r2, #6
 80163b6:	751a      	strb	r2, [r3, #20]
      break;
 80163b8:	e0b0      	b.n	801651c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80163ba:	6878      	ldr	r0, [r7, #4]
 80163bc:	f000 f9ca 	bl	8016754 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80163c0:	4b60      	ldr	r3, [pc, #384]	; (8016544 <tcp_process+0x7d8>)
 80163c2:	781b      	ldrb	r3, [r3, #0]
 80163c4:	f003 0320 	and.w	r3, r3, #32
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	f000 80a9 	beq.w	8016520 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80163ce:	687b      	ldr	r3, [r7, #4]
 80163d0:	8b5b      	ldrh	r3, [r3, #26]
 80163d2:	f043 0302 	orr.w	r3, r3, #2
 80163d6:	b29a      	uxth	r2, r3
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 80163dc:	6878      	ldr	r0, [r7, #4]
 80163de:	f7fe fd39 	bl	8014e54 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80163e2:	4b59      	ldr	r3, [pc, #356]	; (8016548 <tcp_process+0x7dc>)
 80163e4:	681b      	ldr	r3, [r3, #0]
 80163e6:	687a      	ldr	r2, [r7, #4]
 80163e8:	429a      	cmp	r2, r3
 80163ea:	d105      	bne.n	80163f8 <tcp_process+0x68c>
 80163ec:	4b56      	ldr	r3, [pc, #344]	; (8016548 <tcp_process+0x7dc>)
 80163ee:	681b      	ldr	r3, [r3, #0]
 80163f0:	68db      	ldr	r3, [r3, #12]
 80163f2:	4a55      	ldr	r2, [pc, #340]	; (8016548 <tcp_process+0x7dc>)
 80163f4:	6013      	str	r3, [r2, #0]
 80163f6:	e013      	b.n	8016420 <tcp_process+0x6b4>
 80163f8:	4b53      	ldr	r3, [pc, #332]	; (8016548 <tcp_process+0x7dc>)
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	613b      	str	r3, [r7, #16]
 80163fe:	e00c      	b.n	801641a <tcp_process+0x6ae>
 8016400:	693b      	ldr	r3, [r7, #16]
 8016402:	68db      	ldr	r3, [r3, #12]
 8016404:	687a      	ldr	r2, [r7, #4]
 8016406:	429a      	cmp	r2, r3
 8016408:	d104      	bne.n	8016414 <tcp_process+0x6a8>
 801640a:	687b      	ldr	r3, [r7, #4]
 801640c:	68da      	ldr	r2, [r3, #12]
 801640e:	693b      	ldr	r3, [r7, #16]
 8016410:	60da      	str	r2, [r3, #12]
 8016412:	e005      	b.n	8016420 <tcp_process+0x6b4>
 8016414:	693b      	ldr	r3, [r7, #16]
 8016416:	68db      	ldr	r3, [r3, #12]
 8016418:	613b      	str	r3, [r7, #16]
 801641a:	693b      	ldr	r3, [r7, #16]
 801641c:	2b00      	cmp	r3, #0
 801641e:	d1ef      	bne.n	8016400 <tcp_process+0x694>
 8016420:	687b      	ldr	r3, [r7, #4]
 8016422:	2200      	movs	r2, #0
 8016424:	60da      	str	r2, [r3, #12]
 8016426:	4b43      	ldr	r3, [pc, #268]	; (8016534 <tcp_process+0x7c8>)
 8016428:	2201      	movs	r2, #1
 801642a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	220a      	movs	r2, #10
 8016430:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8016432:	4b41      	ldr	r3, [pc, #260]	; (8016538 <tcp_process+0x7cc>)
 8016434:	681a      	ldr	r2, [r3, #0]
 8016436:	687b      	ldr	r3, [r7, #4]
 8016438:	60da      	str	r2, [r3, #12]
 801643a:	4a3f      	ldr	r2, [pc, #252]	; (8016538 <tcp_process+0x7cc>)
 801643c:	687b      	ldr	r3, [r7, #4]
 801643e:	6013      	str	r3, [r2, #0]
 8016440:	f003 f8ea 	bl	8019618 <tcp_timer_needed>
      }
      break;
 8016444:	e06c      	b.n	8016520 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8016446:	6878      	ldr	r0, [r7, #4]
 8016448:	f000 f984 	bl	8016754 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801644c:	4b3b      	ldr	r3, [pc, #236]	; (801653c <tcp_process+0x7d0>)
 801644e:	781b      	ldrb	r3, [r3, #0]
 8016450:	f003 0310 	and.w	r3, r3, #16
 8016454:	2b00      	cmp	r3, #0
 8016456:	d065      	beq.n	8016524 <tcp_process+0x7b8>
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801645c:	4b38      	ldr	r3, [pc, #224]	; (8016540 <tcp_process+0x7d4>)
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	429a      	cmp	r2, r3
 8016462:	d15f      	bne.n	8016524 <tcp_process+0x7b8>
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016468:	2b00      	cmp	r3, #0
 801646a:	d15b      	bne.n	8016524 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801646c:	6878      	ldr	r0, [r7, #4]
 801646e:	f7fe fcf1 	bl	8014e54 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8016472:	4b35      	ldr	r3, [pc, #212]	; (8016548 <tcp_process+0x7dc>)
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	687a      	ldr	r2, [r7, #4]
 8016478:	429a      	cmp	r2, r3
 801647a:	d105      	bne.n	8016488 <tcp_process+0x71c>
 801647c:	4b32      	ldr	r3, [pc, #200]	; (8016548 <tcp_process+0x7dc>)
 801647e:	681b      	ldr	r3, [r3, #0]
 8016480:	68db      	ldr	r3, [r3, #12]
 8016482:	4a31      	ldr	r2, [pc, #196]	; (8016548 <tcp_process+0x7dc>)
 8016484:	6013      	str	r3, [r2, #0]
 8016486:	e013      	b.n	80164b0 <tcp_process+0x744>
 8016488:	4b2f      	ldr	r3, [pc, #188]	; (8016548 <tcp_process+0x7dc>)
 801648a:	681b      	ldr	r3, [r3, #0]
 801648c:	60fb      	str	r3, [r7, #12]
 801648e:	e00c      	b.n	80164aa <tcp_process+0x73e>
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	68db      	ldr	r3, [r3, #12]
 8016494:	687a      	ldr	r2, [r7, #4]
 8016496:	429a      	cmp	r2, r3
 8016498:	d104      	bne.n	80164a4 <tcp_process+0x738>
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	68da      	ldr	r2, [r3, #12]
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	60da      	str	r2, [r3, #12]
 80164a2:	e005      	b.n	80164b0 <tcp_process+0x744>
 80164a4:	68fb      	ldr	r3, [r7, #12]
 80164a6:	68db      	ldr	r3, [r3, #12]
 80164a8:	60fb      	str	r3, [r7, #12]
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d1ef      	bne.n	8016490 <tcp_process+0x724>
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	2200      	movs	r2, #0
 80164b4:	60da      	str	r2, [r3, #12]
 80164b6:	4b1f      	ldr	r3, [pc, #124]	; (8016534 <tcp_process+0x7c8>)
 80164b8:	2201      	movs	r2, #1
 80164ba:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80164bc:	687b      	ldr	r3, [r7, #4]
 80164be:	220a      	movs	r2, #10
 80164c0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80164c2:	4b1d      	ldr	r3, [pc, #116]	; (8016538 <tcp_process+0x7cc>)
 80164c4:	681a      	ldr	r2, [r3, #0]
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	60da      	str	r2, [r3, #12]
 80164ca:	4a1b      	ldr	r2, [pc, #108]	; (8016538 <tcp_process+0x7cc>)
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	6013      	str	r3, [r2, #0]
 80164d0:	f003 f8a2 	bl	8019618 <tcp_timer_needed>
      }
      break;
 80164d4:	e026      	b.n	8016524 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80164d6:	6878      	ldr	r0, [r7, #4]
 80164d8:	f000 f93c 	bl	8016754 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80164dc:	4b17      	ldr	r3, [pc, #92]	; (801653c <tcp_process+0x7d0>)
 80164de:	781b      	ldrb	r3, [r3, #0]
 80164e0:	f003 0310 	and.w	r3, r3, #16
 80164e4:	2b00      	cmp	r3, #0
 80164e6:	d01f      	beq.n	8016528 <tcp_process+0x7bc>
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80164ec:	4b14      	ldr	r3, [pc, #80]	; (8016540 <tcp_process+0x7d4>)
 80164ee:	681b      	ldr	r3, [r3, #0]
 80164f0:	429a      	cmp	r2, r3
 80164f2:	d119      	bne.n	8016528 <tcp_process+0x7bc>
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d115      	bne.n	8016528 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80164fc:	4b11      	ldr	r3, [pc, #68]	; (8016544 <tcp_process+0x7d8>)
 80164fe:	781b      	ldrb	r3, [r3, #0]
 8016500:	f043 0310 	orr.w	r3, r3, #16
 8016504:	b2da      	uxtb	r2, r3
 8016506:	4b0f      	ldr	r3, [pc, #60]	; (8016544 <tcp_process+0x7d8>)
 8016508:	701a      	strb	r2, [r3, #0]
      }
      break;
 801650a:	e00d      	b.n	8016528 <tcp_process+0x7bc>
    default:
      break;
 801650c:	bf00      	nop
 801650e:	e00c      	b.n	801652a <tcp_process+0x7be>
      break;
 8016510:	bf00      	nop
 8016512:	e00a      	b.n	801652a <tcp_process+0x7be>
      break;
 8016514:	bf00      	nop
 8016516:	e008      	b.n	801652a <tcp_process+0x7be>
      break;
 8016518:	bf00      	nop
 801651a:	e006      	b.n	801652a <tcp_process+0x7be>
      break;
 801651c:	bf00      	nop
 801651e:	e004      	b.n	801652a <tcp_process+0x7be>
      break;
 8016520:	bf00      	nop
 8016522:	e002      	b.n	801652a <tcp_process+0x7be>
      break;
 8016524:	bf00      	nop
 8016526:	e000      	b.n	801652a <tcp_process+0x7be>
      break;
 8016528:	bf00      	nop
  }
  return ERR_OK;
 801652a:	2300      	movs	r3, #0
}
 801652c:	4618      	mov	r0, r3
 801652e:	3724      	adds	r7, #36	; 0x24
 8016530:	46bd      	mov	sp, r7
 8016532:	bd90      	pop	{r4, r7, pc}
 8016534:	2000ddd0 	.word	0x2000ddd0
 8016538:	2000ddcc 	.word	0x2000ddcc
 801653c:	2000de00 	.word	0x2000de00
 8016540:	2000ddf8 	.word	0x2000ddf8
 8016544:	2000de01 	.word	0x2000de01
 8016548:	2000ddc8 	.word	0x2000ddc8

0801654c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801654c:	b590      	push	{r4, r7, lr}
 801654e:	b085      	sub	sp, #20
 8016550:	af00      	add	r7, sp, #0
 8016552:	6078      	str	r0, [r7, #4]
 8016554:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	2b00      	cmp	r3, #0
 801655a:	d106      	bne.n	801656a <tcp_oos_insert_segment+0x1e>
 801655c:	4b3b      	ldr	r3, [pc, #236]	; (801664c <tcp_oos_insert_segment+0x100>)
 801655e:	f240 421f 	movw	r2, #1055	; 0x41f
 8016562:	493b      	ldr	r1, [pc, #236]	; (8016650 <tcp_oos_insert_segment+0x104>)
 8016564:	483b      	ldr	r0, [pc, #236]	; (8016654 <tcp_oos_insert_segment+0x108>)
 8016566:	f006 fda5 	bl	801d0b4 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801656a:	687b      	ldr	r3, [r7, #4]
 801656c:	68db      	ldr	r3, [r3, #12]
 801656e:	899b      	ldrh	r3, [r3, #12]
 8016570:	b29b      	uxth	r3, r3
 8016572:	4618      	mov	r0, r3
 8016574:	f7fb faa2 	bl	8011abc <lwip_htons>
 8016578:	4603      	mov	r3, r0
 801657a:	b2db      	uxtb	r3, r3
 801657c:	f003 0301 	and.w	r3, r3, #1
 8016580:	2b00      	cmp	r3, #0
 8016582:	d028      	beq.n	80165d6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8016584:	6838      	ldr	r0, [r7, #0]
 8016586:	f7fe f995 	bl	80148b4 <tcp_segs_free>
    next = NULL;
 801658a:	2300      	movs	r3, #0
 801658c:	603b      	str	r3, [r7, #0]
 801658e:	e056      	b.n	801663e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016590:	683b      	ldr	r3, [r7, #0]
 8016592:	68db      	ldr	r3, [r3, #12]
 8016594:	899b      	ldrh	r3, [r3, #12]
 8016596:	b29b      	uxth	r3, r3
 8016598:	4618      	mov	r0, r3
 801659a:	f7fb fa8f 	bl	8011abc <lwip_htons>
 801659e:	4603      	mov	r3, r0
 80165a0:	b2db      	uxtb	r3, r3
 80165a2:	f003 0301 	and.w	r3, r3, #1
 80165a6:	2b00      	cmp	r3, #0
 80165a8:	d00d      	beq.n	80165c6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	68db      	ldr	r3, [r3, #12]
 80165ae:	899b      	ldrh	r3, [r3, #12]
 80165b0:	b29c      	uxth	r4, r3
 80165b2:	2001      	movs	r0, #1
 80165b4:	f7fb fa82 	bl	8011abc <lwip_htons>
 80165b8:	4603      	mov	r3, r0
 80165ba:	461a      	mov	r2, r3
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	68db      	ldr	r3, [r3, #12]
 80165c0:	4322      	orrs	r2, r4
 80165c2:	b292      	uxth	r2, r2
 80165c4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80165c6:	683b      	ldr	r3, [r7, #0]
 80165c8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80165ca:	683b      	ldr	r3, [r7, #0]
 80165cc:	681b      	ldr	r3, [r3, #0]
 80165ce:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 80165d0:	68f8      	ldr	r0, [r7, #12]
 80165d2:	f7fe f984 	bl	80148de <tcp_seg_free>
    while (next &&
 80165d6:	683b      	ldr	r3, [r7, #0]
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d00e      	beq.n	80165fa <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	891b      	ldrh	r3, [r3, #8]
 80165e0:	461a      	mov	r2, r3
 80165e2:	4b1d      	ldr	r3, [pc, #116]	; (8016658 <tcp_oos_insert_segment+0x10c>)
 80165e4:	681b      	ldr	r3, [r3, #0]
 80165e6:	441a      	add	r2, r3
 80165e8:	683b      	ldr	r3, [r7, #0]
 80165ea:	68db      	ldr	r3, [r3, #12]
 80165ec:	685b      	ldr	r3, [r3, #4]
 80165ee:	6839      	ldr	r1, [r7, #0]
 80165f0:	8909      	ldrh	r1, [r1, #8]
 80165f2:	440b      	add	r3, r1
 80165f4:	1ad3      	subs	r3, r2, r3
    while (next &&
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	daca      	bge.n	8016590 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80165fa:	683b      	ldr	r3, [r7, #0]
 80165fc:	2b00      	cmp	r3, #0
 80165fe:	d01e      	beq.n	801663e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	891b      	ldrh	r3, [r3, #8]
 8016604:	461a      	mov	r2, r3
 8016606:	4b14      	ldr	r3, [pc, #80]	; (8016658 <tcp_oos_insert_segment+0x10c>)
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	441a      	add	r2, r3
 801660c:	683b      	ldr	r3, [r7, #0]
 801660e:	68db      	ldr	r3, [r3, #12]
 8016610:	685b      	ldr	r3, [r3, #4]
 8016612:	1ad3      	subs	r3, r2, r3
    if (next &&
 8016614:	2b00      	cmp	r3, #0
 8016616:	dd12      	ble.n	801663e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8016618:	683b      	ldr	r3, [r7, #0]
 801661a:	68db      	ldr	r3, [r3, #12]
 801661c:	685b      	ldr	r3, [r3, #4]
 801661e:	b29a      	uxth	r2, r3
 8016620:	4b0d      	ldr	r3, [pc, #52]	; (8016658 <tcp_oos_insert_segment+0x10c>)
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	b29b      	uxth	r3, r3
 8016626:	1ad3      	subs	r3, r2, r3
 8016628:	b29a      	uxth	r2, r3
 801662a:	687b      	ldr	r3, [r7, #4]
 801662c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	685a      	ldr	r2, [r3, #4]
 8016632:	687b      	ldr	r3, [r7, #4]
 8016634:	891b      	ldrh	r3, [r3, #8]
 8016636:	4619      	mov	r1, r3
 8016638:	4610      	mov	r0, r2
 801663a:	f7fc fc01 	bl	8012e40 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801663e:	687b      	ldr	r3, [r7, #4]
 8016640:	683a      	ldr	r2, [r7, #0]
 8016642:	601a      	str	r2, [r3, #0]
}
 8016644:	bf00      	nop
 8016646:	3714      	adds	r7, #20
 8016648:	46bd      	mov	sp, r7
 801664a:	bd90      	pop	{r4, r7, pc}
 801664c:	0802041c 	.word	0x0802041c
 8016650:	080206dc 	.word	0x080206dc
 8016654:	08020468 	.word	0x08020468
 8016658:	2000ddf4 	.word	0x2000ddf4

0801665c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801665c:	b5b0      	push	{r4, r5, r7, lr}
 801665e:	b086      	sub	sp, #24
 8016660:	af00      	add	r7, sp, #0
 8016662:	60f8      	str	r0, [r7, #12]
 8016664:	60b9      	str	r1, [r7, #8]
 8016666:	607a      	str	r2, [r7, #4]
 8016668:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801666a:	e03e      	b.n	80166ea <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801666c:	68bb      	ldr	r3, [r7, #8]
 801666e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8016670:	68bb      	ldr	r3, [r7, #8]
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8016676:	697b      	ldr	r3, [r7, #20]
 8016678:	685b      	ldr	r3, [r3, #4]
 801667a:	4618      	mov	r0, r3
 801667c:	f7fc fdf4 	bl	8013268 <pbuf_clen>
 8016680:	4603      	mov	r3, r0
 8016682:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8016684:	68fb      	ldr	r3, [r7, #12]
 8016686:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801668a:	8a7a      	ldrh	r2, [r7, #18]
 801668c:	429a      	cmp	r2, r3
 801668e:	d906      	bls.n	801669e <tcp_free_acked_segments+0x42>
 8016690:	4b2a      	ldr	r3, [pc, #168]	; (801673c <tcp_free_acked_segments+0xe0>)
 8016692:	f240 4257 	movw	r2, #1111	; 0x457
 8016696:	492a      	ldr	r1, [pc, #168]	; (8016740 <tcp_free_acked_segments+0xe4>)
 8016698:	482a      	ldr	r0, [pc, #168]	; (8016744 <tcp_free_acked_segments+0xe8>)
 801669a:	f006 fd0b 	bl	801d0b4 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801669e:	68fb      	ldr	r3, [r7, #12]
 80166a0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80166a4:	8a7b      	ldrh	r3, [r7, #18]
 80166a6:	1ad3      	subs	r3, r2, r3
 80166a8:	b29a      	uxth	r2, r3
 80166aa:	68fb      	ldr	r3, [r7, #12]
 80166ac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80166b0:	697b      	ldr	r3, [r7, #20]
 80166b2:	891a      	ldrh	r2, [r3, #8]
 80166b4:	4b24      	ldr	r3, [pc, #144]	; (8016748 <tcp_free_acked_segments+0xec>)
 80166b6:	881b      	ldrh	r3, [r3, #0]
 80166b8:	4413      	add	r3, r2
 80166ba:	b29a      	uxth	r2, r3
 80166bc:	4b22      	ldr	r3, [pc, #136]	; (8016748 <tcp_free_acked_segments+0xec>)
 80166be:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80166c0:	6978      	ldr	r0, [r7, #20]
 80166c2:	f7fe f90c 	bl	80148de <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80166c6:	68fb      	ldr	r3, [r7, #12]
 80166c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80166cc:	2b00      	cmp	r3, #0
 80166ce:	d00c      	beq.n	80166ea <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 80166d0:	68bb      	ldr	r3, [r7, #8]
 80166d2:	2b00      	cmp	r3, #0
 80166d4:	d109      	bne.n	80166ea <tcp_free_acked_segments+0x8e>
 80166d6:	683b      	ldr	r3, [r7, #0]
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d106      	bne.n	80166ea <tcp_free_acked_segments+0x8e>
 80166dc:	4b17      	ldr	r3, [pc, #92]	; (801673c <tcp_free_acked_segments+0xe0>)
 80166de:	f240 4261 	movw	r2, #1121	; 0x461
 80166e2:	491a      	ldr	r1, [pc, #104]	; (801674c <tcp_free_acked_segments+0xf0>)
 80166e4:	4817      	ldr	r0, [pc, #92]	; (8016744 <tcp_free_acked_segments+0xe8>)
 80166e6:	f006 fce5 	bl	801d0b4 <iprintf>
  while (seg_list != NULL &&
 80166ea:	68bb      	ldr	r3, [r7, #8]
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d020      	beq.n	8016732 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80166f0:	68bb      	ldr	r3, [r7, #8]
 80166f2:	68db      	ldr	r3, [r3, #12]
 80166f4:	685b      	ldr	r3, [r3, #4]
 80166f6:	4618      	mov	r0, r3
 80166f8:	f7fb f9f5 	bl	8011ae6 <lwip_htonl>
 80166fc:	4604      	mov	r4, r0
 80166fe:	68bb      	ldr	r3, [r7, #8]
 8016700:	891b      	ldrh	r3, [r3, #8]
 8016702:	461d      	mov	r5, r3
 8016704:	68bb      	ldr	r3, [r7, #8]
 8016706:	68db      	ldr	r3, [r3, #12]
 8016708:	899b      	ldrh	r3, [r3, #12]
 801670a:	b29b      	uxth	r3, r3
 801670c:	4618      	mov	r0, r3
 801670e:	f7fb f9d5 	bl	8011abc <lwip_htons>
 8016712:	4603      	mov	r3, r0
 8016714:	b2db      	uxtb	r3, r3
 8016716:	f003 0303 	and.w	r3, r3, #3
 801671a:	2b00      	cmp	r3, #0
 801671c:	d001      	beq.n	8016722 <tcp_free_acked_segments+0xc6>
 801671e:	2301      	movs	r3, #1
 8016720:	e000      	b.n	8016724 <tcp_free_acked_segments+0xc8>
 8016722:	2300      	movs	r3, #0
 8016724:	442b      	add	r3, r5
 8016726:	18e2      	adds	r2, r4, r3
 8016728:	4b09      	ldr	r3, [pc, #36]	; (8016750 <tcp_free_acked_segments+0xf4>)
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801672e:	2b00      	cmp	r3, #0
 8016730:	dd9c      	ble.n	801666c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8016732:	68bb      	ldr	r3, [r7, #8]
}
 8016734:	4618      	mov	r0, r3
 8016736:	3718      	adds	r7, #24
 8016738:	46bd      	mov	sp, r7
 801673a:	bdb0      	pop	{r4, r5, r7, pc}
 801673c:	0802041c 	.word	0x0802041c
 8016740:	08020704 	.word	0x08020704
 8016744:	08020468 	.word	0x08020468
 8016748:	2000ddfc 	.word	0x2000ddfc
 801674c:	0802072c 	.word	0x0802072c
 8016750:	2000ddf8 	.word	0x2000ddf8

08016754 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8016754:	b5b0      	push	{r4, r5, r7, lr}
 8016756:	b094      	sub	sp, #80	; 0x50
 8016758:	af00      	add	r7, sp, #0
 801675a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801675c:	2300      	movs	r3, #0
 801675e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	2b00      	cmp	r3, #0
 8016764:	d106      	bne.n	8016774 <tcp_receive+0x20>
 8016766:	4b91      	ldr	r3, [pc, #580]	; (80169ac <tcp_receive+0x258>)
 8016768:	f240 427b 	movw	r2, #1147	; 0x47b
 801676c:	4990      	ldr	r1, [pc, #576]	; (80169b0 <tcp_receive+0x25c>)
 801676e:	4891      	ldr	r0, [pc, #580]	; (80169b4 <tcp_receive+0x260>)
 8016770:	f006 fca0 	bl	801d0b4 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	7d1b      	ldrb	r3, [r3, #20]
 8016778:	2b03      	cmp	r3, #3
 801677a:	d806      	bhi.n	801678a <tcp_receive+0x36>
 801677c:	4b8b      	ldr	r3, [pc, #556]	; (80169ac <tcp_receive+0x258>)
 801677e:	f240 427c 	movw	r2, #1148	; 0x47c
 8016782:	498d      	ldr	r1, [pc, #564]	; (80169b8 <tcp_receive+0x264>)
 8016784:	488b      	ldr	r0, [pc, #556]	; (80169b4 <tcp_receive+0x260>)
 8016786:	f006 fc95 	bl	801d0b4 <iprintf>

  if (flags & TCP_ACK) {
 801678a:	4b8c      	ldr	r3, [pc, #560]	; (80169bc <tcp_receive+0x268>)
 801678c:	781b      	ldrb	r3, [r3, #0]
 801678e:	f003 0310 	and.w	r3, r3, #16
 8016792:	2b00      	cmp	r3, #0
 8016794:	f000 8264 	beq.w	8016c60 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801679e:	461a      	mov	r2, r3
 80167a0:	687b      	ldr	r3, [r7, #4]
 80167a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80167a4:	4413      	add	r3, r2
 80167a6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80167ac:	4b84      	ldr	r3, [pc, #528]	; (80169c0 <tcp_receive+0x26c>)
 80167ae:	681b      	ldr	r3, [r3, #0]
 80167b0:	1ad3      	subs	r3, r2, r3
 80167b2:	2b00      	cmp	r3, #0
 80167b4:	db1b      	blt.n	80167ee <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80167b6:	687b      	ldr	r3, [r7, #4]
 80167b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80167ba:	4b81      	ldr	r3, [pc, #516]	; (80169c0 <tcp_receive+0x26c>)
 80167bc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80167be:	429a      	cmp	r2, r3
 80167c0:	d106      	bne.n	80167d0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80167c6:	4b7f      	ldr	r3, [pc, #508]	; (80169c4 <tcp_receive+0x270>)
 80167c8:	681b      	ldr	r3, [r3, #0]
 80167ca:	1ad3      	subs	r3, r2, r3
 80167cc:	2b00      	cmp	r3, #0
 80167ce:	db0e      	blt.n	80167ee <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80167d4:	4b7b      	ldr	r3, [pc, #492]	; (80169c4 <tcp_receive+0x270>)
 80167d6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80167d8:	429a      	cmp	r2, r3
 80167da:	d125      	bne.n	8016828 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80167dc:	4b7a      	ldr	r3, [pc, #488]	; (80169c8 <tcp_receive+0x274>)
 80167de:	681b      	ldr	r3, [r3, #0]
 80167e0:	89db      	ldrh	r3, [r3, #14]
 80167e2:	b29a      	uxth	r2, r3
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80167ea:	429a      	cmp	r2, r3
 80167ec:	d91c      	bls.n	8016828 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80167ee:	4b76      	ldr	r3, [pc, #472]	; (80169c8 <tcp_receive+0x274>)
 80167f0:	681b      	ldr	r3, [r3, #0]
 80167f2:	89db      	ldrh	r3, [r3, #14]
 80167f4:	b29a      	uxth	r2, r3
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80167fc:	687b      	ldr	r3, [r7, #4]
 80167fe:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016808:	429a      	cmp	r2, r3
 801680a:	d205      	bcs.n	8016818 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8016818:	4b69      	ldr	r3, [pc, #420]	; (80169c0 <tcp_receive+0x26c>)
 801681a:	681a      	ldr	r2, [r3, #0]
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8016820:	4b68      	ldr	r3, [pc, #416]	; (80169c4 <tcp_receive+0x270>)
 8016822:	681a      	ldr	r2, [r3, #0]
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8016828:	4b66      	ldr	r3, [pc, #408]	; (80169c4 <tcp_receive+0x270>)
 801682a:	681a      	ldr	r2, [r3, #0]
 801682c:	687b      	ldr	r3, [r7, #4]
 801682e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016830:	1ad3      	subs	r3, r2, r3
 8016832:	2b00      	cmp	r3, #0
 8016834:	dc58      	bgt.n	80168e8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8016836:	4b65      	ldr	r3, [pc, #404]	; (80169cc <tcp_receive+0x278>)
 8016838:	881b      	ldrh	r3, [r3, #0]
 801683a:	2b00      	cmp	r3, #0
 801683c:	d14b      	bne.n	80168d6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801683e:	687b      	ldr	r3, [r7, #4]
 8016840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016842:	687a      	ldr	r2, [r7, #4]
 8016844:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8016848:	4413      	add	r3, r2
 801684a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801684c:	429a      	cmp	r2, r3
 801684e:	d142      	bne.n	80168d6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8016850:	687b      	ldr	r3, [r7, #4]
 8016852:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016856:	2b00      	cmp	r3, #0
 8016858:	db3d      	blt.n	80168d6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801685e:	4b59      	ldr	r3, [pc, #356]	; (80169c4 <tcp_receive+0x270>)
 8016860:	681b      	ldr	r3, [r3, #0]
 8016862:	429a      	cmp	r2, r3
 8016864:	d137      	bne.n	80168d6 <tcp_receive+0x182>
              found_dupack = 1;
 8016866:	2301      	movs	r3, #1
 8016868:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016870:	2bff      	cmp	r3, #255	; 0xff
 8016872:	d007      	beq.n	8016884 <tcp_receive+0x130>
                ++pcb->dupacks;
 8016874:	687b      	ldr	r3, [r7, #4]
 8016876:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801687a:	3301      	adds	r3, #1
 801687c:	b2da      	uxtb	r2, r3
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8016884:	687b      	ldr	r3, [r7, #4]
 8016886:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801688a:	2b03      	cmp	r3, #3
 801688c:	d91b      	bls.n	80168c6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016898:	4413      	add	r3, r2
 801689a:	b29a      	uxth	r2, r3
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80168a2:	429a      	cmp	r2, r3
 80168a4:	d30a      	bcc.n	80168bc <tcp_receive+0x168>
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80168b0:	4413      	add	r3, r2
 80168b2:	b29a      	uxth	r2, r3
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80168ba:	e004      	b.n	80168c6 <tcp_receive+0x172>
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80168c2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80168cc:	2b02      	cmp	r3, #2
 80168ce:	d902      	bls.n	80168d6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 80168d0:	6878      	ldr	r0, [r7, #4]
 80168d2:	f002 fb43 	bl	8018f5c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 80168d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80168d8:	2b00      	cmp	r3, #0
 80168da:	f040 8161 	bne.w	8016ba0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	2200      	movs	r2, #0
 80168e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80168e6:	e15b      	b.n	8016ba0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80168e8:	4b36      	ldr	r3, [pc, #216]	; (80169c4 <tcp_receive+0x270>)
 80168ea:	681a      	ldr	r2, [r3, #0]
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80168f0:	1ad3      	subs	r3, r2, r3
 80168f2:	3b01      	subs	r3, #1
 80168f4:	2b00      	cmp	r3, #0
 80168f6:	f2c0 814e 	blt.w	8016b96 <tcp_receive+0x442>
 80168fa:	4b32      	ldr	r3, [pc, #200]	; (80169c4 <tcp_receive+0x270>)
 80168fc:	681a      	ldr	r2, [r3, #0]
 80168fe:	687b      	ldr	r3, [r7, #4]
 8016900:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016902:	1ad3      	subs	r3, r2, r3
 8016904:	2b00      	cmp	r3, #0
 8016906:	f300 8146 	bgt.w	8016b96 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	8b5b      	ldrh	r3, [r3, #26]
 801690e:	f003 0304 	and.w	r3, r3, #4
 8016912:	2b00      	cmp	r3, #0
 8016914:	d010      	beq.n	8016938 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8016916:	687b      	ldr	r3, [r7, #4]
 8016918:	8b5b      	ldrh	r3, [r3, #26]
 801691a:	f023 0304 	bic.w	r3, r3, #4
 801691e:	b29a      	uxth	r2, r3
 8016920:	687b      	ldr	r3, [r7, #4]
 8016922:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	2200      	movs	r2, #0
 8016934:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	2200      	movs	r2, #0
 801693c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016946:	10db      	asrs	r3, r3, #3
 8016948:	b21b      	sxth	r3, r3
 801694a:	b29a      	uxth	r2, r3
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016952:	b29b      	uxth	r3, r3
 8016954:	4413      	add	r3, r2
 8016956:	b29b      	uxth	r3, r3
 8016958:	b21a      	sxth	r2, r3
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8016960:	4b18      	ldr	r3, [pc, #96]	; (80169c4 <tcp_receive+0x270>)
 8016962:	681b      	ldr	r3, [r3, #0]
 8016964:	b29a      	uxth	r2, r3
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801696a:	b29b      	uxth	r3, r3
 801696c:	1ad3      	subs	r3, r2, r3
 801696e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	2200      	movs	r2, #0
 8016974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8016978:	4b12      	ldr	r3, [pc, #72]	; (80169c4 <tcp_receive+0x270>)
 801697a:	681a      	ldr	r2, [r3, #0]
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	7d1b      	ldrb	r3, [r3, #20]
 8016984:	2b03      	cmp	r3, #3
 8016986:	f240 8097 	bls.w	8016ab8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8016996:	429a      	cmp	r2, r3
 8016998:	d245      	bcs.n	8016a26 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	8b5b      	ldrh	r3, [r3, #26]
 801699e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d014      	beq.n	80169d0 <tcp_receive+0x27c>
 80169a6:	2301      	movs	r3, #1
 80169a8:	e013      	b.n	80169d2 <tcp_receive+0x27e>
 80169aa:	bf00      	nop
 80169ac:	0802041c 	.word	0x0802041c
 80169b0:	0802074c 	.word	0x0802074c
 80169b4:	08020468 	.word	0x08020468
 80169b8:	08020768 	.word	0x08020768
 80169bc:	2000de00 	.word	0x2000de00
 80169c0:	2000ddf4 	.word	0x2000ddf4
 80169c4:	2000ddf8 	.word	0x2000ddf8
 80169c8:	2000dde4 	.word	0x2000dde4
 80169cc:	2000ddfe 	.word	0x2000ddfe
 80169d0:	2302      	movs	r3, #2
 80169d2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80169d6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80169da:	b29a      	uxth	r2, r3
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80169e0:	fb12 f303 	smulbb	r3, r2, r3
 80169e4:	b29b      	uxth	r3, r3
 80169e6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80169e8:	4293      	cmp	r3, r2
 80169ea:	bf28      	it	cs
 80169ec:	4613      	movcs	r3, r2
 80169ee:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80169f0:	687b      	ldr	r3, [r7, #4]
 80169f2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80169f6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80169f8:	4413      	add	r3, r2
 80169fa:	b29a      	uxth	r2, r3
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016a02:	429a      	cmp	r2, r3
 8016a04:	d309      	bcc.n	8016a1a <tcp_receive+0x2c6>
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016a0c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016a0e:	4413      	add	r3, r2
 8016a10:	b29a      	uxth	r2, r3
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016a18:	e04e      	b.n	8016ab8 <tcp_receive+0x364>
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016a20:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016a24:	e048      	b.n	8016ab8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016a2c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016a2e:	4413      	add	r3, r2
 8016a30:	b29a      	uxth	r2, r3
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8016a38:	429a      	cmp	r2, r3
 8016a3a:	d309      	bcc.n	8016a50 <tcp_receive+0x2fc>
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016a42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8016a44:	4413      	add	r3, r2
 8016a46:	b29a      	uxth	r2, r3
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8016a4e:	e004      	b.n	8016a5a <tcp_receive+0x306>
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016a56:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016a66:	429a      	cmp	r2, r3
 8016a68:	d326      	bcc.n	8016ab8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016a70:	687b      	ldr	r3, [r7, #4]
 8016a72:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016a76:	1ad3      	subs	r3, r2, r3
 8016a78:	b29a      	uxth	r2, r3
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016a8a:	4413      	add	r3, r2
 8016a8c:	b29a      	uxth	r2, r3
 8016a8e:	687b      	ldr	r3, [r7, #4]
 8016a90:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016a94:	429a      	cmp	r2, r3
 8016a96:	d30a      	bcc.n	8016aae <tcp_receive+0x35a>
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016aa2:	4413      	add	r3, r2
 8016aa4:	b29a      	uxth	r2, r3
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016aac:	e004      	b.n	8016ab8 <tcp_receive+0x364>
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016ab4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8016ab8:	687b      	ldr	r3, [r7, #4]
 8016aba:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016ac0:	4a98      	ldr	r2, [pc, #608]	; (8016d24 <tcp_receive+0x5d0>)
 8016ac2:	6878      	ldr	r0, [r7, #4]
 8016ac4:	f7ff fdca 	bl	801665c <tcp_free_acked_segments>
 8016ac8:	4602      	mov	r2, r0
 8016aca:	687b      	ldr	r3, [r7, #4]
 8016acc:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016ad6:	4a94      	ldr	r2, [pc, #592]	; (8016d28 <tcp_receive+0x5d4>)
 8016ad8:	6878      	ldr	r0, [r7, #4]
 8016ada:	f7ff fdbf 	bl	801665c <tcp_free_acked_segments>
 8016ade:	4602      	mov	r2, r0
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016ae8:	2b00      	cmp	r3, #0
 8016aea:	d104      	bne.n	8016af6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016af2:	861a      	strh	r2, [r3, #48]	; 0x30
 8016af4:	e002      	b.n	8016afc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	2200      	movs	r2, #0
 8016afa:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	2200      	movs	r2, #0
 8016b00:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d103      	bne.n	8016b12 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	2200      	movs	r2, #0
 8016b0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8016b18:	4b84      	ldr	r3, [pc, #528]	; (8016d2c <tcp_receive+0x5d8>)
 8016b1a:	881b      	ldrh	r3, [r3, #0]
 8016b1c:	4413      	add	r3, r2
 8016b1e:	b29a      	uxth	r2, r3
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	8b5b      	ldrh	r3, [r3, #26]
 8016b2a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016b2e:	2b00      	cmp	r3, #0
 8016b30:	d035      	beq.n	8016b9e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8016b32:	687b      	ldr	r3, [r7, #4]
 8016b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d118      	bne.n	8016b6c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b3e:	2b00      	cmp	r3, #0
 8016b40:	d00c      	beq.n	8016b5c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b4a:	68db      	ldr	r3, [r3, #12]
 8016b4c:	685b      	ldr	r3, [r3, #4]
 8016b4e:	4618      	mov	r0, r3
 8016b50:	f7fa ffc9 	bl	8011ae6 <lwip_htonl>
 8016b54:	4603      	mov	r3, r0
 8016b56:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8016b58:	2b00      	cmp	r3, #0
 8016b5a:	dc20      	bgt.n	8016b9e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	8b5b      	ldrh	r3, [r3, #26]
 8016b60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016b64:	b29a      	uxth	r2, r3
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016b6a:	e018      	b.n	8016b9e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8016b6c:	687b      	ldr	r3, [r7, #4]
 8016b6e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016b74:	68db      	ldr	r3, [r3, #12]
 8016b76:	685b      	ldr	r3, [r3, #4]
 8016b78:	4618      	mov	r0, r3
 8016b7a:	f7fa ffb4 	bl	8011ae6 <lwip_htonl>
 8016b7e:	4603      	mov	r3, r0
 8016b80:	1ae3      	subs	r3, r4, r3
 8016b82:	2b00      	cmp	r3, #0
 8016b84:	dc0b      	bgt.n	8016b9e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	8b5b      	ldrh	r3, [r3, #26]
 8016b8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016b8e:	b29a      	uxth	r2, r3
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016b94:	e003      	b.n	8016b9e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8016b96:	6878      	ldr	r0, [r7, #4]
 8016b98:	f002 fbce 	bl	8019338 <tcp_send_empty_ack>
 8016b9c:	e000      	b.n	8016ba0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016b9e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016ba4:	2b00      	cmp	r3, #0
 8016ba6:	d05b      	beq.n	8016c60 <tcp_receive+0x50c>
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016bac:	4b60      	ldr	r3, [pc, #384]	; (8016d30 <tcp_receive+0x5dc>)
 8016bae:	681b      	ldr	r3, [r3, #0]
 8016bb0:	1ad3      	subs	r3, r2, r3
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	da54      	bge.n	8016c60 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8016bb6:	4b5f      	ldr	r3, [pc, #380]	; (8016d34 <tcp_receive+0x5e0>)
 8016bb8:	681b      	ldr	r3, [r3, #0]
 8016bba:	b29a      	uxth	r2, r3
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016bc0:	b29b      	uxth	r3, r3
 8016bc2:	1ad3      	subs	r3, r2, r3
 8016bc4:	b29b      	uxth	r3, r3
 8016bc6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8016bca:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8016bce:	687b      	ldr	r3, [r7, #4]
 8016bd0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016bd4:	10db      	asrs	r3, r3, #3
 8016bd6:	b21b      	sxth	r3, r3
 8016bd8:	b29b      	uxth	r3, r3
 8016bda:	1ad3      	subs	r3, r2, r3
 8016bdc:	b29b      	uxth	r3, r3
 8016bde:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016be8:	b29a      	uxth	r2, r3
 8016bea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016bee:	4413      	add	r3, r2
 8016bf0:	b29b      	uxth	r3, r3
 8016bf2:	b21a      	sxth	r2, r3
 8016bf4:	687b      	ldr	r3, [r7, #4]
 8016bf6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8016bf8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	da05      	bge.n	8016c0c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8016c00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016c04:	425b      	negs	r3, r3
 8016c06:	b29b      	uxth	r3, r3
 8016c08:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8016c0c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016c16:	109b      	asrs	r3, r3, #2
 8016c18:	b21b      	sxth	r3, r3
 8016c1a:	b29b      	uxth	r3, r3
 8016c1c:	1ad3      	subs	r3, r2, r3
 8016c1e:	b29b      	uxth	r3, r3
 8016c20:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016c2a:	b29a      	uxth	r2, r3
 8016c2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016c30:	4413      	add	r3, r2
 8016c32:	b29b      	uxth	r3, r3
 8016c34:	b21a      	sxth	r2, r3
 8016c36:	687b      	ldr	r3, [r7, #4]
 8016c38:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8016c3a:	687b      	ldr	r3, [r7, #4]
 8016c3c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016c40:	10db      	asrs	r3, r3, #3
 8016c42:	b21b      	sxth	r3, r3
 8016c44:	b29a      	uxth	r2, r3
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016c4c:	b29b      	uxth	r3, r3
 8016c4e:	4413      	add	r3, r2
 8016c50:	b29b      	uxth	r3, r3
 8016c52:	b21a      	sxth	r2, r3
 8016c54:	687b      	ldr	r3, [r7, #4]
 8016c56:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	2200      	movs	r2, #0
 8016c5e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8016c60:	4b35      	ldr	r3, [pc, #212]	; (8016d38 <tcp_receive+0x5e4>)
 8016c62:	881b      	ldrh	r3, [r3, #0]
 8016c64:	2b00      	cmp	r3, #0
 8016c66:	f000 84e2 	beq.w	801762e <tcp_receive+0xeda>
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	7d1b      	ldrb	r3, [r3, #20]
 8016c6e:	2b06      	cmp	r3, #6
 8016c70:	f200 84dd 	bhi.w	801762e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016c74:	687b      	ldr	r3, [r7, #4]
 8016c76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016c78:	4b30      	ldr	r3, [pc, #192]	; (8016d3c <tcp_receive+0x5e8>)
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	1ad3      	subs	r3, r2, r3
 8016c7e:	3b01      	subs	r3, #1
 8016c80:	2b00      	cmp	r3, #0
 8016c82:	f2c0 808f 	blt.w	8016da4 <tcp_receive+0x650>
 8016c86:	687b      	ldr	r3, [r7, #4]
 8016c88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016c8a:	4b2b      	ldr	r3, [pc, #172]	; (8016d38 <tcp_receive+0x5e4>)
 8016c8c:	881b      	ldrh	r3, [r3, #0]
 8016c8e:	4619      	mov	r1, r3
 8016c90:	4b2a      	ldr	r3, [pc, #168]	; (8016d3c <tcp_receive+0x5e8>)
 8016c92:	681b      	ldr	r3, [r3, #0]
 8016c94:	440b      	add	r3, r1
 8016c96:	1ad3      	subs	r3, r2, r3
 8016c98:	3301      	adds	r3, #1
 8016c9a:	2b00      	cmp	r3, #0
 8016c9c:	f300 8082 	bgt.w	8016da4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8016ca0:	4b27      	ldr	r3, [pc, #156]	; (8016d40 <tcp_receive+0x5ec>)
 8016ca2:	685b      	ldr	r3, [r3, #4]
 8016ca4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016caa:	4b24      	ldr	r3, [pc, #144]	; (8016d3c <tcp_receive+0x5e8>)
 8016cac:	681b      	ldr	r3, [r3, #0]
 8016cae:	1ad3      	subs	r3, r2, r3
 8016cb0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8016cb2:	4b23      	ldr	r3, [pc, #140]	; (8016d40 <tcp_receive+0x5ec>)
 8016cb4:	685b      	ldr	r3, [r3, #4]
 8016cb6:	2b00      	cmp	r3, #0
 8016cb8:	d106      	bne.n	8016cc8 <tcp_receive+0x574>
 8016cba:	4b22      	ldr	r3, [pc, #136]	; (8016d44 <tcp_receive+0x5f0>)
 8016cbc:	f240 5294 	movw	r2, #1428	; 0x594
 8016cc0:	4921      	ldr	r1, [pc, #132]	; (8016d48 <tcp_receive+0x5f4>)
 8016cc2:	4822      	ldr	r0, [pc, #136]	; (8016d4c <tcp_receive+0x5f8>)
 8016cc4:	f006 f9f6 	bl	801d0b4 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8016cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cca:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016cce:	4293      	cmp	r3, r2
 8016cd0:	d906      	bls.n	8016ce0 <tcp_receive+0x58c>
 8016cd2:	4b1c      	ldr	r3, [pc, #112]	; (8016d44 <tcp_receive+0x5f0>)
 8016cd4:	f240 5295 	movw	r2, #1429	; 0x595
 8016cd8:	491d      	ldr	r1, [pc, #116]	; (8016d50 <tcp_receive+0x5fc>)
 8016cda:	481c      	ldr	r0, [pc, #112]	; (8016d4c <tcp_receive+0x5f8>)
 8016cdc:	f006 f9ea 	bl	801d0b4 <iprintf>
      off = (u16_t)off32;
 8016ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ce2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8016ce6:	4b16      	ldr	r3, [pc, #88]	; (8016d40 <tcp_receive+0x5ec>)
 8016ce8:	685b      	ldr	r3, [r3, #4]
 8016cea:	891b      	ldrh	r3, [r3, #8]
 8016cec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016cf0:	429a      	cmp	r2, r3
 8016cf2:	d906      	bls.n	8016d02 <tcp_receive+0x5ae>
 8016cf4:	4b13      	ldr	r3, [pc, #76]	; (8016d44 <tcp_receive+0x5f0>)
 8016cf6:	f240 5297 	movw	r2, #1431	; 0x597
 8016cfa:	4916      	ldr	r1, [pc, #88]	; (8016d54 <tcp_receive+0x600>)
 8016cfc:	4813      	ldr	r0, [pc, #76]	; (8016d4c <tcp_receive+0x5f8>)
 8016cfe:	f006 f9d9 	bl	801d0b4 <iprintf>
      inseg.len -= off;
 8016d02:	4b0f      	ldr	r3, [pc, #60]	; (8016d40 <tcp_receive+0x5ec>)
 8016d04:	891a      	ldrh	r2, [r3, #8]
 8016d06:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016d0a:	1ad3      	subs	r3, r2, r3
 8016d0c:	b29a      	uxth	r2, r3
 8016d0e:	4b0c      	ldr	r3, [pc, #48]	; (8016d40 <tcp_receive+0x5ec>)
 8016d10:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8016d12:	4b0b      	ldr	r3, [pc, #44]	; (8016d40 <tcp_receive+0x5ec>)
 8016d14:	685b      	ldr	r3, [r3, #4]
 8016d16:	891a      	ldrh	r2, [r3, #8]
 8016d18:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016d1c:	1ad3      	subs	r3, r2, r3
 8016d1e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8016d20:	e02a      	b.n	8016d78 <tcp_receive+0x624>
 8016d22:	bf00      	nop
 8016d24:	08020784 	.word	0x08020784
 8016d28:	0802078c 	.word	0x0802078c
 8016d2c:	2000ddfc 	.word	0x2000ddfc
 8016d30:	2000ddf8 	.word	0x2000ddf8
 8016d34:	2000ddbc 	.word	0x2000ddbc
 8016d38:	2000ddfe 	.word	0x2000ddfe
 8016d3c:	2000ddf4 	.word	0x2000ddf4
 8016d40:	2000ddd4 	.word	0x2000ddd4
 8016d44:	0802041c 	.word	0x0802041c
 8016d48:	08020794 	.word	0x08020794
 8016d4c:	08020468 	.word	0x08020468
 8016d50:	080207a4 	.word	0x080207a4
 8016d54:	080207b4 	.word	0x080207b4
        off -= p->len;
 8016d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d5a:	895b      	ldrh	r3, [r3, #10]
 8016d5c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016d60:	1ad3      	subs	r3, r2, r3
 8016d62:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8016d66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d68:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016d6a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8016d6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d6e:	2200      	movs	r2, #0
 8016d70:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8016d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d74:	681b      	ldr	r3, [r3, #0]
 8016d76:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8016d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016d7a:	895b      	ldrh	r3, [r3, #10]
 8016d7c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016d80:	429a      	cmp	r2, r3
 8016d82:	d8e9      	bhi.n	8016d58 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8016d84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016d88:	4619      	mov	r1, r3
 8016d8a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016d8c:	f7fc f958 	bl	8013040 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d94:	4a91      	ldr	r2, [pc, #580]	; (8016fdc <tcp_receive+0x888>)
 8016d96:	6013      	str	r3, [r2, #0]
 8016d98:	4b91      	ldr	r3, [pc, #580]	; (8016fe0 <tcp_receive+0x88c>)
 8016d9a:	68db      	ldr	r3, [r3, #12]
 8016d9c:	4a8f      	ldr	r2, [pc, #572]	; (8016fdc <tcp_receive+0x888>)
 8016d9e:	6812      	ldr	r2, [r2, #0]
 8016da0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016da2:	e00d      	b.n	8016dc0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8016da4:	4b8d      	ldr	r3, [pc, #564]	; (8016fdc <tcp_receive+0x888>)
 8016da6:	681a      	ldr	r2, [r3, #0]
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016dac:	1ad3      	subs	r3, r2, r3
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	da06      	bge.n	8016dc0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	8b5b      	ldrh	r3, [r3, #26]
 8016db6:	f043 0302 	orr.w	r3, r3, #2
 8016dba:	b29a      	uxth	r2, r3
 8016dbc:	687b      	ldr	r3, [r7, #4]
 8016dbe:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016dc0:	4b86      	ldr	r3, [pc, #536]	; (8016fdc <tcp_receive+0x888>)
 8016dc2:	681a      	ldr	r2, [r3, #0]
 8016dc4:	687b      	ldr	r3, [r7, #4]
 8016dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016dc8:	1ad3      	subs	r3, r2, r3
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	f2c0 842a 	blt.w	8017624 <tcp_receive+0xed0>
 8016dd0:	4b82      	ldr	r3, [pc, #520]	; (8016fdc <tcp_receive+0x888>)
 8016dd2:	681a      	ldr	r2, [r3, #0]
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016dd8:	6879      	ldr	r1, [r7, #4]
 8016dda:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016ddc:	440b      	add	r3, r1
 8016dde:	1ad3      	subs	r3, r2, r3
 8016de0:	3301      	adds	r3, #1
 8016de2:	2b00      	cmp	r3, #0
 8016de4:	f300 841e 	bgt.w	8017624 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016dec:	4b7b      	ldr	r3, [pc, #492]	; (8016fdc <tcp_receive+0x888>)
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	429a      	cmp	r2, r3
 8016df2:	f040 829a 	bne.w	801732a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8016df6:	4b7a      	ldr	r3, [pc, #488]	; (8016fe0 <tcp_receive+0x88c>)
 8016df8:	891c      	ldrh	r4, [r3, #8]
 8016dfa:	4b79      	ldr	r3, [pc, #484]	; (8016fe0 <tcp_receive+0x88c>)
 8016dfc:	68db      	ldr	r3, [r3, #12]
 8016dfe:	899b      	ldrh	r3, [r3, #12]
 8016e00:	b29b      	uxth	r3, r3
 8016e02:	4618      	mov	r0, r3
 8016e04:	f7fa fe5a 	bl	8011abc <lwip_htons>
 8016e08:	4603      	mov	r3, r0
 8016e0a:	b2db      	uxtb	r3, r3
 8016e0c:	f003 0303 	and.w	r3, r3, #3
 8016e10:	2b00      	cmp	r3, #0
 8016e12:	d001      	beq.n	8016e18 <tcp_receive+0x6c4>
 8016e14:	2301      	movs	r3, #1
 8016e16:	e000      	b.n	8016e1a <tcp_receive+0x6c6>
 8016e18:	2300      	movs	r3, #0
 8016e1a:	4423      	add	r3, r4
 8016e1c:	b29a      	uxth	r2, r3
 8016e1e:	4b71      	ldr	r3, [pc, #452]	; (8016fe4 <tcp_receive+0x890>)
 8016e20:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016e26:	4b6f      	ldr	r3, [pc, #444]	; (8016fe4 <tcp_receive+0x890>)
 8016e28:	881b      	ldrh	r3, [r3, #0]
 8016e2a:	429a      	cmp	r2, r3
 8016e2c:	d275      	bcs.n	8016f1a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016e2e:	4b6c      	ldr	r3, [pc, #432]	; (8016fe0 <tcp_receive+0x88c>)
 8016e30:	68db      	ldr	r3, [r3, #12]
 8016e32:	899b      	ldrh	r3, [r3, #12]
 8016e34:	b29b      	uxth	r3, r3
 8016e36:	4618      	mov	r0, r3
 8016e38:	f7fa fe40 	bl	8011abc <lwip_htons>
 8016e3c:	4603      	mov	r3, r0
 8016e3e:	b2db      	uxtb	r3, r3
 8016e40:	f003 0301 	and.w	r3, r3, #1
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d01f      	beq.n	8016e88 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8016e48:	4b65      	ldr	r3, [pc, #404]	; (8016fe0 <tcp_receive+0x88c>)
 8016e4a:	68db      	ldr	r3, [r3, #12]
 8016e4c:	899b      	ldrh	r3, [r3, #12]
 8016e4e:	b29b      	uxth	r3, r3
 8016e50:	b21b      	sxth	r3, r3
 8016e52:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016e56:	b21c      	sxth	r4, r3
 8016e58:	4b61      	ldr	r3, [pc, #388]	; (8016fe0 <tcp_receive+0x88c>)
 8016e5a:	68db      	ldr	r3, [r3, #12]
 8016e5c:	899b      	ldrh	r3, [r3, #12]
 8016e5e:	b29b      	uxth	r3, r3
 8016e60:	4618      	mov	r0, r3
 8016e62:	f7fa fe2b 	bl	8011abc <lwip_htons>
 8016e66:	4603      	mov	r3, r0
 8016e68:	b2db      	uxtb	r3, r3
 8016e6a:	b29b      	uxth	r3, r3
 8016e6c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8016e70:	b29b      	uxth	r3, r3
 8016e72:	4618      	mov	r0, r3
 8016e74:	f7fa fe22 	bl	8011abc <lwip_htons>
 8016e78:	4603      	mov	r3, r0
 8016e7a:	b21b      	sxth	r3, r3
 8016e7c:	4323      	orrs	r3, r4
 8016e7e:	b21a      	sxth	r2, r3
 8016e80:	4b57      	ldr	r3, [pc, #348]	; (8016fe0 <tcp_receive+0x88c>)
 8016e82:	68db      	ldr	r3, [r3, #12]
 8016e84:	b292      	uxth	r2, r2
 8016e86:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016e8c:	4b54      	ldr	r3, [pc, #336]	; (8016fe0 <tcp_receive+0x88c>)
 8016e8e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016e90:	4b53      	ldr	r3, [pc, #332]	; (8016fe0 <tcp_receive+0x88c>)
 8016e92:	68db      	ldr	r3, [r3, #12]
 8016e94:	899b      	ldrh	r3, [r3, #12]
 8016e96:	b29b      	uxth	r3, r3
 8016e98:	4618      	mov	r0, r3
 8016e9a:	f7fa fe0f 	bl	8011abc <lwip_htons>
 8016e9e:	4603      	mov	r3, r0
 8016ea0:	b2db      	uxtb	r3, r3
 8016ea2:	f003 0302 	and.w	r3, r3, #2
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	d005      	beq.n	8016eb6 <tcp_receive+0x762>
            inseg.len -= 1;
 8016eaa:	4b4d      	ldr	r3, [pc, #308]	; (8016fe0 <tcp_receive+0x88c>)
 8016eac:	891b      	ldrh	r3, [r3, #8]
 8016eae:	3b01      	subs	r3, #1
 8016eb0:	b29a      	uxth	r2, r3
 8016eb2:	4b4b      	ldr	r3, [pc, #300]	; (8016fe0 <tcp_receive+0x88c>)
 8016eb4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8016eb6:	4b4a      	ldr	r3, [pc, #296]	; (8016fe0 <tcp_receive+0x88c>)
 8016eb8:	685b      	ldr	r3, [r3, #4]
 8016eba:	4a49      	ldr	r2, [pc, #292]	; (8016fe0 <tcp_receive+0x88c>)
 8016ebc:	8912      	ldrh	r2, [r2, #8]
 8016ebe:	4611      	mov	r1, r2
 8016ec0:	4618      	mov	r0, r3
 8016ec2:	f7fb ffbd 	bl	8012e40 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8016ec6:	4b46      	ldr	r3, [pc, #280]	; (8016fe0 <tcp_receive+0x88c>)
 8016ec8:	891c      	ldrh	r4, [r3, #8]
 8016eca:	4b45      	ldr	r3, [pc, #276]	; (8016fe0 <tcp_receive+0x88c>)
 8016ecc:	68db      	ldr	r3, [r3, #12]
 8016ece:	899b      	ldrh	r3, [r3, #12]
 8016ed0:	b29b      	uxth	r3, r3
 8016ed2:	4618      	mov	r0, r3
 8016ed4:	f7fa fdf2 	bl	8011abc <lwip_htons>
 8016ed8:	4603      	mov	r3, r0
 8016eda:	b2db      	uxtb	r3, r3
 8016edc:	f003 0303 	and.w	r3, r3, #3
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d001      	beq.n	8016ee8 <tcp_receive+0x794>
 8016ee4:	2301      	movs	r3, #1
 8016ee6:	e000      	b.n	8016eea <tcp_receive+0x796>
 8016ee8:	2300      	movs	r3, #0
 8016eea:	4423      	add	r3, r4
 8016eec:	b29a      	uxth	r2, r3
 8016eee:	4b3d      	ldr	r3, [pc, #244]	; (8016fe4 <tcp_receive+0x890>)
 8016ef0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016ef2:	4b3c      	ldr	r3, [pc, #240]	; (8016fe4 <tcp_receive+0x890>)
 8016ef4:	881b      	ldrh	r3, [r3, #0]
 8016ef6:	461a      	mov	r2, r3
 8016ef8:	4b38      	ldr	r3, [pc, #224]	; (8016fdc <tcp_receive+0x888>)
 8016efa:	681b      	ldr	r3, [r3, #0]
 8016efc:	441a      	add	r2, r3
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f02:	6879      	ldr	r1, [r7, #4]
 8016f04:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016f06:	440b      	add	r3, r1
 8016f08:	429a      	cmp	r2, r3
 8016f0a:	d006      	beq.n	8016f1a <tcp_receive+0x7c6>
 8016f0c:	4b36      	ldr	r3, [pc, #216]	; (8016fe8 <tcp_receive+0x894>)
 8016f0e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8016f12:	4936      	ldr	r1, [pc, #216]	; (8016fec <tcp_receive+0x898>)
 8016f14:	4836      	ldr	r0, [pc, #216]	; (8016ff0 <tcp_receive+0x89c>)
 8016f16:	f006 f8cd 	bl	801d0b4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	f000 80e7 	beq.w	80170f2 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016f24:	4b2e      	ldr	r3, [pc, #184]	; (8016fe0 <tcp_receive+0x88c>)
 8016f26:	68db      	ldr	r3, [r3, #12]
 8016f28:	899b      	ldrh	r3, [r3, #12]
 8016f2a:	b29b      	uxth	r3, r3
 8016f2c:	4618      	mov	r0, r3
 8016f2e:	f7fa fdc5 	bl	8011abc <lwip_htons>
 8016f32:	4603      	mov	r3, r0
 8016f34:	b2db      	uxtb	r3, r3
 8016f36:	f003 0301 	and.w	r3, r3, #1
 8016f3a:	2b00      	cmp	r3, #0
 8016f3c:	d010      	beq.n	8016f60 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8016f3e:	e00a      	b.n	8016f56 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016f44:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8016f46:	687b      	ldr	r3, [r7, #4]
 8016f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016f4a:	681a      	ldr	r2, [r3, #0]
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8016f50:	68f8      	ldr	r0, [r7, #12]
 8016f52:	f7fd fcc4 	bl	80148de <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8016f56:	687b      	ldr	r3, [r7, #4]
 8016f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	d1f0      	bne.n	8016f40 <tcp_receive+0x7ec>
 8016f5e:	e0c8      	b.n	80170f2 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016f64:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8016f66:	e052      	b.n	801700e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f6a:	68db      	ldr	r3, [r3, #12]
 8016f6c:	899b      	ldrh	r3, [r3, #12]
 8016f6e:	b29b      	uxth	r3, r3
 8016f70:	4618      	mov	r0, r3
 8016f72:	f7fa fda3 	bl	8011abc <lwip_htons>
 8016f76:	4603      	mov	r3, r0
 8016f78:	b2db      	uxtb	r3, r3
 8016f7a:	f003 0301 	and.w	r3, r3, #1
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d03d      	beq.n	8016ffe <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8016f82:	4b17      	ldr	r3, [pc, #92]	; (8016fe0 <tcp_receive+0x88c>)
 8016f84:	68db      	ldr	r3, [r3, #12]
 8016f86:	899b      	ldrh	r3, [r3, #12]
 8016f88:	b29b      	uxth	r3, r3
 8016f8a:	4618      	mov	r0, r3
 8016f8c:	f7fa fd96 	bl	8011abc <lwip_htons>
 8016f90:	4603      	mov	r3, r0
 8016f92:	b2db      	uxtb	r3, r3
 8016f94:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d130      	bne.n	8016ffe <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8016f9c:	4b10      	ldr	r3, [pc, #64]	; (8016fe0 <tcp_receive+0x88c>)
 8016f9e:	68db      	ldr	r3, [r3, #12]
 8016fa0:	899b      	ldrh	r3, [r3, #12]
 8016fa2:	b29c      	uxth	r4, r3
 8016fa4:	2001      	movs	r0, #1
 8016fa6:	f7fa fd89 	bl	8011abc <lwip_htons>
 8016faa:	4603      	mov	r3, r0
 8016fac:	461a      	mov	r2, r3
 8016fae:	4b0c      	ldr	r3, [pc, #48]	; (8016fe0 <tcp_receive+0x88c>)
 8016fb0:	68db      	ldr	r3, [r3, #12]
 8016fb2:	4322      	orrs	r2, r4
 8016fb4:	b292      	uxth	r2, r2
 8016fb6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8016fb8:	4b09      	ldr	r3, [pc, #36]	; (8016fe0 <tcp_receive+0x88c>)
 8016fba:	891c      	ldrh	r4, [r3, #8]
 8016fbc:	4b08      	ldr	r3, [pc, #32]	; (8016fe0 <tcp_receive+0x88c>)
 8016fbe:	68db      	ldr	r3, [r3, #12]
 8016fc0:	899b      	ldrh	r3, [r3, #12]
 8016fc2:	b29b      	uxth	r3, r3
 8016fc4:	4618      	mov	r0, r3
 8016fc6:	f7fa fd79 	bl	8011abc <lwip_htons>
 8016fca:	4603      	mov	r3, r0
 8016fcc:	b2db      	uxtb	r3, r3
 8016fce:	f003 0303 	and.w	r3, r3, #3
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	d00e      	beq.n	8016ff4 <tcp_receive+0x8a0>
 8016fd6:	2301      	movs	r3, #1
 8016fd8:	e00d      	b.n	8016ff6 <tcp_receive+0x8a2>
 8016fda:	bf00      	nop
 8016fdc:	2000ddf4 	.word	0x2000ddf4
 8016fe0:	2000ddd4 	.word	0x2000ddd4
 8016fe4:	2000ddfe 	.word	0x2000ddfe
 8016fe8:	0802041c 	.word	0x0802041c
 8016fec:	080207c4 	.word	0x080207c4
 8016ff0:	08020468 	.word	0x08020468
 8016ff4:	2300      	movs	r3, #0
 8016ff6:	4423      	add	r3, r4
 8016ff8:	b29a      	uxth	r2, r3
 8016ffa:	4b98      	ldr	r3, [pc, #608]	; (801725c <tcp_receive+0xb08>)
 8016ffc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8016ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017000:	613b      	str	r3, [r7, #16]
              next = next->next;
 8017002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017004:	681b      	ldr	r3, [r3, #0]
 8017006:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8017008:	6938      	ldr	r0, [r7, #16]
 801700a:	f7fd fc68 	bl	80148de <tcp_seg_free>
            while (next &&
 801700e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017010:	2b00      	cmp	r3, #0
 8017012:	d00e      	beq.n	8017032 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8017014:	4b91      	ldr	r3, [pc, #580]	; (801725c <tcp_receive+0xb08>)
 8017016:	881b      	ldrh	r3, [r3, #0]
 8017018:	461a      	mov	r2, r3
 801701a:	4b91      	ldr	r3, [pc, #580]	; (8017260 <tcp_receive+0xb0c>)
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	441a      	add	r2, r3
 8017020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017022:	68db      	ldr	r3, [r3, #12]
 8017024:	685b      	ldr	r3, [r3, #4]
 8017026:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017028:	8909      	ldrh	r1, [r1, #8]
 801702a:	440b      	add	r3, r1
 801702c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801702e:	2b00      	cmp	r3, #0
 8017030:	da9a      	bge.n	8016f68 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8017032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017034:	2b00      	cmp	r3, #0
 8017036:	d059      	beq.n	80170ec <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8017038:	4b88      	ldr	r3, [pc, #544]	; (801725c <tcp_receive+0xb08>)
 801703a:	881b      	ldrh	r3, [r3, #0]
 801703c:	461a      	mov	r2, r3
 801703e:	4b88      	ldr	r3, [pc, #544]	; (8017260 <tcp_receive+0xb0c>)
 8017040:	681b      	ldr	r3, [r3, #0]
 8017042:	441a      	add	r2, r3
 8017044:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017046:	68db      	ldr	r3, [r3, #12]
 8017048:	685b      	ldr	r3, [r3, #4]
 801704a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801704c:	2b00      	cmp	r3, #0
 801704e:	dd4d      	ble.n	80170ec <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8017050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017052:	68db      	ldr	r3, [r3, #12]
 8017054:	685b      	ldr	r3, [r3, #4]
 8017056:	b29a      	uxth	r2, r3
 8017058:	4b81      	ldr	r3, [pc, #516]	; (8017260 <tcp_receive+0xb0c>)
 801705a:	681b      	ldr	r3, [r3, #0]
 801705c:	b29b      	uxth	r3, r3
 801705e:	1ad3      	subs	r3, r2, r3
 8017060:	b29a      	uxth	r2, r3
 8017062:	4b80      	ldr	r3, [pc, #512]	; (8017264 <tcp_receive+0xb10>)
 8017064:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8017066:	4b7f      	ldr	r3, [pc, #508]	; (8017264 <tcp_receive+0xb10>)
 8017068:	68db      	ldr	r3, [r3, #12]
 801706a:	899b      	ldrh	r3, [r3, #12]
 801706c:	b29b      	uxth	r3, r3
 801706e:	4618      	mov	r0, r3
 8017070:	f7fa fd24 	bl	8011abc <lwip_htons>
 8017074:	4603      	mov	r3, r0
 8017076:	b2db      	uxtb	r3, r3
 8017078:	f003 0302 	and.w	r3, r3, #2
 801707c:	2b00      	cmp	r3, #0
 801707e:	d005      	beq.n	801708c <tcp_receive+0x938>
                inseg.len -= 1;
 8017080:	4b78      	ldr	r3, [pc, #480]	; (8017264 <tcp_receive+0xb10>)
 8017082:	891b      	ldrh	r3, [r3, #8]
 8017084:	3b01      	subs	r3, #1
 8017086:	b29a      	uxth	r2, r3
 8017088:	4b76      	ldr	r3, [pc, #472]	; (8017264 <tcp_receive+0xb10>)
 801708a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801708c:	4b75      	ldr	r3, [pc, #468]	; (8017264 <tcp_receive+0xb10>)
 801708e:	685b      	ldr	r3, [r3, #4]
 8017090:	4a74      	ldr	r2, [pc, #464]	; (8017264 <tcp_receive+0xb10>)
 8017092:	8912      	ldrh	r2, [r2, #8]
 8017094:	4611      	mov	r1, r2
 8017096:	4618      	mov	r0, r3
 8017098:	f7fb fed2 	bl	8012e40 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801709c:	4b71      	ldr	r3, [pc, #452]	; (8017264 <tcp_receive+0xb10>)
 801709e:	891c      	ldrh	r4, [r3, #8]
 80170a0:	4b70      	ldr	r3, [pc, #448]	; (8017264 <tcp_receive+0xb10>)
 80170a2:	68db      	ldr	r3, [r3, #12]
 80170a4:	899b      	ldrh	r3, [r3, #12]
 80170a6:	b29b      	uxth	r3, r3
 80170a8:	4618      	mov	r0, r3
 80170aa:	f7fa fd07 	bl	8011abc <lwip_htons>
 80170ae:	4603      	mov	r3, r0
 80170b0:	b2db      	uxtb	r3, r3
 80170b2:	f003 0303 	and.w	r3, r3, #3
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	d001      	beq.n	80170be <tcp_receive+0x96a>
 80170ba:	2301      	movs	r3, #1
 80170bc:	e000      	b.n	80170c0 <tcp_receive+0x96c>
 80170be:	2300      	movs	r3, #0
 80170c0:	4423      	add	r3, r4
 80170c2:	b29a      	uxth	r2, r3
 80170c4:	4b65      	ldr	r3, [pc, #404]	; (801725c <tcp_receive+0xb08>)
 80170c6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80170c8:	4b64      	ldr	r3, [pc, #400]	; (801725c <tcp_receive+0xb08>)
 80170ca:	881b      	ldrh	r3, [r3, #0]
 80170cc:	461a      	mov	r2, r3
 80170ce:	4b64      	ldr	r3, [pc, #400]	; (8017260 <tcp_receive+0xb0c>)
 80170d0:	681b      	ldr	r3, [r3, #0]
 80170d2:	441a      	add	r2, r3
 80170d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80170d6:	68db      	ldr	r3, [r3, #12]
 80170d8:	685b      	ldr	r3, [r3, #4]
 80170da:	429a      	cmp	r2, r3
 80170dc:	d006      	beq.n	80170ec <tcp_receive+0x998>
 80170de:	4b62      	ldr	r3, [pc, #392]	; (8017268 <tcp_receive+0xb14>)
 80170e0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80170e4:	4961      	ldr	r1, [pc, #388]	; (801726c <tcp_receive+0xb18>)
 80170e6:	4862      	ldr	r0, [pc, #392]	; (8017270 <tcp_receive+0xb1c>)
 80170e8:	f005 ffe4 	bl	801d0b4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80170f0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 80170f2:	4b5a      	ldr	r3, [pc, #360]	; (801725c <tcp_receive+0xb08>)
 80170f4:	881b      	ldrh	r3, [r3, #0]
 80170f6:	461a      	mov	r2, r3
 80170f8:	4b59      	ldr	r3, [pc, #356]	; (8017260 <tcp_receive+0xb0c>)
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	441a      	add	r2, r3
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8017106:	4b55      	ldr	r3, [pc, #340]	; (801725c <tcp_receive+0xb08>)
 8017108:	881b      	ldrh	r3, [r3, #0]
 801710a:	429a      	cmp	r2, r3
 801710c:	d206      	bcs.n	801711c <tcp_receive+0x9c8>
 801710e:	4b56      	ldr	r3, [pc, #344]	; (8017268 <tcp_receive+0xb14>)
 8017110:	f240 6207 	movw	r2, #1543	; 0x607
 8017114:	4957      	ldr	r1, [pc, #348]	; (8017274 <tcp_receive+0xb20>)
 8017116:	4856      	ldr	r0, [pc, #344]	; (8017270 <tcp_receive+0xb1c>)
 8017118:	f005 ffcc 	bl	801d0b4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8017120:	4b4e      	ldr	r3, [pc, #312]	; (801725c <tcp_receive+0xb08>)
 8017122:	881b      	ldrh	r3, [r3, #0]
 8017124:	1ad3      	subs	r3, r2, r3
 8017126:	b29a      	uxth	r2, r3
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801712c:	6878      	ldr	r0, [r7, #4]
 801712e:	f7fc feb1 	bl	8013e94 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8017132:	4b4c      	ldr	r3, [pc, #304]	; (8017264 <tcp_receive+0xb10>)
 8017134:	685b      	ldr	r3, [r3, #4]
 8017136:	891b      	ldrh	r3, [r3, #8]
 8017138:	2b00      	cmp	r3, #0
 801713a:	d006      	beq.n	801714a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801713c:	4b49      	ldr	r3, [pc, #292]	; (8017264 <tcp_receive+0xb10>)
 801713e:	685b      	ldr	r3, [r3, #4]
 8017140:	4a4d      	ldr	r2, [pc, #308]	; (8017278 <tcp_receive+0xb24>)
 8017142:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8017144:	4b47      	ldr	r3, [pc, #284]	; (8017264 <tcp_receive+0xb10>)
 8017146:	2200      	movs	r2, #0
 8017148:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801714a:	4b46      	ldr	r3, [pc, #280]	; (8017264 <tcp_receive+0xb10>)
 801714c:	68db      	ldr	r3, [r3, #12]
 801714e:	899b      	ldrh	r3, [r3, #12]
 8017150:	b29b      	uxth	r3, r3
 8017152:	4618      	mov	r0, r3
 8017154:	f7fa fcb2 	bl	8011abc <lwip_htons>
 8017158:	4603      	mov	r3, r0
 801715a:	b2db      	uxtb	r3, r3
 801715c:	f003 0301 	and.w	r3, r3, #1
 8017160:	2b00      	cmp	r3, #0
 8017162:	f000 80b8 	beq.w	80172d6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8017166:	4b45      	ldr	r3, [pc, #276]	; (801727c <tcp_receive+0xb28>)
 8017168:	781b      	ldrb	r3, [r3, #0]
 801716a:	f043 0320 	orr.w	r3, r3, #32
 801716e:	b2da      	uxtb	r2, r3
 8017170:	4b42      	ldr	r3, [pc, #264]	; (801727c <tcp_receive+0xb28>)
 8017172:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8017174:	e0af      	b.n	80172d6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801717a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017180:	68db      	ldr	r3, [r3, #12]
 8017182:	685b      	ldr	r3, [r3, #4]
 8017184:	4a36      	ldr	r2, [pc, #216]	; (8017260 <tcp_receive+0xb0c>)
 8017186:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8017188:	68bb      	ldr	r3, [r7, #8]
 801718a:	891b      	ldrh	r3, [r3, #8]
 801718c:	461c      	mov	r4, r3
 801718e:	68bb      	ldr	r3, [r7, #8]
 8017190:	68db      	ldr	r3, [r3, #12]
 8017192:	899b      	ldrh	r3, [r3, #12]
 8017194:	b29b      	uxth	r3, r3
 8017196:	4618      	mov	r0, r3
 8017198:	f7fa fc90 	bl	8011abc <lwip_htons>
 801719c:	4603      	mov	r3, r0
 801719e:	b2db      	uxtb	r3, r3
 80171a0:	f003 0303 	and.w	r3, r3, #3
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	d001      	beq.n	80171ac <tcp_receive+0xa58>
 80171a8:	2301      	movs	r3, #1
 80171aa:	e000      	b.n	80171ae <tcp_receive+0xa5a>
 80171ac:	2300      	movs	r3, #0
 80171ae:	191a      	adds	r2, r3, r4
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80171b4:	441a      	add	r2, r3
 80171b6:	687b      	ldr	r3, [r7, #4]
 80171b8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80171ba:	687b      	ldr	r3, [r7, #4]
 80171bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80171be:	461c      	mov	r4, r3
 80171c0:	68bb      	ldr	r3, [r7, #8]
 80171c2:	891b      	ldrh	r3, [r3, #8]
 80171c4:	461d      	mov	r5, r3
 80171c6:	68bb      	ldr	r3, [r7, #8]
 80171c8:	68db      	ldr	r3, [r3, #12]
 80171ca:	899b      	ldrh	r3, [r3, #12]
 80171cc:	b29b      	uxth	r3, r3
 80171ce:	4618      	mov	r0, r3
 80171d0:	f7fa fc74 	bl	8011abc <lwip_htons>
 80171d4:	4603      	mov	r3, r0
 80171d6:	b2db      	uxtb	r3, r3
 80171d8:	f003 0303 	and.w	r3, r3, #3
 80171dc:	2b00      	cmp	r3, #0
 80171de:	d001      	beq.n	80171e4 <tcp_receive+0xa90>
 80171e0:	2301      	movs	r3, #1
 80171e2:	e000      	b.n	80171e6 <tcp_receive+0xa92>
 80171e4:	2300      	movs	r3, #0
 80171e6:	442b      	add	r3, r5
 80171e8:	429c      	cmp	r4, r3
 80171ea:	d206      	bcs.n	80171fa <tcp_receive+0xaa6>
 80171ec:	4b1e      	ldr	r3, [pc, #120]	; (8017268 <tcp_receive+0xb14>)
 80171ee:	f240 622b 	movw	r2, #1579	; 0x62b
 80171f2:	4923      	ldr	r1, [pc, #140]	; (8017280 <tcp_receive+0xb2c>)
 80171f4:	481e      	ldr	r0, [pc, #120]	; (8017270 <tcp_receive+0xb1c>)
 80171f6:	f005 ff5d 	bl	801d0b4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 80171fa:	68bb      	ldr	r3, [r7, #8]
 80171fc:	891b      	ldrh	r3, [r3, #8]
 80171fe:	461c      	mov	r4, r3
 8017200:	68bb      	ldr	r3, [r7, #8]
 8017202:	68db      	ldr	r3, [r3, #12]
 8017204:	899b      	ldrh	r3, [r3, #12]
 8017206:	b29b      	uxth	r3, r3
 8017208:	4618      	mov	r0, r3
 801720a:	f7fa fc57 	bl	8011abc <lwip_htons>
 801720e:	4603      	mov	r3, r0
 8017210:	b2db      	uxtb	r3, r3
 8017212:	f003 0303 	and.w	r3, r3, #3
 8017216:	2b00      	cmp	r3, #0
 8017218:	d001      	beq.n	801721e <tcp_receive+0xaca>
 801721a:	2301      	movs	r3, #1
 801721c:	e000      	b.n	8017220 <tcp_receive+0xacc>
 801721e:	2300      	movs	r3, #0
 8017220:	1919      	adds	r1, r3, r4
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8017226:	b28b      	uxth	r3, r1
 8017228:	1ad3      	subs	r3, r2, r3
 801722a:	b29a      	uxth	r2, r3
 801722c:	687b      	ldr	r3, [r7, #4]
 801722e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8017230:	6878      	ldr	r0, [r7, #4]
 8017232:	f7fc fe2f 	bl	8013e94 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8017236:	68bb      	ldr	r3, [r7, #8]
 8017238:	685b      	ldr	r3, [r3, #4]
 801723a:	891b      	ldrh	r3, [r3, #8]
 801723c:	2b00      	cmp	r3, #0
 801723e:	d028      	beq.n	8017292 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8017240:	4b0d      	ldr	r3, [pc, #52]	; (8017278 <tcp_receive+0xb24>)
 8017242:	681b      	ldr	r3, [r3, #0]
 8017244:	2b00      	cmp	r3, #0
 8017246:	d01d      	beq.n	8017284 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8017248:	4b0b      	ldr	r3, [pc, #44]	; (8017278 <tcp_receive+0xb24>)
 801724a:	681a      	ldr	r2, [r3, #0]
 801724c:	68bb      	ldr	r3, [r7, #8]
 801724e:	685b      	ldr	r3, [r3, #4]
 8017250:	4619      	mov	r1, r3
 8017252:	4610      	mov	r0, r2
 8017254:	f7fc f848 	bl	80132e8 <pbuf_cat>
 8017258:	e018      	b.n	801728c <tcp_receive+0xb38>
 801725a:	bf00      	nop
 801725c:	2000ddfe 	.word	0x2000ddfe
 8017260:	2000ddf4 	.word	0x2000ddf4
 8017264:	2000ddd4 	.word	0x2000ddd4
 8017268:	0802041c 	.word	0x0802041c
 801726c:	080207fc 	.word	0x080207fc
 8017270:	08020468 	.word	0x08020468
 8017274:	08020838 	.word	0x08020838
 8017278:	2000de04 	.word	0x2000de04
 801727c:	2000de01 	.word	0x2000de01
 8017280:	08020858 	.word	0x08020858
            } else {
              recv_data = cseg->p;
 8017284:	68bb      	ldr	r3, [r7, #8]
 8017286:	685b      	ldr	r3, [r3, #4]
 8017288:	4a70      	ldr	r2, [pc, #448]	; (801744c <tcp_receive+0xcf8>)
 801728a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801728c:	68bb      	ldr	r3, [r7, #8]
 801728e:	2200      	movs	r2, #0
 8017290:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8017292:	68bb      	ldr	r3, [r7, #8]
 8017294:	68db      	ldr	r3, [r3, #12]
 8017296:	899b      	ldrh	r3, [r3, #12]
 8017298:	b29b      	uxth	r3, r3
 801729a:	4618      	mov	r0, r3
 801729c:	f7fa fc0e 	bl	8011abc <lwip_htons>
 80172a0:	4603      	mov	r3, r0
 80172a2:	b2db      	uxtb	r3, r3
 80172a4:	f003 0301 	and.w	r3, r3, #1
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d00d      	beq.n	80172c8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80172ac:	4b68      	ldr	r3, [pc, #416]	; (8017450 <tcp_receive+0xcfc>)
 80172ae:	781b      	ldrb	r3, [r3, #0]
 80172b0:	f043 0320 	orr.w	r3, r3, #32
 80172b4:	b2da      	uxtb	r2, r3
 80172b6:	4b66      	ldr	r3, [pc, #408]	; (8017450 <tcp_receive+0xcfc>)
 80172b8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80172ba:	687b      	ldr	r3, [r7, #4]
 80172bc:	7d1b      	ldrb	r3, [r3, #20]
 80172be:	2b04      	cmp	r3, #4
 80172c0:	d102      	bne.n	80172c8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	2207      	movs	r2, #7
 80172c6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80172c8:	68bb      	ldr	r3, [r7, #8]
 80172ca:	681a      	ldr	r2, [r3, #0]
 80172cc:	687b      	ldr	r3, [r7, #4]
 80172ce:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80172d0:	68b8      	ldr	r0, [r7, #8]
 80172d2:	f7fd fb04 	bl	80148de <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80172da:	2b00      	cmp	r3, #0
 80172dc:	d008      	beq.n	80172f0 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80172e2:	68db      	ldr	r3, [r3, #12]
 80172e4:	685a      	ldr	r2, [r3, #4]
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80172ea:	429a      	cmp	r2, r3
 80172ec:	f43f af43 	beq.w	8017176 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	8b5b      	ldrh	r3, [r3, #26]
 80172f4:	f003 0301 	and.w	r3, r3, #1
 80172f8:	2b00      	cmp	r3, #0
 80172fa:	d00e      	beq.n	801731a <tcp_receive+0xbc6>
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	8b5b      	ldrh	r3, [r3, #26]
 8017300:	f023 0301 	bic.w	r3, r3, #1
 8017304:	b29a      	uxth	r2, r3
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	835a      	strh	r2, [r3, #26]
 801730a:	687b      	ldr	r3, [r7, #4]
 801730c:	8b5b      	ldrh	r3, [r3, #26]
 801730e:	f043 0302 	orr.w	r3, r3, #2
 8017312:	b29a      	uxth	r2, r3
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8017318:	e188      	b.n	801762c <tcp_receive+0xed8>
        tcp_ack(pcb);
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	8b5b      	ldrh	r3, [r3, #26]
 801731e:	f043 0301 	orr.w	r3, r3, #1
 8017322:	b29a      	uxth	r2, r3
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8017328:	e180      	b.n	801762c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801732e:	2b00      	cmp	r3, #0
 8017330:	d106      	bne.n	8017340 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8017332:	4848      	ldr	r0, [pc, #288]	; (8017454 <tcp_receive+0xd00>)
 8017334:	f7fd faec 	bl	8014910 <tcp_seg_copy>
 8017338:	4602      	mov	r2, r0
 801733a:	687b      	ldr	r3, [r7, #4]
 801733c:	675a      	str	r2, [r3, #116]	; 0x74
 801733e:	e16d      	b.n	801761c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8017340:	2300      	movs	r3, #0
 8017342:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8017344:	687b      	ldr	r3, [r7, #4]
 8017346:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017348:	63bb      	str	r3, [r7, #56]	; 0x38
 801734a:	e157      	b.n	80175fc <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801734c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801734e:	68db      	ldr	r3, [r3, #12]
 8017350:	685a      	ldr	r2, [r3, #4]
 8017352:	4b41      	ldr	r3, [pc, #260]	; (8017458 <tcp_receive+0xd04>)
 8017354:	681b      	ldr	r3, [r3, #0]
 8017356:	429a      	cmp	r2, r3
 8017358:	d11d      	bne.n	8017396 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801735a:	4b3e      	ldr	r3, [pc, #248]	; (8017454 <tcp_receive+0xd00>)
 801735c:	891a      	ldrh	r2, [r3, #8]
 801735e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017360:	891b      	ldrh	r3, [r3, #8]
 8017362:	429a      	cmp	r2, r3
 8017364:	f240 814f 	bls.w	8017606 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017368:	483a      	ldr	r0, [pc, #232]	; (8017454 <tcp_receive+0xd00>)
 801736a:	f7fd fad1 	bl	8014910 <tcp_seg_copy>
 801736e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8017370:	697b      	ldr	r3, [r7, #20]
 8017372:	2b00      	cmp	r3, #0
 8017374:	f000 8149 	beq.w	801760a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8017378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801737a:	2b00      	cmp	r3, #0
 801737c:	d003      	beq.n	8017386 <tcp_receive+0xc32>
                    prev->next = cseg;
 801737e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017380:	697a      	ldr	r2, [r7, #20]
 8017382:	601a      	str	r2, [r3, #0]
 8017384:	e002      	b.n	801738c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8017386:	687b      	ldr	r3, [r7, #4]
 8017388:	697a      	ldr	r2, [r7, #20]
 801738a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801738c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801738e:	6978      	ldr	r0, [r7, #20]
 8017390:	f7ff f8dc 	bl	801654c <tcp_oos_insert_segment>
                }
                break;
 8017394:	e139      	b.n	801760a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8017396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017398:	2b00      	cmp	r3, #0
 801739a:	d117      	bne.n	80173cc <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801739c:	4b2e      	ldr	r3, [pc, #184]	; (8017458 <tcp_receive+0xd04>)
 801739e:	681a      	ldr	r2, [r3, #0]
 80173a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173a2:	68db      	ldr	r3, [r3, #12]
 80173a4:	685b      	ldr	r3, [r3, #4]
 80173a6:	1ad3      	subs	r3, r2, r3
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	da57      	bge.n	801745c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80173ac:	4829      	ldr	r0, [pc, #164]	; (8017454 <tcp_receive+0xd00>)
 80173ae:	f7fd faaf 	bl	8014910 <tcp_seg_copy>
 80173b2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80173b4:	69bb      	ldr	r3, [r7, #24]
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	f000 8129 	beq.w	801760e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	69ba      	ldr	r2, [r7, #24]
 80173c0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80173c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80173c4:	69b8      	ldr	r0, [r7, #24]
 80173c6:	f7ff f8c1 	bl	801654c <tcp_oos_insert_segment>
                  }
                  break;
 80173ca:	e120      	b.n	801760e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80173cc:	4b22      	ldr	r3, [pc, #136]	; (8017458 <tcp_receive+0xd04>)
 80173ce:	681a      	ldr	r2, [r3, #0]
 80173d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173d2:	68db      	ldr	r3, [r3, #12]
 80173d4:	685b      	ldr	r3, [r3, #4]
 80173d6:	1ad3      	subs	r3, r2, r3
 80173d8:	3b01      	subs	r3, #1
 80173da:	2b00      	cmp	r3, #0
 80173dc:	db3e      	blt.n	801745c <tcp_receive+0xd08>
 80173de:	4b1e      	ldr	r3, [pc, #120]	; (8017458 <tcp_receive+0xd04>)
 80173e0:	681a      	ldr	r2, [r3, #0]
 80173e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173e4:	68db      	ldr	r3, [r3, #12]
 80173e6:	685b      	ldr	r3, [r3, #4]
 80173e8:	1ad3      	subs	r3, r2, r3
 80173ea:	3301      	adds	r3, #1
 80173ec:	2b00      	cmp	r3, #0
 80173ee:	dc35      	bgt.n	801745c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80173f0:	4818      	ldr	r0, [pc, #96]	; (8017454 <tcp_receive+0xd00>)
 80173f2:	f7fd fa8d 	bl	8014910 <tcp_seg_copy>
 80173f6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 80173f8:	69fb      	ldr	r3, [r7, #28]
 80173fa:	2b00      	cmp	r3, #0
 80173fc:	f000 8109 	beq.w	8017612 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8017400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017402:	68db      	ldr	r3, [r3, #12]
 8017404:	685b      	ldr	r3, [r3, #4]
 8017406:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017408:	8912      	ldrh	r2, [r2, #8]
 801740a:	441a      	add	r2, r3
 801740c:	4b12      	ldr	r3, [pc, #72]	; (8017458 <tcp_receive+0xd04>)
 801740e:	681b      	ldr	r3, [r3, #0]
 8017410:	1ad3      	subs	r3, r2, r3
 8017412:	2b00      	cmp	r3, #0
 8017414:	dd12      	ble.n	801743c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8017416:	4b10      	ldr	r3, [pc, #64]	; (8017458 <tcp_receive+0xd04>)
 8017418:	681b      	ldr	r3, [r3, #0]
 801741a:	b29a      	uxth	r2, r3
 801741c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801741e:	68db      	ldr	r3, [r3, #12]
 8017420:	685b      	ldr	r3, [r3, #4]
 8017422:	b29b      	uxth	r3, r3
 8017424:	1ad3      	subs	r3, r2, r3
 8017426:	b29a      	uxth	r2, r3
 8017428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801742a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801742c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801742e:	685a      	ldr	r2, [r3, #4]
 8017430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017432:	891b      	ldrh	r3, [r3, #8]
 8017434:	4619      	mov	r1, r3
 8017436:	4610      	mov	r0, r2
 8017438:	f7fb fd02 	bl	8012e40 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801743c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801743e:	69fa      	ldr	r2, [r7, #28]
 8017440:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8017442:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017444:	69f8      	ldr	r0, [r7, #28]
 8017446:	f7ff f881 	bl	801654c <tcp_oos_insert_segment>
                  }
                  break;
 801744a:	e0e2      	b.n	8017612 <tcp_receive+0xebe>
 801744c:	2000de04 	.word	0x2000de04
 8017450:	2000de01 	.word	0x2000de01
 8017454:	2000ddd4 	.word	0x2000ddd4
 8017458:	2000ddf4 	.word	0x2000ddf4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801745c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801745e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8017460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	2b00      	cmp	r3, #0
 8017466:	f040 80c6 	bne.w	80175f6 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801746a:	4b80      	ldr	r3, [pc, #512]	; (801766c <tcp_receive+0xf18>)
 801746c:	681a      	ldr	r2, [r3, #0]
 801746e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017470:	68db      	ldr	r3, [r3, #12]
 8017472:	685b      	ldr	r3, [r3, #4]
 8017474:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8017476:	2b00      	cmp	r3, #0
 8017478:	f340 80bd 	ble.w	80175f6 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801747c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801747e:	68db      	ldr	r3, [r3, #12]
 8017480:	899b      	ldrh	r3, [r3, #12]
 8017482:	b29b      	uxth	r3, r3
 8017484:	4618      	mov	r0, r3
 8017486:	f7fa fb19 	bl	8011abc <lwip_htons>
 801748a:	4603      	mov	r3, r0
 801748c:	b2db      	uxtb	r3, r3
 801748e:	f003 0301 	and.w	r3, r3, #1
 8017492:	2b00      	cmp	r3, #0
 8017494:	f040 80bf 	bne.w	8017616 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8017498:	4875      	ldr	r0, [pc, #468]	; (8017670 <tcp_receive+0xf1c>)
 801749a:	f7fd fa39 	bl	8014910 <tcp_seg_copy>
 801749e:	4602      	mov	r2, r0
 80174a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174a2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80174a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174a6:	681b      	ldr	r3, [r3, #0]
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	f000 80b6 	beq.w	801761a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80174ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174b0:	68db      	ldr	r3, [r3, #12]
 80174b2:	685b      	ldr	r3, [r3, #4]
 80174b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80174b6:	8912      	ldrh	r2, [r2, #8]
 80174b8:	441a      	add	r2, r3
 80174ba:	4b6c      	ldr	r3, [pc, #432]	; (801766c <tcp_receive+0xf18>)
 80174bc:	681b      	ldr	r3, [r3, #0]
 80174be:	1ad3      	subs	r3, r2, r3
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	dd12      	ble.n	80174ea <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80174c4:	4b69      	ldr	r3, [pc, #420]	; (801766c <tcp_receive+0xf18>)
 80174c6:	681b      	ldr	r3, [r3, #0]
 80174c8:	b29a      	uxth	r2, r3
 80174ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174cc:	68db      	ldr	r3, [r3, #12]
 80174ce:	685b      	ldr	r3, [r3, #4]
 80174d0:	b29b      	uxth	r3, r3
 80174d2:	1ad3      	subs	r3, r2, r3
 80174d4:	b29a      	uxth	r2, r3
 80174d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174d8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80174da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174dc:	685a      	ldr	r2, [r3, #4]
 80174de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174e0:	891b      	ldrh	r3, [r3, #8]
 80174e2:	4619      	mov	r1, r3
 80174e4:	4610      	mov	r0, r2
 80174e6:	f7fb fcab 	bl	8012e40 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80174ea:	4b62      	ldr	r3, [pc, #392]	; (8017674 <tcp_receive+0xf20>)
 80174ec:	881b      	ldrh	r3, [r3, #0]
 80174ee:	461a      	mov	r2, r3
 80174f0:	4b5e      	ldr	r3, [pc, #376]	; (801766c <tcp_receive+0xf18>)
 80174f2:	681b      	ldr	r3, [r3, #0]
 80174f4:	441a      	add	r2, r3
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174fa:	6879      	ldr	r1, [r7, #4]
 80174fc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80174fe:	440b      	add	r3, r1
 8017500:	1ad3      	subs	r3, r2, r3
 8017502:	2b00      	cmp	r3, #0
 8017504:	f340 8089 	ble.w	801761a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8017508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801750a:	681b      	ldr	r3, [r3, #0]
 801750c:	68db      	ldr	r3, [r3, #12]
 801750e:	899b      	ldrh	r3, [r3, #12]
 8017510:	b29b      	uxth	r3, r3
 8017512:	4618      	mov	r0, r3
 8017514:	f7fa fad2 	bl	8011abc <lwip_htons>
 8017518:	4603      	mov	r3, r0
 801751a:	b2db      	uxtb	r3, r3
 801751c:	f003 0301 	and.w	r3, r3, #1
 8017520:	2b00      	cmp	r3, #0
 8017522:	d022      	beq.n	801756a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8017524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017526:	681b      	ldr	r3, [r3, #0]
 8017528:	68db      	ldr	r3, [r3, #12]
 801752a:	899b      	ldrh	r3, [r3, #12]
 801752c:	b29b      	uxth	r3, r3
 801752e:	b21b      	sxth	r3, r3
 8017530:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8017534:	b21c      	sxth	r4, r3
 8017536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017538:	681b      	ldr	r3, [r3, #0]
 801753a:	68db      	ldr	r3, [r3, #12]
 801753c:	899b      	ldrh	r3, [r3, #12]
 801753e:	b29b      	uxth	r3, r3
 8017540:	4618      	mov	r0, r3
 8017542:	f7fa fabb 	bl	8011abc <lwip_htons>
 8017546:	4603      	mov	r3, r0
 8017548:	b2db      	uxtb	r3, r3
 801754a:	b29b      	uxth	r3, r3
 801754c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8017550:	b29b      	uxth	r3, r3
 8017552:	4618      	mov	r0, r3
 8017554:	f7fa fab2 	bl	8011abc <lwip_htons>
 8017558:	4603      	mov	r3, r0
 801755a:	b21b      	sxth	r3, r3
 801755c:	4323      	orrs	r3, r4
 801755e:	b21a      	sxth	r2, r3
 8017560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017562:	681b      	ldr	r3, [r3, #0]
 8017564:	68db      	ldr	r3, [r3, #12]
 8017566:	b292      	uxth	r2, r2
 8017568:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801756e:	b29a      	uxth	r2, r3
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017574:	4413      	add	r3, r2
 8017576:	b299      	uxth	r1, r3
 8017578:	4b3c      	ldr	r3, [pc, #240]	; (801766c <tcp_receive+0xf18>)
 801757a:	681b      	ldr	r3, [r3, #0]
 801757c:	b29a      	uxth	r2, r3
 801757e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017580:	681b      	ldr	r3, [r3, #0]
 8017582:	1a8a      	subs	r2, r1, r2
 8017584:	b292      	uxth	r2, r2
 8017586:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8017588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801758a:	681b      	ldr	r3, [r3, #0]
 801758c:	685a      	ldr	r2, [r3, #4]
 801758e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017590:	681b      	ldr	r3, [r3, #0]
 8017592:	891b      	ldrh	r3, [r3, #8]
 8017594:	4619      	mov	r1, r3
 8017596:	4610      	mov	r0, r2
 8017598:	f7fb fc52 	bl	8012e40 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801759c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801759e:	681b      	ldr	r3, [r3, #0]
 80175a0:	891c      	ldrh	r4, [r3, #8]
 80175a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175a4:	681b      	ldr	r3, [r3, #0]
 80175a6:	68db      	ldr	r3, [r3, #12]
 80175a8:	899b      	ldrh	r3, [r3, #12]
 80175aa:	b29b      	uxth	r3, r3
 80175ac:	4618      	mov	r0, r3
 80175ae:	f7fa fa85 	bl	8011abc <lwip_htons>
 80175b2:	4603      	mov	r3, r0
 80175b4:	b2db      	uxtb	r3, r3
 80175b6:	f003 0303 	and.w	r3, r3, #3
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d001      	beq.n	80175c2 <tcp_receive+0xe6e>
 80175be:	2301      	movs	r3, #1
 80175c0:	e000      	b.n	80175c4 <tcp_receive+0xe70>
 80175c2:	2300      	movs	r3, #0
 80175c4:	4423      	add	r3, r4
 80175c6:	b29a      	uxth	r2, r3
 80175c8:	4b2a      	ldr	r3, [pc, #168]	; (8017674 <tcp_receive+0xf20>)
 80175ca:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80175cc:	4b29      	ldr	r3, [pc, #164]	; (8017674 <tcp_receive+0xf20>)
 80175ce:	881b      	ldrh	r3, [r3, #0]
 80175d0:	461a      	mov	r2, r3
 80175d2:	4b26      	ldr	r3, [pc, #152]	; (801766c <tcp_receive+0xf18>)
 80175d4:	681b      	ldr	r3, [r3, #0]
 80175d6:	441a      	add	r2, r3
 80175d8:	687b      	ldr	r3, [r7, #4]
 80175da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175dc:	6879      	ldr	r1, [r7, #4]
 80175de:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80175e0:	440b      	add	r3, r1
 80175e2:	429a      	cmp	r2, r3
 80175e4:	d019      	beq.n	801761a <tcp_receive+0xec6>
 80175e6:	4b24      	ldr	r3, [pc, #144]	; (8017678 <tcp_receive+0xf24>)
 80175e8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80175ec:	4923      	ldr	r1, [pc, #140]	; (801767c <tcp_receive+0xf28>)
 80175ee:	4824      	ldr	r0, [pc, #144]	; (8017680 <tcp_receive+0xf2c>)
 80175f0:	f005 fd60 	bl	801d0b4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80175f4:	e011      	b.n	801761a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80175f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175f8:	681b      	ldr	r3, [r3, #0]
 80175fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80175fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80175fe:	2b00      	cmp	r3, #0
 8017600:	f47f aea4 	bne.w	801734c <tcp_receive+0xbf8>
 8017604:	e00a      	b.n	801761c <tcp_receive+0xec8>
                break;
 8017606:	bf00      	nop
 8017608:	e008      	b.n	801761c <tcp_receive+0xec8>
                break;
 801760a:	bf00      	nop
 801760c:	e006      	b.n	801761c <tcp_receive+0xec8>
                  break;
 801760e:	bf00      	nop
 8017610:	e004      	b.n	801761c <tcp_receive+0xec8>
                  break;
 8017612:	bf00      	nop
 8017614:	e002      	b.n	801761c <tcp_receive+0xec8>
                  break;
 8017616:	bf00      	nop
 8017618:	e000      	b.n	801761c <tcp_receive+0xec8>
                break;
 801761a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801761c:	6878      	ldr	r0, [r7, #4]
 801761e:	f001 fe8b 	bl	8019338 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8017622:	e003      	b.n	801762c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8017624:	6878      	ldr	r0, [r7, #4]
 8017626:	f001 fe87 	bl	8019338 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801762a:	e01a      	b.n	8017662 <tcp_receive+0xf0e>
 801762c:	e019      	b.n	8017662 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801762e:	4b0f      	ldr	r3, [pc, #60]	; (801766c <tcp_receive+0xf18>)
 8017630:	681a      	ldr	r2, [r3, #0]
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017636:	1ad3      	subs	r3, r2, r3
 8017638:	2b00      	cmp	r3, #0
 801763a:	db0a      	blt.n	8017652 <tcp_receive+0xefe>
 801763c:	4b0b      	ldr	r3, [pc, #44]	; (801766c <tcp_receive+0xf18>)
 801763e:	681a      	ldr	r2, [r3, #0]
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017644:	6879      	ldr	r1, [r7, #4]
 8017646:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017648:	440b      	add	r3, r1
 801764a:	1ad3      	subs	r3, r2, r3
 801764c:	3301      	adds	r3, #1
 801764e:	2b00      	cmp	r3, #0
 8017650:	dd07      	ble.n	8017662 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	8b5b      	ldrh	r3, [r3, #26]
 8017656:	f043 0302 	orr.w	r3, r3, #2
 801765a:	b29a      	uxth	r2, r3
 801765c:	687b      	ldr	r3, [r7, #4]
 801765e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8017660:	e7ff      	b.n	8017662 <tcp_receive+0xf0e>
 8017662:	bf00      	nop
 8017664:	3750      	adds	r7, #80	; 0x50
 8017666:	46bd      	mov	sp, r7
 8017668:	bdb0      	pop	{r4, r5, r7, pc}
 801766a:	bf00      	nop
 801766c:	2000ddf4 	.word	0x2000ddf4
 8017670:	2000ddd4 	.word	0x2000ddd4
 8017674:	2000ddfe 	.word	0x2000ddfe
 8017678:	0802041c 	.word	0x0802041c
 801767c:	080207c4 	.word	0x080207c4
 8017680:	08020468 	.word	0x08020468

08017684 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8017684:	b480      	push	{r7}
 8017686:	b083      	sub	sp, #12
 8017688:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801768a:	4b15      	ldr	r3, [pc, #84]	; (80176e0 <tcp_get_next_optbyte+0x5c>)
 801768c:	881b      	ldrh	r3, [r3, #0]
 801768e:	1c5a      	adds	r2, r3, #1
 8017690:	b291      	uxth	r1, r2
 8017692:	4a13      	ldr	r2, [pc, #76]	; (80176e0 <tcp_get_next_optbyte+0x5c>)
 8017694:	8011      	strh	r1, [r2, #0]
 8017696:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8017698:	4b12      	ldr	r3, [pc, #72]	; (80176e4 <tcp_get_next_optbyte+0x60>)
 801769a:	681b      	ldr	r3, [r3, #0]
 801769c:	2b00      	cmp	r3, #0
 801769e:	d004      	beq.n	80176aa <tcp_get_next_optbyte+0x26>
 80176a0:	4b11      	ldr	r3, [pc, #68]	; (80176e8 <tcp_get_next_optbyte+0x64>)
 80176a2:	881b      	ldrh	r3, [r3, #0]
 80176a4:	88fa      	ldrh	r2, [r7, #6]
 80176a6:	429a      	cmp	r2, r3
 80176a8:	d208      	bcs.n	80176bc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80176aa:	4b10      	ldr	r3, [pc, #64]	; (80176ec <tcp_get_next_optbyte+0x68>)
 80176ac:	681b      	ldr	r3, [r3, #0]
 80176ae:	3314      	adds	r3, #20
 80176b0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80176b2:	88fb      	ldrh	r3, [r7, #6]
 80176b4:	683a      	ldr	r2, [r7, #0]
 80176b6:	4413      	add	r3, r2
 80176b8:	781b      	ldrb	r3, [r3, #0]
 80176ba:	e00b      	b.n	80176d4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80176bc:	88fb      	ldrh	r3, [r7, #6]
 80176be:	b2da      	uxtb	r2, r3
 80176c0:	4b09      	ldr	r3, [pc, #36]	; (80176e8 <tcp_get_next_optbyte+0x64>)
 80176c2:	881b      	ldrh	r3, [r3, #0]
 80176c4:	b2db      	uxtb	r3, r3
 80176c6:	1ad3      	subs	r3, r2, r3
 80176c8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80176ca:	4b06      	ldr	r3, [pc, #24]	; (80176e4 <tcp_get_next_optbyte+0x60>)
 80176cc:	681a      	ldr	r2, [r3, #0]
 80176ce:	797b      	ldrb	r3, [r7, #5]
 80176d0:	4413      	add	r3, r2
 80176d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80176d4:	4618      	mov	r0, r3
 80176d6:	370c      	adds	r7, #12
 80176d8:	46bd      	mov	sp, r7
 80176da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176de:	4770      	bx	lr
 80176e0:	2000ddf0 	.word	0x2000ddf0
 80176e4:	2000ddec 	.word	0x2000ddec
 80176e8:	2000ddea 	.word	0x2000ddea
 80176ec:	2000dde4 	.word	0x2000dde4

080176f0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80176f0:	b580      	push	{r7, lr}
 80176f2:	b084      	sub	sp, #16
 80176f4:	af00      	add	r7, sp, #0
 80176f6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	d106      	bne.n	801770c <tcp_parseopt+0x1c>
 80176fe:	4b32      	ldr	r3, [pc, #200]	; (80177c8 <tcp_parseopt+0xd8>)
 8017700:	f240 727d 	movw	r2, #1917	; 0x77d
 8017704:	4931      	ldr	r1, [pc, #196]	; (80177cc <tcp_parseopt+0xdc>)
 8017706:	4832      	ldr	r0, [pc, #200]	; (80177d0 <tcp_parseopt+0xe0>)
 8017708:	f005 fcd4 	bl	801d0b4 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801770c:	4b31      	ldr	r3, [pc, #196]	; (80177d4 <tcp_parseopt+0xe4>)
 801770e:	881b      	ldrh	r3, [r3, #0]
 8017710:	2b00      	cmp	r3, #0
 8017712:	d055      	beq.n	80177c0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8017714:	4b30      	ldr	r3, [pc, #192]	; (80177d8 <tcp_parseopt+0xe8>)
 8017716:	2200      	movs	r2, #0
 8017718:	801a      	strh	r2, [r3, #0]
 801771a:	e045      	b.n	80177a8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801771c:	f7ff ffb2 	bl	8017684 <tcp_get_next_optbyte>
 8017720:	4603      	mov	r3, r0
 8017722:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8017724:	7bfb      	ldrb	r3, [r7, #15]
 8017726:	2b02      	cmp	r3, #2
 8017728:	d006      	beq.n	8017738 <tcp_parseopt+0x48>
 801772a:	2b02      	cmp	r3, #2
 801772c:	dc2b      	bgt.n	8017786 <tcp_parseopt+0x96>
 801772e:	2b00      	cmp	r3, #0
 8017730:	d041      	beq.n	80177b6 <tcp_parseopt+0xc6>
 8017732:	2b01      	cmp	r3, #1
 8017734:	d127      	bne.n	8017786 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8017736:	e037      	b.n	80177a8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8017738:	f7ff ffa4 	bl	8017684 <tcp_get_next_optbyte>
 801773c:	4603      	mov	r3, r0
 801773e:	2b04      	cmp	r3, #4
 8017740:	d13b      	bne.n	80177ba <tcp_parseopt+0xca>
 8017742:	4b25      	ldr	r3, [pc, #148]	; (80177d8 <tcp_parseopt+0xe8>)
 8017744:	881b      	ldrh	r3, [r3, #0]
 8017746:	3301      	adds	r3, #1
 8017748:	4a22      	ldr	r2, [pc, #136]	; (80177d4 <tcp_parseopt+0xe4>)
 801774a:	8812      	ldrh	r2, [r2, #0]
 801774c:	4293      	cmp	r3, r2
 801774e:	da34      	bge.n	80177ba <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8017750:	f7ff ff98 	bl	8017684 <tcp_get_next_optbyte>
 8017754:	4603      	mov	r3, r0
 8017756:	b29b      	uxth	r3, r3
 8017758:	021b      	lsls	r3, r3, #8
 801775a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801775c:	f7ff ff92 	bl	8017684 <tcp_get_next_optbyte>
 8017760:	4603      	mov	r3, r0
 8017762:	b29a      	uxth	r2, r3
 8017764:	89bb      	ldrh	r3, [r7, #12]
 8017766:	4313      	orrs	r3, r2
 8017768:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801776a:	89bb      	ldrh	r3, [r7, #12]
 801776c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8017770:	d804      	bhi.n	801777c <tcp_parseopt+0x8c>
 8017772:	89bb      	ldrh	r3, [r7, #12]
 8017774:	2b00      	cmp	r3, #0
 8017776:	d001      	beq.n	801777c <tcp_parseopt+0x8c>
 8017778:	89ba      	ldrh	r2, [r7, #12]
 801777a:	e001      	b.n	8017780 <tcp_parseopt+0x90>
 801777c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8017784:	e010      	b.n	80177a8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8017786:	f7ff ff7d 	bl	8017684 <tcp_get_next_optbyte>
 801778a:	4603      	mov	r3, r0
 801778c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801778e:	7afb      	ldrb	r3, [r7, #11]
 8017790:	2b01      	cmp	r3, #1
 8017792:	d914      	bls.n	80177be <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8017794:	7afb      	ldrb	r3, [r7, #11]
 8017796:	b29a      	uxth	r2, r3
 8017798:	4b0f      	ldr	r3, [pc, #60]	; (80177d8 <tcp_parseopt+0xe8>)
 801779a:	881b      	ldrh	r3, [r3, #0]
 801779c:	4413      	add	r3, r2
 801779e:	b29b      	uxth	r3, r3
 80177a0:	3b02      	subs	r3, #2
 80177a2:	b29a      	uxth	r2, r3
 80177a4:	4b0c      	ldr	r3, [pc, #48]	; (80177d8 <tcp_parseopt+0xe8>)
 80177a6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80177a8:	4b0b      	ldr	r3, [pc, #44]	; (80177d8 <tcp_parseopt+0xe8>)
 80177aa:	881a      	ldrh	r2, [r3, #0]
 80177ac:	4b09      	ldr	r3, [pc, #36]	; (80177d4 <tcp_parseopt+0xe4>)
 80177ae:	881b      	ldrh	r3, [r3, #0]
 80177b0:	429a      	cmp	r2, r3
 80177b2:	d3b3      	bcc.n	801771c <tcp_parseopt+0x2c>
 80177b4:	e004      	b.n	80177c0 <tcp_parseopt+0xd0>
          return;
 80177b6:	bf00      	nop
 80177b8:	e002      	b.n	80177c0 <tcp_parseopt+0xd0>
            return;
 80177ba:	bf00      	nop
 80177bc:	e000      	b.n	80177c0 <tcp_parseopt+0xd0>
            return;
 80177be:	bf00      	nop
      }
    }
  }
}
 80177c0:	3710      	adds	r7, #16
 80177c2:	46bd      	mov	sp, r7
 80177c4:	bd80      	pop	{r7, pc}
 80177c6:	bf00      	nop
 80177c8:	0802041c 	.word	0x0802041c
 80177cc:	08020880 	.word	0x08020880
 80177d0:	08020468 	.word	0x08020468
 80177d4:	2000dde8 	.word	0x2000dde8
 80177d8:	2000ddf0 	.word	0x2000ddf0

080177dc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80177dc:	b480      	push	{r7}
 80177de:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80177e0:	4b05      	ldr	r3, [pc, #20]	; (80177f8 <tcp_trigger_input_pcb_close+0x1c>)
 80177e2:	781b      	ldrb	r3, [r3, #0]
 80177e4:	f043 0310 	orr.w	r3, r3, #16
 80177e8:	b2da      	uxtb	r2, r3
 80177ea:	4b03      	ldr	r3, [pc, #12]	; (80177f8 <tcp_trigger_input_pcb_close+0x1c>)
 80177ec:	701a      	strb	r2, [r3, #0]
}
 80177ee:	bf00      	nop
 80177f0:	46bd      	mov	sp, r7
 80177f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177f6:	4770      	bx	lr
 80177f8:	2000de01 	.word	0x2000de01

080177fc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80177fc:	b580      	push	{r7, lr}
 80177fe:	b084      	sub	sp, #16
 8017800:	af00      	add	r7, sp, #0
 8017802:	60f8      	str	r0, [r7, #12]
 8017804:	60b9      	str	r1, [r7, #8]
 8017806:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8017808:	68fb      	ldr	r3, [r7, #12]
 801780a:	2b00      	cmp	r3, #0
 801780c:	d00a      	beq.n	8017824 <tcp_route+0x28>
 801780e:	68fb      	ldr	r3, [r7, #12]
 8017810:	7a1b      	ldrb	r3, [r3, #8]
 8017812:	2b00      	cmp	r3, #0
 8017814:	d006      	beq.n	8017824 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8017816:	68fb      	ldr	r3, [r7, #12]
 8017818:	7a1b      	ldrb	r3, [r3, #8]
 801781a:	4618      	mov	r0, r3
 801781c:	f7fb f908 	bl	8012a30 <netif_get_by_index>
 8017820:	4603      	mov	r3, r0
 8017822:	e003      	b.n	801782c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8017824:	6878      	ldr	r0, [r7, #4]
 8017826:	f003 fe35 	bl	801b494 <ip4_route>
 801782a:	4603      	mov	r3, r0
  }
}
 801782c:	4618      	mov	r0, r3
 801782e:	3710      	adds	r7, #16
 8017830:	46bd      	mov	sp, r7
 8017832:	bd80      	pop	{r7, pc}

08017834 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8017834:	b590      	push	{r4, r7, lr}
 8017836:	b087      	sub	sp, #28
 8017838:	af00      	add	r7, sp, #0
 801783a:	60f8      	str	r0, [r7, #12]
 801783c:	60b9      	str	r1, [r7, #8]
 801783e:	603b      	str	r3, [r7, #0]
 8017840:	4613      	mov	r3, r2
 8017842:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8017844:	68fb      	ldr	r3, [r7, #12]
 8017846:	2b00      	cmp	r3, #0
 8017848:	d105      	bne.n	8017856 <tcp_create_segment+0x22>
 801784a:	4b44      	ldr	r3, [pc, #272]	; (801795c <tcp_create_segment+0x128>)
 801784c:	22a3      	movs	r2, #163	; 0xa3
 801784e:	4944      	ldr	r1, [pc, #272]	; (8017960 <tcp_create_segment+0x12c>)
 8017850:	4844      	ldr	r0, [pc, #272]	; (8017964 <tcp_create_segment+0x130>)
 8017852:	f005 fc2f 	bl	801d0b4 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8017856:	68bb      	ldr	r3, [r7, #8]
 8017858:	2b00      	cmp	r3, #0
 801785a:	d105      	bne.n	8017868 <tcp_create_segment+0x34>
 801785c:	4b3f      	ldr	r3, [pc, #252]	; (801795c <tcp_create_segment+0x128>)
 801785e:	22a4      	movs	r2, #164	; 0xa4
 8017860:	4941      	ldr	r1, [pc, #260]	; (8017968 <tcp_create_segment+0x134>)
 8017862:	4840      	ldr	r0, [pc, #256]	; (8017964 <tcp_create_segment+0x130>)
 8017864:	f005 fc26 	bl	801d0b4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017868:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801786c:	009b      	lsls	r3, r3, #2
 801786e:	b2db      	uxtb	r3, r3
 8017870:	f003 0304 	and.w	r3, r3, #4
 8017874:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8017876:	2003      	movs	r0, #3
 8017878:	f7fa fdd6 	bl	8012428 <memp_malloc>
 801787c:	6138      	str	r0, [r7, #16]
 801787e:	693b      	ldr	r3, [r7, #16]
 8017880:	2b00      	cmp	r3, #0
 8017882:	d104      	bne.n	801788e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8017884:	68b8      	ldr	r0, [r7, #8]
 8017886:	f7fb fc61 	bl	801314c <pbuf_free>
    return NULL;
 801788a:	2300      	movs	r3, #0
 801788c:	e061      	b.n	8017952 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801788e:	693b      	ldr	r3, [r7, #16]
 8017890:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017894:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8017896:	693b      	ldr	r3, [r7, #16]
 8017898:	2200      	movs	r2, #0
 801789a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801789c:	693b      	ldr	r3, [r7, #16]
 801789e:	68ba      	ldr	r2, [r7, #8]
 80178a0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80178a2:	68bb      	ldr	r3, [r7, #8]
 80178a4:	891a      	ldrh	r2, [r3, #8]
 80178a6:	7dfb      	ldrb	r3, [r7, #23]
 80178a8:	b29b      	uxth	r3, r3
 80178aa:	429a      	cmp	r2, r3
 80178ac:	d205      	bcs.n	80178ba <tcp_create_segment+0x86>
 80178ae:	4b2b      	ldr	r3, [pc, #172]	; (801795c <tcp_create_segment+0x128>)
 80178b0:	22b0      	movs	r2, #176	; 0xb0
 80178b2:	492e      	ldr	r1, [pc, #184]	; (801796c <tcp_create_segment+0x138>)
 80178b4:	482b      	ldr	r0, [pc, #172]	; (8017964 <tcp_create_segment+0x130>)
 80178b6:	f005 fbfd 	bl	801d0b4 <iprintf>
  seg->len = p->tot_len - optlen;
 80178ba:	68bb      	ldr	r3, [r7, #8]
 80178bc:	891a      	ldrh	r2, [r3, #8]
 80178be:	7dfb      	ldrb	r3, [r7, #23]
 80178c0:	b29b      	uxth	r3, r3
 80178c2:	1ad3      	subs	r3, r2, r3
 80178c4:	b29a      	uxth	r2, r3
 80178c6:	693b      	ldr	r3, [r7, #16]
 80178c8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 80178ca:	2114      	movs	r1, #20
 80178cc:	68b8      	ldr	r0, [r7, #8]
 80178ce:	f7fb fba7 	bl	8013020 <pbuf_add_header>
 80178d2:	4603      	mov	r3, r0
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d004      	beq.n	80178e2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80178d8:	6938      	ldr	r0, [r7, #16]
 80178da:	f7fd f800 	bl	80148de <tcp_seg_free>
    return NULL;
 80178de:	2300      	movs	r3, #0
 80178e0:	e037      	b.n	8017952 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80178e2:	693b      	ldr	r3, [r7, #16]
 80178e4:	685b      	ldr	r3, [r3, #4]
 80178e6:	685a      	ldr	r2, [r3, #4]
 80178e8:	693b      	ldr	r3, [r7, #16]
 80178ea:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80178ec:	68fb      	ldr	r3, [r7, #12]
 80178ee:	8ada      	ldrh	r2, [r3, #22]
 80178f0:	693b      	ldr	r3, [r7, #16]
 80178f2:	68dc      	ldr	r4, [r3, #12]
 80178f4:	4610      	mov	r0, r2
 80178f6:	f7fa f8e1 	bl	8011abc <lwip_htons>
 80178fa:	4603      	mov	r3, r0
 80178fc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80178fe:	68fb      	ldr	r3, [r7, #12]
 8017900:	8b1a      	ldrh	r2, [r3, #24]
 8017902:	693b      	ldr	r3, [r7, #16]
 8017904:	68dc      	ldr	r4, [r3, #12]
 8017906:	4610      	mov	r0, r2
 8017908:	f7fa f8d8 	bl	8011abc <lwip_htons>
 801790c:	4603      	mov	r3, r0
 801790e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8017910:	693b      	ldr	r3, [r7, #16]
 8017912:	68dc      	ldr	r4, [r3, #12]
 8017914:	6838      	ldr	r0, [r7, #0]
 8017916:	f7fa f8e6 	bl	8011ae6 <lwip_htonl>
 801791a:	4603      	mov	r3, r0
 801791c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801791e:	7dfb      	ldrb	r3, [r7, #23]
 8017920:	089b      	lsrs	r3, r3, #2
 8017922:	b2db      	uxtb	r3, r3
 8017924:	b29b      	uxth	r3, r3
 8017926:	3305      	adds	r3, #5
 8017928:	b29b      	uxth	r3, r3
 801792a:	031b      	lsls	r3, r3, #12
 801792c:	b29a      	uxth	r2, r3
 801792e:	79fb      	ldrb	r3, [r7, #7]
 8017930:	b29b      	uxth	r3, r3
 8017932:	4313      	orrs	r3, r2
 8017934:	b29a      	uxth	r2, r3
 8017936:	693b      	ldr	r3, [r7, #16]
 8017938:	68dc      	ldr	r4, [r3, #12]
 801793a:	4610      	mov	r0, r2
 801793c:	f7fa f8be 	bl	8011abc <lwip_htons>
 8017940:	4603      	mov	r3, r0
 8017942:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8017944:	693b      	ldr	r3, [r7, #16]
 8017946:	68db      	ldr	r3, [r3, #12]
 8017948:	2200      	movs	r2, #0
 801794a:	749a      	strb	r2, [r3, #18]
 801794c:	2200      	movs	r2, #0
 801794e:	74da      	strb	r2, [r3, #19]
  return seg;
 8017950:	693b      	ldr	r3, [r7, #16]
}
 8017952:	4618      	mov	r0, r3
 8017954:	371c      	adds	r7, #28
 8017956:	46bd      	mov	sp, r7
 8017958:	bd90      	pop	{r4, r7, pc}
 801795a:	bf00      	nop
 801795c:	0802089c 	.word	0x0802089c
 8017960:	080208d0 	.word	0x080208d0
 8017964:	080208f0 	.word	0x080208f0
 8017968:	08020918 	.word	0x08020918
 801796c:	0802093c 	.word	0x0802093c

08017970 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8017970:	b580      	push	{r7, lr}
 8017972:	b086      	sub	sp, #24
 8017974:	af00      	add	r7, sp, #0
 8017976:	607b      	str	r3, [r7, #4]
 8017978:	4603      	mov	r3, r0
 801797a:	73fb      	strb	r3, [r7, #15]
 801797c:	460b      	mov	r3, r1
 801797e:	81bb      	strh	r3, [r7, #12]
 8017980:	4613      	mov	r3, r2
 8017982:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8017984:	89bb      	ldrh	r3, [r7, #12]
 8017986:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8017988:	687b      	ldr	r3, [r7, #4]
 801798a:	2b00      	cmp	r3, #0
 801798c:	d105      	bne.n	801799a <tcp_pbuf_prealloc+0x2a>
 801798e:	4b30      	ldr	r3, [pc, #192]	; (8017a50 <tcp_pbuf_prealloc+0xe0>)
 8017990:	22e8      	movs	r2, #232	; 0xe8
 8017992:	4930      	ldr	r1, [pc, #192]	; (8017a54 <tcp_pbuf_prealloc+0xe4>)
 8017994:	4830      	ldr	r0, [pc, #192]	; (8017a58 <tcp_pbuf_prealloc+0xe8>)
 8017996:	f005 fb8d 	bl	801d0b4 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801799a:	6a3b      	ldr	r3, [r7, #32]
 801799c:	2b00      	cmp	r3, #0
 801799e:	d105      	bne.n	80179ac <tcp_pbuf_prealloc+0x3c>
 80179a0:	4b2b      	ldr	r3, [pc, #172]	; (8017a50 <tcp_pbuf_prealloc+0xe0>)
 80179a2:	22e9      	movs	r2, #233	; 0xe9
 80179a4:	492d      	ldr	r1, [pc, #180]	; (8017a5c <tcp_pbuf_prealloc+0xec>)
 80179a6:	482c      	ldr	r0, [pc, #176]	; (8017a58 <tcp_pbuf_prealloc+0xe8>)
 80179a8:	f005 fb84 	bl	801d0b4 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 80179ac:	89ba      	ldrh	r2, [r7, #12]
 80179ae:	897b      	ldrh	r3, [r7, #10]
 80179b0:	429a      	cmp	r2, r3
 80179b2:	d221      	bcs.n	80179f8 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80179b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80179b8:	f003 0302 	and.w	r3, r3, #2
 80179bc:	2b00      	cmp	r3, #0
 80179be:	d111      	bne.n	80179e4 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 80179c0:	6a3b      	ldr	r3, [r7, #32]
 80179c2:	8b5b      	ldrh	r3, [r3, #26]
 80179c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d115      	bne.n	80179f8 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 80179cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d007      	beq.n	80179e4 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 80179d4:	6a3b      	ldr	r3, [r7, #32]
 80179d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 80179d8:	2b00      	cmp	r3, #0
 80179da:	d103      	bne.n	80179e4 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 80179dc:	6a3b      	ldr	r3, [r7, #32]
 80179de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d009      	beq.n	80179f8 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80179e4:	89bb      	ldrh	r3, [r7, #12]
 80179e6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80179ea:	f023 0203 	bic.w	r2, r3, #3
 80179ee:	897b      	ldrh	r3, [r7, #10]
 80179f0:	4293      	cmp	r3, r2
 80179f2:	bf28      	it	cs
 80179f4:	4613      	movcs	r3, r2
 80179f6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80179f8:	8af9      	ldrh	r1, [r7, #22]
 80179fa:	7bfb      	ldrb	r3, [r7, #15]
 80179fc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017a00:	4618      	mov	r0, r3
 8017a02:	f7fb f8bf 	bl	8012b84 <pbuf_alloc>
 8017a06:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017a08:	693b      	ldr	r3, [r7, #16]
 8017a0a:	2b00      	cmp	r3, #0
 8017a0c:	d101      	bne.n	8017a12 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8017a0e:	2300      	movs	r3, #0
 8017a10:	e019      	b.n	8017a46 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8017a12:	693b      	ldr	r3, [r7, #16]
 8017a14:	681b      	ldr	r3, [r3, #0]
 8017a16:	2b00      	cmp	r3, #0
 8017a18:	d006      	beq.n	8017a28 <tcp_pbuf_prealloc+0xb8>
 8017a1a:	4b0d      	ldr	r3, [pc, #52]	; (8017a50 <tcp_pbuf_prealloc+0xe0>)
 8017a1c:	f240 120b 	movw	r2, #267	; 0x10b
 8017a20:	490f      	ldr	r1, [pc, #60]	; (8017a60 <tcp_pbuf_prealloc+0xf0>)
 8017a22:	480d      	ldr	r0, [pc, #52]	; (8017a58 <tcp_pbuf_prealloc+0xe8>)
 8017a24:	f005 fb46 	bl	801d0b4 <iprintf>
  *oversize = p->len - length;
 8017a28:	693b      	ldr	r3, [r7, #16]
 8017a2a:	895a      	ldrh	r2, [r3, #10]
 8017a2c:	89bb      	ldrh	r3, [r7, #12]
 8017a2e:	1ad3      	subs	r3, r2, r3
 8017a30:	b29a      	uxth	r2, r3
 8017a32:	687b      	ldr	r3, [r7, #4]
 8017a34:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8017a36:	693b      	ldr	r3, [r7, #16]
 8017a38:	89ba      	ldrh	r2, [r7, #12]
 8017a3a:	811a      	strh	r2, [r3, #8]
 8017a3c:	693b      	ldr	r3, [r7, #16]
 8017a3e:	891a      	ldrh	r2, [r3, #8]
 8017a40:	693b      	ldr	r3, [r7, #16]
 8017a42:	815a      	strh	r2, [r3, #10]
  return p;
 8017a44:	693b      	ldr	r3, [r7, #16]
}
 8017a46:	4618      	mov	r0, r3
 8017a48:	3718      	adds	r7, #24
 8017a4a:	46bd      	mov	sp, r7
 8017a4c:	bd80      	pop	{r7, pc}
 8017a4e:	bf00      	nop
 8017a50:	0802089c 	.word	0x0802089c
 8017a54:	08020954 	.word	0x08020954
 8017a58:	080208f0 	.word	0x080208f0
 8017a5c:	08020978 	.word	0x08020978
 8017a60:	08020998 	.word	0x08020998

08017a64 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8017a64:	b580      	push	{r7, lr}
 8017a66:	b082      	sub	sp, #8
 8017a68:	af00      	add	r7, sp, #0
 8017a6a:	6078      	str	r0, [r7, #4]
 8017a6c:	460b      	mov	r3, r1
 8017a6e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8017a70:	687b      	ldr	r3, [r7, #4]
 8017a72:	2b00      	cmp	r3, #0
 8017a74:	d106      	bne.n	8017a84 <tcp_write_checks+0x20>
 8017a76:	4b33      	ldr	r3, [pc, #204]	; (8017b44 <tcp_write_checks+0xe0>)
 8017a78:	f240 1233 	movw	r2, #307	; 0x133
 8017a7c:	4932      	ldr	r1, [pc, #200]	; (8017b48 <tcp_write_checks+0xe4>)
 8017a7e:	4833      	ldr	r0, [pc, #204]	; (8017b4c <tcp_write_checks+0xe8>)
 8017a80:	f005 fb18 	bl	801d0b4 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	7d1b      	ldrb	r3, [r3, #20]
 8017a88:	2b04      	cmp	r3, #4
 8017a8a:	d00e      	beq.n	8017aaa <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8017a8c:	687b      	ldr	r3, [r7, #4]
 8017a8e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8017a90:	2b07      	cmp	r3, #7
 8017a92:	d00a      	beq.n	8017aaa <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8017a98:	2b02      	cmp	r3, #2
 8017a9a:	d006      	beq.n	8017aaa <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8017aa0:	2b03      	cmp	r3, #3
 8017aa2:	d002      	beq.n	8017aaa <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8017aa4:	f06f 030a 	mvn.w	r3, #10
 8017aa8:	e048      	b.n	8017b3c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8017aaa:	887b      	ldrh	r3, [r7, #2]
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d101      	bne.n	8017ab4 <tcp_write_checks+0x50>
    return ERR_OK;
 8017ab0:	2300      	movs	r3, #0
 8017ab2:	e043      	b.n	8017b3c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8017aba:	887a      	ldrh	r2, [r7, #2]
 8017abc:	429a      	cmp	r2, r3
 8017abe:	d909      	bls.n	8017ad4 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	8b5b      	ldrh	r3, [r3, #26]
 8017ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017ac8:	b29a      	uxth	r2, r3
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8017ace:	f04f 33ff 	mov.w	r3, #4294967295
 8017ad2:	e033      	b.n	8017b3c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017ada:	2b08      	cmp	r3, #8
 8017adc:	d909      	bls.n	8017af2 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017ade:	687b      	ldr	r3, [r7, #4]
 8017ae0:	8b5b      	ldrh	r3, [r3, #26]
 8017ae2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017ae6:	b29a      	uxth	r2, r3
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8017aec:	f04f 33ff 	mov.w	r3, #4294967295
 8017af0:	e024      	b.n	8017b3c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	d00f      	beq.n	8017b1c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	d11a      	bne.n	8017b3a <tcp_write_checks+0xd6>
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	d116      	bne.n	8017b3a <tcp_write_checks+0xd6>
 8017b0c:	4b0d      	ldr	r3, [pc, #52]	; (8017b44 <tcp_write_checks+0xe0>)
 8017b0e:	f240 1255 	movw	r2, #341	; 0x155
 8017b12:	490f      	ldr	r1, [pc, #60]	; (8017b50 <tcp_write_checks+0xec>)
 8017b14:	480d      	ldr	r0, [pc, #52]	; (8017b4c <tcp_write_checks+0xe8>)
 8017b16:	f005 facd 	bl	801d0b4 <iprintf>
 8017b1a:	e00e      	b.n	8017b3a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8017b1c:	687b      	ldr	r3, [r7, #4]
 8017b1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017b20:	2b00      	cmp	r3, #0
 8017b22:	d103      	bne.n	8017b2c <tcp_write_checks+0xc8>
 8017b24:	687b      	ldr	r3, [r7, #4]
 8017b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d006      	beq.n	8017b3a <tcp_write_checks+0xd6>
 8017b2c:	4b05      	ldr	r3, [pc, #20]	; (8017b44 <tcp_write_checks+0xe0>)
 8017b2e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8017b32:	4908      	ldr	r1, [pc, #32]	; (8017b54 <tcp_write_checks+0xf0>)
 8017b34:	4805      	ldr	r0, [pc, #20]	; (8017b4c <tcp_write_checks+0xe8>)
 8017b36:	f005 fabd 	bl	801d0b4 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8017b3a:	2300      	movs	r3, #0
}
 8017b3c:	4618      	mov	r0, r3
 8017b3e:	3708      	adds	r7, #8
 8017b40:	46bd      	mov	sp, r7
 8017b42:	bd80      	pop	{r7, pc}
 8017b44:	0802089c 	.word	0x0802089c
 8017b48:	080209ac 	.word	0x080209ac
 8017b4c:	080208f0 	.word	0x080208f0
 8017b50:	080209cc 	.word	0x080209cc
 8017b54:	08020a08 	.word	0x08020a08

08017b58 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8017b58:	b590      	push	{r4, r7, lr}
 8017b5a:	b09b      	sub	sp, #108	; 0x6c
 8017b5c:	af04      	add	r7, sp, #16
 8017b5e:	60f8      	str	r0, [r7, #12]
 8017b60:	60b9      	str	r1, [r7, #8]
 8017b62:	4611      	mov	r1, r2
 8017b64:	461a      	mov	r2, r3
 8017b66:	460b      	mov	r3, r1
 8017b68:	80fb      	strh	r3, [r7, #6]
 8017b6a:	4613      	mov	r3, r2
 8017b6c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8017b6e:	2300      	movs	r3, #0
 8017b70:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8017b72:	2300      	movs	r3, #0
 8017b74:	653b      	str	r3, [r7, #80]	; 0x50
 8017b76:	2300      	movs	r3, #0
 8017b78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8017b7a:	2300      	movs	r3, #0
 8017b7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8017b7e:	2300      	movs	r3, #0
 8017b80:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8017b82:	2300      	movs	r3, #0
 8017b84:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8017b88:	2300      	movs	r3, #0
 8017b8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8017b8e:	2300      	movs	r3, #0
 8017b90:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8017b92:	2300      	movs	r3, #0
 8017b94:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8017b96:	2300      	movs	r3, #0
 8017b98:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8017b9a:	68fb      	ldr	r3, [r7, #12]
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d109      	bne.n	8017bb4 <tcp_write+0x5c>
 8017ba0:	4ba4      	ldr	r3, [pc, #656]	; (8017e34 <tcp_write+0x2dc>)
 8017ba2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8017ba6:	49a4      	ldr	r1, [pc, #656]	; (8017e38 <tcp_write+0x2e0>)
 8017ba8:	48a4      	ldr	r0, [pc, #656]	; (8017e3c <tcp_write+0x2e4>)
 8017baa:	f005 fa83 	bl	801d0b4 <iprintf>
 8017bae:	f06f 030f 	mvn.w	r3, #15
 8017bb2:	e32a      	b.n	801820a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8017bb4:	68fb      	ldr	r3, [r7, #12]
 8017bb6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8017bba:	085b      	lsrs	r3, r3, #1
 8017bbc:	b29a      	uxth	r2, r3
 8017bbe:	68fb      	ldr	r3, [r7, #12]
 8017bc0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017bc2:	4293      	cmp	r3, r2
 8017bc4:	bf28      	it	cs
 8017bc6:	4613      	movcs	r3, r2
 8017bc8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8017bca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017bcc:	2b00      	cmp	r3, #0
 8017bce:	d102      	bne.n	8017bd6 <tcp_write+0x7e>
 8017bd0:	68fb      	ldr	r3, [r7, #12]
 8017bd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017bd4:	e000      	b.n	8017bd8 <tcp_write+0x80>
 8017bd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017bd8:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8017bda:	68bb      	ldr	r3, [r7, #8]
 8017bdc:	2b00      	cmp	r3, #0
 8017bde:	d109      	bne.n	8017bf4 <tcp_write+0x9c>
 8017be0:	4b94      	ldr	r3, [pc, #592]	; (8017e34 <tcp_write+0x2dc>)
 8017be2:	f240 12ad 	movw	r2, #429	; 0x1ad
 8017be6:	4996      	ldr	r1, [pc, #600]	; (8017e40 <tcp_write+0x2e8>)
 8017be8:	4894      	ldr	r0, [pc, #592]	; (8017e3c <tcp_write+0x2e4>)
 8017bea:	f005 fa63 	bl	801d0b4 <iprintf>
 8017bee:	f06f 030f 	mvn.w	r3, #15
 8017bf2:	e30a      	b.n	801820a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8017bf4:	88fb      	ldrh	r3, [r7, #6]
 8017bf6:	4619      	mov	r1, r3
 8017bf8:	68f8      	ldr	r0, [r7, #12]
 8017bfa:	f7ff ff33 	bl	8017a64 <tcp_write_checks>
 8017bfe:	4603      	mov	r3, r0
 8017c00:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8017c04:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	d002      	beq.n	8017c12 <tcp_write+0xba>
    return err;
 8017c0c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8017c10:	e2fb      	b.n	801820a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8017c12:	68fb      	ldr	r3, [r7, #12]
 8017c14:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017c18:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8017c1c:	2300      	movs	r3, #0
 8017c1e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8017c22:	68fb      	ldr	r3, [r7, #12]
 8017c24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	f000 80f6 	beq.w	8017e18 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017c2c:	68fb      	ldr	r3, [r7, #12]
 8017c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017c30:	653b      	str	r3, [r7, #80]	; 0x50
 8017c32:	e002      	b.n	8017c3a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8017c34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017c36:	681b      	ldr	r3, [r3, #0]
 8017c38:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017c3c:	681b      	ldr	r3, [r3, #0]
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d1f8      	bne.n	8017c34 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8017c42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017c44:	7a9b      	ldrb	r3, [r3, #10]
 8017c46:	009b      	lsls	r3, r3, #2
 8017c48:	b29b      	uxth	r3, r3
 8017c4a:	f003 0304 	and.w	r3, r3, #4
 8017c4e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8017c50:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017c52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017c54:	891b      	ldrh	r3, [r3, #8]
 8017c56:	4619      	mov	r1, r3
 8017c58:	8c3b      	ldrh	r3, [r7, #32]
 8017c5a:	440b      	add	r3, r1
 8017c5c:	429a      	cmp	r2, r3
 8017c5e:	da06      	bge.n	8017c6e <tcp_write+0x116>
 8017c60:	4b74      	ldr	r3, [pc, #464]	; (8017e34 <tcp_write+0x2dc>)
 8017c62:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8017c66:	4977      	ldr	r1, [pc, #476]	; (8017e44 <tcp_write+0x2ec>)
 8017c68:	4874      	ldr	r0, [pc, #464]	; (8017e3c <tcp_write+0x2e4>)
 8017c6a:	f005 fa23 	bl	801d0b4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8017c6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017c70:	891a      	ldrh	r2, [r3, #8]
 8017c72:	8c3b      	ldrh	r3, [r7, #32]
 8017c74:	4413      	add	r3, r2
 8017c76:	b29b      	uxth	r3, r3
 8017c78:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017c7a:	1ad3      	subs	r3, r2, r3
 8017c7c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8017c7e:	68fb      	ldr	r3, [r7, #12]
 8017c80:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017c84:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8017c86:	8a7b      	ldrh	r3, [r7, #18]
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d026      	beq.n	8017cda <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8017c8c:	8a7b      	ldrh	r3, [r7, #18]
 8017c8e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017c90:	429a      	cmp	r2, r3
 8017c92:	d206      	bcs.n	8017ca2 <tcp_write+0x14a>
 8017c94:	4b67      	ldr	r3, [pc, #412]	; (8017e34 <tcp_write+0x2dc>)
 8017c96:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8017c9a:	496b      	ldr	r1, [pc, #428]	; (8017e48 <tcp_write+0x2f0>)
 8017c9c:	4867      	ldr	r0, [pc, #412]	; (8017e3c <tcp_write+0x2e4>)
 8017c9e:	f005 fa09 	bl	801d0b4 <iprintf>
      seg = last_unsent;
 8017ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017ca4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8017ca6:	8a7b      	ldrh	r3, [r7, #18]
 8017ca8:	88fa      	ldrh	r2, [r7, #6]
 8017caa:	4293      	cmp	r3, r2
 8017cac:	bf28      	it	cs
 8017cae:	4613      	movcs	r3, r2
 8017cb0:	b29b      	uxth	r3, r3
 8017cb2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017cb4:	4293      	cmp	r3, r2
 8017cb6:	bf28      	it	cs
 8017cb8:	4613      	movcs	r3, r2
 8017cba:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8017cbc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017cc0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017cc2:	4413      	add	r3, r2
 8017cc4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8017cc8:	8a7a      	ldrh	r2, [r7, #18]
 8017cca:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017ccc:	1ad3      	subs	r3, r2, r3
 8017cce:	b29b      	uxth	r3, r3
 8017cd0:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8017cd2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017cd4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017cd6:	1ad3      	subs	r3, r2, r3
 8017cd8:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8017cda:	8a7b      	ldrh	r3, [r7, #18]
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d00b      	beq.n	8017cf8 <tcp_write+0x1a0>
 8017ce0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017ce4:	88fb      	ldrh	r3, [r7, #6]
 8017ce6:	429a      	cmp	r2, r3
 8017ce8:	d006      	beq.n	8017cf8 <tcp_write+0x1a0>
 8017cea:	4b52      	ldr	r3, [pc, #328]	; (8017e34 <tcp_write+0x2dc>)
 8017cec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017cf0:	4956      	ldr	r1, [pc, #344]	; (8017e4c <tcp_write+0x2f4>)
 8017cf2:	4852      	ldr	r0, [pc, #328]	; (8017e3c <tcp_write+0x2e4>)
 8017cf4:	f005 f9de 	bl	801d0b4 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8017cf8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017cfc:	88fb      	ldrh	r3, [r7, #6]
 8017cfe:	429a      	cmp	r2, r3
 8017d00:	f080 8167 	bcs.w	8017fd2 <tcp_write+0x47a>
 8017d04:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	f000 8163 	beq.w	8017fd2 <tcp_write+0x47a>
 8017d0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d0e:	891b      	ldrh	r3, [r3, #8]
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	f000 815e 	beq.w	8017fd2 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8017d16:	88fa      	ldrh	r2, [r7, #6]
 8017d18:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017d1c:	1ad2      	subs	r2, r2, r3
 8017d1e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017d20:	4293      	cmp	r3, r2
 8017d22:	bfa8      	it	ge
 8017d24:	4613      	movge	r3, r2
 8017d26:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8017d28:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d2a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017d2c:	797b      	ldrb	r3, [r7, #5]
 8017d2e:	f003 0301 	and.w	r3, r3, #1
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d027      	beq.n	8017d86 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8017d36:	f107 0012 	add.w	r0, r7, #18
 8017d3a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017d3c:	8bf9      	ldrh	r1, [r7, #30]
 8017d3e:	2301      	movs	r3, #1
 8017d40:	9302      	str	r3, [sp, #8]
 8017d42:	797b      	ldrb	r3, [r7, #5]
 8017d44:	9301      	str	r3, [sp, #4]
 8017d46:	68fb      	ldr	r3, [r7, #12]
 8017d48:	9300      	str	r3, [sp, #0]
 8017d4a:	4603      	mov	r3, r0
 8017d4c:	2000      	movs	r0, #0
 8017d4e:	f7ff fe0f 	bl	8017970 <tcp_pbuf_prealloc>
 8017d52:	6578      	str	r0, [r7, #84]	; 0x54
 8017d54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	f000 8225 	beq.w	80181a6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8017d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017d5e:	6858      	ldr	r0, [r3, #4]
 8017d60:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017d64:	68ba      	ldr	r2, [r7, #8]
 8017d66:	4413      	add	r3, r2
 8017d68:	8bfa      	ldrh	r2, [r7, #30]
 8017d6a:	4619      	mov	r1, r3
 8017d6c:	f005 f892 	bl	801ce94 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8017d70:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017d72:	f7fb fa79 	bl	8013268 <pbuf_clen>
 8017d76:	4603      	mov	r3, r0
 8017d78:	461a      	mov	r2, r3
 8017d7a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017d7e:	4413      	add	r3, r2
 8017d80:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8017d84:	e041      	b.n	8017e0a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8017d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d88:	685b      	ldr	r3, [r3, #4]
 8017d8a:	637b      	str	r3, [r7, #52]	; 0x34
 8017d8c:	e002      	b.n	8017d94 <tcp_write+0x23c>
 8017d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d90:	681b      	ldr	r3, [r3, #0]
 8017d92:	637b      	str	r3, [r7, #52]	; 0x34
 8017d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d96:	681b      	ldr	r3, [r3, #0]
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	d1f8      	bne.n	8017d8e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017d9e:	7b1b      	ldrb	r3, [r3, #12]
 8017da0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d115      	bne.n	8017dd4 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8017da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017daa:	685b      	ldr	r3, [r3, #4]
 8017dac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017dae:	8952      	ldrh	r2, [r2, #10]
 8017db0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8017db2:	68ba      	ldr	r2, [r7, #8]
 8017db4:	429a      	cmp	r2, r3
 8017db6:	d10d      	bne.n	8017dd4 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8017db8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017dbc:	2b00      	cmp	r3, #0
 8017dbe:	d006      	beq.n	8017dce <tcp_write+0x276>
 8017dc0:	4b1c      	ldr	r3, [pc, #112]	; (8017e34 <tcp_write+0x2dc>)
 8017dc2:	f240 2231 	movw	r2, #561	; 0x231
 8017dc6:	4922      	ldr	r1, [pc, #136]	; (8017e50 <tcp_write+0x2f8>)
 8017dc8:	481c      	ldr	r0, [pc, #112]	; (8017e3c <tcp_write+0x2e4>)
 8017dca:	f005 f973 	bl	801d0b4 <iprintf>
          extendlen = seglen;
 8017dce:	8bfb      	ldrh	r3, [r7, #30]
 8017dd0:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8017dd2:	e01a      	b.n	8017e0a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8017dd4:	8bfb      	ldrh	r3, [r7, #30]
 8017dd6:	2201      	movs	r2, #1
 8017dd8:	4619      	mov	r1, r3
 8017dda:	2000      	movs	r0, #0
 8017ddc:	f7fa fed2 	bl	8012b84 <pbuf_alloc>
 8017de0:	6578      	str	r0, [r7, #84]	; 0x54
 8017de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017de4:	2b00      	cmp	r3, #0
 8017de6:	f000 81e0 	beq.w	80181aa <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8017dea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017dee:	68ba      	ldr	r2, [r7, #8]
 8017df0:	441a      	add	r2, r3
 8017df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017df4:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8017df6:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8017df8:	f7fb fa36 	bl	8013268 <pbuf_clen>
 8017dfc:	4603      	mov	r3, r0
 8017dfe:	461a      	mov	r2, r3
 8017e00:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017e04:	4413      	add	r3, r2
 8017e06:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8017e0a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017e0e:	8bfb      	ldrh	r3, [r7, #30]
 8017e10:	4413      	add	r3, r2
 8017e12:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8017e16:	e0dc      	b.n	8017fd2 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8017e18:	68fb      	ldr	r3, [r7, #12]
 8017e1a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017e1e:	2b00      	cmp	r3, #0
 8017e20:	f000 80d7 	beq.w	8017fd2 <tcp_write+0x47a>
 8017e24:	4b03      	ldr	r3, [pc, #12]	; (8017e34 <tcp_write+0x2dc>)
 8017e26:	f240 224a 	movw	r2, #586	; 0x24a
 8017e2a:	490a      	ldr	r1, [pc, #40]	; (8017e54 <tcp_write+0x2fc>)
 8017e2c:	4803      	ldr	r0, [pc, #12]	; (8017e3c <tcp_write+0x2e4>)
 8017e2e:	f005 f941 	bl	801d0b4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8017e32:	e0ce      	b.n	8017fd2 <tcp_write+0x47a>
 8017e34:	0802089c 	.word	0x0802089c
 8017e38:	08020a3c 	.word	0x08020a3c
 8017e3c:	080208f0 	.word	0x080208f0
 8017e40:	08020a54 	.word	0x08020a54
 8017e44:	08020a88 	.word	0x08020a88
 8017e48:	08020aa0 	.word	0x08020aa0
 8017e4c:	08020ac0 	.word	0x08020ac0
 8017e50:	08020ae0 	.word	0x08020ae0
 8017e54:	08020b0c 	.word	0x08020b0c
    struct pbuf *p;
    u16_t left = len - pos;
 8017e58:	88fa      	ldrh	r2, [r7, #6]
 8017e5a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017e5e:	1ad3      	subs	r3, r2, r3
 8017e60:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8017e62:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017e66:	b29b      	uxth	r3, r3
 8017e68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017e6a:	1ad3      	subs	r3, r2, r3
 8017e6c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8017e6e:	8b7a      	ldrh	r2, [r7, #26]
 8017e70:	8bbb      	ldrh	r3, [r7, #28]
 8017e72:	4293      	cmp	r3, r2
 8017e74:	bf28      	it	cs
 8017e76:	4613      	movcs	r3, r2
 8017e78:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8017e7a:	797b      	ldrb	r3, [r7, #5]
 8017e7c:	f003 0301 	and.w	r3, r3, #1
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d036      	beq.n	8017ef2 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8017e84:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017e88:	b29a      	uxth	r2, r3
 8017e8a:	8b3b      	ldrh	r3, [r7, #24]
 8017e8c:	4413      	add	r3, r2
 8017e8e:	b299      	uxth	r1, r3
 8017e90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017e92:	2b00      	cmp	r3, #0
 8017e94:	bf0c      	ite	eq
 8017e96:	2301      	moveq	r3, #1
 8017e98:	2300      	movne	r3, #0
 8017e9a:	b2db      	uxtb	r3, r3
 8017e9c:	f107 0012 	add.w	r0, r7, #18
 8017ea0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017ea2:	9302      	str	r3, [sp, #8]
 8017ea4:	797b      	ldrb	r3, [r7, #5]
 8017ea6:	9301      	str	r3, [sp, #4]
 8017ea8:	68fb      	ldr	r3, [r7, #12]
 8017eaa:	9300      	str	r3, [sp, #0]
 8017eac:	4603      	mov	r3, r0
 8017eae:	2036      	movs	r0, #54	; 0x36
 8017eb0:	f7ff fd5e 	bl	8017970 <tcp_pbuf_prealloc>
 8017eb4:	6338      	str	r0, [r7, #48]	; 0x30
 8017eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	f000 8178 	beq.w	80181ae <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8017ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ec0:	895b      	ldrh	r3, [r3, #10]
 8017ec2:	8b3a      	ldrh	r2, [r7, #24]
 8017ec4:	429a      	cmp	r2, r3
 8017ec6:	d906      	bls.n	8017ed6 <tcp_write+0x37e>
 8017ec8:	4b8c      	ldr	r3, [pc, #560]	; (80180fc <tcp_write+0x5a4>)
 8017eca:	f240 2266 	movw	r2, #614	; 0x266
 8017ece:	498c      	ldr	r1, [pc, #560]	; (8018100 <tcp_write+0x5a8>)
 8017ed0:	488c      	ldr	r0, [pc, #560]	; (8018104 <tcp_write+0x5ac>)
 8017ed2:	f005 f8ef 	bl	801d0b4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8017ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017ed8:	685a      	ldr	r2, [r3, #4]
 8017eda:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017ede:	18d0      	adds	r0, r2, r3
 8017ee0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017ee4:	68ba      	ldr	r2, [r7, #8]
 8017ee6:	4413      	add	r3, r2
 8017ee8:	8b3a      	ldrh	r2, [r7, #24]
 8017eea:	4619      	mov	r1, r3
 8017eec:	f004 ffd2 	bl	801ce94 <memcpy>
 8017ef0:	e02f      	b.n	8017f52 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8017ef2:	8a7b      	ldrh	r3, [r7, #18]
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	d006      	beq.n	8017f06 <tcp_write+0x3ae>
 8017ef8:	4b80      	ldr	r3, [pc, #512]	; (80180fc <tcp_write+0x5a4>)
 8017efa:	f240 2271 	movw	r2, #625	; 0x271
 8017efe:	4982      	ldr	r1, [pc, #520]	; (8018108 <tcp_write+0x5b0>)
 8017f00:	4880      	ldr	r0, [pc, #512]	; (8018104 <tcp_write+0x5ac>)
 8017f02:	f005 f8d7 	bl	801d0b4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8017f06:	8b3b      	ldrh	r3, [r7, #24]
 8017f08:	2201      	movs	r2, #1
 8017f0a:	4619      	mov	r1, r3
 8017f0c:	2036      	movs	r0, #54	; 0x36
 8017f0e:	f7fa fe39 	bl	8012b84 <pbuf_alloc>
 8017f12:	6178      	str	r0, [r7, #20]
 8017f14:	697b      	ldr	r3, [r7, #20]
 8017f16:	2b00      	cmp	r3, #0
 8017f18:	f000 814b 	beq.w	80181b2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8017f1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017f20:	68ba      	ldr	r2, [r7, #8]
 8017f22:	441a      	add	r2, r3
 8017f24:	697b      	ldr	r3, [r7, #20]
 8017f26:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8017f28:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8017f2c:	b29b      	uxth	r3, r3
 8017f2e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017f32:	4619      	mov	r1, r3
 8017f34:	2036      	movs	r0, #54	; 0x36
 8017f36:	f7fa fe25 	bl	8012b84 <pbuf_alloc>
 8017f3a:	6338      	str	r0, [r7, #48]	; 0x30
 8017f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017f3e:	2b00      	cmp	r3, #0
 8017f40:	d103      	bne.n	8017f4a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8017f42:	6978      	ldr	r0, [r7, #20]
 8017f44:	f7fb f902 	bl	801314c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8017f48:	e136      	b.n	80181b8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8017f4a:	6979      	ldr	r1, [r7, #20]
 8017f4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017f4e:	f7fb f9cb 	bl	80132e8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8017f52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017f54:	f7fb f988 	bl	8013268 <pbuf_clen>
 8017f58:	4603      	mov	r3, r0
 8017f5a:	461a      	mov	r2, r3
 8017f5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017f60:	4413      	add	r3, r2
 8017f62:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8017f66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017f6a:	2b09      	cmp	r3, #9
 8017f6c:	d903      	bls.n	8017f76 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8017f6e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017f70:	f7fb f8ec 	bl	801314c <pbuf_free>
      goto memerr;
 8017f74:	e120      	b.n	80181b8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8017f76:	68fb      	ldr	r3, [r7, #12]
 8017f78:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8017f7a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017f7e:	441a      	add	r2, r3
 8017f80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017f84:	9300      	str	r3, [sp, #0]
 8017f86:	4613      	mov	r3, r2
 8017f88:	2200      	movs	r2, #0
 8017f8a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8017f8c:	68f8      	ldr	r0, [r7, #12]
 8017f8e:	f7ff fc51 	bl	8017834 <tcp_create_segment>
 8017f92:	64f8      	str	r0, [r7, #76]	; 0x4c
 8017f94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	f000 810d 	beq.w	80181b6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8017f9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017f9e:	2b00      	cmp	r3, #0
 8017fa0:	d102      	bne.n	8017fa8 <tcp_write+0x450>
      queue = seg;
 8017fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017fa4:	647b      	str	r3, [r7, #68]	; 0x44
 8017fa6:	e00c      	b.n	8017fc2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8017fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d106      	bne.n	8017fbc <tcp_write+0x464>
 8017fae:	4b53      	ldr	r3, [pc, #332]	; (80180fc <tcp_write+0x5a4>)
 8017fb0:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017fb4:	4955      	ldr	r1, [pc, #340]	; (801810c <tcp_write+0x5b4>)
 8017fb6:	4853      	ldr	r0, [pc, #332]	; (8018104 <tcp_write+0x5ac>)
 8017fb8:	f005 f87c 	bl	801d0b4 <iprintf>
      prev_seg->next = seg;
 8017fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017fbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017fc0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8017fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017fc4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8017fc6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017fca:	8b3b      	ldrh	r3, [r7, #24]
 8017fcc:	4413      	add	r3, r2
 8017fce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8017fd2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017fd6:	88fb      	ldrh	r3, [r7, #6]
 8017fd8:	429a      	cmp	r2, r3
 8017fda:	f4ff af3d 	bcc.w	8017e58 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8017fde:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017fe0:	2b00      	cmp	r3, #0
 8017fe2:	d02c      	beq.n	801803e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8017fe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017fe6:	685b      	ldr	r3, [r3, #4]
 8017fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017fea:	e01e      	b.n	801802a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8017fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017fee:	891a      	ldrh	r2, [r3, #8]
 8017ff0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017ff2:	4413      	add	r3, r2
 8017ff4:	b29a      	uxth	r2, r3
 8017ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ff8:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8017ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017ffc:	681b      	ldr	r3, [r3, #0]
 8017ffe:	2b00      	cmp	r3, #0
 8018000:	d110      	bne.n	8018024 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8018002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018004:	685b      	ldr	r3, [r3, #4]
 8018006:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018008:	8952      	ldrh	r2, [r2, #10]
 801800a:	4413      	add	r3, r2
 801800c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801800e:	68b9      	ldr	r1, [r7, #8]
 8018010:	4618      	mov	r0, r3
 8018012:	f004 ff3f 	bl	801ce94 <memcpy>
        p->len += oversize_used;
 8018016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018018:	895a      	ldrh	r2, [r3, #10]
 801801a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801801c:	4413      	add	r3, r2
 801801e:	b29a      	uxth	r2, r3
 8018020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018022:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8018024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018026:	681b      	ldr	r3, [r3, #0]
 8018028:	62fb      	str	r3, [r7, #44]	; 0x2c
 801802a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801802c:	2b00      	cmp	r3, #0
 801802e:	d1dd      	bne.n	8017fec <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8018030:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018032:	891a      	ldrh	r2, [r3, #8]
 8018034:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8018036:	4413      	add	r3, r2
 8018038:	b29a      	uxth	r2, r3
 801803a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801803c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801803e:	8a7a      	ldrh	r2, [r7, #18]
 8018040:	68fb      	ldr	r3, [r7, #12]
 8018042:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8018046:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018048:	2b00      	cmp	r3, #0
 801804a:	d018      	beq.n	801807e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801804c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801804e:	2b00      	cmp	r3, #0
 8018050:	d106      	bne.n	8018060 <tcp_write+0x508>
 8018052:	4b2a      	ldr	r3, [pc, #168]	; (80180fc <tcp_write+0x5a4>)
 8018054:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8018058:	492d      	ldr	r1, [pc, #180]	; (8018110 <tcp_write+0x5b8>)
 801805a:	482a      	ldr	r0, [pc, #168]	; (8018104 <tcp_write+0x5ac>)
 801805c:	f005 f82a 	bl	801d0b4 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8018060:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018062:	685b      	ldr	r3, [r3, #4]
 8018064:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8018066:	4618      	mov	r0, r3
 8018068:	f7fb f93e 	bl	80132e8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801806c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801806e:	891a      	ldrh	r2, [r3, #8]
 8018070:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018072:	891b      	ldrh	r3, [r3, #8]
 8018074:	4413      	add	r3, r2
 8018076:	b29a      	uxth	r2, r3
 8018078:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801807a:	811a      	strh	r2, [r3, #8]
 801807c:	e037      	b.n	80180ee <tcp_write+0x596>
  } else if (extendlen > 0) {
 801807e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8018080:	2b00      	cmp	r3, #0
 8018082:	d034      	beq.n	80180ee <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8018084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018086:	2b00      	cmp	r3, #0
 8018088:	d003      	beq.n	8018092 <tcp_write+0x53a>
 801808a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801808c:	685b      	ldr	r3, [r3, #4]
 801808e:	2b00      	cmp	r3, #0
 8018090:	d106      	bne.n	80180a0 <tcp_write+0x548>
 8018092:	4b1a      	ldr	r3, [pc, #104]	; (80180fc <tcp_write+0x5a4>)
 8018094:	f240 22e6 	movw	r2, #742	; 0x2e6
 8018098:	491e      	ldr	r1, [pc, #120]	; (8018114 <tcp_write+0x5bc>)
 801809a:	481a      	ldr	r0, [pc, #104]	; (8018104 <tcp_write+0x5ac>)
 801809c:	f005 f80a 	bl	801d0b4 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80180a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80180a2:	685b      	ldr	r3, [r3, #4]
 80180a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80180a6:	e009      	b.n	80180bc <tcp_write+0x564>
      p->tot_len += extendlen;
 80180a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180aa:	891a      	ldrh	r2, [r3, #8]
 80180ac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80180ae:	4413      	add	r3, r2
 80180b0:	b29a      	uxth	r2, r3
 80180b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180b4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80180b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180b8:	681b      	ldr	r3, [r3, #0]
 80180ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80180bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	2b00      	cmp	r3, #0
 80180c2:	d1f1      	bne.n	80180a8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80180c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180c6:	891a      	ldrh	r2, [r3, #8]
 80180c8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80180ca:	4413      	add	r3, r2
 80180cc:	b29a      	uxth	r2, r3
 80180ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180d0:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80180d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180d4:	895a      	ldrh	r2, [r3, #10]
 80180d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80180d8:	4413      	add	r3, r2
 80180da:	b29a      	uxth	r2, r3
 80180dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180de:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 80180e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80180e2:	891a      	ldrh	r2, [r3, #8]
 80180e4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80180e6:	4413      	add	r3, r2
 80180e8:	b29a      	uxth	r2, r3
 80180ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80180ec:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 80180ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	d111      	bne.n	8018118 <tcp_write+0x5c0>
    pcb->unsent = queue;
 80180f4:	68fb      	ldr	r3, [r7, #12]
 80180f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80180f8:	66da      	str	r2, [r3, #108]	; 0x6c
 80180fa:	e010      	b.n	801811e <tcp_write+0x5c6>
 80180fc:	0802089c 	.word	0x0802089c
 8018100:	08020b3c 	.word	0x08020b3c
 8018104:	080208f0 	.word	0x080208f0
 8018108:	08020b7c 	.word	0x08020b7c
 801810c:	08020b8c 	.word	0x08020b8c
 8018110:	08020ba0 	.word	0x08020ba0
 8018114:	08020bd8 	.word	0x08020bd8
  } else {
    last_unsent->next = queue;
 8018118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801811a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801811c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801811e:	68fb      	ldr	r3, [r7, #12]
 8018120:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8018122:	88fb      	ldrh	r3, [r7, #6]
 8018124:	441a      	add	r2, r3
 8018126:	68fb      	ldr	r3, [r7, #12]
 8018128:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801812a:	68fb      	ldr	r3, [r7, #12]
 801812c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8018130:	88fb      	ldrh	r3, [r7, #6]
 8018132:	1ad3      	subs	r3, r2, r3
 8018134:	b29a      	uxth	r2, r3
 8018136:	68fb      	ldr	r3, [r7, #12]
 8018138:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801813c:	68fb      	ldr	r3, [r7, #12]
 801813e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8018142:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8018146:	68fb      	ldr	r3, [r7, #12]
 8018148:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801814c:	2b00      	cmp	r3, #0
 801814e:	d00e      	beq.n	801816e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8018150:	68fb      	ldr	r3, [r7, #12]
 8018152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018154:	2b00      	cmp	r3, #0
 8018156:	d10a      	bne.n	801816e <tcp_write+0x616>
 8018158:	68fb      	ldr	r3, [r7, #12]
 801815a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801815c:	2b00      	cmp	r3, #0
 801815e:	d106      	bne.n	801816e <tcp_write+0x616>
 8018160:	4b2c      	ldr	r3, [pc, #176]	; (8018214 <tcp_write+0x6bc>)
 8018162:	f240 3212 	movw	r2, #786	; 0x312
 8018166:	492c      	ldr	r1, [pc, #176]	; (8018218 <tcp_write+0x6c0>)
 8018168:	482c      	ldr	r0, [pc, #176]	; (801821c <tcp_write+0x6c4>)
 801816a:	f004 ffa3 	bl	801d0b4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801816e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018170:	2b00      	cmp	r3, #0
 8018172:	d016      	beq.n	80181a2 <tcp_write+0x64a>
 8018174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018176:	68db      	ldr	r3, [r3, #12]
 8018178:	2b00      	cmp	r3, #0
 801817a:	d012      	beq.n	80181a2 <tcp_write+0x64a>
 801817c:	797b      	ldrb	r3, [r7, #5]
 801817e:	f003 0302 	and.w	r3, r3, #2
 8018182:	2b00      	cmp	r3, #0
 8018184:	d10d      	bne.n	80181a2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8018186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018188:	68db      	ldr	r3, [r3, #12]
 801818a:	899b      	ldrh	r3, [r3, #12]
 801818c:	b29c      	uxth	r4, r3
 801818e:	2008      	movs	r0, #8
 8018190:	f7f9 fc94 	bl	8011abc <lwip_htons>
 8018194:	4603      	mov	r3, r0
 8018196:	461a      	mov	r2, r3
 8018198:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801819a:	68db      	ldr	r3, [r3, #12]
 801819c:	4322      	orrs	r2, r4
 801819e:	b292      	uxth	r2, r2
 80181a0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80181a2:	2300      	movs	r3, #0
 80181a4:	e031      	b.n	801820a <tcp_write+0x6b2>
          goto memerr;
 80181a6:	bf00      	nop
 80181a8:	e006      	b.n	80181b8 <tcp_write+0x660>
            goto memerr;
 80181aa:	bf00      	nop
 80181ac:	e004      	b.n	80181b8 <tcp_write+0x660>
        goto memerr;
 80181ae:	bf00      	nop
 80181b0:	e002      	b.n	80181b8 <tcp_write+0x660>
        goto memerr;
 80181b2:	bf00      	nop
 80181b4:	e000      	b.n	80181b8 <tcp_write+0x660>
      goto memerr;
 80181b6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80181b8:	68fb      	ldr	r3, [r7, #12]
 80181ba:	8b5b      	ldrh	r3, [r3, #26]
 80181bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80181c0:	b29a      	uxth	r2, r3
 80181c2:	68fb      	ldr	r3, [r7, #12]
 80181c4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80181c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80181c8:	2b00      	cmp	r3, #0
 80181ca:	d002      	beq.n	80181d2 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80181cc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80181ce:	f7fa ffbd 	bl	801314c <pbuf_free>
  }
  if (queue != NULL) {
 80181d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181d4:	2b00      	cmp	r3, #0
 80181d6:	d002      	beq.n	80181de <tcp_write+0x686>
    tcp_segs_free(queue);
 80181d8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80181da:	f7fc fb6b 	bl	80148b4 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 80181de:	68fb      	ldr	r3, [r7, #12]
 80181e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80181e4:	2b00      	cmp	r3, #0
 80181e6:	d00e      	beq.n	8018206 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 80181e8:	68fb      	ldr	r3, [r7, #12]
 80181ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80181ec:	2b00      	cmp	r3, #0
 80181ee:	d10a      	bne.n	8018206 <tcp_write+0x6ae>
 80181f0:	68fb      	ldr	r3, [r7, #12]
 80181f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80181f4:	2b00      	cmp	r3, #0
 80181f6:	d106      	bne.n	8018206 <tcp_write+0x6ae>
 80181f8:	4b06      	ldr	r3, [pc, #24]	; (8018214 <tcp_write+0x6bc>)
 80181fa:	f240 3227 	movw	r2, #807	; 0x327
 80181fe:	4906      	ldr	r1, [pc, #24]	; (8018218 <tcp_write+0x6c0>)
 8018200:	4806      	ldr	r0, [pc, #24]	; (801821c <tcp_write+0x6c4>)
 8018202:	f004 ff57 	bl	801d0b4 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8018206:	f04f 33ff 	mov.w	r3, #4294967295
}
 801820a:	4618      	mov	r0, r3
 801820c:	375c      	adds	r7, #92	; 0x5c
 801820e:	46bd      	mov	sp, r7
 8018210:	bd90      	pop	{r4, r7, pc}
 8018212:	bf00      	nop
 8018214:	0802089c 	.word	0x0802089c
 8018218:	08020c10 	.word	0x08020c10
 801821c:	080208f0 	.word	0x080208f0

08018220 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8018220:	b590      	push	{r4, r7, lr}
 8018222:	b08b      	sub	sp, #44	; 0x2c
 8018224:	af02      	add	r7, sp, #8
 8018226:	6078      	str	r0, [r7, #4]
 8018228:	460b      	mov	r3, r1
 801822a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801822c:	2300      	movs	r3, #0
 801822e:	61fb      	str	r3, [r7, #28]
 8018230:	2300      	movs	r3, #0
 8018232:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8018234:	2300      	movs	r3, #0
 8018236:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	2b00      	cmp	r3, #0
 801823c:	d106      	bne.n	801824c <tcp_split_unsent_seg+0x2c>
 801823e:	4b95      	ldr	r3, [pc, #596]	; (8018494 <tcp_split_unsent_seg+0x274>)
 8018240:	f240 324b 	movw	r2, #843	; 0x34b
 8018244:	4994      	ldr	r1, [pc, #592]	; (8018498 <tcp_split_unsent_seg+0x278>)
 8018246:	4895      	ldr	r0, [pc, #596]	; (801849c <tcp_split_unsent_seg+0x27c>)
 8018248:	f004 ff34 	bl	801d0b4 <iprintf>

  useg = pcb->unsent;
 801824c:	687b      	ldr	r3, [r7, #4]
 801824e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018250:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8018252:	697b      	ldr	r3, [r7, #20]
 8018254:	2b00      	cmp	r3, #0
 8018256:	d102      	bne.n	801825e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8018258:	f04f 33ff 	mov.w	r3, #4294967295
 801825c:	e116      	b.n	801848c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801825e:	887b      	ldrh	r3, [r7, #2]
 8018260:	2b00      	cmp	r3, #0
 8018262:	d109      	bne.n	8018278 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8018264:	4b8b      	ldr	r3, [pc, #556]	; (8018494 <tcp_split_unsent_seg+0x274>)
 8018266:	f240 3253 	movw	r2, #851	; 0x353
 801826a:	498d      	ldr	r1, [pc, #564]	; (80184a0 <tcp_split_unsent_seg+0x280>)
 801826c:	488b      	ldr	r0, [pc, #556]	; (801849c <tcp_split_unsent_seg+0x27c>)
 801826e:	f004 ff21 	bl	801d0b4 <iprintf>
    return ERR_VAL;
 8018272:	f06f 0305 	mvn.w	r3, #5
 8018276:	e109      	b.n	801848c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8018278:	697b      	ldr	r3, [r7, #20]
 801827a:	891b      	ldrh	r3, [r3, #8]
 801827c:	887a      	ldrh	r2, [r7, #2]
 801827e:	429a      	cmp	r2, r3
 8018280:	d301      	bcc.n	8018286 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8018282:	2300      	movs	r3, #0
 8018284:	e102      	b.n	801848c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8018286:	687b      	ldr	r3, [r7, #4]
 8018288:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801828a:	887a      	ldrh	r2, [r7, #2]
 801828c:	429a      	cmp	r2, r3
 801828e:	d906      	bls.n	801829e <tcp_split_unsent_seg+0x7e>
 8018290:	4b80      	ldr	r3, [pc, #512]	; (8018494 <tcp_split_unsent_seg+0x274>)
 8018292:	f240 325b 	movw	r2, #859	; 0x35b
 8018296:	4983      	ldr	r1, [pc, #524]	; (80184a4 <tcp_split_unsent_seg+0x284>)
 8018298:	4880      	ldr	r0, [pc, #512]	; (801849c <tcp_split_unsent_seg+0x27c>)
 801829a:	f004 ff0b 	bl	801d0b4 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801829e:	697b      	ldr	r3, [r7, #20]
 80182a0:	891b      	ldrh	r3, [r3, #8]
 80182a2:	2b00      	cmp	r3, #0
 80182a4:	d106      	bne.n	80182b4 <tcp_split_unsent_seg+0x94>
 80182a6:	4b7b      	ldr	r3, [pc, #492]	; (8018494 <tcp_split_unsent_seg+0x274>)
 80182a8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80182ac:	497e      	ldr	r1, [pc, #504]	; (80184a8 <tcp_split_unsent_seg+0x288>)
 80182ae:	487b      	ldr	r0, [pc, #492]	; (801849c <tcp_split_unsent_seg+0x27c>)
 80182b0:	f004 ff00 	bl	801d0b4 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80182b4:	697b      	ldr	r3, [r7, #20]
 80182b6:	7a9b      	ldrb	r3, [r3, #10]
 80182b8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80182ba:	7bfb      	ldrb	r3, [r7, #15]
 80182bc:	009b      	lsls	r3, r3, #2
 80182be:	b2db      	uxtb	r3, r3
 80182c0:	f003 0304 	and.w	r3, r3, #4
 80182c4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80182c6:	697b      	ldr	r3, [r7, #20]
 80182c8:	891a      	ldrh	r2, [r3, #8]
 80182ca:	887b      	ldrh	r3, [r7, #2]
 80182cc:	1ad3      	subs	r3, r2, r3
 80182ce:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80182d0:	7bbb      	ldrb	r3, [r7, #14]
 80182d2:	b29a      	uxth	r2, r3
 80182d4:	89bb      	ldrh	r3, [r7, #12]
 80182d6:	4413      	add	r3, r2
 80182d8:	b29b      	uxth	r3, r3
 80182da:	f44f 7220 	mov.w	r2, #640	; 0x280
 80182de:	4619      	mov	r1, r3
 80182e0:	2036      	movs	r0, #54	; 0x36
 80182e2:	f7fa fc4f 	bl	8012b84 <pbuf_alloc>
 80182e6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80182e8:	693b      	ldr	r3, [r7, #16]
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	f000 80b7 	beq.w	801845e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80182f0:	697b      	ldr	r3, [r7, #20]
 80182f2:	685b      	ldr	r3, [r3, #4]
 80182f4:	891a      	ldrh	r2, [r3, #8]
 80182f6:	697b      	ldr	r3, [r7, #20]
 80182f8:	891b      	ldrh	r3, [r3, #8]
 80182fa:	1ad3      	subs	r3, r2, r3
 80182fc:	b29a      	uxth	r2, r3
 80182fe:	887b      	ldrh	r3, [r7, #2]
 8018300:	4413      	add	r3, r2
 8018302:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8018304:	697b      	ldr	r3, [r7, #20]
 8018306:	6858      	ldr	r0, [r3, #4]
 8018308:	693b      	ldr	r3, [r7, #16]
 801830a:	685a      	ldr	r2, [r3, #4]
 801830c:	7bbb      	ldrb	r3, [r7, #14]
 801830e:	18d1      	adds	r1, r2, r3
 8018310:	897b      	ldrh	r3, [r7, #10]
 8018312:	89ba      	ldrh	r2, [r7, #12]
 8018314:	f7fb f920 	bl	8013558 <pbuf_copy_partial>
 8018318:	4603      	mov	r3, r0
 801831a:	461a      	mov	r2, r3
 801831c:	89bb      	ldrh	r3, [r7, #12]
 801831e:	4293      	cmp	r3, r2
 8018320:	f040 809f 	bne.w	8018462 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8018324:	697b      	ldr	r3, [r7, #20]
 8018326:	68db      	ldr	r3, [r3, #12]
 8018328:	899b      	ldrh	r3, [r3, #12]
 801832a:	b29b      	uxth	r3, r3
 801832c:	4618      	mov	r0, r3
 801832e:	f7f9 fbc5 	bl	8011abc <lwip_htons>
 8018332:	4603      	mov	r3, r0
 8018334:	b2db      	uxtb	r3, r3
 8018336:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801833a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801833c:	2300      	movs	r3, #0
 801833e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8018340:	7efb      	ldrb	r3, [r7, #27]
 8018342:	f003 0308 	and.w	r3, r3, #8
 8018346:	2b00      	cmp	r3, #0
 8018348:	d007      	beq.n	801835a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801834a:	7efb      	ldrb	r3, [r7, #27]
 801834c:	f023 0308 	bic.w	r3, r3, #8
 8018350:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8018352:	7ebb      	ldrb	r3, [r7, #26]
 8018354:	f043 0308 	orr.w	r3, r3, #8
 8018358:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801835a:	7efb      	ldrb	r3, [r7, #27]
 801835c:	f003 0301 	and.w	r3, r3, #1
 8018360:	2b00      	cmp	r3, #0
 8018362:	d007      	beq.n	8018374 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8018364:	7efb      	ldrb	r3, [r7, #27]
 8018366:	f023 0301 	bic.w	r3, r3, #1
 801836a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801836c:	7ebb      	ldrb	r3, [r7, #26]
 801836e:	f043 0301 	orr.w	r3, r3, #1
 8018372:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8018374:	697b      	ldr	r3, [r7, #20]
 8018376:	68db      	ldr	r3, [r3, #12]
 8018378:	685b      	ldr	r3, [r3, #4]
 801837a:	4618      	mov	r0, r3
 801837c:	f7f9 fbb3 	bl	8011ae6 <lwip_htonl>
 8018380:	4602      	mov	r2, r0
 8018382:	887b      	ldrh	r3, [r7, #2]
 8018384:	18d1      	adds	r1, r2, r3
 8018386:	7eba      	ldrb	r2, [r7, #26]
 8018388:	7bfb      	ldrb	r3, [r7, #15]
 801838a:	9300      	str	r3, [sp, #0]
 801838c:	460b      	mov	r3, r1
 801838e:	6939      	ldr	r1, [r7, #16]
 8018390:	6878      	ldr	r0, [r7, #4]
 8018392:	f7ff fa4f 	bl	8017834 <tcp_create_segment>
 8018396:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8018398:	69fb      	ldr	r3, [r7, #28]
 801839a:	2b00      	cmp	r3, #0
 801839c:	d063      	beq.n	8018466 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801839e:	697b      	ldr	r3, [r7, #20]
 80183a0:	685b      	ldr	r3, [r3, #4]
 80183a2:	4618      	mov	r0, r3
 80183a4:	f7fa ff60 	bl	8013268 <pbuf_clen>
 80183a8:	4603      	mov	r3, r0
 80183aa:	461a      	mov	r2, r3
 80183ac:	687b      	ldr	r3, [r7, #4]
 80183ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80183b2:	1a9b      	subs	r3, r3, r2
 80183b4:	b29a      	uxth	r2, r3
 80183b6:	687b      	ldr	r3, [r7, #4]
 80183b8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80183bc:	697b      	ldr	r3, [r7, #20]
 80183be:	6858      	ldr	r0, [r3, #4]
 80183c0:	697b      	ldr	r3, [r7, #20]
 80183c2:	685b      	ldr	r3, [r3, #4]
 80183c4:	891a      	ldrh	r2, [r3, #8]
 80183c6:	89bb      	ldrh	r3, [r7, #12]
 80183c8:	1ad3      	subs	r3, r2, r3
 80183ca:	b29b      	uxth	r3, r3
 80183cc:	4619      	mov	r1, r3
 80183ce:	f7fa fd37 	bl	8012e40 <pbuf_realloc>
  useg->len -= remainder;
 80183d2:	697b      	ldr	r3, [r7, #20]
 80183d4:	891a      	ldrh	r2, [r3, #8]
 80183d6:	89bb      	ldrh	r3, [r7, #12]
 80183d8:	1ad3      	subs	r3, r2, r3
 80183da:	b29a      	uxth	r2, r3
 80183dc:	697b      	ldr	r3, [r7, #20]
 80183de:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80183e0:	697b      	ldr	r3, [r7, #20]
 80183e2:	68db      	ldr	r3, [r3, #12]
 80183e4:	899b      	ldrh	r3, [r3, #12]
 80183e6:	b29c      	uxth	r4, r3
 80183e8:	7efb      	ldrb	r3, [r7, #27]
 80183ea:	b29b      	uxth	r3, r3
 80183ec:	4618      	mov	r0, r3
 80183ee:	f7f9 fb65 	bl	8011abc <lwip_htons>
 80183f2:	4603      	mov	r3, r0
 80183f4:	461a      	mov	r2, r3
 80183f6:	697b      	ldr	r3, [r7, #20]
 80183f8:	68db      	ldr	r3, [r3, #12]
 80183fa:	4322      	orrs	r2, r4
 80183fc:	b292      	uxth	r2, r2
 80183fe:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8018400:	697b      	ldr	r3, [r7, #20]
 8018402:	685b      	ldr	r3, [r3, #4]
 8018404:	4618      	mov	r0, r3
 8018406:	f7fa ff2f 	bl	8013268 <pbuf_clen>
 801840a:	4603      	mov	r3, r0
 801840c:	461a      	mov	r2, r3
 801840e:	687b      	ldr	r3, [r7, #4]
 8018410:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018414:	4413      	add	r3, r2
 8018416:	b29a      	uxth	r2, r3
 8018418:	687b      	ldr	r3, [r7, #4]
 801841a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801841e:	69fb      	ldr	r3, [r7, #28]
 8018420:	685b      	ldr	r3, [r3, #4]
 8018422:	4618      	mov	r0, r3
 8018424:	f7fa ff20 	bl	8013268 <pbuf_clen>
 8018428:	4603      	mov	r3, r0
 801842a:	461a      	mov	r2, r3
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018432:	4413      	add	r3, r2
 8018434:	b29a      	uxth	r2, r3
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801843c:	697b      	ldr	r3, [r7, #20]
 801843e:	681a      	ldr	r2, [r3, #0]
 8018440:	69fb      	ldr	r3, [r7, #28]
 8018442:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8018444:	697b      	ldr	r3, [r7, #20]
 8018446:	69fa      	ldr	r2, [r7, #28]
 8018448:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801844a:	69fb      	ldr	r3, [r7, #28]
 801844c:	681b      	ldr	r3, [r3, #0]
 801844e:	2b00      	cmp	r3, #0
 8018450:	d103      	bne.n	801845a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	2200      	movs	r2, #0
 8018456:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801845a:	2300      	movs	r3, #0
 801845c:	e016      	b.n	801848c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801845e:	bf00      	nop
 8018460:	e002      	b.n	8018468 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8018462:	bf00      	nop
 8018464:	e000      	b.n	8018468 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8018466:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8018468:	69fb      	ldr	r3, [r7, #28]
 801846a:	2b00      	cmp	r3, #0
 801846c:	d006      	beq.n	801847c <tcp_split_unsent_seg+0x25c>
 801846e:	4b09      	ldr	r3, [pc, #36]	; (8018494 <tcp_split_unsent_seg+0x274>)
 8018470:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8018474:	490d      	ldr	r1, [pc, #52]	; (80184ac <tcp_split_unsent_seg+0x28c>)
 8018476:	4809      	ldr	r0, [pc, #36]	; (801849c <tcp_split_unsent_seg+0x27c>)
 8018478:	f004 fe1c 	bl	801d0b4 <iprintf>
  if (p != NULL) {
 801847c:	693b      	ldr	r3, [r7, #16]
 801847e:	2b00      	cmp	r3, #0
 8018480:	d002      	beq.n	8018488 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8018482:	6938      	ldr	r0, [r7, #16]
 8018484:	f7fa fe62 	bl	801314c <pbuf_free>
  }

  return ERR_MEM;
 8018488:	f04f 33ff 	mov.w	r3, #4294967295
}
 801848c:	4618      	mov	r0, r3
 801848e:	3724      	adds	r7, #36	; 0x24
 8018490:	46bd      	mov	sp, r7
 8018492:	bd90      	pop	{r4, r7, pc}
 8018494:	0802089c 	.word	0x0802089c
 8018498:	08020c30 	.word	0x08020c30
 801849c:	080208f0 	.word	0x080208f0
 80184a0:	08020c54 	.word	0x08020c54
 80184a4:	08020c78 	.word	0x08020c78
 80184a8:	08020c88 	.word	0x08020c88
 80184ac:	08020c98 	.word	0x08020c98

080184b0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80184b0:	b590      	push	{r4, r7, lr}
 80184b2:	b085      	sub	sp, #20
 80184b4:	af00      	add	r7, sp, #0
 80184b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	2b00      	cmp	r3, #0
 80184bc:	d106      	bne.n	80184cc <tcp_send_fin+0x1c>
 80184be:	4b21      	ldr	r3, [pc, #132]	; (8018544 <tcp_send_fin+0x94>)
 80184c0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80184c4:	4920      	ldr	r1, [pc, #128]	; (8018548 <tcp_send_fin+0x98>)
 80184c6:	4821      	ldr	r0, [pc, #132]	; (801854c <tcp_send_fin+0x9c>)
 80184c8:	f004 fdf4 	bl	801d0b4 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	d02e      	beq.n	8018532 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80184d4:	687b      	ldr	r3, [r7, #4]
 80184d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80184d8:	60fb      	str	r3, [r7, #12]
 80184da:	e002      	b.n	80184e2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80184dc:	68fb      	ldr	r3, [r7, #12]
 80184de:	681b      	ldr	r3, [r3, #0]
 80184e0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80184e2:	68fb      	ldr	r3, [r7, #12]
 80184e4:	681b      	ldr	r3, [r3, #0]
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	d1f8      	bne.n	80184dc <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80184ea:	68fb      	ldr	r3, [r7, #12]
 80184ec:	68db      	ldr	r3, [r3, #12]
 80184ee:	899b      	ldrh	r3, [r3, #12]
 80184f0:	b29b      	uxth	r3, r3
 80184f2:	4618      	mov	r0, r3
 80184f4:	f7f9 fae2 	bl	8011abc <lwip_htons>
 80184f8:	4603      	mov	r3, r0
 80184fa:	b2db      	uxtb	r3, r3
 80184fc:	f003 0307 	and.w	r3, r3, #7
 8018500:	2b00      	cmp	r3, #0
 8018502:	d116      	bne.n	8018532 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8018504:	68fb      	ldr	r3, [r7, #12]
 8018506:	68db      	ldr	r3, [r3, #12]
 8018508:	899b      	ldrh	r3, [r3, #12]
 801850a:	b29c      	uxth	r4, r3
 801850c:	2001      	movs	r0, #1
 801850e:	f7f9 fad5 	bl	8011abc <lwip_htons>
 8018512:	4603      	mov	r3, r0
 8018514:	461a      	mov	r2, r3
 8018516:	68fb      	ldr	r3, [r7, #12]
 8018518:	68db      	ldr	r3, [r3, #12]
 801851a:	4322      	orrs	r2, r4
 801851c:	b292      	uxth	r2, r2
 801851e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8018520:	687b      	ldr	r3, [r7, #4]
 8018522:	8b5b      	ldrh	r3, [r3, #26]
 8018524:	f043 0320 	orr.w	r3, r3, #32
 8018528:	b29a      	uxth	r2, r3
 801852a:	687b      	ldr	r3, [r7, #4]
 801852c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801852e:	2300      	movs	r3, #0
 8018530:	e004      	b.n	801853c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8018532:	2101      	movs	r1, #1
 8018534:	6878      	ldr	r0, [r7, #4]
 8018536:	f000 f80b 	bl	8018550 <tcp_enqueue_flags>
 801853a:	4603      	mov	r3, r0
}
 801853c:	4618      	mov	r0, r3
 801853e:	3714      	adds	r7, #20
 8018540:	46bd      	mov	sp, r7
 8018542:	bd90      	pop	{r4, r7, pc}
 8018544:	0802089c 	.word	0x0802089c
 8018548:	08020ca4 	.word	0x08020ca4
 801854c:	080208f0 	.word	0x080208f0

08018550 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8018550:	b580      	push	{r7, lr}
 8018552:	b08a      	sub	sp, #40	; 0x28
 8018554:	af02      	add	r7, sp, #8
 8018556:	6078      	str	r0, [r7, #4]
 8018558:	460b      	mov	r3, r1
 801855a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801855c:	2300      	movs	r3, #0
 801855e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8018560:	2300      	movs	r3, #0
 8018562:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8018564:	78fb      	ldrb	r3, [r7, #3]
 8018566:	f003 0303 	and.w	r3, r3, #3
 801856a:	2b00      	cmp	r3, #0
 801856c:	d106      	bne.n	801857c <tcp_enqueue_flags+0x2c>
 801856e:	4b67      	ldr	r3, [pc, #412]	; (801870c <tcp_enqueue_flags+0x1bc>)
 8018570:	f240 4211 	movw	r2, #1041	; 0x411
 8018574:	4966      	ldr	r1, [pc, #408]	; (8018710 <tcp_enqueue_flags+0x1c0>)
 8018576:	4867      	ldr	r0, [pc, #412]	; (8018714 <tcp_enqueue_flags+0x1c4>)
 8018578:	f004 fd9c 	bl	801d0b4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801857c:	687b      	ldr	r3, [r7, #4]
 801857e:	2b00      	cmp	r3, #0
 8018580:	d106      	bne.n	8018590 <tcp_enqueue_flags+0x40>
 8018582:	4b62      	ldr	r3, [pc, #392]	; (801870c <tcp_enqueue_flags+0x1bc>)
 8018584:	f240 4213 	movw	r2, #1043	; 0x413
 8018588:	4963      	ldr	r1, [pc, #396]	; (8018718 <tcp_enqueue_flags+0x1c8>)
 801858a:	4862      	ldr	r0, [pc, #392]	; (8018714 <tcp_enqueue_flags+0x1c4>)
 801858c:	f004 fd92 	bl	801d0b4 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8018590:	78fb      	ldrb	r3, [r7, #3]
 8018592:	f003 0302 	and.w	r3, r3, #2
 8018596:	2b00      	cmp	r3, #0
 8018598:	d001      	beq.n	801859e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801859a:	2301      	movs	r3, #1
 801859c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801859e:	7ffb      	ldrb	r3, [r7, #31]
 80185a0:	009b      	lsls	r3, r3, #2
 80185a2:	b2db      	uxtb	r3, r3
 80185a4:	f003 0304 	and.w	r3, r3, #4
 80185a8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80185aa:	7dfb      	ldrb	r3, [r7, #23]
 80185ac:	b29b      	uxth	r3, r3
 80185ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 80185b2:	4619      	mov	r1, r3
 80185b4:	2036      	movs	r0, #54	; 0x36
 80185b6:	f7fa fae5 	bl	8012b84 <pbuf_alloc>
 80185ba:	6138      	str	r0, [r7, #16]
 80185bc:	693b      	ldr	r3, [r7, #16]
 80185be:	2b00      	cmp	r3, #0
 80185c0:	d109      	bne.n	80185d6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80185c2:	687b      	ldr	r3, [r7, #4]
 80185c4:	8b5b      	ldrh	r3, [r3, #26]
 80185c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80185ca:	b29a      	uxth	r2, r3
 80185cc:	687b      	ldr	r3, [r7, #4]
 80185ce:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80185d0:	f04f 33ff 	mov.w	r3, #4294967295
 80185d4:	e095      	b.n	8018702 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80185d6:	693b      	ldr	r3, [r7, #16]
 80185d8:	895a      	ldrh	r2, [r3, #10]
 80185da:	7dfb      	ldrb	r3, [r7, #23]
 80185dc:	b29b      	uxth	r3, r3
 80185de:	429a      	cmp	r2, r3
 80185e0:	d206      	bcs.n	80185f0 <tcp_enqueue_flags+0xa0>
 80185e2:	4b4a      	ldr	r3, [pc, #296]	; (801870c <tcp_enqueue_flags+0x1bc>)
 80185e4:	f240 4239 	movw	r2, #1081	; 0x439
 80185e8:	494c      	ldr	r1, [pc, #304]	; (801871c <tcp_enqueue_flags+0x1cc>)
 80185ea:	484a      	ldr	r0, [pc, #296]	; (8018714 <tcp_enqueue_flags+0x1c4>)
 80185ec:	f004 fd62 	bl	801d0b4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80185f4:	78fa      	ldrb	r2, [r7, #3]
 80185f6:	7ffb      	ldrb	r3, [r7, #31]
 80185f8:	9300      	str	r3, [sp, #0]
 80185fa:	460b      	mov	r3, r1
 80185fc:	6939      	ldr	r1, [r7, #16]
 80185fe:	6878      	ldr	r0, [r7, #4]
 8018600:	f7ff f918 	bl	8017834 <tcp_create_segment>
 8018604:	60f8      	str	r0, [r7, #12]
 8018606:	68fb      	ldr	r3, [r7, #12]
 8018608:	2b00      	cmp	r3, #0
 801860a:	d109      	bne.n	8018620 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801860c:	687b      	ldr	r3, [r7, #4]
 801860e:	8b5b      	ldrh	r3, [r3, #26]
 8018610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018614:	b29a      	uxth	r2, r3
 8018616:	687b      	ldr	r3, [r7, #4]
 8018618:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801861a:	f04f 33ff 	mov.w	r3, #4294967295
 801861e:	e070      	b.n	8018702 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8018620:	68fb      	ldr	r3, [r7, #12]
 8018622:	68db      	ldr	r3, [r3, #12]
 8018624:	f003 0303 	and.w	r3, r3, #3
 8018628:	2b00      	cmp	r3, #0
 801862a:	d006      	beq.n	801863a <tcp_enqueue_flags+0xea>
 801862c:	4b37      	ldr	r3, [pc, #220]	; (801870c <tcp_enqueue_flags+0x1bc>)
 801862e:	f240 4242 	movw	r2, #1090	; 0x442
 8018632:	493b      	ldr	r1, [pc, #236]	; (8018720 <tcp_enqueue_flags+0x1d0>)
 8018634:	4837      	ldr	r0, [pc, #220]	; (8018714 <tcp_enqueue_flags+0x1c4>)
 8018636:	f004 fd3d 	bl	801d0b4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801863a:	68fb      	ldr	r3, [r7, #12]
 801863c:	891b      	ldrh	r3, [r3, #8]
 801863e:	2b00      	cmp	r3, #0
 8018640:	d006      	beq.n	8018650 <tcp_enqueue_flags+0x100>
 8018642:	4b32      	ldr	r3, [pc, #200]	; (801870c <tcp_enqueue_flags+0x1bc>)
 8018644:	f240 4243 	movw	r2, #1091	; 0x443
 8018648:	4936      	ldr	r1, [pc, #216]	; (8018724 <tcp_enqueue_flags+0x1d4>)
 801864a:	4832      	ldr	r0, [pc, #200]	; (8018714 <tcp_enqueue_flags+0x1c4>)
 801864c:	f004 fd32 	bl	801d0b4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018654:	2b00      	cmp	r3, #0
 8018656:	d103      	bne.n	8018660 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	68fa      	ldr	r2, [r7, #12]
 801865c:	66da      	str	r2, [r3, #108]	; 0x6c
 801865e:	e00d      	b.n	801867c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018664:	61bb      	str	r3, [r7, #24]
 8018666:	e002      	b.n	801866e <tcp_enqueue_flags+0x11e>
 8018668:	69bb      	ldr	r3, [r7, #24]
 801866a:	681b      	ldr	r3, [r3, #0]
 801866c:	61bb      	str	r3, [r7, #24]
 801866e:	69bb      	ldr	r3, [r7, #24]
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	2b00      	cmp	r3, #0
 8018674:	d1f8      	bne.n	8018668 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8018676:	69bb      	ldr	r3, [r7, #24]
 8018678:	68fa      	ldr	r2, [r7, #12]
 801867a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	2200      	movs	r2, #0
 8018680:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8018684:	78fb      	ldrb	r3, [r7, #3]
 8018686:	f003 0302 	and.w	r3, r3, #2
 801868a:	2b00      	cmp	r3, #0
 801868c:	d104      	bne.n	8018698 <tcp_enqueue_flags+0x148>
 801868e:	78fb      	ldrb	r3, [r7, #3]
 8018690:	f003 0301 	and.w	r3, r3, #1
 8018694:	2b00      	cmp	r3, #0
 8018696:	d004      	beq.n	80186a2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801869c:	1c5a      	adds	r2, r3, #1
 801869e:	687b      	ldr	r3, [r7, #4]
 80186a0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80186a2:	78fb      	ldrb	r3, [r7, #3]
 80186a4:	f003 0301 	and.w	r3, r3, #1
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	d006      	beq.n	80186ba <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	8b5b      	ldrh	r3, [r3, #26]
 80186b0:	f043 0320 	orr.w	r3, r3, #32
 80186b4:	b29a      	uxth	r2, r3
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80186ba:	68fb      	ldr	r3, [r7, #12]
 80186bc:	685b      	ldr	r3, [r3, #4]
 80186be:	4618      	mov	r0, r3
 80186c0:	f7fa fdd2 	bl	8013268 <pbuf_clen>
 80186c4:	4603      	mov	r3, r0
 80186c6:	461a      	mov	r2, r3
 80186c8:	687b      	ldr	r3, [r7, #4]
 80186ca:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80186ce:	4413      	add	r3, r2
 80186d0:	b29a      	uxth	r2, r3
 80186d2:	687b      	ldr	r3, [r7, #4]
 80186d4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80186d8:	687b      	ldr	r3, [r7, #4]
 80186da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d00e      	beq.n	8018700 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80186e2:	687b      	ldr	r3, [r7, #4]
 80186e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80186e6:	2b00      	cmp	r3, #0
 80186e8:	d10a      	bne.n	8018700 <tcp_enqueue_flags+0x1b0>
 80186ea:	687b      	ldr	r3, [r7, #4]
 80186ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d106      	bne.n	8018700 <tcp_enqueue_flags+0x1b0>
 80186f2:	4b06      	ldr	r3, [pc, #24]	; (801870c <tcp_enqueue_flags+0x1bc>)
 80186f4:	f240 4265 	movw	r2, #1125	; 0x465
 80186f8:	490b      	ldr	r1, [pc, #44]	; (8018728 <tcp_enqueue_flags+0x1d8>)
 80186fa:	4806      	ldr	r0, [pc, #24]	; (8018714 <tcp_enqueue_flags+0x1c4>)
 80186fc:	f004 fcda 	bl	801d0b4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8018700:	2300      	movs	r3, #0
}
 8018702:	4618      	mov	r0, r3
 8018704:	3720      	adds	r7, #32
 8018706:	46bd      	mov	sp, r7
 8018708:	bd80      	pop	{r7, pc}
 801870a:	bf00      	nop
 801870c:	0802089c 	.word	0x0802089c
 8018710:	08020cc0 	.word	0x08020cc0
 8018714:	080208f0 	.word	0x080208f0
 8018718:	08020d18 	.word	0x08020d18
 801871c:	08020d38 	.word	0x08020d38
 8018720:	08020d74 	.word	0x08020d74
 8018724:	08020d8c 	.word	0x08020d8c
 8018728:	08020db8 	.word	0x08020db8

0801872c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801872c:	b5b0      	push	{r4, r5, r7, lr}
 801872e:	b08a      	sub	sp, #40	; 0x28
 8018730:	af00      	add	r7, sp, #0
 8018732:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8018734:	687b      	ldr	r3, [r7, #4]
 8018736:	2b00      	cmp	r3, #0
 8018738:	d106      	bne.n	8018748 <tcp_output+0x1c>
 801873a:	4b8a      	ldr	r3, [pc, #552]	; (8018964 <tcp_output+0x238>)
 801873c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8018740:	4989      	ldr	r1, [pc, #548]	; (8018968 <tcp_output+0x23c>)
 8018742:	488a      	ldr	r0, [pc, #552]	; (801896c <tcp_output+0x240>)
 8018744:	f004 fcb6 	bl	801d0b4 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8018748:	687b      	ldr	r3, [r7, #4]
 801874a:	7d1b      	ldrb	r3, [r3, #20]
 801874c:	2b01      	cmp	r3, #1
 801874e:	d106      	bne.n	801875e <tcp_output+0x32>
 8018750:	4b84      	ldr	r3, [pc, #528]	; (8018964 <tcp_output+0x238>)
 8018752:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8018756:	4986      	ldr	r1, [pc, #536]	; (8018970 <tcp_output+0x244>)
 8018758:	4884      	ldr	r0, [pc, #528]	; (801896c <tcp_output+0x240>)
 801875a:	f004 fcab 	bl	801d0b4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801875e:	4b85      	ldr	r3, [pc, #532]	; (8018974 <tcp_output+0x248>)
 8018760:	681b      	ldr	r3, [r3, #0]
 8018762:	687a      	ldr	r2, [r7, #4]
 8018764:	429a      	cmp	r2, r3
 8018766:	d101      	bne.n	801876c <tcp_output+0x40>
    return ERR_OK;
 8018768:	2300      	movs	r3, #0
 801876a:	e1ce      	b.n	8018b0a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801876c:	687b      	ldr	r3, [r7, #4]
 801876e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018778:	4293      	cmp	r3, r2
 801877a:	bf28      	it	cs
 801877c:	4613      	movcs	r3, r2
 801877e:	b29b      	uxth	r3, r3
 8018780:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8018782:	687b      	ldr	r3, [r7, #4]
 8018784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018786:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8018788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801878a:	2b00      	cmp	r3, #0
 801878c:	d10b      	bne.n	80187a6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	8b5b      	ldrh	r3, [r3, #26]
 8018792:	f003 0302 	and.w	r3, r3, #2
 8018796:	2b00      	cmp	r3, #0
 8018798:	f000 81aa 	beq.w	8018af0 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801879c:	6878      	ldr	r0, [r7, #4]
 801879e:	f000 fdcb 	bl	8019338 <tcp_send_empty_ack>
 80187a2:	4603      	mov	r3, r0
 80187a4:	e1b1      	b.n	8018b0a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80187a6:	6879      	ldr	r1, [r7, #4]
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	3304      	adds	r3, #4
 80187ac:	461a      	mov	r2, r3
 80187ae:	6878      	ldr	r0, [r7, #4]
 80187b0:	f7ff f824 	bl	80177fc <tcp_route>
 80187b4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80187b6:	697b      	ldr	r3, [r7, #20]
 80187b8:	2b00      	cmp	r3, #0
 80187ba:	d102      	bne.n	80187c2 <tcp_output+0x96>
    return ERR_RTE;
 80187bc:	f06f 0303 	mvn.w	r3, #3
 80187c0:	e1a3      	b.n	8018b0a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80187c2:	687b      	ldr	r3, [r7, #4]
 80187c4:	2b00      	cmp	r3, #0
 80187c6:	d003      	beq.n	80187d0 <tcp_output+0xa4>
 80187c8:	687b      	ldr	r3, [r7, #4]
 80187ca:	681b      	ldr	r3, [r3, #0]
 80187cc:	2b00      	cmp	r3, #0
 80187ce:	d111      	bne.n	80187f4 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80187d0:	697b      	ldr	r3, [r7, #20]
 80187d2:	2b00      	cmp	r3, #0
 80187d4:	d002      	beq.n	80187dc <tcp_output+0xb0>
 80187d6:	697b      	ldr	r3, [r7, #20]
 80187d8:	3304      	adds	r3, #4
 80187da:	e000      	b.n	80187de <tcp_output+0xb2>
 80187dc:	2300      	movs	r3, #0
 80187de:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80187e0:	693b      	ldr	r3, [r7, #16]
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d102      	bne.n	80187ec <tcp_output+0xc0>
      return ERR_RTE;
 80187e6:	f06f 0303 	mvn.w	r3, #3
 80187ea:	e18e      	b.n	8018b0a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80187ec:	693b      	ldr	r3, [r7, #16]
 80187ee:	681a      	ldr	r2, [r3, #0]
 80187f0:	687b      	ldr	r3, [r7, #4]
 80187f2:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80187f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187f6:	68db      	ldr	r3, [r3, #12]
 80187f8:	685b      	ldr	r3, [r3, #4]
 80187fa:	4618      	mov	r0, r3
 80187fc:	f7f9 f973 	bl	8011ae6 <lwip_htonl>
 8018800:	4602      	mov	r2, r0
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018806:	1ad3      	subs	r3, r2, r3
 8018808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801880a:	8912      	ldrh	r2, [r2, #8]
 801880c:	4413      	add	r3, r2
 801880e:	69ba      	ldr	r2, [r7, #24]
 8018810:	429a      	cmp	r2, r3
 8018812:	d227      	bcs.n	8018864 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801881a:	461a      	mov	r2, r3
 801881c:	69bb      	ldr	r3, [r7, #24]
 801881e:	4293      	cmp	r3, r2
 8018820:	d114      	bne.n	801884c <tcp_output+0x120>
 8018822:	687b      	ldr	r3, [r7, #4]
 8018824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018826:	2b00      	cmp	r3, #0
 8018828:	d110      	bne.n	801884c <tcp_output+0x120>
 801882a:	687b      	ldr	r3, [r7, #4]
 801882c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8018830:	2b00      	cmp	r3, #0
 8018832:	d10b      	bne.n	801884c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	2200      	movs	r2, #0
 8018838:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	2201      	movs	r2, #1
 8018840:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	2200      	movs	r2, #0
 8018848:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	8b5b      	ldrh	r3, [r3, #26]
 8018850:	f003 0302 	and.w	r3, r3, #2
 8018854:	2b00      	cmp	r3, #0
 8018856:	f000 814d 	beq.w	8018af4 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801885a:	6878      	ldr	r0, [r7, #4]
 801885c:	f000 fd6c 	bl	8019338 <tcp_send_empty_ack>
 8018860:	4603      	mov	r3, r0
 8018862:	e152      	b.n	8018b0a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	2200      	movs	r2, #0
 8018868:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801886c:	687b      	ldr	r3, [r7, #4]
 801886e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018870:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8018872:	6a3b      	ldr	r3, [r7, #32]
 8018874:	2b00      	cmp	r3, #0
 8018876:	f000 811c 	beq.w	8018ab2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801887a:	e002      	b.n	8018882 <tcp_output+0x156>
 801887c:	6a3b      	ldr	r3, [r7, #32]
 801887e:	681b      	ldr	r3, [r3, #0]
 8018880:	623b      	str	r3, [r7, #32]
 8018882:	6a3b      	ldr	r3, [r7, #32]
 8018884:	681b      	ldr	r3, [r3, #0]
 8018886:	2b00      	cmp	r3, #0
 8018888:	d1f8      	bne.n	801887c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801888a:	e112      	b.n	8018ab2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801888c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801888e:	68db      	ldr	r3, [r3, #12]
 8018890:	899b      	ldrh	r3, [r3, #12]
 8018892:	b29b      	uxth	r3, r3
 8018894:	4618      	mov	r0, r3
 8018896:	f7f9 f911 	bl	8011abc <lwip_htons>
 801889a:	4603      	mov	r3, r0
 801889c:	b2db      	uxtb	r3, r3
 801889e:	f003 0304 	and.w	r3, r3, #4
 80188a2:	2b00      	cmp	r3, #0
 80188a4:	d006      	beq.n	80188b4 <tcp_output+0x188>
 80188a6:	4b2f      	ldr	r3, [pc, #188]	; (8018964 <tcp_output+0x238>)
 80188a8:	f240 5236 	movw	r2, #1334	; 0x536
 80188ac:	4932      	ldr	r1, [pc, #200]	; (8018978 <tcp_output+0x24c>)
 80188ae:	482f      	ldr	r0, [pc, #188]	; (801896c <tcp_output+0x240>)
 80188b0:	f004 fc00 	bl	801d0b4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80188b4:	687b      	ldr	r3, [r7, #4]
 80188b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80188b8:	2b00      	cmp	r3, #0
 80188ba:	d01f      	beq.n	80188fc <tcp_output+0x1d0>
 80188bc:	687b      	ldr	r3, [r7, #4]
 80188be:	8b5b      	ldrh	r3, [r3, #26]
 80188c0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80188c4:	2b00      	cmp	r3, #0
 80188c6:	d119      	bne.n	80188fc <tcp_output+0x1d0>
 80188c8:	687b      	ldr	r3, [r7, #4]
 80188ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	d00b      	beq.n	80188e8 <tcp_output+0x1bc>
 80188d0:	687b      	ldr	r3, [r7, #4]
 80188d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80188d4:	681b      	ldr	r3, [r3, #0]
 80188d6:	2b00      	cmp	r3, #0
 80188d8:	d110      	bne.n	80188fc <tcp_output+0x1d0>
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80188de:	891a      	ldrh	r2, [r3, #8]
 80188e0:	687b      	ldr	r3, [r7, #4]
 80188e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80188e4:	429a      	cmp	r2, r3
 80188e6:	d209      	bcs.n	80188fc <tcp_output+0x1d0>
 80188e8:	687b      	ldr	r3, [r7, #4]
 80188ea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80188ee:	2b00      	cmp	r3, #0
 80188f0:	d004      	beq.n	80188fc <tcp_output+0x1d0>
 80188f2:	687b      	ldr	r3, [r7, #4]
 80188f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80188f8:	2b08      	cmp	r3, #8
 80188fa:	d901      	bls.n	8018900 <tcp_output+0x1d4>
 80188fc:	2301      	movs	r3, #1
 80188fe:	e000      	b.n	8018902 <tcp_output+0x1d6>
 8018900:	2300      	movs	r3, #0
 8018902:	2b00      	cmp	r3, #0
 8018904:	d106      	bne.n	8018914 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8018906:	687b      	ldr	r3, [r7, #4]
 8018908:	8b5b      	ldrh	r3, [r3, #26]
 801890a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801890e:	2b00      	cmp	r3, #0
 8018910:	f000 80e4 	beq.w	8018adc <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8018914:	687b      	ldr	r3, [r7, #4]
 8018916:	7d1b      	ldrb	r3, [r3, #20]
 8018918:	2b02      	cmp	r3, #2
 801891a:	d00d      	beq.n	8018938 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801891c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801891e:	68db      	ldr	r3, [r3, #12]
 8018920:	899b      	ldrh	r3, [r3, #12]
 8018922:	b29c      	uxth	r4, r3
 8018924:	2010      	movs	r0, #16
 8018926:	f7f9 f8c9 	bl	8011abc <lwip_htons>
 801892a:	4603      	mov	r3, r0
 801892c:	461a      	mov	r2, r3
 801892e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018930:	68db      	ldr	r3, [r3, #12]
 8018932:	4322      	orrs	r2, r4
 8018934:	b292      	uxth	r2, r2
 8018936:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8018938:	697a      	ldr	r2, [r7, #20]
 801893a:	6879      	ldr	r1, [r7, #4]
 801893c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801893e:	f000 f909 	bl	8018b54 <tcp_output_segment>
 8018942:	4603      	mov	r3, r0
 8018944:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8018946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801894a:	2b00      	cmp	r3, #0
 801894c:	d016      	beq.n	801897c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	8b5b      	ldrh	r3, [r3, #26]
 8018952:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018956:	b29a      	uxth	r2, r3
 8018958:	687b      	ldr	r3, [r7, #4]
 801895a:	835a      	strh	r2, [r3, #26]
      return err;
 801895c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018960:	e0d3      	b.n	8018b0a <tcp_output+0x3de>
 8018962:	bf00      	nop
 8018964:	0802089c 	.word	0x0802089c
 8018968:	08020de0 	.word	0x08020de0
 801896c:	080208f0 	.word	0x080208f0
 8018970:	08020df8 	.word	0x08020df8
 8018974:	2000de08 	.word	0x2000de08
 8018978:	08020e20 	.word	0x08020e20
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801897c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801897e:	681a      	ldr	r2, [r3, #0]
 8018980:	687b      	ldr	r3, [r7, #4]
 8018982:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8018984:	687b      	ldr	r3, [r7, #4]
 8018986:	7d1b      	ldrb	r3, [r3, #20]
 8018988:	2b02      	cmp	r3, #2
 801898a:	d006      	beq.n	801899a <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801898c:	687b      	ldr	r3, [r7, #4]
 801898e:	8b5b      	ldrh	r3, [r3, #26]
 8018990:	f023 0303 	bic.w	r3, r3, #3
 8018994:	b29a      	uxth	r2, r3
 8018996:	687b      	ldr	r3, [r7, #4]
 8018998:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801899a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801899c:	68db      	ldr	r3, [r3, #12]
 801899e:	685b      	ldr	r3, [r3, #4]
 80189a0:	4618      	mov	r0, r3
 80189a2:	f7f9 f8a0 	bl	8011ae6 <lwip_htonl>
 80189a6:	4604      	mov	r4, r0
 80189a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189aa:	891b      	ldrh	r3, [r3, #8]
 80189ac:	461d      	mov	r5, r3
 80189ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189b0:	68db      	ldr	r3, [r3, #12]
 80189b2:	899b      	ldrh	r3, [r3, #12]
 80189b4:	b29b      	uxth	r3, r3
 80189b6:	4618      	mov	r0, r3
 80189b8:	f7f9 f880 	bl	8011abc <lwip_htons>
 80189bc:	4603      	mov	r3, r0
 80189be:	b2db      	uxtb	r3, r3
 80189c0:	f003 0303 	and.w	r3, r3, #3
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	d001      	beq.n	80189cc <tcp_output+0x2a0>
 80189c8:	2301      	movs	r3, #1
 80189ca:	e000      	b.n	80189ce <tcp_output+0x2a2>
 80189cc:	2300      	movs	r3, #0
 80189ce:	442b      	add	r3, r5
 80189d0:	4423      	add	r3, r4
 80189d2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80189d8:	68bb      	ldr	r3, [r7, #8]
 80189da:	1ad3      	subs	r3, r2, r3
 80189dc:	2b00      	cmp	r3, #0
 80189de:	da02      	bge.n	80189e6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80189e0:	687b      	ldr	r3, [r7, #4]
 80189e2:	68ba      	ldr	r2, [r7, #8]
 80189e4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80189e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189e8:	891b      	ldrh	r3, [r3, #8]
 80189ea:	461c      	mov	r4, r3
 80189ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189ee:	68db      	ldr	r3, [r3, #12]
 80189f0:	899b      	ldrh	r3, [r3, #12]
 80189f2:	b29b      	uxth	r3, r3
 80189f4:	4618      	mov	r0, r3
 80189f6:	f7f9 f861 	bl	8011abc <lwip_htons>
 80189fa:	4603      	mov	r3, r0
 80189fc:	b2db      	uxtb	r3, r3
 80189fe:	f003 0303 	and.w	r3, r3, #3
 8018a02:	2b00      	cmp	r3, #0
 8018a04:	d001      	beq.n	8018a0a <tcp_output+0x2de>
 8018a06:	2301      	movs	r3, #1
 8018a08:	e000      	b.n	8018a0c <tcp_output+0x2e0>
 8018a0a:	2300      	movs	r3, #0
 8018a0c:	4423      	add	r3, r4
 8018a0e:	2b00      	cmp	r3, #0
 8018a10:	d049      	beq.n	8018aa6 <tcp_output+0x37a>
      seg->next = NULL;
 8018a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a14:	2200      	movs	r2, #0
 8018a16:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018a1c:	2b00      	cmp	r3, #0
 8018a1e:	d105      	bne.n	8018a2c <tcp_output+0x300>
        pcb->unacked = seg;
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018a24:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8018a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a28:	623b      	str	r3, [r7, #32]
 8018a2a:	e03f      	b.n	8018aac <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8018a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a2e:	68db      	ldr	r3, [r3, #12]
 8018a30:	685b      	ldr	r3, [r3, #4]
 8018a32:	4618      	mov	r0, r3
 8018a34:	f7f9 f857 	bl	8011ae6 <lwip_htonl>
 8018a38:	4604      	mov	r4, r0
 8018a3a:	6a3b      	ldr	r3, [r7, #32]
 8018a3c:	68db      	ldr	r3, [r3, #12]
 8018a3e:	685b      	ldr	r3, [r3, #4]
 8018a40:	4618      	mov	r0, r3
 8018a42:	f7f9 f850 	bl	8011ae6 <lwip_htonl>
 8018a46:	4603      	mov	r3, r0
 8018a48:	1ae3      	subs	r3, r4, r3
 8018a4a:	2b00      	cmp	r3, #0
 8018a4c:	da24      	bge.n	8018a98 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	3370      	adds	r3, #112	; 0x70
 8018a52:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018a54:	e002      	b.n	8018a5c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8018a56:	69fb      	ldr	r3, [r7, #28]
 8018a58:	681b      	ldr	r3, [r3, #0]
 8018a5a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018a5c:	69fb      	ldr	r3, [r7, #28]
 8018a5e:	681b      	ldr	r3, [r3, #0]
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	d011      	beq.n	8018a88 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018a64:	69fb      	ldr	r3, [r7, #28]
 8018a66:	681b      	ldr	r3, [r3, #0]
 8018a68:	68db      	ldr	r3, [r3, #12]
 8018a6a:	685b      	ldr	r3, [r3, #4]
 8018a6c:	4618      	mov	r0, r3
 8018a6e:	f7f9 f83a 	bl	8011ae6 <lwip_htonl>
 8018a72:	4604      	mov	r4, r0
 8018a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a76:	68db      	ldr	r3, [r3, #12]
 8018a78:	685b      	ldr	r3, [r3, #4]
 8018a7a:	4618      	mov	r0, r3
 8018a7c:	f7f9 f833 	bl	8011ae6 <lwip_htonl>
 8018a80:	4603      	mov	r3, r0
 8018a82:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8018a84:	2b00      	cmp	r3, #0
 8018a86:	dbe6      	blt.n	8018a56 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8018a88:	69fb      	ldr	r3, [r7, #28]
 8018a8a:	681a      	ldr	r2, [r3, #0]
 8018a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a8e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8018a90:	69fb      	ldr	r3, [r7, #28]
 8018a92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018a94:	601a      	str	r2, [r3, #0]
 8018a96:	e009      	b.n	8018aac <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8018a98:	6a3b      	ldr	r3, [r7, #32]
 8018a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018a9c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8018a9e:	6a3b      	ldr	r3, [r7, #32]
 8018aa0:	681b      	ldr	r3, [r3, #0]
 8018aa2:	623b      	str	r3, [r7, #32]
 8018aa4:	e002      	b.n	8018aac <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8018aa6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018aa8:	f7fb ff19 	bl	80148de <tcp_seg_free>
    }
    seg = pcb->unsent;
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018ab0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8018ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ab4:	2b00      	cmp	r3, #0
 8018ab6:	d012      	beq.n	8018ade <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8018ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018aba:	68db      	ldr	r3, [r3, #12]
 8018abc:	685b      	ldr	r3, [r3, #4]
 8018abe:	4618      	mov	r0, r3
 8018ac0:	f7f9 f811 	bl	8011ae6 <lwip_htonl>
 8018ac4:	4602      	mov	r2, r0
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018aca:	1ad3      	subs	r3, r2, r3
 8018acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018ace:	8912      	ldrh	r2, [r2, #8]
 8018ad0:	4413      	add	r3, r2
  while (seg != NULL &&
 8018ad2:	69ba      	ldr	r2, [r7, #24]
 8018ad4:	429a      	cmp	r2, r3
 8018ad6:	f4bf aed9 	bcs.w	801888c <tcp_output+0x160>
 8018ada:	e000      	b.n	8018ade <tcp_output+0x3b2>
      break;
 8018adc:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018ae2:	2b00      	cmp	r3, #0
 8018ae4:	d108      	bne.n	8018af8 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8018ae6:	687b      	ldr	r3, [r7, #4]
 8018ae8:	2200      	movs	r2, #0
 8018aea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8018aee:	e004      	b.n	8018afa <tcp_output+0x3ce>
    goto output_done;
 8018af0:	bf00      	nop
 8018af2:	e002      	b.n	8018afa <tcp_output+0x3ce>
    goto output_done;
 8018af4:	bf00      	nop
 8018af6:	e000      	b.n	8018afa <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8018af8:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8018afa:	687b      	ldr	r3, [r7, #4]
 8018afc:	8b5b      	ldrh	r3, [r3, #26]
 8018afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8018b02:	b29a      	uxth	r2, r3
 8018b04:	687b      	ldr	r3, [r7, #4]
 8018b06:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8018b08:	2300      	movs	r3, #0
}
 8018b0a:	4618      	mov	r0, r3
 8018b0c:	3728      	adds	r7, #40	; 0x28
 8018b0e:	46bd      	mov	sp, r7
 8018b10:	bdb0      	pop	{r4, r5, r7, pc}
 8018b12:	bf00      	nop

08018b14 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8018b14:	b580      	push	{r7, lr}
 8018b16:	b082      	sub	sp, #8
 8018b18:	af00      	add	r7, sp, #0
 8018b1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	2b00      	cmp	r3, #0
 8018b20:	d106      	bne.n	8018b30 <tcp_output_segment_busy+0x1c>
 8018b22:	4b09      	ldr	r3, [pc, #36]	; (8018b48 <tcp_output_segment_busy+0x34>)
 8018b24:	f240 529a 	movw	r2, #1434	; 0x59a
 8018b28:	4908      	ldr	r1, [pc, #32]	; (8018b4c <tcp_output_segment_busy+0x38>)
 8018b2a:	4809      	ldr	r0, [pc, #36]	; (8018b50 <tcp_output_segment_busy+0x3c>)
 8018b2c:	f004 fac2 	bl	801d0b4 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	685b      	ldr	r3, [r3, #4]
 8018b34:	7b9b      	ldrb	r3, [r3, #14]
 8018b36:	2b01      	cmp	r3, #1
 8018b38:	d001      	beq.n	8018b3e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8018b3a:	2301      	movs	r3, #1
 8018b3c:	e000      	b.n	8018b40 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8018b3e:	2300      	movs	r3, #0
}
 8018b40:	4618      	mov	r0, r3
 8018b42:	3708      	adds	r7, #8
 8018b44:	46bd      	mov	sp, r7
 8018b46:	bd80      	pop	{r7, pc}
 8018b48:	0802089c 	.word	0x0802089c
 8018b4c:	08020e38 	.word	0x08020e38
 8018b50:	080208f0 	.word	0x080208f0

08018b54 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8018b54:	b5b0      	push	{r4, r5, r7, lr}
 8018b56:	b08c      	sub	sp, #48	; 0x30
 8018b58:	af04      	add	r7, sp, #16
 8018b5a:	60f8      	str	r0, [r7, #12]
 8018b5c:	60b9      	str	r1, [r7, #8]
 8018b5e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8018b60:	68fb      	ldr	r3, [r7, #12]
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	d106      	bne.n	8018b74 <tcp_output_segment+0x20>
 8018b66:	4b63      	ldr	r3, [pc, #396]	; (8018cf4 <tcp_output_segment+0x1a0>)
 8018b68:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8018b6c:	4962      	ldr	r1, [pc, #392]	; (8018cf8 <tcp_output_segment+0x1a4>)
 8018b6e:	4863      	ldr	r0, [pc, #396]	; (8018cfc <tcp_output_segment+0x1a8>)
 8018b70:	f004 faa0 	bl	801d0b4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8018b74:	68bb      	ldr	r3, [r7, #8]
 8018b76:	2b00      	cmp	r3, #0
 8018b78:	d106      	bne.n	8018b88 <tcp_output_segment+0x34>
 8018b7a:	4b5e      	ldr	r3, [pc, #376]	; (8018cf4 <tcp_output_segment+0x1a0>)
 8018b7c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8018b80:	495f      	ldr	r1, [pc, #380]	; (8018d00 <tcp_output_segment+0x1ac>)
 8018b82:	485e      	ldr	r0, [pc, #376]	; (8018cfc <tcp_output_segment+0x1a8>)
 8018b84:	f004 fa96 	bl	801d0b4 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	d106      	bne.n	8018b9c <tcp_output_segment+0x48>
 8018b8e:	4b59      	ldr	r3, [pc, #356]	; (8018cf4 <tcp_output_segment+0x1a0>)
 8018b90:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8018b94:	495b      	ldr	r1, [pc, #364]	; (8018d04 <tcp_output_segment+0x1b0>)
 8018b96:	4859      	ldr	r0, [pc, #356]	; (8018cfc <tcp_output_segment+0x1a8>)
 8018b98:	f004 fa8c 	bl	801d0b4 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8018b9c:	68f8      	ldr	r0, [r7, #12]
 8018b9e:	f7ff ffb9 	bl	8018b14 <tcp_output_segment_busy>
 8018ba2:	4603      	mov	r3, r0
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	d001      	beq.n	8018bac <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8018ba8:	2300      	movs	r3, #0
 8018baa:	e09f      	b.n	8018cec <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8018bac:	68bb      	ldr	r3, [r7, #8]
 8018bae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018bb0:	68fb      	ldr	r3, [r7, #12]
 8018bb2:	68dc      	ldr	r4, [r3, #12]
 8018bb4:	4610      	mov	r0, r2
 8018bb6:	f7f8 ff96 	bl	8011ae6 <lwip_htonl>
 8018bba:	4603      	mov	r3, r0
 8018bbc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8018bbe:	68bb      	ldr	r3, [r7, #8]
 8018bc0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8018bc2:	68fb      	ldr	r3, [r7, #12]
 8018bc4:	68dc      	ldr	r4, [r3, #12]
 8018bc6:	4610      	mov	r0, r2
 8018bc8:	f7f8 ff78 	bl	8011abc <lwip_htons>
 8018bcc:	4603      	mov	r3, r0
 8018bce:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018bd0:	68bb      	ldr	r3, [r7, #8]
 8018bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018bd4:	68ba      	ldr	r2, [r7, #8]
 8018bd6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8018bd8:	441a      	add	r2, r3
 8018bda:	68bb      	ldr	r3, [r7, #8]
 8018bdc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8018bde:	68fb      	ldr	r3, [r7, #12]
 8018be0:	68db      	ldr	r3, [r3, #12]
 8018be2:	3314      	adds	r3, #20
 8018be4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8018be6:	68fb      	ldr	r3, [r7, #12]
 8018be8:	7a9b      	ldrb	r3, [r3, #10]
 8018bea:	f003 0301 	and.w	r3, r3, #1
 8018bee:	2b00      	cmp	r3, #0
 8018bf0:	d015      	beq.n	8018c1e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8018bf2:	68bb      	ldr	r3, [r7, #8]
 8018bf4:	3304      	adds	r3, #4
 8018bf6:	461a      	mov	r2, r3
 8018bf8:	6879      	ldr	r1, [r7, #4]
 8018bfa:	f44f 7006 	mov.w	r0, #536	; 0x218
 8018bfe:	f7fc fa33 	bl	8015068 <tcp_eff_send_mss_netif>
 8018c02:	4603      	mov	r3, r0
 8018c04:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8018c06:	8b7b      	ldrh	r3, [r7, #26]
 8018c08:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8018c0c:	4618      	mov	r0, r3
 8018c0e:	f7f8 ff6a 	bl	8011ae6 <lwip_htonl>
 8018c12:	4602      	mov	r2, r0
 8018c14:	69fb      	ldr	r3, [r7, #28]
 8018c16:	601a      	str	r2, [r3, #0]
    opts += 1;
 8018c18:	69fb      	ldr	r3, [r7, #28]
 8018c1a:	3304      	adds	r3, #4
 8018c1c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8018c1e:	68bb      	ldr	r3, [r7, #8]
 8018c20:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018c24:	2b00      	cmp	r3, #0
 8018c26:	da02      	bge.n	8018c2e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8018c28:	68bb      	ldr	r3, [r7, #8]
 8018c2a:	2200      	movs	r2, #0
 8018c2c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8018c2e:	68bb      	ldr	r3, [r7, #8]
 8018c30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018c32:	2b00      	cmp	r3, #0
 8018c34:	d10c      	bne.n	8018c50 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8018c36:	4b34      	ldr	r3, [pc, #208]	; (8018d08 <tcp_output_segment+0x1b4>)
 8018c38:	681a      	ldr	r2, [r3, #0]
 8018c3a:	68bb      	ldr	r3, [r7, #8]
 8018c3c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8018c3e:	68fb      	ldr	r3, [r7, #12]
 8018c40:	68db      	ldr	r3, [r3, #12]
 8018c42:	685b      	ldr	r3, [r3, #4]
 8018c44:	4618      	mov	r0, r3
 8018c46:	f7f8 ff4e 	bl	8011ae6 <lwip_htonl>
 8018c4a:	4602      	mov	r2, r0
 8018c4c:	68bb      	ldr	r3, [r7, #8]
 8018c4e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8018c50:	68fb      	ldr	r3, [r7, #12]
 8018c52:	68da      	ldr	r2, [r3, #12]
 8018c54:	68fb      	ldr	r3, [r7, #12]
 8018c56:	685b      	ldr	r3, [r3, #4]
 8018c58:	685b      	ldr	r3, [r3, #4]
 8018c5a:	1ad3      	subs	r3, r2, r3
 8018c5c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8018c5e:	68fb      	ldr	r3, [r7, #12]
 8018c60:	685b      	ldr	r3, [r3, #4]
 8018c62:	8959      	ldrh	r1, [r3, #10]
 8018c64:	68fb      	ldr	r3, [r7, #12]
 8018c66:	685b      	ldr	r3, [r3, #4]
 8018c68:	8b3a      	ldrh	r2, [r7, #24]
 8018c6a:	1a8a      	subs	r2, r1, r2
 8018c6c:	b292      	uxth	r2, r2
 8018c6e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8018c70:	68fb      	ldr	r3, [r7, #12]
 8018c72:	685b      	ldr	r3, [r3, #4]
 8018c74:	8919      	ldrh	r1, [r3, #8]
 8018c76:	68fb      	ldr	r3, [r7, #12]
 8018c78:	685b      	ldr	r3, [r3, #4]
 8018c7a:	8b3a      	ldrh	r2, [r7, #24]
 8018c7c:	1a8a      	subs	r2, r1, r2
 8018c7e:	b292      	uxth	r2, r2
 8018c80:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8018c82:	68fb      	ldr	r3, [r7, #12]
 8018c84:	685b      	ldr	r3, [r3, #4]
 8018c86:	68fa      	ldr	r2, [r7, #12]
 8018c88:	68d2      	ldr	r2, [r2, #12]
 8018c8a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8018c8c:	68fb      	ldr	r3, [r7, #12]
 8018c8e:	68db      	ldr	r3, [r3, #12]
 8018c90:	2200      	movs	r2, #0
 8018c92:	741a      	strb	r2, [r3, #16]
 8018c94:	2200      	movs	r2, #0
 8018c96:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8018c98:	68fb      	ldr	r3, [r7, #12]
 8018c9a:	68db      	ldr	r3, [r3, #12]
 8018c9c:	f103 0214 	add.w	r2, r3, #20
 8018ca0:	68fb      	ldr	r3, [r7, #12]
 8018ca2:	7a9b      	ldrb	r3, [r3, #10]
 8018ca4:	009b      	lsls	r3, r3, #2
 8018ca6:	f003 0304 	and.w	r3, r3, #4
 8018caa:	4413      	add	r3, r2
 8018cac:	69fa      	ldr	r2, [r7, #28]
 8018cae:	429a      	cmp	r2, r3
 8018cb0:	d006      	beq.n	8018cc0 <tcp_output_segment+0x16c>
 8018cb2:	4b10      	ldr	r3, [pc, #64]	; (8018cf4 <tcp_output_segment+0x1a0>)
 8018cb4:	f240 621c 	movw	r2, #1564	; 0x61c
 8018cb8:	4914      	ldr	r1, [pc, #80]	; (8018d0c <tcp_output_segment+0x1b8>)
 8018cba:	4810      	ldr	r0, [pc, #64]	; (8018cfc <tcp_output_segment+0x1a8>)
 8018cbc:	f004 f9fa 	bl	801d0b4 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8018cc0:	68fb      	ldr	r3, [r7, #12]
 8018cc2:	6858      	ldr	r0, [r3, #4]
 8018cc4:	68b9      	ldr	r1, [r7, #8]
 8018cc6:	68bb      	ldr	r3, [r7, #8]
 8018cc8:	1d1c      	adds	r4, r3, #4
 8018cca:	68bb      	ldr	r3, [r7, #8]
 8018ccc:	7add      	ldrb	r5, [r3, #11]
 8018cce:	68bb      	ldr	r3, [r7, #8]
 8018cd0:	7a9b      	ldrb	r3, [r3, #10]
 8018cd2:	687a      	ldr	r2, [r7, #4]
 8018cd4:	9202      	str	r2, [sp, #8]
 8018cd6:	2206      	movs	r2, #6
 8018cd8:	9201      	str	r2, [sp, #4]
 8018cda:	9300      	str	r3, [sp, #0]
 8018cdc:	462b      	mov	r3, r5
 8018cde:	4622      	mov	r2, r4
 8018ce0:	f002 fd96 	bl	801b810 <ip4_output_if>
 8018ce4:	4603      	mov	r3, r0
 8018ce6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8018ce8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018cec:	4618      	mov	r0, r3
 8018cee:	3720      	adds	r7, #32
 8018cf0:	46bd      	mov	sp, r7
 8018cf2:	bdb0      	pop	{r4, r5, r7, pc}
 8018cf4:	0802089c 	.word	0x0802089c
 8018cf8:	08020e60 	.word	0x08020e60
 8018cfc:	080208f0 	.word	0x080208f0
 8018d00:	08020e80 	.word	0x08020e80
 8018d04:	08020ea0 	.word	0x08020ea0
 8018d08:	2000ddbc 	.word	0x2000ddbc
 8018d0c:	08020ec4 	.word	0x08020ec4

08018d10 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8018d10:	b5b0      	push	{r4, r5, r7, lr}
 8018d12:	b084      	sub	sp, #16
 8018d14:	af00      	add	r7, sp, #0
 8018d16:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d106      	bne.n	8018d2c <tcp_rexmit_rto_prepare+0x1c>
 8018d1e:	4b31      	ldr	r3, [pc, #196]	; (8018de4 <tcp_rexmit_rto_prepare+0xd4>)
 8018d20:	f240 6263 	movw	r2, #1635	; 0x663
 8018d24:	4930      	ldr	r1, [pc, #192]	; (8018de8 <tcp_rexmit_rto_prepare+0xd8>)
 8018d26:	4831      	ldr	r0, [pc, #196]	; (8018dec <tcp_rexmit_rto_prepare+0xdc>)
 8018d28:	f004 f9c4 	bl	801d0b4 <iprintf>

  if (pcb->unacked == NULL) {
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018d30:	2b00      	cmp	r3, #0
 8018d32:	d102      	bne.n	8018d3a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8018d34:	f06f 0305 	mvn.w	r3, #5
 8018d38:	e050      	b.n	8018ddc <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018d3e:	60fb      	str	r3, [r7, #12]
 8018d40:	e00b      	b.n	8018d5a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8018d42:	68f8      	ldr	r0, [r7, #12]
 8018d44:	f7ff fee6 	bl	8018b14 <tcp_output_segment_busy>
 8018d48:	4603      	mov	r3, r0
 8018d4a:	2b00      	cmp	r3, #0
 8018d4c:	d002      	beq.n	8018d54 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8018d4e:	f06f 0305 	mvn.w	r3, #5
 8018d52:	e043      	b.n	8018ddc <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018d54:	68fb      	ldr	r3, [r7, #12]
 8018d56:	681b      	ldr	r3, [r3, #0]
 8018d58:	60fb      	str	r3, [r7, #12]
 8018d5a:	68fb      	ldr	r3, [r7, #12]
 8018d5c:	681b      	ldr	r3, [r3, #0]
 8018d5e:	2b00      	cmp	r3, #0
 8018d60:	d1ef      	bne.n	8018d42 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8018d62:	68f8      	ldr	r0, [r7, #12]
 8018d64:	f7ff fed6 	bl	8018b14 <tcp_output_segment_busy>
 8018d68:	4603      	mov	r3, r0
 8018d6a:	2b00      	cmp	r3, #0
 8018d6c:	d002      	beq.n	8018d74 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8018d6e:	f06f 0305 	mvn.w	r3, #5
 8018d72:	e033      	b.n	8018ddc <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8018d78:	68fb      	ldr	r3, [r7, #12]
 8018d7a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	2200      	movs	r2, #0
 8018d88:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	8b5b      	ldrh	r3, [r3, #26]
 8018d8e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8018d92:	b29a      	uxth	r2, r3
 8018d94:	687b      	ldr	r3, [r7, #4]
 8018d96:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018d98:	68fb      	ldr	r3, [r7, #12]
 8018d9a:	68db      	ldr	r3, [r3, #12]
 8018d9c:	685b      	ldr	r3, [r3, #4]
 8018d9e:	4618      	mov	r0, r3
 8018da0:	f7f8 fea1 	bl	8011ae6 <lwip_htonl>
 8018da4:	4604      	mov	r4, r0
 8018da6:	68fb      	ldr	r3, [r7, #12]
 8018da8:	891b      	ldrh	r3, [r3, #8]
 8018daa:	461d      	mov	r5, r3
 8018dac:	68fb      	ldr	r3, [r7, #12]
 8018dae:	68db      	ldr	r3, [r3, #12]
 8018db0:	899b      	ldrh	r3, [r3, #12]
 8018db2:	b29b      	uxth	r3, r3
 8018db4:	4618      	mov	r0, r3
 8018db6:	f7f8 fe81 	bl	8011abc <lwip_htons>
 8018dba:	4603      	mov	r3, r0
 8018dbc:	b2db      	uxtb	r3, r3
 8018dbe:	f003 0303 	and.w	r3, r3, #3
 8018dc2:	2b00      	cmp	r3, #0
 8018dc4:	d001      	beq.n	8018dca <tcp_rexmit_rto_prepare+0xba>
 8018dc6:	2301      	movs	r3, #1
 8018dc8:	e000      	b.n	8018dcc <tcp_rexmit_rto_prepare+0xbc>
 8018dca:	2300      	movs	r3, #0
 8018dcc:	442b      	add	r3, r5
 8018dce:	18e2      	adds	r2, r4, r3
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8018dd4:	687b      	ldr	r3, [r7, #4]
 8018dd6:	2200      	movs	r2, #0
 8018dd8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8018dda:	2300      	movs	r3, #0
}
 8018ddc:	4618      	mov	r0, r3
 8018dde:	3710      	adds	r7, #16
 8018de0:	46bd      	mov	sp, r7
 8018de2:	bdb0      	pop	{r4, r5, r7, pc}
 8018de4:	0802089c 	.word	0x0802089c
 8018de8:	08020ed8 	.word	0x08020ed8
 8018dec:	080208f0 	.word	0x080208f0

08018df0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8018df0:	b580      	push	{r7, lr}
 8018df2:	b082      	sub	sp, #8
 8018df4:	af00      	add	r7, sp, #0
 8018df6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	2b00      	cmp	r3, #0
 8018dfc:	d106      	bne.n	8018e0c <tcp_rexmit_rto_commit+0x1c>
 8018dfe:	4b0d      	ldr	r3, [pc, #52]	; (8018e34 <tcp_rexmit_rto_commit+0x44>)
 8018e00:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8018e04:	490c      	ldr	r1, [pc, #48]	; (8018e38 <tcp_rexmit_rto_commit+0x48>)
 8018e06:	480d      	ldr	r0, [pc, #52]	; (8018e3c <tcp_rexmit_rto_commit+0x4c>)
 8018e08:	f004 f954 	bl	801d0b4 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018e12:	2bff      	cmp	r3, #255	; 0xff
 8018e14:	d007      	beq.n	8018e26 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018e1c:	3301      	adds	r3, #1
 8018e1e:	b2da      	uxtb	r2, r3
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8018e26:	6878      	ldr	r0, [r7, #4]
 8018e28:	f7ff fc80 	bl	801872c <tcp_output>
}
 8018e2c:	bf00      	nop
 8018e2e:	3708      	adds	r7, #8
 8018e30:	46bd      	mov	sp, r7
 8018e32:	bd80      	pop	{r7, pc}
 8018e34:	0802089c 	.word	0x0802089c
 8018e38:	08020efc 	.word	0x08020efc
 8018e3c:	080208f0 	.word	0x080208f0

08018e40 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8018e40:	b580      	push	{r7, lr}
 8018e42:	b082      	sub	sp, #8
 8018e44:	af00      	add	r7, sp, #0
 8018e46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	2b00      	cmp	r3, #0
 8018e4c:	d106      	bne.n	8018e5c <tcp_rexmit_rto+0x1c>
 8018e4e:	4b0a      	ldr	r3, [pc, #40]	; (8018e78 <tcp_rexmit_rto+0x38>)
 8018e50:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8018e54:	4909      	ldr	r1, [pc, #36]	; (8018e7c <tcp_rexmit_rto+0x3c>)
 8018e56:	480a      	ldr	r0, [pc, #40]	; (8018e80 <tcp_rexmit_rto+0x40>)
 8018e58:	f004 f92c 	bl	801d0b4 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8018e5c:	6878      	ldr	r0, [r7, #4]
 8018e5e:	f7ff ff57 	bl	8018d10 <tcp_rexmit_rto_prepare>
 8018e62:	4603      	mov	r3, r0
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d102      	bne.n	8018e6e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8018e68:	6878      	ldr	r0, [r7, #4]
 8018e6a:	f7ff ffc1 	bl	8018df0 <tcp_rexmit_rto_commit>
  }
}
 8018e6e:	bf00      	nop
 8018e70:	3708      	adds	r7, #8
 8018e72:	46bd      	mov	sp, r7
 8018e74:	bd80      	pop	{r7, pc}
 8018e76:	bf00      	nop
 8018e78:	0802089c 	.word	0x0802089c
 8018e7c:	08020f20 	.word	0x08020f20
 8018e80:	080208f0 	.word	0x080208f0

08018e84 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8018e84:	b590      	push	{r4, r7, lr}
 8018e86:	b085      	sub	sp, #20
 8018e88:	af00      	add	r7, sp, #0
 8018e8a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	2b00      	cmp	r3, #0
 8018e90:	d106      	bne.n	8018ea0 <tcp_rexmit+0x1c>
 8018e92:	4b2f      	ldr	r3, [pc, #188]	; (8018f50 <tcp_rexmit+0xcc>)
 8018e94:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8018e98:	492e      	ldr	r1, [pc, #184]	; (8018f54 <tcp_rexmit+0xd0>)
 8018e9a:	482f      	ldr	r0, [pc, #188]	; (8018f58 <tcp_rexmit+0xd4>)
 8018e9c:	f004 f90a 	bl	801d0b4 <iprintf>

  if (pcb->unacked == NULL) {
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018ea4:	2b00      	cmp	r3, #0
 8018ea6:	d102      	bne.n	8018eae <tcp_rexmit+0x2a>
    return ERR_VAL;
 8018ea8:	f06f 0305 	mvn.w	r3, #5
 8018eac:	e04c      	b.n	8018f48 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8018eae:	687b      	ldr	r3, [r7, #4]
 8018eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018eb2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8018eb4:	68b8      	ldr	r0, [r7, #8]
 8018eb6:	f7ff fe2d 	bl	8018b14 <tcp_output_segment_busy>
 8018eba:	4603      	mov	r3, r0
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	d002      	beq.n	8018ec6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8018ec0:	f06f 0305 	mvn.w	r3, #5
 8018ec4:	e040      	b.n	8018f48 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8018ec6:	68bb      	ldr	r3, [r7, #8]
 8018ec8:	681a      	ldr	r2, [r3, #0]
 8018eca:	687b      	ldr	r3, [r7, #4]
 8018ecc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8018ece:	687b      	ldr	r3, [r7, #4]
 8018ed0:	336c      	adds	r3, #108	; 0x6c
 8018ed2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018ed4:	e002      	b.n	8018edc <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8018ed6:	68fb      	ldr	r3, [r7, #12]
 8018ed8:	681b      	ldr	r3, [r3, #0]
 8018eda:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018edc:	68fb      	ldr	r3, [r7, #12]
 8018ede:	681b      	ldr	r3, [r3, #0]
 8018ee0:	2b00      	cmp	r3, #0
 8018ee2:	d011      	beq.n	8018f08 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018ee4:	68fb      	ldr	r3, [r7, #12]
 8018ee6:	681b      	ldr	r3, [r3, #0]
 8018ee8:	68db      	ldr	r3, [r3, #12]
 8018eea:	685b      	ldr	r3, [r3, #4]
 8018eec:	4618      	mov	r0, r3
 8018eee:	f7f8 fdfa 	bl	8011ae6 <lwip_htonl>
 8018ef2:	4604      	mov	r4, r0
 8018ef4:	68bb      	ldr	r3, [r7, #8]
 8018ef6:	68db      	ldr	r3, [r3, #12]
 8018ef8:	685b      	ldr	r3, [r3, #4]
 8018efa:	4618      	mov	r0, r3
 8018efc:	f7f8 fdf3 	bl	8011ae6 <lwip_htonl>
 8018f00:	4603      	mov	r3, r0
 8018f02:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8018f04:	2b00      	cmp	r3, #0
 8018f06:	dbe6      	blt.n	8018ed6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8018f08:	68fb      	ldr	r3, [r7, #12]
 8018f0a:	681a      	ldr	r2, [r3, #0]
 8018f0c:	68bb      	ldr	r3, [r7, #8]
 8018f0e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8018f10:	68fb      	ldr	r3, [r7, #12]
 8018f12:	68ba      	ldr	r2, [r7, #8]
 8018f14:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8018f16:	68bb      	ldr	r3, [r7, #8]
 8018f18:	681b      	ldr	r3, [r3, #0]
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	d103      	bne.n	8018f26 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8018f1e:	687b      	ldr	r3, [r7, #4]
 8018f20:	2200      	movs	r2, #0
 8018f22:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018f2c:	2bff      	cmp	r3, #255	; 0xff
 8018f2e:	d007      	beq.n	8018f40 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8018f30:	687b      	ldr	r3, [r7, #4]
 8018f32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018f36:	3301      	adds	r3, #1
 8018f38:	b2da      	uxtb	r2, r3
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	2200      	movs	r2, #0
 8018f44:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8018f46:	2300      	movs	r3, #0
}
 8018f48:	4618      	mov	r0, r3
 8018f4a:	3714      	adds	r7, #20
 8018f4c:	46bd      	mov	sp, r7
 8018f4e:	bd90      	pop	{r4, r7, pc}
 8018f50:	0802089c 	.word	0x0802089c
 8018f54:	08020f3c 	.word	0x08020f3c
 8018f58:	080208f0 	.word	0x080208f0

08018f5c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8018f5c:	b580      	push	{r7, lr}
 8018f5e:	b082      	sub	sp, #8
 8018f60:	af00      	add	r7, sp, #0
 8018f62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8018f64:	687b      	ldr	r3, [r7, #4]
 8018f66:	2b00      	cmp	r3, #0
 8018f68:	d106      	bne.n	8018f78 <tcp_rexmit_fast+0x1c>
 8018f6a:	4b2a      	ldr	r3, [pc, #168]	; (8019014 <tcp_rexmit_fast+0xb8>)
 8018f6c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8018f70:	4929      	ldr	r1, [pc, #164]	; (8019018 <tcp_rexmit_fast+0xbc>)
 8018f72:	482a      	ldr	r0, [pc, #168]	; (801901c <tcp_rexmit_fast+0xc0>)
 8018f74:	f004 f89e 	bl	801d0b4 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018f7c:	2b00      	cmp	r3, #0
 8018f7e:	d044      	beq.n	801900a <tcp_rexmit_fast+0xae>
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	8b5b      	ldrh	r3, [r3, #26]
 8018f84:	f003 0304 	and.w	r3, r3, #4
 8018f88:	2b00      	cmp	r3, #0
 8018f8a:	d13e      	bne.n	801900a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8018f8c:	6878      	ldr	r0, [r7, #4]
 8018f8e:	f7ff ff79 	bl	8018e84 <tcp_rexmit>
 8018f92:	4603      	mov	r3, r0
 8018f94:	2b00      	cmp	r3, #0
 8018f96:	d138      	bne.n	801900a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018f9e:	687b      	ldr	r3, [r7, #4]
 8018fa0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018fa4:	4293      	cmp	r3, r2
 8018fa6:	bf28      	it	cs
 8018fa8:	4613      	movcs	r3, r2
 8018faa:	b29b      	uxth	r3, r3
 8018fac:	0fda      	lsrs	r2, r3, #31
 8018fae:	4413      	add	r3, r2
 8018fb0:	105b      	asrs	r3, r3, #1
 8018fb2:	b29a      	uxth	r2, r3
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8018fba:	687b      	ldr	r3, [r7, #4]
 8018fbc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8018fc0:	461a      	mov	r2, r3
 8018fc2:	687b      	ldr	r3, [r7, #4]
 8018fc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018fc6:	005b      	lsls	r3, r3, #1
 8018fc8:	429a      	cmp	r2, r3
 8018fca:	d206      	bcs.n	8018fda <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8018fcc:	687b      	ldr	r3, [r7, #4]
 8018fce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018fd0:	005b      	lsls	r3, r3, #1
 8018fd2:	b29a      	uxth	r2, r3
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8018fda:	687b      	ldr	r3, [r7, #4]
 8018fdc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8018fe0:	687b      	ldr	r3, [r7, #4]
 8018fe2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018fe4:	4619      	mov	r1, r3
 8018fe6:	0049      	lsls	r1, r1, #1
 8018fe8:	440b      	add	r3, r1
 8018fea:	b29b      	uxth	r3, r3
 8018fec:	4413      	add	r3, r2
 8018fee:	b29a      	uxth	r2, r3
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8018ff6:	687b      	ldr	r3, [r7, #4]
 8018ff8:	8b5b      	ldrh	r3, [r3, #26]
 8018ffa:	f043 0304 	orr.w	r3, r3, #4
 8018ffe:	b29a      	uxth	r2, r3
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	2200      	movs	r2, #0
 8019008:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801900a:	bf00      	nop
 801900c:	3708      	adds	r7, #8
 801900e:	46bd      	mov	sp, r7
 8019010:	bd80      	pop	{r7, pc}
 8019012:	bf00      	nop
 8019014:	0802089c 	.word	0x0802089c
 8019018:	08020f54 	.word	0x08020f54
 801901c:	080208f0 	.word	0x080208f0

08019020 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8019020:	b580      	push	{r7, lr}
 8019022:	b086      	sub	sp, #24
 8019024:	af00      	add	r7, sp, #0
 8019026:	60f8      	str	r0, [r7, #12]
 8019028:	607b      	str	r3, [r7, #4]
 801902a:	460b      	mov	r3, r1
 801902c:	817b      	strh	r3, [r7, #10]
 801902e:	4613      	mov	r3, r2
 8019030:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8019032:	897a      	ldrh	r2, [r7, #10]
 8019034:	893b      	ldrh	r3, [r7, #8]
 8019036:	4413      	add	r3, r2
 8019038:	b29b      	uxth	r3, r3
 801903a:	3314      	adds	r3, #20
 801903c:	b29b      	uxth	r3, r3
 801903e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019042:	4619      	mov	r1, r3
 8019044:	2022      	movs	r0, #34	; 0x22
 8019046:	f7f9 fd9d 	bl	8012b84 <pbuf_alloc>
 801904a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801904c:	697b      	ldr	r3, [r7, #20]
 801904e:	2b00      	cmp	r3, #0
 8019050:	d04d      	beq.n	80190ee <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8019052:	897b      	ldrh	r3, [r7, #10]
 8019054:	3313      	adds	r3, #19
 8019056:	697a      	ldr	r2, [r7, #20]
 8019058:	8952      	ldrh	r2, [r2, #10]
 801905a:	4293      	cmp	r3, r2
 801905c:	db06      	blt.n	801906c <tcp_output_alloc_header_common+0x4c>
 801905e:	4b26      	ldr	r3, [pc, #152]	; (80190f8 <tcp_output_alloc_header_common+0xd8>)
 8019060:	f240 7223 	movw	r2, #1827	; 0x723
 8019064:	4925      	ldr	r1, [pc, #148]	; (80190fc <tcp_output_alloc_header_common+0xdc>)
 8019066:	4826      	ldr	r0, [pc, #152]	; (8019100 <tcp_output_alloc_header_common+0xe0>)
 8019068:	f004 f824 	bl	801d0b4 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801906c:	697b      	ldr	r3, [r7, #20]
 801906e:	685b      	ldr	r3, [r3, #4]
 8019070:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8019072:	8c3b      	ldrh	r3, [r7, #32]
 8019074:	4618      	mov	r0, r3
 8019076:	f7f8 fd21 	bl	8011abc <lwip_htons>
 801907a:	4603      	mov	r3, r0
 801907c:	461a      	mov	r2, r3
 801907e:	693b      	ldr	r3, [r7, #16]
 8019080:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8019082:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019084:	4618      	mov	r0, r3
 8019086:	f7f8 fd19 	bl	8011abc <lwip_htons>
 801908a:	4603      	mov	r3, r0
 801908c:	461a      	mov	r2, r3
 801908e:	693b      	ldr	r3, [r7, #16]
 8019090:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8019092:	693b      	ldr	r3, [r7, #16]
 8019094:	687a      	ldr	r2, [r7, #4]
 8019096:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8019098:	68f8      	ldr	r0, [r7, #12]
 801909a:	f7f8 fd24 	bl	8011ae6 <lwip_htonl>
 801909e:	4602      	mov	r2, r0
 80190a0:	693b      	ldr	r3, [r7, #16]
 80190a2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80190a4:	897b      	ldrh	r3, [r7, #10]
 80190a6:	089b      	lsrs	r3, r3, #2
 80190a8:	b29b      	uxth	r3, r3
 80190aa:	3305      	adds	r3, #5
 80190ac:	b29b      	uxth	r3, r3
 80190ae:	031b      	lsls	r3, r3, #12
 80190b0:	b29a      	uxth	r2, r3
 80190b2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80190b6:	b29b      	uxth	r3, r3
 80190b8:	4313      	orrs	r3, r2
 80190ba:	b29b      	uxth	r3, r3
 80190bc:	4618      	mov	r0, r3
 80190be:	f7f8 fcfd 	bl	8011abc <lwip_htons>
 80190c2:	4603      	mov	r3, r0
 80190c4:	461a      	mov	r2, r3
 80190c6:	693b      	ldr	r3, [r7, #16]
 80190c8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80190ca:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80190cc:	4618      	mov	r0, r3
 80190ce:	f7f8 fcf5 	bl	8011abc <lwip_htons>
 80190d2:	4603      	mov	r3, r0
 80190d4:	461a      	mov	r2, r3
 80190d6:	693b      	ldr	r3, [r7, #16]
 80190d8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80190da:	693b      	ldr	r3, [r7, #16]
 80190dc:	2200      	movs	r2, #0
 80190de:	741a      	strb	r2, [r3, #16]
 80190e0:	2200      	movs	r2, #0
 80190e2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80190e4:	693b      	ldr	r3, [r7, #16]
 80190e6:	2200      	movs	r2, #0
 80190e8:	749a      	strb	r2, [r3, #18]
 80190ea:	2200      	movs	r2, #0
 80190ec:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80190ee:	697b      	ldr	r3, [r7, #20]
}
 80190f0:	4618      	mov	r0, r3
 80190f2:	3718      	adds	r7, #24
 80190f4:	46bd      	mov	sp, r7
 80190f6:	bd80      	pop	{r7, pc}
 80190f8:	0802089c 	.word	0x0802089c
 80190fc:	08020f74 	.word	0x08020f74
 8019100:	080208f0 	.word	0x080208f0

08019104 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8019104:	b5b0      	push	{r4, r5, r7, lr}
 8019106:	b08a      	sub	sp, #40	; 0x28
 8019108:	af04      	add	r7, sp, #16
 801910a:	60f8      	str	r0, [r7, #12]
 801910c:	607b      	str	r3, [r7, #4]
 801910e:	460b      	mov	r3, r1
 8019110:	817b      	strh	r3, [r7, #10]
 8019112:	4613      	mov	r3, r2
 8019114:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8019116:	68fb      	ldr	r3, [r7, #12]
 8019118:	2b00      	cmp	r3, #0
 801911a:	d106      	bne.n	801912a <tcp_output_alloc_header+0x26>
 801911c:	4b15      	ldr	r3, [pc, #84]	; (8019174 <tcp_output_alloc_header+0x70>)
 801911e:	f240 7242 	movw	r2, #1858	; 0x742
 8019122:	4915      	ldr	r1, [pc, #84]	; (8019178 <tcp_output_alloc_header+0x74>)
 8019124:	4815      	ldr	r0, [pc, #84]	; (801917c <tcp_output_alloc_header+0x78>)
 8019126:	f003 ffc5 	bl	801d0b4 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801912a:	68fb      	ldr	r3, [r7, #12]
 801912c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801912e:	68fb      	ldr	r3, [r7, #12]
 8019130:	8adb      	ldrh	r3, [r3, #22]
 8019132:	68fa      	ldr	r2, [r7, #12]
 8019134:	8b12      	ldrh	r2, [r2, #24]
 8019136:	68f9      	ldr	r1, [r7, #12]
 8019138:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801913a:	893d      	ldrh	r5, [r7, #8]
 801913c:	897c      	ldrh	r4, [r7, #10]
 801913e:	9103      	str	r1, [sp, #12]
 8019140:	2110      	movs	r1, #16
 8019142:	9102      	str	r1, [sp, #8]
 8019144:	9201      	str	r2, [sp, #4]
 8019146:	9300      	str	r3, [sp, #0]
 8019148:	687b      	ldr	r3, [r7, #4]
 801914a:	462a      	mov	r2, r5
 801914c:	4621      	mov	r1, r4
 801914e:	f7ff ff67 	bl	8019020 <tcp_output_alloc_header_common>
 8019152:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8019154:	697b      	ldr	r3, [r7, #20]
 8019156:	2b00      	cmp	r3, #0
 8019158:	d006      	beq.n	8019168 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801915a:	68fb      	ldr	r3, [r7, #12]
 801915c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801915e:	68fa      	ldr	r2, [r7, #12]
 8019160:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8019162:	441a      	add	r2, r3
 8019164:	68fb      	ldr	r3, [r7, #12]
 8019166:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8019168:	697b      	ldr	r3, [r7, #20]
}
 801916a:	4618      	mov	r0, r3
 801916c:	3718      	adds	r7, #24
 801916e:	46bd      	mov	sp, r7
 8019170:	bdb0      	pop	{r4, r5, r7, pc}
 8019172:	bf00      	nop
 8019174:	0802089c 	.word	0x0802089c
 8019178:	08020fa4 	.word	0x08020fa4
 801917c:	080208f0 	.word	0x080208f0

08019180 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8019180:	b580      	push	{r7, lr}
 8019182:	b088      	sub	sp, #32
 8019184:	af00      	add	r7, sp, #0
 8019186:	60f8      	str	r0, [r7, #12]
 8019188:	60b9      	str	r1, [r7, #8]
 801918a:	4611      	mov	r1, r2
 801918c:	461a      	mov	r2, r3
 801918e:	460b      	mov	r3, r1
 8019190:	71fb      	strb	r3, [r7, #7]
 8019192:	4613      	mov	r3, r2
 8019194:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8019196:	2300      	movs	r3, #0
 8019198:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801919a:	68bb      	ldr	r3, [r7, #8]
 801919c:	2b00      	cmp	r3, #0
 801919e:	d106      	bne.n	80191ae <tcp_output_fill_options+0x2e>
 80191a0:	4b13      	ldr	r3, [pc, #76]	; (80191f0 <tcp_output_fill_options+0x70>)
 80191a2:	f240 7256 	movw	r2, #1878	; 0x756
 80191a6:	4913      	ldr	r1, [pc, #76]	; (80191f4 <tcp_output_fill_options+0x74>)
 80191a8:	4813      	ldr	r0, [pc, #76]	; (80191f8 <tcp_output_fill_options+0x78>)
 80191aa:	f003 ff83 	bl	801d0b4 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80191ae:	68bb      	ldr	r3, [r7, #8]
 80191b0:	685b      	ldr	r3, [r3, #4]
 80191b2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80191b4:	69bb      	ldr	r3, [r7, #24]
 80191b6:	3314      	adds	r3, #20
 80191b8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80191ba:	69bb      	ldr	r3, [r7, #24]
 80191bc:	f103 0214 	add.w	r2, r3, #20
 80191c0:	8bfb      	ldrh	r3, [r7, #30]
 80191c2:	009b      	lsls	r3, r3, #2
 80191c4:	4619      	mov	r1, r3
 80191c6:	79fb      	ldrb	r3, [r7, #7]
 80191c8:	009b      	lsls	r3, r3, #2
 80191ca:	f003 0304 	and.w	r3, r3, #4
 80191ce:	440b      	add	r3, r1
 80191d0:	4413      	add	r3, r2
 80191d2:	697a      	ldr	r2, [r7, #20]
 80191d4:	429a      	cmp	r2, r3
 80191d6:	d006      	beq.n	80191e6 <tcp_output_fill_options+0x66>
 80191d8:	4b05      	ldr	r3, [pc, #20]	; (80191f0 <tcp_output_fill_options+0x70>)
 80191da:	f240 7275 	movw	r2, #1909	; 0x775
 80191de:	4907      	ldr	r1, [pc, #28]	; (80191fc <tcp_output_fill_options+0x7c>)
 80191e0:	4805      	ldr	r0, [pc, #20]	; (80191f8 <tcp_output_fill_options+0x78>)
 80191e2:	f003 ff67 	bl	801d0b4 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80191e6:	bf00      	nop
 80191e8:	3720      	adds	r7, #32
 80191ea:	46bd      	mov	sp, r7
 80191ec:	bd80      	pop	{r7, pc}
 80191ee:	bf00      	nop
 80191f0:	0802089c 	.word	0x0802089c
 80191f4:	08020fcc 	.word	0x08020fcc
 80191f8:	080208f0 	.word	0x080208f0
 80191fc:	08020ec4 	.word	0x08020ec4

08019200 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8019200:	b580      	push	{r7, lr}
 8019202:	b08a      	sub	sp, #40	; 0x28
 8019204:	af04      	add	r7, sp, #16
 8019206:	60f8      	str	r0, [r7, #12]
 8019208:	60b9      	str	r1, [r7, #8]
 801920a:	607a      	str	r2, [r7, #4]
 801920c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801920e:	68bb      	ldr	r3, [r7, #8]
 8019210:	2b00      	cmp	r3, #0
 8019212:	d106      	bne.n	8019222 <tcp_output_control_segment+0x22>
 8019214:	4b1c      	ldr	r3, [pc, #112]	; (8019288 <tcp_output_control_segment+0x88>)
 8019216:	f240 7287 	movw	r2, #1927	; 0x787
 801921a:	491c      	ldr	r1, [pc, #112]	; (801928c <tcp_output_control_segment+0x8c>)
 801921c:	481c      	ldr	r0, [pc, #112]	; (8019290 <tcp_output_control_segment+0x90>)
 801921e:	f003 ff49 	bl	801d0b4 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8019222:	683a      	ldr	r2, [r7, #0]
 8019224:	6879      	ldr	r1, [r7, #4]
 8019226:	68f8      	ldr	r0, [r7, #12]
 8019228:	f7fe fae8 	bl	80177fc <tcp_route>
 801922c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801922e:	693b      	ldr	r3, [r7, #16]
 8019230:	2b00      	cmp	r3, #0
 8019232:	d102      	bne.n	801923a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8019234:	23fc      	movs	r3, #252	; 0xfc
 8019236:	75fb      	strb	r3, [r7, #23]
 8019238:	e01c      	b.n	8019274 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801923a:	68fb      	ldr	r3, [r7, #12]
 801923c:	2b00      	cmp	r3, #0
 801923e:	d006      	beq.n	801924e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8019240:	68fb      	ldr	r3, [r7, #12]
 8019242:	7adb      	ldrb	r3, [r3, #11]
 8019244:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8019246:	68fb      	ldr	r3, [r7, #12]
 8019248:	7a9b      	ldrb	r3, [r3, #10]
 801924a:	757b      	strb	r3, [r7, #21]
 801924c:	e003      	b.n	8019256 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801924e:	23ff      	movs	r3, #255	; 0xff
 8019250:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8019252:	2300      	movs	r3, #0
 8019254:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8019256:	7dba      	ldrb	r2, [r7, #22]
 8019258:	693b      	ldr	r3, [r7, #16]
 801925a:	9302      	str	r3, [sp, #8]
 801925c:	2306      	movs	r3, #6
 801925e:	9301      	str	r3, [sp, #4]
 8019260:	7d7b      	ldrb	r3, [r7, #21]
 8019262:	9300      	str	r3, [sp, #0]
 8019264:	4613      	mov	r3, r2
 8019266:	683a      	ldr	r2, [r7, #0]
 8019268:	6879      	ldr	r1, [r7, #4]
 801926a:	68b8      	ldr	r0, [r7, #8]
 801926c:	f002 fad0 	bl	801b810 <ip4_output_if>
 8019270:	4603      	mov	r3, r0
 8019272:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8019274:	68b8      	ldr	r0, [r7, #8]
 8019276:	f7f9 ff69 	bl	801314c <pbuf_free>
  return err;
 801927a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801927e:	4618      	mov	r0, r3
 8019280:	3718      	adds	r7, #24
 8019282:	46bd      	mov	sp, r7
 8019284:	bd80      	pop	{r7, pc}
 8019286:	bf00      	nop
 8019288:	0802089c 	.word	0x0802089c
 801928c:	08020ff4 	.word	0x08020ff4
 8019290:	080208f0 	.word	0x080208f0

08019294 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8019294:	b590      	push	{r4, r7, lr}
 8019296:	b08b      	sub	sp, #44	; 0x2c
 8019298:	af04      	add	r7, sp, #16
 801929a:	60f8      	str	r0, [r7, #12]
 801929c:	60b9      	str	r1, [r7, #8]
 801929e:	607a      	str	r2, [r7, #4]
 80192a0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80192a2:	683b      	ldr	r3, [r7, #0]
 80192a4:	2b00      	cmp	r3, #0
 80192a6:	d106      	bne.n	80192b6 <tcp_rst+0x22>
 80192a8:	4b1f      	ldr	r3, [pc, #124]	; (8019328 <tcp_rst+0x94>)
 80192aa:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80192ae:	491f      	ldr	r1, [pc, #124]	; (801932c <tcp_rst+0x98>)
 80192b0:	481f      	ldr	r0, [pc, #124]	; (8019330 <tcp_rst+0x9c>)
 80192b2:	f003 feff 	bl	801d0b4 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80192b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192b8:	2b00      	cmp	r3, #0
 80192ba:	d106      	bne.n	80192ca <tcp_rst+0x36>
 80192bc:	4b1a      	ldr	r3, [pc, #104]	; (8019328 <tcp_rst+0x94>)
 80192be:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80192c2:	491c      	ldr	r1, [pc, #112]	; (8019334 <tcp_rst+0xa0>)
 80192c4:	481a      	ldr	r0, [pc, #104]	; (8019330 <tcp_rst+0x9c>)
 80192c6:	f003 fef5 	bl	801d0b4 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80192ca:	2300      	movs	r3, #0
 80192cc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80192ce:	f246 0308 	movw	r3, #24584	; 0x6008
 80192d2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80192d4:	7dfb      	ldrb	r3, [r7, #23]
 80192d6:	b29c      	uxth	r4, r3
 80192d8:	68b8      	ldr	r0, [r7, #8]
 80192da:	f7f8 fc04 	bl	8011ae6 <lwip_htonl>
 80192de:	4602      	mov	r2, r0
 80192e0:	8abb      	ldrh	r3, [r7, #20]
 80192e2:	9303      	str	r3, [sp, #12]
 80192e4:	2314      	movs	r3, #20
 80192e6:	9302      	str	r3, [sp, #8]
 80192e8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80192ea:	9301      	str	r3, [sp, #4]
 80192ec:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80192ee:	9300      	str	r3, [sp, #0]
 80192f0:	4613      	mov	r3, r2
 80192f2:	2200      	movs	r2, #0
 80192f4:	4621      	mov	r1, r4
 80192f6:	6878      	ldr	r0, [r7, #4]
 80192f8:	f7ff fe92 	bl	8019020 <tcp_output_alloc_header_common>
 80192fc:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80192fe:	693b      	ldr	r3, [r7, #16]
 8019300:	2b00      	cmp	r3, #0
 8019302:	d00c      	beq.n	801931e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019304:	7dfb      	ldrb	r3, [r7, #23]
 8019306:	2200      	movs	r2, #0
 8019308:	6939      	ldr	r1, [r7, #16]
 801930a:	68f8      	ldr	r0, [r7, #12]
 801930c:	f7ff ff38 	bl	8019180 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8019310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019312:	683a      	ldr	r2, [r7, #0]
 8019314:	6939      	ldr	r1, [r7, #16]
 8019316:	68f8      	ldr	r0, [r7, #12]
 8019318:	f7ff ff72 	bl	8019200 <tcp_output_control_segment>
 801931c:	e000      	b.n	8019320 <tcp_rst+0x8c>
    return;
 801931e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8019320:	371c      	adds	r7, #28
 8019322:	46bd      	mov	sp, r7
 8019324:	bd90      	pop	{r4, r7, pc}
 8019326:	bf00      	nop
 8019328:	0802089c 	.word	0x0802089c
 801932c:	08021020 	.word	0x08021020
 8019330:	080208f0 	.word	0x080208f0
 8019334:	0802103c 	.word	0x0802103c

08019338 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8019338:	b590      	push	{r4, r7, lr}
 801933a:	b087      	sub	sp, #28
 801933c:	af00      	add	r7, sp, #0
 801933e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8019340:	2300      	movs	r3, #0
 8019342:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8019344:	2300      	movs	r3, #0
 8019346:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8019348:	687b      	ldr	r3, [r7, #4]
 801934a:	2b00      	cmp	r3, #0
 801934c:	d106      	bne.n	801935c <tcp_send_empty_ack+0x24>
 801934e:	4b28      	ldr	r3, [pc, #160]	; (80193f0 <tcp_send_empty_ack+0xb8>)
 8019350:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8019354:	4927      	ldr	r1, [pc, #156]	; (80193f4 <tcp_send_empty_ack+0xbc>)
 8019356:	4828      	ldr	r0, [pc, #160]	; (80193f8 <tcp_send_empty_ack+0xc0>)
 8019358:	f003 feac 	bl	801d0b4 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801935c:	7dfb      	ldrb	r3, [r7, #23]
 801935e:	009b      	lsls	r3, r3, #2
 8019360:	b2db      	uxtb	r3, r3
 8019362:	f003 0304 	and.w	r3, r3, #4
 8019366:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8019368:	7d7b      	ldrb	r3, [r7, #21]
 801936a:	b29c      	uxth	r4, r3
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019370:	4618      	mov	r0, r3
 8019372:	f7f8 fbb8 	bl	8011ae6 <lwip_htonl>
 8019376:	4603      	mov	r3, r0
 8019378:	2200      	movs	r2, #0
 801937a:	4621      	mov	r1, r4
 801937c:	6878      	ldr	r0, [r7, #4]
 801937e:	f7ff fec1 	bl	8019104 <tcp_output_alloc_header>
 8019382:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019384:	693b      	ldr	r3, [r7, #16]
 8019386:	2b00      	cmp	r3, #0
 8019388:	d109      	bne.n	801939e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801938a:	687b      	ldr	r3, [r7, #4]
 801938c:	8b5b      	ldrh	r3, [r3, #26]
 801938e:	f043 0303 	orr.w	r3, r3, #3
 8019392:	b29a      	uxth	r2, r3
 8019394:	687b      	ldr	r3, [r7, #4]
 8019396:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8019398:	f06f 0301 	mvn.w	r3, #1
 801939c:	e023      	b.n	80193e6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801939e:	7dbb      	ldrb	r3, [r7, #22]
 80193a0:	7dfa      	ldrb	r2, [r7, #23]
 80193a2:	6939      	ldr	r1, [r7, #16]
 80193a4:	6878      	ldr	r0, [r7, #4]
 80193a6:	f7ff feeb 	bl	8019180 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80193aa:	687a      	ldr	r2, [r7, #4]
 80193ac:	687b      	ldr	r3, [r7, #4]
 80193ae:	3304      	adds	r3, #4
 80193b0:	6939      	ldr	r1, [r7, #16]
 80193b2:	6878      	ldr	r0, [r7, #4]
 80193b4:	f7ff ff24 	bl	8019200 <tcp_output_control_segment>
 80193b8:	4603      	mov	r3, r0
 80193ba:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80193bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	d007      	beq.n	80193d4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80193c4:	687b      	ldr	r3, [r7, #4]
 80193c6:	8b5b      	ldrh	r3, [r3, #26]
 80193c8:	f043 0303 	orr.w	r3, r3, #3
 80193cc:	b29a      	uxth	r2, r3
 80193ce:	687b      	ldr	r3, [r7, #4]
 80193d0:	835a      	strh	r2, [r3, #26]
 80193d2:	e006      	b.n	80193e2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80193d4:	687b      	ldr	r3, [r7, #4]
 80193d6:	8b5b      	ldrh	r3, [r3, #26]
 80193d8:	f023 0303 	bic.w	r3, r3, #3
 80193dc:	b29a      	uxth	r2, r3
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80193e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80193e6:	4618      	mov	r0, r3
 80193e8:	371c      	adds	r7, #28
 80193ea:	46bd      	mov	sp, r7
 80193ec:	bd90      	pop	{r4, r7, pc}
 80193ee:	bf00      	nop
 80193f0:	0802089c 	.word	0x0802089c
 80193f4:	08021058 	.word	0x08021058
 80193f8:	080208f0 	.word	0x080208f0

080193fc <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80193fc:	b590      	push	{r4, r7, lr}
 80193fe:	b087      	sub	sp, #28
 8019400:	af00      	add	r7, sp, #0
 8019402:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019404:	2300      	movs	r3, #0
 8019406:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8019408:	687b      	ldr	r3, [r7, #4]
 801940a:	2b00      	cmp	r3, #0
 801940c:	d106      	bne.n	801941c <tcp_keepalive+0x20>
 801940e:	4b18      	ldr	r3, [pc, #96]	; (8019470 <tcp_keepalive+0x74>)
 8019410:	f640 0224 	movw	r2, #2084	; 0x824
 8019414:	4917      	ldr	r1, [pc, #92]	; (8019474 <tcp_keepalive+0x78>)
 8019416:	4818      	ldr	r0, [pc, #96]	; (8019478 <tcp_keepalive+0x7c>)
 8019418:	f003 fe4c 	bl	801d0b4 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801941c:	7dfb      	ldrb	r3, [r7, #23]
 801941e:	b29c      	uxth	r4, r3
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019424:	3b01      	subs	r3, #1
 8019426:	4618      	mov	r0, r3
 8019428:	f7f8 fb5d 	bl	8011ae6 <lwip_htonl>
 801942c:	4603      	mov	r3, r0
 801942e:	2200      	movs	r2, #0
 8019430:	4621      	mov	r1, r4
 8019432:	6878      	ldr	r0, [r7, #4]
 8019434:	f7ff fe66 	bl	8019104 <tcp_output_alloc_header>
 8019438:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801943a:	693b      	ldr	r3, [r7, #16]
 801943c:	2b00      	cmp	r3, #0
 801943e:	d102      	bne.n	8019446 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8019440:	f04f 33ff 	mov.w	r3, #4294967295
 8019444:	e010      	b.n	8019468 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019446:	7dfb      	ldrb	r3, [r7, #23]
 8019448:	2200      	movs	r2, #0
 801944a:	6939      	ldr	r1, [r7, #16]
 801944c:	6878      	ldr	r0, [r7, #4]
 801944e:	f7ff fe97 	bl	8019180 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019452:	687a      	ldr	r2, [r7, #4]
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	3304      	adds	r3, #4
 8019458:	6939      	ldr	r1, [r7, #16]
 801945a:	6878      	ldr	r0, [r7, #4]
 801945c:	f7ff fed0 	bl	8019200 <tcp_output_control_segment>
 8019460:	4603      	mov	r3, r0
 8019462:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8019464:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019468:	4618      	mov	r0, r3
 801946a:	371c      	adds	r7, #28
 801946c:	46bd      	mov	sp, r7
 801946e:	bd90      	pop	{r4, r7, pc}
 8019470:	0802089c 	.word	0x0802089c
 8019474:	08021078 	.word	0x08021078
 8019478:	080208f0 	.word	0x080208f0

0801947c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801947c:	b590      	push	{r4, r7, lr}
 801947e:	b08b      	sub	sp, #44	; 0x2c
 8019480:	af00      	add	r7, sp, #0
 8019482:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019484:	2300      	movs	r3, #0
 8019486:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801948a:	687b      	ldr	r3, [r7, #4]
 801948c:	2b00      	cmp	r3, #0
 801948e:	d106      	bne.n	801949e <tcp_zero_window_probe+0x22>
 8019490:	4b4c      	ldr	r3, [pc, #304]	; (80195c4 <tcp_zero_window_probe+0x148>)
 8019492:	f640 024f 	movw	r2, #2127	; 0x84f
 8019496:	494c      	ldr	r1, [pc, #304]	; (80195c8 <tcp_zero_window_probe+0x14c>)
 8019498:	484c      	ldr	r0, [pc, #304]	; (80195cc <tcp_zero_window_probe+0x150>)
 801949a:	f003 fe0b 	bl	801d0b4 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80194a2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80194a4:	6a3b      	ldr	r3, [r7, #32]
 80194a6:	2b00      	cmp	r3, #0
 80194a8:	d101      	bne.n	80194ae <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80194aa:	2300      	movs	r3, #0
 80194ac:	e086      	b.n	80195bc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80194b4:	2bff      	cmp	r3, #255	; 0xff
 80194b6:	d007      	beq.n	80194c8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80194be:	3301      	adds	r3, #1
 80194c0:	b2da      	uxtb	r2, r3
 80194c2:	687b      	ldr	r3, [r7, #4]
 80194c4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80194c8:	6a3b      	ldr	r3, [r7, #32]
 80194ca:	68db      	ldr	r3, [r3, #12]
 80194cc:	899b      	ldrh	r3, [r3, #12]
 80194ce:	b29b      	uxth	r3, r3
 80194d0:	4618      	mov	r0, r3
 80194d2:	f7f8 faf3 	bl	8011abc <lwip_htons>
 80194d6:	4603      	mov	r3, r0
 80194d8:	b2db      	uxtb	r3, r3
 80194da:	f003 0301 	and.w	r3, r3, #1
 80194de:	2b00      	cmp	r3, #0
 80194e0:	d005      	beq.n	80194ee <tcp_zero_window_probe+0x72>
 80194e2:	6a3b      	ldr	r3, [r7, #32]
 80194e4:	891b      	ldrh	r3, [r3, #8]
 80194e6:	2b00      	cmp	r3, #0
 80194e8:	d101      	bne.n	80194ee <tcp_zero_window_probe+0x72>
 80194ea:	2301      	movs	r3, #1
 80194ec:	e000      	b.n	80194f0 <tcp_zero_window_probe+0x74>
 80194ee:	2300      	movs	r3, #0
 80194f0:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80194f2:	7ffb      	ldrb	r3, [r7, #31]
 80194f4:	2b00      	cmp	r3, #0
 80194f6:	bf0c      	ite	eq
 80194f8:	2301      	moveq	r3, #1
 80194fa:	2300      	movne	r3, #0
 80194fc:	b2db      	uxtb	r3, r3
 80194fe:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8019500:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019504:	b299      	uxth	r1, r3
 8019506:	6a3b      	ldr	r3, [r7, #32]
 8019508:	68db      	ldr	r3, [r3, #12]
 801950a:	685b      	ldr	r3, [r3, #4]
 801950c:	8bba      	ldrh	r2, [r7, #28]
 801950e:	6878      	ldr	r0, [r7, #4]
 8019510:	f7ff fdf8 	bl	8019104 <tcp_output_alloc_header>
 8019514:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8019516:	69bb      	ldr	r3, [r7, #24]
 8019518:	2b00      	cmp	r3, #0
 801951a:	d102      	bne.n	8019522 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801951c:	f04f 33ff 	mov.w	r3, #4294967295
 8019520:	e04c      	b.n	80195bc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8019522:	69bb      	ldr	r3, [r7, #24]
 8019524:	685b      	ldr	r3, [r3, #4]
 8019526:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8019528:	7ffb      	ldrb	r3, [r7, #31]
 801952a:	2b00      	cmp	r3, #0
 801952c:	d011      	beq.n	8019552 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801952e:	697b      	ldr	r3, [r7, #20]
 8019530:	899b      	ldrh	r3, [r3, #12]
 8019532:	b29b      	uxth	r3, r3
 8019534:	b21b      	sxth	r3, r3
 8019536:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801953a:	b21c      	sxth	r4, r3
 801953c:	2011      	movs	r0, #17
 801953e:	f7f8 fabd 	bl	8011abc <lwip_htons>
 8019542:	4603      	mov	r3, r0
 8019544:	b21b      	sxth	r3, r3
 8019546:	4323      	orrs	r3, r4
 8019548:	b21b      	sxth	r3, r3
 801954a:	b29a      	uxth	r2, r3
 801954c:	697b      	ldr	r3, [r7, #20]
 801954e:	819a      	strh	r2, [r3, #12]
 8019550:	e010      	b.n	8019574 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8019552:	69bb      	ldr	r3, [r7, #24]
 8019554:	685b      	ldr	r3, [r3, #4]
 8019556:	3314      	adds	r3, #20
 8019558:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801955a:	6a3b      	ldr	r3, [r7, #32]
 801955c:	6858      	ldr	r0, [r3, #4]
 801955e:	6a3b      	ldr	r3, [r7, #32]
 8019560:	685b      	ldr	r3, [r3, #4]
 8019562:	891a      	ldrh	r2, [r3, #8]
 8019564:	6a3b      	ldr	r3, [r7, #32]
 8019566:	891b      	ldrh	r3, [r3, #8]
 8019568:	1ad3      	subs	r3, r2, r3
 801956a:	b29b      	uxth	r3, r3
 801956c:	2201      	movs	r2, #1
 801956e:	6939      	ldr	r1, [r7, #16]
 8019570:	f7f9 fff2 	bl	8013558 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8019574:	6a3b      	ldr	r3, [r7, #32]
 8019576:	68db      	ldr	r3, [r3, #12]
 8019578:	685b      	ldr	r3, [r3, #4]
 801957a:	4618      	mov	r0, r3
 801957c:	f7f8 fab3 	bl	8011ae6 <lwip_htonl>
 8019580:	4603      	mov	r3, r0
 8019582:	3301      	adds	r3, #1
 8019584:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8019586:	687b      	ldr	r3, [r7, #4]
 8019588:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801958a:	68fb      	ldr	r3, [r7, #12]
 801958c:	1ad3      	subs	r3, r2, r3
 801958e:	2b00      	cmp	r3, #0
 8019590:	da02      	bge.n	8019598 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	68fa      	ldr	r2, [r7, #12]
 8019596:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019598:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801959c:	2200      	movs	r2, #0
 801959e:	69b9      	ldr	r1, [r7, #24]
 80195a0:	6878      	ldr	r0, [r7, #4]
 80195a2:	f7ff fded 	bl	8019180 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80195a6:	687a      	ldr	r2, [r7, #4]
 80195a8:	687b      	ldr	r3, [r7, #4]
 80195aa:	3304      	adds	r3, #4
 80195ac:	69b9      	ldr	r1, [r7, #24]
 80195ae:	6878      	ldr	r0, [r7, #4]
 80195b0:	f7ff fe26 	bl	8019200 <tcp_output_control_segment>
 80195b4:	4603      	mov	r3, r0
 80195b6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80195b8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80195bc:	4618      	mov	r0, r3
 80195be:	372c      	adds	r7, #44	; 0x2c
 80195c0:	46bd      	mov	sp, r7
 80195c2:	bd90      	pop	{r4, r7, pc}
 80195c4:	0802089c 	.word	0x0802089c
 80195c8:	08021094 	.word	0x08021094
 80195cc:	080208f0 	.word	0x080208f0

080195d0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80195d0:	b580      	push	{r7, lr}
 80195d2:	b082      	sub	sp, #8
 80195d4:	af00      	add	r7, sp, #0
 80195d6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80195d8:	f7fa f8ac 	bl	8013734 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80195dc:	4b0a      	ldr	r3, [pc, #40]	; (8019608 <tcpip_tcp_timer+0x38>)
 80195de:	681b      	ldr	r3, [r3, #0]
 80195e0:	2b00      	cmp	r3, #0
 80195e2:	d103      	bne.n	80195ec <tcpip_tcp_timer+0x1c>
 80195e4:	4b09      	ldr	r3, [pc, #36]	; (801960c <tcpip_tcp_timer+0x3c>)
 80195e6:	681b      	ldr	r3, [r3, #0]
 80195e8:	2b00      	cmp	r3, #0
 80195ea:	d005      	beq.n	80195f8 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80195ec:	2200      	movs	r2, #0
 80195ee:	4908      	ldr	r1, [pc, #32]	; (8019610 <tcpip_tcp_timer+0x40>)
 80195f0:	20fa      	movs	r0, #250	; 0xfa
 80195f2:	f000 f8f3 	bl	80197dc <sys_timeout>
 80195f6:	e003      	b.n	8019600 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80195f8:	4b06      	ldr	r3, [pc, #24]	; (8019614 <tcpip_tcp_timer+0x44>)
 80195fa:	2200      	movs	r2, #0
 80195fc:	601a      	str	r2, [r3, #0]
  }
}
 80195fe:	bf00      	nop
 8019600:	bf00      	nop
 8019602:	3708      	adds	r7, #8
 8019604:	46bd      	mov	sp, r7
 8019606:	bd80      	pop	{r7, pc}
 8019608:	2000ddc8 	.word	0x2000ddc8
 801960c:	2000ddcc 	.word	0x2000ddcc
 8019610:	080195d1 	.word	0x080195d1
 8019614:	2000de14 	.word	0x2000de14

08019618 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8019618:	b580      	push	{r7, lr}
 801961a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801961c:	4b0a      	ldr	r3, [pc, #40]	; (8019648 <tcp_timer_needed+0x30>)
 801961e:	681b      	ldr	r3, [r3, #0]
 8019620:	2b00      	cmp	r3, #0
 8019622:	d10f      	bne.n	8019644 <tcp_timer_needed+0x2c>
 8019624:	4b09      	ldr	r3, [pc, #36]	; (801964c <tcp_timer_needed+0x34>)
 8019626:	681b      	ldr	r3, [r3, #0]
 8019628:	2b00      	cmp	r3, #0
 801962a:	d103      	bne.n	8019634 <tcp_timer_needed+0x1c>
 801962c:	4b08      	ldr	r3, [pc, #32]	; (8019650 <tcp_timer_needed+0x38>)
 801962e:	681b      	ldr	r3, [r3, #0]
 8019630:	2b00      	cmp	r3, #0
 8019632:	d007      	beq.n	8019644 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8019634:	4b04      	ldr	r3, [pc, #16]	; (8019648 <tcp_timer_needed+0x30>)
 8019636:	2201      	movs	r2, #1
 8019638:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801963a:	2200      	movs	r2, #0
 801963c:	4905      	ldr	r1, [pc, #20]	; (8019654 <tcp_timer_needed+0x3c>)
 801963e:	20fa      	movs	r0, #250	; 0xfa
 8019640:	f000 f8cc 	bl	80197dc <sys_timeout>
  }
}
 8019644:	bf00      	nop
 8019646:	bd80      	pop	{r7, pc}
 8019648:	2000de14 	.word	0x2000de14
 801964c:	2000ddc8 	.word	0x2000ddc8
 8019650:	2000ddcc 	.word	0x2000ddcc
 8019654:	080195d1 	.word	0x080195d1

08019658 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8019658:	b580      	push	{r7, lr}
 801965a:	b086      	sub	sp, #24
 801965c:	af00      	add	r7, sp, #0
 801965e:	60f8      	str	r0, [r7, #12]
 8019660:	60b9      	str	r1, [r7, #8]
 8019662:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8019664:	200a      	movs	r0, #10
 8019666:	f7f8 fedf 	bl	8012428 <memp_malloc>
 801966a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801966c:	693b      	ldr	r3, [r7, #16]
 801966e:	2b00      	cmp	r3, #0
 8019670:	d109      	bne.n	8019686 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8019672:	693b      	ldr	r3, [r7, #16]
 8019674:	2b00      	cmp	r3, #0
 8019676:	d151      	bne.n	801971c <sys_timeout_abs+0xc4>
 8019678:	4b2a      	ldr	r3, [pc, #168]	; (8019724 <sys_timeout_abs+0xcc>)
 801967a:	22be      	movs	r2, #190	; 0xbe
 801967c:	492a      	ldr	r1, [pc, #168]	; (8019728 <sys_timeout_abs+0xd0>)
 801967e:	482b      	ldr	r0, [pc, #172]	; (801972c <sys_timeout_abs+0xd4>)
 8019680:	f003 fd18 	bl	801d0b4 <iprintf>
    return;
 8019684:	e04a      	b.n	801971c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8019686:	693b      	ldr	r3, [r7, #16]
 8019688:	2200      	movs	r2, #0
 801968a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801968c:	693b      	ldr	r3, [r7, #16]
 801968e:	68ba      	ldr	r2, [r7, #8]
 8019690:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8019692:	693b      	ldr	r3, [r7, #16]
 8019694:	687a      	ldr	r2, [r7, #4]
 8019696:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8019698:	693b      	ldr	r3, [r7, #16]
 801969a:	68fa      	ldr	r2, [r7, #12]
 801969c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801969e:	4b24      	ldr	r3, [pc, #144]	; (8019730 <sys_timeout_abs+0xd8>)
 80196a0:	681b      	ldr	r3, [r3, #0]
 80196a2:	2b00      	cmp	r3, #0
 80196a4:	d103      	bne.n	80196ae <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80196a6:	4a22      	ldr	r2, [pc, #136]	; (8019730 <sys_timeout_abs+0xd8>)
 80196a8:	693b      	ldr	r3, [r7, #16]
 80196aa:	6013      	str	r3, [r2, #0]
    return;
 80196ac:	e037      	b.n	801971e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80196ae:	693b      	ldr	r3, [r7, #16]
 80196b0:	685a      	ldr	r2, [r3, #4]
 80196b2:	4b1f      	ldr	r3, [pc, #124]	; (8019730 <sys_timeout_abs+0xd8>)
 80196b4:	681b      	ldr	r3, [r3, #0]
 80196b6:	685b      	ldr	r3, [r3, #4]
 80196b8:	1ad3      	subs	r3, r2, r3
 80196ba:	0fdb      	lsrs	r3, r3, #31
 80196bc:	f003 0301 	and.w	r3, r3, #1
 80196c0:	b2db      	uxtb	r3, r3
 80196c2:	2b00      	cmp	r3, #0
 80196c4:	d007      	beq.n	80196d6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80196c6:	4b1a      	ldr	r3, [pc, #104]	; (8019730 <sys_timeout_abs+0xd8>)
 80196c8:	681a      	ldr	r2, [r3, #0]
 80196ca:	693b      	ldr	r3, [r7, #16]
 80196cc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80196ce:	4a18      	ldr	r2, [pc, #96]	; (8019730 <sys_timeout_abs+0xd8>)
 80196d0:	693b      	ldr	r3, [r7, #16]
 80196d2:	6013      	str	r3, [r2, #0]
 80196d4:	e023      	b.n	801971e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80196d6:	4b16      	ldr	r3, [pc, #88]	; (8019730 <sys_timeout_abs+0xd8>)
 80196d8:	681b      	ldr	r3, [r3, #0]
 80196da:	617b      	str	r3, [r7, #20]
 80196dc:	e01a      	b.n	8019714 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80196de:	697b      	ldr	r3, [r7, #20]
 80196e0:	681b      	ldr	r3, [r3, #0]
 80196e2:	2b00      	cmp	r3, #0
 80196e4:	d00b      	beq.n	80196fe <sys_timeout_abs+0xa6>
 80196e6:	693b      	ldr	r3, [r7, #16]
 80196e8:	685a      	ldr	r2, [r3, #4]
 80196ea:	697b      	ldr	r3, [r7, #20]
 80196ec:	681b      	ldr	r3, [r3, #0]
 80196ee:	685b      	ldr	r3, [r3, #4]
 80196f0:	1ad3      	subs	r3, r2, r3
 80196f2:	0fdb      	lsrs	r3, r3, #31
 80196f4:	f003 0301 	and.w	r3, r3, #1
 80196f8:	b2db      	uxtb	r3, r3
 80196fa:	2b00      	cmp	r3, #0
 80196fc:	d007      	beq.n	801970e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80196fe:	697b      	ldr	r3, [r7, #20]
 8019700:	681a      	ldr	r2, [r3, #0]
 8019702:	693b      	ldr	r3, [r7, #16]
 8019704:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8019706:	697b      	ldr	r3, [r7, #20]
 8019708:	693a      	ldr	r2, [r7, #16]
 801970a:	601a      	str	r2, [r3, #0]
        break;
 801970c:	e007      	b.n	801971e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801970e:	697b      	ldr	r3, [r7, #20]
 8019710:	681b      	ldr	r3, [r3, #0]
 8019712:	617b      	str	r3, [r7, #20]
 8019714:	697b      	ldr	r3, [r7, #20]
 8019716:	2b00      	cmp	r3, #0
 8019718:	d1e1      	bne.n	80196de <sys_timeout_abs+0x86>
 801971a:	e000      	b.n	801971e <sys_timeout_abs+0xc6>
    return;
 801971c:	bf00      	nop
      }
    }
  }
}
 801971e:	3718      	adds	r7, #24
 8019720:	46bd      	mov	sp, r7
 8019722:	bd80      	pop	{r7, pc}
 8019724:	080210b8 	.word	0x080210b8
 8019728:	080210ec 	.word	0x080210ec
 801972c:	0802112c 	.word	0x0802112c
 8019730:	2000de0c 	.word	0x2000de0c

08019734 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8019734:	b580      	push	{r7, lr}
 8019736:	b086      	sub	sp, #24
 8019738:	af00      	add	r7, sp, #0
 801973a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8019740:	697b      	ldr	r3, [r7, #20]
 8019742:	685b      	ldr	r3, [r3, #4]
 8019744:	4798      	blx	r3

  now = sys_now();
 8019746:	f7f2 fe91 	bl	800c46c <sys_now>
 801974a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801974c:	697b      	ldr	r3, [r7, #20]
 801974e:	681a      	ldr	r2, [r3, #0]
 8019750:	4b0f      	ldr	r3, [pc, #60]	; (8019790 <lwip_cyclic_timer+0x5c>)
 8019752:	681b      	ldr	r3, [r3, #0]
 8019754:	4413      	add	r3, r2
 8019756:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8019758:	68fa      	ldr	r2, [r7, #12]
 801975a:	693b      	ldr	r3, [r7, #16]
 801975c:	1ad3      	subs	r3, r2, r3
 801975e:	0fdb      	lsrs	r3, r3, #31
 8019760:	f003 0301 	and.w	r3, r3, #1
 8019764:	b2db      	uxtb	r3, r3
 8019766:	2b00      	cmp	r3, #0
 8019768:	d009      	beq.n	801977e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801976a:	697b      	ldr	r3, [r7, #20]
 801976c:	681a      	ldr	r2, [r3, #0]
 801976e:	693b      	ldr	r3, [r7, #16]
 8019770:	4413      	add	r3, r2
 8019772:	687a      	ldr	r2, [r7, #4]
 8019774:	4907      	ldr	r1, [pc, #28]	; (8019794 <lwip_cyclic_timer+0x60>)
 8019776:	4618      	mov	r0, r3
 8019778:	f7ff ff6e 	bl	8019658 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801977c:	e004      	b.n	8019788 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801977e:	687a      	ldr	r2, [r7, #4]
 8019780:	4904      	ldr	r1, [pc, #16]	; (8019794 <lwip_cyclic_timer+0x60>)
 8019782:	68f8      	ldr	r0, [r7, #12]
 8019784:	f7ff ff68 	bl	8019658 <sys_timeout_abs>
}
 8019788:	bf00      	nop
 801978a:	3718      	adds	r7, #24
 801978c:	46bd      	mov	sp, r7
 801978e:	bd80      	pop	{r7, pc}
 8019790:	2000de10 	.word	0x2000de10
 8019794:	08019735 	.word	0x08019735

08019798 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8019798:	b580      	push	{r7, lr}
 801979a:	b082      	sub	sp, #8
 801979c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801979e:	2301      	movs	r3, #1
 80197a0:	607b      	str	r3, [r7, #4]
 80197a2:	e00e      	b.n	80197c2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80197a4:	4a0b      	ldr	r2, [pc, #44]	; (80197d4 <sys_timeouts_init+0x3c>)
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	00db      	lsls	r3, r3, #3
 80197b0:	4a08      	ldr	r2, [pc, #32]	; (80197d4 <sys_timeouts_init+0x3c>)
 80197b2:	4413      	add	r3, r2
 80197b4:	461a      	mov	r2, r3
 80197b6:	4908      	ldr	r1, [pc, #32]	; (80197d8 <sys_timeouts_init+0x40>)
 80197b8:	f000 f810 	bl	80197dc <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80197bc:	687b      	ldr	r3, [r7, #4]
 80197be:	3301      	adds	r3, #1
 80197c0:	607b      	str	r3, [r7, #4]
 80197c2:	687b      	ldr	r3, [r7, #4]
 80197c4:	2b02      	cmp	r3, #2
 80197c6:	d9ed      	bls.n	80197a4 <sys_timeouts_init+0xc>
  }
}
 80197c8:	bf00      	nop
 80197ca:	bf00      	nop
 80197cc:	3708      	adds	r7, #8
 80197ce:	46bd      	mov	sp, r7
 80197d0:	bd80      	pop	{r7, pc}
 80197d2:	bf00      	nop
 80197d4:	08021ce4 	.word	0x08021ce4
 80197d8:	08019735 	.word	0x08019735

080197dc <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80197dc:	b580      	push	{r7, lr}
 80197de:	b086      	sub	sp, #24
 80197e0:	af00      	add	r7, sp, #0
 80197e2:	60f8      	str	r0, [r7, #12]
 80197e4:	60b9      	str	r1, [r7, #8]
 80197e6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80197e8:	68fb      	ldr	r3, [r7, #12]
 80197ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80197ee:	d306      	bcc.n	80197fe <sys_timeout+0x22>
 80197f0:	4b0a      	ldr	r3, [pc, #40]	; (801981c <sys_timeout+0x40>)
 80197f2:	f240 1229 	movw	r2, #297	; 0x129
 80197f6:	490a      	ldr	r1, [pc, #40]	; (8019820 <sys_timeout+0x44>)
 80197f8:	480a      	ldr	r0, [pc, #40]	; (8019824 <sys_timeout+0x48>)
 80197fa:	f003 fc5b 	bl	801d0b4 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80197fe:	f7f2 fe35 	bl	800c46c <sys_now>
 8019802:	4602      	mov	r2, r0
 8019804:	68fb      	ldr	r3, [r7, #12]
 8019806:	4413      	add	r3, r2
 8019808:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801980a:	687a      	ldr	r2, [r7, #4]
 801980c:	68b9      	ldr	r1, [r7, #8]
 801980e:	6978      	ldr	r0, [r7, #20]
 8019810:	f7ff ff22 	bl	8019658 <sys_timeout_abs>
#endif
}
 8019814:	bf00      	nop
 8019816:	3718      	adds	r7, #24
 8019818:	46bd      	mov	sp, r7
 801981a:	bd80      	pop	{r7, pc}
 801981c:	080210b8 	.word	0x080210b8
 8019820:	08021154 	.word	0x08021154
 8019824:	0802112c 	.word	0x0802112c

08019828 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8019828:	b580      	push	{r7, lr}
 801982a:	b084      	sub	sp, #16
 801982c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801982e:	f7f2 fe1d 	bl	800c46c <sys_now>
 8019832:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8019834:	4b17      	ldr	r3, [pc, #92]	; (8019894 <sys_check_timeouts+0x6c>)
 8019836:	681b      	ldr	r3, [r3, #0]
 8019838:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801983a:	68bb      	ldr	r3, [r7, #8]
 801983c:	2b00      	cmp	r3, #0
 801983e:	d022      	beq.n	8019886 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8019840:	68bb      	ldr	r3, [r7, #8]
 8019842:	685b      	ldr	r3, [r3, #4]
 8019844:	68fa      	ldr	r2, [r7, #12]
 8019846:	1ad3      	subs	r3, r2, r3
 8019848:	0fdb      	lsrs	r3, r3, #31
 801984a:	f003 0301 	and.w	r3, r3, #1
 801984e:	b2db      	uxtb	r3, r3
 8019850:	2b00      	cmp	r3, #0
 8019852:	d11a      	bne.n	801988a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8019854:	68bb      	ldr	r3, [r7, #8]
 8019856:	681b      	ldr	r3, [r3, #0]
 8019858:	4a0e      	ldr	r2, [pc, #56]	; (8019894 <sys_check_timeouts+0x6c>)
 801985a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801985c:	68bb      	ldr	r3, [r7, #8]
 801985e:	689b      	ldr	r3, [r3, #8]
 8019860:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8019862:	68bb      	ldr	r3, [r7, #8]
 8019864:	68db      	ldr	r3, [r3, #12]
 8019866:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8019868:	68bb      	ldr	r3, [r7, #8]
 801986a:	685b      	ldr	r3, [r3, #4]
 801986c:	4a0a      	ldr	r2, [pc, #40]	; (8019898 <sys_check_timeouts+0x70>)
 801986e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8019870:	68b9      	ldr	r1, [r7, #8]
 8019872:	200a      	movs	r0, #10
 8019874:	f7f8 fe2a 	bl	80124cc <memp_free>
    if (handler != NULL) {
 8019878:	687b      	ldr	r3, [r7, #4]
 801987a:	2b00      	cmp	r3, #0
 801987c:	d0da      	beq.n	8019834 <sys_check_timeouts+0xc>
      handler(arg);
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	6838      	ldr	r0, [r7, #0]
 8019882:	4798      	blx	r3
  do {
 8019884:	e7d6      	b.n	8019834 <sys_check_timeouts+0xc>
      return;
 8019886:	bf00      	nop
 8019888:	e000      	b.n	801988c <sys_check_timeouts+0x64>
      return;
 801988a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801988c:	3710      	adds	r7, #16
 801988e:	46bd      	mov	sp, r7
 8019890:	bd80      	pop	{r7, pc}
 8019892:	bf00      	nop
 8019894:	2000de0c 	.word	0x2000de0c
 8019898:	2000de10 	.word	0x2000de10

0801989c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801989c:	b580      	push	{r7, lr}
 801989e:	b082      	sub	sp, #8
 80198a0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80198a2:	4b16      	ldr	r3, [pc, #88]	; (80198fc <sys_timeouts_sleeptime+0x60>)
 80198a4:	681b      	ldr	r3, [r3, #0]
 80198a6:	2b00      	cmp	r3, #0
 80198a8:	d102      	bne.n	80198b0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80198aa:	f04f 33ff 	mov.w	r3, #4294967295
 80198ae:	e020      	b.n	80198f2 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80198b0:	f7f2 fddc 	bl	800c46c <sys_now>
 80198b4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80198b6:	4b11      	ldr	r3, [pc, #68]	; (80198fc <sys_timeouts_sleeptime+0x60>)
 80198b8:	681b      	ldr	r3, [r3, #0]
 80198ba:	685a      	ldr	r2, [r3, #4]
 80198bc:	687b      	ldr	r3, [r7, #4]
 80198be:	1ad3      	subs	r3, r2, r3
 80198c0:	0fdb      	lsrs	r3, r3, #31
 80198c2:	f003 0301 	and.w	r3, r3, #1
 80198c6:	b2db      	uxtb	r3, r3
 80198c8:	2b00      	cmp	r3, #0
 80198ca:	d001      	beq.n	80198d0 <sys_timeouts_sleeptime+0x34>
    return 0;
 80198cc:	2300      	movs	r3, #0
 80198ce:	e010      	b.n	80198f2 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80198d0:	4b0a      	ldr	r3, [pc, #40]	; (80198fc <sys_timeouts_sleeptime+0x60>)
 80198d2:	681b      	ldr	r3, [r3, #0]
 80198d4:	685a      	ldr	r2, [r3, #4]
 80198d6:	687b      	ldr	r3, [r7, #4]
 80198d8:	1ad3      	subs	r3, r2, r3
 80198da:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80198dc:	683b      	ldr	r3, [r7, #0]
 80198de:	2b00      	cmp	r3, #0
 80198e0:	da06      	bge.n	80198f0 <sys_timeouts_sleeptime+0x54>
 80198e2:	4b07      	ldr	r3, [pc, #28]	; (8019900 <sys_timeouts_sleeptime+0x64>)
 80198e4:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80198e8:	4906      	ldr	r1, [pc, #24]	; (8019904 <sys_timeouts_sleeptime+0x68>)
 80198ea:	4807      	ldr	r0, [pc, #28]	; (8019908 <sys_timeouts_sleeptime+0x6c>)
 80198ec:	f003 fbe2 	bl	801d0b4 <iprintf>
    return ret;
 80198f0:	683b      	ldr	r3, [r7, #0]
  }
}
 80198f2:	4618      	mov	r0, r3
 80198f4:	3708      	adds	r7, #8
 80198f6:	46bd      	mov	sp, r7
 80198f8:	bd80      	pop	{r7, pc}
 80198fa:	bf00      	nop
 80198fc:	2000de0c 	.word	0x2000de0c
 8019900:	080210b8 	.word	0x080210b8
 8019904:	0802118c 	.word	0x0802118c
 8019908:	0802112c 	.word	0x0802112c

0801990c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801990c:	b580      	push	{r7, lr}
 801990e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8019910:	f003 fbe8 	bl	801d0e4 <rand>
 8019914:	4603      	mov	r3, r0
 8019916:	b29b      	uxth	r3, r3
 8019918:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801991c:	b29b      	uxth	r3, r3
 801991e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8019922:	b29a      	uxth	r2, r3
 8019924:	4b01      	ldr	r3, [pc, #4]	; (801992c <udp_init+0x20>)
 8019926:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8019928:	bf00      	nop
 801992a:	bd80      	pop	{r7, pc}
 801992c:	200002f4 	.word	0x200002f4

08019930 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8019930:	b480      	push	{r7}
 8019932:	b083      	sub	sp, #12
 8019934:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8019936:	2300      	movs	r3, #0
 8019938:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801993a:	4b17      	ldr	r3, [pc, #92]	; (8019998 <udp_new_port+0x68>)
 801993c:	881b      	ldrh	r3, [r3, #0]
 801993e:	1c5a      	adds	r2, r3, #1
 8019940:	b291      	uxth	r1, r2
 8019942:	4a15      	ldr	r2, [pc, #84]	; (8019998 <udp_new_port+0x68>)
 8019944:	8011      	strh	r1, [r2, #0]
 8019946:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801994a:	4293      	cmp	r3, r2
 801994c:	d103      	bne.n	8019956 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801994e:	4b12      	ldr	r3, [pc, #72]	; (8019998 <udp_new_port+0x68>)
 8019950:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8019954:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019956:	4b11      	ldr	r3, [pc, #68]	; (801999c <udp_new_port+0x6c>)
 8019958:	681b      	ldr	r3, [r3, #0]
 801995a:	603b      	str	r3, [r7, #0]
 801995c:	e011      	b.n	8019982 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801995e:	683b      	ldr	r3, [r7, #0]
 8019960:	8a5a      	ldrh	r2, [r3, #18]
 8019962:	4b0d      	ldr	r3, [pc, #52]	; (8019998 <udp_new_port+0x68>)
 8019964:	881b      	ldrh	r3, [r3, #0]
 8019966:	429a      	cmp	r2, r3
 8019968:	d108      	bne.n	801997c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801996a:	88fb      	ldrh	r3, [r7, #6]
 801996c:	3301      	adds	r3, #1
 801996e:	80fb      	strh	r3, [r7, #6]
 8019970:	88fb      	ldrh	r3, [r7, #6]
 8019972:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8019976:	d3e0      	bcc.n	801993a <udp_new_port+0xa>
        return 0;
 8019978:	2300      	movs	r3, #0
 801997a:	e007      	b.n	801998c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801997c:	683b      	ldr	r3, [r7, #0]
 801997e:	68db      	ldr	r3, [r3, #12]
 8019980:	603b      	str	r3, [r7, #0]
 8019982:	683b      	ldr	r3, [r7, #0]
 8019984:	2b00      	cmp	r3, #0
 8019986:	d1ea      	bne.n	801995e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8019988:	4b03      	ldr	r3, [pc, #12]	; (8019998 <udp_new_port+0x68>)
 801998a:	881b      	ldrh	r3, [r3, #0]
}
 801998c:	4618      	mov	r0, r3
 801998e:	370c      	adds	r7, #12
 8019990:	46bd      	mov	sp, r7
 8019992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019996:	4770      	bx	lr
 8019998:	200002f4 	.word	0x200002f4
 801999c:	2000de18 	.word	0x2000de18

080199a0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80199a0:	b580      	push	{r7, lr}
 80199a2:	b084      	sub	sp, #16
 80199a4:	af00      	add	r7, sp, #0
 80199a6:	60f8      	str	r0, [r7, #12]
 80199a8:	60b9      	str	r1, [r7, #8]
 80199aa:	4613      	mov	r3, r2
 80199ac:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80199ae:	68fb      	ldr	r3, [r7, #12]
 80199b0:	2b00      	cmp	r3, #0
 80199b2:	d105      	bne.n	80199c0 <udp_input_local_match+0x20>
 80199b4:	4b27      	ldr	r3, [pc, #156]	; (8019a54 <udp_input_local_match+0xb4>)
 80199b6:	2287      	movs	r2, #135	; 0x87
 80199b8:	4927      	ldr	r1, [pc, #156]	; (8019a58 <udp_input_local_match+0xb8>)
 80199ba:	4828      	ldr	r0, [pc, #160]	; (8019a5c <udp_input_local_match+0xbc>)
 80199bc:	f003 fb7a 	bl	801d0b4 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80199c0:	68bb      	ldr	r3, [r7, #8]
 80199c2:	2b00      	cmp	r3, #0
 80199c4:	d105      	bne.n	80199d2 <udp_input_local_match+0x32>
 80199c6:	4b23      	ldr	r3, [pc, #140]	; (8019a54 <udp_input_local_match+0xb4>)
 80199c8:	2288      	movs	r2, #136	; 0x88
 80199ca:	4925      	ldr	r1, [pc, #148]	; (8019a60 <udp_input_local_match+0xc0>)
 80199cc:	4823      	ldr	r0, [pc, #140]	; (8019a5c <udp_input_local_match+0xbc>)
 80199ce:	f003 fb71 	bl	801d0b4 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80199d2:	68fb      	ldr	r3, [r7, #12]
 80199d4:	7a1b      	ldrb	r3, [r3, #8]
 80199d6:	2b00      	cmp	r3, #0
 80199d8:	d00b      	beq.n	80199f2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80199da:	68fb      	ldr	r3, [r7, #12]
 80199dc:	7a1a      	ldrb	r2, [r3, #8]
 80199de:	4b21      	ldr	r3, [pc, #132]	; (8019a64 <udp_input_local_match+0xc4>)
 80199e0:	685b      	ldr	r3, [r3, #4]
 80199e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80199e6:	3301      	adds	r3, #1
 80199e8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80199ea:	429a      	cmp	r2, r3
 80199ec:	d001      	beq.n	80199f2 <udp_input_local_match+0x52>
    return 0;
 80199ee:	2300      	movs	r3, #0
 80199f0:	e02b      	b.n	8019a4a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80199f2:	79fb      	ldrb	r3, [r7, #7]
 80199f4:	2b00      	cmp	r3, #0
 80199f6:	d018      	beq.n	8019a2a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80199f8:	68fb      	ldr	r3, [r7, #12]
 80199fa:	2b00      	cmp	r3, #0
 80199fc:	d013      	beq.n	8019a26 <udp_input_local_match+0x86>
 80199fe:	68fb      	ldr	r3, [r7, #12]
 8019a00:	681b      	ldr	r3, [r3, #0]
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	d00f      	beq.n	8019a26 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8019a06:	4b17      	ldr	r3, [pc, #92]	; (8019a64 <udp_input_local_match+0xc4>)
 8019a08:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019a0e:	d00a      	beq.n	8019a26 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8019a10:	68fb      	ldr	r3, [r7, #12]
 8019a12:	681a      	ldr	r2, [r3, #0]
 8019a14:	4b13      	ldr	r3, [pc, #76]	; (8019a64 <udp_input_local_match+0xc4>)
 8019a16:	695b      	ldr	r3, [r3, #20]
 8019a18:	405a      	eors	r2, r3
 8019a1a:	68bb      	ldr	r3, [r7, #8]
 8019a1c:	3308      	adds	r3, #8
 8019a1e:	681b      	ldr	r3, [r3, #0]
 8019a20:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8019a22:	2b00      	cmp	r3, #0
 8019a24:	d110      	bne.n	8019a48 <udp_input_local_match+0xa8>
          return 1;
 8019a26:	2301      	movs	r3, #1
 8019a28:	e00f      	b.n	8019a4a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8019a2a:	68fb      	ldr	r3, [r7, #12]
 8019a2c:	2b00      	cmp	r3, #0
 8019a2e:	d009      	beq.n	8019a44 <udp_input_local_match+0xa4>
 8019a30:	68fb      	ldr	r3, [r7, #12]
 8019a32:	681b      	ldr	r3, [r3, #0]
 8019a34:	2b00      	cmp	r3, #0
 8019a36:	d005      	beq.n	8019a44 <udp_input_local_match+0xa4>
 8019a38:	68fb      	ldr	r3, [r7, #12]
 8019a3a:	681a      	ldr	r2, [r3, #0]
 8019a3c:	4b09      	ldr	r3, [pc, #36]	; (8019a64 <udp_input_local_match+0xc4>)
 8019a3e:	695b      	ldr	r3, [r3, #20]
 8019a40:	429a      	cmp	r2, r3
 8019a42:	d101      	bne.n	8019a48 <udp_input_local_match+0xa8>
        return 1;
 8019a44:	2301      	movs	r3, #1
 8019a46:	e000      	b.n	8019a4a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8019a48:	2300      	movs	r3, #0
}
 8019a4a:	4618      	mov	r0, r3
 8019a4c:	3710      	adds	r7, #16
 8019a4e:	46bd      	mov	sp, r7
 8019a50:	bd80      	pop	{r7, pc}
 8019a52:	bf00      	nop
 8019a54:	080211a0 	.word	0x080211a0
 8019a58:	080211d0 	.word	0x080211d0
 8019a5c:	080211f4 	.word	0x080211f4
 8019a60:	0802121c 	.word	0x0802121c
 8019a64:	2000a668 	.word	0x2000a668

08019a68 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8019a68:	b590      	push	{r4, r7, lr}
 8019a6a:	b08d      	sub	sp, #52	; 0x34
 8019a6c:	af02      	add	r7, sp, #8
 8019a6e:	6078      	str	r0, [r7, #4]
 8019a70:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8019a72:	2300      	movs	r3, #0
 8019a74:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8019a76:	687b      	ldr	r3, [r7, #4]
 8019a78:	2b00      	cmp	r3, #0
 8019a7a:	d105      	bne.n	8019a88 <udp_input+0x20>
 8019a7c:	4b7c      	ldr	r3, [pc, #496]	; (8019c70 <udp_input+0x208>)
 8019a7e:	22cf      	movs	r2, #207	; 0xcf
 8019a80:	497c      	ldr	r1, [pc, #496]	; (8019c74 <udp_input+0x20c>)
 8019a82:	487d      	ldr	r0, [pc, #500]	; (8019c78 <udp_input+0x210>)
 8019a84:	f003 fb16 	bl	801d0b4 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8019a88:	683b      	ldr	r3, [r7, #0]
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	d105      	bne.n	8019a9a <udp_input+0x32>
 8019a8e:	4b78      	ldr	r3, [pc, #480]	; (8019c70 <udp_input+0x208>)
 8019a90:	22d0      	movs	r2, #208	; 0xd0
 8019a92:	497a      	ldr	r1, [pc, #488]	; (8019c7c <udp_input+0x214>)
 8019a94:	4878      	ldr	r0, [pc, #480]	; (8019c78 <udp_input+0x210>)
 8019a96:	f003 fb0d 	bl	801d0b4 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8019a9a:	687b      	ldr	r3, [r7, #4]
 8019a9c:	895b      	ldrh	r3, [r3, #10]
 8019a9e:	2b07      	cmp	r3, #7
 8019aa0:	d803      	bhi.n	8019aaa <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8019aa2:	6878      	ldr	r0, [r7, #4]
 8019aa4:	f7f9 fb52 	bl	801314c <pbuf_free>
    goto end;
 8019aa8:	e0de      	b.n	8019c68 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8019aaa:	687b      	ldr	r3, [r7, #4]
 8019aac:	685b      	ldr	r3, [r3, #4]
 8019aae:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8019ab0:	4b73      	ldr	r3, [pc, #460]	; (8019c80 <udp_input+0x218>)
 8019ab2:	695b      	ldr	r3, [r3, #20]
 8019ab4:	4a72      	ldr	r2, [pc, #456]	; (8019c80 <udp_input+0x218>)
 8019ab6:	6812      	ldr	r2, [r2, #0]
 8019ab8:	4611      	mov	r1, r2
 8019aba:	4618      	mov	r0, r3
 8019abc:	f001 ff80 	bl	801b9c0 <ip4_addr_isbroadcast_u32>
 8019ac0:	4603      	mov	r3, r0
 8019ac2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8019ac4:	697b      	ldr	r3, [r7, #20]
 8019ac6:	881b      	ldrh	r3, [r3, #0]
 8019ac8:	b29b      	uxth	r3, r3
 8019aca:	4618      	mov	r0, r3
 8019acc:	f7f7 fff6 	bl	8011abc <lwip_htons>
 8019ad0:	4603      	mov	r3, r0
 8019ad2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8019ad4:	697b      	ldr	r3, [r7, #20]
 8019ad6:	885b      	ldrh	r3, [r3, #2]
 8019ad8:	b29b      	uxth	r3, r3
 8019ada:	4618      	mov	r0, r3
 8019adc:	f7f7 ffee 	bl	8011abc <lwip_htons>
 8019ae0:	4603      	mov	r3, r0
 8019ae2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8019ae4:	2300      	movs	r3, #0
 8019ae6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8019ae8:	2300      	movs	r3, #0
 8019aea:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8019aec:	2300      	movs	r3, #0
 8019aee:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019af0:	4b64      	ldr	r3, [pc, #400]	; (8019c84 <udp_input+0x21c>)
 8019af2:	681b      	ldr	r3, [r3, #0]
 8019af4:	627b      	str	r3, [r7, #36]	; 0x24
 8019af6:	e054      	b.n	8019ba2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8019af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019afa:	8a5b      	ldrh	r3, [r3, #18]
 8019afc:	89fa      	ldrh	r2, [r7, #14]
 8019afe:	429a      	cmp	r2, r3
 8019b00:	d14a      	bne.n	8019b98 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8019b02:	7cfb      	ldrb	r3, [r7, #19]
 8019b04:	461a      	mov	r2, r3
 8019b06:	6839      	ldr	r1, [r7, #0]
 8019b08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019b0a:	f7ff ff49 	bl	80199a0 <udp_input_local_match>
 8019b0e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8019b10:	2b00      	cmp	r3, #0
 8019b12:	d041      	beq.n	8019b98 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8019b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b16:	7c1b      	ldrb	r3, [r3, #16]
 8019b18:	f003 0304 	and.w	r3, r3, #4
 8019b1c:	2b00      	cmp	r3, #0
 8019b1e:	d11d      	bne.n	8019b5c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8019b20:	69fb      	ldr	r3, [r7, #28]
 8019b22:	2b00      	cmp	r3, #0
 8019b24:	d102      	bne.n	8019b2c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8019b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b28:	61fb      	str	r3, [r7, #28]
 8019b2a:	e017      	b.n	8019b5c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8019b2c:	7cfb      	ldrb	r3, [r7, #19]
 8019b2e:	2b00      	cmp	r3, #0
 8019b30:	d014      	beq.n	8019b5c <udp_input+0xf4>
 8019b32:	4b53      	ldr	r3, [pc, #332]	; (8019c80 <udp_input+0x218>)
 8019b34:	695b      	ldr	r3, [r3, #20]
 8019b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019b3a:	d10f      	bne.n	8019b5c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8019b3c:	69fb      	ldr	r3, [r7, #28]
 8019b3e:	681a      	ldr	r2, [r3, #0]
 8019b40:	683b      	ldr	r3, [r7, #0]
 8019b42:	3304      	adds	r3, #4
 8019b44:	681b      	ldr	r3, [r3, #0]
 8019b46:	429a      	cmp	r2, r3
 8019b48:	d008      	beq.n	8019b5c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8019b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b4c:	681a      	ldr	r2, [r3, #0]
 8019b4e:	683b      	ldr	r3, [r7, #0]
 8019b50:	3304      	adds	r3, #4
 8019b52:	681b      	ldr	r3, [r3, #0]
 8019b54:	429a      	cmp	r2, r3
 8019b56:	d101      	bne.n	8019b5c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8019b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b5a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8019b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b5e:	8a9b      	ldrh	r3, [r3, #20]
 8019b60:	8a3a      	ldrh	r2, [r7, #16]
 8019b62:	429a      	cmp	r2, r3
 8019b64:	d118      	bne.n	8019b98 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8019b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b68:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8019b6a:	2b00      	cmp	r3, #0
 8019b6c:	d005      	beq.n	8019b7a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8019b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b70:	685a      	ldr	r2, [r3, #4]
 8019b72:	4b43      	ldr	r3, [pc, #268]	; (8019c80 <udp_input+0x218>)
 8019b74:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8019b76:	429a      	cmp	r2, r3
 8019b78:	d10e      	bne.n	8019b98 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8019b7a:	6a3b      	ldr	r3, [r7, #32]
 8019b7c:	2b00      	cmp	r3, #0
 8019b7e:	d014      	beq.n	8019baa <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8019b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b82:	68da      	ldr	r2, [r3, #12]
 8019b84:	6a3b      	ldr	r3, [r7, #32]
 8019b86:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8019b88:	4b3e      	ldr	r3, [pc, #248]	; (8019c84 <udp_input+0x21c>)
 8019b8a:	681a      	ldr	r2, [r3, #0]
 8019b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b8e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8019b90:	4a3c      	ldr	r2, [pc, #240]	; (8019c84 <udp_input+0x21c>)
 8019b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b94:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8019b96:	e008      	b.n	8019baa <udp_input+0x142>
      }
    }

    prev = pcb;
 8019b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b9a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b9e:	68db      	ldr	r3, [r3, #12]
 8019ba0:	627b      	str	r3, [r7, #36]	; 0x24
 8019ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ba4:	2b00      	cmp	r3, #0
 8019ba6:	d1a7      	bne.n	8019af8 <udp_input+0x90>
 8019ba8:	e000      	b.n	8019bac <udp_input+0x144>
        break;
 8019baa:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8019bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bae:	2b00      	cmp	r3, #0
 8019bb0:	d101      	bne.n	8019bb6 <udp_input+0x14e>
    pcb = uncon_pcb;
 8019bb2:	69fb      	ldr	r3, [r7, #28]
 8019bb4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8019bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	d002      	beq.n	8019bc2 <udp_input+0x15a>
    for_us = 1;
 8019bbc:	2301      	movs	r3, #1
 8019bbe:	76fb      	strb	r3, [r7, #27]
 8019bc0:	e00a      	b.n	8019bd8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8019bc2:	683b      	ldr	r3, [r7, #0]
 8019bc4:	3304      	adds	r3, #4
 8019bc6:	681a      	ldr	r2, [r3, #0]
 8019bc8:	4b2d      	ldr	r3, [pc, #180]	; (8019c80 <udp_input+0x218>)
 8019bca:	695b      	ldr	r3, [r3, #20]
 8019bcc:	429a      	cmp	r2, r3
 8019bce:	bf0c      	ite	eq
 8019bd0:	2301      	moveq	r3, #1
 8019bd2:	2300      	movne	r3, #0
 8019bd4:	b2db      	uxtb	r3, r3
 8019bd6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8019bd8:	7efb      	ldrb	r3, [r7, #27]
 8019bda:	2b00      	cmp	r3, #0
 8019bdc:	d041      	beq.n	8019c62 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8019bde:	2108      	movs	r1, #8
 8019be0:	6878      	ldr	r0, [r7, #4]
 8019be2:	f7f9 fa2d 	bl	8013040 <pbuf_remove_header>
 8019be6:	4603      	mov	r3, r0
 8019be8:	2b00      	cmp	r3, #0
 8019bea:	d00a      	beq.n	8019c02 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8019bec:	4b20      	ldr	r3, [pc, #128]	; (8019c70 <udp_input+0x208>)
 8019bee:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8019bf2:	4925      	ldr	r1, [pc, #148]	; (8019c88 <udp_input+0x220>)
 8019bf4:	4820      	ldr	r0, [pc, #128]	; (8019c78 <udp_input+0x210>)
 8019bf6:	f003 fa5d 	bl	801d0b4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8019bfa:	6878      	ldr	r0, [r7, #4]
 8019bfc:	f7f9 faa6 	bl	801314c <pbuf_free>
      goto end;
 8019c00:	e032      	b.n	8019c68 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8019c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c04:	2b00      	cmp	r3, #0
 8019c06:	d012      	beq.n	8019c2e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8019c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c0a:	699b      	ldr	r3, [r3, #24]
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	d00a      	beq.n	8019c26 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8019c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c12:	699c      	ldr	r4, [r3, #24]
 8019c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c16:	69d8      	ldr	r0, [r3, #28]
 8019c18:	8a3b      	ldrh	r3, [r7, #16]
 8019c1a:	9300      	str	r3, [sp, #0]
 8019c1c:	4b1b      	ldr	r3, [pc, #108]	; (8019c8c <udp_input+0x224>)
 8019c1e:	687a      	ldr	r2, [r7, #4]
 8019c20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019c22:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8019c24:	e021      	b.n	8019c6a <udp_input+0x202>
        pbuf_free(p);
 8019c26:	6878      	ldr	r0, [r7, #4]
 8019c28:	f7f9 fa90 	bl	801314c <pbuf_free>
        goto end;
 8019c2c:	e01c      	b.n	8019c68 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8019c2e:	7cfb      	ldrb	r3, [r7, #19]
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	d112      	bne.n	8019c5a <udp_input+0x1f2>
 8019c34:	4b12      	ldr	r3, [pc, #72]	; (8019c80 <udp_input+0x218>)
 8019c36:	695b      	ldr	r3, [r3, #20]
 8019c38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019c3c:	2be0      	cmp	r3, #224	; 0xe0
 8019c3e:	d00c      	beq.n	8019c5a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8019c40:	4b0f      	ldr	r3, [pc, #60]	; (8019c80 <udp_input+0x218>)
 8019c42:	899b      	ldrh	r3, [r3, #12]
 8019c44:	3308      	adds	r3, #8
 8019c46:	b29b      	uxth	r3, r3
 8019c48:	b21b      	sxth	r3, r3
 8019c4a:	4619      	mov	r1, r3
 8019c4c:	6878      	ldr	r0, [r7, #4]
 8019c4e:	f7f9 fa6a 	bl	8013126 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8019c52:	2103      	movs	r1, #3
 8019c54:	6878      	ldr	r0, [r7, #4]
 8019c56:	f001 fb93 	bl	801b380 <icmp_dest_unreach>
      pbuf_free(p);
 8019c5a:	6878      	ldr	r0, [r7, #4]
 8019c5c:	f7f9 fa76 	bl	801314c <pbuf_free>
  return;
 8019c60:	e003      	b.n	8019c6a <udp_input+0x202>
    pbuf_free(p);
 8019c62:	6878      	ldr	r0, [r7, #4]
 8019c64:	f7f9 fa72 	bl	801314c <pbuf_free>
  return;
 8019c68:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8019c6a:	372c      	adds	r7, #44	; 0x2c
 8019c6c:	46bd      	mov	sp, r7
 8019c6e:	bd90      	pop	{r4, r7, pc}
 8019c70:	080211a0 	.word	0x080211a0
 8019c74:	08021244 	.word	0x08021244
 8019c78:	080211f4 	.word	0x080211f4
 8019c7c:	0802125c 	.word	0x0802125c
 8019c80:	2000a668 	.word	0x2000a668
 8019c84:	2000de18 	.word	0x2000de18
 8019c88:	08021278 	.word	0x08021278
 8019c8c:	2000a678 	.word	0x2000a678

08019c90 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8019c90:	b580      	push	{r7, lr}
 8019c92:	b082      	sub	sp, #8
 8019c94:	af00      	add	r7, sp, #0
 8019c96:	6078      	str	r0, [r7, #4]
 8019c98:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 8019c9a:	687b      	ldr	r3, [r7, #4]
 8019c9c:	2b00      	cmp	r3, #0
 8019c9e:	d109      	bne.n	8019cb4 <udp_send+0x24>
 8019ca0:	4b11      	ldr	r3, [pc, #68]	; (8019ce8 <udp_send+0x58>)
 8019ca2:	f240 12d5 	movw	r2, #469	; 0x1d5
 8019ca6:	4911      	ldr	r1, [pc, #68]	; (8019cec <udp_send+0x5c>)
 8019ca8:	4811      	ldr	r0, [pc, #68]	; (8019cf0 <udp_send+0x60>)
 8019caa:	f003 fa03 	bl	801d0b4 <iprintf>
 8019cae:	f06f 030f 	mvn.w	r3, #15
 8019cb2:	e015      	b.n	8019ce0 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8019cb4:	683b      	ldr	r3, [r7, #0]
 8019cb6:	2b00      	cmp	r3, #0
 8019cb8:	d109      	bne.n	8019cce <udp_send+0x3e>
 8019cba:	4b0b      	ldr	r3, [pc, #44]	; (8019ce8 <udp_send+0x58>)
 8019cbc:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8019cc0:	490c      	ldr	r1, [pc, #48]	; (8019cf4 <udp_send+0x64>)
 8019cc2:	480b      	ldr	r0, [pc, #44]	; (8019cf0 <udp_send+0x60>)
 8019cc4:	f003 f9f6 	bl	801d0b4 <iprintf>
 8019cc8:	f06f 030f 	mvn.w	r3, #15
 8019ccc:	e008      	b.n	8019ce0 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8019cce:	687b      	ldr	r3, [r7, #4]
 8019cd0:	1d1a      	adds	r2, r3, #4
 8019cd2:	687b      	ldr	r3, [r7, #4]
 8019cd4:	8a9b      	ldrh	r3, [r3, #20]
 8019cd6:	6839      	ldr	r1, [r7, #0]
 8019cd8:	6878      	ldr	r0, [r7, #4]
 8019cda:	f000 f80d 	bl	8019cf8 <udp_sendto>
 8019cde:	4603      	mov	r3, r0
}
 8019ce0:	4618      	mov	r0, r3
 8019ce2:	3708      	adds	r7, #8
 8019ce4:	46bd      	mov	sp, r7
 8019ce6:	bd80      	pop	{r7, pc}
 8019ce8:	080211a0 	.word	0x080211a0
 8019cec:	08021294 	.word	0x08021294
 8019cf0:	080211f4 	.word	0x080211f4
 8019cf4:	080212ac 	.word	0x080212ac

08019cf8 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8019cf8:	b580      	push	{r7, lr}
 8019cfa:	b088      	sub	sp, #32
 8019cfc:	af02      	add	r7, sp, #8
 8019cfe:	60f8      	str	r0, [r7, #12]
 8019d00:	60b9      	str	r1, [r7, #8]
 8019d02:	607a      	str	r2, [r7, #4]
 8019d04:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8019d06:	68fb      	ldr	r3, [r7, #12]
 8019d08:	2b00      	cmp	r3, #0
 8019d0a:	d109      	bne.n	8019d20 <udp_sendto+0x28>
 8019d0c:	4b23      	ldr	r3, [pc, #140]	; (8019d9c <udp_sendto+0xa4>)
 8019d0e:	f44f 7206 	mov.w	r2, #536	; 0x218
 8019d12:	4923      	ldr	r1, [pc, #140]	; (8019da0 <udp_sendto+0xa8>)
 8019d14:	4823      	ldr	r0, [pc, #140]	; (8019da4 <udp_sendto+0xac>)
 8019d16:	f003 f9cd 	bl	801d0b4 <iprintf>
 8019d1a:	f06f 030f 	mvn.w	r3, #15
 8019d1e:	e038      	b.n	8019d92 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8019d20:	68bb      	ldr	r3, [r7, #8]
 8019d22:	2b00      	cmp	r3, #0
 8019d24:	d109      	bne.n	8019d3a <udp_sendto+0x42>
 8019d26:	4b1d      	ldr	r3, [pc, #116]	; (8019d9c <udp_sendto+0xa4>)
 8019d28:	f240 2219 	movw	r2, #537	; 0x219
 8019d2c:	491e      	ldr	r1, [pc, #120]	; (8019da8 <udp_sendto+0xb0>)
 8019d2e:	481d      	ldr	r0, [pc, #116]	; (8019da4 <udp_sendto+0xac>)
 8019d30:	f003 f9c0 	bl	801d0b4 <iprintf>
 8019d34:	f06f 030f 	mvn.w	r3, #15
 8019d38:	e02b      	b.n	8019d92 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	2b00      	cmp	r3, #0
 8019d3e:	d109      	bne.n	8019d54 <udp_sendto+0x5c>
 8019d40:	4b16      	ldr	r3, [pc, #88]	; (8019d9c <udp_sendto+0xa4>)
 8019d42:	f240 221a 	movw	r2, #538	; 0x21a
 8019d46:	4919      	ldr	r1, [pc, #100]	; (8019dac <udp_sendto+0xb4>)
 8019d48:	4816      	ldr	r0, [pc, #88]	; (8019da4 <udp_sendto+0xac>)
 8019d4a:	f003 f9b3 	bl	801d0b4 <iprintf>
 8019d4e:	f06f 030f 	mvn.w	r3, #15
 8019d52:	e01e      	b.n	8019d92 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8019d54:	68fb      	ldr	r3, [r7, #12]
 8019d56:	7a1b      	ldrb	r3, [r3, #8]
 8019d58:	2b00      	cmp	r3, #0
 8019d5a:	d006      	beq.n	8019d6a <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8019d5c:	68fb      	ldr	r3, [r7, #12]
 8019d5e:	7a1b      	ldrb	r3, [r3, #8]
 8019d60:	4618      	mov	r0, r3
 8019d62:	f7f8 fe65 	bl	8012a30 <netif_get_by_index>
 8019d66:	6178      	str	r0, [r7, #20]
 8019d68:	e003      	b.n	8019d72 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8019d6a:	6878      	ldr	r0, [r7, #4]
 8019d6c:	f001 fb92 	bl	801b494 <ip4_route>
 8019d70:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8019d72:	697b      	ldr	r3, [r7, #20]
 8019d74:	2b00      	cmp	r3, #0
 8019d76:	d102      	bne.n	8019d7e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8019d78:	f06f 0303 	mvn.w	r3, #3
 8019d7c:	e009      	b.n	8019d92 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8019d7e:	887a      	ldrh	r2, [r7, #2]
 8019d80:	697b      	ldr	r3, [r7, #20]
 8019d82:	9300      	str	r3, [sp, #0]
 8019d84:	4613      	mov	r3, r2
 8019d86:	687a      	ldr	r2, [r7, #4]
 8019d88:	68b9      	ldr	r1, [r7, #8]
 8019d8a:	68f8      	ldr	r0, [r7, #12]
 8019d8c:	f000 f810 	bl	8019db0 <udp_sendto_if>
 8019d90:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8019d92:	4618      	mov	r0, r3
 8019d94:	3718      	adds	r7, #24
 8019d96:	46bd      	mov	sp, r7
 8019d98:	bd80      	pop	{r7, pc}
 8019d9a:	bf00      	nop
 8019d9c:	080211a0 	.word	0x080211a0
 8019da0:	080212c4 	.word	0x080212c4
 8019da4:	080211f4 	.word	0x080211f4
 8019da8:	080212dc 	.word	0x080212dc
 8019dac:	080212f8 	.word	0x080212f8

08019db0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8019db0:	b580      	push	{r7, lr}
 8019db2:	b088      	sub	sp, #32
 8019db4:	af02      	add	r7, sp, #8
 8019db6:	60f8      	str	r0, [r7, #12]
 8019db8:	60b9      	str	r1, [r7, #8]
 8019dba:	607a      	str	r2, [r7, #4]
 8019dbc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8019dbe:	68fb      	ldr	r3, [r7, #12]
 8019dc0:	2b00      	cmp	r3, #0
 8019dc2:	d109      	bne.n	8019dd8 <udp_sendto_if+0x28>
 8019dc4:	4b2e      	ldr	r3, [pc, #184]	; (8019e80 <udp_sendto_if+0xd0>)
 8019dc6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019dca:	492e      	ldr	r1, [pc, #184]	; (8019e84 <udp_sendto_if+0xd4>)
 8019dcc:	482e      	ldr	r0, [pc, #184]	; (8019e88 <udp_sendto_if+0xd8>)
 8019dce:	f003 f971 	bl	801d0b4 <iprintf>
 8019dd2:	f06f 030f 	mvn.w	r3, #15
 8019dd6:	e04f      	b.n	8019e78 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8019dd8:	68bb      	ldr	r3, [r7, #8]
 8019dda:	2b00      	cmp	r3, #0
 8019ddc:	d109      	bne.n	8019df2 <udp_sendto_if+0x42>
 8019dde:	4b28      	ldr	r3, [pc, #160]	; (8019e80 <udp_sendto_if+0xd0>)
 8019de0:	f240 2281 	movw	r2, #641	; 0x281
 8019de4:	4929      	ldr	r1, [pc, #164]	; (8019e8c <udp_sendto_if+0xdc>)
 8019de6:	4828      	ldr	r0, [pc, #160]	; (8019e88 <udp_sendto_if+0xd8>)
 8019de8:	f003 f964 	bl	801d0b4 <iprintf>
 8019dec:	f06f 030f 	mvn.w	r3, #15
 8019df0:	e042      	b.n	8019e78 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019df2:	687b      	ldr	r3, [r7, #4]
 8019df4:	2b00      	cmp	r3, #0
 8019df6:	d109      	bne.n	8019e0c <udp_sendto_if+0x5c>
 8019df8:	4b21      	ldr	r3, [pc, #132]	; (8019e80 <udp_sendto_if+0xd0>)
 8019dfa:	f240 2282 	movw	r2, #642	; 0x282
 8019dfe:	4924      	ldr	r1, [pc, #144]	; (8019e90 <udp_sendto_if+0xe0>)
 8019e00:	4821      	ldr	r0, [pc, #132]	; (8019e88 <udp_sendto_if+0xd8>)
 8019e02:	f003 f957 	bl	801d0b4 <iprintf>
 8019e06:	f06f 030f 	mvn.w	r3, #15
 8019e0a:	e035      	b.n	8019e78 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8019e0c:	6a3b      	ldr	r3, [r7, #32]
 8019e0e:	2b00      	cmp	r3, #0
 8019e10:	d109      	bne.n	8019e26 <udp_sendto_if+0x76>
 8019e12:	4b1b      	ldr	r3, [pc, #108]	; (8019e80 <udp_sendto_if+0xd0>)
 8019e14:	f240 2283 	movw	r2, #643	; 0x283
 8019e18:	491e      	ldr	r1, [pc, #120]	; (8019e94 <udp_sendto_if+0xe4>)
 8019e1a:	481b      	ldr	r0, [pc, #108]	; (8019e88 <udp_sendto_if+0xd8>)
 8019e1c:	f003 f94a 	bl	801d0b4 <iprintf>
 8019e20:	f06f 030f 	mvn.w	r3, #15
 8019e24:	e028      	b.n	8019e78 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019e26:	68fb      	ldr	r3, [r7, #12]
 8019e28:	2b00      	cmp	r3, #0
 8019e2a:	d009      	beq.n	8019e40 <udp_sendto_if+0x90>
 8019e2c:	68fb      	ldr	r3, [r7, #12]
 8019e2e:	681b      	ldr	r3, [r3, #0]
 8019e30:	2b00      	cmp	r3, #0
 8019e32:	d005      	beq.n	8019e40 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8019e34:	68fb      	ldr	r3, [r7, #12]
 8019e36:	681b      	ldr	r3, [r3, #0]
 8019e38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019e3c:	2be0      	cmp	r3, #224	; 0xe0
 8019e3e:	d103      	bne.n	8019e48 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8019e40:	6a3b      	ldr	r3, [r7, #32]
 8019e42:	3304      	adds	r3, #4
 8019e44:	617b      	str	r3, [r7, #20]
 8019e46:	e00b      	b.n	8019e60 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8019e48:	68fb      	ldr	r3, [r7, #12]
 8019e4a:	681a      	ldr	r2, [r3, #0]
 8019e4c:	6a3b      	ldr	r3, [r7, #32]
 8019e4e:	3304      	adds	r3, #4
 8019e50:	681b      	ldr	r3, [r3, #0]
 8019e52:	429a      	cmp	r2, r3
 8019e54:	d002      	beq.n	8019e5c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8019e56:	f06f 0303 	mvn.w	r3, #3
 8019e5a:	e00d      	b.n	8019e78 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8019e5c:	68fb      	ldr	r3, [r7, #12]
 8019e5e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8019e60:	887a      	ldrh	r2, [r7, #2]
 8019e62:	697b      	ldr	r3, [r7, #20]
 8019e64:	9301      	str	r3, [sp, #4]
 8019e66:	6a3b      	ldr	r3, [r7, #32]
 8019e68:	9300      	str	r3, [sp, #0]
 8019e6a:	4613      	mov	r3, r2
 8019e6c:	687a      	ldr	r2, [r7, #4]
 8019e6e:	68b9      	ldr	r1, [r7, #8]
 8019e70:	68f8      	ldr	r0, [r7, #12]
 8019e72:	f000 f811 	bl	8019e98 <udp_sendto_if_src>
 8019e76:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8019e78:	4618      	mov	r0, r3
 8019e7a:	3718      	adds	r7, #24
 8019e7c:	46bd      	mov	sp, r7
 8019e7e:	bd80      	pop	{r7, pc}
 8019e80:	080211a0 	.word	0x080211a0
 8019e84:	08021314 	.word	0x08021314
 8019e88:	080211f4 	.word	0x080211f4
 8019e8c:	08021330 	.word	0x08021330
 8019e90:	0802134c 	.word	0x0802134c
 8019e94:	0802136c 	.word	0x0802136c

08019e98 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8019e98:	b580      	push	{r7, lr}
 8019e9a:	b08c      	sub	sp, #48	; 0x30
 8019e9c:	af04      	add	r7, sp, #16
 8019e9e:	60f8      	str	r0, [r7, #12]
 8019ea0:	60b9      	str	r1, [r7, #8]
 8019ea2:	607a      	str	r2, [r7, #4]
 8019ea4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8019ea6:	68fb      	ldr	r3, [r7, #12]
 8019ea8:	2b00      	cmp	r3, #0
 8019eaa:	d109      	bne.n	8019ec0 <udp_sendto_if_src+0x28>
 8019eac:	4b65      	ldr	r3, [pc, #404]	; (801a044 <udp_sendto_if_src+0x1ac>)
 8019eae:	f240 22d1 	movw	r2, #721	; 0x2d1
 8019eb2:	4965      	ldr	r1, [pc, #404]	; (801a048 <udp_sendto_if_src+0x1b0>)
 8019eb4:	4865      	ldr	r0, [pc, #404]	; (801a04c <udp_sendto_if_src+0x1b4>)
 8019eb6:	f003 f8fd 	bl	801d0b4 <iprintf>
 8019eba:	f06f 030f 	mvn.w	r3, #15
 8019ebe:	e0bc      	b.n	801a03a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8019ec0:	68bb      	ldr	r3, [r7, #8]
 8019ec2:	2b00      	cmp	r3, #0
 8019ec4:	d109      	bne.n	8019eda <udp_sendto_if_src+0x42>
 8019ec6:	4b5f      	ldr	r3, [pc, #380]	; (801a044 <udp_sendto_if_src+0x1ac>)
 8019ec8:	f240 22d2 	movw	r2, #722	; 0x2d2
 8019ecc:	4960      	ldr	r1, [pc, #384]	; (801a050 <udp_sendto_if_src+0x1b8>)
 8019ece:	485f      	ldr	r0, [pc, #380]	; (801a04c <udp_sendto_if_src+0x1b4>)
 8019ed0:	f003 f8f0 	bl	801d0b4 <iprintf>
 8019ed4:	f06f 030f 	mvn.w	r3, #15
 8019ed8:	e0af      	b.n	801a03a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019eda:	687b      	ldr	r3, [r7, #4]
 8019edc:	2b00      	cmp	r3, #0
 8019ede:	d109      	bne.n	8019ef4 <udp_sendto_if_src+0x5c>
 8019ee0:	4b58      	ldr	r3, [pc, #352]	; (801a044 <udp_sendto_if_src+0x1ac>)
 8019ee2:	f240 22d3 	movw	r2, #723	; 0x2d3
 8019ee6:	495b      	ldr	r1, [pc, #364]	; (801a054 <udp_sendto_if_src+0x1bc>)
 8019ee8:	4858      	ldr	r0, [pc, #352]	; (801a04c <udp_sendto_if_src+0x1b4>)
 8019eea:	f003 f8e3 	bl	801d0b4 <iprintf>
 8019eee:	f06f 030f 	mvn.w	r3, #15
 8019ef2:	e0a2      	b.n	801a03a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8019ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019ef6:	2b00      	cmp	r3, #0
 8019ef8:	d109      	bne.n	8019f0e <udp_sendto_if_src+0x76>
 8019efa:	4b52      	ldr	r3, [pc, #328]	; (801a044 <udp_sendto_if_src+0x1ac>)
 8019efc:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8019f00:	4955      	ldr	r1, [pc, #340]	; (801a058 <udp_sendto_if_src+0x1c0>)
 8019f02:	4852      	ldr	r0, [pc, #328]	; (801a04c <udp_sendto_if_src+0x1b4>)
 8019f04:	f003 f8d6 	bl	801d0b4 <iprintf>
 8019f08:	f06f 030f 	mvn.w	r3, #15
 8019f0c:	e095      	b.n	801a03a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8019f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f10:	2b00      	cmp	r3, #0
 8019f12:	d109      	bne.n	8019f28 <udp_sendto_if_src+0x90>
 8019f14:	4b4b      	ldr	r3, [pc, #300]	; (801a044 <udp_sendto_if_src+0x1ac>)
 8019f16:	f240 22d5 	movw	r2, #725	; 0x2d5
 8019f1a:	4950      	ldr	r1, [pc, #320]	; (801a05c <udp_sendto_if_src+0x1c4>)
 8019f1c:	484b      	ldr	r0, [pc, #300]	; (801a04c <udp_sendto_if_src+0x1b4>)
 8019f1e:	f003 f8c9 	bl	801d0b4 <iprintf>
 8019f22:	f06f 030f 	mvn.w	r3, #15
 8019f26:	e088      	b.n	801a03a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8019f28:	68fb      	ldr	r3, [r7, #12]
 8019f2a:	8a5b      	ldrh	r3, [r3, #18]
 8019f2c:	2b00      	cmp	r3, #0
 8019f2e:	d10f      	bne.n	8019f50 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8019f30:	68f9      	ldr	r1, [r7, #12]
 8019f32:	68fb      	ldr	r3, [r7, #12]
 8019f34:	8a5b      	ldrh	r3, [r3, #18]
 8019f36:	461a      	mov	r2, r3
 8019f38:	68f8      	ldr	r0, [r7, #12]
 8019f3a:	f000 f893 	bl	801a064 <udp_bind>
 8019f3e:	4603      	mov	r3, r0
 8019f40:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8019f42:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8019f46:	2b00      	cmp	r3, #0
 8019f48:	d002      	beq.n	8019f50 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8019f4a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8019f4e:	e074      	b.n	801a03a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8019f50:	68bb      	ldr	r3, [r7, #8]
 8019f52:	891b      	ldrh	r3, [r3, #8]
 8019f54:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8019f58:	4293      	cmp	r3, r2
 8019f5a:	d902      	bls.n	8019f62 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8019f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8019f60:	e06b      	b.n	801a03a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8019f62:	2108      	movs	r1, #8
 8019f64:	68b8      	ldr	r0, [r7, #8]
 8019f66:	f7f9 f85b 	bl	8013020 <pbuf_add_header>
 8019f6a:	4603      	mov	r3, r0
 8019f6c:	2b00      	cmp	r3, #0
 8019f6e:	d015      	beq.n	8019f9c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8019f70:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019f74:	2108      	movs	r1, #8
 8019f76:	2022      	movs	r0, #34	; 0x22
 8019f78:	f7f8 fe04 	bl	8012b84 <pbuf_alloc>
 8019f7c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8019f7e:	69fb      	ldr	r3, [r7, #28]
 8019f80:	2b00      	cmp	r3, #0
 8019f82:	d102      	bne.n	8019f8a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8019f84:	f04f 33ff 	mov.w	r3, #4294967295
 8019f88:	e057      	b.n	801a03a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8019f8a:	68bb      	ldr	r3, [r7, #8]
 8019f8c:	891b      	ldrh	r3, [r3, #8]
 8019f8e:	2b00      	cmp	r3, #0
 8019f90:	d006      	beq.n	8019fa0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8019f92:	68b9      	ldr	r1, [r7, #8]
 8019f94:	69f8      	ldr	r0, [r7, #28]
 8019f96:	f7f9 f9fd 	bl	8013394 <pbuf_chain>
 8019f9a:	e001      	b.n	8019fa0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8019f9c:	68bb      	ldr	r3, [r7, #8]
 8019f9e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8019fa0:	69fb      	ldr	r3, [r7, #28]
 8019fa2:	895b      	ldrh	r3, [r3, #10]
 8019fa4:	2b07      	cmp	r3, #7
 8019fa6:	d806      	bhi.n	8019fb6 <udp_sendto_if_src+0x11e>
 8019fa8:	4b26      	ldr	r3, [pc, #152]	; (801a044 <udp_sendto_if_src+0x1ac>)
 8019faa:	f240 320d 	movw	r2, #781	; 0x30d
 8019fae:	492c      	ldr	r1, [pc, #176]	; (801a060 <udp_sendto_if_src+0x1c8>)
 8019fb0:	4826      	ldr	r0, [pc, #152]	; (801a04c <udp_sendto_if_src+0x1b4>)
 8019fb2:	f003 f87f 	bl	801d0b4 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8019fb6:	69fb      	ldr	r3, [r7, #28]
 8019fb8:	685b      	ldr	r3, [r3, #4]
 8019fba:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8019fbc:	68fb      	ldr	r3, [r7, #12]
 8019fbe:	8a5b      	ldrh	r3, [r3, #18]
 8019fc0:	4618      	mov	r0, r3
 8019fc2:	f7f7 fd7b 	bl	8011abc <lwip_htons>
 8019fc6:	4603      	mov	r3, r0
 8019fc8:	461a      	mov	r2, r3
 8019fca:	697b      	ldr	r3, [r7, #20]
 8019fcc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8019fce:	887b      	ldrh	r3, [r7, #2]
 8019fd0:	4618      	mov	r0, r3
 8019fd2:	f7f7 fd73 	bl	8011abc <lwip_htons>
 8019fd6:	4603      	mov	r3, r0
 8019fd8:	461a      	mov	r2, r3
 8019fda:	697b      	ldr	r3, [r7, #20]
 8019fdc:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8019fde:	697b      	ldr	r3, [r7, #20]
 8019fe0:	2200      	movs	r2, #0
 8019fe2:	719a      	strb	r2, [r3, #6]
 8019fe4:	2200      	movs	r2, #0
 8019fe6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8019fe8:	69fb      	ldr	r3, [r7, #28]
 8019fea:	891b      	ldrh	r3, [r3, #8]
 8019fec:	4618      	mov	r0, r3
 8019fee:	f7f7 fd65 	bl	8011abc <lwip_htons>
 8019ff2:	4603      	mov	r3, r0
 8019ff4:	461a      	mov	r2, r3
 8019ff6:	697b      	ldr	r3, [r7, #20]
 8019ff8:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8019ffa:	2311      	movs	r3, #17
 8019ffc:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8019ffe:	68fb      	ldr	r3, [r7, #12]
 801a000:	7adb      	ldrb	r3, [r3, #11]
 801a002:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801a004:	68fb      	ldr	r3, [r7, #12]
 801a006:	7a9b      	ldrb	r3, [r3, #10]
 801a008:	7cb9      	ldrb	r1, [r7, #18]
 801a00a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a00c:	9202      	str	r2, [sp, #8]
 801a00e:	7cfa      	ldrb	r2, [r7, #19]
 801a010:	9201      	str	r2, [sp, #4]
 801a012:	9300      	str	r3, [sp, #0]
 801a014:	460b      	mov	r3, r1
 801a016:	687a      	ldr	r2, [r7, #4]
 801a018:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a01a:	69f8      	ldr	r0, [r7, #28]
 801a01c:	f001 fc22 	bl	801b864 <ip4_output_if_src>
 801a020:	4603      	mov	r3, r0
 801a022:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801a024:	69fa      	ldr	r2, [r7, #28]
 801a026:	68bb      	ldr	r3, [r7, #8]
 801a028:	429a      	cmp	r2, r3
 801a02a:	d004      	beq.n	801a036 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801a02c:	69f8      	ldr	r0, [r7, #28]
 801a02e:	f7f9 f88d 	bl	801314c <pbuf_free>
    q = NULL;
 801a032:	2300      	movs	r3, #0
 801a034:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801a036:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801a03a:	4618      	mov	r0, r3
 801a03c:	3720      	adds	r7, #32
 801a03e:	46bd      	mov	sp, r7
 801a040:	bd80      	pop	{r7, pc}
 801a042:	bf00      	nop
 801a044:	080211a0 	.word	0x080211a0
 801a048:	0802138c 	.word	0x0802138c
 801a04c:	080211f4 	.word	0x080211f4
 801a050:	080213ac 	.word	0x080213ac
 801a054:	080213cc 	.word	0x080213cc
 801a058:	080213f0 	.word	0x080213f0
 801a05c:	08021414 	.word	0x08021414
 801a060:	08021438 	.word	0x08021438

0801a064 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801a064:	b580      	push	{r7, lr}
 801a066:	b086      	sub	sp, #24
 801a068:	af00      	add	r7, sp, #0
 801a06a:	60f8      	str	r0, [r7, #12]
 801a06c:	60b9      	str	r1, [r7, #8]
 801a06e:	4613      	mov	r3, r2
 801a070:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801a072:	68bb      	ldr	r3, [r7, #8]
 801a074:	2b00      	cmp	r3, #0
 801a076:	d101      	bne.n	801a07c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801a078:	4b39      	ldr	r3, [pc, #228]	; (801a160 <udp_bind+0xfc>)
 801a07a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801a07c:	68fb      	ldr	r3, [r7, #12]
 801a07e:	2b00      	cmp	r3, #0
 801a080:	d109      	bne.n	801a096 <udp_bind+0x32>
 801a082:	4b38      	ldr	r3, [pc, #224]	; (801a164 <udp_bind+0x100>)
 801a084:	f240 32b7 	movw	r2, #951	; 0x3b7
 801a088:	4937      	ldr	r1, [pc, #220]	; (801a168 <udp_bind+0x104>)
 801a08a:	4838      	ldr	r0, [pc, #224]	; (801a16c <udp_bind+0x108>)
 801a08c:	f003 f812 	bl	801d0b4 <iprintf>
 801a090:	f06f 030f 	mvn.w	r3, #15
 801a094:	e060      	b.n	801a158 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801a096:	2300      	movs	r3, #0
 801a098:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a09a:	4b35      	ldr	r3, [pc, #212]	; (801a170 <udp_bind+0x10c>)
 801a09c:	681b      	ldr	r3, [r3, #0]
 801a09e:	617b      	str	r3, [r7, #20]
 801a0a0:	e009      	b.n	801a0b6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801a0a2:	68fa      	ldr	r2, [r7, #12]
 801a0a4:	697b      	ldr	r3, [r7, #20]
 801a0a6:	429a      	cmp	r2, r3
 801a0a8:	d102      	bne.n	801a0b0 <udp_bind+0x4c>
      rebind = 1;
 801a0aa:	2301      	movs	r3, #1
 801a0ac:	74fb      	strb	r3, [r7, #19]
      break;
 801a0ae:	e005      	b.n	801a0bc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a0b0:	697b      	ldr	r3, [r7, #20]
 801a0b2:	68db      	ldr	r3, [r3, #12]
 801a0b4:	617b      	str	r3, [r7, #20]
 801a0b6:	697b      	ldr	r3, [r7, #20]
 801a0b8:	2b00      	cmp	r3, #0
 801a0ba:	d1f2      	bne.n	801a0a2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801a0bc:	88fb      	ldrh	r3, [r7, #6]
 801a0be:	2b00      	cmp	r3, #0
 801a0c0:	d109      	bne.n	801a0d6 <udp_bind+0x72>
    port = udp_new_port();
 801a0c2:	f7ff fc35 	bl	8019930 <udp_new_port>
 801a0c6:	4603      	mov	r3, r0
 801a0c8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801a0ca:	88fb      	ldrh	r3, [r7, #6]
 801a0cc:	2b00      	cmp	r3, #0
 801a0ce:	d12c      	bne.n	801a12a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801a0d0:	f06f 0307 	mvn.w	r3, #7
 801a0d4:	e040      	b.n	801a158 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a0d6:	4b26      	ldr	r3, [pc, #152]	; (801a170 <udp_bind+0x10c>)
 801a0d8:	681b      	ldr	r3, [r3, #0]
 801a0da:	617b      	str	r3, [r7, #20]
 801a0dc:	e022      	b.n	801a124 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801a0de:	68fa      	ldr	r2, [r7, #12]
 801a0e0:	697b      	ldr	r3, [r7, #20]
 801a0e2:	429a      	cmp	r2, r3
 801a0e4:	d01b      	beq.n	801a11e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801a0e6:	697b      	ldr	r3, [r7, #20]
 801a0e8:	8a5b      	ldrh	r3, [r3, #18]
 801a0ea:	88fa      	ldrh	r2, [r7, #6]
 801a0ec:	429a      	cmp	r2, r3
 801a0ee:	d116      	bne.n	801a11e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801a0f0:	697b      	ldr	r3, [r7, #20]
 801a0f2:	681a      	ldr	r2, [r3, #0]
 801a0f4:	68bb      	ldr	r3, [r7, #8]
 801a0f6:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801a0f8:	429a      	cmp	r2, r3
 801a0fa:	d00d      	beq.n	801a118 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801a0fc:	68bb      	ldr	r3, [r7, #8]
 801a0fe:	2b00      	cmp	r3, #0
 801a100:	d00a      	beq.n	801a118 <udp_bind+0xb4>
 801a102:	68bb      	ldr	r3, [r7, #8]
 801a104:	681b      	ldr	r3, [r3, #0]
 801a106:	2b00      	cmp	r3, #0
 801a108:	d006      	beq.n	801a118 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801a10a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801a10c:	2b00      	cmp	r3, #0
 801a10e:	d003      	beq.n	801a118 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801a110:	697b      	ldr	r3, [r7, #20]
 801a112:	681b      	ldr	r3, [r3, #0]
 801a114:	2b00      	cmp	r3, #0
 801a116:	d102      	bne.n	801a11e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801a118:	f06f 0307 	mvn.w	r3, #7
 801a11c:	e01c      	b.n	801a158 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801a11e:	697b      	ldr	r3, [r7, #20]
 801a120:	68db      	ldr	r3, [r3, #12]
 801a122:	617b      	str	r3, [r7, #20]
 801a124:	697b      	ldr	r3, [r7, #20]
 801a126:	2b00      	cmp	r3, #0
 801a128:	d1d9      	bne.n	801a0de <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801a12a:	68bb      	ldr	r3, [r7, #8]
 801a12c:	2b00      	cmp	r3, #0
 801a12e:	d002      	beq.n	801a136 <udp_bind+0xd2>
 801a130:	68bb      	ldr	r3, [r7, #8]
 801a132:	681b      	ldr	r3, [r3, #0]
 801a134:	e000      	b.n	801a138 <udp_bind+0xd4>
 801a136:	2300      	movs	r3, #0
 801a138:	68fa      	ldr	r2, [r7, #12]
 801a13a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801a13c:	68fb      	ldr	r3, [r7, #12]
 801a13e:	88fa      	ldrh	r2, [r7, #6]
 801a140:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801a142:	7cfb      	ldrb	r3, [r7, #19]
 801a144:	2b00      	cmp	r3, #0
 801a146:	d106      	bne.n	801a156 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801a148:	4b09      	ldr	r3, [pc, #36]	; (801a170 <udp_bind+0x10c>)
 801a14a:	681a      	ldr	r2, [r3, #0]
 801a14c:	68fb      	ldr	r3, [r7, #12]
 801a14e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801a150:	4a07      	ldr	r2, [pc, #28]	; (801a170 <udp_bind+0x10c>)
 801a152:	68fb      	ldr	r3, [r7, #12]
 801a154:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801a156:	2300      	movs	r3, #0
}
 801a158:	4618      	mov	r0, r3
 801a15a:	3718      	adds	r7, #24
 801a15c:	46bd      	mov	sp, r7
 801a15e:	bd80      	pop	{r7, pc}
 801a160:	08021cfc 	.word	0x08021cfc
 801a164:	080211a0 	.word	0x080211a0
 801a168:	08021468 	.word	0x08021468
 801a16c:	080211f4 	.word	0x080211f4
 801a170:	2000de18 	.word	0x2000de18

0801a174 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801a174:	b580      	push	{r7, lr}
 801a176:	b084      	sub	sp, #16
 801a178:	af00      	add	r7, sp, #0
 801a17a:	60f8      	str	r0, [r7, #12]
 801a17c:	60b9      	str	r1, [r7, #8]
 801a17e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801a180:	68fb      	ldr	r3, [r7, #12]
 801a182:	2b00      	cmp	r3, #0
 801a184:	d107      	bne.n	801a196 <udp_recv+0x22>
 801a186:	4b08      	ldr	r3, [pc, #32]	; (801a1a8 <udp_recv+0x34>)
 801a188:	f240 428a 	movw	r2, #1162	; 0x48a
 801a18c:	4907      	ldr	r1, [pc, #28]	; (801a1ac <udp_recv+0x38>)
 801a18e:	4808      	ldr	r0, [pc, #32]	; (801a1b0 <udp_recv+0x3c>)
 801a190:	f002 ff90 	bl	801d0b4 <iprintf>
 801a194:	e005      	b.n	801a1a2 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801a196:	68fb      	ldr	r3, [r7, #12]
 801a198:	68ba      	ldr	r2, [r7, #8]
 801a19a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801a19c:	68fb      	ldr	r3, [r7, #12]
 801a19e:	687a      	ldr	r2, [r7, #4]
 801a1a0:	61da      	str	r2, [r3, #28]
}
 801a1a2:	3710      	adds	r7, #16
 801a1a4:	46bd      	mov	sp, r7
 801a1a6:	bd80      	pop	{r7, pc}
 801a1a8:	080211a0 	.word	0x080211a0
 801a1ac:	080214d4 	.word	0x080214d4
 801a1b0:	080211f4 	.word	0x080211f4

0801a1b4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801a1b4:	b580      	push	{r7, lr}
 801a1b6:	b084      	sub	sp, #16
 801a1b8:	af00      	add	r7, sp, #0
 801a1ba:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801a1bc:	687b      	ldr	r3, [r7, #4]
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	d107      	bne.n	801a1d2 <udp_remove+0x1e>
 801a1c2:	4b19      	ldr	r3, [pc, #100]	; (801a228 <udp_remove+0x74>)
 801a1c4:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801a1c8:	4918      	ldr	r1, [pc, #96]	; (801a22c <udp_remove+0x78>)
 801a1ca:	4819      	ldr	r0, [pc, #100]	; (801a230 <udp_remove+0x7c>)
 801a1cc:	f002 ff72 	bl	801d0b4 <iprintf>
 801a1d0:	e026      	b.n	801a220 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801a1d2:	4b18      	ldr	r3, [pc, #96]	; (801a234 <udp_remove+0x80>)
 801a1d4:	681b      	ldr	r3, [r3, #0]
 801a1d6:	687a      	ldr	r2, [r7, #4]
 801a1d8:	429a      	cmp	r2, r3
 801a1da:	d105      	bne.n	801a1e8 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801a1dc:	4b15      	ldr	r3, [pc, #84]	; (801a234 <udp_remove+0x80>)
 801a1de:	681b      	ldr	r3, [r3, #0]
 801a1e0:	68db      	ldr	r3, [r3, #12]
 801a1e2:	4a14      	ldr	r2, [pc, #80]	; (801a234 <udp_remove+0x80>)
 801a1e4:	6013      	str	r3, [r2, #0]
 801a1e6:	e017      	b.n	801a218 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801a1e8:	4b12      	ldr	r3, [pc, #72]	; (801a234 <udp_remove+0x80>)
 801a1ea:	681b      	ldr	r3, [r3, #0]
 801a1ec:	60fb      	str	r3, [r7, #12]
 801a1ee:	e010      	b.n	801a212 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801a1f0:	68fb      	ldr	r3, [r7, #12]
 801a1f2:	68db      	ldr	r3, [r3, #12]
 801a1f4:	2b00      	cmp	r3, #0
 801a1f6:	d009      	beq.n	801a20c <udp_remove+0x58>
 801a1f8:	68fb      	ldr	r3, [r7, #12]
 801a1fa:	68db      	ldr	r3, [r3, #12]
 801a1fc:	687a      	ldr	r2, [r7, #4]
 801a1fe:	429a      	cmp	r2, r3
 801a200:	d104      	bne.n	801a20c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801a202:	687b      	ldr	r3, [r7, #4]
 801a204:	68da      	ldr	r2, [r3, #12]
 801a206:	68fb      	ldr	r3, [r7, #12]
 801a208:	60da      	str	r2, [r3, #12]
        break;
 801a20a:	e005      	b.n	801a218 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801a20c:	68fb      	ldr	r3, [r7, #12]
 801a20e:	68db      	ldr	r3, [r3, #12]
 801a210:	60fb      	str	r3, [r7, #12]
 801a212:	68fb      	ldr	r3, [r7, #12]
 801a214:	2b00      	cmp	r3, #0
 801a216:	d1eb      	bne.n	801a1f0 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801a218:	6879      	ldr	r1, [r7, #4]
 801a21a:	2000      	movs	r0, #0
 801a21c:	f7f8 f956 	bl	80124cc <memp_free>
}
 801a220:	3710      	adds	r7, #16
 801a222:	46bd      	mov	sp, r7
 801a224:	bd80      	pop	{r7, pc}
 801a226:	bf00      	nop
 801a228:	080211a0 	.word	0x080211a0
 801a22c:	080214ec 	.word	0x080214ec
 801a230:	080211f4 	.word	0x080211f4
 801a234:	2000de18 	.word	0x2000de18

0801a238 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801a238:	b580      	push	{r7, lr}
 801a23a:	b082      	sub	sp, #8
 801a23c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801a23e:	2000      	movs	r0, #0
 801a240:	f7f8 f8f2 	bl	8012428 <memp_malloc>
 801a244:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	2b00      	cmp	r3, #0
 801a24a:	d007      	beq.n	801a25c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801a24c:	2220      	movs	r2, #32
 801a24e:	2100      	movs	r1, #0
 801a250:	6878      	ldr	r0, [r7, #4]
 801a252:	f002 fe47 	bl	801cee4 <memset>
    pcb->ttl = UDP_TTL;
 801a256:	687b      	ldr	r3, [r7, #4]
 801a258:	22ff      	movs	r2, #255	; 0xff
 801a25a:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801a25c:	687b      	ldr	r3, [r7, #4]
}
 801a25e:	4618      	mov	r0, r3
 801a260:	3708      	adds	r7, #8
 801a262:	46bd      	mov	sp, r7
 801a264:	bd80      	pop	{r7, pc}

0801a266 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801a266:	b580      	push	{r7, lr}
 801a268:	b084      	sub	sp, #16
 801a26a:	af00      	add	r7, sp, #0
 801a26c:	4603      	mov	r3, r0
 801a26e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801a270:	f7ff ffe2 	bl	801a238 <udp_new>
 801a274:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801a276:	68fb      	ldr	r3, [r7, #12]
}
 801a278:	4618      	mov	r0, r3
 801a27a:	3710      	adds	r7, #16
 801a27c:	46bd      	mov	sp, r7
 801a27e:	bd80      	pop	{r7, pc}

0801a280 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801a280:	b480      	push	{r7}
 801a282:	b085      	sub	sp, #20
 801a284:	af00      	add	r7, sp, #0
 801a286:	6078      	str	r0, [r7, #4]
 801a288:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	2b00      	cmp	r3, #0
 801a28e:	d01e      	beq.n	801a2ce <udp_netif_ip_addr_changed+0x4e>
 801a290:	687b      	ldr	r3, [r7, #4]
 801a292:	681b      	ldr	r3, [r3, #0]
 801a294:	2b00      	cmp	r3, #0
 801a296:	d01a      	beq.n	801a2ce <udp_netif_ip_addr_changed+0x4e>
 801a298:	683b      	ldr	r3, [r7, #0]
 801a29a:	2b00      	cmp	r3, #0
 801a29c:	d017      	beq.n	801a2ce <udp_netif_ip_addr_changed+0x4e>
 801a29e:	683b      	ldr	r3, [r7, #0]
 801a2a0:	681b      	ldr	r3, [r3, #0]
 801a2a2:	2b00      	cmp	r3, #0
 801a2a4:	d013      	beq.n	801a2ce <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a2a6:	4b0d      	ldr	r3, [pc, #52]	; (801a2dc <udp_netif_ip_addr_changed+0x5c>)
 801a2a8:	681b      	ldr	r3, [r3, #0]
 801a2aa:	60fb      	str	r3, [r7, #12]
 801a2ac:	e00c      	b.n	801a2c8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801a2ae:	68fb      	ldr	r3, [r7, #12]
 801a2b0:	681a      	ldr	r2, [r3, #0]
 801a2b2:	687b      	ldr	r3, [r7, #4]
 801a2b4:	681b      	ldr	r3, [r3, #0]
 801a2b6:	429a      	cmp	r2, r3
 801a2b8:	d103      	bne.n	801a2c2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801a2ba:	683b      	ldr	r3, [r7, #0]
 801a2bc:	681a      	ldr	r2, [r3, #0]
 801a2be:	68fb      	ldr	r3, [r7, #12]
 801a2c0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a2c2:	68fb      	ldr	r3, [r7, #12]
 801a2c4:	68db      	ldr	r3, [r3, #12]
 801a2c6:	60fb      	str	r3, [r7, #12]
 801a2c8:	68fb      	ldr	r3, [r7, #12]
 801a2ca:	2b00      	cmp	r3, #0
 801a2cc:	d1ef      	bne.n	801a2ae <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801a2ce:	bf00      	nop
 801a2d0:	3714      	adds	r7, #20
 801a2d2:	46bd      	mov	sp, r7
 801a2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2d8:	4770      	bx	lr
 801a2da:	bf00      	nop
 801a2dc:	2000de18 	.word	0x2000de18

0801a2e0 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801a2e0:	b580      	push	{r7, lr}
 801a2e2:	b082      	sub	sp, #8
 801a2e4:	af00      	add	r7, sp, #0
 801a2e6:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801a2e8:	4915      	ldr	r1, [pc, #84]	; (801a340 <etharp_free_entry+0x60>)
 801a2ea:	687a      	ldr	r2, [r7, #4]
 801a2ec:	4613      	mov	r3, r2
 801a2ee:	005b      	lsls	r3, r3, #1
 801a2f0:	4413      	add	r3, r2
 801a2f2:	00db      	lsls	r3, r3, #3
 801a2f4:	440b      	add	r3, r1
 801a2f6:	681b      	ldr	r3, [r3, #0]
 801a2f8:	2b00      	cmp	r3, #0
 801a2fa:	d013      	beq.n	801a324 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801a2fc:	4910      	ldr	r1, [pc, #64]	; (801a340 <etharp_free_entry+0x60>)
 801a2fe:	687a      	ldr	r2, [r7, #4]
 801a300:	4613      	mov	r3, r2
 801a302:	005b      	lsls	r3, r3, #1
 801a304:	4413      	add	r3, r2
 801a306:	00db      	lsls	r3, r3, #3
 801a308:	440b      	add	r3, r1
 801a30a:	681b      	ldr	r3, [r3, #0]
 801a30c:	4618      	mov	r0, r3
 801a30e:	f7f8 ff1d 	bl	801314c <pbuf_free>
    arp_table[i].q = NULL;
 801a312:	490b      	ldr	r1, [pc, #44]	; (801a340 <etharp_free_entry+0x60>)
 801a314:	687a      	ldr	r2, [r7, #4]
 801a316:	4613      	mov	r3, r2
 801a318:	005b      	lsls	r3, r3, #1
 801a31a:	4413      	add	r3, r2
 801a31c:	00db      	lsls	r3, r3, #3
 801a31e:	440b      	add	r3, r1
 801a320:	2200      	movs	r2, #0
 801a322:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801a324:	4906      	ldr	r1, [pc, #24]	; (801a340 <etharp_free_entry+0x60>)
 801a326:	687a      	ldr	r2, [r7, #4]
 801a328:	4613      	mov	r3, r2
 801a32a:	005b      	lsls	r3, r3, #1
 801a32c:	4413      	add	r3, r2
 801a32e:	00db      	lsls	r3, r3, #3
 801a330:	440b      	add	r3, r1
 801a332:	3314      	adds	r3, #20
 801a334:	2200      	movs	r2, #0
 801a336:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801a338:	bf00      	nop
 801a33a:	3708      	adds	r7, #8
 801a33c:	46bd      	mov	sp, r7
 801a33e:	bd80      	pop	{r7, pc}
 801a340:	2000de1c 	.word	0x2000de1c

0801a344 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801a344:	b580      	push	{r7, lr}
 801a346:	b082      	sub	sp, #8
 801a348:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a34a:	2300      	movs	r3, #0
 801a34c:	607b      	str	r3, [r7, #4]
 801a34e:	e096      	b.n	801a47e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801a350:	494f      	ldr	r1, [pc, #316]	; (801a490 <etharp_tmr+0x14c>)
 801a352:	687a      	ldr	r2, [r7, #4]
 801a354:	4613      	mov	r3, r2
 801a356:	005b      	lsls	r3, r3, #1
 801a358:	4413      	add	r3, r2
 801a35a:	00db      	lsls	r3, r3, #3
 801a35c:	440b      	add	r3, r1
 801a35e:	3314      	adds	r3, #20
 801a360:	781b      	ldrb	r3, [r3, #0]
 801a362:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801a364:	78fb      	ldrb	r3, [r7, #3]
 801a366:	2b00      	cmp	r3, #0
 801a368:	f000 8086 	beq.w	801a478 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801a36c:	4948      	ldr	r1, [pc, #288]	; (801a490 <etharp_tmr+0x14c>)
 801a36e:	687a      	ldr	r2, [r7, #4]
 801a370:	4613      	mov	r3, r2
 801a372:	005b      	lsls	r3, r3, #1
 801a374:	4413      	add	r3, r2
 801a376:	00db      	lsls	r3, r3, #3
 801a378:	440b      	add	r3, r1
 801a37a:	3312      	adds	r3, #18
 801a37c:	881b      	ldrh	r3, [r3, #0]
 801a37e:	3301      	adds	r3, #1
 801a380:	b298      	uxth	r0, r3
 801a382:	4943      	ldr	r1, [pc, #268]	; (801a490 <etharp_tmr+0x14c>)
 801a384:	687a      	ldr	r2, [r7, #4]
 801a386:	4613      	mov	r3, r2
 801a388:	005b      	lsls	r3, r3, #1
 801a38a:	4413      	add	r3, r2
 801a38c:	00db      	lsls	r3, r3, #3
 801a38e:	440b      	add	r3, r1
 801a390:	3312      	adds	r3, #18
 801a392:	4602      	mov	r2, r0
 801a394:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a396:	493e      	ldr	r1, [pc, #248]	; (801a490 <etharp_tmr+0x14c>)
 801a398:	687a      	ldr	r2, [r7, #4]
 801a39a:	4613      	mov	r3, r2
 801a39c:	005b      	lsls	r3, r3, #1
 801a39e:	4413      	add	r3, r2
 801a3a0:	00db      	lsls	r3, r3, #3
 801a3a2:	440b      	add	r3, r1
 801a3a4:	3312      	adds	r3, #18
 801a3a6:	881b      	ldrh	r3, [r3, #0]
 801a3a8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801a3ac:	d215      	bcs.n	801a3da <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a3ae:	4938      	ldr	r1, [pc, #224]	; (801a490 <etharp_tmr+0x14c>)
 801a3b0:	687a      	ldr	r2, [r7, #4]
 801a3b2:	4613      	mov	r3, r2
 801a3b4:	005b      	lsls	r3, r3, #1
 801a3b6:	4413      	add	r3, r2
 801a3b8:	00db      	lsls	r3, r3, #3
 801a3ba:	440b      	add	r3, r1
 801a3bc:	3314      	adds	r3, #20
 801a3be:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a3c0:	2b01      	cmp	r3, #1
 801a3c2:	d10e      	bne.n	801a3e2 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801a3c4:	4932      	ldr	r1, [pc, #200]	; (801a490 <etharp_tmr+0x14c>)
 801a3c6:	687a      	ldr	r2, [r7, #4]
 801a3c8:	4613      	mov	r3, r2
 801a3ca:	005b      	lsls	r3, r3, #1
 801a3cc:	4413      	add	r3, r2
 801a3ce:	00db      	lsls	r3, r3, #3
 801a3d0:	440b      	add	r3, r1
 801a3d2:	3312      	adds	r3, #18
 801a3d4:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a3d6:	2b04      	cmp	r3, #4
 801a3d8:	d903      	bls.n	801a3e2 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801a3da:	6878      	ldr	r0, [r7, #4]
 801a3dc:	f7ff ff80 	bl	801a2e0 <etharp_free_entry>
 801a3e0:	e04a      	b.n	801a478 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801a3e2:	492b      	ldr	r1, [pc, #172]	; (801a490 <etharp_tmr+0x14c>)
 801a3e4:	687a      	ldr	r2, [r7, #4]
 801a3e6:	4613      	mov	r3, r2
 801a3e8:	005b      	lsls	r3, r3, #1
 801a3ea:	4413      	add	r3, r2
 801a3ec:	00db      	lsls	r3, r3, #3
 801a3ee:	440b      	add	r3, r1
 801a3f0:	3314      	adds	r3, #20
 801a3f2:	781b      	ldrb	r3, [r3, #0]
 801a3f4:	2b03      	cmp	r3, #3
 801a3f6:	d10a      	bne.n	801a40e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801a3f8:	4925      	ldr	r1, [pc, #148]	; (801a490 <etharp_tmr+0x14c>)
 801a3fa:	687a      	ldr	r2, [r7, #4]
 801a3fc:	4613      	mov	r3, r2
 801a3fe:	005b      	lsls	r3, r3, #1
 801a400:	4413      	add	r3, r2
 801a402:	00db      	lsls	r3, r3, #3
 801a404:	440b      	add	r3, r1
 801a406:	3314      	adds	r3, #20
 801a408:	2204      	movs	r2, #4
 801a40a:	701a      	strb	r2, [r3, #0]
 801a40c:	e034      	b.n	801a478 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801a40e:	4920      	ldr	r1, [pc, #128]	; (801a490 <etharp_tmr+0x14c>)
 801a410:	687a      	ldr	r2, [r7, #4]
 801a412:	4613      	mov	r3, r2
 801a414:	005b      	lsls	r3, r3, #1
 801a416:	4413      	add	r3, r2
 801a418:	00db      	lsls	r3, r3, #3
 801a41a:	440b      	add	r3, r1
 801a41c:	3314      	adds	r3, #20
 801a41e:	781b      	ldrb	r3, [r3, #0]
 801a420:	2b04      	cmp	r3, #4
 801a422:	d10a      	bne.n	801a43a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801a424:	491a      	ldr	r1, [pc, #104]	; (801a490 <etharp_tmr+0x14c>)
 801a426:	687a      	ldr	r2, [r7, #4]
 801a428:	4613      	mov	r3, r2
 801a42a:	005b      	lsls	r3, r3, #1
 801a42c:	4413      	add	r3, r2
 801a42e:	00db      	lsls	r3, r3, #3
 801a430:	440b      	add	r3, r1
 801a432:	3314      	adds	r3, #20
 801a434:	2202      	movs	r2, #2
 801a436:	701a      	strb	r2, [r3, #0]
 801a438:	e01e      	b.n	801a478 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801a43a:	4915      	ldr	r1, [pc, #84]	; (801a490 <etharp_tmr+0x14c>)
 801a43c:	687a      	ldr	r2, [r7, #4]
 801a43e:	4613      	mov	r3, r2
 801a440:	005b      	lsls	r3, r3, #1
 801a442:	4413      	add	r3, r2
 801a444:	00db      	lsls	r3, r3, #3
 801a446:	440b      	add	r3, r1
 801a448:	3314      	adds	r3, #20
 801a44a:	781b      	ldrb	r3, [r3, #0]
 801a44c:	2b01      	cmp	r3, #1
 801a44e:	d113      	bne.n	801a478 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801a450:	490f      	ldr	r1, [pc, #60]	; (801a490 <etharp_tmr+0x14c>)
 801a452:	687a      	ldr	r2, [r7, #4]
 801a454:	4613      	mov	r3, r2
 801a456:	005b      	lsls	r3, r3, #1
 801a458:	4413      	add	r3, r2
 801a45a:	00db      	lsls	r3, r3, #3
 801a45c:	440b      	add	r3, r1
 801a45e:	3308      	adds	r3, #8
 801a460:	6818      	ldr	r0, [r3, #0]
 801a462:	687a      	ldr	r2, [r7, #4]
 801a464:	4613      	mov	r3, r2
 801a466:	005b      	lsls	r3, r3, #1
 801a468:	4413      	add	r3, r2
 801a46a:	00db      	lsls	r3, r3, #3
 801a46c:	4a08      	ldr	r2, [pc, #32]	; (801a490 <etharp_tmr+0x14c>)
 801a46e:	4413      	add	r3, r2
 801a470:	3304      	adds	r3, #4
 801a472:	4619      	mov	r1, r3
 801a474:	f000 fe6e 	bl	801b154 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a478:	687b      	ldr	r3, [r7, #4]
 801a47a:	3301      	adds	r3, #1
 801a47c:	607b      	str	r3, [r7, #4]
 801a47e:	687b      	ldr	r3, [r7, #4]
 801a480:	2b09      	cmp	r3, #9
 801a482:	f77f af65 	ble.w	801a350 <etharp_tmr+0xc>
      }
    }
  }
}
 801a486:	bf00      	nop
 801a488:	bf00      	nop
 801a48a:	3708      	adds	r7, #8
 801a48c:	46bd      	mov	sp, r7
 801a48e:	bd80      	pop	{r7, pc}
 801a490:	2000de1c 	.word	0x2000de1c

0801a494 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801a494:	b580      	push	{r7, lr}
 801a496:	b08a      	sub	sp, #40	; 0x28
 801a498:	af00      	add	r7, sp, #0
 801a49a:	60f8      	str	r0, [r7, #12]
 801a49c:	460b      	mov	r3, r1
 801a49e:	607a      	str	r2, [r7, #4]
 801a4a0:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801a4a2:	230a      	movs	r3, #10
 801a4a4:	84fb      	strh	r3, [r7, #38]	; 0x26
 801a4a6:	230a      	movs	r3, #10
 801a4a8:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801a4aa:	230a      	movs	r3, #10
 801a4ac:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801a4ae:	2300      	movs	r3, #0
 801a4b0:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801a4b2:	230a      	movs	r3, #10
 801a4b4:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801a4b6:	2300      	movs	r3, #0
 801a4b8:	83bb      	strh	r3, [r7, #28]
 801a4ba:	2300      	movs	r3, #0
 801a4bc:	837b      	strh	r3, [r7, #26]
 801a4be:	2300      	movs	r3, #0
 801a4c0:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a4c2:	2300      	movs	r3, #0
 801a4c4:	843b      	strh	r3, [r7, #32]
 801a4c6:	e0ae      	b.n	801a626 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801a4c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a4cc:	49a6      	ldr	r1, [pc, #664]	; (801a768 <etharp_find_entry+0x2d4>)
 801a4ce:	4613      	mov	r3, r2
 801a4d0:	005b      	lsls	r3, r3, #1
 801a4d2:	4413      	add	r3, r2
 801a4d4:	00db      	lsls	r3, r3, #3
 801a4d6:	440b      	add	r3, r1
 801a4d8:	3314      	adds	r3, #20
 801a4da:	781b      	ldrb	r3, [r3, #0]
 801a4dc:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801a4de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801a4e2:	2b0a      	cmp	r3, #10
 801a4e4:	d105      	bne.n	801a4f2 <etharp_find_entry+0x5e>
 801a4e6:	7dfb      	ldrb	r3, [r7, #23]
 801a4e8:	2b00      	cmp	r3, #0
 801a4ea:	d102      	bne.n	801a4f2 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801a4ec:	8c3b      	ldrh	r3, [r7, #32]
 801a4ee:	847b      	strh	r3, [r7, #34]	; 0x22
 801a4f0:	e095      	b.n	801a61e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801a4f2:	7dfb      	ldrb	r3, [r7, #23]
 801a4f4:	2b00      	cmp	r3, #0
 801a4f6:	f000 8092 	beq.w	801a61e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801a4fa:	7dfb      	ldrb	r3, [r7, #23]
 801a4fc:	2b01      	cmp	r3, #1
 801a4fe:	d009      	beq.n	801a514 <etharp_find_entry+0x80>
 801a500:	7dfb      	ldrb	r3, [r7, #23]
 801a502:	2b01      	cmp	r3, #1
 801a504:	d806      	bhi.n	801a514 <etharp_find_entry+0x80>
 801a506:	4b99      	ldr	r3, [pc, #612]	; (801a76c <etharp_find_entry+0x2d8>)
 801a508:	f240 1223 	movw	r2, #291	; 0x123
 801a50c:	4998      	ldr	r1, [pc, #608]	; (801a770 <etharp_find_entry+0x2dc>)
 801a50e:	4899      	ldr	r0, [pc, #612]	; (801a774 <etharp_find_entry+0x2e0>)
 801a510:	f002 fdd0 	bl	801d0b4 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801a514:	68fb      	ldr	r3, [r7, #12]
 801a516:	2b00      	cmp	r3, #0
 801a518:	d020      	beq.n	801a55c <etharp_find_entry+0xc8>
 801a51a:	68fb      	ldr	r3, [r7, #12]
 801a51c:	6819      	ldr	r1, [r3, #0]
 801a51e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a522:	4891      	ldr	r0, [pc, #580]	; (801a768 <etharp_find_entry+0x2d4>)
 801a524:	4613      	mov	r3, r2
 801a526:	005b      	lsls	r3, r3, #1
 801a528:	4413      	add	r3, r2
 801a52a:	00db      	lsls	r3, r3, #3
 801a52c:	4403      	add	r3, r0
 801a52e:	3304      	adds	r3, #4
 801a530:	681b      	ldr	r3, [r3, #0]
 801a532:	4299      	cmp	r1, r3
 801a534:	d112      	bne.n	801a55c <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801a536:	687b      	ldr	r3, [r7, #4]
 801a538:	2b00      	cmp	r3, #0
 801a53a:	d00c      	beq.n	801a556 <etharp_find_entry+0xc2>
 801a53c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a540:	4989      	ldr	r1, [pc, #548]	; (801a768 <etharp_find_entry+0x2d4>)
 801a542:	4613      	mov	r3, r2
 801a544:	005b      	lsls	r3, r3, #1
 801a546:	4413      	add	r3, r2
 801a548:	00db      	lsls	r3, r3, #3
 801a54a:	440b      	add	r3, r1
 801a54c:	3308      	adds	r3, #8
 801a54e:	681b      	ldr	r3, [r3, #0]
 801a550:	687a      	ldr	r2, [r7, #4]
 801a552:	429a      	cmp	r2, r3
 801a554:	d102      	bne.n	801a55c <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801a556:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a55a:	e100      	b.n	801a75e <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801a55c:	7dfb      	ldrb	r3, [r7, #23]
 801a55e:	2b01      	cmp	r3, #1
 801a560:	d140      	bne.n	801a5e4 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801a562:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a566:	4980      	ldr	r1, [pc, #512]	; (801a768 <etharp_find_entry+0x2d4>)
 801a568:	4613      	mov	r3, r2
 801a56a:	005b      	lsls	r3, r3, #1
 801a56c:	4413      	add	r3, r2
 801a56e:	00db      	lsls	r3, r3, #3
 801a570:	440b      	add	r3, r1
 801a572:	681b      	ldr	r3, [r3, #0]
 801a574:	2b00      	cmp	r3, #0
 801a576:	d01a      	beq.n	801a5ae <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801a578:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a57c:	497a      	ldr	r1, [pc, #488]	; (801a768 <etharp_find_entry+0x2d4>)
 801a57e:	4613      	mov	r3, r2
 801a580:	005b      	lsls	r3, r3, #1
 801a582:	4413      	add	r3, r2
 801a584:	00db      	lsls	r3, r3, #3
 801a586:	440b      	add	r3, r1
 801a588:	3312      	adds	r3, #18
 801a58a:	881b      	ldrh	r3, [r3, #0]
 801a58c:	8bba      	ldrh	r2, [r7, #28]
 801a58e:	429a      	cmp	r2, r3
 801a590:	d845      	bhi.n	801a61e <etharp_find_entry+0x18a>
            old_queue = i;
 801a592:	8c3b      	ldrh	r3, [r7, #32]
 801a594:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801a596:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a59a:	4973      	ldr	r1, [pc, #460]	; (801a768 <etharp_find_entry+0x2d4>)
 801a59c:	4613      	mov	r3, r2
 801a59e:	005b      	lsls	r3, r3, #1
 801a5a0:	4413      	add	r3, r2
 801a5a2:	00db      	lsls	r3, r3, #3
 801a5a4:	440b      	add	r3, r1
 801a5a6:	3312      	adds	r3, #18
 801a5a8:	881b      	ldrh	r3, [r3, #0]
 801a5aa:	83bb      	strh	r3, [r7, #28]
 801a5ac:	e037      	b.n	801a61e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801a5ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a5b2:	496d      	ldr	r1, [pc, #436]	; (801a768 <etharp_find_entry+0x2d4>)
 801a5b4:	4613      	mov	r3, r2
 801a5b6:	005b      	lsls	r3, r3, #1
 801a5b8:	4413      	add	r3, r2
 801a5ba:	00db      	lsls	r3, r3, #3
 801a5bc:	440b      	add	r3, r1
 801a5be:	3312      	adds	r3, #18
 801a5c0:	881b      	ldrh	r3, [r3, #0]
 801a5c2:	8b7a      	ldrh	r2, [r7, #26]
 801a5c4:	429a      	cmp	r2, r3
 801a5c6:	d82a      	bhi.n	801a61e <etharp_find_entry+0x18a>
            old_pending = i;
 801a5c8:	8c3b      	ldrh	r3, [r7, #32]
 801a5ca:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801a5cc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a5d0:	4965      	ldr	r1, [pc, #404]	; (801a768 <etharp_find_entry+0x2d4>)
 801a5d2:	4613      	mov	r3, r2
 801a5d4:	005b      	lsls	r3, r3, #1
 801a5d6:	4413      	add	r3, r2
 801a5d8:	00db      	lsls	r3, r3, #3
 801a5da:	440b      	add	r3, r1
 801a5dc:	3312      	adds	r3, #18
 801a5de:	881b      	ldrh	r3, [r3, #0]
 801a5e0:	837b      	strh	r3, [r7, #26]
 801a5e2:	e01c      	b.n	801a61e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801a5e4:	7dfb      	ldrb	r3, [r7, #23]
 801a5e6:	2b01      	cmp	r3, #1
 801a5e8:	d919      	bls.n	801a61e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801a5ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a5ee:	495e      	ldr	r1, [pc, #376]	; (801a768 <etharp_find_entry+0x2d4>)
 801a5f0:	4613      	mov	r3, r2
 801a5f2:	005b      	lsls	r3, r3, #1
 801a5f4:	4413      	add	r3, r2
 801a5f6:	00db      	lsls	r3, r3, #3
 801a5f8:	440b      	add	r3, r1
 801a5fa:	3312      	adds	r3, #18
 801a5fc:	881b      	ldrh	r3, [r3, #0]
 801a5fe:	8b3a      	ldrh	r2, [r7, #24]
 801a600:	429a      	cmp	r2, r3
 801a602:	d80c      	bhi.n	801a61e <etharp_find_entry+0x18a>
            old_stable = i;
 801a604:	8c3b      	ldrh	r3, [r7, #32]
 801a606:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801a608:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a60c:	4956      	ldr	r1, [pc, #344]	; (801a768 <etharp_find_entry+0x2d4>)
 801a60e:	4613      	mov	r3, r2
 801a610:	005b      	lsls	r3, r3, #1
 801a612:	4413      	add	r3, r2
 801a614:	00db      	lsls	r3, r3, #3
 801a616:	440b      	add	r3, r1
 801a618:	3312      	adds	r3, #18
 801a61a:	881b      	ldrh	r3, [r3, #0]
 801a61c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a61e:	8c3b      	ldrh	r3, [r7, #32]
 801a620:	3301      	adds	r3, #1
 801a622:	b29b      	uxth	r3, r3
 801a624:	843b      	strh	r3, [r7, #32]
 801a626:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a62a:	2b09      	cmp	r3, #9
 801a62c:	f77f af4c 	ble.w	801a4c8 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801a630:	7afb      	ldrb	r3, [r7, #11]
 801a632:	f003 0302 	and.w	r3, r3, #2
 801a636:	2b00      	cmp	r3, #0
 801a638:	d108      	bne.n	801a64c <etharp_find_entry+0x1b8>
 801a63a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801a63e:	2b0a      	cmp	r3, #10
 801a640:	d107      	bne.n	801a652 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801a642:	7afb      	ldrb	r3, [r7, #11]
 801a644:	f003 0301 	and.w	r3, r3, #1
 801a648:	2b00      	cmp	r3, #0
 801a64a:	d102      	bne.n	801a652 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801a64c:	f04f 33ff 	mov.w	r3, #4294967295
 801a650:	e085      	b.n	801a75e <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801a652:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801a656:	2b09      	cmp	r3, #9
 801a658:	dc02      	bgt.n	801a660 <etharp_find_entry+0x1cc>
    i = empty;
 801a65a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a65c:	843b      	strh	r3, [r7, #32]
 801a65e:	e039      	b.n	801a6d4 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801a660:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801a664:	2b09      	cmp	r3, #9
 801a666:	dc14      	bgt.n	801a692 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801a668:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a66a:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801a66c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a670:	493d      	ldr	r1, [pc, #244]	; (801a768 <etharp_find_entry+0x2d4>)
 801a672:	4613      	mov	r3, r2
 801a674:	005b      	lsls	r3, r3, #1
 801a676:	4413      	add	r3, r2
 801a678:	00db      	lsls	r3, r3, #3
 801a67a:	440b      	add	r3, r1
 801a67c:	681b      	ldr	r3, [r3, #0]
 801a67e:	2b00      	cmp	r3, #0
 801a680:	d018      	beq.n	801a6b4 <etharp_find_entry+0x220>
 801a682:	4b3a      	ldr	r3, [pc, #232]	; (801a76c <etharp_find_entry+0x2d8>)
 801a684:	f240 126d 	movw	r2, #365	; 0x16d
 801a688:	493b      	ldr	r1, [pc, #236]	; (801a778 <etharp_find_entry+0x2e4>)
 801a68a:	483a      	ldr	r0, [pc, #232]	; (801a774 <etharp_find_entry+0x2e0>)
 801a68c:	f002 fd12 	bl	801d0b4 <iprintf>
 801a690:	e010      	b.n	801a6b4 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801a692:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801a696:	2b09      	cmp	r3, #9
 801a698:	dc02      	bgt.n	801a6a0 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801a69a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801a69c:	843b      	strh	r3, [r7, #32]
 801a69e:	e009      	b.n	801a6b4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801a6a0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801a6a4:	2b09      	cmp	r3, #9
 801a6a6:	dc02      	bgt.n	801a6ae <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801a6a8:	8bfb      	ldrh	r3, [r7, #30]
 801a6aa:	843b      	strh	r3, [r7, #32]
 801a6ac:	e002      	b.n	801a6b4 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801a6ae:	f04f 33ff 	mov.w	r3, #4294967295
 801a6b2:	e054      	b.n	801a75e <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a6b4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a6b8:	2b09      	cmp	r3, #9
 801a6ba:	dd06      	ble.n	801a6ca <etharp_find_entry+0x236>
 801a6bc:	4b2b      	ldr	r3, [pc, #172]	; (801a76c <etharp_find_entry+0x2d8>)
 801a6be:	f240 127f 	movw	r2, #383	; 0x17f
 801a6c2:	492e      	ldr	r1, [pc, #184]	; (801a77c <etharp_find_entry+0x2e8>)
 801a6c4:	482b      	ldr	r0, [pc, #172]	; (801a774 <etharp_find_entry+0x2e0>)
 801a6c6:	f002 fcf5 	bl	801d0b4 <iprintf>
    etharp_free_entry(i);
 801a6ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a6ce:	4618      	mov	r0, r3
 801a6d0:	f7ff fe06 	bl	801a2e0 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a6d4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a6d8:	2b09      	cmp	r3, #9
 801a6da:	dd06      	ble.n	801a6ea <etharp_find_entry+0x256>
 801a6dc:	4b23      	ldr	r3, [pc, #140]	; (801a76c <etharp_find_entry+0x2d8>)
 801a6de:	f240 1283 	movw	r2, #387	; 0x183
 801a6e2:	4926      	ldr	r1, [pc, #152]	; (801a77c <etharp_find_entry+0x2e8>)
 801a6e4:	4823      	ldr	r0, [pc, #140]	; (801a774 <etharp_find_entry+0x2e0>)
 801a6e6:	f002 fce5 	bl	801d0b4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801a6ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a6ee:	491e      	ldr	r1, [pc, #120]	; (801a768 <etharp_find_entry+0x2d4>)
 801a6f0:	4613      	mov	r3, r2
 801a6f2:	005b      	lsls	r3, r3, #1
 801a6f4:	4413      	add	r3, r2
 801a6f6:	00db      	lsls	r3, r3, #3
 801a6f8:	440b      	add	r3, r1
 801a6fa:	3314      	adds	r3, #20
 801a6fc:	781b      	ldrb	r3, [r3, #0]
 801a6fe:	2b00      	cmp	r3, #0
 801a700:	d006      	beq.n	801a710 <etharp_find_entry+0x27c>
 801a702:	4b1a      	ldr	r3, [pc, #104]	; (801a76c <etharp_find_entry+0x2d8>)
 801a704:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801a708:	491d      	ldr	r1, [pc, #116]	; (801a780 <etharp_find_entry+0x2ec>)
 801a70a:	481a      	ldr	r0, [pc, #104]	; (801a774 <etharp_find_entry+0x2e0>)
 801a70c:	f002 fcd2 	bl	801d0b4 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801a710:	68fb      	ldr	r3, [r7, #12]
 801a712:	2b00      	cmp	r3, #0
 801a714:	d00b      	beq.n	801a72e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801a716:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a71a:	68fb      	ldr	r3, [r7, #12]
 801a71c:	6819      	ldr	r1, [r3, #0]
 801a71e:	4812      	ldr	r0, [pc, #72]	; (801a768 <etharp_find_entry+0x2d4>)
 801a720:	4613      	mov	r3, r2
 801a722:	005b      	lsls	r3, r3, #1
 801a724:	4413      	add	r3, r2
 801a726:	00db      	lsls	r3, r3, #3
 801a728:	4403      	add	r3, r0
 801a72a:	3304      	adds	r3, #4
 801a72c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801a72e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a732:	490d      	ldr	r1, [pc, #52]	; (801a768 <etharp_find_entry+0x2d4>)
 801a734:	4613      	mov	r3, r2
 801a736:	005b      	lsls	r3, r3, #1
 801a738:	4413      	add	r3, r2
 801a73a:	00db      	lsls	r3, r3, #3
 801a73c:	440b      	add	r3, r1
 801a73e:	3312      	adds	r3, #18
 801a740:	2200      	movs	r2, #0
 801a742:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801a744:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a748:	4907      	ldr	r1, [pc, #28]	; (801a768 <etharp_find_entry+0x2d4>)
 801a74a:	4613      	mov	r3, r2
 801a74c:	005b      	lsls	r3, r3, #1
 801a74e:	4413      	add	r3, r2
 801a750:	00db      	lsls	r3, r3, #3
 801a752:	440b      	add	r3, r1
 801a754:	3308      	adds	r3, #8
 801a756:	687a      	ldr	r2, [r7, #4]
 801a758:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801a75a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801a75e:	4618      	mov	r0, r3
 801a760:	3728      	adds	r7, #40	; 0x28
 801a762:	46bd      	mov	sp, r7
 801a764:	bd80      	pop	{r7, pc}
 801a766:	bf00      	nop
 801a768:	2000de1c 	.word	0x2000de1c
 801a76c:	08021504 	.word	0x08021504
 801a770:	0802153c 	.word	0x0802153c
 801a774:	0802157c 	.word	0x0802157c
 801a778:	080215a4 	.word	0x080215a4
 801a77c:	080215bc 	.word	0x080215bc
 801a780:	080215d0 	.word	0x080215d0

0801a784 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801a784:	b580      	push	{r7, lr}
 801a786:	b088      	sub	sp, #32
 801a788:	af02      	add	r7, sp, #8
 801a78a:	60f8      	str	r0, [r7, #12]
 801a78c:	60b9      	str	r1, [r7, #8]
 801a78e:	607a      	str	r2, [r7, #4]
 801a790:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801a792:	68fb      	ldr	r3, [r7, #12]
 801a794:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a798:	2b06      	cmp	r3, #6
 801a79a:	d006      	beq.n	801a7aa <etharp_update_arp_entry+0x26>
 801a79c:	4b48      	ldr	r3, [pc, #288]	; (801a8c0 <etharp_update_arp_entry+0x13c>)
 801a79e:	f240 12a9 	movw	r2, #425	; 0x1a9
 801a7a2:	4948      	ldr	r1, [pc, #288]	; (801a8c4 <etharp_update_arp_entry+0x140>)
 801a7a4:	4848      	ldr	r0, [pc, #288]	; (801a8c8 <etharp_update_arp_entry+0x144>)
 801a7a6:	f002 fc85 	bl	801d0b4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801a7aa:	68bb      	ldr	r3, [r7, #8]
 801a7ac:	2b00      	cmp	r3, #0
 801a7ae:	d012      	beq.n	801a7d6 <etharp_update_arp_entry+0x52>
 801a7b0:	68bb      	ldr	r3, [r7, #8]
 801a7b2:	681b      	ldr	r3, [r3, #0]
 801a7b4:	2b00      	cmp	r3, #0
 801a7b6:	d00e      	beq.n	801a7d6 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a7b8:	68bb      	ldr	r3, [r7, #8]
 801a7ba:	681b      	ldr	r3, [r3, #0]
 801a7bc:	68f9      	ldr	r1, [r7, #12]
 801a7be:	4618      	mov	r0, r3
 801a7c0:	f001 f8fe 	bl	801b9c0 <ip4_addr_isbroadcast_u32>
 801a7c4:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801a7c6:	2b00      	cmp	r3, #0
 801a7c8:	d105      	bne.n	801a7d6 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801a7ca:	68bb      	ldr	r3, [r7, #8]
 801a7cc:	681b      	ldr	r3, [r3, #0]
 801a7ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a7d2:	2be0      	cmp	r3, #224	; 0xe0
 801a7d4:	d102      	bne.n	801a7dc <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801a7d6:	f06f 030f 	mvn.w	r3, #15
 801a7da:	e06c      	b.n	801a8b6 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801a7dc:	78fb      	ldrb	r3, [r7, #3]
 801a7de:	68fa      	ldr	r2, [r7, #12]
 801a7e0:	4619      	mov	r1, r3
 801a7e2:	68b8      	ldr	r0, [r7, #8]
 801a7e4:	f7ff fe56 	bl	801a494 <etharp_find_entry>
 801a7e8:	4603      	mov	r3, r0
 801a7ea:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801a7ec:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801a7f0:	2b00      	cmp	r3, #0
 801a7f2:	da02      	bge.n	801a7fa <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801a7f4:	8afb      	ldrh	r3, [r7, #22]
 801a7f6:	b25b      	sxtb	r3, r3
 801a7f8:	e05d      	b.n	801a8b6 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801a7fa:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a7fe:	4933      	ldr	r1, [pc, #204]	; (801a8cc <etharp_update_arp_entry+0x148>)
 801a800:	4613      	mov	r3, r2
 801a802:	005b      	lsls	r3, r3, #1
 801a804:	4413      	add	r3, r2
 801a806:	00db      	lsls	r3, r3, #3
 801a808:	440b      	add	r3, r1
 801a80a:	3314      	adds	r3, #20
 801a80c:	2202      	movs	r2, #2
 801a80e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801a810:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a814:	492d      	ldr	r1, [pc, #180]	; (801a8cc <etharp_update_arp_entry+0x148>)
 801a816:	4613      	mov	r3, r2
 801a818:	005b      	lsls	r3, r3, #1
 801a81a:	4413      	add	r3, r2
 801a81c:	00db      	lsls	r3, r3, #3
 801a81e:	440b      	add	r3, r1
 801a820:	3308      	adds	r3, #8
 801a822:	68fa      	ldr	r2, [r7, #12]
 801a824:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801a826:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a82a:	4613      	mov	r3, r2
 801a82c:	005b      	lsls	r3, r3, #1
 801a82e:	4413      	add	r3, r2
 801a830:	00db      	lsls	r3, r3, #3
 801a832:	3308      	adds	r3, #8
 801a834:	4a25      	ldr	r2, [pc, #148]	; (801a8cc <etharp_update_arp_entry+0x148>)
 801a836:	4413      	add	r3, r2
 801a838:	3304      	adds	r3, #4
 801a83a:	2206      	movs	r2, #6
 801a83c:	6879      	ldr	r1, [r7, #4]
 801a83e:	4618      	mov	r0, r3
 801a840:	f002 fb28 	bl	801ce94 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801a844:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a848:	4920      	ldr	r1, [pc, #128]	; (801a8cc <etharp_update_arp_entry+0x148>)
 801a84a:	4613      	mov	r3, r2
 801a84c:	005b      	lsls	r3, r3, #1
 801a84e:	4413      	add	r3, r2
 801a850:	00db      	lsls	r3, r3, #3
 801a852:	440b      	add	r3, r1
 801a854:	3312      	adds	r3, #18
 801a856:	2200      	movs	r2, #0
 801a858:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801a85a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a85e:	491b      	ldr	r1, [pc, #108]	; (801a8cc <etharp_update_arp_entry+0x148>)
 801a860:	4613      	mov	r3, r2
 801a862:	005b      	lsls	r3, r3, #1
 801a864:	4413      	add	r3, r2
 801a866:	00db      	lsls	r3, r3, #3
 801a868:	440b      	add	r3, r1
 801a86a:	681b      	ldr	r3, [r3, #0]
 801a86c:	2b00      	cmp	r3, #0
 801a86e:	d021      	beq.n	801a8b4 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801a870:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a874:	4915      	ldr	r1, [pc, #84]	; (801a8cc <etharp_update_arp_entry+0x148>)
 801a876:	4613      	mov	r3, r2
 801a878:	005b      	lsls	r3, r3, #1
 801a87a:	4413      	add	r3, r2
 801a87c:	00db      	lsls	r3, r3, #3
 801a87e:	440b      	add	r3, r1
 801a880:	681b      	ldr	r3, [r3, #0]
 801a882:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801a884:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a888:	4910      	ldr	r1, [pc, #64]	; (801a8cc <etharp_update_arp_entry+0x148>)
 801a88a:	4613      	mov	r3, r2
 801a88c:	005b      	lsls	r3, r3, #1
 801a88e:	4413      	add	r3, r2
 801a890:	00db      	lsls	r3, r3, #3
 801a892:	440b      	add	r3, r1
 801a894:	2200      	movs	r2, #0
 801a896:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801a898:	68fb      	ldr	r3, [r7, #12]
 801a89a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801a89e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a8a2:	9300      	str	r3, [sp, #0]
 801a8a4:	687b      	ldr	r3, [r7, #4]
 801a8a6:	6939      	ldr	r1, [r7, #16]
 801a8a8:	68f8      	ldr	r0, [r7, #12]
 801a8aa:	f001 ff97 	bl	801c7dc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801a8ae:	6938      	ldr	r0, [r7, #16]
 801a8b0:	f7f8 fc4c 	bl	801314c <pbuf_free>
  }
  return ERR_OK;
 801a8b4:	2300      	movs	r3, #0
}
 801a8b6:	4618      	mov	r0, r3
 801a8b8:	3718      	adds	r7, #24
 801a8ba:	46bd      	mov	sp, r7
 801a8bc:	bd80      	pop	{r7, pc}
 801a8be:	bf00      	nop
 801a8c0:	08021504 	.word	0x08021504
 801a8c4:	080215fc 	.word	0x080215fc
 801a8c8:	0802157c 	.word	0x0802157c
 801a8cc:	2000de1c 	.word	0x2000de1c

0801a8d0 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801a8d0:	b580      	push	{r7, lr}
 801a8d2:	b084      	sub	sp, #16
 801a8d4:	af00      	add	r7, sp, #0
 801a8d6:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a8d8:	2300      	movs	r3, #0
 801a8da:	60fb      	str	r3, [r7, #12]
 801a8dc:	e01e      	b.n	801a91c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801a8de:	4913      	ldr	r1, [pc, #76]	; (801a92c <etharp_cleanup_netif+0x5c>)
 801a8e0:	68fa      	ldr	r2, [r7, #12]
 801a8e2:	4613      	mov	r3, r2
 801a8e4:	005b      	lsls	r3, r3, #1
 801a8e6:	4413      	add	r3, r2
 801a8e8:	00db      	lsls	r3, r3, #3
 801a8ea:	440b      	add	r3, r1
 801a8ec:	3314      	adds	r3, #20
 801a8ee:	781b      	ldrb	r3, [r3, #0]
 801a8f0:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801a8f2:	7afb      	ldrb	r3, [r7, #11]
 801a8f4:	2b00      	cmp	r3, #0
 801a8f6:	d00e      	beq.n	801a916 <etharp_cleanup_netif+0x46>
 801a8f8:	490c      	ldr	r1, [pc, #48]	; (801a92c <etharp_cleanup_netif+0x5c>)
 801a8fa:	68fa      	ldr	r2, [r7, #12]
 801a8fc:	4613      	mov	r3, r2
 801a8fe:	005b      	lsls	r3, r3, #1
 801a900:	4413      	add	r3, r2
 801a902:	00db      	lsls	r3, r3, #3
 801a904:	440b      	add	r3, r1
 801a906:	3308      	adds	r3, #8
 801a908:	681b      	ldr	r3, [r3, #0]
 801a90a:	687a      	ldr	r2, [r7, #4]
 801a90c:	429a      	cmp	r2, r3
 801a90e:	d102      	bne.n	801a916 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801a910:	68f8      	ldr	r0, [r7, #12]
 801a912:	f7ff fce5 	bl	801a2e0 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a916:	68fb      	ldr	r3, [r7, #12]
 801a918:	3301      	adds	r3, #1
 801a91a:	60fb      	str	r3, [r7, #12]
 801a91c:	68fb      	ldr	r3, [r7, #12]
 801a91e:	2b09      	cmp	r3, #9
 801a920:	dddd      	ble.n	801a8de <etharp_cleanup_netif+0xe>
    }
  }
}
 801a922:	bf00      	nop
 801a924:	bf00      	nop
 801a926:	3710      	adds	r7, #16
 801a928:	46bd      	mov	sp, r7
 801a92a:	bd80      	pop	{r7, pc}
 801a92c:	2000de1c 	.word	0x2000de1c

0801a930 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801a930:	b5b0      	push	{r4, r5, r7, lr}
 801a932:	b08a      	sub	sp, #40	; 0x28
 801a934:	af04      	add	r7, sp, #16
 801a936:	6078      	str	r0, [r7, #4]
 801a938:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801a93a:	683b      	ldr	r3, [r7, #0]
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	d107      	bne.n	801a950 <etharp_input+0x20>
 801a940:	4b3d      	ldr	r3, [pc, #244]	; (801aa38 <etharp_input+0x108>)
 801a942:	f240 228a 	movw	r2, #650	; 0x28a
 801a946:	493d      	ldr	r1, [pc, #244]	; (801aa3c <etharp_input+0x10c>)
 801a948:	483d      	ldr	r0, [pc, #244]	; (801aa40 <etharp_input+0x110>)
 801a94a:	f002 fbb3 	bl	801d0b4 <iprintf>
 801a94e:	e06f      	b.n	801aa30 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801a950:	687b      	ldr	r3, [r7, #4]
 801a952:	685b      	ldr	r3, [r3, #4]
 801a954:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a956:	693b      	ldr	r3, [r7, #16]
 801a958:	881b      	ldrh	r3, [r3, #0]
 801a95a:	b29b      	uxth	r3, r3
 801a95c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a960:	d10c      	bne.n	801a97c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a962:	693b      	ldr	r3, [r7, #16]
 801a964:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a966:	2b06      	cmp	r3, #6
 801a968:	d108      	bne.n	801a97c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a96a:	693b      	ldr	r3, [r7, #16]
 801a96c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a96e:	2b04      	cmp	r3, #4
 801a970:	d104      	bne.n	801a97c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801a972:	693b      	ldr	r3, [r7, #16]
 801a974:	885b      	ldrh	r3, [r3, #2]
 801a976:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a978:	2b08      	cmp	r3, #8
 801a97a:	d003      	beq.n	801a984 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801a97c:	6878      	ldr	r0, [r7, #4]
 801a97e:	f7f8 fbe5 	bl	801314c <pbuf_free>
    return;
 801a982:	e055      	b.n	801aa30 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801a984:	693b      	ldr	r3, [r7, #16]
 801a986:	330e      	adds	r3, #14
 801a988:	681b      	ldr	r3, [r3, #0]
 801a98a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801a98c:	693b      	ldr	r3, [r7, #16]
 801a98e:	3318      	adds	r3, #24
 801a990:	681b      	ldr	r3, [r3, #0]
 801a992:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a994:	683b      	ldr	r3, [r7, #0]
 801a996:	3304      	adds	r3, #4
 801a998:	681b      	ldr	r3, [r3, #0]
 801a99a:	2b00      	cmp	r3, #0
 801a99c:	d102      	bne.n	801a9a4 <etharp_input+0x74>
    for_us = 0;
 801a99e:	2300      	movs	r3, #0
 801a9a0:	75fb      	strb	r3, [r7, #23]
 801a9a2:	e009      	b.n	801a9b8 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801a9a4:	68ba      	ldr	r2, [r7, #8]
 801a9a6:	683b      	ldr	r3, [r7, #0]
 801a9a8:	3304      	adds	r3, #4
 801a9aa:	681b      	ldr	r3, [r3, #0]
 801a9ac:	429a      	cmp	r2, r3
 801a9ae:	bf0c      	ite	eq
 801a9b0:	2301      	moveq	r3, #1
 801a9b2:	2300      	movne	r3, #0
 801a9b4:	b2db      	uxtb	r3, r3
 801a9b6:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801a9b8:	693b      	ldr	r3, [r7, #16]
 801a9ba:	f103 0208 	add.w	r2, r3, #8
 801a9be:	7dfb      	ldrb	r3, [r7, #23]
 801a9c0:	2b00      	cmp	r3, #0
 801a9c2:	d001      	beq.n	801a9c8 <etharp_input+0x98>
 801a9c4:	2301      	movs	r3, #1
 801a9c6:	e000      	b.n	801a9ca <etharp_input+0x9a>
 801a9c8:	2302      	movs	r3, #2
 801a9ca:	f107 010c 	add.w	r1, r7, #12
 801a9ce:	6838      	ldr	r0, [r7, #0]
 801a9d0:	f7ff fed8 	bl	801a784 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801a9d4:	693b      	ldr	r3, [r7, #16]
 801a9d6:	88db      	ldrh	r3, [r3, #6]
 801a9d8:	b29b      	uxth	r3, r3
 801a9da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a9de:	d003      	beq.n	801a9e8 <etharp_input+0xb8>
 801a9e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a9e4:	d01e      	beq.n	801aa24 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801a9e6:	e020      	b.n	801aa2a <etharp_input+0xfa>
      if (for_us) {
 801a9e8:	7dfb      	ldrb	r3, [r7, #23]
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	d01c      	beq.n	801aa28 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801a9ee:	683b      	ldr	r3, [r7, #0]
 801a9f0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801a9f4:	693b      	ldr	r3, [r7, #16]
 801a9f6:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801a9fa:	683b      	ldr	r3, [r7, #0]
 801a9fc:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801aa00:	683b      	ldr	r3, [r7, #0]
 801aa02:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801aa04:	693a      	ldr	r2, [r7, #16]
 801aa06:	3208      	adds	r2, #8
        etharp_raw(netif,
 801aa08:	2102      	movs	r1, #2
 801aa0a:	9103      	str	r1, [sp, #12]
 801aa0c:	f107 010c 	add.w	r1, r7, #12
 801aa10:	9102      	str	r1, [sp, #8]
 801aa12:	9201      	str	r2, [sp, #4]
 801aa14:	9300      	str	r3, [sp, #0]
 801aa16:	462b      	mov	r3, r5
 801aa18:	4622      	mov	r2, r4
 801aa1a:	4601      	mov	r1, r0
 801aa1c:	6838      	ldr	r0, [r7, #0]
 801aa1e:	f000 faeb 	bl	801aff8 <etharp_raw>
      break;
 801aa22:	e001      	b.n	801aa28 <etharp_input+0xf8>
      break;
 801aa24:	bf00      	nop
 801aa26:	e000      	b.n	801aa2a <etharp_input+0xfa>
      break;
 801aa28:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801aa2a:	6878      	ldr	r0, [r7, #4]
 801aa2c:	f7f8 fb8e 	bl	801314c <pbuf_free>
}
 801aa30:	3718      	adds	r7, #24
 801aa32:	46bd      	mov	sp, r7
 801aa34:	bdb0      	pop	{r4, r5, r7, pc}
 801aa36:	bf00      	nop
 801aa38:	08021504 	.word	0x08021504
 801aa3c:	08021654 	.word	0x08021654
 801aa40:	0802157c 	.word	0x0802157c

0801aa44 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801aa44:	b580      	push	{r7, lr}
 801aa46:	b086      	sub	sp, #24
 801aa48:	af02      	add	r7, sp, #8
 801aa4a:	60f8      	str	r0, [r7, #12]
 801aa4c:	60b9      	str	r1, [r7, #8]
 801aa4e:	4613      	mov	r3, r2
 801aa50:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801aa52:	79fa      	ldrb	r2, [r7, #7]
 801aa54:	4944      	ldr	r1, [pc, #272]	; (801ab68 <etharp_output_to_arp_index+0x124>)
 801aa56:	4613      	mov	r3, r2
 801aa58:	005b      	lsls	r3, r3, #1
 801aa5a:	4413      	add	r3, r2
 801aa5c:	00db      	lsls	r3, r3, #3
 801aa5e:	440b      	add	r3, r1
 801aa60:	3314      	adds	r3, #20
 801aa62:	781b      	ldrb	r3, [r3, #0]
 801aa64:	2b01      	cmp	r3, #1
 801aa66:	d806      	bhi.n	801aa76 <etharp_output_to_arp_index+0x32>
 801aa68:	4b40      	ldr	r3, [pc, #256]	; (801ab6c <etharp_output_to_arp_index+0x128>)
 801aa6a:	f240 22ee 	movw	r2, #750	; 0x2ee
 801aa6e:	4940      	ldr	r1, [pc, #256]	; (801ab70 <etharp_output_to_arp_index+0x12c>)
 801aa70:	4840      	ldr	r0, [pc, #256]	; (801ab74 <etharp_output_to_arp_index+0x130>)
 801aa72:	f002 fb1f 	bl	801d0b4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801aa76:	79fa      	ldrb	r2, [r7, #7]
 801aa78:	493b      	ldr	r1, [pc, #236]	; (801ab68 <etharp_output_to_arp_index+0x124>)
 801aa7a:	4613      	mov	r3, r2
 801aa7c:	005b      	lsls	r3, r3, #1
 801aa7e:	4413      	add	r3, r2
 801aa80:	00db      	lsls	r3, r3, #3
 801aa82:	440b      	add	r3, r1
 801aa84:	3314      	adds	r3, #20
 801aa86:	781b      	ldrb	r3, [r3, #0]
 801aa88:	2b02      	cmp	r3, #2
 801aa8a:	d153      	bne.n	801ab34 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801aa8c:	79fa      	ldrb	r2, [r7, #7]
 801aa8e:	4936      	ldr	r1, [pc, #216]	; (801ab68 <etharp_output_to_arp_index+0x124>)
 801aa90:	4613      	mov	r3, r2
 801aa92:	005b      	lsls	r3, r3, #1
 801aa94:	4413      	add	r3, r2
 801aa96:	00db      	lsls	r3, r3, #3
 801aa98:	440b      	add	r3, r1
 801aa9a:	3312      	adds	r3, #18
 801aa9c:	881b      	ldrh	r3, [r3, #0]
 801aa9e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801aaa2:	d919      	bls.n	801aad8 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801aaa4:	79fa      	ldrb	r2, [r7, #7]
 801aaa6:	4613      	mov	r3, r2
 801aaa8:	005b      	lsls	r3, r3, #1
 801aaaa:	4413      	add	r3, r2
 801aaac:	00db      	lsls	r3, r3, #3
 801aaae:	4a2e      	ldr	r2, [pc, #184]	; (801ab68 <etharp_output_to_arp_index+0x124>)
 801aab0:	4413      	add	r3, r2
 801aab2:	3304      	adds	r3, #4
 801aab4:	4619      	mov	r1, r3
 801aab6:	68f8      	ldr	r0, [r7, #12]
 801aab8:	f000 fb4c 	bl	801b154 <etharp_request>
 801aabc:	4603      	mov	r3, r0
 801aabe:	2b00      	cmp	r3, #0
 801aac0:	d138      	bne.n	801ab34 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801aac2:	79fa      	ldrb	r2, [r7, #7]
 801aac4:	4928      	ldr	r1, [pc, #160]	; (801ab68 <etharp_output_to_arp_index+0x124>)
 801aac6:	4613      	mov	r3, r2
 801aac8:	005b      	lsls	r3, r3, #1
 801aaca:	4413      	add	r3, r2
 801aacc:	00db      	lsls	r3, r3, #3
 801aace:	440b      	add	r3, r1
 801aad0:	3314      	adds	r3, #20
 801aad2:	2203      	movs	r2, #3
 801aad4:	701a      	strb	r2, [r3, #0]
 801aad6:	e02d      	b.n	801ab34 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801aad8:	79fa      	ldrb	r2, [r7, #7]
 801aada:	4923      	ldr	r1, [pc, #140]	; (801ab68 <etharp_output_to_arp_index+0x124>)
 801aadc:	4613      	mov	r3, r2
 801aade:	005b      	lsls	r3, r3, #1
 801aae0:	4413      	add	r3, r2
 801aae2:	00db      	lsls	r3, r3, #3
 801aae4:	440b      	add	r3, r1
 801aae6:	3312      	adds	r3, #18
 801aae8:	881b      	ldrh	r3, [r3, #0]
 801aaea:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801aaee:	d321      	bcc.n	801ab34 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801aaf0:	79fa      	ldrb	r2, [r7, #7]
 801aaf2:	4613      	mov	r3, r2
 801aaf4:	005b      	lsls	r3, r3, #1
 801aaf6:	4413      	add	r3, r2
 801aaf8:	00db      	lsls	r3, r3, #3
 801aafa:	4a1b      	ldr	r2, [pc, #108]	; (801ab68 <etharp_output_to_arp_index+0x124>)
 801aafc:	4413      	add	r3, r2
 801aafe:	1d19      	adds	r1, r3, #4
 801ab00:	79fa      	ldrb	r2, [r7, #7]
 801ab02:	4613      	mov	r3, r2
 801ab04:	005b      	lsls	r3, r3, #1
 801ab06:	4413      	add	r3, r2
 801ab08:	00db      	lsls	r3, r3, #3
 801ab0a:	3308      	adds	r3, #8
 801ab0c:	4a16      	ldr	r2, [pc, #88]	; (801ab68 <etharp_output_to_arp_index+0x124>)
 801ab0e:	4413      	add	r3, r2
 801ab10:	3304      	adds	r3, #4
 801ab12:	461a      	mov	r2, r3
 801ab14:	68f8      	ldr	r0, [r7, #12]
 801ab16:	f000 fafb 	bl	801b110 <etharp_request_dst>
 801ab1a:	4603      	mov	r3, r0
 801ab1c:	2b00      	cmp	r3, #0
 801ab1e:	d109      	bne.n	801ab34 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801ab20:	79fa      	ldrb	r2, [r7, #7]
 801ab22:	4911      	ldr	r1, [pc, #68]	; (801ab68 <etharp_output_to_arp_index+0x124>)
 801ab24:	4613      	mov	r3, r2
 801ab26:	005b      	lsls	r3, r3, #1
 801ab28:	4413      	add	r3, r2
 801ab2a:	00db      	lsls	r3, r3, #3
 801ab2c:	440b      	add	r3, r1
 801ab2e:	3314      	adds	r3, #20
 801ab30:	2203      	movs	r2, #3
 801ab32:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801ab34:	68fb      	ldr	r3, [r7, #12]
 801ab36:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801ab3a:	79fa      	ldrb	r2, [r7, #7]
 801ab3c:	4613      	mov	r3, r2
 801ab3e:	005b      	lsls	r3, r3, #1
 801ab40:	4413      	add	r3, r2
 801ab42:	00db      	lsls	r3, r3, #3
 801ab44:	3308      	adds	r3, #8
 801ab46:	4a08      	ldr	r2, [pc, #32]	; (801ab68 <etharp_output_to_arp_index+0x124>)
 801ab48:	4413      	add	r3, r2
 801ab4a:	3304      	adds	r3, #4
 801ab4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801ab50:	9200      	str	r2, [sp, #0]
 801ab52:	460a      	mov	r2, r1
 801ab54:	68b9      	ldr	r1, [r7, #8]
 801ab56:	68f8      	ldr	r0, [r7, #12]
 801ab58:	f001 fe40 	bl	801c7dc <ethernet_output>
 801ab5c:	4603      	mov	r3, r0
}
 801ab5e:	4618      	mov	r0, r3
 801ab60:	3710      	adds	r7, #16
 801ab62:	46bd      	mov	sp, r7
 801ab64:	bd80      	pop	{r7, pc}
 801ab66:	bf00      	nop
 801ab68:	2000de1c 	.word	0x2000de1c
 801ab6c:	08021504 	.word	0x08021504
 801ab70:	08021674 	.word	0x08021674
 801ab74:	0802157c 	.word	0x0802157c

0801ab78 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801ab78:	b580      	push	{r7, lr}
 801ab7a:	b08a      	sub	sp, #40	; 0x28
 801ab7c:	af02      	add	r7, sp, #8
 801ab7e:	60f8      	str	r0, [r7, #12]
 801ab80:	60b9      	str	r1, [r7, #8]
 801ab82:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801ab84:	687b      	ldr	r3, [r7, #4]
 801ab86:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801ab88:	68fb      	ldr	r3, [r7, #12]
 801ab8a:	2b00      	cmp	r3, #0
 801ab8c:	d106      	bne.n	801ab9c <etharp_output+0x24>
 801ab8e:	4b73      	ldr	r3, [pc, #460]	; (801ad5c <etharp_output+0x1e4>)
 801ab90:	f240 321e 	movw	r2, #798	; 0x31e
 801ab94:	4972      	ldr	r1, [pc, #456]	; (801ad60 <etharp_output+0x1e8>)
 801ab96:	4873      	ldr	r0, [pc, #460]	; (801ad64 <etharp_output+0x1ec>)
 801ab98:	f002 fa8c 	bl	801d0b4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801ab9c:	68bb      	ldr	r3, [r7, #8]
 801ab9e:	2b00      	cmp	r3, #0
 801aba0:	d106      	bne.n	801abb0 <etharp_output+0x38>
 801aba2:	4b6e      	ldr	r3, [pc, #440]	; (801ad5c <etharp_output+0x1e4>)
 801aba4:	f240 321f 	movw	r2, #799	; 0x31f
 801aba8:	496f      	ldr	r1, [pc, #444]	; (801ad68 <etharp_output+0x1f0>)
 801abaa:	486e      	ldr	r0, [pc, #440]	; (801ad64 <etharp_output+0x1ec>)
 801abac:	f002 fa82 	bl	801d0b4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	2b00      	cmp	r3, #0
 801abb4:	d106      	bne.n	801abc4 <etharp_output+0x4c>
 801abb6:	4b69      	ldr	r3, [pc, #420]	; (801ad5c <etharp_output+0x1e4>)
 801abb8:	f44f 7248 	mov.w	r2, #800	; 0x320
 801abbc:	496b      	ldr	r1, [pc, #428]	; (801ad6c <etharp_output+0x1f4>)
 801abbe:	4869      	ldr	r0, [pc, #420]	; (801ad64 <etharp_output+0x1ec>)
 801abc0:	f002 fa78 	bl	801d0b4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	681b      	ldr	r3, [r3, #0]
 801abc8:	68f9      	ldr	r1, [r7, #12]
 801abca:	4618      	mov	r0, r3
 801abcc:	f000 fef8 	bl	801b9c0 <ip4_addr_isbroadcast_u32>
 801abd0:	4603      	mov	r3, r0
 801abd2:	2b00      	cmp	r3, #0
 801abd4:	d002      	beq.n	801abdc <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801abd6:	4b66      	ldr	r3, [pc, #408]	; (801ad70 <etharp_output+0x1f8>)
 801abd8:	61fb      	str	r3, [r7, #28]
 801abda:	e0af      	b.n	801ad3c <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801abdc:	687b      	ldr	r3, [r7, #4]
 801abde:	681b      	ldr	r3, [r3, #0]
 801abe0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801abe4:	2be0      	cmp	r3, #224	; 0xe0
 801abe6:	d118      	bne.n	801ac1a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801abe8:	2301      	movs	r3, #1
 801abea:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801abec:	2300      	movs	r3, #0
 801abee:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801abf0:	235e      	movs	r3, #94	; 0x5e
 801abf2:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801abf4:	687b      	ldr	r3, [r7, #4]
 801abf6:	3301      	adds	r3, #1
 801abf8:	781b      	ldrb	r3, [r3, #0]
 801abfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801abfe:	b2db      	uxtb	r3, r3
 801ac00:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801ac02:	687b      	ldr	r3, [r7, #4]
 801ac04:	3302      	adds	r3, #2
 801ac06:	781b      	ldrb	r3, [r3, #0]
 801ac08:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801ac0a:	687b      	ldr	r3, [r7, #4]
 801ac0c:	3303      	adds	r3, #3
 801ac0e:	781b      	ldrb	r3, [r3, #0]
 801ac10:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801ac12:	f107 0310 	add.w	r3, r7, #16
 801ac16:	61fb      	str	r3, [r7, #28]
 801ac18:	e090      	b.n	801ad3c <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801ac1a:	687b      	ldr	r3, [r7, #4]
 801ac1c:	681a      	ldr	r2, [r3, #0]
 801ac1e:	68fb      	ldr	r3, [r7, #12]
 801ac20:	3304      	adds	r3, #4
 801ac22:	681b      	ldr	r3, [r3, #0]
 801ac24:	405a      	eors	r2, r3
 801ac26:	68fb      	ldr	r3, [r7, #12]
 801ac28:	3308      	adds	r3, #8
 801ac2a:	681b      	ldr	r3, [r3, #0]
 801ac2c:	4013      	ands	r3, r2
 801ac2e:	2b00      	cmp	r3, #0
 801ac30:	d012      	beq.n	801ac58 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801ac32:	687b      	ldr	r3, [r7, #4]
 801ac34:	681b      	ldr	r3, [r3, #0]
 801ac36:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801ac38:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801ac3c:	4293      	cmp	r3, r2
 801ac3e:	d00b      	beq.n	801ac58 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801ac40:	68fb      	ldr	r3, [r7, #12]
 801ac42:	330c      	adds	r3, #12
 801ac44:	681b      	ldr	r3, [r3, #0]
 801ac46:	2b00      	cmp	r3, #0
 801ac48:	d003      	beq.n	801ac52 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801ac4a:	68fb      	ldr	r3, [r7, #12]
 801ac4c:	330c      	adds	r3, #12
 801ac4e:	61bb      	str	r3, [r7, #24]
 801ac50:	e002      	b.n	801ac58 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801ac52:	f06f 0303 	mvn.w	r3, #3
 801ac56:	e07d      	b.n	801ad54 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801ac58:	4b46      	ldr	r3, [pc, #280]	; (801ad74 <etharp_output+0x1fc>)
 801ac5a:	781b      	ldrb	r3, [r3, #0]
 801ac5c:	4619      	mov	r1, r3
 801ac5e:	4a46      	ldr	r2, [pc, #280]	; (801ad78 <etharp_output+0x200>)
 801ac60:	460b      	mov	r3, r1
 801ac62:	005b      	lsls	r3, r3, #1
 801ac64:	440b      	add	r3, r1
 801ac66:	00db      	lsls	r3, r3, #3
 801ac68:	4413      	add	r3, r2
 801ac6a:	3314      	adds	r3, #20
 801ac6c:	781b      	ldrb	r3, [r3, #0]
 801ac6e:	2b01      	cmp	r3, #1
 801ac70:	d925      	bls.n	801acbe <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801ac72:	4b40      	ldr	r3, [pc, #256]	; (801ad74 <etharp_output+0x1fc>)
 801ac74:	781b      	ldrb	r3, [r3, #0]
 801ac76:	4619      	mov	r1, r3
 801ac78:	4a3f      	ldr	r2, [pc, #252]	; (801ad78 <etharp_output+0x200>)
 801ac7a:	460b      	mov	r3, r1
 801ac7c:	005b      	lsls	r3, r3, #1
 801ac7e:	440b      	add	r3, r1
 801ac80:	00db      	lsls	r3, r3, #3
 801ac82:	4413      	add	r3, r2
 801ac84:	3308      	adds	r3, #8
 801ac86:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801ac88:	68fa      	ldr	r2, [r7, #12]
 801ac8a:	429a      	cmp	r2, r3
 801ac8c:	d117      	bne.n	801acbe <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801ac8e:	69bb      	ldr	r3, [r7, #24]
 801ac90:	681a      	ldr	r2, [r3, #0]
 801ac92:	4b38      	ldr	r3, [pc, #224]	; (801ad74 <etharp_output+0x1fc>)
 801ac94:	781b      	ldrb	r3, [r3, #0]
 801ac96:	4618      	mov	r0, r3
 801ac98:	4937      	ldr	r1, [pc, #220]	; (801ad78 <etharp_output+0x200>)
 801ac9a:	4603      	mov	r3, r0
 801ac9c:	005b      	lsls	r3, r3, #1
 801ac9e:	4403      	add	r3, r0
 801aca0:	00db      	lsls	r3, r3, #3
 801aca2:	440b      	add	r3, r1
 801aca4:	3304      	adds	r3, #4
 801aca6:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801aca8:	429a      	cmp	r2, r3
 801acaa:	d108      	bne.n	801acbe <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801acac:	4b31      	ldr	r3, [pc, #196]	; (801ad74 <etharp_output+0x1fc>)
 801acae:	781b      	ldrb	r3, [r3, #0]
 801acb0:	461a      	mov	r2, r3
 801acb2:	68b9      	ldr	r1, [r7, #8]
 801acb4:	68f8      	ldr	r0, [r7, #12]
 801acb6:	f7ff fec5 	bl	801aa44 <etharp_output_to_arp_index>
 801acba:	4603      	mov	r3, r0
 801acbc:	e04a      	b.n	801ad54 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801acbe:	2300      	movs	r3, #0
 801acc0:	75fb      	strb	r3, [r7, #23]
 801acc2:	e031      	b.n	801ad28 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801acc4:	7dfa      	ldrb	r2, [r7, #23]
 801acc6:	492c      	ldr	r1, [pc, #176]	; (801ad78 <etharp_output+0x200>)
 801acc8:	4613      	mov	r3, r2
 801acca:	005b      	lsls	r3, r3, #1
 801accc:	4413      	add	r3, r2
 801acce:	00db      	lsls	r3, r3, #3
 801acd0:	440b      	add	r3, r1
 801acd2:	3314      	adds	r3, #20
 801acd4:	781b      	ldrb	r3, [r3, #0]
 801acd6:	2b01      	cmp	r3, #1
 801acd8:	d923      	bls.n	801ad22 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801acda:	7dfa      	ldrb	r2, [r7, #23]
 801acdc:	4926      	ldr	r1, [pc, #152]	; (801ad78 <etharp_output+0x200>)
 801acde:	4613      	mov	r3, r2
 801ace0:	005b      	lsls	r3, r3, #1
 801ace2:	4413      	add	r3, r2
 801ace4:	00db      	lsls	r3, r3, #3
 801ace6:	440b      	add	r3, r1
 801ace8:	3308      	adds	r3, #8
 801acea:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801acec:	68fa      	ldr	r2, [r7, #12]
 801acee:	429a      	cmp	r2, r3
 801acf0:	d117      	bne.n	801ad22 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801acf2:	69bb      	ldr	r3, [r7, #24]
 801acf4:	6819      	ldr	r1, [r3, #0]
 801acf6:	7dfa      	ldrb	r2, [r7, #23]
 801acf8:	481f      	ldr	r0, [pc, #124]	; (801ad78 <etharp_output+0x200>)
 801acfa:	4613      	mov	r3, r2
 801acfc:	005b      	lsls	r3, r3, #1
 801acfe:	4413      	add	r3, r2
 801ad00:	00db      	lsls	r3, r3, #3
 801ad02:	4403      	add	r3, r0
 801ad04:	3304      	adds	r3, #4
 801ad06:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801ad08:	4299      	cmp	r1, r3
 801ad0a:	d10a      	bne.n	801ad22 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801ad0c:	4a19      	ldr	r2, [pc, #100]	; (801ad74 <etharp_output+0x1fc>)
 801ad0e:	7dfb      	ldrb	r3, [r7, #23]
 801ad10:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801ad12:	7dfb      	ldrb	r3, [r7, #23]
 801ad14:	461a      	mov	r2, r3
 801ad16:	68b9      	ldr	r1, [r7, #8]
 801ad18:	68f8      	ldr	r0, [r7, #12]
 801ad1a:	f7ff fe93 	bl	801aa44 <etharp_output_to_arp_index>
 801ad1e:	4603      	mov	r3, r0
 801ad20:	e018      	b.n	801ad54 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801ad22:	7dfb      	ldrb	r3, [r7, #23]
 801ad24:	3301      	adds	r3, #1
 801ad26:	75fb      	strb	r3, [r7, #23]
 801ad28:	7dfb      	ldrb	r3, [r7, #23]
 801ad2a:	2b09      	cmp	r3, #9
 801ad2c:	d9ca      	bls.n	801acc4 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801ad2e:	68ba      	ldr	r2, [r7, #8]
 801ad30:	69b9      	ldr	r1, [r7, #24]
 801ad32:	68f8      	ldr	r0, [r7, #12]
 801ad34:	f000 f822 	bl	801ad7c <etharp_query>
 801ad38:	4603      	mov	r3, r0
 801ad3a:	e00b      	b.n	801ad54 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801ad3c:	68fb      	ldr	r3, [r7, #12]
 801ad3e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801ad42:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ad46:	9300      	str	r3, [sp, #0]
 801ad48:	69fb      	ldr	r3, [r7, #28]
 801ad4a:	68b9      	ldr	r1, [r7, #8]
 801ad4c:	68f8      	ldr	r0, [r7, #12]
 801ad4e:	f001 fd45 	bl	801c7dc <ethernet_output>
 801ad52:	4603      	mov	r3, r0
}
 801ad54:	4618      	mov	r0, r3
 801ad56:	3720      	adds	r7, #32
 801ad58:	46bd      	mov	sp, r7
 801ad5a:	bd80      	pop	{r7, pc}
 801ad5c:	08021504 	.word	0x08021504
 801ad60:	08021654 	.word	0x08021654
 801ad64:	0802157c 	.word	0x0802157c
 801ad68:	080216a4 	.word	0x080216a4
 801ad6c:	08021644 	.word	0x08021644
 801ad70:	08021d00 	.word	0x08021d00
 801ad74:	2000df0c 	.word	0x2000df0c
 801ad78:	2000de1c 	.word	0x2000de1c

0801ad7c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801ad7c:	b580      	push	{r7, lr}
 801ad7e:	b08c      	sub	sp, #48	; 0x30
 801ad80:	af02      	add	r7, sp, #8
 801ad82:	60f8      	str	r0, [r7, #12]
 801ad84:	60b9      	str	r1, [r7, #8]
 801ad86:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801ad88:	68fb      	ldr	r3, [r7, #12]
 801ad8a:	3326      	adds	r3, #38	; 0x26
 801ad8c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801ad8e:	23ff      	movs	r3, #255	; 0xff
 801ad90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801ad94:	2300      	movs	r3, #0
 801ad96:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801ad98:	68bb      	ldr	r3, [r7, #8]
 801ad9a:	681b      	ldr	r3, [r3, #0]
 801ad9c:	68f9      	ldr	r1, [r7, #12]
 801ad9e:	4618      	mov	r0, r3
 801ada0:	f000 fe0e 	bl	801b9c0 <ip4_addr_isbroadcast_u32>
 801ada4:	4603      	mov	r3, r0
 801ada6:	2b00      	cmp	r3, #0
 801ada8:	d10c      	bne.n	801adc4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801adaa:	68bb      	ldr	r3, [r7, #8]
 801adac:	681b      	ldr	r3, [r3, #0]
 801adae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801adb2:	2be0      	cmp	r3, #224	; 0xe0
 801adb4:	d006      	beq.n	801adc4 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801adb6:	68bb      	ldr	r3, [r7, #8]
 801adb8:	2b00      	cmp	r3, #0
 801adba:	d003      	beq.n	801adc4 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801adbc:	68bb      	ldr	r3, [r7, #8]
 801adbe:	681b      	ldr	r3, [r3, #0]
 801adc0:	2b00      	cmp	r3, #0
 801adc2:	d102      	bne.n	801adca <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801adc4:	f06f 030f 	mvn.w	r3, #15
 801adc8:	e101      	b.n	801afce <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801adca:	68fa      	ldr	r2, [r7, #12]
 801adcc:	2101      	movs	r1, #1
 801adce:	68b8      	ldr	r0, [r7, #8]
 801add0:	f7ff fb60 	bl	801a494 <etharp_find_entry>
 801add4:	4603      	mov	r3, r0
 801add6:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801add8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801addc:	2b00      	cmp	r3, #0
 801adde:	da02      	bge.n	801ade6 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801ade0:	8a7b      	ldrh	r3, [r7, #18]
 801ade2:	b25b      	sxtb	r3, r3
 801ade4:	e0f3      	b.n	801afce <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801ade6:	8a7b      	ldrh	r3, [r7, #18]
 801ade8:	2b7e      	cmp	r3, #126	; 0x7e
 801adea:	d906      	bls.n	801adfa <etharp_query+0x7e>
 801adec:	4b7a      	ldr	r3, [pc, #488]	; (801afd8 <etharp_query+0x25c>)
 801adee:	f240 32c1 	movw	r2, #961	; 0x3c1
 801adf2:	497a      	ldr	r1, [pc, #488]	; (801afdc <etharp_query+0x260>)
 801adf4:	487a      	ldr	r0, [pc, #488]	; (801afe0 <etharp_query+0x264>)
 801adf6:	f002 f95d 	bl	801d0b4 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801adfa:	8a7b      	ldrh	r3, [r7, #18]
 801adfc:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801adfe:	7c7a      	ldrb	r2, [r7, #17]
 801ae00:	4978      	ldr	r1, [pc, #480]	; (801afe4 <etharp_query+0x268>)
 801ae02:	4613      	mov	r3, r2
 801ae04:	005b      	lsls	r3, r3, #1
 801ae06:	4413      	add	r3, r2
 801ae08:	00db      	lsls	r3, r3, #3
 801ae0a:	440b      	add	r3, r1
 801ae0c:	3314      	adds	r3, #20
 801ae0e:	781b      	ldrb	r3, [r3, #0]
 801ae10:	2b00      	cmp	r3, #0
 801ae12:	d115      	bne.n	801ae40 <etharp_query+0xc4>
    is_new_entry = 1;
 801ae14:	2301      	movs	r3, #1
 801ae16:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801ae18:	7c7a      	ldrb	r2, [r7, #17]
 801ae1a:	4972      	ldr	r1, [pc, #456]	; (801afe4 <etharp_query+0x268>)
 801ae1c:	4613      	mov	r3, r2
 801ae1e:	005b      	lsls	r3, r3, #1
 801ae20:	4413      	add	r3, r2
 801ae22:	00db      	lsls	r3, r3, #3
 801ae24:	440b      	add	r3, r1
 801ae26:	3314      	adds	r3, #20
 801ae28:	2201      	movs	r2, #1
 801ae2a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801ae2c:	7c7a      	ldrb	r2, [r7, #17]
 801ae2e:	496d      	ldr	r1, [pc, #436]	; (801afe4 <etharp_query+0x268>)
 801ae30:	4613      	mov	r3, r2
 801ae32:	005b      	lsls	r3, r3, #1
 801ae34:	4413      	add	r3, r2
 801ae36:	00db      	lsls	r3, r3, #3
 801ae38:	440b      	add	r3, r1
 801ae3a:	3308      	adds	r3, #8
 801ae3c:	68fa      	ldr	r2, [r7, #12]
 801ae3e:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801ae40:	7c7a      	ldrb	r2, [r7, #17]
 801ae42:	4968      	ldr	r1, [pc, #416]	; (801afe4 <etharp_query+0x268>)
 801ae44:	4613      	mov	r3, r2
 801ae46:	005b      	lsls	r3, r3, #1
 801ae48:	4413      	add	r3, r2
 801ae4a:	00db      	lsls	r3, r3, #3
 801ae4c:	440b      	add	r3, r1
 801ae4e:	3314      	adds	r3, #20
 801ae50:	781b      	ldrb	r3, [r3, #0]
 801ae52:	2b01      	cmp	r3, #1
 801ae54:	d011      	beq.n	801ae7a <etharp_query+0xfe>
 801ae56:	7c7a      	ldrb	r2, [r7, #17]
 801ae58:	4962      	ldr	r1, [pc, #392]	; (801afe4 <etharp_query+0x268>)
 801ae5a:	4613      	mov	r3, r2
 801ae5c:	005b      	lsls	r3, r3, #1
 801ae5e:	4413      	add	r3, r2
 801ae60:	00db      	lsls	r3, r3, #3
 801ae62:	440b      	add	r3, r1
 801ae64:	3314      	adds	r3, #20
 801ae66:	781b      	ldrb	r3, [r3, #0]
 801ae68:	2b01      	cmp	r3, #1
 801ae6a:	d806      	bhi.n	801ae7a <etharp_query+0xfe>
 801ae6c:	4b5a      	ldr	r3, [pc, #360]	; (801afd8 <etharp_query+0x25c>)
 801ae6e:	f240 32cd 	movw	r2, #973	; 0x3cd
 801ae72:	495d      	ldr	r1, [pc, #372]	; (801afe8 <etharp_query+0x26c>)
 801ae74:	485a      	ldr	r0, [pc, #360]	; (801afe0 <etharp_query+0x264>)
 801ae76:	f002 f91d 	bl	801d0b4 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801ae7a:	6a3b      	ldr	r3, [r7, #32]
 801ae7c:	2b00      	cmp	r3, #0
 801ae7e:	d102      	bne.n	801ae86 <etharp_query+0x10a>
 801ae80:	687b      	ldr	r3, [r7, #4]
 801ae82:	2b00      	cmp	r3, #0
 801ae84:	d10c      	bne.n	801aea0 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801ae86:	68b9      	ldr	r1, [r7, #8]
 801ae88:	68f8      	ldr	r0, [r7, #12]
 801ae8a:	f000 f963 	bl	801b154 <etharp_request>
 801ae8e:	4603      	mov	r3, r0
 801ae90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801ae94:	687b      	ldr	r3, [r7, #4]
 801ae96:	2b00      	cmp	r3, #0
 801ae98:	d102      	bne.n	801aea0 <etharp_query+0x124>
      return result;
 801ae9a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801ae9e:	e096      	b.n	801afce <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801aea0:	687b      	ldr	r3, [r7, #4]
 801aea2:	2b00      	cmp	r3, #0
 801aea4:	d106      	bne.n	801aeb4 <etharp_query+0x138>
 801aea6:	4b4c      	ldr	r3, [pc, #304]	; (801afd8 <etharp_query+0x25c>)
 801aea8:	f240 32e1 	movw	r2, #993	; 0x3e1
 801aeac:	494f      	ldr	r1, [pc, #316]	; (801afec <etharp_query+0x270>)
 801aeae:	484c      	ldr	r0, [pc, #304]	; (801afe0 <etharp_query+0x264>)
 801aeb0:	f002 f900 	bl	801d0b4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801aeb4:	7c7a      	ldrb	r2, [r7, #17]
 801aeb6:	494b      	ldr	r1, [pc, #300]	; (801afe4 <etharp_query+0x268>)
 801aeb8:	4613      	mov	r3, r2
 801aeba:	005b      	lsls	r3, r3, #1
 801aebc:	4413      	add	r3, r2
 801aebe:	00db      	lsls	r3, r3, #3
 801aec0:	440b      	add	r3, r1
 801aec2:	3314      	adds	r3, #20
 801aec4:	781b      	ldrb	r3, [r3, #0]
 801aec6:	2b01      	cmp	r3, #1
 801aec8:	d917      	bls.n	801aefa <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801aeca:	4a49      	ldr	r2, [pc, #292]	; (801aff0 <etharp_query+0x274>)
 801aecc:	7c7b      	ldrb	r3, [r7, #17]
 801aece:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801aed0:	7c7a      	ldrb	r2, [r7, #17]
 801aed2:	4613      	mov	r3, r2
 801aed4:	005b      	lsls	r3, r3, #1
 801aed6:	4413      	add	r3, r2
 801aed8:	00db      	lsls	r3, r3, #3
 801aeda:	3308      	adds	r3, #8
 801aedc:	4a41      	ldr	r2, [pc, #260]	; (801afe4 <etharp_query+0x268>)
 801aede:	4413      	add	r3, r2
 801aee0:	3304      	adds	r3, #4
 801aee2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801aee6:	9200      	str	r2, [sp, #0]
 801aee8:	697a      	ldr	r2, [r7, #20]
 801aeea:	6879      	ldr	r1, [r7, #4]
 801aeec:	68f8      	ldr	r0, [r7, #12]
 801aeee:	f001 fc75 	bl	801c7dc <ethernet_output>
 801aef2:	4603      	mov	r3, r0
 801aef4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801aef8:	e067      	b.n	801afca <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801aefa:	7c7a      	ldrb	r2, [r7, #17]
 801aefc:	4939      	ldr	r1, [pc, #228]	; (801afe4 <etharp_query+0x268>)
 801aefe:	4613      	mov	r3, r2
 801af00:	005b      	lsls	r3, r3, #1
 801af02:	4413      	add	r3, r2
 801af04:	00db      	lsls	r3, r3, #3
 801af06:	440b      	add	r3, r1
 801af08:	3314      	adds	r3, #20
 801af0a:	781b      	ldrb	r3, [r3, #0]
 801af0c:	2b01      	cmp	r3, #1
 801af0e:	d15c      	bne.n	801afca <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801af10:	2300      	movs	r3, #0
 801af12:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801af14:	687b      	ldr	r3, [r7, #4]
 801af16:	61fb      	str	r3, [r7, #28]
    while (p) {
 801af18:	e01c      	b.n	801af54 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801af1a:	69fb      	ldr	r3, [r7, #28]
 801af1c:	895a      	ldrh	r2, [r3, #10]
 801af1e:	69fb      	ldr	r3, [r7, #28]
 801af20:	891b      	ldrh	r3, [r3, #8]
 801af22:	429a      	cmp	r2, r3
 801af24:	d10a      	bne.n	801af3c <etharp_query+0x1c0>
 801af26:	69fb      	ldr	r3, [r7, #28]
 801af28:	681b      	ldr	r3, [r3, #0]
 801af2a:	2b00      	cmp	r3, #0
 801af2c:	d006      	beq.n	801af3c <etharp_query+0x1c0>
 801af2e:	4b2a      	ldr	r3, [pc, #168]	; (801afd8 <etharp_query+0x25c>)
 801af30:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801af34:	492f      	ldr	r1, [pc, #188]	; (801aff4 <etharp_query+0x278>)
 801af36:	482a      	ldr	r0, [pc, #168]	; (801afe0 <etharp_query+0x264>)
 801af38:	f002 f8bc 	bl	801d0b4 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801af3c:	69fb      	ldr	r3, [r7, #28]
 801af3e:	7b1b      	ldrb	r3, [r3, #12]
 801af40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801af44:	2b00      	cmp	r3, #0
 801af46:	d002      	beq.n	801af4e <etharp_query+0x1d2>
        copy_needed = 1;
 801af48:	2301      	movs	r3, #1
 801af4a:	61bb      	str	r3, [r7, #24]
        break;
 801af4c:	e005      	b.n	801af5a <etharp_query+0x1de>
      }
      p = p->next;
 801af4e:	69fb      	ldr	r3, [r7, #28]
 801af50:	681b      	ldr	r3, [r3, #0]
 801af52:	61fb      	str	r3, [r7, #28]
    while (p) {
 801af54:	69fb      	ldr	r3, [r7, #28]
 801af56:	2b00      	cmp	r3, #0
 801af58:	d1df      	bne.n	801af1a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801af5a:	69bb      	ldr	r3, [r7, #24]
 801af5c:	2b00      	cmp	r3, #0
 801af5e:	d007      	beq.n	801af70 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801af60:	687a      	ldr	r2, [r7, #4]
 801af62:	f44f 7120 	mov.w	r1, #640	; 0x280
 801af66:	200e      	movs	r0, #14
 801af68:	f7f8 fb68 	bl	801363c <pbuf_clone>
 801af6c:	61f8      	str	r0, [r7, #28]
 801af6e:	e004      	b.n	801af7a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801af70:	687b      	ldr	r3, [r7, #4]
 801af72:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801af74:	69f8      	ldr	r0, [r7, #28]
 801af76:	f7f8 f98f 	bl	8013298 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801af7a:	69fb      	ldr	r3, [r7, #28]
 801af7c:	2b00      	cmp	r3, #0
 801af7e:	d021      	beq.n	801afc4 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801af80:	7c7a      	ldrb	r2, [r7, #17]
 801af82:	4918      	ldr	r1, [pc, #96]	; (801afe4 <etharp_query+0x268>)
 801af84:	4613      	mov	r3, r2
 801af86:	005b      	lsls	r3, r3, #1
 801af88:	4413      	add	r3, r2
 801af8a:	00db      	lsls	r3, r3, #3
 801af8c:	440b      	add	r3, r1
 801af8e:	681b      	ldr	r3, [r3, #0]
 801af90:	2b00      	cmp	r3, #0
 801af92:	d00a      	beq.n	801afaa <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801af94:	7c7a      	ldrb	r2, [r7, #17]
 801af96:	4913      	ldr	r1, [pc, #76]	; (801afe4 <etharp_query+0x268>)
 801af98:	4613      	mov	r3, r2
 801af9a:	005b      	lsls	r3, r3, #1
 801af9c:	4413      	add	r3, r2
 801af9e:	00db      	lsls	r3, r3, #3
 801afa0:	440b      	add	r3, r1
 801afa2:	681b      	ldr	r3, [r3, #0]
 801afa4:	4618      	mov	r0, r3
 801afa6:	f7f8 f8d1 	bl	801314c <pbuf_free>
      }
      arp_table[i].q = p;
 801afaa:	7c7a      	ldrb	r2, [r7, #17]
 801afac:	490d      	ldr	r1, [pc, #52]	; (801afe4 <etharp_query+0x268>)
 801afae:	4613      	mov	r3, r2
 801afb0:	005b      	lsls	r3, r3, #1
 801afb2:	4413      	add	r3, r2
 801afb4:	00db      	lsls	r3, r3, #3
 801afb6:	440b      	add	r3, r1
 801afb8:	69fa      	ldr	r2, [r7, #28]
 801afba:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801afbc:	2300      	movs	r3, #0
 801afbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801afc2:	e002      	b.n	801afca <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801afc4:	23ff      	movs	r3, #255	; 0xff
 801afc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801afca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801afce:	4618      	mov	r0, r3
 801afd0:	3728      	adds	r7, #40	; 0x28
 801afd2:	46bd      	mov	sp, r7
 801afd4:	bd80      	pop	{r7, pc}
 801afd6:	bf00      	nop
 801afd8:	08021504 	.word	0x08021504
 801afdc:	080216b0 	.word	0x080216b0
 801afe0:	0802157c 	.word	0x0802157c
 801afe4:	2000de1c 	.word	0x2000de1c
 801afe8:	080216c0 	.word	0x080216c0
 801afec:	080216a4 	.word	0x080216a4
 801aff0:	2000df0c 	.word	0x2000df0c
 801aff4:	080216e8 	.word	0x080216e8

0801aff8 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801aff8:	b580      	push	{r7, lr}
 801affa:	b08a      	sub	sp, #40	; 0x28
 801affc:	af02      	add	r7, sp, #8
 801affe:	60f8      	str	r0, [r7, #12]
 801b000:	60b9      	str	r1, [r7, #8]
 801b002:	607a      	str	r2, [r7, #4]
 801b004:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801b006:	2300      	movs	r3, #0
 801b008:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801b00a:	68fb      	ldr	r3, [r7, #12]
 801b00c:	2b00      	cmp	r3, #0
 801b00e:	d106      	bne.n	801b01e <etharp_raw+0x26>
 801b010:	4b3a      	ldr	r3, [pc, #232]	; (801b0fc <etharp_raw+0x104>)
 801b012:	f240 4257 	movw	r2, #1111	; 0x457
 801b016:	493a      	ldr	r1, [pc, #232]	; (801b100 <etharp_raw+0x108>)
 801b018:	483a      	ldr	r0, [pc, #232]	; (801b104 <etharp_raw+0x10c>)
 801b01a:	f002 f84b 	bl	801d0b4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801b01e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b022:	211c      	movs	r1, #28
 801b024:	200e      	movs	r0, #14
 801b026:	f7f7 fdad 	bl	8012b84 <pbuf_alloc>
 801b02a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801b02c:	69bb      	ldr	r3, [r7, #24]
 801b02e:	2b00      	cmp	r3, #0
 801b030:	d102      	bne.n	801b038 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801b032:	f04f 33ff 	mov.w	r3, #4294967295
 801b036:	e05d      	b.n	801b0f4 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801b038:	69bb      	ldr	r3, [r7, #24]
 801b03a:	895b      	ldrh	r3, [r3, #10]
 801b03c:	2b1b      	cmp	r3, #27
 801b03e:	d806      	bhi.n	801b04e <etharp_raw+0x56>
 801b040:	4b2e      	ldr	r3, [pc, #184]	; (801b0fc <etharp_raw+0x104>)
 801b042:	f240 4262 	movw	r2, #1122	; 0x462
 801b046:	4930      	ldr	r1, [pc, #192]	; (801b108 <etharp_raw+0x110>)
 801b048:	482e      	ldr	r0, [pc, #184]	; (801b104 <etharp_raw+0x10c>)
 801b04a:	f002 f833 	bl	801d0b4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801b04e:	69bb      	ldr	r3, [r7, #24]
 801b050:	685b      	ldr	r3, [r3, #4]
 801b052:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801b054:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801b056:	4618      	mov	r0, r3
 801b058:	f7f6 fd30 	bl	8011abc <lwip_htons>
 801b05c:	4603      	mov	r3, r0
 801b05e:	461a      	mov	r2, r3
 801b060:	697b      	ldr	r3, [r7, #20]
 801b062:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801b064:	68fb      	ldr	r3, [r7, #12]
 801b066:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801b06a:	2b06      	cmp	r3, #6
 801b06c:	d006      	beq.n	801b07c <etharp_raw+0x84>
 801b06e:	4b23      	ldr	r3, [pc, #140]	; (801b0fc <etharp_raw+0x104>)
 801b070:	f240 4269 	movw	r2, #1129	; 0x469
 801b074:	4925      	ldr	r1, [pc, #148]	; (801b10c <etharp_raw+0x114>)
 801b076:	4823      	ldr	r0, [pc, #140]	; (801b104 <etharp_raw+0x10c>)
 801b078:	f002 f81c 	bl	801d0b4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801b07c:	697b      	ldr	r3, [r7, #20]
 801b07e:	3308      	adds	r3, #8
 801b080:	2206      	movs	r2, #6
 801b082:	6839      	ldr	r1, [r7, #0]
 801b084:	4618      	mov	r0, r3
 801b086:	f001 ff05 	bl	801ce94 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801b08a:	697b      	ldr	r3, [r7, #20]
 801b08c:	3312      	adds	r3, #18
 801b08e:	2206      	movs	r2, #6
 801b090:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b092:	4618      	mov	r0, r3
 801b094:	f001 fefe 	bl	801ce94 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801b098:	697b      	ldr	r3, [r7, #20]
 801b09a:	330e      	adds	r3, #14
 801b09c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b09e:	6812      	ldr	r2, [r2, #0]
 801b0a0:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801b0a2:	697b      	ldr	r3, [r7, #20]
 801b0a4:	3318      	adds	r3, #24
 801b0a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b0a8:	6812      	ldr	r2, [r2, #0]
 801b0aa:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801b0ac:	697b      	ldr	r3, [r7, #20]
 801b0ae:	2200      	movs	r2, #0
 801b0b0:	701a      	strb	r2, [r3, #0]
 801b0b2:	2200      	movs	r2, #0
 801b0b4:	f042 0201 	orr.w	r2, r2, #1
 801b0b8:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801b0ba:	697b      	ldr	r3, [r7, #20]
 801b0bc:	2200      	movs	r2, #0
 801b0be:	f042 0208 	orr.w	r2, r2, #8
 801b0c2:	709a      	strb	r2, [r3, #2]
 801b0c4:	2200      	movs	r2, #0
 801b0c6:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801b0c8:	697b      	ldr	r3, [r7, #20]
 801b0ca:	2206      	movs	r2, #6
 801b0cc:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801b0ce:	697b      	ldr	r3, [r7, #20]
 801b0d0:	2204      	movs	r2, #4
 801b0d2:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801b0d4:	f640 0306 	movw	r3, #2054	; 0x806
 801b0d8:	9300      	str	r3, [sp, #0]
 801b0da:	687b      	ldr	r3, [r7, #4]
 801b0dc:	68ba      	ldr	r2, [r7, #8]
 801b0de:	69b9      	ldr	r1, [r7, #24]
 801b0e0:	68f8      	ldr	r0, [r7, #12]
 801b0e2:	f001 fb7b 	bl	801c7dc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801b0e6:	69b8      	ldr	r0, [r7, #24]
 801b0e8:	f7f8 f830 	bl	801314c <pbuf_free>
  p = NULL;
 801b0ec:	2300      	movs	r3, #0
 801b0ee:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801b0f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b0f4:	4618      	mov	r0, r3
 801b0f6:	3720      	adds	r7, #32
 801b0f8:	46bd      	mov	sp, r7
 801b0fa:	bd80      	pop	{r7, pc}
 801b0fc:	08021504 	.word	0x08021504
 801b100:	08021654 	.word	0x08021654
 801b104:	0802157c 	.word	0x0802157c
 801b108:	08021704 	.word	0x08021704
 801b10c:	08021738 	.word	0x08021738

0801b110 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801b110:	b580      	push	{r7, lr}
 801b112:	b088      	sub	sp, #32
 801b114:	af04      	add	r7, sp, #16
 801b116:	60f8      	str	r0, [r7, #12]
 801b118:	60b9      	str	r1, [r7, #8]
 801b11a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b11c:	68fb      	ldr	r3, [r7, #12]
 801b11e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801b122:	68fb      	ldr	r3, [r7, #12]
 801b124:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801b128:	68fb      	ldr	r3, [r7, #12]
 801b12a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801b12c:	2201      	movs	r2, #1
 801b12e:	9203      	str	r2, [sp, #12]
 801b130:	68ba      	ldr	r2, [r7, #8]
 801b132:	9202      	str	r2, [sp, #8]
 801b134:	4a06      	ldr	r2, [pc, #24]	; (801b150 <etharp_request_dst+0x40>)
 801b136:	9201      	str	r2, [sp, #4]
 801b138:	9300      	str	r3, [sp, #0]
 801b13a:	4603      	mov	r3, r0
 801b13c:	687a      	ldr	r2, [r7, #4]
 801b13e:	68f8      	ldr	r0, [r7, #12]
 801b140:	f7ff ff5a 	bl	801aff8 <etharp_raw>
 801b144:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801b146:	4618      	mov	r0, r3
 801b148:	3710      	adds	r7, #16
 801b14a:	46bd      	mov	sp, r7
 801b14c:	bd80      	pop	{r7, pc}
 801b14e:	bf00      	nop
 801b150:	08021d08 	.word	0x08021d08

0801b154 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801b154:	b580      	push	{r7, lr}
 801b156:	b082      	sub	sp, #8
 801b158:	af00      	add	r7, sp, #0
 801b15a:	6078      	str	r0, [r7, #4]
 801b15c:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801b15e:	4a05      	ldr	r2, [pc, #20]	; (801b174 <etharp_request+0x20>)
 801b160:	6839      	ldr	r1, [r7, #0]
 801b162:	6878      	ldr	r0, [r7, #4]
 801b164:	f7ff ffd4 	bl	801b110 <etharp_request_dst>
 801b168:	4603      	mov	r3, r0
}
 801b16a:	4618      	mov	r0, r3
 801b16c:	3708      	adds	r7, #8
 801b16e:	46bd      	mov	sp, r7
 801b170:	bd80      	pop	{r7, pc}
 801b172:	bf00      	nop
 801b174:	08021d00 	.word	0x08021d00

0801b178 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801b178:	b580      	push	{r7, lr}
 801b17a:	b08e      	sub	sp, #56	; 0x38
 801b17c:	af04      	add	r7, sp, #16
 801b17e:	6078      	str	r0, [r7, #4]
 801b180:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801b182:	4b79      	ldr	r3, [pc, #484]	; (801b368 <icmp_input+0x1f0>)
 801b184:	689b      	ldr	r3, [r3, #8]
 801b186:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801b188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b18a:	781b      	ldrb	r3, [r3, #0]
 801b18c:	f003 030f 	and.w	r3, r3, #15
 801b190:	b2db      	uxtb	r3, r3
 801b192:	009b      	lsls	r3, r3, #2
 801b194:	b2db      	uxtb	r3, r3
 801b196:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801b198:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b19a:	2b13      	cmp	r3, #19
 801b19c:	f240 80cd 	bls.w	801b33a <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801b1a0:	687b      	ldr	r3, [r7, #4]
 801b1a2:	895b      	ldrh	r3, [r3, #10]
 801b1a4:	2b03      	cmp	r3, #3
 801b1a6:	f240 80ca 	bls.w	801b33e <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801b1aa:	687b      	ldr	r3, [r7, #4]
 801b1ac:	685b      	ldr	r3, [r3, #4]
 801b1ae:	781b      	ldrb	r3, [r3, #0]
 801b1b0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801b1b4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801b1b8:	2b00      	cmp	r3, #0
 801b1ba:	f000 80b7 	beq.w	801b32c <icmp_input+0x1b4>
 801b1be:	2b08      	cmp	r3, #8
 801b1c0:	f040 80b7 	bne.w	801b332 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801b1c4:	4b69      	ldr	r3, [pc, #420]	; (801b36c <icmp_input+0x1f4>)
 801b1c6:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b1c8:	4b67      	ldr	r3, [pc, #412]	; (801b368 <icmp_input+0x1f0>)
 801b1ca:	695b      	ldr	r3, [r3, #20]
 801b1cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b1d0:	2be0      	cmp	r3, #224	; 0xe0
 801b1d2:	f000 80bb 	beq.w	801b34c <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801b1d6:	4b64      	ldr	r3, [pc, #400]	; (801b368 <icmp_input+0x1f0>)
 801b1d8:	695b      	ldr	r3, [r3, #20]
 801b1da:	4a63      	ldr	r2, [pc, #396]	; (801b368 <icmp_input+0x1f0>)
 801b1dc:	6812      	ldr	r2, [r2, #0]
 801b1de:	4611      	mov	r1, r2
 801b1e0:	4618      	mov	r0, r3
 801b1e2:	f000 fbed 	bl	801b9c0 <ip4_addr_isbroadcast_u32>
 801b1e6:	4603      	mov	r3, r0
 801b1e8:	2b00      	cmp	r3, #0
 801b1ea:	f040 80b1 	bne.w	801b350 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801b1ee:	687b      	ldr	r3, [r7, #4]
 801b1f0:	891b      	ldrh	r3, [r3, #8]
 801b1f2:	2b07      	cmp	r3, #7
 801b1f4:	f240 80a5 	bls.w	801b342 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b1f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b1fa:	330e      	adds	r3, #14
 801b1fc:	4619      	mov	r1, r3
 801b1fe:	6878      	ldr	r0, [r7, #4]
 801b200:	f7f7 ff0e 	bl	8013020 <pbuf_add_header>
 801b204:	4603      	mov	r3, r0
 801b206:	2b00      	cmp	r3, #0
 801b208:	d04b      	beq.n	801b2a2 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801b20a:	687b      	ldr	r3, [r7, #4]
 801b20c:	891a      	ldrh	r2, [r3, #8]
 801b20e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b210:	4413      	add	r3, r2
 801b212:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801b214:	687b      	ldr	r3, [r7, #4]
 801b216:	891b      	ldrh	r3, [r3, #8]
 801b218:	8b7a      	ldrh	r2, [r7, #26]
 801b21a:	429a      	cmp	r2, r3
 801b21c:	f0c0 809a 	bcc.w	801b354 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801b220:	8b7b      	ldrh	r3, [r7, #26]
 801b222:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b226:	4619      	mov	r1, r3
 801b228:	200e      	movs	r0, #14
 801b22a:	f7f7 fcab 	bl	8012b84 <pbuf_alloc>
 801b22e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801b230:	697b      	ldr	r3, [r7, #20]
 801b232:	2b00      	cmp	r3, #0
 801b234:	f000 8090 	beq.w	801b358 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801b238:	697b      	ldr	r3, [r7, #20]
 801b23a:	895b      	ldrh	r3, [r3, #10]
 801b23c:	461a      	mov	r2, r3
 801b23e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b240:	3308      	adds	r3, #8
 801b242:	429a      	cmp	r2, r3
 801b244:	d203      	bcs.n	801b24e <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801b246:	6978      	ldr	r0, [r7, #20]
 801b248:	f7f7 ff80 	bl	801314c <pbuf_free>
          goto icmperr;
 801b24c:	e085      	b.n	801b35a <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801b24e:	697b      	ldr	r3, [r7, #20]
 801b250:	685b      	ldr	r3, [r3, #4]
 801b252:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801b254:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b256:	4618      	mov	r0, r3
 801b258:	f001 fe1c 	bl	801ce94 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801b25c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b25e:	4619      	mov	r1, r3
 801b260:	6978      	ldr	r0, [r7, #20]
 801b262:	f7f7 feed 	bl	8013040 <pbuf_remove_header>
 801b266:	4603      	mov	r3, r0
 801b268:	2b00      	cmp	r3, #0
 801b26a:	d009      	beq.n	801b280 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801b26c:	4b40      	ldr	r3, [pc, #256]	; (801b370 <icmp_input+0x1f8>)
 801b26e:	22b6      	movs	r2, #182	; 0xb6
 801b270:	4940      	ldr	r1, [pc, #256]	; (801b374 <icmp_input+0x1fc>)
 801b272:	4841      	ldr	r0, [pc, #260]	; (801b378 <icmp_input+0x200>)
 801b274:	f001 ff1e 	bl	801d0b4 <iprintf>
          pbuf_free(r);
 801b278:	6978      	ldr	r0, [r7, #20]
 801b27a:	f7f7 ff67 	bl	801314c <pbuf_free>
          goto icmperr;
 801b27e:	e06c      	b.n	801b35a <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801b280:	6879      	ldr	r1, [r7, #4]
 801b282:	6978      	ldr	r0, [r7, #20]
 801b284:	f7f8 f896 	bl	80133b4 <pbuf_copy>
 801b288:	4603      	mov	r3, r0
 801b28a:	2b00      	cmp	r3, #0
 801b28c:	d003      	beq.n	801b296 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801b28e:	6978      	ldr	r0, [r7, #20]
 801b290:	f7f7 ff5c 	bl	801314c <pbuf_free>
          goto icmperr;
 801b294:	e061      	b.n	801b35a <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801b296:	6878      	ldr	r0, [r7, #4]
 801b298:	f7f7 ff58 	bl	801314c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801b29c:	697b      	ldr	r3, [r7, #20]
 801b29e:	607b      	str	r3, [r7, #4]
 801b2a0:	e00f      	b.n	801b2c2 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b2a2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b2a4:	330e      	adds	r3, #14
 801b2a6:	4619      	mov	r1, r3
 801b2a8:	6878      	ldr	r0, [r7, #4]
 801b2aa:	f7f7 fec9 	bl	8013040 <pbuf_remove_header>
 801b2ae:	4603      	mov	r3, r0
 801b2b0:	2b00      	cmp	r3, #0
 801b2b2:	d006      	beq.n	801b2c2 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801b2b4:	4b2e      	ldr	r3, [pc, #184]	; (801b370 <icmp_input+0x1f8>)
 801b2b6:	22c7      	movs	r2, #199	; 0xc7
 801b2b8:	4930      	ldr	r1, [pc, #192]	; (801b37c <icmp_input+0x204>)
 801b2ba:	482f      	ldr	r0, [pc, #188]	; (801b378 <icmp_input+0x200>)
 801b2bc:	f001 fefa 	bl	801d0b4 <iprintf>
          goto icmperr;
 801b2c0:	e04b      	b.n	801b35a <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801b2c2:	687b      	ldr	r3, [r7, #4]
 801b2c4:	685b      	ldr	r3, [r3, #4]
 801b2c6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801b2c8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b2ca:	4619      	mov	r1, r3
 801b2cc:	6878      	ldr	r0, [r7, #4]
 801b2ce:	f7f7 fea7 	bl	8013020 <pbuf_add_header>
 801b2d2:	4603      	mov	r3, r0
 801b2d4:	2b00      	cmp	r3, #0
 801b2d6:	d12b      	bne.n	801b330 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	685b      	ldr	r3, [r3, #4]
 801b2dc:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801b2de:	69fb      	ldr	r3, [r7, #28]
 801b2e0:	681a      	ldr	r2, [r3, #0]
 801b2e2:	68fb      	ldr	r3, [r7, #12]
 801b2e4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801b2e6:	4b20      	ldr	r3, [pc, #128]	; (801b368 <icmp_input+0x1f0>)
 801b2e8:	691a      	ldr	r2, [r3, #16]
 801b2ea:	68fb      	ldr	r3, [r7, #12]
 801b2ec:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801b2ee:	693b      	ldr	r3, [r7, #16]
 801b2f0:	2200      	movs	r2, #0
 801b2f2:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801b2f4:	693b      	ldr	r3, [r7, #16]
 801b2f6:	2200      	movs	r2, #0
 801b2f8:	709a      	strb	r2, [r3, #2]
 801b2fa:	2200      	movs	r2, #0
 801b2fc:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801b2fe:	68fb      	ldr	r3, [r7, #12]
 801b300:	22ff      	movs	r2, #255	; 0xff
 801b302:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801b304:	68fb      	ldr	r3, [r7, #12]
 801b306:	2200      	movs	r2, #0
 801b308:	729a      	strb	r2, [r3, #10]
 801b30a:	2200      	movs	r2, #0
 801b30c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801b30e:	683b      	ldr	r3, [r7, #0]
 801b310:	9302      	str	r3, [sp, #8]
 801b312:	2301      	movs	r3, #1
 801b314:	9301      	str	r3, [sp, #4]
 801b316:	2300      	movs	r3, #0
 801b318:	9300      	str	r3, [sp, #0]
 801b31a:	23ff      	movs	r3, #255	; 0xff
 801b31c:	2200      	movs	r2, #0
 801b31e:	69f9      	ldr	r1, [r7, #28]
 801b320:	6878      	ldr	r0, [r7, #4]
 801b322:	f000 fa75 	bl	801b810 <ip4_output_if>
 801b326:	4603      	mov	r3, r0
 801b328:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801b32a:	e001      	b.n	801b330 <icmp_input+0x1b8>
      break;
 801b32c:	bf00      	nop
 801b32e:	e000      	b.n	801b332 <icmp_input+0x1ba>
      break;
 801b330:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801b332:	6878      	ldr	r0, [r7, #4]
 801b334:	f7f7 ff0a 	bl	801314c <pbuf_free>
  return;
 801b338:	e013      	b.n	801b362 <icmp_input+0x1ea>
    goto lenerr;
 801b33a:	bf00      	nop
 801b33c:	e002      	b.n	801b344 <icmp_input+0x1cc>
    goto lenerr;
 801b33e:	bf00      	nop
 801b340:	e000      	b.n	801b344 <icmp_input+0x1cc>
        goto lenerr;
 801b342:	bf00      	nop
lenerr:
  pbuf_free(p);
 801b344:	6878      	ldr	r0, [r7, #4]
 801b346:	f7f7 ff01 	bl	801314c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b34a:	e00a      	b.n	801b362 <icmp_input+0x1ea>
        goto icmperr;
 801b34c:	bf00      	nop
 801b34e:	e004      	b.n	801b35a <icmp_input+0x1e2>
        goto icmperr;
 801b350:	bf00      	nop
 801b352:	e002      	b.n	801b35a <icmp_input+0x1e2>
          goto icmperr;
 801b354:	bf00      	nop
 801b356:	e000      	b.n	801b35a <icmp_input+0x1e2>
          goto icmperr;
 801b358:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801b35a:	6878      	ldr	r0, [r7, #4]
 801b35c:	f7f7 fef6 	bl	801314c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b360:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801b362:	3728      	adds	r7, #40	; 0x28
 801b364:	46bd      	mov	sp, r7
 801b366:	bd80      	pop	{r7, pc}
 801b368:	2000a668 	.word	0x2000a668
 801b36c:	2000a67c 	.word	0x2000a67c
 801b370:	0802177c 	.word	0x0802177c
 801b374:	080217b4 	.word	0x080217b4
 801b378:	080217ec 	.word	0x080217ec
 801b37c:	08021814 	.word	0x08021814

0801b380 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801b380:	b580      	push	{r7, lr}
 801b382:	b082      	sub	sp, #8
 801b384:	af00      	add	r7, sp, #0
 801b386:	6078      	str	r0, [r7, #4]
 801b388:	460b      	mov	r3, r1
 801b38a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801b38c:	78fb      	ldrb	r3, [r7, #3]
 801b38e:	461a      	mov	r2, r3
 801b390:	2103      	movs	r1, #3
 801b392:	6878      	ldr	r0, [r7, #4]
 801b394:	f000 f814 	bl	801b3c0 <icmp_send_response>
}
 801b398:	bf00      	nop
 801b39a:	3708      	adds	r7, #8
 801b39c:	46bd      	mov	sp, r7
 801b39e:	bd80      	pop	{r7, pc}

0801b3a0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801b3a0:	b580      	push	{r7, lr}
 801b3a2:	b082      	sub	sp, #8
 801b3a4:	af00      	add	r7, sp, #0
 801b3a6:	6078      	str	r0, [r7, #4]
 801b3a8:	460b      	mov	r3, r1
 801b3aa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801b3ac:	78fb      	ldrb	r3, [r7, #3]
 801b3ae:	461a      	mov	r2, r3
 801b3b0:	210b      	movs	r1, #11
 801b3b2:	6878      	ldr	r0, [r7, #4]
 801b3b4:	f000 f804 	bl	801b3c0 <icmp_send_response>
}
 801b3b8:	bf00      	nop
 801b3ba:	3708      	adds	r7, #8
 801b3bc:	46bd      	mov	sp, r7
 801b3be:	bd80      	pop	{r7, pc}

0801b3c0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801b3c0:	b580      	push	{r7, lr}
 801b3c2:	b08c      	sub	sp, #48	; 0x30
 801b3c4:	af04      	add	r7, sp, #16
 801b3c6:	6078      	str	r0, [r7, #4]
 801b3c8:	460b      	mov	r3, r1
 801b3ca:	70fb      	strb	r3, [r7, #3]
 801b3cc:	4613      	mov	r3, r2
 801b3ce:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801b3d0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b3d4:	2124      	movs	r1, #36	; 0x24
 801b3d6:	2022      	movs	r0, #34	; 0x22
 801b3d8:	f7f7 fbd4 	bl	8012b84 <pbuf_alloc>
 801b3dc:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801b3de:	69fb      	ldr	r3, [r7, #28]
 801b3e0:	2b00      	cmp	r3, #0
 801b3e2:	d04c      	beq.n	801b47e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801b3e4:	69fb      	ldr	r3, [r7, #28]
 801b3e6:	895b      	ldrh	r3, [r3, #10]
 801b3e8:	2b23      	cmp	r3, #35	; 0x23
 801b3ea:	d806      	bhi.n	801b3fa <icmp_send_response+0x3a>
 801b3ec:	4b26      	ldr	r3, [pc, #152]	; (801b488 <icmp_send_response+0xc8>)
 801b3ee:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801b3f2:	4926      	ldr	r1, [pc, #152]	; (801b48c <icmp_send_response+0xcc>)
 801b3f4:	4826      	ldr	r0, [pc, #152]	; (801b490 <icmp_send_response+0xd0>)
 801b3f6:	f001 fe5d 	bl	801d0b4 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801b3fa:	687b      	ldr	r3, [r7, #4]
 801b3fc:	685b      	ldr	r3, [r3, #4]
 801b3fe:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801b400:	69fb      	ldr	r3, [r7, #28]
 801b402:	685b      	ldr	r3, [r3, #4]
 801b404:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801b406:	697b      	ldr	r3, [r7, #20]
 801b408:	78fa      	ldrb	r2, [r7, #3]
 801b40a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801b40c:	697b      	ldr	r3, [r7, #20]
 801b40e:	78ba      	ldrb	r2, [r7, #2]
 801b410:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801b412:	697b      	ldr	r3, [r7, #20]
 801b414:	2200      	movs	r2, #0
 801b416:	711a      	strb	r2, [r3, #4]
 801b418:	2200      	movs	r2, #0
 801b41a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801b41c:	697b      	ldr	r3, [r7, #20]
 801b41e:	2200      	movs	r2, #0
 801b420:	719a      	strb	r2, [r3, #6]
 801b422:	2200      	movs	r2, #0
 801b424:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801b426:	69fb      	ldr	r3, [r7, #28]
 801b428:	685b      	ldr	r3, [r3, #4]
 801b42a:	f103 0008 	add.w	r0, r3, #8
 801b42e:	687b      	ldr	r3, [r7, #4]
 801b430:	685b      	ldr	r3, [r3, #4]
 801b432:	221c      	movs	r2, #28
 801b434:	4619      	mov	r1, r3
 801b436:	f001 fd2d 	bl	801ce94 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801b43a:	69bb      	ldr	r3, [r7, #24]
 801b43c:	68db      	ldr	r3, [r3, #12]
 801b43e:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801b440:	f107 030c 	add.w	r3, r7, #12
 801b444:	4618      	mov	r0, r3
 801b446:	f000 f825 	bl	801b494 <ip4_route>
 801b44a:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801b44c:	693b      	ldr	r3, [r7, #16]
 801b44e:	2b00      	cmp	r3, #0
 801b450:	d011      	beq.n	801b476 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801b452:	697b      	ldr	r3, [r7, #20]
 801b454:	2200      	movs	r2, #0
 801b456:	709a      	strb	r2, [r3, #2]
 801b458:	2200      	movs	r2, #0
 801b45a:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801b45c:	f107 020c 	add.w	r2, r7, #12
 801b460:	693b      	ldr	r3, [r7, #16]
 801b462:	9302      	str	r3, [sp, #8]
 801b464:	2301      	movs	r3, #1
 801b466:	9301      	str	r3, [sp, #4]
 801b468:	2300      	movs	r3, #0
 801b46a:	9300      	str	r3, [sp, #0]
 801b46c:	23ff      	movs	r3, #255	; 0xff
 801b46e:	2100      	movs	r1, #0
 801b470:	69f8      	ldr	r0, [r7, #28]
 801b472:	f000 f9cd 	bl	801b810 <ip4_output_if>
  }
  pbuf_free(q);
 801b476:	69f8      	ldr	r0, [r7, #28]
 801b478:	f7f7 fe68 	bl	801314c <pbuf_free>
 801b47c:	e000      	b.n	801b480 <icmp_send_response+0xc0>
    return;
 801b47e:	bf00      	nop
}
 801b480:	3720      	adds	r7, #32
 801b482:	46bd      	mov	sp, r7
 801b484:	bd80      	pop	{r7, pc}
 801b486:	bf00      	nop
 801b488:	0802177c 	.word	0x0802177c
 801b48c:	08021848 	.word	0x08021848
 801b490:	080217ec 	.word	0x080217ec

0801b494 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801b494:	b480      	push	{r7}
 801b496:	b085      	sub	sp, #20
 801b498:	af00      	add	r7, sp, #0
 801b49a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801b49c:	4b33      	ldr	r3, [pc, #204]	; (801b56c <ip4_route+0xd8>)
 801b49e:	681b      	ldr	r3, [r3, #0]
 801b4a0:	60fb      	str	r3, [r7, #12]
 801b4a2:	e036      	b.n	801b512 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b4a4:	68fb      	ldr	r3, [r7, #12]
 801b4a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b4aa:	f003 0301 	and.w	r3, r3, #1
 801b4ae:	b2db      	uxtb	r3, r3
 801b4b0:	2b00      	cmp	r3, #0
 801b4b2:	d02b      	beq.n	801b50c <ip4_route+0x78>
 801b4b4:	68fb      	ldr	r3, [r7, #12]
 801b4b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b4ba:	089b      	lsrs	r3, r3, #2
 801b4bc:	f003 0301 	and.w	r3, r3, #1
 801b4c0:	b2db      	uxtb	r3, r3
 801b4c2:	2b00      	cmp	r3, #0
 801b4c4:	d022      	beq.n	801b50c <ip4_route+0x78>
 801b4c6:	68fb      	ldr	r3, [r7, #12]
 801b4c8:	3304      	adds	r3, #4
 801b4ca:	681b      	ldr	r3, [r3, #0]
 801b4cc:	2b00      	cmp	r3, #0
 801b4ce:	d01d      	beq.n	801b50c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801b4d0:	687b      	ldr	r3, [r7, #4]
 801b4d2:	681a      	ldr	r2, [r3, #0]
 801b4d4:	68fb      	ldr	r3, [r7, #12]
 801b4d6:	3304      	adds	r3, #4
 801b4d8:	681b      	ldr	r3, [r3, #0]
 801b4da:	405a      	eors	r2, r3
 801b4dc:	68fb      	ldr	r3, [r7, #12]
 801b4de:	3308      	adds	r3, #8
 801b4e0:	681b      	ldr	r3, [r3, #0]
 801b4e2:	4013      	ands	r3, r2
 801b4e4:	2b00      	cmp	r3, #0
 801b4e6:	d101      	bne.n	801b4ec <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801b4e8:	68fb      	ldr	r3, [r7, #12]
 801b4ea:	e038      	b.n	801b55e <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801b4ec:	68fb      	ldr	r3, [r7, #12]
 801b4ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b4f2:	f003 0302 	and.w	r3, r3, #2
 801b4f6:	2b00      	cmp	r3, #0
 801b4f8:	d108      	bne.n	801b50c <ip4_route+0x78>
 801b4fa:	687b      	ldr	r3, [r7, #4]
 801b4fc:	681a      	ldr	r2, [r3, #0]
 801b4fe:	68fb      	ldr	r3, [r7, #12]
 801b500:	330c      	adds	r3, #12
 801b502:	681b      	ldr	r3, [r3, #0]
 801b504:	429a      	cmp	r2, r3
 801b506:	d101      	bne.n	801b50c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801b508:	68fb      	ldr	r3, [r7, #12]
 801b50a:	e028      	b.n	801b55e <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801b50c:	68fb      	ldr	r3, [r7, #12]
 801b50e:	681b      	ldr	r3, [r3, #0]
 801b510:	60fb      	str	r3, [r7, #12]
 801b512:	68fb      	ldr	r3, [r7, #12]
 801b514:	2b00      	cmp	r3, #0
 801b516:	d1c5      	bne.n	801b4a4 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b518:	4b15      	ldr	r3, [pc, #84]	; (801b570 <ip4_route+0xdc>)
 801b51a:	681b      	ldr	r3, [r3, #0]
 801b51c:	2b00      	cmp	r3, #0
 801b51e:	d01a      	beq.n	801b556 <ip4_route+0xc2>
 801b520:	4b13      	ldr	r3, [pc, #76]	; (801b570 <ip4_route+0xdc>)
 801b522:	681b      	ldr	r3, [r3, #0]
 801b524:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b528:	f003 0301 	and.w	r3, r3, #1
 801b52c:	2b00      	cmp	r3, #0
 801b52e:	d012      	beq.n	801b556 <ip4_route+0xc2>
 801b530:	4b0f      	ldr	r3, [pc, #60]	; (801b570 <ip4_route+0xdc>)
 801b532:	681b      	ldr	r3, [r3, #0]
 801b534:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b538:	f003 0304 	and.w	r3, r3, #4
 801b53c:	2b00      	cmp	r3, #0
 801b53e:	d00a      	beq.n	801b556 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b540:	4b0b      	ldr	r3, [pc, #44]	; (801b570 <ip4_route+0xdc>)
 801b542:	681b      	ldr	r3, [r3, #0]
 801b544:	3304      	adds	r3, #4
 801b546:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b548:	2b00      	cmp	r3, #0
 801b54a:	d004      	beq.n	801b556 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b54c:	687b      	ldr	r3, [r7, #4]
 801b54e:	681b      	ldr	r3, [r3, #0]
 801b550:	b2db      	uxtb	r3, r3
 801b552:	2b7f      	cmp	r3, #127	; 0x7f
 801b554:	d101      	bne.n	801b55a <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801b556:	2300      	movs	r3, #0
 801b558:	e001      	b.n	801b55e <ip4_route+0xca>
  }

  return netif_default;
 801b55a:	4b05      	ldr	r3, [pc, #20]	; (801b570 <ip4_route+0xdc>)
 801b55c:	681b      	ldr	r3, [r3, #0]
}
 801b55e:	4618      	mov	r0, r3
 801b560:	3714      	adds	r7, #20
 801b562:	46bd      	mov	sp, r7
 801b564:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b568:	4770      	bx	lr
 801b56a:	bf00      	nop
 801b56c:	2000ddb0 	.word	0x2000ddb0
 801b570:	2000ddb4 	.word	0x2000ddb4

0801b574 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801b574:	b580      	push	{r7, lr}
 801b576:	b082      	sub	sp, #8
 801b578:	af00      	add	r7, sp, #0
 801b57a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801b57c:	687b      	ldr	r3, [r7, #4]
 801b57e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b582:	f003 0301 	and.w	r3, r3, #1
 801b586:	b2db      	uxtb	r3, r3
 801b588:	2b00      	cmp	r3, #0
 801b58a:	d016      	beq.n	801b5ba <ip4_input_accept+0x46>
 801b58c:	687b      	ldr	r3, [r7, #4]
 801b58e:	3304      	adds	r3, #4
 801b590:	681b      	ldr	r3, [r3, #0]
 801b592:	2b00      	cmp	r3, #0
 801b594:	d011      	beq.n	801b5ba <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b596:	4b0b      	ldr	r3, [pc, #44]	; (801b5c4 <ip4_input_accept+0x50>)
 801b598:	695a      	ldr	r2, [r3, #20]
 801b59a:	687b      	ldr	r3, [r7, #4]
 801b59c:	3304      	adds	r3, #4
 801b59e:	681b      	ldr	r3, [r3, #0]
 801b5a0:	429a      	cmp	r2, r3
 801b5a2:	d008      	beq.n	801b5b6 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801b5a4:	4b07      	ldr	r3, [pc, #28]	; (801b5c4 <ip4_input_accept+0x50>)
 801b5a6:	695b      	ldr	r3, [r3, #20]
 801b5a8:	6879      	ldr	r1, [r7, #4]
 801b5aa:	4618      	mov	r0, r3
 801b5ac:	f000 fa08 	bl	801b9c0 <ip4_addr_isbroadcast_u32>
 801b5b0:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b5b2:	2b00      	cmp	r3, #0
 801b5b4:	d001      	beq.n	801b5ba <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801b5b6:	2301      	movs	r3, #1
 801b5b8:	e000      	b.n	801b5bc <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801b5ba:	2300      	movs	r3, #0
}
 801b5bc:	4618      	mov	r0, r3
 801b5be:	3708      	adds	r7, #8
 801b5c0:	46bd      	mov	sp, r7
 801b5c2:	bd80      	pop	{r7, pc}
 801b5c4:	2000a668 	.word	0x2000a668

0801b5c8 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801b5c8:	b580      	push	{r7, lr}
 801b5ca:	b086      	sub	sp, #24
 801b5cc:	af00      	add	r7, sp, #0
 801b5ce:	6078      	str	r0, [r7, #4]
 801b5d0:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801b5d2:	687b      	ldr	r3, [r7, #4]
 801b5d4:	685b      	ldr	r3, [r3, #4]
 801b5d6:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801b5d8:	697b      	ldr	r3, [r7, #20]
 801b5da:	781b      	ldrb	r3, [r3, #0]
 801b5dc:	091b      	lsrs	r3, r3, #4
 801b5de:	b2db      	uxtb	r3, r3
 801b5e0:	2b04      	cmp	r3, #4
 801b5e2:	d004      	beq.n	801b5ee <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801b5e4:	6878      	ldr	r0, [r7, #4]
 801b5e6:	f7f7 fdb1 	bl	801314c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801b5ea:	2300      	movs	r3, #0
 801b5ec:	e107      	b.n	801b7fe <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801b5ee:	697b      	ldr	r3, [r7, #20]
 801b5f0:	781b      	ldrb	r3, [r3, #0]
 801b5f2:	f003 030f 	and.w	r3, r3, #15
 801b5f6:	b2db      	uxtb	r3, r3
 801b5f8:	009b      	lsls	r3, r3, #2
 801b5fa:	b2db      	uxtb	r3, r3
 801b5fc:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801b5fe:	697b      	ldr	r3, [r7, #20]
 801b600:	885b      	ldrh	r3, [r3, #2]
 801b602:	b29b      	uxth	r3, r3
 801b604:	4618      	mov	r0, r3
 801b606:	f7f6 fa59 	bl	8011abc <lwip_htons>
 801b60a:	4603      	mov	r3, r0
 801b60c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801b60e:	687b      	ldr	r3, [r7, #4]
 801b610:	891b      	ldrh	r3, [r3, #8]
 801b612:	89ba      	ldrh	r2, [r7, #12]
 801b614:	429a      	cmp	r2, r3
 801b616:	d204      	bcs.n	801b622 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801b618:	89bb      	ldrh	r3, [r7, #12]
 801b61a:	4619      	mov	r1, r3
 801b61c:	6878      	ldr	r0, [r7, #4]
 801b61e:	f7f7 fc0f 	bl	8012e40 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801b622:	687b      	ldr	r3, [r7, #4]
 801b624:	895b      	ldrh	r3, [r3, #10]
 801b626:	89fa      	ldrh	r2, [r7, #14]
 801b628:	429a      	cmp	r2, r3
 801b62a:	d807      	bhi.n	801b63c <ip4_input+0x74>
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	891b      	ldrh	r3, [r3, #8]
 801b630:	89ba      	ldrh	r2, [r7, #12]
 801b632:	429a      	cmp	r2, r3
 801b634:	d802      	bhi.n	801b63c <ip4_input+0x74>
 801b636:	89fb      	ldrh	r3, [r7, #14]
 801b638:	2b13      	cmp	r3, #19
 801b63a:	d804      	bhi.n	801b646 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801b63c:	6878      	ldr	r0, [r7, #4]
 801b63e:	f7f7 fd85 	bl	801314c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801b642:	2300      	movs	r3, #0
 801b644:	e0db      	b.n	801b7fe <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801b646:	697b      	ldr	r3, [r7, #20]
 801b648:	691b      	ldr	r3, [r3, #16]
 801b64a:	4a6f      	ldr	r2, [pc, #444]	; (801b808 <ip4_input+0x240>)
 801b64c:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801b64e:	697b      	ldr	r3, [r7, #20]
 801b650:	68db      	ldr	r3, [r3, #12]
 801b652:	4a6d      	ldr	r2, [pc, #436]	; (801b808 <ip4_input+0x240>)
 801b654:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b656:	4b6c      	ldr	r3, [pc, #432]	; (801b808 <ip4_input+0x240>)
 801b658:	695b      	ldr	r3, [r3, #20]
 801b65a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b65e:	2be0      	cmp	r3, #224	; 0xe0
 801b660:	d112      	bne.n	801b688 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801b662:	683b      	ldr	r3, [r7, #0]
 801b664:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b668:	f003 0301 	and.w	r3, r3, #1
 801b66c:	b2db      	uxtb	r3, r3
 801b66e:	2b00      	cmp	r3, #0
 801b670:	d007      	beq.n	801b682 <ip4_input+0xba>
 801b672:	683b      	ldr	r3, [r7, #0]
 801b674:	3304      	adds	r3, #4
 801b676:	681b      	ldr	r3, [r3, #0]
 801b678:	2b00      	cmp	r3, #0
 801b67a:	d002      	beq.n	801b682 <ip4_input+0xba>
      netif = inp;
 801b67c:	683b      	ldr	r3, [r7, #0]
 801b67e:	613b      	str	r3, [r7, #16]
 801b680:	e02a      	b.n	801b6d8 <ip4_input+0x110>
    } else {
      netif = NULL;
 801b682:	2300      	movs	r3, #0
 801b684:	613b      	str	r3, [r7, #16]
 801b686:	e027      	b.n	801b6d8 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801b688:	6838      	ldr	r0, [r7, #0]
 801b68a:	f7ff ff73 	bl	801b574 <ip4_input_accept>
 801b68e:	4603      	mov	r3, r0
 801b690:	2b00      	cmp	r3, #0
 801b692:	d002      	beq.n	801b69a <ip4_input+0xd2>
      netif = inp;
 801b694:	683b      	ldr	r3, [r7, #0]
 801b696:	613b      	str	r3, [r7, #16]
 801b698:	e01e      	b.n	801b6d8 <ip4_input+0x110>
    } else {
      netif = NULL;
 801b69a:	2300      	movs	r3, #0
 801b69c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801b69e:	4b5a      	ldr	r3, [pc, #360]	; (801b808 <ip4_input+0x240>)
 801b6a0:	695b      	ldr	r3, [r3, #20]
 801b6a2:	b2db      	uxtb	r3, r3
 801b6a4:	2b7f      	cmp	r3, #127	; 0x7f
 801b6a6:	d017      	beq.n	801b6d8 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801b6a8:	4b58      	ldr	r3, [pc, #352]	; (801b80c <ip4_input+0x244>)
 801b6aa:	681b      	ldr	r3, [r3, #0]
 801b6ac:	613b      	str	r3, [r7, #16]
 801b6ae:	e00e      	b.n	801b6ce <ip4_input+0x106>
          if (netif == inp) {
 801b6b0:	693a      	ldr	r2, [r7, #16]
 801b6b2:	683b      	ldr	r3, [r7, #0]
 801b6b4:	429a      	cmp	r2, r3
 801b6b6:	d006      	beq.n	801b6c6 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801b6b8:	6938      	ldr	r0, [r7, #16]
 801b6ba:	f7ff ff5b 	bl	801b574 <ip4_input_accept>
 801b6be:	4603      	mov	r3, r0
 801b6c0:	2b00      	cmp	r3, #0
 801b6c2:	d108      	bne.n	801b6d6 <ip4_input+0x10e>
 801b6c4:	e000      	b.n	801b6c8 <ip4_input+0x100>
            continue;
 801b6c6:	bf00      	nop
        NETIF_FOREACH(netif) {
 801b6c8:	693b      	ldr	r3, [r7, #16]
 801b6ca:	681b      	ldr	r3, [r3, #0]
 801b6cc:	613b      	str	r3, [r7, #16]
 801b6ce:	693b      	ldr	r3, [r7, #16]
 801b6d0:	2b00      	cmp	r3, #0
 801b6d2:	d1ed      	bne.n	801b6b0 <ip4_input+0xe8>
 801b6d4:	e000      	b.n	801b6d8 <ip4_input+0x110>
            break;
 801b6d6:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801b6d8:	4b4b      	ldr	r3, [pc, #300]	; (801b808 <ip4_input+0x240>)
 801b6da:	691b      	ldr	r3, [r3, #16]
 801b6dc:	6839      	ldr	r1, [r7, #0]
 801b6de:	4618      	mov	r0, r3
 801b6e0:	f000 f96e 	bl	801b9c0 <ip4_addr_isbroadcast_u32>
 801b6e4:	4603      	mov	r3, r0
 801b6e6:	2b00      	cmp	r3, #0
 801b6e8:	d105      	bne.n	801b6f6 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801b6ea:	4b47      	ldr	r3, [pc, #284]	; (801b808 <ip4_input+0x240>)
 801b6ec:	691b      	ldr	r3, [r3, #16]
 801b6ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801b6f2:	2be0      	cmp	r3, #224	; 0xe0
 801b6f4:	d104      	bne.n	801b700 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801b6f6:	6878      	ldr	r0, [r7, #4]
 801b6f8:	f7f7 fd28 	bl	801314c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801b6fc:	2300      	movs	r3, #0
 801b6fe:	e07e      	b.n	801b7fe <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801b700:	693b      	ldr	r3, [r7, #16]
 801b702:	2b00      	cmp	r3, #0
 801b704:	d104      	bne.n	801b710 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801b706:	6878      	ldr	r0, [r7, #4]
 801b708:	f7f7 fd20 	bl	801314c <pbuf_free>
    return ERR_OK;
 801b70c:	2300      	movs	r3, #0
 801b70e:	e076      	b.n	801b7fe <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801b710:	697b      	ldr	r3, [r7, #20]
 801b712:	88db      	ldrh	r3, [r3, #6]
 801b714:	b29b      	uxth	r3, r3
 801b716:	461a      	mov	r2, r3
 801b718:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801b71c:	4013      	ands	r3, r2
 801b71e:	2b00      	cmp	r3, #0
 801b720:	d00b      	beq.n	801b73a <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801b722:	6878      	ldr	r0, [r7, #4]
 801b724:	f000 fc92 	bl	801c04c <ip4_reass>
 801b728:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801b72a:	687b      	ldr	r3, [r7, #4]
 801b72c:	2b00      	cmp	r3, #0
 801b72e:	d101      	bne.n	801b734 <ip4_input+0x16c>
      return ERR_OK;
 801b730:	2300      	movs	r3, #0
 801b732:	e064      	b.n	801b7fe <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801b734:	687b      	ldr	r3, [r7, #4]
 801b736:	685b      	ldr	r3, [r3, #4]
 801b738:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801b73a:	4a33      	ldr	r2, [pc, #204]	; (801b808 <ip4_input+0x240>)
 801b73c:	693b      	ldr	r3, [r7, #16]
 801b73e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801b740:	4a31      	ldr	r2, [pc, #196]	; (801b808 <ip4_input+0x240>)
 801b742:	683b      	ldr	r3, [r7, #0]
 801b744:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801b746:	4a30      	ldr	r2, [pc, #192]	; (801b808 <ip4_input+0x240>)
 801b748:	697b      	ldr	r3, [r7, #20]
 801b74a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801b74c:	697b      	ldr	r3, [r7, #20]
 801b74e:	781b      	ldrb	r3, [r3, #0]
 801b750:	f003 030f 	and.w	r3, r3, #15
 801b754:	b2db      	uxtb	r3, r3
 801b756:	009b      	lsls	r3, r3, #2
 801b758:	b2db      	uxtb	r3, r3
 801b75a:	b29a      	uxth	r2, r3
 801b75c:	4b2a      	ldr	r3, [pc, #168]	; (801b808 <ip4_input+0x240>)
 801b75e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801b760:	89fb      	ldrh	r3, [r7, #14]
 801b762:	4619      	mov	r1, r3
 801b764:	6878      	ldr	r0, [r7, #4]
 801b766:	f7f7 fc6b 	bl	8013040 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801b76a:	697b      	ldr	r3, [r7, #20]
 801b76c:	7a5b      	ldrb	r3, [r3, #9]
 801b76e:	2b11      	cmp	r3, #17
 801b770:	d006      	beq.n	801b780 <ip4_input+0x1b8>
 801b772:	2b11      	cmp	r3, #17
 801b774:	dc13      	bgt.n	801b79e <ip4_input+0x1d6>
 801b776:	2b01      	cmp	r3, #1
 801b778:	d00c      	beq.n	801b794 <ip4_input+0x1cc>
 801b77a:	2b06      	cmp	r3, #6
 801b77c:	d005      	beq.n	801b78a <ip4_input+0x1c2>
 801b77e:	e00e      	b.n	801b79e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801b780:	6839      	ldr	r1, [r7, #0]
 801b782:	6878      	ldr	r0, [r7, #4]
 801b784:	f7fe f970 	bl	8019a68 <udp_input>
        break;
 801b788:	e026      	b.n	801b7d8 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801b78a:	6839      	ldr	r1, [r7, #0]
 801b78c:	6878      	ldr	r0, [r7, #4]
 801b78e:	f7f9 fd29 	bl	80151e4 <tcp_input>
        break;
 801b792:	e021      	b.n	801b7d8 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801b794:	6839      	ldr	r1, [r7, #0]
 801b796:	6878      	ldr	r0, [r7, #4]
 801b798:	f7ff fcee 	bl	801b178 <icmp_input>
        break;
 801b79c:	e01c      	b.n	801b7d8 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b79e:	4b1a      	ldr	r3, [pc, #104]	; (801b808 <ip4_input+0x240>)
 801b7a0:	695b      	ldr	r3, [r3, #20]
 801b7a2:	6939      	ldr	r1, [r7, #16]
 801b7a4:	4618      	mov	r0, r3
 801b7a6:	f000 f90b 	bl	801b9c0 <ip4_addr_isbroadcast_u32>
 801b7aa:	4603      	mov	r3, r0
 801b7ac:	2b00      	cmp	r3, #0
 801b7ae:	d10f      	bne.n	801b7d0 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b7b0:	4b15      	ldr	r3, [pc, #84]	; (801b808 <ip4_input+0x240>)
 801b7b2:	695b      	ldr	r3, [r3, #20]
 801b7b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b7b8:	2be0      	cmp	r3, #224	; 0xe0
 801b7ba:	d009      	beq.n	801b7d0 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801b7bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801b7c0:	4619      	mov	r1, r3
 801b7c2:	6878      	ldr	r0, [r7, #4]
 801b7c4:	f7f7 fcaf 	bl	8013126 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801b7c8:	2102      	movs	r1, #2
 801b7ca:	6878      	ldr	r0, [r7, #4]
 801b7cc:	f7ff fdd8 	bl	801b380 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801b7d0:	6878      	ldr	r0, [r7, #4]
 801b7d2:	f7f7 fcbb 	bl	801314c <pbuf_free>
        break;
 801b7d6:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801b7d8:	4b0b      	ldr	r3, [pc, #44]	; (801b808 <ip4_input+0x240>)
 801b7da:	2200      	movs	r2, #0
 801b7dc:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801b7de:	4b0a      	ldr	r3, [pc, #40]	; (801b808 <ip4_input+0x240>)
 801b7e0:	2200      	movs	r2, #0
 801b7e2:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801b7e4:	4b08      	ldr	r3, [pc, #32]	; (801b808 <ip4_input+0x240>)
 801b7e6:	2200      	movs	r2, #0
 801b7e8:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801b7ea:	4b07      	ldr	r3, [pc, #28]	; (801b808 <ip4_input+0x240>)
 801b7ec:	2200      	movs	r2, #0
 801b7ee:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801b7f0:	4b05      	ldr	r3, [pc, #20]	; (801b808 <ip4_input+0x240>)
 801b7f2:	2200      	movs	r2, #0
 801b7f4:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801b7f6:	4b04      	ldr	r3, [pc, #16]	; (801b808 <ip4_input+0x240>)
 801b7f8:	2200      	movs	r2, #0
 801b7fa:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801b7fc:	2300      	movs	r3, #0
}
 801b7fe:	4618      	mov	r0, r3
 801b800:	3718      	adds	r7, #24
 801b802:	46bd      	mov	sp, r7
 801b804:	bd80      	pop	{r7, pc}
 801b806:	bf00      	nop
 801b808:	2000a668 	.word	0x2000a668
 801b80c:	2000ddb0 	.word	0x2000ddb0

0801b810 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801b810:	b580      	push	{r7, lr}
 801b812:	b08a      	sub	sp, #40	; 0x28
 801b814:	af04      	add	r7, sp, #16
 801b816:	60f8      	str	r0, [r7, #12]
 801b818:	60b9      	str	r1, [r7, #8]
 801b81a:	607a      	str	r2, [r7, #4]
 801b81c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801b81e:	68bb      	ldr	r3, [r7, #8]
 801b820:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801b822:	687b      	ldr	r3, [r7, #4]
 801b824:	2b00      	cmp	r3, #0
 801b826:	d009      	beq.n	801b83c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801b828:	68bb      	ldr	r3, [r7, #8]
 801b82a:	2b00      	cmp	r3, #0
 801b82c:	d003      	beq.n	801b836 <ip4_output_if+0x26>
 801b82e:	68bb      	ldr	r3, [r7, #8]
 801b830:	681b      	ldr	r3, [r3, #0]
 801b832:	2b00      	cmp	r3, #0
 801b834:	d102      	bne.n	801b83c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801b836:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b838:	3304      	adds	r3, #4
 801b83a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801b83c:	78fa      	ldrb	r2, [r7, #3]
 801b83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b840:	9302      	str	r3, [sp, #8]
 801b842:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801b846:	9301      	str	r3, [sp, #4]
 801b848:	f897 3020 	ldrb.w	r3, [r7, #32]
 801b84c:	9300      	str	r3, [sp, #0]
 801b84e:	4613      	mov	r3, r2
 801b850:	687a      	ldr	r2, [r7, #4]
 801b852:	6979      	ldr	r1, [r7, #20]
 801b854:	68f8      	ldr	r0, [r7, #12]
 801b856:	f000 f805 	bl	801b864 <ip4_output_if_src>
 801b85a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801b85c:	4618      	mov	r0, r3
 801b85e:	3718      	adds	r7, #24
 801b860:	46bd      	mov	sp, r7
 801b862:	bd80      	pop	{r7, pc}

0801b864 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801b864:	b580      	push	{r7, lr}
 801b866:	b088      	sub	sp, #32
 801b868:	af00      	add	r7, sp, #0
 801b86a:	60f8      	str	r0, [r7, #12]
 801b86c:	60b9      	str	r1, [r7, #8]
 801b86e:	607a      	str	r2, [r7, #4]
 801b870:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801b872:	68fb      	ldr	r3, [r7, #12]
 801b874:	7b9b      	ldrb	r3, [r3, #14]
 801b876:	2b01      	cmp	r3, #1
 801b878:	d006      	beq.n	801b888 <ip4_output_if_src+0x24>
 801b87a:	4b4b      	ldr	r3, [pc, #300]	; (801b9a8 <ip4_output_if_src+0x144>)
 801b87c:	f44f 7255 	mov.w	r2, #852	; 0x354
 801b880:	494a      	ldr	r1, [pc, #296]	; (801b9ac <ip4_output_if_src+0x148>)
 801b882:	484b      	ldr	r0, [pc, #300]	; (801b9b0 <ip4_output_if_src+0x14c>)
 801b884:	f001 fc16 	bl	801d0b4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801b888:	687b      	ldr	r3, [r7, #4]
 801b88a:	2b00      	cmp	r3, #0
 801b88c:	d060      	beq.n	801b950 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801b88e:	2314      	movs	r3, #20
 801b890:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801b892:	2114      	movs	r1, #20
 801b894:	68f8      	ldr	r0, [r7, #12]
 801b896:	f7f7 fbc3 	bl	8013020 <pbuf_add_header>
 801b89a:	4603      	mov	r3, r0
 801b89c:	2b00      	cmp	r3, #0
 801b89e:	d002      	beq.n	801b8a6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b8a0:	f06f 0301 	mvn.w	r3, #1
 801b8a4:	e07c      	b.n	801b9a0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801b8a6:	68fb      	ldr	r3, [r7, #12]
 801b8a8:	685b      	ldr	r3, [r3, #4]
 801b8aa:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801b8ac:	68fb      	ldr	r3, [r7, #12]
 801b8ae:	895b      	ldrh	r3, [r3, #10]
 801b8b0:	2b13      	cmp	r3, #19
 801b8b2:	d806      	bhi.n	801b8c2 <ip4_output_if_src+0x5e>
 801b8b4:	4b3c      	ldr	r3, [pc, #240]	; (801b9a8 <ip4_output_if_src+0x144>)
 801b8b6:	f44f 7262 	mov.w	r2, #904	; 0x388
 801b8ba:	493e      	ldr	r1, [pc, #248]	; (801b9b4 <ip4_output_if_src+0x150>)
 801b8bc:	483c      	ldr	r0, [pc, #240]	; (801b9b0 <ip4_output_if_src+0x14c>)
 801b8be:	f001 fbf9 	bl	801d0b4 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801b8c2:	69fb      	ldr	r3, [r7, #28]
 801b8c4:	78fa      	ldrb	r2, [r7, #3]
 801b8c6:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801b8c8:	69fb      	ldr	r3, [r7, #28]
 801b8ca:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801b8ce:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801b8d0:	687b      	ldr	r3, [r7, #4]
 801b8d2:	681a      	ldr	r2, [r3, #0]
 801b8d4:	69fb      	ldr	r3, [r7, #28]
 801b8d6:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801b8d8:	8b7b      	ldrh	r3, [r7, #26]
 801b8da:	089b      	lsrs	r3, r3, #2
 801b8dc:	b29b      	uxth	r3, r3
 801b8de:	b2db      	uxtb	r3, r3
 801b8e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b8e4:	b2da      	uxtb	r2, r3
 801b8e6:	69fb      	ldr	r3, [r7, #28]
 801b8e8:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801b8ea:	69fb      	ldr	r3, [r7, #28]
 801b8ec:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801b8f0:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801b8f2:	68fb      	ldr	r3, [r7, #12]
 801b8f4:	891b      	ldrh	r3, [r3, #8]
 801b8f6:	4618      	mov	r0, r3
 801b8f8:	f7f6 f8e0 	bl	8011abc <lwip_htons>
 801b8fc:	4603      	mov	r3, r0
 801b8fe:	461a      	mov	r2, r3
 801b900:	69fb      	ldr	r3, [r7, #28]
 801b902:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801b904:	69fb      	ldr	r3, [r7, #28]
 801b906:	2200      	movs	r2, #0
 801b908:	719a      	strb	r2, [r3, #6]
 801b90a:	2200      	movs	r2, #0
 801b90c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801b90e:	4b2a      	ldr	r3, [pc, #168]	; (801b9b8 <ip4_output_if_src+0x154>)
 801b910:	881b      	ldrh	r3, [r3, #0]
 801b912:	4618      	mov	r0, r3
 801b914:	f7f6 f8d2 	bl	8011abc <lwip_htons>
 801b918:	4603      	mov	r3, r0
 801b91a:	461a      	mov	r2, r3
 801b91c:	69fb      	ldr	r3, [r7, #28]
 801b91e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801b920:	4b25      	ldr	r3, [pc, #148]	; (801b9b8 <ip4_output_if_src+0x154>)
 801b922:	881b      	ldrh	r3, [r3, #0]
 801b924:	3301      	adds	r3, #1
 801b926:	b29a      	uxth	r2, r3
 801b928:	4b23      	ldr	r3, [pc, #140]	; (801b9b8 <ip4_output_if_src+0x154>)
 801b92a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801b92c:	68bb      	ldr	r3, [r7, #8]
 801b92e:	2b00      	cmp	r3, #0
 801b930:	d104      	bne.n	801b93c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801b932:	4b22      	ldr	r3, [pc, #136]	; (801b9bc <ip4_output_if_src+0x158>)
 801b934:	681a      	ldr	r2, [r3, #0]
 801b936:	69fb      	ldr	r3, [r7, #28]
 801b938:	60da      	str	r2, [r3, #12]
 801b93a:	e003      	b.n	801b944 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801b93c:	68bb      	ldr	r3, [r7, #8]
 801b93e:	681a      	ldr	r2, [r3, #0]
 801b940:	69fb      	ldr	r3, [r7, #28]
 801b942:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801b944:	69fb      	ldr	r3, [r7, #28]
 801b946:	2200      	movs	r2, #0
 801b948:	729a      	strb	r2, [r3, #10]
 801b94a:	2200      	movs	r2, #0
 801b94c:	72da      	strb	r2, [r3, #11]
 801b94e:	e00f      	b.n	801b970 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801b950:	68fb      	ldr	r3, [r7, #12]
 801b952:	895b      	ldrh	r3, [r3, #10]
 801b954:	2b13      	cmp	r3, #19
 801b956:	d802      	bhi.n	801b95e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b958:	f06f 0301 	mvn.w	r3, #1
 801b95c:	e020      	b.n	801b9a0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801b95e:	68fb      	ldr	r3, [r7, #12]
 801b960:	685b      	ldr	r3, [r3, #4]
 801b962:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801b964:	69fb      	ldr	r3, [r7, #28]
 801b966:	691b      	ldr	r3, [r3, #16]
 801b968:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801b96a:	f107 0314 	add.w	r3, r7, #20
 801b96e:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801b970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b972:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801b974:	2b00      	cmp	r3, #0
 801b976:	d00c      	beq.n	801b992 <ip4_output_if_src+0x12e>
 801b978:	68fb      	ldr	r3, [r7, #12]
 801b97a:	891a      	ldrh	r2, [r3, #8]
 801b97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b97e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801b980:	429a      	cmp	r2, r3
 801b982:	d906      	bls.n	801b992 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801b984:	687a      	ldr	r2, [r7, #4]
 801b986:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b988:	68f8      	ldr	r0, [r7, #12]
 801b98a:	f000 fd53 	bl	801c434 <ip4_frag>
 801b98e:	4603      	mov	r3, r0
 801b990:	e006      	b.n	801b9a0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801b992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b994:	695b      	ldr	r3, [r3, #20]
 801b996:	687a      	ldr	r2, [r7, #4]
 801b998:	68f9      	ldr	r1, [r7, #12]
 801b99a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b99c:	4798      	blx	r3
 801b99e:	4603      	mov	r3, r0
}
 801b9a0:	4618      	mov	r0, r3
 801b9a2:	3720      	adds	r7, #32
 801b9a4:	46bd      	mov	sp, r7
 801b9a6:	bd80      	pop	{r7, pc}
 801b9a8:	08021874 	.word	0x08021874
 801b9ac:	080218a8 	.word	0x080218a8
 801b9b0:	080218b4 	.word	0x080218b4
 801b9b4:	080218dc 	.word	0x080218dc
 801b9b8:	2000df0e 	.word	0x2000df0e
 801b9bc:	08021cfc 	.word	0x08021cfc

0801b9c0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801b9c0:	b480      	push	{r7}
 801b9c2:	b085      	sub	sp, #20
 801b9c4:	af00      	add	r7, sp, #0
 801b9c6:	6078      	str	r0, [r7, #4]
 801b9c8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801b9ca:	687b      	ldr	r3, [r7, #4]
 801b9cc:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801b9ce:	687b      	ldr	r3, [r7, #4]
 801b9d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b9d4:	d002      	beq.n	801b9dc <ip4_addr_isbroadcast_u32+0x1c>
 801b9d6:	687b      	ldr	r3, [r7, #4]
 801b9d8:	2b00      	cmp	r3, #0
 801b9da:	d101      	bne.n	801b9e0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801b9dc:	2301      	movs	r3, #1
 801b9de:	e02a      	b.n	801ba36 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801b9e0:	683b      	ldr	r3, [r7, #0]
 801b9e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b9e6:	f003 0302 	and.w	r3, r3, #2
 801b9ea:	2b00      	cmp	r3, #0
 801b9ec:	d101      	bne.n	801b9f2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801b9ee:	2300      	movs	r3, #0
 801b9f0:	e021      	b.n	801ba36 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801b9f2:	683b      	ldr	r3, [r7, #0]
 801b9f4:	3304      	adds	r3, #4
 801b9f6:	681b      	ldr	r3, [r3, #0]
 801b9f8:	687a      	ldr	r2, [r7, #4]
 801b9fa:	429a      	cmp	r2, r3
 801b9fc:	d101      	bne.n	801ba02 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801b9fe:	2300      	movs	r3, #0
 801ba00:	e019      	b.n	801ba36 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801ba02:	68fa      	ldr	r2, [r7, #12]
 801ba04:	683b      	ldr	r3, [r7, #0]
 801ba06:	3304      	adds	r3, #4
 801ba08:	681b      	ldr	r3, [r3, #0]
 801ba0a:	405a      	eors	r2, r3
 801ba0c:	683b      	ldr	r3, [r7, #0]
 801ba0e:	3308      	adds	r3, #8
 801ba10:	681b      	ldr	r3, [r3, #0]
 801ba12:	4013      	ands	r3, r2
 801ba14:	2b00      	cmp	r3, #0
 801ba16:	d10d      	bne.n	801ba34 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801ba18:	683b      	ldr	r3, [r7, #0]
 801ba1a:	3308      	adds	r3, #8
 801ba1c:	681b      	ldr	r3, [r3, #0]
 801ba1e:	43da      	mvns	r2, r3
 801ba20:	687b      	ldr	r3, [r7, #4]
 801ba22:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801ba24:	683b      	ldr	r3, [r7, #0]
 801ba26:	3308      	adds	r3, #8
 801ba28:	681b      	ldr	r3, [r3, #0]
 801ba2a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801ba2c:	429a      	cmp	r2, r3
 801ba2e:	d101      	bne.n	801ba34 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801ba30:	2301      	movs	r3, #1
 801ba32:	e000      	b.n	801ba36 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801ba34:	2300      	movs	r3, #0
  }
}
 801ba36:	4618      	mov	r0, r3
 801ba38:	3714      	adds	r7, #20
 801ba3a:	46bd      	mov	sp, r7
 801ba3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba40:	4770      	bx	lr
	...

0801ba44 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801ba44:	b580      	push	{r7, lr}
 801ba46:	b084      	sub	sp, #16
 801ba48:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801ba4a:	2300      	movs	r3, #0
 801ba4c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801ba4e:	4b12      	ldr	r3, [pc, #72]	; (801ba98 <ip_reass_tmr+0x54>)
 801ba50:	681b      	ldr	r3, [r3, #0]
 801ba52:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801ba54:	e018      	b.n	801ba88 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801ba56:	68fb      	ldr	r3, [r7, #12]
 801ba58:	7fdb      	ldrb	r3, [r3, #31]
 801ba5a:	2b00      	cmp	r3, #0
 801ba5c:	d00b      	beq.n	801ba76 <ip_reass_tmr+0x32>
      r->timer--;
 801ba5e:	68fb      	ldr	r3, [r7, #12]
 801ba60:	7fdb      	ldrb	r3, [r3, #31]
 801ba62:	3b01      	subs	r3, #1
 801ba64:	b2da      	uxtb	r2, r3
 801ba66:	68fb      	ldr	r3, [r7, #12]
 801ba68:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801ba6a:	68fb      	ldr	r3, [r7, #12]
 801ba6c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801ba6e:	68fb      	ldr	r3, [r7, #12]
 801ba70:	681b      	ldr	r3, [r3, #0]
 801ba72:	60fb      	str	r3, [r7, #12]
 801ba74:	e008      	b.n	801ba88 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801ba76:	68fb      	ldr	r3, [r7, #12]
 801ba78:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801ba7a:	68fb      	ldr	r3, [r7, #12]
 801ba7c:	681b      	ldr	r3, [r3, #0]
 801ba7e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801ba80:	68b9      	ldr	r1, [r7, #8]
 801ba82:	6878      	ldr	r0, [r7, #4]
 801ba84:	f000 f80a 	bl	801ba9c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801ba88:	68fb      	ldr	r3, [r7, #12]
 801ba8a:	2b00      	cmp	r3, #0
 801ba8c:	d1e3      	bne.n	801ba56 <ip_reass_tmr+0x12>
    }
  }
}
 801ba8e:	bf00      	nop
 801ba90:	bf00      	nop
 801ba92:	3710      	adds	r7, #16
 801ba94:	46bd      	mov	sp, r7
 801ba96:	bd80      	pop	{r7, pc}
 801ba98:	2000df10 	.word	0x2000df10

0801ba9c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801ba9c:	b580      	push	{r7, lr}
 801ba9e:	b088      	sub	sp, #32
 801baa0:	af00      	add	r7, sp, #0
 801baa2:	6078      	str	r0, [r7, #4]
 801baa4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801baa6:	2300      	movs	r3, #0
 801baa8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801baaa:	683a      	ldr	r2, [r7, #0]
 801baac:	687b      	ldr	r3, [r7, #4]
 801baae:	429a      	cmp	r2, r3
 801bab0:	d105      	bne.n	801babe <ip_reass_free_complete_datagram+0x22>
 801bab2:	4b45      	ldr	r3, [pc, #276]	; (801bbc8 <ip_reass_free_complete_datagram+0x12c>)
 801bab4:	22ab      	movs	r2, #171	; 0xab
 801bab6:	4945      	ldr	r1, [pc, #276]	; (801bbcc <ip_reass_free_complete_datagram+0x130>)
 801bab8:	4845      	ldr	r0, [pc, #276]	; (801bbd0 <ip_reass_free_complete_datagram+0x134>)
 801baba:	f001 fafb 	bl	801d0b4 <iprintf>
  if (prev != NULL) {
 801babe:	683b      	ldr	r3, [r7, #0]
 801bac0:	2b00      	cmp	r3, #0
 801bac2:	d00a      	beq.n	801bada <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801bac4:	683b      	ldr	r3, [r7, #0]
 801bac6:	681b      	ldr	r3, [r3, #0]
 801bac8:	687a      	ldr	r2, [r7, #4]
 801baca:	429a      	cmp	r2, r3
 801bacc:	d005      	beq.n	801bada <ip_reass_free_complete_datagram+0x3e>
 801bace:	4b3e      	ldr	r3, [pc, #248]	; (801bbc8 <ip_reass_free_complete_datagram+0x12c>)
 801bad0:	22ad      	movs	r2, #173	; 0xad
 801bad2:	4940      	ldr	r1, [pc, #256]	; (801bbd4 <ip_reass_free_complete_datagram+0x138>)
 801bad4:	483e      	ldr	r0, [pc, #248]	; (801bbd0 <ip_reass_free_complete_datagram+0x134>)
 801bad6:	f001 faed 	bl	801d0b4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801bada:	687b      	ldr	r3, [r7, #4]
 801badc:	685b      	ldr	r3, [r3, #4]
 801bade:	685b      	ldr	r3, [r3, #4]
 801bae0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801bae2:	697b      	ldr	r3, [r7, #20]
 801bae4:	889b      	ldrh	r3, [r3, #4]
 801bae6:	b29b      	uxth	r3, r3
 801bae8:	2b00      	cmp	r3, #0
 801baea:	d12a      	bne.n	801bb42 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801baec:	687b      	ldr	r3, [r7, #4]
 801baee:	685b      	ldr	r3, [r3, #4]
 801baf0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801baf2:	697b      	ldr	r3, [r7, #20]
 801baf4:	681a      	ldr	r2, [r3, #0]
 801baf6:	687b      	ldr	r3, [r7, #4]
 801baf8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801bafa:	69bb      	ldr	r3, [r7, #24]
 801bafc:	6858      	ldr	r0, [r3, #4]
 801bafe:	687b      	ldr	r3, [r7, #4]
 801bb00:	3308      	adds	r3, #8
 801bb02:	2214      	movs	r2, #20
 801bb04:	4619      	mov	r1, r3
 801bb06:	f001 f9c5 	bl	801ce94 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801bb0a:	2101      	movs	r1, #1
 801bb0c:	69b8      	ldr	r0, [r7, #24]
 801bb0e:	f7ff fc47 	bl	801b3a0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801bb12:	69b8      	ldr	r0, [r7, #24]
 801bb14:	f7f7 fba8 	bl	8013268 <pbuf_clen>
 801bb18:	4603      	mov	r3, r0
 801bb1a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801bb1c:	8bfa      	ldrh	r2, [r7, #30]
 801bb1e:	8a7b      	ldrh	r3, [r7, #18]
 801bb20:	4413      	add	r3, r2
 801bb22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801bb26:	db05      	blt.n	801bb34 <ip_reass_free_complete_datagram+0x98>
 801bb28:	4b27      	ldr	r3, [pc, #156]	; (801bbc8 <ip_reass_free_complete_datagram+0x12c>)
 801bb2a:	22bc      	movs	r2, #188	; 0xbc
 801bb2c:	492a      	ldr	r1, [pc, #168]	; (801bbd8 <ip_reass_free_complete_datagram+0x13c>)
 801bb2e:	4828      	ldr	r0, [pc, #160]	; (801bbd0 <ip_reass_free_complete_datagram+0x134>)
 801bb30:	f001 fac0 	bl	801d0b4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801bb34:	8bfa      	ldrh	r2, [r7, #30]
 801bb36:	8a7b      	ldrh	r3, [r7, #18]
 801bb38:	4413      	add	r3, r2
 801bb3a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801bb3c:	69b8      	ldr	r0, [r7, #24]
 801bb3e:	f7f7 fb05 	bl	801314c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801bb42:	687b      	ldr	r3, [r7, #4]
 801bb44:	685b      	ldr	r3, [r3, #4]
 801bb46:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801bb48:	e01f      	b.n	801bb8a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801bb4a:	69bb      	ldr	r3, [r7, #24]
 801bb4c:	685b      	ldr	r3, [r3, #4]
 801bb4e:	617b      	str	r3, [r7, #20]
    pcur = p;
 801bb50:	69bb      	ldr	r3, [r7, #24]
 801bb52:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801bb54:	697b      	ldr	r3, [r7, #20]
 801bb56:	681b      	ldr	r3, [r3, #0]
 801bb58:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801bb5a:	68f8      	ldr	r0, [r7, #12]
 801bb5c:	f7f7 fb84 	bl	8013268 <pbuf_clen>
 801bb60:	4603      	mov	r3, r0
 801bb62:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801bb64:	8bfa      	ldrh	r2, [r7, #30]
 801bb66:	8a7b      	ldrh	r3, [r7, #18]
 801bb68:	4413      	add	r3, r2
 801bb6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801bb6e:	db05      	blt.n	801bb7c <ip_reass_free_complete_datagram+0xe0>
 801bb70:	4b15      	ldr	r3, [pc, #84]	; (801bbc8 <ip_reass_free_complete_datagram+0x12c>)
 801bb72:	22cc      	movs	r2, #204	; 0xcc
 801bb74:	4918      	ldr	r1, [pc, #96]	; (801bbd8 <ip_reass_free_complete_datagram+0x13c>)
 801bb76:	4816      	ldr	r0, [pc, #88]	; (801bbd0 <ip_reass_free_complete_datagram+0x134>)
 801bb78:	f001 fa9c 	bl	801d0b4 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801bb7c:	8bfa      	ldrh	r2, [r7, #30]
 801bb7e:	8a7b      	ldrh	r3, [r7, #18]
 801bb80:	4413      	add	r3, r2
 801bb82:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801bb84:	68f8      	ldr	r0, [r7, #12]
 801bb86:	f7f7 fae1 	bl	801314c <pbuf_free>
  while (p != NULL) {
 801bb8a:	69bb      	ldr	r3, [r7, #24]
 801bb8c:	2b00      	cmp	r3, #0
 801bb8e:	d1dc      	bne.n	801bb4a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801bb90:	6839      	ldr	r1, [r7, #0]
 801bb92:	6878      	ldr	r0, [r7, #4]
 801bb94:	f000 f8c2 	bl	801bd1c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801bb98:	4b10      	ldr	r3, [pc, #64]	; (801bbdc <ip_reass_free_complete_datagram+0x140>)
 801bb9a:	881b      	ldrh	r3, [r3, #0]
 801bb9c:	8bfa      	ldrh	r2, [r7, #30]
 801bb9e:	429a      	cmp	r2, r3
 801bba0:	d905      	bls.n	801bbae <ip_reass_free_complete_datagram+0x112>
 801bba2:	4b09      	ldr	r3, [pc, #36]	; (801bbc8 <ip_reass_free_complete_datagram+0x12c>)
 801bba4:	22d2      	movs	r2, #210	; 0xd2
 801bba6:	490e      	ldr	r1, [pc, #56]	; (801bbe0 <ip_reass_free_complete_datagram+0x144>)
 801bba8:	4809      	ldr	r0, [pc, #36]	; (801bbd0 <ip_reass_free_complete_datagram+0x134>)
 801bbaa:	f001 fa83 	bl	801d0b4 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801bbae:	4b0b      	ldr	r3, [pc, #44]	; (801bbdc <ip_reass_free_complete_datagram+0x140>)
 801bbb0:	881a      	ldrh	r2, [r3, #0]
 801bbb2:	8bfb      	ldrh	r3, [r7, #30]
 801bbb4:	1ad3      	subs	r3, r2, r3
 801bbb6:	b29a      	uxth	r2, r3
 801bbb8:	4b08      	ldr	r3, [pc, #32]	; (801bbdc <ip_reass_free_complete_datagram+0x140>)
 801bbba:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801bbbc:	8bfb      	ldrh	r3, [r7, #30]
}
 801bbbe:	4618      	mov	r0, r3
 801bbc0:	3720      	adds	r7, #32
 801bbc2:	46bd      	mov	sp, r7
 801bbc4:	bd80      	pop	{r7, pc}
 801bbc6:	bf00      	nop
 801bbc8:	0802190c 	.word	0x0802190c
 801bbcc:	08021948 	.word	0x08021948
 801bbd0:	08021954 	.word	0x08021954
 801bbd4:	0802197c 	.word	0x0802197c
 801bbd8:	08021990 	.word	0x08021990
 801bbdc:	2000df14 	.word	0x2000df14
 801bbe0:	080219b0 	.word	0x080219b0

0801bbe4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801bbe4:	b580      	push	{r7, lr}
 801bbe6:	b08a      	sub	sp, #40	; 0x28
 801bbe8:	af00      	add	r7, sp, #0
 801bbea:	6078      	str	r0, [r7, #4]
 801bbec:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801bbee:	2300      	movs	r3, #0
 801bbf0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801bbf2:	2300      	movs	r3, #0
 801bbf4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801bbf6:	2300      	movs	r3, #0
 801bbf8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801bbfa:	2300      	movs	r3, #0
 801bbfc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801bbfe:	2300      	movs	r3, #0
 801bc00:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801bc02:	4b28      	ldr	r3, [pc, #160]	; (801bca4 <ip_reass_remove_oldest_datagram+0xc0>)
 801bc04:	681b      	ldr	r3, [r3, #0]
 801bc06:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801bc08:	e030      	b.n	801bc6c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801bc0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc0c:	695a      	ldr	r2, [r3, #20]
 801bc0e:	687b      	ldr	r3, [r7, #4]
 801bc10:	68db      	ldr	r3, [r3, #12]
 801bc12:	429a      	cmp	r2, r3
 801bc14:	d10c      	bne.n	801bc30 <ip_reass_remove_oldest_datagram+0x4c>
 801bc16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc18:	699a      	ldr	r2, [r3, #24]
 801bc1a:	687b      	ldr	r3, [r7, #4]
 801bc1c:	691b      	ldr	r3, [r3, #16]
 801bc1e:	429a      	cmp	r2, r3
 801bc20:	d106      	bne.n	801bc30 <ip_reass_remove_oldest_datagram+0x4c>
 801bc22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc24:	899a      	ldrh	r2, [r3, #12]
 801bc26:	687b      	ldr	r3, [r7, #4]
 801bc28:	889b      	ldrh	r3, [r3, #4]
 801bc2a:	b29b      	uxth	r3, r3
 801bc2c:	429a      	cmp	r2, r3
 801bc2e:	d014      	beq.n	801bc5a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801bc30:	693b      	ldr	r3, [r7, #16]
 801bc32:	3301      	adds	r3, #1
 801bc34:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801bc36:	6a3b      	ldr	r3, [r7, #32]
 801bc38:	2b00      	cmp	r3, #0
 801bc3a:	d104      	bne.n	801bc46 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801bc3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc3e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801bc40:	69fb      	ldr	r3, [r7, #28]
 801bc42:	61bb      	str	r3, [r7, #24]
 801bc44:	e009      	b.n	801bc5a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801bc46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc48:	7fda      	ldrb	r2, [r3, #31]
 801bc4a:	6a3b      	ldr	r3, [r7, #32]
 801bc4c:	7fdb      	ldrb	r3, [r3, #31]
 801bc4e:	429a      	cmp	r2, r3
 801bc50:	d803      	bhi.n	801bc5a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801bc52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc54:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801bc56:	69fb      	ldr	r3, [r7, #28]
 801bc58:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801bc5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc5c:	681b      	ldr	r3, [r3, #0]
 801bc5e:	2b00      	cmp	r3, #0
 801bc60:	d001      	beq.n	801bc66 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801bc62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc64:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801bc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc68:	681b      	ldr	r3, [r3, #0]
 801bc6a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801bc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc6e:	2b00      	cmp	r3, #0
 801bc70:	d1cb      	bne.n	801bc0a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801bc72:	6a3b      	ldr	r3, [r7, #32]
 801bc74:	2b00      	cmp	r3, #0
 801bc76:	d008      	beq.n	801bc8a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801bc78:	69b9      	ldr	r1, [r7, #24]
 801bc7a:	6a38      	ldr	r0, [r7, #32]
 801bc7c:	f7ff ff0e 	bl	801ba9c <ip_reass_free_complete_datagram>
 801bc80:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801bc82:	697a      	ldr	r2, [r7, #20]
 801bc84:	68fb      	ldr	r3, [r7, #12]
 801bc86:	4413      	add	r3, r2
 801bc88:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801bc8a:	697a      	ldr	r2, [r7, #20]
 801bc8c:	683b      	ldr	r3, [r7, #0]
 801bc8e:	429a      	cmp	r2, r3
 801bc90:	da02      	bge.n	801bc98 <ip_reass_remove_oldest_datagram+0xb4>
 801bc92:	693b      	ldr	r3, [r7, #16]
 801bc94:	2b01      	cmp	r3, #1
 801bc96:	dcac      	bgt.n	801bbf2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801bc98:	697b      	ldr	r3, [r7, #20]
}
 801bc9a:	4618      	mov	r0, r3
 801bc9c:	3728      	adds	r7, #40	; 0x28
 801bc9e:	46bd      	mov	sp, r7
 801bca0:	bd80      	pop	{r7, pc}
 801bca2:	bf00      	nop
 801bca4:	2000df10 	.word	0x2000df10

0801bca8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801bca8:	b580      	push	{r7, lr}
 801bcaa:	b084      	sub	sp, #16
 801bcac:	af00      	add	r7, sp, #0
 801bcae:	6078      	str	r0, [r7, #4]
 801bcb0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801bcb2:	2004      	movs	r0, #4
 801bcb4:	f7f6 fbb8 	bl	8012428 <memp_malloc>
 801bcb8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801bcba:	68fb      	ldr	r3, [r7, #12]
 801bcbc:	2b00      	cmp	r3, #0
 801bcbe:	d110      	bne.n	801bce2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801bcc0:	6839      	ldr	r1, [r7, #0]
 801bcc2:	6878      	ldr	r0, [r7, #4]
 801bcc4:	f7ff ff8e 	bl	801bbe4 <ip_reass_remove_oldest_datagram>
 801bcc8:	4602      	mov	r2, r0
 801bcca:	683b      	ldr	r3, [r7, #0]
 801bccc:	4293      	cmp	r3, r2
 801bcce:	dc03      	bgt.n	801bcd8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801bcd0:	2004      	movs	r0, #4
 801bcd2:	f7f6 fba9 	bl	8012428 <memp_malloc>
 801bcd6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801bcd8:	68fb      	ldr	r3, [r7, #12]
 801bcda:	2b00      	cmp	r3, #0
 801bcdc:	d101      	bne.n	801bce2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801bcde:	2300      	movs	r3, #0
 801bce0:	e016      	b.n	801bd10 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801bce2:	2220      	movs	r2, #32
 801bce4:	2100      	movs	r1, #0
 801bce6:	68f8      	ldr	r0, [r7, #12]
 801bce8:	f001 f8fc 	bl	801cee4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801bcec:	68fb      	ldr	r3, [r7, #12]
 801bcee:	220f      	movs	r2, #15
 801bcf0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801bcf2:	4b09      	ldr	r3, [pc, #36]	; (801bd18 <ip_reass_enqueue_new_datagram+0x70>)
 801bcf4:	681a      	ldr	r2, [r3, #0]
 801bcf6:	68fb      	ldr	r3, [r7, #12]
 801bcf8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801bcfa:	4a07      	ldr	r2, [pc, #28]	; (801bd18 <ip_reass_enqueue_new_datagram+0x70>)
 801bcfc:	68fb      	ldr	r3, [r7, #12]
 801bcfe:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801bd00:	68fb      	ldr	r3, [r7, #12]
 801bd02:	3308      	adds	r3, #8
 801bd04:	2214      	movs	r2, #20
 801bd06:	6879      	ldr	r1, [r7, #4]
 801bd08:	4618      	mov	r0, r3
 801bd0a:	f001 f8c3 	bl	801ce94 <memcpy>
  return ipr;
 801bd0e:	68fb      	ldr	r3, [r7, #12]
}
 801bd10:	4618      	mov	r0, r3
 801bd12:	3710      	adds	r7, #16
 801bd14:	46bd      	mov	sp, r7
 801bd16:	bd80      	pop	{r7, pc}
 801bd18:	2000df10 	.word	0x2000df10

0801bd1c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801bd1c:	b580      	push	{r7, lr}
 801bd1e:	b082      	sub	sp, #8
 801bd20:	af00      	add	r7, sp, #0
 801bd22:	6078      	str	r0, [r7, #4]
 801bd24:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801bd26:	4b10      	ldr	r3, [pc, #64]	; (801bd68 <ip_reass_dequeue_datagram+0x4c>)
 801bd28:	681b      	ldr	r3, [r3, #0]
 801bd2a:	687a      	ldr	r2, [r7, #4]
 801bd2c:	429a      	cmp	r2, r3
 801bd2e:	d104      	bne.n	801bd3a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801bd30:	687b      	ldr	r3, [r7, #4]
 801bd32:	681b      	ldr	r3, [r3, #0]
 801bd34:	4a0c      	ldr	r2, [pc, #48]	; (801bd68 <ip_reass_dequeue_datagram+0x4c>)
 801bd36:	6013      	str	r3, [r2, #0]
 801bd38:	e00d      	b.n	801bd56 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801bd3a:	683b      	ldr	r3, [r7, #0]
 801bd3c:	2b00      	cmp	r3, #0
 801bd3e:	d106      	bne.n	801bd4e <ip_reass_dequeue_datagram+0x32>
 801bd40:	4b0a      	ldr	r3, [pc, #40]	; (801bd6c <ip_reass_dequeue_datagram+0x50>)
 801bd42:	f240 1245 	movw	r2, #325	; 0x145
 801bd46:	490a      	ldr	r1, [pc, #40]	; (801bd70 <ip_reass_dequeue_datagram+0x54>)
 801bd48:	480a      	ldr	r0, [pc, #40]	; (801bd74 <ip_reass_dequeue_datagram+0x58>)
 801bd4a:	f001 f9b3 	bl	801d0b4 <iprintf>
    prev->next = ipr->next;
 801bd4e:	687b      	ldr	r3, [r7, #4]
 801bd50:	681a      	ldr	r2, [r3, #0]
 801bd52:	683b      	ldr	r3, [r7, #0]
 801bd54:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801bd56:	6879      	ldr	r1, [r7, #4]
 801bd58:	2004      	movs	r0, #4
 801bd5a:	f7f6 fbb7 	bl	80124cc <memp_free>
}
 801bd5e:	bf00      	nop
 801bd60:	3708      	adds	r7, #8
 801bd62:	46bd      	mov	sp, r7
 801bd64:	bd80      	pop	{r7, pc}
 801bd66:	bf00      	nop
 801bd68:	2000df10 	.word	0x2000df10
 801bd6c:	0802190c 	.word	0x0802190c
 801bd70:	080219d4 	.word	0x080219d4
 801bd74:	08021954 	.word	0x08021954

0801bd78 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801bd78:	b580      	push	{r7, lr}
 801bd7a:	b08c      	sub	sp, #48	; 0x30
 801bd7c:	af00      	add	r7, sp, #0
 801bd7e:	60f8      	str	r0, [r7, #12]
 801bd80:	60b9      	str	r1, [r7, #8]
 801bd82:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801bd84:	2300      	movs	r3, #0
 801bd86:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801bd88:	2301      	movs	r3, #1
 801bd8a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801bd8c:	68bb      	ldr	r3, [r7, #8]
 801bd8e:	685b      	ldr	r3, [r3, #4]
 801bd90:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801bd92:	69fb      	ldr	r3, [r7, #28]
 801bd94:	885b      	ldrh	r3, [r3, #2]
 801bd96:	b29b      	uxth	r3, r3
 801bd98:	4618      	mov	r0, r3
 801bd9a:	f7f5 fe8f 	bl	8011abc <lwip_htons>
 801bd9e:	4603      	mov	r3, r0
 801bda0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801bda2:	69fb      	ldr	r3, [r7, #28]
 801bda4:	781b      	ldrb	r3, [r3, #0]
 801bda6:	f003 030f 	and.w	r3, r3, #15
 801bdaa:	b2db      	uxtb	r3, r3
 801bdac:	009b      	lsls	r3, r3, #2
 801bdae:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801bdb0:	7e7b      	ldrb	r3, [r7, #25]
 801bdb2:	b29b      	uxth	r3, r3
 801bdb4:	8b7a      	ldrh	r2, [r7, #26]
 801bdb6:	429a      	cmp	r2, r3
 801bdb8:	d202      	bcs.n	801bdc0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bdba:	f04f 33ff 	mov.w	r3, #4294967295
 801bdbe:	e135      	b.n	801c02c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801bdc0:	7e7b      	ldrb	r3, [r7, #25]
 801bdc2:	b29b      	uxth	r3, r3
 801bdc4:	8b7a      	ldrh	r2, [r7, #26]
 801bdc6:	1ad3      	subs	r3, r2, r3
 801bdc8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801bdca:	69fb      	ldr	r3, [r7, #28]
 801bdcc:	88db      	ldrh	r3, [r3, #6]
 801bdce:	b29b      	uxth	r3, r3
 801bdd0:	4618      	mov	r0, r3
 801bdd2:	f7f5 fe73 	bl	8011abc <lwip_htons>
 801bdd6:	4603      	mov	r3, r0
 801bdd8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bddc:	b29b      	uxth	r3, r3
 801bdde:	00db      	lsls	r3, r3, #3
 801bde0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801bde2:	68bb      	ldr	r3, [r7, #8]
 801bde4:	685b      	ldr	r3, [r3, #4]
 801bde6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801bde8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bdea:	2200      	movs	r2, #0
 801bdec:	701a      	strb	r2, [r3, #0]
 801bdee:	2200      	movs	r2, #0
 801bdf0:	705a      	strb	r2, [r3, #1]
 801bdf2:	2200      	movs	r2, #0
 801bdf4:	709a      	strb	r2, [r3, #2]
 801bdf6:	2200      	movs	r2, #0
 801bdf8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801bdfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bdfc:	8afa      	ldrh	r2, [r7, #22]
 801bdfe:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801be00:	8afa      	ldrh	r2, [r7, #22]
 801be02:	8b7b      	ldrh	r3, [r7, #26]
 801be04:	4413      	add	r3, r2
 801be06:	b29a      	uxth	r2, r3
 801be08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be0a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801be0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be0e:	88db      	ldrh	r3, [r3, #6]
 801be10:	b29b      	uxth	r3, r3
 801be12:	8afa      	ldrh	r2, [r7, #22]
 801be14:	429a      	cmp	r2, r3
 801be16:	d902      	bls.n	801be1e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801be18:	f04f 33ff 	mov.w	r3, #4294967295
 801be1c:	e106      	b.n	801c02c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801be1e:	68fb      	ldr	r3, [r7, #12]
 801be20:	685b      	ldr	r3, [r3, #4]
 801be22:	627b      	str	r3, [r7, #36]	; 0x24
 801be24:	e068      	b.n	801bef8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801be26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be28:	685b      	ldr	r3, [r3, #4]
 801be2a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801be2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be2e:	889b      	ldrh	r3, [r3, #4]
 801be30:	b29a      	uxth	r2, r3
 801be32:	693b      	ldr	r3, [r7, #16]
 801be34:	889b      	ldrh	r3, [r3, #4]
 801be36:	b29b      	uxth	r3, r3
 801be38:	429a      	cmp	r2, r3
 801be3a:	d235      	bcs.n	801bea8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801be3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801be40:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801be42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be44:	2b00      	cmp	r3, #0
 801be46:	d020      	beq.n	801be8a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801be48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be4a:	889b      	ldrh	r3, [r3, #4]
 801be4c:	b29a      	uxth	r2, r3
 801be4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be50:	88db      	ldrh	r3, [r3, #6]
 801be52:	b29b      	uxth	r3, r3
 801be54:	429a      	cmp	r2, r3
 801be56:	d307      	bcc.n	801be68 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801be58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be5a:	88db      	ldrh	r3, [r3, #6]
 801be5c:	b29a      	uxth	r2, r3
 801be5e:	693b      	ldr	r3, [r7, #16]
 801be60:	889b      	ldrh	r3, [r3, #4]
 801be62:	b29b      	uxth	r3, r3
 801be64:	429a      	cmp	r2, r3
 801be66:	d902      	bls.n	801be6e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801be68:	f04f 33ff 	mov.w	r3, #4294967295
 801be6c:	e0de      	b.n	801c02c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801be6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be70:	68ba      	ldr	r2, [r7, #8]
 801be72:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801be74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be76:	88db      	ldrh	r3, [r3, #6]
 801be78:	b29a      	uxth	r2, r3
 801be7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be7c:	889b      	ldrh	r3, [r3, #4]
 801be7e:	b29b      	uxth	r3, r3
 801be80:	429a      	cmp	r2, r3
 801be82:	d03d      	beq.n	801bf00 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801be84:	2300      	movs	r3, #0
 801be86:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801be88:	e03a      	b.n	801bf00 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801be8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be8c:	88db      	ldrh	r3, [r3, #6]
 801be8e:	b29a      	uxth	r2, r3
 801be90:	693b      	ldr	r3, [r7, #16]
 801be92:	889b      	ldrh	r3, [r3, #4]
 801be94:	b29b      	uxth	r3, r3
 801be96:	429a      	cmp	r2, r3
 801be98:	d902      	bls.n	801bea0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801be9a:	f04f 33ff 	mov.w	r3, #4294967295
 801be9e:	e0c5      	b.n	801c02c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801bea0:	68fb      	ldr	r3, [r7, #12]
 801bea2:	68ba      	ldr	r2, [r7, #8]
 801bea4:	605a      	str	r2, [r3, #4]
      break;
 801bea6:	e02b      	b.n	801bf00 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801bea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801beaa:	889b      	ldrh	r3, [r3, #4]
 801beac:	b29a      	uxth	r2, r3
 801beae:	693b      	ldr	r3, [r7, #16]
 801beb0:	889b      	ldrh	r3, [r3, #4]
 801beb2:	b29b      	uxth	r3, r3
 801beb4:	429a      	cmp	r2, r3
 801beb6:	d102      	bne.n	801bebe <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801beb8:	f04f 33ff 	mov.w	r3, #4294967295
 801bebc:	e0b6      	b.n	801c02c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801bebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bec0:	889b      	ldrh	r3, [r3, #4]
 801bec2:	b29a      	uxth	r2, r3
 801bec4:	693b      	ldr	r3, [r7, #16]
 801bec6:	88db      	ldrh	r3, [r3, #6]
 801bec8:	b29b      	uxth	r3, r3
 801beca:	429a      	cmp	r2, r3
 801becc:	d202      	bcs.n	801bed4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bece:	f04f 33ff 	mov.w	r3, #4294967295
 801bed2:	e0ab      	b.n	801c02c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801bed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bed6:	2b00      	cmp	r3, #0
 801bed8:	d009      	beq.n	801beee <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801beda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bedc:	88db      	ldrh	r3, [r3, #6]
 801bede:	b29a      	uxth	r2, r3
 801bee0:	693b      	ldr	r3, [r7, #16]
 801bee2:	889b      	ldrh	r3, [r3, #4]
 801bee4:	b29b      	uxth	r3, r3
 801bee6:	429a      	cmp	r2, r3
 801bee8:	d001      	beq.n	801beee <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801beea:	2300      	movs	r3, #0
 801beec:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801beee:	693b      	ldr	r3, [r7, #16]
 801bef0:	681b      	ldr	r3, [r3, #0]
 801bef2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801bef4:	693b      	ldr	r3, [r7, #16]
 801bef6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801bef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801befa:	2b00      	cmp	r3, #0
 801befc:	d193      	bne.n	801be26 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801befe:	e000      	b.n	801bf02 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801bf00:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801bf02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf04:	2b00      	cmp	r3, #0
 801bf06:	d12d      	bne.n	801bf64 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801bf08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf0a:	2b00      	cmp	r3, #0
 801bf0c:	d01c      	beq.n	801bf48 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801bf0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf10:	88db      	ldrh	r3, [r3, #6]
 801bf12:	b29a      	uxth	r2, r3
 801bf14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf16:	889b      	ldrh	r3, [r3, #4]
 801bf18:	b29b      	uxth	r3, r3
 801bf1a:	429a      	cmp	r2, r3
 801bf1c:	d906      	bls.n	801bf2c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801bf1e:	4b45      	ldr	r3, [pc, #276]	; (801c034 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bf20:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801bf24:	4944      	ldr	r1, [pc, #272]	; (801c038 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801bf26:	4845      	ldr	r0, [pc, #276]	; (801c03c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bf28:	f001 f8c4 	bl	801d0b4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801bf2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf2e:	68ba      	ldr	r2, [r7, #8]
 801bf30:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801bf32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf34:	88db      	ldrh	r3, [r3, #6]
 801bf36:	b29a      	uxth	r2, r3
 801bf38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf3a:	889b      	ldrh	r3, [r3, #4]
 801bf3c:	b29b      	uxth	r3, r3
 801bf3e:	429a      	cmp	r2, r3
 801bf40:	d010      	beq.n	801bf64 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801bf42:	2300      	movs	r3, #0
 801bf44:	623b      	str	r3, [r7, #32]
 801bf46:	e00d      	b.n	801bf64 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801bf48:	68fb      	ldr	r3, [r7, #12]
 801bf4a:	685b      	ldr	r3, [r3, #4]
 801bf4c:	2b00      	cmp	r3, #0
 801bf4e:	d006      	beq.n	801bf5e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801bf50:	4b38      	ldr	r3, [pc, #224]	; (801c034 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bf52:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801bf56:	493a      	ldr	r1, [pc, #232]	; (801c040 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801bf58:	4838      	ldr	r0, [pc, #224]	; (801c03c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bf5a:	f001 f8ab 	bl	801d0b4 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801bf5e:	68fb      	ldr	r3, [r7, #12]
 801bf60:	68ba      	ldr	r2, [r7, #8]
 801bf62:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801bf64:	687b      	ldr	r3, [r7, #4]
 801bf66:	2b00      	cmp	r3, #0
 801bf68:	d105      	bne.n	801bf76 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801bf6a:	68fb      	ldr	r3, [r7, #12]
 801bf6c:	7f9b      	ldrb	r3, [r3, #30]
 801bf6e:	f003 0301 	and.w	r3, r3, #1
 801bf72:	2b00      	cmp	r3, #0
 801bf74:	d059      	beq.n	801c02a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801bf76:	6a3b      	ldr	r3, [r7, #32]
 801bf78:	2b00      	cmp	r3, #0
 801bf7a:	d04f      	beq.n	801c01c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801bf7c:	68fb      	ldr	r3, [r7, #12]
 801bf7e:	685b      	ldr	r3, [r3, #4]
 801bf80:	2b00      	cmp	r3, #0
 801bf82:	d006      	beq.n	801bf92 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801bf84:	68fb      	ldr	r3, [r7, #12]
 801bf86:	685b      	ldr	r3, [r3, #4]
 801bf88:	685b      	ldr	r3, [r3, #4]
 801bf8a:	889b      	ldrh	r3, [r3, #4]
 801bf8c:	b29b      	uxth	r3, r3
 801bf8e:	2b00      	cmp	r3, #0
 801bf90:	d002      	beq.n	801bf98 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801bf92:	2300      	movs	r3, #0
 801bf94:	623b      	str	r3, [r7, #32]
 801bf96:	e041      	b.n	801c01c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801bf98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf9a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801bf9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf9e:	681b      	ldr	r3, [r3, #0]
 801bfa0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801bfa2:	e012      	b.n	801bfca <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801bfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bfa6:	685b      	ldr	r3, [r3, #4]
 801bfa8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801bfaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bfac:	88db      	ldrh	r3, [r3, #6]
 801bfae:	b29a      	uxth	r2, r3
 801bfb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfb2:	889b      	ldrh	r3, [r3, #4]
 801bfb4:	b29b      	uxth	r3, r3
 801bfb6:	429a      	cmp	r2, r3
 801bfb8:	d002      	beq.n	801bfc0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801bfba:	2300      	movs	r3, #0
 801bfbc:	623b      	str	r3, [r7, #32]
            break;
 801bfbe:	e007      	b.n	801bfd0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801bfc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfc2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801bfc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfc6:	681b      	ldr	r3, [r3, #0]
 801bfc8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801bfca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bfcc:	2b00      	cmp	r3, #0
 801bfce:	d1e9      	bne.n	801bfa4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801bfd0:	6a3b      	ldr	r3, [r7, #32]
 801bfd2:	2b00      	cmp	r3, #0
 801bfd4:	d022      	beq.n	801c01c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801bfd6:	68fb      	ldr	r3, [r7, #12]
 801bfd8:	685b      	ldr	r3, [r3, #4]
 801bfda:	2b00      	cmp	r3, #0
 801bfdc:	d106      	bne.n	801bfec <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801bfde:	4b15      	ldr	r3, [pc, #84]	; (801c034 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bfe0:	f240 12df 	movw	r2, #479	; 0x1df
 801bfe4:	4917      	ldr	r1, [pc, #92]	; (801c044 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801bfe6:	4815      	ldr	r0, [pc, #84]	; (801c03c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bfe8:	f001 f864 	bl	801d0b4 <iprintf>
          LWIP_ASSERT("sanity check",
 801bfec:	68fb      	ldr	r3, [r7, #12]
 801bfee:	685b      	ldr	r3, [r3, #4]
 801bff0:	685b      	ldr	r3, [r3, #4]
 801bff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bff4:	429a      	cmp	r2, r3
 801bff6:	d106      	bne.n	801c006 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801bff8:	4b0e      	ldr	r3, [pc, #56]	; (801c034 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bffa:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801bffe:	4911      	ldr	r1, [pc, #68]	; (801c044 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801c000:	480e      	ldr	r0, [pc, #56]	; (801c03c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c002:	f001 f857 	bl	801d0b4 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801c006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c008:	681b      	ldr	r3, [r3, #0]
 801c00a:	2b00      	cmp	r3, #0
 801c00c:	d006      	beq.n	801c01c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801c00e:	4b09      	ldr	r3, [pc, #36]	; (801c034 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801c010:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801c014:	490c      	ldr	r1, [pc, #48]	; (801c048 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801c016:	4809      	ldr	r0, [pc, #36]	; (801c03c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801c018:	f001 f84c 	bl	801d0b4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801c01c:	6a3b      	ldr	r3, [r7, #32]
 801c01e:	2b00      	cmp	r3, #0
 801c020:	bf14      	ite	ne
 801c022:	2301      	movne	r3, #1
 801c024:	2300      	moveq	r3, #0
 801c026:	b2db      	uxtb	r3, r3
 801c028:	e000      	b.n	801c02c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801c02a:	2300      	movs	r3, #0
}
 801c02c:	4618      	mov	r0, r3
 801c02e:	3730      	adds	r7, #48	; 0x30
 801c030:	46bd      	mov	sp, r7
 801c032:	bd80      	pop	{r7, pc}
 801c034:	0802190c 	.word	0x0802190c
 801c038:	080219f0 	.word	0x080219f0
 801c03c:	08021954 	.word	0x08021954
 801c040:	08021a10 	.word	0x08021a10
 801c044:	08021a48 	.word	0x08021a48
 801c048:	08021a58 	.word	0x08021a58

0801c04c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801c04c:	b580      	push	{r7, lr}
 801c04e:	b08e      	sub	sp, #56	; 0x38
 801c050:	af00      	add	r7, sp, #0
 801c052:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801c054:	687b      	ldr	r3, [r7, #4]
 801c056:	685b      	ldr	r3, [r3, #4]
 801c058:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801c05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c05c:	781b      	ldrb	r3, [r3, #0]
 801c05e:	f003 030f 	and.w	r3, r3, #15
 801c062:	b2db      	uxtb	r3, r3
 801c064:	009b      	lsls	r3, r3, #2
 801c066:	b2db      	uxtb	r3, r3
 801c068:	2b14      	cmp	r3, #20
 801c06a:	f040 8171 	bne.w	801c350 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801c06e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c070:	88db      	ldrh	r3, [r3, #6]
 801c072:	b29b      	uxth	r3, r3
 801c074:	4618      	mov	r0, r3
 801c076:	f7f5 fd21 	bl	8011abc <lwip_htons>
 801c07a:	4603      	mov	r3, r0
 801c07c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c080:	b29b      	uxth	r3, r3
 801c082:	00db      	lsls	r3, r3, #3
 801c084:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801c086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c088:	885b      	ldrh	r3, [r3, #2]
 801c08a:	b29b      	uxth	r3, r3
 801c08c:	4618      	mov	r0, r3
 801c08e:	f7f5 fd15 	bl	8011abc <lwip_htons>
 801c092:	4603      	mov	r3, r0
 801c094:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801c096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c098:	781b      	ldrb	r3, [r3, #0]
 801c09a:	f003 030f 	and.w	r3, r3, #15
 801c09e:	b2db      	uxtb	r3, r3
 801c0a0:	009b      	lsls	r3, r3, #2
 801c0a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801c0a6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801c0aa:	b29b      	uxth	r3, r3
 801c0ac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801c0ae:	429a      	cmp	r2, r3
 801c0b0:	f0c0 8150 	bcc.w	801c354 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801c0b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801c0b8:	b29b      	uxth	r3, r3
 801c0ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801c0bc:	1ad3      	subs	r3, r2, r3
 801c0be:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801c0c0:	6878      	ldr	r0, [r7, #4]
 801c0c2:	f7f7 f8d1 	bl	8013268 <pbuf_clen>
 801c0c6:	4603      	mov	r3, r0
 801c0c8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801c0ca:	4b8c      	ldr	r3, [pc, #560]	; (801c2fc <ip4_reass+0x2b0>)
 801c0cc:	881b      	ldrh	r3, [r3, #0]
 801c0ce:	461a      	mov	r2, r3
 801c0d0:	8c3b      	ldrh	r3, [r7, #32]
 801c0d2:	4413      	add	r3, r2
 801c0d4:	2b0a      	cmp	r3, #10
 801c0d6:	dd10      	ble.n	801c0fa <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801c0d8:	8c3b      	ldrh	r3, [r7, #32]
 801c0da:	4619      	mov	r1, r3
 801c0dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c0de:	f7ff fd81 	bl	801bbe4 <ip_reass_remove_oldest_datagram>
 801c0e2:	4603      	mov	r3, r0
 801c0e4:	2b00      	cmp	r3, #0
 801c0e6:	f000 8137 	beq.w	801c358 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801c0ea:	4b84      	ldr	r3, [pc, #528]	; (801c2fc <ip4_reass+0x2b0>)
 801c0ec:	881b      	ldrh	r3, [r3, #0]
 801c0ee:	461a      	mov	r2, r3
 801c0f0:	8c3b      	ldrh	r3, [r7, #32]
 801c0f2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801c0f4:	2b0a      	cmp	r3, #10
 801c0f6:	f300 812f 	bgt.w	801c358 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c0fa:	4b81      	ldr	r3, [pc, #516]	; (801c300 <ip4_reass+0x2b4>)
 801c0fc:	681b      	ldr	r3, [r3, #0]
 801c0fe:	633b      	str	r3, [r7, #48]	; 0x30
 801c100:	e015      	b.n	801c12e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801c102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c104:	695a      	ldr	r2, [r3, #20]
 801c106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c108:	68db      	ldr	r3, [r3, #12]
 801c10a:	429a      	cmp	r2, r3
 801c10c:	d10c      	bne.n	801c128 <ip4_reass+0xdc>
 801c10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c110:	699a      	ldr	r2, [r3, #24]
 801c112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c114:	691b      	ldr	r3, [r3, #16]
 801c116:	429a      	cmp	r2, r3
 801c118:	d106      	bne.n	801c128 <ip4_reass+0xdc>
 801c11a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c11c:	899a      	ldrh	r2, [r3, #12]
 801c11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c120:	889b      	ldrh	r3, [r3, #4]
 801c122:	b29b      	uxth	r3, r3
 801c124:	429a      	cmp	r2, r3
 801c126:	d006      	beq.n	801c136 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801c128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c12a:	681b      	ldr	r3, [r3, #0]
 801c12c:	633b      	str	r3, [r7, #48]	; 0x30
 801c12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c130:	2b00      	cmp	r3, #0
 801c132:	d1e6      	bne.n	801c102 <ip4_reass+0xb6>
 801c134:	e000      	b.n	801c138 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801c136:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801c138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c13a:	2b00      	cmp	r3, #0
 801c13c:	d109      	bne.n	801c152 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801c13e:	8c3b      	ldrh	r3, [r7, #32]
 801c140:	4619      	mov	r1, r3
 801c142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c144:	f7ff fdb0 	bl	801bca8 <ip_reass_enqueue_new_datagram>
 801c148:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801c14a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c14c:	2b00      	cmp	r3, #0
 801c14e:	d11c      	bne.n	801c18a <ip4_reass+0x13e>
      goto nullreturn;
 801c150:	e105      	b.n	801c35e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c154:	88db      	ldrh	r3, [r3, #6]
 801c156:	b29b      	uxth	r3, r3
 801c158:	4618      	mov	r0, r3
 801c15a:	f7f5 fcaf 	bl	8011abc <lwip_htons>
 801c15e:	4603      	mov	r3, r0
 801c160:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c164:	2b00      	cmp	r3, #0
 801c166:	d110      	bne.n	801c18a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801c168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c16a:	89db      	ldrh	r3, [r3, #14]
 801c16c:	4618      	mov	r0, r3
 801c16e:	f7f5 fca5 	bl	8011abc <lwip_htons>
 801c172:	4603      	mov	r3, r0
 801c174:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801c178:	2b00      	cmp	r3, #0
 801c17a:	d006      	beq.n	801c18a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801c17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c17e:	3308      	adds	r3, #8
 801c180:	2214      	movs	r2, #20
 801c182:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c184:	4618      	mov	r0, r3
 801c186:	f000 fe85 	bl	801ce94 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801c18a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c18c:	88db      	ldrh	r3, [r3, #6]
 801c18e:	b29b      	uxth	r3, r3
 801c190:	f003 0320 	and.w	r3, r3, #32
 801c194:	2b00      	cmp	r3, #0
 801c196:	bf0c      	ite	eq
 801c198:	2301      	moveq	r3, #1
 801c19a:	2300      	movne	r3, #0
 801c19c:	b2db      	uxtb	r3, r3
 801c19e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801c1a0:	69fb      	ldr	r3, [r7, #28]
 801c1a2:	2b00      	cmp	r3, #0
 801c1a4:	d00e      	beq.n	801c1c4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801c1a6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801c1a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c1aa:	4413      	add	r3, r2
 801c1ac:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801c1ae:	8b7a      	ldrh	r2, [r7, #26]
 801c1b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801c1b2:	429a      	cmp	r2, r3
 801c1b4:	f0c0 80a0 	bcc.w	801c2f8 <ip4_reass+0x2ac>
 801c1b8:	8b7b      	ldrh	r3, [r7, #26]
 801c1ba:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801c1be:	4293      	cmp	r3, r2
 801c1c0:	f200 809a 	bhi.w	801c2f8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801c1c4:	69fa      	ldr	r2, [r7, #28]
 801c1c6:	6879      	ldr	r1, [r7, #4]
 801c1c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c1ca:	f7ff fdd5 	bl	801bd78 <ip_reass_chain_frag_into_datagram_and_validate>
 801c1ce:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801c1d0:	697b      	ldr	r3, [r7, #20]
 801c1d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c1d6:	f000 809b 	beq.w	801c310 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801c1da:	4b48      	ldr	r3, [pc, #288]	; (801c2fc <ip4_reass+0x2b0>)
 801c1dc:	881a      	ldrh	r2, [r3, #0]
 801c1de:	8c3b      	ldrh	r3, [r7, #32]
 801c1e0:	4413      	add	r3, r2
 801c1e2:	b29a      	uxth	r2, r3
 801c1e4:	4b45      	ldr	r3, [pc, #276]	; (801c2fc <ip4_reass+0x2b0>)
 801c1e6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801c1e8:	69fb      	ldr	r3, [r7, #28]
 801c1ea:	2b00      	cmp	r3, #0
 801c1ec:	d00d      	beq.n	801c20a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801c1ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801c1f0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c1f2:	4413      	add	r3, r2
 801c1f4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801c1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c1f8:	8a7a      	ldrh	r2, [r7, #18]
 801c1fa:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801c1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c1fe:	7f9b      	ldrb	r3, [r3, #30]
 801c200:	f043 0301 	orr.w	r3, r3, #1
 801c204:	b2da      	uxtb	r2, r3
 801c206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c208:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801c20a:	697b      	ldr	r3, [r7, #20]
 801c20c:	2b01      	cmp	r3, #1
 801c20e:	d171      	bne.n	801c2f4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801c210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c212:	8b9b      	ldrh	r3, [r3, #28]
 801c214:	3314      	adds	r3, #20
 801c216:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801c218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c21a:	685b      	ldr	r3, [r3, #4]
 801c21c:	685b      	ldr	r3, [r3, #4]
 801c21e:	681b      	ldr	r3, [r3, #0]
 801c220:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801c222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c224:	685b      	ldr	r3, [r3, #4]
 801c226:	685b      	ldr	r3, [r3, #4]
 801c228:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801c22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c22c:	3308      	adds	r3, #8
 801c22e:	2214      	movs	r2, #20
 801c230:	4619      	mov	r1, r3
 801c232:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c234:	f000 fe2e 	bl	801ce94 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801c238:	8a3b      	ldrh	r3, [r7, #16]
 801c23a:	4618      	mov	r0, r3
 801c23c:	f7f5 fc3e 	bl	8011abc <lwip_htons>
 801c240:	4603      	mov	r3, r0
 801c242:	461a      	mov	r2, r3
 801c244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c246:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801c248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c24a:	2200      	movs	r2, #0
 801c24c:	719a      	strb	r2, [r3, #6]
 801c24e:	2200      	movs	r2, #0
 801c250:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801c252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c254:	2200      	movs	r2, #0
 801c256:	729a      	strb	r2, [r3, #10]
 801c258:	2200      	movs	r2, #0
 801c25a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801c25c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c25e:	685b      	ldr	r3, [r3, #4]
 801c260:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801c262:	e00d      	b.n	801c280 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801c264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c266:	685b      	ldr	r3, [r3, #4]
 801c268:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801c26a:	2114      	movs	r1, #20
 801c26c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801c26e:	f7f6 fee7 	bl	8013040 <pbuf_remove_header>
      pbuf_cat(p, r);
 801c272:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801c274:	6878      	ldr	r0, [r7, #4]
 801c276:	f7f7 f837 	bl	80132e8 <pbuf_cat>
      r = iprh->next_pbuf;
 801c27a:	68fb      	ldr	r3, [r7, #12]
 801c27c:	681b      	ldr	r3, [r3, #0]
 801c27e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801c280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c282:	2b00      	cmp	r3, #0
 801c284:	d1ee      	bne.n	801c264 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801c286:	4b1e      	ldr	r3, [pc, #120]	; (801c300 <ip4_reass+0x2b4>)
 801c288:	681b      	ldr	r3, [r3, #0]
 801c28a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c28c:	429a      	cmp	r2, r3
 801c28e:	d102      	bne.n	801c296 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801c290:	2300      	movs	r3, #0
 801c292:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c294:	e010      	b.n	801c2b8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c296:	4b1a      	ldr	r3, [pc, #104]	; (801c300 <ip4_reass+0x2b4>)
 801c298:	681b      	ldr	r3, [r3, #0]
 801c29a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c29c:	e007      	b.n	801c2ae <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801c29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c2a0:	681b      	ldr	r3, [r3, #0]
 801c2a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c2a4:	429a      	cmp	r2, r3
 801c2a6:	d006      	beq.n	801c2b6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c2a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c2aa:	681b      	ldr	r3, [r3, #0]
 801c2ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c2ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c2b0:	2b00      	cmp	r3, #0
 801c2b2:	d1f4      	bne.n	801c29e <ip4_reass+0x252>
 801c2b4:	e000      	b.n	801c2b8 <ip4_reass+0x26c>
          break;
 801c2b6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801c2b8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c2ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c2bc:	f7ff fd2e 	bl	801bd1c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801c2c0:	6878      	ldr	r0, [r7, #4]
 801c2c2:	f7f6 ffd1 	bl	8013268 <pbuf_clen>
 801c2c6:	4603      	mov	r3, r0
 801c2c8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801c2ca:	4b0c      	ldr	r3, [pc, #48]	; (801c2fc <ip4_reass+0x2b0>)
 801c2cc:	881b      	ldrh	r3, [r3, #0]
 801c2ce:	8c3a      	ldrh	r2, [r7, #32]
 801c2d0:	429a      	cmp	r2, r3
 801c2d2:	d906      	bls.n	801c2e2 <ip4_reass+0x296>
 801c2d4:	4b0b      	ldr	r3, [pc, #44]	; (801c304 <ip4_reass+0x2b8>)
 801c2d6:	f240 229b 	movw	r2, #667	; 0x29b
 801c2da:	490b      	ldr	r1, [pc, #44]	; (801c308 <ip4_reass+0x2bc>)
 801c2dc:	480b      	ldr	r0, [pc, #44]	; (801c30c <ip4_reass+0x2c0>)
 801c2de:	f000 fee9 	bl	801d0b4 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801c2e2:	4b06      	ldr	r3, [pc, #24]	; (801c2fc <ip4_reass+0x2b0>)
 801c2e4:	881a      	ldrh	r2, [r3, #0]
 801c2e6:	8c3b      	ldrh	r3, [r7, #32]
 801c2e8:	1ad3      	subs	r3, r2, r3
 801c2ea:	b29a      	uxth	r2, r3
 801c2ec:	4b03      	ldr	r3, [pc, #12]	; (801c2fc <ip4_reass+0x2b0>)
 801c2ee:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801c2f0:	687b      	ldr	r3, [r7, #4]
 801c2f2:	e038      	b.n	801c366 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801c2f4:	2300      	movs	r3, #0
 801c2f6:	e036      	b.n	801c366 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801c2f8:	bf00      	nop
 801c2fa:	e00a      	b.n	801c312 <ip4_reass+0x2c6>
 801c2fc:	2000df14 	.word	0x2000df14
 801c300:	2000df10 	.word	0x2000df10
 801c304:	0802190c 	.word	0x0802190c
 801c308:	08021a7c 	.word	0x08021a7c
 801c30c:	08021954 	.word	0x08021954
    goto nullreturn_ipr;
 801c310:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801c312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c314:	2b00      	cmp	r3, #0
 801c316:	d106      	bne.n	801c326 <ip4_reass+0x2da>
 801c318:	4b15      	ldr	r3, [pc, #84]	; (801c370 <ip4_reass+0x324>)
 801c31a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801c31e:	4915      	ldr	r1, [pc, #84]	; (801c374 <ip4_reass+0x328>)
 801c320:	4815      	ldr	r0, [pc, #84]	; (801c378 <ip4_reass+0x32c>)
 801c322:	f000 fec7 	bl	801d0b4 <iprintf>
  if (ipr->p == NULL) {
 801c326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c328:	685b      	ldr	r3, [r3, #4]
 801c32a:	2b00      	cmp	r3, #0
 801c32c:	d116      	bne.n	801c35c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801c32e:	4b13      	ldr	r3, [pc, #76]	; (801c37c <ip4_reass+0x330>)
 801c330:	681b      	ldr	r3, [r3, #0]
 801c332:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c334:	429a      	cmp	r2, r3
 801c336:	d006      	beq.n	801c346 <ip4_reass+0x2fa>
 801c338:	4b0d      	ldr	r3, [pc, #52]	; (801c370 <ip4_reass+0x324>)
 801c33a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801c33e:	4910      	ldr	r1, [pc, #64]	; (801c380 <ip4_reass+0x334>)
 801c340:	480d      	ldr	r0, [pc, #52]	; (801c378 <ip4_reass+0x32c>)
 801c342:	f000 feb7 	bl	801d0b4 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801c346:	2100      	movs	r1, #0
 801c348:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c34a:	f7ff fce7 	bl	801bd1c <ip_reass_dequeue_datagram>
 801c34e:	e006      	b.n	801c35e <ip4_reass+0x312>
    goto nullreturn;
 801c350:	bf00      	nop
 801c352:	e004      	b.n	801c35e <ip4_reass+0x312>
    goto nullreturn;
 801c354:	bf00      	nop
 801c356:	e002      	b.n	801c35e <ip4_reass+0x312>
      goto nullreturn;
 801c358:	bf00      	nop
 801c35a:	e000      	b.n	801c35e <ip4_reass+0x312>
  }

nullreturn:
 801c35c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801c35e:	6878      	ldr	r0, [r7, #4]
 801c360:	f7f6 fef4 	bl	801314c <pbuf_free>
  return NULL;
 801c364:	2300      	movs	r3, #0
}
 801c366:	4618      	mov	r0, r3
 801c368:	3738      	adds	r7, #56	; 0x38
 801c36a:	46bd      	mov	sp, r7
 801c36c:	bd80      	pop	{r7, pc}
 801c36e:	bf00      	nop
 801c370:	0802190c 	.word	0x0802190c
 801c374:	08021a98 	.word	0x08021a98
 801c378:	08021954 	.word	0x08021954
 801c37c:	2000df10 	.word	0x2000df10
 801c380:	08021aa4 	.word	0x08021aa4

0801c384 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801c384:	b580      	push	{r7, lr}
 801c386:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801c388:	2005      	movs	r0, #5
 801c38a:	f7f6 f84d 	bl	8012428 <memp_malloc>
 801c38e:	4603      	mov	r3, r0
}
 801c390:	4618      	mov	r0, r3
 801c392:	bd80      	pop	{r7, pc}

0801c394 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801c394:	b580      	push	{r7, lr}
 801c396:	b082      	sub	sp, #8
 801c398:	af00      	add	r7, sp, #0
 801c39a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801c39c:	687b      	ldr	r3, [r7, #4]
 801c39e:	2b00      	cmp	r3, #0
 801c3a0:	d106      	bne.n	801c3b0 <ip_frag_free_pbuf_custom_ref+0x1c>
 801c3a2:	4b07      	ldr	r3, [pc, #28]	; (801c3c0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801c3a4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801c3a8:	4906      	ldr	r1, [pc, #24]	; (801c3c4 <ip_frag_free_pbuf_custom_ref+0x30>)
 801c3aa:	4807      	ldr	r0, [pc, #28]	; (801c3c8 <ip_frag_free_pbuf_custom_ref+0x34>)
 801c3ac:	f000 fe82 	bl	801d0b4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801c3b0:	6879      	ldr	r1, [r7, #4]
 801c3b2:	2005      	movs	r0, #5
 801c3b4:	f7f6 f88a 	bl	80124cc <memp_free>
}
 801c3b8:	bf00      	nop
 801c3ba:	3708      	adds	r7, #8
 801c3bc:	46bd      	mov	sp, r7
 801c3be:	bd80      	pop	{r7, pc}
 801c3c0:	0802190c 	.word	0x0802190c
 801c3c4:	08021ac4 	.word	0x08021ac4
 801c3c8:	08021954 	.word	0x08021954

0801c3cc <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801c3cc:	b580      	push	{r7, lr}
 801c3ce:	b084      	sub	sp, #16
 801c3d0:	af00      	add	r7, sp, #0
 801c3d2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801c3d4:	687b      	ldr	r3, [r7, #4]
 801c3d6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801c3d8:	68fb      	ldr	r3, [r7, #12]
 801c3da:	2b00      	cmp	r3, #0
 801c3dc:	d106      	bne.n	801c3ec <ipfrag_free_pbuf_custom+0x20>
 801c3de:	4b11      	ldr	r3, [pc, #68]	; (801c424 <ipfrag_free_pbuf_custom+0x58>)
 801c3e0:	f240 22ce 	movw	r2, #718	; 0x2ce
 801c3e4:	4910      	ldr	r1, [pc, #64]	; (801c428 <ipfrag_free_pbuf_custom+0x5c>)
 801c3e6:	4811      	ldr	r0, [pc, #68]	; (801c42c <ipfrag_free_pbuf_custom+0x60>)
 801c3e8:	f000 fe64 	bl	801d0b4 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801c3ec:	68fa      	ldr	r2, [r7, #12]
 801c3ee:	687b      	ldr	r3, [r7, #4]
 801c3f0:	429a      	cmp	r2, r3
 801c3f2:	d006      	beq.n	801c402 <ipfrag_free_pbuf_custom+0x36>
 801c3f4:	4b0b      	ldr	r3, [pc, #44]	; (801c424 <ipfrag_free_pbuf_custom+0x58>)
 801c3f6:	f240 22cf 	movw	r2, #719	; 0x2cf
 801c3fa:	490d      	ldr	r1, [pc, #52]	; (801c430 <ipfrag_free_pbuf_custom+0x64>)
 801c3fc:	480b      	ldr	r0, [pc, #44]	; (801c42c <ipfrag_free_pbuf_custom+0x60>)
 801c3fe:	f000 fe59 	bl	801d0b4 <iprintf>
  if (pcr->original != NULL) {
 801c402:	68fb      	ldr	r3, [r7, #12]
 801c404:	695b      	ldr	r3, [r3, #20]
 801c406:	2b00      	cmp	r3, #0
 801c408:	d004      	beq.n	801c414 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801c40a:	68fb      	ldr	r3, [r7, #12]
 801c40c:	695b      	ldr	r3, [r3, #20]
 801c40e:	4618      	mov	r0, r3
 801c410:	f7f6 fe9c 	bl	801314c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801c414:	68f8      	ldr	r0, [r7, #12]
 801c416:	f7ff ffbd 	bl	801c394 <ip_frag_free_pbuf_custom_ref>
}
 801c41a:	bf00      	nop
 801c41c:	3710      	adds	r7, #16
 801c41e:	46bd      	mov	sp, r7
 801c420:	bd80      	pop	{r7, pc}
 801c422:	bf00      	nop
 801c424:	0802190c 	.word	0x0802190c
 801c428:	08021ad0 	.word	0x08021ad0
 801c42c:	08021954 	.word	0x08021954
 801c430:	08021adc 	.word	0x08021adc

0801c434 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801c434:	b580      	push	{r7, lr}
 801c436:	b094      	sub	sp, #80	; 0x50
 801c438:	af02      	add	r7, sp, #8
 801c43a:	60f8      	str	r0, [r7, #12]
 801c43c:	60b9      	str	r1, [r7, #8]
 801c43e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801c440:	2300      	movs	r3, #0
 801c442:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801c446:	68bb      	ldr	r3, [r7, #8]
 801c448:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801c44a:	3b14      	subs	r3, #20
 801c44c:	2b00      	cmp	r3, #0
 801c44e:	da00      	bge.n	801c452 <ip4_frag+0x1e>
 801c450:	3307      	adds	r3, #7
 801c452:	10db      	asrs	r3, r3, #3
 801c454:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801c456:	2314      	movs	r3, #20
 801c458:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801c45a:	68fb      	ldr	r3, [r7, #12]
 801c45c:	685b      	ldr	r3, [r3, #4]
 801c45e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801c460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c462:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801c464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c466:	781b      	ldrb	r3, [r3, #0]
 801c468:	f003 030f 	and.w	r3, r3, #15
 801c46c:	b2db      	uxtb	r3, r3
 801c46e:	009b      	lsls	r3, r3, #2
 801c470:	b2db      	uxtb	r3, r3
 801c472:	2b14      	cmp	r3, #20
 801c474:	d002      	beq.n	801c47c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801c476:	f06f 0305 	mvn.w	r3, #5
 801c47a:	e110      	b.n	801c69e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801c47c:	68fb      	ldr	r3, [r7, #12]
 801c47e:	895b      	ldrh	r3, [r3, #10]
 801c480:	2b13      	cmp	r3, #19
 801c482:	d809      	bhi.n	801c498 <ip4_frag+0x64>
 801c484:	4b88      	ldr	r3, [pc, #544]	; (801c6a8 <ip4_frag+0x274>)
 801c486:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801c48a:	4988      	ldr	r1, [pc, #544]	; (801c6ac <ip4_frag+0x278>)
 801c48c:	4888      	ldr	r0, [pc, #544]	; (801c6b0 <ip4_frag+0x27c>)
 801c48e:	f000 fe11 	bl	801d0b4 <iprintf>
 801c492:	f06f 0305 	mvn.w	r3, #5
 801c496:	e102      	b.n	801c69e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801c498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c49a:	88db      	ldrh	r3, [r3, #6]
 801c49c:	b29b      	uxth	r3, r3
 801c49e:	4618      	mov	r0, r3
 801c4a0:	f7f5 fb0c 	bl	8011abc <lwip_htons>
 801c4a4:	4603      	mov	r3, r0
 801c4a6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801c4a8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c4aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c4ae:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801c4b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c4b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801c4b8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801c4ba:	68fb      	ldr	r3, [r7, #12]
 801c4bc:	891b      	ldrh	r3, [r3, #8]
 801c4be:	3b14      	subs	r3, #20
 801c4c0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801c4c4:	e0e1      	b.n	801c68a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801c4c6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c4c8:	00db      	lsls	r3, r3, #3
 801c4ca:	b29b      	uxth	r3, r3
 801c4cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c4d0:	4293      	cmp	r3, r2
 801c4d2:	bf28      	it	cs
 801c4d4:	4613      	movcs	r3, r2
 801c4d6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801c4d8:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c4dc:	2114      	movs	r1, #20
 801c4de:	200e      	movs	r0, #14
 801c4e0:	f7f6 fb50 	bl	8012b84 <pbuf_alloc>
 801c4e4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801c4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4e8:	2b00      	cmp	r3, #0
 801c4ea:	f000 80d5 	beq.w	801c698 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801c4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c4f0:	895b      	ldrh	r3, [r3, #10]
 801c4f2:	2b13      	cmp	r3, #19
 801c4f4:	d806      	bhi.n	801c504 <ip4_frag+0xd0>
 801c4f6:	4b6c      	ldr	r3, [pc, #432]	; (801c6a8 <ip4_frag+0x274>)
 801c4f8:	f44f 7249 	mov.w	r2, #804	; 0x324
 801c4fc:	496d      	ldr	r1, [pc, #436]	; (801c6b4 <ip4_frag+0x280>)
 801c4fe:	486c      	ldr	r0, [pc, #432]	; (801c6b0 <ip4_frag+0x27c>)
 801c500:	f000 fdd8 	bl	801d0b4 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801c504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c506:	685b      	ldr	r3, [r3, #4]
 801c508:	2214      	movs	r2, #20
 801c50a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801c50c:	4618      	mov	r0, r3
 801c50e:	f000 fcc1 	bl	801ce94 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801c512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c514:	685b      	ldr	r3, [r3, #4]
 801c516:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801c518:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801c51a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801c51e:	e064      	b.n	801c5ea <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801c520:	68fb      	ldr	r3, [r7, #12]
 801c522:	895a      	ldrh	r2, [r3, #10]
 801c524:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c526:	1ad3      	subs	r3, r2, r3
 801c528:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801c52a:	68fb      	ldr	r3, [r7, #12]
 801c52c:	895b      	ldrh	r3, [r3, #10]
 801c52e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801c530:	429a      	cmp	r2, r3
 801c532:	d906      	bls.n	801c542 <ip4_frag+0x10e>
 801c534:	4b5c      	ldr	r3, [pc, #368]	; (801c6a8 <ip4_frag+0x274>)
 801c536:	f240 322d 	movw	r2, #813	; 0x32d
 801c53a:	495f      	ldr	r1, [pc, #380]	; (801c6b8 <ip4_frag+0x284>)
 801c53c:	485c      	ldr	r0, [pc, #368]	; (801c6b0 <ip4_frag+0x27c>)
 801c53e:	f000 fdb9 	bl	801d0b4 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801c542:	8bfa      	ldrh	r2, [r7, #30]
 801c544:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801c548:	4293      	cmp	r3, r2
 801c54a:	bf28      	it	cs
 801c54c:	4613      	movcs	r3, r2
 801c54e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801c552:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801c556:	2b00      	cmp	r3, #0
 801c558:	d105      	bne.n	801c566 <ip4_frag+0x132>
        poff = 0;
 801c55a:	2300      	movs	r3, #0
 801c55c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801c55e:	68fb      	ldr	r3, [r7, #12]
 801c560:	681b      	ldr	r3, [r3, #0]
 801c562:	60fb      	str	r3, [r7, #12]
        continue;
 801c564:	e041      	b.n	801c5ea <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801c566:	f7ff ff0d 	bl	801c384 <ip_frag_alloc_pbuf_custom_ref>
 801c56a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801c56c:	69bb      	ldr	r3, [r7, #24]
 801c56e:	2b00      	cmp	r3, #0
 801c570:	d103      	bne.n	801c57a <ip4_frag+0x146>
        pbuf_free(rambuf);
 801c572:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c574:	f7f6 fdea 	bl	801314c <pbuf_free>
        goto memerr;
 801c578:	e08f      	b.n	801c69a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c57a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801c57c:	68fb      	ldr	r3, [r7, #12]
 801c57e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c580:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c582:	4413      	add	r3, r2
 801c584:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801c588:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801c58c:	9201      	str	r2, [sp, #4]
 801c58e:	9300      	str	r3, [sp, #0]
 801c590:	4603      	mov	r3, r0
 801c592:	2241      	movs	r2, #65	; 0x41
 801c594:	2000      	movs	r0, #0
 801c596:	f7f6 fc1f 	bl	8012dd8 <pbuf_alloced_custom>
 801c59a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801c59c:	697b      	ldr	r3, [r7, #20]
 801c59e:	2b00      	cmp	r3, #0
 801c5a0:	d106      	bne.n	801c5b0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801c5a2:	69b8      	ldr	r0, [r7, #24]
 801c5a4:	f7ff fef6 	bl	801c394 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801c5a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c5aa:	f7f6 fdcf 	bl	801314c <pbuf_free>
        goto memerr;
 801c5ae:	e074      	b.n	801c69a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801c5b0:	68f8      	ldr	r0, [r7, #12]
 801c5b2:	f7f6 fe71 	bl	8013298 <pbuf_ref>
      pcr->original = p;
 801c5b6:	69bb      	ldr	r3, [r7, #24]
 801c5b8:	68fa      	ldr	r2, [r7, #12]
 801c5ba:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801c5bc:	69bb      	ldr	r3, [r7, #24]
 801c5be:	4a3f      	ldr	r2, [pc, #252]	; (801c6bc <ip4_frag+0x288>)
 801c5c0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801c5c2:	6979      	ldr	r1, [r7, #20]
 801c5c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c5c6:	f7f6 fe8f 	bl	80132e8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801c5ca:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801c5ce:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801c5d2:	1ad3      	subs	r3, r2, r3
 801c5d4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801c5d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801c5dc:	2b00      	cmp	r3, #0
 801c5de:	d004      	beq.n	801c5ea <ip4_frag+0x1b6>
        poff = 0;
 801c5e0:	2300      	movs	r3, #0
 801c5e2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801c5e4:	68fb      	ldr	r3, [r7, #12]
 801c5e6:	681b      	ldr	r3, [r3, #0]
 801c5e8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801c5ea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801c5ee:	2b00      	cmp	r3, #0
 801c5f0:	d196      	bne.n	801c520 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801c5f2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801c5f4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801c5f8:	4413      	add	r3, r2
 801c5fa:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801c5fc:	68bb      	ldr	r3, [r7, #8]
 801c5fe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801c600:	f1a3 0213 	sub.w	r2, r3, #19
 801c604:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c608:	429a      	cmp	r2, r3
 801c60a:	bfcc      	ite	gt
 801c60c:	2301      	movgt	r3, #1
 801c60e:	2300      	movle	r3, #0
 801c610:	b2db      	uxtb	r3, r3
 801c612:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801c614:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801c618:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c61c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801c61e:	6a3b      	ldr	r3, [r7, #32]
 801c620:	2b00      	cmp	r3, #0
 801c622:	d002      	beq.n	801c62a <ip4_frag+0x1f6>
 801c624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c626:	2b00      	cmp	r3, #0
 801c628:	d003      	beq.n	801c632 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801c62a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c62c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801c630:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801c632:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c634:	4618      	mov	r0, r3
 801c636:	f7f5 fa41 	bl	8011abc <lwip_htons>
 801c63a:	4603      	mov	r3, r0
 801c63c:	461a      	mov	r2, r3
 801c63e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c640:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801c642:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801c644:	3314      	adds	r3, #20
 801c646:	b29b      	uxth	r3, r3
 801c648:	4618      	mov	r0, r3
 801c64a:	f7f5 fa37 	bl	8011abc <lwip_htons>
 801c64e:	4603      	mov	r3, r0
 801c650:	461a      	mov	r2, r3
 801c652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c654:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801c656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c658:	2200      	movs	r2, #0
 801c65a:	729a      	strb	r2, [r3, #10]
 801c65c:	2200      	movs	r2, #0
 801c65e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801c660:	68bb      	ldr	r3, [r7, #8]
 801c662:	695b      	ldr	r3, [r3, #20]
 801c664:	687a      	ldr	r2, [r7, #4]
 801c666:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c668:	68b8      	ldr	r0, [r7, #8]
 801c66a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801c66c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c66e:	f7f6 fd6d 	bl	801314c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801c672:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c676:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801c678:	1ad3      	subs	r3, r2, r3
 801c67a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801c67e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801c682:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c684:	4413      	add	r3, r2
 801c686:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801c68a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c68e:	2b00      	cmp	r3, #0
 801c690:	f47f af19 	bne.w	801c4c6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801c694:	2300      	movs	r3, #0
 801c696:	e002      	b.n	801c69e <ip4_frag+0x26a>
      goto memerr;
 801c698:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801c69a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801c69e:	4618      	mov	r0, r3
 801c6a0:	3748      	adds	r7, #72	; 0x48
 801c6a2:	46bd      	mov	sp, r7
 801c6a4:	bd80      	pop	{r7, pc}
 801c6a6:	bf00      	nop
 801c6a8:	0802190c 	.word	0x0802190c
 801c6ac:	08021ae8 	.word	0x08021ae8
 801c6b0:	08021954 	.word	0x08021954
 801c6b4:	08021b04 	.word	0x08021b04
 801c6b8:	08021b24 	.word	0x08021b24
 801c6bc:	0801c3cd 	.word	0x0801c3cd

0801c6c0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801c6c0:	b580      	push	{r7, lr}
 801c6c2:	b086      	sub	sp, #24
 801c6c4:	af00      	add	r7, sp, #0
 801c6c6:	6078      	str	r0, [r7, #4]
 801c6c8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801c6ca:	230e      	movs	r3, #14
 801c6cc:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801c6ce:	687b      	ldr	r3, [r7, #4]
 801c6d0:	895b      	ldrh	r3, [r3, #10]
 801c6d2:	2b0e      	cmp	r3, #14
 801c6d4:	d96e      	bls.n	801c7b4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801c6d6:	687b      	ldr	r3, [r7, #4]
 801c6d8:	7bdb      	ldrb	r3, [r3, #15]
 801c6da:	2b00      	cmp	r3, #0
 801c6dc:	d106      	bne.n	801c6ec <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801c6de:	683b      	ldr	r3, [r7, #0]
 801c6e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c6e4:	3301      	adds	r3, #1
 801c6e6:	b2da      	uxtb	r2, r3
 801c6e8:	687b      	ldr	r3, [r7, #4]
 801c6ea:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801c6ec:	687b      	ldr	r3, [r7, #4]
 801c6ee:	685b      	ldr	r3, [r3, #4]
 801c6f0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801c6f2:	693b      	ldr	r3, [r7, #16]
 801c6f4:	7b1a      	ldrb	r2, [r3, #12]
 801c6f6:	7b5b      	ldrb	r3, [r3, #13]
 801c6f8:	021b      	lsls	r3, r3, #8
 801c6fa:	4313      	orrs	r3, r2
 801c6fc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801c6fe:	693b      	ldr	r3, [r7, #16]
 801c700:	781b      	ldrb	r3, [r3, #0]
 801c702:	f003 0301 	and.w	r3, r3, #1
 801c706:	2b00      	cmp	r3, #0
 801c708:	d023      	beq.n	801c752 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801c70a:	693b      	ldr	r3, [r7, #16]
 801c70c:	781b      	ldrb	r3, [r3, #0]
 801c70e:	2b01      	cmp	r3, #1
 801c710:	d10f      	bne.n	801c732 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c712:	693b      	ldr	r3, [r7, #16]
 801c714:	785b      	ldrb	r3, [r3, #1]
 801c716:	2b00      	cmp	r3, #0
 801c718:	d11b      	bne.n	801c752 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801c71a:	693b      	ldr	r3, [r7, #16]
 801c71c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c71e:	2b5e      	cmp	r3, #94	; 0x5e
 801c720:	d117      	bne.n	801c752 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801c722:	687b      	ldr	r3, [r7, #4]
 801c724:	7b5b      	ldrb	r3, [r3, #13]
 801c726:	f043 0310 	orr.w	r3, r3, #16
 801c72a:	b2da      	uxtb	r2, r3
 801c72c:	687b      	ldr	r3, [r7, #4]
 801c72e:	735a      	strb	r2, [r3, #13]
 801c730:	e00f      	b.n	801c752 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801c732:	693b      	ldr	r3, [r7, #16]
 801c734:	2206      	movs	r2, #6
 801c736:	4928      	ldr	r1, [pc, #160]	; (801c7d8 <ethernet_input+0x118>)
 801c738:	4618      	mov	r0, r3
 801c73a:	f000 fb9b 	bl	801ce74 <memcmp>
 801c73e:	4603      	mov	r3, r0
 801c740:	2b00      	cmp	r3, #0
 801c742:	d106      	bne.n	801c752 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801c744:	687b      	ldr	r3, [r7, #4]
 801c746:	7b5b      	ldrb	r3, [r3, #13]
 801c748:	f043 0308 	orr.w	r3, r3, #8
 801c74c:	b2da      	uxtb	r2, r3
 801c74e:	687b      	ldr	r3, [r7, #4]
 801c750:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801c752:	89fb      	ldrh	r3, [r7, #14]
 801c754:	2b08      	cmp	r3, #8
 801c756:	d003      	beq.n	801c760 <ethernet_input+0xa0>
 801c758:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801c75c:	d014      	beq.n	801c788 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801c75e:	e032      	b.n	801c7c6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c760:	683b      	ldr	r3, [r7, #0]
 801c762:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801c766:	f003 0308 	and.w	r3, r3, #8
 801c76a:	2b00      	cmp	r3, #0
 801c76c:	d024      	beq.n	801c7b8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c76e:	8afb      	ldrh	r3, [r7, #22]
 801c770:	4619      	mov	r1, r3
 801c772:	6878      	ldr	r0, [r7, #4]
 801c774:	f7f6 fc64 	bl	8013040 <pbuf_remove_header>
 801c778:	4603      	mov	r3, r0
 801c77a:	2b00      	cmp	r3, #0
 801c77c:	d11e      	bne.n	801c7bc <ethernet_input+0xfc>
        ip4_input(p, netif);
 801c77e:	6839      	ldr	r1, [r7, #0]
 801c780:	6878      	ldr	r0, [r7, #4]
 801c782:	f7fe ff21 	bl	801b5c8 <ip4_input>
      break;
 801c786:	e013      	b.n	801c7b0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c788:	683b      	ldr	r3, [r7, #0]
 801c78a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801c78e:	f003 0308 	and.w	r3, r3, #8
 801c792:	2b00      	cmp	r3, #0
 801c794:	d014      	beq.n	801c7c0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c796:	8afb      	ldrh	r3, [r7, #22]
 801c798:	4619      	mov	r1, r3
 801c79a:	6878      	ldr	r0, [r7, #4]
 801c79c:	f7f6 fc50 	bl	8013040 <pbuf_remove_header>
 801c7a0:	4603      	mov	r3, r0
 801c7a2:	2b00      	cmp	r3, #0
 801c7a4:	d10e      	bne.n	801c7c4 <ethernet_input+0x104>
        etharp_input(p, netif);
 801c7a6:	6839      	ldr	r1, [r7, #0]
 801c7a8:	6878      	ldr	r0, [r7, #4]
 801c7aa:	f7fe f8c1 	bl	801a930 <etharp_input>
      break;
 801c7ae:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801c7b0:	2300      	movs	r3, #0
 801c7b2:	e00c      	b.n	801c7ce <ethernet_input+0x10e>
    goto free_and_return;
 801c7b4:	bf00      	nop
 801c7b6:	e006      	b.n	801c7c6 <ethernet_input+0x106>
        goto free_and_return;
 801c7b8:	bf00      	nop
 801c7ba:	e004      	b.n	801c7c6 <ethernet_input+0x106>
        goto free_and_return;
 801c7bc:	bf00      	nop
 801c7be:	e002      	b.n	801c7c6 <ethernet_input+0x106>
        goto free_and_return;
 801c7c0:	bf00      	nop
 801c7c2:	e000      	b.n	801c7c6 <ethernet_input+0x106>
        goto free_and_return;
 801c7c4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801c7c6:	6878      	ldr	r0, [r7, #4]
 801c7c8:	f7f6 fcc0 	bl	801314c <pbuf_free>
  return ERR_OK;
 801c7cc:	2300      	movs	r3, #0
}
 801c7ce:	4618      	mov	r0, r3
 801c7d0:	3718      	adds	r7, #24
 801c7d2:	46bd      	mov	sp, r7
 801c7d4:	bd80      	pop	{r7, pc}
 801c7d6:	bf00      	nop
 801c7d8:	08021d00 	.word	0x08021d00

0801c7dc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801c7dc:	b580      	push	{r7, lr}
 801c7de:	b086      	sub	sp, #24
 801c7e0:	af00      	add	r7, sp, #0
 801c7e2:	60f8      	str	r0, [r7, #12]
 801c7e4:	60b9      	str	r1, [r7, #8]
 801c7e6:	607a      	str	r2, [r7, #4]
 801c7e8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801c7ea:	8c3b      	ldrh	r3, [r7, #32]
 801c7ec:	4618      	mov	r0, r3
 801c7ee:	f7f5 f965 	bl	8011abc <lwip_htons>
 801c7f2:	4603      	mov	r3, r0
 801c7f4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801c7f6:	210e      	movs	r1, #14
 801c7f8:	68b8      	ldr	r0, [r7, #8]
 801c7fa:	f7f6 fc11 	bl	8013020 <pbuf_add_header>
 801c7fe:	4603      	mov	r3, r0
 801c800:	2b00      	cmp	r3, #0
 801c802:	d125      	bne.n	801c850 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801c804:	68bb      	ldr	r3, [r7, #8]
 801c806:	685b      	ldr	r3, [r3, #4]
 801c808:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801c80a:	693b      	ldr	r3, [r7, #16]
 801c80c:	8afa      	ldrh	r2, [r7, #22]
 801c80e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801c810:	693b      	ldr	r3, [r7, #16]
 801c812:	2206      	movs	r2, #6
 801c814:	6839      	ldr	r1, [r7, #0]
 801c816:	4618      	mov	r0, r3
 801c818:	f000 fb3c 	bl	801ce94 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801c81c:	693b      	ldr	r3, [r7, #16]
 801c81e:	3306      	adds	r3, #6
 801c820:	2206      	movs	r2, #6
 801c822:	6879      	ldr	r1, [r7, #4]
 801c824:	4618      	mov	r0, r3
 801c826:	f000 fb35 	bl	801ce94 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801c82a:	68fb      	ldr	r3, [r7, #12]
 801c82c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801c830:	2b06      	cmp	r3, #6
 801c832:	d006      	beq.n	801c842 <ethernet_output+0x66>
 801c834:	4b0a      	ldr	r3, [pc, #40]	; (801c860 <ethernet_output+0x84>)
 801c836:	f44f 7299 	mov.w	r2, #306	; 0x132
 801c83a:	490a      	ldr	r1, [pc, #40]	; (801c864 <ethernet_output+0x88>)
 801c83c:	480a      	ldr	r0, [pc, #40]	; (801c868 <ethernet_output+0x8c>)
 801c83e:	f000 fc39 	bl	801d0b4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801c842:	68fb      	ldr	r3, [r7, #12]
 801c844:	699b      	ldr	r3, [r3, #24]
 801c846:	68b9      	ldr	r1, [r7, #8]
 801c848:	68f8      	ldr	r0, [r7, #12]
 801c84a:	4798      	blx	r3
 801c84c:	4603      	mov	r3, r0
 801c84e:	e002      	b.n	801c856 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801c850:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801c852:	f06f 0301 	mvn.w	r3, #1
}
 801c856:	4618      	mov	r0, r3
 801c858:	3718      	adds	r7, #24
 801c85a:	46bd      	mov	sp, r7
 801c85c:	bd80      	pop	{r7, pc}
 801c85e:	bf00      	nop
 801c860:	08021b34 	.word	0x08021b34
 801c864:	08021b6c 	.word	0x08021b6c
 801c868:	08021ba0 	.word	0x08021ba0

0801c86c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801c86c:	b580      	push	{r7, lr}
 801c86e:	b086      	sub	sp, #24
 801c870:	af00      	add	r7, sp, #0
 801c872:	6078      	str	r0, [r7, #4]
 801c874:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801c876:	683b      	ldr	r3, [r7, #0]
 801c878:	60bb      	str	r3, [r7, #8]
 801c87a:	2304      	movs	r3, #4
 801c87c:	60fb      	str	r3, [r7, #12]
 801c87e:	2300      	movs	r3, #0
 801c880:	613b      	str	r3, [r7, #16]
 801c882:	2300      	movs	r3, #0
 801c884:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801c886:	f107 0308 	add.w	r3, r7, #8
 801c88a:	2100      	movs	r1, #0
 801c88c:	4618      	mov	r0, r3
 801c88e:	f7f0 f982 	bl	800cb96 <osMessageCreate>
 801c892:	4602      	mov	r2, r0
 801c894:	687b      	ldr	r3, [r7, #4]
 801c896:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801c898:	687b      	ldr	r3, [r7, #4]
 801c89a:	681b      	ldr	r3, [r3, #0]
 801c89c:	2b00      	cmp	r3, #0
 801c89e:	d102      	bne.n	801c8a6 <sys_mbox_new+0x3a>
    return ERR_MEM;
 801c8a0:	f04f 33ff 	mov.w	r3, #4294967295
 801c8a4:	e000      	b.n	801c8a8 <sys_mbox_new+0x3c>

  return ERR_OK;
 801c8a6:	2300      	movs	r3, #0
}
 801c8a8:	4618      	mov	r0, r3
 801c8aa:	3718      	adds	r7, #24
 801c8ac:	46bd      	mov	sp, r7
 801c8ae:	bd80      	pop	{r7, pc}

0801c8b0 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801c8b0:	b580      	push	{r7, lr}
 801c8b2:	b082      	sub	sp, #8
 801c8b4:	af00      	add	r7, sp, #0
 801c8b6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801c8b8:	687b      	ldr	r3, [r7, #4]
 801c8ba:	681b      	ldr	r3, [r3, #0]
 801c8bc:	4618      	mov	r0, r3
 801c8be:	f7f0 fb7c 	bl	800cfba <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801c8c2:	687b      	ldr	r3, [r7, #4]
 801c8c4:	681b      	ldr	r3, [r3, #0]
 801c8c6:	4618      	mov	r0, r3
 801c8c8:	f7f0 fb8d 	bl	800cfe6 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801c8cc:	bf00      	nop
 801c8ce:	3708      	adds	r7, #8
 801c8d0:	46bd      	mov	sp, r7
 801c8d2:	bd80      	pop	{r7, pc}

0801c8d4 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801c8d4:	b580      	push	{r7, lr}
 801c8d6:	b084      	sub	sp, #16
 801c8d8:	af00      	add	r7, sp, #0
 801c8da:	6078      	str	r0, [r7, #4]
 801c8dc:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801c8de:	687b      	ldr	r3, [r7, #4]
 801c8e0:	681b      	ldr	r3, [r3, #0]
 801c8e2:	6839      	ldr	r1, [r7, #0]
 801c8e4:	2200      	movs	r2, #0
 801c8e6:	4618      	mov	r0, r3
 801c8e8:	f7f0 f97e 	bl	800cbe8 <osMessagePut>
 801c8ec:	4603      	mov	r3, r0
 801c8ee:	2b00      	cmp	r3, #0
 801c8f0:	d102      	bne.n	801c8f8 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801c8f2:	2300      	movs	r3, #0
 801c8f4:	73fb      	strb	r3, [r7, #15]
 801c8f6:	e001      	b.n	801c8fc <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801c8f8:	23ff      	movs	r3, #255	; 0xff
 801c8fa:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801c8fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c900:	4618      	mov	r0, r3
 801c902:	3710      	adds	r7, #16
 801c904:	46bd      	mov	sp, r7
 801c906:	bd80      	pop	{r7, pc}

0801c908 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801c908:	b580      	push	{r7, lr}
 801c90a:	b08c      	sub	sp, #48	; 0x30
 801c90c:	af00      	add	r7, sp, #0
 801c90e:	61f8      	str	r0, [r7, #28]
 801c910:	61b9      	str	r1, [r7, #24]
 801c912:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801c914:	f7ef fe69 	bl	800c5ea <osKernelSysTick>
 801c918:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801c91a:	697b      	ldr	r3, [r7, #20]
 801c91c:	2b00      	cmp	r3, #0
 801c91e:	d017      	beq.n	801c950 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801c920:	69fb      	ldr	r3, [r7, #28]
 801c922:	6819      	ldr	r1, [r3, #0]
 801c924:	f107 0320 	add.w	r3, r7, #32
 801c928:	697a      	ldr	r2, [r7, #20]
 801c92a:	4618      	mov	r0, r3
 801c92c:	f7f0 f99c 	bl	800cc68 <osMessageGet>

    if(event.status == osEventMessage)
 801c930:	6a3b      	ldr	r3, [r7, #32]
 801c932:	2b10      	cmp	r3, #16
 801c934:	d109      	bne.n	801c94a <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801c936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c938:	461a      	mov	r2, r3
 801c93a:	69bb      	ldr	r3, [r7, #24]
 801c93c:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801c93e:	f7ef fe54 	bl	800c5ea <osKernelSysTick>
 801c942:	4602      	mov	r2, r0
 801c944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c946:	1ad3      	subs	r3, r2, r3
 801c948:	e019      	b.n	801c97e <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c94a:	f04f 33ff 	mov.w	r3, #4294967295
 801c94e:	e016      	b.n	801c97e <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801c950:	69fb      	ldr	r3, [r7, #28]
 801c952:	6819      	ldr	r1, [r3, #0]
 801c954:	463b      	mov	r3, r7
 801c956:	f04f 32ff 	mov.w	r2, #4294967295
 801c95a:	4618      	mov	r0, r3
 801c95c:	f7f0 f984 	bl	800cc68 <osMessageGet>
 801c960:	f107 0320 	add.w	r3, r7, #32
 801c964:	463a      	mov	r2, r7
 801c966:	ca07      	ldmia	r2, {r0, r1, r2}
 801c968:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801c96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c96e:	461a      	mov	r2, r3
 801c970:	69bb      	ldr	r3, [r7, #24]
 801c972:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801c974:	f7ef fe39 	bl	800c5ea <osKernelSysTick>
 801c978:	4602      	mov	r2, r0
 801c97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c97c:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801c97e:	4618      	mov	r0, r3
 801c980:	3730      	adds	r7, #48	; 0x30
 801c982:	46bd      	mov	sp, r7
 801c984:	bd80      	pop	{r7, pc}

0801c986 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801c986:	b580      	push	{r7, lr}
 801c988:	b086      	sub	sp, #24
 801c98a:	af00      	add	r7, sp, #0
 801c98c:	6078      	str	r0, [r7, #4]
 801c98e:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801c990:	687b      	ldr	r3, [r7, #4]
 801c992:	6819      	ldr	r1, [r3, #0]
 801c994:	f107 030c 	add.w	r3, r7, #12
 801c998:	2200      	movs	r2, #0
 801c99a:	4618      	mov	r0, r3
 801c99c:	f7f0 f964 	bl	800cc68 <osMessageGet>

  if(event.status == osEventMessage)
 801c9a0:	68fb      	ldr	r3, [r7, #12]
 801c9a2:	2b10      	cmp	r3, #16
 801c9a4:	d105      	bne.n	801c9b2 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801c9a6:	693b      	ldr	r3, [r7, #16]
 801c9a8:	461a      	mov	r2, r3
 801c9aa:	683b      	ldr	r3, [r7, #0]
 801c9ac:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801c9ae:	2300      	movs	r3, #0
 801c9b0:	e001      	b.n	801c9b6 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801c9b2:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801c9b6:	4618      	mov	r0, r3
 801c9b8:	3718      	adds	r7, #24
 801c9ba:	46bd      	mov	sp, r7
 801c9bc:	bd80      	pop	{r7, pc}

0801c9be <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801c9be:	b480      	push	{r7}
 801c9c0:	b083      	sub	sp, #12
 801c9c2:	af00      	add	r7, sp, #0
 801c9c4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801c9c6:	687b      	ldr	r3, [r7, #4]
 801c9c8:	681b      	ldr	r3, [r3, #0]
 801c9ca:	2b00      	cmp	r3, #0
 801c9cc:	d101      	bne.n	801c9d2 <sys_mbox_valid+0x14>
    return 0;
 801c9ce:	2300      	movs	r3, #0
 801c9d0:	e000      	b.n	801c9d4 <sys_mbox_valid+0x16>
  else
    return 1;
 801c9d2:	2301      	movs	r3, #1
}
 801c9d4:	4618      	mov	r0, r3
 801c9d6:	370c      	adds	r7, #12
 801c9d8:	46bd      	mov	sp, r7
 801c9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9de:	4770      	bx	lr

0801c9e0 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801c9e0:	b480      	push	{r7}
 801c9e2:	b083      	sub	sp, #12
 801c9e4:	af00      	add	r7, sp, #0
 801c9e6:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801c9e8:	687b      	ldr	r3, [r7, #4]
 801c9ea:	2200      	movs	r2, #0
 801c9ec:	601a      	str	r2, [r3, #0]
}
 801c9ee:	bf00      	nop
 801c9f0:	370c      	adds	r7, #12
 801c9f2:	46bd      	mov	sp, r7
 801c9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9f8:	4770      	bx	lr

0801c9fa <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801c9fa:	b580      	push	{r7, lr}
 801c9fc:	b084      	sub	sp, #16
 801c9fe:	af00      	add	r7, sp, #0
 801ca00:	6078      	str	r0, [r7, #4]
 801ca02:	460b      	mov	r3, r1
 801ca04:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801ca06:	2300      	movs	r3, #0
 801ca08:	60bb      	str	r3, [r7, #8]
 801ca0a:	2300      	movs	r3, #0
 801ca0c:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801ca0e:	f107 0308 	add.w	r3, r7, #8
 801ca12:	2101      	movs	r1, #1
 801ca14:	4618      	mov	r0, r3
 801ca16:	f7ef fef5 	bl	800c804 <osSemaphoreCreate>
 801ca1a:	4602      	mov	r2, r0
 801ca1c:	687b      	ldr	r3, [r7, #4]
 801ca1e:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801ca20:	687b      	ldr	r3, [r7, #4]
 801ca22:	681b      	ldr	r3, [r3, #0]
 801ca24:	2b00      	cmp	r3, #0
 801ca26:	d102      	bne.n	801ca2e <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801ca28:	f04f 33ff 	mov.w	r3, #4294967295
 801ca2c:	e009      	b.n	801ca42 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801ca2e:	78fb      	ldrb	r3, [r7, #3]
 801ca30:	2b00      	cmp	r3, #0
 801ca32:	d105      	bne.n	801ca40 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801ca34:	687b      	ldr	r3, [r7, #4]
 801ca36:	681b      	ldr	r3, [r3, #0]
 801ca38:	2100      	movs	r1, #0
 801ca3a:	4618      	mov	r0, r3
 801ca3c:	f7ef ff14 	bl	800c868 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801ca40:	2300      	movs	r3, #0
}
 801ca42:	4618      	mov	r0, r3
 801ca44:	3710      	adds	r7, #16
 801ca46:	46bd      	mov	sp, r7
 801ca48:	bd80      	pop	{r7, pc}

0801ca4a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801ca4a:	b580      	push	{r7, lr}
 801ca4c:	b084      	sub	sp, #16
 801ca4e:	af00      	add	r7, sp, #0
 801ca50:	6078      	str	r0, [r7, #4]
 801ca52:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801ca54:	f7ef fdc9 	bl	800c5ea <osKernelSysTick>
 801ca58:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801ca5a:	683b      	ldr	r3, [r7, #0]
 801ca5c:	2b00      	cmp	r3, #0
 801ca5e:	d011      	beq.n	801ca84 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801ca60:	687b      	ldr	r3, [r7, #4]
 801ca62:	681b      	ldr	r3, [r3, #0]
 801ca64:	6839      	ldr	r1, [r7, #0]
 801ca66:	4618      	mov	r0, r3
 801ca68:	f7ef fefe 	bl	800c868 <osSemaphoreWait>
 801ca6c:	4603      	mov	r3, r0
 801ca6e:	2b00      	cmp	r3, #0
 801ca70:	d105      	bne.n	801ca7e <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801ca72:	f7ef fdba 	bl	800c5ea <osKernelSysTick>
 801ca76:	4602      	mov	r2, r0
 801ca78:	68fb      	ldr	r3, [r7, #12]
 801ca7a:	1ad3      	subs	r3, r2, r3
 801ca7c:	e012      	b.n	801caa4 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801ca7e:	f04f 33ff 	mov.w	r3, #4294967295
 801ca82:	e00f      	b.n	801caa4 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801ca84:	bf00      	nop
 801ca86:	687b      	ldr	r3, [r7, #4]
 801ca88:	681b      	ldr	r3, [r3, #0]
 801ca8a:	f04f 31ff 	mov.w	r1, #4294967295
 801ca8e:	4618      	mov	r0, r3
 801ca90:	f7ef feea 	bl	800c868 <osSemaphoreWait>
 801ca94:	4603      	mov	r3, r0
 801ca96:	2b00      	cmp	r3, #0
 801ca98:	d1f5      	bne.n	801ca86 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801ca9a:	f7ef fda6 	bl	800c5ea <osKernelSysTick>
 801ca9e:	4602      	mov	r2, r0
 801caa0:	68fb      	ldr	r3, [r7, #12]
 801caa2:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801caa4:	4618      	mov	r0, r3
 801caa6:	3710      	adds	r7, #16
 801caa8:	46bd      	mov	sp, r7
 801caaa:	bd80      	pop	{r7, pc}

0801caac <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801caac:	b580      	push	{r7, lr}
 801caae:	b082      	sub	sp, #8
 801cab0:	af00      	add	r7, sp, #0
 801cab2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801cab4:	687b      	ldr	r3, [r7, #4]
 801cab6:	681b      	ldr	r3, [r3, #0]
 801cab8:	4618      	mov	r0, r3
 801caba:	f7ef ff23 	bl	800c904 <osSemaphoreRelease>
}
 801cabe:	bf00      	nop
 801cac0:	3708      	adds	r7, #8
 801cac2:	46bd      	mov	sp, r7
 801cac4:	bd80      	pop	{r7, pc}

0801cac6 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801cac6:	b580      	push	{r7, lr}
 801cac8:	b082      	sub	sp, #8
 801caca:	af00      	add	r7, sp, #0
 801cacc:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801cace:	687b      	ldr	r3, [r7, #4]
 801cad0:	681b      	ldr	r3, [r3, #0]
 801cad2:	4618      	mov	r0, r3
 801cad4:	f7ef ff4c 	bl	800c970 <osSemaphoreDelete>
}
 801cad8:	bf00      	nop
 801cada:	3708      	adds	r7, #8
 801cadc:	46bd      	mov	sp, r7
 801cade:	bd80      	pop	{r7, pc}

0801cae0 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801cae0:	b480      	push	{r7}
 801cae2:	b083      	sub	sp, #12
 801cae4:	af00      	add	r7, sp, #0
 801cae6:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801cae8:	687b      	ldr	r3, [r7, #4]
 801caea:	681b      	ldr	r3, [r3, #0]
 801caec:	2b00      	cmp	r3, #0
 801caee:	d101      	bne.n	801caf4 <sys_sem_valid+0x14>
    return 0;
 801caf0:	2300      	movs	r3, #0
 801caf2:	e000      	b.n	801caf6 <sys_sem_valid+0x16>
  else
    return 1;
 801caf4:	2301      	movs	r3, #1
}
 801caf6:	4618      	mov	r0, r3
 801caf8:	370c      	adds	r7, #12
 801cafa:	46bd      	mov	sp, r7
 801cafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb00:	4770      	bx	lr

0801cb02 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801cb02:	b480      	push	{r7}
 801cb04:	b083      	sub	sp, #12
 801cb06:	af00      	add	r7, sp, #0
 801cb08:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801cb0a:	687b      	ldr	r3, [r7, #4]
 801cb0c:	2200      	movs	r2, #0
 801cb0e:	601a      	str	r2, [r3, #0]
}
 801cb10:	bf00      	nop
 801cb12:	370c      	adds	r7, #12
 801cb14:	46bd      	mov	sp, r7
 801cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb1a:	4770      	bx	lr

0801cb1c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801cb1c:	b580      	push	{r7, lr}
 801cb1e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801cb20:	4803      	ldr	r0, [pc, #12]	; (801cb30 <sys_init+0x14>)
 801cb22:	f7ef fdd2 	bl	800c6ca <osMutexCreate>
 801cb26:	4603      	mov	r3, r0
 801cb28:	4a02      	ldr	r2, [pc, #8]	; (801cb34 <sys_init+0x18>)
 801cb2a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801cb2c:	bf00      	nop
 801cb2e:	bd80      	pop	{r7, pc}
 801cb30:	08021d10 	.word	0x08021d10
 801cb34:	2000df18 	.word	0x2000df18

0801cb38 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801cb38:	b580      	push	{r7, lr}
 801cb3a:	b084      	sub	sp, #16
 801cb3c:	af00      	add	r7, sp, #0
 801cb3e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801cb40:	2300      	movs	r3, #0
 801cb42:	60bb      	str	r3, [r7, #8]
 801cb44:	2300      	movs	r3, #0
 801cb46:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801cb48:	f107 0308 	add.w	r3, r7, #8
 801cb4c:	4618      	mov	r0, r3
 801cb4e:	f7ef fdbc 	bl	800c6ca <osMutexCreate>
 801cb52:	4602      	mov	r2, r0
 801cb54:	687b      	ldr	r3, [r7, #4]
 801cb56:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801cb58:	687b      	ldr	r3, [r7, #4]
 801cb5a:	681b      	ldr	r3, [r3, #0]
 801cb5c:	2b00      	cmp	r3, #0
 801cb5e:	d102      	bne.n	801cb66 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801cb60:	f04f 33ff 	mov.w	r3, #4294967295
 801cb64:	e000      	b.n	801cb68 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801cb66:	2300      	movs	r3, #0
}
 801cb68:	4618      	mov	r0, r3
 801cb6a:	3710      	adds	r7, #16
 801cb6c:	46bd      	mov	sp, r7
 801cb6e:	bd80      	pop	{r7, pc}

0801cb70 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801cb70:	b580      	push	{r7, lr}
 801cb72:	b082      	sub	sp, #8
 801cb74:	af00      	add	r7, sp, #0
 801cb76:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801cb78:	687b      	ldr	r3, [r7, #4]
 801cb7a:	681b      	ldr	r3, [r3, #0]
 801cb7c:	f04f 31ff 	mov.w	r1, #4294967295
 801cb80:	4618      	mov	r0, r3
 801cb82:	f7ef fdbb 	bl	800c6fc <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801cb86:	bf00      	nop
 801cb88:	3708      	adds	r7, #8
 801cb8a:	46bd      	mov	sp, r7
 801cb8c:	bd80      	pop	{r7, pc}

0801cb8e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801cb8e:	b580      	push	{r7, lr}
 801cb90:	b082      	sub	sp, #8
 801cb92:	af00      	add	r7, sp, #0
 801cb94:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801cb96:	687b      	ldr	r3, [r7, #4]
 801cb98:	681b      	ldr	r3, [r3, #0]
 801cb9a:	4618      	mov	r0, r3
 801cb9c:	f7ef fdfc 	bl	800c798 <osMutexRelease>
}
 801cba0:	bf00      	nop
 801cba2:	3708      	adds	r7, #8
 801cba4:	46bd      	mov	sp, r7
 801cba6:	bd80      	pop	{r7, pc}

0801cba8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801cba8:	b580      	push	{r7, lr}
 801cbaa:	b08c      	sub	sp, #48	; 0x30
 801cbac:	af00      	add	r7, sp, #0
 801cbae:	60f8      	str	r0, [r7, #12]
 801cbb0:	60b9      	str	r1, [r7, #8]
 801cbb2:	607a      	str	r2, [r7, #4]
 801cbb4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801cbb6:	f107 0314 	add.w	r3, r7, #20
 801cbba:	2200      	movs	r2, #0
 801cbbc:	601a      	str	r2, [r3, #0]
 801cbbe:	605a      	str	r2, [r3, #4]
 801cbc0:	609a      	str	r2, [r3, #8]
 801cbc2:	60da      	str	r2, [r3, #12]
 801cbc4:	611a      	str	r2, [r3, #16]
 801cbc6:	615a      	str	r2, [r3, #20]
 801cbc8:	619a      	str	r2, [r3, #24]
 801cbca:	68fb      	ldr	r3, [r7, #12]
 801cbcc:	617b      	str	r3, [r7, #20]
 801cbce:	68bb      	ldr	r3, [r7, #8]
 801cbd0:	61bb      	str	r3, [r7, #24]
 801cbd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cbd4:	b21b      	sxth	r3, r3
 801cbd6:	83bb      	strh	r3, [r7, #28]
 801cbd8:	683b      	ldr	r3, [r7, #0]
 801cbda:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801cbdc:	f107 0314 	add.w	r3, r7, #20
 801cbe0:	6879      	ldr	r1, [r7, #4]
 801cbe2:	4618      	mov	r0, r3
 801cbe4:	f7ef fd11 	bl	800c60a <osThreadCreate>
 801cbe8:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801cbea:	4618      	mov	r0, r3
 801cbec:	3730      	adds	r7, #48	; 0x30
 801cbee:	46bd      	mov	sp, r7
 801cbf0:	bd80      	pop	{r7, pc}
	...

0801cbf4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801cbf4:	b580      	push	{r7, lr}
 801cbf6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801cbf8:	4b04      	ldr	r3, [pc, #16]	; (801cc0c <sys_arch_protect+0x18>)
 801cbfa:	681b      	ldr	r3, [r3, #0]
 801cbfc:	f04f 31ff 	mov.w	r1, #4294967295
 801cc00:	4618      	mov	r0, r3
 801cc02:	f7ef fd7b 	bl	800c6fc <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801cc06:	2301      	movs	r3, #1
}
 801cc08:	4618      	mov	r0, r3
 801cc0a:	bd80      	pop	{r7, pc}
 801cc0c:	2000df18 	.word	0x2000df18

0801cc10 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801cc10:	b580      	push	{r7, lr}
 801cc12:	b082      	sub	sp, #8
 801cc14:	af00      	add	r7, sp, #0
 801cc16:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801cc18:	4b04      	ldr	r3, [pc, #16]	; (801cc2c <sys_arch_unprotect+0x1c>)
 801cc1a:	681b      	ldr	r3, [r3, #0]
 801cc1c:	4618      	mov	r0, r3
 801cc1e:	f7ef fdbb 	bl	800c798 <osMutexRelease>
}
 801cc22:	bf00      	nop
 801cc24:	3708      	adds	r7, #8
 801cc26:	46bd      	mov	sp, r7
 801cc28:	bd80      	pop	{r7, pc}
 801cc2a:	bf00      	nop
 801cc2c:	2000df18 	.word	0x2000df18

0801cc30 <std>:
 801cc30:	2300      	movs	r3, #0
 801cc32:	b510      	push	{r4, lr}
 801cc34:	4604      	mov	r4, r0
 801cc36:	e9c0 3300 	strd	r3, r3, [r0]
 801cc3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cc3e:	6083      	str	r3, [r0, #8]
 801cc40:	8181      	strh	r1, [r0, #12]
 801cc42:	6643      	str	r3, [r0, #100]	; 0x64
 801cc44:	81c2      	strh	r2, [r0, #14]
 801cc46:	6183      	str	r3, [r0, #24]
 801cc48:	4619      	mov	r1, r3
 801cc4a:	2208      	movs	r2, #8
 801cc4c:	305c      	adds	r0, #92	; 0x5c
 801cc4e:	f000 f949 	bl	801cee4 <memset>
 801cc52:	4b05      	ldr	r3, [pc, #20]	; (801cc68 <std+0x38>)
 801cc54:	6263      	str	r3, [r4, #36]	; 0x24
 801cc56:	4b05      	ldr	r3, [pc, #20]	; (801cc6c <std+0x3c>)
 801cc58:	62a3      	str	r3, [r4, #40]	; 0x28
 801cc5a:	4b05      	ldr	r3, [pc, #20]	; (801cc70 <std+0x40>)
 801cc5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801cc5e:	4b05      	ldr	r3, [pc, #20]	; (801cc74 <std+0x44>)
 801cc60:	6224      	str	r4, [r4, #32]
 801cc62:	6323      	str	r3, [r4, #48]	; 0x30
 801cc64:	bd10      	pop	{r4, pc}
 801cc66:	bf00      	nop
 801cc68:	0801d295 	.word	0x0801d295
 801cc6c:	0801d2b7 	.word	0x0801d2b7
 801cc70:	0801d2ef 	.word	0x0801d2ef
 801cc74:	0801d313 	.word	0x0801d313

0801cc78 <_cleanup_r>:
 801cc78:	4901      	ldr	r1, [pc, #4]	; (801cc80 <_cleanup_r+0x8>)
 801cc7a:	f000 b8af 	b.w	801cddc <_fwalk_reent>
 801cc7e:	bf00      	nop
 801cc80:	0801d4f5 	.word	0x0801d4f5

0801cc84 <__sfmoreglue>:
 801cc84:	b570      	push	{r4, r5, r6, lr}
 801cc86:	2268      	movs	r2, #104	; 0x68
 801cc88:	1e4d      	subs	r5, r1, #1
 801cc8a:	4355      	muls	r5, r2
 801cc8c:	460e      	mov	r6, r1
 801cc8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801cc92:	f000 f99b 	bl	801cfcc <_malloc_r>
 801cc96:	4604      	mov	r4, r0
 801cc98:	b140      	cbz	r0, 801ccac <__sfmoreglue+0x28>
 801cc9a:	2100      	movs	r1, #0
 801cc9c:	e9c0 1600 	strd	r1, r6, [r0]
 801cca0:	300c      	adds	r0, #12
 801cca2:	60a0      	str	r0, [r4, #8]
 801cca4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801cca8:	f000 f91c 	bl	801cee4 <memset>
 801ccac:	4620      	mov	r0, r4
 801ccae:	bd70      	pop	{r4, r5, r6, pc}

0801ccb0 <__sfp_lock_acquire>:
 801ccb0:	4801      	ldr	r0, [pc, #4]	; (801ccb8 <__sfp_lock_acquire+0x8>)
 801ccb2:	f7e8 be41 	b.w	8005938 <__retarget_lock_acquire_recursive>
 801ccb6:	bf00      	nop
 801ccb8:	20001054 	.word	0x20001054

0801ccbc <__sfp_lock_release>:
 801ccbc:	4801      	ldr	r0, [pc, #4]	; (801ccc4 <__sfp_lock_release+0x8>)
 801ccbe:	f7e8 be4f 	b.w	8005960 <__retarget_lock_release_recursive>
 801ccc2:	bf00      	nop
 801ccc4:	20001054 	.word	0x20001054

0801ccc8 <__sinit_lock_acquire>:
 801ccc8:	4801      	ldr	r0, [pc, #4]	; (801ccd0 <__sinit_lock_acquire+0x8>)
 801ccca:	f7e8 be35 	b.w	8005938 <__retarget_lock_acquire_recursive>
 801ccce:	bf00      	nop
 801ccd0:	20001048 	.word	0x20001048

0801ccd4 <__sinit_lock_release>:
 801ccd4:	4801      	ldr	r0, [pc, #4]	; (801ccdc <__sinit_lock_release+0x8>)
 801ccd6:	f7e8 be43 	b.w	8005960 <__retarget_lock_release_recursive>
 801ccda:	bf00      	nop
 801ccdc:	20001048 	.word	0x20001048

0801cce0 <__sinit>:
 801cce0:	b510      	push	{r4, lr}
 801cce2:	4604      	mov	r4, r0
 801cce4:	f7ff fff0 	bl	801ccc8 <__sinit_lock_acquire>
 801cce8:	69a3      	ldr	r3, [r4, #24]
 801ccea:	b11b      	cbz	r3, 801ccf4 <__sinit+0x14>
 801ccec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ccf0:	f7ff bff0 	b.w	801ccd4 <__sinit_lock_release>
 801ccf4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801ccf8:	6523      	str	r3, [r4, #80]	; 0x50
 801ccfa:	4b13      	ldr	r3, [pc, #76]	; (801cd48 <__sinit+0x68>)
 801ccfc:	4a13      	ldr	r2, [pc, #76]	; (801cd4c <__sinit+0x6c>)
 801ccfe:	681b      	ldr	r3, [r3, #0]
 801cd00:	62a2      	str	r2, [r4, #40]	; 0x28
 801cd02:	42a3      	cmp	r3, r4
 801cd04:	bf04      	itt	eq
 801cd06:	2301      	moveq	r3, #1
 801cd08:	61a3      	streq	r3, [r4, #24]
 801cd0a:	4620      	mov	r0, r4
 801cd0c:	f000 f820 	bl	801cd50 <__sfp>
 801cd10:	6060      	str	r0, [r4, #4]
 801cd12:	4620      	mov	r0, r4
 801cd14:	f000 f81c 	bl	801cd50 <__sfp>
 801cd18:	60a0      	str	r0, [r4, #8]
 801cd1a:	4620      	mov	r0, r4
 801cd1c:	f000 f818 	bl	801cd50 <__sfp>
 801cd20:	2200      	movs	r2, #0
 801cd22:	60e0      	str	r0, [r4, #12]
 801cd24:	2104      	movs	r1, #4
 801cd26:	6860      	ldr	r0, [r4, #4]
 801cd28:	f7ff ff82 	bl	801cc30 <std>
 801cd2c:	68a0      	ldr	r0, [r4, #8]
 801cd2e:	2201      	movs	r2, #1
 801cd30:	2109      	movs	r1, #9
 801cd32:	f7ff ff7d 	bl	801cc30 <std>
 801cd36:	68e0      	ldr	r0, [r4, #12]
 801cd38:	2202      	movs	r2, #2
 801cd3a:	2112      	movs	r1, #18
 801cd3c:	f7ff ff78 	bl	801cc30 <std>
 801cd40:	2301      	movs	r3, #1
 801cd42:	61a3      	str	r3, [r4, #24]
 801cd44:	e7d2      	b.n	801ccec <__sinit+0xc>
 801cd46:	bf00      	nop
 801cd48:	08021d78 	.word	0x08021d78
 801cd4c:	0801cc79 	.word	0x0801cc79

0801cd50 <__sfp>:
 801cd50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cd52:	4607      	mov	r7, r0
 801cd54:	f7ff ffac 	bl	801ccb0 <__sfp_lock_acquire>
 801cd58:	4b1e      	ldr	r3, [pc, #120]	; (801cdd4 <__sfp+0x84>)
 801cd5a:	681e      	ldr	r6, [r3, #0]
 801cd5c:	69b3      	ldr	r3, [r6, #24]
 801cd5e:	b913      	cbnz	r3, 801cd66 <__sfp+0x16>
 801cd60:	4630      	mov	r0, r6
 801cd62:	f7ff ffbd 	bl	801cce0 <__sinit>
 801cd66:	3648      	adds	r6, #72	; 0x48
 801cd68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801cd6c:	3b01      	subs	r3, #1
 801cd6e:	d503      	bpl.n	801cd78 <__sfp+0x28>
 801cd70:	6833      	ldr	r3, [r6, #0]
 801cd72:	b30b      	cbz	r3, 801cdb8 <__sfp+0x68>
 801cd74:	6836      	ldr	r6, [r6, #0]
 801cd76:	e7f7      	b.n	801cd68 <__sfp+0x18>
 801cd78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801cd7c:	b9d5      	cbnz	r5, 801cdb4 <__sfp+0x64>
 801cd7e:	4b16      	ldr	r3, [pc, #88]	; (801cdd8 <__sfp+0x88>)
 801cd80:	60e3      	str	r3, [r4, #12]
 801cd82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801cd86:	6665      	str	r5, [r4, #100]	; 0x64
 801cd88:	f7e8 fdb0 	bl	80058ec <__retarget_lock_init_recursive>
 801cd8c:	f7ff ff96 	bl	801ccbc <__sfp_lock_release>
 801cd90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801cd94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801cd98:	6025      	str	r5, [r4, #0]
 801cd9a:	61a5      	str	r5, [r4, #24]
 801cd9c:	2208      	movs	r2, #8
 801cd9e:	4629      	mov	r1, r5
 801cda0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801cda4:	f000 f89e 	bl	801cee4 <memset>
 801cda8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801cdac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801cdb0:	4620      	mov	r0, r4
 801cdb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801cdb4:	3468      	adds	r4, #104	; 0x68
 801cdb6:	e7d9      	b.n	801cd6c <__sfp+0x1c>
 801cdb8:	2104      	movs	r1, #4
 801cdba:	4638      	mov	r0, r7
 801cdbc:	f7ff ff62 	bl	801cc84 <__sfmoreglue>
 801cdc0:	4604      	mov	r4, r0
 801cdc2:	6030      	str	r0, [r6, #0]
 801cdc4:	2800      	cmp	r0, #0
 801cdc6:	d1d5      	bne.n	801cd74 <__sfp+0x24>
 801cdc8:	f7ff ff78 	bl	801ccbc <__sfp_lock_release>
 801cdcc:	230c      	movs	r3, #12
 801cdce:	603b      	str	r3, [r7, #0]
 801cdd0:	e7ee      	b.n	801cdb0 <__sfp+0x60>
 801cdd2:	bf00      	nop
 801cdd4:	08021d78 	.word	0x08021d78
 801cdd8:	ffff0001 	.word	0xffff0001

0801cddc <_fwalk_reent>:
 801cddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cde0:	4606      	mov	r6, r0
 801cde2:	4688      	mov	r8, r1
 801cde4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801cde8:	2700      	movs	r7, #0
 801cdea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801cdee:	f1b9 0901 	subs.w	r9, r9, #1
 801cdf2:	d505      	bpl.n	801ce00 <_fwalk_reent+0x24>
 801cdf4:	6824      	ldr	r4, [r4, #0]
 801cdf6:	2c00      	cmp	r4, #0
 801cdf8:	d1f7      	bne.n	801cdea <_fwalk_reent+0xe>
 801cdfa:	4638      	mov	r0, r7
 801cdfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ce00:	89ab      	ldrh	r3, [r5, #12]
 801ce02:	2b01      	cmp	r3, #1
 801ce04:	d907      	bls.n	801ce16 <_fwalk_reent+0x3a>
 801ce06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801ce0a:	3301      	adds	r3, #1
 801ce0c:	d003      	beq.n	801ce16 <_fwalk_reent+0x3a>
 801ce0e:	4629      	mov	r1, r5
 801ce10:	4630      	mov	r0, r6
 801ce12:	47c0      	blx	r8
 801ce14:	4307      	orrs	r7, r0
 801ce16:	3568      	adds	r5, #104	; 0x68
 801ce18:	e7e9      	b.n	801cdee <_fwalk_reent+0x12>
	...

0801ce1c <__libc_init_array>:
 801ce1c:	b570      	push	{r4, r5, r6, lr}
 801ce1e:	4d0d      	ldr	r5, [pc, #52]	; (801ce54 <__libc_init_array+0x38>)
 801ce20:	4c0d      	ldr	r4, [pc, #52]	; (801ce58 <__libc_init_array+0x3c>)
 801ce22:	1b64      	subs	r4, r4, r5
 801ce24:	10a4      	asrs	r4, r4, #2
 801ce26:	2600      	movs	r6, #0
 801ce28:	42a6      	cmp	r6, r4
 801ce2a:	d109      	bne.n	801ce40 <__libc_init_array+0x24>
 801ce2c:	4d0b      	ldr	r5, [pc, #44]	; (801ce5c <__libc_init_array+0x40>)
 801ce2e:	4c0c      	ldr	r4, [pc, #48]	; (801ce60 <__libc_init_array+0x44>)
 801ce30:	f001 f9f2 	bl	801e218 <_init>
 801ce34:	1b64      	subs	r4, r4, r5
 801ce36:	10a4      	asrs	r4, r4, #2
 801ce38:	2600      	movs	r6, #0
 801ce3a:	42a6      	cmp	r6, r4
 801ce3c:	d105      	bne.n	801ce4a <__libc_init_array+0x2e>
 801ce3e:	bd70      	pop	{r4, r5, r6, pc}
 801ce40:	f855 3b04 	ldr.w	r3, [r5], #4
 801ce44:	4798      	blx	r3
 801ce46:	3601      	adds	r6, #1
 801ce48:	e7ee      	b.n	801ce28 <__libc_init_array+0xc>
 801ce4a:	f855 3b04 	ldr.w	r3, [r5], #4
 801ce4e:	4798      	blx	r3
 801ce50:	3601      	adds	r6, #1
 801ce52:	e7f2      	b.n	801ce3a <__libc_init_array+0x1e>
 801ce54:	08021e68 	.word	0x08021e68
 801ce58:	08021e68 	.word	0x08021e68
 801ce5c:	08021e68 	.word	0x08021e68
 801ce60:	08021e6c 	.word	0x08021e6c

0801ce64 <malloc>:
 801ce64:	4b02      	ldr	r3, [pc, #8]	; (801ce70 <malloc+0xc>)
 801ce66:	4601      	mov	r1, r0
 801ce68:	6818      	ldr	r0, [r3, #0]
 801ce6a:	f000 b8af 	b.w	801cfcc <_malloc_r>
 801ce6e:	bf00      	nop
 801ce70:	200002f8 	.word	0x200002f8

0801ce74 <memcmp>:
 801ce74:	b510      	push	{r4, lr}
 801ce76:	3901      	subs	r1, #1
 801ce78:	4402      	add	r2, r0
 801ce7a:	4290      	cmp	r0, r2
 801ce7c:	d101      	bne.n	801ce82 <memcmp+0xe>
 801ce7e:	2000      	movs	r0, #0
 801ce80:	e005      	b.n	801ce8e <memcmp+0x1a>
 801ce82:	7803      	ldrb	r3, [r0, #0]
 801ce84:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801ce88:	42a3      	cmp	r3, r4
 801ce8a:	d001      	beq.n	801ce90 <memcmp+0x1c>
 801ce8c:	1b18      	subs	r0, r3, r4
 801ce8e:	bd10      	pop	{r4, pc}
 801ce90:	3001      	adds	r0, #1
 801ce92:	e7f2      	b.n	801ce7a <memcmp+0x6>

0801ce94 <memcpy>:
 801ce94:	440a      	add	r2, r1
 801ce96:	4291      	cmp	r1, r2
 801ce98:	f100 33ff 	add.w	r3, r0, #4294967295
 801ce9c:	d100      	bne.n	801cea0 <memcpy+0xc>
 801ce9e:	4770      	bx	lr
 801cea0:	b510      	push	{r4, lr}
 801cea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 801cea6:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ceaa:	4291      	cmp	r1, r2
 801ceac:	d1f9      	bne.n	801cea2 <memcpy+0xe>
 801ceae:	bd10      	pop	{r4, pc}

0801ceb0 <memmove>:
 801ceb0:	4288      	cmp	r0, r1
 801ceb2:	b510      	push	{r4, lr}
 801ceb4:	eb01 0402 	add.w	r4, r1, r2
 801ceb8:	d902      	bls.n	801cec0 <memmove+0x10>
 801ceba:	4284      	cmp	r4, r0
 801cebc:	4623      	mov	r3, r4
 801cebe:	d807      	bhi.n	801ced0 <memmove+0x20>
 801cec0:	1e43      	subs	r3, r0, #1
 801cec2:	42a1      	cmp	r1, r4
 801cec4:	d008      	beq.n	801ced8 <memmove+0x28>
 801cec6:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ceca:	f803 2f01 	strb.w	r2, [r3, #1]!
 801cece:	e7f8      	b.n	801cec2 <memmove+0x12>
 801ced0:	4402      	add	r2, r0
 801ced2:	4601      	mov	r1, r0
 801ced4:	428a      	cmp	r2, r1
 801ced6:	d100      	bne.n	801ceda <memmove+0x2a>
 801ced8:	bd10      	pop	{r4, pc}
 801ceda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801cede:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801cee2:	e7f7      	b.n	801ced4 <memmove+0x24>

0801cee4 <memset>:
 801cee4:	4402      	add	r2, r0
 801cee6:	4603      	mov	r3, r0
 801cee8:	4293      	cmp	r3, r2
 801ceea:	d100      	bne.n	801ceee <memset+0xa>
 801ceec:	4770      	bx	lr
 801ceee:	f803 1b01 	strb.w	r1, [r3], #1
 801cef2:	e7f9      	b.n	801cee8 <memset+0x4>

0801cef4 <_free_r>:
 801cef4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801cef6:	2900      	cmp	r1, #0
 801cef8:	d044      	beq.n	801cf84 <_free_r+0x90>
 801cefa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cefe:	9001      	str	r0, [sp, #4]
 801cf00:	2b00      	cmp	r3, #0
 801cf02:	f1a1 0404 	sub.w	r4, r1, #4
 801cf06:	bfb8      	it	lt
 801cf08:	18e4      	addlt	r4, r4, r3
 801cf0a:	f000 fb53 	bl	801d5b4 <__malloc_lock>
 801cf0e:	4a1e      	ldr	r2, [pc, #120]	; (801cf88 <_free_r+0x94>)
 801cf10:	9801      	ldr	r0, [sp, #4]
 801cf12:	6813      	ldr	r3, [r2, #0]
 801cf14:	b933      	cbnz	r3, 801cf24 <_free_r+0x30>
 801cf16:	6063      	str	r3, [r4, #4]
 801cf18:	6014      	str	r4, [r2, #0]
 801cf1a:	b003      	add	sp, #12
 801cf1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801cf20:	f000 bb4e 	b.w	801d5c0 <__malloc_unlock>
 801cf24:	42a3      	cmp	r3, r4
 801cf26:	d908      	bls.n	801cf3a <_free_r+0x46>
 801cf28:	6825      	ldr	r5, [r4, #0]
 801cf2a:	1961      	adds	r1, r4, r5
 801cf2c:	428b      	cmp	r3, r1
 801cf2e:	bf01      	itttt	eq
 801cf30:	6819      	ldreq	r1, [r3, #0]
 801cf32:	685b      	ldreq	r3, [r3, #4]
 801cf34:	1949      	addeq	r1, r1, r5
 801cf36:	6021      	streq	r1, [r4, #0]
 801cf38:	e7ed      	b.n	801cf16 <_free_r+0x22>
 801cf3a:	461a      	mov	r2, r3
 801cf3c:	685b      	ldr	r3, [r3, #4]
 801cf3e:	b10b      	cbz	r3, 801cf44 <_free_r+0x50>
 801cf40:	42a3      	cmp	r3, r4
 801cf42:	d9fa      	bls.n	801cf3a <_free_r+0x46>
 801cf44:	6811      	ldr	r1, [r2, #0]
 801cf46:	1855      	adds	r5, r2, r1
 801cf48:	42a5      	cmp	r5, r4
 801cf4a:	d10b      	bne.n	801cf64 <_free_r+0x70>
 801cf4c:	6824      	ldr	r4, [r4, #0]
 801cf4e:	4421      	add	r1, r4
 801cf50:	1854      	adds	r4, r2, r1
 801cf52:	42a3      	cmp	r3, r4
 801cf54:	6011      	str	r1, [r2, #0]
 801cf56:	d1e0      	bne.n	801cf1a <_free_r+0x26>
 801cf58:	681c      	ldr	r4, [r3, #0]
 801cf5a:	685b      	ldr	r3, [r3, #4]
 801cf5c:	6053      	str	r3, [r2, #4]
 801cf5e:	4421      	add	r1, r4
 801cf60:	6011      	str	r1, [r2, #0]
 801cf62:	e7da      	b.n	801cf1a <_free_r+0x26>
 801cf64:	d902      	bls.n	801cf6c <_free_r+0x78>
 801cf66:	230c      	movs	r3, #12
 801cf68:	6003      	str	r3, [r0, #0]
 801cf6a:	e7d6      	b.n	801cf1a <_free_r+0x26>
 801cf6c:	6825      	ldr	r5, [r4, #0]
 801cf6e:	1961      	adds	r1, r4, r5
 801cf70:	428b      	cmp	r3, r1
 801cf72:	bf04      	itt	eq
 801cf74:	6819      	ldreq	r1, [r3, #0]
 801cf76:	685b      	ldreq	r3, [r3, #4]
 801cf78:	6063      	str	r3, [r4, #4]
 801cf7a:	bf04      	itt	eq
 801cf7c:	1949      	addeq	r1, r1, r5
 801cf7e:	6021      	streq	r1, [r4, #0]
 801cf80:	6054      	str	r4, [r2, #4]
 801cf82:	e7ca      	b.n	801cf1a <_free_r+0x26>
 801cf84:	b003      	add	sp, #12
 801cf86:	bd30      	pop	{r4, r5, pc}
 801cf88:	2000df1c 	.word	0x2000df1c

0801cf8c <sbrk_aligned>:
 801cf8c:	b570      	push	{r4, r5, r6, lr}
 801cf8e:	4e0e      	ldr	r6, [pc, #56]	; (801cfc8 <sbrk_aligned+0x3c>)
 801cf90:	460c      	mov	r4, r1
 801cf92:	6831      	ldr	r1, [r6, #0]
 801cf94:	4605      	mov	r5, r0
 801cf96:	b911      	cbnz	r1, 801cf9e <sbrk_aligned+0x12>
 801cf98:	f000 f94c 	bl	801d234 <_sbrk_r>
 801cf9c:	6030      	str	r0, [r6, #0]
 801cf9e:	4621      	mov	r1, r4
 801cfa0:	4628      	mov	r0, r5
 801cfa2:	f000 f947 	bl	801d234 <_sbrk_r>
 801cfa6:	1c43      	adds	r3, r0, #1
 801cfa8:	d00a      	beq.n	801cfc0 <sbrk_aligned+0x34>
 801cfaa:	1cc4      	adds	r4, r0, #3
 801cfac:	f024 0403 	bic.w	r4, r4, #3
 801cfb0:	42a0      	cmp	r0, r4
 801cfb2:	d007      	beq.n	801cfc4 <sbrk_aligned+0x38>
 801cfb4:	1a21      	subs	r1, r4, r0
 801cfb6:	4628      	mov	r0, r5
 801cfb8:	f000 f93c 	bl	801d234 <_sbrk_r>
 801cfbc:	3001      	adds	r0, #1
 801cfbe:	d101      	bne.n	801cfc4 <sbrk_aligned+0x38>
 801cfc0:	f04f 34ff 	mov.w	r4, #4294967295
 801cfc4:	4620      	mov	r0, r4
 801cfc6:	bd70      	pop	{r4, r5, r6, pc}
 801cfc8:	2000df20 	.word	0x2000df20

0801cfcc <_malloc_r>:
 801cfcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cfd0:	1ccd      	adds	r5, r1, #3
 801cfd2:	f025 0503 	bic.w	r5, r5, #3
 801cfd6:	3508      	adds	r5, #8
 801cfd8:	2d0c      	cmp	r5, #12
 801cfda:	bf38      	it	cc
 801cfdc:	250c      	movcc	r5, #12
 801cfde:	2d00      	cmp	r5, #0
 801cfe0:	4607      	mov	r7, r0
 801cfe2:	db01      	blt.n	801cfe8 <_malloc_r+0x1c>
 801cfe4:	42a9      	cmp	r1, r5
 801cfe6:	d905      	bls.n	801cff4 <_malloc_r+0x28>
 801cfe8:	230c      	movs	r3, #12
 801cfea:	603b      	str	r3, [r7, #0]
 801cfec:	2600      	movs	r6, #0
 801cfee:	4630      	mov	r0, r6
 801cff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cff4:	4e2e      	ldr	r6, [pc, #184]	; (801d0b0 <_malloc_r+0xe4>)
 801cff6:	f000 fadd 	bl	801d5b4 <__malloc_lock>
 801cffa:	6833      	ldr	r3, [r6, #0]
 801cffc:	461c      	mov	r4, r3
 801cffe:	bb34      	cbnz	r4, 801d04e <_malloc_r+0x82>
 801d000:	4629      	mov	r1, r5
 801d002:	4638      	mov	r0, r7
 801d004:	f7ff ffc2 	bl	801cf8c <sbrk_aligned>
 801d008:	1c43      	adds	r3, r0, #1
 801d00a:	4604      	mov	r4, r0
 801d00c:	d14d      	bne.n	801d0aa <_malloc_r+0xde>
 801d00e:	6834      	ldr	r4, [r6, #0]
 801d010:	4626      	mov	r6, r4
 801d012:	2e00      	cmp	r6, #0
 801d014:	d140      	bne.n	801d098 <_malloc_r+0xcc>
 801d016:	6823      	ldr	r3, [r4, #0]
 801d018:	4631      	mov	r1, r6
 801d01a:	4638      	mov	r0, r7
 801d01c:	eb04 0803 	add.w	r8, r4, r3
 801d020:	f000 f908 	bl	801d234 <_sbrk_r>
 801d024:	4580      	cmp	r8, r0
 801d026:	d13a      	bne.n	801d09e <_malloc_r+0xd2>
 801d028:	6821      	ldr	r1, [r4, #0]
 801d02a:	3503      	adds	r5, #3
 801d02c:	1a6d      	subs	r5, r5, r1
 801d02e:	f025 0503 	bic.w	r5, r5, #3
 801d032:	3508      	adds	r5, #8
 801d034:	2d0c      	cmp	r5, #12
 801d036:	bf38      	it	cc
 801d038:	250c      	movcc	r5, #12
 801d03a:	4629      	mov	r1, r5
 801d03c:	4638      	mov	r0, r7
 801d03e:	f7ff ffa5 	bl	801cf8c <sbrk_aligned>
 801d042:	3001      	adds	r0, #1
 801d044:	d02b      	beq.n	801d09e <_malloc_r+0xd2>
 801d046:	6823      	ldr	r3, [r4, #0]
 801d048:	442b      	add	r3, r5
 801d04a:	6023      	str	r3, [r4, #0]
 801d04c:	e00e      	b.n	801d06c <_malloc_r+0xa0>
 801d04e:	6822      	ldr	r2, [r4, #0]
 801d050:	1b52      	subs	r2, r2, r5
 801d052:	d41e      	bmi.n	801d092 <_malloc_r+0xc6>
 801d054:	2a0b      	cmp	r2, #11
 801d056:	d916      	bls.n	801d086 <_malloc_r+0xba>
 801d058:	1961      	adds	r1, r4, r5
 801d05a:	42a3      	cmp	r3, r4
 801d05c:	6025      	str	r5, [r4, #0]
 801d05e:	bf18      	it	ne
 801d060:	6059      	strne	r1, [r3, #4]
 801d062:	6863      	ldr	r3, [r4, #4]
 801d064:	bf08      	it	eq
 801d066:	6031      	streq	r1, [r6, #0]
 801d068:	5162      	str	r2, [r4, r5]
 801d06a:	604b      	str	r3, [r1, #4]
 801d06c:	4638      	mov	r0, r7
 801d06e:	f104 060b 	add.w	r6, r4, #11
 801d072:	f000 faa5 	bl	801d5c0 <__malloc_unlock>
 801d076:	f026 0607 	bic.w	r6, r6, #7
 801d07a:	1d23      	adds	r3, r4, #4
 801d07c:	1af2      	subs	r2, r6, r3
 801d07e:	d0b6      	beq.n	801cfee <_malloc_r+0x22>
 801d080:	1b9b      	subs	r3, r3, r6
 801d082:	50a3      	str	r3, [r4, r2]
 801d084:	e7b3      	b.n	801cfee <_malloc_r+0x22>
 801d086:	6862      	ldr	r2, [r4, #4]
 801d088:	42a3      	cmp	r3, r4
 801d08a:	bf0c      	ite	eq
 801d08c:	6032      	streq	r2, [r6, #0]
 801d08e:	605a      	strne	r2, [r3, #4]
 801d090:	e7ec      	b.n	801d06c <_malloc_r+0xa0>
 801d092:	4623      	mov	r3, r4
 801d094:	6864      	ldr	r4, [r4, #4]
 801d096:	e7b2      	b.n	801cffe <_malloc_r+0x32>
 801d098:	4634      	mov	r4, r6
 801d09a:	6876      	ldr	r6, [r6, #4]
 801d09c:	e7b9      	b.n	801d012 <_malloc_r+0x46>
 801d09e:	230c      	movs	r3, #12
 801d0a0:	603b      	str	r3, [r7, #0]
 801d0a2:	4638      	mov	r0, r7
 801d0a4:	f000 fa8c 	bl	801d5c0 <__malloc_unlock>
 801d0a8:	e7a1      	b.n	801cfee <_malloc_r+0x22>
 801d0aa:	6025      	str	r5, [r4, #0]
 801d0ac:	e7de      	b.n	801d06c <_malloc_r+0xa0>
 801d0ae:	bf00      	nop
 801d0b0:	2000df1c 	.word	0x2000df1c

0801d0b4 <iprintf>:
 801d0b4:	b40f      	push	{r0, r1, r2, r3}
 801d0b6:	4b0a      	ldr	r3, [pc, #40]	; (801d0e0 <iprintf+0x2c>)
 801d0b8:	b513      	push	{r0, r1, r4, lr}
 801d0ba:	681c      	ldr	r4, [r3, #0]
 801d0bc:	b124      	cbz	r4, 801d0c8 <iprintf+0x14>
 801d0be:	69a3      	ldr	r3, [r4, #24]
 801d0c0:	b913      	cbnz	r3, 801d0c8 <iprintf+0x14>
 801d0c2:	4620      	mov	r0, r4
 801d0c4:	f7ff fe0c 	bl	801cce0 <__sinit>
 801d0c8:	ab05      	add	r3, sp, #20
 801d0ca:	9a04      	ldr	r2, [sp, #16]
 801d0cc:	68a1      	ldr	r1, [r4, #8]
 801d0ce:	9301      	str	r3, [sp, #4]
 801d0d0:	4620      	mov	r0, r4
 801d0d2:	f000 fc01 	bl	801d8d8 <_vfiprintf_r>
 801d0d6:	b002      	add	sp, #8
 801d0d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d0dc:	b004      	add	sp, #16
 801d0de:	4770      	bx	lr
 801d0e0:	200002f8 	.word	0x200002f8

0801d0e4 <rand>:
 801d0e4:	4b16      	ldr	r3, [pc, #88]	; (801d140 <rand+0x5c>)
 801d0e6:	b510      	push	{r4, lr}
 801d0e8:	681c      	ldr	r4, [r3, #0]
 801d0ea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801d0ec:	b9b3      	cbnz	r3, 801d11c <rand+0x38>
 801d0ee:	2018      	movs	r0, #24
 801d0f0:	f7ff feb8 	bl	801ce64 <malloc>
 801d0f4:	63a0      	str	r0, [r4, #56]	; 0x38
 801d0f6:	b928      	cbnz	r0, 801d104 <rand+0x20>
 801d0f8:	4602      	mov	r2, r0
 801d0fa:	4b12      	ldr	r3, [pc, #72]	; (801d144 <rand+0x60>)
 801d0fc:	4812      	ldr	r0, [pc, #72]	; (801d148 <rand+0x64>)
 801d0fe:	214e      	movs	r1, #78	; 0x4e
 801d100:	f000 f944 	bl	801d38c <__assert_func>
 801d104:	4a11      	ldr	r2, [pc, #68]	; (801d14c <rand+0x68>)
 801d106:	4b12      	ldr	r3, [pc, #72]	; (801d150 <rand+0x6c>)
 801d108:	e9c0 2300 	strd	r2, r3, [r0]
 801d10c:	4b11      	ldr	r3, [pc, #68]	; (801d154 <rand+0x70>)
 801d10e:	6083      	str	r3, [r0, #8]
 801d110:	230b      	movs	r3, #11
 801d112:	8183      	strh	r3, [r0, #12]
 801d114:	2201      	movs	r2, #1
 801d116:	2300      	movs	r3, #0
 801d118:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801d11c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801d11e:	4a0e      	ldr	r2, [pc, #56]	; (801d158 <rand+0x74>)
 801d120:	6920      	ldr	r0, [r4, #16]
 801d122:	6963      	ldr	r3, [r4, #20]
 801d124:	490d      	ldr	r1, [pc, #52]	; (801d15c <rand+0x78>)
 801d126:	4342      	muls	r2, r0
 801d128:	fb01 2203 	mla	r2, r1, r3, r2
 801d12c:	fba0 0101 	umull	r0, r1, r0, r1
 801d130:	1c43      	adds	r3, r0, #1
 801d132:	eb42 0001 	adc.w	r0, r2, r1
 801d136:	e9c4 3004 	strd	r3, r0, [r4, #16]
 801d13a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801d13e:	bd10      	pop	{r4, pc}
 801d140:	200002f8 	.word	0x200002f8
 801d144:	08021d7c 	.word	0x08021d7c
 801d148:	08021d93 	.word	0x08021d93
 801d14c:	abcd330e 	.word	0xabcd330e
 801d150:	e66d1234 	.word	0xe66d1234
 801d154:	0005deec 	.word	0x0005deec
 801d158:	5851f42d 	.word	0x5851f42d
 801d15c:	4c957f2d 	.word	0x4c957f2d

0801d160 <cleanup_glue>:
 801d160:	b538      	push	{r3, r4, r5, lr}
 801d162:	460c      	mov	r4, r1
 801d164:	6809      	ldr	r1, [r1, #0]
 801d166:	4605      	mov	r5, r0
 801d168:	b109      	cbz	r1, 801d16e <cleanup_glue+0xe>
 801d16a:	f7ff fff9 	bl	801d160 <cleanup_glue>
 801d16e:	4621      	mov	r1, r4
 801d170:	4628      	mov	r0, r5
 801d172:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d176:	f7ff bebd 	b.w	801cef4 <_free_r>
	...

0801d17c <_reclaim_reent>:
 801d17c:	4b2c      	ldr	r3, [pc, #176]	; (801d230 <_reclaim_reent+0xb4>)
 801d17e:	681b      	ldr	r3, [r3, #0]
 801d180:	4283      	cmp	r3, r0
 801d182:	b570      	push	{r4, r5, r6, lr}
 801d184:	4604      	mov	r4, r0
 801d186:	d051      	beq.n	801d22c <_reclaim_reent+0xb0>
 801d188:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801d18a:	b143      	cbz	r3, 801d19e <_reclaim_reent+0x22>
 801d18c:	68db      	ldr	r3, [r3, #12]
 801d18e:	2b00      	cmp	r3, #0
 801d190:	d14a      	bne.n	801d228 <_reclaim_reent+0xac>
 801d192:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d194:	6819      	ldr	r1, [r3, #0]
 801d196:	b111      	cbz	r1, 801d19e <_reclaim_reent+0x22>
 801d198:	4620      	mov	r0, r4
 801d19a:	f7ff feab 	bl	801cef4 <_free_r>
 801d19e:	6961      	ldr	r1, [r4, #20]
 801d1a0:	b111      	cbz	r1, 801d1a8 <_reclaim_reent+0x2c>
 801d1a2:	4620      	mov	r0, r4
 801d1a4:	f7ff fea6 	bl	801cef4 <_free_r>
 801d1a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801d1aa:	b111      	cbz	r1, 801d1b2 <_reclaim_reent+0x36>
 801d1ac:	4620      	mov	r0, r4
 801d1ae:	f7ff fea1 	bl	801cef4 <_free_r>
 801d1b2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801d1b4:	b111      	cbz	r1, 801d1bc <_reclaim_reent+0x40>
 801d1b6:	4620      	mov	r0, r4
 801d1b8:	f7ff fe9c 	bl	801cef4 <_free_r>
 801d1bc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801d1be:	b111      	cbz	r1, 801d1c6 <_reclaim_reent+0x4a>
 801d1c0:	4620      	mov	r0, r4
 801d1c2:	f7ff fe97 	bl	801cef4 <_free_r>
 801d1c6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801d1c8:	b111      	cbz	r1, 801d1d0 <_reclaim_reent+0x54>
 801d1ca:	4620      	mov	r0, r4
 801d1cc:	f7ff fe92 	bl	801cef4 <_free_r>
 801d1d0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801d1d2:	b111      	cbz	r1, 801d1da <_reclaim_reent+0x5e>
 801d1d4:	4620      	mov	r0, r4
 801d1d6:	f7ff fe8d 	bl	801cef4 <_free_r>
 801d1da:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801d1dc:	b111      	cbz	r1, 801d1e4 <_reclaim_reent+0x68>
 801d1de:	4620      	mov	r0, r4
 801d1e0:	f7ff fe88 	bl	801cef4 <_free_r>
 801d1e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d1e6:	b111      	cbz	r1, 801d1ee <_reclaim_reent+0x72>
 801d1e8:	4620      	mov	r0, r4
 801d1ea:	f7ff fe83 	bl	801cef4 <_free_r>
 801d1ee:	69a3      	ldr	r3, [r4, #24]
 801d1f0:	b1e3      	cbz	r3, 801d22c <_reclaim_reent+0xb0>
 801d1f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801d1f4:	4620      	mov	r0, r4
 801d1f6:	4798      	blx	r3
 801d1f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801d1fa:	b1b9      	cbz	r1, 801d22c <_reclaim_reent+0xb0>
 801d1fc:	4620      	mov	r0, r4
 801d1fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d202:	f7ff bfad 	b.w	801d160 <cleanup_glue>
 801d206:	5949      	ldr	r1, [r1, r5]
 801d208:	b941      	cbnz	r1, 801d21c <_reclaim_reent+0xa0>
 801d20a:	3504      	adds	r5, #4
 801d20c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801d20e:	2d80      	cmp	r5, #128	; 0x80
 801d210:	68d9      	ldr	r1, [r3, #12]
 801d212:	d1f8      	bne.n	801d206 <_reclaim_reent+0x8a>
 801d214:	4620      	mov	r0, r4
 801d216:	f7ff fe6d 	bl	801cef4 <_free_r>
 801d21a:	e7ba      	b.n	801d192 <_reclaim_reent+0x16>
 801d21c:	680e      	ldr	r6, [r1, #0]
 801d21e:	4620      	mov	r0, r4
 801d220:	f7ff fe68 	bl	801cef4 <_free_r>
 801d224:	4631      	mov	r1, r6
 801d226:	e7ef      	b.n	801d208 <_reclaim_reent+0x8c>
 801d228:	2500      	movs	r5, #0
 801d22a:	e7ef      	b.n	801d20c <_reclaim_reent+0x90>
 801d22c:	bd70      	pop	{r4, r5, r6, pc}
 801d22e:	bf00      	nop
 801d230:	200002f8 	.word	0x200002f8

0801d234 <_sbrk_r>:
 801d234:	b538      	push	{r3, r4, r5, lr}
 801d236:	4d06      	ldr	r5, [pc, #24]	; (801d250 <_sbrk_r+0x1c>)
 801d238:	2300      	movs	r3, #0
 801d23a:	4604      	mov	r4, r0
 801d23c:	4608      	mov	r0, r1
 801d23e:	602b      	str	r3, [r5, #0]
 801d240:	f7e8 f826 	bl	8005290 <_sbrk>
 801d244:	1c43      	adds	r3, r0, #1
 801d246:	d102      	bne.n	801d24e <_sbrk_r+0x1a>
 801d248:	682b      	ldr	r3, [r5, #0]
 801d24a:	b103      	cbz	r3, 801d24e <_sbrk_r+0x1a>
 801d24c:	6023      	str	r3, [r4, #0]
 801d24e:	bd38      	pop	{r3, r4, r5, pc}
 801d250:	2000df24 	.word	0x2000df24

0801d254 <siprintf>:
 801d254:	b40e      	push	{r1, r2, r3}
 801d256:	b500      	push	{lr}
 801d258:	b09c      	sub	sp, #112	; 0x70
 801d25a:	ab1d      	add	r3, sp, #116	; 0x74
 801d25c:	9002      	str	r0, [sp, #8]
 801d25e:	9006      	str	r0, [sp, #24]
 801d260:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801d264:	4809      	ldr	r0, [pc, #36]	; (801d28c <siprintf+0x38>)
 801d266:	9107      	str	r1, [sp, #28]
 801d268:	9104      	str	r1, [sp, #16]
 801d26a:	4909      	ldr	r1, [pc, #36]	; (801d290 <siprintf+0x3c>)
 801d26c:	f853 2b04 	ldr.w	r2, [r3], #4
 801d270:	9105      	str	r1, [sp, #20]
 801d272:	6800      	ldr	r0, [r0, #0]
 801d274:	9301      	str	r3, [sp, #4]
 801d276:	a902      	add	r1, sp, #8
 801d278:	f000 fa04 	bl	801d684 <_svfiprintf_r>
 801d27c:	9b02      	ldr	r3, [sp, #8]
 801d27e:	2200      	movs	r2, #0
 801d280:	701a      	strb	r2, [r3, #0]
 801d282:	b01c      	add	sp, #112	; 0x70
 801d284:	f85d eb04 	ldr.w	lr, [sp], #4
 801d288:	b003      	add	sp, #12
 801d28a:	4770      	bx	lr
 801d28c:	200002f8 	.word	0x200002f8
 801d290:	ffff0208 	.word	0xffff0208

0801d294 <__sread>:
 801d294:	b510      	push	{r4, lr}
 801d296:	460c      	mov	r4, r1
 801d298:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d29c:	f000 fde0 	bl	801de60 <_read_r>
 801d2a0:	2800      	cmp	r0, #0
 801d2a2:	bfab      	itete	ge
 801d2a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d2a6:	89a3      	ldrhlt	r3, [r4, #12]
 801d2a8:	181b      	addge	r3, r3, r0
 801d2aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d2ae:	bfac      	ite	ge
 801d2b0:	6563      	strge	r3, [r4, #84]	; 0x54
 801d2b2:	81a3      	strhlt	r3, [r4, #12]
 801d2b4:	bd10      	pop	{r4, pc}

0801d2b6 <__swrite>:
 801d2b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d2ba:	461f      	mov	r7, r3
 801d2bc:	898b      	ldrh	r3, [r1, #12]
 801d2be:	05db      	lsls	r3, r3, #23
 801d2c0:	4605      	mov	r5, r0
 801d2c2:	460c      	mov	r4, r1
 801d2c4:	4616      	mov	r6, r2
 801d2c6:	d505      	bpl.n	801d2d4 <__swrite+0x1e>
 801d2c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d2cc:	2302      	movs	r3, #2
 801d2ce:	2200      	movs	r2, #0
 801d2d0:	f000 f95e 	bl	801d590 <_lseek_r>
 801d2d4:	89a3      	ldrh	r3, [r4, #12]
 801d2d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d2da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d2de:	81a3      	strh	r3, [r4, #12]
 801d2e0:	4632      	mov	r2, r6
 801d2e2:	463b      	mov	r3, r7
 801d2e4:	4628      	mov	r0, r5
 801d2e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d2ea:	f000 b83d 	b.w	801d368 <_write_r>

0801d2ee <__sseek>:
 801d2ee:	b510      	push	{r4, lr}
 801d2f0:	460c      	mov	r4, r1
 801d2f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d2f6:	f000 f94b 	bl	801d590 <_lseek_r>
 801d2fa:	1c43      	adds	r3, r0, #1
 801d2fc:	89a3      	ldrh	r3, [r4, #12]
 801d2fe:	bf15      	itete	ne
 801d300:	6560      	strne	r0, [r4, #84]	; 0x54
 801d302:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d306:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d30a:	81a3      	strheq	r3, [r4, #12]
 801d30c:	bf18      	it	ne
 801d30e:	81a3      	strhne	r3, [r4, #12]
 801d310:	bd10      	pop	{r4, pc}

0801d312 <__sclose>:
 801d312:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d316:	f000 b857 	b.w	801d3c8 <_close_r>

0801d31a <strncmp>:
 801d31a:	b510      	push	{r4, lr}
 801d31c:	b17a      	cbz	r2, 801d33e <strncmp+0x24>
 801d31e:	4603      	mov	r3, r0
 801d320:	3901      	subs	r1, #1
 801d322:	1884      	adds	r4, r0, r2
 801d324:	f813 0b01 	ldrb.w	r0, [r3], #1
 801d328:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801d32c:	4290      	cmp	r0, r2
 801d32e:	d101      	bne.n	801d334 <strncmp+0x1a>
 801d330:	42a3      	cmp	r3, r4
 801d332:	d101      	bne.n	801d338 <strncmp+0x1e>
 801d334:	1a80      	subs	r0, r0, r2
 801d336:	bd10      	pop	{r4, pc}
 801d338:	2800      	cmp	r0, #0
 801d33a:	d1f3      	bne.n	801d324 <strncmp+0xa>
 801d33c:	e7fa      	b.n	801d334 <strncmp+0x1a>
 801d33e:	4610      	mov	r0, r2
 801d340:	e7f9      	b.n	801d336 <strncmp+0x1c>

0801d342 <strncpy>:
 801d342:	b510      	push	{r4, lr}
 801d344:	3901      	subs	r1, #1
 801d346:	4603      	mov	r3, r0
 801d348:	b132      	cbz	r2, 801d358 <strncpy+0x16>
 801d34a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d34e:	f803 4b01 	strb.w	r4, [r3], #1
 801d352:	3a01      	subs	r2, #1
 801d354:	2c00      	cmp	r4, #0
 801d356:	d1f7      	bne.n	801d348 <strncpy+0x6>
 801d358:	441a      	add	r2, r3
 801d35a:	2100      	movs	r1, #0
 801d35c:	4293      	cmp	r3, r2
 801d35e:	d100      	bne.n	801d362 <strncpy+0x20>
 801d360:	bd10      	pop	{r4, pc}
 801d362:	f803 1b01 	strb.w	r1, [r3], #1
 801d366:	e7f9      	b.n	801d35c <strncpy+0x1a>

0801d368 <_write_r>:
 801d368:	b538      	push	{r3, r4, r5, lr}
 801d36a:	4d07      	ldr	r5, [pc, #28]	; (801d388 <_write_r+0x20>)
 801d36c:	4604      	mov	r4, r0
 801d36e:	4608      	mov	r0, r1
 801d370:	4611      	mov	r1, r2
 801d372:	2200      	movs	r2, #0
 801d374:	602a      	str	r2, [r5, #0]
 801d376:	461a      	mov	r2, r3
 801d378:	f7e7 ff39 	bl	80051ee <_write>
 801d37c:	1c43      	adds	r3, r0, #1
 801d37e:	d102      	bne.n	801d386 <_write_r+0x1e>
 801d380:	682b      	ldr	r3, [r5, #0]
 801d382:	b103      	cbz	r3, 801d386 <_write_r+0x1e>
 801d384:	6023      	str	r3, [r4, #0]
 801d386:	bd38      	pop	{r3, r4, r5, pc}
 801d388:	2000df24 	.word	0x2000df24

0801d38c <__assert_func>:
 801d38c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d38e:	4614      	mov	r4, r2
 801d390:	461a      	mov	r2, r3
 801d392:	4b09      	ldr	r3, [pc, #36]	; (801d3b8 <__assert_func+0x2c>)
 801d394:	681b      	ldr	r3, [r3, #0]
 801d396:	4605      	mov	r5, r0
 801d398:	68d8      	ldr	r0, [r3, #12]
 801d39a:	b14c      	cbz	r4, 801d3b0 <__assert_func+0x24>
 801d39c:	4b07      	ldr	r3, [pc, #28]	; (801d3bc <__assert_func+0x30>)
 801d39e:	9100      	str	r1, [sp, #0]
 801d3a0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d3a4:	4906      	ldr	r1, [pc, #24]	; (801d3c0 <__assert_func+0x34>)
 801d3a6:	462b      	mov	r3, r5
 801d3a8:	f000 f8e0 	bl	801d56c <fiprintf>
 801d3ac:	f000 fe2a 	bl	801e004 <abort>
 801d3b0:	4b04      	ldr	r3, [pc, #16]	; (801d3c4 <__assert_func+0x38>)
 801d3b2:	461c      	mov	r4, r3
 801d3b4:	e7f3      	b.n	801d39e <__assert_func+0x12>
 801d3b6:	bf00      	nop
 801d3b8:	200002f8 	.word	0x200002f8
 801d3bc:	08021dee 	.word	0x08021dee
 801d3c0:	08021dfb 	.word	0x08021dfb
 801d3c4:	08021e29 	.word	0x08021e29

0801d3c8 <_close_r>:
 801d3c8:	b538      	push	{r3, r4, r5, lr}
 801d3ca:	4d06      	ldr	r5, [pc, #24]	; (801d3e4 <_close_r+0x1c>)
 801d3cc:	2300      	movs	r3, #0
 801d3ce:	4604      	mov	r4, r0
 801d3d0:	4608      	mov	r0, r1
 801d3d2:	602b      	str	r3, [r5, #0]
 801d3d4:	f7e7 ff27 	bl	8005226 <_close>
 801d3d8:	1c43      	adds	r3, r0, #1
 801d3da:	d102      	bne.n	801d3e2 <_close_r+0x1a>
 801d3dc:	682b      	ldr	r3, [r5, #0]
 801d3de:	b103      	cbz	r3, 801d3e2 <_close_r+0x1a>
 801d3e0:	6023      	str	r3, [r4, #0]
 801d3e2:	bd38      	pop	{r3, r4, r5, pc}
 801d3e4:	2000df24 	.word	0x2000df24

0801d3e8 <__sflush_r>:
 801d3e8:	898a      	ldrh	r2, [r1, #12]
 801d3ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d3ee:	4605      	mov	r5, r0
 801d3f0:	0710      	lsls	r0, r2, #28
 801d3f2:	460c      	mov	r4, r1
 801d3f4:	d458      	bmi.n	801d4a8 <__sflush_r+0xc0>
 801d3f6:	684b      	ldr	r3, [r1, #4]
 801d3f8:	2b00      	cmp	r3, #0
 801d3fa:	dc05      	bgt.n	801d408 <__sflush_r+0x20>
 801d3fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d3fe:	2b00      	cmp	r3, #0
 801d400:	dc02      	bgt.n	801d408 <__sflush_r+0x20>
 801d402:	2000      	movs	r0, #0
 801d404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d408:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d40a:	2e00      	cmp	r6, #0
 801d40c:	d0f9      	beq.n	801d402 <__sflush_r+0x1a>
 801d40e:	2300      	movs	r3, #0
 801d410:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d414:	682f      	ldr	r7, [r5, #0]
 801d416:	602b      	str	r3, [r5, #0]
 801d418:	d032      	beq.n	801d480 <__sflush_r+0x98>
 801d41a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d41c:	89a3      	ldrh	r3, [r4, #12]
 801d41e:	075a      	lsls	r2, r3, #29
 801d420:	d505      	bpl.n	801d42e <__sflush_r+0x46>
 801d422:	6863      	ldr	r3, [r4, #4]
 801d424:	1ac0      	subs	r0, r0, r3
 801d426:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d428:	b10b      	cbz	r3, 801d42e <__sflush_r+0x46>
 801d42a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d42c:	1ac0      	subs	r0, r0, r3
 801d42e:	2300      	movs	r3, #0
 801d430:	4602      	mov	r2, r0
 801d432:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d434:	6a21      	ldr	r1, [r4, #32]
 801d436:	4628      	mov	r0, r5
 801d438:	47b0      	blx	r6
 801d43a:	1c43      	adds	r3, r0, #1
 801d43c:	89a3      	ldrh	r3, [r4, #12]
 801d43e:	d106      	bne.n	801d44e <__sflush_r+0x66>
 801d440:	6829      	ldr	r1, [r5, #0]
 801d442:	291d      	cmp	r1, #29
 801d444:	d82c      	bhi.n	801d4a0 <__sflush_r+0xb8>
 801d446:	4a2a      	ldr	r2, [pc, #168]	; (801d4f0 <__sflush_r+0x108>)
 801d448:	40ca      	lsrs	r2, r1
 801d44a:	07d6      	lsls	r6, r2, #31
 801d44c:	d528      	bpl.n	801d4a0 <__sflush_r+0xb8>
 801d44e:	2200      	movs	r2, #0
 801d450:	6062      	str	r2, [r4, #4]
 801d452:	04d9      	lsls	r1, r3, #19
 801d454:	6922      	ldr	r2, [r4, #16]
 801d456:	6022      	str	r2, [r4, #0]
 801d458:	d504      	bpl.n	801d464 <__sflush_r+0x7c>
 801d45a:	1c42      	adds	r2, r0, #1
 801d45c:	d101      	bne.n	801d462 <__sflush_r+0x7a>
 801d45e:	682b      	ldr	r3, [r5, #0]
 801d460:	b903      	cbnz	r3, 801d464 <__sflush_r+0x7c>
 801d462:	6560      	str	r0, [r4, #84]	; 0x54
 801d464:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d466:	602f      	str	r7, [r5, #0]
 801d468:	2900      	cmp	r1, #0
 801d46a:	d0ca      	beq.n	801d402 <__sflush_r+0x1a>
 801d46c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d470:	4299      	cmp	r1, r3
 801d472:	d002      	beq.n	801d47a <__sflush_r+0x92>
 801d474:	4628      	mov	r0, r5
 801d476:	f7ff fd3d 	bl	801cef4 <_free_r>
 801d47a:	2000      	movs	r0, #0
 801d47c:	6360      	str	r0, [r4, #52]	; 0x34
 801d47e:	e7c1      	b.n	801d404 <__sflush_r+0x1c>
 801d480:	6a21      	ldr	r1, [r4, #32]
 801d482:	2301      	movs	r3, #1
 801d484:	4628      	mov	r0, r5
 801d486:	47b0      	blx	r6
 801d488:	1c41      	adds	r1, r0, #1
 801d48a:	d1c7      	bne.n	801d41c <__sflush_r+0x34>
 801d48c:	682b      	ldr	r3, [r5, #0]
 801d48e:	2b00      	cmp	r3, #0
 801d490:	d0c4      	beq.n	801d41c <__sflush_r+0x34>
 801d492:	2b1d      	cmp	r3, #29
 801d494:	d001      	beq.n	801d49a <__sflush_r+0xb2>
 801d496:	2b16      	cmp	r3, #22
 801d498:	d101      	bne.n	801d49e <__sflush_r+0xb6>
 801d49a:	602f      	str	r7, [r5, #0]
 801d49c:	e7b1      	b.n	801d402 <__sflush_r+0x1a>
 801d49e:	89a3      	ldrh	r3, [r4, #12]
 801d4a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d4a4:	81a3      	strh	r3, [r4, #12]
 801d4a6:	e7ad      	b.n	801d404 <__sflush_r+0x1c>
 801d4a8:	690f      	ldr	r7, [r1, #16]
 801d4aa:	2f00      	cmp	r7, #0
 801d4ac:	d0a9      	beq.n	801d402 <__sflush_r+0x1a>
 801d4ae:	0793      	lsls	r3, r2, #30
 801d4b0:	680e      	ldr	r6, [r1, #0]
 801d4b2:	bf08      	it	eq
 801d4b4:	694b      	ldreq	r3, [r1, #20]
 801d4b6:	600f      	str	r7, [r1, #0]
 801d4b8:	bf18      	it	ne
 801d4ba:	2300      	movne	r3, #0
 801d4bc:	eba6 0807 	sub.w	r8, r6, r7
 801d4c0:	608b      	str	r3, [r1, #8]
 801d4c2:	f1b8 0f00 	cmp.w	r8, #0
 801d4c6:	dd9c      	ble.n	801d402 <__sflush_r+0x1a>
 801d4c8:	6a21      	ldr	r1, [r4, #32]
 801d4ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d4cc:	4643      	mov	r3, r8
 801d4ce:	463a      	mov	r2, r7
 801d4d0:	4628      	mov	r0, r5
 801d4d2:	47b0      	blx	r6
 801d4d4:	2800      	cmp	r0, #0
 801d4d6:	dc06      	bgt.n	801d4e6 <__sflush_r+0xfe>
 801d4d8:	89a3      	ldrh	r3, [r4, #12]
 801d4da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d4de:	81a3      	strh	r3, [r4, #12]
 801d4e0:	f04f 30ff 	mov.w	r0, #4294967295
 801d4e4:	e78e      	b.n	801d404 <__sflush_r+0x1c>
 801d4e6:	4407      	add	r7, r0
 801d4e8:	eba8 0800 	sub.w	r8, r8, r0
 801d4ec:	e7e9      	b.n	801d4c2 <__sflush_r+0xda>
 801d4ee:	bf00      	nop
 801d4f0:	20400001 	.word	0x20400001

0801d4f4 <_fflush_r>:
 801d4f4:	b538      	push	{r3, r4, r5, lr}
 801d4f6:	690b      	ldr	r3, [r1, #16]
 801d4f8:	4605      	mov	r5, r0
 801d4fa:	460c      	mov	r4, r1
 801d4fc:	b913      	cbnz	r3, 801d504 <_fflush_r+0x10>
 801d4fe:	2500      	movs	r5, #0
 801d500:	4628      	mov	r0, r5
 801d502:	bd38      	pop	{r3, r4, r5, pc}
 801d504:	b118      	cbz	r0, 801d50e <_fflush_r+0x1a>
 801d506:	6983      	ldr	r3, [r0, #24]
 801d508:	b90b      	cbnz	r3, 801d50e <_fflush_r+0x1a>
 801d50a:	f7ff fbe9 	bl	801cce0 <__sinit>
 801d50e:	4b14      	ldr	r3, [pc, #80]	; (801d560 <_fflush_r+0x6c>)
 801d510:	429c      	cmp	r4, r3
 801d512:	d11b      	bne.n	801d54c <_fflush_r+0x58>
 801d514:	686c      	ldr	r4, [r5, #4]
 801d516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d51a:	2b00      	cmp	r3, #0
 801d51c:	d0ef      	beq.n	801d4fe <_fflush_r+0xa>
 801d51e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d520:	07d0      	lsls	r0, r2, #31
 801d522:	d404      	bmi.n	801d52e <_fflush_r+0x3a>
 801d524:	0599      	lsls	r1, r3, #22
 801d526:	d402      	bmi.n	801d52e <_fflush_r+0x3a>
 801d528:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d52a:	f7e8 fa05 	bl	8005938 <__retarget_lock_acquire_recursive>
 801d52e:	4628      	mov	r0, r5
 801d530:	4621      	mov	r1, r4
 801d532:	f7ff ff59 	bl	801d3e8 <__sflush_r>
 801d536:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d538:	07da      	lsls	r2, r3, #31
 801d53a:	4605      	mov	r5, r0
 801d53c:	d4e0      	bmi.n	801d500 <_fflush_r+0xc>
 801d53e:	89a3      	ldrh	r3, [r4, #12]
 801d540:	059b      	lsls	r3, r3, #22
 801d542:	d4dd      	bmi.n	801d500 <_fflush_r+0xc>
 801d544:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d546:	f7e8 fa0b 	bl	8005960 <__retarget_lock_release_recursive>
 801d54a:	e7d9      	b.n	801d500 <_fflush_r+0xc>
 801d54c:	4b05      	ldr	r3, [pc, #20]	; (801d564 <_fflush_r+0x70>)
 801d54e:	429c      	cmp	r4, r3
 801d550:	d101      	bne.n	801d556 <_fflush_r+0x62>
 801d552:	68ac      	ldr	r4, [r5, #8]
 801d554:	e7df      	b.n	801d516 <_fflush_r+0x22>
 801d556:	4b04      	ldr	r3, [pc, #16]	; (801d568 <_fflush_r+0x74>)
 801d558:	429c      	cmp	r4, r3
 801d55a:	bf08      	it	eq
 801d55c:	68ec      	ldreq	r4, [r5, #12]
 801d55e:	e7da      	b.n	801d516 <_fflush_r+0x22>
 801d560:	08021d38 	.word	0x08021d38
 801d564:	08021d58 	.word	0x08021d58
 801d568:	08021d18 	.word	0x08021d18

0801d56c <fiprintf>:
 801d56c:	b40e      	push	{r1, r2, r3}
 801d56e:	b503      	push	{r0, r1, lr}
 801d570:	4601      	mov	r1, r0
 801d572:	ab03      	add	r3, sp, #12
 801d574:	4805      	ldr	r0, [pc, #20]	; (801d58c <fiprintf+0x20>)
 801d576:	f853 2b04 	ldr.w	r2, [r3], #4
 801d57a:	6800      	ldr	r0, [r0, #0]
 801d57c:	9301      	str	r3, [sp, #4]
 801d57e:	f000 f9ab 	bl	801d8d8 <_vfiprintf_r>
 801d582:	b002      	add	sp, #8
 801d584:	f85d eb04 	ldr.w	lr, [sp], #4
 801d588:	b003      	add	sp, #12
 801d58a:	4770      	bx	lr
 801d58c:	200002f8 	.word	0x200002f8

0801d590 <_lseek_r>:
 801d590:	b538      	push	{r3, r4, r5, lr}
 801d592:	4d07      	ldr	r5, [pc, #28]	; (801d5b0 <_lseek_r+0x20>)
 801d594:	4604      	mov	r4, r0
 801d596:	4608      	mov	r0, r1
 801d598:	4611      	mov	r1, r2
 801d59a:	2200      	movs	r2, #0
 801d59c:	602a      	str	r2, [r5, #0]
 801d59e:	461a      	mov	r2, r3
 801d5a0:	f7e7 fe68 	bl	8005274 <_lseek>
 801d5a4:	1c43      	adds	r3, r0, #1
 801d5a6:	d102      	bne.n	801d5ae <_lseek_r+0x1e>
 801d5a8:	682b      	ldr	r3, [r5, #0]
 801d5aa:	b103      	cbz	r3, 801d5ae <_lseek_r+0x1e>
 801d5ac:	6023      	str	r3, [r4, #0]
 801d5ae:	bd38      	pop	{r3, r4, r5, pc}
 801d5b0:	2000df24 	.word	0x2000df24

0801d5b4 <__malloc_lock>:
 801d5b4:	4801      	ldr	r0, [pc, #4]	; (801d5bc <__malloc_lock+0x8>)
 801d5b6:	f7e8 b9bf 	b.w	8005938 <__retarget_lock_acquire_recursive>
 801d5ba:	bf00      	nop
 801d5bc:	20001060 	.word	0x20001060

0801d5c0 <__malloc_unlock>:
 801d5c0:	4801      	ldr	r0, [pc, #4]	; (801d5c8 <__malloc_unlock+0x8>)
 801d5c2:	f7e8 b9cd 	b.w	8005960 <__retarget_lock_release_recursive>
 801d5c6:	bf00      	nop
 801d5c8:	20001060 	.word	0x20001060

0801d5cc <__ssputs_r>:
 801d5cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d5d0:	688e      	ldr	r6, [r1, #8]
 801d5d2:	429e      	cmp	r6, r3
 801d5d4:	4682      	mov	sl, r0
 801d5d6:	460c      	mov	r4, r1
 801d5d8:	4690      	mov	r8, r2
 801d5da:	461f      	mov	r7, r3
 801d5dc:	d838      	bhi.n	801d650 <__ssputs_r+0x84>
 801d5de:	898a      	ldrh	r2, [r1, #12]
 801d5e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801d5e4:	d032      	beq.n	801d64c <__ssputs_r+0x80>
 801d5e6:	6825      	ldr	r5, [r4, #0]
 801d5e8:	6909      	ldr	r1, [r1, #16]
 801d5ea:	eba5 0901 	sub.w	r9, r5, r1
 801d5ee:	6965      	ldr	r5, [r4, #20]
 801d5f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801d5f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801d5f8:	3301      	adds	r3, #1
 801d5fa:	444b      	add	r3, r9
 801d5fc:	106d      	asrs	r5, r5, #1
 801d5fe:	429d      	cmp	r5, r3
 801d600:	bf38      	it	cc
 801d602:	461d      	movcc	r5, r3
 801d604:	0553      	lsls	r3, r2, #21
 801d606:	d531      	bpl.n	801d66c <__ssputs_r+0xa0>
 801d608:	4629      	mov	r1, r5
 801d60a:	f7ff fcdf 	bl	801cfcc <_malloc_r>
 801d60e:	4606      	mov	r6, r0
 801d610:	b950      	cbnz	r0, 801d628 <__ssputs_r+0x5c>
 801d612:	230c      	movs	r3, #12
 801d614:	f8ca 3000 	str.w	r3, [sl]
 801d618:	89a3      	ldrh	r3, [r4, #12]
 801d61a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d61e:	81a3      	strh	r3, [r4, #12]
 801d620:	f04f 30ff 	mov.w	r0, #4294967295
 801d624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d628:	6921      	ldr	r1, [r4, #16]
 801d62a:	464a      	mov	r2, r9
 801d62c:	f7ff fc32 	bl	801ce94 <memcpy>
 801d630:	89a3      	ldrh	r3, [r4, #12]
 801d632:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801d636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d63a:	81a3      	strh	r3, [r4, #12]
 801d63c:	6126      	str	r6, [r4, #16]
 801d63e:	6165      	str	r5, [r4, #20]
 801d640:	444e      	add	r6, r9
 801d642:	eba5 0509 	sub.w	r5, r5, r9
 801d646:	6026      	str	r6, [r4, #0]
 801d648:	60a5      	str	r5, [r4, #8]
 801d64a:	463e      	mov	r6, r7
 801d64c:	42be      	cmp	r6, r7
 801d64e:	d900      	bls.n	801d652 <__ssputs_r+0x86>
 801d650:	463e      	mov	r6, r7
 801d652:	6820      	ldr	r0, [r4, #0]
 801d654:	4632      	mov	r2, r6
 801d656:	4641      	mov	r1, r8
 801d658:	f7ff fc2a 	bl	801ceb0 <memmove>
 801d65c:	68a3      	ldr	r3, [r4, #8]
 801d65e:	1b9b      	subs	r3, r3, r6
 801d660:	60a3      	str	r3, [r4, #8]
 801d662:	6823      	ldr	r3, [r4, #0]
 801d664:	4433      	add	r3, r6
 801d666:	6023      	str	r3, [r4, #0]
 801d668:	2000      	movs	r0, #0
 801d66a:	e7db      	b.n	801d624 <__ssputs_r+0x58>
 801d66c:	462a      	mov	r2, r5
 801d66e:	f000 fd35 	bl	801e0dc <_realloc_r>
 801d672:	4606      	mov	r6, r0
 801d674:	2800      	cmp	r0, #0
 801d676:	d1e1      	bne.n	801d63c <__ssputs_r+0x70>
 801d678:	6921      	ldr	r1, [r4, #16]
 801d67a:	4650      	mov	r0, sl
 801d67c:	f7ff fc3a 	bl	801cef4 <_free_r>
 801d680:	e7c7      	b.n	801d612 <__ssputs_r+0x46>
	...

0801d684 <_svfiprintf_r>:
 801d684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d688:	4698      	mov	r8, r3
 801d68a:	898b      	ldrh	r3, [r1, #12]
 801d68c:	061b      	lsls	r3, r3, #24
 801d68e:	b09d      	sub	sp, #116	; 0x74
 801d690:	4607      	mov	r7, r0
 801d692:	460d      	mov	r5, r1
 801d694:	4614      	mov	r4, r2
 801d696:	d50e      	bpl.n	801d6b6 <_svfiprintf_r+0x32>
 801d698:	690b      	ldr	r3, [r1, #16]
 801d69a:	b963      	cbnz	r3, 801d6b6 <_svfiprintf_r+0x32>
 801d69c:	2140      	movs	r1, #64	; 0x40
 801d69e:	f7ff fc95 	bl	801cfcc <_malloc_r>
 801d6a2:	6028      	str	r0, [r5, #0]
 801d6a4:	6128      	str	r0, [r5, #16]
 801d6a6:	b920      	cbnz	r0, 801d6b2 <_svfiprintf_r+0x2e>
 801d6a8:	230c      	movs	r3, #12
 801d6aa:	603b      	str	r3, [r7, #0]
 801d6ac:	f04f 30ff 	mov.w	r0, #4294967295
 801d6b0:	e0d1      	b.n	801d856 <_svfiprintf_r+0x1d2>
 801d6b2:	2340      	movs	r3, #64	; 0x40
 801d6b4:	616b      	str	r3, [r5, #20]
 801d6b6:	2300      	movs	r3, #0
 801d6b8:	9309      	str	r3, [sp, #36]	; 0x24
 801d6ba:	2320      	movs	r3, #32
 801d6bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d6c0:	f8cd 800c 	str.w	r8, [sp, #12]
 801d6c4:	2330      	movs	r3, #48	; 0x30
 801d6c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801d870 <_svfiprintf_r+0x1ec>
 801d6ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d6ce:	f04f 0901 	mov.w	r9, #1
 801d6d2:	4623      	mov	r3, r4
 801d6d4:	469a      	mov	sl, r3
 801d6d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d6da:	b10a      	cbz	r2, 801d6e0 <_svfiprintf_r+0x5c>
 801d6dc:	2a25      	cmp	r2, #37	; 0x25
 801d6de:	d1f9      	bne.n	801d6d4 <_svfiprintf_r+0x50>
 801d6e0:	ebba 0b04 	subs.w	fp, sl, r4
 801d6e4:	d00b      	beq.n	801d6fe <_svfiprintf_r+0x7a>
 801d6e6:	465b      	mov	r3, fp
 801d6e8:	4622      	mov	r2, r4
 801d6ea:	4629      	mov	r1, r5
 801d6ec:	4638      	mov	r0, r7
 801d6ee:	f7ff ff6d 	bl	801d5cc <__ssputs_r>
 801d6f2:	3001      	adds	r0, #1
 801d6f4:	f000 80aa 	beq.w	801d84c <_svfiprintf_r+0x1c8>
 801d6f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d6fa:	445a      	add	r2, fp
 801d6fc:	9209      	str	r2, [sp, #36]	; 0x24
 801d6fe:	f89a 3000 	ldrb.w	r3, [sl]
 801d702:	2b00      	cmp	r3, #0
 801d704:	f000 80a2 	beq.w	801d84c <_svfiprintf_r+0x1c8>
 801d708:	2300      	movs	r3, #0
 801d70a:	f04f 32ff 	mov.w	r2, #4294967295
 801d70e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d712:	f10a 0a01 	add.w	sl, sl, #1
 801d716:	9304      	str	r3, [sp, #16]
 801d718:	9307      	str	r3, [sp, #28]
 801d71a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d71e:	931a      	str	r3, [sp, #104]	; 0x68
 801d720:	4654      	mov	r4, sl
 801d722:	2205      	movs	r2, #5
 801d724:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d728:	4851      	ldr	r0, [pc, #324]	; (801d870 <_svfiprintf_r+0x1ec>)
 801d72a:	f7e2 fd59 	bl	80001e0 <memchr>
 801d72e:	9a04      	ldr	r2, [sp, #16]
 801d730:	b9d8      	cbnz	r0, 801d76a <_svfiprintf_r+0xe6>
 801d732:	06d0      	lsls	r0, r2, #27
 801d734:	bf44      	itt	mi
 801d736:	2320      	movmi	r3, #32
 801d738:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d73c:	0711      	lsls	r1, r2, #28
 801d73e:	bf44      	itt	mi
 801d740:	232b      	movmi	r3, #43	; 0x2b
 801d742:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d746:	f89a 3000 	ldrb.w	r3, [sl]
 801d74a:	2b2a      	cmp	r3, #42	; 0x2a
 801d74c:	d015      	beq.n	801d77a <_svfiprintf_r+0xf6>
 801d74e:	9a07      	ldr	r2, [sp, #28]
 801d750:	4654      	mov	r4, sl
 801d752:	2000      	movs	r0, #0
 801d754:	f04f 0c0a 	mov.w	ip, #10
 801d758:	4621      	mov	r1, r4
 801d75a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d75e:	3b30      	subs	r3, #48	; 0x30
 801d760:	2b09      	cmp	r3, #9
 801d762:	d94e      	bls.n	801d802 <_svfiprintf_r+0x17e>
 801d764:	b1b0      	cbz	r0, 801d794 <_svfiprintf_r+0x110>
 801d766:	9207      	str	r2, [sp, #28]
 801d768:	e014      	b.n	801d794 <_svfiprintf_r+0x110>
 801d76a:	eba0 0308 	sub.w	r3, r0, r8
 801d76e:	fa09 f303 	lsl.w	r3, r9, r3
 801d772:	4313      	orrs	r3, r2
 801d774:	9304      	str	r3, [sp, #16]
 801d776:	46a2      	mov	sl, r4
 801d778:	e7d2      	b.n	801d720 <_svfiprintf_r+0x9c>
 801d77a:	9b03      	ldr	r3, [sp, #12]
 801d77c:	1d19      	adds	r1, r3, #4
 801d77e:	681b      	ldr	r3, [r3, #0]
 801d780:	9103      	str	r1, [sp, #12]
 801d782:	2b00      	cmp	r3, #0
 801d784:	bfbb      	ittet	lt
 801d786:	425b      	neglt	r3, r3
 801d788:	f042 0202 	orrlt.w	r2, r2, #2
 801d78c:	9307      	strge	r3, [sp, #28]
 801d78e:	9307      	strlt	r3, [sp, #28]
 801d790:	bfb8      	it	lt
 801d792:	9204      	strlt	r2, [sp, #16]
 801d794:	7823      	ldrb	r3, [r4, #0]
 801d796:	2b2e      	cmp	r3, #46	; 0x2e
 801d798:	d10c      	bne.n	801d7b4 <_svfiprintf_r+0x130>
 801d79a:	7863      	ldrb	r3, [r4, #1]
 801d79c:	2b2a      	cmp	r3, #42	; 0x2a
 801d79e:	d135      	bne.n	801d80c <_svfiprintf_r+0x188>
 801d7a0:	9b03      	ldr	r3, [sp, #12]
 801d7a2:	1d1a      	adds	r2, r3, #4
 801d7a4:	681b      	ldr	r3, [r3, #0]
 801d7a6:	9203      	str	r2, [sp, #12]
 801d7a8:	2b00      	cmp	r3, #0
 801d7aa:	bfb8      	it	lt
 801d7ac:	f04f 33ff 	movlt.w	r3, #4294967295
 801d7b0:	3402      	adds	r4, #2
 801d7b2:	9305      	str	r3, [sp, #20]
 801d7b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801d880 <_svfiprintf_r+0x1fc>
 801d7b8:	7821      	ldrb	r1, [r4, #0]
 801d7ba:	2203      	movs	r2, #3
 801d7bc:	4650      	mov	r0, sl
 801d7be:	f7e2 fd0f 	bl	80001e0 <memchr>
 801d7c2:	b140      	cbz	r0, 801d7d6 <_svfiprintf_r+0x152>
 801d7c4:	2340      	movs	r3, #64	; 0x40
 801d7c6:	eba0 000a 	sub.w	r0, r0, sl
 801d7ca:	fa03 f000 	lsl.w	r0, r3, r0
 801d7ce:	9b04      	ldr	r3, [sp, #16]
 801d7d0:	4303      	orrs	r3, r0
 801d7d2:	3401      	adds	r4, #1
 801d7d4:	9304      	str	r3, [sp, #16]
 801d7d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d7da:	4826      	ldr	r0, [pc, #152]	; (801d874 <_svfiprintf_r+0x1f0>)
 801d7dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d7e0:	2206      	movs	r2, #6
 801d7e2:	f7e2 fcfd 	bl	80001e0 <memchr>
 801d7e6:	2800      	cmp	r0, #0
 801d7e8:	d038      	beq.n	801d85c <_svfiprintf_r+0x1d8>
 801d7ea:	4b23      	ldr	r3, [pc, #140]	; (801d878 <_svfiprintf_r+0x1f4>)
 801d7ec:	bb1b      	cbnz	r3, 801d836 <_svfiprintf_r+0x1b2>
 801d7ee:	9b03      	ldr	r3, [sp, #12]
 801d7f0:	3307      	adds	r3, #7
 801d7f2:	f023 0307 	bic.w	r3, r3, #7
 801d7f6:	3308      	adds	r3, #8
 801d7f8:	9303      	str	r3, [sp, #12]
 801d7fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d7fc:	4433      	add	r3, r6
 801d7fe:	9309      	str	r3, [sp, #36]	; 0x24
 801d800:	e767      	b.n	801d6d2 <_svfiprintf_r+0x4e>
 801d802:	fb0c 3202 	mla	r2, ip, r2, r3
 801d806:	460c      	mov	r4, r1
 801d808:	2001      	movs	r0, #1
 801d80a:	e7a5      	b.n	801d758 <_svfiprintf_r+0xd4>
 801d80c:	2300      	movs	r3, #0
 801d80e:	3401      	adds	r4, #1
 801d810:	9305      	str	r3, [sp, #20]
 801d812:	4619      	mov	r1, r3
 801d814:	f04f 0c0a 	mov.w	ip, #10
 801d818:	4620      	mov	r0, r4
 801d81a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d81e:	3a30      	subs	r2, #48	; 0x30
 801d820:	2a09      	cmp	r2, #9
 801d822:	d903      	bls.n	801d82c <_svfiprintf_r+0x1a8>
 801d824:	2b00      	cmp	r3, #0
 801d826:	d0c5      	beq.n	801d7b4 <_svfiprintf_r+0x130>
 801d828:	9105      	str	r1, [sp, #20]
 801d82a:	e7c3      	b.n	801d7b4 <_svfiprintf_r+0x130>
 801d82c:	fb0c 2101 	mla	r1, ip, r1, r2
 801d830:	4604      	mov	r4, r0
 801d832:	2301      	movs	r3, #1
 801d834:	e7f0      	b.n	801d818 <_svfiprintf_r+0x194>
 801d836:	ab03      	add	r3, sp, #12
 801d838:	9300      	str	r3, [sp, #0]
 801d83a:	462a      	mov	r2, r5
 801d83c:	4b0f      	ldr	r3, [pc, #60]	; (801d87c <_svfiprintf_r+0x1f8>)
 801d83e:	a904      	add	r1, sp, #16
 801d840:	4638      	mov	r0, r7
 801d842:	f3af 8000 	nop.w
 801d846:	1c42      	adds	r2, r0, #1
 801d848:	4606      	mov	r6, r0
 801d84a:	d1d6      	bne.n	801d7fa <_svfiprintf_r+0x176>
 801d84c:	89ab      	ldrh	r3, [r5, #12]
 801d84e:	065b      	lsls	r3, r3, #25
 801d850:	f53f af2c 	bmi.w	801d6ac <_svfiprintf_r+0x28>
 801d854:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d856:	b01d      	add	sp, #116	; 0x74
 801d858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d85c:	ab03      	add	r3, sp, #12
 801d85e:	9300      	str	r3, [sp, #0]
 801d860:	462a      	mov	r2, r5
 801d862:	4b06      	ldr	r3, [pc, #24]	; (801d87c <_svfiprintf_r+0x1f8>)
 801d864:	a904      	add	r1, sp, #16
 801d866:	4638      	mov	r0, r7
 801d868:	f000 f9d4 	bl	801dc14 <_printf_i>
 801d86c:	e7eb      	b.n	801d846 <_svfiprintf_r+0x1c2>
 801d86e:	bf00      	nop
 801d870:	08021e2a 	.word	0x08021e2a
 801d874:	08021e34 	.word	0x08021e34
 801d878:	00000000 	.word	0x00000000
 801d87c:	0801d5cd 	.word	0x0801d5cd
 801d880:	08021e30 	.word	0x08021e30

0801d884 <__sfputc_r>:
 801d884:	6893      	ldr	r3, [r2, #8]
 801d886:	3b01      	subs	r3, #1
 801d888:	2b00      	cmp	r3, #0
 801d88a:	b410      	push	{r4}
 801d88c:	6093      	str	r3, [r2, #8]
 801d88e:	da08      	bge.n	801d8a2 <__sfputc_r+0x1e>
 801d890:	6994      	ldr	r4, [r2, #24]
 801d892:	42a3      	cmp	r3, r4
 801d894:	db01      	blt.n	801d89a <__sfputc_r+0x16>
 801d896:	290a      	cmp	r1, #10
 801d898:	d103      	bne.n	801d8a2 <__sfputc_r+0x1e>
 801d89a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d89e:	f000 baf1 	b.w	801de84 <__swbuf_r>
 801d8a2:	6813      	ldr	r3, [r2, #0]
 801d8a4:	1c58      	adds	r0, r3, #1
 801d8a6:	6010      	str	r0, [r2, #0]
 801d8a8:	7019      	strb	r1, [r3, #0]
 801d8aa:	4608      	mov	r0, r1
 801d8ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d8b0:	4770      	bx	lr

0801d8b2 <__sfputs_r>:
 801d8b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d8b4:	4606      	mov	r6, r0
 801d8b6:	460f      	mov	r7, r1
 801d8b8:	4614      	mov	r4, r2
 801d8ba:	18d5      	adds	r5, r2, r3
 801d8bc:	42ac      	cmp	r4, r5
 801d8be:	d101      	bne.n	801d8c4 <__sfputs_r+0x12>
 801d8c0:	2000      	movs	r0, #0
 801d8c2:	e007      	b.n	801d8d4 <__sfputs_r+0x22>
 801d8c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d8c8:	463a      	mov	r2, r7
 801d8ca:	4630      	mov	r0, r6
 801d8cc:	f7ff ffda 	bl	801d884 <__sfputc_r>
 801d8d0:	1c43      	adds	r3, r0, #1
 801d8d2:	d1f3      	bne.n	801d8bc <__sfputs_r+0xa>
 801d8d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d8d8 <_vfiprintf_r>:
 801d8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d8dc:	460d      	mov	r5, r1
 801d8de:	b09d      	sub	sp, #116	; 0x74
 801d8e0:	4614      	mov	r4, r2
 801d8e2:	4698      	mov	r8, r3
 801d8e4:	4606      	mov	r6, r0
 801d8e6:	b118      	cbz	r0, 801d8f0 <_vfiprintf_r+0x18>
 801d8e8:	6983      	ldr	r3, [r0, #24]
 801d8ea:	b90b      	cbnz	r3, 801d8f0 <_vfiprintf_r+0x18>
 801d8ec:	f7ff f9f8 	bl	801cce0 <__sinit>
 801d8f0:	4b89      	ldr	r3, [pc, #548]	; (801db18 <_vfiprintf_r+0x240>)
 801d8f2:	429d      	cmp	r5, r3
 801d8f4:	d11b      	bne.n	801d92e <_vfiprintf_r+0x56>
 801d8f6:	6875      	ldr	r5, [r6, #4]
 801d8f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d8fa:	07d9      	lsls	r1, r3, #31
 801d8fc:	d405      	bmi.n	801d90a <_vfiprintf_r+0x32>
 801d8fe:	89ab      	ldrh	r3, [r5, #12]
 801d900:	059a      	lsls	r2, r3, #22
 801d902:	d402      	bmi.n	801d90a <_vfiprintf_r+0x32>
 801d904:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d906:	f7e8 f817 	bl	8005938 <__retarget_lock_acquire_recursive>
 801d90a:	89ab      	ldrh	r3, [r5, #12]
 801d90c:	071b      	lsls	r3, r3, #28
 801d90e:	d501      	bpl.n	801d914 <_vfiprintf_r+0x3c>
 801d910:	692b      	ldr	r3, [r5, #16]
 801d912:	b9eb      	cbnz	r3, 801d950 <_vfiprintf_r+0x78>
 801d914:	4629      	mov	r1, r5
 801d916:	4630      	mov	r0, r6
 801d918:	f000 fb06 	bl	801df28 <__swsetup_r>
 801d91c:	b1c0      	cbz	r0, 801d950 <_vfiprintf_r+0x78>
 801d91e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d920:	07dc      	lsls	r4, r3, #31
 801d922:	d50e      	bpl.n	801d942 <_vfiprintf_r+0x6a>
 801d924:	f04f 30ff 	mov.w	r0, #4294967295
 801d928:	b01d      	add	sp, #116	; 0x74
 801d92a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d92e:	4b7b      	ldr	r3, [pc, #492]	; (801db1c <_vfiprintf_r+0x244>)
 801d930:	429d      	cmp	r5, r3
 801d932:	d101      	bne.n	801d938 <_vfiprintf_r+0x60>
 801d934:	68b5      	ldr	r5, [r6, #8]
 801d936:	e7df      	b.n	801d8f8 <_vfiprintf_r+0x20>
 801d938:	4b79      	ldr	r3, [pc, #484]	; (801db20 <_vfiprintf_r+0x248>)
 801d93a:	429d      	cmp	r5, r3
 801d93c:	bf08      	it	eq
 801d93e:	68f5      	ldreq	r5, [r6, #12]
 801d940:	e7da      	b.n	801d8f8 <_vfiprintf_r+0x20>
 801d942:	89ab      	ldrh	r3, [r5, #12]
 801d944:	0598      	lsls	r0, r3, #22
 801d946:	d4ed      	bmi.n	801d924 <_vfiprintf_r+0x4c>
 801d948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d94a:	f7e8 f809 	bl	8005960 <__retarget_lock_release_recursive>
 801d94e:	e7e9      	b.n	801d924 <_vfiprintf_r+0x4c>
 801d950:	2300      	movs	r3, #0
 801d952:	9309      	str	r3, [sp, #36]	; 0x24
 801d954:	2320      	movs	r3, #32
 801d956:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801d95a:	f8cd 800c 	str.w	r8, [sp, #12]
 801d95e:	2330      	movs	r3, #48	; 0x30
 801d960:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801db24 <_vfiprintf_r+0x24c>
 801d964:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801d968:	f04f 0901 	mov.w	r9, #1
 801d96c:	4623      	mov	r3, r4
 801d96e:	469a      	mov	sl, r3
 801d970:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d974:	b10a      	cbz	r2, 801d97a <_vfiprintf_r+0xa2>
 801d976:	2a25      	cmp	r2, #37	; 0x25
 801d978:	d1f9      	bne.n	801d96e <_vfiprintf_r+0x96>
 801d97a:	ebba 0b04 	subs.w	fp, sl, r4
 801d97e:	d00b      	beq.n	801d998 <_vfiprintf_r+0xc0>
 801d980:	465b      	mov	r3, fp
 801d982:	4622      	mov	r2, r4
 801d984:	4629      	mov	r1, r5
 801d986:	4630      	mov	r0, r6
 801d988:	f7ff ff93 	bl	801d8b2 <__sfputs_r>
 801d98c:	3001      	adds	r0, #1
 801d98e:	f000 80aa 	beq.w	801dae6 <_vfiprintf_r+0x20e>
 801d992:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801d994:	445a      	add	r2, fp
 801d996:	9209      	str	r2, [sp, #36]	; 0x24
 801d998:	f89a 3000 	ldrb.w	r3, [sl]
 801d99c:	2b00      	cmp	r3, #0
 801d99e:	f000 80a2 	beq.w	801dae6 <_vfiprintf_r+0x20e>
 801d9a2:	2300      	movs	r3, #0
 801d9a4:	f04f 32ff 	mov.w	r2, #4294967295
 801d9a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d9ac:	f10a 0a01 	add.w	sl, sl, #1
 801d9b0:	9304      	str	r3, [sp, #16]
 801d9b2:	9307      	str	r3, [sp, #28]
 801d9b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801d9b8:	931a      	str	r3, [sp, #104]	; 0x68
 801d9ba:	4654      	mov	r4, sl
 801d9bc:	2205      	movs	r2, #5
 801d9be:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d9c2:	4858      	ldr	r0, [pc, #352]	; (801db24 <_vfiprintf_r+0x24c>)
 801d9c4:	f7e2 fc0c 	bl	80001e0 <memchr>
 801d9c8:	9a04      	ldr	r2, [sp, #16]
 801d9ca:	b9d8      	cbnz	r0, 801da04 <_vfiprintf_r+0x12c>
 801d9cc:	06d1      	lsls	r1, r2, #27
 801d9ce:	bf44      	itt	mi
 801d9d0:	2320      	movmi	r3, #32
 801d9d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d9d6:	0713      	lsls	r3, r2, #28
 801d9d8:	bf44      	itt	mi
 801d9da:	232b      	movmi	r3, #43	; 0x2b
 801d9dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d9e0:	f89a 3000 	ldrb.w	r3, [sl]
 801d9e4:	2b2a      	cmp	r3, #42	; 0x2a
 801d9e6:	d015      	beq.n	801da14 <_vfiprintf_r+0x13c>
 801d9e8:	9a07      	ldr	r2, [sp, #28]
 801d9ea:	4654      	mov	r4, sl
 801d9ec:	2000      	movs	r0, #0
 801d9ee:	f04f 0c0a 	mov.w	ip, #10
 801d9f2:	4621      	mov	r1, r4
 801d9f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d9f8:	3b30      	subs	r3, #48	; 0x30
 801d9fa:	2b09      	cmp	r3, #9
 801d9fc:	d94e      	bls.n	801da9c <_vfiprintf_r+0x1c4>
 801d9fe:	b1b0      	cbz	r0, 801da2e <_vfiprintf_r+0x156>
 801da00:	9207      	str	r2, [sp, #28]
 801da02:	e014      	b.n	801da2e <_vfiprintf_r+0x156>
 801da04:	eba0 0308 	sub.w	r3, r0, r8
 801da08:	fa09 f303 	lsl.w	r3, r9, r3
 801da0c:	4313      	orrs	r3, r2
 801da0e:	9304      	str	r3, [sp, #16]
 801da10:	46a2      	mov	sl, r4
 801da12:	e7d2      	b.n	801d9ba <_vfiprintf_r+0xe2>
 801da14:	9b03      	ldr	r3, [sp, #12]
 801da16:	1d19      	adds	r1, r3, #4
 801da18:	681b      	ldr	r3, [r3, #0]
 801da1a:	9103      	str	r1, [sp, #12]
 801da1c:	2b00      	cmp	r3, #0
 801da1e:	bfbb      	ittet	lt
 801da20:	425b      	neglt	r3, r3
 801da22:	f042 0202 	orrlt.w	r2, r2, #2
 801da26:	9307      	strge	r3, [sp, #28]
 801da28:	9307      	strlt	r3, [sp, #28]
 801da2a:	bfb8      	it	lt
 801da2c:	9204      	strlt	r2, [sp, #16]
 801da2e:	7823      	ldrb	r3, [r4, #0]
 801da30:	2b2e      	cmp	r3, #46	; 0x2e
 801da32:	d10c      	bne.n	801da4e <_vfiprintf_r+0x176>
 801da34:	7863      	ldrb	r3, [r4, #1]
 801da36:	2b2a      	cmp	r3, #42	; 0x2a
 801da38:	d135      	bne.n	801daa6 <_vfiprintf_r+0x1ce>
 801da3a:	9b03      	ldr	r3, [sp, #12]
 801da3c:	1d1a      	adds	r2, r3, #4
 801da3e:	681b      	ldr	r3, [r3, #0]
 801da40:	9203      	str	r2, [sp, #12]
 801da42:	2b00      	cmp	r3, #0
 801da44:	bfb8      	it	lt
 801da46:	f04f 33ff 	movlt.w	r3, #4294967295
 801da4a:	3402      	adds	r4, #2
 801da4c:	9305      	str	r3, [sp, #20]
 801da4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801db34 <_vfiprintf_r+0x25c>
 801da52:	7821      	ldrb	r1, [r4, #0]
 801da54:	2203      	movs	r2, #3
 801da56:	4650      	mov	r0, sl
 801da58:	f7e2 fbc2 	bl	80001e0 <memchr>
 801da5c:	b140      	cbz	r0, 801da70 <_vfiprintf_r+0x198>
 801da5e:	2340      	movs	r3, #64	; 0x40
 801da60:	eba0 000a 	sub.w	r0, r0, sl
 801da64:	fa03 f000 	lsl.w	r0, r3, r0
 801da68:	9b04      	ldr	r3, [sp, #16]
 801da6a:	4303      	orrs	r3, r0
 801da6c:	3401      	adds	r4, #1
 801da6e:	9304      	str	r3, [sp, #16]
 801da70:	f814 1b01 	ldrb.w	r1, [r4], #1
 801da74:	482c      	ldr	r0, [pc, #176]	; (801db28 <_vfiprintf_r+0x250>)
 801da76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801da7a:	2206      	movs	r2, #6
 801da7c:	f7e2 fbb0 	bl	80001e0 <memchr>
 801da80:	2800      	cmp	r0, #0
 801da82:	d03f      	beq.n	801db04 <_vfiprintf_r+0x22c>
 801da84:	4b29      	ldr	r3, [pc, #164]	; (801db2c <_vfiprintf_r+0x254>)
 801da86:	bb1b      	cbnz	r3, 801dad0 <_vfiprintf_r+0x1f8>
 801da88:	9b03      	ldr	r3, [sp, #12]
 801da8a:	3307      	adds	r3, #7
 801da8c:	f023 0307 	bic.w	r3, r3, #7
 801da90:	3308      	adds	r3, #8
 801da92:	9303      	str	r3, [sp, #12]
 801da94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801da96:	443b      	add	r3, r7
 801da98:	9309      	str	r3, [sp, #36]	; 0x24
 801da9a:	e767      	b.n	801d96c <_vfiprintf_r+0x94>
 801da9c:	fb0c 3202 	mla	r2, ip, r2, r3
 801daa0:	460c      	mov	r4, r1
 801daa2:	2001      	movs	r0, #1
 801daa4:	e7a5      	b.n	801d9f2 <_vfiprintf_r+0x11a>
 801daa6:	2300      	movs	r3, #0
 801daa8:	3401      	adds	r4, #1
 801daaa:	9305      	str	r3, [sp, #20]
 801daac:	4619      	mov	r1, r3
 801daae:	f04f 0c0a 	mov.w	ip, #10
 801dab2:	4620      	mov	r0, r4
 801dab4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801dab8:	3a30      	subs	r2, #48	; 0x30
 801daba:	2a09      	cmp	r2, #9
 801dabc:	d903      	bls.n	801dac6 <_vfiprintf_r+0x1ee>
 801dabe:	2b00      	cmp	r3, #0
 801dac0:	d0c5      	beq.n	801da4e <_vfiprintf_r+0x176>
 801dac2:	9105      	str	r1, [sp, #20]
 801dac4:	e7c3      	b.n	801da4e <_vfiprintf_r+0x176>
 801dac6:	fb0c 2101 	mla	r1, ip, r1, r2
 801daca:	4604      	mov	r4, r0
 801dacc:	2301      	movs	r3, #1
 801dace:	e7f0      	b.n	801dab2 <_vfiprintf_r+0x1da>
 801dad0:	ab03      	add	r3, sp, #12
 801dad2:	9300      	str	r3, [sp, #0]
 801dad4:	462a      	mov	r2, r5
 801dad6:	4b16      	ldr	r3, [pc, #88]	; (801db30 <_vfiprintf_r+0x258>)
 801dad8:	a904      	add	r1, sp, #16
 801dada:	4630      	mov	r0, r6
 801dadc:	f3af 8000 	nop.w
 801dae0:	4607      	mov	r7, r0
 801dae2:	1c78      	adds	r0, r7, #1
 801dae4:	d1d6      	bne.n	801da94 <_vfiprintf_r+0x1bc>
 801dae6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dae8:	07d9      	lsls	r1, r3, #31
 801daea:	d405      	bmi.n	801daf8 <_vfiprintf_r+0x220>
 801daec:	89ab      	ldrh	r3, [r5, #12]
 801daee:	059a      	lsls	r2, r3, #22
 801daf0:	d402      	bmi.n	801daf8 <_vfiprintf_r+0x220>
 801daf2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801daf4:	f7e7 ff34 	bl	8005960 <__retarget_lock_release_recursive>
 801daf8:	89ab      	ldrh	r3, [r5, #12]
 801dafa:	065b      	lsls	r3, r3, #25
 801dafc:	f53f af12 	bmi.w	801d924 <_vfiprintf_r+0x4c>
 801db00:	9809      	ldr	r0, [sp, #36]	; 0x24
 801db02:	e711      	b.n	801d928 <_vfiprintf_r+0x50>
 801db04:	ab03      	add	r3, sp, #12
 801db06:	9300      	str	r3, [sp, #0]
 801db08:	462a      	mov	r2, r5
 801db0a:	4b09      	ldr	r3, [pc, #36]	; (801db30 <_vfiprintf_r+0x258>)
 801db0c:	a904      	add	r1, sp, #16
 801db0e:	4630      	mov	r0, r6
 801db10:	f000 f880 	bl	801dc14 <_printf_i>
 801db14:	e7e4      	b.n	801dae0 <_vfiprintf_r+0x208>
 801db16:	bf00      	nop
 801db18:	08021d38 	.word	0x08021d38
 801db1c:	08021d58 	.word	0x08021d58
 801db20:	08021d18 	.word	0x08021d18
 801db24:	08021e2a 	.word	0x08021e2a
 801db28:	08021e34 	.word	0x08021e34
 801db2c:	00000000 	.word	0x00000000
 801db30:	0801d8b3 	.word	0x0801d8b3
 801db34:	08021e30 	.word	0x08021e30

0801db38 <_printf_common>:
 801db38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801db3c:	4616      	mov	r6, r2
 801db3e:	4699      	mov	r9, r3
 801db40:	688a      	ldr	r2, [r1, #8]
 801db42:	690b      	ldr	r3, [r1, #16]
 801db44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801db48:	4293      	cmp	r3, r2
 801db4a:	bfb8      	it	lt
 801db4c:	4613      	movlt	r3, r2
 801db4e:	6033      	str	r3, [r6, #0]
 801db50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801db54:	4607      	mov	r7, r0
 801db56:	460c      	mov	r4, r1
 801db58:	b10a      	cbz	r2, 801db5e <_printf_common+0x26>
 801db5a:	3301      	adds	r3, #1
 801db5c:	6033      	str	r3, [r6, #0]
 801db5e:	6823      	ldr	r3, [r4, #0]
 801db60:	0699      	lsls	r1, r3, #26
 801db62:	bf42      	ittt	mi
 801db64:	6833      	ldrmi	r3, [r6, #0]
 801db66:	3302      	addmi	r3, #2
 801db68:	6033      	strmi	r3, [r6, #0]
 801db6a:	6825      	ldr	r5, [r4, #0]
 801db6c:	f015 0506 	ands.w	r5, r5, #6
 801db70:	d106      	bne.n	801db80 <_printf_common+0x48>
 801db72:	f104 0a19 	add.w	sl, r4, #25
 801db76:	68e3      	ldr	r3, [r4, #12]
 801db78:	6832      	ldr	r2, [r6, #0]
 801db7a:	1a9b      	subs	r3, r3, r2
 801db7c:	42ab      	cmp	r3, r5
 801db7e:	dc26      	bgt.n	801dbce <_printf_common+0x96>
 801db80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801db84:	1e13      	subs	r3, r2, #0
 801db86:	6822      	ldr	r2, [r4, #0]
 801db88:	bf18      	it	ne
 801db8a:	2301      	movne	r3, #1
 801db8c:	0692      	lsls	r2, r2, #26
 801db8e:	d42b      	bmi.n	801dbe8 <_printf_common+0xb0>
 801db90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801db94:	4649      	mov	r1, r9
 801db96:	4638      	mov	r0, r7
 801db98:	47c0      	blx	r8
 801db9a:	3001      	adds	r0, #1
 801db9c:	d01e      	beq.n	801dbdc <_printf_common+0xa4>
 801db9e:	6823      	ldr	r3, [r4, #0]
 801dba0:	68e5      	ldr	r5, [r4, #12]
 801dba2:	6832      	ldr	r2, [r6, #0]
 801dba4:	f003 0306 	and.w	r3, r3, #6
 801dba8:	2b04      	cmp	r3, #4
 801dbaa:	bf08      	it	eq
 801dbac:	1aad      	subeq	r5, r5, r2
 801dbae:	68a3      	ldr	r3, [r4, #8]
 801dbb0:	6922      	ldr	r2, [r4, #16]
 801dbb2:	bf0c      	ite	eq
 801dbb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801dbb8:	2500      	movne	r5, #0
 801dbba:	4293      	cmp	r3, r2
 801dbbc:	bfc4      	itt	gt
 801dbbe:	1a9b      	subgt	r3, r3, r2
 801dbc0:	18ed      	addgt	r5, r5, r3
 801dbc2:	2600      	movs	r6, #0
 801dbc4:	341a      	adds	r4, #26
 801dbc6:	42b5      	cmp	r5, r6
 801dbc8:	d11a      	bne.n	801dc00 <_printf_common+0xc8>
 801dbca:	2000      	movs	r0, #0
 801dbcc:	e008      	b.n	801dbe0 <_printf_common+0xa8>
 801dbce:	2301      	movs	r3, #1
 801dbd0:	4652      	mov	r2, sl
 801dbd2:	4649      	mov	r1, r9
 801dbd4:	4638      	mov	r0, r7
 801dbd6:	47c0      	blx	r8
 801dbd8:	3001      	adds	r0, #1
 801dbda:	d103      	bne.n	801dbe4 <_printf_common+0xac>
 801dbdc:	f04f 30ff 	mov.w	r0, #4294967295
 801dbe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dbe4:	3501      	adds	r5, #1
 801dbe6:	e7c6      	b.n	801db76 <_printf_common+0x3e>
 801dbe8:	18e1      	adds	r1, r4, r3
 801dbea:	1c5a      	adds	r2, r3, #1
 801dbec:	2030      	movs	r0, #48	; 0x30
 801dbee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801dbf2:	4422      	add	r2, r4
 801dbf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801dbf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801dbfc:	3302      	adds	r3, #2
 801dbfe:	e7c7      	b.n	801db90 <_printf_common+0x58>
 801dc00:	2301      	movs	r3, #1
 801dc02:	4622      	mov	r2, r4
 801dc04:	4649      	mov	r1, r9
 801dc06:	4638      	mov	r0, r7
 801dc08:	47c0      	blx	r8
 801dc0a:	3001      	adds	r0, #1
 801dc0c:	d0e6      	beq.n	801dbdc <_printf_common+0xa4>
 801dc0e:	3601      	adds	r6, #1
 801dc10:	e7d9      	b.n	801dbc6 <_printf_common+0x8e>
	...

0801dc14 <_printf_i>:
 801dc14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801dc18:	7e0f      	ldrb	r7, [r1, #24]
 801dc1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801dc1c:	2f78      	cmp	r7, #120	; 0x78
 801dc1e:	4691      	mov	r9, r2
 801dc20:	4680      	mov	r8, r0
 801dc22:	460c      	mov	r4, r1
 801dc24:	469a      	mov	sl, r3
 801dc26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801dc2a:	d807      	bhi.n	801dc3c <_printf_i+0x28>
 801dc2c:	2f62      	cmp	r7, #98	; 0x62
 801dc2e:	d80a      	bhi.n	801dc46 <_printf_i+0x32>
 801dc30:	2f00      	cmp	r7, #0
 801dc32:	f000 80d8 	beq.w	801dde6 <_printf_i+0x1d2>
 801dc36:	2f58      	cmp	r7, #88	; 0x58
 801dc38:	f000 80a3 	beq.w	801dd82 <_printf_i+0x16e>
 801dc3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801dc40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801dc44:	e03a      	b.n	801dcbc <_printf_i+0xa8>
 801dc46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801dc4a:	2b15      	cmp	r3, #21
 801dc4c:	d8f6      	bhi.n	801dc3c <_printf_i+0x28>
 801dc4e:	a101      	add	r1, pc, #4	; (adr r1, 801dc54 <_printf_i+0x40>)
 801dc50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801dc54:	0801dcad 	.word	0x0801dcad
 801dc58:	0801dcc1 	.word	0x0801dcc1
 801dc5c:	0801dc3d 	.word	0x0801dc3d
 801dc60:	0801dc3d 	.word	0x0801dc3d
 801dc64:	0801dc3d 	.word	0x0801dc3d
 801dc68:	0801dc3d 	.word	0x0801dc3d
 801dc6c:	0801dcc1 	.word	0x0801dcc1
 801dc70:	0801dc3d 	.word	0x0801dc3d
 801dc74:	0801dc3d 	.word	0x0801dc3d
 801dc78:	0801dc3d 	.word	0x0801dc3d
 801dc7c:	0801dc3d 	.word	0x0801dc3d
 801dc80:	0801ddcd 	.word	0x0801ddcd
 801dc84:	0801dcf1 	.word	0x0801dcf1
 801dc88:	0801ddaf 	.word	0x0801ddaf
 801dc8c:	0801dc3d 	.word	0x0801dc3d
 801dc90:	0801dc3d 	.word	0x0801dc3d
 801dc94:	0801ddef 	.word	0x0801ddef
 801dc98:	0801dc3d 	.word	0x0801dc3d
 801dc9c:	0801dcf1 	.word	0x0801dcf1
 801dca0:	0801dc3d 	.word	0x0801dc3d
 801dca4:	0801dc3d 	.word	0x0801dc3d
 801dca8:	0801ddb7 	.word	0x0801ddb7
 801dcac:	682b      	ldr	r3, [r5, #0]
 801dcae:	1d1a      	adds	r2, r3, #4
 801dcb0:	681b      	ldr	r3, [r3, #0]
 801dcb2:	602a      	str	r2, [r5, #0]
 801dcb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801dcb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801dcbc:	2301      	movs	r3, #1
 801dcbe:	e0a3      	b.n	801de08 <_printf_i+0x1f4>
 801dcc0:	6820      	ldr	r0, [r4, #0]
 801dcc2:	6829      	ldr	r1, [r5, #0]
 801dcc4:	0606      	lsls	r6, r0, #24
 801dcc6:	f101 0304 	add.w	r3, r1, #4
 801dcca:	d50a      	bpl.n	801dce2 <_printf_i+0xce>
 801dccc:	680e      	ldr	r6, [r1, #0]
 801dcce:	602b      	str	r3, [r5, #0]
 801dcd0:	2e00      	cmp	r6, #0
 801dcd2:	da03      	bge.n	801dcdc <_printf_i+0xc8>
 801dcd4:	232d      	movs	r3, #45	; 0x2d
 801dcd6:	4276      	negs	r6, r6
 801dcd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801dcdc:	485e      	ldr	r0, [pc, #376]	; (801de58 <_printf_i+0x244>)
 801dcde:	230a      	movs	r3, #10
 801dce0:	e019      	b.n	801dd16 <_printf_i+0x102>
 801dce2:	680e      	ldr	r6, [r1, #0]
 801dce4:	602b      	str	r3, [r5, #0]
 801dce6:	f010 0f40 	tst.w	r0, #64	; 0x40
 801dcea:	bf18      	it	ne
 801dcec:	b236      	sxthne	r6, r6
 801dcee:	e7ef      	b.n	801dcd0 <_printf_i+0xbc>
 801dcf0:	682b      	ldr	r3, [r5, #0]
 801dcf2:	6820      	ldr	r0, [r4, #0]
 801dcf4:	1d19      	adds	r1, r3, #4
 801dcf6:	6029      	str	r1, [r5, #0]
 801dcf8:	0601      	lsls	r1, r0, #24
 801dcfa:	d501      	bpl.n	801dd00 <_printf_i+0xec>
 801dcfc:	681e      	ldr	r6, [r3, #0]
 801dcfe:	e002      	b.n	801dd06 <_printf_i+0xf2>
 801dd00:	0646      	lsls	r6, r0, #25
 801dd02:	d5fb      	bpl.n	801dcfc <_printf_i+0xe8>
 801dd04:	881e      	ldrh	r6, [r3, #0]
 801dd06:	4854      	ldr	r0, [pc, #336]	; (801de58 <_printf_i+0x244>)
 801dd08:	2f6f      	cmp	r7, #111	; 0x6f
 801dd0a:	bf0c      	ite	eq
 801dd0c:	2308      	moveq	r3, #8
 801dd0e:	230a      	movne	r3, #10
 801dd10:	2100      	movs	r1, #0
 801dd12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801dd16:	6865      	ldr	r5, [r4, #4]
 801dd18:	60a5      	str	r5, [r4, #8]
 801dd1a:	2d00      	cmp	r5, #0
 801dd1c:	bfa2      	ittt	ge
 801dd1e:	6821      	ldrge	r1, [r4, #0]
 801dd20:	f021 0104 	bicge.w	r1, r1, #4
 801dd24:	6021      	strge	r1, [r4, #0]
 801dd26:	b90e      	cbnz	r6, 801dd2c <_printf_i+0x118>
 801dd28:	2d00      	cmp	r5, #0
 801dd2a:	d04d      	beq.n	801ddc8 <_printf_i+0x1b4>
 801dd2c:	4615      	mov	r5, r2
 801dd2e:	fbb6 f1f3 	udiv	r1, r6, r3
 801dd32:	fb03 6711 	mls	r7, r3, r1, r6
 801dd36:	5dc7      	ldrb	r7, [r0, r7]
 801dd38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801dd3c:	4637      	mov	r7, r6
 801dd3e:	42bb      	cmp	r3, r7
 801dd40:	460e      	mov	r6, r1
 801dd42:	d9f4      	bls.n	801dd2e <_printf_i+0x11a>
 801dd44:	2b08      	cmp	r3, #8
 801dd46:	d10b      	bne.n	801dd60 <_printf_i+0x14c>
 801dd48:	6823      	ldr	r3, [r4, #0]
 801dd4a:	07de      	lsls	r6, r3, #31
 801dd4c:	d508      	bpl.n	801dd60 <_printf_i+0x14c>
 801dd4e:	6923      	ldr	r3, [r4, #16]
 801dd50:	6861      	ldr	r1, [r4, #4]
 801dd52:	4299      	cmp	r1, r3
 801dd54:	bfde      	ittt	le
 801dd56:	2330      	movle	r3, #48	; 0x30
 801dd58:	f805 3c01 	strble.w	r3, [r5, #-1]
 801dd5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 801dd60:	1b52      	subs	r2, r2, r5
 801dd62:	6122      	str	r2, [r4, #16]
 801dd64:	f8cd a000 	str.w	sl, [sp]
 801dd68:	464b      	mov	r3, r9
 801dd6a:	aa03      	add	r2, sp, #12
 801dd6c:	4621      	mov	r1, r4
 801dd6e:	4640      	mov	r0, r8
 801dd70:	f7ff fee2 	bl	801db38 <_printf_common>
 801dd74:	3001      	adds	r0, #1
 801dd76:	d14c      	bne.n	801de12 <_printf_i+0x1fe>
 801dd78:	f04f 30ff 	mov.w	r0, #4294967295
 801dd7c:	b004      	add	sp, #16
 801dd7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dd82:	4835      	ldr	r0, [pc, #212]	; (801de58 <_printf_i+0x244>)
 801dd84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 801dd88:	6829      	ldr	r1, [r5, #0]
 801dd8a:	6823      	ldr	r3, [r4, #0]
 801dd8c:	f851 6b04 	ldr.w	r6, [r1], #4
 801dd90:	6029      	str	r1, [r5, #0]
 801dd92:	061d      	lsls	r5, r3, #24
 801dd94:	d514      	bpl.n	801ddc0 <_printf_i+0x1ac>
 801dd96:	07df      	lsls	r7, r3, #31
 801dd98:	bf44      	itt	mi
 801dd9a:	f043 0320 	orrmi.w	r3, r3, #32
 801dd9e:	6023      	strmi	r3, [r4, #0]
 801dda0:	b91e      	cbnz	r6, 801ddaa <_printf_i+0x196>
 801dda2:	6823      	ldr	r3, [r4, #0]
 801dda4:	f023 0320 	bic.w	r3, r3, #32
 801dda8:	6023      	str	r3, [r4, #0]
 801ddaa:	2310      	movs	r3, #16
 801ddac:	e7b0      	b.n	801dd10 <_printf_i+0xfc>
 801ddae:	6823      	ldr	r3, [r4, #0]
 801ddb0:	f043 0320 	orr.w	r3, r3, #32
 801ddb4:	6023      	str	r3, [r4, #0]
 801ddb6:	2378      	movs	r3, #120	; 0x78
 801ddb8:	4828      	ldr	r0, [pc, #160]	; (801de5c <_printf_i+0x248>)
 801ddba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801ddbe:	e7e3      	b.n	801dd88 <_printf_i+0x174>
 801ddc0:	0659      	lsls	r1, r3, #25
 801ddc2:	bf48      	it	mi
 801ddc4:	b2b6      	uxthmi	r6, r6
 801ddc6:	e7e6      	b.n	801dd96 <_printf_i+0x182>
 801ddc8:	4615      	mov	r5, r2
 801ddca:	e7bb      	b.n	801dd44 <_printf_i+0x130>
 801ddcc:	682b      	ldr	r3, [r5, #0]
 801ddce:	6826      	ldr	r6, [r4, #0]
 801ddd0:	6961      	ldr	r1, [r4, #20]
 801ddd2:	1d18      	adds	r0, r3, #4
 801ddd4:	6028      	str	r0, [r5, #0]
 801ddd6:	0635      	lsls	r5, r6, #24
 801ddd8:	681b      	ldr	r3, [r3, #0]
 801ddda:	d501      	bpl.n	801dde0 <_printf_i+0x1cc>
 801dddc:	6019      	str	r1, [r3, #0]
 801ddde:	e002      	b.n	801dde6 <_printf_i+0x1d2>
 801dde0:	0670      	lsls	r0, r6, #25
 801dde2:	d5fb      	bpl.n	801dddc <_printf_i+0x1c8>
 801dde4:	8019      	strh	r1, [r3, #0]
 801dde6:	2300      	movs	r3, #0
 801dde8:	6123      	str	r3, [r4, #16]
 801ddea:	4615      	mov	r5, r2
 801ddec:	e7ba      	b.n	801dd64 <_printf_i+0x150>
 801ddee:	682b      	ldr	r3, [r5, #0]
 801ddf0:	1d1a      	adds	r2, r3, #4
 801ddf2:	602a      	str	r2, [r5, #0]
 801ddf4:	681d      	ldr	r5, [r3, #0]
 801ddf6:	6862      	ldr	r2, [r4, #4]
 801ddf8:	2100      	movs	r1, #0
 801ddfa:	4628      	mov	r0, r5
 801ddfc:	f7e2 f9f0 	bl	80001e0 <memchr>
 801de00:	b108      	cbz	r0, 801de06 <_printf_i+0x1f2>
 801de02:	1b40      	subs	r0, r0, r5
 801de04:	6060      	str	r0, [r4, #4]
 801de06:	6863      	ldr	r3, [r4, #4]
 801de08:	6123      	str	r3, [r4, #16]
 801de0a:	2300      	movs	r3, #0
 801de0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801de10:	e7a8      	b.n	801dd64 <_printf_i+0x150>
 801de12:	6923      	ldr	r3, [r4, #16]
 801de14:	462a      	mov	r2, r5
 801de16:	4649      	mov	r1, r9
 801de18:	4640      	mov	r0, r8
 801de1a:	47d0      	blx	sl
 801de1c:	3001      	adds	r0, #1
 801de1e:	d0ab      	beq.n	801dd78 <_printf_i+0x164>
 801de20:	6823      	ldr	r3, [r4, #0]
 801de22:	079b      	lsls	r3, r3, #30
 801de24:	d413      	bmi.n	801de4e <_printf_i+0x23a>
 801de26:	68e0      	ldr	r0, [r4, #12]
 801de28:	9b03      	ldr	r3, [sp, #12]
 801de2a:	4298      	cmp	r0, r3
 801de2c:	bfb8      	it	lt
 801de2e:	4618      	movlt	r0, r3
 801de30:	e7a4      	b.n	801dd7c <_printf_i+0x168>
 801de32:	2301      	movs	r3, #1
 801de34:	4632      	mov	r2, r6
 801de36:	4649      	mov	r1, r9
 801de38:	4640      	mov	r0, r8
 801de3a:	47d0      	blx	sl
 801de3c:	3001      	adds	r0, #1
 801de3e:	d09b      	beq.n	801dd78 <_printf_i+0x164>
 801de40:	3501      	adds	r5, #1
 801de42:	68e3      	ldr	r3, [r4, #12]
 801de44:	9903      	ldr	r1, [sp, #12]
 801de46:	1a5b      	subs	r3, r3, r1
 801de48:	42ab      	cmp	r3, r5
 801de4a:	dcf2      	bgt.n	801de32 <_printf_i+0x21e>
 801de4c:	e7eb      	b.n	801de26 <_printf_i+0x212>
 801de4e:	2500      	movs	r5, #0
 801de50:	f104 0619 	add.w	r6, r4, #25
 801de54:	e7f5      	b.n	801de42 <_printf_i+0x22e>
 801de56:	bf00      	nop
 801de58:	08021e3b 	.word	0x08021e3b
 801de5c:	08021e4c 	.word	0x08021e4c

0801de60 <_read_r>:
 801de60:	b538      	push	{r3, r4, r5, lr}
 801de62:	4d07      	ldr	r5, [pc, #28]	; (801de80 <_read_r+0x20>)
 801de64:	4604      	mov	r4, r0
 801de66:	4608      	mov	r0, r1
 801de68:	4611      	mov	r1, r2
 801de6a:	2200      	movs	r2, #0
 801de6c:	602a      	str	r2, [r5, #0]
 801de6e:	461a      	mov	r2, r3
 801de70:	f7e7 f9a0 	bl	80051b4 <_read>
 801de74:	1c43      	adds	r3, r0, #1
 801de76:	d102      	bne.n	801de7e <_read_r+0x1e>
 801de78:	682b      	ldr	r3, [r5, #0]
 801de7a:	b103      	cbz	r3, 801de7e <_read_r+0x1e>
 801de7c:	6023      	str	r3, [r4, #0]
 801de7e:	bd38      	pop	{r3, r4, r5, pc}
 801de80:	2000df24 	.word	0x2000df24

0801de84 <__swbuf_r>:
 801de84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801de86:	460e      	mov	r6, r1
 801de88:	4614      	mov	r4, r2
 801de8a:	4605      	mov	r5, r0
 801de8c:	b118      	cbz	r0, 801de96 <__swbuf_r+0x12>
 801de8e:	6983      	ldr	r3, [r0, #24]
 801de90:	b90b      	cbnz	r3, 801de96 <__swbuf_r+0x12>
 801de92:	f7fe ff25 	bl	801cce0 <__sinit>
 801de96:	4b21      	ldr	r3, [pc, #132]	; (801df1c <__swbuf_r+0x98>)
 801de98:	429c      	cmp	r4, r3
 801de9a:	d12b      	bne.n	801def4 <__swbuf_r+0x70>
 801de9c:	686c      	ldr	r4, [r5, #4]
 801de9e:	69a3      	ldr	r3, [r4, #24]
 801dea0:	60a3      	str	r3, [r4, #8]
 801dea2:	89a3      	ldrh	r3, [r4, #12]
 801dea4:	071a      	lsls	r2, r3, #28
 801dea6:	d52f      	bpl.n	801df08 <__swbuf_r+0x84>
 801dea8:	6923      	ldr	r3, [r4, #16]
 801deaa:	b36b      	cbz	r3, 801df08 <__swbuf_r+0x84>
 801deac:	6923      	ldr	r3, [r4, #16]
 801deae:	6820      	ldr	r0, [r4, #0]
 801deb0:	1ac0      	subs	r0, r0, r3
 801deb2:	6963      	ldr	r3, [r4, #20]
 801deb4:	b2f6      	uxtb	r6, r6
 801deb6:	4283      	cmp	r3, r0
 801deb8:	4637      	mov	r7, r6
 801deba:	dc04      	bgt.n	801dec6 <__swbuf_r+0x42>
 801debc:	4621      	mov	r1, r4
 801debe:	4628      	mov	r0, r5
 801dec0:	f7ff fb18 	bl	801d4f4 <_fflush_r>
 801dec4:	bb30      	cbnz	r0, 801df14 <__swbuf_r+0x90>
 801dec6:	68a3      	ldr	r3, [r4, #8]
 801dec8:	3b01      	subs	r3, #1
 801deca:	60a3      	str	r3, [r4, #8]
 801decc:	6823      	ldr	r3, [r4, #0]
 801dece:	1c5a      	adds	r2, r3, #1
 801ded0:	6022      	str	r2, [r4, #0]
 801ded2:	701e      	strb	r6, [r3, #0]
 801ded4:	6963      	ldr	r3, [r4, #20]
 801ded6:	3001      	adds	r0, #1
 801ded8:	4283      	cmp	r3, r0
 801deda:	d004      	beq.n	801dee6 <__swbuf_r+0x62>
 801dedc:	89a3      	ldrh	r3, [r4, #12]
 801dede:	07db      	lsls	r3, r3, #31
 801dee0:	d506      	bpl.n	801def0 <__swbuf_r+0x6c>
 801dee2:	2e0a      	cmp	r6, #10
 801dee4:	d104      	bne.n	801def0 <__swbuf_r+0x6c>
 801dee6:	4621      	mov	r1, r4
 801dee8:	4628      	mov	r0, r5
 801deea:	f7ff fb03 	bl	801d4f4 <_fflush_r>
 801deee:	b988      	cbnz	r0, 801df14 <__swbuf_r+0x90>
 801def0:	4638      	mov	r0, r7
 801def2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801def4:	4b0a      	ldr	r3, [pc, #40]	; (801df20 <__swbuf_r+0x9c>)
 801def6:	429c      	cmp	r4, r3
 801def8:	d101      	bne.n	801defe <__swbuf_r+0x7a>
 801defa:	68ac      	ldr	r4, [r5, #8]
 801defc:	e7cf      	b.n	801de9e <__swbuf_r+0x1a>
 801defe:	4b09      	ldr	r3, [pc, #36]	; (801df24 <__swbuf_r+0xa0>)
 801df00:	429c      	cmp	r4, r3
 801df02:	bf08      	it	eq
 801df04:	68ec      	ldreq	r4, [r5, #12]
 801df06:	e7ca      	b.n	801de9e <__swbuf_r+0x1a>
 801df08:	4621      	mov	r1, r4
 801df0a:	4628      	mov	r0, r5
 801df0c:	f000 f80c 	bl	801df28 <__swsetup_r>
 801df10:	2800      	cmp	r0, #0
 801df12:	d0cb      	beq.n	801deac <__swbuf_r+0x28>
 801df14:	f04f 37ff 	mov.w	r7, #4294967295
 801df18:	e7ea      	b.n	801def0 <__swbuf_r+0x6c>
 801df1a:	bf00      	nop
 801df1c:	08021d38 	.word	0x08021d38
 801df20:	08021d58 	.word	0x08021d58
 801df24:	08021d18 	.word	0x08021d18

0801df28 <__swsetup_r>:
 801df28:	4b32      	ldr	r3, [pc, #200]	; (801dff4 <__swsetup_r+0xcc>)
 801df2a:	b570      	push	{r4, r5, r6, lr}
 801df2c:	681d      	ldr	r5, [r3, #0]
 801df2e:	4606      	mov	r6, r0
 801df30:	460c      	mov	r4, r1
 801df32:	b125      	cbz	r5, 801df3e <__swsetup_r+0x16>
 801df34:	69ab      	ldr	r3, [r5, #24]
 801df36:	b913      	cbnz	r3, 801df3e <__swsetup_r+0x16>
 801df38:	4628      	mov	r0, r5
 801df3a:	f7fe fed1 	bl	801cce0 <__sinit>
 801df3e:	4b2e      	ldr	r3, [pc, #184]	; (801dff8 <__swsetup_r+0xd0>)
 801df40:	429c      	cmp	r4, r3
 801df42:	d10f      	bne.n	801df64 <__swsetup_r+0x3c>
 801df44:	686c      	ldr	r4, [r5, #4]
 801df46:	89a3      	ldrh	r3, [r4, #12]
 801df48:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801df4c:	0719      	lsls	r1, r3, #28
 801df4e:	d42c      	bmi.n	801dfaa <__swsetup_r+0x82>
 801df50:	06dd      	lsls	r5, r3, #27
 801df52:	d411      	bmi.n	801df78 <__swsetup_r+0x50>
 801df54:	2309      	movs	r3, #9
 801df56:	6033      	str	r3, [r6, #0]
 801df58:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801df5c:	81a3      	strh	r3, [r4, #12]
 801df5e:	f04f 30ff 	mov.w	r0, #4294967295
 801df62:	e03e      	b.n	801dfe2 <__swsetup_r+0xba>
 801df64:	4b25      	ldr	r3, [pc, #148]	; (801dffc <__swsetup_r+0xd4>)
 801df66:	429c      	cmp	r4, r3
 801df68:	d101      	bne.n	801df6e <__swsetup_r+0x46>
 801df6a:	68ac      	ldr	r4, [r5, #8]
 801df6c:	e7eb      	b.n	801df46 <__swsetup_r+0x1e>
 801df6e:	4b24      	ldr	r3, [pc, #144]	; (801e000 <__swsetup_r+0xd8>)
 801df70:	429c      	cmp	r4, r3
 801df72:	bf08      	it	eq
 801df74:	68ec      	ldreq	r4, [r5, #12]
 801df76:	e7e6      	b.n	801df46 <__swsetup_r+0x1e>
 801df78:	0758      	lsls	r0, r3, #29
 801df7a:	d512      	bpl.n	801dfa2 <__swsetup_r+0x7a>
 801df7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801df7e:	b141      	cbz	r1, 801df92 <__swsetup_r+0x6a>
 801df80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801df84:	4299      	cmp	r1, r3
 801df86:	d002      	beq.n	801df8e <__swsetup_r+0x66>
 801df88:	4630      	mov	r0, r6
 801df8a:	f7fe ffb3 	bl	801cef4 <_free_r>
 801df8e:	2300      	movs	r3, #0
 801df90:	6363      	str	r3, [r4, #52]	; 0x34
 801df92:	89a3      	ldrh	r3, [r4, #12]
 801df94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801df98:	81a3      	strh	r3, [r4, #12]
 801df9a:	2300      	movs	r3, #0
 801df9c:	6063      	str	r3, [r4, #4]
 801df9e:	6923      	ldr	r3, [r4, #16]
 801dfa0:	6023      	str	r3, [r4, #0]
 801dfa2:	89a3      	ldrh	r3, [r4, #12]
 801dfa4:	f043 0308 	orr.w	r3, r3, #8
 801dfa8:	81a3      	strh	r3, [r4, #12]
 801dfaa:	6923      	ldr	r3, [r4, #16]
 801dfac:	b94b      	cbnz	r3, 801dfc2 <__swsetup_r+0x9a>
 801dfae:	89a3      	ldrh	r3, [r4, #12]
 801dfb0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801dfb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801dfb8:	d003      	beq.n	801dfc2 <__swsetup_r+0x9a>
 801dfba:	4621      	mov	r1, r4
 801dfbc:	4630      	mov	r0, r6
 801dfbe:	f000 f84d 	bl	801e05c <__smakebuf_r>
 801dfc2:	89a0      	ldrh	r0, [r4, #12]
 801dfc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801dfc8:	f010 0301 	ands.w	r3, r0, #1
 801dfcc:	d00a      	beq.n	801dfe4 <__swsetup_r+0xbc>
 801dfce:	2300      	movs	r3, #0
 801dfd0:	60a3      	str	r3, [r4, #8]
 801dfd2:	6963      	ldr	r3, [r4, #20]
 801dfd4:	425b      	negs	r3, r3
 801dfd6:	61a3      	str	r3, [r4, #24]
 801dfd8:	6923      	ldr	r3, [r4, #16]
 801dfda:	b943      	cbnz	r3, 801dfee <__swsetup_r+0xc6>
 801dfdc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801dfe0:	d1ba      	bne.n	801df58 <__swsetup_r+0x30>
 801dfe2:	bd70      	pop	{r4, r5, r6, pc}
 801dfe4:	0781      	lsls	r1, r0, #30
 801dfe6:	bf58      	it	pl
 801dfe8:	6963      	ldrpl	r3, [r4, #20]
 801dfea:	60a3      	str	r3, [r4, #8]
 801dfec:	e7f4      	b.n	801dfd8 <__swsetup_r+0xb0>
 801dfee:	2000      	movs	r0, #0
 801dff0:	e7f7      	b.n	801dfe2 <__swsetup_r+0xba>
 801dff2:	bf00      	nop
 801dff4:	200002f8 	.word	0x200002f8
 801dff8:	08021d38 	.word	0x08021d38
 801dffc:	08021d58 	.word	0x08021d58
 801e000:	08021d18 	.word	0x08021d18

0801e004 <abort>:
 801e004:	b508      	push	{r3, lr}
 801e006:	2006      	movs	r0, #6
 801e008:	f000 f8c0 	bl	801e18c <raise>
 801e00c:	2001      	movs	r0, #1
 801e00e:	f7e7 f8c7 	bl	80051a0 <_exit>

0801e012 <__swhatbuf_r>:
 801e012:	b570      	push	{r4, r5, r6, lr}
 801e014:	460e      	mov	r6, r1
 801e016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e01a:	2900      	cmp	r1, #0
 801e01c:	b096      	sub	sp, #88	; 0x58
 801e01e:	4614      	mov	r4, r2
 801e020:	461d      	mov	r5, r3
 801e022:	da08      	bge.n	801e036 <__swhatbuf_r+0x24>
 801e024:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801e028:	2200      	movs	r2, #0
 801e02a:	602a      	str	r2, [r5, #0]
 801e02c:	061a      	lsls	r2, r3, #24
 801e02e:	d410      	bmi.n	801e052 <__swhatbuf_r+0x40>
 801e030:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e034:	e00e      	b.n	801e054 <__swhatbuf_r+0x42>
 801e036:	466a      	mov	r2, sp
 801e038:	f000 f8c4 	bl	801e1c4 <_fstat_r>
 801e03c:	2800      	cmp	r0, #0
 801e03e:	dbf1      	blt.n	801e024 <__swhatbuf_r+0x12>
 801e040:	9a01      	ldr	r2, [sp, #4]
 801e042:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801e046:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801e04a:	425a      	negs	r2, r3
 801e04c:	415a      	adcs	r2, r3
 801e04e:	602a      	str	r2, [r5, #0]
 801e050:	e7ee      	b.n	801e030 <__swhatbuf_r+0x1e>
 801e052:	2340      	movs	r3, #64	; 0x40
 801e054:	2000      	movs	r0, #0
 801e056:	6023      	str	r3, [r4, #0]
 801e058:	b016      	add	sp, #88	; 0x58
 801e05a:	bd70      	pop	{r4, r5, r6, pc}

0801e05c <__smakebuf_r>:
 801e05c:	898b      	ldrh	r3, [r1, #12]
 801e05e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e060:	079d      	lsls	r5, r3, #30
 801e062:	4606      	mov	r6, r0
 801e064:	460c      	mov	r4, r1
 801e066:	d507      	bpl.n	801e078 <__smakebuf_r+0x1c>
 801e068:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e06c:	6023      	str	r3, [r4, #0]
 801e06e:	6123      	str	r3, [r4, #16]
 801e070:	2301      	movs	r3, #1
 801e072:	6163      	str	r3, [r4, #20]
 801e074:	b002      	add	sp, #8
 801e076:	bd70      	pop	{r4, r5, r6, pc}
 801e078:	ab01      	add	r3, sp, #4
 801e07a:	466a      	mov	r2, sp
 801e07c:	f7ff ffc9 	bl	801e012 <__swhatbuf_r>
 801e080:	9900      	ldr	r1, [sp, #0]
 801e082:	4605      	mov	r5, r0
 801e084:	4630      	mov	r0, r6
 801e086:	f7fe ffa1 	bl	801cfcc <_malloc_r>
 801e08a:	b948      	cbnz	r0, 801e0a0 <__smakebuf_r+0x44>
 801e08c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e090:	059a      	lsls	r2, r3, #22
 801e092:	d4ef      	bmi.n	801e074 <__smakebuf_r+0x18>
 801e094:	f023 0303 	bic.w	r3, r3, #3
 801e098:	f043 0302 	orr.w	r3, r3, #2
 801e09c:	81a3      	strh	r3, [r4, #12]
 801e09e:	e7e3      	b.n	801e068 <__smakebuf_r+0xc>
 801e0a0:	4b0d      	ldr	r3, [pc, #52]	; (801e0d8 <__smakebuf_r+0x7c>)
 801e0a2:	62b3      	str	r3, [r6, #40]	; 0x28
 801e0a4:	89a3      	ldrh	r3, [r4, #12]
 801e0a6:	6020      	str	r0, [r4, #0]
 801e0a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e0ac:	81a3      	strh	r3, [r4, #12]
 801e0ae:	9b00      	ldr	r3, [sp, #0]
 801e0b0:	6163      	str	r3, [r4, #20]
 801e0b2:	9b01      	ldr	r3, [sp, #4]
 801e0b4:	6120      	str	r0, [r4, #16]
 801e0b6:	b15b      	cbz	r3, 801e0d0 <__smakebuf_r+0x74>
 801e0b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e0bc:	4630      	mov	r0, r6
 801e0be:	f000 f893 	bl	801e1e8 <_isatty_r>
 801e0c2:	b128      	cbz	r0, 801e0d0 <__smakebuf_r+0x74>
 801e0c4:	89a3      	ldrh	r3, [r4, #12]
 801e0c6:	f023 0303 	bic.w	r3, r3, #3
 801e0ca:	f043 0301 	orr.w	r3, r3, #1
 801e0ce:	81a3      	strh	r3, [r4, #12]
 801e0d0:	89a0      	ldrh	r0, [r4, #12]
 801e0d2:	4305      	orrs	r5, r0
 801e0d4:	81a5      	strh	r5, [r4, #12]
 801e0d6:	e7cd      	b.n	801e074 <__smakebuf_r+0x18>
 801e0d8:	0801cc79 	.word	0x0801cc79

0801e0dc <_realloc_r>:
 801e0dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e0e0:	4680      	mov	r8, r0
 801e0e2:	4614      	mov	r4, r2
 801e0e4:	460e      	mov	r6, r1
 801e0e6:	b921      	cbnz	r1, 801e0f2 <_realloc_r+0x16>
 801e0e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e0ec:	4611      	mov	r1, r2
 801e0ee:	f7fe bf6d 	b.w	801cfcc <_malloc_r>
 801e0f2:	b92a      	cbnz	r2, 801e100 <_realloc_r+0x24>
 801e0f4:	f7fe fefe 	bl	801cef4 <_free_r>
 801e0f8:	4625      	mov	r5, r4
 801e0fa:	4628      	mov	r0, r5
 801e0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e100:	f000 f882 	bl	801e208 <_malloc_usable_size_r>
 801e104:	4284      	cmp	r4, r0
 801e106:	4607      	mov	r7, r0
 801e108:	d802      	bhi.n	801e110 <_realloc_r+0x34>
 801e10a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801e10e:	d812      	bhi.n	801e136 <_realloc_r+0x5a>
 801e110:	4621      	mov	r1, r4
 801e112:	4640      	mov	r0, r8
 801e114:	f7fe ff5a 	bl	801cfcc <_malloc_r>
 801e118:	4605      	mov	r5, r0
 801e11a:	2800      	cmp	r0, #0
 801e11c:	d0ed      	beq.n	801e0fa <_realloc_r+0x1e>
 801e11e:	42bc      	cmp	r4, r7
 801e120:	4622      	mov	r2, r4
 801e122:	4631      	mov	r1, r6
 801e124:	bf28      	it	cs
 801e126:	463a      	movcs	r2, r7
 801e128:	f7fe feb4 	bl	801ce94 <memcpy>
 801e12c:	4631      	mov	r1, r6
 801e12e:	4640      	mov	r0, r8
 801e130:	f7fe fee0 	bl	801cef4 <_free_r>
 801e134:	e7e1      	b.n	801e0fa <_realloc_r+0x1e>
 801e136:	4635      	mov	r5, r6
 801e138:	e7df      	b.n	801e0fa <_realloc_r+0x1e>

0801e13a <_raise_r>:
 801e13a:	291f      	cmp	r1, #31
 801e13c:	b538      	push	{r3, r4, r5, lr}
 801e13e:	4604      	mov	r4, r0
 801e140:	460d      	mov	r5, r1
 801e142:	d904      	bls.n	801e14e <_raise_r+0x14>
 801e144:	2316      	movs	r3, #22
 801e146:	6003      	str	r3, [r0, #0]
 801e148:	f04f 30ff 	mov.w	r0, #4294967295
 801e14c:	bd38      	pop	{r3, r4, r5, pc}
 801e14e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801e150:	b112      	cbz	r2, 801e158 <_raise_r+0x1e>
 801e152:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e156:	b94b      	cbnz	r3, 801e16c <_raise_r+0x32>
 801e158:	4620      	mov	r0, r4
 801e15a:	f000 f831 	bl	801e1c0 <_getpid_r>
 801e15e:	462a      	mov	r2, r5
 801e160:	4601      	mov	r1, r0
 801e162:	4620      	mov	r0, r4
 801e164:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e168:	f000 b818 	b.w	801e19c <_kill_r>
 801e16c:	2b01      	cmp	r3, #1
 801e16e:	d00a      	beq.n	801e186 <_raise_r+0x4c>
 801e170:	1c59      	adds	r1, r3, #1
 801e172:	d103      	bne.n	801e17c <_raise_r+0x42>
 801e174:	2316      	movs	r3, #22
 801e176:	6003      	str	r3, [r0, #0]
 801e178:	2001      	movs	r0, #1
 801e17a:	e7e7      	b.n	801e14c <_raise_r+0x12>
 801e17c:	2400      	movs	r4, #0
 801e17e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e182:	4628      	mov	r0, r5
 801e184:	4798      	blx	r3
 801e186:	2000      	movs	r0, #0
 801e188:	e7e0      	b.n	801e14c <_raise_r+0x12>
	...

0801e18c <raise>:
 801e18c:	4b02      	ldr	r3, [pc, #8]	; (801e198 <raise+0xc>)
 801e18e:	4601      	mov	r1, r0
 801e190:	6818      	ldr	r0, [r3, #0]
 801e192:	f7ff bfd2 	b.w	801e13a <_raise_r>
 801e196:	bf00      	nop
 801e198:	200002f8 	.word	0x200002f8

0801e19c <_kill_r>:
 801e19c:	b538      	push	{r3, r4, r5, lr}
 801e19e:	4d07      	ldr	r5, [pc, #28]	; (801e1bc <_kill_r+0x20>)
 801e1a0:	2300      	movs	r3, #0
 801e1a2:	4604      	mov	r4, r0
 801e1a4:	4608      	mov	r0, r1
 801e1a6:	4611      	mov	r1, r2
 801e1a8:	602b      	str	r3, [r5, #0]
 801e1aa:	f7e6 ffe7 	bl	800517c <_kill>
 801e1ae:	1c43      	adds	r3, r0, #1
 801e1b0:	d102      	bne.n	801e1b8 <_kill_r+0x1c>
 801e1b2:	682b      	ldr	r3, [r5, #0]
 801e1b4:	b103      	cbz	r3, 801e1b8 <_kill_r+0x1c>
 801e1b6:	6023      	str	r3, [r4, #0]
 801e1b8:	bd38      	pop	{r3, r4, r5, pc}
 801e1ba:	bf00      	nop
 801e1bc:	2000df24 	.word	0x2000df24

0801e1c0 <_getpid_r>:
 801e1c0:	f7e6 bfd4 	b.w	800516c <_getpid>

0801e1c4 <_fstat_r>:
 801e1c4:	b538      	push	{r3, r4, r5, lr}
 801e1c6:	4d07      	ldr	r5, [pc, #28]	; (801e1e4 <_fstat_r+0x20>)
 801e1c8:	2300      	movs	r3, #0
 801e1ca:	4604      	mov	r4, r0
 801e1cc:	4608      	mov	r0, r1
 801e1ce:	4611      	mov	r1, r2
 801e1d0:	602b      	str	r3, [r5, #0]
 801e1d2:	f7e7 f834 	bl	800523e <_fstat>
 801e1d6:	1c43      	adds	r3, r0, #1
 801e1d8:	d102      	bne.n	801e1e0 <_fstat_r+0x1c>
 801e1da:	682b      	ldr	r3, [r5, #0]
 801e1dc:	b103      	cbz	r3, 801e1e0 <_fstat_r+0x1c>
 801e1de:	6023      	str	r3, [r4, #0]
 801e1e0:	bd38      	pop	{r3, r4, r5, pc}
 801e1e2:	bf00      	nop
 801e1e4:	2000df24 	.word	0x2000df24

0801e1e8 <_isatty_r>:
 801e1e8:	b538      	push	{r3, r4, r5, lr}
 801e1ea:	4d06      	ldr	r5, [pc, #24]	; (801e204 <_isatty_r+0x1c>)
 801e1ec:	2300      	movs	r3, #0
 801e1ee:	4604      	mov	r4, r0
 801e1f0:	4608      	mov	r0, r1
 801e1f2:	602b      	str	r3, [r5, #0]
 801e1f4:	f7e7 f833 	bl	800525e <_isatty>
 801e1f8:	1c43      	adds	r3, r0, #1
 801e1fa:	d102      	bne.n	801e202 <_isatty_r+0x1a>
 801e1fc:	682b      	ldr	r3, [r5, #0]
 801e1fe:	b103      	cbz	r3, 801e202 <_isatty_r+0x1a>
 801e200:	6023      	str	r3, [r4, #0]
 801e202:	bd38      	pop	{r3, r4, r5, pc}
 801e204:	2000df24 	.word	0x2000df24

0801e208 <_malloc_usable_size_r>:
 801e208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e20c:	1f18      	subs	r0, r3, #4
 801e20e:	2b00      	cmp	r3, #0
 801e210:	bfbc      	itt	lt
 801e212:	580b      	ldrlt	r3, [r1, r0]
 801e214:	18c0      	addlt	r0, r0, r3
 801e216:	4770      	bx	lr

0801e218 <_init>:
 801e218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e21a:	bf00      	nop
 801e21c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e21e:	bc08      	pop	{r3}
 801e220:	469e      	mov	lr, r3
 801e222:	4770      	bx	lr

0801e224 <_fini>:
 801e224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e226:	bf00      	nop
 801e228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e22a:	bc08      	pop	{r3}
 801e22c:	469e      	mov	lr, r3
 801e22e:	4770      	bx	lr
