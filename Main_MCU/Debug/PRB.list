
PRB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023238  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000040a0  080233c8  080233c8  000333c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08027468  08027468  0004058c  2**0
                  CONTENTS
  4 .ARM          00000008  08027468  08027468  00037468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08027470  08027470  0004058c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08027470  08027470  00037470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08027474  08027474  00037474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000058c  20000000  08027478  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0004058c  2**0
                  CONTENTS
 10 .bss          0000dc08  2000058c  2000058c  0004058c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000e194  2000e194  0004058c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0004058c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0005a719  00000000  00000000  000405bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000ac4e  00000000  00000000  0009acd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000029e8  00000000  00000000  000a5928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000027e0  00000000  00000000  000a8310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000380eb  00000000  00000000  000aaaf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00045633  00000000  00000000  000e2bdb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001032f9  00000000  00000000  0012820e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0022b507  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c05c  00000000  00000000  0022b55c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000058c 	.word	0x2000058c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080233b0 	.word	0x080233b0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000590 	.word	0x20000590
 80001cc:	080233b0 	.word	0x080233b0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <Analog_Start>:
extern Meas_Data meas_data;

static void Calc_Pt100();

void Analog_Start(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&pt100_input_buffer, sizeof(pt100_input_buffer)/2);
 8000ff0:	2206      	movs	r2, #6
 8000ff2:	4904      	ldr	r1, [pc, #16]	; (8001004 <Analog_Start+0x18>)
 8000ff4:	4804      	ldr	r0, [pc, #16]	; (8001008 <Analog_Start+0x1c>)
 8000ff6:	f006 f859 	bl	80070ac <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim3);
 8000ffa:	4804      	ldr	r0, [pc, #16]	; (800100c <Analog_Start+0x20>)
 8000ffc:	f00a f8d8 	bl	800b1b0 <HAL_TIM_Base_Start>

}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20007000 	.word	0x20007000
 8001008:	200072a0 	.word	0x200072a0
 800100c:	20007200 	.word	0x20007200

08001010 <Analog_Read>:

void Analog_Read(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
	Calc_Pt100();
 8001014:	f000 f802 	bl	800101c <Calc_Pt100>
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}

0800101c <Calc_Pt100>:

static void Calc_Pt100()
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
	float sum = 0;
 8001022:	f04f 0300 	mov.w	r3, #0
 8001026:	607b      	str	r3, [r7, #4]
	if(pt100_data_ready)
 8001028:	4b15      	ldr	r3, [pc, #84]	; (8001080 <Calc_Pt100+0x64>)
 800102a:	781b      	ldrb	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d020      	beq.n	8001072 <Calc_Pt100+0x56>
	{
		for (int i = 0; i < PT100_INPUT_BUFFER_SIZE; ++i) {
 8001030:	2300      	movs	r3, #0
 8001032:	603b      	str	r3, [r7, #0]
 8001034:	e00e      	b.n	8001054 <Calc_Pt100+0x38>
			sum+=pt100_buf[i];
 8001036:	4a13      	ldr	r2, [pc, #76]	; (8001084 <Calc_Pt100+0x68>)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	4413      	add	r3, r2
 800103e:	edd3 7a00 	vldr	s15, [r3]
 8001042:	ed97 7a01 	vldr	s14, [r7, #4]
 8001046:	ee77 7a27 	vadd.f32	s15, s14, s15
 800104a:	edc7 7a01 	vstr	s15, [r7, #4]
		for (int i = 0; i < PT100_INPUT_BUFFER_SIZE; ++i) {
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	3301      	adds	r3, #1
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	2b27      	cmp	r3, #39	; 0x27
 8001058:	dded      	ble.n	8001036 <Calc_Pt100+0x1a>
		}
		meas_data.pt100 = sum/PT100_INPUT_BUFFER_SIZE;
 800105a:	ed97 7a01 	vldr	s14, [r7, #4]
 800105e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8001088 <Calc_Pt100+0x6c>
 8001062:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <Calc_Pt100+0x70>)
 8001068:	edc3 7a02 	vstr	s15, [r3, #8]
		pt100_data_ready = 0;
 800106c:	4b04      	ldr	r3, [pc, #16]	; (8001080 <Calc_Pt100+0x64>)
 800106e:	2200      	movs	r2, #0
 8001070:	701a      	strb	r2, [r3, #0]
	}
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	20006f58 	.word	0x20006f58
 8001084:	20006f60 	.word	0x20006f60
 8001088:	42200000 	.word	0x42200000
 800108c:	20007520 	.word	0x20007520

08001090 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001090:	b480      	push	{r7}
 8001092:	b08b      	sub	sp, #44	; 0x2c
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
	float pt100_0, pt100_1, pt100_3, vRef;
	vRef = pt100_input_buffer.V_ref;
 8001098:	4b45      	ldr	r3, [pc, #276]	; (80011b0 <HAL_ADC_ConvCpltCallback+0x120>)
 800109a:	895b      	ldrh	r3, [r3, #10]
 800109c:	ee07 3a90 	vmov	s15, r3
 80010a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010a4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	vRef = 3.3f*(float)V_REF_VALUE/vRef;
 80010a8:	4b42      	ldr	r3, [pc, #264]	; (80011b4 <HAL_ADC_ConvCpltCallback+0x124>)
 80010aa:	881b      	ldrh	r3, [r3, #0]
 80010ac:	ee07 3a90 	vmov	s15, r3
 80010b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010b4:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80011b8 <HAL_ADC_ConvCpltCallback+0x128>
 80010b8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80010bc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80010c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010c4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	pt100_0 = pt100_input_buffer.Pt100_0 * 3.3f/vRef;
 80010c8:	4b39      	ldr	r3, [pc, #228]	; (80011b0 <HAL_ADC_ConvCpltCallback+0x120>)
 80010ca:	881b      	ldrh	r3, [r3, #0]
 80010cc:	ee07 3a90 	vmov	s15, r3
 80010d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80011b8 <HAL_ADC_ConvCpltCallback+0x128>
 80010d8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80010dc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80010e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010e4:	edc7 7a08 	vstr	s15, [r7, #32]
	pt100_1 = pt100_input_buffer.Pt100_1 * 3.3f/vRef;
 80010e8:	4b31      	ldr	r3, [pc, #196]	; (80011b0 <HAL_ADC_ConvCpltCallback+0x120>)
 80010ea:	885b      	ldrh	r3, [r3, #2]
 80010ec:	ee07 3a90 	vmov	s15, r3
 80010f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f4:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80011b8 <HAL_ADC_ConvCpltCallback+0x128>
 80010f8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80010fc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001100:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001104:	edc7 7a07 	vstr	s15, [r7, #28]
	pt100_3 = pt100_input_buffer.Pt100_3 * 3.3f/vRef;
 8001108:	4b29      	ldr	r3, [pc, #164]	; (80011b0 <HAL_ADC_ConvCpltCallback+0x120>)
 800110a:	88db      	ldrh	r3, [r3, #6]
 800110c:	ee07 3a90 	vmov	s15, r3
 8001110:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001114:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80011b8 <HAL_ADC_ConvCpltCallback+0x128>
 8001118:	ee67 6a87 	vmul.f32	s13, s15, s14
 800111c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001120:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001124:	edc7 7a06 	vstr	s15, [r7, #24]
	float vpt100 = pt100_3 - pt100_1;
 8001128:	ed97 7a06 	vldr	s14, [r7, #24]
 800112c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001130:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001134:	edc7 7a05 	vstr	s15, [r7, #20]
	float ref = pt100_1-pt100_0;
 8001138:	ed97 7a07 	vldr	s14, [r7, #28]
 800113c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001140:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001144:	edc7 7a04 	vstr	s15, [r7, #16]
	float v_result = vpt100*100/ref;
 8001148:	edd7 7a05 	vldr	s15, [r7, #20]
 800114c:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 80011bc <HAL_ADC_ConvCpltCallback+0x12c>
 8001150:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001154:	ed97 7a04 	vldr	s14, [r7, #16]
 8001158:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800115c:	edc7 7a03 	vstr	s15, [r7, #12]
	pt100_buf[j] = (v_result - 100)*2.5974f;
 8001160:	edd7 7a03 	vldr	s15, [r7, #12]
 8001164:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80011bc <HAL_ADC_ConvCpltCallback+0x12c>
 8001168:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800116c:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <HAL_ADC_ConvCpltCallback+0x130>)
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80011c4 <HAL_ADC_ConvCpltCallback+0x134>
 8001174:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001178:	4a13      	ldr	r2, [pc, #76]	; (80011c8 <HAL_ADC_ConvCpltCallback+0x138>)
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	edc3 7a00 	vstr	s15, [r3]
	j++;
 8001182:	4b0f      	ldr	r3, [pc, #60]	; (80011c0 <HAL_ADC_ConvCpltCallback+0x130>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	3301      	adds	r3, #1
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4b0d      	ldr	r3, [pc, #52]	; (80011c0 <HAL_ADC_ConvCpltCallback+0x130>)
 800118c:	701a      	strb	r2, [r3, #0]
	if(j>=PT100_INPUT_BUFFER_SIZE)j=0;
 800118e:	4b0c      	ldr	r3, [pc, #48]	; (80011c0 <HAL_ADC_ConvCpltCallback+0x130>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b27      	cmp	r3, #39	; 0x27
 8001194:	d902      	bls.n	800119c <HAL_ADC_ConvCpltCallback+0x10c>
 8001196:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <HAL_ADC_ConvCpltCallback+0x130>)
 8001198:	2200      	movs	r2, #0
 800119a:	701a      	strb	r2, [r3, #0]
	pt100_data_ready = 1;
 800119c:	4b0b      	ldr	r3, [pc, #44]	; (80011cc <HAL_ADC_ConvCpltCallback+0x13c>)
 800119e:	2201      	movs	r2, #1
 80011a0:	701a      	strb	r2, [r3, #0]
}
 80011a2:	bf00      	nop
 80011a4:	372c      	adds	r7, #44	; 0x2c
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20007000 	.word	0x20007000
 80011b4:	1fff7a2a 	.word	0x1fff7a2a
 80011b8:	40533333 	.word	0x40533333
 80011bc:	42c80000 	.word	0x42c80000
 80011c0:	20006f59 	.word	0x20006f59
 80011c4:	40263bcd 	.word	0x40263bcd
 80011c8:	20006f60 	.word	0x20006f60
 80011cc:	20006f58 	.word	0x20006f58

080011d0 <set_bit>:
 */

#include <control_bit.h>

uint16_t set_bit(uint16_t value, uint8_t num)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	460a      	mov	r2, r1
 80011da:	80fb      	strh	r3, [r7, #6]
 80011dc:	4613      	mov	r3, r2
 80011de:	717b      	strb	r3, [r7, #5]
     return value | (1 << num);
 80011e0:	797b      	ldrb	r3, [r7, #5]
 80011e2:	2201      	movs	r2, #1
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	b21a      	sxth	r2, r3
 80011ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	b29b      	uxth	r3, r3
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <Read_Inputs>:




void Read_Inputs()
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
	Filter_Inputs();
 8001204:	f000 fb16 	bl	8001834 <Filter_Inputs>
	meas_data.d_inputs.in0 	= settings.retain.input_emulation_switches.in0  ? settings.retain.input_emulation_values.in0 :  filters_inputs[0];
 8001208:	4b84      	ldr	r3, [pc, #528]	; (800141c <Read_Inputs+0x21c>)
 800120a:	7b1b      	ldrb	r3, [r3, #12]
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b00      	cmp	r3, #0
 8001214:	d005      	beq.n	8001222 <Read_Inputs+0x22>
 8001216:	4b81      	ldr	r3, [pc, #516]	; (800141c <Read_Inputs+0x21c>)
 8001218:	7b9b      	ldrb	r3, [r3, #14]
 800121a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800121e:	b2da      	uxtb	r2, r3
 8001220:	e004      	b.n	800122c <Read_Inputs+0x2c>
 8001222:	4b7f      	ldr	r3, [pc, #508]	; (8001420 <Read_Inputs+0x220>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	b2da      	uxtb	r2, r3
 800122c:	497d      	ldr	r1, [pc, #500]	; (8001424 <Read_Inputs+0x224>)
 800122e:	780b      	ldrb	r3, [r1, #0]
 8001230:	f362 0300 	bfi	r3, r2, #0, #1
 8001234:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in1 	= settings.retain.input_emulation_switches.in1  ? settings.retain.input_emulation_values.in1 :  filters_inputs[1];
 8001236:	4b79      	ldr	r3, [pc, #484]	; (800141c <Read_Inputs+0x21c>)
 8001238:	7b1b      	ldrb	r3, [r3, #12]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b00      	cmp	r3, #0
 8001242:	d005      	beq.n	8001250 <Read_Inputs+0x50>
 8001244:	4b75      	ldr	r3, [pc, #468]	; (800141c <Read_Inputs+0x21c>)
 8001246:	7b9b      	ldrb	r3, [r3, #14]
 8001248:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800124c:	b2da      	uxtb	r2, r3
 800124e:	e004      	b.n	800125a <Read_Inputs+0x5a>
 8001250:	4b73      	ldr	r3, [pc, #460]	; (8001420 <Read_Inputs+0x220>)
 8001252:	785b      	ldrb	r3, [r3, #1]
 8001254:	f003 0301 	and.w	r3, r3, #1
 8001258:	b2da      	uxtb	r2, r3
 800125a:	4972      	ldr	r1, [pc, #456]	; (8001424 <Read_Inputs+0x224>)
 800125c:	780b      	ldrb	r3, [r1, #0]
 800125e:	f362 0341 	bfi	r3, r2, #1, #1
 8001262:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in2 	= settings.retain.input_emulation_switches.in2  ? settings.retain.input_emulation_values.in2 :  filters_inputs[2];
 8001264:	4b6d      	ldr	r3, [pc, #436]	; (800141c <Read_Inputs+0x21c>)
 8001266:	7b1b      	ldrb	r3, [r3, #12]
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d005      	beq.n	800127e <Read_Inputs+0x7e>
 8001272:	4b6a      	ldr	r3, [pc, #424]	; (800141c <Read_Inputs+0x21c>)
 8001274:	7b9b      	ldrb	r3, [r3, #14]
 8001276:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800127a:	b2da      	uxtb	r2, r3
 800127c:	e004      	b.n	8001288 <Read_Inputs+0x88>
 800127e:	4b68      	ldr	r3, [pc, #416]	; (8001420 <Read_Inputs+0x220>)
 8001280:	789b      	ldrb	r3, [r3, #2]
 8001282:	f003 0301 	and.w	r3, r3, #1
 8001286:	b2da      	uxtb	r2, r3
 8001288:	4966      	ldr	r1, [pc, #408]	; (8001424 <Read_Inputs+0x224>)
 800128a:	780b      	ldrb	r3, [r1, #0]
 800128c:	f362 0382 	bfi	r3, r2, #2, #1
 8001290:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in3 	= settings.retain.input_emulation_switches.in3  ? settings.retain.input_emulation_values.in3 :  filters_inputs[3];
 8001292:	4b62      	ldr	r3, [pc, #392]	; (800141c <Read_Inputs+0x21c>)
 8001294:	7b1b      	ldrb	r3, [r3, #12]
 8001296:	f003 0308 	and.w	r3, r3, #8
 800129a:	b2db      	uxtb	r3, r3
 800129c:	2b00      	cmp	r3, #0
 800129e:	d005      	beq.n	80012ac <Read_Inputs+0xac>
 80012a0:	4b5e      	ldr	r3, [pc, #376]	; (800141c <Read_Inputs+0x21c>)
 80012a2:	7b9b      	ldrb	r3, [r3, #14]
 80012a4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80012a8:	b2da      	uxtb	r2, r3
 80012aa:	e004      	b.n	80012b6 <Read_Inputs+0xb6>
 80012ac:	4b5c      	ldr	r3, [pc, #368]	; (8001420 <Read_Inputs+0x220>)
 80012ae:	78db      	ldrb	r3, [r3, #3]
 80012b0:	f003 0301 	and.w	r3, r3, #1
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	495b      	ldr	r1, [pc, #364]	; (8001424 <Read_Inputs+0x224>)
 80012b8:	780b      	ldrb	r3, [r1, #0]
 80012ba:	f362 03c3 	bfi	r3, r2, #3, #1
 80012be:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in4 	= settings.retain.input_emulation_switches.in4  ? settings.retain.input_emulation_values.in4 :  filters_inputs[4];
 80012c0:	4b56      	ldr	r3, [pc, #344]	; (800141c <Read_Inputs+0x21c>)
 80012c2:	7b1b      	ldrb	r3, [r3, #12]
 80012c4:	f003 0310 	and.w	r3, r3, #16
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d005      	beq.n	80012da <Read_Inputs+0xda>
 80012ce:	4b53      	ldr	r3, [pc, #332]	; (800141c <Read_Inputs+0x21c>)
 80012d0:	7b9b      	ldrb	r3, [r3, #14]
 80012d2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80012d6:	b2da      	uxtb	r2, r3
 80012d8:	e004      	b.n	80012e4 <Read_Inputs+0xe4>
 80012da:	4b51      	ldr	r3, [pc, #324]	; (8001420 <Read_Inputs+0x220>)
 80012dc:	791b      	ldrb	r3, [r3, #4]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	494f      	ldr	r1, [pc, #316]	; (8001424 <Read_Inputs+0x224>)
 80012e6:	780b      	ldrb	r3, [r1, #0]
 80012e8:	f362 1304 	bfi	r3, r2, #4, #1
 80012ec:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in5 	= settings.retain.input_emulation_switches.in5  ? settings.retain.input_emulation_values.in5 :  filters_inputs[5];
 80012ee:	4b4b      	ldr	r3, [pc, #300]	; (800141c <Read_Inputs+0x21c>)
 80012f0:	7b1b      	ldrb	r3, [r3, #12]
 80012f2:	f003 0320 	and.w	r3, r3, #32
 80012f6:	b2db      	uxtb	r3, r3
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d005      	beq.n	8001308 <Read_Inputs+0x108>
 80012fc:	4b47      	ldr	r3, [pc, #284]	; (800141c <Read_Inputs+0x21c>)
 80012fe:	7b9b      	ldrb	r3, [r3, #14]
 8001300:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001304:	b2da      	uxtb	r2, r3
 8001306:	e004      	b.n	8001312 <Read_Inputs+0x112>
 8001308:	4b45      	ldr	r3, [pc, #276]	; (8001420 <Read_Inputs+0x220>)
 800130a:	795b      	ldrb	r3, [r3, #5]
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	b2da      	uxtb	r2, r3
 8001312:	4944      	ldr	r1, [pc, #272]	; (8001424 <Read_Inputs+0x224>)
 8001314:	780b      	ldrb	r3, [r1, #0]
 8001316:	f362 1345 	bfi	r3, r2, #5, #1
 800131a:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in6 	= settings.retain.input_emulation_switches.in6  ? settings.retain.input_emulation_values.in6 :  filters_inputs[6];
 800131c:	4b3f      	ldr	r3, [pc, #252]	; (800141c <Read_Inputs+0x21c>)
 800131e:	7b1b      	ldrb	r3, [r3, #12]
 8001320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d005      	beq.n	8001336 <Read_Inputs+0x136>
 800132a:	4b3c      	ldr	r3, [pc, #240]	; (800141c <Read_Inputs+0x21c>)
 800132c:	7b9b      	ldrb	r3, [r3, #14]
 800132e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8001332:	b2da      	uxtb	r2, r3
 8001334:	e004      	b.n	8001340 <Read_Inputs+0x140>
 8001336:	4b3a      	ldr	r3, [pc, #232]	; (8001420 <Read_Inputs+0x220>)
 8001338:	799b      	ldrb	r3, [r3, #6]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	b2da      	uxtb	r2, r3
 8001340:	4938      	ldr	r1, [pc, #224]	; (8001424 <Read_Inputs+0x224>)
 8001342:	780b      	ldrb	r3, [r1, #0]
 8001344:	f362 1386 	bfi	r3, r2, #6, #1
 8001348:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in7 	= settings.retain.input_emulation_switches.in7  ? settings.retain.input_emulation_values.in7 :  filters_inputs[7];
 800134a:	4b34      	ldr	r3, [pc, #208]	; (800141c <Read_Inputs+0x21c>)
 800134c:	7b1b      	ldrb	r3, [r3, #12]
 800134e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001352:	b2db      	uxtb	r3, r3
 8001354:	2b00      	cmp	r3, #0
 8001356:	d005      	beq.n	8001364 <Read_Inputs+0x164>
 8001358:	4b30      	ldr	r3, [pc, #192]	; (800141c <Read_Inputs+0x21c>)
 800135a:	7b9b      	ldrb	r3, [r3, #14]
 800135c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001360:	b2da      	uxtb	r2, r3
 8001362:	e004      	b.n	800136e <Read_Inputs+0x16e>
 8001364:	4b2e      	ldr	r3, [pc, #184]	; (8001420 <Read_Inputs+0x220>)
 8001366:	79db      	ldrb	r3, [r3, #7]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	b2da      	uxtb	r2, r3
 800136e:	492d      	ldr	r1, [pc, #180]	; (8001424 <Read_Inputs+0x224>)
 8001370:	780b      	ldrb	r3, [r1, #0]
 8001372:	f362 13c7 	bfi	r3, r2, #7, #1
 8001376:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in8 	= settings.retain.input_emulation_switches.in8  ? settings.retain.input_emulation_values.in8 :  filters_inputs[8];
 8001378:	4b28      	ldr	r3, [pc, #160]	; (800141c <Read_Inputs+0x21c>)
 800137a:	7b5b      	ldrb	r3, [r3, #13]
 800137c:	f003 0301 	and.w	r3, r3, #1
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d005      	beq.n	8001392 <Read_Inputs+0x192>
 8001386:	4b25      	ldr	r3, [pc, #148]	; (800141c <Read_Inputs+0x21c>)
 8001388:	7bdb      	ldrb	r3, [r3, #15]
 800138a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800138e:	b2da      	uxtb	r2, r3
 8001390:	e004      	b.n	800139c <Read_Inputs+0x19c>
 8001392:	4b23      	ldr	r3, [pc, #140]	; (8001420 <Read_Inputs+0x220>)
 8001394:	7a1b      	ldrb	r3, [r3, #8]
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	b2da      	uxtb	r2, r3
 800139c:	4921      	ldr	r1, [pc, #132]	; (8001424 <Read_Inputs+0x224>)
 800139e:	784b      	ldrb	r3, [r1, #1]
 80013a0:	f362 0300 	bfi	r3, r2, #0, #1
 80013a4:	704b      	strb	r3, [r1, #1]
	meas_data.d_inputs.in9 	= settings.retain.input_emulation_switches.in9  ? settings.retain.input_emulation_values.in9 :  filters_inputs[9];
 80013a6:	4b1d      	ldr	r3, [pc, #116]	; (800141c <Read_Inputs+0x21c>)
 80013a8:	7b5b      	ldrb	r3, [r3, #13]
 80013aa:	f003 0302 	and.w	r3, r3, #2
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d005      	beq.n	80013c0 <Read_Inputs+0x1c0>
 80013b4:	4b19      	ldr	r3, [pc, #100]	; (800141c <Read_Inputs+0x21c>)
 80013b6:	7bdb      	ldrb	r3, [r3, #15]
 80013b8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	e004      	b.n	80013ca <Read_Inputs+0x1ca>
 80013c0:	4b17      	ldr	r3, [pc, #92]	; (8001420 <Read_Inputs+0x220>)
 80013c2:	7a5b      	ldrb	r3, [r3, #9]
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4916      	ldr	r1, [pc, #88]	; (8001424 <Read_Inputs+0x224>)
 80013cc:	784b      	ldrb	r3, [r1, #1]
 80013ce:	f362 0341 	bfi	r3, r2, #1, #1
 80013d2:	704b      	strb	r3, [r1, #1]
	meas_data.d_inputs.in10 = settings.retain.input_emulation_switches.in10 ? settings.retain.input_emulation_values.in10 : filters_inputs[10];
 80013d4:	4b11      	ldr	r3, [pc, #68]	; (800141c <Read_Inputs+0x21c>)
 80013d6:	7b5b      	ldrb	r3, [r3, #13]
 80013d8:	f003 0304 	and.w	r3, r3, #4
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d005      	beq.n	80013ee <Read_Inputs+0x1ee>
 80013e2:	4b0e      	ldr	r3, [pc, #56]	; (800141c <Read_Inputs+0x21c>)
 80013e4:	7bdb      	ldrb	r3, [r3, #15]
 80013e6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80013ea:	b2da      	uxtb	r2, r3
 80013ec:	e004      	b.n	80013f8 <Read_Inputs+0x1f8>
 80013ee:	4b0c      	ldr	r3, [pc, #48]	; (8001420 <Read_Inputs+0x220>)
 80013f0:	7a9b      	ldrb	r3, [r3, #10]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	490a      	ldr	r1, [pc, #40]	; (8001424 <Read_Inputs+0x224>)
 80013fa:	784b      	ldrb	r3, [r1, #1]
 80013fc:	f362 0382 	bfi	r3, r2, #2, #1
 8001400:	704b      	strb	r3, [r1, #1]
	meas_data.d_inputs.in11 = settings.retain.input_emulation_switches.in11 ? settings.retain.input_emulation_values.in11 : filters_inputs[11];
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <Read_Inputs+0x21c>)
 8001404:	7b5b      	ldrb	r3, [r3, #13]
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b00      	cmp	r3, #0
 800140e:	d00b      	beq.n	8001428 <Read_Inputs+0x228>
 8001410:	4b02      	ldr	r3, [pc, #8]	; (800141c <Read_Inputs+0x21c>)
 8001412:	7bdb      	ldrb	r3, [r3, #15]
 8001414:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001418:	b2da      	uxtb	r2, r3
 800141a:	e00a      	b.n	8001432 <Read_Inputs+0x232>
 800141c:	20007474 	.word	0x20007474
 8001420:	2000700c 	.word	0x2000700c
 8001424:	20007520 	.word	0x20007520
 8001428:	4b3c      	ldr	r3, [pc, #240]	; (800151c <Read_Inputs+0x31c>)
 800142a:	7adb      	ldrb	r3, [r3, #11]
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	b2da      	uxtb	r2, r3
 8001432:	493b      	ldr	r1, [pc, #236]	; (8001520 <Read_Inputs+0x320>)
 8001434:	784b      	ldrb	r3, [r1, #1]
 8001436:	f362 03c3 	bfi	r3, r2, #3, #1
 800143a:	704b      	strb	r3, [r1, #1]

	d_inputs.uz_prob_fail 				= meas_data.d_inputs.in0;
 800143c:	4b38      	ldr	r3, [pc, #224]	; (8001520 <Read_Inputs+0x320>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001444:	b2d9      	uxtb	r1, r3
 8001446:	4a37      	ldr	r2, [pc, #220]	; (8001524 <Read_Inputs+0x324>)
 8001448:	7813      	ldrb	r3, [r2, #0]
 800144a:	f361 0300 	bfi	r3, r1, #0, #1
 800144e:	7013      	strb	r3, [r2, #0]
	d_inputs.sq_kovsh_prob_right_1 		= meas_data.d_inputs.in1;
 8001450:	4b33      	ldr	r3, [pc, #204]	; (8001520 <Read_Inputs+0x320>)
 8001452:	781b      	ldrb	r3, [r3, #0]
 8001454:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001458:	b2d9      	uxtb	r1, r3
 800145a:	4a32      	ldr	r2, [pc, #200]	; (8001524 <Read_Inputs+0x324>)
 800145c:	7813      	ldrb	r3, [r2, #0]
 800145e:	f361 0341 	bfi	r3, r1, #1, #1
 8001462:	7013      	strb	r3, [r2, #0]
	d_inputs.sq_kovsh_prob_right_2		= meas_data.d_inputs.in2;
 8001464:	4b2e      	ldr	r3, [pc, #184]	; (8001520 <Read_Inputs+0x320>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800146c:	b2d9      	uxtb	r1, r3
 800146e:	4a2d      	ldr	r2, [pc, #180]	; (8001524 <Read_Inputs+0x324>)
 8001470:	7813      	ldrb	r3, [r2, #0]
 8001472:	f361 0382 	bfi	r3, r1, #2, #1
 8001476:	7013      	strb	r3, [r2, #0]
	d_inputs.sq_kovsh_prob_left_1 		= meas_data.d_inputs.in3;
 8001478:	4b29      	ldr	r3, [pc, #164]	; (8001520 <Read_Inputs+0x320>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001480:	b2d9      	uxtb	r1, r3
 8001482:	4a28      	ldr	r2, [pc, #160]	; (8001524 <Read_Inputs+0x324>)
 8001484:	7813      	ldrb	r3, [r2, #0]
 8001486:	f361 03c3 	bfi	r3, r1, #3, #1
 800148a:	7013      	strb	r3, [r2, #0]
	d_inputs.sq_kovsh_prob_left_2		= meas_data.d_inputs.in4;
 800148c:	4b24      	ldr	r3, [pc, #144]	; (8001520 <Read_Inputs+0x320>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001494:	b2d9      	uxtb	r1, r3
 8001496:	4a23      	ldr	r2, [pc, #140]	; (8001524 <Read_Inputs+0x324>)
 8001498:	7813      	ldrb	r3, [r2, #0]
 800149a:	f361 1304 	bfi	r3, r1, #4, #1
 800149e:	7013      	strb	r3, [r2, #0]
	d_inputs.sb_stop					= meas_data.d_inputs.in5;
 80014a0:	4b1f      	ldr	r3, [pc, #124]	; (8001520 <Read_Inputs+0x320>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80014a8:	b2d9      	uxtb	r1, r3
 80014aa:	4a1e      	ldr	r2, [pc, #120]	; (8001524 <Read_Inputs+0x324>)
 80014ac:	7813      	ldrb	r3, [r2, #0]
 80014ae:	f361 1345 	bfi	r3, r1, #5, #1
 80014b2:	7013      	strb	r3, [r2, #0]
	d_inputs.sb_make_proba				= meas_data.d_inputs.in6;
 80014b4:	4b1a      	ldr	r3, [pc, #104]	; (8001520 <Read_Inputs+0x320>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80014bc:	b2d9      	uxtb	r1, r3
 80014be:	4a19      	ldr	r2, [pc, #100]	; (8001524 <Read_Inputs+0x324>)
 80014c0:	7813      	ldrb	r3, [r2, #0]
 80014c2:	f361 1386 	bfi	r3, r1, #6, #1
 80014c6:	7013      	strb	r3, [r2, #0]
	d_inputs.sb_vozvrat					= meas_data.d_inputs.in7;
 80014c8:	4b15      	ldr	r3, [pc, #84]	; (8001520 <Read_Inputs+0x320>)
 80014ca:	781b      	ldrb	r3, [r3, #0]
 80014cc:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80014d0:	b2d9      	uxtb	r1, r3
 80014d2:	4a14      	ldr	r2, [pc, #80]	; (8001524 <Read_Inputs+0x324>)
 80014d4:	7813      	ldrb	r3, [r2, #0]
 80014d6:	f361 13c7 	bfi	r3, r1, #7, #1
 80014da:	7013      	strb	r3, [r2, #0]
	d_inputs.sb_auto_local				= meas_data.d_inputs.in8;
 80014dc:	4b10      	ldr	r3, [pc, #64]	; (8001520 <Read_Inputs+0x320>)
 80014de:	785b      	ldrb	r3, [r3, #1]
 80014e0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80014e4:	b2d9      	uxtb	r1, r3
 80014e6:	4a0f      	ldr	r2, [pc, #60]	; (8001524 <Read_Inputs+0x324>)
 80014e8:	7853      	ldrb	r3, [r2, #1]
 80014ea:	f361 0300 	bfi	r3, r1, #0, #1
 80014ee:	7053      	strb	r3, [r2, #1]
	d_inputs.sq_kanistra				= meas_data.d_inputs.in9;
 80014f0:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <Read_Inputs+0x320>)
 80014f2:	785b      	ldrb	r3, [r3, #1]
 80014f4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80014f8:	b2d9      	uxtb	r1, r3
 80014fa:	4a0a      	ldr	r2, [pc, #40]	; (8001524 <Read_Inputs+0x324>)
 80014fc:	7853      	ldrb	r3, [r2, #1]
 80014fe:	f361 0341 	bfi	r3, r1, #1, #1
 8001502:	7053      	strb	r3, [r2, #1]
	d_inputs.sq_kanistra_door			= meas_data.d_inputs.in10;
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <Read_Inputs+0x320>)
 8001506:	785b      	ldrb	r3, [r3, #1]
 8001508:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800150c:	b2d9      	uxtb	r1, r3
 800150e:	4a05      	ldr	r2, [pc, #20]	; (8001524 <Read_Inputs+0x324>)
 8001510:	7853      	ldrb	r3, [r2, #1]
 8001512:	f361 0382 	bfi	r3, r1, #2, #1
 8001516:	7053      	strb	r3, [r2, #1]




}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}
 800151c:	2000700c 	.word	0x2000700c
 8001520:	20007520 	.word	0x20007520
 8001524:	2000701c 	.word	0x2000701c

08001528 <Write_Outputs>:

void Write_Outputs()
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
	meas_data.d_outputs.out0  = settings.retain.output_emulation_switches.out0  ? settings.retain.output_emulation_values.out0  :  d_outputs.uz_prob_forv;
 800152c:	4b74      	ldr	r3, [pc, #464]	; (8001700 <Write_Outputs+0x1d8>)
 800152e:	7c1b      	ldrb	r3, [r3, #16]
 8001530:	f003 0301 	and.w	r3, r3, #1
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2b00      	cmp	r3, #0
 8001538:	d005      	beq.n	8001546 <Write_Outputs+0x1e>
 800153a:	4b71      	ldr	r3, [pc, #452]	; (8001700 <Write_Outputs+0x1d8>)
 800153c:	7c9b      	ldrb	r3, [r3, #18]
 800153e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001542:	b2da      	uxtb	r2, r3
 8001544:	e004      	b.n	8001550 <Write_Outputs+0x28>
 8001546:	4b6f      	ldr	r3, [pc, #444]	; (8001704 <Write_Outputs+0x1dc>)
 8001548:	781b      	ldrb	r3, [r3, #0]
 800154a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800154e:	b2da      	uxtb	r2, r3
 8001550:	496d      	ldr	r1, [pc, #436]	; (8001708 <Write_Outputs+0x1e0>)
 8001552:	788b      	ldrb	r3, [r1, #2]
 8001554:	f362 0300 	bfi	r3, r2, #0, #1
 8001558:	708b      	strb	r3, [r1, #2]
	meas_data.d_outputs.out1  = settings.retain.output_emulation_switches.out1  ? settings.retain.output_emulation_values.out1  :  d_outputs.uz_prob_rev;
 800155a:	4b69      	ldr	r3, [pc, #420]	; (8001700 <Write_Outputs+0x1d8>)
 800155c:	7c1b      	ldrb	r3, [r3, #16]
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	d005      	beq.n	8001574 <Write_Outputs+0x4c>
 8001568:	4b65      	ldr	r3, [pc, #404]	; (8001700 <Write_Outputs+0x1d8>)
 800156a:	7c9b      	ldrb	r3, [r3, #18]
 800156c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001570:	b2da      	uxtb	r2, r3
 8001572:	e004      	b.n	800157e <Write_Outputs+0x56>
 8001574:	4b63      	ldr	r3, [pc, #396]	; (8001704 <Write_Outputs+0x1dc>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800157c:	b2da      	uxtb	r2, r3
 800157e:	4962      	ldr	r1, [pc, #392]	; (8001708 <Write_Outputs+0x1e0>)
 8001580:	788b      	ldrb	r3, [r1, #2]
 8001582:	f362 0341 	bfi	r3, r2, #1, #1
 8001586:	708b      	strb	r3, [r1, #2]
	meas_data.d_outputs.out2  = settings.retain.output_emulation_switches.out2  ? settings.retain.output_emulation_values.out2  :  d_outputs.prob_ready;
 8001588:	4b5d      	ldr	r3, [pc, #372]	; (8001700 <Write_Outputs+0x1d8>)
 800158a:	7c1b      	ldrb	r3, [r3, #16]
 800158c:	f003 0304 	and.w	r3, r3, #4
 8001590:	b2db      	uxtb	r3, r3
 8001592:	2b00      	cmp	r3, #0
 8001594:	d005      	beq.n	80015a2 <Write_Outputs+0x7a>
 8001596:	4b5a      	ldr	r3, [pc, #360]	; (8001700 <Write_Outputs+0x1d8>)
 8001598:	7c9b      	ldrb	r3, [r3, #18]
 800159a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800159e:	b2da      	uxtb	r2, r3
 80015a0:	e004      	b.n	80015ac <Write_Outputs+0x84>
 80015a2:	4b58      	ldr	r3, [pc, #352]	; (8001704 <Write_Outputs+0x1dc>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	4956      	ldr	r1, [pc, #344]	; (8001708 <Write_Outputs+0x1e0>)
 80015ae:	788b      	ldrb	r3, [r1, #2]
 80015b0:	f362 0382 	bfi	r3, r2, #2, #1
 80015b4:	708b      	strb	r3, [r1, #2]
	meas_data.d_outputs.out3  = settings.retain.output_emulation_switches.out3  ? settings.retain.output_emulation_values.out3  :  0;
 80015b6:	4b52      	ldr	r3, [pc, #328]	; (8001700 <Write_Outputs+0x1d8>)
 80015b8:	7c1b      	ldrb	r3, [r3, #16]
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d005      	beq.n	80015d0 <Write_Outputs+0xa8>
 80015c4:	4b4e      	ldr	r3, [pc, #312]	; (8001700 <Write_Outputs+0x1d8>)
 80015c6:	7c9b      	ldrb	r3, [r3, #18]
 80015c8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80015cc:	b2d9      	uxtb	r1, r3
 80015ce:	e000      	b.n	80015d2 <Write_Outputs+0xaa>
 80015d0:	2100      	movs	r1, #0
 80015d2:	4a4d      	ldr	r2, [pc, #308]	; (8001708 <Write_Outputs+0x1e0>)
 80015d4:	7893      	ldrb	r3, [r2, #2]
 80015d6:	f361 03c3 	bfi	r3, r1, #3, #1
 80015da:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out4  = settings.retain.output_emulation_switches.out4  ? settings.retain.output_emulation_values.out4  :  0;
 80015dc:	4b48      	ldr	r3, [pc, #288]	; (8001700 <Write_Outputs+0x1d8>)
 80015de:	7c1b      	ldrb	r3, [r3, #16]
 80015e0:	f003 0310 	and.w	r3, r3, #16
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d005      	beq.n	80015f6 <Write_Outputs+0xce>
 80015ea:	4b45      	ldr	r3, [pc, #276]	; (8001700 <Write_Outputs+0x1d8>)
 80015ec:	7c9b      	ldrb	r3, [r3, #18]
 80015ee:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80015f2:	b2d9      	uxtb	r1, r3
 80015f4:	e000      	b.n	80015f8 <Write_Outputs+0xd0>
 80015f6:	2100      	movs	r1, #0
 80015f8:	4a43      	ldr	r2, [pc, #268]	; (8001708 <Write_Outputs+0x1e0>)
 80015fa:	7893      	ldrb	r3, [r2, #2]
 80015fc:	f361 1304 	bfi	r3, r1, #4, #1
 8001600:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out5  = settings.retain.output_emulation_switches.out5  ? settings.retain.output_emulation_values.out5  :  0;
 8001602:	4b3f      	ldr	r3, [pc, #252]	; (8001700 <Write_Outputs+0x1d8>)
 8001604:	7c1b      	ldrb	r3, [r3, #16]
 8001606:	f003 0320 	and.w	r3, r3, #32
 800160a:	b2db      	uxtb	r3, r3
 800160c:	2b00      	cmp	r3, #0
 800160e:	d005      	beq.n	800161c <Write_Outputs+0xf4>
 8001610:	4b3b      	ldr	r3, [pc, #236]	; (8001700 <Write_Outputs+0x1d8>)
 8001612:	7c9b      	ldrb	r3, [r3, #18]
 8001614:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8001618:	b2d9      	uxtb	r1, r3
 800161a:	e000      	b.n	800161e <Write_Outputs+0xf6>
 800161c:	2100      	movs	r1, #0
 800161e:	4a3a      	ldr	r2, [pc, #232]	; (8001708 <Write_Outputs+0x1e0>)
 8001620:	7893      	ldrb	r3, [r2, #2]
 8001622:	f361 1345 	bfi	r3, r1, #5, #1
 8001626:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out6  = settings.retain.output_emulation_switches.out6  ? settings.retain.output_emulation_values.out6  :  0;
 8001628:	4b35      	ldr	r3, [pc, #212]	; (8001700 <Write_Outputs+0x1d8>)
 800162a:	7c1b      	ldrb	r3, [r3, #16]
 800162c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d005      	beq.n	8001642 <Write_Outputs+0x11a>
 8001636:	4b32      	ldr	r3, [pc, #200]	; (8001700 <Write_Outputs+0x1d8>)
 8001638:	7c9b      	ldrb	r3, [r3, #18]
 800163a:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800163e:	b2d9      	uxtb	r1, r3
 8001640:	e000      	b.n	8001644 <Write_Outputs+0x11c>
 8001642:	2100      	movs	r1, #0
 8001644:	4a30      	ldr	r2, [pc, #192]	; (8001708 <Write_Outputs+0x1e0>)
 8001646:	7893      	ldrb	r3, [r2, #2]
 8001648:	f361 1386 	bfi	r3, r1, #6, #1
 800164c:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out7  = settings.retain.output_emulation_switches.out7  ? settings.retain.output_emulation_values.out7  :  0;
 800164e:	4b2c      	ldr	r3, [pc, #176]	; (8001700 <Write_Outputs+0x1d8>)
 8001650:	7c1b      	ldrb	r3, [r3, #16]
 8001652:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b00      	cmp	r3, #0
 800165a:	d005      	beq.n	8001668 <Write_Outputs+0x140>
 800165c:	4b28      	ldr	r3, [pc, #160]	; (8001700 <Write_Outputs+0x1d8>)
 800165e:	7c9b      	ldrb	r3, [r3, #18]
 8001660:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001664:	b2d9      	uxtb	r1, r3
 8001666:	e000      	b.n	800166a <Write_Outputs+0x142>
 8001668:	2100      	movs	r1, #0
 800166a:	4a27      	ldr	r2, [pc, #156]	; (8001708 <Write_Outputs+0x1e0>)
 800166c:	7893      	ldrb	r3, [r2, #2]
 800166e:	f361 13c7 	bfi	r3, r1, #7, #1
 8001672:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out8  = settings.retain.output_emulation_switches.out8  ? settings.retain.output_emulation_values.out8  :  0;
 8001674:	4b22      	ldr	r3, [pc, #136]	; (8001700 <Write_Outputs+0x1d8>)
 8001676:	7c5b      	ldrb	r3, [r3, #17]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	b2db      	uxtb	r3, r3
 800167e:	2b00      	cmp	r3, #0
 8001680:	d005      	beq.n	800168e <Write_Outputs+0x166>
 8001682:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <Write_Outputs+0x1d8>)
 8001684:	7cdb      	ldrb	r3, [r3, #19]
 8001686:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800168a:	b2d9      	uxtb	r1, r3
 800168c:	e000      	b.n	8001690 <Write_Outputs+0x168>
 800168e:	2100      	movs	r1, #0
 8001690:	4a1d      	ldr	r2, [pc, #116]	; (8001708 <Write_Outputs+0x1e0>)
 8001692:	78d3      	ldrb	r3, [r2, #3]
 8001694:	f361 0300 	bfi	r3, r1, #0, #1
 8001698:	70d3      	strb	r3, [r2, #3]
	meas_data.d_outputs.out9  = settings.retain.output_emulation_switches.out9  ? settings.retain.output_emulation_values.out9  :  0;
 800169a:	4b19      	ldr	r3, [pc, #100]	; (8001700 <Write_Outputs+0x1d8>)
 800169c:	7c5b      	ldrb	r3, [r3, #17]
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d005      	beq.n	80016b4 <Write_Outputs+0x18c>
 80016a8:	4b15      	ldr	r3, [pc, #84]	; (8001700 <Write_Outputs+0x1d8>)
 80016aa:	7cdb      	ldrb	r3, [r3, #19]
 80016ac:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80016b0:	b2d9      	uxtb	r1, r3
 80016b2:	e000      	b.n	80016b6 <Write_Outputs+0x18e>
 80016b4:	2100      	movs	r1, #0
 80016b6:	4a14      	ldr	r2, [pc, #80]	; (8001708 <Write_Outputs+0x1e0>)
 80016b8:	78d3      	ldrb	r3, [r2, #3]
 80016ba:	f361 0341 	bfi	r3, r1, #1, #1
 80016be:	70d3      	strb	r3, [r2, #3]
	meas_data.d_outputs.out10 = settings.retain.output_emulation_switches.out10 ? settings.retain.output_emulation_values.out10 :  0;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	; (8001700 <Write_Outputs+0x1d8>)
 80016c2:	7c5b      	ldrb	r3, [r3, #17]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	b2db      	uxtb	r3, r3
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d005      	beq.n	80016da <Write_Outputs+0x1b2>
 80016ce:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <Write_Outputs+0x1d8>)
 80016d0:	7cdb      	ldrb	r3, [r3, #19]
 80016d2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80016d6:	b2d9      	uxtb	r1, r3
 80016d8:	e000      	b.n	80016dc <Write_Outputs+0x1b4>
 80016da:	2100      	movs	r1, #0
 80016dc:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <Write_Outputs+0x1e0>)
 80016de:	78d3      	ldrb	r3, [r2, #3]
 80016e0:	f361 0382 	bfi	r3, r1, #2, #1
 80016e4:	70d3      	strb	r3, [r2, #3]
	meas_data.d_outputs.out11 = settings.retain.output_emulation_switches.out11 ? settings.retain.output_emulation_values.out11 :  0;
 80016e6:	4b06      	ldr	r3, [pc, #24]	; (8001700 <Write_Outputs+0x1d8>)
 80016e8:	7c5b      	ldrb	r3, [r3, #17]
 80016ea:	f003 0308 	and.w	r3, r3, #8
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d00b      	beq.n	800170c <Write_Outputs+0x1e4>
 80016f4:	4b02      	ldr	r3, [pc, #8]	; (8001700 <Write_Outputs+0x1d8>)
 80016f6:	7cdb      	ldrb	r3, [r3, #19]
 80016f8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80016fc:	b2d9      	uxtb	r1, r3
 80016fe:	e006      	b.n	800170e <Write_Outputs+0x1e6>
 8001700:	20007474 	.word	0x20007474
 8001704:	20007018 	.word	0x20007018
 8001708:	20007520 	.word	0x20007520
 800170c:	2100      	movs	r1, #0
 800170e:	4a45      	ldr	r2, [pc, #276]	; (8001824 <Write_Outputs+0x2fc>)
 8001710:	78d3      	ldrb	r3, [r2, #3]
 8001712:	f361 03c3 	bfi	r3, r1, #3, #1
 8001716:	70d3      	strb	r3, [r2, #3]
	HAL_GPIO_WritePin(DOUT_0_GPIO_Port, DOUT_0_Pin, meas_data.d_outputs.out0);
 8001718:	4b42      	ldr	r3, [pc, #264]	; (8001824 <Write_Outputs+0x2fc>)
 800171a:	789b      	ldrb	r3, [r3, #2]
 800171c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001720:	b2db      	uxtb	r3, r3
 8001722:	461a      	mov	r2, r3
 8001724:	2180      	movs	r1, #128	; 0x80
 8001726:	4840      	ldr	r0, [pc, #256]	; (8001828 <Write_Outputs+0x300>)
 8001728:	f008 fa4e 	bl	8009bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_1_GPIO_Port, DOUT_1_Pin, meas_data.d_outputs.out1);
 800172c:	4b3d      	ldr	r3, [pc, #244]	; (8001824 <Write_Outputs+0x2fc>)
 800172e:	789b      	ldrb	r3, [r3, #2]
 8001730:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8001734:	b2db      	uxtb	r3, r3
 8001736:	461a      	mov	r2, r3
 8001738:	f44f 7180 	mov.w	r1, #256	; 0x100
 800173c:	483a      	ldr	r0, [pc, #232]	; (8001828 <Write_Outputs+0x300>)
 800173e:	f008 fa43 	bl	8009bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_2_GPIO_Port, DOUT_2_Pin, meas_data.d_outputs.out2);
 8001742:	4b38      	ldr	r3, [pc, #224]	; (8001824 <Write_Outputs+0x2fc>)
 8001744:	789b      	ldrb	r3, [r3, #2]
 8001746:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800174a:	b2db      	uxtb	r3, r3
 800174c:	461a      	mov	r2, r3
 800174e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001752:	4835      	ldr	r0, [pc, #212]	; (8001828 <Write_Outputs+0x300>)
 8001754:	f008 fa38 	bl	8009bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_3_GPIO_Port, DOUT_3_Pin, meas_data.d_outputs.out3);
 8001758:	4b32      	ldr	r3, [pc, #200]	; (8001824 <Write_Outputs+0x2fc>)
 800175a:	789b      	ldrb	r3, [r3, #2]
 800175c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001760:	b2db      	uxtb	r3, r3
 8001762:	461a      	mov	r2, r3
 8001764:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001768:	482f      	ldr	r0, [pc, #188]	; (8001828 <Write_Outputs+0x300>)
 800176a:	f008 fa2d 	bl	8009bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_4_GPIO_Port, DOUT_4_Pin, meas_data.d_outputs.out4);
 800176e:	4b2d      	ldr	r3, [pc, #180]	; (8001824 <Write_Outputs+0x2fc>)
 8001770:	789b      	ldrb	r3, [r3, #2]
 8001772:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8001776:	b2db      	uxtb	r3, r3
 8001778:	461a      	mov	r2, r3
 800177a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800177e:	482a      	ldr	r0, [pc, #168]	; (8001828 <Write_Outputs+0x300>)
 8001780:	f008 fa22 	bl	8009bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_5_GPIO_Port, DOUT_5_Pin, meas_data.d_outputs.out5);
 8001784:	4b27      	ldr	r3, [pc, #156]	; (8001824 <Write_Outputs+0x2fc>)
 8001786:	789b      	ldrb	r3, [r3, #2]
 8001788:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800178c:	b2db      	uxtb	r3, r3
 800178e:	461a      	mov	r2, r3
 8001790:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001794:	4824      	ldr	r0, [pc, #144]	; (8001828 <Write_Outputs+0x300>)
 8001796:	f008 fa17 	bl	8009bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_6_GPIO_Port, DOUT_6_Pin, meas_data.d_outputs.out6);
 800179a:	4b22      	ldr	r3, [pc, #136]	; (8001824 <Write_Outputs+0x2fc>)
 800179c:	789b      	ldrb	r3, [r3, #2]
 800179e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	461a      	mov	r2, r3
 80017a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017aa:	481f      	ldr	r0, [pc, #124]	; (8001828 <Write_Outputs+0x300>)
 80017ac:	f008 fa0c 	bl	8009bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_7_GPIO_Port, DOUT_7_Pin, meas_data.d_outputs.out7);
 80017b0:	4b1c      	ldr	r3, [pc, #112]	; (8001824 <Write_Outputs+0x2fc>)
 80017b2:	789b      	ldrb	r3, [r3, #2]
 80017b4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	461a      	mov	r2, r3
 80017bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017c0:	4819      	ldr	r0, [pc, #100]	; (8001828 <Write_Outputs+0x300>)
 80017c2:	f008 fa01 	bl	8009bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_8_GPIO_Port, DOUT_8_Pin, meas_data.d_outputs.out8);
 80017c6:	4b17      	ldr	r3, [pc, #92]	; (8001824 <Write_Outputs+0x2fc>)
 80017c8:	78db      	ldrb	r3, [r3, #3]
 80017ca:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	461a      	mov	r2, r3
 80017d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017d6:	4814      	ldr	r0, [pc, #80]	; (8001828 <Write_Outputs+0x300>)
 80017d8:	f008 f9f6 	bl	8009bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_9_GPIO_Port, DOUT_9_Pin, meas_data.d_outputs.out9);
 80017dc:	4b11      	ldr	r3, [pc, #68]	; (8001824 <Write_Outputs+0x2fc>)
 80017de:	78db      	ldrb	r3, [r3, #3]
 80017e0:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	461a      	mov	r2, r3
 80017e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80017ec:	480f      	ldr	r0, [pc, #60]	; (800182c <Write_Outputs+0x304>)
 80017ee:	f008 f9eb 	bl	8009bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_10_GPIO_Port, DOUT_10_Pin, meas_data.d_outputs.out10);
 80017f2:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <Write_Outputs+0x2fc>)
 80017f4:	78db      	ldrb	r3, [r3, #3]
 80017f6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	461a      	mov	r2, r3
 80017fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001802:	480b      	ldr	r0, [pc, #44]	; (8001830 <Write_Outputs+0x308>)
 8001804:	f008 f9e0 	bl	8009bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_11_GPIO_Port, DOUT_11_Pin, meas_data.d_outputs.out11);
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <Write_Outputs+0x2fc>)
 800180a:	78db      	ldrb	r3, [r3, #3]
 800180c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8001810:	b2db      	uxtb	r3, r3
 8001812:	461a      	mov	r2, r3
 8001814:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001818:	4805      	ldr	r0, [pc, #20]	; (8001830 <Write_Outputs+0x308>)
 800181a:	f008 f9d5 	bl	8009bc8 <HAL_GPIO_WritePin>
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20007520 	.word	0x20007520
 8001828:	40021000 	.word	0x40021000
 800182c:	40020400 	.word	0x40020400
 8001830:	40020c00 	.word	0x40020c00

08001834 <Filter_Inputs>:

static void Filter_Inputs()
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
	uint8_t inputs[INPUT_NUMBER];

	inputs[0] = !HAL_GPIO_ReadPin(DIN_0_GPIO_Port, DIN_0_Pin);
 800183a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800183e:	486a      	ldr	r0, [pc, #424]	; (80019e8 <Filter_Inputs+0x1b4>)
 8001840:	f008 f9aa 	bl	8009b98 <HAL_GPIO_ReadPin>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	bf0c      	ite	eq
 800184a:	2301      	moveq	r3, #1
 800184c:	2300      	movne	r3, #0
 800184e:	b2db      	uxtb	r3, r3
 8001850:	703b      	strb	r3, [r7, #0]
	inputs[1] = !HAL_GPIO_ReadPin(DIN_1_GPIO_Port, DIN_1_Pin);
 8001852:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001856:	4864      	ldr	r0, [pc, #400]	; (80019e8 <Filter_Inputs+0x1b4>)
 8001858:	f008 f99e 	bl	8009b98 <HAL_GPIO_ReadPin>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	bf0c      	ite	eq
 8001862:	2301      	moveq	r3, #1
 8001864:	2300      	movne	r3, #0
 8001866:	b2db      	uxtb	r3, r3
 8001868:	707b      	strb	r3, [r7, #1]
	inputs[2] = !HAL_GPIO_ReadPin(DIN_2_GPIO_Port, DIN_2_Pin);
 800186a:	2101      	movs	r1, #1
 800186c:	485f      	ldr	r0, [pc, #380]	; (80019ec <Filter_Inputs+0x1b8>)
 800186e:	f008 f993 	bl	8009b98 <HAL_GPIO_ReadPin>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	bf0c      	ite	eq
 8001878:	2301      	moveq	r3, #1
 800187a:	2300      	movne	r3, #0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	70bb      	strb	r3, [r7, #2]
	inputs[3] = !HAL_GPIO_ReadPin(DIN_3_GPIO_Port, DIN_3_Pin);
 8001880:	2102      	movs	r1, #2
 8001882:	485a      	ldr	r0, [pc, #360]	; (80019ec <Filter_Inputs+0x1b8>)
 8001884:	f008 f988 	bl	8009b98 <HAL_GPIO_ReadPin>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	bf0c      	ite	eq
 800188e:	2301      	moveq	r3, #1
 8001890:	2300      	movne	r3, #0
 8001892:	b2db      	uxtb	r3, r3
 8001894:	70fb      	strb	r3, [r7, #3]
	inputs[4] = !HAL_GPIO_ReadPin(DIN_4_GPIO_Port, DIN_4_Pin);
 8001896:	2104      	movs	r1, #4
 8001898:	4854      	ldr	r0, [pc, #336]	; (80019ec <Filter_Inputs+0x1b8>)
 800189a:	f008 f97d 	bl	8009b98 <HAL_GPIO_ReadPin>
 800189e:	4603      	mov	r3, r0
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	bf0c      	ite	eq
 80018a4:	2301      	moveq	r3, #1
 80018a6:	2300      	movne	r3, #0
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	713b      	strb	r3, [r7, #4]
	inputs[5] = !HAL_GPIO_ReadPin(DIN_5_GPIO_Port, DIN_5_Pin);
 80018ac:	2108      	movs	r1, #8
 80018ae:	484f      	ldr	r0, [pc, #316]	; (80019ec <Filter_Inputs+0x1b8>)
 80018b0:	f008 f972 	bl	8009b98 <HAL_GPIO_ReadPin>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	bf0c      	ite	eq
 80018ba:	2301      	moveq	r3, #1
 80018bc:	2300      	movne	r3, #0
 80018be:	b2db      	uxtb	r3, r3
 80018c0:	717b      	strb	r3, [r7, #5]
	inputs[6] = !HAL_GPIO_ReadPin(DIN_6_GPIO_Port, DIN_6_Pin);
 80018c2:	2110      	movs	r1, #16
 80018c4:	4849      	ldr	r0, [pc, #292]	; (80019ec <Filter_Inputs+0x1b8>)
 80018c6:	f008 f967 	bl	8009b98 <HAL_GPIO_ReadPin>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	bf0c      	ite	eq
 80018d0:	2301      	moveq	r3, #1
 80018d2:	2300      	movne	r3, #0
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	71bb      	strb	r3, [r7, #6]
	inputs[7] = !HAL_GPIO_ReadPin(DIN_7_GPIO_Port, DIN_7_Pin);
 80018d8:	2120      	movs	r1, #32
 80018da:	4844      	ldr	r0, [pc, #272]	; (80019ec <Filter_Inputs+0x1b8>)
 80018dc:	f008 f95c 	bl	8009b98 <HAL_GPIO_ReadPin>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	bf0c      	ite	eq
 80018e6:	2301      	moveq	r3, #1
 80018e8:	2300      	movne	r3, #0
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	71fb      	strb	r3, [r7, #7]
	inputs[8] = !HAL_GPIO_ReadPin(DIN_8_GPIO_Port, DIN_8_Pin);
 80018ee:	2140      	movs	r1, #64	; 0x40
 80018f0:	483e      	ldr	r0, [pc, #248]	; (80019ec <Filter_Inputs+0x1b8>)
 80018f2:	f008 f951 	bl	8009b98 <HAL_GPIO_ReadPin>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	bf0c      	ite	eq
 80018fc:	2301      	moveq	r3, #1
 80018fe:	2300      	movne	r3, #0
 8001900:	b2db      	uxtb	r3, r3
 8001902:	723b      	strb	r3, [r7, #8]
	inputs[9] = !HAL_GPIO_ReadPin(DIN_9_GPIO_Port, DIN_9_Pin);
 8001904:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001908:	4839      	ldr	r0, [pc, #228]	; (80019f0 <Filter_Inputs+0x1bc>)
 800190a:	f008 f945 	bl	8009b98 <HAL_GPIO_ReadPin>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	bf0c      	ite	eq
 8001914:	2301      	moveq	r3, #1
 8001916:	2300      	movne	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	727b      	strb	r3, [r7, #9]
	inputs[10] = !HAL_GPIO_ReadPin(DIN_10_GPIO_Port, DIN_10_Pin);
 800191c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001920:	4833      	ldr	r0, [pc, #204]	; (80019f0 <Filter_Inputs+0x1bc>)
 8001922:	f008 f939 	bl	8009b98 <HAL_GPIO_ReadPin>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	bf0c      	ite	eq
 800192c:	2301      	moveq	r3, #1
 800192e:	2300      	movne	r3, #0
 8001930:	b2db      	uxtb	r3, r3
 8001932:	72bb      	strb	r3, [r7, #10]
	inputs[11] = !HAL_GPIO_ReadPin(DIN_11_GPIO_Port, DIN_11_Pin);
 8001934:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001938:	482d      	ldr	r0, [pc, #180]	; (80019f0 <Filter_Inputs+0x1bc>)
 800193a:	f008 f92d 	bl	8009b98 <HAL_GPIO_ReadPin>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	bf0c      	ite	eq
 8001944:	2301      	moveq	r3, #1
 8001946:	2300      	movne	r3, #0
 8001948:	b2db      	uxtb	r3, r3
 800194a:	72fb      	strb	r3, [r7, #11]
	for (int i = 0; i < INPUT_NUMBER; ++i) {
 800194c:	2300      	movs	r3, #0
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	e041      	b.n	80019d6 <Filter_Inputs+0x1a2>
		if(inputs[i])
 8001952:	463a      	mov	r2, r7
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	4413      	add	r3, r2
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d00f      	beq.n	800197e <Filter_Inputs+0x14a>
		{
			filter_state[i] = filter_state[i]<ANTIDREBEZG_CNT ? filter_state[i]+1 : ANTIDREBEZG_CNT;
 800195e:	4a25      	ldr	r2, [pc, #148]	; (80019f4 <Filter_Inputs+0x1c0>)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4413      	add	r3, r2
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b04      	cmp	r3, #4
 8001968:	bf28      	it	cs
 800196a:	2304      	movcs	r3, #4
 800196c:	b2db      	uxtb	r3, r3
 800196e:	3301      	adds	r3, #1
 8001970:	b2d9      	uxtb	r1, r3
 8001972:	4a20      	ldr	r2, [pc, #128]	; (80019f4 <Filter_Inputs+0x1c0>)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	4413      	add	r3, r2
 8001978:	460a      	mov	r2, r1
 800197a:	701a      	strb	r2, [r3, #0]
 800197c:	e011      	b.n	80019a2 <Filter_Inputs+0x16e>
		}
		else
		{
			filter_state[i] = filter_state[i]>0 ? filter_state[i]-1 : 0;
 800197e:	4a1d      	ldr	r2, [pc, #116]	; (80019f4 <Filter_Inputs+0x1c0>)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4413      	add	r3, r2
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d006      	beq.n	8001998 <Filter_Inputs+0x164>
 800198a:	4a1a      	ldr	r2, [pc, #104]	; (80019f4 <Filter_Inputs+0x1c0>)
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4413      	add	r3, r2
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	3b01      	subs	r3, #1
 8001994:	b2da      	uxtb	r2, r3
 8001996:	e000      	b.n	800199a <Filter_Inputs+0x166>
 8001998:	2200      	movs	r2, #0
 800199a:	4916      	ldr	r1, [pc, #88]	; (80019f4 <Filter_Inputs+0x1c0>)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	440b      	add	r3, r1
 80019a0:	701a      	strb	r2, [r3, #0]
		}
		if (filter_state[i]>=ANTIDREBEZG_CNT) {
 80019a2:	4a14      	ldr	r2, [pc, #80]	; (80019f4 <Filter_Inputs+0x1c0>)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4413      	add	r3, r2
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	d905      	bls.n	80019ba <Filter_Inputs+0x186>
			filters_inputs[i]=1;
 80019ae:	4a12      	ldr	r2, [pc, #72]	; (80019f8 <Filter_Inputs+0x1c4>)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	4413      	add	r3, r2
 80019b4:	2201      	movs	r2, #1
 80019b6:	701a      	strb	r2, [r3, #0]
 80019b8:	e00a      	b.n	80019d0 <Filter_Inputs+0x19c>
		} else if(filter_state[i]==0) {
 80019ba:	4a0e      	ldr	r2, [pc, #56]	; (80019f4 <Filter_Inputs+0x1c0>)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	4413      	add	r3, r2
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d104      	bne.n	80019d0 <Filter_Inputs+0x19c>
			filters_inputs[i]=0;
 80019c6:	4a0c      	ldr	r2, [pc, #48]	; (80019f8 <Filter_Inputs+0x1c4>)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4413      	add	r3, r2
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < INPUT_NUMBER; ++i) {
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	3301      	adds	r3, #1
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	2b0b      	cmp	r3, #11
 80019da:	ddba      	ble.n	8001952 <Filter_Inputs+0x11e>
		}
	}

}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40020400 	.word	0x40020400
 80019ec:	40021000 	.word	0x40021000
 80019f0:	40020800 	.word	0x40020800
 80019f4:	20007020 	.word	0x20007020
 80019f8:	2000700c 	.word	0x2000700c

080019fc <ethernet_reset>:

static int ethernet_answer(uint8_t *data, uint16_t data_length, uint8_t *answer);
static void Send(struct netconn *conn, uint8_t* pointer, uint16_t size, ip_addr_t *addr, uint16_t port, struct netbuf *buf);

void ethernet_reset()
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ERESET_GPIO_Port, ERESET_Pin, RESET);
 8001a00:	2200      	movs	r2, #0
 8001a02:	2101      	movs	r1, #1
 8001a04:	4806      	ldr	r0, [pc, #24]	; (8001a20 <ethernet_reset+0x24>)
 8001a06:	f008 f8df 	bl	8009bc8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001a0a:	2064      	movs	r0, #100	; 0x64
 8001a0c:	f005 fae6 	bl	8006fdc <HAL_Delay>
	HAL_GPIO_WritePin(ERESET_GPIO_Port, ERESET_Pin, SET);
 8001a10:	2201      	movs	r2, #1
 8001a12:	2101      	movs	r1, #1
 8001a14:	4802      	ldr	r0, [pc, #8]	; (8001a20 <ethernet_reset+0x24>)
 8001a16:	f008 f8d7 	bl	8009bc8 <HAL_GPIO_WritePin>
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	40020000 	.word	0x40020000

08001a24 <ethernet_thread>:

void ethernet_thread(void *arg)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b0cc      	sub	sp, #304	; 0x130
 8001a28:	af02      	add	r7, sp, #8
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	6018      	str	r0, [r3, #0]
	struct netconn *conn;
	struct netbuf *buf;
	ip_addr_t *client_addr;
	unsigned short local_port;
	unsigned short client_port;
	local_port = *((unsigned short*)arg);
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	881b      	ldrh	r3, [r3, #0]
 8001a34:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
	void* data;
	uint8_t answer[256];
	u16_t len;
	uint16_t answer_len;
	conn = netconn_new(NETCONN_UDP);
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	2020      	movs	r0, #32
 8001a3e:	f00f fa3f 	bl	8010ec0 <netconn_new_with_proto_and_callback>
 8001a42:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
	if (conn!= NULL)
 8001a46:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d05b      	beq.n	8001b06 <ethernet_thread+0xe2>
	{
	  err = netconn_bind(conn, IP_ADDR_ANY, local_port);
 8001a4e:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8001a52:	461a      	mov	r2, r3
 8001a54:	492e      	ldr	r1, [pc, #184]	; (8001b10 <ethernet_thread+0xec>)
 8001a56:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8001a5a:	f00f faeb 	bl	8011034 <netconn_bind>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	  if (err == ERR_OK)
 8001a64:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d148      	bne.n	8001afe <ethernet_thread+0xda>
	  {
		  for(;;)
		  {
			  recv_err = netconn_recv(conn, &buf);
 8001a6c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001a70:	4619      	mov	r1, r3
 8001a72:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8001a76:	f00f fc91 	bl	801139c <netconn_recv>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
			  if (recv_err == ERR_OK)
 8001a80:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d1f1      	bne.n	8001a6c <ethernet_thread+0x48>
			  {
				  client_addr = netbuf_fromaddr(buf);
 8001a88:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a8c:	3308      	adds	r3, #8
 8001a8e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
				  client_port = netbuf_fromport(buf);
 8001a92:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001a96:	899b      	ldrh	r3, [r3, #12]
 8001a98:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116

				  netbuf_data(buf, &data, &len);
 8001a9c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001aa0:	f107 020a 	add.w	r2, r7, #10
 8001aa4:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f011 f849 	bl	8012b40 <netbuf_data>
				  answer_len = ethernet_answer(data, len, answer);
 8001aae:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8001ab2:	f107 030a 	add.w	r3, r7, #10
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	f107 020c 	add.w	r2, r7, #12
 8001abc:	4619      	mov	r1, r3
 8001abe:	f000 f859 	bl	8001b74 <ethernet_answer>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
				  if(answer_len)
 8001ac8:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d010      	beq.n	8001af2 <ethernet_thread+0xce>
				  {
					  Send(conn, answer, answer_len, client_addr, client_port, buf);
 8001ad0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001ad4:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8001ad8:	f107 010c 	add.w	r1, r7, #12
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8001ae8:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8001aec:	f000 f812 	bl	8001b14 <Send>
 8001af0:	e7bc      	b.n	8001a6c <ethernet_thread+0x48>
				  }
				  else netbuf_delete(buf);
 8001af2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001af6:	4618      	mov	r0, r3
 8001af8:	f010 ffb8 	bl	8012a6c <netbuf_delete>
			  recv_err = netconn_recv(conn, &buf);
 8001afc:	e7b6      	b.n	8001a6c <ethernet_thread+0x48>

		  }
	  }
	  else
	  {
	    netconn_delete(conn);
 8001afe:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8001b02:	f00f fa7b 	bl	8010ffc <netconn_delete>
	  }
	}
}
 8001b06:	bf00      	nop
 8001b08:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	08026f20 	.word	0x08026f20

08001b14 <Send>:

static void Send(struct netconn *conn, uint8_t* pointer, uint16_t size, ip_addr_t *addr, uint16_t port, struct netbuf *buf)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b086      	sub	sp, #24
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	60f8      	str	r0, [r7, #12]
 8001b1c:	60b9      	str	r1, [r7, #8]
 8001b1e:	603b      	str	r3, [r7, #0]
 8001b20:	4613      	mov	r3, r2
 8001b22:	80fb      	strh	r3, [r7, #6]
	u32_t address = addr->addr;
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	617b      	str	r3, [r7, #20]
	netbuf_delete(buf);
 8001b2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b2c:	f010 ff9e 	bl	8012a6c <netbuf_delete>
	buf = netbuf_new();
 8001b30:	f010 ff88 	bl	8012a44 <netbuf_new>
 8001b34:	6278      	str	r0, [r7, #36]	; 0x24
	buf->port = port;
 8001b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b38:	8c3a      	ldrh	r2, [r7, #32]
 8001b3a:	819a      	strh	r2, [r3, #12]
	addr->addr = address;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	601a      	str	r2, [r3, #0]
	err_t err;
	err  = netbuf_ref(buf, pointer, size);
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	461a      	mov	r2, r3
 8001b46:	68b9      	ldr	r1, [r7, #8]
 8001b48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b4a:	f010 ffaf 	bl	8012aac <netbuf_ref>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	74fb      	strb	r3, [r7, #19]
	if(err==ERR_OK)
 8001b52:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d108      	bne.n	8001b6c <Send+0x58>
	{
		netconn_sendto(conn, buf, addr, port);
 8001b5a:	8c3b      	ldrh	r3, [r7, #32]
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f00f fc95 	bl	8011490 <netconn_sendto>
		netbuf_delete(buf);
 8001b66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001b68:	f010 ff80 	bl	8012a6c <netbuf_delete>
	}
}
 8001b6c:	bf00      	nop
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <ethernet_answer>:

//Возвращает кол-во байт для отправки клиенту
static int ethernet_answer(uint8_t *data, uint16_t data_length, uint8_t *answer)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	607a      	str	r2, [r7, #4]
 8001b80:	817b      	strh	r3, [r7, #10]
	int result = ModbusParse(data, data_length, answer, ETHERNET);
 8001b82:	8979      	ldrh	r1, [r7, #10]
 8001b84:	2301      	movs	r3, #1
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f003 f85d 	bl	8004c48 <ModbusParse>
 8001b8e:	6178      	str	r0, [r7, #20]
	if(result)return result;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <ethernet_answer+0x26>
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	e00d      	b.n	8001bb6 <ethernet_answer+0x42>
	result = OnKeyPress(data, data_length, answer);
 8001b9a:	897b      	ldrh	r3, [r7, #10]
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f000 fc96 	bl	80024d4 <OnKeyPress>
 8001ba8:	6178      	str	r0, [r7, #20]
	if(result!=0)return 81;
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <ethernet_answer+0x40>
 8001bb0:	2351      	movs	r3, #81	; 0x51
 8001bb2:	e000      	b.n	8001bb6 <ethernet_answer+0x42>
	return 0;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
	...

08001bc0 <framDataRead>:
#include <fram.h>

extern SPI_HandleTypeDef hspi3;

int framDataRead (uint16_t address, uint8_t * data, uint16_t size)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	6039      	str	r1, [r7, #0]
 8001bca:	80fb      	strh	r3, [r7, #6]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	80bb      	strh	r3, [r7, #4]
	int result = 0;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60fb      	str	r3, [r7, #12]
	uint8_t buff[3];

	buff[0] = FRAM_CMD_READ;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	723b      	strb	r3, [r7, #8]
	buff[1] = address >> 8;
 8001bd8:	88fb      	ldrh	r3, [r7, #6]
 8001bda:	0a1b      	lsrs	r3, r3, #8
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	727b      	strb	r3, [r7, #9]
	buff[2] = address & 0xFF;
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	72bb      	strb	r3, [r7, #10]
	HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_RESET);
 8001be8:	2200      	movs	r2, #0
 8001bea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bee:	4811      	ldr	r0, [pc, #68]	; (8001c34 <framDataRead+0x74>)
 8001bf0:	f007 ffea 	bl	8009bc8 <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(&hspi3, buff, 3, 200);
 8001bf4:	f107 0108 	add.w	r1, r7, #8
 8001bf8:	23c8      	movs	r3, #200	; 0xc8
 8001bfa:	2203      	movs	r2, #3
 8001bfc:	480e      	ldr	r0, [pc, #56]	; (8001c38 <framDataRead+0x78>)
 8001bfe:	f008 fd68 	bl	800a6d2 <HAL_SPI_Transmit>
 8001c02:	4603      	mov	r3, r0
 8001c04:	60fb      	str	r3, [r7, #12]
	result |= HAL_SPI_Receive(&hspi3, data, size, 200);
 8001c06:	88ba      	ldrh	r2, [r7, #4]
 8001c08:	23c8      	movs	r3, #200	; 0xc8
 8001c0a:	6839      	ldr	r1, [r7, #0]
 8001c0c:	480a      	ldr	r0, [pc, #40]	; (8001c38 <framDataRead+0x78>)
 8001c0e:	f008 fe9c 	bl	800a94a <HAL_SPI_Receive>
 8001c12:	4603      	mov	r3, r0
 8001c14:	461a      	mov	r2, r3
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_SET);
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c22:	4804      	ldr	r0, [pc, #16]	; (8001c34 <framDataRead+0x74>)
 8001c24:	f007 ffd0 	bl	8009bc8 <HAL_GPIO_WritePin>

	return result;
 8001c28:	68fb      	ldr	r3, [r7, #12]
}
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	3710      	adds	r7, #16
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40020000 	.word	0x40020000
 8001c38:	20007248 	.word	0x20007248

08001c3c <framDataWrite>:

int framDataWrite (uint16_t address, uint8_t * data, uint16_t size)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	6039      	str	r1, [r7, #0]
 8001c46:	80fb      	strh	r3, [r7, #6]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	80bb      	strh	r3, [r7, #4]
	int result = 0, status = 0, cntr = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	2300      	movs	r3, #0
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	2300      	movs	r3, #0
 8001c56:	60fb      	str	r3, [r7, #12]
	uint8_t buff[3];

	buff[0] = FRAM_CMD_WREN;
 8001c58:	2306      	movs	r3, #6
 8001c5a:	723b      	strb	r3, [r7, #8]
	HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_RESET);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c62:	483f      	ldr	r0, [pc, #252]	; (8001d60 <framDataWrite+0x124>)
 8001c64:	f007 ffb0 	bl	8009bc8 <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(&hspi3, buff, 1, 200);
 8001c68:	f107 0108 	add.w	r1, r7, #8
 8001c6c:	23c8      	movs	r3, #200	; 0xc8
 8001c6e:	2201      	movs	r2, #1
 8001c70:	483c      	ldr	r0, [pc, #240]	; (8001d64 <framDataWrite+0x128>)
 8001c72:	f008 fd2e 	bl	800a6d2 <HAL_SPI_Transmit>
 8001c76:	4603      	mov	r3, r0
 8001c78:	617b      	str	r3, [r7, #20]
	HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_SET);
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c80:	4837      	ldr	r0, [pc, #220]	; (8001d60 <framDataWrite+0x124>)
 8001c82:	f007 ffa1 	bl	8009bc8 <HAL_GPIO_WritePin>
	buff[0] = FRAM_CMD_RDSR;
 8001c86:	2305      	movs	r3, #5
 8001c88:	723b      	strb	r3, [r7, #8]
	while ((status == 0) && (cntr++ < 100))
 8001c8a:	e027      	b.n	8001cdc <framDataWrite+0xa0>
	{
		HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_RESET);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c92:	4833      	ldr	r0, [pc, #204]	; (8001d60 <framDataWrite+0x124>)
 8001c94:	f007 ff98 	bl	8009bc8 <HAL_GPIO_WritePin>
		result |= HAL_SPI_Transmit(&hspi3, buff, 1, 200);
 8001c98:	f107 0108 	add.w	r1, r7, #8
 8001c9c:	23c8      	movs	r3, #200	; 0xc8
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	4830      	ldr	r0, [pc, #192]	; (8001d64 <framDataWrite+0x128>)
 8001ca2:	f008 fd16 	bl	800a6d2 <HAL_SPI_Transmit>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	461a      	mov	r2, r3
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	617b      	str	r3, [r7, #20]
		result |= HAL_SPI_Receive(&hspi3, buff, 1, 200);
 8001cb0:	f107 0108 	add.w	r1, r7, #8
 8001cb4:	23c8      	movs	r3, #200	; 0xc8
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	482a      	ldr	r0, [pc, #168]	; (8001d64 <framDataWrite+0x128>)
 8001cba:	f008 fe46 	bl	800a94a <HAL_SPI_Receive>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_SET);
 8001cc8:	2201      	movs	r2, #1
 8001cca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001cce:	4824      	ldr	r0, [pc, #144]	; (8001d60 <framDataWrite+0x124>)
 8001cd0:	f007 ff7a 	bl	8009bc8 <HAL_GPIO_WritePin>
		status = buff[0] & 0x02;
 8001cd4:	7a3b      	ldrb	r3, [r7, #8]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	613b      	str	r3, [r7, #16]
	while ((status == 0) && (cntr++ < 100))
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d104      	bne.n	8001cec <framDataWrite+0xb0>
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	1c5a      	adds	r2, r3, #1
 8001ce6:	60fa      	str	r2, [r7, #12]
 8001ce8:	2b63      	cmp	r3, #99	; 0x63
 8001cea:	ddcf      	ble.n	8001c8c <framDataWrite+0x50>
	}
	if (!status)
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d103      	bne.n	8001cfa <framDataWrite+0xbe>
		result = -2;
 8001cf2:	f06f 0301 	mvn.w	r3, #1
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	e02c      	b.n	8001d54 <framDataWrite+0x118>
	else
	{
		buff[0] = FRAM_CMD_WRITE;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	723b      	strb	r3, [r7, #8]
		buff[1] = address >> 8;
 8001cfe:	88fb      	ldrh	r3, [r7, #6]
 8001d00:	0a1b      	lsrs	r3, r3, #8
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	727b      	strb	r3, [r7, #9]
		buff[2] = address & 0xFF;
 8001d08:	88fb      	ldrh	r3, [r7, #6]
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	72bb      	strb	r3, [r7, #10]
		HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_RESET);
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d14:	4812      	ldr	r0, [pc, #72]	; (8001d60 <framDataWrite+0x124>)
 8001d16:	f007 ff57 	bl	8009bc8 <HAL_GPIO_WritePin>
		result |= HAL_SPI_Transmit(&hspi3, buff, 3, 200);
 8001d1a:	f107 0108 	add.w	r1, r7, #8
 8001d1e:	23c8      	movs	r3, #200	; 0xc8
 8001d20:	2203      	movs	r2, #3
 8001d22:	4810      	ldr	r0, [pc, #64]	; (8001d64 <framDataWrite+0x128>)
 8001d24:	f008 fcd5 	bl	800a6d2 <HAL_SPI_Transmit>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	617b      	str	r3, [r7, #20]
		result |= HAL_SPI_Transmit(&hspi3, data, size, 200);
 8001d32:	88ba      	ldrh	r2, [r7, #4]
 8001d34:	23c8      	movs	r3, #200	; 0xc8
 8001d36:	6839      	ldr	r1, [r7, #0]
 8001d38:	480a      	ldr	r0, [pc, #40]	; (8001d64 <framDataWrite+0x128>)
 8001d3a:	f008 fcca 	bl	800a6d2 <HAL_SPI_Transmit>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	461a      	mov	r2, r3
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_SET);
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d4e:	4804      	ldr	r0, [pc, #16]	; (8001d60 <framDataWrite+0x124>)
 8001d50:	f007 ff3a 	bl	8009bc8 <HAL_GPIO_WritePin>
	}

	return result;
 8001d54:	697b      	ldr	r3, [r7, #20]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3718      	adds	r7, #24
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	40020000 	.word	0x40020000
 8001d64:	20007248 	.word	0x20007248

08001d68 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	4a07      	ldr	r2, [pc, #28]	; (8001d94 <vApplicationGetIdleTaskMemory+0x2c>)
 8001d78:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	4a06      	ldr	r2, [pc, #24]	; (8001d98 <vApplicationGetIdleTaskMemory+0x30>)
 8001d7e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2280      	movs	r2, #128	; 0x80
 8001d84:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8001d86:	bf00      	nop
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	200005a8 	.word	0x200005a8
 8001d98:	2000065c 	.word	0x2000065c

08001d9c <task_init>:
/* USER CODE END GET_IDLE_TASK_MEMORY */

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void task_init()
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b088      	sub	sp, #32
 8001da0:	af02      	add	r7, sp, #8
	size_t fre = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
	fre=xPortGetFreeHeapSize();
 8001da6:	f00e ffa5 	bl	8010cf4 <xPortGetFreeHeapSize>
 8001daa:	6178      	str	r0, [r7, #20]
	sys_thread_new("eth_thread1", ethernet_thread, (void*)&port1, DEFAULT_THREAD_STACKSIZE, osPriorityNormal );
 8001dac:	2300      	movs	r3, #0
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001db4:	4a1d      	ldr	r2, [pc, #116]	; (8001e2c <task_init+0x90>)
 8001db6:	491e      	ldr	r1, [pc, #120]	; (8001e30 <task_init+0x94>)
 8001db8:	481e      	ldr	r0, [pc, #120]	; (8001e34 <task_init+0x98>)
 8001dba:	f01c f92f 	bl	801e01c <sys_thread_new>
	fre=xPortGetFreeHeapSize();
 8001dbe:	f00e ff99 	bl	8010cf4 <xPortGetFreeHeapSize>
 8001dc2:	6178      	str	r0, [r7, #20]
	sys_thread_new("eth_thread2", ethernet_thread, (void*)&port2, DEFAULT_THREAD_STACKSIZE, osPriorityNormal );
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001dcc:	4a1a      	ldr	r2, [pc, #104]	; (8001e38 <task_init+0x9c>)
 8001dce:	4918      	ldr	r1, [pc, #96]	; (8001e30 <task_init+0x94>)
 8001dd0:	481a      	ldr	r0, [pc, #104]	; (8001e3c <task_init+0xa0>)
 8001dd2:	f01c f923 	bl	801e01c <sys_thread_new>
	fre=xPortGetFreeHeapSize();
 8001dd6:	f00e ff8d 	bl	8010cf4 <xPortGetFreeHeapSize>
 8001dda:	6178      	str	r0, [r7, #20]
	sys_thread_new("uart_thread", uart_thread, (void*)NULL, 512, osPriorityNormal );
 8001ddc:	2300      	movs	r3, #0
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001de4:	2200      	movs	r2, #0
 8001de6:	4916      	ldr	r1, [pc, #88]	; (8001e40 <task_init+0xa4>)
 8001de8:	4816      	ldr	r0, [pc, #88]	; (8001e44 <task_init+0xa8>)
 8001dea:	f01c f917 	bl	801e01c <sys_thread_new>
	fre=xPortGetFreeHeapSize();
 8001dee:	f00e ff81 	bl	8010cf4 <xPortGetFreeHeapSize>
 8001df2:	6178      	str	r0, [r7, #20]
	osMailQDef(uart_queue, UART_QUEUE_SIZE, Uart_Queue_Struct);
 8001df4:	2303      	movs	r3, #3
 8001df6:	607b      	str	r3, [r7, #4]
 8001df8:	2310      	movs	r3, #16
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	f107 0310 	add.w	r3, r7, #16
 8001e00:	60fb      	str	r3, [r7, #12]
	uart_queue = osMailCreate(osMailQ(uart_queue), NULL);
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	2100      	movs	r1, #0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f00c f9ea 	bl	800e1e0 <osMailCreate>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	4a0e      	ldr	r2, [pc, #56]	; (8001e48 <task_init+0xac>)
 8001e10:	6013      	str	r3, [r2, #0]
	sys_thread_new("keyboard_thread", keyscan_thread, (void*)NULL, 128, osPriorityNormal );
 8001e12:	2300      	movs	r3, #0
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	2380      	movs	r3, #128	; 0x80
 8001e18:	2200      	movs	r2, #0
 8001e1a:	490c      	ldr	r1, [pc, #48]	; (8001e4c <task_init+0xb0>)
 8001e1c:	480c      	ldr	r0, [pc, #48]	; (8001e50 <task_init+0xb4>)
 8001e1e:	f01c f8fd 	bl	801e01c <sys_thread_new>
}
 8001e22:	bf00      	nop
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	20000000 	.word	0x20000000
 8001e30:	08001a25 	.word	0x08001a25
 8001e34:	080233c8 	.word	0x080233c8
 8001e38:	20000002 	.word	0x20000002
 8001e3c:	080233d4 	.word	0x080233d4
 8001e40:	08006a11 	.word	0x08006a11
 8001e44:	080233e0 	.word	0x080233e0
 8001e48:	2000702c 	.word	0x2000702c
 8001e4c:	08001e55 	.word	0x08001e55
 8001e50:	080233ec 	.word	0x080233ec

08001e54 <keyscan_thread>:
static void key_filter_all();
static void PrintSymbol(const char *str);


void keyscan_thread(void *argument)
{
 8001e54:	b590      	push	{r4, r7, lr}
 8001e56:	b089      	sub	sp, #36	; 0x24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
	int result = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	613b      	str	r3, [r7, #16]
	int time;
	int last_time;

	result = OnKeyPress("F1", strlen("F1"), lcd);
 8001e60:	4a40      	ldr	r2, [pc, #256]	; (8001f64 <keyscan_thread+0x110>)
 8001e62:	2102      	movs	r1, #2
 8001e64:	4840      	ldr	r0, [pc, #256]	; (8001f68 <keyscan_thread+0x114>)
 8001e66:	f000 fb35 	bl	80024d4 <OnKeyPress>
 8001e6a:	6138      	str	r0, [r7, #16]
	if(result!=0)
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <keyscan_thread+0x22>
	{
		SendToLcd();
 8001e72:	f000 fb0f 	bl	8002494 <SendToLcd>
	}
	while(1)
	{
		Tact_pins();
 8001e76:	f000 f87d 	bl	8001f74 <Tact_pins>
		Key_Read();
 8001e7a:	f000 f987 	bl	800218c <Key_Read>
		key_filter_all();
 8001e7e:	f000 f9fb 	bl	8002278 <key_filter_all>
		GetPositiveFront();
 8001e82:	f000 faa9 	bl	80023d8 <GetPositiveFront>
		for (int i = 0; i < 6; ++i) {
 8001e86:	2300      	movs	r3, #0
 8001e88:	61bb      	str	r3, [r7, #24]
 8001e8a:	e04a      	b.n	8001f22 <keyscan_thread+0xce>
			for (int j = 0; j < 6; ++j) {
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	e041      	b.n	8001f16 <keyscan_thread+0xc2>
				if(positive_fronts[i][j])
 8001e92:	4936      	ldr	r1, [pc, #216]	; (8001f6c <keyscan_thread+0x118>)
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4613      	mov	r3, r2
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	4413      	add	r3, r2
 8001e9c:	005b      	lsls	r3, r3, #1
 8001e9e:	18ca      	adds	r2, r1, r3
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	781b      	ldrb	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d032      	beq.n	8001f10 <keyscan_thread+0xbc>
				{
					if(keys[i][j]!=NULL)
 8001eaa:	4931      	ldr	r1, [pc, #196]	; (8001f70 <keyscan_thread+0x11c>)
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	4413      	add	r3, r2
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	697a      	ldr	r2, [r7, #20]
 8001eb8:	4413      	add	r3, r2
 8001eba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d026      	beq.n	8001f10 <keyscan_thread+0xbc>
					{
						result = OnKeyPress(keys[i][j], strlen(keys[i][j]), (uint8_t*)lcd);
 8001ec2:	492b      	ldr	r1, [pc, #172]	; (8001f70 <keyscan_thread+0x11c>)
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4413      	add	r3, r2
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	697a      	ldr	r2, [r7, #20]
 8001ed0:	4413      	add	r3, r2
 8001ed2:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 8001ed6:	4926      	ldr	r1, [pc, #152]	; (8001f70 <keyscan_thread+0x11c>)
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	4613      	mov	r3, r2
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4413      	add	r3, r2
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f7fe f970 	bl	80001d0 <strlen>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	b2db      	uxtb	r3, r3
 8001ef4:	4a1b      	ldr	r2, [pc, #108]	; (8001f64 <keyscan_thread+0x110>)
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4620      	mov	r0, r4
 8001efa:	f000 faeb 	bl	80024d4 <OnKeyPress>
 8001efe:	6138      	str	r0, [r7, #16]
						if(result!=0)
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d004      	beq.n	8001f10 <keyscan_thread+0xbc>
						{
							SendToLcd();
 8001f06:	f000 fac5 	bl	8002494 <SendToLcd>
							SetCursor(result);
 8001f0a:	6938      	ldr	r0, [r7, #16]
 8001f0c:	f002 f930 	bl	8004170 <SetCursor>
			for (int j = 0; j < 6; ++j) {
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	3301      	adds	r3, #1
 8001f14:	617b      	str	r3, [r7, #20]
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	2b05      	cmp	r3, #5
 8001f1a:	ddba      	ble.n	8001e92 <keyscan_thread+0x3e>
		for (int i = 0; i < 6; ++i) {
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	3301      	adds	r3, #1
 8001f20:	61bb      	str	r3, [r7, #24]
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	2b05      	cmp	r3, #5
 8001f26:	ddb1      	ble.n	8001e8c <keyscan_thread+0x38>
						}
					}
				}
			}
		}
		time = HAL_GetTick();
 8001f28:	f005 f84c 	bl	8006fc4 <HAL_GetTick>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	60fb      	str	r3, [r7, #12]
		if((time-last_time)>500)
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f3a:	dd0f      	ble.n	8001f5c <keyscan_thread+0x108>
		{
			result = LcdUpdate((uint8_t*)lcd);
 8001f3c:	4809      	ldr	r0, [pc, #36]	; (8001f64 <keyscan_thread+0x110>)
 8001f3e:	f001 fcd1 	bl	80038e4 <LcdUpdate>
 8001f42:	4603      	mov	r3, r0
 8001f44:	613b      	str	r3, [r7, #16]
			if(result!=0)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d005      	beq.n	8001f58 <keyscan_thread+0x104>
			{
				SendToLcd();
 8001f4c:	f000 faa2 	bl	8002494 <SendToLcd>
				SetCursor(-1);
 8001f50:	f04f 30ff 	mov.w	r0, #4294967295
 8001f54:	f002 f90c 	bl	8004170 <SetCursor>
			}
			last_time = time;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	61fb      	str	r3, [r7, #28]
		}
		osDelay(2);
 8001f5c:	2002      	movs	r0, #2
 8001f5e:	f00b fde8 	bl	800db32 <osDelay>
		Tact_pins();
 8001f62:	e788      	b.n	8001e76 <keyscan_thread+0x22>
 8001f64:	20007030 	.word	0x20007030
 8001f68:	08023414 	.word	0x08023414
 8001f6c:	200008ec 	.word	0x200008ec
 8001f70:	20000004 	.word	0x20000004

08001f74 <Tact_pins>:
	}
}

static void Tact_pins(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
	out_key_pin = (out_key_pin+1)%COLUMNS_COUNT;
 8001f78:	4b81      	ldr	r3, [pc, #516]	; (8002180 <Tact_pins+0x20c>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	1c5a      	adds	r2, r3, #1
 8001f7e:	4b81      	ldr	r3, [pc, #516]	; (8002184 <Tact_pins+0x210>)
 8001f80:	fb83 3102 	smull	r3, r1, r3, r2
 8001f84:	17d3      	asrs	r3, r2, #31
 8001f86:	1ac9      	subs	r1, r1, r3
 8001f88:	460b      	mov	r3, r1
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	440b      	add	r3, r1
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	1ad1      	subs	r1, r2, r3
 8001f92:	b2ca      	uxtb	r2, r1
 8001f94:	4b7a      	ldr	r3, [pc, #488]	; (8002180 <Tact_pins+0x20c>)
 8001f96:	701a      	strb	r2, [r3, #0]
	switch(out_key_pin)
 8001f98:	4b79      	ldr	r3, [pc, #484]	; (8002180 <Tact_pins+0x20c>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b05      	cmp	r3, #5
 8001f9e:	f200 80ed 	bhi.w	800217c <Tact_pins+0x208>
 8001fa2:	a201      	add	r2, pc, #4	; (adr r2, 8001fa8 <Tact_pins+0x34>)
 8001fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa8:	08001fc1 	.word	0x08001fc1
 8001fac:	0800200b 	.word	0x0800200b
 8001fb0:	08002055 	.word	0x08002055
 8001fb4:	0800209f 	.word	0x0800209f
 8001fb8:	080020e9 	.word	0x080020e9
 8001fbc:	08002133 	.word	0x08002133
	{
		case 0:
			C0_HIGH;
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fc6:	4870      	ldr	r0, [pc, #448]	; (8002188 <Tact_pins+0x214>)
 8001fc8:	f007 fdfe 	bl	8009bc8 <HAL_GPIO_WritePin>
			C1_LOW;
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001fd2:	486d      	ldr	r0, [pc, #436]	; (8002188 <Tact_pins+0x214>)
 8001fd4:	f007 fdf8 	bl	8009bc8 <HAL_GPIO_WritePin>
			C2_LOW;
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fde:	486a      	ldr	r0, [pc, #424]	; (8002188 <Tact_pins+0x214>)
 8001fe0:	f007 fdf2 	bl	8009bc8 <HAL_GPIO_WritePin>
			C3_LOW;
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001fea:	4867      	ldr	r0, [pc, #412]	; (8002188 <Tact_pins+0x214>)
 8001fec:	f007 fdec 	bl	8009bc8 <HAL_GPIO_WritePin>
			C4_LOW;
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ff6:	4864      	ldr	r0, [pc, #400]	; (8002188 <Tact_pins+0x214>)
 8001ff8:	f007 fde6 	bl	8009bc8 <HAL_GPIO_WritePin>
			C5_LOW;
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002002:	4861      	ldr	r0, [pc, #388]	; (8002188 <Tact_pins+0x214>)
 8002004:	f007 fde0 	bl	8009bc8 <HAL_GPIO_WritePin>
			break;
 8002008:	e0b8      	b.n	800217c <Tact_pins+0x208>
		case 1:
			C0_LOW;
 800200a:	2200      	movs	r2, #0
 800200c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002010:	485d      	ldr	r0, [pc, #372]	; (8002188 <Tact_pins+0x214>)
 8002012:	f007 fdd9 	bl	8009bc8 <HAL_GPIO_WritePin>
			C1_HIGH;
 8002016:	2201      	movs	r2, #1
 8002018:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800201c:	485a      	ldr	r0, [pc, #360]	; (8002188 <Tact_pins+0x214>)
 800201e:	f007 fdd3 	bl	8009bc8 <HAL_GPIO_WritePin>
			C2_LOW;
 8002022:	2200      	movs	r2, #0
 8002024:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002028:	4857      	ldr	r0, [pc, #348]	; (8002188 <Tact_pins+0x214>)
 800202a:	f007 fdcd 	bl	8009bc8 <HAL_GPIO_WritePin>
			C3_LOW;
 800202e:	2200      	movs	r2, #0
 8002030:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002034:	4854      	ldr	r0, [pc, #336]	; (8002188 <Tact_pins+0x214>)
 8002036:	f007 fdc7 	bl	8009bc8 <HAL_GPIO_WritePin>
			C4_LOW;
 800203a:	2200      	movs	r2, #0
 800203c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002040:	4851      	ldr	r0, [pc, #324]	; (8002188 <Tact_pins+0x214>)
 8002042:	f007 fdc1 	bl	8009bc8 <HAL_GPIO_WritePin>
			C5_LOW;
 8002046:	2200      	movs	r2, #0
 8002048:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800204c:	484e      	ldr	r0, [pc, #312]	; (8002188 <Tact_pins+0x214>)
 800204e:	f007 fdbb 	bl	8009bc8 <HAL_GPIO_WritePin>
			break;
 8002052:	e093      	b.n	800217c <Tact_pins+0x208>
		case 2:
			C0_LOW;
 8002054:	2200      	movs	r2, #0
 8002056:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800205a:	484b      	ldr	r0, [pc, #300]	; (8002188 <Tact_pins+0x214>)
 800205c:	f007 fdb4 	bl	8009bc8 <HAL_GPIO_WritePin>
			C1_LOW;
 8002060:	2200      	movs	r2, #0
 8002062:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002066:	4848      	ldr	r0, [pc, #288]	; (8002188 <Tact_pins+0x214>)
 8002068:	f007 fdae 	bl	8009bc8 <HAL_GPIO_WritePin>
			C2_HIGH;
 800206c:	2201      	movs	r2, #1
 800206e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002072:	4845      	ldr	r0, [pc, #276]	; (8002188 <Tact_pins+0x214>)
 8002074:	f007 fda8 	bl	8009bc8 <HAL_GPIO_WritePin>
			C3_LOW;
 8002078:	2200      	movs	r2, #0
 800207a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800207e:	4842      	ldr	r0, [pc, #264]	; (8002188 <Tact_pins+0x214>)
 8002080:	f007 fda2 	bl	8009bc8 <HAL_GPIO_WritePin>
			C4_LOW;
 8002084:	2200      	movs	r2, #0
 8002086:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800208a:	483f      	ldr	r0, [pc, #252]	; (8002188 <Tact_pins+0x214>)
 800208c:	f007 fd9c 	bl	8009bc8 <HAL_GPIO_WritePin>
			C5_LOW;
 8002090:	2200      	movs	r2, #0
 8002092:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002096:	483c      	ldr	r0, [pc, #240]	; (8002188 <Tact_pins+0x214>)
 8002098:	f007 fd96 	bl	8009bc8 <HAL_GPIO_WritePin>
			break;
 800209c:	e06e      	b.n	800217c <Tact_pins+0x208>
		case 3:
			C0_LOW;
 800209e:	2200      	movs	r2, #0
 80020a0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020a4:	4838      	ldr	r0, [pc, #224]	; (8002188 <Tact_pins+0x214>)
 80020a6:	f007 fd8f 	bl	8009bc8 <HAL_GPIO_WritePin>
			C1_LOW;
 80020aa:	2200      	movs	r2, #0
 80020ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020b0:	4835      	ldr	r0, [pc, #212]	; (8002188 <Tact_pins+0x214>)
 80020b2:	f007 fd89 	bl	8009bc8 <HAL_GPIO_WritePin>
			C2_LOW;
 80020b6:	2200      	movs	r2, #0
 80020b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020bc:	4832      	ldr	r0, [pc, #200]	; (8002188 <Tact_pins+0x214>)
 80020be:	f007 fd83 	bl	8009bc8 <HAL_GPIO_WritePin>
			C3_HIGH;
 80020c2:	2201      	movs	r2, #1
 80020c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020c8:	482f      	ldr	r0, [pc, #188]	; (8002188 <Tact_pins+0x214>)
 80020ca:	f007 fd7d 	bl	8009bc8 <HAL_GPIO_WritePin>
			C4_LOW;
 80020ce:	2200      	movs	r2, #0
 80020d0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020d4:	482c      	ldr	r0, [pc, #176]	; (8002188 <Tact_pins+0x214>)
 80020d6:	f007 fd77 	bl	8009bc8 <HAL_GPIO_WritePin>
			C5_LOW;
 80020da:	2200      	movs	r2, #0
 80020dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020e0:	4829      	ldr	r0, [pc, #164]	; (8002188 <Tact_pins+0x214>)
 80020e2:	f007 fd71 	bl	8009bc8 <HAL_GPIO_WritePin>
			break;
 80020e6:	e049      	b.n	800217c <Tact_pins+0x208>
		case 4:
			C0_LOW;
 80020e8:	2200      	movs	r2, #0
 80020ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80020ee:	4826      	ldr	r0, [pc, #152]	; (8002188 <Tact_pins+0x214>)
 80020f0:	f007 fd6a 	bl	8009bc8 <HAL_GPIO_WritePin>
			C1_LOW;
 80020f4:	2200      	movs	r2, #0
 80020f6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80020fa:	4823      	ldr	r0, [pc, #140]	; (8002188 <Tact_pins+0x214>)
 80020fc:	f007 fd64 	bl	8009bc8 <HAL_GPIO_WritePin>
			C2_LOW;
 8002100:	2200      	movs	r2, #0
 8002102:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002106:	4820      	ldr	r0, [pc, #128]	; (8002188 <Tact_pins+0x214>)
 8002108:	f007 fd5e 	bl	8009bc8 <HAL_GPIO_WritePin>
			C3_LOW;
 800210c:	2200      	movs	r2, #0
 800210e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002112:	481d      	ldr	r0, [pc, #116]	; (8002188 <Tact_pins+0x214>)
 8002114:	f007 fd58 	bl	8009bc8 <HAL_GPIO_WritePin>
			C4_HIGH;
 8002118:	2201      	movs	r2, #1
 800211a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800211e:	481a      	ldr	r0, [pc, #104]	; (8002188 <Tact_pins+0x214>)
 8002120:	f007 fd52 	bl	8009bc8 <HAL_GPIO_WritePin>
			C5_LOW;
 8002124:	2200      	movs	r2, #0
 8002126:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800212a:	4817      	ldr	r0, [pc, #92]	; (8002188 <Tact_pins+0x214>)
 800212c:	f007 fd4c 	bl	8009bc8 <HAL_GPIO_WritePin>
			break;
 8002130:	e024      	b.n	800217c <Tact_pins+0x208>
		case 5:
			C0_LOW;
 8002132:	2200      	movs	r2, #0
 8002134:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002138:	4813      	ldr	r0, [pc, #76]	; (8002188 <Tact_pins+0x214>)
 800213a:	f007 fd45 	bl	8009bc8 <HAL_GPIO_WritePin>
			C1_LOW;
 800213e:	2200      	movs	r2, #0
 8002140:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002144:	4810      	ldr	r0, [pc, #64]	; (8002188 <Tact_pins+0x214>)
 8002146:	f007 fd3f 	bl	8009bc8 <HAL_GPIO_WritePin>
			C2_LOW;
 800214a:	2200      	movs	r2, #0
 800214c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002150:	480d      	ldr	r0, [pc, #52]	; (8002188 <Tact_pins+0x214>)
 8002152:	f007 fd39 	bl	8009bc8 <HAL_GPIO_WritePin>
			C3_LOW;
 8002156:	2200      	movs	r2, #0
 8002158:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800215c:	480a      	ldr	r0, [pc, #40]	; (8002188 <Tact_pins+0x214>)
 800215e:	f007 fd33 	bl	8009bc8 <HAL_GPIO_WritePin>
			C4_LOW;
 8002162:	2200      	movs	r2, #0
 8002164:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002168:	4807      	ldr	r0, [pc, #28]	; (8002188 <Tact_pins+0x214>)
 800216a:	f007 fd2d 	bl	8009bc8 <HAL_GPIO_WritePin>
			C5_HIGH;
 800216e:	2201      	movs	r2, #1
 8002170:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002174:	4804      	ldr	r0, [pc, #16]	; (8002188 <Tact_pins+0x214>)
 8002176:	f007 fd27 	bl	8009bc8 <HAL_GPIO_WritePin>
			break;
 800217a:	bf00      	nop
	}
}
 800217c:	bf00      	nop
 800217e:	bd80      	pop	{r7, pc}
 8002180:	20007080 	.word	0x20007080
 8002184:	2aaaaaab 	.word	0x2aaaaaab
 8002188:	40020c00 	.word	0x40020c00

0800218c <Key_Read>:


static void Key_Read(void)
{
 800218c:	b598      	push	{r3, r4, r7, lr}
 800218e:	af00      	add	r7, sp, #0
	key_input_mask[out_key_pin][0] = R0_IN;
 8002190:	4b36      	ldr	r3, [pc, #216]	; (800226c <Key_Read+0xe0>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	461c      	mov	r4, r3
 8002196:	2101      	movs	r1, #1
 8002198:	4835      	ldr	r0, [pc, #212]	; (8002270 <Key_Read+0xe4>)
 800219a:	f007 fcfd 	bl	8009b98 <HAL_GPIO_ReadPin>
 800219e:	4603      	mov	r3, r0
 80021a0:	4619      	mov	r1, r3
 80021a2:	4a34      	ldr	r2, [pc, #208]	; (8002274 <Key_Read+0xe8>)
 80021a4:	4623      	mov	r3, r4
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	4423      	add	r3, r4
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4413      	add	r3, r2
 80021ae:	460a      	mov	r2, r1
 80021b0:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][1] = R1_IN;
 80021b2:	4b2e      	ldr	r3, [pc, #184]	; (800226c <Key_Read+0xe0>)
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	461c      	mov	r4, r3
 80021b8:	2102      	movs	r1, #2
 80021ba:	482d      	ldr	r0, [pc, #180]	; (8002270 <Key_Read+0xe4>)
 80021bc:	f007 fcec 	bl	8009b98 <HAL_GPIO_ReadPin>
 80021c0:	4603      	mov	r3, r0
 80021c2:	4619      	mov	r1, r3
 80021c4:	4a2b      	ldr	r2, [pc, #172]	; (8002274 <Key_Read+0xe8>)
 80021c6:	4623      	mov	r3, r4
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	4423      	add	r3, r4
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	4413      	add	r3, r2
 80021d0:	3301      	adds	r3, #1
 80021d2:	460a      	mov	r2, r1
 80021d4:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][2] = R2_IN;
 80021d6:	4b25      	ldr	r3, [pc, #148]	; (800226c <Key_Read+0xe0>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	461c      	mov	r4, r3
 80021dc:	2104      	movs	r1, #4
 80021de:	4824      	ldr	r0, [pc, #144]	; (8002270 <Key_Read+0xe4>)
 80021e0:	f007 fcda 	bl	8009b98 <HAL_GPIO_ReadPin>
 80021e4:	4603      	mov	r3, r0
 80021e6:	4619      	mov	r1, r3
 80021e8:	4a22      	ldr	r2, [pc, #136]	; (8002274 <Key_Read+0xe8>)
 80021ea:	4623      	mov	r3, r4
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	4423      	add	r3, r4
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	4413      	add	r3, r2
 80021f4:	3302      	adds	r3, #2
 80021f6:	460a      	mov	r2, r1
 80021f8:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][3] = R3_IN;
 80021fa:	4b1c      	ldr	r3, [pc, #112]	; (800226c <Key_Read+0xe0>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	461c      	mov	r4, r3
 8002200:	2108      	movs	r1, #8
 8002202:	481b      	ldr	r0, [pc, #108]	; (8002270 <Key_Read+0xe4>)
 8002204:	f007 fcc8 	bl	8009b98 <HAL_GPIO_ReadPin>
 8002208:	4603      	mov	r3, r0
 800220a:	4619      	mov	r1, r3
 800220c:	4a19      	ldr	r2, [pc, #100]	; (8002274 <Key_Read+0xe8>)
 800220e:	4623      	mov	r3, r4
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	4423      	add	r3, r4
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	4413      	add	r3, r2
 8002218:	3303      	adds	r3, #3
 800221a:	460a      	mov	r2, r1
 800221c:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][4] = R4_IN;
 800221e:	4b13      	ldr	r3, [pc, #76]	; (800226c <Key_Read+0xe0>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	461c      	mov	r4, r3
 8002224:	2110      	movs	r1, #16
 8002226:	4812      	ldr	r0, [pc, #72]	; (8002270 <Key_Read+0xe4>)
 8002228:	f007 fcb6 	bl	8009b98 <HAL_GPIO_ReadPin>
 800222c:	4603      	mov	r3, r0
 800222e:	4619      	mov	r1, r3
 8002230:	4a10      	ldr	r2, [pc, #64]	; (8002274 <Key_Read+0xe8>)
 8002232:	4623      	mov	r3, r4
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	4423      	add	r3, r4
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	4413      	add	r3, r2
 800223c:	3304      	adds	r3, #4
 800223e:	460a      	mov	r2, r1
 8002240:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][5] = R5_IN;
 8002242:	4b0a      	ldr	r3, [pc, #40]	; (800226c <Key_Read+0xe0>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	461c      	mov	r4, r3
 8002248:	2120      	movs	r1, #32
 800224a:	4809      	ldr	r0, [pc, #36]	; (8002270 <Key_Read+0xe4>)
 800224c:	f007 fca4 	bl	8009b98 <HAL_GPIO_ReadPin>
 8002250:	4603      	mov	r3, r0
 8002252:	4619      	mov	r1, r3
 8002254:	4a07      	ldr	r2, [pc, #28]	; (8002274 <Key_Read+0xe8>)
 8002256:	4623      	mov	r3, r4
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	4423      	add	r3, r4
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	4413      	add	r3, r2
 8002260:	3305      	adds	r3, #5
 8002262:	460a      	mov	r2, r1
 8002264:	701a      	strb	r2, [r3, #0]
}
 8002266:	bf00      	nop
 8002268:	bd98      	pop	{r3, r4, r7, pc}
 800226a:	bf00      	nop
 800226c:	20007080 	.word	0x20007080
 8002270:	40020c00 	.word	0x40020c00
 8002274:	2000085c 	.word	0x2000085c

08002278 <key_filter_all>:

static void key_filter_all()
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b082      	sub	sp, #8
 800227c:	af00      	add	r7, sp, #0
	for (int x = 0; x < COLUMNS_COUNT; ++x) {
 800227e:	2300      	movs	r3, #0
 8002280:	607b      	str	r3, [r7, #4]
 8002282:	e013      	b.n	80022ac <key_filter_all+0x34>
		for (int y = 0; y < ROWS_COUNT; ++y) {
 8002284:	2300      	movs	r3, #0
 8002286:	603b      	str	r3, [r7, #0]
 8002288:	e00a      	b.n	80022a0 <key_filter_all+0x28>
			key_filter(x, y);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	b2db      	uxtb	r3, r3
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	4611      	mov	r1, r2
 8002294:	4618      	mov	r0, r3
 8002296:	f000 f811 	bl	80022bc <key_filter>
		for (int y = 0; y < ROWS_COUNT; ++y) {
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	3301      	adds	r3, #1
 800229e:	603b      	str	r3, [r7, #0]
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	2b05      	cmp	r3, #5
 80022a4:	ddf1      	ble.n	800228a <key_filter_all+0x12>
	for (int x = 0; x < COLUMNS_COUNT; ++x) {
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3301      	adds	r3, #1
 80022aa:	607b      	str	r3, [r7, #4]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2b05      	cmp	r3, #5
 80022b0:	dde8      	ble.n	8002284 <key_filter_all+0xc>
		}
	}
}
 80022b2:	bf00      	nop
 80022b4:	bf00      	nop
 80022b6:	3708      	adds	r7, #8
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}

080022bc <key_filter>:

static void key_filter(uint8_t x, uint8_t y)
{
 80022bc:	b490      	push	{r4, r7}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	4603      	mov	r3, r0
 80022c4:	460a      	mov	r2, r1
 80022c6:	71fb      	strb	r3, [r7, #7]
 80022c8:	4613      	mov	r3, r2
 80022ca:	71bb      	strb	r3, [r7, #6]
	if(key_input_mask[x][y])
 80022cc:	79fa      	ldrb	r2, [r7, #7]
 80022ce:	79b9      	ldrb	r1, [r7, #6]
 80022d0:	483e      	ldr	r0, [pc, #248]	; (80023cc <key_filter+0x110>)
 80022d2:	4613      	mov	r3, r2
 80022d4:	005b      	lsls	r3, r3, #1
 80022d6:	4413      	add	r3, r2
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	4403      	add	r3, r0
 80022dc:	440b      	add	r3, r1
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d01b      	beq.n	800231c <key_filter+0x60>
	{
		key_sence_count[x][y]= key_sence_count[x][y]>=KEY_SENCE ? KEY_SENCE : key_sence_count[x][y]+1;
 80022e4:	79fa      	ldrb	r2, [r7, #7]
 80022e6:	79b9      	ldrb	r1, [r7, #6]
 80022e8:	4839      	ldr	r0, [pc, #228]	; (80023d0 <key_filter+0x114>)
 80022ea:	4613      	mov	r3, r2
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	4413      	add	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4403      	add	r3, r0
 80022f4:	440b      	add	r3, r1
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b0f      	cmp	r3, #15
 80022fa:	bf28      	it	cs
 80022fc:	230f      	movcs	r3, #15
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	79fa      	ldrb	r2, [r7, #7]
 8002302:	79b9      	ldrb	r1, [r7, #6]
 8002304:	3301      	adds	r3, #1
 8002306:	b2dc      	uxtb	r4, r3
 8002308:	4831      	ldr	r0, [pc, #196]	; (80023d0 <key_filter+0x114>)
 800230a:	4613      	mov	r3, r2
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	4413      	add	r3, r2
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	4403      	add	r3, r0
 8002314:	440b      	add	r3, r1
 8002316:	4622      	mov	r2, r4
 8002318:	701a      	strb	r2, [r3, #0]
 800231a:	e024      	b.n	8002366 <key_filter+0xaa>
	}
	else{
		key_sence_count[x][y]= key_sence_count[x][y]<=0 ? 0 : key_sence_count[x][y]-1;
 800231c:	79fa      	ldrb	r2, [r7, #7]
 800231e:	79b9      	ldrb	r1, [r7, #6]
 8002320:	482b      	ldr	r0, [pc, #172]	; (80023d0 <key_filter+0x114>)
 8002322:	4613      	mov	r3, r2
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	4413      	add	r3, r2
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	4403      	add	r3, r0
 800232c:	440b      	add	r3, r1
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d00c      	beq.n	800234e <key_filter+0x92>
 8002334:	79fa      	ldrb	r2, [r7, #7]
 8002336:	79b9      	ldrb	r1, [r7, #6]
 8002338:	4825      	ldr	r0, [pc, #148]	; (80023d0 <key_filter+0x114>)
 800233a:	4613      	mov	r3, r2
 800233c:	005b      	lsls	r3, r3, #1
 800233e:	4413      	add	r3, r2
 8002340:	005b      	lsls	r3, r3, #1
 8002342:	4403      	add	r3, r0
 8002344:	440b      	add	r3, r1
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	3b01      	subs	r3, #1
 800234a:	b2d8      	uxtb	r0, r3
 800234c:	e000      	b.n	8002350 <key_filter+0x94>
 800234e:	2000      	movs	r0, #0
 8002350:	79fa      	ldrb	r2, [r7, #7]
 8002352:	79b9      	ldrb	r1, [r7, #6]
 8002354:	4c1e      	ldr	r4, [pc, #120]	; (80023d0 <key_filter+0x114>)
 8002356:	4613      	mov	r3, r2
 8002358:	005b      	lsls	r3, r3, #1
 800235a:	4413      	add	r3, r2
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	4423      	add	r3, r4
 8002360:	440b      	add	r3, r1
 8002362:	4602      	mov	r2, r0
 8002364:	701a      	strb	r2, [r3, #0]
		//key_sence_count[x][y]= 0;
	}
	if(key_sence_count[x][y]==KEY_SENCE)key_input_filtered_mask[x][y] = 1;
 8002366:	79fa      	ldrb	r2, [r7, #7]
 8002368:	79b9      	ldrb	r1, [r7, #6]
 800236a:	4819      	ldr	r0, [pc, #100]	; (80023d0 <key_filter+0x114>)
 800236c:	4613      	mov	r3, r2
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	4413      	add	r3, r2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	4403      	add	r3, r0
 8002376:	440b      	add	r3, r1
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b10      	cmp	r3, #16
 800237c:	d10a      	bne.n	8002394 <key_filter+0xd8>
 800237e:	79fa      	ldrb	r2, [r7, #7]
 8002380:	79b9      	ldrb	r1, [r7, #6]
 8002382:	4814      	ldr	r0, [pc, #80]	; (80023d4 <key_filter+0x118>)
 8002384:	4613      	mov	r3, r2
 8002386:	005b      	lsls	r3, r3, #1
 8002388:	4413      	add	r3, r2
 800238a:	005b      	lsls	r3, r3, #1
 800238c:	4403      	add	r3, r0
 800238e:	440b      	add	r3, r1
 8002390:	2201      	movs	r2, #1
 8002392:	701a      	strb	r2, [r3, #0]
	if(key_sence_count[x][y]==0)key_input_filtered_mask[x][y] = 0;
 8002394:	79fa      	ldrb	r2, [r7, #7]
 8002396:	79b9      	ldrb	r1, [r7, #6]
 8002398:	480d      	ldr	r0, [pc, #52]	; (80023d0 <key_filter+0x114>)
 800239a:	4613      	mov	r3, r2
 800239c:	005b      	lsls	r3, r3, #1
 800239e:	4413      	add	r3, r2
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	4403      	add	r3, r0
 80023a4:	440b      	add	r3, r1
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10a      	bne.n	80023c2 <key_filter+0x106>
 80023ac:	79fa      	ldrb	r2, [r7, #7]
 80023ae:	79b9      	ldrb	r1, [r7, #6]
 80023b0:	4808      	ldr	r0, [pc, #32]	; (80023d4 <key_filter+0x118>)
 80023b2:	4613      	mov	r3, r2
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	4413      	add	r3, r2
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	4403      	add	r3, r0
 80023bc:	440b      	add	r3, r1
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bc90      	pop	{r4, r7}
 80023ca:	4770      	bx	lr
 80023cc:	2000085c 	.word	0x2000085c
 80023d0:	200008c8 	.word	0x200008c8
 80023d4:	20000880 	.word	0x20000880

080023d8 <GetPositiveFront>:

static void GetPositiveFront()
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
	for (int col = 0; col < COLUMNS_COUNT; ++col) {
 80023de:	2300      	movs	r3, #0
 80023e0:	607b      	str	r3, [r7, #4]
 80023e2:	e047      	b.n	8002474 <GetPositiveFront+0x9c>
		for (int row = 0; row < ROWS_COUNT; ++row) {
 80023e4:	2300      	movs	r3, #0
 80023e6:	603b      	str	r3, [r7, #0]
 80023e8:	e03e      	b.n	8002468 <GetPositiveFront+0x90>
			positive_fronts[col][row] = key_input_filtered_mask[col][row]==1 && key_input_old_mask[col][row]==0 ? 1:0;
 80023ea:	4927      	ldr	r1, [pc, #156]	; (8002488 <GetPositiveFront+0xb0>)
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	4413      	add	r3, r2
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	18ca      	adds	r2, r1, r3
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	4413      	add	r3, r2
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d10d      	bne.n	800241e <GetPositiveFront+0x46>
 8002402:	4922      	ldr	r1, [pc, #136]	; (800248c <GetPositiveFront+0xb4>)
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	4413      	add	r3, r2
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	18ca      	adds	r2, r1, r3
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	4413      	add	r3, r2
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <GetPositiveFront+0x46>
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <GetPositiveFront+0x48>
 800241e:	2300      	movs	r3, #0
 8002420:	b2d8      	uxtb	r0, r3
 8002422:	491b      	ldr	r1, [pc, #108]	; (8002490 <GetPositiveFront+0xb8>)
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	005b      	lsls	r3, r3, #1
 800242a:	4413      	add	r3, r2
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	18ca      	adds	r2, r1, r3
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	4413      	add	r3, r2
 8002434:	4602      	mov	r2, r0
 8002436:	701a      	strb	r2, [r3, #0]
			key_input_old_mask[col][row] = key_input_filtered_mask[col][row];
 8002438:	4913      	ldr	r1, [pc, #76]	; (8002488 <GetPositiveFront+0xb0>)
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	4413      	add	r3, r2
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	18ca      	adds	r2, r1, r3
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	4413      	add	r3, r2
 800244a:	7818      	ldrb	r0, [r3, #0]
 800244c:	490f      	ldr	r1, [pc, #60]	; (800248c <GetPositiveFront+0xb4>)
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	4613      	mov	r3, r2
 8002452:	005b      	lsls	r3, r3, #1
 8002454:	4413      	add	r3, r2
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	18ca      	adds	r2, r1, r3
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	4413      	add	r3, r2
 800245e:	4602      	mov	r2, r0
 8002460:	701a      	strb	r2, [r3, #0]
		for (int row = 0; row < ROWS_COUNT; ++row) {
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	3301      	adds	r3, #1
 8002466:	603b      	str	r3, [r7, #0]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	2b05      	cmp	r3, #5
 800246c:	ddbd      	ble.n	80023ea <GetPositiveFront+0x12>
	for (int col = 0; col < COLUMNS_COUNT; ++col) {
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	3301      	adds	r3, #1
 8002472:	607b      	str	r3, [r7, #4]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2b05      	cmp	r3, #5
 8002478:	ddb4      	ble.n	80023e4 <GetPositiveFront+0xc>
		}
	}
}
 800247a:	bf00      	nop
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	20000880 	.word	0x20000880
 800248c:	200008a4 	.word	0x200008a4
 8002490:	200008ec 	.word	0x200008ec

08002494 <SendToLcd>:



static void SendToLcd()
{
 8002494:	b580      	push	{r7, lr}
 8002496:	af00      	add	r7, sp, #0
	sendStr(lcd[0], 0, 0);
 8002498:	2200      	movs	r2, #0
 800249a:	2100      	movs	r1, #0
 800249c:	4809      	ldr	r0, [pc, #36]	; (80024c4 <SendToLcd+0x30>)
 800249e:	f001 ff55 	bl	800434c <sendStr>
	sendStr(lcd[1], 1, 0);
 80024a2:	2200      	movs	r2, #0
 80024a4:	2101      	movs	r1, #1
 80024a6:	4808      	ldr	r0, [pc, #32]	; (80024c8 <SendToLcd+0x34>)
 80024a8:	f001 ff50 	bl	800434c <sendStr>
	sendStr(lcd[2], 2, 0);
 80024ac:	2200      	movs	r2, #0
 80024ae:	2102      	movs	r1, #2
 80024b0:	4806      	ldr	r0, [pc, #24]	; (80024cc <SendToLcd+0x38>)
 80024b2:	f001 ff4b 	bl	800434c <sendStr>
	sendStr(lcd[3], 3, 0);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2103      	movs	r1, #3
 80024ba:	4805      	ldr	r0, [pc, #20]	; (80024d0 <SendToLcd+0x3c>)
 80024bc:	f001 ff46 	bl	800434c <sendStr>
}
 80024c0:	bf00      	nop
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	20007030 	.word	0x20007030
 80024c8:	20007044 	.word	0x20007044
 80024cc:	20007058 	.word	0x20007058
 80024d0:	2000706c 	.word	0x2000706c

080024d4 <OnKeyPress>:
		},
};


int OnKeyPress(uint8_t *req,uint8_t req_length, uint8_t *answer)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b086      	sub	sp, #24
 80024d8:	af00      	add	r7, sp, #0
 80024da:	60f8      	str	r0, [r7, #12]
 80024dc:	460b      	mov	r3, r1
 80024de:	607a      	str	r2, [r7, #4]
 80024e0:	72fb      	strb	r3, [r7, #11]
	char *p = (char*)req;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	617b      	str	r3, [r7, #20]
	if(!strncmp(p, "Enter", strlen("Enter")))
 80024e6:	2205      	movs	r2, #5
 80024e8:	49bd      	ldr	r1, [pc, #756]	; (80027e0 <OnKeyPress+0x30c>)
 80024ea:	6978      	ldr	r0, [r7, #20]
 80024ec:	f01c ffd4 	bl	801f498 <strncmp>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d107      	bne.n	8002506 <OnKeyPress+0x32>
	{
		if(!OnEnterPressAction()) return 0;
 80024f6:	f000 f9a3 	bl	8002840 <OnEnterPressAction>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f040 8156 	bne.w	80027ae <OnKeyPress+0x2da>
 8002502:	2300      	movs	r3, #0
 8002504:	e168      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "Esc", strlen("Esc")))
 8002506:	2203      	movs	r2, #3
 8002508:	49b6      	ldr	r1, [pc, #728]	; (80027e4 <OnKeyPress+0x310>)
 800250a:	6978      	ldr	r0, [r7, #20]
 800250c:	f01c ffc4 	bl	801f498 <strncmp>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d107      	bne.n	8002526 <OnKeyPress+0x52>
	{
		if(!OnEscPressKey()) return 0;
 8002516:	f000 fe45 	bl	80031a4 <OnEscPressKey>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	f040 8146 	bne.w	80027ae <OnKeyPress+0x2da>
 8002522:	2300      	movs	r3, #0
 8002524:	e158      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "Delete", strlen("Delete")))
 8002526:	2206      	movs	r2, #6
 8002528:	49af      	ldr	r1, [pc, #700]	; (80027e8 <OnKeyPress+0x314>)
 800252a:	6978      	ldr	r0, [r7, #20]
 800252c:	f01c ffb4 	bl	801f498 <strncmp>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d107      	bne.n	8002546 <OnKeyPress+0x72>
	{
		if(!OnDeletePressKey())return 0;
 8002536:	f001 fc33 	bl	8003da0 <OnDeletePressKey>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	f040 8136 	bne.w	80027ae <OnKeyPress+0x2da>
 8002542:	2300      	movs	r3, #0
 8002544:	e148      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "Up", strlen("Up")))
 8002546:	2202      	movs	r2, #2
 8002548:	49a8      	ldr	r1, [pc, #672]	; (80027ec <OnKeyPress+0x318>)
 800254a:	6978      	ldr	r0, [r7, #20]
 800254c:	f01c ffa4 	bl	801f498 <strncmp>
 8002550:	4603      	mov	r3, r0
 8002552:	2b00      	cmp	r3, #0
 8002554:	d107      	bne.n	8002566 <OnKeyPress+0x92>
	{
		if(!OnUpPressKey())return 0;
 8002556:	f000 fd1f 	bl	8002f98 <OnUpPressKey>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	f040 8126 	bne.w	80027ae <OnKeyPress+0x2da>
 8002562:	2300      	movs	r3, #0
 8002564:	e138      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "Right", strlen("Right")))
 8002566:	2205      	movs	r2, #5
 8002568:	49a1      	ldr	r1, [pc, #644]	; (80027f0 <OnKeyPress+0x31c>)
 800256a:	6978      	ldr	r0, [r7, #20]
 800256c:	f01c ff94 	bl	801f498 <strncmp>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d107      	bne.n	8002586 <OnKeyPress+0xb2>
	{
		if(!OnRightPressKey())return 0;
 8002576:	f000 fc81 	bl	8002e7c <OnRightPressKey>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	f040 8116 	bne.w	80027ae <OnKeyPress+0x2da>
 8002582:	2300      	movs	r3, #0
 8002584:	e128      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "Left", strlen("Left")))
 8002586:	2204      	movs	r2, #4
 8002588:	499a      	ldr	r1, [pc, #616]	; (80027f4 <OnKeyPress+0x320>)
 800258a:	6978      	ldr	r0, [r7, #20]
 800258c:	f01c ff84 	bl	801f498 <strncmp>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d107      	bne.n	80025a6 <OnKeyPress+0xd2>
	{
		if(!OnLeftPressKey())return 0;
 8002596:	f000 fbe3 	bl	8002d60 <OnLeftPressKey>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	f040 8106 	bne.w	80027ae <OnKeyPress+0x2da>
 80025a2:	2300      	movs	r3, #0
 80025a4:	e118      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "Down", strlen("Down")))
 80025a6:	2204      	movs	r2, #4
 80025a8:	4993      	ldr	r1, [pc, #588]	; (80027f8 <OnKeyPress+0x324>)
 80025aa:	6978      	ldr	r0, [r7, #20]
 80025ac:	f01c ff74 	bl	801f498 <strncmp>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d107      	bne.n	80025c6 <OnKeyPress+0xf2>
	{
		if(!OnDownPressKey())return 0;
 80025b6:	f000 fb67 	bl	8002c88 <OnDownPressKey>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f040 80f6 	bne.w	80027ae <OnKeyPress+0x2da>
 80025c2:	2300      	movs	r3, #0
 80025c4:	e108      	b.n	80027d8 <OnKeyPress+0x304>

	}
	else if(!strncmp(p, "F1", strlen("F1")))
 80025c6:	2202      	movs	r2, #2
 80025c8:	498c      	ldr	r1, [pc, #560]	; (80027fc <OnKeyPress+0x328>)
 80025ca:	6978      	ldr	r0, [r7, #20]
 80025cc:	f01c ff64 	bl	801f498 <strncmp>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d107      	bne.n	80025e6 <OnKeyPress+0x112>
	{
		if(!OnF1PressKey())return 0;
 80025d6:	f000 fd4d 	bl	8003074 <OnF1PressKey>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f040 80e6 	bne.w	80027ae <OnKeyPress+0x2da>
 80025e2:	2300      	movs	r3, #0
 80025e4:	e0f8      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "F2", strlen("F2")))
 80025e6:	2202      	movs	r2, #2
 80025e8:	4985      	ldr	r1, [pc, #532]	; (8002800 <OnKeyPress+0x32c>)
 80025ea:	6978      	ldr	r0, [r7, #20]
 80025ec:	f01c ff54 	bl	801f498 <strncmp>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d107      	bne.n	8002606 <OnKeyPress+0x132>
	{
		if(!OnF2PressKey())return 0;
 80025f6:	f000 fd4f 	bl	8003098 <OnF2PressKey>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f040 80d6 	bne.w	80027ae <OnKeyPress+0x2da>
 8002602:	2300      	movs	r3, #0
 8002604:	e0e8      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "F3", strlen("F3")))
 8002606:	2202      	movs	r2, #2
 8002608:	497e      	ldr	r1, [pc, #504]	; (8002804 <OnKeyPress+0x330>)
 800260a:	6978      	ldr	r0, [r7, #20]
 800260c:	f01c ff44 	bl	801f498 <strncmp>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d107      	bne.n	8002626 <OnKeyPress+0x152>
	{
		if(!OnF3PressKey())return 0;
 8002616:	f000 fd71 	bl	80030fc <OnF3PressKey>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	f040 80c6 	bne.w	80027ae <OnKeyPress+0x2da>
 8002622:	2300      	movs	r3, #0
 8002624:	e0d8      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "F4", strlen("F4")))
 8002626:	2202      	movs	r2, #2
 8002628:	4977      	ldr	r1, [pc, #476]	; (8002808 <OnKeyPress+0x334>)
 800262a:	6978      	ldr	r0, [r7, #20]
 800262c:	f01c ff34 	bl	801f498 <strncmp>
 8002630:	4603      	mov	r3, r0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d107      	bne.n	8002646 <OnKeyPress+0x172>
	{
		if(!OnF4PressKey())return 0;
 8002636:	f000 fd97 	bl	8003168 <OnF4PressKey>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	f040 80b6 	bne.w	80027ae <OnKeyPress+0x2da>
 8002642:	2300      	movs	r3, #0
 8002644:	e0c8      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "NumPad0", strlen("NumPad0")))
 8002646:	2207      	movs	r2, #7
 8002648:	4970      	ldr	r1, [pc, #448]	; (800280c <OnKeyPress+0x338>)
 800264a:	6978      	ldr	r0, [r7, #20]
 800264c:	f01c ff24 	bl	801f498 <strncmp>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d108      	bne.n	8002668 <OnKeyPress+0x194>
	{
		if(!OnNumberPressKey(0))return 0;
 8002656:	2000      	movs	r0, #0
 8002658:	f001 fb56 	bl	8003d08 <OnNumberPressKey>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	f040 80a5 	bne.w	80027ae <OnKeyPress+0x2da>
 8002664:	2300      	movs	r3, #0
 8002666:	e0b7      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "NumPad1", strlen("NumPad1")))
 8002668:	2207      	movs	r2, #7
 800266a:	4969      	ldr	r1, [pc, #420]	; (8002810 <OnKeyPress+0x33c>)
 800266c:	6978      	ldr	r0, [r7, #20]
 800266e:	f01c ff13 	bl	801f498 <strncmp>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d108      	bne.n	800268a <OnKeyPress+0x1b6>
	{
		if(!OnNumberPressKey(1))return 0;
 8002678:	2001      	movs	r0, #1
 800267a:	f001 fb45 	bl	8003d08 <OnNumberPressKey>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	f040 8094 	bne.w	80027ae <OnKeyPress+0x2da>
 8002686:	2300      	movs	r3, #0
 8002688:	e0a6      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "NumPad2", strlen("NumPad2")))
 800268a:	2207      	movs	r2, #7
 800268c:	4961      	ldr	r1, [pc, #388]	; (8002814 <OnKeyPress+0x340>)
 800268e:	6978      	ldr	r0, [r7, #20]
 8002690:	f01c ff02 	bl	801f498 <strncmp>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d108      	bne.n	80026ac <OnKeyPress+0x1d8>
	{
		if(!OnNumberPressKey(2))return 0;
 800269a:	2002      	movs	r0, #2
 800269c:	f001 fb34 	bl	8003d08 <OnNumberPressKey>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f040 8083 	bne.w	80027ae <OnKeyPress+0x2da>
 80026a8:	2300      	movs	r3, #0
 80026aa:	e095      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "NumPad3", strlen("NumPad3")))
 80026ac:	2207      	movs	r2, #7
 80026ae:	495a      	ldr	r1, [pc, #360]	; (8002818 <OnKeyPress+0x344>)
 80026b0:	6978      	ldr	r0, [r7, #20]
 80026b2:	f01c fef1 	bl	801f498 <strncmp>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d107      	bne.n	80026cc <OnKeyPress+0x1f8>
	{
		if(!OnNumberPressKey(3))return 0;
 80026bc:	2003      	movs	r0, #3
 80026be:	f001 fb23 	bl	8003d08 <OnNumberPressKey>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d172      	bne.n	80027ae <OnKeyPress+0x2da>
 80026c8:	2300      	movs	r3, #0
 80026ca:	e085      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "NumPad4", strlen("NumPad4")))
 80026cc:	2207      	movs	r2, #7
 80026ce:	4953      	ldr	r1, [pc, #332]	; (800281c <OnKeyPress+0x348>)
 80026d0:	6978      	ldr	r0, [r7, #20]
 80026d2:	f01c fee1 	bl	801f498 <strncmp>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d107      	bne.n	80026ec <OnKeyPress+0x218>
	{
		if(!OnNumberPressKey(4))return 0;
 80026dc:	2004      	movs	r0, #4
 80026de:	f001 fb13 	bl	8003d08 <OnNumberPressKey>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d162      	bne.n	80027ae <OnKeyPress+0x2da>
 80026e8:	2300      	movs	r3, #0
 80026ea:	e075      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "NumPad5", strlen("NumPad5")))
 80026ec:	2207      	movs	r2, #7
 80026ee:	494c      	ldr	r1, [pc, #304]	; (8002820 <OnKeyPress+0x34c>)
 80026f0:	6978      	ldr	r0, [r7, #20]
 80026f2:	f01c fed1 	bl	801f498 <strncmp>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d107      	bne.n	800270c <OnKeyPress+0x238>
	{
		if(!OnNumberPressKey(5))return 0;
 80026fc:	2005      	movs	r0, #5
 80026fe:	f001 fb03 	bl	8003d08 <OnNumberPressKey>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d152      	bne.n	80027ae <OnKeyPress+0x2da>
 8002708:	2300      	movs	r3, #0
 800270a:	e065      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "NumPad6", strlen("NumPad6")))
 800270c:	2207      	movs	r2, #7
 800270e:	4945      	ldr	r1, [pc, #276]	; (8002824 <OnKeyPress+0x350>)
 8002710:	6978      	ldr	r0, [r7, #20]
 8002712:	f01c fec1 	bl	801f498 <strncmp>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d107      	bne.n	800272c <OnKeyPress+0x258>
	{
		if(!OnNumberPressKey(6))return 0;
 800271c:	2006      	movs	r0, #6
 800271e:	f001 faf3 	bl	8003d08 <OnNumberPressKey>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d142      	bne.n	80027ae <OnKeyPress+0x2da>
 8002728:	2300      	movs	r3, #0
 800272a:	e055      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "NumPad7", strlen("NumPad7")))
 800272c:	2207      	movs	r2, #7
 800272e:	493e      	ldr	r1, [pc, #248]	; (8002828 <OnKeyPress+0x354>)
 8002730:	6978      	ldr	r0, [r7, #20]
 8002732:	f01c feb1 	bl	801f498 <strncmp>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d107      	bne.n	800274c <OnKeyPress+0x278>
	{
		if(!OnNumberPressKey(7))return 0;
 800273c:	2007      	movs	r0, #7
 800273e:	f001 fae3 	bl	8003d08 <OnNumberPressKey>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d132      	bne.n	80027ae <OnKeyPress+0x2da>
 8002748:	2300      	movs	r3, #0
 800274a:	e045      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "NumPad8", strlen("NumPad8")))
 800274c:	2207      	movs	r2, #7
 800274e:	4937      	ldr	r1, [pc, #220]	; (800282c <OnKeyPress+0x358>)
 8002750:	6978      	ldr	r0, [r7, #20]
 8002752:	f01c fea1 	bl	801f498 <strncmp>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d107      	bne.n	800276c <OnKeyPress+0x298>
	{
		if(!OnNumberPressKey(8))return 0;
 800275c:	2008      	movs	r0, #8
 800275e:	f001 fad3 	bl	8003d08 <OnNumberPressKey>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d122      	bne.n	80027ae <OnKeyPress+0x2da>
 8002768:	2300      	movs	r3, #0
 800276a:	e035      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "NumPad9", strlen("NumPad9")))
 800276c:	2207      	movs	r2, #7
 800276e:	4930      	ldr	r1, [pc, #192]	; (8002830 <OnKeyPress+0x35c>)
 8002770:	6978      	ldr	r0, [r7, #20]
 8002772:	f01c fe91 	bl	801f498 <strncmp>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d107      	bne.n	800278c <OnKeyPress+0x2b8>
	{
		if(!OnNumberPressKey(9))return 0;
 800277c:	2009      	movs	r0, #9
 800277e:	f001 fac3 	bl	8003d08 <OnNumberPressKey>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d112      	bne.n	80027ae <OnKeyPress+0x2da>
 8002788:	2300      	movs	r3, #0
 800278a:	e025      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else if(!strncmp(p, "Dec", strlen("Dec")))
 800278c:	2203      	movs	r2, #3
 800278e:	4929      	ldr	r1, [pc, #164]	; (8002834 <OnKeyPress+0x360>)
 8002790:	6978      	ldr	r0, [r7, #20]
 8002792:	f01c fe81 	bl	801f498 <strncmp>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d106      	bne.n	80027aa <OnKeyPress+0x2d6>
	{
		if(!OnDecPressKey())return 0;
 800279c:	f001 fb5a 	bl	8003e54 <OnDecPressKey>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d103      	bne.n	80027ae <OnKeyPress+0x2da>
 80027a6:	2300      	movs	r3, #0
 80027a8:	e016      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else return 0;
 80027aa:	2300      	movs	r3, #0
 80027ac:	e014      	b.n	80027d8 <OnKeyPress+0x304>
	memcpy(answer,lcdAnswer,80);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a21      	ldr	r2, [pc, #132]	; (8002838 <OnKeyPress+0x364>)
 80027b2:	4618      	mov	r0, r3
 80027b4:	4611      	mov	r1, r2
 80027b6:	2350      	movs	r3, #80	; 0x50
 80027b8:	461a      	mov	r2, r3
 80027ba:	f01b fda3 	bl	801e304 <memcpy>
	if(currentCursorPosition==-1)
 80027be:	4b1f      	ldr	r3, [pc, #124]	; (800283c <OnKeyPress+0x368>)
 80027c0:	f993 3000 	ldrsb.w	r3, [r3]
 80027c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c8:	d102      	bne.n	80027d0 <OnKeyPress+0x2fc>
	{
		//answer[80] = 255;
		return -1;
 80027ca:	f04f 33ff 	mov.w	r3, #4294967295
 80027ce:	e003      	b.n	80027d8 <OnKeyPress+0x304>
	}
	else
	{
		//answer[80] = currentCursorPosition+40;
	}
	return currentCursorPosition+40;
 80027d0:	4b1a      	ldr	r3, [pc, #104]	; (800283c <OnKeyPress+0x368>)
 80027d2:	f993 3000 	ldrsb.w	r3, [r3]
 80027d6:	3328      	adds	r3, #40	; 0x28
}
 80027d8:	4618      	mov	r0, r3
 80027da:	3718      	adds	r7, #24
 80027dc:	46bd      	mov	sp, r7
 80027de:	bd80      	pop	{r7, pc}
 80027e0:	080234f4 	.word	0x080234f4
 80027e4:	080234fc 	.word	0x080234fc
 80027e8:	08023500 	.word	0x08023500
 80027ec:	08023508 	.word	0x08023508
 80027f0:	0802350c 	.word	0x0802350c
 80027f4:	08023514 	.word	0x08023514
 80027f8:	0802351c 	.word	0x0802351c
 80027fc:	08023524 	.word	0x08023524
 8002800:	08023528 	.word	0x08023528
 8002804:	0802352c 	.word	0x0802352c
 8002808:	08023530 	.word	0x08023530
 800280c:	08023534 	.word	0x08023534
 8002810:	0802353c 	.word	0x0802353c
 8002814:	08023544 	.word	0x08023544
 8002818:	0802354c 	.word	0x0802354c
 800281c:	08023554 	.word	0x08023554
 8002820:	0802355c 	.word	0x0802355c
 8002824:	08023564 	.word	0x08023564
 8002828:	0802356c 	.word	0x0802356c
 800282c:	08023574 	.word	0x08023574
 8002830:	0802357c 	.word	0x0802357c
 8002834:	08023584 	.word	0x08023584
 8002838:	20007084 	.word	0x20007084
 800283c:	200000c3 	.word	0x200000c3

08002840 <OnEnterPressAction>:

static uint8_t OnEnterPressAction()
{
 8002840:	b5b0      	push	{r4, r5, r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
	Row *par = NULL;
 8002846:	2300      	movs	r3, #0
 8002848:	607b      	str	r3, [r7, #4]
	if(currentParameters == NULL)
 800284a:	4b6d      	ldr	r3, [pc, #436]	; (8002a00 <OnEnterPressAction+0x1c0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d11f      	bne.n	8002892 <OnEnterPressAction+0x52>
	{
		currentCursorPosition = -1;
 8002852:	4b6c      	ldr	r3, [pc, #432]	; (8002a04 <OnEnterPressAction+0x1c4>)
 8002854:	22ff      	movs	r2, #255	; 0xff
 8002856:	701a      	strb	r2, [r3, #0]
		currentParameters = indication_rows;
 8002858:	4b69      	ldr	r3, [pc, #420]	; (8002a00 <OnEnterPressAction+0x1c0>)
 800285a:	4a6b      	ldr	r2, [pc, #428]	; (8002a08 <OnEnterPressAction+0x1c8>)
 800285c:	601a      	str	r2, [r3, #0]
		paramIndex = 0;
 800285e:	4b6b      	ldr	r3, [pc, #428]	; (8002a0c <OnEnterPressAction+0x1cc>)
 8002860:	2200      	movs	r2, #0
 8002862:	701a      	strb	r2, [r3, #0]
		currentParamLength = sizeof(indication_rows)/sizeof(Row);
 8002864:	4b6a      	ldr	r3, [pc, #424]	; (8002a10 <OnEnterPressAction+0x1d0>)
 8002866:	2203      	movs	r2, #3
 8002868:	701a      	strb	r2, [r3, #0]
		editMode = 0;
 800286a:	4b6a      	ldr	r3, [pc, #424]	; (8002a14 <OnEnterPressAction+0x1d4>)
 800286c:	2200      	movs	r2, #0
 800286e:	701a      	strb	r2, [r3, #0]
		groupParamName = indicationName;
 8002870:	4b69      	ldr	r3, [pc, #420]	; (8002a18 <OnEnterPressAction+0x1d8>)
 8002872:	4a6a      	ldr	r2, [pc, #424]	; (8002a1c <OnEnterPressAction+0x1dc>)
 8002874:	601a      	str	r2, [r3, #0]
		groupParamNameLength = strlen(indicationName);
 8002876:	4869      	ldr	r0, [pc, #420]	; (8002a1c <OnEnterPressAction+0x1dc>)
 8002878:	f7fd fcaa 	bl	80001d0 <strlen>
 800287c:	4603      	mov	r3, r0
 800287e:	b2da      	uxtb	r2, r3
 8002880:	4b67      	ldr	r3, [pc, #412]	; (8002a20 <OnEnterPressAction+0x1e0>)
 8002882:	701a      	strb	r2, [r3, #0]
		ShowParameter(currentParameters);
 8002884:	4b5e      	ldr	r3, [pc, #376]	; (8002a00 <OnEnterPressAction+0x1c0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f000 fcbd 	bl	8003208 <ShowParameter>
		return 1;
 800288e:	2301      	movs	r3, #1
 8002890:	e0b2      	b.n	80029f8 <OnEnterPressAction+0x1b8>
	}
	else if(currentParameters!=Errors)// В случае если находимся в параметре
 8002892:	4b5b      	ldr	r3, [pc, #364]	; (8002a00 <OnEnterPressAction+0x1c0>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a63      	ldr	r2, [pc, #396]	; (8002a24 <OnEnterPressAction+0x1e4>)
 8002898:	4293      	cmp	r3, r2
 800289a:	f000 80ac 	beq.w	80029f6 <OnEnterPressAction+0x1b6>
	{
		par = currentParameters+paramIndex;
 800289e:	4b58      	ldr	r3, [pc, #352]	; (8002a00 <OnEnterPressAction+0x1c0>)
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	4b5a      	ldr	r3, [pc, #360]	; (8002a0c <OnEnterPressAction+0x1cc>)
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	4619      	mov	r1, r3
 80028a8:	460b      	mov	r3, r1
 80028aa:	005b      	lsls	r3, r3, #1
 80028ac:	440b      	add	r3, r1
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	4413      	add	r3, r2
 80028b2:	607b      	str	r3, [r7, #4]
		if(!editMode)// Если находимся не в режиме редактирования
 80028b4:	4b57      	ldr	r3, [pc, #348]	; (8002a14 <OnEnterPressAction+0x1d4>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f040 8094 	bne.w	80029e6 <OnEnterPressAction+0x1a6>
		{

			if(par->isEdited)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	791b      	ldrb	r3, [r3, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 8097 	beq.w	80029f6 <OnEnterPressAction+0x1b6>
			{
				memset(editedValue,0,20);
 80028c8:	2214      	movs	r2, #20
 80028ca:	2100      	movs	r1, #0
 80028cc:	4856      	ldr	r0, [pc, #344]	; (8002a28 <OnEnterPressAction+0x1e8>)
 80028ce:	f01b fd41 	bl	801e354 <memset>
				Clear();
 80028d2:	f000 f8ad 	bl	8002a30 <Clear>
				if(!par->isEnum)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	7a1b      	ldrb	r3, [r3, #8]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10f      	bne.n	80028fe <OnEnterPressAction+0xbe>
				{
					GetEditedValue(par);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f001 fb84 	bl	8003fec <GetEditedValue>
					editMode = 1;
 80028e4:	4b4b      	ldr	r3, [pc, #300]	; (8002a14 <OnEnterPressAction+0x1d4>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	701a      	strb	r2, [r3, #0]
					currentCursorPosition = par->param_pos;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	79db      	ldrb	r3, [r3, #7]
 80028ee:	b25a      	sxtb	r2, r3
 80028f0:	4b44      	ldr	r3, [pc, #272]	; (8002a04 <OnEnterPressAction+0x1c4>)
 80028f2:	701a      	strb	r2, [r3, #0]
					ShowParameter(par);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 fc87 	bl	8003208 <ShowParameter>
					return 1;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e07c      	b.n	80029f8 <OnEnterPressAction+0x1b8>
				}
				else
				{
					if(par->enums==NULL)return 0;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d101      	bne.n	800290a <OnEnterPressAction+0xca>
 8002906:	2300      	movs	r3, #0
 8002908:	e076      	b.n	80029f8 <OnEnterPressAction+0x1b8>
					memset(editedValue,0,20);
 800290a:	2214      	movs	r2, #20
 800290c:	2100      	movs	r1, #0
 800290e:	4846      	ldr	r0, [pc, #280]	; (8002a28 <OnEnterPressAction+0x1e8>)
 8002910:	f01b fd20 	bl	801e354 <memset>
					switch (par->type) {
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	7d5b      	ldrb	r3, [r3, #21]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d002      	beq.n	8002922 <OnEnterPressAction+0xe2>
 800291c:	2b01      	cmp	r3, #1
 800291e:	d00b      	beq.n	8002938 <OnEnterPressAction+0xf8>
							break;
						case ROW_UINT:
							currentEnumKey = *((uint32_t*)par->data);
							break;
						default:
							break;
 8002920:	e015      	b.n	800294e <OnEnterPressAction+0x10e>
							currentEnumKey = *((uint16_t*)par->data);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	ee07 3a90 	vmov	s15, r3
 800292c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002930:	4b3e      	ldr	r3, [pc, #248]	; (8002a2c <OnEnterPressAction+0x1ec>)
 8002932:	edc3 7a00 	vstr	s15, [r3]
							break;
 8002936:	e00a      	b.n	800294e <OnEnterPressAction+0x10e>
							currentEnumKey = *((uint32_t*)par->data);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	ee07 3a90 	vmov	s15, r3
 8002942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002946:	4b39      	ldr	r3, [pc, #228]	; (8002a2c <OnEnterPressAction+0x1ec>)
 8002948:	edc3 7a00 	vstr	s15, [r3]
							break;
 800294c:	bf00      	nop
					}
					Dictionary *dict = FindDictionaryFromValue(currentEnumKey, par->enums, par->enums_len);
 800294e:	4b37      	ldr	r3, [pc, #220]	; (8002a2c <OnEnterPressAction+0x1ec>)
 8002950:	edd3 7a00 	vldr	s15, [r3]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	691a      	ldr	r2, [r3, #16]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	7d1b      	ldrb	r3, [r3, #20]
 800295c:	4619      	mov	r1, r3
 800295e:	4610      	mov	r0, r2
 8002960:	eeb0 0a67 	vmov.f32	s0, s15
 8002964:	f000 ff64 	bl	8003830 <FindDictionaryFromValue>
 8002968:	6038      	str	r0, [r7, #0]
					if(dict==NULL)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d119      	bne.n	80029a4 <OnEnterPressAction+0x164>
					{
						currentEnumKey = par->enums->value;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	691b      	ldr	r3, [r3, #16]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a2d      	ldr	r2, [pc, #180]	; (8002a2c <OnEnterPressAction+0x1ec>)
 8002978:	6013      	str	r3, [r2, #0]
						memcpy(editedValue+par->param_pos,par->enums->name, strlen(par->enums->name));
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	79db      	ldrb	r3, [r3, #7]
 800297e:	461a      	mov	r2, r3
 8002980:	4b29      	ldr	r3, [pc, #164]	; (8002a28 <OnEnterPressAction+0x1e8>)
 8002982:	18d4      	adds	r4, r2, r3
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	685d      	ldr	r5, [r3, #4]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	691b      	ldr	r3, [r3, #16]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	4618      	mov	r0, r3
 8002992:	f7fd fc1d 	bl	80001d0 <strlen>
 8002996:	4603      	mov	r3, r0
 8002998:	461a      	mov	r2, r3
 800299a:	4629      	mov	r1, r5
 800299c:	4620      	mov	r0, r4
 800299e:	f01b fcb1 	bl	801e304 <memcpy>
 80029a2:	e015      	b.n	80029d0 <OnEnterPressAction+0x190>
					}
					else
					{
						currentEnumKey = dict->value;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a20      	ldr	r2, [pc, #128]	; (8002a2c <OnEnterPressAction+0x1ec>)
 80029aa:	6013      	str	r3, [r2, #0]
						memcpy(editedValue+par->param_pos,dict->name, strlen(dict->name));
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	79db      	ldrb	r3, [r3, #7]
 80029b0:	461a      	mov	r2, r3
 80029b2:	4b1d      	ldr	r3, [pc, #116]	; (8002a28 <OnEnterPressAction+0x1e8>)
 80029b4:	18d4      	adds	r4, r2, r3
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685d      	ldr	r5, [r3, #4]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fd fc06 	bl	80001d0 <strlen>
 80029c4:	4603      	mov	r3, r0
 80029c6:	461a      	mov	r2, r3
 80029c8:	4629      	mov	r1, r5
 80029ca:	4620      	mov	r0, r4
 80029cc:	f01b fc9a 	bl	801e304 <memcpy>
					}
					currentCursorPosition = -1;
 80029d0:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <OnEnterPressAction+0x1c4>)
 80029d2:	22ff      	movs	r2, #255	; 0xff
 80029d4:	701a      	strb	r2, [r3, #0]
					editMode = 1;
 80029d6:	4b0f      	ldr	r3, [pc, #60]	; (8002a14 <OnEnterPressAction+0x1d4>)
 80029d8:	2201      	movs	r2, #1
 80029da:	701a      	strb	r2, [r3, #0]
					ShowParameter(par);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 fc13 	bl	8003208 <ShowParameter>
					return 1;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e008      	b.n	80029f8 <OnEnterPressAction+0x1b8>
				}
			}
		}
		else
		{
			AcceptEdit(par);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f001 f88e 	bl	8003b08 <AcceptEdit>
			ShowParameter(par);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 fc0b 	bl	8003208 <ShowParameter>
			return 1;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e000      	b.n	80029f8 <OnEnterPressAction+0x1b8>
		}
	}
	return 0;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3708      	adds	r7, #8
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bdb0      	pop	{r4, r5, r7, pc}
 8002a00:	20000910 	.word	0x20000910
 8002a04:	200000c3 	.word	0x200000c3
 8002a08:	20000354 	.word	0x20000354
 8002a0c:	20000914 	.word	0x20000914
 8002a10:	20007150 	.word	0x20007150
 8002a14:	20000915 	.word	0x20000915
 8002a18:	2000714c 	.word	0x2000714c
 8002a1c:	200000b8 	.word	0x200000b8
 8002a20:	200070d4 	.word	0x200070d4
 8002a24:	2000012c 	.word	0x2000012c
 8002a28:	200070d8 	.word	0x200070d8
 8002a2c:	20000918 	.word	0x20000918

08002a30 <Clear>:



static void Clear()
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
	for (int i = 0; i < 4; ++i) {
 8002a36:	2300      	movs	r3, #0
 8002a38:	607b      	str	r3, [r7, #4]
 8002a3a:	e016      	b.n	8002a6a <Clear+0x3a>
		for (int j = 0; j < 20; ++j) {
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	603b      	str	r3, [r7, #0]
 8002a40:	e00d      	b.n	8002a5e <Clear+0x2e>
			lcdAnswer[i][j] = 0;
 8002a42:	490f      	ldr	r1, [pc, #60]	; (8002a80 <Clear+0x50>)
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	18ca      	adds	r2, r1, r3
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	4413      	add	r3, r2
 8002a54:	2200      	movs	r2, #0
 8002a56:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 20; ++j) {
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	603b      	str	r3, [r7, #0]
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b13      	cmp	r3, #19
 8002a62:	ddee      	ble.n	8002a42 <Clear+0x12>
	for (int i = 0; i < 4; ++i) {
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	3301      	adds	r3, #1
 8002a68:	607b      	str	r3, [r7, #4]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2b03      	cmp	r3, #3
 8002a6e:	dde5      	ble.n	8002a3c <Clear+0xc>
		}
	}
}
 8002a70:	bf00      	nop
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	20007084 	.word	0x20007084

08002a84 <ShowMainDisplay>:

static uint8_t ShowMainDisplay()
{
 8002a84:	b5b0      	push	{r4, r5, r7, lr}
 8002a86:	b0a8      	sub	sp, #160	; 0xa0
 8002a88:	af02      	add	r7, sp, #8
	Clear();
 8002a8a:	f7ff ffd1 	bl	8002a30 <Clear>

	if(meas_data.automat_mode)
 8002a8e:	4b6d      	ldr	r3, [pc, #436]	; (8002c44 <ShowMainDisplay+0x1c0>)
 8002a90:	8a5b      	ldrh	r3, [r3, #18]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d03e      	beq.n	8002b14 <ShowMainDisplay+0x90>
	{
		//Aвто ВКЛ
		char  autoOn[] = {0x41, 0xE2, 0xF2, 0xEE, 0x20, 0xC2, 0xCA, 0xCB,  0x00};
 8002a96:	4a6c      	ldr	r2, [pc, #432]	; (8002c48 <ShowMainDisplay+0x1c4>)
 8002a98:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002a9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a9e:	c303      	stmia	r3!, {r0, r1}
 8002aa0:	701a      	strb	r2, [r3, #0]
		sprintf(lcdAnswer[0],"%s %d/%d",autoOn, meas_data.probInKanistra, settings.retain.nakop_SV);
 8002aa2:	4b68      	ldr	r3, [pc, #416]	; (8002c44 <ShowMainDisplay+0x1c0>)
 8002aa4:	8a9b      	ldrh	r3, [r3, #20]
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4b68      	ldr	r3, [pc, #416]	; (8002c4c <ShowMainDisplay+0x1c8>)
 8002aaa:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002aac:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002ab0:	9300      	str	r3, [sp, #0]
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4966      	ldr	r1, [pc, #408]	; (8002c50 <ShowMainDisplay+0x1cc>)
 8002ab6:	4867      	ldr	r0, [pc, #412]	; (8002c54 <ShowMainDisplay+0x1d0>)
 8002ab8:	f01c fc50 	bl	801f35c <siprintf>
		//Отбор через n с
		char next[] = {0xCE, 0xF2, 0xE1, 0xEE, 0xF0, 0x20, 0xF7, 0xE5, 0xF0, 0xE5, 0xE7,  0x00};
 8002abc:	4a66      	ldr	r2, [pc, #408]	; (8002c58 <ShowMainDisplay+0x1d4>)
 8002abe:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002ac2:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ac4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		// Накопитель полный
		char full[] = {0xCD, 0xE0, 0xEA, 0xEE, 0xEF, 0xE8, 0xF2, 0xE5, 0xEB, 0xFC, 0x20, 0xEF, 0xEE, 0xEB, 0xED, 0xFB, 0xE9,  0x00};
 8002ac8:	4b64      	ldr	r3, [pc, #400]	; (8002c5c <ShowMainDisplay+0x1d8>)
 8002aca:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002ace:	461d      	mov	r5, r3
 8002ad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ad4:	682b      	ldr	r3, [r5, #0]
 8002ad6:	8023      	strh	r3, [r4, #0]

		if(meas_data.nakopitelFull)
 8002ad8:	4b5a      	ldr	r3, [pc, #360]	; (8002c44 <ShowMainDisplay+0x1c0>)
 8002ada:	8adb      	ldrh	r3, [r3, #22]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00c      	beq.n	8002afa <ShowMainDisplay+0x76>
		{
			memcpy(lcdAnswer[2],full,sizeof(full));
 8002ae0:	4b5c      	ldr	r3, [pc, #368]	; (8002c54 <ShowMainDisplay+0x1d0>)
 8002ae2:	f103 0528 	add.w	r5, r3, #40	; 0x28
 8002ae6:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8002aea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002aec:	6028      	str	r0, [r5, #0]
 8002aee:	6069      	str	r1, [r5, #4]
 8002af0:	60aa      	str	r2, [r5, #8]
 8002af2:	60eb      	str	r3, [r5, #12]
 8002af4:	8823      	ldrh	r3, [r4, #0]
 8002af6:	822b      	strh	r3, [r5, #16]
 8002af8:	e01f      	b.n	8002b3a <ShowMainDisplay+0xb6>
		}
		else
		{
			if(meas_data.probotbor_ready)sprintf(lcdAnswer[2],"%s %d c",next, meas_data.toNextOtborTime);
 8002afa:	4b52      	ldr	r3, [pc, #328]	; (8002c44 <ShowMainDisplay+0x1c0>)
 8002afc:	899b      	ldrh	r3, [r3, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d01b      	beq.n	8002b3a <ShowMainDisplay+0xb6>
 8002b02:	4b50      	ldr	r3, [pc, #320]	; (8002c44 <ShowMainDisplay+0x1c0>)
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002b0a:	4955      	ldr	r1, [pc, #340]	; (8002c60 <ShowMainDisplay+0x1dc>)
 8002b0c:	4855      	ldr	r0, [pc, #340]	; (8002c64 <ShowMainDisplay+0x1e0>)
 8002b0e:	f01c fc25 	bl	801f35c <siprintf>
 8002b12:	e012      	b.n	8002b3a <ShowMainDisplay+0xb6>

	}
	else
	{
		//Aвто ОТКЛ
		char  autoOff[] = {0x41, 0xE2, 0xF2, 0xEE, 0x20, 0xCE, 0xD2, 0xCA, 0xCB,  0x00};
 8002b14:	4a54      	ldr	r2, [pc, #336]	; (8002c68 <ShowMainDisplay+0x1e4>)
 8002b16:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002b1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b1c:	c303      	stmia	r3!, {r0, r1}
 8002b1e:	801a      	strh	r2, [r3, #0]
		sprintf(lcdAnswer[0],"%s %d/%d",autoOff, meas_data.probInKanistra, settings.retain.nakop_SV);
 8002b20:	4b48      	ldr	r3, [pc, #288]	; (8002c44 <ShowMainDisplay+0x1c0>)
 8002b22:	8a9b      	ldrh	r3, [r3, #20]
 8002b24:	4619      	mov	r1, r3
 8002b26:	4b49      	ldr	r3, [pc, #292]	; (8002c4c <ShowMainDisplay+0x1c8>)
 8002b28:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002b2a:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	460b      	mov	r3, r1
 8002b32:	4947      	ldr	r1, [pc, #284]	; (8002c50 <ShowMainDisplay+0x1cc>)
 8002b34:	4847      	ldr	r0, [pc, #284]	; (8002c54 <ShowMainDisplay+0x1d0>)
 8002b36:	f01c fc11 	bl	801f35c <siprintf>
	}

	if(meas_data.probotbor_ready)
 8002b3a:	4b42      	ldr	r3, [pc, #264]	; (8002c44 <ShowMainDisplay+0x1c0>)
 8002b3c:	899b      	ldrh	r3, [r3, #12]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d011      	beq.n	8002b66 <ShowMainDisplay+0xe2>
	{
		//Готов к отбору
		char  ready[] = {0xC3,0xEE,0xF2,0xEE,0xE2,0x20,0xEA,0x20,0xEE,0xF2,0xE1,0xEE,0xF0,0xF3};
 8002b42:	4b4a      	ldr	r3, [pc, #296]	; (8002c6c <ShowMainDisplay+0x1e8>)
 8002b44:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8002b48:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b4a:	c407      	stmia	r4!, {r0, r1, r2}
 8002b4c:	8023      	strh	r3, [r4, #0]
		memcpy(lcdAnswer[1],ready,sizeof(ready));
 8002b4e:	4b41      	ldr	r3, [pc, #260]	; (8002c54 <ShowMainDisplay+0x1d0>)
 8002b50:	f103 0414 	add.w	r4, r3, #20
 8002b54:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002b58:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002b5a:	6020      	str	r0, [r4, #0]
 8002b5c:	6061      	str	r1, [r4, #4]
 8002b5e:	60a2      	str	r2, [r4, #8]
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	81a3      	strh	r3, [r4, #12]
 8002b64:	e055      	b.n	8002c12 <ShowMainDisplay+0x18e>
	}
	else if(meas_data.probotbor_busy)
 8002b66:	4b37      	ldr	r3, [pc, #220]	; (8002c44 <ShowMainDisplay+0x1c0>)
 8002b68:	89db      	ldrh	r3, [r3, #14]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d014      	beq.n	8002b98 <ShowMainDisplay+0x114>
	{
		//Выполняется отбор
		char  execSel[] = {0xC2,0xFB,0xEF,0xEE,0xEB,0xED,0xFF,0xE5,0xF2,0xF1,0xFF,0x20,0xEE,0xF2,0xE1,0xEE,0xF0};
 8002b6e:	4b40      	ldr	r3, [pc, #256]	; (8002c70 <ShowMainDisplay+0x1ec>)
 8002b70:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002b74:	461d      	mov	r5, r3
 8002b76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002b78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002b7a:	682b      	ldr	r3, [r5, #0]
 8002b7c:	7023      	strb	r3, [r4, #0]
		memcpy(lcdAnswer[1],execSel,sizeof(execSel));
 8002b7e:	4b35      	ldr	r3, [pc, #212]	; (8002c54 <ShowMainDisplay+0x1d0>)
 8002b80:	f103 0514 	add.w	r5, r3, #20
 8002b84:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8002b88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002b8a:	6028      	str	r0, [r5, #0]
 8002b8c:	6069      	str	r1, [r5, #4]
 8002b8e:	60aa      	str	r2, [r5, #8]
 8002b90:	60eb      	str	r3, [r5, #12]
 8002b92:	7823      	ldrb	r3, [r4, #0]
 8002b94:	742b      	strb	r3, [r5, #16]
 8002b96:	e03c      	b.n	8002c12 <ShowMainDisplay+0x18e>
	}
	else if(meas_data.vozvrat_probotbor_busy)
 8002b98:	4b2a      	ldr	r3, [pc, #168]	; (8002c44 <ShowMainDisplay+0x1c0>)
 8002b9a:	8a1b      	ldrh	r3, [r3, #16]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d01b      	beq.n	8002bd8 <ShowMainDisplay+0x154>
	{
		//Выполняется возврат
		char  execRet[] = {0xC2,0xFB,0xEF,0xEE,0xEB,0xED,0xFF,0xE5,0xF2,0xF1,0xFF,0x20,0xE2,0xEE,0xE7,0xE2,0xF0,0xE0,0xF2};
 8002ba0:	4b34      	ldr	r3, [pc, #208]	; (8002c74 <ShowMainDisplay+0x1f0>)
 8002ba2:	f107 0414 	add.w	r4, r7, #20
 8002ba6:	461d      	mov	r5, r3
 8002ba8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bac:	682b      	ldr	r3, [r5, #0]
 8002bae:	461a      	mov	r2, r3
 8002bb0:	8022      	strh	r2, [r4, #0]
 8002bb2:	3402      	adds	r4, #2
 8002bb4:	0c1b      	lsrs	r3, r3, #16
 8002bb6:	7023      	strb	r3, [r4, #0]
		memcpy(lcdAnswer[1],execRet,sizeof(execRet));
 8002bb8:	4b26      	ldr	r3, [pc, #152]	; (8002c54 <ShowMainDisplay+0x1d0>)
 8002bba:	f103 0514 	add.w	r5, r3, #20
 8002bbe:	f107 0414 	add.w	r4, r7, #20
 8002bc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bc4:	6028      	str	r0, [r5, #0]
 8002bc6:	6069      	str	r1, [r5, #4]
 8002bc8:	60aa      	str	r2, [r5, #8]
 8002bca:	60eb      	str	r3, [r5, #12]
 8002bcc:	8823      	ldrh	r3, [r4, #0]
 8002bce:	78a2      	ldrb	r2, [r4, #2]
 8002bd0:	822b      	strh	r3, [r5, #16]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	74ab      	strb	r3, [r5, #18]
 8002bd6:	e01c      	b.n	8002c12 <ShowMainDisplay+0x18e>
	}
	else if(*((uint16_t*)&meas_data.errors))
 8002bd8:	4b27      	ldr	r3, [pc, #156]	; (8002c78 <ShowMainDisplay+0x1f4>)
 8002bda:	881b      	ldrh	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d018      	beq.n	8002c12 <ShowMainDisplay+0x18e>
	{
		// Ошибки, нажмите F4
		char err[] = {0xCE, 0xF8, 0xE8, 0xE1, 0xEA, 0xE8, 0x2C, 0x20, 0xED, 0xE0, 0xE6, 0xEC, 0xE8, 0xF2, 0xE5, 0x20, 0x46, 0x34,  0x00};
 8002be0:	4b26      	ldr	r3, [pc, #152]	; (8002c7c <ShowMainDisplay+0x1f8>)
 8002be2:	463c      	mov	r4, r7
 8002be4:	461d      	mov	r5, r3
 8002be6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002be8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002bea:	682b      	ldr	r3, [r5, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	8022      	strh	r2, [r4, #0]
 8002bf0:	3402      	adds	r4, #2
 8002bf2:	0c1b      	lsrs	r3, r3, #16
 8002bf4:	7023      	strb	r3, [r4, #0]
		memcpy(lcdAnswer[1],err,sizeof(err));
 8002bf6:	4b17      	ldr	r3, [pc, #92]	; (8002c54 <ShowMainDisplay+0x1d0>)
 8002bf8:	f103 0514 	add.w	r5, r3, #20
 8002bfc:	463c      	mov	r4, r7
 8002bfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c00:	6028      	str	r0, [r5, #0]
 8002c02:	6069      	str	r1, [r5, #4]
 8002c04:	60aa      	str	r2, [r5, #8]
 8002c06:	60eb      	str	r3, [r5, #12]
 8002c08:	8823      	ldrh	r3, [r4, #0]
 8002c0a:	78a2      	ldrb	r2, [r4, #2]
 8002c0c:	822b      	strh	r3, [r5, #16]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	74ab      	strb	r3, [r5, #18]
	}
	// Мониторинг->Enter
	char toMonitor[] = {0xCC, 0xEE, 0xED, 0xE8, 0xF2, 0xEE, 0xF0, 0xE8, 0xED, 0xE3, 0x2D, 0x3E, 0x45, 0x6E, 0x74, 0x65, 0x72};
 8002c12:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <ShowMainDisplay+0x1fc>)
 8002c14:	f107 0484 	add.w	r4, r7, #132	; 0x84
 8002c18:	461d      	mov	r5, r3
 8002c1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002c1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002c1e:	682b      	ldr	r3, [r5, #0]
 8002c20:	7023      	strb	r3, [r4, #0]
	memcpy(lcdAnswer[3]+3,toMonitor,sizeof(toMonitor));
 8002c22:	4b18      	ldr	r3, [pc, #96]	; (8002c84 <ShowMainDisplay+0x200>)
 8002c24:	461d      	mov	r5, r3
 8002c26:	f107 0484 	add.w	r4, r7, #132	; 0x84
 8002c2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c2c:	6028      	str	r0, [r5, #0]
 8002c2e:	6069      	str	r1, [r5, #4]
 8002c30:	60aa      	str	r2, [r5, #8]
 8002c32:	60eb      	str	r3, [r5, #12]
 8002c34:	7823      	ldrb	r3, [r4, #0]
 8002c36:	742b      	strb	r3, [r5, #16]
	return 1;
 8002c38:	2301      	movs	r3, #1

}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3798      	adds	r7, #152	; 0x98
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bdb0      	pop	{r4, r5, r7, pc}
 8002c42:	bf00      	nop
 8002c44:	20007520 	.word	0x20007520
 8002c48:	0802359c 	.word	0x0802359c
 8002c4c:	20007474 	.word	0x20007474
 8002c50:	08023588 	.word	0x08023588
 8002c54:	20007084 	.word	0x20007084
 8002c58:	080235a8 	.word	0x080235a8
 8002c5c:	080235b4 	.word	0x080235b4
 8002c60:	08023594 	.word	0x08023594
 8002c64:	200070ac 	.word	0x200070ac
 8002c68:	080235c8 	.word	0x080235c8
 8002c6c:	080235d4 	.word	0x080235d4
 8002c70:	080235e4 	.word	0x080235e4
 8002c74:	080235f8 	.word	0x080235f8
 8002c78:	2000753c 	.word	0x2000753c
 8002c7c:	0802360c 	.word	0x0802360c
 8002c80:	08023620 	.word	0x08023620
 8002c84:	200070c3 	.word	0x200070c3

08002c88 <OnDownPressKey>:


static uint8_t OnDownPressKey()
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
	if(currentParameters == NULL)return 0; // Если находимся на главном экране, то не реагируем
 8002c8e:	4b2d      	ldr	r3, [pc, #180]	; (8002d44 <OnDownPressKey+0xbc>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <OnDownPressKey+0x12>
 8002c96:	2300      	movs	r3, #0
 8002c98:	e050      	b.n	8002d3c <OnDownPressKey+0xb4>
	if(editMode)
 8002c9a:	4b2b      	ldr	r3, [pc, #172]	; (8002d48 <OnDownPressKey+0xc0>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d01f      	beq.n	8002ce2 <OnDownPressKey+0x5a>
	{
		Row *par = currentParameters+paramIndex;
 8002ca2:	4b28      	ldr	r3, [pc, #160]	; (8002d44 <OnDownPressKey+0xbc>)
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	4b29      	ldr	r3, [pc, #164]	; (8002d4c <OnDownPressKey+0xc4>)
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	4619      	mov	r1, r3
 8002cac:	460b      	mov	r3, r1
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	440b      	add	r3, r1
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	4413      	add	r3, r2
 8002cb6:	607b      	str	r3, [r7, #4]
		if(par->isEnum)return 0;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	7a1b      	ldrb	r3, [r3, #8]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <OnDownPressKey+0x3c>
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	e03b      	b.n	8002d3c <OnDownPressKey+0xb4>
		DecIncSymbol(editedValue+currentCursorPosition, 0);
 8002cc4:	4b22      	ldr	r3, [pc, #136]	; (8002d50 <OnDownPressKey+0xc8>)
 8002cc6:	f993 3000 	ldrsb.w	r3, [r3]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	4b21      	ldr	r3, [pc, #132]	; (8002d54 <OnDownPressKey+0xcc>)
 8002cce:	4413      	add	r3, r2
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f001 f95c 	bl	8003f90 <DecIncSymbol>
		ShowParameter(par);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 fa95 	bl	8003208 <ShowParameter>
		return 1;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e02c      	b.n	8002d3c <OnDownPressKey+0xb4>
	}
	if(paramIndex>=currentParamLength-1)return 0;// Если курсор находится внизу, не реагируем
 8002ce2:	4b1a      	ldr	r3, [pc, #104]	; (8002d4c <OnDownPressKey+0xc4>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	4b1b      	ldr	r3, [pc, #108]	; (8002d58 <OnDownPressKey+0xd0>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	3b01      	subs	r3, #1
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	db01      	blt.n	8002cf6 <OnDownPressKey+0x6e>
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	e022      	b.n	8002d3c <OnDownPressKey+0xb4>
	if(currentParameters == Errors)
 8002cf6:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <OnDownPressKey+0xbc>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a18      	ldr	r2, [pc, #96]	; (8002d5c <OnDownPressKey+0xd4>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d109      	bne.n	8002d14 <OnDownPressKey+0x8c>
	{
		paramIndex++;
 8002d00:	4b12      	ldr	r3, [pc, #72]	; (8002d4c <OnDownPressKey+0xc4>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	3301      	adds	r3, #1
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	4b10      	ldr	r3, [pc, #64]	; (8002d4c <OnDownPressKey+0xc4>)
 8002d0a:	701a      	strb	r2, [r3, #0]
		return ShowErrors();
 8002d0c:	f000 fb86 	bl	800341c <ShowErrors>
 8002d10:	4603      	mov	r3, r0
 8002d12:	e013      	b.n	8002d3c <OnDownPressKey+0xb4>
	}
	paramIndex++;
 8002d14:	4b0d      	ldr	r3, [pc, #52]	; (8002d4c <OnDownPressKey+0xc4>)
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	b2da      	uxtb	r2, r3
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <OnDownPressKey+0xc4>)
 8002d1e:	701a      	strb	r2, [r3, #0]
	ShowParameter(currentParameters+paramIndex);
 8002d20:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <OnDownPressKey+0xbc>)
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	4b09      	ldr	r3, [pc, #36]	; (8002d4c <OnDownPressKey+0xc4>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	4619      	mov	r1, r3
 8002d2a:	460b      	mov	r3, r1
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	440b      	add	r3, r1
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	4413      	add	r3, r2
 8002d34:	4618      	mov	r0, r3
 8002d36:	f000 fa67 	bl	8003208 <ShowParameter>
	return 1;
 8002d3a:	2301      	movs	r3, #1
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	20000910 	.word	0x20000910
 8002d48:	20000915 	.word	0x20000915
 8002d4c:	20000914 	.word	0x20000914
 8002d50:	200000c3 	.word	0x200000c3
 8002d54:	200070d8 	.word	0x200070d8
 8002d58:	20007150 	.word	0x20007150
 8002d5c:	2000012c 	.word	0x2000012c

08002d60 <OnLeftPressKey>:

static uint8_t OnLeftPressKey()
{
 8002d60:	b5b0      	push	{r4, r5, r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
	int index = 0;
 8002d66:	2300      	movs	r3, #0
 8002d68:	607b      	str	r3, [r7, #4]
	if(!editMode)return 0;
 8002d6a:	4b3e      	ldr	r3, [pc, #248]	; (8002e64 <OnLeftPressKey+0x104>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <OnLeftPressKey+0x16>
 8002d72:	2300      	movs	r3, #0
 8002d74:	e071      	b.n	8002e5a <OnLeftPressKey+0xfa>
	if(currentParameters==NULL)return 0;
 8002d76:	4b3c      	ldr	r3, [pc, #240]	; (8002e68 <OnLeftPressKey+0x108>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <OnLeftPressKey+0x22>
 8002d7e:	2300      	movs	r3, #0
 8002d80:	e06b      	b.n	8002e5a <OnLeftPressKey+0xfa>
	Row *par = currentParameters+paramIndex;
 8002d82:	4b39      	ldr	r3, [pc, #228]	; (8002e68 <OnLeftPressKey+0x108>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	4b39      	ldr	r3, [pc, #228]	; (8002e6c <OnLeftPressKey+0x10c>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	460b      	mov	r3, r1
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	440b      	add	r3, r1
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	4413      	add	r3, r2
 8002d96:	603b      	str	r3, [r7, #0]
	if(par->isEnum)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	7a1b      	ldrb	r3, [r3, #8]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d04f      	beq.n	8002e40 <OnLeftPressKey+0xe0>
	{
		if(par->enums==NULL)return 0;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <OnLeftPressKey+0x4c>
 8002da8:	2300      	movs	r3, #0
 8002daa:	e056      	b.n	8002e5a <OnLeftPressKey+0xfa>
		// поиск индекса вхождения
		index = FindIndexFromValue(currentEnumKey, par->enums, par->enums_len);
 8002dac:	4b30      	ldr	r3, [pc, #192]	; (8002e70 <OnLeftPressKey+0x110>)
 8002dae:	edd3 7a00 	vldr	s15, [r3]
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	691a      	ldr	r2, [r3, #16]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	7d1b      	ldrb	r3, [r3, #20]
 8002dba:	4619      	mov	r1, r3
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	eeb0 0a67 	vmov.f32	s0, s15
 8002dc2:	f000 fd61 	bl	8003888 <FindIndexFromValue>
 8002dc6:	6078      	str	r0, [r7, #4]
		if(index==-1)return 0;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dce:	d101      	bne.n	8002dd4 <OnLeftPressKey+0x74>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	e042      	b.n	8002e5a <OnLeftPressKey+0xfa>
		index = index==0 ? par->enums_len-1 : index-1;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d103      	bne.n	8002de2 <OnLeftPressKey+0x82>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	7d1b      	ldrb	r3, [r3, #20]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	e001      	b.n	8002de6 <OnLeftPressKey+0x86>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	3b01      	subs	r3, #1
 8002de6:	607b      	str	r3, [r7, #4]
		currentEnumKey = (par->enums+index)->value;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	691a      	ldr	r2, [r3, #16]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	4413      	add	r3, r2
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a1e      	ldr	r2, [pc, #120]	; (8002e70 <OnLeftPressKey+0x110>)
 8002df6:	6013      	str	r3, [r2, #0]
		memset(editedValue,0,20);
 8002df8:	2214      	movs	r2, #20
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	481d      	ldr	r0, [pc, #116]	; (8002e74 <OnLeftPressKey+0x114>)
 8002dfe:	f01b faa9 	bl	801e354 <memset>
		strncpy(editedValue+par->param_pos,(par->enums+index)->name, strlen((par->enums+index)->name));
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	79db      	ldrb	r3, [r3, #7]
 8002e06:	461a      	mov	r2, r3
 8002e08:	4b1a      	ldr	r3, [pc, #104]	; (8002e74 <OnLeftPressKey+0x114>)
 8002e0a:	18d4      	adds	r4, r2, r3
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	4413      	add	r3, r2
 8002e16:	685d      	ldr	r5, [r3, #4]
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	00db      	lsls	r3, r3, #3
 8002e20:	4413      	add	r3, r2
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fd f9d3 	bl	80001d0 <strlen>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4629      	mov	r1, r5
 8002e30:	4620      	mov	r0, r4
 8002e32:	f01c fb43 	bl	801f4bc <strncpy>
		ShowParameter(par);
 8002e36:	6838      	ldr	r0, [r7, #0]
 8002e38:	f000 f9e6 	bl	8003208 <ShowParameter>
		return 1;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e00c      	b.n	8002e5a <OnLeftPressKey+0xfa>


	}
	else
	{
		currentCursorPosition = ShiftCursor(0, par, 1);
 8002e40:	2201      	movs	r2, #1
 8002e42:	6839      	ldr	r1, [r7, #0]
 8002e44:	2000      	movs	r0, #0
 8002e46:	f000 fef5 	bl	8003c34 <ShiftCursor>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	b25a      	sxtb	r2, r3
 8002e4e:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <OnLeftPressKey+0x118>)
 8002e50:	701a      	strb	r2, [r3, #0]
		ShowParameter(par);
 8002e52:	6838      	ldr	r0, [r7, #0]
 8002e54:	f000 f9d8 	bl	8003208 <ShowParameter>
		return 1;
 8002e58:	2301      	movs	r3, #1

	}
	return 0;
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bdb0      	pop	{r4, r5, r7, pc}
 8002e62:	bf00      	nop
 8002e64:	20000915 	.word	0x20000915
 8002e68:	20000910 	.word	0x20000910
 8002e6c:	20000914 	.word	0x20000914
 8002e70:	20000918 	.word	0x20000918
 8002e74:	200070d8 	.word	0x200070d8
 8002e78:	200000c3 	.word	0x200000c3

08002e7c <OnRightPressKey>:

static uint8_t OnRightPressKey()
{
 8002e7c:	b5b0      	push	{r4, r5, r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
	int index = 0;
 8002e82:	2300      	movs	r3, #0
 8002e84:	607b      	str	r3, [r7, #4]
	if(!editMode)return 0;
 8002e86:	4b3e      	ldr	r3, [pc, #248]	; (8002f80 <OnRightPressKey+0x104>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <OnRightPressKey+0x16>
 8002e8e:	2300      	movs	r3, #0
 8002e90:	e072      	b.n	8002f78 <OnRightPressKey+0xfc>
	if(currentParameters==NULL)return 0;
 8002e92:	4b3c      	ldr	r3, [pc, #240]	; (8002f84 <OnRightPressKey+0x108>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d101      	bne.n	8002e9e <OnRightPressKey+0x22>
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	e06c      	b.n	8002f78 <OnRightPressKey+0xfc>
	Row *par = currentParameters+paramIndex;
 8002e9e:	4b39      	ldr	r3, [pc, #228]	; (8002f84 <OnRightPressKey+0x108>)
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	4b39      	ldr	r3, [pc, #228]	; (8002f88 <OnRightPressKey+0x10c>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	4619      	mov	r1, r3
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	440b      	add	r3, r1
 8002eae:	00db      	lsls	r3, r3, #3
 8002eb0:	4413      	add	r3, r2
 8002eb2:	603b      	str	r3, [r7, #0]
	if(par->isEnum)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	7a1b      	ldrb	r3, [r3, #8]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d050      	beq.n	8002f5e <OnRightPressKey+0xe2>
	{
		if(par->enums==NULL)return 0;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d101      	bne.n	8002ec8 <OnRightPressKey+0x4c>
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	e057      	b.n	8002f78 <OnRightPressKey+0xfc>
		// поиск индекса вхождения
		index = FindIndexFromValue(currentEnumKey, par->enums, par->enums_len);
 8002ec8:	4b30      	ldr	r3, [pc, #192]	; (8002f8c <OnRightPressKey+0x110>)
 8002eca:	edd3 7a00 	vldr	s15, [r3]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	691a      	ldr	r2, [r3, #16]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	7d1b      	ldrb	r3, [r3, #20]
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4610      	mov	r0, r2
 8002eda:	eeb0 0a67 	vmov.f32	s0, s15
 8002ede:	f000 fcd3 	bl	8003888 <FindIndexFromValue>
 8002ee2:	6078      	str	r0, [r7, #4]
		if(index==-1)return 0;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eea:	d101      	bne.n	8002ef0 <OnRightPressKey+0x74>
 8002eec:	2300      	movs	r3, #0
 8002eee:	e043      	b.n	8002f78 <OnRightPressKey+0xfc>
		index = index==par->enums_len-1 ? 0 : index+1;
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	7d1b      	ldrb	r3, [r3, #20]
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	687a      	ldr	r2, [r7, #4]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d002      	beq.n	8002f02 <OnRightPressKey+0x86>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	3301      	adds	r3, #1
 8002f00:	e000      	b.n	8002f04 <OnRightPressKey+0x88>
 8002f02:	2300      	movs	r3, #0
 8002f04:	607b      	str	r3, [r7, #4]
		currentEnumKey = (par->enums+index)->value;
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	691a      	ldr	r2, [r3, #16]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	00db      	lsls	r3, r3, #3
 8002f0e:	4413      	add	r3, r2
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	4a1e      	ldr	r2, [pc, #120]	; (8002f8c <OnRightPressKey+0x110>)
 8002f14:	6013      	str	r3, [r2, #0]
		memset(editedValue,0,20);
 8002f16:	2214      	movs	r2, #20
 8002f18:	2100      	movs	r1, #0
 8002f1a:	481d      	ldr	r0, [pc, #116]	; (8002f90 <OnRightPressKey+0x114>)
 8002f1c:	f01b fa1a 	bl	801e354 <memset>
		strncpy(editedValue+par->param_pos,(par->enums+index)->name, strlen((par->enums+index)->name));
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	79db      	ldrb	r3, [r3, #7]
 8002f24:	461a      	mov	r2, r3
 8002f26:	4b1a      	ldr	r3, [pc, #104]	; (8002f90 <OnRightPressKey+0x114>)
 8002f28:	18d4      	adds	r4, r2, r3
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	691a      	ldr	r2, [r3, #16]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	00db      	lsls	r3, r3, #3
 8002f32:	4413      	add	r3, r2
 8002f34:	685d      	ldr	r5, [r3, #4]
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	691a      	ldr	r2, [r3, #16]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	00db      	lsls	r3, r3, #3
 8002f3e:	4413      	add	r3, r2
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fd f944 	bl	80001d0 <strlen>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	4629      	mov	r1, r5
 8002f4e:	4620      	mov	r0, r4
 8002f50:	f01c fab4 	bl	801f4bc <strncpy>
		ShowParameter(par);
 8002f54:	6838      	ldr	r0, [r7, #0]
 8002f56:	f000 f957 	bl	8003208 <ShowParameter>
		return 1;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e00c      	b.n	8002f78 <OnRightPressKey+0xfc>

	}
	else
	{
		currentCursorPosition = ShiftCursor(1, par, 1);
 8002f5e:	2201      	movs	r2, #1
 8002f60:	6839      	ldr	r1, [r7, #0]
 8002f62:	2001      	movs	r0, #1
 8002f64:	f000 fe66 	bl	8003c34 <ShiftCursor>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	b25a      	sxtb	r2, r3
 8002f6c:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <OnRightPressKey+0x118>)
 8002f6e:	701a      	strb	r2, [r3, #0]
		ShowParameter(par);
 8002f70:	6838      	ldr	r0, [r7, #0]
 8002f72:	f000 f949 	bl	8003208 <ShowParameter>
		return 1;
 8002f76:	2301      	movs	r3, #1
	}
	return 0;
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bdb0      	pop	{r4, r5, r7, pc}
 8002f80:	20000915 	.word	0x20000915
 8002f84:	20000910 	.word	0x20000910
 8002f88:	20000914 	.word	0x20000914
 8002f8c:	20000918 	.word	0x20000918
 8002f90:	200070d8 	.word	0x200070d8
 8002f94:	200000c3 	.word	0x200000c3

08002f98 <OnUpPressKey>:

static uint8_t OnUpPressKey()
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
	if(currentParameters == NULL)return 0; // Если находимся на главном экране, то не реагируем
 8002f9e:	4b2f      	ldr	r3, [pc, #188]	; (800305c <OnUpPressKey+0xc4>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <OnUpPressKey+0x12>
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	e053      	b.n	8003052 <OnUpPressKey+0xba>
	if(editMode)
 8002faa:	4b2d      	ldr	r3, [pc, #180]	; (8003060 <OnUpPressKey+0xc8>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d01f      	beq.n	8002ff2 <OnUpPressKey+0x5a>
	{
		Row *par = currentParameters+paramIndex;
 8002fb2:	4b2a      	ldr	r3, [pc, #168]	; (800305c <OnUpPressKey+0xc4>)
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	4b2b      	ldr	r3, [pc, #172]	; (8003064 <OnUpPressKey+0xcc>)
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	4619      	mov	r1, r3
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	005b      	lsls	r3, r3, #1
 8002fc0:	440b      	add	r3, r1
 8002fc2:	00db      	lsls	r3, r3, #3
 8002fc4:	4413      	add	r3, r2
 8002fc6:	607b      	str	r3, [r7, #4]
		if(par->isEnum)return 0;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	7a1b      	ldrb	r3, [r3, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d001      	beq.n	8002fd4 <OnUpPressKey+0x3c>
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	e03e      	b.n	8003052 <OnUpPressKey+0xba>
		DecIncSymbol(editedValue+currentCursorPosition, 1);
 8002fd4:	4b24      	ldr	r3, [pc, #144]	; (8003068 <OnUpPressKey+0xd0>)
 8002fd6:	f993 3000 	ldrsb.w	r3, [r3]
 8002fda:	461a      	mov	r2, r3
 8002fdc:	4b23      	ldr	r3, [pc, #140]	; (800306c <OnUpPressKey+0xd4>)
 8002fde:	4413      	add	r3, r2
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 ffd4 	bl	8003f90 <DecIncSymbol>
		ShowParameter(par);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f90d 	bl	8003208 <ShowParameter>
		return 1;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e02f      	b.n	8003052 <OnUpPressKey+0xba>
	}
	if(paramIndex<=0)return 0;// Если курсор находится ddth[e, не реагируем
 8002ff2:	4b1c      	ldr	r3, [pc, #112]	; (8003064 <OnUpPressKey+0xcc>)
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d101      	bne.n	8002ffe <OnUpPressKey+0x66>
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	e029      	b.n	8003052 <OnUpPressKey+0xba>
	if(currentParameters == Errors)
 8002ffe:	4b17      	ldr	r3, [pc, #92]	; (800305c <OnUpPressKey+0xc4>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a1b      	ldr	r2, [pc, #108]	; (8003070 <OnUpPressKey+0xd8>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d110      	bne.n	800302a <OnUpPressKey+0x92>
	{
		paramIndex = paramIndex == 0 ? paramIndex : paramIndex -1;
 8003008:	4b16      	ldr	r3, [pc, #88]	; (8003064 <OnUpPressKey+0xcc>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d004      	beq.n	800301a <OnUpPressKey+0x82>
 8003010:	4b14      	ldr	r3, [pc, #80]	; (8003064 <OnUpPressKey+0xcc>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	3b01      	subs	r3, #1
 8003016:	b2db      	uxtb	r3, r3
 8003018:	e001      	b.n	800301e <OnUpPressKey+0x86>
 800301a:	4b12      	ldr	r3, [pc, #72]	; (8003064 <OnUpPressKey+0xcc>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	4a11      	ldr	r2, [pc, #68]	; (8003064 <OnUpPressKey+0xcc>)
 8003020:	7013      	strb	r3, [r2, #0]
		return ShowErrors();
 8003022:	f000 f9fb 	bl	800341c <ShowErrors>
 8003026:	4603      	mov	r3, r0
 8003028:	e013      	b.n	8003052 <OnUpPressKey+0xba>

	}
	paramIndex--;
 800302a:	4b0e      	ldr	r3, [pc, #56]	; (8003064 <OnUpPressKey+0xcc>)
 800302c:	781b      	ldrb	r3, [r3, #0]
 800302e:	3b01      	subs	r3, #1
 8003030:	b2da      	uxtb	r2, r3
 8003032:	4b0c      	ldr	r3, [pc, #48]	; (8003064 <OnUpPressKey+0xcc>)
 8003034:	701a      	strb	r2, [r3, #0]
	ShowParameter(currentParameters+paramIndex);
 8003036:	4b09      	ldr	r3, [pc, #36]	; (800305c <OnUpPressKey+0xc4>)
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	4b0a      	ldr	r3, [pc, #40]	; (8003064 <OnUpPressKey+0xcc>)
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	4619      	mov	r1, r3
 8003040:	460b      	mov	r3, r1
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	440b      	add	r3, r1
 8003046:	00db      	lsls	r3, r3, #3
 8003048:	4413      	add	r3, r2
 800304a:	4618      	mov	r0, r3
 800304c:	f000 f8dc 	bl	8003208 <ShowParameter>
	return 1;
 8003050:	2301      	movs	r3, #1
}
 8003052:	4618      	mov	r0, r3
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	20000910 	.word	0x20000910
 8003060:	20000915 	.word	0x20000915
 8003064:	20000914 	.word	0x20000914
 8003068:	200000c3 	.word	0x200000c3
 800306c:	200070d8 	.word	0x200070d8
 8003070:	2000012c 	.word	0x2000012c

08003074 <OnF1PressKey>:


static uint8_t OnF1PressKey()
{
 8003074:	b580      	push	{r7, lr}
 8003076:	af00      	add	r7, sp, #0
	currentCursorPosition = -1;
 8003078:	4b05      	ldr	r3, [pc, #20]	; (8003090 <OnF1PressKey+0x1c>)
 800307a:	22ff      	movs	r2, #255	; 0xff
 800307c:	701a      	strb	r2, [r3, #0]
	currentParameters = NULL;
 800307e:	4b05      	ldr	r3, [pc, #20]	; (8003094 <OnF1PressKey+0x20>)
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]
	return ShowMainDisplay();
 8003084:	f7ff fcfe 	bl	8002a84 <ShowMainDisplay>
 8003088:	4603      	mov	r3, r0
}
 800308a:	4618      	mov	r0, r3
 800308c:	bd80      	pop	{r7, pc}
 800308e:	bf00      	nop
 8003090:	200000c3 	.word	0x200000c3
 8003094:	20000910 	.word	0x20000910

08003098 <OnF2PressKey>:

static uint8_t OnF2PressKey()
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
	currentCursorPosition = -1;
 800309c:	4b0e      	ldr	r3, [pc, #56]	; (80030d8 <OnF2PressKey+0x40>)
 800309e:	22ff      	movs	r2, #255	; 0xff
 80030a0:	701a      	strb	r2, [r3, #0]
	currentParameters = probotbor_parameters;
 80030a2:	4b0e      	ldr	r3, [pc, #56]	; (80030dc <OnF2PressKey+0x44>)
 80030a4:	4a0e      	ldr	r2, [pc, #56]	; (80030e0 <OnF2PressKey+0x48>)
 80030a6:	601a      	str	r2, [r3, #0]
	paramIndex = 0;
 80030a8:	4b0e      	ldr	r3, [pc, #56]	; (80030e4 <OnF2PressKey+0x4c>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	701a      	strb	r2, [r3, #0]
	currentParamLength = sizeof(probotbor_parameters)/sizeof(Row);
 80030ae:	4b0e      	ldr	r3, [pc, #56]	; (80030e8 <OnF2PressKey+0x50>)
 80030b0:	2205      	movs	r2, #5
 80030b2:	701a      	strb	r2, [r3, #0]
	editMode = 0;
 80030b4:	4b0d      	ldr	r3, [pc, #52]	; (80030ec <OnF2PressKey+0x54>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	701a      	strb	r2, [r3, #0]
	groupParamName = processParametersName;
 80030ba:	4b0d      	ldr	r3, [pc, #52]	; (80030f0 <OnF2PressKey+0x58>)
 80030bc:	4a0d      	ldr	r2, [pc, #52]	; (80030f4 <OnF2PressKey+0x5c>)
 80030be:	601a      	str	r2, [r3, #0]
	groupParamNameLength = sizeof(processParametersName);
 80030c0:	4b0d      	ldr	r3, [pc, #52]	; (80030f8 <OnF2PressKey+0x60>)
 80030c2:	2211      	movs	r2, #17
 80030c4:	701a      	strb	r2, [r3, #0]
	ShowParameter(currentParameters);
 80030c6:	4b05      	ldr	r3, [pc, #20]	; (80030dc <OnF2PressKey+0x44>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 f89c 	bl	8003208 <ShowParameter>
	return 1;
 80030d0:	2301      	movs	r3, #1
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	200000c3 	.word	0x200000c3
 80030dc:	20000910 	.word	0x20000910
 80030e0:	2000024c 	.word	0x2000024c
 80030e4:	20000914 	.word	0x20000914
 80030e8:	20007150 	.word	0x20007150
 80030ec:	20000915 	.word	0x20000915
 80030f0:	2000714c 	.word	0x2000714c
 80030f4:	200000a4 	.word	0x200000a4
 80030f8:	200070d4 	.word	0x200070d4

080030fc <OnF3PressKey>:

static uint8_t OnF3PressKey()
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
	currentCursorPosition = -1;
 8003100:	4b10      	ldr	r3, [pc, #64]	; (8003144 <OnF3PressKey+0x48>)
 8003102:	22ff      	movs	r2, #255	; 0xff
 8003104:	701a      	strb	r2, [r3, #0]
	currentParameters = commParameters;
 8003106:	4b10      	ldr	r3, [pc, #64]	; (8003148 <OnF3PressKey+0x4c>)
 8003108:	4a10      	ldr	r2, [pc, #64]	; (800314c <OnF3PressKey+0x50>)
 800310a:	601a      	str	r2, [r3, #0]
	paramIndex = 0;
 800310c:	4b10      	ldr	r3, [pc, #64]	; (8003150 <OnF3PressKey+0x54>)
 800310e:	2200      	movs	r2, #0
 8003110:	701a      	strb	r2, [r3, #0]
	currentParamLength = sizeof(commParameters)/sizeof(Row);
 8003112:	4b10      	ldr	r3, [pc, #64]	; (8003154 <OnF3PressKey+0x58>)
 8003114:	2206      	movs	r2, #6
 8003116:	701a      	strb	r2, [r3, #0]
	editMode = 0;
 8003118:	4b0f      	ldr	r3, [pc, #60]	; (8003158 <OnF3PressKey+0x5c>)
 800311a:	2200      	movs	r2, #0
 800311c:	701a      	strb	r2, [r3, #0]
	groupParamName = commParametersName;
 800311e:	4b0f      	ldr	r3, [pc, #60]	; (800315c <OnF3PressKey+0x60>)
 8003120:	4a0f      	ldr	r2, [pc, #60]	; (8003160 <OnF3PressKey+0x64>)
 8003122:	601a      	str	r2, [r3, #0]
	groupParamNameLength = strlen(commParametersName);
 8003124:	480e      	ldr	r0, [pc, #56]	; (8003160 <OnF3PressKey+0x64>)
 8003126:	f7fd f853 	bl	80001d0 <strlen>
 800312a:	4603      	mov	r3, r0
 800312c:	b2da      	uxtb	r2, r3
 800312e:	4b0d      	ldr	r3, [pc, #52]	; (8003164 <OnF3PressKey+0x68>)
 8003130:	701a      	strb	r2, [r3, #0]
	ShowParameter(currentParameters);
 8003132:	4b05      	ldr	r3, [pc, #20]	; (8003148 <OnF3PressKey+0x4c>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f000 f866 	bl	8003208 <ShowParameter>
	return 1;
 800313c:	2301      	movs	r3, #1
}
 800313e:	4618      	mov	r0, r3
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	200000c3 	.word	0x200000c3
 8003148:	20000910 	.word	0x20000910
 800314c:	200002c4 	.word	0x200002c4
 8003150:	20000914 	.word	0x20000914
 8003154:	20007150 	.word	0x20007150
 8003158:	20000915 	.word	0x20000915
 800315c:	2000714c 	.word	0x2000714c
 8003160:	20000094 	.word	0x20000094
 8003164:	200070d4 	.word	0x200070d4

08003168 <OnF4PressKey>:

static uint8_t OnF4PressKey()
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
	currentCursorPosition = -1;
 800316c:	4b08      	ldr	r3, [pc, #32]	; (8003190 <OnF4PressKey+0x28>)
 800316e:	22ff      	movs	r2, #255	; 0xff
 8003170:	701a      	strb	r2, [r3, #0]
	currentParameters = Errors;
 8003172:	4b08      	ldr	r3, [pc, #32]	; (8003194 <OnF4PressKey+0x2c>)
 8003174:	4a08      	ldr	r2, [pc, #32]	; (8003198 <OnF4PressKey+0x30>)
 8003176:	601a      	str	r2, [r3, #0]
	editMode  = 0;
 8003178:	4b08      	ldr	r3, [pc, #32]	; (800319c <OnF4PressKey+0x34>)
 800317a:	2200      	movs	r2, #0
 800317c:	701a      	strb	r2, [r3, #0]
	paramIndex = 0;
 800317e:	4b08      	ldr	r3, [pc, #32]	; (80031a0 <OnF4PressKey+0x38>)
 8003180:	2200      	movs	r2, #0
 8003182:	701a      	strb	r2, [r3, #0]
	return ShowErrors();
 8003184:	f000 f94a 	bl	800341c <ShowErrors>
 8003188:	4603      	mov	r3, r0
}
 800318a:	4618      	mov	r0, r3
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	200000c3 	.word	0x200000c3
 8003194:	20000910 	.word	0x20000910
 8003198:	2000012c 	.word	0x2000012c
 800319c:	20000915 	.word	0x20000915
 80031a0:	20000914 	.word	0x20000914

080031a4 <OnEscPressKey>:

static uint8_t OnEscPressKey()
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	af00      	add	r7, sp, #0
	currentCursorPosition = -1;
 80031a8:	4b13      	ldr	r3, [pc, #76]	; (80031f8 <OnEscPressKey+0x54>)
 80031aa:	22ff      	movs	r2, #255	; 0xff
 80031ac:	701a      	strb	r2, [r3, #0]
	if(currentParameters==NULL)return 0;
 80031ae:	4b13      	ldr	r3, [pc, #76]	; (80031fc <OnEscPressKey+0x58>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <OnEscPressKey+0x16>
 80031b6:	2300      	movs	r3, #0
 80031b8:	e01b      	b.n	80031f2 <OnEscPressKey+0x4e>
	if(!editMode)
 80031ba:	4b11      	ldr	r3, [pc, #68]	; (8003200 <OnEscPressKey+0x5c>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d106      	bne.n	80031d0 <OnEscPressKey+0x2c>
	{
		currentParameters = NULL;
 80031c2:	4b0e      	ldr	r3, [pc, #56]	; (80031fc <OnEscPressKey+0x58>)
 80031c4:	2200      	movs	r2, #0
 80031c6:	601a      	str	r2, [r3, #0]
		return ShowMainDisplay();
 80031c8:	f7ff fc5c 	bl	8002a84 <ShowMainDisplay>
 80031cc:	4603      	mov	r3, r0
 80031ce:	e010      	b.n	80031f2 <OnEscPressKey+0x4e>
	}
	else
	{
		editMode = 0;
 80031d0:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <OnEscPressKey+0x5c>)
 80031d2:	2200      	movs	r2, #0
 80031d4:	701a      	strb	r2, [r3, #0]
		ShowParameter(currentParameters+paramIndex);
 80031d6:	4b09      	ldr	r3, [pc, #36]	; (80031fc <OnEscPressKey+0x58>)
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	4b0a      	ldr	r3, [pc, #40]	; (8003204 <OnEscPressKey+0x60>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	4619      	mov	r1, r3
 80031e0:	460b      	mov	r3, r1
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	440b      	add	r3, r1
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4413      	add	r3, r2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f000 f80c 	bl	8003208 <ShowParameter>
		return 1;
 80031f0:	2301      	movs	r3, #1
	}
	return 0;
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	200000c3 	.word	0x200000c3
 80031fc:	20000910 	.word	0x20000910
 8003200:	20000915 	.word	0x20000915
 8003204:	20000914 	.word	0x20000914

08003208 <ShowParameter>:

static void ShowParameter(Row *parameter)
{
 8003208:	b5b0      	push	{r4, r5, r7, lr}
 800320a:	b092      	sub	sp, #72	; 0x48
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
	Clear();
 8003210:	f7ff fc0e 	bl	8002a30 <Clear>
	memcpy(lcdAnswer[0],groupParamName,groupParamNameLength); // Имя группы параметра
 8003214:	4b68      	ldr	r3, [pc, #416]	; (80033b8 <ShowParameter+0x1b0>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a68      	ldr	r2, [pc, #416]	; (80033bc <ShowParameter+0x1b4>)
 800321a:	7812      	ldrb	r2, [r2, #0]
 800321c:	4619      	mov	r1, r3
 800321e:	4868      	ldr	r0, [pc, #416]	; (80033c0 <ShowParameter+0x1b8>)
 8003220:	f01b f870 	bl	801e304 <memcpy>
	memcpy(lcdAnswer[1],parameter->name,parameter->name_len); // Имя  параметра
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6819      	ldr	r1, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	795b      	ldrb	r3, [r3, #5]
 800322c:	461a      	mov	r2, r3
 800322e:	4865      	ldr	r0, [pc, #404]	; (80033c4 <ShowParameter+0x1bc>)
 8003230:	f01b f868 	bl	801e304 <memcpy>
	if(parameter->isEnum)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	7a1b      	ldrb	r3, [r3, #8]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d069      	beq.n	8003310 <ShowParameter+0x108>
	{
		if(editMode)
 800323c:	4b62      	ldr	r3, [pc, #392]	; (80033c8 <ShowParameter+0x1c0>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d018      	beq.n	8003276 <ShowParameter+0x6e>
		{
			strncpy(lcdAnswer[2]+parameter->param_pos,editedValue+parameter->param_pos, strlen(editedValue+parameter->param_pos));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	79db      	ldrb	r3, [r3, #7]
 8003248:	461a      	mov	r2, r3
 800324a:	4b60      	ldr	r3, [pc, #384]	; (80033cc <ShowParameter+0x1c4>)
 800324c:	18d4      	adds	r4, r2, r3
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	79db      	ldrb	r3, [r3, #7]
 8003252:	461a      	mov	r2, r3
 8003254:	4b5e      	ldr	r3, [pc, #376]	; (80033d0 <ShowParameter+0x1c8>)
 8003256:	18d5      	adds	r5, r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	79db      	ldrb	r3, [r3, #7]
 800325c:	461a      	mov	r2, r3
 800325e:	4b5c      	ldr	r3, [pc, #368]	; (80033d0 <ShowParameter+0x1c8>)
 8003260:	4413      	add	r3, r2
 8003262:	4618      	mov	r0, r3
 8003264:	f7fc ffb4 	bl	80001d0 <strlen>
 8003268:	4603      	mov	r3, r0
 800326a:	461a      	mov	r2, r3
 800326c:	4629      	mov	r1, r5
 800326e:	4620      	mov	r0, r4
 8003270:	f01c f924 	bl	801f4bc <strncpy>
 8003274:	e050      	b.n	8003318 <ShowParameter+0x110>
		}
		else
		{
			float value = 0;
 8003276:	f04f 0300 	mov.w	r3, #0
 800327a:	647b      	str	r3, [r7, #68]	; 0x44
			switch (parameter->type) {
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	7d5b      	ldrb	r3, [r3, #21]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d002      	beq.n	800328a <ShowParameter+0x82>
 8003284:	2b01      	cmp	r3, #1
 8003286:	d00a      	beq.n	800329e <ShowParameter+0x96>
					break;
				case ROW_UINT:
					value = *((uint32_t*)parameter->data);
					break;
				default:
					break;
 8003288:	e013      	b.n	80032b2 <ShowParameter+0xaa>
					value = *((uint16_t*)parameter->data);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	881b      	ldrh	r3, [r3, #0]
 8003290:	ee07 3a90 	vmov	s15, r3
 8003294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003298:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
					break;
 800329c:	e009      	b.n	80032b2 <ShowParameter+0xaa>
					value = *((uint32_t*)parameter->data);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68db      	ldr	r3, [r3, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	ee07 3a90 	vmov	s15, r3
 80032a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ac:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
					break;
 80032b0:	bf00      	nop
			}
			Dictionary *pair = FindDictionaryFromValue(value, parameter->enums, parameter->enums_len);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691a      	ldr	r2, [r3, #16]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	7d1b      	ldrb	r3, [r3, #20]
 80032ba:	4619      	mov	r1, r3
 80032bc:	4610      	mov	r0, r2
 80032be:	ed97 0a11 	vldr	s0, [r7, #68]	; 0x44
 80032c2:	f000 fab5 	bl	8003830 <FindDictionaryFromValue>
 80032c6:	6438      	str	r0, [r7, #64]	; 0x40
			if(pair == NULL)
 80032c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10d      	bne.n	80032ea <ShowParameter+0xe2>
			{
				strncpy(lcdAnswer[2]+parameter->param_pos,"Undefined", strlen("Undefined"));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	79db      	ldrb	r3, [r3, #7]
 80032d2:	461a      	mov	r2, r3
 80032d4:	4b3d      	ldr	r3, [pc, #244]	; (80033cc <ShowParameter+0x1c4>)
 80032d6:	4413      	add	r3, r2
 80032d8:	493e      	ldr	r1, [pc, #248]	; (80033d4 <ShowParameter+0x1cc>)
 80032da:	461a      	mov	r2, r3
 80032dc:	460b      	mov	r3, r1
 80032de:	cb03      	ldmia	r3!, {r0, r1}
 80032e0:	6010      	str	r0, [r2, #0]
 80032e2:	6051      	str	r1, [r2, #4]
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	7213      	strb	r3, [r2, #8]
 80032e8:	e016      	b.n	8003318 <ShowParameter+0x110>
			}
			else
			{
				strncpy(lcdAnswer[2]+parameter->param_pos,pair->name, strlen(pair->name));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	79db      	ldrb	r3, [r3, #7]
 80032ee:	461a      	mov	r2, r3
 80032f0:	4b36      	ldr	r3, [pc, #216]	; (80033cc <ShowParameter+0x1c4>)
 80032f2:	18d4      	adds	r4, r2, r3
 80032f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032f6:	685d      	ldr	r5, [r3, #4]
 80032f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7fc ff67 	bl	80001d0 <strlen>
 8003302:	4603      	mov	r3, r0
 8003304:	461a      	mov	r2, r3
 8003306:	4629      	mov	r1, r5
 8003308:	4620      	mov	r0, r4
 800330a:	f01c f8d7 	bl	801f4bc <strncpy>
 800330e:	e003      	b.n	8003318 <ShowParameter+0x110>
		}

	}
	else
	{
		Print(parameter, 2);
 8003310:	2102      	movs	r1, #2
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 fb30 	bl	8003978 <Print>
	}

	if(parameter->isEdited)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	791b      	ldrb	r3, [r3, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d034      	beq.n	800338a <ShowParameter+0x182>
	{
		if(!editMode)
 8003320:	4b29      	ldr	r3, [pc, #164]	; (80033c8 <ShowParameter+0x1c0>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d110      	bne.n	800334a <ShowParameter+0x142>
		{
			//Изм.->Enter
			char edit[] = {0xC8, 0xE7, 0xEC, 0x2E, 0x2D, 0x3E, 0x45, 0x6E, 0x74, 0x65, 0x72};
 8003328:	4a2b      	ldr	r2, [pc, #172]	; (80033d8 <ShowParameter+0x1d0>)
 800332a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800332e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003330:	c303      	stmia	r3!, {r0, r1}
 8003332:	801a      	strh	r2, [r3, #0]
 8003334:	3302      	adds	r3, #2
 8003336:	0c12      	lsrs	r2, r2, #16
 8003338:	701a      	strb	r2, [r3, #0]
			strncpy(lcdAnswer[3]+9, edit, sizeof(edit));
 800333a:	4828      	ldr	r0, [pc, #160]	; (80033dc <ShowParameter+0x1d4>)
 800333c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003340:	220b      	movs	r2, #11
 8003342:	4619      	mov	r1, r3
 8003344:	f01c f8ba 	bl	801f4bc <strncpy>
	{
		//Главная->Esc
		char toMain[] = {0xC3, 0xEB, 0xE0, 0xE2, 0xED, 0xE0, 0xFF, 0x2D, 0x3E, 0x45, 0x73, 0x63,  0x00};
		memcpy(lcdAnswer[3]+8,toMain, sizeof(toMain));
	}
}
 8003348:	e031      	b.n	80033ae <ShowParameter+0x1a6>
			char back[] = {0xCD, 0xE0, 0xE7, 0xE0, 0xE4, 0x2D, 0x3E, 0x45, 0x73, 0x63};
 800334a:	4a25      	ldr	r2, [pc, #148]	; (80033e0 <ShowParameter+0x1d8>)
 800334c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003350:	ca07      	ldmia	r2, {r0, r1, r2}
 8003352:	c303      	stmia	r3!, {r0, r1}
 8003354:	801a      	strh	r2, [r3, #0]
			memcpy(lcdAnswer[3],back, sizeof(back));
 8003356:	4b1a      	ldr	r3, [pc, #104]	; (80033c0 <ShowParameter+0x1b8>)
 8003358:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 800335c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003360:	cb03      	ldmia	r3!, {r0, r1}
 8003362:	6010      	str	r0, [r2, #0]
 8003364:	6051      	str	r1, [r2, #4]
 8003366:	881b      	ldrh	r3, [r3, #0]
 8003368:	8113      	strh	r3, [r2, #8]
			char ok[] = { 0x4F, 0x6B, 0x2D, 0x3E, 0x45, 0x6E, 0x74, 0x65, 0x72};
 800336a:	4a1e      	ldr	r2, [pc, #120]	; (80033e4 <ShowParameter+0x1dc>)
 800336c:	f107 031c 	add.w	r3, r7, #28
 8003370:	ca07      	ldmia	r2, {r0, r1, r2}
 8003372:	c303      	stmia	r3!, {r0, r1}
 8003374:	701a      	strb	r2, [r3, #0]
			memcpy(lcdAnswer[3]+11,ok, sizeof(ok));
 8003376:	4b1c      	ldr	r3, [pc, #112]	; (80033e8 <ShowParameter+0x1e0>)
 8003378:	461a      	mov	r2, r3
 800337a:	f107 031c 	add.w	r3, r7, #28
 800337e:	cb03      	ldmia	r3!, {r0, r1}
 8003380:	6010      	str	r0, [r2, #0]
 8003382:	6051      	str	r1, [r2, #4]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	7213      	strb	r3, [r2, #8]
}
 8003388:	e011      	b.n	80033ae <ShowParameter+0x1a6>
	else if(currentParameters == indication_rows)
 800338a:	4b18      	ldr	r3, [pc, #96]	; (80033ec <ShowParameter+0x1e4>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a18      	ldr	r2, [pc, #96]	; (80033f0 <ShowParameter+0x1e8>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d10c      	bne.n	80033ae <ShowParameter+0x1a6>
		char toMain[] = {0xC3, 0xEB, 0xE0, 0xE2, 0xED, 0xE0, 0xFF, 0x2D, 0x3E, 0x45, 0x73, 0x63,  0x00};
 8003394:	4b17      	ldr	r3, [pc, #92]	; (80033f4 <ShowParameter+0x1ec>)
 8003396:	f107 040c 	add.w	r4, r7, #12
 800339a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800339c:	c407      	stmia	r4!, {r0, r1, r2}
 800339e:	7023      	strb	r3, [r4, #0]
		memcpy(lcdAnswer[3]+8,toMain, sizeof(toMain));
 80033a0:	4815      	ldr	r0, [pc, #84]	; (80033f8 <ShowParameter+0x1f0>)
 80033a2:	f107 030c 	add.w	r3, r7, #12
 80033a6:	220d      	movs	r2, #13
 80033a8:	4619      	mov	r1, r3
 80033aa:	f01a ffab 	bl	801e304 <memcpy>
}
 80033ae:	bf00      	nop
 80033b0:	3748      	adds	r7, #72	; 0x48
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bdb0      	pop	{r4, r5, r7, pc}
 80033b6:	bf00      	nop
 80033b8:	2000714c 	.word	0x2000714c
 80033bc:	200070d4 	.word	0x200070d4
 80033c0:	20007084 	.word	0x20007084
 80033c4:	20007098 	.word	0x20007098
 80033c8:	20000915 	.word	0x20000915
 80033cc:	200070ac 	.word	0x200070ac
 80033d0:	200070d8 	.word	0x200070d8
 80033d4:	08023634 	.word	0x08023634
 80033d8:	08023640 	.word	0x08023640
 80033dc:	200070c9 	.word	0x200070c9
 80033e0:	0802364c 	.word	0x0802364c
 80033e4:	08023658 	.word	0x08023658
 80033e8:	200070cb 	.word	0x200070cb
 80033ec:	20000910 	.word	0x20000910
 80033f0:	20000354 	.word	0x20000354
 80033f4:	08023664 	.word	0x08023664
 80033f8:	200070c8 	.word	0x200070c8

080033fc <Min>:

static int Min(int x,int y)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b083      	sub	sp, #12
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
	return x<y?x:y;
 8003406:	683a      	ldr	r2, [r7, #0]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4293      	cmp	r3, r2
 800340c:	bfa8      	it	ge
 800340e:	4613      	movge	r3, r2
}
 8003410:	4618      	mov	r0, r3
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <ShowErrors>:

static uint8_t ShowErrors()
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
	GetAllErrors();
 8003422:	f000 f86f 	bl	8003504 <GetAllErrors>
	Clear();
 8003426:	f7ff fb03 	bl	8002a30 <Clear>
	//Ошибки
	char erors[] = {0xCE, 0xF8, 0xE8, 0xE1, 0xEA, 0xE8,  0x00};
 800342a:	4a30      	ldr	r2, [pc, #192]	; (80034ec <ShowErrors+0xd0>)
 800342c:	1d3b      	adds	r3, r7, #4
 800342e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003432:	6018      	str	r0, [r3, #0]
 8003434:	3304      	adds	r3, #4
 8003436:	8019      	strh	r1, [r3, #0]
 8003438:	3302      	adds	r3, #2
 800343a:	0c0a      	lsrs	r2, r1, #16
 800343c:	701a      	strb	r2, [r3, #0]
	memcpy(lcdAnswer[0],erors, sizeof(erors));
 800343e:	4b2c      	ldr	r3, [pc, #176]	; (80034f0 <ShowErrors+0xd4>)
 8003440:	461a      	mov	r2, r3
 8003442:	1d3b      	adds	r3, r7, #4
 8003444:	6818      	ldr	r0, [r3, #0]
 8003446:	6010      	str	r0, [r2, #0]
 8003448:	8899      	ldrh	r1, [r3, #4]
 800344a:	799b      	ldrb	r3, [r3, #6]
 800344c:	8091      	strh	r1, [r2, #4]
 800344e:	7193      	strb	r3, [r2, #6]
	if(err_count==0)return 1;
 8003450:	4b28      	ldr	r3, [pc, #160]	; (80034f4 <ShowErrors+0xd8>)
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <ShowErrors+0x40>
 8003458:	2301      	movs	r3, #1
 800345a:	e042      	b.n	80034e2 <ShowErrors+0xc6>
	if(paramIndex>=err_count-1)paramIndex = err_count==0 ? 0 : err_count-1;
 800345c:	4b26      	ldr	r3, [pc, #152]	; (80034f8 <ShowErrors+0xdc>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	461a      	mov	r2, r3
 8003462:	4b24      	ldr	r3, [pc, #144]	; (80034f4 <ShowErrors+0xd8>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	3b01      	subs	r3, #1
 8003468:	429a      	cmp	r2, r3
 800346a:	db0b      	blt.n	8003484 <ShowErrors+0x68>
 800346c:	4b21      	ldr	r3, [pc, #132]	; (80034f4 <ShowErrors+0xd8>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d004      	beq.n	800347e <ShowErrors+0x62>
 8003474:	4b1f      	ldr	r3, [pc, #124]	; (80034f4 <ShowErrors+0xd8>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	3b01      	subs	r3, #1
 800347a:	b2db      	uxtb	r3, r3
 800347c:	e000      	b.n	8003480 <ShowErrors+0x64>
 800347e:	2300      	movs	r3, #0
 8003480:	4a1d      	ldr	r2, [pc, #116]	; (80034f8 <ShowErrors+0xdc>)
 8003482:	7013      	strb	r3, [r2, #0]
	for (int i = paramIndex; i < Min(err_count, paramIndex+3); ++i) {
 8003484:	4b1c      	ldr	r3, [pc, #112]	; (80034f8 <ShowErrors+0xdc>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	60fb      	str	r3, [r7, #12]
 800348a:	e01b      	b.n	80034c4 <ShowErrors+0xa8>
		sprintf(lcdAnswer[1+i-paramIndex],"%d.%s",errors_info[i].num, errors_info[i].errorName);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	3301      	adds	r3, #1
 8003490:	4a19      	ldr	r2, [pc, #100]	; (80034f8 <ShowErrors+0xdc>)
 8003492:	7812      	ldrb	r2, [r2, #0]
 8003494:	1a9a      	subs	r2, r3, r2
 8003496:	4613      	mov	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	4413      	add	r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	4a14      	ldr	r2, [pc, #80]	; (80034f0 <ShowErrors+0xd4>)
 80034a0:	1898      	adds	r0, r3, r2
 80034a2:	4a16      	ldr	r2, [pc, #88]	; (80034fc <ShowErrors+0xe0>)
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f812 3033 	ldrb.w	r3, [r2, r3, lsl #3]
 80034aa:	4619      	mov	r1, r3
 80034ac:	4a13      	ldr	r2, [pc, #76]	; (80034fc <ShowErrors+0xe0>)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4413      	add	r3, r2
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	460a      	mov	r2, r1
 80034b8:	4911      	ldr	r1, [pc, #68]	; (8003500 <ShowErrors+0xe4>)
 80034ba:	f01b ff4f 	bl	801f35c <siprintf>
	for (int i = paramIndex; i < Min(err_count, paramIndex+3); ++i) {
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	3301      	adds	r3, #1
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <ShowErrors+0xd8>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	461a      	mov	r2, r3
 80034ca:	4b0b      	ldr	r3, [pc, #44]	; (80034f8 <ShowErrors+0xdc>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	3303      	adds	r3, #3
 80034d0:	4619      	mov	r1, r3
 80034d2:	4610      	mov	r0, r2
 80034d4:	f7ff ff92 	bl	80033fc <Min>
 80034d8:	4602      	mov	r2, r0
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	4293      	cmp	r3, r2
 80034de:	dbd5      	blt.n	800348c <ShowErrors+0x70>
	}
	return 1;
 80034e0:	2301      	movs	r3, #1
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3710      	adds	r7, #16
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	0802367c 	.word	0x0802367c
 80034f0:	20007084 	.word	0x20007084
 80034f4:	20007151 	.word	0x20007151
 80034f8:	20000914 	.word	0x20000914
 80034fc:	200070ec 	.word	0x200070ec
 8003500:	08023674 	.word	0x08023674

08003504 <GetAllErrors>:

static uint8_t GetAllErrors()
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
	err_count = 0;
 8003508:	4b9c      	ldr	r3, [pc, #624]	; (800377c <GetAllErrors+0x278>)
 800350a:	2200      	movs	r2, #0
 800350c:	701a      	strb	r2, [r3, #0]
	if(meas_data.errors.nakopitel_kanistra_err)
 800350e:	4b9c      	ldr	r3, [pc, #624]	; (8003780 <GetAllErrors+0x27c>)
 8003510:	7f1b      	ldrb	r3, [r3, #28]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	b2db      	uxtb	r3, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	d017      	beq.n	800354c <GetAllErrors+0x48>
	{
		errors_info[err_count].num = err_count+1;
 800351c:	4b97      	ldr	r3, [pc, #604]	; (800377c <GetAllErrors+0x278>)
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	4a96      	ldr	r2, [pc, #600]	; (800377c <GetAllErrors+0x278>)
 8003522:	7812      	ldrb	r2, [r2, #0]
 8003524:	3301      	adds	r3, #1
 8003526:	b2d9      	uxtb	r1, r3
 8003528:	4b96      	ldr	r3, [pc, #600]	; (8003784 <GetAllErrors+0x280>)
 800352a:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[0].name;
 800352e:	4b93      	ldr	r3, [pc, #588]	; (800377c <GetAllErrors+0x278>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	4b94      	ldr	r3, [pc, #592]	; (8003788 <GetAllErrors+0x284>)
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	4992      	ldr	r1, [pc, #584]	; (8003784 <GetAllErrors+0x280>)
 800353a:	00c3      	lsls	r3, r0, #3
 800353c:	440b      	add	r3, r1
 800353e:	605a      	str	r2, [r3, #4]
		err_count++;
 8003540:	4b8e      	ldr	r3, [pc, #568]	; (800377c <GetAllErrors+0x278>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	3301      	adds	r3, #1
 8003546:	b2da      	uxtb	r2, r3
 8003548:	4b8c      	ldr	r3, [pc, #560]	; (800377c <GetAllErrors+0x278>)
 800354a:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.nakopitel_door_err)
 800354c:	4b8c      	ldr	r3, [pc, #560]	; (8003780 <GetAllErrors+0x27c>)
 800354e:	7f1b      	ldrb	r3, [r3, #28]
 8003550:	f003 0302 	and.w	r3, r3, #2
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d017      	beq.n	800358a <GetAllErrors+0x86>
	{
		errors_info[err_count].num = err_count+1;
 800355a:	4b88      	ldr	r3, [pc, #544]	; (800377c <GetAllErrors+0x278>)
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	4a87      	ldr	r2, [pc, #540]	; (800377c <GetAllErrors+0x278>)
 8003560:	7812      	ldrb	r2, [r2, #0]
 8003562:	3301      	adds	r3, #1
 8003564:	b2d9      	uxtb	r1, r3
 8003566:	4b87      	ldr	r3, [pc, #540]	; (8003784 <GetAllErrors+0x280>)
 8003568:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[1].name;
 800356c:	4b83      	ldr	r3, [pc, #524]	; (800377c <GetAllErrors+0x278>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	4618      	mov	r0, r3
 8003572:	4b85      	ldr	r3, [pc, #532]	; (8003788 <GetAllErrors+0x284>)
 8003574:	699a      	ldr	r2, [r3, #24]
 8003576:	4983      	ldr	r1, [pc, #524]	; (8003784 <GetAllErrors+0x280>)
 8003578:	00c3      	lsls	r3, r0, #3
 800357a:	440b      	add	r3, r1
 800357c:	605a      	str	r2, [r3, #4]
		err_count++;
 800357e:	4b7f      	ldr	r3, [pc, #508]	; (800377c <GetAllErrors+0x278>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	3301      	adds	r3, #1
 8003584:	b2da      	uxtb	r2, r3
 8003586:	4b7d      	ldr	r3, [pc, #500]	; (800377c <GetAllErrors+0x278>)
 8003588:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.uz_err)
 800358a:	4b7d      	ldr	r3, [pc, #500]	; (8003780 <GetAllErrors+0x27c>)
 800358c:	7f1b      	ldrb	r3, [r3, #28]
 800358e:	f003 0304 	and.w	r3, r3, #4
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	d017      	beq.n	80035c8 <GetAllErrors+0xc4>
	{
		errors_info[err_count].num = err_count+1;
 8003598:	4b78      	ldr	r3, [pc, #480]	; (800377c <GetAllErrors+0x278>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	4a77      	ldr	r2, [pc, #476]	; (800377c <GetAllErrors+0x278>)
 800359e:	7812      	ldrb	r2, [r2, #0]
 80035a0:	3301      	adds	r3, #1
 80035a2:	b2d9      	uxtb	r1, r3
 80035a4:	4b77      	ldr	r3, [pc, #476]	; (8003784 <GetAllErrors+0x280>)
 80035a6:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[2].name;
 80035aa:	4b74      	ldr	r3, [pc, #464]	; (800377c <GetAllErrors+0x278>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	4b75      	ldr	r3, [pc, #468]	; (8003788 <GetAllErrors+0x284>)
 80035b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035b4:	4973      	ldr	r1, [pc, #460]	; (8003784 <GetAllErrors+0x280>)
 80035b6:	00c3      	lsls	r3, r0, #3
 80035b8:	440b      	add	r3, r1
 80035ba:	605a      	str	r2, [r3, #4]
		err_count++;
 80035bc:	4b6f      	ldr	r3, [pc, #444]	; (800377c <GetAllErrors+0x278>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	3301      	adds	r3, #1
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	4b6d      	ldr	r3, [pc, #436]	; (800377c <GetAllErrors+0x278>)
 80035c6:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.sb_abort_err)
 80035c8:	4b6d      	ldr	r3, [pc, #436]	; (8003780 <GetAllErrors+0x27c>)
 80035ca:	7f1b      	ldrb	r3, [r3, #28]
 80035cc:	f003 0308 	and.w	r3, r3, #8
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d017      	beq.n	8003606 <GetAllErrors+0x102>
	{
		errors_info[err_count].num = err_count+1;
 80035d6:	4b69      	ldr	r3, [pc, #420]	; (800377c <GetAllErrors+0x278>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	4a68      	ldr	r2, [pc, #416]	; (800377c <GetAllErrors+0x278>)
 80035dc:	7812      	ldrb	r2, [r2, #0]
 80035de:	3301      	adds	r3, #1
 80035e0:	b2d9      	uxtb	r1, r3
 80035e2:	4b68      	ldr	r3, [pc, #416]	; (8003784 <GetAllErrors+0x280>)
 80035e4:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[3].name;
 80035e8:	4b64      	ldr	r3, [pc, #400]	; (800377c <GetAllErrors+0x278>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	4b66      	ldr	r3, [pc, #408]	; (8003788 <GetAllErrors+0x284>)
 80035f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035f2:	4964      	ldr	r1, [pc, #400]	; (8003784 <GetAllErrors+0x280>)
 80035f4:	00c3      	lsls	r3, r0, #3
 80035f6:	440b      	add	r3, r1
 80035f8:	605a      	str	r2, [r3, #4]
		err_count++;
 80035fa:	4b60      	ldr	r3, [pc, #384]	; (800377c <GetAllErrors+0x278>)
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	3301      	adds	r3, #1
 8003600:	b2da      	uxtb	r2, r3
 8003602:	4b5e      	ldr	r3, [pc, #376]	; (800377c <GetAllErrors+0x278>)
 8003604:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.sq_left_err)
 8003606:	4b5e      	ldr	r3, [pc, #376]	; (8003780 <GetAllErrors+0x27c>)
 8003608:	7f1b      	ldrb	r3, [r3, #28]
 800360a:	f003 0310 	and.w	r3, r3, #16
 800360e:	b2db      	uxtb	r3, r3
 8003610:	2b00      	cmp	r3, #0
 8003612:	d017      	beq.n	8003644 <GetAllErrors+0x140>
	{
		errors_info[err_count].num = err_count+1;
 8003614:	4b59      	ldr	r3, [pc, #356]	; (800377c <GetAllErrors+0x278>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	4a58      	ldr	r2, [pc, #352]	; (800377c <GetAllErrors+0x278>)
 800361a:	7812      	ldrb	r2, [r2, #0]
 800361c:	3301      	adds	r3, #1
 800361e:	b2d9      	uxtb	r1, r3
 8003620:	4b58      	ldr	r3, [pc, #352]	; (8003784 <GetAllErrors+0x280>)
 8003622:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[4].name;
 8003626:	4b55      	ldr	r3, [pc, #340]	; (800377c <GetAllErrors+0x278>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	4b56      	ldr	r3, [pc, #344]	; (8003788 <GetAllErrors+0x284>)
 800362e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003630:	4954      	ldr	r1, [pc, #336]	; (8003784 <GetAllErrors+0x280>)
 8003632:	00c3      	lsls	r3, r0, #3
 8003634:	440b      	add	r3, r1
 8003636:	605a      	str	r2, [r3, #4]
		err_count++;
 8003638:	4b50      	ldr	r3, [pc, #320]	; (800377c <GetAllErrors+0x278>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	3301      	adds	r3, #1
 800363e:	b2da      	uxtb	r2, r3
 8003640:	4b4e      	ldr	r3, [pc, #312]	; (800377c <GetAllErrors+0x278>)
 8003642:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.sq_right_err)
 8003644:	4b4e      	ldr	r3, [pc, #312]	; (8003780 <GetAllErrors+0x27c>)
 8003646:	7f1b      	ldrb	r3, [r3, #28]
 8003648:	f003 0320 	and.w	r3, r3, #32
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d017      	beq.n	8003682 <GetAllErrors+0x17e>
	{
		errors_info[err_count].num = err_count+1;
 8003652:	4b4a      	ldr	r3, [pc, #296]	; (800377c <GetAllErrors+0x278>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	4a49      	ldr	r2, [pc, #292]	; (800377c <GetAllErrors+0x278>)
 8003658:	7812      	ldrb	r2, [r2, #0]
 800365a:	3301      	adds	r3, #1
 800365c:	b2d9      	uxtb	r1, r3
 800365e:	4b49      	ldr	r3, [pc, #292]	; (8003784 <GetAllErrors+0x280>)
 8003660:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[5].name;
 8003664:	4b45      	ldr	r3, [pc, #276]	; (800377c <GetAllErrors+0x278>)
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	4618      	mov	r0, r3
 800366a:	4b47      	ldr	r3, [pc, #284]	; (8003788 <GetAllErrors+0x284>)
 800366c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800366e:	4945      	ldr	r1, [pc, #276]	; (8003784 <GetAllErrors+0x280>)
 8003670:	00c3      	lsls	r3, r0, #3
 8003672:	440b      	add	r3, r1
 8003674:	605a      	str	r2, [r3, #4]
		err_count++;
 8003676:	4b41      	ldr	r3, [pc, #260]	; (800377c <GetAllErrors+0x278>)
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	3301      	adds	r3, #1
 800367c:	b2da      	uxtb	r2, r3
 800367e:	4b3f      	ldr	r3, [pc, #252]	; (800377c <GetAllErrors+0x278>)
 8003680:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.timeout_moving_right_err)
 8003682:	4b3f      	ldr	r3, [pc, #252]	; (8003780 <GetAllErrors+0x27c>)
 8003684:	7f1b      	ldrb	r3, [r3, #28]
 8003686:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800368a:	b2db      	uxtb	r3, r3
 800368c:	2b00      	cmp	r3, #0
 800368e:	d018      	beq.n	80036c2 <GetAllErrors+0x1be>
	{
		errors_info[err_count].num = err_count+1;
 8003690:	4b3a      	ldr	r3, [pc, #232]	; (800377c <GetAllErrors+0x278>)
 8003692:	781b      	ldrb	r3, [r3, #0]
 8003694:	4a39      	ldr	r2, [pc, #228]	; (800377c <GetAllErrors+0x278>)
 8003696:	7812      	ldrb	r2, [r2, #0]
 8003698:	3301      	adds	r3, #1
 800369a:	b2d9      	uxtb	r1, r3
 800369c:	4b39      	ldr	r3, [pc, #228]	; (8003784 <GetAllErrors+0x280>)
 800369e:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[6].name;
 80036a2:	4b36      	ldr	r3, [pc, #216]	; (800377c <GetAllErrors+0x278>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	4b37      	ldr	r3, [pc, #220]	; (8003788 <GetAllErrors+0x284>)
 80036aa:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80036ae:	4935      	ldr	r1, [pc, #212]	; (8003784 <GetAllErrors+0x280>)
 80036b0:	00c3      	lsls	r3, r0, #3
 80036b2:	440b      	add	r3, r1
 80036b4:	605a      	str	r2, [r3, #4]
		err_count++;
 80036b6:	4b31      	ldr	r3, [pc, #196]	; (800377c <GetAllErrors+0x278>)
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	3301      	adds	r3, #1
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	4b2f      	ldr	r3, [pc, #188]	; (800377c <GetAllErrors+0x278>)
 80036c0:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.timeout_moving_left_err)
 80036c2:	4b2f      	ldr	r3, [pc, #188]	; (8003780 <GetAllErrors+0x27c>)
 80036c4:	7f1b      	ldrb	r3, [r3, #28]
 80036c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d018      	beq.n	8003702 <GetAllErrors+0x1fe>
	{
		errors_info[err_count].num = err_count+1;
 80036d0:	4b2a      	ldr	r3, [pc, #168]	; (800377c <GetAllErrors+0x278>)
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	4a29      	ldr	r2, [pc, #164]	; (800377c <GetAllErrors+0x278>)
 80036d6:	7812      	ldrb	r2, [r2, #0]
 80036d8:	3301      	adds	r3, #1
 80036da:	b2d9      	uxtb	r1, r3
 80036dc:	4b29      	ldr	r3, [pc, #164]	; (8003784 <GetAllErrors+0x280>)
 80036de:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[7].name;
 80036e2:	4b26      	ldr	r3, [pc, #152]	; (800377c <GetAllErrors+0x278>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	4b27      	ldr	r3, [pc, #156]	; (8003788 <GetAllErrors+0x284>)
 80036ea:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80036ee:	4925      	ldr	r1, [pc, #148]	; (8003784 <GetAllErrors+0x280>)
 80036f0:	00c3      	lsls	r3, r0, #3
 80036f2:	440b      	add	r3, r1
 80036f4:	605a      	str	r2, [r3, #4]
		err_count++;
 80036f6:	4b21      	ldr	r3, [pc, #132]	; (800377c <GetAllErrors+0x278>)
 80036f8:	781b      	ldrb	r3, [r3, #0]
 80036fa:	3301      	adds	r3, #1
 80036fc:	b2da      	uxtb	r2, r3
 80036fe:	4b1f      	ldr	r3, [pc, #124]	; (800377c <GetAllErrors+0x278>)
 8003700:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.need_return_err)
 8003702:	4b1f      	ldr	r3, [pc, #124]	; (8003780 <GetAllErrors+0x27c>)
 8003704:	7f5b      	ldrb	r3, [r3, #29]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	d018      	beq.n	8003742 <GetAllErrors+0x23e>
	{
		errors_info[err_count].num = err_count+1;
 8003710:	4b1a      	ldr	r3, [pc, #104]	; (800377c <GetAllErrors+0x278>)
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	4a19      	ldr	r2, [pc, #100]	; (800377c <GetAllErrors+0x278>)
 8003716:	7812      	ldrb	r2, [r2, #0]
 8003718:	3301      	adds	r3, #1
 800371a:	b2d9      	uxtb	r1, r3
 800371c:	4b19      	ldr	r3, [pc, #100]	; (8003784 <GetAllErrors+0x280>)
 800371e:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[8].name;
 8003722:	4b16      	ldr	r3, [pc, #88]	; (800377c <GetAllErrors+0x278>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	4618      	mov	r0, r3
 8003728:	4b17      	ldr	r3, [pc, #92]	; (8003788 <GetAllErrors+0x284>)
 800372a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800372e:	4915      	ldr	r1, [pc, #84]	; (8003784 <GetAllErrors+0x280>)
 8003730:	00c3      	lsls	r3, r0, #3
 8003732:	440b      	add	r3, r1
 8003734:	605a      	str	r2, [r3, #4]
		err_count++;
 8003736:	4b11      	ldr	r3, [pc, #68]	; (800377c <GetAllErrors+0x278>)
 8003738:	781b      	ldrb	r3, [r3, #0]
 800373a:	3301      	adds	r3, #1
 800373c:	b2da      	uxtb	r2, r3
 800373e:	4b0f      	ldr	r3, [pc, #60]	; (800377c <GetAllErrors+0x278>)
 8003740:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.full_nakop_err)
 8003742:	4b0f      	ldr	r3, [pc, #60]	; (8003780 <GetAllErrors+0x27c>)
 8003744:	7f5b      	ldrb	r3, [r3, #29]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	b2db      	uxtb	r3, r3
 800374c:	2b00      	cmp	r3, #0
 800374e:	d021      	beq.n	8003794 <GetAllErrors+0x290>
	{
		errors_info[err_count].num = err_count+1;
 8003750:	4b0a      	ldr	r3, [pc, #40]	; (800377c <GetAllErrors+0x278>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	4a09      	ldr	r2, [pc, #36]	; (800377c <GetAllErrors+0x278>)
 8003756:	7812      	ldrb	r2, [r2, #0]
 8003758:	3301      	adds	r3, #1
 800375a:	b2d9      	uxtb	r1, r3
 800375c:	4b09      	ldr	r3, [pc, #36]	; (8003784 <GetAllErrors+0x280>)
 800375e:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[9].name;
 8003762:	4b06      	ldr	r3, [pc, #24]	; (800377c <GetAllErrors+0x278>)
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	4618      	mov	r0, r3
 8003768:	4b07      	ldr	r3, [pc, #28]	; (8003788 <GetAllErrors+0x284>)
 800376a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800376e:	4905      	ldr	r1, [pc, #20]	; (8003784 <GetAllErrors+0x280>)
 8003770:	00c3      	lsls	r3, r0, #3
 8003772:	440b      	add	r3, r1
 8003774:	605a      	str	r2, [r3, #4]
		err_count++;
 8003776:	4b01      	ldr	r3, [pc, #4]	; (800377c <GetAllErrors+0x278>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	e007      	b.n	800378c <GetAllErrors+0x288>
 800377c:	20007151 	.word	0x20007151
 8003780:	20007520 	.word	0x20007520
 8003784:	200070ec 	.word	0x200070ec
 8003788:	2000012c 	.word	0x2000012c
 800378c:	3301      	adds	r3, #1
 800378e:	b2da      	uxtb	r2, r3
 8003790:	4b23      	ldr	r3, [pc, #140]	; (8003820 <GetAllErrors+0x31c>)
 8003792:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.no_concentrat_err)
 8003794:	4b23      	ldr	r3, [pc, #140]	; (8003824 <GetAllErrors+0x320>)
 8003796:	7f5b      	ldrb	r3, [r3, #29]
 8003798:	f003 0304 	and.w	r3, r3, #4
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d018      	beq.n	80037d4 <GetAllErrors+0x2d0>
	{
		errors_info[err_count].num = err_count+1;
 80037a2:	4b1f      	ldr	r3, [pc, #124]	; (8003820 <GetAllErrors+0x31c>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	4a1e      	ldr	r2, [pc, #120]	; (8003820 <GetAllErrors+0x31c>)
 80037a8:	7812      	ldrb	r2, [r2, #0]
 80037aa:	3301      	adds	r3, #1
 80037ac:	b2d9      	uxtb	r1, r3
 80037ae:	4b1e      	ldr	r3, [pc, #120]	; (8003828 <GetAllErrors+0x324>)
 80037b0:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[10].name;
 80037b4:	4b1a      	ldr	r3, [pc, #104]	; (8003820 <GetAllErrors+0x31c>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	4618      	mov	r0, r3
 80037ba:	4b1c      	ldr	r3, [pc, #112]	; (800382c <GetAllErrors+0x328>)
 80037bc:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80037c0:	4919      	ldr	r1, [pc, #100]	; (8003828 <GetAllErrors+0x324>)
 80037c2:	00c3      	lsls	r3, r0, #3
 80037c4:	440b      	add	r3, r1
 80037c6:	605a      	str	r2, [r3, #4]
		err_count++;
 80037c8:	4b15      	ldr	r3, [pc, #84]	; (8003820 <GetAllErrors+0x31c>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	3301      	adds	r3, #1
 80037ce:	b2da      	uxtb	r2, r3
 80037d0:	4b13      	ldr	r3, [pc, #76]	; (8003820 <GetAllErrors+0x31c>)
 80037d2:	701a      	strb	r2, [r3, #0]
	}
	if(meas_data.errors.conveyer_off_err)
 80037d4:	4b13      	ldr	r3, [pc, #76]	; (8003824 <GetAllErrors+0x320>)
 80037d6:	7f5b      	ldrb	r3, [r3, #29]
 80037d8:	f003 0308 	and.w	r3, r3, #8
 80037dc:	b2db      	uxtb	r3, r3
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d018      	beq.n	8003814 <GetAllErrors+0x310>
	{
		errors_info[err_count].num = err_count+1;
 80037e2:	4b0f      	ldr	r3, [pc, #60]	; (8003820 <GetAllErrors+0x31c>)
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	4a0e      	ldr	r2, [pc, #56]	; (8003820 <GetAllErrors+0x31c>)
 80037e8:	7812      	ldrb	r2, [r2, #0]
 80037ea:	3301      	adds	r3, #1
 80037ec:	b2d9      	uxtb	r1, r3
 80037ee:	4b0e      	ldr	r3, [pc, #56]	; (8003828 <GetAllErrors+0x324>)
 80037f0:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
		errors_info[err_count].errorName = Errors[11].name;
 80037f4:	4b0a      	ldr	r3, [pc, #40]	; (8003820 <GetAllErrors+0x31c>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	4618      	mov	r0, r3
 80037fa:	4b0c      	ldr	r3, [pc, #48]	; (800382c <GetAllErrors+0x328>)
 80037fc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003800:	4909      	ldr	r1, [pc, #36]	; (8003828 <GetAllErrors+0x324>)
 8003802:	00c3      	lsls	r3, r0, #3
 8003804:	440b      	add	r3, r1
 8003806:	605a      	str	r2, [r3, #4]
		err_count++;
 8003808:	4b05      	ldr	r3, [pc, #20]	; (8003820 <GetAllErrors+0x31c>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	3301      	adds	r3, #1
 800380e:	b2da      	uxtb	r2, r3
 8003810:	4b03      	ldr	r3, [pc, #12]	; (8003820 <GetAllErrors+0x31c>)
 8003812:	701a      	strb	r2, [r3, #0]
	}
	return 1;
 8003814:	2301      	movs	r3, #1

}
 8003816:	4618      	mov	r0, r3
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	20007151 	.word	0x20007151
 8003824:	20007520 	.word	0x20007520
 8003828:	200070ec 	.word	0x200070ec
 800382c:	2000012c 	.word	0x2000012c

08003830 <FindDictionaryFromValue>:

/*Возращает ссылку на пару "ключ-значение", если записи нет, то возвращает NULL */
static Dictionary *FindDictionaryFromValue(float value, Dictionary *dictionary, uint8_t dict_len)
{
 8003830:	b480      	push	{r7}
 8003832:	b087      	sub	sp, #28
 8003834:	af00      	add	r7, sp, #0
 8003836:	ed87 0a03 	vstr	s0, [r7, #12]
 800383a:	60b8      	str	r0, [r7, #8]
 800383c:	460b      	mov	r3, r1
 800383e:	71fb      	strb	r3, [r7, #7]
	Dictionary *temp = NULL;
 8003840:	2300      	movs	r3, #0
 8003842:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < dict_len; ++i) {
 8003844:	2300      	movs	r3, #0
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	e013      	b.n	8003872 <FindDictionaryFromValue+0x42>
		temp = dictionary+i;
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	00db      	lsls	r3, r3, #3
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	4413      	add	r3, r2
 8003852:	613b      	str	r3, [r7, #16]
		if(temp->value == value)return temp;
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	edd3 7a00 	vldr	s15, [r3]
 800385a:	ed97 7a03 	vldr	s14, [r7, #12]
 800385e:	eeb4 7a67 	vcmp.f32	s14, s15
 8003862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003866:	d101      	bne.n	800386c <FindDictionaryFromValue+0x3c>
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	e007      	b.n	800387c <FindDictionaryFromValue+0x4c>
	for (int i = 0; i < dict_len; ++i) {
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	3301      	adds	r3, #1
 8003870:	617b      	str	r3, [r7, #20]
 8003872:	79fb      	ldrb	r3, [r7, #7]
 8003874:	697a      	ldr	r2, [r7, #20]
 8003876:	429a      	cmp	r2, r3
 8003878:	dbe7      	blt.n	800384a <FindDictionaryFromValue+0x1a>

	}
	return NULL;
 800387a:	2300      	movs	r3, #0
}
 800387c:	4618      	mov	r0, r3
 800387e:	371c      	adds	r7, #28
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <FindIndexFromValue>:

/*Возращает индекс "ключ-значение", если записи нет, -1*/
static int FindIndexFromValue(float value, Dictionary *dictionary, uint8_t dict_len)
{
 8003888:	b480      	push	{r7}
 800388a:	b087      	sub	sp, #28
 800388c:	af00      	add	r7, sp, #0
 800388e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003892:	60b8      	str	r0, [r7, #8]
 8003894:	460b      	mov	r3, r1
 8003896:	71fb      	strb	r3, [r7, #7]
	Dictionary *temp = NULL;
 8003898:	2300      	movs	r3, #0
 800389a:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < dict_len; ++i) {
 800389c:	2300      	movs	r3, #0
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	e013      	b.n	80038ca <FindIndexFromValue+0x42>
		temp = dictionary+i;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	68ba      	ldr	r2, [r7, #8]
 80038a8:	4413      	add	r3, r2
 80038aa:	613b      	str	r3, [r7, #16]
		if(temp->value == value)return i;
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	edd3 7a00 	vldr	s15, [r3]
 80038b2:	ed97 7a03 	vldr	s14, [r7, #12]
 80038b6:	eeb4 7a67 	vcmp.f32	s14, s15
 80038ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038be:	d101      	bne.n	80038c4 <FindIndexFromValue+0x3c>
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	e008      	b.n	80038d6 <FindIndexFromValue+0x4e>
	for (int i = 0; i < dict_len; ++i) {
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	3301      	adds	r3, #1
 80038c8:	617b      	str	r3, [r7, #20]
 80038ca:	79fb      	ldrb	r3, [r7, #7]
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	dbe7      	blt.n	80038a2 <FindIndexFromValue+0x1a>

	}
	return -1;
 80038d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	371c      	adds	r7, #28
 80038da:	46bd      	mov	sp, r7
 80038dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e0:	4770      	bx	lr
	...

080038e4 <LcdUpdate>:



uint8_t LcdUpdate(uint8_t *answer)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
	uint8_t result = 0;
 80038ec:	2300      	movs	r3, #0
 80038ee:	73fb      	strb	r3, [r7, #15]
	if(currentParameters==NULL)
 80038f0:	4b1c      	ldr	r3, [pc, #112]	; (8003964 <LcdUpdate+0x80>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d104      	bne.n	8003902 <LcdUpdate+0x1e>
	{
		result =  ShowMainDisplay();
 80038f8:	f7ff f8c4 	bl	8002a84 <ShowMainDisplay>
 80038fc:	4603      	mov	r3, r0
 80038fe:	73fb      	strb	r3, [r7, #15]
 8003900:	e01d      	b.n	800393e <LcdUpdate+0x5a>
	}
	else if(currentParameters==Errors)
 8003902:	4b18      	ldr	r3, [pc, #96]	; (8003964 <LcdUpdate+0x80>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a18      	ldr	r2, [pc, #96]	; (8003968 <LcdUpdate+0x84>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d104      	bne.n	8003916 <LcdUpdate+0x32>
	{
		result =  ShowErrors();
 800390c:	f7ff fd86 	bl	800341c <ShowErrors>
 8003910:	4603      	mov	r3, r0
 8003912:	73fb      	strb	r3, [r7, #15]
 8003914:	e013      	b.n	800393e <LcdUpdate+0x5a>
	}
	else if(currentParameters == indication_rows)
 8003916:	4b13      	ldr	r3, [pc, #76]	; (8003964 <LcdUpdate+0x80>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a14      	ldr	r2, [pc, #80]	; (800396c <LcdUpdate+0x88>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d10e      	bne.n	800393e <LcdUpdate+0x5a>
	{
		ShowParameter(currentParameters+paramIndex);
 8003920:	4b10      	ldr	r3, [pc, #64]	; (8003964 <LcdUpdate+0x80>)
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	4b12      	ldr	r3, [pc, #72]	; (8003970 <LcdUpdate+0x8c>)
 8003926:	781b      	ldrb	r3, [r3, #0]
 8003928:	4619      	mov	r1, r3
 800392a:	460b      	mov	r3, r1
 800392c:	005b      	lsls	r3, r3, #1
 800392e:	440b      	add	r3, r1
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	4413      	add	r3, r2
 8003934:	4618      	mov	r0, r3
 8003936:	f7ff fc67 	bl	8003208 <ShowParameter>
		result =  1;
 800393a:	2301      	movs	r3, #1
 800393c:	73fb      	strb	r3, [r7, #15]
	}
	if(result)
 800393e:	7bfb      	ldrb	r3, [r7, #15]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d009      	beq.n	8003958 <LcdUpdate+0x74>
	{
		memcpy(answer,lcdAnswer,80);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a0b      	ldr	r2, [pc, #44]	; (8003974 <LcdUpdate+0x90>)
 8003948:	4618      	mov	r0, r3
 800394a:	4611      	mov	r1, r2
 800394c:	2350      	movs	r3, #80	; 0x50
 800394e:	461a      	mov	r2, r3
 8003950:	f01a fcd8 	bl	801e304 <memcpy>
		return 1;
 8003954:	2301      	movs	r3, #1
 8003956:	e000      	b.n	800395a <LcdUpdate+0x76>
	}
	return 0;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3710      	adds	r7, #16
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	20000910 	.word	0x20000910
 8003968:	2000012c 	.word	0x2000012c
 800396c:	20000354 	.word	0x20000354
 8003970:	20000914 	.word	0x20000914
 8003974:	20007084 	.word	0x20007084

08003978 <Print>:

static void Print(Row *parameter, uint8_t index)
{
 8003978:	b5b0      	push	{r4, r5, r7, lr}
 800397a:	b086      	sub	sp, #24
 800397c:	af02      	add	r7, sp, #8
 800397e:	6078      	str	r0, [r7, #4]
 8003980:	460b      	mov	r3, r1
 8003982:	70fb      	strb	r3, [r7, #3]
	uint16_t temp = 0;
 8003984:	2300      	movs	r3, #0
 8003986:	817b      	strh	r3, [r7, #10]
	if(editMode)
 8003988:	4b58      	ldr	r3, [pc, #352]	; (8003aec <Print+0x174>)
 800398a:	781b      	ldrb	r3, [r3, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d012      	beq.n	80039b6 <Print+0x3e>
	{
		memcpy(lcdAnswer[index],editedValue,20);
 8003990:	78fa      	ldrb	r2, [r7, #3]
 8003992:	4613      	mov	r3, r2
 8003994:	009b      	lsls	r3, r3, #2
 8003996:	4413      	add	r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	4a55      	ldr	r2, [pc, #340]	; (8003af0 <Print+0x178>)
 800399c:	4413      	add	r3, r2
 800399e:	4a55      	ldr	r2, [pc, #340]	; (8003af4 <Print+0x17c>)
 80039a0:	6811      	ldr	r1, [r2, #0]
 80039a2:	6855      	ldr	r5, [r2, #4]
 80039a4:	6894      	ldr	r4, [r2, #8]
 80039a6:	68d0      	ldr	r0, [r2, #12]
 80039a8:	6019      	str	r1, [r3, #0]
 80039aa:	605d      	str	r5, [r3, #4]
 80039ac:	609c      	str	r4, [r3, #8]
 80039ae:	60d8      	str	r0, [r3, #12]
 80039b0:	6911      	ldr	r1, [r2, #16]
 80039b2:	6119      	str	r1, [r3, #16]
		return;
 80039b4:	e097      	b.n	8003ae6 <Print+0x16e>
	}
	switch (parameter->type) {
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	7d5b      	ldrb	r3, [r3, #21]
 80039ba:	2b04      	cmp	r3, #4
 80039bc:	f200 8092 	bhi.w	8003ae4 <Print+0x16c>
 80039c0:	a201      	add	r2, pc, #4	; (adr r2, 80039c8 <Print+0x50>)
 80039c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c6:	bf00      	nop
 80039c8:	08003a25 	.word	0x08003a25
 80039cc:	08003a77 	.word	0x08003a77
 80039d0:	08003a49 	.word	0x08003a49
 80039d4:	08003a9b 	.word	0x08003a9b
 80039d8:	080039dd 	.word	0x080039dd
		case ROW_ETH_ADDR:
			sprintf(lcdAnswer[index]+parameter->param_pos,"%03d.%03d.%03d.%03d",*((uint16_t*)parameter->data),*(((uint16_t*)parameter->data)+1),*(((uint16_t*)parameter->data)+2),*(((uint16_t*)parameter->data)+3));
 80039dc:	78fa      	ldrb	r2, [r7, #3]
 80039de:	4613      	mov	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	4413      	add	r3, r2
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4a42      	ldr	r2, [pc, #264]	; (8003af0 <Print+0x178>)
 80039e8:	4413      	add	r3, r2
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	79d2      	ldrb	r2, [r2, #7]
 80039ee:	1898      	adds	r0, r3, r2
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	4619      	mov	r1, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	3302      	adds	r3, #2
 80039fe:	881b      	ldrh	r3, [r3, #0]
 8003a00:	461c      	mov	r4, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	68db      	ldr	r3, [r3, #12]
 8003a06:	3304      	adds	r3, #4
 8003a08:	881b      	ldrh	r3, [r3, #0]
 8003a0a:	461a      	mov	r2, r3
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	3306      	adds	r3, #6
 8003a12:	881b      	ldrh	r3, [r3, #0]
 8003a14:	9301      	str	r3, [sp, #4]
 8003a16:	9200      	str	r2, [sp, #0]
 8003a18:	4623      	mov	r3, r4
 8003a1a:	460a      	mov	r2, r1
 8003a1c:	4936      	ldr	r1, [pc, #216]	; (8003af8 <Print+0x180>)
 8003a1e:	f01b fc9d 	bl	801f35c <siprintf>
			break;
 8003a22:	e060      	b.n	8003ae6 <Print+0x16e>
		case ROW_USHORT:
			sprintf(lcdAnswer[index]+parameter->param_pos,"%d",*((uint16_t*)parameter->data));
 8003a24:	78fa      	ldrb	r2, [r7, #3]
 8003a26:	4613      	mov	r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	009b      	lsls	r3, r3, #2
 8003a2e:	4a30      	ldr	r2, [pc, #192]	; (8003af0 <Print+0x178>)
 8003a30:	4413      	add	r3, r2
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	79d2      	ldrb	r2, [r2, #7]
 8003a36:	1898      	adds	r0, r3, r2
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	881b      	ldrh	r3, [r3, #0]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	492e      	ldr	r1, [pc, #184]	; (8003afc <Print+0x184>)
 8003a42:	f01b fc8b 	bl	801f35c <siprintf>
			break;
 8003a46:	e04e      	b.n	8003ae6 <Print+0x16e>
		case ROW_FLOAT:
			sprintf(lcdAnswer[index]+parameter->param_pos,"%f",*((float*)parameter->data));
 8003a48:	78fa      	ldrb	r2, [r7, #3]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	009b      	lsls	r3, r3, #2
 8003a4e:	4413      	add	r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	4a27      	ldr	r2, [pc, #156]	; (8003af0 <Print+0x178>)
 8003a54:	4413      	add	r3, r2
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	79d2      	ldrb	r2, [r2, #7]
 8003a5a:	189c      	adds	r4, r3, r2
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fc fd70 	bl	8000548 <__aeabi_f2d>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	460b      	mov	r3, r1
 8003a6c:	4924      	ldr	r1, [pc, #144]	; (8003b00 <Print+0x188>)
 8003a6e:	4620      	mov	r0, r4
 8003a70:	f01b fc74 	bl	801f35c <siprintf>
			break;
 8003a74:	e037      	b.n	8003ae6 <Print+0x16e>
		case ROW_UINT:
			sprintf(lcdAnswer[index]+parameter->param_pos,"%d",*((uint32_t*)parameter->data));
 8003a76:	78fa      	ldrb	r2, [r7, #3]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4a1b      	ldr	r2, [pc, #108]	; (8003af0 <Print+0x178>)
 8003a82:	4413      	add	r3, r2
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	79d2      	ldrb	r2, [r2, #7]
 8003a88:	1898      	adds	r0, r3, r2
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	461a      	mov	r2, r3
 8003a92:	491a      	ldr	r1, [pc, #104]	; (8003afc <Print+0x184>)
 8003a94:	f01b fc62 	bl	801f35c <siprintf>
			break;
 8003a98:	e025      	b.n	8003ae6 <Print+0x16e>
		case ROW_BINARY_12:
			temp = *(uint16_t*)parameter->data;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	881b      	ldrh	r3, [r3, #0]
 8003aa0:	817b      	strh	r3, [r7, #10]
			for (int j = 0; j < 12; ++j) {
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60fb      	str	r3, [r7, #12]
 8003aa6:	e01a      	b.n	8003ade <Print+0x166>
				uint8_t num = (temp & (1<<j))>0;
 8003aa8:	897a      	ldrh	r2, [r7, #10]
 8003aaa:	2101      	movs	r1, #1
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	bfcc      	ite	gt
 8003ab8:	2301      	movgt	r3, #1
 8003aba:	2300      	movle	r3, #0
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	727b      	strb	r3, [r7, #9]
				sprintf(lcdAnswer[2]+parameter->param_pos+j,"%d",num);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	79db      	ldrb	r3, [r3, #7]
 8003ac4:	461a      	mov	r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4413      	add	r3, r2
 8003aca:	4a0e      	ldr	r2, [pc, #56]	; (8003b04 <Print+0x18c>)
 8003acc:	4413      	add	r3, r2
 8003ace:	7a7a      	ldrb	r2, [r7, #9]
 8003ad0:	490a      	ldr	r1, [pc, #40]	; (8003afc <Print+0x184>)
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f01b fc42 	bl	801f35c <siprintf>
			for (int j = 0; j < 12; ++j) {
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	3301      	adds	r3, #1
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2b0b      	cmp	r3, #11
 8003ae2:	dde1      	ble.n	8003aa8 <Print+0x130>
			}

		default:
			break;
 8003ae4:	bf00      	nop
	}
}
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bdb0      	pop	{r4, r5, r7, pc}
 8003aec:	20000915 	.word	0x20000915
 8003af0:	20007084 	.word	0x20007084
 8003af4:	200070d8 	.word	0x200070d8
 8003af8:	08023684 	.word	0x08023684
 8003afc:	08023698 	.word	0x08023698
 8003b00:	0802369c 	.word	0x0802369c
 8003b04:	200070ac 	.word	0x200070ac

08003b08 <AcceptEdit>:

static void AcceptEdit(Row *par)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b084      	sub	sp, #16
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
	if(editMode==0)return;
 8003b10:	4b42      	ldr	r3, [pc, #264]	; (8003c1c <AcceptEdit+0x114>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d07c      	beq.n	8003c12 <AcceptEdit+0x10a>
	if(par->isEnum)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	7a1b      	ldrb	r3, [r3, #8]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d027      	beq.n	8003b70 <AcceptEdit+0x68>
	{
		switch (par->type) {
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	7d5b      	ldrb	r3, [r3, #21]
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d01d      	beq.n	8003b64 <AcceptEdit+0x5c>
 8003b28:	2b02      	cmp	r3, #2
 8003b2a:	dc66      	bgt.n	8003bfa <AcceptEdit+0xf2>
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <AcceptEdit+0x2e>
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d00c      	beq.n	8003b4e <AcceptEdit+0x46>
				break;
			case ROW_FLOAT:
				*((float*)par->data) = currentEnumKey;
				break;
			default:
				break;
 8003b34:	e061      	b.n	8003bfa <AcceptEdit+0xf2>
				*((uint16_t*)par->data) = (uint16_t)currentEnumKey;
 8003b36:	4b3a      	ldr	r3, [pc, #232]	; (8003c20 <AcceptEdit+0x118>)
 8003b38:	edd3 7a00 	vldr	s15, [r3]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b44:	ee17 2a90 	vmov	r2, s15
 8003b48:	b292      	uxth	r2, r2
 8003b4a:	801a      	strh	r2, [r3, #0]
				break;
 8003b4c:	e058      	b.n	8003c00 <AcceptEdit+0xf8>
				*((uint32_t*)par->data) = (uint32_t)currentEnumKey;
 8003b4e:	4b34      	ldr	r3, [pc, #208]	; (8003c20 <AcceptEdit+0x118>)
 8003b50:	edd3 7a00 	vldr	s15, [r3]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b5c:	ee17 2a90 	vmov	r2, s15
 8003b60:	601a      	str	r2, [r3, #0]
				break;
 8003b62:	e04d      	b.n	8003c00 <AcceptEdit+0xf8>
				*((float*)par->data) = currentEnumKey;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	4a2d      	ldr	r2, [pc, #180]	; (8003c20 <AcceptEdit+0x118>)
 8003b6a:	6812      	ldr	r2, [r2, #0]
 8003b6c:	601a      	str	r2, [r3, #0]
				break;
 8003b6e:	e047      	b.n	8003c00 <AcceptEdit+0xf8>
		}
	}
	else
	{
		int tmpi = 0;
 8003b70:	2300      	movs	r3, #0
 8003b72:	60fb      	str	r3, [r7, #12]
		float tmpf;
		switch (par->type) {
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	7d5b      	ldrb	r3, [r3, #21]
 8003b78:	2b04      	cmp	r3, #4
 8003b7a:	d840      	bhi.n	8003bfe <AcceptEdit+0xf6>
 8003b7c:	a201      	add	r2, pc, #4	; (adr r2, 8003b84 <AcceptEdit+0x7c>)
 8003b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b82:	bf00      	nop
 8003b84:	08003bd9 	.word	0x08003bd9
 8003b88:	08003bb9 	.word	0x08003bb9
 8003b8c:	08003ba1 	.word	0x08003ba1
 8003b90:	08003bff 	.word	0x08003bff
 8003b94:	08003b99 	.word	0x08003b99
			case ROW_ETH_ADDR:
				ParseEthernetAddress(par);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f9a7 	bl	8003eec <ParseEthernetAddress>
				break;
 8003b9e:	e02f      	b.n	8003c00 <AcceptEdit+0xf8>
			case ROW_FLOAT:
				sscanf(editedValue+par->param_pos, "%f", (float*)par->data);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	79db      	ldrb	r3, [r3, #7]
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4b1f      	ldr	r3, [pc, #124]	; (8003c24 <AcceptEdit+0x11c>)
 8003ba8:	18d0      	adds	r0, r2, r3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	461a      	mov	r2, r3
 8003bb0:	491d      	ldr	r1, [pc, #116]	; (8003c28 <AcceptEdit+0x120>)
 8003bb2:	f01b fbf3 	bl	801f39c <siscanf>
				break;
 8003bb6:	e023      	b.n	8003c00 <AcceptEdit+0xf8>
			case ROW_UINT:
				sscanf(editedValue+par->param_pos, "%d", &tmpi);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	79db      	ldrb	r3, [r3, #7]
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	4b19      	ldr	r3, [pc, #100]	; (8003c24 <AcceptEdit+0x11c>)
 8003bc0:	4413      	add	r3, r2
 8003bc2:	f107 020c 	add.w	r2, r7, #12
 8003bc6:	4919      	ldr	r1, [pc, #100]	; (8003c2c <AcceptEdit+0x124>)
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f01b fbe7 	bl	801f39c <siscanf>
				*((uint32_t*)(par->data)) = tmpi;
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	601a      	str	r2, [r3, #0]
				break;
 8003bd6:	e013      	b.n	8003c00 <AcceptEdit+0xf8>
			case ROW_USHORT:
				sscanf(editedValue+par->param_pos, "%d", &tmpi);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	79db      	ldrb	r3, [r3, #7]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	4b11      	ldr	r3, [pc, #68]	; (8003c24 <AcceptEdit+0x11c>)
 8003be0:	4413      	add	r3, r2
 8003be2:	f107 020c 	add.w	r2, r7, #12
 8003be6:	4911      	ldr	r1, [pc, #68]	; (8003c2c <AcceptEdit+0x124>)
 8003be8:	4618      	mov	r0, r3
 8003bea:	f01b fbd7 	bl	801f39c <siscanf>
				*((uint16_t*)(par->data)) = (uint16_t)tmpi;
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	b292      	uxth	r2, r2
 8003bf6:	801a      	strh	r2, [r3, #0]
				break;
 8003bf8:	e002      	b.n	8003c00 <AcceptEdit+0xf8>
				break;
 8003bfa:	bf00      	nop
 8003bfc:	e000      	b.n	8003c00 <AcceptEdit+0xf8>
			default:
				break;
 8003bfe:	bf00      	nop
		}
	}
	settingsSaveFRAM();
 8003c00:	f002 fa02 	bl	8006008 <settingsSaveFRAM>
	editMode = 0;
 8003c04:	4b05      	ldr	r3, [pc, #20]	; (8003c1c <AcceptEdit+0x114>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	701a      	strb	r2, [r3, #0]
	currentCursorPosition = -1;
 8003c0a:	4b09      	ldr	r3, [pc, #36]	; (8003c30 <AcceptEdit+0x128>)
 8003c0c:	22ff      	movs	r2, #255	; 0xff
 8003c0e:	701a      	strb	r2, [r3, #0]
 8003c10:	e000      	b.n	8003c14 <AcceptEdit+0x10c>
	if(editMode==0)return;
 8003c12:	bf00      	nop

}
 8003c14:	3710      	adds	r7, #16
 8003c16:	46bd      	mov	sp, r7
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	bf00      	nop
 8003c1c:	20000915 	.word	0x20000915
 8003c20:	20000918 	.word	0x20000918
 8003c24:	200070d8 	.word	0x200070d8
 8003c28:	0802369c 	.word	0x0802369c
 8003c2c:	08023698 	.word	0x08023698
 8003c30:	200000c3 	.word	0x200000c3

08003c34 <ShiftCursor>:

// direction == 0 ->left
// direction == 1 ->right
// return position
static int ShiftCursor(uint8_t direction, Row *par, uint8_t stepSize)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	4603      	mov	r3, r0
 8003c3c:	6039      	str	r1, [r7, #0]
 8003c3e:	71fb      	strb	r3, [r7, #7]
 8003c40:	4613      	mov	r3, r2
 8003c42:	71bb      	strb	r3, [r7, #6]
	if(!editMode)return -1;
 8003c44:	4b2d      	ldr	r3, [pc, #180]	; (8003cfc <ShiftCursor+0xc8>)
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d102      	bne.n	8003c52 <ShiftCursor+0x1e>
 8003c4c:	f04f 33ff 	mov.w	r3, #4294967295
 8003c50:	e04d      	b.n	8003cee <ShiftCursor+0xba>
	if(par->isEnum)return -1;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	7a1b      	ldrb	r3, [r3, #8]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d002      	beq.n	8003c60 <ShiftCursor+0x2c>
 8003c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c5e:	e046      	b.n	8003cee <ShiftCursor+0xba>
	int tempPos = direction ? currentCursorPosition+stepSize : currentCursorPosition-stepSize;
 8003c60:	79fb      	ldrb	r3, [r7, #7]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d006      	beq.n	8003c74 <ShiftCursor+0x40>
 8003c66:	4b26      	ldr	r3, [pc, #152]	; (8003d00 <ShiftCursor+0xcc>)
 8003c68:	f993 3000 	ldrsb.w	r3, [r3]
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	79bb      	ldrb	r3, [r7, #6]
 8003c70:	4413      	add	r3, r2
 8003c72:	e005      	b.n	8003c80 <ShiftCursor+0x4c>
 8003c74:	4b22      	ldr	r3, [pc, #136]	; (8003d00 <ShiftCursor+0xcc>)
 8003c76:	f993 3000 	ldrsb.w	r3, [r3]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	79bb      	ldrb	r3, [r7, #6]
 8003c7e:	1ad3      	subs	r3, r2, r3
 8003c80:	60fb      	str	r3, [r7, #12]
	// Проверка на границы

	if(tempPos<par->param_pos)tempPos = par->param_pos;
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	79db      	ldrb	r3, [r3, #7]
 8003c86:	461a      	mov	r2, r3
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	da02      	bge.n	8003c94 <ShiftCursor+0x60>
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	79db      	ldrb	r3, [r3, #7]
 8003c92:	60fb      	str	r3, [r7, #12]
	if(tempPos>19)tempPos = 19;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	2b13      	cmp	r3, #19
 8003c98:	dd05      	ble.n	8003ca6 <ShiftCursor+0x72>
 8003c9a:	2313      	movs	r3, #19
 8003c9c:	60fb      	str	r3, [r7, #12]
	while(editedValue[tempPos]==0 && tempPos>par->param_pos)
 8003c9e:	e002      	b.n	8003ca6 <ShiftCursor+0x72>
	{
		tempPos--;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	60fb      	str	r3, [r7, #12]
	while(editedValue[tempPos]==0 && tempPos>par->param_pos)
 8003ca6:	4a17      	ldr	r2, [pc, #92]	; (8003d04 <ShiftCursor+0xd0>)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4413      	add	r3, r2
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d105      	bne.n	8003cbe <ShiftCursor+0x8a>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	79db      	ldrb	r3, [r3, #7]
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	dcf0      	bgt.n	8003ca0 <ShiftCursor+0x6c>
	}
	switch (par->type) {
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	7d5b      	ldrb	r3, [r3, #21]
 8003cc2:	2b04      	cmp	r3, #4
 8003cc4:	d10f      	bne.n	8003ce6 <ShiftCursor+0xb2>
		case ROW_ETH_ADDR:
			if(editedValue[tempPos]=='.')
 8003cc6:	4a0f      	ldr	r2, [pc, #60]	; (8003d04 <ShiftCursor+0xd0>)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4413      	add	r3, r2
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	2b2e      	cmp	r3, #46	; 0x2e
 8003cd0:	d10b      	bne.n	8003cea <ShiftCursor+0xb6>
			{
				tempPos = direction ? tempPos+1 : tempPos-1;
 8003cd2:	79fb      	ldrb	r3, [r7, #7]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d002      	beq.n	8003cde <ShiftCursor+0xaa>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	3301      	adds	r3, #1
 8003cdc:	e001      	b.n	8003ce2 <ShiftCursor+0xae>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	3b01      	subs	r3, #1
 8003ce2:	60fb      	str	r3, [r7, #12]
			}
			break;
 8003ce4:	e001      	b.n	8003cea <ShiftCursor+0xb6>
		default:
			break;
 8003ce6:	bf00      	nop
 8003ce8:	e000      	b.n	8003cec <ShiftCursor+0xb8>
			break;
 8003cea:	bf00      	nop
	}
	return tempPos;
 8003cec:	68fb      	ldr	r3, [r7, #12]
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	20000915 	.word	0x20000915
 8003d00:	200000c3 	.word	0x200000c3
 8003d04:	200070d8 	.word	0x200070d8

08003d08 <OnNumberPressKey>:

static uint8_t OnNumberPressKey(uint8_t key)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	4603      	mov	r3, r0
 8003d10:	71fb      	strb	r3, [r7, #7]
	if(key>9)return 0;
 8003d12:	79fb      	ldrb	r3, [r7, #7]
 8003d14:	2b09      	cmp	r3, #9
 8003d16:	d901      	bls.n	8003d1c <OnNumberPressKey+0x14>
 8003d18:	2300      	movs	r3, #0
 8003d1a:	e032      	b.n	8003d82 <OnNumberPressKey+0x7a>
	uint8_t i = 0;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	73fb      	strb	r3, [r7, #15]
	if(!editMode)return 0;
 8003d20:	4b1a      	ldr	r3, [pc, #104]	; (8003d8c <OnNumberPressKey+0x84>)
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d101      	bne.n	8003d2c <OnNumberPressKey+0x24>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	e02a      	b.n	8003d82 <OnNumberPressKey+0x7a>
	if(currentParameters==NULL)return 0;
 8003d2c:	4b18      	ldr	r3, [pc, #96]	; (8003d90 <OnNumberPressKey+0x88>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <OnNumberPressKey+0x30>
 8003d34:	2300      	movs	r3, #0
 8003d36:	e024      	b.n	8003d82 <OnNumberPressKey+0x7a>
	Row *par = currentParameters+paramIndex;
 8003d38:	4b15      	ldr	r3, [pc, #84]	; (8003d90 <OnNumberPressKey+0x88>)
 8003d3a:	681a      	ldr	r2, [r3, #0]
 8003d3c:	4b15      	ldr	r3, [pc, #84]	; (8003d94 <OnNumberPressKey+0x8c>)
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	4619      	mov	r1, r3
 8003d42:	460b      	mov	r3, r1
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	440b      	add	r3, r1
 8003d48:	00db      	lsls	r3, r3, #3
 8003d4a:	4413      	add	r3, r2
 8003d4c:	60bb      	str	r3, [r7, #8]
	switch (par->type) {
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	7d5b      	ldrb	r3, [r3, #21]
 8003d52:	2b04      	cmp	r3, #4
		case ROW_ETH_ADDR:
			break;
		default:
			break;
 8003d54:	bf00      	nop
	}
	editedValue[currentCursorPosition] = 48+key;
 8003d56:	4b10      	ldr	r3, [pc, #64]	; (8003d98 <OnNumberPressKey+0x90>)
 8003d58:	f993 3000 	ldrsb.w	r3, [r3]
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	79fb      	ldrb	r3, [r7, #7]
 8003d60:	3330      	adds	r3, #48	; 0x30
 8003d62:	b2d9      	uxtb	r1, r3
 8003d64:	4b0d      	ldr	r3, [pc, #52]	; (8003d9c <OnNumberPressKey+0x94>)
 8003d66:	5499      	strb	r1, [r3, r2]
	currentCursorPosition = ShiftCursor(1, par, 1);
 8003d68:	2201      	movs	r2, #1
 8003d6a:	68b9      	ldr	r1, [r7, #8]
 8003d6c:	2001      	movs	r0, #1
 8003d6e:	f7ff ff61 	bl	8003c34 <ShiftCursor>
 8003d72:	4603      	mov	r3, r0
 8003d74:	b25a      	sxtb	r2, r3
 8003d76:	4b08      	ldr	r3, [pc, #32]	; (8003d98 <OnNumberPressKey+0x90>)
 8003d78:	701a      	strb	r2, [r3, #0]
	ShowParameter(par);
 8003d7a:	68b8      	ldr	r0, [r7, #8]
 8003d7c:	f7ff fa44 	bl	8003208 <ShowParameter>
	return 1;
 8003d80:	2301      	movs	r3, #1
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	20000915 	.word	0x20000915
 8003d90:	20000910 	.word	0x20000910
 8003d94:	20000914 	.word	0x20000914
 8003d98:	200000c3 	.word	0x200000c3
 8003d9c:	200070d8 	.word	0x200070d8

08003da0 <OnDeletePressKey>:

static uint8_t OnDeletePressKey()
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
	uint8_t i;
	if(!editMode)return 0;
 8003da6:	4b26      	ldr	r3, [pc, #152]	; (8003e40 <OnDeletePressKey+0xa0>)
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <OnDeletePressKey+0x12>
 8003dae:	2300      	movs	r3, #0
 8003db0:	e041      	b.n	8003e36 <OnDeletePressKey+0x96>
	if(currentParameters==NULL)return 0;
 8003db2:	4b24      	ldr	r3, [pc, #144]	; (8003e44 <OnDeletePressKey+0xa4>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <OnDeletePressKey+0x1e>
 8003dba:	2300      	movs	r3, #0
 8003dbc:	e03b      	b.n	8003e36 <OnDeletePressKey+0x96>
	Row *par = currentParameters+paramIndex;
 8003dbe:	4b21      	ldr	r3, [pc, #132]	; (8003e44 <OnDeletePressKey+0xa4>)
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	4b21      	ldr	r3, [pc, #132]	; (8003e48 <OnDeletePressKey+0xa8>)
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	460b      	mov	r3, r1
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	440b      	add	r3, r1
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	4413      	add	r3, r2
 8003dd2:	603b      	str	r3, [r7, #0]
	switch (par->type) {
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	7d5b      	ldrb	r3, [r3, #21]
 8003dd8:	2b04      	cmp	r3, #4
 8003dda:	d101      	bne.n	8003de0 <OnDeletePressKey+0x40>
		case ROW_ETH_ADDR:
			return 0;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	e02a      	b.n	8003e36 <OnDeletePressKey+0x96>
		default:
			editedValue[par->param_len+par->param_pos-1]='0';
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	799b      	ldrb	r3, [r3, #6]
 8003de4:	461a      	mov	r2, r3
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	79db      	ldrb	r3, [r3, #7]
 8003dea:	4413      	add	r3, r2
 8003dec:	3b01      	subs	r3, #1
 8003dee:	4a17      	ldr	r2, [pc, #92]	; (8003e4c <OnDeletePressKey+0xac>)
 8003df0:	2130      	movs	r1, #48	; 0x30
 8003df2:	54d1      	strb	r1, [r2, r3]
			for (i = currentCursorPosition; i < par->param_len+par->param_pos-1; ++i) {
 8003df4:	4b16      	ldr	r3, [pc, #88]	; (8003e50 <OnDeletePressKey+0xb0>)
 8003df6:	f993 3000 	ldrsb.w	r3, [r3]
 8003dfa:	71fb      	strb	r3, [r7, #7]
 8003dfc:	e009      	b.n	8003e12 <OnDeletePressKey+0x72>
				editedValue[i] = editedValue[i+1];
 8003dfe:	79fb      	ldrb	r3, [r7, #7]
 8003e00:	1c5a      	adds	r2, r3, #1
 8003e02:	79fb      	ldrb	r3, [r7, #7]
 8003e04:	4911      	ldr	r1, [pc, #68]	; (8003e4c <OnDeletePressKey+0xac>)
 8003e06:	5c89      	ldrb	r1, [r1, r2]
 8003e08:	4a10      	ldr	r2, [pc, #64]	; (8003e4c <OnDeletePressKey+0xac>)
 8003e0a:	54d1      	strb	r1, [r2, r3]
			for (i = currentCursorPosition; i < par->param_len+par->param_pos-1; ++i) {
 8003e0c:	79fb      	ldrb	r3, [r7, #7]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	71fb      	strb	r3, [r7, #7]
 8003e12:	79fa      	ldrb	r2, [r7, #7]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	799b      	ldrb	r3, [r3, #6]
 8003e18:	4619      	mov	r1, r3
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	79db      	ldrb	r3, [r3, #7]
 8003e1e:	440b      	add	r3, r1
 8003e20:	3b01      	subs	r3, #1
 8003e22:	429a      	cmp	r2, r3
 8003e24:	dbeb      	blt.n	8003dfe <OnDeletePressKey+0x5e>
			}
			editedValue[19]=0;
 8003e26:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <OnDeletePressKey+0xac>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	74da      	strb	r2, [r3, #19]
			break;
 8003e2c:	bf00      	nop
	}
	ShowParameter(par);
 8003e2e:	6838      	ldr	r0, [r7, #0]
 8003e30:	f7ff f9ea 	bl	8003208 <ShowParameter>
	return 1;
 8003e34:	2301      	movs	r3, #1
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3708      	adds	r7, #8
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	bf00      	nop
 8003e40:	20000915 	.word	0x20000915
 8003e44:	20000910 	.word	0x20000910
 8003e48:	20000914 	.word	0x20000914
 8003e4c:	200070d8 	.word	0x200070d8
 8003e50:	200000c3 	.word	0x200000c3

08003e54 <OnDecPressKey>:

static uint8_t OnDecPressKey()
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af00      	add	r7, sp, #0

	uint8_t i = 0;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	71fb      	strb	r3, [r7, #7]
	if(!editMode)return 0;
 8003e5e:	4b1e      	ldr	r3, [pc, #120]	; (8003ed8 <OnDecPressKey+0x84>)
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d101      	bne.n	8003e6a <OnDecPressKey+0x16>
 8003e66:	2300      	movs	r3, #0
 8003e68:	e031      	b.n	8003ece <OnDecPressKey+0x7a>
	if(currentParameters==NULL)return 0;
 8003e6a:	4b1c      	ldr	r3, [pc, #112]	; (8003edc <OnDecPressKey+0x88>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d101      	bne.n	8003e76 <OnDecPressKey+0x22>
 8003e72:	2300      	movs	r3, #0
 8003e74:	e02b      	b.n	8003ece <OnDecPressKey+0x7a>
	Row *par = currentParameters+paramIndex;
 8003e76:	4b19      	ldr	r3, [pc, #100]	; (8003edc <OnDecPressKey+0x88>)
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	4b19      	ldr	r3, [pc, #100]	; (8003ee0 <OnDecPressKey+0x8c>)
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	4619      	mov	r1, r3
 8003e80:	460b      	mov	r3, r1
 8003e82:	005b      	lsls	r3, r3, #1
 8003e84:	440b      	add	r3, r1
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	4413      	add	r3, r2
 8003e8a:	603b      	str	r3, [r7, #0]
	if(par->type != ROW_FLOAT)return 0;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	7d5b      	ldrb	r3, [r3, #21]
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d001      	beq.n	8003e98 <OnDecPressKey+0x44>
 8003e94:	2300      	movs	r3, #0
 8003e96:	e01a      	b.n	8003ece <OnDecPressKey+0x7a>
	switch (par->type) {
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	7d5b      	ldrb	r3, [r3, #21]
 8003e9c:	2b04      	cmp	r3, #4
 8003e9e:	d101      	bne.n	8003ea4 <OnDecPressKey+0x50>
		case ROW_ETH_ADDR:
			return 0;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	e014      	b.n	8003ece <OnDecPressKey+0x7a>
		default:
			break;
 8003ea4:	bf00      	nop
	}
	editedValue[currentCursorPosition] = '.';
 8003ea6:	4b0f      	ldr	r3, [pc, #60]	; (8003ee4 <OnDecPressKey+0x90>)
 8003ea8:	f993 3000 	ldrsb.w	r3, [r3]
 8003eac:	461a      	mov	r2, r3
 8003eae:	4b0e      	ldr	r3, [pc, #56]	; (8003ee8 <OnDecPressKey+0x94>)
 8003eb0:	212e      	movs	r1, #46	; 0x2e
 8003eb2:	5499      	strb	r1, [r3, r2]
	currentCursorPosition = ShiftCursor(1, par, 1);
 8003eb4:	2201      	movs	r2, #1
 8003eb6:	6839      	ldr	r1, [r7, #0]
 8003eb8:	2001      	movs	r0, #1
 8003eba:	f7ff febb 	bl	8003c34 <ShiftCursor>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	b25a      	sxtb	r2, r3
 8003ec2:	4b08      	ldr	r3, [pc, #32]	; (8003ee4 <OnDecPressKey+0x90>)
 8003ec4:	701a      	strb	r2, [r3, #0]
	ShowParameter(par);
 8003ec6:	6838      	ldr	r0, [r7, #0]
 8003ec8:	f7ff f99e 	bl	8003208 <ShowParameter>
	return 1;
 8003ecc:	2301      	movs	r3, #1
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	20000915 	.word	0x20000915
 8003edc:	20000910 	.word	0x20000910
 8003ee0:	20000914 	.word	0x20000914
 8003ee4:	200000c3 	.word	0x200000c3
 8003ee8:	200070d8 	.word	0x200070d8

08003eec <ParseEthernetAddress>:

static void ParseEthernetAddress(Row *par)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
	int tmp;
	char *p = editedValue+par->param_pos;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	79db      	ldrb	r3, [r3, #7]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	4b18      	ldr	r3, [pc, #96]	; (8003f5c <ParseEthernetAddress+0x70>)
 8003efc:	4413      	add	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 4; ++i) {
 8003f00:	2300      	movs	r3, #0
 8003f02:	613b      	str	r3, [r7, #16]
 8003f04:	e021      	b.n	8003f4a <ParseEthernetAddress+0x5e>
		sscanf(p, "%d", &tmp);
 8003f06:	f107 030c 	add.w	r3, r7, #12
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	4914      	ldr	r1, [pc, #80]	; (8003f60 <ParseEthernetAddress+0x74>)
 8003f0e:	6978      	ldr	r0, [r7, #20]
 8003f10:	f01b fa44 	bl	801f39c <siscanf>
		p = strchr(p, '.');
 8003f14:	212e      	movs	r1, #46	; 0x2e
 8003f16:	6978      	ldr	r0, [r7, #20]
 8003f18:	f01b fab1 	bl	801f47e <strchr>
 8003f1c:	6178      	str	r0, [r7, #20]
		if(p!=NULL)p=p+1;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d002      	beq.n	8003f2a <ParseEthernetAddress+0x3e>
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	3301      	adds	r3, #1
 8003f28:	617b      	str	r3, [r7, #20]
		*((uint16_t*)par->data+i) = tmp%256;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	425a      	negs	r2, r3
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	bf58      	it	pl
 8003f34:	4253      	negpl	r3, r2
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	68d1      	ldr	r1, [r2, #12]
 8003f3a:	693a      	ldr	r2, [r7, #16]
 8003f3c:	0052      	lsls	r2, r2, #1
 8003f3e:	440a      	add	r2, r1
 8003f40:	b29b      	uxth	r3, r3
 8003f42:	8013      	strh	r3, [r2, #0]
	for (int i = 0; i < 4; ++i) {
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	3301      	adds	r3, #1
 8003f48:	613b      	str	r3, [r7, #16]
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	2b03      	cmp	r3, #3
 8003f4e:	ddda      	ble.n	8003f06 <ParseEthernetAddress+0x1a>
	}
}
 8003f50:	bf00      	nop
 8003f52:	bf00      	nop
 8003f54:	3718      	adds	r7, #24
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
 8003f5a:	bf00      	nop
 8003f5c:	200070d8 	.word	0x200070d8
 8003f60:	08023698 	.word	0x08023698

08003f64 <IsNumber>:

static uint8_t IsNumber(char *symbol)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
	return *symbol>=48 && *symbol<=57;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	2b2f      	cmp	r3, #47	; 0x2f
 8003f72:	d905      	bls.n	8003f80 <IsNumber+0x1c>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	2b39      	cmp	r3, #57	; 0x39
 8003f7a:	d801      	bhi.n	8003f80 <IsNumber+0x1c>
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e000      	b.n	8003f82 <IsNumber+0x1e>
 8003f80:	2300      	movs	r3, #0
 8003f82:	b2db      	uxtb	r3, r3
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <DecIncSymbol>:

static void DecIncSymbol(char *symbol, uint8_t dir)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	460b      	mov	r3, r1
 8003f9a:	70fb      	strb	r3, [r7, #3]
	if(!IsNumber(symbol))return;
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7ff ffe1 	bl	8003f64 <IsNumber>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d01c      	beq.n	8003fe2 <DecIncSymbol+0x52>
	if(dir)
 8003fa8:	78fb      	ldrb	r3, [r7, #3]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00c      	beq.n	8003fc8 <DecIncSymbol+0x38>
	{
		*symbol = *symbol < 57 ? *symbol+1 : 48;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	2b38      	cmp	r3, #56	; 0x38
 8003fb4:	d804      	bhi.n	8003fc0 <DecIncSymbol+0x30>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	3301      	adds	r3, #1
 8003fbc:	b2da      	uxtb	r2, r3
 8003fbe:	e000      	b.n	8003fc2 <DecIncSymbol+0x32>
 8003fc0:	2230      	movs	r2, #48	; 0x30
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	701a      	strb	r2, [r3, #0]
 8003fc6:	e00d      	b.n	8003fe4 <DecIncSymbol+0x54>
	}
	else
	{
		*symbol = *symbol > 48 ? *symbol-1 : 57;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	781b      	ldrb	r3, [r3, #0]
 8003fcc:	2b30      	cmp	r3, #48	; 0x30
 8003fce:	d904      	bls.n	8003fda <DecIncSymbol+0x4a>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	b2da      	uxtb	r2, r3
 8003fd8:	e000      	b.n	8003fdc <DecIncSymbol+0x4c>
 8003fda:	2239      	movs	r2, #57	; 0x39
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	701a      	strb	r2, [r3, #0]
 8003fe0:	e000      	b.n	8003fe4 <DecIncSymbol+0x54>
	if(!IsNumber(symbol))return;
 8003fe2:	bf00      	nop
	}
}
 8003fe4:	3708      	adds	r7, #8
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
	...

08003fec <GetEditedValue>:

static void GetEditedValue(Row *par)
{
 8003fec:	b5b0      	push	{r4, r5, r7, lr}
 8003fee:	b084      	sub	sp, #16
 8003ff0:	af02      	add	r7, sp, #8
 8003ff2:	6078      	str	r0, [r7, #4]
	if(par == NULL)return;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d065      	beq.n	80040c6 <GetEditedValue+0xda>
	switch (par->type) {
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	7d5b      	ldrb	r3, [r3, #21]
 8003ffe:	2b04      	cmp	r3, #4
 8004000:	d863      	bhi.n	80040ca <GetEditedValue+0xde>
 8004002:	a201      	add	r2, pc, #4	; (adr r2, 8004008 <GetEditedValue+0x1c>)
 8004004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004008:	08004079 	.word	0x08004079
 800400c:	0800405b 	.word	0x0800405b
 8004010:	08004097 	.word	0x08004097
 8004014:	080040cb 	.word	0x080040cb
 8004018:	0800401d 	.word	0x0800401d
		case ROW_ETH_ADDR:
			sprintf(editedValue+par->param_pos,"%03d.%03d.%03d.%03d",*((uint16_t*)par->data),*(((uint16_t*)par->data)+1),*(((uint16_t*)par->data)+2),*(((uint16_t*)par->data)+3));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	79db      	ldrb	r3, [r3, #7]
 8004020:	461a      	mov	r2, r3
 8004022:	4b2c      	ldr	r3, [pc, #176]	; (80040d4 <GetEditedValue+0xe8>)
 8004024:	18d0      	adds	r0, r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	881b      	ldrh	r3, [r3, #0]
 800402c:	4619      	mov	r1, r3
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	3302      	adds	r3, #2
 8004034:	881b      	ldrh	r3, [r3, #0]
 8004036:	461c      	mov	r4, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68db      	ldr	r3, [r3, #12]
 800403c:	3304      	adds	r3, #4
 800403e:	881b      	ldrh	r3, [r3, #0]
 8004040:	461a      	mov	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	3306      	adds	r3, #6
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	9301      	str	r3, [sp, #4]
 800404c:	9200      	str	r2, [sp, #0]
 800404e:	4623      	mov	r3, r4
 8004050:	460a      	mov	r2, r1
 8004052:	4921      	ldr	r1, [pc, #132]	; (80040d8 <GetEditedValue+0xec>)
 8004054:	f01b f982 	bl	801f35c <siprintf>
			break;
 8004058:	e038      	b.n	80040cc <GetEditedValue+0xe0>
		case ROW_UINT:
			sprintf(editedValue+par->param_pos,"%0*d",par->param_len, *((uint32_t*)par->data));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	79db      	ldrb	r3, [r3, #7]
 800405e:	461a      	mov	r2, r3
 8004060:	4b1c      	ldr	r3, [pc, #112]	; (80040d4 <GetEditedValue+0xe8>)
 8004062:	18d0      	adds	r0, r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	799b      	ldrb	r3, [r3, #6]
 8004068:	461a      	mov	r2, r3
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	491a      	ldr	r1, [pc, #104]	; (80040dc <GetEditedValue+0xf0>)
 8004072:	f01b f973 	bl	801f35c <siprintf>
			break;
 8004076:	e029      	b.n	80040cc <GetEditedValue+0xe0>
		case ROW_USHORT:
			sprintf(editedValue+par->param_pos,"%0*d",par->param_len, *((uint16_t*)par->data));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	79db      	ldrb	r3, [r3, #7]
 800407c:	461a      	mov	r2, r3
 800407e:	4b15      	ldr	r3, [pc, #84]	; (80040d4 <GetEditedValue+0xe8>)
 8004080:	18d0      	adds	r0, r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	799b      	ldrb	r3, [r3, #6]
 8004086:	461a      	mov	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	881b      	ldrh	r3, [r3, #0]
 800408e:	4913      	ldr	r1, [pc, #76]	; (80040dc <GetEditedValue+0xf0>)
 8004090:	f01b f964 	bl	801f35c <siprintf>
			break;
 8004094:	e01a      	b.n	80040cc <GetEditedValue+0xe0>
		case ROW_FLOAT:
			sprintf(editedValue+par->param_pos,"%0*f",par->param_len, *((float*)par->data));
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	79db      	ldrb	r3, [r3, #7]
 800409a:	461a      	mov	r2, r3
 800409c:	4b0d      	ldr	r3, [pc, #52]	; (80040d4 <GetEditedValue+0xe8>)
 800409e:	18d4      	adds	r4, r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	799b      	ldrb	r3, [r3, #6]
 80040a4:	461d      	mov	r5, r3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4618      	mov	r0, r3
 80040ae:	f7fc fa4b 	bl	8000548 <__aeabi_f2d>
 80040b2:	4602      	mov	r2, r0
 80040b4:	460b      	mov	r3, r1
 80040b6:	e9cd 2300 	strd	r2, r3, [sp]
 80040ba:	462a      	mov	r2, r5
 80040bc:	4908      	ldr	r1, [pc, #32]	; (80040e0 <GetEditedValue+0xf4>)
 80040be:	4620      	mov	r0, r4
 80040c0:	f01b f94c 	bl	801f35c <siprintf>
			break;
 80040c4:	e002      	b.n	80040cc <GetEditedValue+0xe0>
	if(par == NULL)return;
 80040c6:	bf00      	nop
 80040c8:	e000      	b.n	80040cc <GetEditedValue+0xe0>
		default:
			break;
 80040ca:	bf00      	nop
	}

}
 80040cc:	3708      	adds	r7, #8
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bdb0      	pop	{r4, r5, r7, pc}
 80040d2:	bf00      	nop
 80040d4:	200070d8 	.word	0x200070d8
 80040d8:	08023684 	.word	0x08023684
 80040dc:	080236a0 	.word	0x080236a0
 80040e0:	080236a8 	.word	0x080236a8

080040e4 <lcd_init>:


static void sendByte(uint8_t byte, int isData);

void lcd_init()
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCDLED_GPIO_Port, LCDLED_Pin, SET);// Включаем подсветку
 80040e8:	2201      	movs	r2, #1
 80040ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040ee:	481f      	ldr	r0, [pc, #124]	; (800416c <lcd_init+0x88>)
 80040f0:	f005 fd6a 	bl	8009bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCDR_GPIO_Port, LCDR_Pin, RESET);
 80040f4:	2200      	movs	r2, #0
 80040f6:	2110      	movs	r1, #16
 80040f8:	481c      	ldr	r0, [pc, #112]	; (800416c <lcd_init+0x88>)
 80040fa:	f005 fd65 	bl	8009bc8 <HAL_GPIO_WritePin>
	HAL_Delay(15);
 80040fe:	200f      	movs	r0, #15
 8004100:	f002 ff6c 	bl	8006fdc <HAL_Delay>

	sendByte(0x33, 0); // шлем в одном байте два 0011
 8004104:	2100      	movs	r1, #0
 8004106:	2033      	movs	r0, #51	; 0x33
 8004108:	f000 f892 	bl	8004230 <sendByte>
	HAL_Delay(1);
 800410c:	2001      	movs	r0, #1
 800410e:	f002 ff65 	bl	8006fdc <HAL_Delay>

	sendByte(0x32, 0); // шлем в одном байте  00110010
 8004112:	2100      	movs	r1, #0
 8004114:	2032      	movs	r0, #50	; 0x32
 8004116:	f000 f88b 	bl	8004230 <sendByte>
	HAL_Delay(1);
 800411a:	2001      	movs	r0, #1
 800411c:	f002 ff5e 	bl	8006fdc <HAL_Delay>

	sendByte(DATA_BUS_4BIT_PAGE1, 0); // включаем режим 4 бит
 8004120:	2100      	movs	r1, #0
 8004122:	202a      	movs	r0, #42	; 0x2a
 8004124:	f000 f884 	bl	8004230 <sendByte>
	HAL_Delay(2);
 8004128:	2002      	movs	r0, #2
 800412a:	f002 ff57 	bl	8006fdc <HAL_Delay>
	sendByte(DISPLAY_OFF, 0); // выключаем дисплей
 800412e:	2100      	movs	r1, #0
 8004130:	2008      	movs	r0, #8
 8004132:	f000 f87d 	bl	8004230 <sendByte>
	HAL_Delay(1);
 8004136:	2001      	movs	r0, #1
 8004138:	f002 ff50 	bl	8006fdc <HAL_Delay>
	sendByte(CLEAR_DISPLAY, 0); // очищаем дисплей
 800413c:	2100      	movs	r1, #0
 800413e:	2001      	movs	r0, #1
 8004140:	f000 f876 	bl	8004230 <sendByte>
	HAL_Delay(2);
 8004144:	2002      	movs	r0, #2
 8004146:	f002 ff49 	bl	8006fdc <HAL_Delay>
	sendByte(ENTRY_MODE_SET, 0); //ставим режим смещение курсора экран не смещается
 800414a:	2100      	movs	r1, #0
 800414c:	2006      	movs	r0, #6
 800414e:	f000 f86f 	bl	8004230 <sendByte>
	HAL_Delay(1);
 8004152:	2001      	movs	r0, #1
 8004154:	f002 ff42 	bl	8006fdc <HAL_Delay>
	sendByte(DISPLAY_ON_CURSOR_OFF, 0);// включаем дисплей и убираем курсор
 8004158:	2100      	movs	r1, #0
 800415a:	200c      	movs	r0, #12
 800415c:	f000 f868 	bl	8004230 <sendByte>
	HAL_Delay(1);
 8004160:	2001      	movs	r0, #1
 8004162:	f002 ff3b 	bl	8006fdc <HAL_Delay>
}
 8004166:	bf00      	nop
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	40020400 	.word	0x40020400

08004170 <SetCursor>:

void SetCursor(int position)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b084      	sub	sp, #16
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
	if(position==-1 || position>79)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800417e:	d002      	beq.n	8004186 <SetCursor+0x16>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2b4f      	cmp	r3, #79	; 0x4f
 8004184:	dd07      	ble.n	8004196 <SetCursor+0x26>
	{
		sendByte(DISPLAY_ON_CURSOR_OFF, 0);// включаем дисплей и убираем курсор
 8004186:	2100      	movs	r1, #0
 8004188:	200c      	movs	r0, #12
 800418a:	f000 f851 	bl	8004230 <sendByte>
		HAL_Delay(1);
 800418e:	2001      	movs	r0, #1
 8004190:	f002 ff24 	bl	8006fdc <HAL_Delay>
 8004194:	e047      	b.n	8004226 <SetCursor+0xb6>
	}
	else
	{
		sendByte(DISPLAY_ON_CURSOR_ON, 0);// включаем дисплей и ставим курсор
 8004196:	2100      	movs	r1, #0
 8004198:	200f      	movs	r0, #15
 800419a:	f000 f849 	bl	8004230 <sendByte>
		HAL_Delay(1);
 800419e:	2001      	movs	r0, #1
 80041a0:	f002 ff1c 	bl	8006fdc <HAL_Delay>
		uint8_t row = position/20;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a21      	ldr	r2, [pc, #132]	; (800422c <SetCursor+0xbc>)
 80041a8:	fb82 1203 	smull	r1, r2, r2, r3
 80041ac:	10d2      	asrs	r2, r2, #3
 80041ae:	17db      	asrs	r3, r3, #31
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	73bb      	strb	r3, [r7, #14]
		uint8_t col = position%20;
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	4b1d      	ldr	r3, [pc, #116]	; (800422c <SetCursor+0xbc>)
 80041b8:	fb83 1302 	smull	r1, r3, r3, r2
 80041bc:	10d9      	asrs	r1, r3, #3
 80041be:	17d3      	asrs	r3, r2, #31
 80041c0:	1ac9      	subs	r1, r1, r3
 80041c2:	460b      	mov	r3, r1
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	440b      	add	r3, r1
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	1ad1      	subs	r1, r2, r3
 80041cc:	460b      	mov	r3, r1
 80041ce:	737b      	strb	r3, [r7, #13]
		uint8_t addr = 0;
 80041d0:	2300      	movs	r3, #0
 80041d2:	73fb      	strb	r3, [r7, #15]
		switch (row) {
 80041d4:	7bbb      	ldrb	r3, [r7, #14]
 80041d6:	2b03      	cmp	r3, #3
 80041d8:	d824      	bhi.n	8004224 <SetCursor+0xb4>
 80041da:	a201      	add	r2, pc, #4	; (adr r2, 80041e0 <SetCursor+0x70>)
 80041dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e0:	080041f1 	.word	0x080041f1
 80041e4:	080041f7 	.word	0x080041f7
 80041e8:	080041fd 	.word	0x080041fd
 80041ec:	08004203 	.word	0x08004203
			case 0:
				addr = 0x0;
 80041f0:	2300      	movs	r3, #0
 80041f2:	73fb      	strb	r3, [r7, #15]
				break;
 80041f4:	e008      	b.n	8004208 <SetCursor+0x98>
			case 1:
				addr = 0x40;
 80041f6:	2340      	movs	r3, #64	; 0x40
 80041f8:	73fb      	strb	r3, [r7, #15]
				break;
 80041fa:	e005      	b.n	8004208 <SetCursor+0x98>
			case 2:
				addr = 0x14;
 80041fc:	2314      	movs	r3, #20
 80041fe:	73fb      	strb	r3, [r7, #15]
				break;
 8004200:	e002      	b.n	8004208 <SetCursor+0x98>
			case 3:
				addr = 0x54;
 8004202:	2354      	movs	r3, #84	; 0x54
 8004204:	73fb      	strb	r3, [r7, #15]
				break;
 8004206:	bf00      	nop
			default:
				return;
		}
		sendByte(64+addr+col, 0); // установка курсора
 8004208:	7bfa      	ldrb	r2, [r7, #15]
 800420a:	7b7b      	ldrb	r3, [r7, #13]
 800420c:	4413      	add	r3, r2
 800420e:	b2db      	uxtb	r3, r3
 8004210:	3340      	adds	r3, #64	; 0x40
 8004212:	b2db      	uxtb	r3, r3
 8004214:	2100      	movs	r1, #0
 8004216:	4618      	mov	r0, r3
 8004218:	f000 f80a 	bl	8004230 <sendByte>
		HAL_Delay(1);
 800421c:	2001      	movs	r0, #1
 800421e:	f002 fedd 	bl	8006fdc <HAL_Delay>
 8004222:	e000      	b.n	8004226 <SetCursor+0xb6>
				return;
 8004224:	bf00      	nop
	}
}
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}
 800422c:	66666667 	.word	0x66666667

08004230 <sendByte>:

static void sendByte(uint8_t byte, int isData)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	4603      	mov	r3, r0
 8004238:	6039      	str	r1, [r7, #0]
 800423a:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD0_GPIO_Port, LCD_PIN_MASK, RESET);
 800423c:	2200      	movs	r2, #0
 800423e:	216f      	movs	r1, #111	; 0x6f
 8004240:	4841      	ldr	r0, [pc, #260]	; (8004348 <sendByte+0x118>)
 8004242:	f005 fcc1 	bl	8009bc8 <HAL_GPIO_WritePin>

	if(isData == 1) HAL_GPIO_WritePin(LCDA_GPIO_Port, LCDA_Pin, SET); // если данные ставмим A
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d105      	bne.n	8004258 <sendByte+0x28>
 800424c:	2201      	movs	r2, #1
 800424e:	2140      	movs	r1, #64	; 0x40
 8004250:	483d      	ldr	r0, [pc, #244]	; (8004348 <sendByte+0x118>)
 8004252:	f005 fcb9 	bl	8009bc8 <HAL_GPIO_WritePin>
 8004256:	e004      	b.n	8004262 <sendByte+0x32>
	else HAL_GPIO_WritePin(LCDA_GPIO_Port, LCDA_Pin, RESET);		   // иначе скидываем A
 8004258:	2200      	movs	r2, #0
 800425a:	2140      	movs	r1, #64	; 0x40
 800425c:	483a      	ldr	r0, [pc, #232]	; (8004348 <sendByte+0x118>)
 800425e:	f005 fcb3 	bl	8009bc8 <HAL_GPIO_WritePin>

	// ставим старшую тетраду на порт
	if(byte & 0x80) HAL_GPIO_WritePin(LCD3_GPIO_Port, LCD3_Pin, SET);
 8004262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004266:	2b00      	cmp	r3, #0
 8004268:	da04      	bge.n	8004274 <sendByte+0x44>
 800426a:	2201      	movs	r2, #1
 800426c:	2108      	movs	r1, #8
 800426e:	4836      	ldr	r0, [pc, #216]	; (8004348 <sendByte+0x118>)
 8004270:	f005 fcaa 	bl	8009bc8 <HAL_GPIO_WritePin>
	if(byte & 0x40) HAL_GPIO_WritePin(LCD2_GPIO_Port, LCD2_Pin, SET);
 8004274:	79fb      	ldrb	r3, [r7, #7]
 8004276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800427a:	2b00      	cmp	r3, #0
 800427c:	d004      	beq.n	8004288 <sendByte+0x58>
 800427e:	2201      	movs	r2, #1
 8004280:	2104      	movs	r1, #4
 8004282:	4831      	ldr	r0, [pc, #196]	; (8004348 <sendByte+0x118>)
 8004284:	f005 fca0 	bl	8009bc8 <HAL_GPIO_WritePin>
	if(byte & 0x20) HAL_GPIO_WritePin(LCD1_GPIO_Port, LCD1_Pin, SET);
 8004288:	79fb      	ldrb	r3, [r7, #7]
 800428a:	f003 0320 	and.w	r3, r3, #32
 800428e:	2b00      	cmp	r3, #0
 8004290:	d004      	beq.n	800429c <sendByte+0x6c>
 8004292:	2201      	movs	r2, #1
 8004294:	2102      	movs	r1, #2
 8004296:	482c      	ldr	r0, [pc, #176]	; (8004348 <sendByte+0x118>)
 8004298:	f005 fc96 	bl	8009bc8 <HAL_GPIO_WritePin>
	if(byte & 0x10) HAL_GPIO_WritePin(LCD0_GPIO_Port, LCD0_Pin, SET);
 800429c:	79fb      	ldrb	r3, [r7, #7]
 800429e:	f003 0310 	and.w	r3, r3, #16
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d004      	beq.n	80042b0 <sendByte+0x80>
 80042a6:	2201      	movs	r2, #1
 80042a8:	2101      	movs	r1, #1
 80042aa:	4827      	ldr	r0, [pc, #156]	; (8004348 <sendByte+0x118>)
 80042ac:	f005 fc8c 	bl	8009bc8 <HAL_GPIO_WritePin>

	// поднимаем пин E
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, SET);
 80042b0:	2201      	movs	r2, #1
 80042b2:	2120      	movs	r1, #32
 80042b4:	4824      	ldr	r0, [pc, #144]	; (8004348 <sendByte+0x118>)
 80042b6:	f005 fc87 	bl	8009bc8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80042ba:	2001      	movs	r0, #1
 80042bc:	f002 fe8e 	bl	8006fdc <HAL_Delay>
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, RESET); // сбрасываем пин Е
 80042c0:	2200      	movs	r2, #0
 80042c2:	2120      	movs	r1, #32
 80042c4:	4820      	ldr	r0, [pc, #128]	; (8004348 <sendByte+0x118>)
 80042c6:	f005 fc7f 	bl	8009bc8 <HAL_GPIO_WritePin>

	//обнуляем все пины дисплея кроме RS
	HAL_GPIO_WritePin(LCD0_GPIO_Port, (LCD_PIN_MASK & ~LCDA_Pin), RESET);
 80042ca:	2200      	movs	r2, #0
 80042cc:	212f      	movs	r1, #47	; 0x2f
 80042ce:	481e      	ldr	r0, [pc, #120]	; (8004348 <sendByte+0x118>)
 80042d0:	f005 fc7a 	bl	8009bc8 <HAL_GPIO_WritePin>

	// поднимаем пин E
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, SET);
 80042d4:	2201      	movs	r2, #1
 80042d6:	2120      	movs	r1, #32
 80042d8:	481b      	ldr	r0, [pc, #108]	; (8004348 <sendByte+0x118>)
 80042da:	f005 fc75 	bl	8009bc8 <HAL_GPIO_WritePin>
	if(byte & 0x08) HAL_GPIO_WritePin(LCD3_GPIO_Port, LCD3_Pin, SET);
 80042de:	79fb      	ldrb	r3, [r7, #7]
 80042e0:	f003 0308 	and.w	r3, r3, #8
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d004      	beq.n	80042f2 <sendByte+0xc2>
 80042e8:	2201      	movs	r2, #1
 80042ea:	2108      	movs	r1, #8
 80042ec:	4816      	ldr	r0, [pc, #88]	; (8004348 <sendByte+0x118>)
 80042ee:	f005 fc6b 	bl	8009bc8 <HAL_GPIO_WritePin>
	if(byte & 0x04) HAL_GPIO_WritePin(LCD2_GPIO_Port, LCD2_Pin, SET);
 80042f2:	79fb      	ldrb	r3, [r7, #7]
 80042f4:	f003 0304 	and.w	r3, r3, #4
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d004      	beq.n	8004306 <sendByte+0xd6>
 80042fc:	2201      	movs	r2, #1
 80042fe:	2104      	movs	r1, #4
 8004300:	4811      	ldr	r0, [pc, #68]	; (8004348 <sendByte+0x118>)
 8004302:	f005 fc61 	bl	8009bc8 <HAL_GPIO_WritePin>
	if(byte & 0x02) HAL_GPIO_WritePin(LCD1_GPIO_Port, LCD1_Pin, SET);
 8004306:	79fb      	ldrb	r3, [r7, #7]
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d004      	beq.n	800431a <sendByte+0xea>
 8004310:	2201      	movs	r2, #1
 8004312:	2102      	movs	r1, #2
 8004314:	480c      	ldr	r0, [pc, #48]	; (8004348 <sendByte+0x118>)
 8004316:	f005 fc57 	bl	8009bc8 <HAL_GPIO_WritePin>
	if(byte & 0x01) HAL_GPIO_WritePin(LCD0_GPIO_Port, LCD0_Pin, SET);
 800431a:	79fb      	ldrb	r3, [r7, #7]
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b00      	cmp	r3, #0
 8004322:	d004      	beq.n	800432e <sendByte+0xfe>
 8004324:	2201      	movs	r2, #1
 8004326:	2101      	movs	r1, #1
 8004328:	4807      	ldr	r0, [pc, #28]	; (8004348 <sendByte+0x118>)
 800432a:	f005 fc4d 	bl	8009bc8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, RESET); // сбрасываем пин Е
 800432e:	2200      	movs	r2, #0
 8004330:	2120      	movs	r1, #32
 8004332:	4805      	ldr	r0, [pc, #20]	; (8004348 <sendByte+0x118>)
 8004334:	f005 fc48 	bl	8009bc8 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 8004338:	2001      	movs	r0, #1
 800433a:	f002 fe4f 	bl	8006fdc <HAL_Delay>
}
 800433e:	bf00      	nop
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	40020400 	.word	0x40020400

0800434c <sendStr>:


void sendStr( char *str, int row , int position )
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	60f8      	str	r0, [r7, #12]
 8004354:	60b9      	str	r1, [r7, #8]
 8004356:	607a      	str	r2, [r7, #4]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	2b03      	cmp	r3, #3
 800435c:	d816      	bhi.n	800438c <sendStr+0x40>
 800435e:	a201      	add	r2, pc, #4	; (adr r2, 8004364 <sendStr+0x18>)
 8004360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004364:	08004375 	.word	0x08004375
 8004368:	0800437b 	.word	0x0800437b
 800436c:	08004381 	.word	0x08004381
 8004370:	08004387 	.word	0x08004387

	switch (row)
	{

		case 0:
			start_address = 0x0; // 1 строка
 8004374:	2300      	movs	r3, #0
 8004376:	75fb      	strb	r3, [r7, #23]
			break;
 8004378:	e008      	b.n	800438c <sendStr+0x40>

		case 1:
			start_address = 0x40; // 2 строка
 800437a:	2340      	movs	r3, #64	; 0x40
 800437c:	75fb      	strb	r3, [r7, #23]
			break;
 800437e:	e005      	b.n	800438c <sendStr+0x40>

		case 2:
			start_address = 0x14; // 3 строка
 8004380:	2314      	movs	r3, #20
 8004382:	75fb      	strb	r3, [r7, #23]
			break;
 8004384:	e002      	b.n	800438c <sendStr+0x40>

		case 3:
			start_address = 0x54; // 4 строка
 8004386:	2354      	movs	r3, #84	; 0x54
 8004388:	75fb      	strb	r3, [r7, #23]
			break;
 800438a:	bf00      	nop

	}

	start_address += position; // к началу строки прибавляем позицию в строке
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	b2da      	uxtb	r2, r3
 8004390:	7dfb      	ldrb	r3, [r7, #23]
 8004392:	4413      	add	r3, r2
 8004394:	75fb      	strb	r3, [r7, #23]

	sendByte((start_address |= SET_DDRAM_ADDRESS), 0); // ставим курсор на начало нужной строки  в DDRAM
 8004396:	7dfb      	ldrb	r3, [r7, #23]
 8004398:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800439c:	75fb      	strb	r3, [r7, #23]
 800439e:	7dfb      	ldrb	r3, [r7, #23]
 80043a0:	2100      	movs	r1, #0
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff ff44 	bl	8004230 <sendByte>

	HAL_Delay(4);
 80043a8:	2004      	movs	r0, #4
 80043aa:	f002 fe17 	bl	8006fdc <HAL_Delay>
//	while(*str != '\0'){
//
//		sendByte(*str, 1);
//		str++;
//	}
	uint8_t byte  = 0;
 80043ae:	2300      	movs	r3, #0
 80043b0:	75bb      	strb	r3, [r7, #22]
	for (int i = 0; i < 20; ++i) {
 80043b2:	2300      	movs	r3, #0
 80043b4:	613b      	str	r3, [r7, #16]
 80043b6:	e011      	b.n	80043dc <sendStr+0x90>
		byte = *(str+i);
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	4413      	add	r3, r2
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	75bb      	strb	r3, [r7, #22]
		if(byte==0)byte = 32;
 80043c2:	7dbb      	ldrb	r3, [r7, #22]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d101      	bne.n	80043cc <sendStr+0x80>
 80043c8:	2320      	movs	r3, #32
 80043ca:	75bb      	strb	r3, [r7, #22]
		sendByte(byte, 1);
 80043cc:	7dbb      	ldrb	r3, [r7, #22]
 80043ce:	2101      	movs	r1, #1
 80043d0:	4618      	mov	r0, r3
 80043d2:	f7ff ff2d 	bl	8004230 <sendByte>
	for (int i = 0; i < 20; ++i) {
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	3301      	adds	r3, #1
 80043da:	613b      	str	r3, [r7, #16]
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	2b13      	cmp	r3, #19
 80043e0:	ddea      	ble.n	80043b8 <sendStr+0x6c>
	}
}
 80043e2:	bf00      	nop
 80043e4:	bf00      	nop
 80043e6:	3718      	adds	r7, #24
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80043ec:	b5b0      	push	{r4, r5, r7, lr}
 80043ee:	b08a      	sub	sp, #40	; 0x28
 80043f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	ModbusInit();
 80043f2:	f000 fc03 	bl	8004bfc <ModbusInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80043f6:	f002 fdaf 	bl	8006f58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80043fa:	f000 f841 	bl	8004480 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80043fe:	f000 fa9d 	bl	800493c <MX_GPIO_Init>
  MX_DMA_Init();
 8004402:	f000 fa6b 	bl	80048dc <MX_DMA_Init>
  MX_USART1_UART_Init();
 8004406:	f000 fa15 	bl	8004834 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800440a:	f000 fa3d 	bl	8004888 <MX_USART6_UART_Init>
  MX_SPI3_Init();
 800440e:	f000 f93f 	bl	8004690 <MX_SPI3_Init>
  MX_ADC1_Init();
 8004412:	f000 f8a5 	bl	8004560 <MX_ADC1_Init>
  MX_TIM3_Init();
 8004416:	f000 f971 	bl	80046fc <MX_TIM3_Init>
  MX_TIM4_Init();
 800441a:	f000 f9bd 	bl	8004798 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 800441e:	f7ff fe61 	bl	80040e4 <lcd_init>
  ethernet_reset();
 8004422:	f7fd faeb 	bl	80019fc <ethernet_reset>
  Analog_Start();
 8004426:	f7fc fde1 	bl	8000fec <Analog_Start>
  Start_Timers();
 800442a:	f002 fa63 	bl	80068f4 <Start_Timers>
  settingsLoadFRAM();
 800442e:	f001 fda3 	bl	8005f78 <settingsLoadFRAM>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of writeMemorySemaphore */
  osSemaphoreDef(writeMemorySemaphore);
 8004432:	2300      	movs	r3, #0
 8004434:	623b      	str	r3, [r7, #32]
 8004436:	2300      	movs	r3, #0
 8004438:	627b      	str	r3, [r7, #36]	; 0x24
  writeMemorySemaphoreHandle = osSemaphoreCreate(osSemaphore(writeMemorySemaphore), 1);
 800443a:	f107 0320 	add.w	r3, r7, #32
 800443e:	2101      	movs	r1, #1
 8004440:	4618      	mov	r0, r3
 8004442:	f009 fc27 	bl	800dc94 <osSemaphoreCreate>
 8004446:	4603      	mov	r3, r0
 8004448:	4a0a      	ldr	r2, [pc, #40]	; (8004474 <main+0x88>)
 800444a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800444c:	4b0a      	ldr	r3, [pc, #40]	; (8004478 <main+0x8c>)
 800444e:	1d3c      	adds	r4, r7, #4
 8004450:	461d      	mov	r5, r3
 8004452:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004454:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004456:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800445a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800445e:	1d3b      	adds	r3, r7, #4
 8004460:	2100      	movs	r1, #0
 8004462:	4618      	mov	r0, r3
 8004464:	f009 fb19 	bl	800da9a <osThreadCreate>
 8004468:	4603      	mov	r3, r0
 800446a:	4a04      	ldr	r2, [pc, #16]	; (800447c <main+0x90>)
 800446c:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800446e:	f009 fafd 	bl	800da6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004472:	e7fe      	b.n	8004472 <main+0x86>
 8004474:	200073ec 	.word	0x200073ec
 8004478:	080236bc 	.word	0x080236bc
 800447c:	20007154 	.word	0x20007154

08004480 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b094      	sub	sp, #80	; 0x50
 8004484:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004486:	f107 0320 	add.w	r3, r7, #32
 800448a:	2230      	movs	r2, #48	; 0x30
 800448c:	2100      	movs	r1, #0
 800448e:	4618      	mov	r0, r3
 8004490:	f019 ff60 	bl	801e354 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004494:	f107 030c 	add.w	r3, r7, #12
 8004498:	2200      	movs	r2, #0
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	605a      	str	r2, [r3, #4]
 800449e:	609a      	str	r2, [r3, #8]
 80044a0:	60da      	str	r2, [r3, #12]
 80044a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80044a4:	2300      	movs	r3, #0
 80044a6:	60bb      	str	r3, [r7, #8]
 80044a8:	4b2b      	ldr	r3, [pc, #172]	; (8004558 <SystemClock_Config+0xd8>)
 80044aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ac:	4a2a      	ldr	r2, [pc, #168]	; (8004558 <SystemClock_Config+0xd8>)
 80044ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044b2:	6413      	str	r3, [r2, #64]	; 0x40
 80044b4:	4b28      	ldr	r3, [pc, #160]	; (8004558 <SystemClock_Config+0xd8>)
 80044b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044bc:	60bb      	str	r3, [r7, #8]
 80044be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80044c0:	2300      	movs	r3, #0
 80044c2:	607b      	str	r3, [r7, #4]
 80044c4:	4b25      	ldr	r3, [pc, #148]	; (800455c <SystemClock_Config+0xdc>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a24      	ldr	r2, [pc, #144]	; (800455c <SystemClock_Config+0xdc>)
 80044ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80044ce:	6013      	str	r3, [r2, #0]
 80044d0:	4b22      	ldr	r3, [pc, #136]	; (800455c <SystemClock_Config+0xdc>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044d8:	607b      	str	r3, [r7, #4]
 80044da:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80044dc:	2301      	movs	r3, #1
 80044de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80044e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80044e6:	2302      	movs	r3, #2
 80044e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80044ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80044ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80044f0:	2319      	movs	r3, #25
 80044f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80044f4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80044f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80044fa:	2302      	movs	r3, #2
 80044fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80044fe:	2304      	movs	r3, #4
 8004500:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004502:	f107 0320 	add.w	r3, r7, #32
 8004506:	4618      	mov	r0, r3
 8004508:	f005 fb78 	bl	8009bfc <HAL_RCC_OscConfig>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d001      	beq.n	8004516 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8004512:	f000 fb57 	bl	8004bc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004516:	230f      	movs	r3, #15
 8004518:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800451a:	2302      	movs	r3, #2
 800451c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800451e:	2300      	movs	r3, #0
 8004520:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8004522:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8004526:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800452c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800452e:	f107 030c 	add.w	r3, r7, #12
 8004532:	2105      	movs	r1, #5
 8004534:	4618      	mov	r0, r3
 8004536:	f005 fdd9 	bl	800a0ec <HAL_RCC_ClockConfig>
 800453a:	4603      	mov	r3, r0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d001      	beq.n	8004544 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8004540:	f000 fb40 	bl	8004bc4 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8004544:	2200      	movs	r2, #0
 8004546:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800454a:	2000      	movs	r0, #0
 800454c:	f005 feb4 	bl	800a2b8 <HAL_RCC_MCOConfig>
}
 8004550:	bf00      	nop
 8004552:	3750      	adds	r7, #80	; 0x50
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}
 8004558:	40023800 	.word	0x40023800
 800455c:	40007000 	.word	0x40007000

08004560 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004566:	463b      	mov	r3, r7
 8004568:	2200      	movs	r2, #0
 800456a:	601a      	str	r2, [r3, #0]
 800456c:	605a      	str	r2, [r3, #4]
 800456e:	609a      	str	r2, [r3, #8]
 8004570:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8004572:	4b45      	ldr	r3, [pc, #276]	; (8004688 <MX_ADC1_Init+0x128>)
 8004574:	4a45      	ldr	r2, [pc, #276]	; (800468c <MX_ADC1_Init+0x12c>)
 8004576:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004578:	4b43      	ldr	r3, [pc, #268]	; (8004688 <MX_ADC1_Init+0x128>)
 800457a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800457e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004580:	4b41      	ldr	r3, [pc, #260]	; (8004688 <MX_ADC1_Init+0x128>)
 8004582:	2200      	movs	r2, #0
 8004584:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8004586:	4b40      	ldr	r3, [pc, #256]	; (8004688 <MX_ADC1_Init+0x128>)
 8004588:	2201      	movs	r2, #1
 800458a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800458c:	4b3e      	ldr	r3, [pc, #248]	; (8004688 <MX_ADC1_Init+0x128>)
 800458e:	2200      	movs	r2, #0
 8004590:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004592:	4b3d      	ldr	r3, [pc, #244]	; (8004688 <MX_ADC1_Init+0x128>)
 8004594:	2200      	movs	r2, #0
 8004596:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 800459a:	4b3b      	ldr	r3, [pc, #236]	; (8004688 <MX_ADC1_Init+0x128>)
 800459c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 80045a2:	4b39      	ldr	r3, [pc, #228]	; (8004688 <MX_ADC1_Init+0x128>)
 80045a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80045a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80045aa:	4b37      	ldr	r3, [pc, #220]	; (8004688 <MX_ADC1_Init+0x128>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 80045b0:	4b35      	ldr	r3, [pc, #212]	; (8004688 <MX_ADC1_Init+0x128>)
 80045b2:	2206      	movs	r2, #6
 80045b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80045b6:	4b34      	ldr	r3, [pc, #208]	; (8004688 <MX_ADC1_Init+0x128>)
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80045be:	4b32      	ldr	r3, [pc, #200]	; (8004688 <MX_ADC1_Init+0x128>)
 80045c0:	2201      	movs	r2, #1
 80045c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80045c4:	4830      	ldr	r0, [pc, #192]	; (8004688 <MX_ADC1_Init+0x128>)
 80045c6:	f002 fd2d 	bl	8007024 <HAL_ADC_Init>
 80045ca:	4603      	mov	r3, r0
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d001      	beq.n	80045d4 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80045d0:	f000 faf8 	bl	8004bc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80045d4:	230a      	movs	r3, #10
 80045d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80045d8:	2301      	movs	r3, #1
 80045da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80045dc:	2307      	movs	r3, #7
 80045de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80045e0:	463b      	mov	r3, r7
 80045e2:	4619      	mov	r1, r3
 80045e4:	4828      	ldr	r0, [pc, #160]	; (8004688 <MX_ADC1_Init+0x128>)
 80045e6:	f002 fe85 	bl	80072f4 <HAL_ADC_ConfigChannel>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80045f0:	f000 fae8 	bl	8004bc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80045f4:	230c      	movs	r3, #12
 80045f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80045f8:	2302      	movs	r3, #2
 80045fa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80045fc:	463b      	mov	r3, r7
 80045fe:	4619      	mov	r1, r3
 8004600:	4821      	ldr	r0, [pc, #132]	; (8004688 <MX_ADC1_Init+0x128>)
 8004602:	f002 fe77 	bl	80072f4 <HAL_ADC_ConfigChannel>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 800460c:	f000 fada 	bl	8004bc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8004610:	230d      	movs	r3, #13
 8004612:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8004614:	2303      	movs	r3, #3
 8004616:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004618:	463b      	mov	r3, r7
 800461a:	4619      	mov	r1, r3
 800461c:	481a      	ldr	r0, [pc, #104]	; (8004688 <MX_ADC1_Init+0x128>)
 800461e:	f002 fe69 	bl	80072f4 <HAL_ADC_ConfigChannel>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d001      	beq.n	800462c <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8004628:	f000 facc 	bl	8004bc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800462c:	2303      	movs	r3, #3
 800462e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8004630:	2304      	movs	r3, #4
 8004632:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004634:	463b      	mov	r3, r7
 8004636:	4619      	mov	r1, r3
 8004638:	4813      	ldr	r0, [pc, #76]	; (8004688 <MX_ADC1_Init+0x128>)
 800463a:	f002 fe5b 	bl	80072f4 <HAL_ADC_ConfigChannel>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d001      	beq.n	8004648 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8004644:	f000 fabe 	bl	8004bc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8004648:	2304      	movs	r3, #4
 800464a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800464c:	2305      	movs	r3, #5
 800464e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004650:	463b      	mov	r3, r7
 8004652:	4619      	mov	r1, r3
 8004654:	480c      	ldr	r0, [pc, #48]	; (8004688 <MX_ADC1_Init+0x128>)
 8004656:	f002 fe4d 	bl	80072f4 <HAL_ADC_ConfigChannel>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8004660:	f000 fab0 	bl	8004bc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8004664:	2311      	movs	r3, #17
 8004666:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8004668:	2306      	movs	r3, #6
 800466a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800466c:	463b      	mov	r3, r7
 800466e:	4619      	mov	r1, r3
 8004670:	4805      	ldr	r0, [pc, #20]	; (8004688 <MX_ADC1_Init+0x128>)
 8004672:	f002 fe3f 	bl	80072f4 <HAL_ADC_ConfigChannel>
 8004676:	4603      	mov	r3, r0
 8004678:	2b00      	cmp	r3, #0
 800467a:	d001      	beq.n	8004680 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 800467c:	f000 faa2 	bl	8004bc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004680:	bf00      	nop
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	200072a0 	.word	0x200072a0
 800468c:	40012000 	.word	0x40012000

08004690 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8004694:	4b17      	ldr	r3, [pc, #92]	; (80046f4 <MX_SPI3_Init+0x64>)
 8004696:	4a18      	ldr	r2, [pc, #96]	; (80046f8 <MX_SPI3_Init+0x68>)
 8004698:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800469a:	4b16      	ldr	r3, [pc, #88]	; (80046f4 <MX_SPI3_Init+0x64>)
 800469c:	f44f 7282 	mov.w	r2, #260	; 0x104
 80046a0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80046a2:	4b14      	ldr	r3, [pc, #80]	; (80046f4 <MX_SPI3_Init+0x64>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80046a8:	4b12      	ldr	r3, [pc, #72]	; (80046f4 <MX_SPI3_Init+0x64>)
 80046aa:	2200      	movs	r2, #0
 80046ac:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80046ae:	4b11      	ldr	r3, [pc, #68]	; (80046f4 <MX_SPI3_Init+0x64>)
 80046b0:	2200      	movs	r2, #0
 80046b2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80046b4:	4b0f      	ldr	r3, [pc, #60]	; (80046f4 <MX_SPI3_Init+0x64>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80046ba:	4b0e      	ldr	r3, [pc, #56]	; (80046f4 <MX_SPI3_Init+0x64>)
 80046bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046c0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046c2:	4b0c      	ldr	r3, [pc, #48]	; (80046f4 <MX_SPI3_Init+0x64>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80046c8:	4b0a      	ldr	r3, [pc, #40]	; (80046f4 <MX_SPI3_Init+0x64>)
 80046ca:	2200      	movs	r2, #0
 80046cc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80046ce:	4b09      	ldr	r3, [pc, #36]	; (80046f4 <MX_SPI3_Init+0x64>)
 80046d0:	2200      	movs	r2, #0
 80046d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046d4:	4b07      	ldr	r3, [pc, #28]	; (80046f4 <MX_SPI3_Init+0x64>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 80046da:	4b06      	ldr	r3, [pc, #24]	; (80046f4 <MX_SPI3_Init+0x64>)
 80046dc:	220a      	movs	r2, #10
 80046de:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80046e0:	4804      	ldr	r0, [pc, #16]	; (80046f4 <MX_SPI3_Init+0x64>)
 80046e2:	f005 ff6d 	bl	800a5c0 <HAL_SPI_Init>
 80046e6:	4603      	mov	r3, r0
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80046ec:	f000 fa6a 	bl	8004bc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80046f0:	bf00      	nop
 80046f2:	bd80      	pop	{r7, pc}
 80046f4:	20007248 	.word	0x20007248
 80046f8:	40003c00 	.word	0x40003c00

080046fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b086      	sub	sp, #24
 8004700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004702:	f107 0308 	add.w	r3, r7, #8
 8004706:	2200      	movs	r2, #0
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	605a      	str	r2, [r3, #4]
 800470c:	609a      	str	r2, [r3, #8]
 800470e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004710:	463b      	mov	r3, r7
 8004712:	2200      	movs	r2, #0
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8004718:	4b1d      	ldr	r3, [pc, #116]	; (8004790 <MX_TIM3_Init+0x94>)
 800471a:	4a1e      	ldr	r2, [pc, #120]	; (8004794 <MX_TIM3_Init+0x98>)
 800471c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41;
 800471e:	4b1c      	ldr	r3, [pc, #112]	; (8004790 <MX_TIM3_Init+0x94>)
 8004720:	2229      	movs	r2, #41	; 0x29
 8004722:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004724:	4b1a      	ldr	r3, [pc, #104]	; (8004790 <MX_TIM3_Init+0x94>)
 8004726:	2200      	movs	r2, #0
 8004728:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 800472a:	4b19      	ldr	r3, [pc, #100]	; (8004790 <MX_TIM3_Init+0x94>)
 800472c:	f242 720f 	movw	r2, #9999	; 0x270f
 8004730:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004732:	4b17      	ldr	r3, [pc, #92]	; (8004790 <MX_TIM3_Init+0x94>)
 8004734:	2200      	movs	r2, #0
 8004736:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004738:	4b15      	ldr	r3, [pc, #84]	; (8004790 <MX_TIM3_Init+0x94>)
 800473a:	2200      	movs	r2, #0
 800473c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800473e:	4814      	ldr	r0, [pc, #80]	; (8004790 <MX_TIM3_Init+0x94>)
 8004740:	f006 fce6 	bl	800b110 <HAL_TIM_Base_Init>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d001      	beq.n	800474e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800474a:	f000 fa3b 	bl	8004bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800474e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004752:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8004754:	f107 0308 	add.w	r3, r7, #8
 8004758:	4619      	mov	r1, r3
 800475a:	480d      	ldr	r0, [pc, #52]	; (8004790 <MX_TIM3_Init+0x94>)
 800475c:	f006 ff08 	bl	800b570 <HAL_TIM_ConfigClockSource>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8004766:	f000 fa2d 	bl	8004bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800476a:	2320      	movs	r3, #32
 800476c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800476e:	2300      	movs	r3, #0
 8004770:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004772:	463b      	mov	r3, r7
 8004774:	4619      	mov	r1, r3
 8004776:	4806      	ldr	r0, [pc, #24]	; (8004790 <MX_TIM3_Init+0x94>)
 8004778:	f007 f924 	bl	800b9c4 <HAL_TIMEx_MasterConfigSynchronization>
 800477c:	4603      	mov	r3, r0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d001      	beq.n	8004786 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8004782:	f000 fa1f 	bl	8004bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8004786:	bf00      	nop
 8004788:	3718      	adds	r7, #24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	20007200 	.word	0x20007200
 8004794:	40000400 	.word	0x40000400

08004798 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800479e:	f107 0308 	add.w	r3, r7, #8
 80047a2:	2200      	movs	r2, #0
 80047a4:	601a      	str	r2, [r3, #0]
 80047a6:	605a      	str	r2, [r3, #4]
 80047a8:	609a      	str	r2, [r3, #8]
 80047aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80047ac:	463b      	mov	r3, r7
 80047ae:	2200      	movs	r2, #0
 80047b0:	601a      	str	r2, [r3, #0]
 80047b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80047b4:	4b1d      	ldr	r3, [pc, #116]	; (800482c <MX_TIM4_Init+0x94>)
 80047b6:	4a1e      	ldr	r2, [pc, #120]	; (8004830 <MX_TIM4_Init+0x98>)
 80047b8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 41;
 80047ba:	4b1c      	ldr	r3, [pc, #112]	; (800482c <MX_TIM4_Init+0x94>)
 80047bc:	2229      	movs	r2, #41	; 0x29
 80047be:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80047c0:	4b1a      	ldr	r3, [pc, #104]	; (800482c <MX_TIM4_Init+0x94>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80047c6:	4b19      	ldr	r3, [pc, #100]	; (800482c <MX_TIM4_Init+0x94>)
 80047c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80047cc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80047ce:	4b17      	ldr	r3, [pc, #92]	; (800482c <MX_TIM4_Init+0x94>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80047d4:	4b15      	ldr	r3, [pc, #84]	; (800482c <MX_TIM4_Init+0x94>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80047da:	4814      	ldr	r0, [pc, #80]	; (800482c <MX_TIM4_Init+0x94>)
 80047dc:	f006 fc98 	bl	800b110 <HAL_TIM_Base_Init>
 80047e0:	4603      	mov	r3, r0
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d001      	beq.n	80047ea <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 80047e6:	f000 f9ed 	bl	8004bc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80047ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047ee:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80047f0:	f107 0308 	add.w	r3, r7, #8
 80047f4:	4619      	mov	r1, r3
 80047f6:	480d      	ldr	r0, [pc, #52]	; (800482c <MX_TIM4_Init+0x94>)
 80047f8:	f006 feba 	bl	800b570 <HAL_TIM_ConfigClockSource>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8004802:	f000 f9df 	bl	8004bc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8004806:	2320      	movs	r3, #32
 8004808:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800480a:	2300      	movs	r3, #0
 800480c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800480e:	463b      	mov	r3, r7
 8004810:	4619      	mov	r1, r3
 8004812:	4806      	ldr	r0, [pc, #24]	; (800482c <MX_TIM4_Init+0x94>)
 8004814:	f007 f8d6 	bl	800b9c4 <HAL_TIMEx_MasterConfigSynchronization>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800481e:	f000 f9d1 	bl	8004bc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004822:	bf00      	nop
 8004824:	3718      	adds	r7, #24
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}
 800482a:	bf00      	nop
 800482c:	200071b8 	.word	0x200071b8
 8004830:	40000800 	.word	0x40000800

08004834 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004838:	4b11      	ldr	r3, [pc, #68]	; (8004880 <MX_USART1_UART_Init+0x4c>)
 800483a:	4a12      	ldr	r2, [pc, #72]	; (8004884 <MX_USART1_UART_Init+0x50>)
 800483c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800483e:	4b10      	ldr	r3, [pc, #64]	; (8004880 <MX_USART1_UART_Init+0x4c>)
 8004840:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004844:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004846:	4b0e      	ldr	r3, [pc, #56]	; (8004880 <MX_USART1_UART_Init+0x4c>)
 8004848:	2200      	movs	r2, #0
 800484a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800484c:	4b0c      	ldr	r3, [pc, #48]	; (8004880 <MX_USART1_UART_Init+0x4c>)
 800484e:	2200      	movs	r2, #0
 8004850:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004852:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <MX_USART1_UART_Init+0x4c>)
 8004854:	2200      	movs	r2, #0
 8004856:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004858:	4b09      	ldr	r3, [pc, #36]	; (8004880 <MX_USART1_UART_Init+0x4c>)
 800485a:	220c      	movs	r2, #12
 800485c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800485e:	4b08      	ldr	r3, [pc, #32]	; (8004880 <MX_USART1_UART_Init+0x4c>)
 8004860:	2200      	movs	r2, #0
 8004862:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004864:	4b06      	ldr	r3, [pc, #24]	; (8004880 <MX_USART1_UART_Init+0x4c>)
 8004866:	2200      	movs	r2, #0
 8004868:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800486a:	4805      	ldr	r0, [pc, #20]	; (8004880 <MX_USART1_UART_Init+0x4c>)
 800486c:	f007 f93a 	bl	800bae4 <HAL_UART_Init>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004876:	f000 f9a5 	bl	8004bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800487a:	bf00      	nop
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	20007348 	.word	0x20007348
 8004884:	40011000 	.word	0x40011000

08004888 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800488c:	4b11      	ldr	r3, [pc, #68]	; (80048d4 <MX_USART6_UART_Init+0x4c>)
 800488e:	4a12      	ldr	r2, [pc, #72]	; (80048d8 <MX_USART6_UART_Init+0x50>)
 8004890:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8004892:	4b10      	ldr	r3, [pc, #64]	; (80048d4 <MX_USART6_UART_Init+0x4c>)
 8004894:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8004898:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800489a:	4b0e      	ldr	r3, [pc, #56]	; (80048d4 <MX_USART6_UART_Init+0x4c>)
 800489c:	2200      	movs	r2, #0
 800489e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80048a0:	4b0c      	ldr	r3, [pc, #48]	; (80048d4 <MX_USART6_UART_Init+0x4c>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80048a6:	4b0b      	ldr	r3, [pc, #44]	; (80048d4 <MX_USART6_UART_Init+0x4c>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80048ac:	4b09      	ldr	r3, [pc, #36]	; (80048d4 <MX_USART6_UART_Init+0x4c>)
 80048ae:	220c      	movs	r2, #12
 80048b0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048b2:	4b08      	ldr	r3, [pc, #32]	; (80048d4 <MX_USART6_UART_Init+0x4c>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80048b8:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <MX_USART6_UART_Init+0x4c>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80048be:	4805      	ldr	r0, [pc, #20]	; (80048d4 <MX_USART6_UART_Init+0x4c>)
 80048c0:	f007 f910 	bl	800bae4 <HAL_UART_Init>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80048ca:	f000 f97b 	bl	8004bc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80048ce:	bf00      	nop
 80048d0:	bd80      	pop	{r7, pc}
 80048d2:	bf00      	nop
 80048d4:	200073f0 	.word	0x200073f0
 80048d8:	40011400 	.word	0x40011400

080048dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80048e2:	2300      	movs	r3, #0
 80048e4:	607b      	str	r3, [r7, #4]
 80048e6:	4b14      	ldr	r3, [pc, #80]	; (8004938 <MX_DMA_Init+0x5c>)
 80048e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ea:	4a13      	ldr	r2, [pc, #76]	; (8004938 <MX_DMA_Init+0x5c>)
 80048ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80048f0:	6313      	str	r3, [r2, #48]	; 0x30
 80048f2:	4b11      	ldr	r3, [pc, #68]	; (8004938 <MX_DMA_Init+0x5c>)
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048fa:	607b      	str	r3, [r7, #4]
 80048fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80048fe:	2200      	movs	r2, #0
 8004900:	2105      	movs	r1, #5
 8004902:	2038      	movs	r0, #56	; 0x38
 8004904:	f003 f872 	bl	80079ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8004908:	2038      	movs	r0, #56	; 0x38
 800490a:	f003 f88b 	bl	8007a24 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800490e:	2200      	movs	r2, #0
 8004910:	2105      	movs	r1, #5
 8004912:	2039      	movs	r0, #57	; 0x39
 8004914:	f003 f86a 	bl	80079ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8004918:	2039      	movs	r0, #57	; 0x39
 800491a:	f003 f883 	bl	8007a24 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800491e:	2200      	movs	r2, #0
 8004920:	2105      	movs	r1, #5
 8004922:	203a      	movs	r0, #58	; 0x3a
 8004924:	f003 f862 	bl	80079ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004928:	203a      	movs	r0, #58	; 0x3a
 800492a:	f003 f87b 	bl	8007a24 <HAL_NVIC_EnableIRQ>

}
 800492e:	bf00      	nop
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	40023800 	.word	0x40023800

0800493c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b08c      	sub	sp, #48	; 0x30
 8004940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004942:	f107 031c 	add.w	r3, r7, #28
 8004946:	2200      	movs	r2, #0
 8004948:	601a      	str	r2, [r3, #0]
 800494a:	605a      	str	r2, [r3, #4]
 800494c:	609a      	str	r2, [r3, #8]
 800494e:	60da      	str	r2, [r3, #12]
 8004950:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004952:	2300      	movs	r3, #0
 8004954:	61bb      	str	r3, [r7, #24]
 8004956:	4b83      	ldr	r3, [pc, #524]	; (8004b64 <MX_GPIO_Init+0x228>)
 8004958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495a:	4a82      	ldr	r2, [pc, #520]	; (8004b64 <MX_GPIO_Init+0x228>)
 800495c:	f043 0310 	orr.w	r3, r3, #16
 8004960:	6313      	str	r3, [r2, #48]	; 0x30
 8004962:	4b80      	ldr	r3, [pc, #512]	; (8004b64 <MX_GPIO_Init+0x228>)
 8004964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004966:	f003 0310 	and.w	r3, r3, #16
 800496a:	61bb      	str	r3, [r7, #24]
 800496c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800496e:	2300      	movs	r3, #0
 8004970:	617b      	str	r3, [r7, #20]
 8004972:	4b7c      	ldr	r3, [pc, #496]	; (8004b64 <MX_GPIO_Init+0x228>)
 8004974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004976:	4a7b      	ldr	r2, [pc, #492]	; (8004b64 <MX_GPIO_Init+0x228>)
 8004978:	f043 0304 	orr.w	r3, r3, #4
 800497c:	6313      	str	r3, [r2, #48]	; 0x30
 800497e:	4b79      	ldr	r3, [pc, #484]	; (8004b64 <MX_GPIO_Init+0x228>)
 8004980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004982:	f003 0304 	and.w	r3, r3, #4
 8004986:	617b      	str	r3, [r7, #20]
 8004988:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800498a:	2300      	movs	r3, #0
 800498c:	613b      	str	r3, [r7, #16]
 800498e:	4b75      	ldr	r3, [pc, #468]	; (8004b64 <MX_GPIO_Init+0x228>)
 8004990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004992:	4a74      	ldr	r2, [pc, #464]	; (8004b64 <MX_GPIO_Init+0x228>)
 8004994:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004998:	6313      	str	r3, [r2, #48]	; 0x30
 800499a:	4b72      	ldr	r3, [pc, #456]	; (8004b64 <MX_GPIO_Init+0x228>)
 800499c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a2:	613b      	str	r3, [r7, #16]
 80049a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80049a6:	2300      	movs	r3, #0
 80049a8:	60fb      	str	r3, [r7, #12]
 80049aa:	4b6e      	ldr	r3, [pc, #440]	; (8004b64 <MX_GPIO_Init+0x228>)
 80049ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ae:	4a6d      	ldr	r2, [pc, #436]	; (8004b64 <MX_GPIO_Init+0x228>)
 80049b0:	f043 0301 	orr.w	r3, r3, #1
 80049b4:	6313      	str	r3, [r2, #48]	; 0x30
 80049b6:	4b6b      	ldr	r3, [pc, #428]	; (8004b64 <MX_GPIO_Init+0x228>)
 80049b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ba:	f003 0301 	and.w	r3, r3, #1
 80049be:	60fb      	str	r3, [r7, #12]
 80049c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80049c2:	2300      	movs	r3, #0
 80049c4:	60bb      	str	r3, [r7, #8]
 80049c6:	4b67      	ldr	r3, [pc, #412]	; (8004b64 <MX_GPIO_Init+0x228>)
 80049c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ca:	4a66      	ldr	r2, [pc, #408]	; (8004b64 <MX_GPIO_Init+0x228>)
 80049cc:	f043 0302 	orr.w	r3, r3, #2
 80049d0:	6313      	str	r3, [r2, #48]	; 0x30
 80049d2:	4b64      	ldr	r3, [pc, #400]	; (8004b64 <MX_GPIO_Init+0x228>)
 80049d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	60bb      	str	r3, [r7, #8]
 80049dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80049de:	2300      	movs	r3, #0
 80049e0:	607b      	str	r3, [r7, #4]
 80049e2:	4b60      	ldr	r3, [pc, #384]	; (8004b64 <MX_GPIO_Init+0x228>)
 80049e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e6:	4a5f      	ldr	r2, [pc, #380]	; (8004b64 <MX_GPIO_Init+0x228>)
 80049e8:	f043 0308 	orr.w	r3, r3, #8
 80049ec:	6313      	str	r3, [r2, #48]	; 0x30
 80049ee:	4b5d      	ldr	r3, [pc, #372]	; (8004b64 <MX_GPIO_Init+0x228>)
 80049f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f2:	f003 0308 	and.w	r3, r3, #8
 80049f6:	607b      	str	r3, [r7, #4]
 80049f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERESET_GPIO_Port, ERESET_Pin, GPIO_PIN_RESET);
 80049fa:	2200      	movs	r2, #0
 80049fc:	2101      	movs	r1, #1
 80049fe:	485a      	ldr	r0, [pc, #360]	; (8004b68 <MX_GPIO_Init+0x22c>)
 8004a00:	f005 f8e2 	bl	8009bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD0_Pin|LCD1_Pin|LCD2_Pin|DOUT_9_Pin
 8004a04:	2200      	movs	r2, #0
 8004a06:	f24c 417f 	movw	r1, #50303	; 0xc47f
 8004a0a:	4858      	ldr	r0, [pc, #352]	; (8004b6c <MX_GPIO_Init+0x230>)
 8004a0c:	f005 f8dc 	bl	8009bc8 <HAL_GPIO_WritePin>
                          |LED_Pin|LCDLED_Pin|LCD3_Pin|LCDR_Pin
                          |LCDE_Pin|LCDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DOUT_0_Pin|DOUT_1_Pin|DOUT_2_Pin|DOUT_3_Pin
 8004a10:	2200      	movs	r2, #0
 8004a12:	f64f 7180 	movw	r1, #65408	; 0xff80
 8004a16:	4856      	ldr	r0, [pc, #344]	; (8004b70 <MX_GPIO_Init+0x234>)
 8004a18:	f005 f8d6 	bl	8009bc8 <HAL_GPIO_WritePin>
                          |DOUT_4_Pin|DOUT_5_Pin|DOUT_6_Pin|DOUT_7_Pin
                          |DOUT_8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DOUT_10_Pin|DOUT_11_Pin|KEYB_C0_Pin|KEYB_C1_Pin
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8004a22:	4854      	ldr	r0, [pc, #336]	; (8004b74 <MX_GPIO_Init+0x238>)
 8004a24:	f005 f8d0 	bl	8009bc8 <HAL_GPIO_WritePin>
                          |KEYB_C2_Pin|KEYB_C3_Pin|KEYB_C4_Pin|KEYB_C5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_TX_GPIO_Port, RS485_TX_Pin, GPIO_PIN_RESET);
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a2e:	4852      	ldr	r0, [pc, #328]	; (8004b78 <MX_GPIO_Init+0x23c>)
 8004a30:	f005 f8ca 	bl	8009bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_SET);
 8004a34:	2201      	movs	r2, #1
 8004a36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004a3a:	484b      	ldr	r0, [pc, #300]	; (8004b68 <MX_GPIO_Init+0x22c>)
 8004a3c:	f005 f8c4 	bl	8009bc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIN_4_Pin DIN_5_Pin DIN_6_Pin DIN_7_Pin
                           DIN_8_Pin DIN_2_Pin DIN_3_Pin */
  GPIO_InitStruct.Pin = DIN_4_Pin|DIN_5_Pin|DIN_6_Pin|DIN_7_Pin
 8004a40:	237f      	movs	r3, #127	; 0x7f
 8004a42:	61fb      	str	r3, [r7, #28]
                          |DIN_8_Pin|DIN_2_Pin|DIN_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a44:	2300      	movs	r3, #0
 8004a46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a4c:	f107 031c 	add.w	r3, r7, #28
 8004a50:	4619      	mov	r1, r3
 8004a52:	4847      	ldr	r0, [pc, #284]	; (8004b70 <MX_GPIO_Init+0x234>)
 8004a54:	f004 fe08 	bl	8009668 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIN_9_Pin DIN_10_Pin DIN_11_Pin */
  GPIO_InitStruct.Pin = DIN_9_Pin|DIN_10_Pin|DIN_11_Pin;
 8004a58:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004a5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004a62:	2301      	movs	r3, #1
 8004a64:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a66:	f107 031c 	add.w	r3, r7, #28
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	4842      	ldr	r0, [pc, #264]	; (8004b78 <MX_GPIO_Init+0x23c>)
 8004a6e:	f004 fdfb 	bl	8009668 <HAL_GPIO_Init>

  /*Configure GPIO pins : ERESET_Pin S3CS0_Pin */
  GPIO_InitStruct.Pin = ERESET_Pin|S3CS0_Pin;
 8004a72:	f248 0301 	movw	r3, #32769	; 0x8001
 8004a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a80:	2300      	movs	r3, #0
 8004a82:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a84:	f107 031c 	add.w	r3, r7, #28
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4837      	ldr	r0, [pc, #220]	; (8004b68 <MX_GPIO_Init+0x22c>)
 8004a8c:	f004 fdec 	bl	8009668 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD0_Pin LCD1_Pin LCD2_Pin DOUT_9_Pin
                           LED_Pin LCDLED_Pin LCD3_Pin LCDR_Pin
                           LCDE_Pin LCDA_Pin */
  GPIO_InitStruct.Pin = LCD0_Pin|LCD1_Pin|LCD2_Pin|DOUT_9_Pin
 8004a90:	f24c 437f 	movw	r3, #50303	; 0xc47f
 8004a94:	61fb      	str	r3, [r7, #28]
                          |LED_Pin|LCDLED_Pin|LCD3_Pin|LCDR_Pin
                          |LCDE_Pin|LCDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a96:	2301      	movs	r3, #1
 8004a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aa2:	f107 031c 	add.w	r3, r7, #28
 8004aa6:	4619      	mov	r1, r3
 8004aa8:	4830      	ldr	r0, [pc, #192]	; (8004b6c <MX_GPIO_Init+0x230>)
 8004aaa:	f004 fddd 	bl	8009668 <HAL_GPIO_Init>

  /*Configure GPIO pins : DOUT_0_Pin DOUT_1_Pin DOUT_2_Pin DOUT_3_Pin
                           DOUT_4_Pin DOUT_5_Pin DOUT_6_Pin DOUT_7_Pin
                           DOUT_8_Pin */
  GPIO_InitStruct.Pin = DOUT_0_Pin|DOUT_1_Pin|DOUT_2_Pin|DOUT_3_Pin
 8004aae:	f64f 7380 	movw	r3, #65408	; 0xff80
 8004ab2:	61fb      	str	r3, [r7, #28]
                          |DOUT_4_Pin|DOUT_5_Pin|DOUT_6_Pin|DOUT_7_Pin
                          |DOUT_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004abc:	2300      	movs	r3, #0
 8004abe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004ac0:	f107 031c 	add.w	r3, r7, #28
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	482a      	ldr	r0, [pc, #168]	; (8004b70 <MX_GPIO_Init+0x234>)
 8004ac8:	f004 fdce 	bl	8009668 <HAL_GPIO_Init>

  /*Configure GPIO pins : DOUT_10_Pin DOUT_11_Pin KEYB_C0_Pin KEYB_C1_Pin
                           KEYB_C2_Pin KEYB_C3_Pin KEYB_C4_Pin KEYB_C5_Pin */
  GPIO_InitStruct.Pin = DOUT_10_Pin|DOUT_11_Pin|KEYB_C0_Pin|KEYB_C1_Pin
 8004acc:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8004ad0:	61fb      	str	r3, [r7, #28]
                          |KEYB_C2_Pin|KEYB_C3_Pin|KEYB_C4_Pin|KEYB_C5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ada:	2300      	movs	r3, #0
 8004adc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004ade:	f107 031c 	add.w	r3, r7, #28
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	4823      	ldr	r0, [pc, #140]	; (8004b74 <MX_GPIO_Init+0x238>)
 8004ae6:	f004 fdbf 	bl	8009668 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_TX_Pin */
  GPIO_InitStruct.Pin = RS485_TX_Pin;
 8004aea:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004aee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004af0:	2301      	movs	r3, #1
 8004af2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af4:	2300      	movs	r3, #0
 8004af6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004af8:	2300      	movs	r3, #0
 8004afa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 8004afc:	f107 031c 	add.w	r3, r7, #28
 8004b00:	4619      	mov	r1, r3
 8004b02:	481d      	ldr	r0, [pc, #116]	; (8004b78 <MX_GPIO_Init+0x23c>)
 8004b04:	f004 fdb0 	bl	8009668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004b08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004b0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b0e:	2302      	movs	r3, #2
 8004b10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b12:	2300      	movs	r3, #0
 8004b14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b16:	2300      	movs	r3, #0
 8004b18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b1e:	f107 031c 	add.w	r3, r7, #28
 8004b22:	4619      	mov	r1, r3
 8004b24:	4810      	ldr	r0, [pc, #64]	; (8004b68 <MX_GPIO_Init+0x22c>)
 8004b26:	f004 fd9f 	bl	8009668 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYB_R0_Pin KEYB_R1_Pin KEYB_R2_Pin KEYB_R3_Pin
                           KEYB_R4_Pin KEYB_R5_Pin */
  GPIO_InitStruct.Pin = KEYB_R0_Pin|KEYB_R1_Pin|KEYB_R2_Pin|KEYB_R3_Pin
 8004b2a:	233f      	movs	r3, #63	; 0x3f
 8004b2c:	61fb      	str	r3, [r7, #28]
                          |KEYB_R4_Pin|KEYB_R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8004b32:	2302      	movs	r3, #2
 8004b34:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004b36:	f107 031c 	add.w	r3, r7, #28
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	480d      	ldr	r0, [pc, #52]	; (8004b74 <MX_GPIO_Init+0x238>)
 8004b3e:	f004 fd93 	bl	8009668 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIN_0_Pin DIN_1_Pin */
  GPIO_InitStruct.Pin = DIN_0_Pin|DIN_1_Pin;
 8004b42:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004b48:	2300      	movs	r3, #0
 8004b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b50:	f107 031c 	add.w	r3, r7, #28
 8004b54:	4619      	mov	r1, r3
 8004b56:	4805      	ldr	r0, [pc, #20]	; (8004b6c <MX_GPIO_Init+0x230>)
 8004b58:	f004 fd86 	bl	8009668 <HAL_GPIO_Init>

}
 8004b5c:	bf00      	nop
 8004b5e:	3730      	adds	r7, #48	; 0x30
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40023800 	.word	0x40023800
 8004b68:	40020000 	.word	0x40020000
 8004b6c:	40020400 	.word	0x40020400
 8004b70:	40021000 	.word	0x40021000
 8004b74:	40020c00 	.word	0x40020c00
 8004b78:	40020800 	.word	0x40020800

08004b7c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8004b84:	f008 fa26 	bl	800cfd4 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  task_init();
 8004b88:	f7fd f908 	bl	8001d9c <task_init>
  settingsLoadFRAM();
 8004b8c:	f001 f9f4 	bl	8005f78 <settingsLoadFRAM>
  main_process_init();
 8004b90:	f000 f82c 	bl	8004bec <main_process_init>
  /* Infinite loop */
  for(;;)
  {
	main_process();
 8004b94:	f000 f81b 	bl	8004bce <main_process>
    osDelay(1);
 8004b98:	2001      	movs	r0, #1
 8004b9a:	f008 ffca 	bl	800db32 <osDelay>
	main_process();
 8004b9e:	e7f9      	b.n	8004b94 <StartDefaultTask+0x18>

08004ba0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a04      	ldr	r2, [pc, #16]	; (8004bc0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d101      	bne.n	8004bb6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8004bb2:	f002 f9f3 	bl	8006f9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004bb6:	bf00      	nop
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	40010000 	.word	0x40010000

08004bc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004bc4:	b480      	push	{r7}
 8004bc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004bc8:	b672      	cpsid	i
}
 8004bca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004bcc:	e7fe      	b.n	8004bcc <Error_Handler+0x8>

08004bce <main_process>:
#include <probotbornik.h>



void main_process()
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	af00      	add	r7, sp, #0
	Read_Inputs();
 8004bd2:	f7fc fb15 	bl	8001200 <Read_Inputs>
	Analog_Read();
 8004bd6:	f7fc fa1b 	bl	8001010 <Analog_Read>
	probotbor_process();
 8004bda:	f000 fc47 	bl	800546c <probotbor_process>
	Write_Outputs();
 8004bde:	f7fc fca3 	bl	8001528 <Write_Outputs>

	osDelay(1);
 8004be2:	2001      	movs	r0, #1
 8004be4:	f008 ffa5 	bl	800db32 <osDelay>
}
 8004be8:	bf00      	nop
 8004bea:	bd80      	pop	{r7, pc}

08004bec <main_process_init>:

void main_process_init()
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0

}
 8004bf0:	bf00      	nop
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
	...

08004bfc <ModbusInit>:
static int WriteSingleRegister(uint8_t* request, uint8_t* answer, ModbusSource source);
static int WrieMultiplyRegisters(uint8_t* request, uint8_t* answer,ModbusSource source);
static int WriteToHoldings(uint8_t* request, uint8_t* answer,ModbusSource source, int (*write)(uint8_t*,uint8_t*,ModbusSource));

void ModbusInit()
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0
	holding_pointer = (uint16_t*)&settings;
 8004c00:	4b0b      	ldr	r3, [pc, #44]	; (8004c30 <ModbusInit+0x34>)
 8004c02:	4a0c      	ldr	r2, [pc, #48]	; (8004c34 <ModbusInit+0x38>)
 8004c04:	601a      	str	r2, [r3, #0]
	reading_pointer = (uint16_t*)&meas_data;
 8004c06:	4b0c      	ldr	r3, [pc, #48]	; (8004c38 <ModbusInit+0x3c>)
 8004c08:	4a0c      	ldr	r2, [pc, #48]	; (8004c3c <ModbusInit+0x40>)
 8004c0a:	601a      	str	r2, [r3, #0]
	holding_size = sizeof(Client_Info)/2;
 8004c0c:	4b0c      	ldr	r3, [pc, #48]	; (8004c40 <ModbusInit+0x44>)
 8004c0e:	2206      	movs	r2, #6
 8004c10:	801a      	strh	r2, [r3, #0]
	reading_size = sizeof(meas_data)/2;
 8004c12:	4b0c      	ldr	r3, [pc, #48]	; (8004c44 <ModbusInit+0x48>)
 8004c14:	2238      	movs	r2, #56	; 0x38
 8004c16:	801a      	strh	r2, [r3, #0]
	if(settings.retain.mb_addr==0)settings.retain.mb_addr = 1;
 8004c18:	4b06      	ldr	r3, [pc, #24]	; (8004c34 <ModbusInit+0x38>)
 8004c1a:	8a9b      	ldrh	r3, [r3, #20]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d102      	bne.n	8004c26 <ModbusInit+0x2a>
 8004c20:	4b04      	ldr	r3, [pc, #16]	; (8004c34 <ModbusInit+0x38>)
 8004c22:	2201      	movs	r2, #1
 8004c24:	829a      	strh	r2, [r3, #20]
}
 8004c26:	bf00      	nop
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr
 8004c30:	2000091c 	.word	0x2000091c
 8004c34:	20007474 	.word	0x20007474
 8004c38:	20000920 	.word	0x20000920
 8004c3c:	20007520 	.word	0x20007520
 8004c40:	20000924 	.word	0x20000924
 8004c44:	20000926 	.word	0x20000926

08004c48 <ModbusParse>:


//Ф-я парсинга входящего буфера, если это Modbus, то возвращает кол-во байт
int ModbusParse(uint8_t *request, uint16_t req_length, uint8_t *answer, ModbusSource source)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	607a      	str	r2, [r7, #4]
 8004c52:	461a      	mov	r2, r3
 8004c54:	460b      	mov	r3, r1
 8004c56:	817b      	strh	r3, [r7, #10]
 8004c58:	4613      	mov	r3, r2
 8004c5a:	727b      	strb	r3, [r7, #9]
	settings.non_retain.data[37]++;
 8004c5c:	4b26      	ldr	r3, [pc, #152]	; (8004cf8 <ModbusParse+0xb0>)
 8004c5e:	f8b3 3092 	ldrh.w	r3, [r3, #146]	; 0x92
 8004c62:	3301      	adds	r3, #1
 8004c64:	b29a      	uxth	r2, r3
 8004c66:	4b24      	ldr	r3, [pc, #144]	; (8004cf8 <ModbusParse+0xb0>)
 8004c68:	f8a3 2092 	strh.w	r2, [r3, #146]	; 0x92
	if(answer==NULL)return 0; // Проверка, выделилась ли память под ответ
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <ModbusParse+0x2e>
 8004c72:	2300      	movs	r3, #0
 8004c74:	e03c      	b.n	8004cf0 <ModbusParse+0xa8>
	if(!CheckRequestLength(request,req_length,source))return 0; // Проверка корректности длины пакета
 8004c76:	897b      	ldrh	r3, [r7, #10]
 8004c78:	7a7a      	ldrb	r2, [r7, #9]
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	68f8      	ldr	r0, [r7, #12]
 8004c7e:	f000 f83d 	bl	8004cfc <CheckRequestLength>
 8004c82:	4603      	mov	r3, r0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d101      	bne.n	8004c8c <ModbusParse+0x44>
 8004c88:	2300      	movs	r3, #0
 8004c8a:	e031      	b.n	8004cf0 <ModbusParse+0xa8>
	if(!CheckMbAddr(request, source))return 0; // Проверка корректности адреса
 8004c8c:	7a7b      	ldrb	r3, [r7, #9]
 8004c8e:	4619      	mov	r1, r3
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f000 f857 	bl	8004d44 <CheckMbAddr>
 8004c96:	4603      	mov	r3, r0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <ModbusParse+0x58>
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	e027      	b.n	8004cf0 <ModbusParse+0xa8>
	if(!IsCorrectMbCommand(request, source))// Проверка корректности функционального кода
 8004ca0:	7a7b      	ldrb	r3, [r7, #9]
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f000 f873 	bl	8004d90 <IsCorrectMbCommand>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d107      	bne.n	8004cc0 <ModbusParse+0x78>
	{
		return SetInvalidCommand(request, answer, 1, source);
 8004cb0:	7a7b      	ldrb	r3, [r7, #9]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	6879      	ldr	r1, [r7, #4]
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f000 f89e 	bl	8004df8 <SetInvalidCommand>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	e017      	b.n	8004cf0 <ModbusParse+0xa8>
	}
	if(!CheckCrc(request, req_length, source))
 8004cc0:	897b      	ldrh	r3, [r7, #10]
 8004cc2:	7a7a      	ldrb	r2, [r7, #9]
 8004cc4:	4619      	mov	r1, r3
 8004cc6:	68f8      	ldr	r0, [r7, #12]
 8004cc8:	f000 f93f 	bl	8004f4a <CheckCrc>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d107      	bne.n	8004ce2 <ModbusParse+0x9a>
	{
		return SetInvalidCommand(request, answer, 3, source);
 8004cd2:	7a7b      	ldrb	r3, [r7, #9]
 8004cd4:	2203      	movs	r2, #3
 8004cd6:	6879      	ldr	r1, [r7, #4]
 8004cd8:	68f8      	ldr	r0, [r7, #12]
 8004cda:	f000 f88d 	bl	8004df8 <SetInvalidCommand>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	e006      	b.n	8004cf0 <ModbusParse+0xa8>
	}
	return GetModbusAnswer(request, answer, source);
 8004ce2:	7a7b      	ldrb	r3, [r7, #9]
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	6879      	ldr	r1, [r7, #4]
 8004ce8:	68f8      	ldr	r0, [r7, #12]
 8004cea:	f000 f963 	bl	8004fb4 <GetModbusAnswer>
 8004cee:	4603      	mov	r3, r0
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	3710      	adds	r7, #16
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	bd80      	pop	{r7, pc}
 8004cf8:	20007474 	.word	0x20007474

08004cfc <CheckRequestLength>:

//Проверка соответствия длины данных, передаваемых в буфере
static uint8_t CheckRequestLength(uint8_t* request_pointer,int request_length, ModbusSource source)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b087      	sub	sp, #28
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	60f8      	str	r0, [r7, #12]
 8004d04:	60b9      	str	r1, [r7, #8]
 8004d06:	4613      	mov	r3, r2
 8004d08:	71fb      	strb	r3, [r7, #7]
	if(source==RS485)return 1;
 8004d0a:	79fb      	ldrb	r3, [r7, #7]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d101      	bne.n	8004d14 <CheckRequestLength+0x18>
 8004d10:	2301      	movs	r3, #1
 8004d12:	e010      	b.n	8004d36 <CheckRequestLength+0x3a>
    int len_from_packet = (*(request_pointer+4))*256 + *(request_pointer+5);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	3304      	adds	r3, #4
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	021b      	lsls	r3, r3, #8
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	3205      	adds	r2, #5
 8004d20:	7812      	ldrb	r2, [r2, #0]
 8004d22:	4413      	add	r3, r2
 8004d24:	617b      	str	r3, [r7, #20]
    return len_from_packet+6 == request_length;
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	3306      	adds	r3, #6
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	429a      	cmp	r2, r3
 8004d2e:	bf0c      	ite	eq
 8004d30:	2301      	moveq	r3, #1
 8004d32:	2300      	movne	r3, #0
 8004d34:	b2db      	uxtb	r3, r3
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	371c      	adds	r7, #28
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
	...

08004d44 <CheckMbAddr>:

//Проверка соответсия адреса в сети Modbus сервера
static uint8_t CheckMbAddr(uint8_t *request,ModbusSource source)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	70fb      	strb	r3, [r7, #3]
	uint8_t addr = 0;
 8004d50:	2300      	movs	r3, #0
 8004d52:	73fb      	strb	r3, [r7, #15]
	if(source==ETHERNET)
 8004d54:	78fb      	ldrb	r3, [r7, #3]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d103      	bne.n	8004d62 <CheckMbAddr+0x1e>
	{
		addr =  *(request+6);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	799b      	ldrb	r3, [r3, #6]
 8004d5e:	73fb      	strb	r3, [r7, #15]
 8004d60:	e005      	b.n	8004d6e <CheckMbAddr+0x2a>
	}
	else if(source==RS485)
 8004d62:	78fb      	ldrb	r3, [r7, #3]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d102      	bne.n	8004d6e <CheckMbAddr+0x2a>
	{
		addr =  *(request);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	73fb      	strb	r3, [r7, #15]
	}
	return addr == settings.retain.mb_addr;
 8004d6e:	7bfb      	ldrb	r3, [r7, #15]
 8004d70:	b29a      	uxth	r2, r3
 8004d72:	4b06      	ldr	r3, [pc, #24]	; (8004d8c <CheckMbAddr+0x48>)
 8004d74:	8a9b      	ldrh	r3, [r3, #20]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	bf0c      	ite	eq
 8004d7a:	2301      	moveq	r3, #1
 8004d7c:	2300      	movne	r3, #0
 8004d7e:	b2db      	uxtb	r3, r3
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3714      	adds	r7, #20
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	20007474 	.word	0x20007474

08004d90 <IsCorrectMbCommand>:

//Проверка корректности функционального кода
static uint8_t IsCorrectMbCommand(uint8_t *request,ModbusSource source)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b085      	sub	sp, #20
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
 8004d98:	460b      	mov	r3, r1
 8004d9a:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = 0;
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	73fb      	strb	r3, [r7, #15]
	if(source==ETHERNET)
 8004da0:	78fb      	ldrb	r3, [r7, #3]
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d103      	bne.n	8004dae <IsCorrectMbCommand+0x1e>
	{
		cmd = *(request+7);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	79db      	ldrb	r3, [r3, #7]
 8004daa:	73fb      	strb	r3, [r7, #15]
 8004dac:	e005      	b.n	8004dba <IsCorrectMbCommand+0x2a>
	}
	else if(source==RS485)
 8004dae:	78fb      	ldrb	r3, [r7, #3]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d102      	bne.n	8004dba <IsCorrectMbCommand+0x2a>
	{
		cmd = *(request+1);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	785b      	ldrb	r3, [r3, #1]
 8004db8:	73fb      	strb	r3, [r7, #15]
	}
	/*
	 * Функция возвращает 1, если номер команды корректен, 0 - если некорректен
	 * cmd - номер команды
	 * */
	switch (cmd) {
 8004dba:	7bfb      	ldrb	r3, [r7, #15]
 8004dbc:	2b10      	cmp	r3, #16
 8004dbe:	bf8c      	ite	hi
 8004dc0:	2201      	movhi	r2, #1
 8004dc2:	2200      	movls	r2, #0
 8004dc4:	b2d2      	uxtb	r2, r2
 8004dc6:	2a00      	cmp	r2, #0
 8004dc8:	d10c      	bne.n	8004de4 <IsCorrectMbCommand+0x54>
 8004dca:	2201      	movs	r2, #1
 8004dcc:	409a      	lsls	r2, r3
 8004dce:	4b09      	ldr	r3, [pc, #36]	; (8004df4 <IsCorrectMbCommand+0x64>)
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	bf14      	ite	ne
 8004dd6:	2301      	movne	r3, #1
 8004dd8:	2300      	moveq	r3, #0
 8004dda:	b2db      	uxtb	r3, r3
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <IsCorrectMbCommand+0x54>
		case 3:
		case 4:
		case 6:
		//case 5:
        case 16:
            return 1;
 8004de0:	2301      	movs	r3, #1
 8004de2:	e000      	b.n	8004de6 <IsCorrectMbCommand+0x56>
		default:
			return 0;
 8004de4:	2300      	movs	r3, #0
	}
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3714      	adds	r7, #20
 8004dea:	46bd      	mov	sp, r7
 8004dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	00010058 	.word	0x00010058

08004df8 <SetInvalidCommand>:

//Формирует телеграмму ошиобного запроса
static int SetInvalidCommand(uint8_t *request, uint8_t *answer, uint8_t code, ModbusSource source)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b086      	sub	sp, #24
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	4611      	mov	r1, r2
 8004e04:	461a      	mov	r2, r3
 8004e06:	460b      	mov	r3, r1
 8004e08:	71fb      	strb	r3, [r7, #7]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	71bb      	strb	r3, [r7, #6]
	uint8_t func_code = source ? *(request+1) : *(request+1);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	785b      	ldrb	r3, [r3, #1]
 8004e12:	75fb      	strb	r3, [r7, #23]
	func_code = set_bit(func_code, 7);
 8004e14:	7dfb      	ldrb	r3, [r7, #23]
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	2107      	movs	r1, #7
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fc f9d8 	bl	80011d0 <set_bit>
 8004e20:	4603      	mov	r3, r0
 8004e22:	75fb      	strb	r3, [r7, #23]
	if(source==RS485)
 8004e24:	79bb      	ldrb	r3, [r7, #6]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d11d      	bne.n	8004e66 <SetInvalidCommand+0x6e>
	{
		uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	82bb      	strh	r3, [r7, #20]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	781a      	ldrb	r2, [r3, #0]
		memcpy(answer,request,1);
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	701a      	strb	r2, [r3, #0]
		*(answer+1) = func_code;//Функциональный код с измененным битом
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	7dfa      	ldrb	r2, [r7, #23]
 8004e3c:	701a      	strb	r2, [r3, #0]
		*(answer+2) = code;//Функциональный код с измененным битом
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	3302      	adds	r3, #2
 8004e42:	79fa      	ldrb	r2, [r7, #7]
 8004e44:	701a      	strb	r2, [r3, #0]
		CRC16_CALC(answer,check_sum,3);
 8004e46:	f107 0314 	add.w	r3, r7, #20
 8004e4a:	2203      	movs	r2, #3
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	68b8      	ldr	r0, [r7, #8]
 8004e50:	f000 f832 	bl	8004eb8 <CRC16_CALC>
		*(answer+3) = check_sum[0];
 8004e54:	68bb      	ldr	r3, [r7, #8]
 8004e56:	3303      	adds	r3, #3
 8004e58:	7d3a      	ldrb	r2, [r7, #20]
 8004e5a:	701a      	strb	r2, [r3, #0]
		*(answer+4) = check_sum[1];
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	3304      	adds	r3, #4
 8004e60:	7d7a      	ldrb	r2, [r7, #21]
 8004e62:	701a      	strb	r2, [r3, #0]
 8004e64:	e01c      	b.n	8004ea0 <SetInvalidCommand+0xa8>
	}
	else if(source==ETHERNET)
 8004e66:	79bb      	ldrb	r3, [r7, #6]
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d119      	bne.n	8004ea0 <SetInvalidCommand+0xa8>
	{
		memcpy(answer,request,8);
 8004e6c:	2208      	movs	r2, #8
 8004e6e:	68f9      	ldr	r1, [r7, #12]
 8004e70:	68b8      	ldr	r0, [r7, #8]
 8004e72:	f019 fa47 	bl	801e304 <memcpy>
		*(answer+4) = 0;
 8004e76:	68bb      	ldr	r3, [r7, #8]
 8004e78:	3304      	adds	r3, #4
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	701a      	strb	r2, [r3, #0]
		*(answer+5) = 3;
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	3305      	adds	r3, #5
 8004e82:	2203      	movs	r2, #3
 8004e84:	701a      	strb	r2, [r3, #0]
		*(answer+7) |= 128;
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	3307      	adds	r3, #7
 8004e8a:	781a      	ldrb	r2, [r3, #0]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	3307      	adds	r3, #7
 8004e90:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004e94:	b2d2      	uxtb	r2, r2
 8004e96:	701a      	strb	r2, [r3, #0]
		*(answer+8) = code;
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	3308      	adds	r3, #8
 8004e9c:	79fa      	ldrb	r2, [r7, #7]
 8004e9e:	701a      	strb	r2, [r3, #0]
	}

	uint8_t len = source==RS485 ? 5 : 9;
 8004ea0:	79bb      	ldrb	r3, [r7, #6]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d101      	bne.n	8004eaa <SetInvalidCommand+0xb2>
 8004ea6:	2305      	movs	r3, #5
 8004ea8:	e000      	b.n	8004eac <SetInvalidCommand+0xb4>
 8004eaa:	2309      	movs	r3, #9
 8004eac:	75bb      	strb	r3, [r7, #22]
	return len;
 8004eae:	7dbb      	ldrb	r3, [r7, #22]
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3718      	adds	r7, #24
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <CRC16_CALC>:

static void CRC16_CALC(uint8_t* arr, uint8_t* checkSum, uint8_t messageLength)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b089      	sub	sp, #36	; 0x24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	71fb      	strb	r3, [r7, #7]
	/*Функция расчета контрольной суммы
		 * arr - указатель на массив байт, по которым нужно посчитать CRC
		 * checkSum - указатель на массив из 2 байт, куда нужно положить CRC
		 * messageLength - ко-во байт, по которым нужно считать CRC	 *
		 * */
		uint16_t reg = 0xFFFF;
 8004ec6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004eca:	83fb      	strh	r3, [r7, #30]
		uint16_t polinom = 0xA001;
 8004ecc:	f24a 0301 	movw	r3, #40961	; 0xa001
 8004ed0:	827b      	strh	r3, [r7, #18]
		for(int i=0;i < messageLength;i++)
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	61bb      	str	r3, [r7, #24]
 8004ed6:	e023      	b.n	8004f20 <CRC16_CALC+0x68>
		{
			reg^=*(arr+i);
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	4413      	add	r3, r2
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	8bfb      	ldrh	r3, [r7, #30]
 8004ee4:	4053      	eors	r3, r2
 8004ee6:	83fb      	strh	r3, [r7, #30]
			for (int j = 0; j < 8; j++)
 8004ee8:	2300      	movs	r3, #0
 8004eea:	617b      	str	r3, [r7, #20]
 8004eec:	e012      	b.n	8004f14 <CRC16_CALC+0x5c>
			{
				if ((reg&1)==1) {
 8004eee:	8bfb      	ldrh	r3, [r7, #30]
 8004ef0:	f003 0301 	and.w	r3, r3, #1
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d007      	beq.n	8004f08 <CRC16_CALC+0x50>
					reg>>=1;
 8004ef8:	8bfb      	ldrh	r3, [r7, #30]
 8004efa:	085b      	lsrs	r3, r3, #1
 8004efc:	83fb      	strh	r3, [r7, #30]
					reg^=polinom;
 8004efe:	8bfa      	ldrh	r2, [r7, #30]
 8004f00:	8a7b      	ldrh	r3, [r7, #18]
 8004f02:	4053      	eors	r3, r2
 8004f04:	83fb      	strh	r3, [r7, #30]
 8004f06:	e002      	b.n	8004f0e <CRC16_CALC+0x56>
				}
				else reg>>=1;
 8004f08:	8bfb      	ldrh	r3, [r7, #30]
 8004f0a:	085b      	lsrs	r3, r3, #1
 8004f0c:	83fb      	strh	r3, [r7, #30]
			for (int j = 0; j < 8; j++)
 8004f0e:	697b      	ldr	r3, [r7, #20]
 8004f10:	3301      	adds	r3, #1
 8004f12:	617b      	str	r3, [r7, #20]
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	2b07      	cmp	r3, #7
 8004f18:	dde9      	ble.n	8004eee <CRC16_CALC+0x36>
		for(int i=0;i < messageLength;i++)
 8004f1a:	69bb      	ldr	r3, [r7, #24]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	61bb      	str	r3, [r7, #24]
 8004f20:	79fb      	ldrb	r3, [r7, #7]
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	dbd7      	blt.n	8004ed8 <CRC16_CALC+0x20>
			}
		}
		*(checkSum+1)=(uint8_t)(reg>>8);
 8004f28:	8bfb      	ldrh	r3, [r7, #30]
 8004f2a:	0a1b      	lsrs	r3, r3, #8
 8004f2c:	b29a      	uxth	r2, r3
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	3301      	adds	r3, #1
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	701a      	strb	r2, [r3, #0]
		*checkSum = (uint8_t)(reg & 0x00FF);
 8004f36:	8bfb      	ldrh	r3, [r7, #30]
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	701a      	strb	r2, [r3, #0]
}
 8004f3e:	bf00      	nop
 8004f40:	3724      	adds	r7, #36	; 0x24
 8004f42:	46bd      	mov	sp, r7
 8004f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f48:	4770      	bx	lr

08004f4a <CheckCrc>:

//Проверка контрольной суммы запроса
static uint8_t CheckCrc(uint8_t* request_pointer,int request_length, ModbusSource source)
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b086      	sub	sp, #24
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	60f8      	str	r0, [r7, #12]
 8004f52:	60b9      	str	r1, [r7, #8]
 8004f54:	4613      	mov	r3, r2
 8004f56:	71fb      	strb	r3, [r7, #7]
	if(source==ETHERNET)return 1;
 8004f58:	79fb      	ldrb	r3, [r7, #7]
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d101      	bne.n	8004f62 <CheckCrc+0x18>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e024      	b.n	8004fac <CheckCrc+0x62>
	uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 8004f62:	2300      	movs	r3, #0
 8004f64:	82bb      	strh	r3, [r7, #20]
	if(request_length<4)return 0;
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	2b03      	cmp	r3, #3
 8004f6a:	dc01      	bgt.n	8004f70 <CheckCrc+0x26>
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	e01d      	b.n	8004fac <CheckCrc+0x62>
	CRC16_CALC(request_pointer, check_sum, request_length-2);
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	3b02      	subs	r3, #2
 8004f76:	b2da      	uxtb	r2, r3
 8004f78:	f107 0314 	add.w	r3, r7, #20
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	68f8      	ldr	r0, [r7, #12]
 8004f80:	f7ff ff9a 	bl	8004eb8 <CRC16_CALC>
	return request_pointer[request_length-2]==check_sum[0] && request_pointer[request_length-1]==check_sum[1];
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	3b02      	subs	r3, #2
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	781a      	ldrb	r2, [r3, #0]
 8004f8e:	7d3b      	ldrb	r3, [r7, #20]
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d109      	bne.n	8004fa8 <CheckCrc+0x5e>
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	3b01      	subs	r3, #1
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	781a      	ldrb	r2, [r3, #0]
 8004f9e:	7d7b      	ldrb	r3, [r7, #21]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d101      	bne.n	8004fa8 <CheckCrc+0x5e>
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e000      	b.n	8004faa <CheckCrc+0x60>
 8004fa8:	2300      	movs	r3, #0
 8004faa:	b2db      	uxtb	r3, r3
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3718      	adds	r7, #24
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <GetModbusAnswer>:

//Возвращает кол-во байт, котрые нужно передать обратно
static int GetModbusAnswer(uint8_t* request, uint8_t* answer, ModbusSource source)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b088      	sub	sp, #32
 8004fb8:	af02      	add	r7, sp, #8
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	71fb      	strb	r3, [r7, #7]
	uint8_t func_code = source==RS485 ? *(request+1) : *(request+7);
 8004fc2:	79fb      	ldrb	r3, [r7, #7]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d102      	bne.n	8004fce <GetModbusAnswer+0x1a>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	785b      	ldrb	r3, [r3, #1]
 8004fcc:	e001      	b.n	8004fd2 <GetModbusAnswer+0x1e>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	79db      	ldrb	r3, [r3, #7]
 8004fd2:	75fb      	strb	r3, [r7, #23]

	switch (func_code) {
 8004fd4:	7dfb      	ldrb	r3, [r7, #23]
 8004fd6:	3b03      	subs	r3, #3
 8004fd8:	2b0d      	cmp	r3, #13
 8004fda:	d849      	bhi.n	8005070 <GetModbusAnswer+0xbc>
 8004fdc:	a201      	add	r2, pc, #4	; (adr r2, 8004fe4 <GetModbusAnswer+0x30>)
 8004fde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe2:	bf00      	nop
 8004fe4:	0800501d 	.word	0x0800501d
 8004fe8:	08005037 	.word	0x08005037
 8004fec:	08005071 	.word	0x08005071
 8004ff0:	08005051 	.word	0x08005051
 8004ff4:	08005071 	.word	0x08005071
 8004ff8:	08005071 	.word	0x08005071
 8004ffc:	08005071 	.word	0x08005071
 8005000:	08005071 	.word	0x08005071
 8005004:	08005071 	.word	0x08005071
 8005008:	08005071 	.word	0x08005071
 800500c:	08005071 	.word	0x08005071
 8005010:	08005071 	.word	0x08005071
 8005014:	08005071 	.word	0x08005071
 8005018:	08005061 	.word	0x08005061
		case READ_HOLDING_REGS:
			return ReadRegisters(request, answer, holding_pointer, holding_size, source);
 800501c:	4b17      	ldr	r3, [pc, #92]	; (800507c <GetModbusAnswer+0xc8>)
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	4b17      	ldr	r3, [pc, #92]	; (8005080 <GetModbusAnswer+0xcc>)
 8005022:	8819      	ldrh	r1, [r3, #0]
 8005024:	79fb      	ldrb	r3, [r7, #7]
 8005026:	9300      	str	r3, [sp, #0]
 8005028:	460b      	mov	r3, r1
 800502a:	68b9      	ldr	r1, [r7, #8]
 800502c:	68f8      	ldr	r0, [r7, #12]
 800502e:	f000 f831 	bl	8005094 <ReadRegisters>
 8005032:	4603      	mov	r3, r0
 8005034:	e01e      	b.n	8005074 <GetModbusAnswer+0xc0>
		case READ_INPUT_REGS:
			return ReadRegisters(request, answer, reading_pointer, reading_size, source);
 8005036:	4b13      	ldr	r3, [pc, #76]	; (8005084 <GetModbusAnswer+0xd0>)
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	4b13      	ldr	r3, [pc, #76]	; (8005088 <GetModbusAnswer+0xd4>)
 800503c:	8819      	ldrh	r1, [r3, #0]
 800503e:	79fb      	ldrb	r3, [r7, #7]
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	460b      	mov	r3, r1
 8005044:	68b9      	ldr	r1, [r7, #8]
 8005046:	68f8      	ldr	r0, [r7, #12]
 8005048:	f000 f824 	bl	8005094 <ReadRegisters>
 800504c:	4603      	mov	r3, r0
 800504e:	e011      	b.n	8005074 <GetModbusAnswer+0xc0>
		case WRITE_SINGLE_REG:
			return WriteToHoldings(request, answer, source, &WriteSingleRegister);
 8005050:	79fa      	ldrb	r2, [r7, #7]
 8005052:	4b0e      	ldr	r3, [pc, #56]	; (800508c <GetModbusAnswer+0xd8>)
 8005054:	68b9      	ldr	r1, [r7, #8]
 8005056:	68f8      	ldr	r0, [r7, #12]
 8005058:	f000 f9dc 	bl	8005414 <WriteToHoldings>
 800505c:	4603      	mov	r3, r0
 800505e:	e009      	b.n	8005074 <GetModbusAnswer+0xc0>
		case WRITE_MULTIPLY_REGS:
			return WriteToHoldings(request, answer, source, &WrieMultiplyRegisters);
 8005060:	79fa      	ldrb	r2, [r7, #7]
 8005062:	4b0b      	ldr	r3, [pc, #44]	; (8005090 <GetModbusAnswer+0xdc>)
 8005064:	68b9      	ldr	r1, [r7, #8]
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 f9d4 	bl	8005414 <WriteToHoldings>
 800506c:	4603      	mov	r3, r0
 800506e:	e001      	b.n	8005074 <GetModbusAnswer+0xc0>
		default:
			break;
 8005070:	bf00      	nop
	}
	return 0;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3718      	adds	r7, #24
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	2000091c 	.word	0x2000091c
 8005080:	20000924 	.word	0x20000924
 8005084:	20000920 	.word	0x20000920
 8005088:	20000926 	.word	0x20000926
 800508c:	08005275 	.word	0x08005275
 8005090:	08005319 	.word	0x08005319

08005094 <ReadRegisters>:

//Ф-я чтения регистров из памяти memory_pointer размером memory_size
static int ReadRegisters(uint8_t *request, uint8_t *answer, uint16_t *memory_pointer, uint16_t memory_size, ModbusSource source)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b088      	sub	sp, #32
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
 80050a0:	807b      	strh	r3, [r7, #2]
	uint16_t  maxAddr = memory_size-1;
 80050a2:	887b      	ldrh	r3, [r7, #2]
 80050a4:	3b01      	subs	r3, #1
 80050a6:	83fb      	strh	r3, [r7, #30]
	uint16_t start_reg = GetWordFromBytes(request,source==RS485?2:8);
 80050a8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d101      	bne.n	80050b4 <ReadRegisters+0x20>
 80050b0:	2302      	movs	r3, #2
 80050b2:	e000      	b.n	80050b6 <ReadRegisters+0x22>
 80050b4:	2308      	movs	r3, #8
 80050b6:	4619      	mov	r1, r3
 80050b8:	68f8      	ldr	r0, [r7, #12]
 80050ba:	f000 f882 	bl	80051c2 <GetWordFromBytes>
 80050be:	4603      	mov	r3, r0
 80050c0:	83bb      	strh	r3, [r7, #28]
	uint16_t reg_count = GetWordFromBytes(request,source==RS485?4:10);
 80050c2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d101      	bne.n	80050ce <ReadRegisters+0x3a>
 80050ca:	2304      	movs	r3, #4
 80050cc:	e000      	b.n	80050d0 <ReadRegisters+0x3c>
 80050ce:	230a      	movs	r3, #10
 80050d0:	4619      	mov	r1, r3
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f000 f875 	bl	80051c2 <GetWordFromBytes>
 80050d8:	4603      	mov	r3, r0
 80050da:	837b      	strh	r3, [r7, #26]
	if((start_reg+reg_count-1)>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 80050dc:	8bba      	ldrh	r2, [r7, #28]
 80050de:	8b7b      	ldrh	r3, [r7, #26]
 80050e0:	4413      	add	r3, r2
 80050e2:	1e5a      	subs	r2, r3, #1
 80050e4:	8bfb      	ldrh	r3, [r7, #30]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	dd08      	ble.n	80050fc <ReadRegisters+0x68>
 80050ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80050ee:	2202      	movs	r2, #2
 80050f0:	68b9      	ldr	r1, [r7, #8]
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f7ff fe80 	bl	8004df8 <SetInvalidCommand>
 80050f8:	4603      	mov	r3, r0
 80050fa:	e05e      	b.n	80051ba <ReadRegisters+0x126>
	if(source==ETHERNET)
 80050fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005100:	2b01      	cmp	r3, #1
 8005102:	d124      	bne.n	800514e <ReadRegisters+0xba>
	{
		memcpy(answer,request,8);
 8005104:	2208      	movs	r2, #8
 8005106:	68f9      	ldr	r1, [r7, #12]
 8005108:	68b8      	ldr	r0, [r7, #8]
 800510a:	f019 f8fb 	bl	801e304 <memcpy>
		InsertWordToMemory(reg_count*2+3, answer+4);//Длина сообщения
 800510e:	8b7b      	ldrh	r3, [r7, #26]
 8005110:	005b      	lsls	r3, r3, #1
 8005112:	b29b      	uxth	r3, r3
 8005114:	3303      	adds	r3, #3
 8005116:	b29a      	uxth	r2, r3
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	3304      	adds	r3, #4
 800511c:	4619      	mov	r1, r3
 800511e:	4610      	mov	r0, r2
 8005120:	f000 f86a 	bl	80051f8 <InsertWordToMemory>
		*(answer+8) = reg_count*2;//количесво байт далее
 8005124:	8b7b      	ldrh	r3, [r7, #26]
 8005126:	b2da      	uxtb	r2, r3
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	3308      	adds	r3, #8
 800512c:	0052      	lsls	r2, r2, #1
 800512e:	b2d2      	uxtb	r2, r2
 8005130:	701a      	strb	r2, [r3, #0]
		InsertWordsToMemory(memory_pointer+start_reg,answer+9,reg_count);
 8005132:	8bbb      	ldrh	r3, [r7, #28]
 8005134:	005b      	lsls	r3, r3, #1
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	18d0      	adds	r0, r2, r3
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	3309      	adds	r3, #9
 800513e:	8b7a      	ldrh	r2, [r7, #26]
 8005140:	4619      	mov	r1, r3
 8005142:	f000 f869 	bl	8005218 <InsertWordsToMemory>
		return 9+reg_count*2;
 8005146:	8b7b      	ldrh	r3, [r7, #26]
 8005148:	005b      	lsls	r3, r3, #1
 800514a:	3309      	adds	r3, #9
 800514c:	e035      	b.n	80051ba <ReadRegisters+0x126>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	881b      	ldrh	r3, [r3, #0]
 8005152:	b29a      	uxth	r2, r3
	}
	else
	{
		memcpy(answer,request,2);
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	801a      	strh	r2, [r3, #0]
		*(answer+2) = reg_count*2;//количесво байт далее
 8005158:	8b7b      	ldrh	r3, [r7, #26]
 800515a:	b2da      	uxtb	r2, r3
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	3302      	adds	r3, #2
 8005160:	0052      	lsls	r2, r2, #1
 8005162:	b2d2      	uxtb	r2, r2
 8005164:	701a      	strb	r2, [r3, #0]
		InsertWordsToMemory(memory_pointer+start_reg,answer+3,reg_count);//Данные
 8005166:	8bbb      	ldrh	r3, [r7, #28]
 8005168:	005b      	lsls	r3, r3, #1
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	18d0      	adds	r0, r2, r3
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	3303      	adds	r3, #3
 8005172:	8b7a      	ldrh	r2, [r7, #26]
 8005174:	4619      	mov	r1, r3
 8005176:	f000 f84f 	bl	8005218 <InsertWordsToMemory>
		uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 800517a:	2300      	movs	r3, #0
 800517c:	823b      	strh	r3, [r7, #16]
		CRC16_CALC(answer,check_sum,3+reg_count*2);
 800517e:	8b7b      	ldrh	r3, [r7, #26]
 8005180:	b2db      	uxtb	r3, r3
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	b2db      	uxtb	r3, r3
 8005186:	3303      	adds	r3, #3
 8005188:	b2da      	uxtb	r2, r3
 800518a:	f107 0310 	add.w	r3, r7, #16
 800518e:	4619      	mov	r1, r3
 8005190:	68b8      	ldr	r0, [r7, #8]
 8005192:	f7ff fe91 	bl	8004eb8 <CRC16_CALC>
		int offset = 3+reg_count*2;
 8005196:	8b7b      	ldrh	r3, [r7, #26]
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	3303      	adds	r3, #3
 800519c:	617b      	str	r3, [r7, #20]
		*(answer+offset)=check_sum[0];
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	4413      	add	r3, r2
 80051a4:	7c3a      	ldrb	r2, [r7, #16]
 80051a6:	701a      	strb	r2, [r3, #0]
		*(answer+offset+1)=check_sum[1];
 80051a8:	697b      	ldr	r3, [r7, #20]
 80051aa:	3301      	adds	r3, #1
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	4413      	add	r3, r2
 80051b0:	7c7a      	ldrb	r2, [r7, #17]
 80051b2:	701a      	strb	r2, [r3, #0]
		return 5+reg_count*2;
 80051b4:	8b7b      	ldrh	r3, [r7, #26]
 80051b6:	005b      	lsls	r3, r3, #1
 80051b8:	3305      	adds	r3, #5

	}
	return 0;
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3720      	adds	r7, #32
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}

080051c2 <GetWordFromBytes>:

static uint16_t GetWordFromBytes(uint8_t *arr, uint8_t pos)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b083      	sub	sp, #12
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
 80051ca:	460b      	mov	r3, r1
 80051cc:	70fb      	strb	r3, [r7, #3]
	/*Получает 16 битное число из 2x байт, и возвращает его
	 * arr -  указатель на массив байт, из которого нужно получить word
	 * pos - индекс первого байта в массиве
	 *
	 * */
	return (((uint16_t)(*(arr+pos)))<<8) + (uint16_t)(*(arr + pos+1));
 80051ce:	78fb      	ldrb	r3, [r7, #3]
 80051d0:	687a      	ldr	r2, [r7, #4]
 80051d2:	4413      	add	r3, r2
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	021b      	lsls	r3, r3, #8
 80051da:	b29a      	uxth	r2, r3
 80051dc:	78fb      	ldrb	r3, [r7, #3]
 80051de:	3301      	adds	r3, #1
 80051e0:	6879      	ldr	r1, [r7, #4]
 80051e2:	440b      	add	r3, r1
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	4413      	add	r3, r2
 80051ea:	b29b      	uxth	r3, r3
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <InsertWordToMemory>:

static void InsertWordToMemory(uint16_t value, uint8_t* memory)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	4603      	mov	r3, r0
 8005200:	6039      	str	r1, [r7, #0]
 8005202:	80fb      	strh	r3, [r7, #6]
    InsertWordsToMemory(&value,memory,1);
 8005204:	1dbb      	adds	r3, r7, #6
 8005206:	2201      	movs	r2, #1
 8005208:	6839      	ldr	r1, [r7, #0]
 800520a:	4618      	mov	r0, r3
 800520c:	f000 f804 	bl	8005218 <InsertWordsToMemory>
}
 8005210:	bf00      	nop
 8005212:	3708      	adds	r7, #8
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}

08005218 <InsertWordsToMemory>:

static void InsertWordsToMemory(uint16_t *source, uint8_t * destination, uint16_t count)
{
 8005218:	b480      	push	{r7}
 800521a:	b087      	sub	sp, #28
 800521c:	af00      	add	r7, sp, #0
 800521e:	60f8      	str	r0, [r7, #12]
 8005220:	60b9      	str	r1, [r7, #8]
 8005222:	4613      	mov	r3, r2
 8005224:	80fb      	strh	r3, [r7, #6]
    int i = 0;
 8005226:	2300      	movs	r3, #0
 8005228:	617b      	str	r3, [r7, #20]
    for(i=0;i<count*2;i+=2)
 800522a:	2300      	movs	r3, #0
 800522c:	617b      	str	r3, [r7, #20]
 800522e:	e014      	b.n	800525a <InsertWordsToMemory+0x42>
    {
        *(destination+i+1)=*((uint8_t*)source+i);
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	68fa      	ldr	r2, [r7, #12]
 8005234:	441a      	add	r2, r3
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	3301      	adds	r3, #1
 800523a:	68b9      	ldr	r1, [r7, #8]
 800523c:	440b      	add	r3, r1
 800523e:	7812      	ldrb	r2, [r2, #0]
 8005240:	701a      	strb	r2, [r3, #0]
        *(destination+i)=*((uint8_t*)source+i+1);
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	3301      	adds	r3, #1
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	441a      	add	r2, r3
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	68b9      	ldr	r1, [r7, #8]
 800524e:	440b      	add	r3, r1
 8005250:	7812      	ldrb	r2, [r2, #0]
 8005252:	701a      	strb	r2, [r3, #0]
    for(i=0;i<count*2;i+=2)
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	3302      	adds	r3, #2
 8005258:	617b      	str	r3, [r7, #20]
 800525a:	88fb      	ldrh	r3, [r7, #6]
 800525c:	005b      	lsls	r3, r3, #1
 800525e:	697a      	ldr	r2, [r7, #20]
 8005260:	429a      	cmp	r2, r3
 8005262:	dbe5      	blt.n	8005230 <InsertWordsToMemory+0x18>
    }
}
 8005264:	bf00      	nop
 8005266:	bf00      	nop
 8005268:	371c      	adds	r7, #28
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
	...

08005274 <WriteSingleRegister>:


static int WriteSingleRegister(uint8_t* request, uint8_t* answer, ModbusSource source)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b086      	sub	sp, #24
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	4613      	mov	r3, r2
 8005280:	71fb      	strb	r3, [r7, #7]
    uint16_t  maxAddr = holding_size-1;
 8005282:	4b23      	ldr	r3, [pc, #140]	; (8005310 <WriteSingleRegister+0x9c>)
 8005284:	881b      	ldrh	r3, [r3, #0]
 8005286:	3b01      	subs	r3, #1
 8005288:	82fb      	strh	r3, [r7, #22]
    uint16_t addr = GetWordFromBytes(request,source==RS485?2:8);
 800528a:	79fb      	ldrb	r3, [r7, #7]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d101      	bne.n	8005294 <WriteSingleRegister+0x20>
 8005290:	2302      	movs	r3, #2
 8005292:	e000      	b.n	8005296 <WriteSingleRegister+0x22>
 8005294:	2308      	movs	r3, #8
 8005296:	4619      	mov	r1, r3
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f7ff ff92 	bl	80051c2 <GetWordFromBytes>
 800529e:	4603      	mov	r3, r0
 80052a0:	82bb      	strh	r3, [r7, #20]
    if(addr>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 80052a2:	8aba      	ldrh	r2, [r7, #20]
 80052a4:	8afb      	ldrh	r3, [r7, #22]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d907      	bls.n	80052ba <WriteSingleRegister+0x46>
 80052aa:	79fb      	ldrb	r3, [r7, #7]
 80052ac:	2202      	movs	r2, #2
 80052ae:	68b9      	ldr	r1, [r7, #8]
 80052b0:	68f8      	ldr	r0, [r7, #12]
 80052b2:	f7ff fda1 	bl	8004df8 <SetInvalidCommand>
 80052b6:	4603      	mov	r3, r0
 80052b8:	e026      	b.n	8005308 <WriteSingleRegister+0x94>
    //если все нормально, то вставляем в пакет запрашиваемые данные
    if(source==ETHERNET)
 80052ba:	79fb      	ldrb	r3, [r7, #7]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d112      	bne.n	80052e6 <WriteSingleRegister+0x72>
    {
    	InsertWordsToMemory((uint16_t*)(request+10), ((uint8_t*)holding_pointer)+addr*2,1);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f103 000a 	add.w	r0, r3, #10
 80052c6:	4b13      	ldr	r3, [pc, #76]	; (8005314 <WriteSingleRegister+0xa0>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	8aba      	ldrh	r2, [r7, #20]
 80052cc:	0052      	lsls	r2, r2, #1
 80052ce:	4413      	add	r3, r2
 80052d0:	2201      	movs	r2, #1
 80052d2:	4619      	mov	r1, r3
 80052d4:	f7ff ffa0 	bl	8005218 <InsertWordsToMemory>
    	memcpy(answer, request,12);
 80052d8:	220c      	movs	r2, #12
 80052da:	68f9      	ldr	r1, [r7, #12]
 80052dc:	68b8      	ldr	r0, [r7, #8]
 80052de:	f019 f811 	bl	801e304 <memcpy>
    	return 12;
 80052e2:	230c      	movs	r3, #12
 80052e4:	e010      	b.n	8005308 <WriteSingleRegister+0x94>
    }
    else
    {
    	InsertWordsToMemory((uint16_t*)(request+4), ((uint8_t*)holding_pointer)+addr*2,1);
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	1d18      	adds	r0, r3, #4
 80052ea:	4b0a      	ldr	r3, [pc, #40]	; (8005314 <WriteSingleRegister+0xa0>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	8aba      	ldrh	r2, [r7, #20]
 80052f0:	0052      	lsls	r2, r2, #1
 80052f2:	4413      	add	r3, r2
 80052f4:	2201      	movs	r2, #1
 80052f6:	4619      	mov	r1, r3
 80052f8:	f7ff ff8e 	bl	8005218 <InsertWordsToMemory>
    	memcpy(answer, request,8);
 80052fc:	2208      	movs	r2, #8
 80052fe:	68f9      	ldr	r1, [r7, #12]
 8005300:	68b8      	ldr	r0, [r7, #8]
 8005302:	f018 ffff 	bl	801e304 <memcpy>
    	return 8;
 8005306:	2308      	movs	r3, #8
    }
    settingsSaveFRAM();
    return 0;
}
 8005308:	4618      	mov	r0, r3
 800530a:	3718      	adds	r7, #24
 800530c:	46bd      	mov	sp, r7
 800530e:	bd80      	pop	{r7, pc}
 8005310:	20000924 	.word	0x20000924
 8005314:	2000091c 	.word	0x2000091c

08005318 <WrieMultiplyRegisters>:

static int WrieMultiplyRegisters(uint8_t* request, uint8_t* answer,ModbusSource source)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	4613      	mov	r3, r2
 8005324:	71fb      	strb	r3, [r7, #7]
	uint16_t  maxAddr = holding_size-1;
 8005326:	4b39      	ldr	r3, [pc, #228]	; (800540c <WrieMultiplyRegisters+0xf4>)
 8005328:	881b      	ldrh	r3, [r3, #0]
 800532a:	3b01      	subs	r3, #1
 800532c:	82fb      	strh	r3, [r7, #22]
	uint16_t start_reg = GetWordFromBytes(request,source==RS485?2:8);
 800532e:	79fb      	ldrb	r3, [r7, #7]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <WrieMultiplyRegisters+0x20>
 8005334:	2302      	movs	r3, #2
 8005336:	e000      	b.n	800533a <WrieMultiplyRegisters+0x22>
 8005338:	2308      	movs	r3, #8
 800533a:	4619      	mov	r1, r3
 800533c:	68f8      	ldr	r0, [r7, #12]
 800533e:	f7ff ff40 	bl	80051c2 <GetWordFromBytes>
 8005342:	4603      	mov	r3, r0
 8005344:	82bb      	strh	r3, [r7, #20]
	uint16_t reg_count = GetWordFromBytes(request,source==RS485?4:10);
 8005346:	79fb      	ldrb	r3, [r7, #7]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d101      	bne.n	8005350 <WrieMultiplyRegisters+0x38>
 800534c:	2304      	movs	r3, #4
 800534e:	e000      	b.n	8005352 <WrieMultiplyRegisters+0x3a>
 8005350:	230a      	movs	r3, #10
 8005352:	4619      	mov	r1, r3
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f7ff ff34 	bl	80051c2 <GetWordFromBytes>
 800535a:	4603      	mov	r3, r0
 800535c:	827b      	strh	r3, [r7, #18]
    if((start_reg+reg_count-1)>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 800535e:	8aba      	ldrh	r2, [r7, #20]
 8005360:	8a7b      	ldrh	r3, [r7, #18]
 8005362:	4413      	add	r3, r2
 8005364:	1e5a      	subs	r2, r3, #1
 8005366:	8afb      	ldrh	r3, [r7, #22]
 8005368:	429a      	cmp	r2, r3
 800536a:	dd07      	ble.n	800537c <WrieMultiplyRegisters+0x64>
 800536c:	79fb      	ldrb	r3, [r7, #7]
 800536e:	2202      	movs	r2, #2
 8005370:	68b9      	ldr	r1, [r7, #8]
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f7ff fd40 	bl	8004df8 <SetInvalidCommand>
 8005378:	4603      	mov	r3, r0
 800537a:	e042      	b.n	8005402 <WrieMultiplyRegisters+0xea>
    //если все нормально, то вставляем в пакет запрашиваемые данные
    if(source==ETHERNET)
 800537c:	79fb      	ldrb	r3, [r7, #7]
 800537e:	2b01      	cmp	r3, #1
 8005380:	d11d      	bne.n	80053be <WrieMultiplyRegisters+0xa6>
    {
    	memcpy(answer, request,12);//сначала повторяющиеся с запросом данные
 8005382:	220c      	movs	r2, #12
 8005384:	68f9      	ldr	r1, [r7, #12]
 8005386:	68b8      	ldr	r0, [r7, #8]
 8005388:	f018 ffbc 	bl	801e304 <memcpy>
    	InsertWordToMemory(reg_count*2+4, answer+4);//Длина сообщения
 800538c:	8a7b      	ldrh	r3, [r7, #18]
 800538e:	3302      	adds	r3, #2
 8005390:	b29b      	uxth	r3, r3
 8005392:	005b      	lsls	r3, r3, #1
 8005394:	b29a      	uxth	r2, r3
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	3304      	adds	r3, #4
 800539a:	4619      	mov	r1, r3
 800539c:	4610      	mov	r0, r2
 800539e:	f7ff ff2b 	bl	80051f8 <InsertWordToMemory>
    	InsertWordsToMemory((uint16_t*)(request+13), ((uint8_t*)holding_pointer)+start_reg*2,reg_count);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f103 000d 	add.w	r0, r3, #13
 80053a8:	4b19      	ldr	r3, [pc, #100]	; (8005410 <WrieMultiplyRegisters+0xf8>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	8aba      	ldrh	r2, [r7, #20]
 80053ae:	0052      	lsls	r2, r2, #1
 80053b0:	4413      	add	r3, r2
 80053b2:	8a7a      	ldrh	r2, [r7, #18]
 80053b4:	4619      	mov	r1, r3
 80053b6:	f7ff ff2f 	bl	8005218 <InsertWordsToMemory>
        return 12;
 80053ba:	230c      	movs	r3, #12
 80053bc:	e021      	b.n	8005402 <WrieMultiplyRegisters+0xea>
    }
    else
    {
    	memcpy(answer, request,6);//сначала повторяющиеся с запросом данные
 80053be:	2206      	movs	r2, #6
 80053c0:	68f9      	ldr	r1, [r7, #12]
 80053c2:	68b8      	ldr	r0, [r7, #8]
 80053c4:	f018 ff9e 	bl	801e304 <memcpy>
    	uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 80053c8:	2300      	movs	r3, #0
 80053ca:	823b      	strh	r3, [r7, #16]
    	CRC16_CALC(answer,check_sum,6);
 80053cc:	f107 0310 	add.w	r3, r7, #16
 80053d0:	2206      	movs	r2, #6
 80053d2:	4619      	mov	r1, r3
 80053d4:	68b8      	ldr	r0, [r7, #8]
 80053d6:	f7ff fd6f 	bl	8004eb8 <CRC16_CALC>
		*(answer+6)=check_sum[0];
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	3306      	adds	r3, #6
 80053de:	7c3a      	ldrb	r2, [r7, #16]
 80053e0:	701a      	strb	r2, [r3, #0]
		*(answer+7)=check_sum[1];
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	3307      	adds	r3, #7
 80053e6:	7c7a      	ldrb	r2, [r7, #17]
 80053e8:	701a      	strb	r2, [r3, #0]
		InsertWordsToMemory((uint16_t*)(request+7), ((uint8_t*)holding_pointer)+start_reg*2,reg_count);
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	1dd8      	adds	r0, r3, #7
 80053ee:	4b08      	ldr	r3, [pc, #32]	; (8005410 <WrieMultiplyRegisters+0xf8>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	8aba      	ldrh	r2, [r7, #20]
 80053f4:	0052      	lsls	r2, r2, #1
 80053f6:	4413      	add	r3, r2
 80053f8:	8a7a      	ldrh	r2, [r7, #18]
 80053fa:	4619      	mov	r1, r3
 80053fc:	f7ff ff0c 	bl	8005218 <InsertWordsToMemory>
		return 8;
 8005400:	2308      	movs	r3, #8
    }

    return 0;
}
 8005402:	4618      	mov	r0, r3
 8005404:	3718      	adds	r7, #24
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
 800540a:	bf00      	nop
 800540c:	20000924 	.word	0x20000924
 8005410:	2000091c 	.word	0x2000091c

08005414 <WriteToHoldings>:

static int WriteToHoldings(uint8_t* request, uint8_t* answer,ModbusSource source, int (*write)(uint8_t*,uint8_t*,ModbusSource))
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	603b      	str	r3, [r7, #0]
 8005420:	4613      	mov	r3, r2
 8005422:	71fb      	strb	r3, [r7, #7]
	int result = 0;
 8005424:	2300      	movs	r3, #0
 8005426:	617b      	str	r3, [r7, #20]
	if(writeMemorySemaphoreHandle!=NULL)
 8005428:	4b0f      	ldr	r3, [pc, #60]	; (8005468 <WriteToHoldings+0x54>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d016      	beq.n	800545e <WriteToHoldings+0x4a>
	{
		if(osSemaphoreWait(writeMemorySemaphoreHandle, 1000)==osOK)
 8005430:	4b0d      	ldr	r3, [pc, #52]	; (8005468 <WriteToHoldings+0x54>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005438:	4618      	mov	r0, r3
 800543a:	f008 fc5d 	bl	800dcf8 <osSemaphoreWait>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d10c      	bne.n	800545e <WriteToHoldings+0x4a>
		{
			result =  (*write)(request,answer,source);
 8005444:	79fa      	ldrb	r2, [r7, #7]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	68b9      	ldr	r1, [r7, #8]
 800544a:	68f8      	ldr	r0, [r7, #12]
 800544c:	4798      	blx	r3
 800544e:	6178      	str	r0, [r7, #20]
			settingsSaveFRAM();
 8005450:	f000 fdda 	bl	8006008 <settingsSaveFRAM>
			osSemaphoreRelease(writeMemorySemaphoreHandle);
 8005454:	4b04      	ldr	r3, [pc, #16]	; (8005468 <WriteToHoldings+0x54>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4618      	mov	r0, r3
 800545a:	f008 fc9b 	bl	800dd94 <osSemaphoreRelease>
		}
	}
	return result;
 800545e:	697b      	ldr	r3, [r7, #20]
}
 8005460:	4618      	mov	r0, r3
 8005462:	3718      	adds	r7, #24
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	200073ec 	.word	0x200073ec

0800546c <probotbor_process>:
static void NakopitelCheck();
static void GetClientInfo();
static void LocalRemoteControl();

void probotbor_process()
{
 800546c:	b580      	push	{r7, lr}
 800546e:	af00      	add	r7, sp, #0
	LocalRemoteControl();
 8005470:	f000 f9c8 	bl	8005804 <LocalRemoteControl>
	SetTimers();
 8005474:	f000 f954 	bl	8005720 <SetTimers>
	if(!initialized)
 8005478:	4b15      	ldr	r3, [pc, #84]	; (80054d0 <probotbor_process+0x64>)
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d108      	bne.n	8005492 <probotbor_process+0x26>
	{
		if(!Init_timers())return;
 8005480:	f000 f912 	bl	80056a8 <Init_timers>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d020      	beq.n	80054cc <probotbor_process+0x60>
		initialized = 1;
 800548a:	4b11      	ldr	r3, [pc, #68]	; (80054d0 <probotbor_process+0x64>)
 800548c:	2201      	movs	r2, #1
 800548e:	701a      	strb	r2, [r3, #0]
		return;
 8005490:	e01d      	b.n	80054ce <probotbor_process+0x62>
	}
	NakopitelCheck();
 8005492:	f000 fca9 	bl	8005de8 <NakopitelCheck>
	GetPositiveFronts();
 8005496:	f000 fc09 	bl	8005cac <GetPositiveFronts>
	GetErrors();
 800549a:	f000 f821 	bl	80054e0 <GetErrors>
	OnCommandCycle();
 800549e:	f000 fb2b 	bl	8005af8 <OnCommandCycle>
	Moving();
 80054a2:	f000 fa09 	bl	80058b8 <Moving>
	if(automatTON.OUT && d_outputs.prob_ready)
 80054a6:	4b0b      	ldr	r3, [pc, #44]	; (80054d4 <probotbor_process+0x68>)
 80054a8:	7a5b      	ldrb	r3, [r3, #9]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d009      	beq.n	80054c2 <probotbor_process+0x56>
 80054ae:	4b0a      	ldr	r3, [pc, #40]	; (80054d8 <probotbor_process+0x6c>)
 80054b0:	781b      	ldrb	r3, [r3, #0]
 80054b2:	f003 0304 	and.w	r3, r3, #4
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d002      	beq.n	80054c2 <probotbor_process+0x56>
	{
		startOtborCommand = 1;
 80054bc:	4b07      	ldr	r3, [pc, #28]	; (80054dc <probotbor_process+0x70>)
 80054be:	2201      	movs	r2, #1
 80054c0:	701a      	strb	r2, [r3, #0]
	}
	Indication();
 80054c2:	f000 fbb9 	bl	8005c38 <Indication>
	GetClientInfo();
 80054c6:	f000 fcb9 	bl	8005e3c <GetClientInfo>
 80054ca:	e000      	b.n	80054ce <probotbor_process+0x62>
		if(!Init_timers())return;
 80054cc:	bf00      	nop

}
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	20007460 	.word	0x20007460
 80054d4:	2000743c 	.word	0x2000743c
 80054d8:	20007018 	.word	0x20007018
 80054dc:	2000745c 	.word	0x2000745c

080054e0 <GetErrors>:

static void GetErrors()
{
 80054e0:	b480      	push	{r7}
 80054e2:	af00      	add	r7, sp, #0
	// Inputs
	meas_data.errors.nakopitel_door_err = !d_inputs.sq_kanistra_door;
 80054e4:	4b68      	ldr	r3, [pc, #416]	; (8005688 <GetErrors+0x1a8>)
 80054e6:	785b      	ldrb	r3, [r3, #1]
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	bf0c      	ite	eq
 80054f2:	2301      	moveq	r3, #1
 80054f4:	2300      	movne	r3, #0
 80054f6:	b2d9      	uxtb	r1, r3
 80054f8:	4a64      	ldr	r2, [pc, #400]	; (800568c <GetErrors+0x1ac>)
 80054fa:	7f13      	ldrb	r3, [r2, #28]
 80054fc:	f361 0341 	bfi	r3, r1, #1, #1
 8005500:	7713      	strb	r3, [r2, #28]
	meas_data.errors.nakopitel_kanistra_err = !d_inputs.sq_kanistra;
 8005502:	4b61      	ldr	r3, [pc, #388]	; (8005688 <GetErrors+0x1a8>)
 8005504:	785b      	ldrb	r3, [r3, #1]
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	b2db      	uxtb	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	bf0c      	ite	eq
 8005510:	2301      	moveq	r3, #1
 8005512:	2300      	movne	r3, #0
 8005514:	b2d9      	uxtb	r1, r3
 8005516:	4a5d      	ldr	r2, [pc, #372]	; (800568c <GetErrors+0x1ac>)
 8005518:	7f13      	ldrb	r3, [r2, #28]
 800551a:	f361 0300 	bfi	r3, r1, #0, #1
 800551e:	7713      	strb	r3, [r2, #28]
	meas_data.errors.uz_err = !d_inputs.uz_prob_fail;
 8005520:	4b59      	ldr	r3, [pc, #356]	; (8005688 <GetErrors+0x1a8>)
 8005522:	781b      	ldrb	r3, [r3, #0]
 8005524:	f003 0301 	and.w	r3, r3, #1
 8005528:	b2db      	uxtb	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	bf0c      	ite	eq
 800552e:	2301      	moveq	r3, #1
 8005530:	2300      	movne	r3, #0
 8005532:	b2d9      	uxtb	r1, r3
 8005534:	4a55      	ldr	r2, [pc, #340]	; (800568c <GetErrors+0x1ac>)
 8005536:	7f13      	ldrb	r3, [r2, #28]
 8005538:	f361 0382 	bfi	r3, r1, #2, #1
 800553c:	7713      	strb	r3, [r2, #28]
	meas_data.errors.sb_abort_err = d_inputs.sb_stop;
 800553e:	4b52      	ldr	r3, [pc, #328]	; (8005688 <GetErrors+0x1a8>)
 8005540:	781b      	ldrb	r3, [r3, #0]
 8005542:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8005546:	b2d9      	uxtb	r1, r3
 8005548:	4a50      	ldr	r2, [pc, #320]	; (800568c <GetErrors+0x1ac>)
 800554a:	7f13      	ldrb	r3, [r2, #28]
 800554c:	f361 03c3 	bfi	r3, r1, #3, #1
 8005550:	7713      	strb	r3, [r2, #28]
	meas_data.errors.sq_left_err = d_inputs.sq_kovsh_prob_left_1;
 8005552:	4b4d      	ldr	r3, [pc, #308]	; (8005688 <GetErrors+0x1a8>)
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800555a:	b2d9      	uxtb	r1, r3
 800555c:	4a4b      	ldr	r2, [pc, #300]	; (800568c <GetErrors+0x1ac>)
 800555e:	7f13      	ldrb	r3, [r2, #28]
 8005560:	f361 1304 	bfi	r3, r1, #4, #1
 8005564:	7713      	strb	r3, [r2, #28]
	meas_data.errors.sq_right_err = d_inputs.sq_kovsh_prob_right_1;
 8005566:	4b48      	ldr	r3, [pc, #288]	; (8005688 <GetErrors+0x1a8>)
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800556e:	b2d9      	uxtb	r1, r3
 8005570:	4a46      	ldr	r2, [pc, #280]	; (800568c <GetErrors+0x1ac>)
 8005572:	7f13      	ldrb	r3, [r2, #28]
 8005574:	f361 1345 	bfi	r3, r1, #5, #1
 8005578:	7713      	strb	r3, [r2, #28]
	meas_data.errors.full_nakop_err = meas_data.nakopitelFull;
 800557a:	4b44      	ldr	r3, [pc, #272]	; (800568c <GetErrors+0x1ac>)
 800557c:	8adb      	ldrh	r3, [r3, #22]
 800557e:	f003 0301 	and.w	r3, r3, #1
 8005582:	b2d9      	uxtb	r1, r3
 8005584:	4a41      	ldr	r2, [pc, #260]	; (800568c <GetErrors+0x1ac>)
 8005586:	7f53      	ldrb	r3, [r2, #29]
 8005588:	f361 0341 	bfi	r3, r1, #1, #1
 800558c:	7753      	strb	r3, [r2, #29]


	//Timeouts
	if(sqHomeTON.OUT){
 800558e:	4b40      	ldr	r3, [pc, #256]	; (8005690 <GetErrors+0x1b0>)
 8005590:	7a5b      	ldrb	r3, [r3, #9]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d004      	beq.n	80055a0 <GetErrors+0xc0>
		meas_data.errors.timeout_moving_left_err = 1;
 8005596:	4a3d      	ldr	r2, [pc, #244]	; (800568c <GetErrors+0x1ac>)
 8005598:	7f13      	ldrb	r3, [r2, #28]
 800559a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800559e:	7713      	strb	r3, [r2, #28]
	}
	if(sqWorkTON.OUT){
 80055a0:	4b3c      	ldr	r3, [pc, #240]	; (8005694 <GetErrors+0x1b4>)
 80055a2:	7a5b      	ldrb	r3, [r3, #9]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d004      	beq.n	80055b2 <GetErrors+0xd2>
		meas_data.errors.timeout_moving_right_err = 1;
 80055a8:	4a38      	ldr	r2, [pc, #224]	; (800568c <GetErrors+0x1ac>)
 80055aa:	7f13      	ldrb	r3, [r2, #28]
 80055ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055b0:	7713      	strb	r3, [r2, #28]
	}
	if(rtSbMakeProba|| rtSbMakeVozvrat)
 80055b2:	4b39      	ldr	r3, [pc, #228]	; (8005698 <GetErrors+0x1b8>)
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d103      	bne.n	80055c2 <GetErrors+0xe2>
 80055ba:	4b38      	ldr	r3, [pc, #224]	; (800569c <GetErrors+0x1bc>)
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d009      	beq.n	80055d6 <GetErrors+0xf6>
	{
		meas_data.errors.timeout_moving_left_err = 0;
 80055c2:	4a32      	ldr	r2, [pc, #200]	; (800568c <GetErrors+0x1ac>)
 80055c4:	7f13      	ldrb	r3, [r2, #28]
 80055c6:	f36f 13c7 	bfc	r3, #7, #1
 80055ca:	7713      	strb	r3, [r2, #28]
		meas_data.errors.timeout_moving_right_err = 0;
 80055cc:	4a2f      	ldr	r2, [pc, #188]	; (800568c <GetErrors+0x1ac>)
 80055ce:	7f13      	ldrb	r3, [r2, #28]
 80055d0:	f36f 1386 	bfc	r3, #6, #1
 80055d4:	7713      	strb	r3, [r2, #28]
	}
	// Need Return
	meas_data.errors.need_return_err = (!d_outputs.uz_prob_forv && !d_outputs.uz_prob_rev) &&
 80055d6:	4b32      	ldr	r3, [pc, #200]	; (80056a0 <GetErrors+0x1c0>)
 80055d8:	781b      	ldrb	r3, [r3, #0]
 80055da:	f003 0301 	and.w	r3, r3, #1
 80055de:	b2db      	uxtb	r3, r3
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d116      	bne.n	8005612 <GetErrors+0x132>
 80055e4:	4b2e      	ldr	r3, [pc, #184]	; (80056a0 <GetErrors+0x1c0>)
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	f003 0302 	and.w	r3, r3, #2
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d10f      	bne.n	8005612 <GetErrors+0x132>
			(!d_inputs.sq_kovsh_prob_left_2 && !d_inputs.sq_kovsh_prob_right_2);
 80055f2:	4b25      	ldr	r3, [pc, #148]	; (8005688 <GetErrors+0x1a8>)
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	f003 0310 	and.w	r3, r3, #16
 80055fa:	b2db      	uxtb	r3, r3
	meas_data.errors.need_return_err = (!d_outputs.uz_prob_forv && !d_outputs.uz_prob_rev) &&
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d108      	bne.n	8005612 <GetErrors+0x132>
			(!d_inputs.sq_kovsh_prob_left_2 && !d_inputs.sq_kovsh_prob_right_2);
 8005600:	4b21      	ldr	r3, [pc, #132]	; (8005688 <GetErrors+0x1a8>)
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	f003 0304 	and.w	r3, r3, #4
 8005608:	b2db      	uxtb	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <GetErrors+0x132>
	meas_data.errors.need_return_err = (!d_outputs.uz_prob_forv && !d_outputs.uz_prob_rev) &&
 800560e:	2301      	movs	r3, #1
 8005610:	e000      	b.n	8005614 <GetErrors+0x134>
 8005612:	2300      	movs	r3, #0
 8005614:	f003 0301 	and.w	r3, r3, #1
 8005618:	b2d9      	uxtb	r1, r3
 800561a:	4a1c      	ldr	r2, [pc, #112]	; (800568c <GetErrors+0x1ac>)
 800561c:	7f53      	ldrb	r3, [r2, #29]
 800561e:	f361 0300 	bfi	r3, r1, #0, #1
 8005622:	7753      	strb	r3, [r2, #29]

	// Remote stops
	if(settings.retain.remote_mode)
 8005624:	4b1f      	ldr	r3, [pc, #124]	; (80056a4 <GetErrors+0x1c4>)
 8005626:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005628:	2b00      	cmp	r3, #0
 800562a:	d01e      	beq.n	800566a <GetErrors+0x18a>
	{
		meas_data.errors.conveyer_off_err = !settings.client.from.konveyer_on;
 800562c:	4b1d      	ldr	r3, [pc, #116]	; (80056a4 <GetErrors+0x1c4>)
 800562e:	791b      	ldrb	r3, [r3, #4]
 8005630:	f003 0308 	and.w	r3, r3, #8
 8005634:	b2db      	uxtb	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	bf0c      	ite	eq
 800563a:	2301      	moveq	r3, #1
 800563c:	2300      	movne	r3, #0
 800563e:	b2d9      	uxtb	r1, r3
 8005640:	4a12      	ldr	r2, [pc, #72]	; (800568c <GetErrors+0x1ac>)
 8005642:	7f53      	ldrb	r3, [r2, #29]
 8005644:	f361 03c3 	bfi	r3, r1, #3, #1
 8005648:	7753      	strb	r3, [r2, #29]
		meas_data.errors.no_concentrat_err = !settings.client.from.koncentrat_on;
 800564a:	4b16      	ldr	r3, [pc, #88]	; (80056a4 <GetErrors+0x1c4>)
 800564c:	791b      	ldrb	r3, [r3, #4]
 800564e:	f003 0304 	and.w	r3, r3, #4
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b00      	cmp	r3, #0
 8005656:	bf0c      	ite	eq
 8005658:	2301      	moveq	r3, #1
 800565a:	2300      	movne	r3, #0
 800565c:	b2d9      	uxtb	r1, r3
 800565e:	4a0b      	ldr	r2, [pc, #44]	; (800568c <GetErrors+0x1ac>)
 8005660:	7f53      	ldrb	r3, [r2, #29]
 8005662:	f361 0382 	bfi	r3, r1, #2, #1
 8005666:	7753      	strb	r3, [r2, #29]
		meas_data.errors.conveyer_off_err = 0;
		meas_data.errors.no_concentrat_err = 0;

	}

}
 8005668:	e009      	b.n	800567e <GetErrors+0x19e>
		meas_data.errors.conveyer_off_err = 0;
 800566a:	4a08      	ldr	r2, [pc, #32]	; (800568c <GetErrors+0x1ac>)
 800566c:	7f53      	ldrb	r3, [r2, #29]
 800566e:	f36f 03c3 	bfc	r3, #3, #1
 8005672:	7753      	strb	r3, [r2, #29]
		meas_data.errors.no_concentrat_err = 0;
 8005674:	4a05      	ldr	r2, [pc, #20]	; (800568c <GetErrors+0x1ac>)
 8005676:	7f53      	ldrb	r3, [r2, #29]
 8005678:	f36f 0382 	bfc	r3, #2, #1
 800567c:	7753      	strb	r3, [r2, #29]
}
 800567e:	bf00      	nop
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr
 8005688:	2000701c 	.word	0x2000701c
 800568c:	20007520 	.word	0x20007520
 8005690:	20007464 	.word	0x20007464
 8005694:	2000744c 	.word	0x2000744c
 8005698:	2000745b 	.word	0x2000745b
 800569c:	2000745a 	.word	0x2000745a
 80056a0:	20007018 	.word	0x20007018
 80056a4:	20007474 	.word	0x20007474

080056a8 <Init_timers>:

static uint8_t Init_timers()
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
	if(Timer_Init(&(sqHomeTON))==TIMER_FAIL)return 0;
 80056ac:	4818      	ldr	r0, [pc, #96]	; (8005710 <Init_timers+0x68>)
 80056ae:	f001 f92b 	bl	8006908 <Timer_Init>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	d101      	bne.n	80056bc <Init_timers+0x14>
 80056b8:	2300      	movs	r3, #0
 80056ba:	e027      	b.n	800570c <Init_timers+0x64>
	if(Timer_Init(&(sqWorkTON))==TIMER_FAIL)return 0;
 80056bc:	4815      	ldr	r0, [pc, #84]	; (8005714 <Init_timers+0x6c>)
 80056be:	f001 f923 	bl	8006908 <Timer_Init>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d101      	bne.n	80056cc <Init_timers+0x24>
 80056c8:	2300      	movs	r3, #0
 80056ca:	e01f      	b.n	800570c <Init_timers+0x64>
	if(Timer_Init(&(automatTON))==TIMER_FAIL)return 0;
 80056cc:	4812      	ldr	r0, [pc, #72]	; (8005718 <Init_timers+0x70>)
 80056ce:	f001 f91b 	bl	8006908 <Timer_Init>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d101      	bne.n	80056dc <Init_timers+0x34>
 80056d8:	2300      	movs	r3, #0
 80056da:	e017      	b.n	800570c <Init_timers+0x64>
	if(settings.retain.prob_toHomeTime==0)settings.retain.prob_toHomeTime = 10;
 80056dc:	4b0f      	ldr	r3, [pc, #60]	; (800571c <Init_timers+0x74>)
 80056de:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d102      	bne.n	80056ea <Init_timers+0x42>
 80056e4:	4b0d      	ldr	r3, [pc, #52]	; (800571c <Init_timers+0x74>)
 80056e6:	220a      	movs	r2, #10
 80056e8:	871a      	strh	r2, [r3, #56]	; 0x38
	if(settings.retain.prob_toWorkTime==0)settings.retain.prob_toWorkTime = 10;
 80056ea:	4b0c      	ldr	r3, [pc, #48]	; (800571c <Init_timers+0x74>)
 80056ec:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d102      	bne.n	80056f8 <Init_timers+0x50>
 80056f2:	4b0a      	ldr	r3, [pc, #40]	; (800571c <Init_timers+0x74>)
 80056f4:	220a      	movs	r2, #10
 80056f6:	875a      	strh	r2, [r3, #58]	; 0x3a
	if(settings.retain.automat_timer==0)settings.retain.automat_timer = 60;
 80056f8:	4b08      	ldr	r3, [pc, #32]	; (800571c <Init_timers+0x74>)
 80056fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d102      	bne.n	8005706 <Init_timers+0x5e>
 8005700:	4b06      	ldr	r3, [pc, #24]	; (800571c <Init_timers+0x74>)
 8005702:	223c      	movs	r2, #60	; 0x3c
 8005704:	641a      	str	r2, [r3, #64]	; 0x40
	SetTimers();
 8005706:	f000 f80b 	bl	8005720 <SetTimers>
	return 1;
 800570a:	2301      	movs	r3, #1
}
 800570c:	4618      	mov	r0, r3
 800570e:	bd80      	pop	{r7, pc}
 8005710:	20007464 	.word	0x20007464
 8005714:	2000744c 	.word	0x2000744c
 8005718:	2000743c 	.word	0x2000743c
 800571c:	20007474 	.word	0x20007474

08005720 <SetTimers>:

static void SetTimers()
{
 8005720:	b480      	push	{r7}
 8005722:	af00      	add	r7, sp, #0
	// Тайм-аут движения влево
	sqHomeTON.IN = !d_inputs.sq_kovsh_prob_left_2 && d_outputs.uz_prob_rev;
 8005724:	4b2d      	ldr	r3, [pc, #180]	; (80057dc <SetTimers+0xbc>)
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	f003 0310 	and.w	r3, r3, #16
 800572c:	b2db      	uxtb	r3, r3
 800572e:	2b00      	cmp	r3, #0
 8005730:	d108      	bne.n	8005744 <SetTimers+0x24>
 8005732:	4b2b      	ldr	r3, [pc, #172]	; (80057e0 <SetTimers+0xc0>)
 8005734:	781b      	ldrb	r3, [r3, #0]
 8005736:	f003 0302 	and.w	r3, r3, #2
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	d001      	beq.n	8005744 <SetTimers+0x24>
 8005740:	2301      	movs	r3, #1
 8005742:	e000      	b.n	8005746 <SetTimers+0x26>
 8005744:	2300      	movs	r3, #0
 8005746:	b2da      	uxtb	r2, r3
 8005748:	4b26      	ldr	r3, [pc, #152]	; (80057e4 <SetTimers+0xc4>)
 800574a:	721a      	strb	r2, [r3, #8]
	sqHomeTON.SV = settings.retain.prob_toHomeTime * 1000;
 800574c:	4b26      	ldr	r3, [pc, #152]	; (80057e8 <SetTimers+0xc8>)
 800574e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8005750:	461a      	mov	r2, r3
 8005752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005756:	fb03 f302 	mul.w	r3, r3, r2
 800575a:	461a      	mov	r2, r3
 800575c:	4b21      	ldr	r3, [pc, #132]	; (80057e4 <SetTimers+0xc4>)
 800575e:	601a      	str	r2, [r3, #0]

	// Тайм-аут движения вправо
	sqWorkTON.IN = !d_inputs.sq_kovsh_prob_right_2 && d_outputs.uz_prob_forv;
 8005760:	4b1e      	ldr	r3, [pc, #120]	; (80057dc <SetTimers+0xbc>)
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	f003 0304 	and.w	r3, r3, #4
 8005768:	b2db      	uxtb	r3, r3
 800576a:	2b00      	cmp	r3, #0
 800576c:	d108      	bne.n	8005780 <SetTimers+0x60>
 800576e:	4b1c      	ldr	r3, [pc, #112]	; (80057e0 <SetTimers+0xc0>)
 8005770:	781b      	ldrb	r3, [r3, #0]
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <SetTimers+0x60>
 800577c:	2301      	movs	r3, #1
 800577e:	e000      	b.n	8005782 <SetTimers+0x62>
 8005780:	2300      	movs	r3, #0
 8005782:	b2da      	uxtb	r2, r3
 8005784:	4b19      	ldr	r3, [pc, #100]	; (80057ec <SetTimers+0xcc>)
 8005786:	721a      	strb	r2, [r3, #8]
	sqWorkTON.SV = settings.retain.prob_toWorkTime * 1000;
 8005788:	4b17      	ldr	r3, [pc, #92]	; (80057e8 <SetTimers+0xc8>)
 800578a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800578c:	461a      	mov	r2, r3
 800578e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005792:	fb03 f302 	mul.w	r3, r3, r2
 8005796:	461a      	mov	r2, r3
 8005798:	4b14      	ldr	r3, [pc, #80]	; (80057ec <SetTimers+0xcc>)
 800579a:	601a      	str	r2, [r3, #0]

	// Таймер автоматической работы
	automatTON.IN = auto_mode && !cycle_probotbor && !meas_data.nakopitelFull;
 800579c:	4b14      	ldr	r3, [pc, #80]	; (80057f0 <SetTimers+0xd0>)
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d009      	beq.n	80057b8 <SetTimers+0x98>
 80057a4:	4b13      	ldr	r3, [pc, #76]	; (80057f4 <SetTimers+0xd4>)
 80057a6:	781b      	ldrb	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d105      	bne.n	80057b8 <SetTimers+0x98>
 80057ac:	4b12      	ldr	r3, [pc, #72]	; (80057f8 <SetTimers+0xd8>)
 80057ae:	8adb      	ldrh	r3, [r3, #22]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d101      	bne.n	80057b8 <SetTimers+0x98>
 80057b4:	2301      	movs	r3, #1
 80057b6:	e000      	b.n	80057ba <SetTimers+0x9a>
 80057b8:	2300      	movs	r3, #0
 80057ba:	b2da      	uxtb	r2, r3
 80057bc:	4b0f      	ldr	r3, [pc, #60]	; (80057fc <SetTimers+0xdc>)
 80057be:	721a      	strb	r2, [r3, #8]
	automatTON.SV = select_period * 1000;
 80057c0:	4b0f      	ldr	r3, [pc, #60]	; (8005800 <SetTimers+0xe0>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80057c8:	fb02 f303 	mul.w	r3, r2, r3
 80057cc:	4a0b      	ldr	r2, [pc, #44]	; (80057fc <SetTimers+0xdc>)
 80057ce:	6013      	str	r3, [r2, #0]

	// Осталось до следующей пробы
}
 80057d0:	bf00      	nop
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	2000701c 	.word	0x2000701c
 80057e0:	20007018 	.word	0x20007018
 80057e4:	20007464 	.word	0x20007464
 80057e8:	20007474 	.word	0x20007474
 80057ec:	2000744c 	.word	0x2000744c
 80057f0:	20007461 	.word	0x20007461
 80057f4:	2000745e 	.word	0x2000745e
 80057f8:	20007520 	.word	0x20007520
 80057fc:	2000743c 	.word	0x2000743c
 8005800:	20007434 	.word	0x20007434

08005804 <LocalRemoteControl>:

static void LocalRemoteControl()
{
 8005804:	b480      	push	{r7}
 8005806:	af00      	add	r7, sp, #0
	auto_mode = settings.retain.remote_mode ? settings.client.from.auto_on : d_inputs.sb_auto_local;
 8005808:	4b26      	ldr	r3, [pc, #152]	; (80058a4 <LocalRemoteControl+0xa0>)
 800580a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800580c:	2b00      	cmp	r3, #0
 800580e:	d006      	beq.n	800581e <LocalRemoteControl+0x1a>
 8005810:	4b24      	ldr	r3, [pc, #144]	; (80058a4 <LocalRemoteControl+0xa0>)
 8005812:	791b      	ldrb	r3, [r3, #4]
 8005814:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005818:	b2db      	uxtb	r3, r3
 800581a:	461a      	mov	r2, r3
 800581c:	e005      	b.n	800582a <LocalRemoteControl+0x26>
 800581e:	4b22      	ldr	r3, [pc, #136]	; (80058a8 <LocalRemoteControl+0xa4>)
 8005820:	785b      	ldrb	r3, [r3, #1]
 8005822:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005826:	b2db      	uxtb	r3, r3
 8005828:	461a      	mov	r2, r3
 800582a:	4b20      	ldr	r3, [pc, #128]	; (80058ac <LocalRemoteControl+0xa8>)
 800582c:	701a      	strb	r2, [r3, #0]
	select_period = settings.retain.remote_mode ? (uint32_t)settings.client.from.select_period : settings.retain.automat_timer;
 800582e:	4b1d      	ldr	r3, [pc, #116]	; (80058a4 <LocalRemoteControl+0xa0>)
 8005830:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005832:	2b00      	cmp	r3, #0
 8005834:	d007      	beq.n	8005846 <LocalRemoteControl+0x42>
 8005836:	4b1b      	ldr	r3, [pc, #108]	; (80058a4 <LocalRemoteControl+0xa0>)
 8005838:	edd3 7a02 	vldr	s15, [r3, #8]
 800583c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005840:	ee17 2a90 	vmov	r2, s15
 8005844:	e001      	b.n	800584a <LocalRemoteControl+0x46>
 8005846:	4b17      	ldr	r3, [pc, #92]	; (80058a4 <LocalRemoteControl+0xa0>)
 8005848:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800584a:	4b19      	ldr	r3, [pc, #100]	; (80058b0 <LocalRemoteControl+0xac>)
 800584c:	601a      	str	r2, [r3, #0]
	// действия по нажатию кнопки
	if((d_inputs.sb_make_proba && !settings.retain.remote_mode) ||
 800584e:	4b16      	ldr	r3, [pc, #88]	; (80058a8 <LocalRemoteControl+0xa4>)
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <LocalRemoteControl+0x60>
 800585c:	4b11      	ldr	r3, [pc, #68]	; (80058a4 <LocalRemoteControl+0xa0>)
 800585e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00a      	beq.n	800587a <LocalRemoteControl+0x76>
				(settings.client.from.select_cmd && settings.retain.remote_mode))
 8005864:	4b0f      	ldr	r3, [pc, #60]	; (80058a4 <LocalRemoteControl+0xa0>)
 8005866:	791b      	ldrb	r3, [r3, #4]
 8005868:	f003 0310 	and.w	r3, r3, #16
 800586c:	b2db      	uxtb	r3, r3
	if((d_inputs.sb_make_proba && !settings.retain.remote_mode) ||
 800586e:	2b00      	cmp	r3, #0
 8005870:	d013      	beq.n	800589a <LocalRemoteControl+0x96>
				(settings.client.from.select_cmd && settings.retain.remote_mode))
 8005872:	4b0c      	ldr	r3, [pc, #48]	; (80058a4 <LocalRemoteControl+0xa0>)
 8005874:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00f      	beq.n	800589a <LocalRemoteControl+0x96>
	{
		if(!auto_mode)
 800587a:	4b0c      	ldr	r3, [pc, #48]	; (80058ac <LocalRemoteControl+0xa8>)
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d10b      	bne.n	800589a <LocalRemoteControl+0x96>
		{
			if(settings.retain.remote_mode)settings.client.from.select_cmd = 0;
 8005882:	4b08      	ldr	r3, [pc, #32]	; (80058a4 <LocalRemoteControl+0xa0>)
 8005884:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005886:	2b00      	cmp	r3, #0
 8005888:	d004      	beq.n	8005894 <LocalRemoteControl+0x90>
 800588a:	4a06      	ldr	r2, [pc, #24]	; (80058a4 <LocalRemoteControl+0xa0>)
 800588c:	7913      	ldrb	r3, [r2, #4]
 800588e:	f36f 1304 	bfc	r3, #4, #1
 8005892:	7113      	strb	r3, [r2, #4]
						startOtborCommand = 1;
 8005894:	4b07      	ldr	r3, [pc, #28]	; (80058b4 <LocalRemoteControl+0xb0>)
 8005896:	2201      	movs	r2, #1
 8005898:	701a      	strb	r2, [r3, #0]
		}
	}

}
 800589a:	bf00      	nop
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	20007474 	.word	0x20007474
 80058a8:	2000701c 	.word	0x2000701c
 80058ac:	20007461 	.word	0x20007461
 80058b0:	20007434 	.word	0x20007434
 80058b4:	2000745c 	.word	0x2000745c

080058b8 <Moving>:


static void Moving()
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	af00      	add	r7, sp, #0
	if(!CheckCriticalError())
 80058bc:	f000 f8ba 	bl	8005a34 <CheckCriticalError>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d102      	bne.n	80058cc <Moving+0x14>
	{
		cycle_probotbor = 0;
 80058c6:	4b47      	ldr	r3, [pc, #284]	; (80059e4 <Moving+0x12c>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	701a      	strb	r2, [r3, #0]
	}
	// Условия остановки движения
	if(cycle_probotbor || cycle_vozvrat)
 80058cc:	4b45      	ldr	r3, [pc, #276]	; (80059e4 <Moving+0x12c>)
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d103      	bne.n	80058dc <Moving+0x24>
 80058d4:	4b44      	ldr	r3, [pc, #272]	; (80059e8 <Moving+0x130>)
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d03e      	beq.n	800595a <Moving+0xa2>
	{
		// остановка по концевикам b
		if((targetSq && (d_inputs.sq_kovsh_prob_right_1 || d_inputs.sq_kovsh_prob_right_2))||
 80058dc:	4b43      	ldr	r3, [pc, #268]	; (80059ec <Moving+0x134>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d00d      	beq.n	8005900 <Moving+0x48>
 80058e4:	4b42      	ldr	r3, [pc, #264]	; (80059f0 <Moving+0x138>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	f003 0302 	and.w	r3, r3, #2
 80058ec:	b2db      	uxtb	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d120      	bne.n	8005934 <Moving+0x7c>
 80058f2:	4b3f      	ldr	r3, [pc, #252]	; (80059f0 <Moving+0x138>)
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	f003 0304 	and.w	r3, r3, #4
 80058fa:	b2db      	uxtb	r3, r3
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d119      	bne.n	8005934 <Moving+0x7c>
				(!targetSq && (d_inputs.sq_kovsh_prob_left_1 || d_inputs.sq_kovsh_prob_left_2))
 8005900:	4b3a      	ldr	r3, [pc, #232]	; (80059ec <Moving+0x134>)
 8005902:	781b      	ldrb	r3, [r3, #0]
		if((targetSq && (d_inputs.sq_kovsh_prob_right_1 || d_inputs.sq_kovsh_prob_right_2))||
 8005904:	2b00      	cmp	r3, #0
 8005906:	d10d      	bne.n	8005924 <Moving+0x6c>
				(!targetSq && (d_inputs.sq_kovsh_prob_left_1 || d_inputs.sq_kovsh_prob_left_2))
 8005908:	4b39      	ldr	r3, [pc, #228]	; (80059f0 <Moving+0x138>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	f003 0308 	and.w	r3, r3, #8
 8005910:	b2db      	uxtb	r3, r3
 8005912:	2b00      	cmp	r3, #0
 8005914:	d10e      	bne.n	8005934 <Moving+0x7c>
 8005916:	4b36      	ldr	r3, [pc, #216]	; (80059f0 <Moving+0x138>)
 8005918:	781b      	ldrb	r3, [r3, #0]
 800591a:	f003 0310 	and.w	r3, r3, #16
 800591e:	b2db      	uxtb	r3, r3
 8005920:	2b00      	cmp	r3, #0
 8005922:	d107      	bne.n	8005934 <Moving+0x7c>
				|| rtSq_kovsh_left_1 || rtSq_kovsh_right_1)
 8005924:	4b33      	ldr	r3, [pc, #204]	; (80059f4 <Moving+0x13c>)
 8005926:	781b      	ldrb	r3, [r3, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d103      	bne.n	8005934 <Moving+0x7c>
 800592c:	4b32      	ldr	r3, [pc, #200]	; (80059f8 <Moving+0x140>)
 800592e:	781b      	ldrb	r3, [r3, #0]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d00b      	beq.n	800594c <Moving+0x94>
		{
			if(cycle_probotbor)
 8005934:	4b2b      	ldr	r3, [pc, #172]	; (80059e4 <Moving+0x12c>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d005      	beq.n	8005948 <Moving+0x90>
			{
				meas_data.probInKanistra++;
 800593c:	4b2f      	ldr	r3, [pc, #188]	; (80059fc <Moving+0x144>)
 800593e:	8a9b      	ldrh	r3, [r3, #20]
 8005940:	3301      	adds	r3, #1
 8005942:	b29a      	uxth	r2, r3
 8005944:	4b2d      	ldr	r3, [pc, #180]	; (80059fc <Moving+0x144>)
 8005946:	829a      	strh	r2, [r3, #20]
			}
			StopCycles();
 8005948:	f000 f8c4 	bl	8005ad4 <StopCycles>

		}
		// остановка по критической ошибке
		if(!CheckCriticalError()){
 800594c:	f000 f872 	bl	8005a34 <CheckCriticalError>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d101      	bne.n	800595a <Moving+0xa2>
			StopCycles();
 8005956:	f000 f8bd 	bl	8005ad4 <StopCycles>
		}
	}


	// Управление двигателем
	if(cycle_probotbor || cycle_vozvrat)
 800595a:	4b22      	ldr	r3, [pc, #136]	; (80059e4 <Moving+0x12c>)
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d103      	bne.n	800596a <Moving+0xb2>
 8005962:	4b21      	ldr	r3, [pc, #132]	; (80059e8 <Moving+0x130>)
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d023      	beq.n	80059b2 <Moving+0xfa>
	{
		d_outputs.prob_ready=0;
 800596a:	4a25      	ldr	r2, [pc, #148]	; (8005a00 <Moving+0x148>)
 800596c:	7813      	ldrb	r3, [r2, #0]
 800596e:	f36f 0382 	bfc	r3, #2, #1
 8005972:	7013      	strb	r3, [r2, #0]
		if(targetSq)
 8005974:	4b1d      	ldr	r3, [pc, #116]	; (80059ec <Moving+0x134>)
 8005976:	781b      	ldrb	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00a      	beq.n	8005992 <Moving+0xda>
		{
			d_outputs.uz_prob_forv = 1;
 800597c:	4a20      	ldr	r2, [pc, #128]	; (8005a00 <Moving+0x148>)
 800597e:	7813      	ldrb	r3, [r2, #0]
 8005980:	f043 0301 	orr.w	r3, r3, #1
 8005984:	7013      	strb	r3, [r2, #0]
			d_outputs.uz_prob_rev = 0;
 8005986:	4a1e      	ldr	r2, [pc, #120]	; (8005a00 <Moving+0x148>)
 8005988:	7813      	ldrb	r3, [r2, #0]
 800598a:	f36f 0341 	bfc	r3, #1, #1
 800598e:	7013      	strb	r3, [r2, #0]
 8005990:	e009      	b.n	80059a6 <Moving+0xee>
		}
		else
		{
			d_outputs.uz_prob_forv = 0;
 8005992:	4a1b      	ldr	r2, [pc, #108]	; (8005a00 <Moving+0x148>)
 8005994:	7813      	ldrb	r3, [r2, #0]
 8005996:	f36f 0300 	bfc	r3, #0, #1
 800599a:	7013      	strb	r3, [r2, #0]
			d_outputs.uz_prob_rev = 1;
 800599c:	4a18      	ldr	r2, [pc, #96]	; (8005a00 <Moving+0x148>)
 800599e:	7813      	ldrb	r3, [r2, #0]
 80059a0:	f043 0302 	orr.w	r3, r3, #2
 80059a4:	7013      	strb	r3, [r2, #0]
		}
		d_outputs.prob_ready = 0;
 80059a6:	4a16      	ldr	r2, [pc, #88]	; (8005a00 <Moving+0x148>)
 80059a8:	7813      	ldrb	r3, [r2, #0]
 80059aa:	f36f 0382 	bfc	r3, #2, #1
 80059ae:	7013      	strb	r3, [r2, #0]
 80059b0:	e015      	b.n	80059de <Moving+0x126>
	}
	else
	{
		d_outputs.uz_prob_forv =0 ;
 80059b2:	4a13      	ldr	r2, [pc, #76]	; (8005a00 <Moving+0x148>)
 80059b4:	7813      	ldrb	r3, [r2, #0]
 80059b6:	f36f 0300 	bfc	r3, #0, #1
 80059ba:	7013      	strb	r3, [r2, #0]
		d_outputs.uz_prob_rev = 0 ;
 80059bc:	4a10      	ldr	r2, [pc, #64]	; (8005a00 <Moving+0x148>)
 80059be:	7813      	ldrb	r3, [r2, #0]
 80059c0:	f36f 0341 	bfc	r3, #1, #1
 80059c4:	7013      	strb	r3, [r2, #0]
		d_outputs.prob_ready = CheckCommonError();
 80059c6:	f000 f81d 	bl	8005a04 <CheckCommonError>
 80059ca:	4603      	mov	r3, r0
 80059cc:	f003 0301 	and.w	r3, r3, #1
 80059d0:	b2d9      	uxtb	r1, r3
 80059d2:	4a0b      	ldr	r2, [pc, #44]	; (8005a00 <Moving+0x148>)
 80059d4:	7813      	ldrb	r3, [r2, #0]
 80059d6:	f361 0382 	bfi	r3, r1, #2, #1
 80059da:	7013      	strb	r3, [r2, #0]
	}
}
 80059dc:	bf00      	nop
 80059de:	bf00      	nop
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	2000745e 	.word	0x2000745e
 80059e8:	2000745f 	.word	0x2000745f
 80059ec:	20007458 	.word	0x20007458
 80059f0:	2000701c 	.word	0x2000701c
 80059f4:	20007439 	.word	0x20007439
 80059f8:	20007459 	.word	0x20007459
 80059fc:	20007520 	.word	0x20007520
 8005a00:	20007018 	.word	0x20007018

08005a04 <CheckCommonError>:

static uint8_t CheckCommonError()
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
	uint16_t *errPointer = (uint16_t*)&(meas_data.errors);
 8005a0a:	4b09      	ldr	r3, [pc, #36]	; (8005a30 <CheckCommonError+0x2c>)
 8005a0c:	607b      	str	r3, [r7, #4]
	uint16_t result = *errPointer ? 0 : 1;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	881b      	ldrh	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	bf0c      	ite	eq
 8005a16:	2301      	moveq	r3, #1
 8005a18:	2300      	movne	r3, #0
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	807b      	strh	r3, [r7, #2]
	return result;
 8005a1e:	887b      	ldrh	r3, [r7, #2]
 8005a20:	b2db      	uxtb	r3, r3

}
 8005a22:	4618      	mov	r0, r3
 8005a24:	370c      	adds	r7, #12
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	2000753c 	.word	0x2000753c

08005a34 <CheckCriticalError>:

static uint8_t CheckCriticalError()
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
	// Ошибки, при которых нужно срочно остановить ковш
	uint8_t error =  meas_data.errors.sb_abort_err ||
 8005a3a:	4b24      	ldr	r3, [pc, #144]	; (8005acc <CheckCriticalError+0x98>)
 8005a3c:	7f1b      	ldrb	r3, [r3, #28]
 8005a3e:	f003 0308 	and.w	r3, r3, #8
 8005a42:	b2db      	uxtb	r3, r3
			meas_data.errors.uz_err ||
			(meas_data.errors.sq_left_err && d_outputs.uz_prob_rev)||
			(meas_data.errors.sq_right_err && d_outputs.uz_prob_forv)||
			(meas_data.errors.timeout_moving_left_err)||
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d130      	bne.n	8005aaa <CheckCriticalError+0x76>
	uint8_t error =  meas_data.errors.sb_abort_err ||
 8005a48:	4b20      	ldr	r3, [pc, #128]	; (8005acc <CheckCriticalError+0x98>)
 8005a4a:	7f1b      	ldrb	r3, [r3, #28]
 8005a4c:	f003 0304 	and.w	r3, r3, #4
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d129      	bne.n	8005aaa <CheckCriticalError+0x76>
			(meas_data.errors.sq_left_err && d_outputs.uz_prob_rev)||
 8005a56:	4b1d      	ldr	r3, [pc, #116]	; (8005acc <CheckCriticalError+0x98>)
 8005a58:	7f1b      	ldrb	r3, [r3, #28]
 8005a5a:	f003 0310 	and.w	r3, r3, #16
 8005a5e:	b2db      	uxtb	r3, r3
			meas_data.errors.uz_err ||
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d006      	beq.n	8005a72 <CheckCriticalError+0x3e>
			(meas_data.errors.sq_left_err && d_outputs.uz_prob_rev)||
 8005a64:	4b1a      	ldr	r3, [pc, #104]	; (8005ad0 <CheckCriticalError+0x9c>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	f003 0302 	and.w	r3, r3, #2
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d11b      	bne.n	8005aaa <CheckCriticalError+0x76>
			(meas_data.errors.sq_right_err && d_outputs.uz_prob_forv)||
 8005a72:	4b16      	ldr	r3, [pc, #88]	; (8005acc <CheckCriticalError+0x98>)
 8005a74:	7f1b      	ldrb	r3, [r3, #28]
 8005a76:	f003 0320 	and.w	r3, r3, #32
 8005a7a:	b2db      	uxtb	r3, r3
			(meas_data.errors.sq_left_err && d_outputs.uz_prob_rev)||
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d006      	beq.n	8005a8e <CheckCriticalError+0x5a>
			(meas_data.errors.sq_right_err && d_outputs.uz_prob_forv)||
 8005a80:	4b13      	ldr	r3, [pc, #76]	; (8005ad0 <CheckCriticalError+0x9c>)
 8005a82:	781b      	ldrb	r3, [r3, #0]
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d10d      	bne.n	8005aaa <CheckCriticalError+0x76>
 8005a8e:	4b0f      	ldr	r3, [pc, #60]	; (8005acc <CheckCriticalError+0x98>)
 8005a90:	7f1b      	ldrb	r3, [r3, #28]
 8005a92:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d106      	bne.n	8005aaa <CheckCriticalError+0x76>
			(meas_data.errors.timeout_moving_left_err)||
 8005a9c:	4b0b      	ldr	r3, [pc, #44]	; (8005acc <CheckCriticalError+0x98>)
 8005a9e:	7f1b      	ldrb	r3, [r3, #28]
 8005aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d001      	beq.n	8005aae <CheckCriticalError+0x7a>
 8005aaa:	2301      	movs	r3, #1
 8005aac:	e000      	b.n	8005ab0 <CheckCriticalError+0x7c>
 8005aae:	2300      	movs	r3, #0
	uint8_t error =  meas_data.errors.sb_abort_err ||
 8005ab0:	71fb      	strb	r3, [r7, #7]
			(meas_data.errors.timeout_moving_right_err);
	return !error;
 8005ab2:	79fb      	ldrb	r3, [r7, #7]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	bf0c      	ite	eq
 8005ab8:	2301      	moveq	r3, #1
 8005aba:	2300      	movne	r3, #0
 8005abc:	b2db      	uxtb	r3, r3
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	370c      	adds	r7, #12
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	20007520 	.word	0x20007520
 8005ad0:	20007018 	.word	0x20007018

08005ad4 <StopCycles>:

static void StopCycles()
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	af00      	add	r7, sp, #0
	cycle_probotbor = 0;
 8005ad8:	4b05      	ldr	r3, [pc, #20]	; (8005af0 <StopCycles+0x1c>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	701a      	strb	r2, [r3, #0]
	cycle_vozvrat = 0;
 8005ade:	4b05      	ldr	r3, [pc, #20]	; (8005af4 <StopCycles+0x20>)
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	701a      	strb	r2, [r3, #0]
}
 8005ae4:	bf00      	nop
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	2000745e 	.word	0x2000745e
 8005af4:	2000745f 	.word	0x2000745f

08005af8 <OnCommandCycle>:

static void OnCommandCycle()
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	af00      	add	r7, sp, #0
	if(meas_data.errors.need_return_err &&
 8005afc:	4b46      	ldr	r3, [pc, #280]	; (8005c18 <OnCommandCycle+0x120>)
 8005afe:	7f5b      	ldrb	r3, [r3, #29]
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	b2db      	uxtb	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d048      	beq.n	8005b9c <OnCommandCycle+0xa4>
			CheckCriticalError() &&
 8005b0a:	f7ff ff93 	bl	8005a34 <CheckCriticalError>
 8005b0e:	4603      	mov	r3, r0
	if(meas_data.errors.need_return_err &&
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d043      	beq.n	8005b9c <OnCommandCycle+0xa4>
			!cycle_vozvrat &&
 8005b14:	4b41      	ldr	r3, [pc, #260]	; (8005c1c <OnCommandCycle+0x124>)
 8005b16:	781b      	ldrb	r3, [r3, #0]
			CheckCriticalError() &&
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d13f      	bne.n	8005b9c <OnCommandCycle+0xa4>
			(d_inputs.sb_vozvrat || settings.non_retain.start_vozvrat))
 8005b1c:	4b40      	ldr	r3, [pc, #256]	; (8005c20 <OnCommandCycle+0x128>)
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005b24:	b2db      	uxtb	r3, r3
			!cycle_vozvrat &&
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d104      	bne.n	8005b34 <OnCommandCycle+0x3c>
			(d_inputs.sb_vozvrat || settings.non_retain.start_vozvrat))
 8005b2a:	4b3e      	ldr	r3, [pc, #248]	; (8005c24 <OnCommandCycle+0x12c>)
 8005b2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d033      	beq.n	8005b9c <OnCommandCycle+0xa4>
	{
		cycle_probotbor = 0;
 8005b34:	4b3c      	ldr	r3, [pc, #240]	; (8005c28 <OnCommandCycle+0x130>)
 8005b36:	2200      	movs	r2, #0
 8005b38:	701a      	strb	r2, [r3, #0]
		cycle_vozvrat = 1;
 8005b3a:	4b38      	ldr	r3, [pc, #224]	; (8005c1c <OnCommandCycle+0x124>)
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	701a      	strb	r2, [r3, #0]
		if(d_inputs.sq_kovsh_prob_left_1 || d_inputs.sq_kovsh_prob_left_2 ){
 8005b40:	4b37      	ldr	r3, [pc, #220]	; (8005c20 <OnCommandCycle+0x128>)
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	f003 0308 	and.w	r3, r3, #8
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d106      	bne.n	8005b5c <OnCommandCycle+0x64>
 8005b4e:	4b34      	ldr	r3, [pc, #208]	; (8005c20 <OnCommandCycle+0x128>)
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	f003 0310 	and.w	r3, r3, #16
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d003      	beq.n	8005b64 <OnCommandCycle+0x6c>
			targetSq = 1;
 8005b5c:	4b33      	ldr	r3, [pc, #204]	; (8005c2c <OnCommandCycle+0x134>)
 8005b5e:	2201      	movs	r2, #1
 8005b60:	701a      	strb	r2, [r3, #0]
 8005b62:	e01b      	b.n	8005b9c <OnCommandCycle+0xa4>
		}
		else if(d_inputs.sq_kovsh_prob_right_1 || d_inputs.sq_kovsh_prob_right_2){
 8005b64:	4b2e      	ldr	r3, [pc, #184]	; (8005c20 <OnCommandCycle+0x128>)
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	f003 0302 	and.w	r3, r3, #2
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d106      	bne.n	8005b80 <OnCommandCycle+0x88>
 8005b72:	4b2b      	ldr	r3, [pc, #172]	; (8005c20 <OnCommandCycle+0x128>)
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	f003 0304 	and.w	r3, r3, #4
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d003      	beq.n	8005b88 <OnCommandCycle+0x90>
			targetSq = 0;
 8005b80:	4b2a      	ldr	r3, [pc, #168]	; (8005c2c <OnCommandCycle+0x134>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	701a      	strb	r2, [r3, #0]
 8005b86:	e009      	b.n	8005b9c <OnCommandCycle+0xa4>
		}
		else{
			targetSq = !targetSq;
 8005b88:	4b28      	ldr	r3, [pc, #160]	; (8005c2c <OnCommandCycle+0x134>)
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	bf0c      	ite	eq
 8005b90:	2301      	moveq	r3, #1
 8005b92:	2300      	movne	r3, #0
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	461a      	mov	r2, r3
 8005b98:	4b24      	ldr	r3, [pc, #144]	; (8005c2c <OnCommandCycle+0x134>)
 8005b9a:	701a      	strb	r2, [r3, #0]
		};
	}
	settings.non_retain.start_vozvrat = 0;
 8005b9c:	4b21      	ldr	r3, [pc, #132]	; (8005c24 <OnCommandCycle+0x12c>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

	if(startOtborCommand)
 8005ba4:	4b22      	ldr	r3, [pc, #136]	; (8005c30 <OnCommandCycle+0x138>)
 8005ba6:	781b      	ldrb	r3, [r3, #0]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d032      	beq.n	8005c12 <OnCommandCycle+0x11a>
	{
		startOtborCommand = 0;
 8005bac:	4b20      	ldr	r3, [pc, #128]	; (8005c30 <OnCommandCycle+0x138>)
 8005bae:	2200      	movs	r2, #0
 8005bb0:	701a      	strb	r2, [r3, #0]
		if(d_outputs.prob_ready)
 8005bb2:	4b20      	ldr	r3, [pc, #128]	; (8005c34 <OnCommandCycle+0x13c>)
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	f003 0304 	and.w	r3, r3, #4
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d028      	beq.n	8005c12 <OnCommandCycle+0x11a>
		{
			cycle_probotbor = 1;
 8005bc0:	4b19      	ldr	r3, [pc, #100]	; (8005c28 <OnCommandCycle+0x130>)
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	701a      	strb	r2, [r3, #0]
			cycle_vozvrat = 0;
 8005bc6:	4b15      	ldr	r3, [pc, #84]	; (8005c1c <OnCommandCycle+0x124>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	701a      	strb	r2, [r3, #0]

			if(d_inputs.sq_kovsh_prob_left_2 || d_inputs.sq_kovsh_prob_left_1)
 8005bcc:	4b14      	ldr	r3, [pc, #80]	; (8005c20 <OnCommandCycle+0x128>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	f003 0310 	and.w	r3, r3, #16
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d106      	bne.n	8005be8 <OnCommandCycle+0xf0>
 8005bda:	4b11      	ldr	r3, [pc, #68]	; (8005c20 <OnCommandCycle+0x128>)
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	f003 0308 	and.w	r3, r3, #8
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d003      	beq.n	8005bf0 <OnCommandCycle+0xf8>
			{
				targetSq = 1;
 8005be8:	4b10      	ldr	r3, [pc, #64]	; (8005c2c <OnCommandCycle+0x134>)
 8005bea:	2201      	movs	r2, #1
 8005bec:	701a      	strb	r2, [r3, #0]
			{
				targetSq = 0;
			}
		}
	}
}
 8005bee:	e010      	b.n	8005c12 <OnCommandCycle+0x11a>
			else if(d_inputs.sq_kovsh_prob_right_2 || d_inputs.sq_kovsh_prob_right_1)
 8005bf0:	4b0b      	ldr	r3, [pc, #44]	; (8005c20 <OnCommandCycle+0x128>)
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	f003 0304 	and.w	r3, r3, #4
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d106      	bne.n	8005c0c <OnCommandCycle+0x114>
 8005bfe:	4b08      	ldr	r3, [pc, #32]	; (8005c20 <OnCommandCycle+0x128>)
 8005c00:	781b      	ldrb	r3, [r3, #0]
 8005c02:	f003 0302 	and.w	r3, r3, #2
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d002      	beq.n	8005c12 <OnCommandCycle+0x11a>
				targetSq = 0;
 8005c0c:	4b07      	ldr	r3, [pc, #28]	; (8005c2c <OnCommandCycle+0x134>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	701a      	strb	r2, [r3, #0]
}
 8005c12:	bf00      	nop
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	20007520 	.word	0x20007520
 8005c1c:	2000745f 	.word	0x2000745f
 8005c20:	2000701c 	.word	0x2000701c
 8005c24:	20007474 	.word	0x20007474
 8005c28:	2000745e 	.word	0x2000745e
 8005c2c:	20007458 	.word	0x20007458
 8005c30:	2000745c 	.word	0x2000745c
 8005c34:	20007018 	.word	0x20007018

08005c38 <Indication>:

static void Indication()
{
 8005c38:	b480      	push	{r7}
 8005c3a:	af00      	add	r7, sp, #0
	meas_data.probotbor_ready = d_outputs.prob_ready;
 8005c3c:	4b13      	ldr	r3, [pc, #76]	; (8005c8c <Indication+0x54>)
 8005c3e:	781b      	ldrb	r3, [r3, #0]
 8005c40:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	4b11      	ldr	r3, [pc, #68]	; (8005c90 <Indication+0x58>)
 8005c4a:	819a      	strh	r2, [r3, #12]
	meas_data.probotbor_busy = cycle_probotbor;
 8005c4c:	4b11      	ldr	r3, [pc, #68]	; (8005c94 <Indication+0x5c>)
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	4b0f      	ldr	r3, [pc, #60]	; (8005c90 <Indication+0x58>)
 8005c54:	81da      	strh	r2, [r3, #14]
	meas_data.vozvrat_probotbor_busy = cycle_vozvrat;
 8005c56:	4b10      	ldr	r3, [pc, #64]	; (8005c98 <Indication+0x60>)
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	4b0c      	ldr	r3, [pc, #48]	; (8005c90 <Indication+0x58>)
 8005c5e:	821a      	strh	r2, [r3, #16]
	meas_data.automat_mode = auto_mode;
 8005c60:	4b0e      	ldr	r3, [pc, #56]	; (8005c9c <Indication+0x64>)
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	b29a      	uxth	r2, r3
 8005c66:	4b0a      	ldr	r3, [pc, #40]	; (8005c90 <Indication+0x58>)
 8005c68:	825a      	strh	r2, [r3, #18]
	meas_data.toNextOtborTime = select_period - automatTON.ET/1000;
 8005c6a:	4b0d      	ldr	r3, [pc, #52]	; (8005ca0 <Indication+0x68>)
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	4b0d      	ldr	r3, [pc, #52]	; (8005ca4 <Indication+0x6c>)
 8005c70:	685b      	ldr	r3, [r3, #4]
 8005c72:	490d      	ldr	r1, [pc, #52]	; (8005ca8 <Indication+0x70>)
 8005c74:	fba1 1303 	umull	r1, r3, r1, r3
 8005c78:	099b      	lsrs	r3, r3, #6
 8005c7a:	1ad3      	subs	r3, r2, r3
 8005c7c:	4a04      	ldr	r2, [pc, #16]	; (8005c90 <Indication+0x58>)
 8005c7e:	6193      	str	r3, [r2, #24]
}
 8005c80:	bf00      	nop
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr
 8005c8a:	bf00      	nop
 8005c8c:	20007018 	.word	0x20007018
 8005c90:	20007520 	.word	0x20007520
 8005c94:	2000745e 	.word	0x2000745e
 8005c98:	2000745f 	.word	0x2000745f
 8005c9c:	20007461 	.word	0x20007461
 8005ca0:	20007434 	.word	0x20007434
 8005ca4:	2000743c 	.word	0x2000743c
 8005ca8:	10624dd3 	.word	0x10624dd3

08005cac <GetPositiveFronts>:

static void GetPositiveFronts()
{
 8005cac:	b480      	push	{r7}
 8005cae:	af00      	add	r7, sp, #0
	rtSq_kovsh_left_1 = d_inputs.sq_kovsh_prob_left_1 && !lastSq_kovsh_left_1;
 8005cb0:	4b43      	ldr	r3, [pc, #268]	; (8005dc0 <GetPositiveFronts+0x114>)
 8005cb2:	781b      	ldrb	r3, [r3, #0]
 8005cb4:	f003 0308 	and.w	r3, r3, #8
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d005      	beq.n	8005cca <GetPositiveFronts+0x1e>
 8005cbe:	4b41      	ldr	r3, [pc, #260]	; (8005dc4 <GetPositiveFronts+0x118>)
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <GetPositiveFronts+0x1e>
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e000      	b.n	8005ccc <GetPositiveFronts+0x20>
 8005cca:	2300      	movs	r3, #0
 8005ccc:	b2da      	uxtb	r2, r3
 8005cce:	4b3e      	ldr	r3, [pc, #248]	; (8005dc8 <GetPositiveFronts+0x11c>)
 8005cd0:	701a      	strb	r2, [r3, #0]
	rtSq_kovsh_right_1 = d_inputs.sq_kovsh_prob_right_1 && !lastSq_kovsh_right_1;
 8005cd2:	4b3b      	ldr	r3, [pc, #236]	; (8005dc0 <GetPositiveFronts+0x114>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	f003 0302 	and.w	r3, r3, #2
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d005      	beq.n	8005cec <GetPositiveFronts+0x40>
 8005ce0:	4b3a      	ldr	r3, [pc, #232]	; (8005dcc <GetPositiveFronts+0x120>)
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d101      	bne.n	8005cec <GetPositiveFronts+0x40>
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e000      	b.n	8005cee <GetPositiveFronts+0x42>
 8005cec:	2300      	movs	r3, #0
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	4b37      	ldr	r3, [pc, #220]	; (8005dd0 <GetPositiveFronts+0x124>)
 8005cf2:	701a      	strb	r2, [r3, #0]
	rtSbMakeProba =  (d_inputs.sb_make_proba || settings.non_retain.start_otbor) && !lastSbMakeProba;
 8005cf4:	4b32      	ldr	r3, [pc, #200]	; (8005dc0 <GetPositiveFronts+0x114>)
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d104      	bne.n	8005d0c <GetPositiveFronts+0x60>
 8005d02:	4b34      	ldr	r3, [pc, #208]	; (8005dd4 <GetPositiveFronts+0x128>)
 8005d04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d005      	beq.n	8005d18 <GetPositiveFronts+0x6c>
 8005d0c:	4b32      	ldr	r3, [pc, #200]	; (8005dd8 <GetPositiveFronts+0x12c>)
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d101      	bne.n	8005d18 <GetPositiveFronts+0x6c>
 8005d14:	2301      	movs	r3, #1
 8005d16:	e000      	b.n	8005d1a <GetPositiveFronts+0x6e>
 8005d18:	2300      	movs	r3, #0
 8005d1a:	b2da      	uxtb	r2, r3
 8005d1c:	4b2f      	ldr	r3, [pc, #188]	; (8005ddc <GetPositiveFronts+0x130>)
 8005d1e:	701a      	strb	r2, [r3, #0]
	rtSbMakeVozvrat = (d_inputs.sb_vozvrat || settings.non_retain.start_vozvrat) && !lastSbMakeVozvrat;
 8005d20:	4b27      	ldr	r3, [pc, #156]	; (8005dc0 <GetPositiveFronts+0x114>)
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d104      	bne.n	8005d38 <GetPositiveFronts+0x8c>
 8005d2e:	4b29      	ldr	r3, [pc, #164]	; (8005dd4 <GetPositiveFronts+0x128>)
 8005d30:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d005      	beq.n	8005d44 <GetPositiveFronts+0x98>
 8005d38:	4b29      	ldr	r3, [pc, #164]	; (8005de0 <GetPositiveFronts+0x134>)
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d101      	bne.n	8005d44 <GetPositiveFronts+0x98>
 8005d40:	2301      	movs	r3, #1
 8005d42:	e000      	b.n	8005d46 <GetPositiveFronts+0x9a>
 8005d44:	2300      	movs	r3, #0
 8005d46:	b2da      	uxtb	r2, r3
 8005d48:	4b26      	ldr	r3, [pc, #152]	; (8005de4 <GetPositiveFronts+0x138>)
 8005d4a:	701a      	strb	r2, [r3, #0]
	lastSq_kovsh_left_1 = d_inputs.sq_kovsh_prob_left_1;
 8005d4c:	4b1c      	ldr	r3, [pc, #112]	; (8005dc0 <GetPositiveFronts+0x114>)
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	461a      	mov	r2, r3
 8005d58:	4b1a      	ldr	r3, [pc, #104]	; (8005dc4 <GetPositiveFronts+0x118>)
 8005d5a:	701a      	strb	r2, [r3, #0]
	lastSq_kovsh_right_1 = d_inputs.sq_kovsh_prob_right_1;
 8005d5c:	4b18      	ldr	r3, [pc, #96]	; (8005dc0 <GetPositiveFronts+0x114>)
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8005d64:	b2db      	uxtb	r3, r3
 8005d66:	461a      	mov	r2, r3
 8005d68:	4b18      	ldr	r3, [pc, #96]	; (8005dcc <GetPositiveFronts+0x120>)
 8005d6a:	701a      	strb	r2, [r3, #0]
	lastSbMakeProba = d_inputs.sb_make_proba || settings.non_retain.start_otbor;
 8005d6c:	4b14      	ldr	r3, [pc, #80]	; (8005dc0 <GetPositiveFronts+0x114>)
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d104      	bne.n	8005d84 <GetPositiveFronts+0xd8>
 8005d7a:	4b16      	ldr	r3, [pc, #88]	; (8005dd4 <GetPositiveFronts+0x128>)
 8005d7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <GetPositiveFronts+0xdc>
 8005d84:	2301      	movs	r3, #1
 8005d86:	e000      	b.n	8005d8a <GetPositiveFronts+0xde>
 8005d88:	2300      	movs	r3, #0
 8005d8a:	b2da      	uxtb	r2, r3
 8005d8c:	4b12      	ldr	r3, [pc, #72]	; (8005dd8 <GetPositiveFronts+0x12c>)
 8005d8e:	701a      	strb	r2, [r3, #0]
	lastSbMakeVozvrat = d_inputs.sb_vozvrat || settings.non_retain.start_vozvrat;
 8005d90:	4b0b      	ldr	r3, [pc, #44]	; (8005dc0 <GetPositiveFronts+0x114>)
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d104      	bne.n	8005da8 <GetPositiveFronts+0xfc>
 8005d9e:	4b0d      	ldr	r3, [pc, #52]	; (8005dd4 <GetPositiveFronts+0x128>)
 8005da0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d001      	beq.n	8005dac <GetPositiveFronts+0x100>
 8005da8:	2301      	movs	r3, #1
 8005daa:	e000      	b.n	8005dae <GetPositiveFronts+0x102>
 8005dac:	2300      	movs	r3, #0
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	4b0b      	ldr	r3, [pc, #44]	; (8005de0 <GetPositiveFronts+0x134>)
 8005db2:	701a      	strb	r2, [r3, #0]

}
 8005db4:	bf00      	nop
 8005db6:	46bd      	mov	sp, r7
 8005db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	2000701c 	.word	0x2000701c
 8005dc4:	2000745d 	.word	0x2000745d
 8005dc8:	20007439 	.word	0x20007439
 8005dcc:	20007448 	.word	0x20007448
 8005dd0:	20007459 	.word	0x20007459
 8005dd4:	20007474 	.word	0x20007474
 8005dd8:	20007470 	.word	0x20007470
 8005ddc:	2000745b 	.word	0x2000745b
 8005de0:	20007438 	.word	0x20007438
 8005de4:	2000745a 	.word	0x2000745a

08005de8 <NakopitelCheck>:

static void NakopitelCheck()
{
 8005de8:	b480      	push	{r7}
 8005dea:	af00      	add	r7, sp, #0
	if(settings.retain.nakop_SV==0)settings.retain.nakop_SV = 1;
 8005dec:	4b10      	ldr	r3, [pc, #64]	; (8005e30 <NakopitelCheck+0x48>)
 8005dee:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d102      	bne.n	8005dfa <NakopitelCheck+0x12>
 8005df4:	4b0e      	ldr	r3, [pc, #56]	; (8005e30 <NakopitelCheck+0x48>)
 8005df6:	2201      	movs	r2, #1
 8005df8:	879a      	strh	r2, [r3, #60]	; 0x3c
	if(!d_inputs.sq_kanistra)meas_data.probInKanistra = 0;
 8005dfa:	4b0e      	ldr	r3, [pc, #56]	; (8005e34 <NakopitelCheck+0x4c>)
 8005dfc:	785b      	ldrb	r3, [r3, #1]
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d102      	bne.n	8005e0e <NakopitelCheck+0x26>
 8005e08:	4b0b      	ldr	r3, [pc, #44]	; (8005e38 <NakopitelCheck+0x50>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	829a      	strh	r2, [r3, #20]
	meas_data.nakopitelFull = meas_data.probInKanistra>=settings.retain.nakop_SV;
 8005e0e:	4b0a      	ldr	r3, [pc, #40]	; (8005e38 <NakopitelCheck+0x50>)
 8005e10:	8a9a      	ldrh	r2, [r3, #20]
 8005e12:	4b07      	ldr	r3, [pc, #28]	; (8005e30 <NakopitelCheck+0x48>)
 8005e14:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8005e16:	429a      	cmp	r2, r3
 8005e18:	bf2c      	ite	cs
 8005e1a:	2301      	movcs	r3, #1
 8005e1c:	2300      	movcc	r3, #0
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	4b05      	ldr	r3, [pc, #20]	; (8005e38 <NakopitelCheck+0x50>)
 8005e24:	82da      	strh	r2, [r3, #22]

}
 8005e26:	bf00      	nop
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr
 8005e30:	20007474 	.word	0x20007474
 8005e34:	2000701c 	.word	0x2000701c
 8005e38:	20007520 	.word	0x20007520

08005e3c <GetClientInfo>:

static void GetClientInfo()
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	af00      	add	r7, sp, #0
	settings.client.to.ready_for_select = d_outputs.prob_ready;
 8005e40:	4b49      	ldr	r3, [pc, #292]	; (8005f68 <GetClientInfo+0x12c>)
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005e48:	b2d9      	uxtb	r1, r3
 8005e4a:	4a48      	ldr	r2, [pc, #288]	; (8005f6c <GetClientInfo+0x130>)
 8005e4c:	7813      	ldrb	r3, [r2, #0]
 8005e4e:	f361 0300 	bfi	r3, r1, #0, #1
 8005e52:	7013      	strb	r3, [r2, #0]
	settings.client.to.automat = auto_mode;
 8005e54:	4b46      	ldr	r3, [pc, #280]	; (8005f70 <GetClientInfo+0x134>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	f003 0301 	and.w	r3, r3, #1
 8005e5c:	b2d9      	uxtb	r1, r3
 8005e5e:	4a43      	ldr	r2, [pc, #268]	; (8005f6c <GetClientInfo+0x130>)
 8005e60:	7813      	ldrb	r3, [r2, #0]
 8005e62:	f361 0341 	bfi	r3, r1, #1, #1
 8005e66:	7013      	strb	r3, [r2, #0]
	settings.client.to.errors = !CheckCommonError();
 8005e68:	f7ff fdcc 	bl	8005a04 <CheckCommonError>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	bf0c      	ite	eq
 8005e72:	2301      	moveq	r3, #1
 8005e74:	2300      	movne	r3, #0
 8005e76:	b2d9      	uxtb	r1, r3
 8005e78:	4a3c      	ldr	r2, [pc, #240]	; (8005f6c <GetClientInfo+0x130>)
 8005e7a:	7813      	ldrb	r3, [r2, #0]
 8005e7c:	f361 0382 	bfi	r3, r1, #2, #1
 8005e80:	7013      	strb	r3, [r2, #0]
	settings.client.to.prob_err = meas_data.errors.need_return_err ||
 8005e82:	4b3c      	ldr	r3, [pc, #240]	; (8005f74 <GetClientInfo+0x138>)
 8005e84:	7f5b      	ldrb	r3, [r3, #29]
 8005e86:	f003 0301 	and.w	r3, r3, #1
 8005e8a:	b2db      	uxtb	r3, r3
			meas_data.errors.sq_left_err || meas_data.errors.sq_right_err || meas_data.errors.sb_abort_err
			|| meas_data.errors.uz_err || meas_data.errors.timeout_moving_left_err || meas_data.errors.timeout_moving_right_err
			|| meas_data.errors.need_return_err;
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d130      	bne.n	8005ef2 <GetClientInfo+0xb6>
	settings.client.to.prob_err = meas_data.errors.need_return_err ||
 8005e90:	4b38      	ldr	r3, [pc, #224]	; (8005f74 <GetClientInfo+0x138>)
 8005e92:	7f1b      	ldrb	r3, [r3, #28]
 8005e94:	f003 0310 	and.w	r3, r3, #16
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d129      	bne.n	8005ef2 <GetClientInfo+0xb6>
			meas_data.errors.sq_left_err || meas_data.errors.sq_right_err || meas_data.errors.sb_abort_err
 8005e9e:	4b35      	ldr	r3, [pc, #212]	; (8005f74 <GetClientInfo+0x138>)
 8005ea0:	7f1b      	ldrb	r3, [r3, #28]
 8005ea2:	f003 0320 	and.w	r3, r3, #32
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d122      	bne.n	8005ef2 <GetClientInfo+0xb6>
 8005eac:	4b31      	ldr	r3, [pc, #196]	; (8005f74 <GetClientInfo+0x138>)
 8005eae:	7f1b      	ldrb	r3, [r3, #28]
 8005eb0:	f003 0308 	and.w	r3, r3, #8
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d11b      	bne.n	8005ef2 <GetClientInfo+0xb6>
			|| meas_data.errors.uz_err || meas_data.errors.timeout_moving_left_err || meas_data.errors.timeout_moving_right_err
 8005eba:	4b2e      	ldr	r3, [pc, #184]	; (8005f74 <GetClientInfo+0x138>)
 8005ebc:	7f1b      	ldrb	r3, [r3, #28]
 8005ebe:	f003 0304 	and.w	r3, r3, #4
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d114      	bne.n	8005ef2 <GetClientInfo+0xb6>
 8005ec8:	4b2a      	ldr	r3, [pc, #168]	; (8005f74 <GetClientInfo+0x138>)
 8005eca:	7f1b      	ldrb	r3, [r3, #28]
 8005ecc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10d      	bne.n	8005ef2 <GetClientInfo+0xb6>
 8005ed6:	4b27      	ldr	r3, [pc, #156]	; (8005f74 <GetClientInfo+0x138>)
 8005ed8:	7f1b      	ldrb	r3, [r3, #28]
 8005eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d106      	bne.n	8005ef2 <GetClientInfo+0xb6>
			|| meas_data.errors.need_return_err;
 8005ee4:	4b23      	ldr	r3, [pc, #140]	; (8005f74 <GetClientInfo+0x138>)
 8005ee6:	7f5b      	ldrb	r3, [r3, #29]
 8005ee8:	f003 0301 	and.w	r3, r3, #1
 8005eec:	b2db      	uxtb	r3, r3
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d001      	beq.n	8005ef6 <GetClientInfo+0xba>
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e000      	b.n	8005ef8 <GetClientInfo+0xbc>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	f003 0301 	and.w	r3, r3, #1
 8005efc:	b2d9      	uxtb	r1, r3
	settings.client.to.prob_err = meas_data.errors.need_return_err ||
 8005efe:	4a1b      	ldr	r2, [pc, #108]	; (8005f6c <GetClientInfo+0x130>)
 8005f00:	7813      	ldrb	r3, [r2, #0]
 8005f02:	f361 03c3 	bfi	r3, r1, #3, #1
 8005f06:	7013      	strb	r3, [r2, #0]
	settings.client.to.timeout_err = meas_data.errors.timeout_moving_left_err || meas_data.errors.timeout_moving_right_err;
 8005f08:	4b1a      	ldr	r3, [pc, #104]	; (8005f74 <GetClientInfo+0x138>)
 8005f0a:	7f1b      	ldrb	r3, [r3, #28]
 8005f0c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d106      	bne.n	8005f24 <GetClientInfo+0xe8>
 8005f16:	4b17      	ldr	r3, [pc, #92]	; (8005f74 <GetClientInfo+0x138>)
 8005f18:	7f1b      	ldrb	r3, [r3, #28]
 8005f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f1e:	b2db      	uxtb	r3, r3
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d001      	beq.n	8005f28 <GetClientInfo+0xec>
 8005f24:	2301      	movs	r3, #1
 8005f26:	e000      	b.n	8005f2a <GetClientInfo+0xee>
 8005f28:	2300      	movs	r3, #0
 8005f2a:	f003 0301 	and.w	r3, r3, #1
 8005f2e:	b2d9      	uxtb	r1, r3
 8005f30:	4a0e      	ldr	r2, [pc, #56]	; (8005f6c <GetClientInfo+0x130>)
 8005f32:	7813      	ldrb	r3, [r2, #0]
 8005f34:	f361 1386 	bfi	r3, r1, #6, #1
 8005f38:	7013      	strb	r3, [r2, #0]
	settings.client.to.sq_kovsh_err = meas_data.errors.need_return_err;
 8005f3a:	4b0e      	ldr	r3, [pc, #56]	; (8005f74 <GetClientInfo+0x138>)
 8005f3c:	7f5b      	ldrb	r3, [r3, #29]
 8005f3e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8005f42:	b2d9      	uxtb	r1, r3
 8005f44:	4a09      	ldr	r2, [pc, #36]	; (8005f6c <GetClientInfo+0x130>)
 8005f46:	7813      	ldrb	r3, [r2, #0]
 8005f48:	f361 13c7 	bfi	r3, r1, #7, #1
 8005f4c:	7013      	strb	r3, [r2, #0]
	settings.client.to.sb_abort_err = meas_data.errors.sb_abort_err;
 8005f4e:	4b09      	ldr	r3, [pc, #36]	; (8005f74 <GetClientInfo+0x138>)
 8005f50:	7f1b      	ldrb	r3, [r3, #28]
 8005f52:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8005f56:	b2d9      	uxtb	r1, r3
 8005f58:	4a04      	ldr	r2, [pc, #16]	; (8005f6c <GetClientInfo+0x130>)
 8005f5a:	7853      	ldrb	r3, [r2, #1]
 8005f5c:	f361 0300 	bfi	r3, r1, #0, #1
 8005f60:	7053      	strb	r3, [r2, #1]
}
 8005f62:	bf00      	nop
 8005f64:	bd80      	pop	{r7, pc}
 8005f66:	bf00      	nop
 8005f68:	20007018 	.word	0x20007018
 8005f6c:	20007474 	.word	0x20007474
 8005f70:	20007461 	.word	0x20007461
 8005f74:	20007520 	.word	0x20007520

08005f78 <settingsLoadFRAM>:
Meas_Data meas_data;

static uint8_t checksumCalc (uint8_t * data, uint16_t size);

int settingsLoadFRAM (void)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
	int result = 0;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60fb      	str	r3, [r7, #12]
	uint16_t header;

	result = framDataRead(FRAM_SETTINGS_ADDR, (uint8_t *) &header, sizeof(header));
 8005f82:	f107 0308 	add.w	r3, r7, #8
 8005f86:	2202      	movs	r2, #2
 8005f88:	4619      	mov	r1, r3
 8005f8a:	2000      	movs	r0, #0
 8005f8c:	f7fb fe18 	bl	8001bc0 <framDataRead>
 8005f90:	60f8      	str	r0, [r7, #12]
	if (!result)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d130      	bne.n	8005ffa <settingsLoadFRAM+0x82>
	{
		if (header == FRAM_SETTINGS_HEADER)
 8005f98:	893b      	ldrh	r3, [r7, #8]
 8005f9a:	f64a 32d8 	movw	r2, #43992	; 0xabd8
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d128      	bne.n	8005ff4 <settingsLoadFRAM+0x7c>
		{
			result = framDataRead(FRAM_SETTINGS_ADDR + sizeof(header), (uint8_t *) &(settings.retain), sizeof(Retain));
 8005fa2:	2238      	movs	r2, #56	; 0x38
 8005fa4:	4917      	ldr	r1, [pc, #92]	; (8006004 <settingsLoadFRAM+0x8c>)
 8005fa6:	2002      	movs	r0, #2
 8005fa8:	f7fb fe0a 	bl	8001bc0 <framDataRead>
 8005fac:	60f8      	str	r0, [r7, #12]
			if (!result)
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d11b      	bne.n	8005fec <settingsLoadFRAM+0x74>
			{

				uint8_t xor = checksumCalc((uint8_t *) &(settings.retain), sizeof(Retain));
 8005fb4:	2138      	movs	r1, #56	; 0x38
 8005fb6:	4813      	ldr	r0, [pc, #76]	; (8006004 <settingsLoadFRAM+0x8c>)
 8005fb8:	f000 f864 	bl	8006084 <checksumCalc>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	72fb      	strb	r3, [r7, #11]
				uint8_t checksum;
				result = framDataRead(FRAM_SETTINGS_ADDR + sizeof(header) + sizeof(Retain), &checksum, sizeof(checksum));
 8005fc0:	1dfb      	adds	r3, r7, #7
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	203a      	movs	r0, #58	; 0x3a
 8005fc8:	f7fb fdfa 	bl	8001bc0 <framDataRead>
 8005fcc:	60f8      	str	r0, [r7, #12]
 				if (!result)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d107      	bne.n	8005fe4 <settingsLoadFRAM+0x6c>
				{
					if (xor != checksum)
 8005fd4:	79fb      	ldrb	r3, [r7, #7]
 8005fd6:	7afa      	ldrb	r2, [r7, #11]
 8005fd8:	429a      	cmp	r2, r3
 8005fda:	d00e      	beq.n	8005ffa <settingsLoadFRAM+0x82>
						result = -2;
 8005fdc:	f06f 0301 	mvn.w	r3, #1
 8005fe0:	60fb      	str	r3, [r7, #12]
 8005fe2:	e00a      	b.n	8005ffa <settingsLoadFRAM+0x82>
				}
				else
					result = -1;
 8005fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8005fe8:	60fb      	str	r3, [r7, #12]
 8005fea:	e006      	b.n	8005ffa <settingsLoadFRAM+0x82>
			}
			else
				result = -1;
 8005fec:	f04f 33ff 	mov.w	r3, #4294967295
 8005ff0:	60fb      	str	r3, [r7, #12]
 8005ff2:	e002      	b.n	8005ffa <settingsLoadFRAM+0x82>
		}
		else
			result = -1;
 8005ff4:	f04f 33ff 	mov.w	r3, #4294967295
 8005ff8:	60fb      	str	r3, [r7, #12]
	}

	return result;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3710      	adds	r7, #16
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	20007480 	.word	0x20007480

08006008 <settingsSaveFRAM>:

int settingsSaveFRAM (void)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
	int result = 0;
 800600e:	2300      	movs	r3, #0
 8006010:	60fb      	str	r3, [r7, #12]
	uint16_t header = FRAM_SETTINGS_HEADER, address = FRAM_SETTINGS_ADDR;
 8006012:	f64a 33d8 	movw	r3, #43992	; 0xabd8
 8006016:	813b      	strh	r3, [r7, #8]
 8006018:	2300      	movs	r3, #0
 800601a:	817b      	strh	r3, [r7, #10]

	result = framDataWrite(address, (uint8_t *) &header, sizeof(header));
 800601c:	f107 0108 	add.w	r1, r7, #8
 8006020:	897b      	ldrh	r3, [r7, #10]
 8006022:	2202      	movs	r2, #2
 8006024:	4618      	mov	r0, r3
 8006026:	f7fb fe09 	bl	8001c3c <framDataWrite>
 800602a:	60f8      	str	r0, [r7, #12]
	address += sizeof(header);
 800602c:	897b      	ldrh	r3, [r7, #10]
 800602e:	3302      	adds	r3, #2
 8006030:	817b      	strh	r3, [r7, #10]
	vTaskSuspendAll();	// Останавливаем планировщик, чтобы предотвратить фоновое изменение структуры settings
 8006032:	f009 fcf9 	bl	800fa28 <vTaskSuspendAll>
	result |= framDataWrite(address, (uint8_t *) &(settings.retain), sizeof(Retain));
 8006036:	897b      	ldrh	r3, [r7, #10]
 8006038:	2238      	movs	r2, #56	; 0x38
 800603a:	4911      	ldr	r1, [pc, #68]	; (8006080 <settingsSaveFRAM+0x78>)
 800603c:	4618      	mov	r0, r3
 800603e:	f7fb fdfd 	bl	8001c3c <framDataWrite>
 8006042:	4602      	mov	r2, r0
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4313      	orrs	r3, r2
 8006048:	60fb      	str	r3, [r7, #12]
	address += sizeof(Retain);
 800604a:	897b      	ldrh	r3, [r7, #10]
 800604c:	3338      	adds	r3, #56	; 0x38
 800604e:	817b      	strh	r3, [r7, #10]
	uint8_t xor = checksumCalc((uint8_t *) &(settings.retain), sizeof(Retain));
 8006050:	2138      	movs	r1, #56	; 0x38
 8006052:	480b      	ldr	r0, [pc, #44]	; (8006080 <settingsSaveFRAM+0x78>)
 8006054:	f000 f816 	bl	8006084 <checksumCalc>
 8006058:	4603      	mov	r3, r0
 800605a:	71fb      	strb	r3, [r7, #7]
	xTaskResumeAll();	// Возобновляем работу планировщика
 800605c:	f009 fcf2 	bl	800fa44 <xTaskResumeAll>
	result |= framDataWrite(address, &xor, sizeof(xor));
 8006060:	1df9      	adds	r1, r7, #7
 8006062:	897b      	ldrh	r3, [r7, #10]
 8006064:	2201      	movs	r2, #1
 8006066:	4618      	mov	r0, r3
 8006068:	f7fb fde8 	bl	8001c3c <framDataWrite>
 800606c:	4602      	mov	r2, r0
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	4313      	orrs	r3, r2
 8006072:	60fb      	str	r3, [r7, #12]

	return result;
 8006074:	68fb      	ldr	r3, [r7, #12]
}
 8006076:	4618      	mov	r0, r3
 8006078:	3710      	adds	r7, #16
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	20007480 	.word	0x20007480

08006084 <checksumCalc>:

static uint8_t checksumCalc (uint8_t * data, uint16_t size)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	460b      	mov	r3, r1
 800608e:	807b      	strh	r3, [r7, #2]
	uint8_t xor = 0;
 8006090:	2300      	movs	r3, #0
 8006092:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < size; i++)
 8006094:	2300      	movs	r3, #0
 8006096:	60bb      	str	r3, [r7, #8]
 8006098:	e009      	b.n	80060ae <checksumCalc+0x2a>
		xor ^= data[i];
 800609a:	68bb      	ldr	r3, [r7, #8]
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	4413      	add	r3, r2
 80060a0:	781a      	ldrb	r2, [r3, #0]
 80060a2:	7bfb      	ldrb	r3, [r7, #15]
 80060a4:	4053      	eors	r3, r2
 80060a6:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < size; i++)
 80060a8:	68bb      	ldr	r3, [r7, #8]
 80060aa:	3301      	adds	r3, #1
 80060ac:	60bb      	str	r3, [r7, #8]
 80060ae:	887b      	ldrh	r3, [r7, #2]
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	429a      	cmp	r2, r3
 80060b4:	dbf1      	blt.n	800609a <checksumCalc+0x16>
	return xor;
 80060b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr

080060c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b082      	sub	sp, #8
 80060c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060ca:	2300      	movs	r3, #0
 80060cc:	607b      	str	r3, [r7, #4]
 80060ce:	4b12      	ldr	r3, [pc, #72]	; (8006118 <HAL_MspInit+0x54>)
 80060d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d2:	4a11      	ldr	r2, [pc, #68]	; (8006118 <HAL_MspInit+0x54>)
 80060d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060d8:	6453      	str	r3, [r2, #68]	; 0x44
 80060da:	4b0f      	ldr	r3, [pc, #60]	; (8006118 <HAL_MspInit+0x54>)
 80060dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060e2:	607b      	str	r3, [r7, #4]
 80060e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80060e6:	2300      	movs	r3, #0
 80060e8:	603b      	str	r3, [r7, #0]
 80060ea:	4b0b      	ldr	r3, [pc, #44]	; (8006118 <HAL_MspInit+0x54>)
 80060ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ee:	4a0a      	ldr	r2, [pc, #40]	; (8006118 <HAL_MspInit+0x54>)
 80060f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80060f4:	6413      	str	r3, [r2, #64]	; 0x40
 80060f6:	4b08      	ldr	r3, [pc, #32]	; (8006118 <HAL_MspInit+0x54>)
 80060f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060fe:	603b      	str	r3, [r7, #0]
 8006100:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006102:	2200      	movs	r2, #0
 8006104:	210f      	movs	r1, #15
 8006106:	f06f 0001 	mvn.w	r0, #1
 800610a:	f001 fc6f 	bl	80079ec <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800610e:	bf00      	nop
 8006110:	3708      	adds	r7, #8
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	40023800 	.word	0x40023800

0800611c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b08a      	sub	sp, #40	; 0x28
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006124:	f107 0314 	add.w	r3, r7, #20
 8006128:	2200      	movs	r2, #0
 800612a:	601a      	str	r2, [r3, #0]
 800612c:	605a      	str	r2, [r3, #4]
 800612e:	609a      	str	r2, [r3, #8]
 8006130:	60da      	str	r2, [r3, #12]
 8006132:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a3c      	ldr	r2, [pc, #240]	; (800622c <HAL_ADC_MspInit+0x110>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d171      	bne.n	8006222 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800613e:	2300      	movs	r3, #0
 8006140:	613b      	str	r3, [r7, #16]
 8006142:	4b3b      	ldr	r3, [pc, #236]	; (8006230 <HAL_ADC_MspInit+0x114>)
 8006144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006146:	4a3a      	ldr	r2, [pc, #232]	; (8006230 <HAL_ADC_MspInit+0x114>)
 8006148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800614c:	6453      	str	r3, [r2, #68]	; 0x44
 800614e:	4b38      	ldr	r3, [pc, #224]	; (8006230 <HAL_ADC_MspInit+0x114>)
 8006150:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006156:	613b      	str	r3, [r7, #16]
 8006158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800615a:	2300      	movs	r3, #0
 800615c:	60fb      	str	r3, [r7, #12]
 800615e:	4b34      	ldr	r3, [pc, #208]	; (8006230 <HAL_ADC_MspInit+0x114>)
 8006160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006162:	4a33      	ldr	r2, [pc, #204]	; (8006230 <HAL_ADC_MspInit+0x114>)
 8006164:	f043 0304 	orr.w	r3, r3, #4
 8006168:	6313      	str	r3, [r2, #48]	; 0x30
 800616a:	4b31      	ldr	r3, [pc, #196]	; (8006230 <HAL_ADC_MspInit+0x114>)
 800616c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800616e:	f003 0304 	and.w	r3, r3, #4
 8006172:	60fb      	str	r3, [r7, #12]
 8006174:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006176:	2300      	movs	r3, #0
 8006178:	60bb      	str	r3, [r7, #8]
 800617a:	4b2d      	ldr	r3, [pc, #180]	; (8006230 <HAL_ADC_MspInit+0x114>)
 800617c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800617e:	4a2c      	ldr	r2, [pc, #176]	; (8006230 <HAL_ADC_MspInit+0x114>)
 8006180:	f043 0301 	orr.w	r3, r3, #1
 8006184:	6313      	str	r3, [r2, #48]	; 0x30
 8006186:	4b2a      	ldr	r3, [pc, #168]	; (8006230 <HAL_ADC_MspInit+0x114>)
 8006188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800618a:	f003 0301 	and.w	r3, r3, #1
 800618e:	60bb      	str	r3, [r7, #8]
 8006190:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC_T0_Pin|ADC_T1_Pin|ADC_T2_Pin;
 8006192:	230d      	movs	r3, #13
 8006194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006196:	2303      	movs	r3, #3
 8006198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800619a:	2300      	movs	r3, #0
 800619c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800619e:	f107 0314 	add.w	r3, r7, #20
 80061a2:	4619      	mov	r1, r3
 80061a4:	4823      	ldr	r0, [pc, #140]	; (8006234 <HAL_ADC_MspInit+0x118>)
 80061a6:	f003 fa5f 	bl	8009668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AD_T3_Pin|ADC_T4_Pin;
 80061aa:	2318      	movs	r3, #24
 80061ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80061ae:	2303      	movs	r3, #3
 80061b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061b2:	2300      	movs	r3, #0
 80061b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80061b6:	f107 0314 	add.w	r3, r7, #20
 80061ba:	4619      	mov	r1, r3
 80061bc:	481e      	ldr	r0, [pc, #120]	; (8006238 <HAL_ADC_MspInit+0x11c>)
 80061be:	f003 fa53 	bl	8009668 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80061c2:	4b1e      	ldr	r3, [pc, #120]	; (800623c <HAL_ADC_MspInit+0x120>)
 80061c4:	4a1e      	ldr	r2, [pc, #120]	; (8006240 <HAL_ADC_MspInit+0x124>)
 80061c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80061c8:	4b1c      	ldr	r3, [pc, #112]	; (800623c <HAL_ADC_MspInit+0x120>)
 80061ca:	2200      	movs	r2, #0
 80061cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80061ce:	4b1b      	ldr	r3, [pc, #108]	; (800623c <HAL_ADC_MspInit+0x120>)
 80061d0:	2200      	movs	r2, #0
 80061d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80061d4:	4b19      	ldr	r3, [pc, #100]	; (800623c <HAL_ADC_MspInit+0x120>)
 80061d6:	2200      	movs	r2, #0
 80061d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80061da:	4b18      	ldr	r3, [pc, #96]	; (800623c <HAL_ADC_MspInit+0x120>)
 80061dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80061e0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80061e2:	4b16      	ldr	r3, [pc, #88]	; (800623c <HAL_ADC_MspInit+0x120>)
 80061e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061e8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80061ea:	4b14      	ldr	r3, [pc, #80]	; (800623c <HAL_ADC_MspInit+0x120>)
 80061ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80061f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80061f2:	4b12      	ldr	r3, [pc, #72]	; (800623c <HAL_ADC_MspInit+0x120>)
 80061f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80061f8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80061fa:	4b10      	ldr	r3, [pc, #64]	; (800623c <HAL_ADC_MspInit+0x120>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006200:	4b0e      	ldr	r3, [pc, #56]	; (800623c <HAL_ADC_MspInit+0x120>)
 8006202:	2200      	movs	r2, #0
 8006204:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006206:	480d      	ldr	r0, [pc, #52]	; (800623c <HAL_ADC_MspInit+0x120>)
 8006208:	f001 fc28 	bl	8007a5c <HAL_DMA_Init>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d001      	beq.n	8006216 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8006212:	f7fe fcd7 	bl	8004bc4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	4a08      	ldr	r2, [pc, #32]	; (800623c <HAL_ADC_MspInit+0x120>)
 800621a:	639a      	str	r2, [r3, #56]	; 0x38
 800621c:	4a07      	ldr	r2, [pc, #28]	; (800623c <HAL_ADC_MspInit+0x120>)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8006222:	bf00      	nop
 8006224:	3728      	adds	r7, #40	; 0x28
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
 800622a:	bf00      	nop
 800622c:	40012000 	.word	0x40012000
 8006230:	40023800 	.word	0x40023800
 8006234:	40020800 	.word	0x40020800
 8006238:	40020000 	.word	0x40020000
 800623c:	2000738c 	.word	0x2000738c
 8006240:	40026410 	.word	0x40026410

08006244 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b08a      	sub	sp, #40	; 0x28
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800624c:	f107 0314 	add.w	r3, r7, #20
 8006250:	2200      	movs	r2, #0
 8006252:	601a      	str	r2, [r3, #0]
 8006254:	605a      	str	r2, [r3, #4]
 8006256:	609a      	str	r2, [r3, #8]
 8006258:	60da      	str	r2, [r3, #12]
 800625a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a19      	ldr	r2, [pc, #100]	; (80062c8 <HAL_SPI_MspInit+0x84>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d12c      	bne.n	80062c0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006266:	2300      	movs	r3, #0
 8006268:	613b      	str	r3, [r7, #16]
 800626a:	4b18      	ldr	r3, [pc, #96]	; (80062cc <HAL_SPI_MspInit+0x88>)
 800626c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626e:	4a17      	ldr	r2, [pc, #92]	; (80062cc <HAL_SPI_MspInit+0x88>)
 8006270:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006274:	6413      	str	r3, [r2, #64]	; 0x40
 8006276:	4b15      	ldr	r3, [pc, #84]	; (80062cc <HAL_SPI_MspInit+0x88>)
 8006278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800627a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800627e:	613b      	str	r3, [r7, #16]
 8006280:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006282:	2300      	movs	r3, #0
 8006284:	60fb      	str	r3, [r7, #12]
 8006286:	4b11      	ldr	r3, [pc, #68]	; (80062cc <HAL_SPI_MspInit+0x88>)
 8006288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628a:	4a10      	ldr	r2, [pc, #64]	; (80062cc <HAL_SPI_MspInit+0x88>)
 800628c:	f043 0304 	orr.w	r3, r3, #4
 8006290:	6313      	str	r3, [r2, #48]	; 0x30
 8006292:	4b0e      	ldr	r3, [pc, #56]	; (80062cc <HAL_SPI_MspInit+0x88>)
 8006294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006296:	f003 0304 	and.w	r3, r3, #4
 800629a:	60fb      	str	r3, [r7, #12]
 800629c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = S3SCK_Pin|S3MISO_Pin|S3MOSI_Pin;
 800629e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80062a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062a4:	2302      	movs	r3, #2
 80062a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062a8:	2300      	movs	r3, #0
 80062aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062ac:	2303      	movs	r3, #3
 80062ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80062b0:	2306      	movs	r3, #6
 80062b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80062b4:	f107 0314 	add.w	r3, r7, #20
 80062b8:	4619      	mov	r1, r3
 80062ba:	4805      	ldr	r0, [pc, #20]	; (80062d0 <HAL_SPI_MspInit+0x8c>)
 80062bc:	f003 f9d4 	bl	8009668 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80062c0:	bf00      	nop
 80062c2:	3728      	adds	r7, #40	; 0x28
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	40003c00 	.word	0x40003c00
 80062cc:	40023800 	.word	0x40023800
 80062d0:	40020800 	.word	0x40020800

080062d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a18      	ldr	r2, [pc, #96]	; (8006344 <HAL_TIM_Base_MspInit+0x70>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d10e      	bne.n	8006304 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80062e6:	2300      	movs	r3, #0
 80062e8:	60fb      	str	r3, [r7, #12]
 80062ea:	4b17      	ldr	r3, [pc, #92]	; (8006348 <HAL_TIM_Base_MspInit+0x74>)
 80062ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ee:	4a16      	ldr	r2, [pc, #88]	; (8006348 <HAL_TIM_Base_MspInit+0x74>)
 80062f0:	f043 0302 	orr.w	r3, r3, #2
 80062f4:	6413      	str	r3, [r2, #64]	; 0x40
 80062f6:	4b14      	ldr	r3, [pc, #80]	; (8006348 <HAL_TIM_Base_MspInit+0x74>)
 80062f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fa:	f003 0302 	and.w	r3, r3, #2
 80062fe:	60fb      	str	r3, [r7, #12]
 8006300:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8006302:	e01a      	b.n	800633a <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a10      	ldr	r2, [pc, #64]	; (800634c <HAL_TIM_Base_MspInit+0x78>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d115      	bne.n	800633a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800630e:	2300      	movs	r3, #0
 8006310:	60bb      	str	r3, [r7, #8]
 8006312:	4b0d      	ldr	r3, [pc, #52]	; (8006348 <HAL_TIM_Base_MspInit+0x74>)
 8006314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006316:	4a0c      	ldr	r2, [pc, #48]	; (8006348 <HAL_TIM_Base_MspInit+0x74>)
 8006318:	f043 0304 	orr.w	r3, r3, #4
 800631c:	6413      	str	r3, [r2, #64]	; 0x40
 800631e:	4b0a      	ldr	r3, [pc, #40]	; (8006348 <HAL_TIM_Base_MspInit+0x74>)
 8006320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006322:	f003 0304 	and.w	r3, r3, #4
 8006326:	60bb      	str	r3, [r7, #8]
 8006328:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 800632a:	2200      	movs	r2, #0
 800632c:	2105      	movs	r1, #5
 800632e:	201e      	movs	r0, #30
 8006330:	f001 fb5c 	bl	80079ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006334:	201e      	movs	r0, #30
 8006336:	f001 fb75 	bl	8007a24 <HAL_NVIC_EnableIRQ>
}
 800633a:	bf00      	nop
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	40000400 	.word	0x40000400
 8006348:	40023800 	.word	0x40023800
 800634c:	40000800 	.word	0x40000800

08006350 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b08c      	sub	sp, #48	; 0x30
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006358:	f107 031c 	add.w	r3, r7, #28
 800635c:	2200      	movs	r2, #0
 800635e:	601a      	str	r2, [r3, #0]
 8006360:	605a      	str	r2, [r3, #4]
 8006362:	609a      	str	r2, [r3, #8]
 8006364:	60da      	str	r2, [r3, #12]
 8006366:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a68      	ldr	r2, [pc, #416]	; (8006510 <HAL_UART_MspInit+0x1c0>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d163      	bne.n	800643a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8006372:	2300      	movs	r3, #0
 8006374:	61bb      	str	r3, [r7, #24]
 8006376:	4b67      	ldr	r3, [pc, #412]	; (8006514 <HAL_UART_MspInit+0x1c4>)
 8006378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800637a:	4a66      	ldr	r2, [pc, #408]	; (8006514 <HAL_UART_MspInit+0x1c4>)
 800637c:	f043 0310 	orr.w	r3, r3, #16
 8006380:	6453      	str	r3, [r2, #68]	; 0x44
 8006382:	4b64      	ldr	r3, [pc, #400]	; (8006514 <HAL_UART_MspInit+0x1c4>)
 8006384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006386:	f003 0310 	and.w	r3, r3, #16
 800638a:	61bb      	str	r3, [r7, #24]
 800638c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800638e:	2300      	movs	r3, #0
 8006390:	617b      	str	r3, [r7, #20]
 8006392:	4b60      	ldr	r3, [pc, #384]	; (8006514 <HAL_UART_MspInit+0x1c4>)
 8006394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006396:	4a5f      	ldr	r2, [pc, #380]	; (8006514 <HAL_UART_MspInit+0x1c4>)
 8006398:	f043 0301 	orr.w	r3, r3, #1
 800639c:	6313      	str	r3, [r2, #48]	; 0x30
 800639e:	4b5d      	ldr	r3, [pc, #372]	; (8006514 <HAL_UART_MspInit+0x1c4>)
 80063a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063a2:	f003 0301 	and.w	r3, r3, #1
 80063a6:	617b      	str	r3, [r7, #20]
 80063a8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80063aa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80063ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80063b0:	2302      	movs	r3, #2
 80063b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80063b4:	2300      	movs	r3, #0
 80063b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063b8:	2303      	movs	r3, #3
 80063ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80063bc:	2307      	movs	r3, #7
 80063be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80063c0:	f107 031c 	add.w	r3, r7, #28
 80063c4:	4619      	mov	r1, r3
 80063c6:	4854      	ldr	r0, [pc, #336]	; (8006518 <HAL_UART_MspInit+0x1c8>)
 80063c8:	f003 f94e 	bl	8009668 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80063cc:	4b53      	ldr	r3, [pc, #332]	; (800651c <HAL_UART_MspInit+0x1cc>)
 80063ce:	4a54      	ldr	r2, [pc, #336]	; (8006520 <HAL_UART_MspInit+0x1d0>)
 80063d0:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80063d2:	4b52      	ldr	r3, [pc, #328]	; (800651c <HAL_UART_MspInit+0x1cc>)
 80063d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80063d8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80063da:	4b50      	ldr	r3, [pc, #320]	; (800651c <HAL_UART_MspInit+0x1cc>)
 80063dc:	2200      	movs	r2, #0
 80063de:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80063e0:	4b4e      	ldr	r3, [pc, #312]	; (800651c <HAL_UART_MspInit+0x1cc>)
 80063e2:	2200      	movs	r2, #0
 80063e4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80063e6:	4b4d      	ldr	r3, [pc, #308]	; (800651c <HAL_UART_MspInit+0x1cc>)
 80063e8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80063ec:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80063ee:	4b4b      	ldr	r3, [pc, #300]	; (800651c <HAL_UART_MspInit+0x1cc>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80063f4:	4b49      	ldr	r3, [pc, #292]	; (800651c <HAL_UART_MspInit+0x1cc>)
 80063f6:	2200      	movs	r2, #0
 80063f8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80063fa:	4b48      	ldr	r3, [pc, #288]	; (800651c <HAL_UART_MspInit+0x1cc>)
 80063fc:	2200      	movs	r2, #0
 80063fe:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006400:	4b46      	ldr	r3, [pc, #280]	; (800651c <HAL_UART_MspInit+0x1cc>)
 8006402:	2200      	movs	r2, #0
 8006404:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006406:	4b45      	ldr	r3, [pc, #276]	; (800651c <HAL_UART_MspInit+0x1cc>)
 8006408:	2200      	movs	r2, #0
 800640a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800640c:	4843      	ldr	r0, [pc, #268]	; (800651c <HAL_UART_MspInit+0x1cc>)
 800640e:	f001 fb25 	bl	8007a5c <HAL_DMA_Init>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d001      	beq.n	800641c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8006418:	f7fe fbd4 	bl	8004bc4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a3f      	ldr	r2, [pc, #252]	; (800651c <HAL_UART_MspInit+0x1cc>)
 8006420:	639a      	str	r2, [r3, #56]	; 0x38
 8006422:	4a3e      	ldr	r2, [pc, #248]	; (800651c <HAL_UART_MspInit+0x1cc>)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8006428:	2200      	movs	r2, #0
 800642a:	2105      	movs	r1, #5
 800642c:	2025      	movs	r0, #37	; 0x25
 800642e:	f001 fadd 	bl	80079ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8006432:	2025      	movs	r0, #37	; 0x25
 8006434:	f001 faf6 	bl	8007a24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8006438:	e066      	b.n	8006508 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART6)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a39      	ldr	r2, [pc, #228]	; (8006524 <HAL_UART_MspInit+0x1d4>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d161      	bne.n	8006508 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART6_CLK_ENABLE();
 8006444:	2300      	movs	r3, #0
 8006446:	613b      	str	r3, [r7, #16]
 8006448:	4b32      	ldr	r3, [pc, #200]	; (8006514 <HAL_UART_MspInit+0x1c4>)
 800644a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800644c:	4a31      	ldr	r2, [pc, #196]	; (8006514 <HAL_UART_MspInit+0x1c4>)
 800644e:	f043 0320 	orr.w	r3, r3, #32
 8006452:	6453      	str	r3, [r2, #68]	; 0x44
 8006454:	4b2f      	ldr	r3, [pc, #188]	; (8006514 <HAL_UART_MspInit+0x1c4>)
 8006456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006458:	f003 0320 	and.w	r3, r3, #32
 800645c:	613b      	str	r3, [r7, #16]
 800645e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006460:	2300      	movs	r3, #0
 8006462:	60fb      	str	r3, [r7, #12]
 8006464:	4b2b      	ldr	r3, [pc, #172]	; (8006514 <HAL_UART_MspInit+0x1c4>)
 8006466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006468:	4a2a      	ldr	r2, [pc, #168]	; (8006514 <HAL_UART_MspInit+0x1c4>)
 800646a:	f043 0304 	orr.w	r3, r3, #4
 800646e:	6313      	str	r3, [r2, #48]	; 0x30
 8006470:	4b28      	ldr	r3, [pc, #160]	; (8006514 <HAL_UART_MspInit+0x1c4>)
 8006472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006474:	f003 0304 	and.w	r3, r3, #4
 8006478:	60fb      	str	r3, [r7, #12]
 800647a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800647c:	23c0      	movs	r3, #192	; 0xc0
 800647e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006480:	2302      	movs	r3, #2
 8006482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006484:	2300      	movs	r3, #0
 8006486:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006488:	2303      	movs	r3, #3
 800648a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800648c:	2308      	movs	r3, #8
 800648e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006490:	f107 031c 	add.w	r3, r7, #28
 8006494:	4619      	mov	r1, r3
 8006496:	4824      	ldr	r0, [pc, #144]	; (8006528 <HAL_UART_MspInit+0x1d8>)
 8006498:	f003 f8e6 	bl	8009668 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800649c:	4b23      	ldr	r3, [pc, #140]	; (800652c <HAL_UART_MspInit+0x1dc>)
 800649e:	4a24      	ldr	r2, [pc, #144]	; (8006530 <HAL_UART_MspInit+0x1e0>)
 80064a0:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80064a2:	4b22      	ldr	r3, [pc, #136]	; (800652c <HAL_UART_MspInit+0x1dc>)
 80064a4:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80064a8:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80064aa:	4b20      	ldr	r3, [pc, #128]	; (800652c <HAL_UART_MspInit+0x1dc>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80064b0:	4b1e      	ldr	r3, [pc, #120]	; (800652c <HAL_UART_MspInit+0x1dc>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80064b6:	4b1d      	ldr	r3, [pc, #116]	; (800652c <HAL_UART_MspInit+0x1dc>)
 80064b8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064bc:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80064be:	4b1b      	ldr	r3, [pc, #108]	; (800652c <HAL_UART_MspInit+0x1dc>)
 80064c0:	2200      	movs	r2, #0
 80064c2:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80064c4:	4b19      	ldr	r3, [pc, #100]	; (800652c <HAL_UART_MspInit+0x1dc>)
 80064c6:	2200      	movs	r2, #0
 80064c8:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80064ca:	4b18      	ldr	r3, [pc, #96]	; (800652c <HAL_UART_MspInit+0x1dc>)
 80064cc:	2200      	movs	r2, #0
 80064ce:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80064d0:	4b16      	ldr	r3, [pc, #88]	; (800652c <HAL_UART_MspInit+0x1dc>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80064d6:	4b15      	ldr	r3, [pc, #84]	; (800652c <HAL_UART_MspInit+0x1dc>)
 80064d8:	2200      	movs	r2, #0
 80064da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80064dc:	4813      	ldr	r0, [pc, #76]	; (800652c <HAL_UART_MspInit+0x1dc>)
 80064de:	f001 fabd 	bl	8007a5c <HAL_DMA_Init>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d001      	beq.n	80064ec <HAL_UART_MspInit+0x19c>
      Error_Handler();
 80064e8:	f7fe fb6c 	bl	8004bc4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a0f      	ldr	r2, [pc, #60]	; (800652c <HAL_UART_MspInit+0x1dc>)
 80064f0:	639a      	str	r2, [r3, #56]	; 0x38
 80064f2:	4a0e      	ldr	r2, [pc, #56]	; (800652c <HAL_UART_MspInit+0x1dc>)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80064f8:	2200      	movs	r2, #0
 80064fa:	2105      	movs	r1, #5
 80064fc:	2047      	movs	r0, #71	; 0x47
 80064fe:	f001 fa75 	bl	80079ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8006502:	2047      	movs	r0, #71	; 0x47
 8006504:	f001 fa8e 	bl	8007a24 <HAL_NVIC_EnableIRQ>
}
 8006508:	bf00      	nop
 800650a:	3730      	adds	r7, #48	; 0x30
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	40011000 	.word	0x40011000
 8006514:	40023800 	.word	0x40023800
 8006518:	40020000 	.word	0x40020000
 800651c:	200072e8 	.word	0x200072e8
 8006520:	40026440 	.word	0x40026440
 8006524:	40011400 	.word	0x40011400
 8006528:	40020800 	.word	0x40020800
 800652c:	20007158 	.word	0x20007158
 8006530:	40026428 	.word	0x40026428

08006534 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4a18      	ldr	r2, [pc, #96]	; (80065a4 <HAL_UART_MspDeInit+0x70>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d113      	bne.n	800656e <HAL_UART_MspDeInit+0x3a>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 8006546:	4b18      	ldr	r3, [pc, #96]	; (80065a8 <HAL_UART_MspDeInit+0x74>)
 8006548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800654a:	4a17      	ldr	r2, [pc, #92]	; (80065a8 <HAL_UART_MspDeInit+0x74>)
 800654c:	f023 0310 	bic.w	r3, r3, #16
 8006550:	6453      	str	r3, [r2, #68]	; 0x44

    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_9|GPIO_PIN_10);
 8006552:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006556:	4815      	ldr	r0, [pc, #84]	; (80065ac <HAL_UART_MspDeInit+0x78>)
 8006558:	f003 fa22 	bl	80099a0 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006560:	4618      	mov	r0, r3
 8006562:	f001 fb29 	bl	8007bb8 <HAL_DMA_DeInit>

    /* USART1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8006566:	2025      	movs	r0, #37	; 0x25
 8006568:	f001 fa6a 	bl	8007a40 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART6_MspDeInit 1 */

  /* USER CODE END USART6_MspDeInit 1 */
  }

}
 800656c:	e016      	b.n	800659c <HAL_UART_MspDeInit+0x68>
  else if(huart->Instance==USART6)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a0f      	ldr	r2, [pc, #60]	; (80065b0 <HAL_UART_MspDeInit+0x7c>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d111      	bne.n	800659c <HAL_UART_MspDeInit+0x68>
    __HAL_RCC_USART6_CLK_DISABLE();
 8006578:	4b0b      	ldr	r3, [pc, #44]	; (80065a8 <HAL_UART_MspDeInit+0x74>)
 800657a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800657c:	4a0a      	ldr	r2, [pc, #40]	; (80065a8 <HAL_UART_MspDeInit+0x74>)
 800657e:	f023 0320 	bic.w	r3, r3, #32
 8006582:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_6|GPIO_PIN_7);
 8006584:	21c0      	movs	r1, #192	; 0xc0
 8006586:	480b      	ldr	r0, [pc, #44]	; (80065b4 <HAL_UART_MspDeInit+0x80>)
 8006588:	f003 fa0a 	bl	80099a0 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmarx);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006590:	4618      	mov	r0, r3
 8006592:	f001 fb11 	bl	8007bb8 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART6_IRQn);
 8006596:	2047      	movs	r0, #71	; 0x47
 8006598:	f001 fa52 	bl	8007a40 <HAL_NVIC_DisableIRQ>
}
 800659c:	bf00      	nop
 800659e:	3708      	adds	r7, #8
 80065a0:	46bd      	mov	sp, r7
 80065a2:	bd80      	pop	{r7, pc}
 80065a4:	40011000 	.word	0x40011000
 80065a8:	40023800 	.word	0x40023800
 80065ac:	40020000 	.word	0x40020000
 80065b0:	40011400 	.word	0x40011400
 80065b4:	40020800 	.word	0x40020800

080065b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b08c      	sub	sp, #48	; 0x30
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80065c0:	2300      	movs	r3, #0
 80065c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80065c4:	2300      	movs	r3, #0
 80065c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 80065c8:	2200      	movs	r2, #0
 80065ca:	6879      	ldr	r1, [r7, #4]
 80065cc:	2019      	movs	r0, #25
 80065ce:	f001 fa0d 	bl	80079ec <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80065d2:	2019      	movs	r0, #25
 80065d4:	f001 fa26 	bl	8007a24 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80065d8:	2300      	movs	r3, #0
 80065da:	60fb      	str	r3, [r7, #12]
 80065dc:	4b1f      	ldr	r3, [pc, #124]	; (800665c <HAL_InitTick+0xa4>)
 80065de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065e0:	4a1e      	ldr	r2, [pc, #120]	; (800665c <HAL_InitTick+0xa4>)
 80065e2:	f043 0301 	orr.w	r3, r3, #1
 80065e6:	6453      	str	r3, [r2, #68]	; 0x44
 80065e8:	4b1c      	ldr	r3, [pc, #112]	; (800665c <HAL_InitTick+0xa4>)
 80065ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	60fb      	str	r3, [r7, #12]
 80065f2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80065f4:	f107 0210 	add.w	r2, r7, #16
 80065f8:	f107 0314 	add.w	r3, r7, #20
 80065fc:	4611      	mov	r1, r2
 80065fe:	4618      	mov	r0, r3
 8006600:	f003 ffac 	bl	800a55c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8006604:	f003 ff96 	bl	800a534 <HAL_RCC_GetPCLK2Freq>
 8006608:	4603      	mov	r3, r0
 800660a:	005b      	lsls	r3, r3, #1
 800660c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800660e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006610:	4a13      	ldr	r2, [pc, #76]	; (8006660 <HAL_InitTick+0xa8>)
 8006612:	fba2 2303 	umull	r2, r3, r2, r3
 8006616:	0c9b      	lsrs	r3, r3, #18
 8006618:	3b01      	subs	r3, #1
 800661a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800661c:	4b11      	ldr	r3, [pc, #68]	; (8006664 <HAL_InitTick+0xac>)
 800661e:	4a12      	ldr	r2, [pc, #72]	; (8006668 <HAL_InitTick+0xb0>)
 8006620:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8006622:	4b10      	ldr	r3, [pc, #64]	; (8006664 <HAL_InitTick+0xac>)
 8006624:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006628:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800662a:	4a0e      	ldr	r2, [pc, #56]	; (8006664 <HAL_InitTick+0xac>)
 800662c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8006630:	4b0c      	ldr	r3, [pc, #48]	; (8006664 <HAL_InitTick+0xac>)
 8006632:	2200      	movs	r2, #0
 8006634:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006636:	4b0b      	ldr	r3, [pc, #44]	; (8006664 <HAL_InitTick+0xac>)
 8006638:	2200      	movs	r2, #0
 800663a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 800663c:	4809      	ldr	r0, [pc, #36]	; (8006664 <HAL_InitTick+0xac>)
 800663e:	f004 fd67 	bl	800b110 <HAL_TIM_Base_Init>
 8006642:	4603      	mov	r3, r0
 8006644:	2b00      	cmp	r3, #0
 8006646:	d104      	bne.n	8006652 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8006648:	4806      	ldr	r0, [pc, #24]	; (8006664 <HAL_InitTick+0xac>)
 800664a:	f004 fe19 	bl	800b280 <HAL_TIM_Base_Start_IT>
 800664e:	4603      	mov	r3, r0
 8006650:	e000      	b.n	8006654 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8006652:	2301      	movs	r3, #1
}
 8006654:	4618      	mov	r0, r3
 8006656:	3730      	adds	r7, #48	; 0x30
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}
 800665c:	40023800 	.word	0x40023800
 8006660:	431bde83 	.word	0x431bde83
 8006664:	20007590 	.word	0x20007590
 8006668:	40010000 	.word	0x40010000

0800666c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800666c:	b480      	push	{r7}
 800666e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006670:	e7fe      	b.n	8006670 <NMI_Handler+0x4>

08006672 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006672:	b480      	push	{r7}
 8006674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006676:	e7fe      	b.n	8006676 <HardFault_Handler+0x4>

08006678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006678:	b480      	push	{r7}
 800667a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800667c:	e7fe      	b.n	800667c <MemManage_Handler+0x4>

0800667e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800667e:	b480      	push	{r7}
 8006680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006682:	e7fe      	b.n	8006682 <BusFault_Handler+0x4>

08006684 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006684:	b480      	push	{r7}
 8006686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006688:	e7fe      	b.n	8006688 <UsageFault_Handler+0x4>

0800668a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800668a:	b480      	push	{r7}
 800668c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800668e:	bf00      	nop
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800669c:	4802      	ldr	r0, [pc, #8]	; (80066a8 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800669e:	f004 fe5f 	bl	800b360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80066a2:	bf00      	nop
 80066a4:	bd80      	pop	{r7, pc}
 80066a6:	bf00      	nop
 80066a8:	20007590 	.word	0x20007590

080066ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80066b0:	4803      	ldr	r0, [pc, #12]	; (80066c0 <TIM4_IRQHandler+0x14>)
 80066b2:	f004 fe55 	bl	800b360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
  UpdateTimers();
 80066b6:	f000 f965 	bl	8006984 <UpdateTimers>
  /* USER CODE END TIM4_IRQn 1 */
}
 80066ba:	bf00      	nop
 80066bc:	bd80      	pop	{r7, pc}
 80066be:	bf00      	nop
 80066c0:	200071b8 	.word	0x200071b8

080066c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80066c8:	4802      	ldr	r0, [pc, #8]	; (80066d4 <USART1_IRQHandler+0x10>)
 80066ca:	f005 fb7f 	bl	800bdcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80066ce:	bf00      	nop
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	20007348 	.word	0x20007348

080066d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80066dc:	4802      	ldr	r0, [pc, #8]	; (80066e8 <DMA2_Stream0_IRQHandler+0x10>)
 80066de:	f001 fbb3 	bl	8007e48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80066e2:	bf00      	nop
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	2000738c 	.word	0x2000738c

080066ec <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80066f0:	4802      	ldr	r0, [pc, #8]	; (80066fc <DMA2_Stream1_IRQHandler+0x10>)
 80066f2:	f001 fba9 	bl	8007e48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80066f6:	bf00      	nop
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	20007158 	.word	0x20007158

08006700 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8006704:	4802      	ldr	r0, [pc, #8]	; (8006710 <DMA2_Stream2_IRQHandler+0x10>)
 8006706:	f001 fb9f 	bl	8007e48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800670a:	bf00      	nop
 800670c:	bd80      	pop	{r7, pc}
 800670e:	bf00      	nop
 8006710:	200072e8 	.word	0x200072e8

08006714 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8006718:	4802      	ldr	r0, [pc, #8]	; (8006724 <ETH_IRQHandler+0x10>)
 800671a:	f002 f9e3 	bl	8008ae4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800671e:	bf00      	nop
 8006720:	bd80      	pop	{r7, pc}
 8006722:	bf00      	nop
 8006724:	20009200 	.word	0x20009200

08006728 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800672c:	4802      	ldr	r0, [pc, #8]	; (8006738 <USART6_IRQHandler+0x10>)
 800672e:	f005 fb4d 	bl	800bdcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8006732:	bf00      	nop
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	200073f0 	.word	0x200073f0

0800673c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800673c:	b480      	push	{r7}
 800673e:	af00      	add	r7, sp, #0
	return 1;
 8006740:	2301      	movs	r3, #1
}
 8006742:	4618      	mov	r0, r3
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <_kill>:

int _kill(int pid, int sig)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006756:	4b05      	ldr	r3, [pc, #20]	; (800676c <_kill+0x20>)
 8006758:	2216      	movs	r2, #22
 800675a:	601a      	str	r2, [r3, #0]
	return -1;
 800675c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006760:	4618      	mov	r0, r3
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	2000e190 	.word	0x2000e190

08006770 <_exit>:

void _exit (int status)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8006778:	f04f 31ff 	mov.w	r1, #4294967295
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f7ff ffe5 	bl	800674c <_kill>
	while (1) {}		/* Make sure we hang here */
 8006782:	e7fe      	b.n	8006782 <_exit+0x12>

08006784 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b086      	sub	sp, #24
 8006788:	af00      	add	r7, sp, #0
 800678a:	60f8      	str	r0, [r7, #12]
 800678c:	60b9      	str	r1, [r7, #8]
 800678e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006790:	2300      	movs	r3, #0
 8006792:	617b      	str	r3, [r7, #20]
 8006794:	e00a      	b.n	80067ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8006796:	f3af 8000 	nop.w
 800679a:	4601      	mov	r1, r0
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	1c5a      	adds	r2, r3, #1
 80067a0:	60ba      	str	r2, [r7, #8]
 80067a2:	b2ca      	uxtb	r2, r1
 80067a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	3301      	adds	r3, #1
 80067aa:	617b      	str	r3, [r7, #20]
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	dbf0      	blt.n	8006796 <_read+0x12>
	}

return len;
 80067b4:	687b      	ldr	r3, [r7, #4]
}
 80067b6:	4618      	mov	r0, r3
 80067b8:	3718      	adds	r7, #24
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b086      	sub	sp, #24
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	60f8      	str	r0, [r7, #12]
 80067c6:	60b9      	str	r1, [r7, #8]
 80067c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80067ca:	2300      	movs	r3, #0
 80067cc:	617b      	str	r3, [r7, #20]
 80067ce:	e009      	b.n	80067e4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	1c5a      	adds	r2, r3, #1
 80067d4:	60ba      	str	r2, [r7, #8]
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	4618      	mov	r0, r3
 80067da:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	3301      	adds	r3, #1
 80067e2:	617b      	str	r3, [r7, #20]
 80067e4:	697a      	ldr	r2, [r7, #20]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	dbf1      	blt.n	80067d0 <_write+0x12>
	}
	return len;
 80067ec:	687b      	ldr	r3, [r7, #4]
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	3718      	adds	r7, #24
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}

080067f6 <_close>:

int _close(int file)
{
 80067f6:	b480      	push	{r7}
 80067f8:	b083      	sub	sp, #12
 80067fa:	af00      	add	r7, sp, #0
 80067fc:	6078      	str	r0, [r7, #4]
	return -1;
 80067fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006802:	4618      	mov	r0, r3
 8006804:	370c      	adds	r7, #12
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr

0800680e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800680e:	b480      	push	{r7}
 8006810:	b083      	sub	sp, #12
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
 8006816:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800681e:	605a      	str	r2, [r3, #4]
	return 0;
 8006820:	2300      	movs	r3, #0
}
 8006822:	4618      	mov	r0, r3
 8006824:	370c      	adds	r7, #12
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr

0800682e <_isatty>:

int _isatty(int file)
{
 800682e:	b480      	push	{r7}
 8006830:	b083      	sub	sp, #12
 8006832:	af00      	add	r7, sp, #0
 8006834:	6078      	str	r0, [r7, #4]
	return 1;
 8006836:	2301      	movs	r3, #1
}
 8006838:	4618      	mov	r0, r3
 800683a:	370c      	adds	r7, #12
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006844:	b480      	push	{r7}
 8006846:	b085      	sub	sp, #20
 8006848:	af00      	add	r7, sp, #0
 800684a:	60f8      	str	r0, [r7, #12]
 800684c:	60b9      	str	r1, [r7, #8]
 800684e:	607a      	str	r2, [r7, #4]
	return 0;
 8006850:	2300      	movs	r3, #0
}
 8006852:	4618      	mov	r0, r3
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr
	...

08006860 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006860:	b480      	push	{r7}
 8006862:	b087      	sub	sp, #28
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006868:	4a14      	ldr	r2, [pc, #80]	; (80068bc <_sbrk+0x5c>)
 800686a:	4b15      	ldr	r3, [pc, #84]	; (80068c0 <_sbrk+0x60>)
 800686c:	1ad3      	subs	r3, r2, r3
 800686e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006874:	4b13      	ldr	r3, [pc, #76]	; (80068c4 <_sbrk+0x64>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d102      	bne.n	8006882 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800687c:	4b11      	ldr	r3, [pc, #68]	; (80068c4 <_sbrk+0x64>)
 800687e:	4a12      	ldr	r2, [pc, #72]	; (80068c8 <_sbrk+0x68>)
 8006880:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006882:	4b10      	ldr	r3, [pc, #64]	; (80068c4 <_sbrk+0x64>)
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4413      	add	r3, r2
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	429a      	cmp	r2, r3
 800688e:	d205      	bcs.n	800689c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8006890:	4b0e      	ldr	r3, [pc, #56]	; (80068cc <_sbrk+0x6c>)
 8006892:	220c      	movs	r2, #12
 8006894:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006896:	f04f 33ff 	mov.w	r3, #4294967295
 800689a:	e009      	b.n	80068b0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800689c:	4b09      	ldr	r3, [pc, #36]	; (80068c4 <_sbrk+0x64>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80068a2:	4b08      	ldr	r3, [pc, #32]	; (80068c4 <_sbrk+0x64>)
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4413      	add	r3, r2
 80068aa:	4a06      	ldr	r2, [pc, #24]	; (80068c4 <_sbrk+0x64>)
 80068ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80068ae:	68fb      	ldr	r3, [r7, #12]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	371c      	adds	r7, #28
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	20020000 	.word	0x20020000
 80068c0:	00000400 	.word	0x00000400
 80068c4:	20000928 	.word	0x20000928
 80068c8:	2000e198 	.word	0x2000e198
 80068cc:	2000e190 	.word	0x2000e190

080068d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80068d0:	b480      	push	{r7}
 80068d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80068d4:	4b06      	ldr	r3, [pc, #24]	; (80068f0 <SystemInit+0x20>)
 80068d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068da:	4a05      	ldr	r2, [pc, #20]	; (80068f0 <SystemInit+0x20>)
 80068dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80068e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80068e4:	bf00      	nop
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	e000ed00 	.word	0xe000ed00

080068f4 <Start_Timers>:

static Timer_Init_State Push_To_List(TON *timer);
static void UpdateTimer(TON *timer);

void Start_Timers(void)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim4);
 80068f8:	4802      	ldr	r0, [pc, #8]	; (8006904 <Start_Timers+0x10>)
 80068fa:	f004 fcc1 	bl	800b280 <HAL_TIM_Base_Start_IT>

}
 80068fe:	bf00      	nop
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	200071b8 	.word	0x200071b8

08006908 <Timer_Init>:

Timer_Init_State Timer_Init(TON *timer)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b082      	sub	sp, #8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
	return Push_To_List(timer);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f805 	bl	8006920 <Push_To_List>
 8006916:	4603      	mov	r3, r0

}
 8006918:	4618      	mov	r0, r3
 800691a:	3708      	adds	r7, #8
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <Push_To_List>:

static Timer_Init_State Push_To_List(TON *timer)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b084      	sub	sp, #16
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
	struct list_item *tmp, *top;
	tmp = malloc(sizeof(struct list_item));
 8006928:	2008      	movs	r0, #8
 800692a:	f017 fcd5 	bl	801e2d8 <malloc>
 800692e:	4603      	mov	r3, r0
 8006930:	60bb      	str	r3, [r7, #8]
	if(tmp == NULL)return TIMER_FAIL;
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d101      	bne.n	800693c <Push_To_List+0x1c>
 8006938:	2301      	movs	r3, #1
 800693a:	e01c      	b.n	8006976 <Push_To_List+0x56>
	tmp->next = NULL;
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	2200      	movs	r2, #0
 8006940:	605a      	str	r2, [r3, #4]
	tmp->timer = timer;
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	687a      	ldr	r2, [r7, #4]
 8006946:	601a      	str	r2, [r3, #0]
	if(timers)
 8006948:	4b0d      	ldr	r3, [pc, #52]	; (8006980 <Push_To_List+0x60>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d00e      	beq.n	800696e <Push_To_List+0x4e>
	{
		top = timers;
 8006950:	4b0b      	ldr	r3, [pc, #44]	; (8006980 <Push_To_List+0x60>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	60fb      	str	r3, [r7, #12]
		while(top->next)
 8006956:	e002      	b.n	800695e <Push_To_List+0x3e>
		{
			top = top->next;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	60fb      	str	r3, [r7, #12]
		while(top->next)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1f8      	bne.n	8006958 <Push_To_List+0x38>
		}
		top->next = tmp;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	605a      	str	r2, [r3, #4]
 800696c:	e002      	b.n	8006974 <Push_To_List+0x54>
	}
	else
	{
		timers = tmp;
 800696e:	4a04      	ldr	r2, [pc, #16]	; (8006980 <Push_To_List+0x60>)
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	6013      	str	r3, [r2, #0]
	}
	return TIMER_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
 800697e:	bf00      	nop
 8006980:	2000092c 	.word	0x2000092c

08006984 <UpdateTimers>:

/*Функция обновления значений всех таймеров*/
void UpdateTimers()
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b082      	sub	sp, #8
 8006988:	af00      	add	r7, sp, #0
	struct list_item *tmp = timers;
 800698a:	4b0a      	ldr	r3, [pc, #40]	; (80069b4 <UpdateTimers+0x30>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	607b      	str	r3, [r7, #4]
	while(tmp)
 8006990:	e007      	b.n	80069a2 <UpdateTimers+0x1e>
	{
		UpdateTimer(tmp->timer);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4618      	mov	r0, r3
 8006998:	f000 f80e 	bl	80069b8 <UpdateTimer>
		tmp = tmp->next;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	685b      	ldr	r3, [r3, #4]
 80069a0:	607b      	str	r3, [r7, #4]
	while(tmp)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d1f4      	bne.n	8006992 <UpdateTimers+0xe>
	}
}
 80069a8:	bf00      	nop
 80069aa:	bf00      	nop
 80069ac:	3708      	adds	r7, #8
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	2000092c 	.word	0x2000092c

080069b8 <UpdateTimer>:

/*Функция обновления значений одного таймера*/
static void UpdateTimer(TON *timer)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b083      	sub	sp, #12
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
	if(timer->IN)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	7a1b      	ldrb	r3, [r3, #8]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d00e      	beq.n	80069e6 <UpdateTimer+0x2e>
	{
		timer->ET = timer->ET < timer->SV ? timer->ET+1 : timer->ET;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685a      	ldr	r2, [r3, #4]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	429a      	cmp	r2, r3
 80069d2:	d203      	bcs.n	80069dc <UpdateTimer+0x24>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	685b      	ldr	r3, [r3, #4]
 80069d8:	3301      	adds	r3, #1
 80069da:	e001      	b.n	80069e0 <UpdateTimer+0x28>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	687a      	ldr	r2, [r7, #4]
 80069e2:	6053      	str	r3, [r2, #4]
 80069e4:	e002      	b.n	80069ec <UpdateTimer+0x34>
	}
	else
	{
		timer->ET = 0;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2200      	movs	r2, #0
 80069ea:	605a      	str	r2, [r3, #4]
	}
	timer->OUT = timer->ET == timer->SV;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	685a      	ldr	r2, [r3, #4]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	429a      	cmp	r2, r3
 80069f6:	bf0c      	ite	eq
 80069f8:	2301      	moveq	r3, #1
 80069fa:	2300      	movne	r3, #0
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	461a      	mov	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	725a      	strb	r2, [r3, #9]
}
 8006a04:	bf00      	nop
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <uart_thread>:
static void Transmit(UART_HandleTypeDef *huart, uint8_t *p, uint16_t size);



void uart_thread(void *argument)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b088      	sub	sp, #32
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
	osEvent event;
	Uart_Queue_Struct *queue_arg;
	RsReInit();
 8006a18:	f000 f958 	bl	8006ccc <RsReInit>
	StartReciveUartAll();
 8006a1c:	f000 f82c 	bl	8006a78 <StartReciveUartAll>
	while(1)
	{
		event = osMailGet(uart_queue, osWaitForever);
 8006a20:	4b14      	ldr	r3, [pc, #80]	; (8006a74 <uart_thread+0x64>)
 8006a22:	6819      	ldr	r1, [r3, #0]
 8006a24:	f107 030c 	add.w	r3, r7, #12
 8006a28:	f04f 32ff 	mov.w	r2, #4294967295
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f007 fc83 	bl	800e338 <osMailGet>
		if(event.status == osEventMail)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2b20      	cmp	r3, #32
 8006a36:	d1f3      	bne.n	8006a20 <uart_thread+0x10>
		{
			int result = 0;
 8006a38:	2300      	movs	r3, #0
 8006a3a:	61fb      	str	r3, [r7, #28]
			queue_arg = event.value.p;
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	61bb      	str	r3, [r7, #24]
			result = RecognizePacket(queue_arg);
 8006a40:	69b8      	ldr	r0, [r7, #24]
 8006a42:	f000 f8c5 	bl	8006bd0 <RecognizePacket>
 8006a46:	61f8      	str	r0, [r7, #28]
			if(result)Transmit(queue_arg->huart, queue_arg->output_pointer, result);
 8006a48:	69fb      	ldr	r3, [r7, #28]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d008      	beq.n	8006a60 <uart_thread+0x50>
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	68d8      	ldr	r0, [r3, #12]
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	685b      	ldr	r3, [r3, #4]
 8006a56:	69fa      	ldr	r2, [r7, #28]
 8006a58:	b292      	uxth	r2, r2
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	f000 f90e 	bl	8006c7c <Transmit>
			StartReceive(1);
 8006a60:	2001      	movs	r0, #1
 8006a62:	f000 f81d 	bl	8006aa0 <StartReceive>
			osMailFree(uart_queue, queue_arg);
 8006a66:	4b03      	ldr	r3, [pc, #12]	; (8006a74 <uart_thread+0x64>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	69b9      	ldr	r1, [r7, #24]
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	f007 fcd7 	bl	800e420 <osMailFree>
		event = osMailGet(uart_queue, osWaitForever);
 8006a72:	e7d5      	b.n	8006a20 <uart_thread+0x10>
 8006a74:	2000702c 	.word	0x2000702c

08006a78 <StartReciveUartAll>:
	}
}


static void StartReciveUartAll()
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b082      	sub	sp, #8
 8006a7c:	af00      	add	r7, sp, #0
	for (int i = 0; i < 2; ++i) {
 8006a7e:	2300      	movs	r3, #0
 8006a80:	607b      	str	r3, [r7, #4]
 8006a82:	e005      	b.n	8006a90 <StartReciveUartAll+0x18>
		StartReceive(i);
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f80b 	bl	8006aa0 <StartReceive>
	for (int i = 0; i < 2; ++i) {
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	607b      	str	r3, [r7, #4]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	ddf6      	ble.n	8006a84 <StartReciveUartAll+0xc>
	}
}
 8006a96:	bf00      	nop
 8006a98:	bf00      	nop
 8006a9a:	3708      	adds	r7, #8
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	bd80      	pop	{r7, pc}

08006aa0 <StartReceive>:


static void StartReceive(int index)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
	switch (index) {
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <StartReceive+0x16>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d016      	beq.n	8006ae2 <StartReceive+0x42>
				HAL_UARTEx_ReceiveToIdle_DMA(&huart6, uart_input_buffer[1], UART_INPUT_BUFFER_SZ);
				__HAL_DMA_DISABLE_IT(&hdma_usart6_rx,DMA_IT_HT);
			}
			break;
		default:
			break;
 8006ab4:	e02e      	b.n	8006b14 <StartReceive+0x74>
			if (huart1.hdmarx->State==HAL_DMA_STATE_READY) {
 8006ab6:	4b19      	ldr	r3, [pc, #100]	; (8006b1c <StartReceive+0x7c>)
 8006ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006abe:	b2db      	uxtb	r3, r3
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d124      	bne.n	8006b0e <StartReceive+0x6e>
				HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_input_buffer[0], UART_INPUT_BUFFER_SZ);
 8006ac4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ac8:	4915      	ldr	r1, [pc, #84]	; (8006b20 <StartReceive+0x80>)
 8006aca:	4814      	ldr	r0, [pc, #80]	; (8006b1c <StartReceive+0x7c>)
 8006acc:	f005 f918 	bl	800bd00 <HAL_UARTEx_ReceiveToIdle_DMA>
				__HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 8006ad0:	4b14      	ldr	r3, [pc, #80]	; (8006b24 <StartReceive+0x84>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	4b13      	ldr	r3, [pc, #76]	; (8006b24 <StartReceive+0x84>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f022 0208 	bic.w	r2, r2, #8
 8006ade:	601a      	str	r2, [r3, #0]
			break;
 8006ae0:	e015      	b.n	8006b0e <StartReceive+0x6e>
			if(huart6.hdmarx->State==HAL_DMA_STATE_READY){
 8006ae2:	4b11      	ldr	r3, [pc, #68]	; (8006b28 <StartReceive+0x88>)
 8006ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d110      	bne.n	8006b12 <StartReceive+0x72>
				HAL_UARTEx_ReceiveToIdle_DMA(&huart6, uart_input_buffer[1], UART_INPUT_BUFFER_SZ);
 8006af0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006af4:	490d      	ldr	r1, [pc, #52]	; (8006b2c <StartReceive+0x8c>)
 8006af6:	480c      	ldr	r0, [pc, #48]	; (8006b28 <StartReceive+0x88>)
 8006af8:	f005 f902 	bl	800bd00 <HAL_UARTEx_ReceiveToIdle_DMA>
				__HAL_DMA_DISABLE_IT(&hdma_usart6_rx,DMA_IT_HT);
 8006afc:	4b0c      	ldr	r3, [pc, #48]	; (8006b30 <StartReceive+0x90>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	681a      	ldr	r2, [r3, #0]
 8006b02:	4b0b      	ldr	r3, [pc, #44]	; (8006b30 <StartReceive+0x90>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f022 0208 	bic.w	r2, r2, #8
 8006b0a:	601a      	str	r2, [r3, #0]
			break;
 8006b0c:	e001      	b.n	8006b12 <StartReceive+0x72>
			break;
 8006b0e:	bf00      	nop
 8006b10:	e000      	b.n	8006b14 <StartReceive+0x74>
			break;
 8006b12:	bf00      	nop
	}
}
 8006b14:	bf00      	nop
 8006b16:	3708      	adds	r7, #8
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	20007348 	.word	0x20007348
 8006b20:	200075d8 	.word	0x200075d8
 8006b24:	200072e8 	.word	0x200072e8
 8006b28:	200073f0 	.word	0x200073f0
 8006b2c:	200076d8 	.word	0x200076d8
 8006b30:	20007158 	.word	0x20007158

08006b34 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b086      	sub	sp, #24
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	460b      	mov	r3, r1
 8006b3e:	807b      	strh	r3, [r7, #2]
	Uart_Queue_Struct *queue_arg;
	uint8_t *input_pointer = NULL;
 8006b40:	2300      	movs	r3, #0
 8006b42:	617b      	str	r3, [r7, #20]
	uint8_t *output_pointer = NULL;
 8006b44:	2300      	movs	r3, #0
 8006b46:	613b      	str	r3, [r7, #16]
	if (huart->Instance==USART1) {
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a1a      	ldr	r2, [pc, #104]	; (8006bb8 <HAL_UARTEx_RxEventCallback+0x84>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d105      	bne.n	8006b5e <HAL_UARTEx_RxEventCallback+0x2a>
		input_pointer = uart_input_buffer[0];
 8006b52:	4b1a      	ldr	r3, [pc, #104]	; (8006bbc <HAL_UARTEx_RxEventCallback+0x88>)
 8006b54:	617b      	str	r3, [r7, #20]
		StartReceive(0);
 8006b56:	2000      	movs	r0, #0
 8006b58:	f7ff ffa2 	bl	8006aa0 <StartReceive>
 8006b5c:	e008      	b.n	8006b70 <HAL_UARTEx_RxEventCallback+0x3c>
	}
	else if(huart->Instance==USART6){
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a17      	ldr	r2, [pc, #92]	; (8006bc0 <HAL_UARTEx_RxEventCallback+0x8c>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d120      	bne.n	8006baa <HAL_UARTEx_RxEventCallback+0x76>
		input_pointer = uart_input_buffer[1];
 8006b68:	4b16      	ldr	r3, [pc, #88]	; (8006bc4 <HAL_UARTEx_RxEventCallback+0x90>)
 8006b6a:	617b      	str	r3, [r7, #20]
		output_pointer = rs_answer;
 8006b6c:	4b16      	ldr	r3, [pc, #88]	; (8006bc8 <HAL_UARTEx_RxEventCallback+0x94>)
 8006b6e:	613b      	str	r3, [r7, #16]

	}
	else return;
	queue_arg = osMailAlloc(uart_queue, 0);
 8006b70:	4b16      	ldr	r3, [pc, #88]	; (8006bcc <HAL_UARTEx_RxEventCallback+0x98>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2100      	movs	r1, #0
 8006b76:	4618      	mov	r0, r3
 8006b78:	f007 fb8a 	bl	800e290 <osMailAlloc>
 8006b7c:	60f8      	str	r0, [r7, #12]
	if(queue_arg==NULL)return;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d014      	beq.n	8006bae <HAL_UARTEx_RxEventCallback+0x7a>
	queue_arg->inpit_size = size;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	887a      	ldrh	r2, [r7, #2]
 8006b88:	811a      	strh	r2, [r3, #8]
	queue_arg->input_pointer = input_pointer;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	697a      	ldr	r2, [r7, #20]
 8006b8e:	601a      	str	r2, [r3, #0]
	queue_arg->output_pointer = output_pointer;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	605a      	str	r2, [r3, #4]
	queue_arg->huart = huart;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	687a      	ldr	r2, [r7, #4]
 8006b9a:	60da      	str	r2, [r3, #12]
	osMailPut(uart_queue, queue_arg);
 8006b9c:	4b0b      	ldr	r3, [pc, #44]	; (8006bcc <HAL_UARTEx_RxEventCallback+0x98>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	68f9      	ldr	r1, [r7, #12]
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	f007 fb8a 	bl	800e2bc <osMailPut>
 8006ba8:	e002      	b.n	8006bb0 <HAL_UARTEx_RxEventCallback+0x7c>
	else return;
 8006baa:	bf00      	nop
 8006bac:	e000      	b.n	8006bb0 <HAL_UARTEx_RxEventCallback+0x7c>
	if(queue_arg==NULL)return;
 8006bae:	bf00      	nop
}
 8006bb0:	3718      	adds	r7, #24
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}
 8006bb6:	bf00      	nop
 8006bb8:	40011000 	.word	0x40011000
 8006bbc:	200075d8 	.word	0x200075d8
 8006bc0:	40011400 	.word	0x40011400
 8006bc4:	200076d8 	.word	0x200076d8
 8006bc8:	200077d8 	.word	0x200077d8
 8006bcc:	2000702c 	.word	0x2000702c

08006bd0 <RecognizePacket>:

static int RecognizePacket(Uart_Queue_Struct *request)
{
 8006bd0:	b580      	push	{r7, lr}
 8006bd2:	b084      	sub	sp, #16
 8006bd4:	af00      	add	r7, sp, #0
 8006bd6:	6078      	str	r0, [r7, #4]
	int result = 0;
 8006bd8:	2300      	movs	r3, #0
 8006bda:	60fb      	str	r3, [r7, #12]
	if(request->input_pointer==NULL)return 0;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d101      	bne.n	8006be8 <RecognizePacket+0x18>
 8006be4:	2300      	movs	r3, #0
 8006be6:	e03e      	b.n	8006c66 <RecognizePacket+0x96>
	if(request->huart->Instance==USART1)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a20      	ldr	r2, [pc, #128]	; (8006c70 <RecognizePacket+0xa0>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d121      	bne.n	8006c38 <RecognizePacket+0x68>
	{
		float analog = 0;
 8006bf4:	f04f 0300 	mov.w	r3, #0
 8006bf8:	60bb      	str	r3, [r7, #8]
		if(request->inpit_size==6 && *(request->input_pointer)==0x0A && *(request->input_pointer+5)==0x0D)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	891b      	ldrh	r3, [r3, #8]
 8006bfe:	2b06      	cmp	r3, #6
 8006c00:	d118      	bne.n	8006c34 <RecognizePacket+0x64>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	2b0a      	cmp	r3, #10
 8006c0a:	d113      	bne.n	8006c34 <RecognizePacket+0x64>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	3305      	adds	r3, #5
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	2b0d      	cmp	r3, #13
 8006c16:	d10d      	bne.n	8006c34 <RecognizePacket+0x64>
		{
			memcpy(&analog,(request->input_pointer)+1,sizeof(float));
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	60bb      	str	r3, [r7, #8]
			meas_data.analog_input = analog * 10;
 8006c22:	edd7 7a02 	vldr	s15, [r7, #8]
 8006c26:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8006c2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006c2e:	4b11      	ldr	r3, [pc, #68]	; (8006c74 <RecognizePacket+0xa4>)
 8006c30:	edc3 7a01 	vstr	s15, [r3, #4]
		}
		return 0;
 8006c34:	2300      	movs	r3, #0
 8006c36:	e016      	b.n	8006c66 <RecognizePacket+0x96>
	}
	else if (request->huart->Instance==USART6) {
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a0e      	ldr	r2, [pc, #56]	; (8006c78 <RecognizePacket+0xa8>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d10f      	bne.n	8006c64 <RecognizePacket+0x94>
		if(request->output_pointer == NULL)return 0;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d101      	bne.n	8006c50 <RecognizePacket+0x80>
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	e00a      	b.n	8006c66 <RecognizePacket+0x96>
		result = ModbusParse(request->input_pointer, request->inpit_size, request->output_pointer, RS485);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6818      	ldr	r0, [r3, #0]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	8919      	ldrh	r1, [r3, #8]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	685a      	ldr	r2, [r3, #4]
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	f7fd fff3 	bl	8004c48 <ModbusParse>
 8006c62:	60f8      	str	r0, [r7, #12]
	}
	return result;
 8006c64:	68fb      	ldr	r3, [r7, #12]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	40011000 	.word	0x40011000
 8006c74:	20007520 	.word	0x20007520
 8006c78:	40011400 	.word	0x40011400

08006c7c <Transmit>:

static void Transmit(UART_HandleTypeDef *huart, uint8_t *p, uint16_t size)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	4613      	mov	r3, r2
 8006c88:	80fb      	strh	r3, [r7, #6]
	if(huart->Instance==USART6)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a0d      	ldr	r2, [pc, #52]	; (8006cc4 <Transmit+0x48>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d112      	bne.n	8006cba <Transmit+0x3e>
	{
		HAL_GPIO_WritePin(RS485_TX_GPIO_Port, RS485_TX_Pin, SET);
 8006c94:	2201      	movs	r2, #1
 8006c96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006c9a:	480b      	ldr	r0, [pc, #44]	; (8006cc8 <Transmit+0x4c>)
 8006c9c:	f002 ff94 	bl	8009bc8 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(huart, p, size, 1000);
 8006ca0:	88fa      	ldrh	r2, [r7, #6]
 8006ca2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ca6:	68b9      	ldr	r1, [r7, #8]
 8006ca8:	68f8      	ldr	r0, [r7, #12]
 8006caa:	f004 ff97 	bl	800bbdc <HAL_UART_Transmit>
		HAL_GPIO_WritePin(RS485_TX_GPIO_Port, RS485_TX_Pin, RESET);
 8006cae:	2200      	movs	r2, #0
 8006cb0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006cb4:	4804      	ldr	r0, [pc, #16]	; (8006cc8 <Transmit+0x4c>)
 8006cb6:	f002 ff87 	bl	8009bc8 <HAL_GPIO_WritePin>

	}
}
 8006cba:	bf00      	nop
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	40011400 	.word	0x40011400
 8006cc8:	40020800 	.word	0x40020800

08006ccc <RsReInit>:

int RsReInit (void)
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
	int result = 0;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	607b      	str	r3, [r7, #4]
	result = HAL_UART_DeInit(&huart1);
 8006cd6:	4823      	ldr	r0, [pc, #140]	; (8006d64 <RsReInit+0x98>)
 8006cd8:	f004 ff51 	bl	800bb7e <HAL_UART_DeInit>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	607b      	str	r3, [r7, #4]
	if (result == HAL_OK)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d138      	bne.n	8006d58 <RsReInit+0x8c>
	{
		uint32_t parity = 0;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	603b      	str	r3, [r7, #0]
		switch (settings.retain.rs_sett.parity) {
 8006cea:	4b1f      	ldr	r3, [pc, #124]	; (8006d68 <RsReInit+0x9c>)
 8006cec:	8b9b      	ldrh	r3, [r3, #28]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d002      	beq.n	8006cf8 <RsReInit+0x2c>
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d003      	beq.n	8006cfe <RsReInit+0x32>
 8006cf6:	e006      	b.n	8006d06 <RsReInit+0x3a>
			case 0:
				parity = UART_PARITY_NONE;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	603b      	str	r3, [r7, #0]
				break;
 8006cfc:	e007      	b.n	8006d0e <RsReInit+0x42>
			case 1:
				parity = UART_PARITY_EVEN;
 8006cfe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d02:	603b      	str	r3, [r7, #0]
				break;
 8006d04:	e003      	b.n	8006d0e <RsReInit+0x42>
			default:
				parity = UART_PARITY_ODD;
 8006d06:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006d0a:	603b      	str	r3, [r7, #0]
				break;
 8006d0c:	bf00      	nop
		}
		huart6.Instance = USART6;
 8006d0e:	4b17      	ldr	r3, [pc, #92]	; (8006d6c <RsReInit+0xa0>)
 8006d10:	4a17      	ldr	r2, [pc, #92]	; (8006d70 <RsReInit+0xa4>)
 8006d12:	601a      	str	r2, [r3, #0]
		huart6.Init.BaudRate = settings.retain.rs_sett.baudrate>0 ? settings.retain.rs_sett.baudrate : 9600;
 8006d14:	4b14      	ldr	r3, [pc, #80]	; (8006d68 <RsReInit+0x9c>)
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d002      	beq.n	8006d22 <RsReInit+0x56>
 8006d1c:	4b12      	ldr	r3, [pc, #72]	; (8006d68 <RsReInit+0x9c>)
 8006d1e:	699b      	ldr	r3, [r3, #24]
 8006d20:	e001      	b.n	8006d26 <RsReInit+0x5a>
 8006d22:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8006d26:	4a11      	ldr	r2, [pc, #68]	; (8006d6c <RsReInit+0xa0>)
 8006d28:	6053      	str	r3, [r2, #4]
		huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8006d2a:	4b10      	ldr	r3, [pc, #64]	; (8006d6c <RsReInit+0xa0>)
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	609a      	str	r2, [r3, #8]
		huart6.Init.StopBits = UART_STOPBITS_1;
 8006d30:	4b0e      	ldr	r3, [pc, #56]	; (8006d6c <RsReInit+0xa0>)
 8006d32:	2200      	movs	r2, #0
 8006d34:	60da      	str	r2, [r3, #12]
		huart6.Init.Parity = parity;
 8006d36:	4a0d      	ldr	r2, [pc, #52]	; (8006d6c <RsReInit+0xa0>)
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	6113      	str	r3, [r2, #16]
		huart6.Init.Mode = UART_MODE_TX_RX;
 8006d3c:	4b0b      	ldr	r3, [pc, #44]	; (8006d6c <RsReInit+0xa0>)
 8006d3e:	220c      	movs	r2, #12
 8006d40:	615a      	str	r2, [r3, #20]
		huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006d42:	4b0a      	ldr	r3, [pc, #40]	; (8006d6c <RsReInit+0xa0>)
 8006d44:	2200      	movs	r2, #0
 8006d46:	619a      	str	r2, [r3, #24]
		huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8006d48:	4b08      	ldr	r3, [pc, #32]	; (8006d6c <RsReInit+0xa0>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	61da      	str	r2, [r3, #28]
		result = HAL_UART_Init(&huart6);
 8006d4e:	4807      	ldr	r0, [pc, #28]	; (8006d6c <RsReInit+0xa0>)
 8006d50:	f004 fec8 	bl	800bae4 <HAL_UART_Init>
 8006d54:	4603      	mov	r3, r0
 8006d56:	607b      	str	r3, [r7, #4]
	}
  return result;
 8006d58:	687b      	ldr	r3, [r7, #4]
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3708      	adds	r7, #8
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	20007348 	.word	0x20007348
 8006d68:	20007474 	.word	0x20007474
 8006d6c:	200073f0 	.word	0x200073f0
 8006d70:	40011400 	.word	0x40011400

08006d74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006d74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006dac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006d78:	480d      	ldr	r0, [pc, #52]	; (8006db0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006d7a:	490e      	ldr	r1, [pc, #56]	; (8006db4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006d7c:	4a0e      	ldr	r2, [pc, #56]	; (8006db8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006d80:	e002      	b.n	8006d88 <LoopCopyDataInit>

08006d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006d86:	3304      	adds	r3, #4

08006d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006d8c:	d3f9      	bcc.n	8006d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006d8e:	4a0b      	ldr	r2, [pc, #44]	; (8006dbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006d90:	4c0b      	ldr	r4, [pc, #44]	; (8006dc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006d94:	e001      	b.n	8006d9a <LoopFillZerobss>

08006d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006d98:	3204      	adds	r2, #4

08006d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006d9c:	d3fb      	bcc.n	8006d96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006d9e:	f7ff fd97 	bl	80068d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006da2:	f017 fa75 	bl	801e290 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006da6:	f7fd fb21 	bl	80043ec <main>
  bx  lr    
 8006daa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006dac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006db0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006db4:	2000058c 	.word	0x2000058c
  ldr r2, =_sidata
 8006db8:	08027478 	.word	0x08027478
  ldr r2, =_sbss
 8006dbc:	2000058c 	.word	0x2000058c
  ldr r4, =_ebss
 8006dc0:	2000e194 	.word	0x2000e194

08006dc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006dc4:	e7fe      	b.n	8006dc4 <ADC_IRQHandler>

08006dc6 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 8006dc6:	b580      	push	{r7, lr}
 8006dc8:	b084      	sub	sp, #16
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d104      	bne.n	8006dde <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8006dd4:	b672      	cpsid	i
}
 8006dd6:	bf00      	nop
 8006dd8:	f7fd fef4 	bl	8004bc4 <Error_Handler>
 8006ddc:	e7fe      	b.n	8006ddc <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8006dde:	2300      	movs	r3, #0
 8006de0:	60fb      	str	r3, [r7, #12]
 8006de2:	e007      	b.n	8006df4 <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	2100      	movs	r1, #0
 8006dea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	3301      	adds	r3, #1
 8006df2:	60fb      	str	r3, [r7, #12]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	2b01      	cmp	r3, #1
 8006df8:	d9f4      	bls.n	8006de4 <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	721a      	strb	r2, [r3, #8]
}
 8006e00:	bf00      	nop
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}

08006e08 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d104      	bne.n	8006e20 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8006e16:	b672      	cpsid	i
}
 8006e18:	bf00      	nop
 8006e1a:	f7fd fed3 	bl	8004bc4 <Error_Handler>
 8006e1e:	e7fe      	b.n	8006e1e <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	7a1b      	ldrb	r3, [r3, #8]
 8006e24:	2b01      	cmp	r3, #1
 8006e26:	d904      	bls.n	8006e32 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8006e28:	b672      	cpsid	i
}
 8006e2a:	bf00      	nop
 8006e2c:	f7fd feca 	bl	8004bc4 <Error_Handler>
 8006e30:	e7fe      	b.n	8006e30 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	7a1b      	ldrb	r3, [r3, #8]
 8006e36:	1c5a      	adds	r2, r3, #1
 8006e38:	b2d1      	uxtb	r1, r2
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	7211      	strb	r1, [r2, #8]
 8006e3e:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006e40:	f3ef 8211 	mrs	r2, BASEPRI
 8006e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e48:	f383 8811 	msr	BASEPRI, r3
 8006e4c:	f3bf 8f6f 	isb	sy
 8006e50:	f3bf 8f4f 	dsb	sy
 8006e54:	60fa      	str	r2, [r7, #12]
 8006e56:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8006e60:	bf00      	nop
 8006e62:	3710      	adds	r7, #16
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d104      	bne.n	8006e80 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8006e76:	b672      	cpsid	i
}
 8006e78:	bf00      	nop
 8006e7a:	f7fd fea3 	bl	8004bc4 <Error_Handler>
 8006e7e:	e7fe      	b.n	8006e7e <stm32_lock_release+0x16>
  lock->nesting_level--;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	7a1b      	ldrb	r3, [r3, #8]
 8006e84:	3b01      	subs	r3, #1
 8006e86:	b2da      	uxtb	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	7a1b      	ldrb	r3, [r3, #8]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d904      	bls.n	8006e9e <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 8006e94:	b672      	cpsid	i
}
 8006e96:	bf00      	nop
 8006e98:	f7fd fe94 	bl	8004bc4 <Error_Handler>
 8006e9c:	e7fe      	b.n	8006e9c <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	7a1b      	ldrb	r3, [r3, #8]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eaa:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006eb2:	bf00      	nop
}
 8006eb4:	bf00      	nop
 8006eb6:	3710      	adds	r7, #16
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b082      	sub	sp, #8
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d103      	bne.n	8006ed2 <__retarget_lock_init_recursive+0x16>
  {
    errno = EINVAL;
 8006eca:	4b0e      	ldr	r3, [pc, #56]	; (8006f04 <__retarget_lock_init_recursive+0x48>)
 8006ecc:	2216      	movs	r2, #22
 8006ece:	601a      	str	r2, [r3, #0]
    return;
 8006ed0:	e015      	b.n	8006efe <__retarget_lock_init_recursive+0x42>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8006ed2:	200c      	movs	r0, #12
 8006ed4:	f017 fa00 	bl	801e2d8 <malloc>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	461a      	mov	r2, r3
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d005      	beq.n	8006ef4 <__retarget_lock_init_recursive+0x38>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4618      	mov	r0, r3
 8006eee:	f7ff ff6a 	bl	8006dc6 <stm32_lock_init>
    return;
 8006ef2:	e004      	b.n	8006efe <__retarget_lock_init_recursive+0x42>
  __ASM volatile ("cpsid i" : : : "memory");
 8006ef4:	b672      	cpsid	i
}
 8006ef6:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8006ef8:	f7fd fe64 	bl	8004bc4 <Error_Handler>
 8006efc:	e7fe      	b.n	8006efc <__retarget_lock_init_recursive+0x40>
}
 8006efe:	3708      	adds	r7, #8
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}
 8006f04:	2000e190 	.word	0x2000e190

08006f08 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d104      	bne.n	8006f20 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8006f16:	b672      	cpsid	i
}
 8006f18:	bf00      	nop
 8006f1a:	f7fd fe53 	bl	8004bc4 <Error_Handler>
 8006f1e:	e7fe      	b.n	8006f1e <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7ff ff70 	bl	8006e08 <stm32_lock_acquire>
}
 8006f28:	bf00      	nop
 8006f2a:	3708      	adds	r7, #8
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d104      	bne.n	8006f48 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8006f3e:	b672      	cpsid	i
}
 8006f40:	bf00      	nop
 8006f42:	f7fd fe3f 	bl	8004bc4 <Error_Handler>
 8006f46:	e7fe      	b.n	8006f46 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7ff ff8c 	bl	8006e68 <stm32_lock_release>
}
 8006f50:	bf00      	nop
 8006f52:	3708      	adds	r7, #8
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}

08006f58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006f5c:	4b0e      	ldr	r3, [pc, #56]	; (8006f98 <HAL_Init+0x40>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a0d      	ldr	r2, [pc, #52]	; (8006f98 <HAL_Init+0x40>)
 8006f62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006f66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006f68:	4b0b      	ldr	r3, [pc, #44]	; (8006f98 <HAL_Init+0x40>)
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4a0a      	ldr	r2, [pc, #40]	; (8006f98 <HAL_Init+0x40>)
 8006f6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006f72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006f74:	4b08      	ldr	r3, [pc, #32]	; (8006f98 <HAL_Init+0x40>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a07      	ldr	r2, [pc, #28]	; (8006f98 <HAL_Init+0x40>)
 8006f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006f80:	2003      	movs	r0, #3
 8006f82:	f000 fd28 	bl	80079d6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006f86:	200f      	movs	r0, #15
 8006f88:	f7ff fb16 	bl	80065b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006f8c:	f7ff f89a 	bl	80060c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006f90:	2300      	movs	r3, #0
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	40023c00 	.word	0x40023c00

08006f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006fa0:	4b06      	ldr	r3, [pc, #24]	; (8006fbc <HAL_IncTick+0x20>)
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	4b06      	ldr	r3, [pc, #24]	; (8006fc0 <HAL_IncTick+0x24>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4413      	add	r3, r2
 8006fac:	4a04      	ldr	r2, [pc, #16]	; (8006fc0 <HAL_IncTick+0x24>)
 8006fae:	6013      	str	r3, [r2, #0]
}
 8006fb0:	bf00      	nop
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
 8006fba:	bf00      	nop
 8006fbc:	200003a4 	.word	0x200003a4
 8006fc0:	200078d8 	.word	0x200078d8

08006fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8006fc8:	4b03      	ldr	r3, [pc, #12]	; (8006fd8 <HAL_GetTick+0x14>)
 8006fca:	681b      	ldr	r3, [r3, #0]
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	200078d8 	.word	0x200078d8

08006fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006fe4:	f7ff ffee 	bl	8006fc4 <HAL_GetTick>
 8006fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ff4:	d005      	beq.n	8007002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006ff6:	4b0a      	ldr	r3, [pc, #40]	; (8007020 <HAL_Delay+0x44>)
 8006ff8:	781b      	ldrb	r3, [r3, #0]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	4413      	add	r3, r2
 8007000:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8007002:	bf00      	nop
 8007004:	f7ff ffde 	bl	8006fc4 <HAL_GetTick>
 8007008:	4602      	mov	r2, r0
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	68fa      	ldr	r2, [r7, #12]
 8007010:	429a      	cmp	r2, r3
 8007012:	d8f7      	bhi.n	8007004 <HAL_Delay+0x28>
  {
  }
}
 8007014:	bf00      	nop
 8007016:	bf00      	nop
 8007018:	3710      	adds	r7, #16
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	200003a4 	.word	0x200003a4

08007024 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800702c:	2300      	movs	r3, #0
 800702e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d101      	bne.n	800703a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8007036:	2301      	movs	r3, #1
 8007038:	e033      	b.n	80070a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800703e:	2b00      	cmp	r3, #0
 8007040:	d109      	bne.n	8007056 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f7ff f86a 	bl	800611c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2200      	movs	r2, #0
 8007052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800705a:	f003 0310 	and.w	r3, r3, #16
 800705e:	2b00      	cmp	r3, #0
 8007060:	d118      	bne.n	8007094 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007066:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800706a:	f023 0302 	bic.w	r3, r3, #2
 800706e:	f043 0202 	orr.w	r2, r3, #2
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fa5e 	bl	8007538 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007086:	f023 0303 	bic.w	r3, r3, #3
 800708a:	f043 0201 	orr.w	r2, r3, #1
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	641a      	str	r2, [r3, #64]	; 0x40
 8007092:	e001      	b.n	8007098 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2200      	movs	r2, #0
 800709c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80070a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070a2:	4618      	mov	r0, r3
 80070a4:	3710      	adds	r7, #16
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
	...

080070ac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b086      	sub	sp, #24
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80070b8:	2300      	movs	r3, #0
 80070ba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d101      	bne.n	80070ca <HAL_ADC_Start_DMA+0x1e>
 80070c6:	2302      	movs	r3, #2
 80070c8:	e0e9      	b.n	800729e <HAL_ADC_Start_DMA+0x1f2>
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2201      	movs	r2, #1
 80070ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	689b      	ldr	r3, [r3, #8]
 80070d8:	f003 0301 	and.w	r3, r3, #1
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d018      	beq.n	8007112 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	689a      	ldr	r2, [r3, #8]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f042 0201 	orr.w	r2, r2, #1
 80070ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80070f0:	4b6d      	ldr	r3, [pc, #436]	; (80072a8 <HAL_ADC_Start_DMA+0x1fc>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a6d      	ldr	r2, [pc, #436]	; (80072ac <HAL_ADC_Start_DMA+0x200>)
 80070f6:	fba2 2303 	umull	r2, r3, r2, r3
 80070fa:	0c9a      	lsrs	r2, r3, #18
 80070fc:	4613      	mov	r3, r2
 80070fe:	005b      	lsls	r3, r3, #1
 8007100:	4413      	add	r3, r2
 8007102:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8007104:	e002      	b.n	800710c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	3b01      	subs	r3, #1
 800710a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1f9      	bne.n	8007106 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800711c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007120:	d107      	bne.n	8007132 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	689a      	ldr	r2, [r3, #8]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007130:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f003 0301 	and.w	r3, r3, #1
 800713c:	2b01      	cmp	r3, #1
 800713e:	f040 80a1 	bne.w	8007284 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007146:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800714a:	f023 0301 	bic.w	r3, r3, #1
 800714e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007160:	2b00      	cmp	r3, #0
 8007162:	d007      	beq.n	8007174 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007168:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800716c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007178:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800717c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007180:	d106      	bne.n	8007190 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007186:	f023 0206 	bic.w	r2, r3, #6
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	645a      	str	r2, [r3, #68]	; 0x44
 800718e:	e002      	b.n	8007196 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800719e:	4b44      	ldr	r3, [pc, #272]	; (80072b0 <HAL_ADC_Start_DMA+0x204>)
 80071a0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a6:	4a43      	ldr	r2, [pc, #268]	; (80072b4 <HAL_ADC_Start_DMA+0x208>)
 80071a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ae:	4a42      	ldr	r2, [pc, #264]	; (80072b8 <HAL_ADC_Start_DMA+0x20c>)
 80071b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b6:	4a41      	ldr	r2, [pc, #260]	; (80072bc <HAL_ADC_Start_DMA+0x210>)
 80071b8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80071c2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	685a      	ldr	r2, [r3, #4]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80071d2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	689a      	ldr	r2, [r3, #8]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071e2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	334c      	adds	r3, #76	; 0x4c
 80071ee:	4619      	mov	r1, r3
 80071f0:	68ba      	ldr	r2, [r7, #8]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f000 fd3e 	bl	8007c74 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	f003 031f 	and.w	r3, r3, #31
 8007200:	2b00      	cmp	r3, #0
 8007202:	d12a      	bne.n	800725a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a2d      	ldr	r2, [pc, #180]	; (80072c0 <HAL_ADC_Start_DMA+0x214>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d015      	beq.n	800723a <HAL_ADC_Start_DMA+0x18e>
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a2c      	ldr	r2, [pc, #176]	; (80072c4 <HAL_ADC_Start_DMA+0x218>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d105      	bne.n	8007224 <HAL_ADC_Start_DMA+0x178>
 8007218:	4b25      	ldr	r3, [pc, #148]	; (80072b0 <HAL_ADC_Start_DMA+0x204>)
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	f003 031f 	and.w	r3, r3, #31
 8007220:	2b00      	cmp	r3, #0
 8007222:	d00a      	beq.n	800723a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	4a27      	ldr	r2, [pc, #156]	; (80072c8 <HAL_ADC_Start_DMA+0x21c>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d136      	bne.n	800729c <HAL_ADC_Start_DMA+0x1f0>
 800722e:	4b20      	ldr	r3, [pc, #128]	; (80072b0 <HAL_ADC_Start_DMA+0x204>)
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	f003 0310 	and.w	r3, r3, #16
 8007236:	2b00      	cmp	r3, #0
 8007238:	d130      	bne.n	800729c <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007244:	2b00      	cmp	r3, #0
 8007246:	d129      	bne.n	800729c <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	689a      	ldr	r2, [r3, #8]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007256:	609a      	str	r2, [r3, #8]
 8007258:	e020      	b.n	800729c <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	4a18      	ldr	r2, [pc, #96]	; (80072c0 <HAL_ADC_Start_DMA+0x214>)
 8007260:	4293      	cmp	r3, r2
 8007262:	d11b      	bne.n	800729c <HAL_ADC_Start_DMA+0x1f0>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800726e:	2b00      	cmp	r3, #0
 8007270:	d114      	bne.n	800729c <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	689a      	ldr	r2, [r3, #8]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8007280:	609a      	str	r2, [r3, #8]
 8007282:	e00b      	b.n	800729c <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007288:	f043 0210 	orr.w	r2, r3, #16
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007294:	f043 0201 	orr.w	r2, r3, #1
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800729c:	2300      	movs	r3, #0
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3718      	adds	r7, #24
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}
 80072a6:	bf00      	nop
 80072a8:	2000039c 	.word	0x2000039c
 80072ac:	431bde83 	.word	0x431bde83
 80072b0:	40012300 	.word	0x40012300
 80072b4:	08007731 	.word	0x08007731
 80072b8:	080077eb 	.word	0x080077eb
 80072bc:	08007807 	.word	0x08007807
 80072c0:	40012000 	.word	0x40012000
 80072c4:	40012100 	.word	0x40012100
 80072c8:	40012200 	.word	0x40012200

080072cc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80072d4:	bf00      	nop
 80072d6:	370c      	adds	r7, #12
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80072e0:	b480      	push	{r7}
 80072e2:	b083      	sub	sp, #12
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80072e8:	bf00      	nop
 80072ea:	370c      	adds	r7, #12
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80072fe:	2300      	movs	r3, #0
 8007300:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007308:	2b01      	cmp	r3, #1
 800730a:	d101      	bne.n	8007310 <HAL_ADC_ConfigChannel+0x1c>
 800730c:	2302      	movs	r3, #2
 800730e:	e105      	b.n	800751c <HAL_ADC_ConfigChannel+0x228>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2b09      	cmp	r3, #9
 800731e:	d925      	bls.n	800736c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68d9      	ldr	r1, [r3, #12]
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	b29b      	uxth	r3, r3
 800732c:	461a      	mov	r2, r3
 800732e:	4613      	mov	r3, r2
 8007330:	005b      	lsls	r3, r3, #1
 8007332:	4413      	add	r3, r2
 8007334:	3b1e      	subs	r3, #30
 8007336:	2207      	movs	r2, #7
 8007338:	fa02 f303 	lsl.w	r3, r2, r3
 800733c:	43da      	mvns	r2, r3
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	400a      	ands	r2, r1
 8007344:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	68d9      	ldr	r1, [r3, #12]
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	689a      	ldr	r2, [r3, #8]
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	b29b      	uxth	r3, r3
 8007356:	4618      	mov	r0, r3
 8007358:	4603      	mov	r3, r0
 800735a:	005b      	lsls	r3, r3, #1
 800735c:	4403      	add	r3, r0
 800735e:	3b1e      	subs	r3, #30
 8007360:	409a      	lsls	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	430a      	orrs	r2, r1
 8007368:	60da      	str	r2, [r3, #12]
 800736a:	e022      	b.n	80073b2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	6919      	ldr	r1, [r3, #16]
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	b29b      	uxth	r3, r3
 8007378:	461a      	mov	r2, r3
 800737a:	4613      	mov	r3, r2
 800737c:	005b      	lsls	r3, r3, #1
 800737e:	4413      	add	r3, r2
 8007380:	2207      	movs	r2, #7
 8007382:	fa02 f303 	lsl.w	r3, r2, r3
 8007386:	43da      	mvns	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	400a      	ands	r2, r1
 800738e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	6919      	ldr	r1, [r3, #16]
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	689a      	ldr	r2, [r3, #8]
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	b29b      	uxth	r3, r3
 80073a0:	4618      	mov	r0, r3
 80073a2:	4603      	mov	r3, r0
 80073a4:	005b      	lsls	r3, r3, #1
 80073a6:	4403      	add	r3, r0
 80073a8:	409a      	lsls	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	430a      	orrs	r2, r1
 80073b0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	2b06      	cmp	r3, #6
 80073b8:	d824      	bhi.n	8007404 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	685a      	ldr	r2, [r3, #4]
 80073c4:	4613      	mov	r3, r2
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	4413      	add	r3, r2
 80073ca:	3b05      	subs	r3, #5
 80073cc:	221f      	movs	r2, #31
 80073ce:	fa02 f303 	lsl.w	r3, r2, r3
 80073d2:	43da      	mvns	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	400a      	ands	r2, r1
 80073da:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	b29b      	uxth	r3, r3
 80073e8:	4618      	mov	r0, r3
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	685a      	ldr	r2, [r3, #4]
 80073ee:	4613      	mov	r3, r2
 80073f0:	009b      	lsls	r3, r3, #2
 80073f2:	4413      	add	r3, r2
 80073f4:	3b05      	subs	r3, #5
 80073f6:	fa00 f203 	lsl.w	r2, r0, r3
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	430a      	orrs	r2, r1
 8007400:	635a      	str	r2, [r3, #52]	; 0x34
 8007402:	e04c      	b.n	800749e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	2b0c      	cmp	r3, #12
 800740a:	d824      	bhi.n	8007456 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	685a      	ldr	r2, [r3, #4]
 8007416:	4613      	mov	r3, r2
 8007418:	009b      	lsls	r3, r3, #2
 800741a:	4413      	add	r3, r2
 800741c:	3b23      	subs	r3, #35	; 0x23
 800741e:	221f      	movs	r2, #31
 8007420:	fa02 f303 	lsl.w	r3, r2, r3
 8007424:	43da      	mvns	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	400a      	ands	r2, r1
 800742c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	b29b      	uxth	r3, r3
 800743a:	4618      	mov	r0, r3
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	685a      	ldr	r2, [r3, #4]
 8007440:	4613      	mov	r3, r2
 8007442:	009b      	lsls	r3, r3, #2
 8007444:	4413      	add	r3, r2
 8007446:	3b23      	subs	r3, #35	; 0x23
 8007448:	fa00 f203 	lsl.w	r2, r0, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	430a      	orrs	r2, r1
 8007452:	631a      	str	r2, [r3, #48]	; 0x30
 8007454:	e023      	b.n	800749e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	685a      	ldr	r2, [r3, #4]
 8007460:	4613      	mov	r3, r2
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	4413      	add	r3, r2
 8007466:	3b41      	subs	r3, #65	; 0x41
 8007468:	221f      	movs	r2, #31
 800746a:	fa02 f303 	lsl.w	r3, r2, r3
 800746e:	43da      	mvns	r2, r3
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	400a      	ands	r2, r1
 8007476:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	b29b      	uxth	r3, r3
 8007484:	4618      	mov	r0, r3
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	685a      	ldr	r2, [r3, #4]
 800748a:	4613      	mov	r3, r2
 800748c:	009b      	lsls	r3, r3, #2
 800748e:	4413      	add	r3, r2
 8007490:	3b41      	subs	r3, #65	; 0x41
 8007492:	fa00 f203 	lsl.w	r2, r0, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	430a      	orrs	r2, r1
 800749c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800749e:	4b22      	ldr	r3, [pc, #136]	; (8007528 <HAL_ADC_ConfigChannel+0x234>)
 80074a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a21      	ldr	r2, [pc, #132]	; (800752c <HAL_ADC_ConfigChannel+0x238>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d109      	bne.n	80074c0 <HAL_ADC_ConfigChannel+0x1cc>
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2b12      	cmp	r3, #18
 80074b2:	d105      	bne.n	80074c0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a19      	ldr	r2, [pc, #100]	; (800752c <HAL_ADC_ConfigChannel+0x238>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d123      	bne.n	8007512 <HAL_ADC_ConfigChannel+0x21e>
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2b10      	cmp	r3, #16
 80074d0:	d003      	beq.n	80074da <HAL_ADC_ConfigChannel+0x1e6>
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	2b11      	cmp	r3, #17
 80074d8:	d11b      	bne.n	8007512 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2b10      	cmp	r3, #16
 80074ec:	d111      	bne.n	8007512 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80074ee:	4b10      	ldr	r3, [pc, #64]	; (8007530 <HAL_ADC_ConfigChannel+0x23c>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a10      	ldr	r2, [pc, #64]	; (8007534 <HAL_ADC_ConfigChannel+0x240>)
 80074f4:	fba2 2303 	umull	r2, r3, r2, r3
 80074f8:	0c9a      	lsrs	r2, r3, #18
 80074fa:	4613      	mov	r3, r2
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	4413      	add	r3, r2
 8007500:	005b      	lsls	r3, r3, #1
 8007502:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8007504:	e002      	b.n	800750c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8007506:	68bb      	ldr	r3, [r7, #8]
 8007508:	3b01      	subs	r3, #1
 800750a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1f9      	bne.n	8007506 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2200      	movs	r2, #0
 8007516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800751a:	2300      	movs	r3, #0
}
 800751c:	4618      	mov	r0, r3
 800751e:	3714      	adds	r7, #20
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr
 8007528:	40012300 	.word	0x40012300
 800752c:	40012000 	.word	0x40012000
 8007530:	2000039c 	.word	0x2000039c
 8007534:	431bde83 	.word	0x431bde83

08007538 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8007538:	b480      	push	{r7}
 800753a:	b085      	sub	sp, #20
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007540:	4b79      	ldr	r3, [pc, #484]	; (8007728 <ADC_Init+0x1f0>)
 8007542:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	685b      	ldr	r3, [r3, #4]
 8007548:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	431a      	orrs	r2, r3
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	685a      	ldr	r2, [r3, #4]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800756c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	6859      	ldr	r1, [r3, #4]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	691b      	ldr	r3, [r3, #16]
 8007578:	021a      	lsls	r2, r3, #8
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	430a      	orrs	r2, r1
 8007580:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	685a      	ldr	r2, [r3, #4]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007590:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	6859      	ldr	r1, [r3, #4]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	689a      	ldr	r2, [r3, #8]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	430a      	orrs	r2, r1
 80075a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	689a      	ldr	r2, [r3, #8]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80075b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	6899      	ldr	r1, [r3, #8]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	68da      	ldr	r2, [r3, #12]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	430a      	orrs	r2, r1
 80075c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ca:	4a58      	ldr	r2, [pc, #352]	; (800772c <ADC_Init+0x1f4>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d022      	beq.n	8007616 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	689a      	ldr	r2, [r3, #8]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80075de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	6899      	ldr	r1, [r3, #8]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	430a      	orrs	r2, r1
 80075f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	689a      	ldr	r2, [r3, #8]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007600:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	6899      	ldr	r1, [r3, #8]
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	430a      	orrs	r2, r1
 8007612:	609a      	str	r2, [r3, #8]
 8007614:	e00f      	b.n	8007636 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	689a      	ldr	r2, [r3, #8]
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007624:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	689a      	ldr	r2, [r3, #8]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007634:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	689a      	ldr	r2, [r3, #8]
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	f022 0202 	bic.w	r2, r2, #2
 8007644:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	6899      	ldr	r1, [r3, #8]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	7e1b      	ldrb	r3, [r3, #24]
 8007650:	005a      	lsls	r2, r3, #1
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	430a      	orrs	r2, r1
 8007658:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d01b      	beq.n	800769c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	685a      	ldr	r2, [r3, #4]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007672:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	685a      	ldr	r2, [r3, #4]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007682:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	6859      	ldr	r1, [r3, #4]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800768e:	3b01      	subs	r3, #1
 8007690:	035a      	lsls	r2, r3, #13
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	430a      	orrs	r2, r1
 8007698:	605a      	str	r2, [r3, #4]
 800769a:	e007      	b.n	80076ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	685a      	ldr	r2, [r3, #4]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80076aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80076ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	69db      	ldr	r3, [r3, #28]
 80076c6:	3b01      	subs	r3, #1
 80076c8:	051a      	lsls	r2, r3, #20
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	430a      	orrs	r2, r1
 80076d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	689a      	ldr	r2, [r3, #8]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80076e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	6899      	ldr	r1, [r3, #8]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80076ee:	025a      	lsls	r2, r3, #9
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	430a      	orrs	r2, r1
 80076f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	689a      	ldr	r2, [r3, #8]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007706:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	6899      	ldr	r1, [r3, #8]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	695b      	ldr	r3, [r3, #20]
 8007712:	029a      	lsls	r2, r3, #10
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	430a      	orrs	r2, r1
 800771a:	609a      	str	r2, [r3, #8]
}
 800771c:	bf00      	nop
 800771e:	3714      	adds	r7, #20
 8007720:	46bd      	mov	sp, r7
 8007722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007726:	4770      	bx	lr
 8007728:	40012300 	.word	0x40012300
 800772c:	0f000001 	.word	0x0f000001

08007730 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800773c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007742:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007746:	2b00      	cmp	r3, #0
 8007748:	d13c      	bne.n	80077c4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800774e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	689b      	ldr	r3, [r3, #8]
 800775c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007760:	2b00      	cmp	r3, #0
 8007762:	d12b      	bne.n	80077bc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007768:	2b00      	cmp	r3, #0
 800776a:	d127      	bne.n	80077bc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007772:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007776:	2b00      	cmp	r3, #0
 8007778:	d006      	beq.n	8007788 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8007784:	2b00      	cmp	r3, #0
 8007786:	d119      	bne.n	80077bc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	685a      	ldr	r2, [r3, #4]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f022 0220 	bic.w	r2, r2, #32
 8007796:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d105      	bne.n	80077bc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b4:	f043 0201 	orr.w	r2, r3, #1
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80077bc:	68f8      	ldr	r0, [r7, #12]
 80077be:	f7f9 fc67 	bl	8001090 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80077c2:	e00e      	b.n	80077e2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c8:	f003 0310 	and.w	r3, r3, #16
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d003      	beq.n	80077d8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80077d0:	68f8      	ldr	r0, [r7, #12]
 80077d2:	f7ff fd85 	bl	80072e0 <HAL_ADC_ErrorCallback>
}
 80077d6:	e004      	b.n	80077e2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	4798      	blx	r3
}
 80077e2:	bf00      	nop
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80077ea:	b580      	push	{r7, lr}
 80077ec:	b084      	sub	sp, #16
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f7ff fd67 	bl	80072cc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80077fe:	bf00      	nop
 8007800:	3710      	adds	r7, #16
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b084      	sub	sp, #16
 800780a:	af00      	add	r7, sp, #0
 800780c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007812:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2240      	movs	r2, #64	; 0x40
 8007818:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800781e:	f043 0204 	orr.w	r2, r3, #4
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f7ff fd5a 	bl	80072e0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800782c:	bf00      	nop
 800782e:	3710      	adds	r7, #16
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}

08007834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007834:	b480      	push	{r7}
 8007836:	b085      	sub	sp, #20
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	f003 0307 	and.w	r3, r3, #7
 8007842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007844:	4b0c      	ldr	r3, [pc, #48]	; (8007878 <__NVIC_SetPriorityGrouping+0x44>)
 8007846:	68db      	ldr	r3, [r3, #12]
 8007848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800784a:	68ba      	ldr	r2, [r7, #8]
 800784c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007850:	4013      	ands	r3, r2
 8007852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800785c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007866:	4a04      	ldr	r2, [pc, #16]	; (8007878 <__NVIC_SetPriorityGrouping+0x44>)
 8007868:	68bb      	ldr	r3, [r7, #8]
 800786a:	60d3      	str	r3, [r2, #12]
}
 800786c:	bf00      	nop
 800786e:	3714      	adds	r7, #20
 8007870:	46bd      	mov	sp, r7
 8007872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007876:	4770      	bx	lr
 8007878:	e000ed00 	.word	0xe000ed00

0800787c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800787c:	b480      	push	{r7}
 800787e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007880:	4b04      	ldr	r3, [pc, #16]	; (8007894 <__NVIC_GetPriorityGrouping+0x18>)
 8007882:	68db      	ldr	r3, [r3, #12]
 8007884:	0a1b      	lsrs	r3, r3, #8
 8007886:	f003 0307 	and.w	r3, r3, #7
}
 800788a:	4618      	mov	r0, r3
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr
 8007894:	e000ed00 	.word	0xe000ed00

08007898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	4603      	mov	r3, r0
 80078a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80078a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	db0b      	blt.n	80078c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80078aa:	79fb      	ldrb	r3, [r7, #7]
 80078ac:	f003 021f 	and.w	r2, r3, #31
 80078b0:	4907      	ldr	r1, [pc, #28]	; (80078d0 <__NVIC_EnableIRQ+0x38>)
 80078b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078b6:	095b      	lsrs	r3, r3, #5
 80078b8:	2001      	movs	r0, #1
 80078ba:	fa00 f202 	lsl.w	r2, r0, r2
 80078be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80078c2:	bf00      	nop
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	e000e100 	.word	0xe000e100

080078d4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b083      	sub	sp, #12
 80078d8:	af00      	add	r7, sp, #0
 80078da:	4603      	mov	r3, r0
 80078dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80078de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	db12      	blt.n	800790c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80078e6:	79fb      	ldrb	r3, [r7, #7]
 80078e8:	f003 021f 	and.w	r2, r3, #31
 80078ec:	490a      	ldr	r1, [pc, #40]	; (8007918 <__NVIC_DisableIRQ+0x44>)
 80078ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078f2:	095b      	lsrs	r3, r3, #5
 80078f4:	2001      	movs	r0, #1
 80078f6:	fa00 f202 	lsl.w	r2, r0, r2
 80078fa:	3320      	adds	r3, #32
 80078fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007900:	f3bf 8f4f 	dsb	sy
}
 8007904:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007906:	f3bf 8f6f 	isb	sy
}
 800790a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr
 8007918:	e000e100 	.word	0xe000e100

0800791c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	4603      	mov	r3, r0
 8007924:	6039      	str	r1, [r7, #0]
 8007926:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007928:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800792c:	2b00      	cmp	r3, #0
 800792e:	db0a      	blt.n	8007946 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	b2da      	uxtb	r2, r3
 8007934:	490c      	ldr	r1, [pc, #48]	; (8007968 <__NVIC_SetPriority+0x4c>)
 8007936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800793a:	0112      	lsls	r2, r2, #4
 800793c:	b2d2      	uxtb	r2, r2
 800793e:	440b      	add	r3, r1
 8007940:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007944:	e00a      	b.n	800795c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	b2da      	uxtb	r2, r3
 800794a:	4908      	ldr	r1, [pc, #32]	; (800796c <__NVIC_SetPriority+0x50>)
 800794c:	79fb      	ldrb	r3, [r7, #7]
 800794e:	f003 030f 	and.w	r3, r3, #15
 8007952:	3b04      	subs	r3, #4
 8007954:	0112      	lsls	r2, r2, #4
 8007956:	b2d2      	uxtb	r2, r2
 8007958:	440b      	add	r3, r1
 800795a:	761a      	strb	r2, [r3, #24]
}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr
 8007968:	e000e100 	.word	0xe000e100
 800796c:	e000ed00 	.word	0xe000ed00

08007970 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007970:	b480      	push	{r7}
 8007972:	b089      	sub	sp, #36	; 0x24
 8007974:	af00      	add	r7, sp, #0
 8007976:	60f8      	str	r0, [r7, #12]
 8007978:	60b9      	str	r1, [r7, #8]
 800797a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	f003 0307 	and.w	r3, r3, #7
 8007982:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	f1c3 0307 	rsb	r3, r3, #7
 800798a:	2b04      	cmp	r3, #4
 800798c:	bf28      	it	cs
 800798e:	2304      	movcs	r3, #4
 8007990:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	3304      	adds	r3, #4
 8007996:	2b06      	cmp	r3, #6
 8007998:	d902      	bls.n	80079a0 <NVIC_EncodePriority+0x30>
 800799a:	69fb      	ldr	r3, [r7, #28]
 800799c:	3b03      	subs	r3, #3
 800799e:	e000      	b.n	80079a2 <NVIC_EncodePriority+0x32>
 80079a0:	2300      	movs	r3, #0
 80079a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079a4:	f04f 32ff 	mov.w	r2, #4294967295
 80079a8:	69bb      	ldr	r3, [r7, #24]
 80079aa:	fa02 f303 	lsl.w	r3, r2, r3
 80079ae:	43da      	mvns	r2, r3
 80079b0:	68bb      	ldr	r3, [r7, #8]
 80079b2:	401a      	ands	r2, r3
 80079b4:	697b      	ldr	r3, [r7, #20]
 80079b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80079b8:	f04f 31ff 	mov.w	r1, #4294967295
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	fa01 f303 	lsl.w	r3, r1, r3
 80079c2:	43d9      	mvns	r1, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079c8:	4313      	orrs	r3, r2
         );
}
 80079ca:	4618      	mov	r0, r3
 80079cc:	3724      	adds	r7, #36	; 0x24
 80079ce:	46bd      	mov	sp, r7
 80079d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d4:	4770      	bx	lr

080079d6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b082      	sub	sp, #8
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f7ff ff28 	bl	8007834 <__NVIC_SetPriorityGrouping>
}
 80079e4:	bf00      	nop
 80079e6:	3708      	adds	r7, #8
 80079e8:	46bd      	mov	sp, r7
 80079ea:	bd80      	pop	{r7, pc}

080079ec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80079ec:	b580      	push	{r7, lr}
 80079ee:	b086      	sub	sp, #24
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	4603      	mov	r3, r0
 80079f4:	60b9      	str	r1, [r7, #8]
 80079f6:	607a      	str	r2, [r7, #4]
 80079f8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80079fa:	2300      	movs	r3, #0
 80079fc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80079fe:	f7ff ff3d 	bl	800787c <__NVIC_GetPriorityGrouping>
 8007a02:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007a04:	687a      	ldr	r2, [r7, #4]
 8007a06:	68b9      	ldr	r1, [r7, #8]
 8007a08:	6978      	ldr	r0, [r7, #20]
 8007a0a:	f7ff ffb1 	bl	8007970 <NVIC_EncodePriority>
 8007a0e:	4602      	mov	r2, r0
 8007a10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a14:	4611      	mov	r1, r2
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7ff ff80 	bl	800791c <__NVIC_SetPriority>
}
 8007a1c:	bf00      	nop
 8007a1e:	3718      	adds	r7, #24
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7ff ff30 	bl	8007898 <__NVIC_EnableIRQ>
}
 8007a38:	bf00      	nop
 8007a3a:	3708      	adds	r7, #8
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	4603      	mov	r3, r0
 8007a48:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a4e:	4618      	mov	r0, r3
 8007a50:	f7ff ff40 	bl	80078d4 <__NVIC_DisableIRQ>
}
 8007a54:	bf00      	nop
 8007a56:	3708      	adds	r7, #8
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b086      	sub	sp, #24
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007a64:	2300      	movs	r3, #0
 8007a66:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007a68:	f7ff faac 	bl	8006fc4 <HAL_GetTick>
 8007a6c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d101      	bne.n	8007a78 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007a74:	2301      	movs	r3, #1
 8007a76:	e099      	b.n	8007bac <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2202      	movs	r2, #2
 8007a7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f022 0201 	bic.w	r2, r2, #1
 8007a96:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007a98:	e00f      	b.n	8007aba <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007a9a:	f7ff fa93 	bl	8006fc4 <HAL_GetTick>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	693b      	ldr	r3, [r7, #16]
 8007aa2:	1ad3      	subs	r3, r2, r3
 8007aa4:	2b05      	cmp	r3, #5
 8007aa6:	d908      	bls.n	8007aba <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2220      	movs	r2, #32
 8007aac:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2203      	movs	r2, #3
 8007ab2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e078      	b.n	8007bac <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0301 	and.w	r3, r3, #1
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1e8      	bne.n	8007a9a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007ad0:	697a      	ldr	r2, [r7, #20]
 8007ad2:	4b38      	ldr	r3, [pc, #224]	; (8007bb4 <HAL_DMA_Init+0x158>)
 8007ad4:	4013      	ands	r3, r2
 8007ad6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	685a      	ldr	r2, [r3, #4]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007ae6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007af2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	699b      	ldr	r3, [r3, #24]
 8007af8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007afe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6a1b      	ldr	r3, [r3, #32]
 8007b04:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b06:	697a      	ldr	r2, [r7, #20]
 8007b08:	4313      	orrs	r3, r2
 8007b0a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b10:	2b04      	cmp	r3, #4
 8007b12:	d107      	bne.n	8007b24 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	697a      	ldr	r2, [r7, #20]
 8007b20:	4313      	orrs	r3, r2
 8007b22:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	697a      	ldr	r2, [r7, #20]
 8007b2a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	695b      	ldr	r3, [r3, #20]
 8007b32:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007b34:	697b      	ldr	r3, [r7, #20]
 8007b36:	f023 0307 	bic.w	r3, r3, #7
 8007b3a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b40:	697a      	ldr	r2, [r7, #20]
 8007b42:	4313      	orrs	r3, r2
 8007b44:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4a:	2b04      	cmp	r3, #4
 8007b4c:	d117      	bne.n	8007b7e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b52:	697a      	ldr	r2, [r7, #20]
 8007b54:	4313      	orrs	r3, r2
 8007b56:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00e      	beq.n	8007b7e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 fb5f 	bl	8008224 <DMA_CheckFifoParam>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d008      	beq.n	8007b7e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2240      	movs	r2, #64	; 0x40
 8007b70:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	2201      	movs	r2, #1
 8007b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	e016      	b.n	8007bac <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	697a      	ldr	r2, [r7, #20]
 8007b84:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007b86:	6878      	ldr	r0, [r7, #4]
 8007b88:	f000 fb16 	bl	80081b8 <DMA_CalcBaseAndBitshift>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b94:	223f      	movs	r2, #63	; 0x3f
 8007b96:	409a      	lsls	r2, r3
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007baa:	2300      	movs	r3, #0
}
 8007bac:	4618      	mov	r0, r3
 8007bae:	3718      	adds	r7, #24
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	bd80      	pop	{r7, pc}
 8007bb4:	f010803f 	.word	0xf010803f

08007bb8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8007bb8:	b580      	push	{r7, lr}
 8007bba:	b084      	sub	sp, #16
 8007bbc:	af00      	add	r7, sp, #0
 8007bbe:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d101      	bne.n	8007bca <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	e050      	b.n	8007c6c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b02      	cmp	r3, #2
 8007bd4:	d101      	bne.n	8007bda <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8007bd6:	2302      	movs	r3, #2
 8007bd8:	e048      	b.n	8007c6c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	681a      	ldr	r2, [r3, #0]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f022 0201 	bic.w	r2, r2, #1
 8007be8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	2200      	movs	r2, #0
 8007bf8:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2200      	movs	r2, #0
 8007c00:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2200      	movs	r2, #0
 8007c08:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2200      	movs	r2, #0
 8007c10:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	2221      	movs	r2, #33	; 0x21
 8007c18:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 facc 	bl	80081b8 <DMA_CalcBaseAndBitshift>
 8007c20:	4603      	mov	r3, r0
 8007c22:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2200      	movs	r2, #0
 8007c28:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2200      	movs	r2, #0
 8007c46:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c4c:	223f      	movs	r2, #63	; 0x3f
 8007c4e:	409a      	lsls	r2, r3
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007c6a:	2300      	movs	r3, #0
}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	3710      	adds	r7, #16
 8007c70:	46bd      	mov	sp, r7
 8007c72:	bd80      	pop	{r7, pc}

08007c74 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b086      	sub	sp, #24
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	607a      	str	r2, [r7, #4]
 8007c80:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c82:	2300      	movs	r3, #0
 8007c84:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c8a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d101      	bne.n	8007c9a <HAL_DMA_Start_IT+0x26>
 8007c96:	2302      	movs	r3, #2
 8007c98:	e040      	b.n	8007d1c <HAL_DMA_Start_IT+0xa8>
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d12f      	bne.n	8007d0e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2202      	movs	r2, #2
 8007cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2200      	movs	r2, #0
 8007cba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007cbc:	683b      	ldr	r3, [r7, #0]
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	68b9      	ldr	r1, [r7, #8]
 8007cc2:	68f8      	ldr	r0, [r7, #12]
 8007cc4:	f000 fa4a 	bl	800815c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ccc:	223f      	movs	r2, #63	; 0x3f
 8007cce:	409a      	lsls	r2, r3
 8007cd0:	693b      	ldr	r3, [r7, #16]
 8007cd2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f042 0216 	orr.w	r2, r2, #22
 8007ce2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d007      	beq.n	8007cfc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f042 0208 	orr.w	r2, r2, #8
 8007cfa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	681a      	ldr	r2, [r3, #0]
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f042 0201 	orr.w	r2, r2, #1
 8007d0a:	601a      	str	r2, [r3, #0]
 8007d0c:	e005      	b.n	8007d1a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007d16:	2302      	movs	r3, #2
 8007d18:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007d1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3718      	adds	r7, #24
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b084      	sub	sp, #16
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d30:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007d32:	f7ff f947 	bl	8006fc4 <HAL_GetTick>
 8007d36:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	2b02      	cmp	r3, #2
 8007d42:	d008      	beq.n	8007d56 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2280      	movs	r2, #128	; 0x80
 8007d48:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e052      	b.n	8007dfc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f022 0216 	bic.w	r2, r2, #22
 8007d64:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	695a      	ldr	r2, [r3, #20]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007d74:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d103      	bne.n	8007d86 <HAL_DMA_Abort+0x62>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d007      	beq.n	8007d96 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f022 0208 	bic.w	r2, r2, #8
 8007d94:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	f022 0201 	bic.w	r2, r2, #1
 8007da4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007da6:	e013      	b.n	8007dd0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007da8:	f7ff f90c 	bl	8006fc4 <HAL_GetTick>
 8007dac:	4602      	mov	r2, r0
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	2b05      	cmp	r3, #5
 8007db4:	d90c      	bls.n	8007dd0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2220      	movs	r2, #32
 8007dba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2203      	movs	r2, #3
 8007dc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007dcc:	2303      	movs	r3, #3
 8007dce:	e015      	b.n	8007dfc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 0301 	and.w	r3, r3, #1
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1e4      	bne.n	8007da8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007de2:	223f      	movs	r2, #63	; 0x3f
 8007de4:	409a      	lsls	r2, r3
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2201      	movs	r2, #1
 8007dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2200      	movs	r2, #0
 8007df6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007dfa:	2300      	movs	r3, #0
}
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	3710      	adds	r7, #16
 8007e00:	46bd      	mov	sp, r7
 8007e02:	bd80      	pop	{r7, pc}

08007e04 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e12:	b2db      	uxtb	r3, r3
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d004      	beq.n	8007e22 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2280      	movs	r2, #128	; 0x80
 8007e1c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e00c      	b.n	8007e3c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2205      	movs	r2, #5
 8007e26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f022 0201 	bic.w	r2, r2, #1
 8007e38:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007e3a:	2300      	movs	r3, #0
}
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b086      	sub	sp, #24
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007e50:	2300      	movs	r3, #0
 8007e52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007e54:	4b92      	ldr	r3, [pc, #584]	; (80080a0 <HAL_DMA_IRQHandler+0x258>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a92      	ldr	r2, [pc, #584]	; (80080a4 <HAL_DMA_IRQHandler+0x25c>)
 8007e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8007e5e:	0a9b      	lsrs	r3, r3, #10
 8007e60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e72:	2208      	movs	r2, #8
 8007e74:	409a      	lsls	r2, r3
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	4013      	ands	r3, r2
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d01a      	beq.n	8007eb4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f003 0304 	and.w	r3, r3, #4
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d013      	beq.n	8007eb4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	f022 0204 	bic.w	r2, r2, #4
 8007e9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ea0:	2208      	movs	r2, #8
 8007ea2:	409a      	lsls	r2, r3
 8007ea4:	693b      	ldr	r3, [r7, #16]
 8007ea6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007eac:	f043 0201 	orr.w	r2, r3, #1
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eb8:	2201      	movs	r2, #1
 8007eba:	409a      	lsls	r2, r3
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	4013      	ands	r3, r2
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d012      	beq.n	8007eea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	695b      	ldr	r3, [r3, #20]
 8007eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00b      	beq.n	8007eea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	409a      	lsls	r2, r3
 8007eda:	693b      	ldr	r3, [r7, #16]
 8007edc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ee2:	f043 0202 	orr.w	r2, r3, #2
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007eee:	2204      	movs	r2, #4
 8007ef0:	409a      	lsls	r2, r3
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	4013      	ands	r3, r2
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d012      	beq.n	8007f20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f003 0302 	and.w	r3, r3, #2
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d00b      	beq.n	8007f20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f0c:	2204      	movs	r2, #4
 8007f0e:	409a      	lsls	r2, r3
 8007f10:	693b      	ldr	r3, [r7, #16]
 8007f12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f18:	f043 0204 	orr.w	r2, r3, #4
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f24:	2210      	movs	r2, #16
 8007f26:	409a      	lsls	r2, r3
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	4013      	ands	r3, r2
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d043      	beq.n	8007fb8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f003 0308 	and.w	r3, r3, #8
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d03c      	beq.n	8007fb8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f42:	2210      	movs	r2, #16
 8007f44:	409a      	lsls	r2, r3
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d018      	beq.n	8007f8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d108      	bne.n	8007f78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d024      	beq.n	8007fb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	4798      	blx	r3
 8007f76:	e01f      	b.n	8007fb8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d01b      	beq.n	8007fb8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	4798      	blx	r3
 8007f88:	e016      	b.n	8007fb8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d107      	bne.n	8007fa8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f022 0208 	bic.w	r2, r2, #8
 8007fa6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d003      	beq.n	8007fb8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fbc:	2220      	movs	r2, #32
 8007fbe:	409a      	lsls	r2, r3
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	4013      	ands	r3, r2
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	f000 808e 	beq.w	80080e6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 0310 	and.w	r3, r3, #16
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f000 8086 	beq.w	80080e6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fde:	2220      	movs	r2, #32
 8007fe0:	409a      	lsls	r2, r3
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	2b05      	cmp	r3, #5
 8007ff0:	d136      	bne.n	8008060 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f022 0216 	bic.w	r2, r2, #22
 8008000:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	695a      	ldr	r2, [r3, #20]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008010:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008016:	2b00      	cmp	r3, #0
 8008018:	d103      	bne.n	8008022 <HAL_DMA_IRQHandler+0x1da>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800801e:	2b00      	cmp	r3, #0
 8008020:	d007      	beq.n	8008032 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	681a      	ldr	r2, [r3, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f022 0208 	bic.w	r2, r2, #8
 8008030:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008036:	223f      	movs	r2, #63	; 0x3f
 8008038:	409a      	lsls	r2, r3
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008052:	2b00      	cmp	r3, #0
 8008054:	d07d      	beq.n	8008152 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	4798      	blx	r3
        }
        return;
 800805e:	e078      	b.n	8008152 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800806a:	2b00      	cmp	r3, #0
 800806c:	d01c      	beq.n	80080a8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008078:	2b00      	cmp	r3, #0
 800807a:	d108      	bne.n	800808e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008080:	2b00      	cmp	r3, #0
 8008082:	d030      	beq.n	80080e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	4798      	blx	r3
 800808c:	e02b      	b.n	80080e6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008092:	2b00      	cmp	r3, #0
 8008094:	d027      	beq.n	80080e6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	4798      	blx	r3
 800809e:	e022      	b.n	80080e6 <HAL_DMA_IRQHandler+0x29e>
 80080a0:	2000039c 	.word	0x2000039c
 80080a4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d10f      	bne.n	80080d6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	f022 0210 	bic.w	r2, r2, #16
 80080c4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2201      	movs	r2, #1
 80080ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2200      	movs	r2, #0
 80080d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d003      	beq.n	80080e6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d032      	beq.n	8008154 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080f2:	f003 0301 	and.w	r3, r3, #1
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d022      	beq.n	8008140 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2205      	movs	r2, #5
 80080fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f022 0201 	bic.w	r2, r2, #1
 8008110:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	3301      	adds	r3, #1
 8008116:	60bb      	str	r3, [r7, #8]
 8008118:	697a      	ldr	r2, [r7, #20]
 800811a:	429a      	cmp	r2, r3
 800811c:	d307      	bcc.n	800812e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f003 0301 	and.w	r3, r3, #1
 8008128:	2b00      	cmp	r3, #0
 800812a:	d1f2      	bne.n	8008112 <HAL_DMA_IRQHandler+0x2ca>
 800812c:	e000      	b.n	8008130 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800812e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2201      	movs	r2, #1
 8008134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008144:	2b00      	cmp	r3, #0
 8008146:	d005      	beq.n	8008154 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	4798      	blx	r3
 8008150:	e000      	b.n	8008154 <HAL_DMA_IRQHandler+0x30c>
        return;
 8008152:	bf00      	nop
    }
  }
}
 8008154:	3718      	adds	r7, #24
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop

0800815c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800815c:	b480      	push	{r7}
 800815e:	b085      	sub	sp, #20
 8008160:	af00      	add	r7, sp, #0
 8008162:	60f8      	str	r0, [r7, #12]
 8008164:	60b9      	str	r1, [r7, #8]
 8008166:	607a      	str	r2, [r7, #4]
 8008168:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008178:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	683a      	ldr	r2, [r7, #0]
 8008180:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	2b40      	cmp	r3, #64	; 0x40
 8008188:	d108      	bne.n	800819c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	68ba      	ldr	r2, [r7, #8]
 8008198:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800819a:	e007      	b.n	80081ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	68ba      	ldr	r2, [r7, #8]
 80081a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	687a      	ldr	r2, [r7, #4]
 80081aa:	60da      	str	r2, [r3, #12]
}
 80081ac:	bf00      	nop
 80081ae:	3714      	adds	r7, #20
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b085      	sub	sp, #20
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	3b10      	subs	r3, #16
 80081c8:	4a14      	ldr	r2, [pc, #80]	; (800821c <DMA_CalcBaseAndBitshift+0x64>)
 80081ca:	fba2 2303 	umull	r2, r3, r2, r3
 80081ce:	091b      	lsrs	r3, r3, #4
 80081d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80081d2:	4a13      	ldr	r2, [pc, #76]	; (8008220 <DMA_CalcBaseAndBitshift+0x68>)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	4413      	add	r3, r2
 80081d8:	781b      	ldrb	r3, [r3, #0]
 80081da:	461a      	mov	r2, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2b03      	cmp	r3, #3
 80081e4:	d909      	bls.n	80081fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80081ee:	f023 0303 	bic.w	r3, r3, #3
 80081f2:	1d1a      	adds	r2, r3, #4
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	659a      	str	r2, [r3, #88]	; 0x58
 80081f8:	e007      	b.n	800820a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008202:	f023 0303 	bic.w	r3, r3, #3
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800820e:	4618      	mov	r0, r3
 8008210:	3714      	adds	r7, #20
 8008212:	46bd      	mov	sp, r7
 8008214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008218:	4770      	bx	lr
 800821a:	bf00      	nop
 800821c:	aaaaaaab 	.word	0xaaaaaaab
 8008220:	08026e04 	.word	0x08026e04

08008224 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008224:	b480      	push	{r7}
 8008226:	b085      	sub	sp, #20
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800822c:	2300      	movs	r3, #0
 800822e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008234:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	699b      	ldr	r3, [r3, #24]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d11f      	bne.n	800827e <DMA_CheckFifoParam+0x5a>
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	2b03      	cmp	r3, #3
 8008242:	d856      	bhi.n	80082f2 <DMA_CheckFifoParam+0xce>
 8008244:	a201      	add	r2, pc, #4	; (adr r2, 800824c <DMA_CheckFifoParam+0x28>)
 8008246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800824a:	bf00      	nop
 800824c:	0800825d 	.word	0x0800825d
 8008250:	0800826f 	.word	0x0800826f
 8008254:	0800825d 	.word	0x0800825d
 8008258:	080082f3 	.word	0x080082f3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008260:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008264:	2b00      	cmp	r3, #0
 8008266:	d046      	beq.n	80082f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008268:	2301      	movs	r3, #1
 800826a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800826c:	e043      	b.n	80082f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008272:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008276:	d140      	bne.n	80082fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008278:	2301      	movs	r3, #1
 800827a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800827c:	e03d      	b.n	80082fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	699b      	ldr	r3, [r3, #24]
 8008282:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008286:	d121      	bne.n	80082cc <DMA_CheckFifoParam+0xa8>
 8008288:	68bb      	ldr	r3, [r7, #8]
 800828a:	2b03      	cmp	r3, #3
 800828c:	d837      	bhi.n	80082fe <DMA_CheckFifoParam+0xda>
 800828e:	a201      	add	r2, pc, #4	; (adr r2, 8008294 <DMA_CheckFifoParam+0x70>)
 8008290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008294:	080082a5 	.word	0x080082a5
 8008298:	080082ab 	.word	0x080082ab
 800829c:	080082a5 	.word	0x080082a5
 80082a0:	080082bd 	.word	0x080082bd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80082a4:	2301      	movs	r3, #1
 80082a6:	73fb      	strb	r3, [r7, #15]
      break;
 80082a8:	e030      	b.n	800830c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d025      	beq.n	8008302 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80082ba:	e022      	b.n	8008302 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80082c4:	d11f      	bne.n	8008306 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80082c6:	2301      	movs	r3, #1
 80082c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80082ca:	e01c      	b.n	8008306 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	2b02      	cmp	r3, #2
 80082d0:	d903      	bls.n	80082da <DMA_CheckFifoParam+0xb6>
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	2b03      	cmp	r3, #3
 80082d6:	d003      	beq.n	80082e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80082d8:	e018      	b.n	800830c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	73fb      	strb	r3, [r7, #15]
      break;
 80082de:	e015      	b.n	800830c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00e      	beq.n	800830a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80082ec:	2301      	movs	r3, #1
 80082ee:	73fb      	strb	r3, [r7, #15]
      break;
 80082f0:	e00b      	b.n	800830a <DMA_CheckFifoParam+0xe6>
      break;
 80082f2:	bf00      	nop
 80082f4:	e00a      	b.n	800830c <DMA_CheckFifoParam+0xe8>
      break;
 80082f6:	bf00      	nop
 80082f8:	e008      	b.n	800830c <DMA_CheckFifoParam+0xe8>
      break;
 80082fa:	bf00      	nop
 80082fc:	e006      	b.n	800830c <DMA_CheckFifoParam+0xe8>
      break;
 80082fe:	bf00      	nop
 8008300:	e004      	b.n	800830c <DMA_CheckFifoParam+0xe8>
      break;
 8008302:	bf00      	nop
 8008304:	e002      	b.n	800830c <DMA_CheckFifoParam+0xe8>
      break;   
 8008306:	bf00      	nop
 8008308:	e000      	b.n	800830c <DMA_CheckFifoParam+0xe8>
      break;
 800830a:	bf00      	nop
    }
  } 
  
  return status; 
 800830c:	7bfb      	ldrb	r3, [r7, #15]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3714      	adds	r7, #20
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop

0800831c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b088      	sub	sp, #32
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8008324:	2300      	movs	r3, #0
 8008326:	61fb      	str	r3, [r7, #28]
 8008328:	2300      	movs	r3, #0
 800832a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 800832c:	4baa      	ldr	r3, [pc, #680]	; (80085d8 <HAL_ETH_Init+0x2bc>)
 800832e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8008330:	2300      	movs	r3, #0
 8008332:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8008334:	2300      	movs	r3, #0
 8008336:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d101      	bne.n	8008342 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	e183      	b.n	800864a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008348:	b2db      	uxtb	r3, r3
 800834a:	2b00      	cmp	r3, #0
 800834c:	d106      	bne.n	800835c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2200      	movs	r2, #0
 8008352:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f004 ff8a 	bl	800d270 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800835c:	2300      	movs	r3, #0
 800835e:	60bb      	str	r3, [r7, #8]
 8008360:	4b9e      	ldr	r3, [pc, #632]	; (80085dc <HAL_ETH_Init+0x2c0>)
 8008362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008364:	4a9d      	ldr	r2, [pc, #628]	; (80085dc <HAL_ETH_Init+0x2c0>)
 8008366:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800836a:	6453      	str	r3, [r2, #68]	; 0x44
 800836c:	4b9b      	ldr	r3, [pc, #620]	; (80085dc <HAL_ETH_Init+0x2c0>)
 800836e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008370:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008374:	60bb      	str	r3, [r7, #8]
 8008376:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8008378:	4b99      	ldr	r3, [pc, #612]	; (80085e0 <HAL_ETH_Init+0x2c4>)
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	4a98      	ldr	r2, [pc, #608]	; (80085e0 <HAL_ETH_Init+0x2c4>)
 800837e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008382:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8008384:	4b96      	ldr	r3, [pc, #600]	; (80085e0 <HAL_ETH_Init+0x2c4>)
 8008386:	685a      	ldr	r2, [r3, #4]
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6a1b      	ldr	r3, [r3, #32]
 800838c:	4994      	ldr	r1, [pc, #592]	; (80085e0 <HAL_ETH_Init+0x2c4>)
 800838e:	4313      	orrs	r3, r2
 8008390:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f042 0201 	orr.w	r2, r2, #1
 80083a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083a8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80083aa:	f7fe fe0b 	bl	8006fc4 <HAL_GetTick>
 80083ae:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80083b0:	e011      	b.n	80083d6 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80083b2:	f7fe fe07 	bl	8006fc4 <HAL_GetTick>
 80083b6:	4602      	mov	r2, r0
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	1ad3      	subs	r3, r2, r3
 80083bc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80083c0:	d909      	bls.n	80083d6 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2203      	movs	r2, #3
 80083c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80083d2:	2303      	movs	r3, #3
 80083d4:	e139      	b.n	800864a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f003 0301 	and.w	r3, r3, #1
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d1e4      	bne.n	80083b2 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	691b      	ldr	r3, [r3, #16]
 80083ee:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80083f0:	69fb      	ldr	r3, [r7, #28]
 80083f2:	f023 031c 	bic.w	r3, r3, #28
 80083f6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80083f8:	f002 f87c 	bl	800a4f4 <HAL_RCC_GetHCLKFreq>
 80083fc:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80083fe:	69bb      	ldr	r3, [r7, #24]
 8008400:	4a78      	ldr	r2, [pc, #480]	; (80085e4 <HAL_ETH_Init+0x2c8>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d908      	bls.n	8008418 <HAL_ETH_Init+0xfc>
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	4a77      	ldr	r2, [pc, #476]	; (80085e8 <HAL_ETH_Init+0x2cc>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d804      	bhi.n	8008418 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	f043 0308 	orr.w	r3, r3, #8
 8008414:	61fb      	str	r3, [r7, #28]
 8008416:	e027      	b.n	8008468 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	4a73      	ldr	r2, [pc, #460]	; (80085e8 <HAL_ETH_Init+0x2cc>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d908      	bls.n	8008432 <HAL_ETH_Init+0x116>
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	4a6d      	ldr	r2, [pc, #436]	; (80085d8 <HAL_ETH_Init+0x2bc>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d204      	bcs.n	8008432 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	f043 030c 	orr.w	r3, r3, #12
 800842e:	61fb      	str	r3, [r7, #28]
 8008430:	e01a      	b.n	8008468 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	4a68      	ldr	r2, [pc, #416]	; (80085d8 <HAL_ETH_Init+0x2bc>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d303      	bcc.n	8008442 <HAL_ETH_Init+0x126>
 800843a:	69bb      	ldr	r3, [r7, #24]
 800843c:	4a6b      	ldr	r2, [pc, #428]	; (80085ec <HAL_ETH_Init+0x2d0>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d911      	bls.n	8008466 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8008442:	69bb      	ldr	r3, [r7, #24]
 8008444:	4a69      	ldr	r2, [pc, #420]	; (80085ec <HAL_ETH_Init+0x2d0>)
 8008446:	4293      	cmp	r3, r2
 8008448:	d908      	bls.n	800845c <HAL_ETH_Init+0x140>
 800844a:	69bb      	ldr	r3, [r7, #24]
 800844c:	4a68      	ldr	r2, [pc, #416]	; (80085f0 <HAL_ETH_Init+0x2d4>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d804      	bhi.n	800845c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8008452:	69fb      	ldr	r3, [r7, #28]
 8008454:	f043 0304 	orr.w	r3, r3, #4
 8008458:	61fb      	str	r3, [r7, #28]
 800845a:	e005      	b.n	8008468 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	f043 0310 	orr.w	r3, r3, #16
 8008462:	61fb      	str	r3, [r7, #28]
 8008464:	e000      	b.n	8008468 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8008466:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	69fa      	ldr	r2, [r7, #28]
 800846e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8008470:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008474:	2100      	movs	r1, #0
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f000 fc17 	bl	8008caa <HAL_ETH_WritePHYRegister>
 800847c:	4603      	mov	r3, r0
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00b      	beq.n	800849a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8008482:	2301      	movs	r3, #1
 8008484:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8008486:	6939      	ldr	r1, [r7, #16]
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f000 fdcd 	bl	8009028 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2201      	movs	r2, #1
 8008492:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e0d7      	b.n	800864a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800849a:	20ff      	movs	r0, #255	; 0xff
 800849c:	f7fe fd9e 	bl	8006fdc <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	f000 80a5 	beq.w	80085f4 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80084aa:	f7fe fd8b 	bl	8006fc4 <HAL_GetTick>
 80084ae:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80084b0:	f107 030c 	add.w	r3, r7, #12
 80084b4:	461a      	mov	r2, r3
 80084b6:	2101      	movs	r1, #1
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f000 fb8e 	bl	8008bda <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80084be:	f7fe fd81 	bl	8006fc4 <HAL_GetTick>
 80084c2:	4602      	mov	r2, r0
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	1ad3      	subs	r3, r2, r3
 80084c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80084cc:	4293      	cmp	r3, r2
 80084ce:	d90f      	bls.n	80084f0 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80084d4:	6939      	ldr	r1, [r7, #16]
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 fda6 	bl	8009028 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80084ec:	2303      	movs	r3, #3
 80084ee:	e0ac      	b.n	800864a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f003 0304 	and.w	r3, r3, #4
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d0da      	beq.n	80084b0 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80084fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80084fe:	2100      	movs	r1, #0
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 fbd2 	bl	8008caa <HAL_ETH_WritePHYRegister>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d00b      	beq.n	8008524 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800850c:	2301      	movs	r3, #1
 800850e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8008510:	6939      	ldr	r1, [r7, #16]
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 fd88 	bl	8009028 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2201      	movs	r2, #1
 800851c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8008520:	2301      	movs	r3, #1
 8008522:	e092      	b.n	800864a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8008524:	f7fe fd4e 	bl	8006fc4 <HAL_GetTick>
 8008528:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800852a:	f107 030c 	add.w	r3, r7, #12
 800852e:	461a      	mov	r2, r3
 8008530:	2101      	movs	r1, #1
 8008532:	6878      	ldr	r0, [r7, #4]
 8008534:	f000 fb51 	bl	8008bda <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8008538:	f7fe fd44 	bl	8006fc4 <HAL_GetTick>
 800853c:	4602      	mov	r2, r0
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	1ad3      	subs	r3, r2, r3
 8008542:	f241 3288 	movw	r2, #5000	; 0x1388
 8008546:	4293      	cmp	r3, r2
 8008548:	d90f      	bls.n	800856a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800854e:	6939      	ldr	r1, [r7, #16]
 8008550:	6878      	ldr	r0, [r7, #4]
 8008552:	f000 fd69 	bl	8009028 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2201      	movs	r2, #1
 800855a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8008566:	2303      	movs	r3, #3
 8008568:	e06f      	b.n	800864a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	f003 0320 	and.w	r3, r3, #32
 8008570:	2b00      	cmp	r3, #0
 8008572:	d0da      	beq.n	800852a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8008574:	f107 030c 	add.w	r3, r7, #12
 8008578:	461a      	mov	r2, r3
 800857a:	2110      	movs	r1, #16
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 fb2c 	bl	8008bda <HAL_ETH_ReadPHYRegister>
 8008582:	4603      	mov	r3, r0
 8008584:	2b00      	cmp	r3, #0
 8008586:	d00b      	beq.n	80085a0 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800858c:	6939      	ldr	r1, [r7, #16]
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f000 fd4a 	bl	8009028 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800859c:	2301      	movs	r3, #1
 800859e:	e054      	b.n	800864a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	f003 0304 	and.w	r3, r3, #4
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d004      	beq.n	80085b4 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085b0:	60da      	str	r2, [r3, #12]
 80085b2:	e002      	b.n	80085ba <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	f003 0302 	and.w	r3, r3, #2
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d003      	beq.n	80085cc <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	609a      	str	r2, [r3, #8]
 80085ca:	e035      	b.n	8008638 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80085d2:	609a      	str	r2, [r3, #8]
 80085d4:	e030      	b.n	8008638 <HAL_ETH_Init+0x31c>
 80085d6:	bf00      	nop
 80085d8:	03938700 	.word	0x03938700
 80085dc:	40023800 	.word	0x40023800
 80085e0:	40013800 	.word	0x40013800
 80085e4:	01312cff 	.word	0x01312cff
 80085e8:	02160ebf 	.word	0x02160ebf
 80085ec:	05f5e0ff 	.word	0x05f5e0ff
 80085f0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	68db      	ldr	r3, [r3, #12]
 80085f8:	08db      	lsrs	r3, r3, #3
 80085fa:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	085b      	lsrs	r3, r3, #1
 8008602:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8008604:	4313      	orrs	r3, r2
 8008606:	b29b      	uxth	r3, r3
 8008608:	461a      	mov	r2, r3
 800860a:	2100      	movs	r1, #0
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f000 fb4c 	bl	8008caa <HAL_ETH_WritePHYRegister>
 8008612:	4603      	mov	r3, r0
 8008614:	2b00      	cmp	r3, #0
 8008616:	d00b      	beq.n	8008630 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8008618:	2301      	movs	r3, #1
 800861a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800861c:	6939      	ldr	r1, [r7, #16]
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 fd02 	bl	8009028 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2201      	movs	r2, #1
 8008628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	e00c      	b.n	800864a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8008630:	f640 70ff 	movw	r0, #4095	; 0xfff
 8008634:	f7fe fcd2 	bl	8006fdc <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8008638:	6939      	ldr	r1, [r7, #16]
 800863a:	6878      	ldr	r0, [r7, #4]
 800863c:	f000 fcf4 	bl	8009028 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3720      	adds	r7, #32
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop

08008654 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8008654:	b480      	push	{r7}
 8008656:	b087      	sub	sp, #28
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]
 8008660:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8008662:	2300      	movs	r3, #0
 8008664:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800866c:	2b01      	cmp	r3, #1
 800866e:	d101      	bne.n	8008674 <HAL_ETH_DMATxDescListInit+0x20>
 8008670:	2302      	movs	r3, #2
 8008672:	e052      	b.n	800871a <HAL_ETH_DMATxDescListInit+0xc6>
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2202      	movs	r2, #2
 8008680:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	68ba      	ldr	r2, [r7, #8]
 8008688:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800868a:	2300      	movs	r3, #0
 800868c:	617b      	str	r3, [r7, #20]
 800868e:	e030      	b.n	80086f2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	015b      	lsls	r3, r3, #5
 8008694:	68ba      	ldr	r2, [r7, #8]
 8008696:	4413      	add	r3, r2
 8008698:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800869a:	693b      	ldr	r3, [r7, #16]
 800869c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80086a0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80086a8:	fb02 f303 	mul.w	r3, r2, r3
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	4413      	add	r3, r2
 80086b0:	461a      	mov	r2, r3
 80086b2:	693b      	ldr	r3, [r7, #16]
 80086b4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	69db      	ldr	r3, [r3, #28]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d105      	bne.n	80086ca <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80086ca:	683b      	ldr	r3, [r7, #0]
 80086cc:	3b01      	subs	r3, #1
 80086ce:	697a      	ldr	r2, [r7, #20]
 80086d0:	429a      	cmp	r2, r3
 80086d2:	d208      	bcs.n	80086e6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 80086d4:	697b      	ldr	r3, [r7, #20]
 80086d6:	3301      	adds	r3, #1
 80086d8:	015b      	lsls	r3, r3, #5
 80086da:	68ba      	ldr	r2, [r7, #8]
 80086dc:	4413      	add	r3, r2
 80086de:	461a      	mov	r2, r3
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	60da      	str	r2, [r3, #12]
 80086e4:	e002      	b.n	80086ec <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 80086ec:	697b      	ldr	r3, [r7, #20]
 80086ee:	3301      	adds	r3, #1
 80086f0:	617b      	str	r3, [r7, #20]
 80086f2:	697a      	ldr	r2, [r7, #20]
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	d3ca      	bcc.n	8008690 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	68ba      	ldr	r2, [r7, #8]
 8008700:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008704:	3310      	adds	r3, #16
 8008706:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2200      	movs	r2, #0
 8008714:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	371c      	adds	r7, #28
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr

08008726 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8008726:	b480      	push	{r7}
 8008728:	b087      	sub	sp, #28
 800872a:	af00      	add	r7, sp, #0
 800872c:	60f8      	str	r0, [r7, #12]
 800872e:	60b9      	str	r1, [r7, #8]
 8008730:	607a      	str	r2, [r7, #4]
 8008732:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8008734:	2300      	movs	r3, #0
 8008736:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800873e:	2b01      	cmp	r3, #1
 8008740:	d101      	bne.n	8008746 <HAL_ETH_DMARxDescListInit+0x20>
 8008742:	2302      	movs	r3, #2
 8008744:	e056      	b.n	80087f4 <HAL_ETH_DMARxDescListInit+0xce>
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2201      	movs	r2, #1
 800874a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2202      	movs	r2, #2
 8008752:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	68ba      	ldr	r2, [r7, #8]
 800875a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 800875c:	2300      	movs	r3, #0
 800875e:	617b      	str	r3, [r7, #20]
 8008760:	e034      	b.n	80087cc <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8008762:	697b      	ldr	r3, [r7, #20]
 8008764:	015b      	lsls	r3, r3, #5
 8008766:	68ba      	ldr	r2, [r7, #8]
 8008768:	4413      	add	r3, r2
 800876a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008772:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800877a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008782:	fb02 f303 	mul.w	r3, r2, r3
 8008786:	687a      	ldr	r2, [r7, #4]
 8008788:	4413      	add	r3, r2
 800878a:	461a      	mov	r2, r3
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	699b      	ldr	r3, [r3, #24]
 8008794:	2b01      	cmp	r3, #1
 8008796:	d105      	bne.n	80087a4 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	3b01      	subs	r3, #1
 80087a8:	697a      	ldr	r2, [r7, #20]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d208      	bcs.n	80087c0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	3301      	adds	r3, #1
 80087b2:	015b      	lsls	r3, r3, #5
 80087b4:	68ba      	ldr	r2, [r7, #8]
 80087b6:	4413      	add	r3, r2
 80087b8:	461a      	mov	r2, r3
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	60da      	str	r2, [r3, #12]
 80087be:	e002      	b.n	80087c6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80087c0:	68ba      	ldr	r2, [r7, #8]
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	3301      	adds	r3, #1
 80087ca:	617b      	str	r3, [r7, #20]
 80087cc:	697a      	ldr	r2, [r7, #20]
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	429a      	cmp	r2, r3
 80087d2:	d3c6      	bcc.n	8008762 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	68ba      	ldr	r2, [r7, #8]
 80087da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80087de:	330c      	adds	r3, #12
 80087e0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2201      	movs	r2, #1
 80087e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	371c      	adds	r7, #28
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8008800:	b480      	push	{r7}
 8008802:	b087      	sub	sp, #28
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800880a:	2300      	movs	r3, #0
 800880c:	617b      	str	r3, [r7, #20]
 800880e:	2300      	movs	r3, #0
 8008810:	60fb      	str	r3, [r7, #12]
 8008812:	2300      	movs	r3, #0
 8008814:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800881c:	2b01      	cmp	r3, #1
 800881e:	d101      	bne.n	8008824 <HAL_ETH_TransmitFrame+0x24>
 8008820:	2302      	movs	r3, #2
 8008822:	e0cd      	b.n	80089c0 <HAL_ETH_TransmitFrame+0x1c0>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2201      	movs	r2, #1
 8008828:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2202      	movs	r2, #2
 8008830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d109      	bne.n	800884e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2201      	movs	r2, #1
 800883e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2200      	movs	r2, #0
 8008846:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800884a:	2301      	movs	r3, #1
 800884c:	e0b8      	b.n	80089c0 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	2b00      	cmp	r3, #0
 8008856:	da09      	bge.n	800886c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2212      	movs	r2, #18
 800885c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2200      	movs	r2, #0
 8008864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8008868:	2301      	movs	r3, #1
 800886a:	e0a9      	b.n	80089c0 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800886c:	683b      	ldr	r3, [r7, #0]
 800886e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8008872:	4293      	cmp	r3, r2
 8008874:	d915      	bls.n	80088a2 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	4a54      	ldr	r2, [pc, #336]	; (80089cc <HAL_ETH_TransmitFrame+0x1cc>)
 800887a:	fba2 2303 	umull	r2, r3, r2, r3
 800887e:	0a9b      	lsrs	r3, r3, #10
 8008880:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8008882:	683a      	ldr	r2, [r7, #0]
 8008884:	4b51      	ldr	r3, [pc, #324]	; (80089cc <HAL_ETH_TransmitFrame+0x1cc>)
 8008886:	fba3 1302 	umull	r1, r3, r3, r2
 800888a:	0a9b      	lsrs	r3, r3, #10
 800888c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8008890:	fb01 f303 	mul.w	r3, r1, r3
 8008894:	1ad3      	subs	r3, r2, r3
 8008896:	2b00      	cmp	r3, #0
 8008898:	d005      	beq.n	80088a6 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	3301      	adds	r3, #1
 800889e:	617b      	str	r3, [r7, #20]
 80088a0:	e001      	b.n	80088a6 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80088a2:	2301      	movs	r3, #1
 80088a4:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80088a6:	697b      	ldr	r3, [r7, #20]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d11c      	bne.n	80088e6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b0:	681a      	ldr	r2, [r3, #0]
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80088ba:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c0:	683a      	ldr	r2, [r7, #0]
 80088c2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80088c6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088cc:	681a      	ldr	r2, [r3, #0]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088d2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80088d6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	461a      	mov	r2, r3
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	62da      	str	r2, [r3, #44]	; 0x2c
 80088e4:	e04b      	b.n	800897e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80088e6:	2300      	movs	r3, #0
 80088e8:	613b      	str	r3, [r7, #16]
 80088ea:	e044      	b.n	8008976 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f0:	681a      	ldr	r2, [r3, #0]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80088fa:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d107      	bne.n	8008912 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008906:	681a      	ldr	r2, [r3, #0]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800890c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008910:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008916:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800891a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	3b01      	subs	r3, #1
 8008920:	693a      	ldr	r2, [r7, #16]
 8008922:	429a      	cmp	r2, r3
 8008924:	d116      	bne.n	8008954 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800892a:	681a      	ldr	r2, [r3, #0]
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008930:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8008934:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	4a25      	ldr	r2, [pc, #148]	; (80089d0 <HAL_ETH_TransmitFrame+0x1d0>)
 800893a:	fb02 f203 	mul.w	r2, r2, r3
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	4413      	add	r3, r2
 8008942:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8008946:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894c:	68fa      	ldr	r2, [r7, #12]
 800894e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8008952:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8008962:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	461a      	mov	r2, r3
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8008970:	693b      	ldr	r3, [r7, #16]
 8008972:	3301      	adds	r3, #1
 8008974:	613b      	str	r3, [r7, #16]
 8008976:	693a      	ldr	r2, [r7, #16]
 8008978:	697b      	ldr	r3, [r7, #20]
 800897a:	429a      	cmp	r2, r3
 800897c:	d3b6      	bcc.n	80088ec <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008986:	3314      	adds	r3, #20
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 0304 	and.w	r3, r3, #4
 800898e:	2b00      	cmp	r3, #0
 8008990:	d00d      	beq.n	80089ae <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800899a:	3314      	adds	r3, #20
 800899c:	2204      	movs	r2, #4
 800899e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80089a8:	3304      	adds	r3, #4
 80089aa:	2200      	movs	r2, #0
 80089ac:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2201      	movs	r2, #1
 80089b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80089be:	2300      	movs	r3, #0
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	371c      	adds	r7, #28
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr
 80089cc:	ac02b00b 	.word	0xac02b00b
 80089d0:	fffffa0c 	.word	0xfffffa0c

080089d4 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b085      	sub	sp, #20
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 80089dc:	2300      	movs	r3, #0
 80089de:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089e6:	2b01      	cmp	r3, #1
 80089e8:	d101      	bne.n	80089ee <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80089ea:	2302      	movs	r3, #2
 80089ec:	e074      	b.n	8008ad8 <HAL_ETH_GetReceivedFrame_IT+0x104>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2201      	movs	r2, #1
 80089f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2202      	movs	r2, #2
 80089fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80089fe:	e05a      	b.n	8008ab6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	3301      	adds	r3, #1
 8008a04:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a14:	d10d      	bne.n	8008a32 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2201      	movs	r2, #1
 8008a22:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a28:	68db      	ldr	r3, [r3, #12]
 8008a2a:	461a      	mov	r2, r3
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	629a      	str	r2, [r3, #40]	; 0x28
 8008a30:	e041      	b.n	8008ab6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d10b      	bne.n	8008a58 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a44:	1c5a      	adds	r2, r3, #1
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	461a      	mov	r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	629a      	str	r2, [r3, #40]	; 0x28
 8008a56:	e02e      	b.n	8008ab6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a64:	1c5a      	adds	r2, r3, #1
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d103      	bne.n	8008a7a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	0c1b      	lsrs	r3, r3, #16
 8008a82:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8008a86:	1f1a      	subs	r2, r3, #4
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a90:	689a      	ldr	r2, [r3, #8]
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	e010      	b.n	8008ad8 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	db02      	blt.n	8008ac6 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2b03      	cmp	r3, #3
 8008ac4:	d99c      	bls.n	8008a00 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2201      	movs	r2, #1
 8008aca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8008ad6:	2301      	movs	r3, #1
}
 8008ad8:	4618      	mov	r0, r3
 8008ada:	3714      	adds	r7, #20
 8008adc:	46bd      	mov	sp, r7
 8008ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae2:	4770      	bx	lr

08008ae4 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008af4:	3314      	adds	r3, #20
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008afc:	2b40      	cmp	r3, #64	; 0x40
 8008afe:	d112      	bne.n	8008b26 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	f004 fc63 	bl	800d3cc <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b0e:	3314      	adds	r3, #20
 8008b10:	2240      	movs	r2, #64	; 0x40
 8008b12:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b24:	e01b      	b.n	8008b5e <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b2e:	3314      	adds	r3, #20
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f003 0301 	and.w	r3, r3, #1
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d111      	bne.n	8008b5e <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 f839 	bl	8008bb2 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b48:	3314      	adds	r3, #20
 8008b4a:	2201      	movs	r2, #1
 8008b4c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2201      	movs	r2, #1
 8008b52:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2200      	movs	r2, #0
 8008b5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b66:	3314      	adds	r3, #20
 8008b68:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008b6c:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b76:	3314      	adds	r3, #20
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b82:	d112      	bne.n	8008baa <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f000 f81e 	bl	8008bc6 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008b92:	3314      	adds	r3, #20
 8008b94:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008b98:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8008baa:	bf00      	nop
 8008bac:	3708      	adds	r7, #8
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}

08008bb2 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8008bb2:	b480      	push	{r7}
 8008bb4:	b083      	sub	sp, #12
 8008bb6:	af00      	add	r7, sp, #0
 8008bb8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8008bba:	bf00      	nop
 8008bbc:	370c      	adds	r7, #12
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr

08008bc6 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8008bc6:	b480      	push	{r7}
 8008bc8:	b083      	sub	sp, #12
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8008bce:	bf00      	nop
 8008bd0:	370c      	adds	r7, #12
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd8:	4770      	bx	lr

08008bda <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b086      	sub	sp, #24
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	60f8      	str	r0, [r7, #12]
 8008be2:	460b      	mov	r3, r1
 8008be4:	607a      	str	r2, [r7, #4]
 8008be6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8008be8:	2300      	movs	r3, #0
 8008bea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8008bec:	2300      	movs	r3, #0
 8008bee:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	2b82      	cmp	r3, #130	; 0x82
 8008bfa:	d101      	bne.n	8008c00 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8008bfc:	2302      	movs	r3, #2
 8008bfe:	e050      	b.n	8008ca2 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2282      	movs	r2, #130	; 0x82
 8008c04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	691b      	ldr	r3, [r3, #16]
 8008c0e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8008c10:	697b      	ldr	r3, [r7, #20]
 8008c12:	f003 031c 	and.w	r3, r3, #28
 8008c16:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	8a1b      	ldrh	r3, [r3, #16]
 8008c1c:	02db      	lsls	r3, r3, #11
 8008c1e:	b29b      	uxth	r3, r3
 8008c20:	697a      	ldr	r2, [r7, #20]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8008c26:	897b      	ldrh	r3, [r7, #10]
 8008c28:	019b      	lsls	r3, r3, #6
 8008c2a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8008c2e:	697a      	ldr	r2, [r7, #20]
 8008c30:	4313      	orrs	r3, r2
 8008c32:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	f023 0302 	bic.w	r3, r3, #2
 8008c3a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8008c3c:	697b      	ldr	r3, [r7, #20]
 8008c3e:	f043 0301 	orr.w	r3, r3, #1
 8008c42:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	697a      	ldr	r2, [r7, #20]
 8008c4a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8008c4c:	f7fe f9ba 	bl	8006fc4 <HAL_GetTick>
 8008c50:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8008c52:	e015      	b.n	8008c80 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8008c54:	f7fe f9b6 	bl	8006fc4 <HAL_GetTick>
 8008c58:	4602      	mov	r2, r0
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	1ad3      	subs	r3, r2, r3
 8008c5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c62:	d309      	bcc.n	8008c78 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	2201      	movs	r2, #1
 8008c68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8008c74:	2303      	movs	r3, #3
 8008c76:	e014      	b.n	8008ca2 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	691b      	ldr	r3, [r3, #16]
 8008c7e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	f003 0301 	and.w	r3, r3, #1
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d1e4      	bne.n	8008c54 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	695b      	ldr	r3, [r3, #20]
 8008c90:	b29b      	uxth	r3, r3
 8008c92:	461a      	mov	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8008ca0:	2300      	movs	r3, #0
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3718      	adds	r7, #24
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	bd80      	pop	{r7, pc}

08008caa <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8008caa:	b580      	push	{r7, lr}
 8008cac:	b086      	sub	sp, #24
 8008cae:	af00      	add	r7, sp, #0
 8008cb0:	60f8      	str	r0, [r7, #12]
 8008cb2:	460b      	mov	r3, r1
 8008cb4:	607a      	str	r2, [r7, #4]
 8008cb6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8008cb8:	2300      	movs	r3, #0
 8008cba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	2b42      	cmp	r3, #66	; 0x42
 8008cca:	d101      	bne.n	8008cd0 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8008ccc:	2302      	movs	r3, #2
 8008cce:	e04e      	b.n	8008d6e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2242      	movs	r2, #66	; 0x42
 8008cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	691b      	ldr	r3, [r3, #16]
 8008cde:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	f003 031c 	and.w	r3, r3, #28
 8008ce6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	8a1b      	ldrh	r3, [r3, #16]
 8008cec:	02db      	lsls	r3, r3, #11
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	697a      	ldr	r2, [r7, #20]
 8008cf2:	4313      	orrs	r3, r2
 8008cf4:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8008cf6:	897b      	ldrh	r3, [r7, #10]
 8008cf8:	019b      	lsls	r3, r3, #6
 8008cfa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8008cfe:	697a      	ldr	r2, [r7, #20]
 8008d00:	4313      	orrs	r3, r2
 8008d02:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8008d04:	697b      	ldr	r3, [r7, #20]
 8008d06:	f043 0302 	orr.w	r3, r3, #2
 8008d0a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	f043 0301 	orr.w	r3, r3, #1
 8008d12:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	b29a      	uxth	r2, r3
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	697a      	ldr	r2, [r7, #20]
 8008d24:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8008d26:	f7fe f94d 	bl	8006fc4 <HAL_GetTick>
 8008d2a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8008d2c:	e015      	b.n	8008d5a <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8008d2e:	f7fe f949 	bl	8006fc4 <HAL_GetTick>
 8008d32:	4602      	mov	r2, r0
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	1ad3      	subs	r3, r2, r3
 8008d38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d3c:	d309      	bcc.n	8008d52 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2201      	movs	r2, #1
 8008d42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	e00d      	b.n	8008d6e <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	691b      	ldr	r3, [r3, #16]
 8008d58:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8008d5a:	697b      	ldr	r3, [r7, #20]
 8008d5c:	f003 0301 	and.w	r3, r3, #1
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d1e4      	bne.n	8008d2e <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2201      	movs	r2, #1
 8008d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8008d6c:	2300      	movs	r3, #0
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3718      	adds	r7, #24
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8008d76:	b580      	push	{r7, lr}
 8008d78:	b082      	sub	sp, #8
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d101      	bne.n	8008d8c <HAL_ETH_Start+0x16>
 8008d88:	2302      	movs	r3, #2
 8008d8a:	e01f      	b.n	8008dcc <HAL_ETH_Start+0x56>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2201      	movs	r2, #1
 8008d90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2202      	movs	r2, #2
 8008d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 fb45 	bl	800942c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 fb7c 	bl	80094a0 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 fc13 	bl	80095d4 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f000 fbb0 	bl	8009514 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 fbdd 	bl	8009574 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3708      	adds	r7, #8
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}

08008dd4 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d101      	bne.n	8008dea <HAL_ETH_Stop+0x16>
 8008de6:	2302      	movs	r3, #2
 8008de8:	e01f      	b.n	8008e2a <HAL_ETH_Stop+0x56>
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2201      	movs	r2, #1
 8008dee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	2202      	movs	r2, #2
 8008df6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 fba2 	bl	8009544 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f000 fbcf 	bl	80095a4 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f000 fb67 	bl	80094da <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 fbe1 	bl	80095d4 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 fb27 	bl	8009466 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2201      	movs	r2, #1
 8008e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2200      	movs	r2, #0
 8008e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
	...

08008e34 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
 8008e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008e48:	2b01      	cmp	r3, #1
 8008e4a:	d101      	bne.n	8008e50 <HAL_ETH_ConfigMAC+0x1c>
 8008e4c:	2302      	movs	r3, #2
 8008e4e:	e0e4      	b.n	800901a <HAL_ETH_ConfigMAC+0x1e6>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2202      	movs	r2, #2
 8008e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	f000 80b1 	beq.w	8008fca <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	4b6c      	ldr	r3, [pc, #432]	; (8009024 <HAL_ETH_ConfigMAC+0x1f0>)
 8008e74:	4013      	ands	r3, r2
 8008e76:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8008e80:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8008e86:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 8008e8c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8008e92:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8008e94:	683b      	ldr	r3, [r7, #0]
 8008e96:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8008e98:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 8008e9e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8008ea4:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 8008eaa:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8008eb0:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8008eb2:	683b      	ldr	r3, [r7, #0]
 8008eb4:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8008eb6:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 8008ebc:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 8008ebe:	683b      	ldr	r3, [r7, #0]
 8008ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8008ec2:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8008ec4:	68fa      	ldr	r2, [r7, #12]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	68fa      	ldr	r2, [r7, #12]
 8008ed0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008eda:	2001      	movs	r0, #1
 8008edc:	f7fe f87e 	bl	8006fdc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68fa      	ldr	r2, [r7, #12]
 8008ee6:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8008ef0:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8008ef6:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8008ef8:	683b      	ldr	r3, [r7, #0]
 8008efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 8008efc:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8008f02:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8008f08:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 8008f0e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 8008f1a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8008f1c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	685b      	ldr	r3, [r3, #4]
 8008f24:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8008f26:	2001      	movs	r0, #1
 8008f28:	f7fe f858 	bl	8006fdc <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	68fa      	ldr	r2, [r7, #12]
 8008f32:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	683a      	ldr	r2, [r7, #0]
 8008f3a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008f3c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	683a      	ldr	r2, [r7, #0]
 8008f44:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008f46:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	699b      	ldr	r3, [r3, #24]
 8008f4e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8008f50:	68fa      	ldr	r2, [r7, #12]
 8008f52:	f64f 7341 	movw	r3, #65345	; 0xff41
 8008f56:	4013      	ands	r3, r2
 8008f58:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f5e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8008f64:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8008f6a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8008f70:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8008f72:	683b      	ldr	r3, [r7, #0]
 8008f74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8008f76:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8008f7c:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8008f7e:	68fa      	ldr	r2, [r7, #12]
 8008f80:	4313      	orrs	r3, r2
 8008f82:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	699b      	ldr	r3, [r3, #24]
 8008f92:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8008f94:	2001      	movs	r0, #1
 8008f96:	f7fe f821 	bl	8006fdc <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68fa      	ldr	r2, [r7, #12]
 8008fa0:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	681b      	ldr	r3, [r3, #0]
 8008fae:	430a      	orrs	r2, r1
 8008fb0:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	69db      	ldr	r3, [r3, #28]
 8008fb8:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8008fba:	2001      	movs	r0, #1
 8008fbc:	f7fe f80e 	bl	8006fdc <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	68fa      	ldr	r2, [r7, #12]
 8008fc6:	61da      	str	r2, [r3, #28]
 8008fc8:	e01e      	b.n	8009008 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8008fd8:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	689a      	ldr	r2, [r3, #8]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	4313      	orrs	r3, r2
 8008fe8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	68fa      	ldr	r2, [r7, #12]
 8008ff0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8008ffa:	2001      	movs	r0, #1
 8008ffc:	f7fd ffee 	bl	8006fdc <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	68fa      	ldr	r2, [r7, #12]
 8009006:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2201      	movs	r2, #1
 800900c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2200      	movs	r2, #0
 8009014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	3710      	adds	r7, #16
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	ff20810f 	.word	0xff20810f

08009028 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b0b0      	sub	sp, #192	; 0xc0
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8009032:	2300      	movs	r3, #0
 8009034:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d007      	beq.n	800904e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009044:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800904c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800904e:	2300      	movs	r3, #0
 8009050:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8009052:	2300      	movs	r3, #0
 8009054:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8009056:	2300      	movs	r3, #0
 8009058:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800905a:	2300      	movs	r3, #0
 800905c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800905e:	2300      	movs	r3, #0
 8009060:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8009062:	2300      	movs	r3, #0
 8009064:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	69db      	ldr	r3, [r3, #28]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d103      	bne.n	8009076 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800906e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009072:	663b      	str	r3, [r7, #96]	; 0x60
 8009074:	e001      	b.n	800907a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8009076:	2300      	movs	r3, #0
 8009078:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800907a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800907e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8009080:	2300      	movs	r3, #0
 8009082:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8009084:	2300      	movs	r3, #0
 8009086:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8009088:	2300      	movs	r3, #0
 800908a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800908c:	2300      	movs	r3, #0
 800908e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8009090:	2300      	movs	r3, #0
 8009092:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8009094:	2340      	movs	r3, #64	; 0x40
 8009096:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8009098:	2300      	movs	r3, #0
 800909a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800909e:	2300      	movs	r3, #0
 80090a0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80090a4:	2300      	movs	r3, #0
 80090a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80090aa:	2300      	movs	r3, #0
 80090ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80090b0:	2300      	movs	r3, #0
 80090b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80090b6:	2300      	movs	r3, #0
 80090b8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80090bc:	2300      	movs	r3, #0
 80090be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80090c2:	2300      	movs	r3, #0
 80090c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80090c8:	2380      	movs	r3, #128	; 0x80
 80090ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80090ce:	2300      	movs	r3, #0
 80090d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80090d4:	2300      	movs	r3, #0
 80090d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80090da:	2300      	movs	r3, #0
 80090dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80090e0:	2300      	movs	r3, #0
 80090e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80090e6:	2300      	movs	r3, #0
 80090e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80090ec:	2300      	movs	r3, #0
 80090ee:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80090fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009100:	4bac      	ldr	r3, [pc, #688]	; (80093b4 <ETH_MACDMAConfig+0x38c>)
 8009102:	4013      	ands	r3, r2
 8009104:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8009108:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800910a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800910c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800910e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8009110:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8009112:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8009114:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800911a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800911c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800911e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8009120:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8009122:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8009128:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800912a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800912c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800912e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8009130:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8009132:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8009134:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8009136:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8009138:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800913a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800913c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800913e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009142:	4313      	orrs	r3, r2
 8009144:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009150:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800915c:	2001      	movs	r0, #1
 800915e:	f7fd ff3d 	bl	8006fdc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800916a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800916c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800916e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8009170:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8009172:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8009174:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8009176:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800917a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800917c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8009180:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8009182:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8009186:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8009188:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800918c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8009190:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8009198:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800919a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80091a6:	2001      	movs	r0, #1
 80091a8:	f7fd ff18 	bl	8006fdc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80091b4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80091be:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80091c8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	699b      	ldr	r3, [r3, #24]
 80091d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80091d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80091d8:	f64f 7341 	movw	r3, #65345	; 0xff41
 80091dc:	4013      	ands	r3, r2
 80091de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80091e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80091e6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80091e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80091ec:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80091ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80091f2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80091f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80091f8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80091fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80091fe:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8009200:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8009204:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8009206:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800920a:	4313      	orrs	r3, r2
 800920c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009218:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	699b      	ldr	r3, [r3, #24]
 8009220:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8009224:	2001      	movs	r0, #1
 8009226:	f7fd fed9 	bl	8006fdc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009232:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8009234:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8009238:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	430a      	orrs	r2, r1
 8009242:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	69db      	ldr	r3, [r3, #28]
 800924a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800924e:	2001      	movs	r0, #1
 8009250:	f7fd fec4 	bl	8006fdc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800925c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800925e:	2300      	movs	r3, #0
 8009260:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8009262:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009266:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8009268:	2300      	movs	r3, #0
 800926a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800926c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009270:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8009272:	2300      	movs	r3, #0
 8009274:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8009276:	2300      	movs	r3, #0
 8009278:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800927a:	2300      	movs	r3, #0
 800927c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800927e:	2300      	movs	r3, #0
 8009280:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8009282:	2304      	movs	r3, #4
 8009284:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8009286:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800928a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800928c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009290:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8009292:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009296:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8009298:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800929c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800929e:	2380      	movs	r3, #128	; 0x80
 80092a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 80092a2:	2300      	movs	r3, #0
 80092a4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80092a6:	2300      	movs	r3, #0
 80092a8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092b2:	3318      	adds	r3, #24
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80092ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80092be:	4b3e      	ldr	r3, [pc, #248]	; (80093b8 <ETH_MACDMAConfig+0x390>)
 80092c0:	4013      	ands	r3, r2
 80092c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80092c6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80092c8:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80092ca:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80092cc:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80092ce:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80092d0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80092d2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80092d4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80092d6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80092d8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80092da:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80092dc:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80092de:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80092e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80092e2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80092e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80092e6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80092e8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80092ec:	4313      	orrs	r3, r2
 80092ee:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092fa:	3318      	adds	r3, #24
 80092fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009300:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800930a:	3318      	adds	r3, #24
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8009312:	2001      	movs	r0, #1
 8009314:	f7fd fe62 	bl	8006fdc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009320:	3318      	adds	r3, #24
 8009322:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009326:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8009328:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800932a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800932c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800932e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8009330:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8009332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8009334:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8009336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8009338:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800933a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800933c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800933e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8009340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8009342:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800934c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009350:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8009360:	2001      	movs	r0, #1
 8009362:	f7fd fe3b 	bl	8006fdc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800936e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8009372:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	699b      	ldr	r3, [r3, #24]
 8009378:	2b01      	cmp	r3, #1
 800937a:	d10f      	bne.n	800939c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009384:	331c      	adds	r3, #28
 8009386:	681a      	ldr	r2, [r3, #0]
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009390:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009394:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009398:	331c      	adds	r3, #28
 800939a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	695b      	ldr	r3, [r3, #20]
 80093a0:	461a      	mov	r2, r3
 80093a2:	2100      	movs	r1, #0
 80093a4:	6878      	ldr	r0, [r7, #4]
 80093a6:	f000 f809 	bl	80093bc <ETH_MACAddressConfig>
}
 80093aa:	bf00      	nop
 80093ac:	37c0      	adds	r7, #192	; 0xc0
 80093ae:	46bd      	mov	sp, r7
 80093b0:	bd80      	pop	{r7, pc}
 80093b2:	bf00      	nop
 80093b4:	ff20810f 	.word	0xff20810f
 80093b8:	f8de3f23 	.word	0xf8de3f23

080093bc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80093bc:	b480      	push	{r7}
 80093be:	b087      	sub	sp, #28
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	60f8      	str	r0, [r7, #12]
 80093c4:	60b9      	str	r1, [r7, #8]
 80093c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	3305      	adds	r3, #5
 80093cc:	781b      	ldrb	r3, [r3, #0]
 80093ce:	021b      	lsls	r3, r3, #8
 80093d0:	687a      	ldr	r2, [r7, #4]
 80093d2:	3204      	adds	r2, #4
 80093d4:	7812      	ldrb	r2, [r2, #0]
 80093d6:	4313      	orrs	r3, r2
 80093d8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80093da:	68ba      	ldr	r2, [r7, #8]
 80093dc:	4b11      	ldr	r3, [pc, #68]	; (8009424 <ETH_MACAddressConfig+0x68>)
 80093de:	4413      	add	r3, r2
 80093e0:	461a      	mov	r2, r3
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	3303      	adds	r3, #3
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	061a      	lsls	r2, r3, #24
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	3302      	adds	r3, #2
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	041b      	lsls	r3, r3, #16
 80093f6:	431a      	orrs	r2, r3
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	3301      	adds	r3, #1
 80093fc:	781b      	ldrb	r3, [r3, #0]
 80093fe:	021b      	lsls	r3, r3, #8
 8009400:	4313      	orrs	r3, r2
 8009402:	687a      	ldr	r2, [r7, #4]
 8009404:	7812      	ldrb	r2, [r2, #0]
 8009406:	4313      	orrs	r3, r2
 8009408:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800940a:	68ba      	ldr	r2, [r7, #8]
 800940c:	4b06      	ldr	r3, [pc, #24]	; (8009428 <ETH_MACAddressConfig+0x6c>)
 800940e:	4413      	add	r3, r2
 8009410:	461a      	mov	r2, r3
 8009412:	697b      	ldr	r3, [r7, #20]
 8009414:	6013      	str	r3, [r2, #0]
}
 8009416:	bf00      	nop
 8009418:	371c      	adds	r7, #28
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr
 8009422:	bf00      	nop
 8009424:	40028040 	.word	0x40028040
 8009428:	40028044 	.word	0x40028044

0800942c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8009434:	2300      	movs	r3, #0
 8009436:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	f042 0208 	orr.w	r2, r2, #8
 8009446:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8009450:	2001      	movs	r0, #1
 8009452:	f000 f8e9 	bl	8009628 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	68fa      	ldr	r2, [r7, #12]
 800945c:	601a      	str	r2, [r3, #0]
}
 800945e:	bf00      	nop
 8009460:	3710      	adds	r7, #16
 8009462:	46bd      	mov	sp, r7
 8009464:	bd80      	pop	{r7, pc}

08009466 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8009466:	b580      	push	{r7, lr}
 8009468:	b084      	sub	sp, #16
 800946a:	af00      	add	r7, sp, #0
 800946c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800946e:	2300      	movs	r3, #0
 8009470:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	f022 0208 	bic.w	r2, r2, #8
 8009480:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800948a:	2001      	movs	r0, #1
 800948c:	f000 f8cc 	bl	8009628 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	68fa      	ldr	r2, [r7, #12]
 8009496:	601a      	str	r2, [r3, #0]
}
 8009498:	bf00      	nop
 800949a:	3710      	adds	r7, #16
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80094a8:	2300      	movs	r3, #0
 80094aa:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f042 0204 	orr.w	r2, r2, #4
 80094ba:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80094c4:	2001      	movs	r0, #1
 80094c6:	f000 f8af 	bl	8009628 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	68fa      	ldr	r2, [r7, #12]
 80094d0:	601a      	str	r2, [r3, #0]
}
 80094d2:	bf00      	nop
 80094d4:	3710      	adds	r7, #16
 80094d6:	46bd      	mov	sp, r7
 80094d8:	bd80      	pop	{r7, pc}

080094da <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80094da:	b580      	push	{r7, lr}
 80094dc:	b084      	sub	sp, #16
 80094de:	af00      	add	r7, sp, #0
 80094e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80094e2:	2300      	movs	r3, #0
 80094e4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	681a      	ldr	r2, [r3, #0]
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f022 0204 	bic.w	r2, r2, #4
 80094f4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80094fe:	2001      	movs	r0, #1
 8009500:	f000 f892 	bl	8009628 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	68fa      	ldr	r2, [r7, #12]
 800950a:	601a      	str	r2, [r3, #0]
}
 800950c:	bf00      	nop
 800950e:	3710      	adds	r7, #16
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}

08009514 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8009514:	b480      	push	{r7}
 8009516:	b083      	sub	sp, #12
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009524:	3318      	adds	r3, #24
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009530:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009534:	3318      	adds	r3, #24
 8009536:	601a      	str	r2, [r3, #0]
}
 8009538:	bf00      	nop
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009554:	3318      	adds	r3, #24
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009560:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009564:	3318      	adds	r3, #24
 8009566:	601a      	str	r2, [r3, #0]
}
 8009568:	bf00      	nop
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009584:	3318      	adds	r3, #24
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	f042 0202 	orr.w	r2, r2, #2
 8009590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009594:	3318      	adds	r3, #24
 8009596:	601a      	str	r2, [r3, #0]
}
 8009598:	bf00      	nop
 800959a:	370c      	adds	r7, #12
 800959c:	46bd      	mov	sp, r7
 800959e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a2:	4770      	bx	lr

080095a4 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 80095a4:	b480      	push	{r7}
 80095a6:	b083      	sub	sp, #12
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095b4:	3318      	adds	r3, #24
 80095b6:	681a      	ldr	r2, [r3, #0]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f022 0202 	bic.w	r2, r2, #2
 80095c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095c4:	3318      	adds	r3, #24
 80095c6:	601a      	str	r2, [r3, #0]
}
 80095c8:	bf00      	nop
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80095d4:	b580      	push	{r7, lr}
 80095d6:	b084      	sub	sp, #16
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80095dc:	2300      	movs	r3, #0
 80095de:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095e8:	3318      	adds	r3, #24
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80095f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80095f8:	3318      	adds	r3, #24
 80095fa:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009604:	3318      	adds	r3, #24
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800960a:	2001      	movs	r0, #1
 800960c:	f000 f80c 	bl	8009628 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	68fa      	ldr	r2, [r7, #12]
 8009616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800961a:	3318      	adds	r3, #24
 800961c:	601a      	str	r2, [r3, #0]
}
 800961e:	bf00      	nop
 8009620:	3710      	adds	r7, #16
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}
	...

08009628 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8009628:	b480      	push	{r7}
 800962a:	b085      	sub	sp, #20
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8009630:	4b0b      	ldr	r3, [pc, #44]	; (8009660 <ETH_Delay+0x38>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4a0b      	ldr	r2, [pc, #44]	; (8009664 <ETH_Delay+0x3c>)
 8009636:	fba2 2303 	umull	r2, r3, r2, r3
 800963a:	0a5b      	lsrs	r3, r3, #9
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	fb02 f303 	mul.w	r3, r2, r3
 8009642:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8009644:	bf00      	nop
  } 
  while (Delay --);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	1e5a      	subs	r2, r3, #1
 800964a:	60fa      	str	r2, [r7, #12]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d1f9      	bne.n	8009644 <ETH_Delay+0x1c>
}
 8009650:	bf00      	nop
 8009652:	bf00      	nop
 8009654:	3714      	adds	r7, #20
 8009656:	46bd      	mov	sp, r7
 8009658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965c:	4770      	bx	lr
 800965e:	bf00      	nop
 8009660:	2000039c 	.word	0x2000039c
 8009664:	10624dd3 	.word	0x10624dd3

08009668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009668:	b480      	push	{r7}
 800966a:	b089      	sub	sp, #36	; 0x24
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
 8009670:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8009672:	2300      	movs	r3, #0
 8009674:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009676:	2300      	movs	r3, #0
 8009678:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800967a:	2300      	movs	r3, #0
 800967c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800967e:	2300      	movs	r3, #0
 8009680:	61fb      	str	r3, [r7, #28]
 8009682:	e16b      	b.n	800995c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8009684:	2201      	movs	r2, #1
 8009686:	69fb      	ldr	r3, [r7, #28]
 8009688:	fa02 f303 	lsl.w	r3, r2, r3
 800968c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	697a      	ldr	r2, [r7, #20]
 8009694:	4013      	ands	r3, r2
 8009696:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8009698:	693a      	ldr	r2, [r7, #16]
 800969a:	697b      	ldr	r3, [r7, #20]
 800969c:	429a      	cmp	r2, r3
 800969e:	f040 815a 	bne.w	8009956 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	685b      	ldr	r3, [r3, #4]
 80096a6:	f003 0303 	and.w	r3, r3, #3
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	d005      	beq.n	80096ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80096b6:	2b02      	cmp	r3, #2
 80096b8:	d130      	bne.n	800971c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80096c0:	69fb      	ldr	r3, [r7, #28]
 80096c2:	005b      	lsls	r3, r3, #1
 80096c4:	2203      	movs	r2, #3
 80096c6:	fa02 f303 	lsl.w	r3, r2, r3
 80096ca:	43db      	mvns	r3, r3
 80096cc:	69ba      	ldr	r2, [r7, #24]
 80096ce:	4013      	ands	r3, r2
 80096d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	68da      	ldr	r2, [r3, #12]
 80096d6:	69fb      	ldr	r3, [r7, #28]
 80096d8:	005b      	lsls	r3, r3, #1
 80096da:	fa02 f303 	lsl.w	r3, r2, r3
 80096de:	69ba      	ldr	r2, [r7, #24]
 80096e0:	4313      	orrs	r3, r2
 80096e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	69ba      	ldr	r2, [r7, #24]
 80096e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	685b      	ldr	r3, [r3, #4]
 80096ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80096f0:	2201      	movs	r2, #1
 80096f2:	69fb      	ldr	r3, [r7, #28]
 80096f4:	fa02 f303 	lsl.w	r3, r2, r3
 80096f8:	43db      	mvns	r3, r3
 80096fa:	69ba      	ldr	r2, [r7, #24]
 80096fc:	4013      	ands	r3, r2
 80096fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	685b      	ldr	r3, [r3, #4]
 8009704:	091b      	lsrs	r3, r3, #4
 8009706:	f003 0201 	and.w	r2, r3, #1
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	fa02 f303 	lsl.w	r3, r2, r3
 8009710:	69ba      	ldr	r2, [r7, #24]
 8009712:	4313      	orrs	r3, r2
 8009714:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	69ba      	ldr	r2, [r7, #24]
 800971a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	f003 0303 	and.w	r3, r3, #3
 8009724:	2b03      	cmp	r3, #3
 8009726:	d017      	beq.n	8009758 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	68db      	ldr	r3, [r3, #12]
 800972c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800972e:	69fb      	ldr	r3, [r7, #28]
 8009730:	005b      	lsls	r3, r3, #1
 8009732:	2203      	movs	r2, #3
 8009734:	fa02 f303 	lsl.w	r3, r2, r3
 8009738:	43db      	mvns	r3, r3
 800973a:	69ba      	ldr	r2, [r7, #24]
 800973c:	4013      	ands	r3, r2
 800973e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	689a      	ldr	r2, [r3, #8]
 8009744:	69fb      	ldr	r3, [r7, #28]
 8009746:	005b      	lsls	r3, r3, #1
 8009748:	fa02 f303 	lsl.w	r3, r2, r3
 800974c:	69ba      	ldr	r2, [r7, #24]
 800974e:	4313      	orrs	r3, r2
 8009750:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	69ba      	ldr	r2, [r7, #24]
 8009756:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	685b      	ldr	r3, [r3, #4]
 800975c:	f003 0303 	and.w	r3, r3, #3
 8009760:	2b02      	cmp	r3, #2
 8009762:	d123      	bne.n	80097ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009764:	69fb      	ldr	r3, [r7, #28]
 8009766:	08da      	lsrs	r2, r3, #3
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	3208      	adds	r2, #8
 800976c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009770:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009772:	69fb      	ldr	r3, [r7, #28]
 8009774:	f003 0307 	and.w	r3, r3, #7
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	220f      	movs	r2, #15
 800977c:	fa02 f303 	lsl.w	r3, r2, r3
 8009780:	43db      	mvns	r3, r3
 8009782:	69ba      	ldr	r2, [r7, #24]
 8009784:	4013      	ands	r3, r2
 8009786:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	691a      	ldr	r2, [r3, #16]
 800978c:	69fb      	ldr	r3, [r7, #28]
 800978e:	f003 0307 	and.w	r3, r3, #7
 8009792:	009b      	lsls	r3, r3, #2
 8009794:	fa02 f303 	lsl.w	r3, r2, r3
 8009798:	69ba      	ldr	r2, [r7, #24]
 800979a:	4313      	orrs	r3, r2
 800979c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800979e:	69fb      	ldr	r3, [r7, #28]
 80097a0:	08da      	lsrs	r2, r3, #3
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	3208      	adds	r2, #8
 80097a6:	69b9      	ldr	r1, [r7, #24]
 80097a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80097b2:	69fb      	ldr	r3, [r7, #28]
 80097b4:	005b      	lsls	r3, r3, #1
 80097b6:	2203      	movs	r2, #3
 80097b8:	fa02 f303 	lsl.w	r3, r2, r3
 80097bc:	43db      	mvns	r3, r3
 80097be:	69ba      	ldr	r2, [r7, #24]
 80097c0:	4013      	ands	r3, r2
 80097c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	f003 0203 	and.w	r2, r3, #3
 80097cc:	69fb      	ldr	r3, [r7, #28]
 80097ce:	005b      	lsls	r3, r3, #1
 80097d0:	fa02 f303 	lsl.w	r3, r2, r3
 80097d4:	69ba      	ldr	r2, [r7, #24]
 80097d6:	4313      	orrs	r3, r2
 80097d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	69ba      	ldr	r2, [r7, #24]
 80097de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	f000 80b4 	beq.w	8009956 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80097ee:	2300      	movs	r3, #0
 80097f0:	60fb      	str	r3, [r7, #12]
 80097f2:	4b60      	ldr	r3, [pc, #384]	; (8009974 <HAL_GPIO_Init+0x30c>)
 80097f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097f6:	4a5f      	ldr	r2, [pc, #380]	; (8009974 <HAL_GPIO_Init+0x30c>)
 80097f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80097fc:	6453      	str	r3, [r2, #68]	; 0x44
 80097fe:	4b5d      	ldr	r3, [pc, #372]	; (8009974 <HAL_GPIO_Init+0x30c>)
 8009800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009806:	60fb      	str	r3, [r7, #12]
 8009808:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800980a:	4a5b      	ldr	r2, [pc, #364]	; (8009978 <HAL_GPIO_Init+0x310>)
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	089b      	lsrs	r3, r3, #2
 8009810:	3302      	adds	r3, #2
 8009812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009816:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009818:	69fb      	ldr	r3, [r7, #28]
 800981a:	f003 0303 	and.w	r3, r3, #3
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	220f      	movs	r2, #15
 8009822:	fa02 f303 	lsl.w	r3, r2, r3
 8009826:	43db      	mvns	r3, r3
 8009828:	69ba      	ldr	r2, [r7, #24]
 800982a:	4013      	ands	r3, r2
 800982c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	4a52      	ldr	r2, [pc, #328]	; (800997c <HAL_GPIO_Init+0x314>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d02b      	beq.n	800988e <HAL_GPIO_Init+0x226>
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	4a51      	ldr	r2, [pc, #324]	; (8009980 <HAL_GPIO_Init+0x318>)
 800983a:	4293      	cmp	r3, r2
 800983c:	d025      	beq.n	800988a <HAL_GPIO_Init+0x222>
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	4a50      	ldr	r2, [pc, #320]	; (8009984 <HAL_GPIO_Init+0x31c>)
 8009842:	4293      	cmp	r3, r2
 8009844:	d01f      	beq.n	8009886 <HAL_GPIO_Init+0x21e>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	4a4f      	ldr	r2, [pc, #316]	; (8009988 <HAL_GPIO_Init+0x320>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d019      	beq.n	8009882 <HAL_GPIO_Init+0x21a>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	4a4e      	ldr	r2, [pc, #312]	; (800998c <HAL_GPIO_Init+0x324>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d013      	beq.n	800987e <HAL_GPIO_Init+0x216>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	4a4d      	ldr	r2, [pc, #308]	; (8009990 <HAL_GPIO_Init+0x328>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d00d      	beq.n	800987a <HAL_GPIO_Init+0x212>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	4a4c      	ldr	r2, [pc, #304]	; (8009994 <HAL_GPIO_Init+0x32c>)
 8009862:	4293      	cmp	r3, r2
 8009864:	d007      	beq.n	8009876 <HAL_GPIO_Init+0x20e>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	4a4b      	ldr	r2, [pc, #300]	; (8009998 <HAL_GPIO_Init+0x330>)
 800986a:	4293      	cmp	r3, r2
 800986c:	d101      	bne.n	8009872 <HAL_GPIO_Init+0x20a>
 800986e:	2307      	movs	r3, #7
 8009870:	e00e      	b.n	8009890 <HAL_GPIO_Init+0x228>
 8009872:	2308      	movs	r3, #8
 8009874:	e00c      	b.n	8009890 <HAL_GPIO_Init+0x228>
 8009876:	2306      	movs	r3, #6
 8009878:	e00a      	b.n	8009890 <HAL_GPIO_Init+0x228>
 800987a:	2305      	movs	r3, #5
 800987c:	e008      	b.n	8009890 <HAL_GPIO_Init+0x228>
 800987e:	2304      	movs	r3, #4
 8009880:	e006      	b.n	8009890 <HAL_GPIO_Init+0x228>
 8009882:	2303      	movs	r3, #3
 8009884:	e004      	b.n	8009890 <HAL_GPIO_Init+0x228>
 8009886:	2302      	movs	r3, #2
 8009888:	e002      	b.n	8009890 <HAL_GPIO_Init+0x228>
 800988a:	2301      	movs	r3, #1
 800988c:	e000      	b.n	8009890 <HAL_GPIO_Init+0x228>
 800988e:	2300      	movs	r3, #0
 8009890:	69fa      	ldr	r2, [r7, #28]
 8009892:	f002 0203 	and.w	r2, r2, #3
 8009896:	0092      	lsls	r2, r2, #2
 8009898:	4093      	lsls	r3, r2
 800989a:	69ba      	ldr	r2, [r7, #24]
 800989c:	4313      	orrs	r3, r2
 800989e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80098a0:	4935      	ldr	r1, [pc, #212]	; (8009978 <HAL_GPIO_Init+0x310>)
 80098a2:	69fb      	ldr	r3, [r7, #28]
 80098a4:	089b      	lsrs	r3, r3, #2
 80098a6:	3302      	adds	r3, #2
 80098a8:	69ba      	ldr	r2, [r7, #24]
 80098aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80098ae:	4b3b      	ldr	r3, [pc, #236]	; (800999c <HAL_GPIO_Init+0x334>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	43db      	mvns	r3, r3
 80098b8:	69ba      	ldr	r2, [r7, #24]
 80098ba:	4013      	ands	r3, r2
 80098bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	685b      	ldr	r3, [r3, #4]
 80098c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d003      	beq.n	80098d2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80098ca:	69ba      	ldr	r2, [r7, #24]
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	4313      	orrs	r3, r2
 80098d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80098d2:	4a32      	ldr	r2, [pc, #200]	; (800999c <HAL_GPIO_Init+0x334>)
 80098d4:	69bb      	ldr	r3, [r7, #24]
 80098d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80098d8:	4b30      	ldr	r3, [pc, #192]	; (800999c <HAL_GPIO_Init+0x334>)
 80098da:	685b      	ldr	r3, [r3, #4]
 80098dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	43db      	mvns	r3, r3
 80098e2:	69ba      	ldr	r2, [r7, #24]
 80098e4:	4013      	ands	r3, r2
 80098e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d003      	beq.n	80098fc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80098f4:	69ba      	ldr	r2, [r7, #24]
 80098f6:	693b      	ldr	r3, [r7, #16]
 80098f8:	4313      	orrs	r3, r2
 80098fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80098fc:	4a27      	ldr	r2, [pc, #156]	; (800999c <HAL_GPIO_Init+0x334>)
 80098fe:	69bb      	ldr	r3, [r7, #24]
 8009900:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8009902:	4b26      	ldr	r3, [pc, #152]	; (800999c <HAL_GPIO_Init+0x334>)
 8009904:	689b      	ldr	r3, [r3, #8]
 8009906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	43db      	mvns	r3, r3
 800990c:	69ba      	ldr	r2, [r7, #24]
 800990e:	4013      	ands	r3, r2
 8009910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009912:	683b      	ldr	r3, [r7, #0]
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800991a:	2b00      	cmp	r3, #0
 800991c:	d003      	beq.n	8009926 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800991e:	69ba      	ldr	r2, [r7, #24]
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	4313      	orrs	r3, r2
 8009924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009926:	4a1d      	ldr	r2, [pc, #116]	; (800999c <HAL_GPIO_Init+0x334>)
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800992c:	4b1b      	ldr	r3, [pc, #108]	; (800999c <HAL_GPIO_Init+0x334>)
 800992e:	68db      	ldr	r3, [r3, #12]
 8009930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009932:	693b      	ldr	r3, [r7, #16]
 8009934:	43db      	mvns	r3, r3
 8009936:	69ba      	ldr	r2, [r7, #24]
 8009938:	4013      	ands	r3, r2
 800993a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	685b      	ldr	r3, [r3, #4]
 8009940:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009944:	2b00      	cmp	r3, #0
 8009946:	d003      	beq.n	8009950 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8009948:	69ba      	ldr	r2, [r7, #24]
 800994a:	693b      	ldr	r3, [r7, #16]
 800994c:	4313      	orrs	r3, r2
 800994e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8009950:	4a12      	ldr	r2, [pc, #72]	; (800999c <HAL_GPIO_Init+0x334>)
 8009952:	69bb      	ldr	r3, [r7, #24]
 8009954:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009956:	69fb      	ldr	r3, [r7, #28]
 8009958:	3301      	adds	r3, #1
 800995a:	61fb      	str	r3, [r7, #28]
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	2b0f      	cmp	r3, #15
 8009960:	f67f ae90 	bls.w	8009684 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8009964:	bf00      	nop
 8009966:	bf00      	nop
 8009968:	3724      	adds	r7, #36	; 0x24
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr
 8009972:	bf00      	nop
 8009974:	40023800 	.word	0x40023800
 8009978:	40013800 	.word	0x40013800
 800997c:	40020000 	.word	0x40020000
 8009980:	40020400 	.word	0x40020400
 8009984:	40020800 	.word	0x40020800
 8009988:	40020c00 	.word	0x40020c00
 800998c:	40021000 	.word	0x40021000
 8009990:	40021400 	.word	0x40021400
 8009994:	40021800 	.word	0x40021800
 8009998:	40021c00 	.word	0x40021c00
 800999c:	40013c00 	.word	0x40013c00

080099a0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80099a0:	b480      	push	{r7}
 80099a2:	b087      	sub	sp, #28
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
 80099a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80099aa:	2300      	movs	r3, #0
 80099ac:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80099ae:	2300      	movs	r3, #0
 80099b0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80099b2:	2300      	movs	r3, #0
 80099b4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80099b6:	2300      	movs	r3, #0
 80099b8:	617b      	str	r3, [r7, #20]
 80099ba:	e0cd      	b.n	8009b58 <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80099bc:	2201      	movs	r2, #1
 80099be:	697b      	ldr	r3, [r7, #20]
 80099c0:	fa02 f303 	lsl.w	r3, r2, r3
 80099c4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80099c6:	683a      	ldr	r2, [r7, #0]
 80099c8:	693b      	ldr	r3, [r7, #16]
 80099ca:	4013      	ands	r3, r2
 80099cc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80099ce:	68fa      	ldr	r2, [r7, #12]
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	429a      	cmp	r2, r3
 80099d4:	f040 80bd 	bne.w	8009b52 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80099d8:	4a65      	ldr	r2, [pc, #404]	; (8009b70 <HAL_GPIO_DeInit+0x1d0>)
 80099da:	697b      	ldr	r3, [r7, #20]
 80099dc:	089b      	lsrs	r3, r3, #2
 80099de:	3302      	adds	r3, #2
 80099e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099e4:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	f003 0303 	and.w	r3, r3, #3
 80099ec:	009b      	lsls	r3, r3, #2
 80099ee:	220f      	movs	r2, #15
 80099f0:	fa02 f303 	lsl.w	r3, r2, r3
 80099f4:	68ba      	ldr	r2, [r7, #8]
 80099f6:	4013      	ands	r3, r2
 80099f8:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	4a5d      	ldr	r2, [pc, #372]	; (8009b74 <HAL_GPIO_DeInit+0x1d4>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d02b      	beq.n	8009a5a <HAL_GPIO_DeInit+0xba>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	4a5c      	ldr	r2, [pc, #368]	; (8009b78 <HAL_GPIO_DeInit+0x1d8>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d025      	beq.n	8009a56 <HAL_GPIO_DeInit+0xb6>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	4a5b      	ldr	r2, [pc, #364]	; (8009b7c <HAL_GPIO_DeInit+0x1dc>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d01f      	beq.n	8009a52 <HAL_GPIO_DeInit+0xb2>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	4a5a      	ldr	r2, [pc, #360]	; (8009b80 <HAL_GPIO_DeInit+0x1e0>)
 8009a16:	4293      	cmp	r3, r2
 8009a18:	d019      	beq.n	8009a4e <HAL_GPIO_DeInit+0xae>
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	4a59      	ldr	r2, [pc, #356]	; (8009b84 <HAL_GPIO_DeInit+0x1e4>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d013      	beq.n	8009a4a <HAL_GPIO_DeInit+0xaa>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	4a58      	ldr	r2, [pc, #352]	; (8009b88 <HAL_GPIO_DeInit+0x1e8>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d00d      	beq.n	8009a46 <HAL_GPIO_DeInit+0xa6>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	4a57      	ldr	r2, [pc, #348]	; (8009b8c <HAL_GPIO_DeInit+0x1ec>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d007      	beq.n	8009a42 <HAL_GPIO_DeInit+0xa2>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	4a56      	ldr	r2, [pc, #344]	; (8009b90 <HAL_GPIO_DeInit+0x1f0>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d101      	bne.n	8009a3e <HAL_GPIO_DeInit+0x9e>
 8009a3a:	2307      	movs	r3, #7
 8009a3c:	e00e      	b.n	8009a5c <HAL_GPIO_DeInit+0xbc>
 8009a3e:	2308      	movs	r3, #8
 8009a40:	e00c      	b.n	8009a5c <HAL_GPIO_DeInit+0xbc>
 8009a42:	2306      	movs	r3, #6
 8009a44:	e00a      	b.n	8009a5c <HAL_GPIO_DeInit+0xbc>
 8009a46:	2305      	movs	r3, #5
 8009a48:	e008      	b.n	8009a5c <HAL_GPIO_DeInit+0xbc>
 8009a4a:	2304      	movs	r3, #4
 8009a4c:	e006      	b.n	8009a5c <HAL_GPIO_DeInit+0xbc>
 8009a4e:	2303      	movs	r3, #3
 8009a50:	e004      	b.n	8009a5c <HAL_GPIO_DeInit+0xbc>
 8009a52:	2302      	movs	r3, #2
 8009a54:	e002      	b.n	8009a5c <HAL_GPIO_DeInit+0xbc>
 8009a56:	2301      	movs	r3, #1
 8009a58:	e000      	b.n	8009a5c <HAL_GPIO_DeInit+0xbc>
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	697a      	ldr	r2, [r7, #20]
 8009a5e:	f002 0203 	and.w	r2, r2, #3
 8009a62:	0092      	lsls	r2, r2, #2
 8009a64:	4093      	lsls	r3, r2
 8009a66:	68ba      	ldr	r2, [r7, #8]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d132      	bne.n	8009ad2 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8009a6c:	4b49      	ldr	r3, [pc, #292]	; (8009b94 <HAL_GPIO_DeInit+0x1f4>)
 8009a6e:	681a      	ldr	r2, [r3, #0]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	43db      	mvns	r3, r3
 8009a74:	4947      	ldr	r1, [pc, #284]	; (8009b94 <HAL_GPIO_DeInit+0x1f4>)
 8009a76:	4013      	ands	r3, r2
 8009a78:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8009a7a:	4b46      	ldr	r3, [pc, #280]	; (8009b94 <HAL_GPIO_DeInit+0x1f4>)
 8009a7c:	685a      	ldr	r2, [r3, #4]
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	43db      	mvns	r3, r3
 8009a82:	4944      	ldr	r1, [pc, #272]	; (8009b94 <HAL_GPIO_DeInit+0x1f4>)
 8009a84:	4013      	ands	r3, r2
 8009a86:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8009a88:	4b42      	ldr	r3, [pc, #264]	; (8009b94 <HAL_GPIO_DeInit+0x1f4>)
 8009a8a:	689a      	ldr	r2, [r3, #8]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	43db      	mvns	r3, r3
 8009a90:	4940      	ldr	r1, [pc, #256]	; (8009b94 <HAL_GPIO_DeInit+0x1f4>)
 8009a92:	4013      	ands	r3, r2
 8009a94:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8009a96:	4b3f      	ldr	r3, [pc, #252]	; (8009b94 <HAL_GPIO_DeInit+0x1f4>)
 8009a98:	68da      	ldr	r2, [r3, #12]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	43db      	mvns	r3, r3
 8009a9e:	493d      	ldr	r1, [pc, #244]	; (8009b94 <HAL_GPIO_DeInit+0x1f4>)
 8009aa0:	4013      	ands	r3, r2
 8009aa2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	f003 0303 	and.w	r3, r3, #3
 8009aaa:	009b      	lsls	r3, r3, #2
 8009aac:	220f      	movs	r2, #15
 8009aae:	fa02 f303 	lsl.w	r3, r2, r3
 8009ab2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8009ab4:	4a2e      	ldr	r2, [pc, #184]	; (8009b70 <HAL_GPIO_DeInit+0x1d0>)
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	089b      	lsrs	r3, r3, #2
 8009aba:	3302      	adds	r3, #2
 8009abc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009ac0:	68bb      	ldr	r3, [r7, #8]
 8009ac2:	43da      	mvns	r2, r3
 8009ac4:	482a      	ldr	r0, [pc, #168]	; (8009b70 <HAL_GPIO_DeInit+0x1d0>)
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	089b      	lsrs	r3, r3, #2
 8009aca:	400a      	ands	r2, r1
 8009acc:	3302      	adds	r3, #2
 8009ace:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	697b      	ldr	r3, [r7, #20]
 8009ad8:	005b      	lsls	r3, r3, #1
 8009ada:	2103      	movs	r1, #3
 8009adc:	fa01 f303 	lsl.w	r3, r1, r3
 8009ae0:	43db      	mvns	r3, r3
 8009ae2:	401a      	ands	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	08da      	lsrs	r2, r3, #3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	3208      	adds	r2, #8
 8009af0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009af4:	697b      	ldr	r3, [r7, #20]
 8009af6:	f003 0307 	and.w	r3, r3, #7
 8009afa:	009b      	lsls	r3, r3, #2
 8009afc:	220f      	movs	r2, #15
 8009afe:	fa02 f303 	lsl.w	r3, r2, r3
 8009b02:	43db      	mvns	r3, r3
 8009b04:	697a      	ldr	r2, [r7, #20]
 8009b06:	08d2      	lsrs	r2, r2, #3
 8009b08:	4019      	ands	r1, r3
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	3208      	adds	r2, #8
 8009b0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	68da      	ldr	r2, [r3, #12]
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	005b      	lsls	r3, r3, #1
 8009b1a:	2103      	movs	r1, #3
 8009b1c:	fa01 f303 	lsl.w	r3, r1, r3
 8009b20:	43db      	mvns	r3, r3
 8009b22:	401a      	ands	r2, r3
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	685a      	ldr	r2, [r3, #4]
 8009b2c:	2101      	movs	r1, #1
 8009b2e:	697b      	ldr	r3, [r7, #20]
 8009b30:	fa01 f303 	lsl.w	r3, r1, r3
 8009b34:	43db      	mvns	r3, r3
 8009b36:	401a      	ands	r2, r3
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	689a      	ldr	r2, [r3, #8]
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	005b      	lsls	r3, r3, #1
 8009b44:	2103      	movs	r1, #3
 8009b46:	fa01 f303 	lsl.w	r3, r1, r3
 8009b4a:	43db      	mvns	r3, r3
 8009b4c:	401a      	ands	r2, r3
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8009b52:	697b      	ldr	r3, [r7, #20]
 8009b54:	3301      	adds	r3, #1
 8009b56:	617b      	str	r3, [r7, #20]
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	2b0f      	cmp	r3, #15
 8009b5c:	f67f af2e 	bls.w	80099bc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8009b60:	bf00      	nop
 8009b62:	bf00      	nop
 8009b64:	371c      	adds	r7, #28
 8009b66:	46bd      	mov	sp, r7
 8009b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6c:	4770      	bx	lr
 8009b6e:	bf00      	nop
 8009b70:	40013800 	.word	0x40013800
 8009b74:	40020000 	.word	0x40020000
 8009b78:	40020400 	.word	0x40020400
 8009b7c:	40020800 	.word	0x40020800
 8009b80:	40020c00 	.word	0x40020c00
 8009b84:	40021000 	.word	0x40021000
 8009b88:	40021400 	.word	0x40021400
 8009b8c:	40021800 	.word	0x40021800
 8009b90:	40021c00 	.word	0x40021c00
 8009b94:	40013c00 	.word	0x40013c00

08009b98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b085      	sub	sp, #20
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	691a      	ldr	r2, [r3, #16]
 8009ba8:	887b      	ldrh	r3, [r7, #2]
 8009baa:	4013      	ands	r3, r2
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d002      	beq.n	8009bb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009bb0:	2301      	movs	r3, #1
 8009bb2:	73fb      	strb	r3, [r7, #15]
 8009bb4:	e001      	b.n	8009bba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009bba:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3714      	adds	r7, #20
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr

08009bc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009bc8:	b480      	push	{r7}
 8009bca:	b083      	sub	sp, #12
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	807b      	strh	r3, [r7, #2]
 8009bd4:	4613      	mov	r3, r2
 8009bd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8009bd8:	787b      	ldrb	r3, [r7, #1]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d003      	beq.n	8009be6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009bde:	887a      	ldrh	r2, [r7, #2]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009be4:	e003      	b.n	8009bee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8009be6:	887b      	ldrh	r3, [r7, #2]
 8009be8:	041a      	lsls	r2, r3, #16
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	619a      	str	r2, [r3, #24]
}
 8009bee:	bf00      	nop
 8009bf0:	370c      	adds	r7, #12
 8009bf2:	46bd      	mov	sp, r7
 8009bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bf8:	4770      	bx	lr
	...

08009bfc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009bfc:	b580      	push	{r7, lr}
 8009bfe:	b086      	sub	sp, #24
 8009c00:	af00      	add	r7, sp, #0
 8009c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d101      	bne.n	8009c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	e264      	b.n	800a0d8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	f003 0301 	and.w	r3, r3, #1
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d075      	beq.n	8009d06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009c1a:	4ba3      	ldr	r3, [pc, #652]	; (8009ea8 <HAL_RCC_OscConfig+0x2ac>)
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	f003 030c 	and.w	r3, r3, #12
 8009c22:	2b04      	cmp	r3, #4
 8009c24:	d00c      	beq.n	8009c40 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009c26:	4ba0      	ldr	r3, [pc, #640]	; (8009ea8 <HAL_RCC_OscConfig+0x2ac>)
 8009c28:	689b      	ldr	r3, [r3, #8]
 8009c2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8009c2e:	2b08      	cmp	r3, #8
 8009c30:	d112      	bne.n	8009c58 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8009c32:	4b9d      	ldr	r3, [pc, #628]	; (8009ea8 <HAL_RCC_OscConfig+0x2ac>)
 8009c34:	685b      	ldr	r3, [r3, #4]
 8009c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c3e:	d10b      	bne.n	8009c58 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009c40:	4b99      	ldr	r3, [pc, #612]	; (8009ea8 <HAL_RCC_OscConfig+0x2ac>)
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d05b      	beq.n	8009d04 <HAL_RCC_OscConfig+0x108>
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d157      	bne.n	8009d04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009c54:	2301      	movs	r3, #1
 8009c56:	e23f      	b.n	800a0d8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c60:	d106      	bne.n	8009c70 <HAL_RCC_OscConfig+0x74>
 8009c62:	4b91      	ldr	r3, [pc, #580]	; (8009ea8 <HAL_RCC_OscConfig+0x2ac>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	4a90      	ldr	r2, [pc, #576]	; (8009ea8 <HAL_RCC_OscConfig+0x2ac>)
 8009c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c6c:	6013      	str	r3, [r2, #0]
 8009c6e:	e01d      	b.n	8009cac <HAL_RCC_OscConfig+0xb0>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	685b      	ldr	r3, [r3, #4]
 8009c74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009c78:	d10c      	bne.n	8009c94 <HAL_RCC_OscConfig+0x98>
 8009c7a:	4b8b      	ldr	r3, [pc, #556]	; (8009ea8 <HAL_RCC_OscConfig+0x2ac>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a8a      	ldr	r2, [pc, #552]	; (8009ea8 <HAL_RCC_OscConfig+0x2ac>)
 8009c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009c84:	6013      	str	r3, [r2, #0]
 8009c86:	4b88      	ldr	r3, [pc, #544]	; (8009ea8 <HAL_RCC_OscConfig+0x2ac>)
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	4a87      	ldr	r2, [pc, #540]	; (8009ea8 <HAL_RCC_OscConfig+0x2ac>)
 8009c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009c90:	6013      	str	r3, [r2, #0]
 8009c92:	e00b      	b.n	8009cac <HAL_RCC_OscConfig+0xb0>
 8009c94:	4b84      	ldr	r3, [pc, #528]	; (8009ea8 <HAL_RCC_OscConfig+0x2ac>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	4a83      	ldr	r2, [pc, #524]	; (8009ea8 <HAL_RCC_OscConfig+0x2ac>)
 8009c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009c9e:	6013      	str	r3, [r2, #0]
 8009ca0:	4b81      	ldr	r3, [pc, #516]	; (8009ea8 <HAL_RCC_OscConfig+0x2ac>)
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	4a80      	ldr	r2, [pc, #512]	; (8009ea8 <HAL_RCC_OscConfig+0x2ac>)
 8009ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009caa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	685b      	ldr	r3, [r3, #4]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d013      	beq.n	8009cdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009cb4:	f7fd f986 	bl	8006fc4 <HAL_GetTick>
 8009cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009cba:	e008      	b.n	8009cce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009cbc:	f7fd f982 	bl	8006fc4 <HAL_GetTick>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	1ad3      	subs	r3, r2, r3
 8009cc6:	2b64      	cmp	r3, #100	; 0x64
 8009cc8:	d901      	bls.n	8009cce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009cca:	2303      	movs	r3, #3
 8009ccc:	e204      	b.n	800a0d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009cce:	4b76      	ldr	r3, [pc, #472]	; (8009ea8 <HAL_RCC_OscConfig+0x2ac>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d0f0      	beq.n	8009cbc <HAL_RCC_OscConfig+0xc0>
 8009cda:	e014      	b.n	8009d06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009cdc:	f7fd f972 	bl	8006fc4 <HAL_GetTick>
 8009ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009ce2:	e008      	b.n	8009cf6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009ce4:	f7fd f96e 	bl	8006fc4 <HAL_GetTick>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	693b      	ldr	r3, [r7, #16]
 8009cec:	1ad3      	subs	r3, r2, r3
 8009cee:	2b64      	cmp	r3, #100	; 0x64
 8009cf0:	d901      	bls.n	8009cf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009cf2:	2303      	movs	r3, #3
 8009cf4:	e1f0      	b.n	800a0d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009cf6:	4b6c      	ldr	r3, [pc, #432]	; (8009ea8 <HAL_RCC_OscConfig+0x2ac>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d1f0      	bne.n	8009ce4 <HAL_RCC_OscConfig+0xe8>
 8009d02:	e000      	b.n	8009d06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	f003 0302 	and.w	r3, r3, #2
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d063      	beq.n	8009dda <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009d12:	4b65      	ldr	r3, [pc, #404]	; (8009ea8 <HAL_RCC_OscConfig+0x2ac>)
 8009d14:	689b      	ldr	r3, [r3, #8]
 8009d16:	f003 030c 	and.w	r3, r3, #12
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d00b      	beq.n	8009d36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009d1e:	4b62      	ldr	r3, [pc, #392]	; (8009ea8 <HAL_RCC_OscConfig+0x2ac>)
 8009d20:	689b      	ldr	r3, [r3, #8]
 8009d22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8009d26:	2b08      	cmp	r3, #8
 8009d28:	d11c      	bne.n	8009d64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009d2a:	4b5f      	ldr	r3, [pc, #380]	; (8009ea8 <HAL_RCC_OscConfig+0x2ac>)
 8009d2c:	685b      	ldr	r3, [r3, #4]
 8009d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d116      	bne.n	8009d64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009d36:	4b5c      	ldr	r3, [pc, #368]	; (8009ea8 <HAL_RCC_OscConfig+0x2ac>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f003 0302 	and.w	r3, r3, #2
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d005      	beq.n	8009d4e <HAL_RCC_OscConfig+0x152>
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	68db      	ldr	r3, [r3, #12]
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d001      	beq.n	8009d4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009d4a:	2301      	movs	r3, #1
 8009d4c:	e1c4      	b.n	800a0d8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d4e:	4b56      	ldr	r3, [pc, #344]	; (8009ea8 <HAL_RCC_OscConfig+0x2ac>)
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	691b      	ldr	r3, [r3, #16]
 8009d5a:	00db      	lsls	r3, r3, #3
 8009d5c:	4952      	ldr	r1, [pc, #328]	; (8009ea8 <HAL_RCC_OscConfig+0x2ac>)
 8009d5e:	4313      	orrs	r3, r2
 8009d60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009d62:	e03a      	b.n	8009dda <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	68db      	ldr	r3, [r3, #12]
 8009d68:	2b00      	cmp	r3, #0
 8009d6a:	d020      	beq.n	8009dae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009d6c:	4b4f      	ldr	r3, [pc, #316]	; (8009eac <HAL_RCC_OscConfig+0x2b0>)
 8009d6e:	2201      	movs	r2, #1
 8009d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d72:	f7fd f927 	bl	8006fc4 <HAL_GetTick>
 8009d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d78:	e008      	b.n	8009d8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009d7a:	f7fd f923 	bl	8006fc4 <HAL_GetTick>
 8009d7e:	4602      	mov	r2, r0
 8009d80:	693b      	ldr	r3, [r7, #16]
 8009d82:	1ad3      	subs	r3, r2, r3
 8009d84:	2b02      	cmp	r3, #2
 8009d86:	d901      	bls.n	8009d8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009d88:	2303      	movs	r3, #3
 8009d8a:	e1a5      	b.n	800a0d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009d8c:	4b46      	ldr	r3, [pc, #280]	; (8009ea8 <HAL_RCC_OscConfig+0x2ac>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f003 0302 	and.w	r3, r3, #2
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d0f0      	beq.n	8009d7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009d98:	4b43      	ldr	r3, [pc, #268]	; (8009ea8 <HAL_RCC_OscConfig+0x2ac>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	691b      	ldr	r3, [r3, #16]
 8009da4:	00db      	lsls	r3, r3, #3
 8009da6:	4940      	ldr	r1, [pc, #256]	; (8009ea8 <HAL_RCC_OscConfig+0x2ac>)
 8009da8:	4313      	orrs	r3, r2
 8009daa:	600b      	str	r3, [r1, #0]
 8009dac:	e015      	b.n	8009dda <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009dae:	4b3f      	ldr	r3, [pc, #252]	; (8009eac <HAL_RCC_OscConfig+0x2b0>)
 8009db0:	2200      	movs	r2, #0
 8009db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009db4:	f7fd f906 	bl	8006fc4 <HAL_GetTick>
 8009db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009dba:	e008      	b.n	8009dce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009dbc:	f7fd f902 	bl	8006fc4 <HAL_GetTick>
 8009dc0:	4602      	mov	r2, r0
 8009dc2:	693b      	ldr	r3, [r7, #16]
 8009dc4:	1ad3      	subs	r3, r2, r3
 8009dc6:	2b02      	cmp	r3, #2
 8009dc8:	d901      	bls.n	8009dce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009dca:	2303      	movs	r3, #3
 8009dcc:	e184      	b.n	800a0d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009dce:	4b36      	ldr	r3, [pc, #216]	; (8009ea8 <HAL_RCC_OscConfig+0x2ac>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	f003 0302 	and.w	r3, r3, #2
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d1f0      	bne.n	8009dbc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f003 0308 	and.w	r3, r3, #8
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d030      	beq.n	8009e48 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	695b      	ldr	r3, [r3, #20]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d016      	beq.n	8009e1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009dee:	4b30      	ldr	r3, [pc, #192]	; (8009eb0 <HAL_RCC_OscConfig+0x2b4>)
 8009df0:	2201      	movs	r2, #1
 8009df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009df4:	f7fd f8e6 	bl	8006fc4 <HAL_GetTick>
 8009df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009dfa:	e008      	b.n	8009e0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009dfc:	f7fd f8e2 	bl	8006fc4 <HAL_GetTick>
 8009e00:	4602      	mov	r2, r0
 8009e02:	693b      	ldr	r3, [r7, #16]
 8009e04:	1ad3      	subs	r3, r2, r3
 8009e06:	2b02      	cmp	r3, #2
 8009e08:	d901      	bls.n	8009e0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8009e0a:	2303      	movs	r3, #3
 8009e0c:	e164      	b.n	800a0d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009e0e:	4b26      	ldr	r3, [pc, #152]	; (8009ea8 <HAL_RCC_OscConfig+0x2ac>)
 8009e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e12:	f003 0302 	and.w	r3, r3, #2
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d0f0      	beq.n	8009dfc <HAL_RCC_OscConfig+0x200>
 8009e1a:	e015      	b.n	8009e48 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009e1c:	4b24      	ldr	r3, [pc, #144]	; (8009eb0 <HAL_RCC_OscConfig+0x2b4>)
 8009e1e:	2200      	movs	r2, #0
 8009e20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009e22:	f7fd f8cf 	bl	8006fc4 <HAL_GetTick>
 8009e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009e28:	e008      	b.n	8009e3c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009e2a:	f7fd f8cb 	bl	8006fc4 <HAL_GetTick>
 8009e2e:	4602      	mov	r2, r0
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	1ad3      	subs	r3, r2, r3
 8009e34:	2b02      	cmp	r3, #2
 8009e36:	d901      	bls.n	8009e3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009e38:	2303      	movs	r3, #3
 8009e3a:	e14d      	b.n	800a0d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009e3c:	4b1a      	ldr	r3, [pc, #104]	; (8009ea8 <HAL_RCC_OscConfig+0x2ac>)
 8009e3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e40:	f003 0302 	and.w	r3, r3, #2
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d1f0      	bne.n	8009e2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	f003 0304 	and.w	r3, r3, #4
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	f000 80a0 	beq.w	8009f96 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009e56:	2300      	movs	r3, #0
 8009e58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009e5a:	4b13      	ldr	r3, [pc, #76]	; (8009ea8 <HAL_RCC_OscConfig+0x2ac>)
 8009e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d10f      	bne.n	8009e86 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009e66:	2300      	movs	r3, #0
 8009e68:	60bb      	str	r3, [r7, #8]
 8009e6a:	4b0f      	ldr	r3, [pc, #60]	; (8009ea8 <HAL_RCC_OscConfig+0x2ac>)
 8009e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e6e:	4a0e      	ldr	r2, [pc, #56]	; (8009ea8 <HAL_RCC_OscConfig+0x2ac>)
 8009e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009e74:	6413      	str	r3, [r2, #64]	; 0x40
 8009e76:	4b0c      	ldr	r3, [pc, #48]	; (8009ea8 <HAL_RCC_OscConfig+0x2ac>)
 8009e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e7e:	60bb      	str	r3, [r7, #8]
 8009e80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009e82:	2301      	movs	r3, #1
 8009e84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009e86:	4b0b      	ldr	r3, [pc, #44]	; (8009eb4 <HAL_RCC_OscConfig+0x2b8>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d121      	bne.n	8009ed6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009e92:	4b08      	ldr	r3, [pc, #32]	; (8009eb4 <HAL_RCC_OscConfig+0x2b8>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a07      	ldr	r2, [pc, #28]	; (8009eb4 <HAL_RCC_OscConfig+0x2b8>)
 8009e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009e9e:	f7fd f891 	bl	8006fc4 <HAL_GetTick>
 8009ea2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009ea4:	e011      	b.n	8009eca <HAL_RCC_OscConfig+0x2ce>
 8009ea6:	bf00      	nop
 8009ea8:	40023800 	.word	0x40023800
 8009eac:	42470000 	.word	0x42470000
 8009eb0:	42470e80 	.word	0x42470e80
 8009eb4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009eb8:	f7fd f884 	bl	8006fc4 <HAL_GetTick>
 8009ebc:	4602      	mov	r2, r0
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	1ad3      	subs	r3, r2, r3
 8009ec2:	2b02      	cmp	r3, #2
 8009ec4:	d901      	bls.n	8009eca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8009ec6:	2303      	movs	r3, #3
 8009ec8:	e106      	b.n	800a0d8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009eca:	4b85      	ldr	r3, [pc, #532]	; (800a0e0 <HAL_RCC_OscConfig+0x4e4>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d0f0      	beq.n	8009eb8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	689b      	ldr	r3, [r3, #8]
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d106      	bne.n	8009eec <HAL_RCC_OscConfig+0x2f0>
 8009ede:	4b81      	ldr	r3, [pc, #516]	; (800a0e4 <HAL_RCC_OscConfig+0x4e8>)
 8009ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ee2:	4a80      	ldr	r2, [pc, #512]	; (800a0e4 <HAL_RCC_OscConfig+0x4e8>)
 8009ee4:	f043 0301 	orr.w	r3, r3, #1
 8009ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8009eea:	e01c      	b.n	8009f26 <HAL_RCC_OscConfig+0x32a>
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	689b      	ldr	r3, [r3, #8]
 8009ef0:	2b05      	cmp	r3, #5
 8009ef2:	d10c      	bne.n	8009f0e <HAL_RCC_OscConfig+0x312>
 8009ef4:	4b7b      	ldr	r3, [pc, #492]	; (800a0e4 <HAL_RCC_OscConfig+0x4e8>)
 8009ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ef8:	4a7a      	ldr	r2, [pc, #488]	; (800a0e4 <HAL_RCC_OscConfig+0x4e8>)
 8009efa:	f043 0304 	orr.w	r3, r3, #4
 8009efe:	6713      	str	r3, [r2, #112]	; 0x70
 8009f00:	4b78      	ldr	r3, [pc, #480]	; (800a0e4 <HAL_RCC_OscConfig+0x4e8>)
 8009f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f04:	4a77      	ldr	r2, [pc, #476]	; (800a0e4 <HAL_RCC_OscConfig+0x4e8>)
 8009f06:	f043 0301 	orr.w	r3, r3, #1
 8009f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8009f0c:	e00b      	b.n	8009f26 <HAL_RCC_OscConfig+0x32a>
 8009f0e:	4b75      	ldr	r3, [pc, #468]	; (800a0e4 <HAL_RCC_OscConfig+0x4e8>)
 8009f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f12:	4a74      	ldr	r2, [pc, #464]	; (800a0e4 <HAL_RCC_OscConfig+0x4e8>)
 8009f14:	f023 0301 	bic.w	r3, r3, #1
 8009f18:	6713      	str	r3, [r2, #112]	; 0x70
 8009f1a:	4b72      	ldr	r3, [pc, #456]	; (800a0e4 <HAL_RCC_OscConfig+0x4e8>)
 8009f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f1e:	4a71      	ldr	r2, [pc, #452]	; (800a0e4 <HAL_RCC_OscConfig+0x4e8>)
 8009f20:	f023 0304 	bic.w	r3, r3, #4
 8009f24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	689b      	ldr	r3, [r3, #8]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d015      	beq.n	8009f5a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f2e:	f7fd f849 	bl	8006fc4 <HAL_GetTick>
 8009f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009f34:	e00a      	b.n	8009f4c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009f36:	f7fd f845 	bl	8006fc4 <HAL_GetTick>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	1ad3      	subs	r3, r2, r3
 8009f40:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f44:	4293      	cmp	r3, r2
 8009f46:	d901      	bls.n	8009f4c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8009f48:	2303      	movs	r3, #3
 8009f4a:	e0c5      	b.n	800a0d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009f4c:	4b65      	ldr	r3, [pc, #404]	; (800a0e4 <HAL_RCC_OscConfig+0x4e8>)
 8009f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f50:	f003 0302 	and.w	r3, r3, #2
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d0ee      	beq.n	8009f36 <HAL_RCC_OscConfig+0x33a>
 8009f58:	e014      	b.n	8009f84 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009f5a:	f7fd f833 	bl	8006fc4 <HAL_GetTick>
 8009f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009f60:	e00a      	b.n	8009f78 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009f62:	f7fd f82f 	bl	8006fc4 <HAL_GetTick>
 8009f66:	4602      	mov	r2, r0
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	1ad3      	subs	r3, r2, r3
 8009f6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d901      	bls.n	8009f78 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8009f74:	2303      	movs	r3, #3
 8009f76:	e0af      	b.n	800a0d8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009f78:	4b5a      	ldr	r3, [pc, #360]	; (800a0e4 <HAL_RCC_OscConfig+0x4e8>)
 8009f7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f7c:	f003 0302 	and.w	r3, r3, #2
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d1ee      	bne.n	8009f62 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009f84:	7dfb      	ldrb	r3, [r7, #23]
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d105      	bne.n	8009f96 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009f8a:	4b56      	ldr	r3, [pc, #344]	; (800a0e4 <HAL_RCC_OscConfig+0x4e8>)
 8009f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f8e:	4a55      	ldr	r2, [pc, #340]	; (800a0e4 <HAL_RCC_OscConfig+0x4e8>)
 8009f90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	699b      	ldr	r3, [r3, #24]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	f000 809b 	beq.w	800a0d6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009fa0:	4b50      	ldr	r3, [pc, #320]	; (800a0e4 <HAL_RCC_OscConfig+0x4e8>)
 8009fa2:	689b      	ldr	r3, [r3, #8]
 8009fa4:	f003 030c 	and.w	r3, r3, #12
 8009fa8:	2b08      	cmp	r3, #8
 8009faa:	d05c      	beq.n	800a066 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	699b      	ldr	r3, [r3, #24]
 8009fb0:	2b02      	cmp	r3, #2
 8009fb2:	d141      	bne.n	800a038 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009fb4:	4b4c      	ldr	r3, [pc, #304]	; (800a0e8 <HAL_RCC_OscConfig+0x4ec>)
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009fba:	f7fd f803 	bl	8006fc4 <HAL_GetTick>
 8009fbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009fc0:	e008      	b.n	8009fd4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009fc2:	f7fc ffff 	bl	8006fc4 <HAL_GetTick>
 8009fc6:	4602      	mov	r2, r0
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	1ad3      	subs	r3, r2, r3
 8009fcc:	2b02      	cmp	r3, #2
 8009fce:	d901      	bls.n	8009fd4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8009fd0:	2303      	movs	r3, #3
 8009fd2:	e081      	b.n	800a0d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009fd4:	4b43      	ldr	r3, [pc, #268]	; (800a0e4 <HAL_RCC_OscConfig+0x4e8>)
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d1f0      	bne.n	8009fc2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	69da      	ldr	r2, [r3, #28]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	6a1b      	ldr	r3, [r3, #32]
 8009fe8:	431a      	orrs	r2, r3
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fee:	019b      	lsls	r3, r3, #6
 8009ff0:	431a      	orrs	r2, r3
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ff6:	085b      	lsrs	r3, r3, #1
 8009ff8:	3b01      	subs	r3, #1
 8009ffa:	041b      	lsls	r3, r3, #16
 8009ffc:	431a      	orrs	r2, r3
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a002:	061b      	lsls	r3, r3, #24
 800a004:	4937      	ldr	r1, [pc, #220]	; (800a0e4 <HAL_RCC_OscConfig+0x4e8>)
 800a006:	4313      	orrs	r3, r2
 800a008:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a00a:	4b37      	ldr	r3, [pc, #220]	; (800a0e8 <HAL_RCC_OscConfig+0x4ec>)
 800a00c:	2201      	movs	r2, #1
 800a00e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a010:	f7fc ffd8 	bl	8006fc4 <HAL_GetTick>
 800a014:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a016:	e008      	b.n	800a02a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a018:	f7fc ffd4 	bl	8006fc4 <HAL_GetTick>
 800a01c:	4602      	mov	r2, r0
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	1ad3      	subs	r3, r2, r3
 800a022:	2b02      	cmp	r3, #2
 800a024:	d901      	bls.n	800a02a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800a026:	2303      	movs	r3, #3
 800a028:	e056      	b.n	800a0d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a02a:	4b2e      	ldr	r3, [pc, #184]	; (800a0e4 <HAL_RCC_OscConfig+0x4e8>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a032:	2b00      	cmp	r3, #0
 800a034:	d0f0      	beq.n	800a018 <HAL_RCC_OscConfig+0x41c>
 800a036:	e04e      	b.n	800a0d6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a038:	4b2b      	ldr	r3, [pc, #172]	; (800a0e8 <HAL_RCC_OscConfig+0x4ec>)
 800a03a:	2200      	movs	r2, #0
 800a03c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a03e:	f7fc ffc1 	bl	8006fc4 <HAL_GetTick>
 800a042:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a044:	e008      	b.n	800a058 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a046:	f7fc ffbd 	bl	8006fc4 <HAL_GetTick>
 800a04a:	4602      	mov	r2, r0
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	1ad3      	subs	r3, r2, r3
 800a050:	2b02      	cmp	r3, #2
 800a052:	d901      	bls.n	800a058 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800a054:	2303      	movs	r3, #3
 800a056:	e03f      	b.n	800a0d8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a058:	4b22      	ldr	r3, [pc, #136]	; (800a0e4 <HAL_RCC_OscConfig+0x4e8>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a060:	2b00      	cmp	r3, #0
 800a062:	d1f0      	bne.n	800a046 <HAL_RCC_OscConfig+0x44a>
 800a064:	e037      	b.n	800a0d6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	699b      	ldr	r3, [r3, #24]
 800a06a:	2b01      	cmp	r3, #1
 800a06c:	d101      	bne.n	800a072 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800a06e:	2301      	movs	r3, #1
 800a070:	e032      	b.n	800a0d8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a072:	4b1c      	ldr	r3, [pc, #112]	; (800a0e4 <HAL_RCC_OscConfig+0x4e8>)
 800a074:	685b      	ldr	r3, [r3, #4]
 800a076:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	699b      	ldr	r3, [r3, #24]
 800a07c:	2b01      	cmp	r3, #1
 800a07e:	d028      	beq.n	800a0d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a08a:	429a      	cmp	r2, r3
 800a08c:	d121      	bne.n	800a0d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a098:	429a      	cmp	r2, r3
 800a09a:	d11a      	bne.n	800a0d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a09c:	68fa      	ldr	r2, [r7, #12]
 800a09e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a0a2:	4013      	ands	r3, r2
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a0a8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800a0aa:	4293      	cmp	r3, r2
 800a0ac:	d111      	bne.n	800a0d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0b8:	085b      	lsrs	r3, r3, #1
 800a0ba:	3b01      	subs	r3, #1
 800a0bc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d107      	bne.n	800a0d2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0cc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800a0ce:	429a      	cmp	r2, r3
 800a0d0:	d001      	beq.n	800a0d6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	e000      	b.n	800a0d8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800a0d6:	2300      	movs	r3, #0
}
 800a0d8:	4618      	mov	r0, r3
 800a0da:	3718      	adds	r7, #24
 800a0dc:	46bd      	mov	sp, r7
 800a0de:	bd80      	pop	{r7, pc}
 800a0e0:	40007000 	.word	0x40007000
 800a0e4:	40023800 	.word	0x40023800
 800a0e8:	42470060 	.word	0x42470060

0800a0ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b084      	sub	sp, #16
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
 800a0f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d101      	bne.n	800a100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	e0cc      	b.n	800a29a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a100:	4b68      	ldr	r3, [pc, #416]	; (800a2a4 <HAL_RCC_ClockConfig+0x1b8>)
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	f003 0307 	and.w	r3, r3, #7
 800a108:	683a      	ldr	r2, [r7, #0]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d90c      	bls.n	800a128 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a10e:	4b65      	ldr	r3, [pc, #404]	; (800a2a4 <HAL_RCC_ClockConfig+0x1b8>)
 800a110:	683a      	ldr	r2, [r7, #0]
 800a112:	b2d2      	uxtb	r2, r2
 800a114:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a116:	4b63      	ldr	r3, [pc, #396]	; (800a2a4 <HAL_RCC_ClockConfig+0x1b8>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f003 0307 	and.w	r3, r3, #7
 800a11e:	683a      	ldr	r2, [r7, #0]
 800a120:	429a      	cmp	r2, r3
 800a122:	d001      	beq.n	800a128 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a124:	2301      	movs	r3, #1
 800a126:	e0b8      	b.n	800a29a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f003 0302 	and.w	r3, r3, #2
 800a130:	2b00      	cmp	r3, #0
 800a132:	d020      	beq.n	800a176 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	f003 0304 	and.w	r3, r3, #4
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d005      	beq.n	800a14c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a140:	4b59      	ldr	r3, [pc, #356]	; (800a2a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a142:	689b      	ldr	r3, [r3, #8]
 800a144:	4a58      	ldr	r2, [pc, #352]	; (800a2a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a146:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a14a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	f003 0308 	and.w	r3, r3, #8
 800a154:	2b00      	cmp	r3, #0
 800a156:	d005      	beq.n	800a164 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a158:	4b53      	ldr	r3, [pc, #332]	; (800a2a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a15a:	689b      	ldr	r3, [r3, #8]
 800a15c:	4a52      	ldr	r2, [pc, #328]	; (800a2a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a15e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a162:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a164:	4b50      	ldr	r3, [pc, #320]	; (800a2a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a166:	689b      	ldr	r3, [r3, #8]
 800a168:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	689b      	ldr	r3, [r3, #8]
 800a170:	494d      	ldr	r1, [pc, #308]	; (800a2a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a172:	4313      	orrs	r3, r2
 800a174:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	f003 0301 	and.w	r3, r3, #1
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d044      	beq.n	800a20c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	2b01      	cmp	r3, #1
 800a188:	d107      	bne.n	800a19a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a18a:	4b47      	ldr	r3, [pc, #284]	; (800a2a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a192:	2b00      	cmp	r3, #0
 800a194:	d119      	bne.n	800a1ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a196:	2301      	movs	r3, #1
 800a198:	e07f      	b.n	800a29a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	2b02      	cmp	r3, #2
 800a1a0:	d003      	beq.n	800a1aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a1a6:	2b03      	cmp	r3, #3
 800a1a8:	d107      	bne.n	800a1ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a1aa:	4b3f      	ldr	r3, [pc, #252]	; (800a2a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d109      	bne.n	800a1ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a1b6:	2301      	movs	r3, #1
 800a1b8:	e06f      	b.n	800a29a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a1ba:	4b3b      	ldr	r3, [pc, #236]	; (800a2a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	f003 0302 	and.w	r3, r3, #2
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d101      	bne.n	800a1ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	e067      	b.n	800a29a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a1ca:	4b37      	ldr	r3, [pc, #220]	; (800a2a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a1cc:	689b      	ldr	r3, [r3, #8]
 800a1ce:	f023 0203 	bic.w	r2, r3, #3
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	4934      	ldr	r1, [pc, #208]	; (800a2a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a1dc:	f7fc fef2 	bl	8006fc4 <HAL_GetTick>
 800a1e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a1e2:	e00a      	b.n	800a1fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a1e4:	f7fc feee 	bl	8006fc4 <HAL_GetTick>
 800a1e8:	4602      	mov	r2, r0
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	1ad3      	subs	r3, r2, r3
 800a1ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d901      	bls.n	800a1fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a1f6:	2303      	movs	r3, #3
 800a1f8:	e04f      	b.n	800a29a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a1fa:	4b2b      	ldr	r3, [pc, #172]	; (800a2a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a1fc:	689b      	ldr	r3, [r3, #8]
 800a1fe:	f003 020c 	and.w	r2, r3, #12
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	009b      	lsls	r3, r3, #2
 800a208:	429a      	cmp	r2, r3
 800a20a:	d1eb      	bne.n	800a1e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a20c:	4b25      	ldr	r3, [pc, #148]	; (800a2a4 <HAL_RCC_ClockConfig+0x1b8>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f003 0307 	and.w	r3, r3, #7
 800a214:	683a      	ldr	r2, [r7, #0]
 800a216:	429a      	cmp	r2, r3
 800a218:	d20c      	bcs.n	800a234 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a21a:	4b22      	ldr	r3, [pc, #136]	; (800a2a4 <HAL_RCC_ClockConfig+0x1b8>)
 800a21c:	683a      	ldr	r2, [r7, #0]
 800a21e:	b2d2      	uxtb	r2, r2
 800a220:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a222:	4b20      	ldr	r3, [pc, #128]	; (800a2a4 <HAL_RCC_ClockConfig+0x1b8>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f003 0307 	and.w	r3, r3, #7
 800a22a:	683a      	ldr	r2, [r7, #0]
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d001      	beq.n	800a234 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800a230:	2301      	movs	r3, #1
 800a232:	e032      	b.n	800a29a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	f003 0304 	and.w	r3, r3, #4
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d008      	beq.n	800a252 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a240:	4b19      	ldr	r3, [pc, #100]	; (800a2a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a242:	689b      	ldr	r3, [r3, #8]
 800a244:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	4916      	ldr	r1, [pc, #88]	; (800a2a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a24e:	4313      	orrs	r3, r2
 800a250:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	f003 0308 	and.w	r3, r3, #8
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d009      	beq.n	800a272 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a25e:	4b12      	ldr	r3, [pc, #72]	; (800a2a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a260:	689b      	ldr	r3, [r3, #8]
 800a262:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	691b      	ldr	r3, [r3, #16]
 800a26a:	00db      	lsls	r3, r3, #3
 800a26c:	490e      	ldr	r1, [pc, #56]	; (800a2a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a26e:	4313      	orrs	r3, r2
 800a270:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a272:	f000 f889 	bl	800a388 <HAL_RCC_GetSysClockFreq>
 800a276:	4602      	mov	r2, r0
 800a278:	4b0b      	ldr	r3, [pc, #44]	; (800a2a8 <HAL_RCC_ClockConfig+0x1bc>)
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	091b      	lsrs	r3, r3, #4
 800a27e:	f003 030f 	and.w	r3, r3, #15
 800a282:	490a      	ldr	r1, [pc, #40]	; (800a2ac <HAL_RCC_ClockConfig+0x1c0>)
 800a284:	5ccb      	ldrb	r3, [r1, r3]
 800a286:	fa22 f303 	lsr.w	r3, r2, r3
 800a28a:	4a09      	ldr	r2, [pc, #36]	; (800a2b0 <HAL_RCC_ClockConfig+0x1c4>)
 800a28c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800a28e:	4b09      	ldr	r3, [pc, #36]	; (800a2b4 <HAL_RCC_ClockConfig+0x1c8>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	4618      	mov	r0, r3
 800a294:	f7fc f990 	bl	80065b8 <HAL_InitTick>

  return HAL_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	40023c00 	.word	0x40023c00
 800a2a8:	40023800 	.word	0x40023800
 800a2ac:	08026dec 	.word	0x08026dec
 800a2b0:	2000039c 	.word	0x2000039c
 800a2b4:	200003a0 	.word	0x200003a0

0800a2b8 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b08c      	sub	sp, #48	; 0x30
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	60f8      	str	r0, [r7, #12]
 800a2c0:	60b9      	str	r1, [r7, #8]
 800a2c2:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d129      	bne.n	800a31e <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	61bb      	str	r3, [r7, #24]
 800a2ce:	4b2b      	ldr	r3, [pc, #172]	; (800a37c <HAL_RCC_MCOConfig+0xc4>)
 800a2d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2d2:	4a2a      	ldr	r2, [pc, #168]	; (800a37c <HAL_RCC_MCOConfig+0xc4>)
 800a2d4:	f043 0301 	orr.w	r3, r3, #1
 800a2d8:	6313      	str	r3, [r2, #48]	; 0x30
 800a2da:	4b28      	ldr	r3, [pc, #160]	; (800a37c <HAL_RCC_MCOConfig+0xc4>)
 800a2dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2de:	f003 0301 	and.w	r3, r3, #1
 800a2e2:	61bb      	str	r3, [r7, #24]
 800a2e4:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 800a2e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a2ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a2ec:	2302      	movs	r3, #2
 800a2ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a2f0:	2303      	movs	r3, #3
 800a2f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a2fc:	f107 031c 	add.w	r3, r7, #28
 800a300:	4619      	mov	r1, r3
 800a302:	481f      	ldr	r0, [pc, #124]	; (800a380 <HAL_RCC_MCOConfig+0xc8>)
 800a304:	f7ff f9b0 	bl	8009668 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a308:	4b1c      	ldr	r3, [pc, #112]	; (800a37c <HAL_RCC_MCOConfig+0xc4>)
 800a30a:	689b      	ldr	r3, [r3, #8]
 800a30c:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 800a310:	68b9      	ldr	r1, [r7, #8]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	430b      	orrs	r3, r1
 800a316:	4919      	ldr	r1, [pc, #100]	; (800a37c <HAL_RCC_MCOConfig+0xc4>)
 800a318:	4313      	orrs	r3, r2
 800a31a:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 800a31c:	e029      	b.n	800a372 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 800a31e:	2300      	movs	r3, #0
 800a320:	617b      	str	r3, [r7, #20]
 800a322:	4b16      	ldr	r3, [pc, #88]	; (800a37c <HAL_RCC_MCOConfig+0xc4>)
 800a324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a326:	4a15      	ldr	r2, [pc, #84]	; (800a37c <HAL_RCC_MCOConfig+0xc4>)
 800a328:	f043 0304 	orr.w	r3, r3, #4
 800a32c:	6313      	str	r3, [r2, #48]	; 0x30
 800a32e:	4b13      	ldr	r3, [pc, #76]	; (800a37c <HAL_RCC_MCOConfig+0xc4>)
 800a330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a332:	f003 0304 	and.w	r3, r3, #4
 800a336:	617b      	str	r3, [r7, #20]
 800a338:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 800a33a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a33e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a340:	2302      	movs	r3, #2
 800a342:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a344:	2303      	movs	r3, #3
 800a346:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a348:	2300      	movs	r3, #0
 800a34a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a34c:	2300      	movs	r3, #0
 800a34e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a350:	f107 031c 	add.w	r3, r7, #28
 800a354:	4619      	mov	r1, r3
 800a356:	480b      	ldr	r0, [pc, #44]	; (800a384 <HAL_RCC_MCOConfig+0xcc>)
 800a358:	f7ff f986 	bl	8009668 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 800a35c:	4b07      	ldr	r3, [pc, #28]	; (800a37c <HAL_RCC_MCOConfig+0xc4>)
 800a35e:	689b      	ldr	r3, [r3, #8]
 800a360:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	00d9      	lsls	r1, r3, #3
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	430b      	orrs	r3, r1
 800a36c:	4903      	ldr	r1, [pc, #12]	; (800a37c <HAL_RCC_MCOConfig+0xc4>)
 800a36e:	4313      	orrs	r3, r2
 800a370:	608b      	str	r3, [r1, #8]
}
 800a372:	bf00      	nop
 800a374:	3730      	adds	r7, #48	; 0x30
 800a376:	46bd      	mov	sp, r7
 800a378:	bd80      	pop	{r7, pc}
 800a37a:	bf00      	nop
 800a37c:	40023800 	.word	0x40023800
 800a380:	40020000 	.word	0x40020000
 800a384:	40020800 	.word	0x40020800

0800a388 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a388:	b5b0      	push	{r4, r5, r7, lr}
 800a38a:	b084      	sub	sp, #16
 800a38c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800a38e:	2100      	movs	r1, #0
 800a390:	6079      	str	r1, [r7, #4]
 800a392:	2100      	movs	r1, #0
 800a394:	60f9      	str	r1, [r7, #12]
 800a396:	2100      	movs	r1, #0
 800a398:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800a39a:	2100      	movs	r1, #0
 800a39c:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a39e:	4952      	ldr	r1, [pc, #328]	; (800a4e8 <HAL_RCC_GetSysClockFreq+0x160>)
 800a3a0:	6889      	ldr	r1, [r1, #8]
 800a3a2:	f001 010c 	and.w	r1, r1, #12
 800a3a6:	2908      	cmp	r1, #8
 800a3a8:	d00d      	beq.n	800a3c6 <HAL_RCC_GetSysClockFreq+0x3e>
 800a3aa:	2908      	cmp	r1, #8
 800a3ac:	f200 8094 	bhi.w	800a4d8 <HAL_RCC_GetSysClockFreq+0x150>
 800a3b0:	2900      	cmp	r1, #0
 800a3b2:	d002      	beq.n	800a3ba <HAL_RCC_GetSysClockFreq+0x32>
 800a3b4:	2904      	cmp	r1, #4
 800a3b6:	d003      	beq.n	800a3c0 <HAL_RCC_GetSysClockFreq+0x38>
 800a3b8:	e08e      	b.n	800a4d8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800a3ba:	4b4c      	ldr	r3, [pc, #304]	; (800a4ec <HAL_RCC_GetSysClockFreq+0x164>)
 800a3bc:	60bb      	str	r3, [r7, #8]
       break;
 800a3be:	e08e      	b.n	800a4de <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800a3c0:	4b4b      	ldr	r3, [pc, #300]	; (800a4f0 <HAL_RCC_GetSysClockFreq+0x168>)
 800a3c2:	60bb      	str	r3, [r7, #8]
      break;
 800a3c4:	e08b      	b.n	800a4de <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800a3c6:	4948      	ldr	r1, [pc, #288]	; (800a4e8 <HAL_RCC_GetSysClockFreq+0x160>)
 800a3c8:	6849      	ldr	r1, [r1, #4]
 800a3ca:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800a3ce:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a3d0:	4945      	ldr	r1, [pc, #276]	; (800a4e8 <HAL_RCC_GetSysClockFreq+0x160>)
 800a3d2:	6849      	ldr	r1, [r1, #4]
 800a3d4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800a3d8:	2900      	cmp	r1, #0
 800a3da:	d024      	beq.n	800a426 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a3dc:	4942      	ldr	r1, [pc, #264]	; (800a4e8 <HAL_RCC_GetSysClockFreq+0x160>)
 800a3de:	6849      	ldr	r1, [r1, #4]
 800a3e0:	0989      	lsrs	r1, r1, #6
 800a3e2:	4608      	mov	r0, r1
 800a3e4:	f04f 0100 	mov.w	r1, #0
 800a3e8:	f240 14ff 	movw	r4, #511	; 0x1ff
 800a3ec:	f04f 0500 	mov.w	r5, #0
 800a3f0:	ea00 0204 	and.w	r2, r0, r4
 800a3f4:	ea01 0305 	and.w	r3, r1, r5
 800a3f8:	493d      	ldr	r1, [pc, #244]	; (800a4f0 <HAL_RCC_GetSysClockFreq+0x168>)
 800a3fa:	fb01 f003 	mul.w	r0, r1, r3
 800a3fe:	2100      	movs	r1, #0
 800a400:	fb01 f102 	mul.w	r1, r1, r2
 800a404:	1844      	adds	r4, r0, r1
 800a406:	493a      	ldr	r1, [pc, #232]	; (800a4f0 <HAL_RCC_GetSysClockFreq+0x168>)
 800a408:	fba2 0101 	umull	r0, r1, r2, r1
 800a40c:	1863      	adds	r3, r4, r1
 800a40e:	4619      	mov	r1, r3
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	461a      	mov	r2, r3
 800a414:	f04f 0300 	mov.w	r3, #0
 800a418:	f7f6 fc36 	bl	8000c88 <__aeabi_uldivmod>
 800a41c:	4602      	mov	r2, r0
 800a41e:	460b      	mov	r3, r1
 800a420:	4613      	mov	r3, r2
 800a422:	60fb      	str	r3, [r7, #12]
 800a424:	e04a      	b.n	800a4bc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800a426:	4b30      	ldr	r3, [pc, #192]	; (800a4e8 <HAL_RCC_GetSysClockFreq+0x160>)
 800a428:	685b      	ldr	r3, [r3, #4]
 800a42a:	099b      	lsrs	r3, r3, #6
 800a42c:	461a      	mov	r2, r3
 800a42e:	f04f 0300 	mov.w	r3, #0
 800a432:	f240 10ff 	movw	r0, #511	; 0x1ff
 800a436:	f04f 0100 	mov.w	r1, #0
 800a43a:	ea02 0400 	and.w	r4, r2, r0
 800a43e:	ea03 0501 	and.w	r5, r3, r1
 800a442:	4620      	mov	r0, r4
 800a444:	4629      	mov	r1, r5
 800a446:	f04f 0200 	mov.w	r2, #0
 800a44a:	f04f 0300 	mov.w	r3, #0
 800a44e:	014b      	lsls	r3, r1, #5
 800a450:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800a454:	0142      	lsls	r2, r0, #5
 800a456:	4610      	mov	r0, r2
 800a458:	4619      	mov	r1, r3
 800a45a:	1b00      	subs	r0, r0, r4
 800a45c:	eb61 0105 	sbc.w	r1, r1, r5
 800a460:	f04f 0200 	mov.w	r2, #0
 800a464:	f04f 0300 	mov.w	r3, #0
 800a468:	018b      	lsls	r3, r1, #6
 800a46a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800a46e:	0182      	lsls	r2, r0, #6
 800a470:	1a12      	subs	r2, r2, r0
 800a472:	eb63 0301 	sbc.w	r3, r3, r1
 800a476:	f04f 0000 	mov.w	r0, #0
 800a47a:	f04f 0100 	mov.w	r1, #0
 800a47e:	00d9      	lsls	r1, r3, #3
 800a480:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800a484:	00d0      	lsls	r0, r2, #3
 800a486:	4602      	mov	r2, r0
 800a488:	460b      	mov	r3, r1
 800a48a:	1912      	adds	r2, r2, r4
 800a48c:	eb45 0303 	adc.w	r3, r5, r3
 800a490:	f04f 0000 	mov.w	r0, #0
 800a494:	f04f 0100 	mov.w	r1, #0
 800a498:	0299      	lsls	r1, r3, #10
 800a49a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800a49e:	0290      	lsls	r0, r2, #10
 800a4a0:	4602      	mov	r2, r0
 800a4a2:	460b      	mov	r3, r1
 800a4a4:	4610      	mov	r0, r2
 800a4a6:	4619      	mov	r1, r3
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	461a      	mov	r2, r3
 800a4ac:	f04f 0300 	mov.w	r3, #0
 800a4b0:	f7f6 fbea 	bl	8000c88 <__aeabi_uldivmod>
 800a4b4:	4602      	mov	r2, r0
 800a4b6:	460b      	mov	r3, r1
 800a4b8:	4613      	mov	r3, r2
 800a4ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800a4bc:	4b0a      	ldr	r3, [pc, #40]	; (800a4e8 <HAL_RCC_GetSysClockFreq+0x160>)
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	0c1b      	lsrs	r3, r3, #16
 800a4c2:	f003 0303 	and.w	r3, r3, #3
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	005b      	lsls	r3, r3, #1
 800a4ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800a4cc:	68fa      	ldr	r2, [r7, #12]
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4d4:	60bb      	str	r3, [r7, #8]
      break;
 800a4d6:	e002      	b.n	800a4de <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800a4d8:	4b04      	ldr	r3, [pc, #16]	; (800a4ec <HAL_RCC_GetSysClockFreq+0x164>)
 800a4da:	60bb      	str	r3, [r7, #8]
      break;
 800a4dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a4de:	68bb      	ldr	r3, [r7, #8]
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3710      	adds	r7, #16
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bdb0      	pop	{r4, r5, r7, pc}
 800a4e8:	40023800 	.word	0x40023800
 800a4ec:	00f42400 	.word	0x00f42400
 800a4f0:	017d7840 	.word	0x017d7840

0800a4f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a4f8:	4b03      	ldr	r3, [pc, #12]	; (800a508 <HAL_RCC_GetHCLKFreq+0x14>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
}
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	46bd      	mov	sp, r7
 800a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a504:	4770      	bx	lr
 800a506:	bf00      	nop
 800a508:	2000039c 	.word	0x2000039c

0800a50c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800a510:	f7ff fff0 	bl	800a4f4 <HAL_RCC_GetHCLKFreq>
 800a514:	4602      	mov	r2, r0
 800a516:	4b05      	ldr	r3, [pc, #20]	; (800a52c <HAL_RCC_GetPCLK1Freq+0x20>)
 800a518:	689b      	ldr	r3, [r3, #8]
 800a51a:	0a9b      	lsrs	r3, r3, #10
 800a51c:	f003 0307 	and.w	r3, r3, #7
 800a520:	4903      	ldr	r1, [pc, #12]	; (800a530 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a522:	5ccb      	ldrb	r3, [r1, r3]
 800a524:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a528:	4618      	mov	r0, r3
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	40023800 	.word	0x40023800
 800a530:	08026dfc 	.word	0x08026dfc

0800a534 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800a538:	f7ff ffdc 	bl	800a4f4 <HAL_RCC_GetHCLKFreq>
 800a53c:	4602      	mov	r2, r0
 800a53e:	4b05      	ldr	r3, [pc, #20]	; (800a554 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	0b5b      	lsrs	r3, r3, #13
 800a544:	f003 0307 	and.w	r3, r3, #7
 800a548:	4903      	ldr	r1, [pc, #12]	; (800a558 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a54a:	5ccb      	ldrb	r3, [r1, r3]
 800a54c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a550:	4618      	mov	r0, r3
 800a552:	bd80      	pop	{r7, pc}
 800a554:	40023800 	.word	0x40023800
 800a558:	08026dfc 	.word	0x08026dfc

0800a55c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a55c:	b480      	push	{r7}
 800a55e:	b083      	sub	sp, #12
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	220f      	movs	r2, #15
 800a56a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a56c:	4b12      	ldr	r3, [pc, #72]	; (800a5b8 <HAL_RCC_GetClockConfig+0x5c>)
 800a56e:	689b      	ldr	r3, [r3, #8]
 800a570:	f003 0203 	and.w	r2, r3, #3
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800a578:	4b0f      	ldr	r3, [pc, #60]	; (800a5b8 <HAL_RCC_GetClockConfig+0x5c>)
 800a57a:	689b      	ldr	r3, [r3, #8]
 800a57c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800a584:	4b0c      	ldr	r3, [pc, #48]	; (800a5b8 <HAL_RCC_GetClockConfig+0x5c>)
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800a590:	4b09      	ldr	r3, [pc, #36]	; (800a5b8 <HAL_RCC_GetClockConfig+0x5c>)
 800a592:	689b      	ldr	r3, [r3, #8]
 800a594:	08db      	lsrs	r3, r3, #3
 800a596:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a59e:	4b07      	ldr	r3, [pc, #28]	; (800a5bc <HAL_RCC_GetClockConfig+0x60>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f003 0207 	and.w	r2, r3, #7
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	601a      	str	r2, [r3, #0]
}
 800a5aa:	bf00      	nop
 800a5ac:	370c      	adds	r7, #12
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b4:	4770      	bx	lr
 800a5b6:	bf00      	nop
 800a5b8:	40023800 	.word	0x40023800
 800a5bc:	40023c00 	.word	0x40023c00

0800a5c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b082      	sub	sp, #8
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d101      	bne.n	800a5d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	e07b      	b.n	800a6ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d108      	bne.n	800a5ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a5e2:	d009      	beq.n	800a5f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	61da      	str	r2, [r3, #28]
 800a5ea:	e005      	b.n	800a5f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2200      	movs	r2, #0
 800a5f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a604:	b2db      	uxtb	r3, r3
 800a606:	2b00      	cmp	r3, #0
 800a608:	d106      	bne.n	800a618 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2200      	movs	r2, #0
 800a60e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f7fb fe16 	bl	8006244 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	2202      	movs	r2, #2
 800a61c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a62e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	685b      	ldr	r3, [r3, #4]
 800a634:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800a640:	431a      	orrs	r2, r3
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	68db      	ldr	r3, [r3, #12]
 800a646:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a64a:	431a      	orrs	r2, r3
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	691b      	ldr	r3, [r3, #16]
 800a650:	f003 0302 	and.w	r3, r3, #2
 800a654:	431a      	orrs	r2, r3
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	695b      	ldr	r3, [r3, #20]
 800a65a:	f003 0301 	and.w	r3, r3, #1
 800a65e:	431a      	orrs	r2, r3
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	699b      	ldr	r3, [r3, #24]
 800a664:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a668:	431a      	orrs	r2, r3
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	69db      	ldr	r3, [r3, #28]
 800a66e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a672:	431a      	orrs	r2, r3
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	6a1b      	ldr	r3, [r3, #32]
 800a678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a67c:	ea42 0103 	orr.w	r1, r2, r3
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a684:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	430a      	orrs	r2, r1
 800a68e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	699b      	ldr	r3, [r3, #24]
 800a694:	0c1b      	lsrs	r3, r3, #16
 800a696:	f003 0104 	and.w	r1, r3, #4
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a69e:	f003 0210 	and.w	r2, r3, #16
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	430a      	orrs	r2, r1
 800a6a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	69da      	ldr	r2, [r3, #28]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a6b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800a6c8:	2300      	movs	r3, #0
}
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	3708      	adds	r7, #8
 800a6ce:	46bd      	mov	sp, r7
 800a6d0:	bd80      	pop	{r7, pc}

0800a6d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a6d2:	b580      	push	{r7, lr}
 800a6d4:	b088      	sub	sp, #32
 800a6d6:	af00      	add	r7, sp, #0
 800a6d8:	60f8      	str	r0, [r7, #12]
 800a6da:	60b9      	str	r1, [r7, #8]
 800a6dc:	603b      	str	r3, [r7, #0]
 800a6de:	4613      	mov	r3, r2
 800a6e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a6ec:	2b01      	cmp	r3, #1
 800a6ee:	d101      	bne.n	800a6f4 <HAL_SPI_Transmit+0x22>
 800a6f0:	2302      	movs	r3, #2
 800a6f2:	e126      	b.n	800a942 <HAL_SPI_Transmit+0x270>
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	2201      	movs	r2, #1
 800a6f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a6fc:	f7fc fc62 	bl	8006fc4 <HAL_GetTick>
 800a700:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800a702:	88fb      	ldrh	r3, [r7, #6]
 800a704:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a70c:	b2db      	uxtb	r3, r3
 800a70e:	2b01      	cmp	r3, #1
 800a710:	d002      	beq.n	800a718 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800a712:	2302      	movs	r3, #2
 800a714:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a716:	e10b      	b.n	800a930 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d002      	beq.n	800a724 <HAL_SPI_Transmit+0x52>
 800a71e:	88fb      	ldrh	r3, [r7, #6]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d102      	bne.n	800a72a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800a724:	2301      	movs	r3, #1
 800a726:	77fb      	strb	r3, [r7, #31]
    goto error;
 800a728:	e102      	b.n	800a930 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2203      	movs	r2, #3
 800a72e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2200      	movs	r2, #0
 800a736:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	68ba      	ldr	r2, [r7, #8]
 800a73c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	88fa      	ldrh	r2, [r7, #6]
 800a742:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	88fa      	ldrh	r2, [r7, #6]
 800a748:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	2200      	movs	r2, #0
 800a74e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2200      	movs	r2, #0
 800a754:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2200      	movs	r2, #0
 800a75a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	2200      	movs	r2, #0
 800a760:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	2200      	movs	r2, #0
 800a766:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	689b      	ldr	r3, [r3, #8]
 800a76c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a770:	d10f      	bne.n	800a792 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	681a      	ldr	r2, [r3, #0]
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a780:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a790:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a79c:	2b40      	cmp	r3, #64	; 0x40
 800a79e:	d007      	beq.n	800a7b0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	681a      	ldr	r2, [r3, #0]
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a7ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	68db      	ldr	r3, [r3, #12]
 800a7b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a7b8:	d14b      	bne.n	800a852 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	685b      	ldr	r3, [r3, #4]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d002      	beq.n	800a7c8 <HAL_SPI_Transmit+0xf6>
 800a7c2:	8afb      	ldrh	r3, [r7, #22]
 800a7c4:	2b01      	cmp	r3, #1
 800a7c6:	d13e      	bne.n	800a846 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7cc:	881a      	ldrh	r2, [r3, #0]
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7d8:	1c9a      	adds	r2, r3, #2
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a7e2:	b29b      	uxth	r3, r3
 800a7e4:	3b01      	subs	r3, #1
 800a7e6:	b29a      	uxth	r2, r3
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800a7ec:	e02b      	b.n	800a846 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	689b      	ldr	r3, [r3, #8]
 800a7f4:	f003 0302 	and.w	r3, r3, #2
 800a7f8:	2b02      	cmp	r3, #2
 800a7fa:	d112      	bne.n	800a822 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a800:	881a      	ldrh	r2, [r3, #0]
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a80c:	1c9a      	adds	r2, r3, #2
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a816:	b29b      	uxth	r3, r3
 800a818:	3b01      	subs	r3, #1
 800a81a:	b29a      	uxth	r2, r3
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	86da      	strh	r2, [r3, #54]	; 0x36
 800a820:	e011      	b.n	800a846 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a822:	f7fc fbcf 	bl	8006fc4 <HAL_GetTick>
 800a826:	4602      	mov	r2, r0
 800a828:	69bb      	ldr	r3, [r7, #24]
 800a82a:	1ad3      	subs	r3, r2, r3
 800a82c:	683a      	ldr	r2, [r7, #0]
 800a82e:	429a      	cmp	r2, r3
 800a830:	d803      	bhi.n	800a83a <HAL_SPI_Transmit+0x168>
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a838:	d102      	bne.n	800a840 <HAL_SPI_Transmit+0x16e>
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d102      	bne.n	800a846 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 800a840:	2303      	movs	r3, #3
 800a842:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a844:	e074      	b.n	800a930 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d1ce      	bne.n	800a7ee <HAL_SPI_Transmit+0x11c>
 800a850:	e04c      	b.n	800a8ec <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	685b      	ldr	r3, [r3, #4]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d002      	beq.n	800a860 <HAL_SPI_Transmit+0x18e>
 800a85a:	8afb      	ldrh	r3, [r7, #22]
 800a85c:	2b01      	cmp	r3, #1
 800a85e:	d140      	bne.n	800a8e2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	330c      	adds	r3, #12
 800a86a:	7812      	ldrb	r2, [r2, #0]
 800a86c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a872:	1c5a      	adds	r2, r3, #1
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a87c:	b29b      	uxth	r3, r3
 800a87e:	3b01      	subs	r3, #1
 800a880:	b29a      	uxth	r2, r3
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800a886:	e02c      	b.n	800a8e2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	689b      	ldr	r3, [r3, #8]
 800a88e:	f003 0302 	and.w	r3, r3, #2
 800a892:	2b02      	cmp	r3, #2
 800a894:	d113      	bne.n	800a8be <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	330c      	adds	r3, #12
 800a8a0:	7812      	ldrb	r2, [r2, #0]
 800a8a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8a8:	1c5a      	adds	r2, r3, #1
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8b2:	b29b      	uxth	r3, r3
 800a8b4:	3b01      	subs	r3, #1
 800a8b6:	b29a      	uxth	r2, r3
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	86da      	strh	r2, [r3, #54]	; 0x36
 800a8bc:	e011      	b.n	800a8e2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a8be:	f7fc fb81 	bl	8006fc4 <HAL_GetTick>
 800a8c2:	4602      	mov	r2, r0
 800a8c4:	69bb      	ldr	r3, [r7, #24]
 800a8c6:	1ad3      	subs	r3, r2, r3
 800a8c8:	683a      	ldr	r2, [r7, #0]
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d803      	bhi.n	800a8d6 <HAL_SPI_Transmit+0x204>
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8d4:	d102      	bne.n	800a8dc <HAL_SPI_Transmit+0x20a>
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d102      	bne.n	800a8e2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800a8dc:	2303      	movs	r3, #3
 800a8de:	77fb      	strb	r3, [r7, #31]
          goto error;
 800a8e0:	e026      	b.n	800a930 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d1cd      	bne.n	800a888 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800a8ec:	69ba      	ldr	r2, [r7, #24]
 800a8ee:	6839      	ldr	r1, [r7, #0]
 800a8f0:	68f8      	ldr	r0, [r7, #12]
 800a8f2:	f000 fbcb 	bl	800b08c <SPI_EndRxTxTransaction>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d002      	beq.n	800a902 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	2220      	movs	r2, #32
 800a900:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	689b      	ldr	r3, [r3, #8]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d10a      	bne.n	800a920 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a90a:	2300      	movs	r3, #0
 800a90c:	613b      	str	r3, [r7, #16]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	68db      	ldr	r3, [r3, #12]
 800a914:	613b      	str	r3, [r7, #16]
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	689b      	ldr	r3, [r3, #8]
 800a91c:	613b      	str	r3, [r7, #16]
 800a91e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a924:	2b00      	cmp	r3, #0
 800a926:	d002      	beq.n	800a92e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800a928:	2301      	movs	r3, #1
 800a92a:	77fb      	strb	r3, [r7, #31]
 800a92c:	e000      	b.n	800a930 <HAL_SPI_Transmit+0x25e>
  }

error:
 800a92e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	2201      	movs	r2, #1
 800a934:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2200      	movs	r2, #0
 800a93c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800a940:	7ffb      	ldrb	r3, [r7, #31]
}
 800a942:	4618      	mov	r0, r3
 800a944:	3720      	adds	r7, #32
 800a946:	46bd      	mov	sp, r7
 800a948:	bd80      	pop	{r7, pc}

0800a94a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a94a:	b580      	push	{r7, lr}
 800a94c:	b088      	sub	sp, #32
 800a94e:	af02      	add	r7, sp, #8
 800a950:	60f8      	str	r0, [r7, #12]
 800a952:	60b9      	str	r1, [r7, #8]
 800a954:	603b      	str	r3, [r7, #0]
 800a956:	4613      	mov	r3, r2
 800a958:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a95a:	2300      	movs	r3, #0
 800a95c:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	685b      	ldr	r3, [r3, #4]
 800a962:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a966:	d112      	bne.n	800a98e <HAL_SPI_Receive+0x44>
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	689b      	ldr	r3, [r3, #8]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d10e      	bne.n	800a98e <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	2204      	movs	r2, #4
 800a974:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800a978:	88fa      	ldrh	r2, [r7, #6]
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	9300      	str	r3, [sp, #0]
 800a97e:	4613      	mov	r3, r2
 800a980:	68ba      	ldr	r2, [r7, #8]
 800a982:	68b9      	ldr	r1, [r7, #8]
 800a984:	68f8      	ldr	r0, [r7, #12]
 800a986:	f000 f8f1 	bl	800ab6c <HAL_SPI_TransmitReceive>
 800a98a:	4603      	mov	r3, r0
 800a98c:	e0ea      	b.n	800ab64 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800a994:	2b01      	cmp	r3, #1
 800a996:	d101      	bne.n	800a99c <HAL_SPI_Receive+0x52>
 800a998:	2302      	movs	r3, #2
 800a99a:	e0e3      	b.n	800ab64 <HAL_SPI_Receive+0x21a>
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	2201      	movs	r2, #1
 800a9a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a9a4:	f7fc fb0e 	bl	8006fc4 <HAL_GetTick>
 800a9a8:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800a9b0:	b2db      	uxtb	r3, r3
 800a9b2:	2b01      	cmp	r3, #1
 800a9b4:	d002      	beq.n	800a9bc <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800a9b6:	2302      	movs	r3, #2
 800a9b8:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a9ba:	e0ca      	b.n	800ab52 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d002      	beq.n	800a9c8 <HAL_SPI_Receive+0x7e>
 800a9c2:	88fb      	ldrh	r3, [r7, #6]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d102      	bne.n	800a9ce <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a9cc:	e0c1      	b.n	800ab52 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2204      	movs	r2, #4
 800a9d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	68ba      	ldr	r2, [r7, #8]
 800a9e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	88fa      	ldrh	r2, [r7, #6]
 800a9e6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	88fa      	ldrh	r2, [r7, #6]
 800a9ec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	2200      	movs	r2, #0
 800a9fe:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	2200      	movs	r2, #0
 800aa04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	2200      	movs	r2, #0
 800aa0a:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	689b      	ldr	r3, [r3, #8]
 800aa10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aa14:	d10f      	bne.n	800aa36 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	681a      	ldr	r2, [r3, #0]
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	681a      	ldr	r2, [r3, #0]
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800aa34:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa40:	2b40      	cmp	r3, #64	; 0x40
 800aa42:	d007      	beq.n	800aa54 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aa52:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	68db      	ldr	r3, [r3, #12]
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d162      	bne.n	800ab22 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800aa5c:	e02e      	b.n	800aabc <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	689b      	ldr	r3, [r3, #8]
 800aa64:	f003 0301 	and.w	r3, r3, #1
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d115      	bne.n	800aa98 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f103 020c 	add.w	r2, r3, #12
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa78:	7812      	ldrb	r2, [r2, #0]
 800aa7a:	b2d2      	uxtb	r2, r2
 800aa7c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa82:	1c5a      	adds	r2, r3, #1
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aa8c:	b29b      	uxth	r3, r3
 800aa8e:	3b01      	subs	r3, #1
 800aa90:	b29a      	uxth	r2, r3
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	87da      	strh	r2, [r3, #62]	; 0x3e
 800aa96:	e011      	b.n	800aabc <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aa98:	f7fc fa94 	bl	8006fc4 <HAL_GetTick>
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	1ad3      	subs	r3, r2, r3
 800aaa2:	683a      	ldr	r2, [r7, #0]
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d803      	bhi.n	800aab0 <HAL_SPI_Receive+0x166>
 800aaa8:	683b      	ldr	r3, [r7, #0]
 800aaaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aaae:	d102      	bne.n	800aab6 <HAL_SPI_Receive+0x16c>
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d102      	bne.n	800aabc <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 800aab6:	2303      	movs	r3, #3
 800aab8:	75fb      	strb	r3, [r7, #23]
          goto error;
 800aaba:	e04a      	b.n	800ab52 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aac0:	b29b      	uxth	r3, r3
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d1cb      	bne.n	800aa5e <HAL_SPI_Receive+0x114>
 800aac6:	e031      	b.n	800ab2c <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	689b      	ldr	r3, [r3, #8]
 800aace:	f003 0301 	and.w	r3, r3, #1
 800aad2:	2b01      	cmp	r3, #1
 800aad4:	d113      	bne.n	800aafe <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	68da      	ldr	r2, [r3, #12]
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aae0:	b292      	uxth	r2, r2
 800aae2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aae8:	1c9a      	adds	r2, r3, #2
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aaf2:	b29b      	uxth	r3, r3
 800aaf4:	3b01      	subs	r3, #1
 800aaf6:	b29a      	uxth	r2, r3
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	87da      	strh	r2, [r3, #62]	; 0x3e
 800aafc:	e011      	b.n	800ab22 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800aafe:	f7fc fa61 	bl	8006fc4 <HAL_GetTick>
 800ab02:	4602      	mov	r2, r0
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	1ad3      	subs	r3, r2, r3
 800ab08:	683a      	ldr	r2, [r7, #0]
 800ab0a:	429a      	cmp	r2, r3
 800ab0c:	d803      	bhi.n	800ab16 <HAL_SPI_Receive+0x1cc>
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab14:	d102      	bne.n	800ab1c <HAL_SPI_Receive+0x1d2>
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d102      	bne.n	800ab22 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 800ab1c:	2303      	movs	r3, #3
 800ab1e:	75fb      	strb	r3, [r7, #23]
          goto error;
 800ab20:	e017      	b.n	800ab52 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ab26:	b29b      	uxth	r3, r3
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d1cd      	bne.n	800aac8 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ab2c:	693a      	ldr	r2, [r7, #16]
 800ab2e:	6839      	ldr	r1, [r7, #0]
 800ab30:	68f8      	ldr	r0, [r7, #12]
 800ab32:	f000 fa45 	bl	800afc0 <SPI_EndRxTransaction>
 800ab36:	4603      	mov	r3, r0
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d002      	beq.n	800ab42 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	2220      	movs	r2, #32
 800ab40:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d002      	beq.n	800ab50 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800ab4a:	2301      	movs	r3, #1
 800ab4c:	75fb      	strb	r3, [r7, #23]
 800ab4e:	e000      	b.n	800ab52 <HAL_SPI_Receive+0x208>
  }

error :
 800ab50:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	2201      	movs	r2, #1
 800ab56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800ab62:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab64:	4618      	mov	r0, r3
 800ab66:	3718      	adds	r7, #24
 800ab68:	46bd      	mov	sp, r7
 800ab6a:	bd80      	pop	{r7, pc}

0800ab6c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b08c      	sub	sp, #48	; 0x30
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	60f8      	str	r0, [r7, #12]
 800ab74:	60b9      	str	r1, [r7, #8]
 800ab76:	607a      	str	r2, [r7, #4]
 800ab78:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800ab7e:	2300      	movs	r3, #0
 800ab80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ab8a:	2b01      	cmp	r3, #1
 800ab8c:	d101      	bne.n	800ab92 <HAL_SPI_TransmitReceive+0x26>
 800ab8e:	2302      	movs	r3, #2
 800ab90:	e18a      	b.n	800aea8 <HAL_SPI_TransmitReceive+0x33c>
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	2201      	movs	r2, #1
 800ab96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ab9a:	f7fc fa13 	bl	8006fc4 <HAL_GetTick>
 800ab9e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800aba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800abb0:	887b      	ldrh	r3, [r7, #2]
 800abb2:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800abb4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800abb8:	2b01      	cmp	r3, #1
 800abba:	d00f      	beq.n	800abdc <HAL_SPI_TransmitReceive+0x70>
 800abbc:	69fb      	ldr	r3, [r7, #28]
 800abbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800abc2:	d107      	bne.n	800abd4 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	689b      	ldr	r3, [r3, #8]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d103      	bne.n	800abd4 <HAL_SPI_TransmitReceive+0x68>
 800abcc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800abd0:	2b04      	cmp	r3, #4
 800abd2:	d003      	beq.n	800abdc <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800abd4:	2302      	movs	r3, #2
 800abd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800abda:	e15b      	b.n	800ae94 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d005      	beq.n	800abee <HAL_SPI_TransmitReceive+0x82>
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d002      	beq.n	800abee <HAL_SPI_TransmitReceive+0x82>
 800abe8:	887b      	ldrh	r3, [r7, #2]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d103      	bne.n	800abf6 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800abee:	2301      	movs	r3, #1
 800abf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800abf4:	e14e      	b.n	800ae94 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800abfc:	b2db      	uxtb	r3, r3
 800abfe:	2b04      	cmp	r3, #4
 800ac00:	d003      	beq.n	800ac0a <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2205      	movs	r2, #5
 800ac06:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	687a      	ldr	r2, [r7, #4]
 800ac14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	887a      	ldrh	r2, [r7, #2]
 800ac1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	887a      	ldrh	r2, [r7, #2]
 800ac20:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	68ba      	ldr	r2, [r7, #8]
 800ac26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	887a      	ldrh	r2, [r7, #2]
 800ac2c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	887a      	ldrh	r2, [r7, #2]
 800ac32:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2200      	movs	r2, #0
 800ac38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac4a:	2b40      	cmp	r3, #64	; 0x40
 800ac4c:	d007      	beq.n	800ac5e <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ac5c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac66:	d178      	bne.n	800ad5a <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	685b      	ldr	r3, [r3, #4]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d002      	beq.n	800ac76 <HAL_SPI_TransmitReceive+0x10a>
 800ac70:	8b7b      	ldrh	r3, [r7, #26]
 800ac72:	2b01      	cmp	r3, #1
 800ac74:	d166      	bne.n	800ad44 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac7a:	881a      	ldrh	r2, [r3, #0]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac86:	1c9a      	adds	r2, r3, #2
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ac90:	b29b      	uxth	r3, r3
 800ac92:	3b01      	subs	r3, #1
 800ac94:	b29a      	uxth	r2, r3
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ac9a:	e053      	b.n	800ad44 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	689b      	ldr	r3, [r3, #8]
 800aca2:	f003 0302 	and.w	r3, r3, #2
 800aca6:	2b02      	cmp	r3, #2
 800aca8:	d11b      	bne.n	800ace2 <HAL_SPI_TransmitReceive+0x176>
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800acae:	b29b      	uxth	r3, r3
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d016      	beq.n	800ace2 <HAL_SPI_TransmitReceive+0x176>
 800acb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d113      	bne.n	800ace2 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acbe:	881a      	ldrh	r2, [r3, #0]
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acca:	1c9a      	adds	r2, r3, #2
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	3b01      	subs	r3, #1
 800acd8:	b29a      	uxth	r2, r3
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800acde:	2300      	movs	r3, #0
 800ace0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	689b      	ldr	r3, [r3, #8]
 800ace8:	f003 0301 	and.w	r3, r3, #1
 800acec:	2b01      	cmp	r3, #1
 800acee:	d119      	bne.n	800ad24 <HAL_SPI_TransmitReceive+0x1b8>
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800acf4:	b29b      	uxth	r3, r3
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d014      	beq.n	800ad24 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	681b      	ldr	r3, [r3, #0]
 800acfe:	68da      	ldr	r2, [r3, #12]
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad04:	b292      	uxth	r2, r2
 800ad06:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad0c:	1c9a      	adds	r2, r3, #2
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	3b01      	subs	r3, #1
 800ad1a:	b29a      	uxth	r2, r3
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ad20:	2301      	movs	r3, #1
 800ad22:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800ad24:	f7fc f94e 	bl	8006fc4 <HAL_GetTick>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad2c:	1ad3      	subs	r3, r2, r3
 800ad2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ad30:	429a      	cmp	r2, r3
 800ad32:	d807      	bhi.n	800ad44 <HAL_SPI_TransmitReceive+0x1d8>
 800ad34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad3a:	d003      	beq.n	800ad44 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800ad3c:	2303      	movs	r3, #3
 800ad3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ad42:	e0a7      	b.n	800ae94 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ad44:	68fb      	ldr	r3, [r7, #12]
 800ad46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad48:	b29b      	uxth	r3, r3
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d1a6      	bne.n	800ac9c <HAL_SPI_TransmitReceive+0x130>
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d1a1      	bne.n	800ac9c <HAL_SPI_TransmitReceive+0x130>
 800ad58:	e07c      	b.n	800ae54 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	685b      	ldr	r3, [r3, #4]
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d002      	beq.n	800ad68 <HAL_SPI_TransmitReceive+0x1fc>
 800ad62:	8b7b      	ldrh	r3, [r7, #26]
 800ad64:	2b01      	cmp	r3, #1
 800ad66:	d16b      	bne.n	800ae40 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	330c      	adds	r3, #12
 800ad72:	7812      	ldrb	r2, [r2, #0]
 800ad74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad7a:	1c5a      	adds	r2, r3, #1
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	3b01      	subs	r3, #1
 800ad88:	b29a      	uxth	r2, r3
 800ad8a:	68fb      	ldr	r3, [r7, #12]
 800ad8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ad8e:	e057      	b.n	800ae40 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	689b      	ldr	r3, [r3, #8]
 800ad96:	f003 0302 	and.w	r3, r3, #2
 800ad9a:	2b02      	cmp	r3, #2
 800ad9c:	d11c      	bne.n	800add8 <HAL_SPI_TransmitReceive+0x26c>
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ada2:	b29b      	uxth	r3, r3
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d017      	beq.n	800add8 <HAL_SPI_TransmitReceive+0x26c>
 800ada8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adaa:	2b01      	cmp	r3, #1
 800adac:	d114      	bne.n	800add8 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	330c      	adds	r3, #12
 800adb8:	7812      	ldrb	r2, [r2, #0]
 800adba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adc0:	1c5a      	adds	r2, r3, #1
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800adca:	b29b      	uxth	r3, r3
 800adcc:	3b01      	subs	r3, #1
 800adce:	b29a      	uxth	r2, r3
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800add4:	2300      	movs	r3, #0
 800add6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	689b      	ldr	r3, [r3, #8]
 800adde:	f003 0301 	and.w	r3, r3, #1
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d119      	bne.n	800ae1a <HAL_SPI_TransmitReceive+0x2ae>
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800adea:	b29b      	uxth	r3, r3
 800adec:	2b00      	cmp	r3, #0
 800adee:	d014      	beq.n	800ae1a <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	68da      	ldr	r2, [r3, #12]
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adfa:	b2d2      	uxtb	r2, r2
 800adfc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae02:	1c5a      	adds	r2, r3, #1
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae0c:	b29b      	uxth	r3, r3
 800ae0e:	3b01      	subs	r3, #1
 800ae10:	b29a      	uxth	r2, r3
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800ae16:	2301      	movs	r3, #1
 800ae18:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800ae1a:	f7fc f8d3 	bl	8006fc4 <HAL_GetTick>
 800ae1e:	4602      	mov	r2, r0
 800ae20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae22:	1ad3      	subs	r3, r2, r3
 800ae24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ae26:	429a      	cmp	r2, r3
 800ae28:	d803      	bhi.n	800ae32 <HAL_SPI_TransmitReceive+0x2c6>
 800ae2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae30:	d102      	bne.n	800ae38 <HAL_SPI_TransmitReceive+0x2cc>
 800ae32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d103      	bne.n	800ae40 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800ae38:	2303      	movs	r3, #3
 800ae3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800ae3e:	e029      	b.n	800ae94 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d1a2      	bne.n	800ad90 <HAL_SPI_TransmitReceive+0x224>
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae4e:	b29b      	uxth	r3, r3
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d19d      	bne.n	800ad90 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800ae54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae56:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ae58:	68f8      	ldr	r0, [r7, #12]
 800ae5a:	f000 f917 	bl	800b08c <SPI_EndRxTxTransaction>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d006      	beq.n	800ae72 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800ae64:	2301      	movs	r3, #1
 800ae66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	2220      	movs	r2, #32
 800ae6e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800ae70:	e010      	b.n	800ae94 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	689b      	ldr	r3, [r3, #8]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d10b      	bne.n	800ae92 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	617b      	str	r3, [r7, #20]
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	68db      	ldr	r3, [r3, #12]
 800ae84:	617b      	str	r3, [r7, #20]
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	689b      	ldr	r3, [r3, #8]
 800ae8c:	617b      	str	r3, [r7, #20]
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	e000      	b.n	800ae94 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800ae92:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	2201      	movs	r2, #1
 800ae98:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800aea4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3730      	adds	r7, #48	; 0x30
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b088      	sub	sp, #32
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	60f8      	str	r0, [r7, #12]
 800aeb8:	60b9      	str	r1, [r7, #8]
 800aeba:	603b      	str	r3, [r7, #0]
 800aebc:	4613      	mov	r3, r2
 800aebe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800aec0:	f7fc f880 	bl	8006fc4 <HAL_GetTick>
 800aec4:	4602      	mov	r2, r0
 800aec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aec8:	1a9b      	subs	r3, r3, r2
 800aeca:	683a      	ldr	r2, [r7, #0]
 800aecc:	4413      	add	r3, r2
 800aece:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800aed0:	f7fc f878 	bl	8006fc4 <HAL_GetTick>
 800aed4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800aed6:	4b39      	ldr	r3, [pc, #228]	; (800afbc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	015b      	lsls	r3, r3, #5
 800aedc:	0d1b      	lsrs	r3, r3, #20
 800aede:	69fa      	ldr	r2, [r7, #28]
 800aee0:	fb02 f303 	mul.w	r3, r2, r3
 800aee4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800aee6:	e054      	b.n	800af92 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aeee:	d050      	beq.n	800af92 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800aef0:	f7fc f868 	bl	8006fc4 <HAL_GetTick>
 800aef4:	4602      	mov	r2, r0
 800aef6:	69bb      	ldr	r3, [r7, #24]
 800aef8:	1ad3      	subs	r3, r2, r3
 800aefa:	69fa      	ldr	r2, [r7, #28]
 800aefc:	429a      	cmp	r2, r3
 800aefe:	d902      	bls.n	800af06 <SPI_WaitFlagStateUntilTimeout+0x56>
 800af00:	69fb      	ldr	r3, [r7, #28]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d13d      	bne.n	800af82 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	685a      	ldr	r2, [r3, #4]
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800af14:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	685b      	ldr	r3, [r3, #4]
 800af1a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800af1e:	d111      	bne.n	800af44 <SPI_WaitFlagStateUntilTimeout+0x94>
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	689b      	ldr	r3, [r3, #8]
 800af24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af28:	d004      	beq.n	800af34 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800af2a:	68fb      	ldr	r3, [r7, #12]
 800af2c:	689b      	ldr	r3, [r3, #8]
 800af2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af32:	d107      	bne.n	800af44 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	681b      	ldr	r3, [r3, #0]
 800af38:	681a      	ldr	r2, [r3, #0]
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af42:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af4c:	d10f      	bne.n	800af6e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800af5c:	601a      	str	r2, [r3, #0]
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	681a      	ldr	r2, [r3, #0]
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800af6c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	2201      	movs	r2, #1
 800af72:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2200      	movs	r2, #0
 800af7a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800af7e:	2303      	movs	r3, #3
 800af80:	e017      	b.n	800afb2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d101      	bne.n	800af8c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800af88:	2300      	movs	r3, #0
 800af8a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800af8c:	697b      	ldr	r3, [r7, #20]
 800af8e:	3b01      	subs	r3, #1
 800af90:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	689a      	ldr	r2, [r3, #8]
 800af98:	68bb      	ldr	r3, [r7, #8]
 800af9a:	4013      	ands	r3, r2
 800af9c:	68ba      	ldr	r2, [r7, #8]
 800af9e:	429a      	cmp	r2, r3
 800afa0:	bf0c      	ite	eq
 800afa2:	2301      	moveq	r3, #1
 800afa4:	2300      	movne	r3, #0
 800afa6:	b2db      	uxtb	r3, r3
 800afa8:	461a      	mov	r2, r3
 800afaa:	79fb      	ldrb	r3, [r7, #7]
 800afac:	429a      	cmp	r2, r3
 800afae:	d19b      	bne.n	800aee8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800afb0:	2300      	movs	r3, #0
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3720      	adds	r7, #32
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}
 800afba:	bf00      	nop
 800afbc:	2000039c 	.word	0x2000039c

0800afc0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b086      	sub	sp, #24
 800afc4:	af02      	add	r7, sp, #8
 800afc6:	60f8      	str	r0, [r7, #12]
 800afc8:	60b9      	str	r1, [r7, #8]
 800afca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	685b      	ldr	r3, [r3, #4]
 800afd0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800afd4:	d111      	bne.n	800affa <SPI_EndRxTransaction+0x3a>
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	689b      	ldr	r3, [r3, #8]
 800afda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800afde:	d004      	beq.n	800afea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	689b      	ldr	r3, [r3, #8]
 800afe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afe8:	d107      	bne.n	800affa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	681a      	ldr	r2, [r3, #0]
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aff8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b002:	d12a      	bne.n	800b05a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	689b      	ldr	r3, [r3, #8]
 800b008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b00c:	d012      	beq.n	800b034 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	9300      	str	r3, [sp, #0]
 800b012:	68bb      	ldr	r3, [r7, #8]
 800b014:	2200      	movs	r2, #0
 800b016:	2180      	movs	r1, #128	; 0x80
 800b018:	68f8      	ldr	r0, [r7, #12]
 800b01a:	f7ff ff49 	bl	800aeb0 <SPI_WaitFlagStateUntilTimeout>
 800b01e:	4603      	mov	r3, r0
 800b020:	2b00      	cmp	r3, #0
 800b022:	d02d      	beq.n	800b080 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b028:	f043 0220 	orr.w	r2, r3, #32
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b030:	2303      	movs	r3, #3
 800b032:	e026      	b.n	800b082 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	9300      	str	r3, [sp, #0]
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	2200      	movs	r2, #0
 800b03c:	2101      	movs	r1, #1
 800b03e:	68f8      	ldr	r0, [r7, #12]
 800b040:	f7ff ff36 	bl	800aeb0 <SPI_WaitFlagStateUntilTimeout>
 800b044:	4603      	mov	r3, r0
 800b046:	2b00      	cmp	r3, #0
 800b048:	d01a      	beq.n	800b080 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b04e:	f043 0220 	orr.w	r2, r3, #32
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b056:	2303      	movs	r3, #3
 800b058:	e013      	b.n	800b082 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	9300      	str	r3, [sp, #0]
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	2200      	movs	r2, #0
 800b062:	2101      	movs	r1, #1
 800b064:	68f8      	ldr	r0, [r7, #12]
 800b066:	f7ff ff23 	bl	800aeb0 <SPI_WaitFlagStateUntilTimeout>
 800b06a:	4603      	mov	r3, r0
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d007      	beq.n	800b080 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b074:	f043 0220 	orr.w	r2, r3, #32
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b07c:	2303      	movs	r3, #3
 800b07e:	e000      	b.n	800b082 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800b080:	2300      	movs	r3, #0
}
 800b082:	4618      	mov	r0, r3
 800b084:	3710      	adds	r7, #16
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}
	...

0800b08c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b088      	sub	sp, #32
 800b090:	af02      	add	r7, sp, #8
 800b092:	60f8      	str	r0, [r7, #12]
 800b094:	60b9      	str	r1, [r7, #8]
 800b096:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b098:	4b1b      	ldr	r3, [pc, #108]	; (800b108 <SPI_EndRxTxTransaction+0x7c>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4a1b      	ldr	r2, [pc, #108]	; (800b10c <SPI_EndRxTxTransaction+0x80>)
 800b09e:	fba2 2303 	umull	r2, r3, r2, r3
 800b0a2:	0d5b      	lsrs	r3, r3, #21
 800b0a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b0a8:	fb02 f303 	mul.w	r3, r2, r3
 800b0ac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b0b6:	d112      	bne.n	800b0de <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	9300      	str	r3, [sp, #0]
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	2180      	movs	r1, #128	; 0x80
 800b0c2:	68f8      	ldr	r0, [r7, #12]
 800b0c4:	f7ff fef4 	bl	800aeb0 <SPI_WaitFlagStateUntilTimeout>
 800b0c8:	4603      	mov	r3, r0
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d016      	beq.n	800b0fc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0d2:	f043 0220 	orr.w	r2, r3, #32
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b0da:	2303      	movs	r3, #3
 800b0dc:	e00f      	b.n	800b0fe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d00a      	beq.n	800b0fa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	3b01      	subs	r3, #1
 800b0e8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	689b      	ldr	r3, [r3, #8]
 800b0f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0f4:	2b80      	cmp	r3, #128	; 0x80
 800b0f6:	d0f2      	beq.n	800b0de <SPI_EndRxTxTransaction+0x52>
 800b0f8:	e000      	b.n	800b0fc <SPI_EndRxTxTransaction+0x70>
        break;
 800b0fa:	bf00      	nop
  }

  return HAL_OK;
 800b0fc:	2300      	movs	r3, #0
}
 800b0fe:	4618      	mov	r0, r3
 800b100:	3718      	adds	r7, #24
 800b102:	46bd      	mov	sp, r7
 800b104:	bd80      	pop	{r7, pc}
 800b106:	bf00      	nop
 800b108:	2000039c 	.word	0x2000039c
 800b10c:	165e9f81 	.word	0x165e9f81

0800b110 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b082      	sub	sp, #8
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	2b00      	cmp	r3, #0
 800b11c:	d101      	bne.n	800b122 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b11e:	2301      	movs	r3, #1
 800b120:	e041      	b.n	800b1a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d106      	bne.n	800b13c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	2200      	movs	r2, #0
 800b132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f7fb f8cc 	bl	80062d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2202      	movs	r2, #2
 800b140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681a      	ldr	r2, [r3, #0]
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	3304      	adds	r3, #4
 800b14c:	4619      	mov	r1, r3
 800b14e:	4610      	mov	r0, r2
 800b150:	f000 fafe 	bl	800b750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	2201      	movs	r2, #1
 800b158:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2201      	movs	r2, #1
 800b160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2201      	movs	r2, #1
 800b168:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	2201      	movs	r2, #1
 800b170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	2201      	movs	r2, #1
 800b178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	2201      	movs	r2, #1
 800b180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	2201      	movs	r2, #1
 800b188:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2201      	movs	r2, #1
 800b190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	2201      	movs	r2, #1
 800b198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	2201      	movs	r2, #1
 800b1a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b1a4:	2300      	movs	r3, #0
}
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	3708      	adds	r7, #8
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
	...

0800b1b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b1b0:	b480      	push	{r7}
 800b1b2:	b085      	sub	sp, #20
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1be:	b2db      	uxtb	r3, r3
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	d001      	beq.n	800b1c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	e046      	b.n	800b256 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2202      	movs	r2, #2
 800b1cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	4a23      	ldr	r2, [pc, #140]	; (800b264 <HAL_TIM_Base_Start+0xb4>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d022      	beq.n	800b220 <HAL_TIM_Base_Start+0x70>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1e2:	d01d      	beq.n	800b220 <HAL_TIM_Base_Start+0x70>
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4a1f      	ldr	r2, [pc, #124]	; (800b268 <HAL_TIM_Base_Start+0xb8>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d018      	beq.n	800b220 <HAL_TIM_Base_Start+0x70>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4a1e      	ldr	r2, [pc, #120]	; (800b26c <HAL_TIM_Base_Start+0xbc>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d013      	beq.n	800b220 <HAL_TIM_Base_Start+0x70>
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4a1c      	ldr	r2, [pc, #112]	; (800b270 <HAL_TIM_Base_Start+0xc0>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d00e      	beq.n	800b220 <HAL_TIM_Base_Start+0x70>
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4a1b      	ldr	r2, [pc, #108]	; (800b274 <HAL_TIM_Base_Start+0xc4>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d009      	beq.n	800b220 <HAL_TIM_Base_Start+0x70>
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4a19      	ldr	r2, [pc, #100]	; (800b278 <HAL_TIM_Base_Start+0xc8>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d004      	beq.n	800b220 <HAL_TIM_Base_Start+0x70>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4a18      	ldr	r2, [pc, #96]	; (800b27c <HAL_TIM_Base_Start+0xcc>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d111      	bne.n	800b244 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	689b      	ldr	r3, [r3, #8]
 800b226:	f003 0307 	and.w	r3, r3, #7
 800b22a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2b06      	cmp	r3, #6
 800b230:	d010      	beq.n	800b254 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	681a      	ldr	r2, [r3, #0]
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f042 0201 	orr.w	r2, r2, #1
 800b240:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b242:	e007      	b.n	800b254 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	681a      	ldr	r2, [r3, #0]
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f042 0201 	orr.w	r2, r2, #1
 800b252:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b254:	2300      	movs	r3, #0
}
 800b256:	4618      	mov	r0, r3
 800b258:	3714      	adds	r7, #20
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr
 800b262:	bf00      	nop
 800b264:	40010000 	.word	0x40010000
 800b268:	40000400 	.word	0x40000400
 800b26c:	40000800 	.word	0x40000800
 800b270:	40000c00 	.word	0x40000c00
 800b274:	40010400 	.word	0x40010400
 800b278:	40014000 	.word	0x40014000
 800b27c:	40001800 	.word	0x40001800

0800b280 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b280:	b480      	push	{r7}
 800b282:	b085      	sub	sp, #20
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b28e:	b2db      	uxtb	r3, r3
 800b290:	2b01      	cmp	r3, #1
 800b292:	d001      	beq.n	800b298 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b294:	2301      	movs	r3, #1
 800b296:	e04e      	b.n	800b336 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2202      	movs	r2, #2
 800b29c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	68da      	ldr	r2, [r3, #12]
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f042 0201 	orr.w	r2, r2, #1
 800b2ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	4a23      	ldr	r2, [pc, #140]	; (800b344 <HAL_TIM_Base_Start_IT+0xc4>)
 800b2b6:	4293      	cmp	r3, r2
 800b2b8:	d022      	beq.n	800b300 <HAL_TIM_Base_Start_IT+0x80>
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2c2:	d01d      	beq.n	800b300 <HAL_TIM_Base_Start_IT+0x80>
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	4a1f      	ldr	r2, [pc, #124]	; (800b348 <HAL_TIM_Base_Start_IT+0xc8>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d018      	beq.n	800b300 <HAL_TIM_Base_Start_IT+0x80>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	4a1e      	ldr	r2, [pc, #120]	; (800b34c <HAL_TIM_Base_Start_IT+0xcc>)
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d013      	beq.n	800b300 <HAL_TIM_Base_Start_IT+0x80>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	4a1c      	ldr	r2, [pc, #112]	; (800b350 <HAL_TIM_Base_Start_IT+0xd0>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d00e      	beq.n	800b300 <HAL_TIM_Base_Start_IT+0x80>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	4a1b      	ldr	r2, [pc, #108]	; (800b354 <HAL_TIM_Base_Start_IT+0xd4>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d009      	beq.n	800b300 <HAL_TIM_Base_Start_IT+0x80>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4a19      	ldr	r2, [pc, #100]	; (800b358 <HAL_TIM_Base_Start_IT+0xd8>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d004      	beq.n	800b300 <HAL_TIM_Base_Start_IT+0x80>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4a18      	ldr	r2, [pc, #96]	; (800b35c <HAL_TIM_Base_Start_IT+0xdc>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d111      	bne.n	800b324 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	689b      	ldr	r3, [r3, #8]
 800b306:	f003 0307 	and.w	r3, r3, #7
 800b30a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2b06      	cmp	r3, #6
 800b310:	d010      	beq.n	800b334 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	681a      	ldr	r2, [r3, #0]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	f042 0201 	orr.w	r2, r2, #1
 800b320:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b322:	e007      	b.n	800b334 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	681a      	ldr	r2, [r3, #0]
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	f042 0201 	orr.w	r2, r2, #1
 800b332:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b334:	2300      	movs	r3, #0
}
 800b336:	4618      	mov	r0, r3
 800b338:	3714      	adds	r7, #20
 800b33a:	46bd      	mov	sp, r7
 800b33c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b340:	4770      	bx	lr
 800b342:	bf00      	nop
 800b344:	40010000 	.word	0x40010000
 800b348:	40000400 	.word	0x40000400
 800b34c:	40000800 	.word	0x40000800
 800b350:	40000c00 	.word	0x40000c00
 800b354:	40010400 	.word	0x40010400
 800b358:	40014000 	.word	0x40014000
 800b35c:	40001800 	.word	0x40001800

0800b360 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b082      	sub	sp, #8
 800b364:	af00      	add	r7, sp, #0
 800b366:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	691b      	ldr	r3, [r3, #16]
 800b36e:	f003 0302 	and.w	r3, r3, #2
 800b372:	2b02      	cmp	r3, #2
 800b374:	d122      	bne.n	800b3bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	68db      	ldr	r3, [r3, #12]
 800b37c:	f003 0302 	and.w	r3, r3, #2
 800b380:	2b02      	cmp	r3, #2
 800b382:	d11b      	bne.n	800b3bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	f06f 0202 	mvn.w	r2, #2
 800b38c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	2201      	movs	r2, #1
 800b392:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	699b      	ldr	r3, [r3, #24]
 800b39a:	f003 0303 	and.w	r3, r3, #3
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d003      	beq.n	800b3aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b3a2:	6878      	ldr	r0, [r7, #4]
 800b3a4:	f000 f9b5 	bl	800b712 <HAL_TIM_IC_CaptureCallback>
 800b3a8:	e005      	b.n	800b3b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3aa:	6878      	ldr	r0, [r7, #4]
 800b3ac:	f000 f9a7 	bl	800b6fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b3b0:	6878      	ldr	r0, [r7, #4]
 800b3b2:	f000 f9b8 	bl	800b726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2200      	movs	r2, #0
 800b3ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	691b      	ldr	r3, [r3, #16]
 800b3c2:	f003 0304 	and.w	r3, r3, #4
 800b3c6:	2b04      	cmp	r3, #4
 800b3c8:	d122      	bne.n	800b410 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	68db      	ldr	r3, [r3, #12]
 800b3d0:	f003 0304 	and.w	r3, r3, #4
 800b3d4:	2b04      	cmp	r3, #4
 800b3d6:	d11b      	bne.n	800b410 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f06f 0204 	mvn.w	r2, #4
 800b3e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2202      	movs	r2, #2
 800b3e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	681b      	ldr	r3, [r3, #0]
 800b3ec:	699b      	ldr	r3, [r3, #24]
 800b3ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d003      	beq.n	800b3fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f000 f98b 	bl	800b712 <HAL_TIM_IC_CaptureCallback>
 800b3fc:	e005      	b.n	800b40a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b3fe:	6878      	ldr	r0, [r7, #4]
 800b400:	f000 f97d 	bl	800b6fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b404:	6878      	ldr	r0, [r7, #4]
 800b406:	f000 f98e 	bl	800b726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2200      	movs	r2, #0
 800b40e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	691b      	ldr	r3, [r3, #16]
 800b416:	f003 0308 	and.w	r3, r3, #8
 800b41a:	2b08      	cmp	r3, #8
 800b41c:	d122      	bne.n	800b464 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	68db      	ldr	r3, [r3, #12]
 800b424:	f003 0308 	and.w	r3, r3, #8
 800b428:	2b08      	cmp	r3, #8
 800b42a:	d11b      	bne.n	800b464 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f06f 0208 	mvn.w	r2, #8
 800b434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2204      	movs	r2, #4
 800b43a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	69db      	ldr	r3, [r3, #28]
 800b442:	f003 0303 	and.w	r3, r3, #3
 800b446:	2b00      	cmp	r3, #0
 800b448:	d003      	beq.n	800b452 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b44a:	6878      	ldr	r0, [r7, #4]
 800b44c:	f000 f961 	bl	800b712 <HAL_TIM_IC_CaptureCallback>
 800b450:	e005      	b.n	800b45e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b452:	6878      	ldr	r0, [r7, #4]
 800b454:	f000 f953 	bl	800b6fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b458:	6878      	ldr	r0, [r7, #4]
 800b45a:	f000 f964 	bl	800b726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2200      	movs	r2, #0
 800b462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	691b      	ldr	r3, [r3, #16]
 800b46a:	f003 0310 	and.w	r3, r3, #16
 800b46e:	2b10      	cmp	r3, #16
 800b470:	d122      	bne.n	800b4b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	68db      	ldr	r3, [r3, #12]
 800b478:	f003 0310 	and.w	r3, r3, #16
 800b47c:	2b10      	cmp	r3, #16
 800b47e:	d11b      	bne.n	800b4b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f06f 0210 	mvn.w	r2, #16
 800b488:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2208      	movs	r2, #8
 800b48e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	69db      	ldr	r3, [r3, #28]
 800b496:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d003      	beq.n	800b4a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b49e:	6878      	ldr	r0, [r7, #4]
 800b4a0:	f000 f937 	bl	800b712 <HAL_TIM_IC_CaptureCallback>
 800b4a4:	e005      	b.n	800b4b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f000 f929 	bl	800b6fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4ac:	6878      	ldr	r0, [r7, #4]
 800b4ae:	f000 f93a 	bl	800b726 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	2200      	movs	r2, #0
 800b4b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	691b      	ldr	r3, [r3, #16]
 800b4be:	f003 0301 	and.w	r3, r3, #1
 800b4c2:	2b01      	cmp	r3, #1
 800b4c4:	d10e      	bne.n	800b4e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	68db      	ldr	r3, [r3, #12]
 800b4cc:	f003 0301 	and.w	r3, r3, #1
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d107      	bne.n	800b4e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	f06f 0201 	mvn.w	r2, #1
 800b4dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f7f9 fb5e 	bl	8004ba0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	691b      	ldr	r3, [r3, #16]
 800b4ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4ee:	2b80      	cmp	r3, #128	; 0x80
 800b4f0:	d10e      	bne.n	800b510 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	68db      	ldr	r3, [r3, #12]
 800b4f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4fc:	2b80      	cmp	r3, #128	; 0x80
 800b4fe:	d107      	bne.n	800b510 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b508:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f000 fae0 	bl	800bad0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	691b      	ldr	r3, [r3, #16]
 800b516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b51a:	2b40      	cmp	r3, #64	; 0x40
 800b51c:	d10e      	bne.n	800b53c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	68db      	ldr	r3, [r3, #12]
 800b524:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b528:	2b40      	cmp	r3, #64	; 0x40
 800b52a:	d107      	bne.n	800b53c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 f8ff 	bl	800b73a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	691b      	ldr	r3, [r3, #16]
 800b542:	f003 0320 	and.w	r3, r3, #32
 800b546:	2b20      	cmp	r3, #32
 800b548:	d10e      	bne.n	800b568 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	68db      	ldr	r3, [r3, #12]
 800b550:	f003 0320 	and.w	r3, r3, #32
 800b554:	2b20      	cmp	r3, #32
 800b556:	d107      	bne.n	800b568 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f06f 0220 	mvn.w	r2, #32
 800b560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f000 faaa 	bl	800babc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b568:	bf00      	nop
 800b56a:	3708      	adds	r7, #8
 800b56c:	46bd      	mov	sp, r7
 800b56e:	bd80      	pop	{r7, pc}

0800b570 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
 800b578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b57a:	2300      	movs	r3, #0
 800b57c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b584:	2b01      	cmp	r3, #1
 800b586:	d101      	bne.n	800b58c <HAL_TIM_ConfigClockSource+0x1c>
 800b588:	2302      	movs	r3, #2
 800b58a:	e0b4      	b.n	800b6f6 <HAL_TIM_ConfigClockSource+0x186>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	2201      	movs	r2, #1
 800b590:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2202      	movs	r2, #2
 800b598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	689b      	ldr	r3, [r3, #8]
 800b5a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b5a4:	68bb      	ldr	r3, [r7, #8]
 800b5a6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b5aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b5b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	68ba      	ldr	r2, [r7, #8]
 800b5ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5c4:	d03e      	beq.n	800b644 <HAL_TIM_ConfigClockSource+0xd4>
 800b5c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b5ca:	f200 8087 	bhi.w	800b6dc <HAL_TIM_ConfigClockSource+0x16c>
 800b5ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5d2:	f000 8086 	beq.w	800b6e2 <HAL_TIM_ConfigClockSource+0x172>
 800b5d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b5da:	d87f      	bhi.n	800b6dc <HAL_TIM_ConfigClockSource+0x16c>
 800b5dc:	2b70      	cmp	r3, #112	; 0x70
 800b5de:	d01a      	beq.n	800b616 <HAL_TIM_ConfigClockSource+0xa6>
 800b5e0:	2b70      	cmp	r3, #112	; 0x70
 800b5e2:	d87b      	bhi.n	800b6dc <HAL_TIM_ConfigClockSource+0x16c>
 800b5e4:	2b60      	cmp	r3, #96	; 0x60
 800b5e6:	d050      	beq.n	800b68a <HAL_TIM_ConfigClockSource+0x11a>
 800b5e8:	2b60      	cmp	r3, #96	; 0x60
 800b5ea:	d877      	bhi.n	800b6dc <HAL_TIM_ConfigClockSource+0x16c>
 800b5ec:	2b50      	cmp	r3, #80	; 0x50
 800b5ee:	d03c      	beq.n	800b66a <HAL_TIM_ConfigClockSource+0xfa>
 800b5f0:	2b50      	cmp	r3, #80	; 0x50
 800b5f2:	d873      	bhi.n	800b6dc <HAL_TIM_ConfigClockSource+0x16c>
 800b5f4:	2b40      	cmp	r3, #64	; 0x40
 800b5f6:	d058      	beq.n	800b6aa <HAL_TIM_ConfigClockSource+0x13a>
 800b5f8:	2b40      	cmp	r3, #64	; 0x40
 800b5fa:	d86f      	bhi.n	800b6dc <HAL_TIM_ConfigClockSource+0x16c>
 800b5fc:	2b30      	cmp	r3, #48	; 0x30
 800b5fe:	d064      	beq.n	800b6ca <HAL_TIM_ConfigClockSource+0x15a>
 800b600:	2b30      	cmp	r3, #48	; 0x30
 800b602:	d86b      	bhi.n	800b6dc <HAL_TIM_ConfigClockSource+0x16c>
 800b604:	2b20      	cmp	r3, #32
 800b606:	d060      	beq.n	800b6ca <HAL_TIM_ConfigClockSource+0x15a>
 800b608:	2b20      	cmp	r3, #32
 800b60a:	d867      	bhi.n	800b6dc <HAL_TIM_ConfigClockSource+0x16c>
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d05c      	beq.n	800b6ca <HAL_TIM_ConfigClockSource+0x15a>
 800b610:	2b10      	cmp	r3, #16
 800b612:	d05a      	beq.n	800b6ca <HAL_TIM_ConfigClockSource+0x15a>
 800b614:	e062      	b.n	800b6dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6818      	ldr	r0, [r3, #0]
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	6899      	ldr	r1, [r3, #8]
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	685a      	ldr	r2, [r3, #4]
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	68db      	ldr	r3, [r3, #12]
 800b626:	f000 f9ad 	bl	800b984 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	689b      	ldr	r3, [r3, #8]
 800b630:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b638:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	68ba      	ldr	r2, [r7, #8]
 800b640:	609a      	str	r2, [r3, #8]
      break;
 800b642:	e04f      	b.n	800b6e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	6818      	ldr	r0, [r3, #0]
 800b648:	683b      	ldr	r3, [r7, #0]
 800b64a:	6899      	ldr	r1, [r3, #8]
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	685a      	ldr	r2, [r3, #4]
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	68db      	ldr	r3, [r3, #12]
 800b654:	f000 f996 	bl	800b984 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	689a      	ldr	r2, [r3, #8]
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b666:	609a      	str	r2, [r3, #8]
      break;
 800b668:	e03c      	b.n	800b6e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	6818      	ldr	r0, [r3, #0]
 800b66e:	683b      	ldr	r3, [r7, #0]
 800b670:	6859      	ldr	r1, [r3, #4]
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	68db      	ldr	r3, [r3, #12]
 800b676:	461a      	mov	r2, r3
 800b678:	f000 f90a 	bl	800b890 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	2150      	movs	r1, #80	; 0x50
 800b682:	4618      	mov	r0, r3
 800b684:	f000 f963 	bl	800b94e <TIM_ITRx_SetConfig>
      break;
 800b688:	e02c      	b.n	800b6e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	6818      	ldr	r0, [r3, #0]
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	6859      	ldr	r1, [r3, #4]
 800b692:	683b      	ldr	r3, [r7, #0]
 800b694:	68db      	ldr	r3, [r3, #12]
 800b696:	461a      	mov	r2, r3
 800b698:	f000 f929 	bl	800b8ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	2160      	movs	r1, #96	; 0x60
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f000 f953 	bl	800b94e <TIM_ITRx_SetConfig>
      break;
 800b6a8:	e01c      	b.n	800b6e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6818      	ldr	r0, [r3, #0]
 800b6ae:	683b      	ldr	r3, [r7, #0]
 800b6b0:	6859      	ldr	r1, [r3, #4]
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	68db      	ldr	r3, [r3, #12]
 800b6b6:	461a      	mov	r2, r3
 800b6b8:	f000 f8ea 	bl	800b890 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	2140      	movs	r1, #64	; 0x40
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f000 f943 	bl	800b94e <TIM_ITRx_SetConfig>
      break;
 800b6c8:	e00c      	b.n	800b6e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681a      	ldr	r2, [r3, #0]
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	4610      	mov	r0, r2
 800b6d6:	f000 f93a 	bl	800b94e <TIM_ITRx_SetConfig>
      break;
 800b6da:	e003      	b.n	800b6e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800b6dc:	2301      	movs	r3, #1
 800b6de:	73fb      	strb	r3, [r7, #15]
      break;
 800b6e0:	e000      	b.n	800b6e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800b6e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b6f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3710      	adds	r7, #16
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}

0800b6fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b6fe:	b480      	push	{r7}
 800b700:	b083      	sub	sp, #12
 800b702:	af00      	add	r7, sp, #0
 800b704:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b706:	bf00      	nop
 800b708:	370c      	adds	r7, #12
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr

0800b712 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b712:	b480      	push	{r7}
 800b714:	b083      	sub	sp, #12
 800b716:	af00      	add	r7, sp, #0
 800b718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b71a:	bf00      	nop
 800b71c:	370c      	adds	r7, #12
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr

0800b726 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b726:	b480      	push	{r7}
 800b728:	b083      	sub	sp, #12
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b72e:	bf00      	nop
 800b730:	370c      	adds	r7, #12
 800b732:	46bd      	mov	sp, r7
 800b734:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b738:	4770      	bx	lr

0800b73a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b73a:	b480      	push	{r7}
 800b73c:	b083      	sub	sp, #12
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b742:	bf00      	nop
 800b744:	370c      	adds	r7, #12
 800b746:	46bd      	mov	sp, r7
 800b748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74c:	4770      	bx	lr
	...

0800b750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b750:	b480      	push	{r7}
 800b752:	b085      	sub	sp, #20
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
 800b758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	4a40      	ldr	r2, [pc, #256]	; (800b864 <TIM_Base_SetConfig+0x114>)
 800b764:	4293      	cmp	r3, r2
 800b766:	d013      	beq.n	800b790 <TIM_Base_SetConfig+0x40>
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b76e:	d00f      	beq.n	800b790 <TIM_Base_SetConfig+0x40>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	4a3d      	ldr	r2, [pc, #244]	; (800b868 <TIM_Base_SetConfig+0x118>)
 800b774:	4293      	cmp	r3, r2
 800b776:	d00b      	beq.n	800b790 <TIM_Base_SetConfig+0x40>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	4a3c      	ldr	r2, [pc, #240]	; (800b86c <TIM_Base_SetConfig+0x11c>)
 800b77c:	4293      	cmp	r3, r2
 800b77e:	d007      	beq.n	800b790 <TIM_Base_SetConfig+0x40>
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	4a3b      	ldr	r2, [pc, #236]	; (800b870 <TIM_Base_SetConfig+0x120>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d003      	beq.n	800b790 <TIM_Base_SetConfig+0x40>
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	4a3a      	ldr	r2, [pc, #232]	; (800b874 <TIM_Base_SetConfig+0x124>)
 800b78c:	4293      	cmp	r3, r2
 800b78e:	d108      	bne.n	800b7a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b796:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b798:	683b      	ldr	r3, [r7, #0]
 800b79a:	685b      	ldr	r3, [r3, #4]
 800b79c:	68fa      	ldr	r2, [r7, #12]
 800b79e:	4313      	orrs	r3, r2
 800b7a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	4a2f      	ldr	r2, [pc, #188]	; (800b864 <TIM_Base_SetConfig+0x114>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d02b      	beq.n	800b802 <TIM_Base_SetConfig+0xb2>
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7b0:	d027      	beq.n	800b802 <TIM_Base_SetConfig+0xb2>
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	4a2c      	ldr	r2, [pc, #176]	; (800b868 <TIM_Base_SetConfig+0x118>)
 800b7b6:	4293      	cmp	r3, r2
 800b7b8:	d023      	beq.n	800b802 <TIM_Base_SetConfig+0xb2>
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	4a2b      	ldr	r2, [pc, #172]	; (800b86c <TIM_Base_SetConfig+0x11c>)
 800b7be:	4293      	cmp	r3, r2
 800b7c0:	d01f      	beq.n	800b802 <TIM_Base_SetConfig+0xb2>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	4a2a      	ldr	r2, [pc, #168]	; (800b870 <TIM_Base_SetConfig+0x120>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d01b      	beq.n	800b802 <TIM_Base_SetConfig+0xb2>
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	4a29      	ldr	r2, [pc, #164]	; (800b874 <TIM_Base_SetConfig+0x124>)
 800b7ce:	4293      	cmp	r3, r2
 800b7d0:	d017      	beq.n	800b802 <TIM_Base_SetConfig+0xb2>
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	4a28      	ldr	r2, [pc, #160]	; (800b878 <TIM_Base_SetConfig+0x128>)
 800b7d6:	4293      	cmp	r3, r2
 800b7d8:	d013      	beq.n	800b802 <TIM_Base_SetConfig+0xb2>
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	4a27      	ldr	r2, [pc, #156]	; (800b87c <TIM_Base_SetConfig+0x12c>)
 800b7de:	4293      	cmp	r3, r2
 800b7e0:	d00f      	beq.n	800b802 <TIM_Base_SetConfig+0xb2>
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	4a26      	ldr	r2, [pc, #152]	; (800b880 <TIM_Base_SetConfig+0x130>)
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d00b      	beq.n	800b802 <TIM_Base_SetConfig+0xb2>
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	4a25      	ldr	r2, [pc, #148]	; (800b884 <TIM_Base_SetConfig+0x134>)
 800b7ee:	4293      	cmp	r3, r2
 800b7f0:	d007      	beq.n	800b802 <TIM_Base_SetConfig+0xb2>
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	4a24      	ldr	r2, [pc, #144]	; (800b888 <TIM_Base_SetConfig+0x138>)
 800b7f6:	4293      	cmp	r3, r2
 800b7f8:	d003      	beq.n	800b802 <TIM_Base_SetConfig+0xb2>
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	4a23      	ldr	r2, [pc, #140]	; (800b88c <TIM_Base_SetConfig+0x13c>)
 800b7fe:	4293      	cmp	r3, r2
 800b800:	d108      	bne.n	800b814 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b808:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	68db      	ldr	r3, [r3, #12]
 800b80e:	68fa      	ldr	r2, [r7, #12]
 800b810:	4313      	orrs	r3, r2
 800b812:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b81a:	683b      	ldr	r3, [r7, #0]
 800b81c:	695b      	ldr	r3, [r3, #20]
 800b81e:	4313      	orrs	r3, r2
 800b820:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	68fa      	ldr	r2, [r7, #12]
 800b826:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b828:	683b      	ldr	r3, [r7, #0]
 800b82a:	689a      	ldr	r2, [r3, #8]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	681a      	ldr	r2, [r3, #0]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	4a0a      	ldr	r2, [pc, #40]	; (800b864 <TIM_Base_SetConfig+0x114>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d003      	beq.n	800b848 <TIM_Base_SetConfig+0xf8>
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	4a0c      	ldr	r2, [pc, #48]	; (800b874 <TIM_Base_SetConfig+0x124>)
 800b844:	4293      	cmp	r3, r2
 800b846:	d103      	bne.n	800b850 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	691a      	ldr	r2, [r3, #16]
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2201      	movs	r2, #1
 800b854:	615a      	str	r2, [r3, #20]
}
 800b856:	bf00      	nop
 800b858:	3714      	adds	r7, #20
 800b85a:	46bd      	mov	sp, r7
 800b85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b860:	4770      	bx	lr
 800b862:	bf00      	nop
 800b864:	40010000 	.word	0x40010000
 800b868:	40000400 	.word	0x40000400
 800b86c:	40000800 	.word	0x40000800
 800b870:	40000c00 	.word	0x40000c00
 800b874:	40010400 	.word	0x40010400
 800b878:	40014000 	.word	0x40014000
 800b87c:	40014400 	.word	0x40014400
 800b880:	40014800 	.word	0x40014800
 800b884:	40001800 	.word	0x40001800
 800b888:	40001c00 	.word	0x40001c00
 800b88c:	40002000 	.word	0x40002000

0800b890 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b890:	b480      	push	{r7}
 800b892:	b087      	sub	sp, #28
 800b894:	af00      	add	r7, sp, #0
 800b896:	60f8      	str	r0, [r7, #12]
 800b898:	60b9      	str	r1, [r7, #8]
 800b89a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	6a1b      	ldr	r3, [r3, #32]
 800b8a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	6a1b      	ldr	r3, [r3, #32]
 800b8a6:	f023 0201 	bic.w	r2, r3, #1
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	699b      	ldr	r3, [r3, #24]
 800b8b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b8ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	011b      	lsls	r3, r3, #4
 800b8c0:	693a      	ldr	r2, [r7, #16]
 800b8c2:	4313      	orrs	r3, r2
 800b8c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b8c6:	697b      	ldr	r3, [r7, #20]
 800b8c8:	f023 030a 	bic.w	r3, r3, #10
 800b8cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b8ce:	697a      	ldr	r2, [r7, #20]
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	4313      	orrs	r3, r2
 800b8d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	693a      	ldr	r2, [r7, #16]
 800b8da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8dc:	68fb      	ldr	r3, [r7, #12]
 800b8de:	697a      	ldr	r2, [r7, #20]
 800b8e0:	621a      	str	r2, [r3, #32]
}
 800b8e2:	bf00      	nop
 800b8e4:	371c      	adds	r7, #28
 800b8e6:	46bd      	mov	sp, r7
 800b8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ec:	4770      	bx	lr

0800b8ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b8ee:	b480      	push	{r7}
 800b8f0:	b087      	sub	sp, #28
 800b8f2:	af00      	add	r7, sp, #0
 800b8f4:	60f8      	str	r0, [r7, #12]
 800b8f6:	60b9      	str	r1, [r7, #8]
 800b8f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	6a1b      	ldr	r3, [r3, #32]
 800b8fe:	f023 0210 	bic.w	r2, r3, #16
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	699b      	ldr	r3, [r3, #24]
 800b90a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	6a1b      	ldr	r3, [r3, #32]
 800b910:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b912:	697b      	ldr	r3, [r7, #20]
 800b914:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b918:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	031b      	lsls	r3, r3, #12
 800b91e:	697a      	ldr	r2, [r7, #20]
 800b920:	4313      	orrs	r3, r2
 800b922:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b924:	693b      	ldr	r3, [r7, #16]
 800b926:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b92a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	011b      	lsls	r3, r3, #4
 800b930:	693a      	ldr	r2, [r7, #16]
 800b932:	4313      	orrs	r3, r2
 800b934:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	697a      	ldr	r2, [r7, #20]
 800b93a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b93c:	68fb      	ldr	r3, [r7, #12]
 800b93e:	693a      	ldr	r2, [r7, #16]
 800b940:	621a      	str	r2, [r3, #32]
}
 800b942:	bf00      	nop
 800b944:	371c      	adds	r7, #28
 800b946:	46bd      	mov	sp, r7
 800b948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94c:	4770      	bx	lr

0800b94e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b94e:	b480      	push	{r7}
 800b950:	b085      	sub	sp, #20
 800b952:	af00      	add	r7, sp, #0
 800b954:	6078      	str	r0, [r7, #4]
 800b956:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	689b      	ldr	r3, [r3, #8]
 800b95c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b964:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b966:	683a      	ldr	r2, [r7, #0]
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	4313      	orrs	r3, r2
 800b96c:	f043 0307 	orr.w	r3, r3, #7
 800b970:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	68fa      	ldr	r2, [r7, #12]
 800b976:	609a      	str	r2, [r3, #8]
}
 800b978:	bf00      	nop
 800b97a:	3714      	adds	r7, #20
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr

0800b984 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b984:	b480      	push	{r7}
 800b986:	b087      	sub	sp, #28
 800b988:	af00      	add	r7, sp, #0
 800b98a:	60f8      	str	r0, [r7, #12]
 800b98c:	60b9      	str	r1, [r7, #8]
 800b98e:	607a      	str	r2, [r7, #4]
 800b990:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	689b      	ldr	r3, [r3, #8]
 800b996:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b99e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	021a      	lsls	r2, r3, #8
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	431a      	orrs	r2, r3
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	4313      	orrs	r3, r2
 800b9ac:	697a      	ldr	r2, [r7, #20]
 800b9ae:	4313      	orrs	r3, r2
 800b9b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	697a      	ldr	r2, [r7, #20]
 800b9b6:	609a      	str	r2, [r3, #8]
}
 800b9b8:	bf00      	nop
 800b9ba:	371c      	adds	r7, #28
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c2:	4770      	bx	lr

0800b9c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b085      	sub	sp, #20
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9d4:	2b01      	cmp	r3, #1
 800b9d6:	d101      	bne.n	800b9dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b9d8:	2302      	movs	r3, #2
 800b9da:	e05a      	b.n	800ba92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2201      	movs	r2, #1
 800b9e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2202      	movs	r2, #2
 800b9e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	689b      	ldr	r3, [r3, #8]
 800b9fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ba04:	683b      	ldr	r3, [r7, #0]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	68fa      	ldr	r2, [r7, #12]
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	68fa      	ldr	r2, [r7, #12]
 800ba14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	4a21      	ldr	r2, [pc, #132]	; (800baa0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800ba1c:	4293      	cmp	r3, r2
 800ba1e:	d022      	beq.n	800ba66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba28:	d01d      	beq.n	800ba66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	4a1d      	ldr	r2, [pc, #116]	; (800baa4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800ba30:	4293      	cmp	r3, r2
 800ba32:	d018      	beq.n	800ba66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	4a1b      	ldr	r2, [pc, #108]	; (800baa8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800ba3a:	4293      	cmp	r3, r2
 800ba3c:	d013      	beq.n	800ba66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	4a1a      	ldr	r2, [pc, #104]	; (800baac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800ba44:	4293      	cmp	r3, r2
 800ba46:	d00e      	beq.n	800ba66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	4a18      	ldr	r2, [pc, #96]	; (800bab0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d009      	beq.n	800ba66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	4a17      	ldr	r2, [pc, #92]	; (800bab4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800ba58:	4293      	cmp	r3, r2
 800ba5a:	d004      	beq.n	800ba66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	4a15      	ldr	r2, [pc, #84]	; (800bab8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800ba62:	4293      	cmp	r3, r2
 800ba64:	d10c      	bne.n	800ba80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	685b      	ldr	r3, [r3, #4]
 800ba72:	68ba      	ldr	r2, [r7, #8]
 800ba74:	4313      	orrs	r3, r2
 800ba76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	68ba      	ldr	r2, [r7, #8]
 800ba7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2201      	movs	r2, #1
 800ba84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2200      	movs	r2, #0
 800ba8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ba90:	2300      	movs	r3, #0
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	3714      	adds	r7, #20
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr
 800ba9e:	bf00      	nop
 800baa0:	40010000 	.word	0x40010000
 800baa4:	40000400 	.word	0x40000400
 800baa8:	40000800 	.word	0x40000800
 800baac:	40000c00 	.word	0x40000c00
 800bab0:	40010400 	.word	0x40010400
 800bab4:	40014000 	.word	0x40014000
 800bab8:	40001800 	.word	0x40001800

0800babc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800babc:	b480      	push	{r7}
 800babe:	b083      	sub	sp, #12
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bac4:	bf00      	nop
 800bac6:	370c      	adds	r7, #12
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr

0800bad0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b083      	sub	sp, #12
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bad8:	bf00      	nop
 800bada:	370c      	adds	r7, #12
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bae4:	b580      	push	{r7, lr}
 800bae6:	b082      	sub	sp, #8
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d101      	bne.n	800baf6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800baf2:	2301      	movs	r3, #1
 800baf4:	e03f      	b.n	800bb76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bafc:	b2db      	uxtb	r3, r3
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d106      	bne.n	800bb10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	2200      	movs	r2, #0
 800bb06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f7fa fc20 	bl	8006350 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	2224      	movs	r2, #36	; 0x24
 800bb14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	68da      	ldr	r2, [r3, #12]
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bb26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f000 ffc7 	bl	800cabc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	691a      	ldr	r2, [r3, #16]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bb3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	695a      	ldr	r2, [r3, #20]
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bb4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	68da      	ldr	r2, [r3, #12]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bb5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	2200      	movs	r2, #0
 800bb62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2220      	movs	r2, #32
 800bb68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2220      	movs	r2, #32
 800bb70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800bb74:	2300      	movs	r3, #0
}
 800bb76:	4618      	mov	r0, r3
 800bb78:	3708      	adds	r7, #8
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}

0800bb7e <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 800bb7e:	b580      	push	{r7, lr}
 800bb80:	b082      	sub	sp, #8
 800bb82:	af00      	add	r7, sp, #0
 800bb84:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d101      	bne.n	800bb90 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	e021      	b.n	800bbd4 <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	2224      	movs	r2, #36	; 0x24
 800bb94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	68da      	ldr	r2, [r3, #12]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bba6:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800bba8:	6878      	ldr	r0, [r7, #4]
 800bbaa:	f7fa fcc3 	bl	8006534 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bbd2:	2300      	movs	r3, #0
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3708      	adds	r7, #8
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}

0800bbdc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b08a      	sub	sp, #40	; 0x28
 800bbe0:	af02      	add	r7, sp, #8
 800bbe2:	60f8      	str	r0, [r7, #12]
 800bbe4:	60b9      	str	r1, [r7, #8]
 800bbe6:	603b      	str	r3, [r7, #0]
 800bbe8:	4613      	mov	r3, r2
 800bbea:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800bbec:	2300      	movs	r3, #0
 800bbee:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bbf6:	b2db      	uxtb	r3, r3
 800bbf8:	2b20      	cmp	r3, #32
 800bbfa:	d17c      	bne.n	800bcf6 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800bbfc:	68bb      	ldr	r3, [r7, #8]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d002      	beq.n	800bc08 <HAL_UART_Transmit+0x2c>
 800bc02:	88fb      	ldrh	r3, [r7, #6]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d101      	bne.n	800bc0c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800bc08:	2301      	movs	r3, #1
 800bc0a:	e075      	b.n	800bcf8 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc12:	2b01      	cmp	r3, #1
 800bc14:	d101      	bne.n	800bc1a <HAL_UART_Transmit+0x3e>
 800bc16:	2302      	movs	r3, #2
 800bc18:	e06e      	b.n	800bcf8 <HAL_UART_Transmit+0x11c>
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	2201      	movs	r2, #1
 800bc1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2200      	movs	r2, #0
 800bc26:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2221      	movs	r2, #33	; 0x21
 800bc2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bc30:	f7fb f9c8 	bl	8006fc4 <HAL_GetTick>
 800bc34:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	88fa      	ldrh	r2, [r7, #6]
 800bc3a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	88fa      	ldrh	r2, [r7, #6]
 800bc40:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	689b      	ldr	r3, [r3, #8]
 800bc46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc4a:	d108      	bne.n	800bc5e <HAL_UART_Transmit+0x82>
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	691b      	ldr	r3, [r3, #16]
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d104      	bne.n	800bc5e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800bc54:	2300      	movs	r3, #0
 800bc56:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800bc58:	68bb      	ldr	r3, [r7, #8]
 800bc5a:	61bb      	str	r3, [r7, #24]
 800bc5c:	e003      	b.n	800bc66 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800bc5e:	68bb      	ldr	r3, [r7, #8]
 800bc60:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bc62:	2300      	movs	r3, #0
 800bc64:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800bc6e:	e02a      	b.n	800bcc6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bc70:	683b      	ldr	r3, [r7, #0]
 800bc72:	9300      	str	r3, [sp, #0]
 800bc74:	697b      	ldr	r3, [r7, #20]
 800bc76:	2200      	movs	r2, #0
 800bc78:	2180      	movs	r1, #128	; 0x80
 800bc7a:	68f8      	ldr	r0, [r7, #12]
 800bc7c:	f000 fc54 	bl	800c528 <UART_WaitOnFlagUntilTimeout>
 800bc80:	4603      	mov	r3, r0
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d001      	beq.n	800bc8a <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800bc86:	2303      	movs	r3, #3
 800bc88:	e036      	b.n	800bcf8 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800bc8a:	69fb      	ldr	r3, [r7, #28]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d10b      	bne.n	800bca8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bc90:	69bb      	ldr	r3, [r7, #24]
 800bc92:	881b      	ldrh	r3, [r3, #0]
 800bc94:	461a      	mov	r2, r3
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bc9e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800bca0:	69bb      	ldr	r3, [r7, #24]
 800bca2:	3302      	adds	r3, #2
 800bca4:	61bb      	str	r3, [r7, #24]
 800bca6:	e007      	b.n	800bcb8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800bca8:	69fb      	ldr	r3, [r7, #28]
 800bcaa:	781a      	ldrb	r2, [r3, #0]
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800bcb2:	69fb      	ldr	r3, [r7, #28]
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bcbc:	b29b      	uxth	r3, r3
 800bcbe:	3b01      	subs	r3, #1
 800bcc0:	b29a      	uxth	r2, r3
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bcca:	b29b      	uxth	r3, r3
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d1cf      	bne.n	800bc70 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	9300      	str	r3, [sp, #0]
 800bcd4:	697b      	ldr	r3, [r7, #20]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	2140      	movs	r1, #64	; 0x40
 800bcda:	68f8      	ldr	r0, [r7, #12]
 800bcdc:	f000 fc24 	bl	800c528 <UART_WaitOnFlagUntilTimeout>
 800bce0:	4603      	mov	r3, r0
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d001      	beq.n	800bcea <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800bce6:	2303      	movs	r3, #3
 800bce8:	e006      	b.n	800bcf8 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	2220      	movs	r2, #32
 800bcee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800bcf2:	2300      	movs	r3, #0
 800bcf4:	e000      	b.n	800bcf8 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800bcf6:	2302      	movs	r3, #2
  }
}
 800bcf8:	4618      	mov	r0, r3
 800bcfa:	3720      	adds	r7, #32
 800bcfc:	46bd      	mov	sp, r7
 800bcfe:	bd80      	pop	{r7, pc}

0800bd00 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b08c      	sub	sp, #48	; 0x30
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	60f8      	str	r0, [r7, #12]
 800bd08:	60b9      	str	r1, [r7, #8]
 800bd0a:	4613      	mov	r3, r2
 800bd0c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bd14:	b2db      	uxtb	r3, r3
 800bd16:	2b20      	cmp	r3, #32
 800bd18:	d152      	bne.n	800bdc0 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd1a:	68bb      	ldr	r3, [r7, #8]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d002      	beq.n	800bd26 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800bd20:	88fb      	ldrh	r3, [r7, #6]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d101      	bne.n	800bd2a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800bd26:	2301      	movs	r3, #1
 800bd28:	e04b      	b.n	800bdc2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800bd2a:	68fb      	ldr	r3, [r7, #12]
 800bd2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bd30:	2b01      	cmp	r3, #1
 800bd32:	d101      	bne.n	800bd38 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800bd34:	2302      	movs	r3, #2
 800bd36:	e044      	b.n	800bdc2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800bd38:	68fb      	ldr	r3, [r7, #12]
 800bd3a:	2201      	movs	r2, #1
 800bd3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	2201      	movs	r2, #1
 800bd44:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800bd46:	88fb      	ldrh	r3, [r7, #6]
 800bd48:	461a      	mov	r2, r3
 800bd4a:	68b9      	ldr	r1, [r7, #8]
 800bd4c:	68f8      	ldr	r0, [r7, #12]
 800bd4e:	f000 fc59 	bl	800c604 <UART_Start_Receive_DMA>
 800bd52:	4603      	mov	r3, r0
 800bd54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800bd58:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d12c      	bne.n	800bdba <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd64:	2b01      	cmp	r3, #1
 800bd66:	d125      	bne.n	800bdb4 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bd68:	2300      	movs	r3, #0
 800bd6a:	613b      	str	r3, [r7, #16]
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	613b      	str	r3, [r7, #16]
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	613b      	str	r3, [r7, #16]
 800bd7c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	330c      	adds	r3, #12
 800bd84:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd86:	69bb      	ldr	r3, [r7, #24]
 800bd88:	e853 3f00 	ldrex	r3, [r3]
 800bd8c:	617b      	str	r3, [r7, #20]
   return(result);
 800bd8e:	697b      	ldr	r3, [r7, #20]
 800bd90:	f043 0310 	orr.w	r3, r3, #16
 800bd94:	62bb      	str	r3, [r7, #40]	; 0x28
 800bd96:	68fb      	ldr	r3, [r7, #12]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	330c      	adds	r3, #12
 800bd9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bd9e:	627a      	str	r2, [r7, #36]	; 0x24
 800bda0:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bda2:	6a39      	ldr	r1, [r7, #32]
 800bda4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bda6:	e841 2300 	strex	r3, r2, [r1]
 800bdaa:	61fb      	str	r3, [r7, #28]
   return(result);
 800bdac:	69fb      	ldr	r3, [r7, #28]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d1e5      	bne.n	800bd7e <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800bdb2:	e002      	b.n	800bdba <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800bdb4:	2301      	movs	r3, #1
 800bdb6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800bdba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800bdbe:	e000      	b.n	800bdc2 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800bdc0:	2302      	movs	r3, #2
  }
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3730      	adds	r7, #48	; 0x30
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}
	...

0800bdcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b0ba      	sub	sp, #232	; 0xe8
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	68db      	ldr	r3, [r3, #12]
 800bde4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	695b      	ldr	r3, [r3, #20]
 800bdee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bdfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be02:	f003 030f 	and.w	r3, r3, #15
 800be06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800be0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d10f      	bne.n	800be32 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800be12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be16:	f003 0320 	and.w	r3, r3, #32
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d009      	beq.n	800be32 <HAL_UART_IRQHandler+0x66>
 800be1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be22:	f003 0320 	and.w	r3, r3, #32
 800be26:	2b00      	cmp	r3, #0
 800be28:	d003      	beq.n	800be32 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 fd8b 	bl	800c946 <UART_Receive_IT>
      return;
 800be30:	e256      	b.n	800c2e0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800be32:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800be36:	2b00      	cmp	r3, #0
 800be38:	f000 80de 	beq.w	800bff8 <HAL_UART_IRQHandler+0x22c>
 800be3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be40:	f003 0301 	and.w	r3, r3, #1
 800be44:	2b00      	cmp	r3, #0
 800be46:	d106      	bne.n	800be56 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800be48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be4c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800be50:	2b00      	cmp	r3, #0
 800be52:	f000 80d1 	beq.w	800bff8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800be56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be5a:	f003 0301 	and.w	r3, r3, #1
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d00b      	beq.n	800be7a <HAL_UART_IRQHandler+0xae>
 800be62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d005      	beq.n	800be7a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be72:	f043 0201 	orr.w	r2, r3, #1
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800be7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be7e:	f003 0304 	and.w	r3, r3, #4
 800be82:	2b00      	cmp	r3, #0
 800be84:	d00b      	beq.n	800be9e <HAL_UART_IRQHandler+0xd2>
 800be86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800be8a:	f003 0301 	and.w	r3, r3, #1
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d005      	beq.n	800be9e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be96:	f043 0202 	orr.w	r2, r3, #2
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800be9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bea2:	f003 0302 	and.w	r3, r3, #2
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d00b      	beq.n	800bec2 <HAL_UART_IRQHandler+0xf6>
 800beaa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800beae:	f003 0301 	and.w	r3, r3, #1
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d005      	beq.n	800bec2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beba:	f043 0204 	orr.w	r2, r3, #4
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800bec2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bec6:	f003 0308 	and.w	r3, r3, #8
 800beca:	2b00      	cmp	r3, #0
 800becc:	d011      	beq.n	800bef2 <HAL_UART_IRQHandler+0x126>
 800bece:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bed2:	f003 0320 	and.w	r3, r3, #32
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d105      	bne.n	800bee6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800beda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bede:	f003 0301 	and.w	r3, r3, #1
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d005      	beq.n	800bef2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800beea:	f043 0208 	orr.w	r2, r3, #8
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	f000 81ed 	beq.w	800c2d6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800befc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bf00:	f003 0320 	and.w	r3, r3, #32
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d008      	beq.n	800bf1a <HAL_UART_IRQHandler+0x14e>
 800bf08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bf0c:	f003 0320 	and.w	r3, r3, #32
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d002      	beq.n	800bf1a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800bf14:	6878      	ldr	r0, [r7, #4]
 800bf16:	f000 fd16 	bl	800c946 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	695b      	ldr	r3, [r3, #20]
 800bf20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf24:	2b40      	cmp	r3, #64	; 0x40
 800bf26:	bf0c      	ite	eq
 800bf28:	2301      	moveq	r3, #1
 800bf2a:	2300      	movne	r3, #0
 800bf2c:	b2db      	uxtb	r3, r3
 800bf2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf36:	f003 0308 	and.w	r3, r3, #8
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d103      	bne.n	800bf46 <HAL_UART_IRQHandler+0x17a>
 800bf3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d04f      	beq.n	800bfe6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bf46:	6878      	ldr	r0, [r7, #4]
 800bf48:	f000 fc1e 	bl	800c788 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	695b      	ldr	r3, [r3, #20]
 800bf52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf56:	2b40      	cmp	r3, #64	; 0x40
 800bf58:	d141      	bne.n	800bfde <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	3314      	adds	r3, #20
 800bf60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf64:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bf68:	e853 3f00 	ldrex	r3, [r3]
 800bf6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bf70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bf74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	3314      	adds	r3, #20
 800bf82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bf86:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bf8a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800bf92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800bf96:	e841 2300 	strex	r3, r2, [r1]
 800bf9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bf9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d1d9      	bne.n	800bf5a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d013      	beq.n	800bfd6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfb2:	4a7d      	ldr	r2, [pc, #500]	; (800c1a8 <HAL_UART_IRQHandler+0x3dc>)
 800bfb4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfba:	4618      	mov	r0, r3
 800bfbc:	f7fb ff22 	bl	8007e04 <HAL_DMA_Abort_IT>
 800bfc0:	4603      	mov	r3, r0
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d016      	beq.n	800bff4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfcc:	687a      	ldr	r2, [r7, #4]
 800bfce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bfd0:	4610      	mov	r0, r2
 800bfd2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfd4:	e00e      	b.n	800bff4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bfd6:	6878      	ldr	r0, [r7, #4]
 800bfd8:	f000 f9a4 	bl	800c324 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfdc:	e00a      	b.n	800bff4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f000 f9a0 	bl	800c324 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bfe4:	e006      	b.n	800bff4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bfe6:	6878      	ldr	r0, [r7, #4]
 800bfe8:	f000 f99c 	bl	800c324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	2200      	movs	r2, #0
 800bff0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800bff2:	e170      	b.n	800c2d6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bff4:	bf00      	nop
    return;
 800bff6:	e16e      	b.n	800c2d6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	f040 814a 	bne.w	800c296 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c002:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c006:	f003 0310 	and.w	r3, r3, #16
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	f000 8143 	beq.w	800c296 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c014:	f003 0310 	and.w	r3, r3, #16
 800c018:	2b00      	cmp	r3, #0
 800c01a:	f000 813c 	beq.w	800c296 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c01e:	2300      	movs	r3, #0
 800c020:	60bb      	str	r3, [r7, #8]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	60bb      	str	r3, [r7, #8]
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	685b      	ldr	r3, [r3, #4]
 800c030:	60bb      	str	r3, [r7, #8]
 800c032:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	681b      	ldr	r3, [r3, #0]
 800c038:	695b      	ldr	r3, [r3, #20]
 800c03a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c03e:	2b40      	cmp	r3, #64	; 0x40
 800c040:	f040 80b4 	bne.w	800c1ac <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c050:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c054:	2b00      	cmp	r3, #0
 800c056:	f000 8140 	beq.w	800c2da <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c05e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c062:	429a      	cmp	r2, r3
 800c064:	f080 8139 	bcs.w	800c2da <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c06e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c074:	69db      	ldr	r3, [r3, #28]
 800c076:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c07a:	f000 8088 	beq.w	800c18e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	330c      	adds	r3, #12
 800c084:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c088:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c08c:	e853 3f00 	ldrex	r3, [r3]
 800c090:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c094:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c098:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c09c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	330c      	adds	r3, #12
 800c0a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c0aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c0ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0b2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c0b6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c0ba:	e841 2300 	strex	r3, r2, [r1]
 800c0be:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c0c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d1d9      	bne.n	800c07e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	3314      	adds	r3, #20
 800c0d0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c0d4:	e853 3f00 	ldrex	r3, [r3]
 800c0d8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c0da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c0dc:	f023 0301 	bic.w	r3, r3, #1
 800c0e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	3314      	adds	r3, #20
 800c0ea:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c0ee:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c0f2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0f4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c0f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c0fa:	e841 2300 	strex	r3, r2, [r1]
 800c0fe:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c100:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c102:	2b00      	cmp	r3, #0
 800c104:	d1e1      	bne.n	800c0ca <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	3314      	adds	r3, #20
 800c10c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c10e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c110:	e853 3f00 	ldrex	r3, [r3]
 800c114:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c116:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c118:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c11c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	3314      	adds	r3, #20
 800c126:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c12a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c12c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c12e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c130:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c132:	e841 2300 	strex	r3, r2, [r1]
 800c136:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c138:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d1e3      	bne.n	800c106 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2220      	movs	r2, #32
 800c142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	2200      	movs	r2, #0
 800c14a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	330c      	adds	r3, #12
 800c152:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c156:	e853 3f00 	ldrex	r3, [r3]
 800c15a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c15c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c15e:	f023 0310 	bic.w	r3, r3, #16
 800c162:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	330c      	adds	r3, #12
 800c16c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c170:	65ba      	str	r2, [r7, #88]	; 0x58
 800c172:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c174:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c176:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c178:	e841 2300 	strex	r3, r2, [r1]
 800c17c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c17e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c180:	2b00      	cmp	r3, #0
 800c182:	d1e3      	bne.n	800c14c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c188:	4618      	mov	r0, r3
 800c18a:	f7fb fdcb 	bl	8007d24 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c196:	b29b      	uxth	r3, r3
 800c198:	1ad3      	subs	r3, r2, r3
 800c19a:	b29b      	uxth	r3, r3
 800c19c:	4619      	mov	r1, r3
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f7fa fcc8 	bl	8006b34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c1a4:	e099      	b.n	800c2da <HAL_UART_IRQHandler+0x50e>
 800c1a6:	bf00      	nop
 800c1a8:	0800c84f 	.word	0x0800c84f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c1b4:	b29b      	uxth	r3, r3
 800c1b6:	1ad3      	subs	r3, r2, r3
 800c1b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c1c0:	b29b      	uxth	r3, r3
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	f000 808b 	beq.w	800c2de <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800c1c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	f000 8086 	beq.w	800c2de <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	330c      	adds	r3, #12
 800c1d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1dc:	e853 3f00 	ldrex	r3, [r3]
 800c1e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c1e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c1e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	330c      	adds	r3, #12
 800c1f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c1f6:	647a      	str	r2, [r7, #68]	; 0x44
 800c1f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c1fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c1fe:	e841 2300 	strex	r3, r2, [r1]
 800c202:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c206:	2b00      	cmp	r3, #0
 800c208:	d1e3      	bne.n	800c1d2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	3314      	adds	r3, #20
 800c210:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c214:	e853 3f00 	ldrex	r3, [r3]
 800c218:	623b      	str	r3, [r7, #32]
   return(result);
 800c21a:	6a3b      	ldr	r3, [r7, #32]
 800c21c:	f023 0301 	bic.w	r3, r3, #1
 800c220:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	3314      	adds	r3, #20
 800c22a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c22e:	633a      	str	r2, [r7, #48]	; 0x30
 800c230:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c232:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c234:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c236:	e841 2300 	strex	r3, r2, [r1]
 800c23a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c23c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d1e3      	bne.n	800c20a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2220      	movs	r2, #32
 800c246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2200      	movs	r2, #0
 800c24e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	330c      	adds	r3, #12
 800c256:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c258:	693b      	ldr	r3, [r7, #16]
 800c25a:	e853 3f00 	ldrex	r3, [r3]
 800c25e:	60fb      	str	r3, [r7, #12]
   return(result);
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	f023 0310 	bic.w	r3, r3, #16
 800c266:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	330c      	adds	r3, #12
 800c270:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c274:	61fa      	str	r2, [r7, #28]
 800c276:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c278:	69b9      	ldr	r1, [r7, #24]
 800c27a:	69fa      	ldr	r2, [r7, #28]
 800c27c:	e841 2300 	strex	r3, r2, [r1]
 800c280:	617b      	str	r3, [r7, #20]
   return(result);
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	2b00      	cmp	r3, #0
 800c286:	d1e3      	bne.n	800c250 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c288:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c28c:	4619      	mov	r1, r3
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f7fa fc50 	bl	8006b34 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c294:	e023      	b.n	800c2de <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c29a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d009      	beq.n	800c2b6 <HAL_UART_IRQHandler+0x4ea>
 800c2a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d003      	beq.n	800c2b6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f000 fae1 	bl	800c876 <UART_Transmit_IT>
    return;
 800c2b4:	e014      	b.n	800c2e0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c2b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d00e      	beq.n	800c2e0 <HAL_UART_IRQHandler+0x514>
 800c2c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d008      	beq.n	800c2e0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f000 fb21 	bl	800c916 <UART_EndTransmit_IT>
    return;
 800c2d4:	e004      	b.n	800c2e0 <HAL_UART_IRQHandler+0x514>
    return;
 800c2d6:	bf00      	nop
 800c2d8:	e002      	b.n	800c2e0 <HAL_UART_IRQHandler+0x514>
      return;
 800c2da:	bf00      	nop
 800c2dc:	e000      	b.n	800c2e0 <HAL_UART_IRQHandler+0x514>
      return;
 800c2de:	bf00      	nop
  }
}
 800c2e0:	37e8      	adds	r7, #232	; 0xe8
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}
 800c2e6:	bf00      	nop

0800c2e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c2e8:	b480      	push	{r7}
 800c2ea:	b083      	sub	sp, #12
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c2f0:	bf00      	nop
 800c2f2:	370c      	adds	r7, #12
 800c2f4:	46bd      	mov	sp, r7
 800c2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2fa:	4770      	bx	lr

0800c2fc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c2fc:	b480      	push	{r7}
 800c2fe:	b083      	sub	sp, #12
 800c300:	af00      	add	r7, sp, #0
 800c302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c304:	bf00      	nop
 800c306:	370c      	adds	r7, #12
 800c308:	46bd      	mov	sp, r7
 800c30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c30e:	4770      	bx	lr

0800c310 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c310:	b480      	push	{r7}
 800c312:	b083      	sub	sp, #12
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c318:	bf00      	nop
 800c31a:	370c      	adds	r7, #12
 800c31c:	46bd      	mov	sp, r7
 800c31e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c322:	4770      	bx	lr

0800c324 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c324:	b480      	push	{r7}
 800c326:	b083      	sub	sp, #12
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c32c:	bf00      	nop
 800c32e:	370c      	adds	r7, #12
 800c330:	46bd      	mov	sp, r7
 800c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c336:	4770      	bx	lr

0800c338 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c338:	b580      	push	{r7, lr}
 800c33a:	b09c      	sub	sp, #112	; 0x70
 800c33c:	af00      	add	r7, sp, #0
 800c33e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c344:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c350:	2b00      	cmp	r3, #0
 800c352:	d172      	bne.n	800c43a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800c354:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c356:	2200      	movs	r2, #0
 800c358:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c35a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	330c      	adds	r3, #12
 800c360:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c364:	e853 3f00 	ldrex	r3, [r3]
 800c368:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c36a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c36c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c370:	66bb      	str	r3, [r7, #104]	; 0x68
 800c372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	330c      	adds	r3, #12
 800c378:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c37a:	65ba      	str	r2, [r7, #88]	; 0x58
 800c37c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c37e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c380:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c382:	e841 2300 	strex	r3, r2, [r1]
 800c386:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d1e5      	bne.n	800c35a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c38e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	3314      	adds	r3, #20
 800c394:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c398:	e853 3f00 	ldrex	r3, [r3]
 800c39c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c39e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3a0:	f023 0301 	bic.w	r3, r3, #1
 800c3a4:	667b      	str	r3, [r7, #100]	; 0x64
 800c3a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	3314      	adds	r3, #20
 800c3ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c3ae:	647a      	str	r2, [r7, #68]	; 0x44
 800c3b0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c3b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c3b6:	e841 2300 	strex	r3, r2, [r1]
 800c3ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c3bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d1e5      	bne.n	800c38e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c3c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	3314      	adds	r3, #20
 800c3c8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3cc:	e853 3f00 	ldrex	r3, [r3]
 800c3d0:	623b      	str	r3, [r7, #32]
   return(result);
 800c3d2:	6a3b      	ldr	r3, [r7, #32]
 800c3d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3d8:	663b      	str	r3, [r7, #96]	; 0x60
 800c3da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	3314      	adds	r3, #20
 800c3e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c3e2:	633a      	str	r2, [r7, #48]	; 0x30
 800c3e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c3e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3ea:	e841 2300 	strex	r3, r2, [r1]
 800c3ee:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c3f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d1e5      	bne.n	800c3c2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c3f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c3f8:	2220      	movs	r2, #32
 800c3fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c402:	2b01      	cmp	r3, #1
 800c404:	d119      	bne.n	800c43a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c406:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	330c      	adds	r3, #12
 800c40c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	e853 3f00 	ldrex	r3, [r3]
 800c414:	60fb      	str	r3, [r7, #12]
   return(result);
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	f023 0310 	bic.w	r3, r3, #16
 800c41c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c41e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	330c      	adds	r3, #12
 800c424:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c426:	61fa      	str	r2, [r7, #28]
 800c428:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c42a:	69b9      	ldr	r1, [r7, #24]
 800c42c:	69fa      	ldr	r2, [r7, #28]
 800c42e:	e841 2300 	strex	r3, r2, [r1]
 800c432:	617b      	str	r3, [r7, #20]
   return(result);
 800c434:	697b      	ldr	r3, [r7, #20]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d1e5      	bne.n	800c406 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c43a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c43c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c43e:	2b01      	cmp	r3, #1
 800c440:	d106      	bne.n	800c450 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c442:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c444:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c446:	4619      	mov	r1, r3
 800c448:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c44a:	f7fa fb73 	bl	8006b34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c44e:	e002      	b.n	800c456 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800c450:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800c452:	f7ff ff53 	bl	800c2fc <HAL_UART_RxCpltCallback>
}
 800c456:	bf00      	nop
 800c458:	3770      	adds	r7, #112	; 0x70
 800c45a:	46bd      	mov	sp, r7
 800c45c:	bd80      	pop	{r7, pc}

0800c45e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c45e:	b580      	push	{r7, lr}
 800c460:	b084      	sub	sp, #16
 800c462:	af00      	add	r7, sp, #0
 800c464:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c46a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c470:	2b01      	cmp	r3, #1
 800c472:	d108      	bne.n	800c486 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c478:	085b      	lsrs	r3, r3, #1
 800c47a:	b29b      	uxth	r3, r3
 800c47c:	4619      	mov	r1, r3
 800c47e:	68f8      	ldr	r0, [r7, #12]
 800c480:	f7fa fb58 	bl	8006b34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c484:	e002      	b.n	800c48c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800c486:	68f8      	ldr	r0, [r7, #12]
 800c488:	f7ff ff42 	bl	800c310 <HAL_UART_RxHalfCpltCallback>
}
 800c48c:	bf00      	nop
 800c48e:	3710      	adds	r7, #16
 800c490:	46bd      	mov	sp, r7
 800c492:	bd80      	pop	{r7, pc}

0800c494 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c494:	b580      	push	{r7, lr}
 800c496:	b084      	sub	sp, #16
 800c498:	af00      	add	r7, sp, #0
 800c49a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c49c:	2300      	movs	r3, #0
 800c49e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4a4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	695b      	ldr	r3, [r3, #20]
 800c4ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4b0:	2b80      	cmp	r3, #128	; 0x80
 800c4b2:	bf0c      	ite	eq
 800c4b4:	2301      	moveq	r3, #1
 800c4b6:	2300      	movne	r3, #0
 800c4b8:	b2db      	uxtb	r3, r3
 800c4ba:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c4bc:	68bb      	ldr	r3, [r7, #8]
 800c4be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c4c2:	b2db      	uxtb	r3, r3
 800c4c4:	2b21      	cmp	r3, #33	; 0x21
 800c4c6:	d108      	bne.n	800c4da <UART_DMAError+0x46>
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d005      	beq.n	800c4da <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800c4d4:	68b8      	ldr	r0, [r7, #8]
 800c4d6:	f000 f92f 	bl	800c738 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	695b      	ldr	r3, [r3, #20]
 800c4e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4e4:	2b40      	cmp	r3, #64	; 0x40
 800c4e6:	bf0c      	ite	eq
 800c4e8:	2301      	moveq	r3, #1
 800c4ea:	2300      	movne	r3, #0
 800c4ec:	b2db      	uxtb	r3, r3
 800c4ee:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c4f6:	b2db      	uxtb	r3, r3
 800c4f8:	2b22      	cmp	r3, #34	; 0x22
 800c4fa:	d108      	bne.n	800c50e <UART_DMAError+0x7a>
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d005      	beq.n	800c50e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c502:	68bb      	ldr	r3, [r7, #8]
 800c504:	2200      	movs	r2, #0
 800c506:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800c508:	68b8      	ldr	r0, [r7, #8]
 800c50a:	f000 f93d 	bl	800c788 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c50e:	68bb      	ldr	r3, [r7, #8]
 800c510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c512:	f043 0210 	orr.w	r2, r3, #16
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c51a:	68b8      	ldr	r0, [r7, #8]
 800c51c:	f7ff ff02 	bl	800c324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c520:	bf00      	nop
 800c522:	3710      	adds	r7, #16
 800c524:	46bd      	mov	sp, r7
 800c526:	bd80      	pop	{r7, pc}

0800c528 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b090      	sub	sp, #64	; 0x40
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	60f8      	str	r0, [r7, #12]
 800c530:	60b9      	str	r1, [r7, #8]
 800c532:	603b      	str	r3, [r7, #0]
 800c534:	4613      	mov	r3, r2
 800c536:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c538:	e050      	b.n	800c5dc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c53a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c53c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c540:	d04c      	beq.n	800c5dc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c544:	2b00      	cmp	r3, #0
 800c546:	d007      	beq.n	800c558 <UART_WaitOnFlagUntilTimeout+0x30>
 800c548:	f7fa fd3c 	bl	8006fc4 <HAL_GetTick>
 800c54c:	4602      	mov	r2, r0
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	1ad3      	subs	r3, r2, r3
 800c552:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c554:	429a      	cmp	r2, r3
 800c556:	d241      	bcs.n	800c5dc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	330c      	adds	r3, #12
 800c55e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c562:	e853 3f00 	ldrex	r3, [r3]
 800c566:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c56a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c56e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	330c      	adds	r3, #12
 800c576:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c578:	637a      	str	r2, [r7, #52]	; 0x34
 800c57a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c57c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c57e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c580:	e841 2300 	strex	r3, r2, [r1]
 800c584:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d1e5      	bne.n	800c558 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c58c:	68fb      	ldr	r3, [r7, #12]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	3314      	adds	r3, #20
 800c592:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	e853 3f00 	ldrex	r3, [r3]
 800c59a:	613b      	str	r3, [r7, #16]
   return(result);
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	f023 0301 	bic.w	r3, r3, #1
 800c5a2:	63bb      	str	r3, [r7, #56]	; 0x38
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	3314      	adds	r3, #20
 800c5aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c5ac:	623a      	str	r2, [r7, #32]
 800c5ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5b0:	69f9      	ldr	r1, [r7, #28]
 800c5b2:	6a3a      	ldr	r2, [r7, #32]
 800c5b4:	e841 2300 	strex	r3, r2, [r1]
 800c5b8:	61bb      	str	r3, [r7, #24]
   return(result);
 800c5ba:	69bb      	ldr	r3, [r7, #24]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d1e5      	bne.n	800c58c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	2220      	movs	r2, #32
 800c5c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	2220      	movs	r2, #32
 800c5cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800c5d8:	2303      	movs	r3, #3
 800c5da:	e00f      	b.n	800c5fc <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	681a      	ldr	r2, [r3, #0]
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	4013      	ands	r3, r2
 800c5e6:	68ba      	ldr	r2, [r7, #8]
 800c5e8:	429a      	cmp	r2, r3
 800c5ea:	bf0c      	ite	eq
 800c5ec:	2301      	moveq	r3, #1
 800c5ee:	2300      	movne	r3, #0
 800c5f0:	b2db      	uxtb	r3, r3
 800c5f2:	461a      	mov	r2, r3
 800c5f4:	79fb      	ldrb	r3, [r7, #7]
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d09f      	beq.n	800c53a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c5fa:	2300      	movs	r3, #0
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3740      	adds	r7, #64	; 0x40
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}

0800c604 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b098      	sub	sp, #96	; 0x60
 800c608:	af00      	add	r7, sp, #0
 800c60a:	60f8      	str	r0, [r7, #12]
 800c60c:	60b9      	str	r1, [r7, #8]
 800c60e:	4613      	mov	r3, r2
 800c610:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800c612:	68ba      	ldr	r2, [r7, #8]
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	88fa      	ldrh	r2, [r7, #6]
 800c61c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	2200      	movs	r2, #0
 800c622:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	2222      	movs	r2, #34	; 0x22
 800c628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c630:	4a3e      	ldr	r2, [pc, #248]	; (800c72c <UART_Start_Receive_DMA+0x128>)
 800c632:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c638:	4a3d      	ldr	r2, [pc, #244]	; (800c730 <UART_Start_Receive_DMA+0x12c>)
 800c63a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c640:	4a3c      	ldr	r2, [pc, #240]	; (800c734 <UART_Start_Receive_DMA+0x130>)
 800c642:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c648:	2200      	movs	r2, #0
 800c64a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800c64c:	f107 0308 	add.w	r3, r7, #8
 800c650:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	3304      	adds	r3, #4
 800c65c:	4619      	mov	r1, r3
 800c65e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c660:	681a      	ldr	r2, [r3, #0]
 800c662:	88fb      	ldrh	r3, [r7, #6]
 800c664:	f7fb fb06 	bl	8007c74 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800c668:	2300      	movs	r3, #0
 800c66a:	613b      	str	r3, [r7, #16]
 800c66c:	68fb      	ldr	r3, [r7, #12]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	613b      	str	r3, [r7, #16]
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	685b      	ldr	r3, [r3, #4]
 800c67a:	613b      	str	r3, [r7, #16]
 800c67c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	2200      	movs	r2, #0
 800c682:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	330c      	adds	r3, #12
 800c68c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c68e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c690:	e853 3f00 	ldrex	r3, [r3]
 800c694:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c69c:	65bb      	str	r3, [r7, #88]	; 0x58
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	330c      	adds	r3, #12
 800c6a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c6a6:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c6a8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6aa:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800c6ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c6ae:	e841 2300 	strex	r3, r2, [r1]
 800c6b2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800c6b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d1e5      	bne.n	800c686 <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	3314      	adds	r3, #20
 800c6c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c4:	e853 3f00 	ldrex	r3, [r3]
 800c6c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c6ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6cc:	f043 0301 	orr.w	r3, r3, #1
 800c6d0:	657b      	str	r3, [r7, #84]	; 0x54
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	3314      	adds	r3, #20
 800c6d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c6da:	63ba      	str	r2, [r7, #56]	; 0x38
 800c6dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c6e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c6e2:	e841 2300 	strex	r3, r2, [r1]
 800c6e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c6e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d1e5      	bne.n	800c6ba <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	3314      	adds	r3, #20
 800c6f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6f6:	69bb      	ldr	r3, [r7, #24]
 800c6f8:	e853 3f00 	ldrex	r3, [r3]
 800c6fc:	617b      	str	r3, [r7, #20]
   return(result);
 800c6fe:	697b      	ldr	r3, [r7, #20]
 800c700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c704:	653b      	str	r3, [r7, #80]	; 0x50
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	3314      	adds	r3, #20
 800c70c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c70e:	627a      	str	r2, [r7, #36]	; 0x24
 800c710:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c712:	6a39      	ldr	r1, [r7, #32]
 800c714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c716:	e841 2300 	strex	r3, r2, [r1]
 800c71a:	61fb      	str	r3, [r7, #28]
   return(result);
 800c71c:	69fb      	ldr	r3, [r7, #28]
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d1e5      	bne.n	800c6ee <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800c722:	2300      	movs	r3, #0
}
 800c724:	4618      	mov	r0, r3
 800c726:	3760      	adds	r7, #96	; 0x60
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}
 800c72c:	0800c339 	.word	0x0800c339
 800c730:	0800c45f 	.word	0x0800c45f
 800c734:	0800c495 	.word	0x0800c495

0800c738 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c738:	b480      	push	{r7}
 800c73a:	b089      	sub	sp, #36	; 0x24
 800c73c:	af00      	add	r7, sp, #0
 800c73e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	330c      	adds	r3, #12
 800c746:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	e853 3f00 	ldrex	r3, [r3]
 800c74e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c756:	61fb      	str	r3, [r7, #28]
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	330c      	adds	r3, #12
 800c75e:	69fa      	ldr	r2, [r7, #28]
 800c760:	61ba      	str	r2, [r7, #24]
 800c762:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c764:	6979      	ldr	r1, [r7, #20]
 800c766:	69ba      	ldr	r2, [r7, #24]
 800c768:	e841 2300 	strex	r3, r2, [r1]
 800c76c:	613b      	str	r3, [r7, #16]
   return(result);
 800c76e:	693b      	ldr	r3, [r7, #16]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d1e5      	bne.n	800c740 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2220      	movs	r2, #32
 800c778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800c77c:	bf00      	nop
 800c77e:	3724      	adds	r7, #36	; 0x24
 800c780:	46bd      	mov	sp, r7
 800c782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c786:	4770      	bx	lr

0800c788 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c788:	b480      	push	{r7}
 800c78a:	b095      	sub	sp, #84	; 0x54
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	330c      	adds	r3, #12
 800c796:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c79a:	e853 3f00 	ldrex	r3, [r3]
 800c79e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c7a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c7a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	330c      	adds	r3, #12
 800c7ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c7b0:	643a      	str	r2, [r7, #64]	; 0x40
 800c7b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c7b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c7b8:	e841 2300 	strex	r3, r2, [r1]
 800c7bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d1e5      	bne.n	800c790 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	3314      	adds	r3, #20
 800c7ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7cc:	6a3b      	ldr	r3, [r7, #32]
 800c7ce:	e853 3f00 	ldrex	r3, [r3]
 800c7d2:	61fb      	str	r3, [r7, #28]
   return(result);
 800c7d4:	69fb      	ldr	r3, [r7, #28]
 800c7d6:	f023 0301 	bic.w	r3, r3, #1
 800c7da:	64bb      	str	r3, [r7, #72]	; 0x48
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	3314      	adds	r3, #20
 800c7e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c7e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c7e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c7ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7ec:	e841 2300 	strex	r3, r2, [r1]
 800c7f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c7f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d1e5      	bne.n	800c7c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7fc:	2b01      	cmp	r3, #1
 800c7fe:	d119      	bne.n	800c834 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	330c      	adds	r3, #12
 800c806:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	e853 3f00 	ldrex	r3, [r3]
 800c80e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	f023 0310 	bic.w	r3, r3, #16
 800c816:	647b      	str	r3, [r7, #68]	; 0x44
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	330c      	adds	r3, #12
 800c81e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c820:	61ba      	str	r2, [r7, #24]
 800c822:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c824:	6979      	ldr	r1, [r7, #20]
 800c826:	69ba      	ldr	r2, [r7, #24]
 800c828:	e841 2300 	strex	r3, r2, [r1]
 800c82c:	613b      	str	r3, [r7, #16]
   return(result);
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d1e5      	bne.n	800c800 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	2220      	movs	r2, #32
 800c838:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	2200      	movs	r2, #0
 800c840:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c842:	bf00      	nop
 800c844:	3754      	adds	r7, #84	; 0x54
 800c846:	46bd      	mov	sp, r7
 800c848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84c:	4770      	bx	lr

0800c84e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c84e:	b580      	push	{r7, lr}
 800c850:	b084      	sub	sp, #16
 800c852:	af00      	add	r7, sp, #0
 800c854:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c85a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	2200      	movs	r2, #0
 800c860:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c862:	68fb      	ldr	r3, [r7, #12]
 800c864:	2200      	movs	r2, #0
 800c866:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c868:	68f8      	ldr	r0, [r7, #12]
 800c86a:	f7ff fd5b 	bl	800c324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c86e:	bf00      	nop
 800c870:	3710      	adds	r7, #16
 800c872:	46bd      	mov	sp, r7
 800c874:	bd80      	pop	{r7, pc}

0800c876 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c876:	b480      	push	{r7}
 800c878:	b085      	sub	sp, #20
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c884:	b2db      	uxtb	r3, r3
 800c886:	2b21      	cmp	r3, #33	; 0x21
 800c888:	d13e      	bne.n	800c908 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	689b      	ldr	r3, [r3, #8]
 800c88e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c892:	d114      	bne.n	800c8be <UART_Transmit_IT+0x48>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	691b      	ldr	r3, [r3, #16]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d110      	bne.n	800c8be <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6a1b      	ldr	r3, [r3, #32]
 800c8a0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	881b      	ldrh	r3, [r3, #0]
 800c8a6:	461a      	mov	r2, r3
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c8b0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6a1b      	ldr	r3, [r3, #32]
 800c8b6:	1c9a      	adds	r2, r3, #2
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	621a      	str	r2, [r3, #32]
 800c8bc:	e008      	b.n	800c8d0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6a1b      	ldr	r3, [r3, #32]
 800c8c2:	1c59      	adds	r1, r3, #1
 800c8c4:	687a      	ldr	r2, [r7, #4]
 800c8c6:	6211      	str	r1, [r2, #32]
 800c8c8:	781a      	ldrb	r2, [r3, #0]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c8d4:	b29b      	uxth	r3, r3
 800c8d6:	3b01      	subs	r3, #1
 800c8d8:	b29b      	uxth	r3, r3
 800c8da:	687a      	ldr	r2, [r7, #4]
 800c8dc:	4619      	mov	r1, r3
 800c8de:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d10f      	bne.n	800c904 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	68da      	ldr	r2, [r3, #12]
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c8f2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	68da      	ldr	r2, [r3, #12]
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c902:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c904:	2300      	movs	r3, #0
 800c906:	e000      	b.n	800c90a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c908:	2302      	movs	r3, #2
  }
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3714      	adds	r7, #20
 800c90e:	46bd      	mov	sp, r7
 800c910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c914:	4770      	bx	lr

0800c916 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c916:	b580      	push	{r7, lr}
 800c918:	b082      	sub	sp, #8
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	681b      	ldr	r3, [r3, #0]
 800c922:	68da      	ldr	r2, [r3, #12]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c92c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2220      	movs	r2, #32
 800c932:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f7ff fcd6 	bl	800c2e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c93c:	2300      	movs	r3, #0
}
 800c93e:	4618      	mov	r0, r3
 800c940:	3708      	adds	r7, #8
 800c942:	46bd      	mov	sp, r7
 800c944:	bd80      	pop	{r7, pc}

0800c946 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c946:	b580      	push	{r7, lr}
 800c948:	b08c      	sub	sp, #48	; 0x30
 800c94a:	af00      	add	r7, sp, #0
 800c94c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c954:	b2db      	uxtb	r3, r3
 800c956:	2b22      	cmp	r3, #34	; 0x22
 800c958:	f040 80ab 	bne.w	800cab2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	689b      	ldr	r3, [r3, #8]
 800c960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c964:	d117      	bne.n	800c996 <UART_Receive_IT+0x50>
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	691b      	ldr	r3, [r3, #16]
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d113      	bne.n	800c996 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c96e:	2300      	movs	r3, #0
 800c970:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c976:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	685b      	ldr	r3, [r3, #4]
 800c97e:	b29b      	uxth	r3, r3
 800c980:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c984:	b29a      	uxth	r2, r3
 800c986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c988:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c98e:	1c9a      	adds	r2, r3, #2
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	629a      	str	r2, [r3, #40]	; 0x28
 800c994:	e026      	b.n	800c9e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c99a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c99c:	2300      	movs	r3, #0
 800c99e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	689b      	ldr	r3, [r3, #8]
 800c9a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9a8:	d007      	beq.n	800c9ba <UART_Receive_IT+0x74>
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	689b      	ldr	r3, [r3, #8]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d10a      	bne.n	800c9c8 <UART_Receive_IT+0x82>
 800c9b2:	687b      	ldr	r3, [r7, #4]
 800c9b4:	691b      	ldr	r3, [r3, #16]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d106      	bne.n	800c9c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	685b      	ldr	r3, [r3, #4]
 800c9c0:	b2da      	uxtb	r2, r3
 800c9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c4:	701a      	strb	r2, [r3, #0]
 800c9c6:	e008      	b.n	800c9da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	681b      	ldr	r3, [r3, #0]
 800c9cc:	685b      	ldr	r3, [r3, #4]
 800c9ce:	b2db      	uxtb	r3, r3
 800c9d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9d4:	b2da      	uxtb	r2, r3
 800c9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9de:	1c5a      	adds	r2, r3, #1
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c9e8:	b29b      	uxth	r3, r3
 800c9ea:	3b01      	subs	r3, #1
 800c9ec:	b29b      	uxth	r3, r3
 800c9ee:	687a      	ldr	r2, [r7, #4]
 800c9f0:	4619      	mov	r1, r3
 800c9f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d15a      	bne.n	800caae <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	68da      	ldr	r2, [r3, #12]
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f022 0220 	bic.w	r2, r2, #32
 800ca06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	68da      	ldr	r2, [r3, #12]
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ca16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	695a      	ldr	r2, [r3, #20]
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f022 0201 	bic.w	r2, r2, #1
 800ca26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	2220      	movs	r2, #32
 800ca2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ca34:	2b01      	cmp	r3, #1
 800ca36:	d135      	bne.n	800caa4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	330c      	adds	r3, #12
 800ca44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	e853 3f00 	ldrex	r3, [r3]
 800ca4c:	613b      	str	r3, [r7, #16]
   return(result);
 800ca4e:	693b      	ldr	r3, [r7, #16]
 800ca50:	f023 0310 	bic.w	r3, r3, #16
 800ca54:	627b      	str	r3, [r7, #36]	; 0x24
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	330c      	adds	r3, #12
 800ca5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ca5e:	623a      	str	r2, [r7, #32]
 800ca60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca62:	69f9      	ldr	r1, [r7, #28]
 800ca64:	6a3a      	ldr	r2, [r7, #32]
 800ca66:	e841 2300 	strex	r3, r2, [r1]
 800ca6a:	61bb      	str	r3, [r7, #24]
   return(result);
 800ca6c:	69bb      	ldr	r3, [r7, #24]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d1e5      	bne.n	800ca3e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	f003 0310 	and.w	r3, r3, #16
 800ca7c:	2b10      	cmp	r3, #16
 800ca7e:	d10a      	bne.n	800ca96 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ca80:	2300      	movs	r3, #0
 800ca82:	60fb      	str	r3, [r7, #12]
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	681b      	ldr	r3, [r3, #0]
 800ca8a:	60fb      	str	r3, [r7, #12]
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	60fb      	str	r3, [r7, #12]
 800ca94:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ca9a:	4619      	mov	r1, r3
 800ca9c:	6878      	ldr	r0, [r7, #4]
 800ca9e:	f7fa f849 	bl	8006b34 <HAL_UARTEx_RxEventCallback>
 800caa2:	e002      	b.n	800caaa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800caa4:	6878      	ldr	r0, [r7, #4]
 800caa6:	f7ff fc29 	bl	800c2fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800caaa:	2300      	movs	r3, #0
 800caac:	e002      	b.n	800cab4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800caae:	2300      	movs	r3, #0
 800cab0:	e000      	b.n	800cab4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800cab2:	2302      	movs	r3, #2
  }
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3730      	adds	r7, #48	; 0x30
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}

0800cabc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cabc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cac0:	b09f      	sub	sp, #124	; 0x7c
 800cac2:	af00      	add	r7, sp, #0
 800cac4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	691b      	ldr	r3, [r3, #16]
 800cacc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800cad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cad2:	68d9      	ldr	r1, [r3, #12]
 800cad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cad6:	681a      	ldr	r2, [r3, #0]
 800cad8:	ea40 0301 	orr.w	r3, r0, r1
 800cadc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800cade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cae0:	689a      	ldr	r2, [r3, #8]
 800cae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cae4:	691b      	ldr	r3, [r3, #16]
 800cae6:	431a      	orrs	r2, r3
 800cae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800caea:	695b      	ldr	r3, [r3, #20]
 800caec:	431a      	orrs	r2, r3
 800caee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800caf0:	69db      	ldr	r3, [r3, #28]
 800caf2:	4313      	orrs	r3, r2
 800caf4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800caf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800caf8:	681b      	ldr	r3, [r3, #0]
 800cafa:	68db      	ldr	r3, [r3, #12]
 800cafc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800cb00:	f021 010c 	bic.w	r1, r1, #12
 800cb04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb06:	681a      	ldr	r2, [r3, #0]
 800cb08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cb0a:	430b      	orrs	r3, r1
 800cb0c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cb0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	695b      	ldr	r3, [r3, #20]
 800cb14:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800cb18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb1a:	6999      	ldr	r1, [r3, #24]
 800cb1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb1e:	681a      	ldr	r2, [r3, #0]
 800cb20:	ea40 0301 	orr.w	r3, r0, r1
 800cb24:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800cb26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb28:	681a      	ldr	r2, [r3, #0]
 800cb2a:	4bc5      	ldr	r3, [pc, #788]	; (800ce40 <UART_SetConfig+0x384>)
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d004      	beq.n	800cb3a <UART_SetConfig+0x7e>
 800cb30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb32:	681a      	ldr	r2, [r3, #0]
 800cb34:	4bc3      	ldr	r3, [pc, #780]	; (800ce44 <UART_SetConfig+0x388>)
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d103      	bne.n	800cb42 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800cb3a:	f7fd fcfb 	bl	800a534 <HAL_RCC_GetPCLK2Freq>
 800cb3e:	6778      	str	r0, [r7, #116]	; 0x74
 800cb40:	e002      	b.n	800cb48 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800cb42:	f7fd fce3 	bl	800a50c <HAL_RCC_GetPCLK1Freq>
 800cb46:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cb48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb4a:	69db      	ldr	r3, [r3, #28]
 800cb4c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb50:	f040 80b6 	bne.w	800ccc0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800cb54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cb56:	461c      	mov	r4, r3
 800cb58:	f04f 0500 	mov.w	r5, #0
 800cb5c:	4622      	mov	r2, r4
 800cb5e:	462b      	mov	r3, r5
 800cb60:	1891      	adds	r1, r2, r2
 800cb62:	6439      	str	r1, [r7, #64]	; 0x40
 800cb64:	415b      	adcs	r3, r3
 800cb66:	647b      	str	r3, [r7, #68]	; 0x44
 800cb68:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800cb6c:	1912      	adds	r2, r2, r4
 800cb6e:	eb45 0303 	adc.w	r3, r5, r3
 800cb72:	f04f 0000 	mov.w	r0, #0
 800cb76:	f04f 0100 	mov.w	r1, #0
 800cb7a:	00d9      	lsls	r1, r3, #3
 800cb7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cb80:	00d0      	lsls	r0, r2, #3
 800cb82:	4602      	mov	r2, r0
 800cb84:	460b      	mov	r3, r1
 800cb86:	1911      	adds	r1, r2, r4
 800cb88:	6639      	str	r1, [r7, #96]	; 0x60
 800cb8a:	416b      	adcs	r3, r5
 800cb8c:	667b      	str	r3, [r7, #100]	; 0x64
 800cb8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cb90:	685b      	ldr	r3, [r3, #4]
 800cb92:	461a      	mov	r2, r3
 800cb94:	f04f 0300 	mov.w	r3, #0
 800cb98:	1891      	adds	r1, r2, r2
 800cb9a:	63b9      	str	r1, [r7, #56]	; 0x38
 800cb9c:	415b      	adcs	r3, r3
 800cb9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cba0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800cba4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800cba8:	f7f4 f86e 	bl	8000c88 <__aeabi_uldivmod>
 800cbac:	4602      	mov	r2, r0
 800cbae:	460b      	mov	r3, r1
 800cbb0:	4ba5      	ldr	r3, [pc, #660]	; (800ce48 <UART_SetConfig+0x38c>)
 800cbb2:	fba3 2302 	umull	r2, r3, r3, r2
 800cbb6:	095b      	lsrs	r3, r3, #5
 800cbb8:	011e      	lsls	r6, r3, #4
 800cbba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cbbc:	461c      	mov	r4, r3
 800cbbe:	f04f 0500 	mov.w	r5, #0
 800cbc2:	4622      	mov	r2, r4
 800cbc4:	462b      	mov	r3, r5
 800cbc6:	1891      	adds	r1, r2, r2
 800cbc8:	6339      	str	r1, [r7, #48]	; 0x30
 800cbca:	415b      	adcs	r3, r3
 800cbcc:	637b      	str	r3, [r7, #52]	; 0x34
 800cbce:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800cbd2:	1912      	adds	r2, r2, r4
 800cbd4:	eb45 0303 	adc.w	r3, r5, r3
 800cbd8:	f04f 0000 	mov.w	r0, #0
 800cbdc:	f04f 0100 	mov.w	r1, #0
 800cbe0:	00d9      	lsls	r1, r3, #3
 800cbe2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800cbe6:	00d0      	lsls	r0, r2, #3
 800cbe8:	4602      	mov	r2, r0
 800cbea:	460b      	mov	r3, r1
 800cbec:	1911      	adds	r1, r2, r4
 800cbee:	65b9      	str	r1, [r7, #88]	; 0x58
 800cbf0:	416b      	adcs	r3, r5
 800cbf2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800cbf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cbf6:	685b      	ldr	r3, [r3, #4]
 800cbf8:	461a      	mov	r2, r3
 800cbfa:	f04f 0300 	mov.w	r3, #0
 800cbfe:	1891      	adds	r1, r2, r2
 800cc00:	62b9      	str	r1, [r7, #40]	; 0x28
 800cc02:	415b      	adcs	r3, r3
 800cc04:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc06:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800cc0a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800cc0e:	f7f4 f83b 	bl	8000c88 <__aeabi_uldivmod>
 800cc12:	4602      	mov	r2, r0
 800cc14:	460b      	mov	r3, r1
 800cc16:	4b8c      	ldr	r3, [pc, #560]	; (800ce48 <UART_SetConfig+0x38c>)
 800cc18:	fba3 1302 	umull	r1, r3, r3, r2
 800cc1c:	095b      	lsrs	r3, r3, #5
 800cc1e:	2164      	movs	r1, #100	; 0x64
 800cc20:	fb01 f303 	mul.w	r3, r1, r3
 800cc24:	1ad3      	subs	r3, r2, r3
 800cc26:	00db      	lsls	r3, r3, #3
 800cc28:	3332      	adds	r3, #50	; 0x32
 800cc2a:	4a87      	ldr	r2, [pc, #540]	; (800ce48 <UART_SetConfig+0x38c>)
 800cc2c:	fba2 2303 	umull	r2, r3, r2, r3
 800cc30:	095b      	lsrs	r3, r3, #5
 800cc32:	005b      	lsls	r3, r3, #1
 800cc34:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800cc38:	441e      	add	r6, r3
 800cc3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	f04f 0100 	mov.w	r1, #0
 800cc42:	4602      	mov	r2, r0
 800cc44:	460b      	mov	r3, r1
 800cc46:	1894      	adds	r4, r2, r2
 800cc48:	623c      	str	r4, [r7, #32]
 800cc4a:	415b      	adcs	r3, r3
 800cc4c:	627b      	str	r3, [r7, #36]	; 0x24
 800cc4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800cc52:	1812      	adds	r2, r2, r0
 800cc54:	eb41 0303 	adc.w	r3, r1, r3
 800cc58:	f04f 0400 	mov.w	r4, #0
 800cc5c:	f04f 0500 	mov.w	r5, #0
 800cc60:	00dd      	lsls	r5, r3, #3
 800cc62:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800cc66:	00d4      	lsls	r4, r2, #3
 800cc68:	4622      	mov	r2, r4
 800cc6a:	462b      	mov	r3, r5
 800cc6c:	1814      	adds	r4, r2, r0
 800cc6e:	653c      	str	r4, [r7, #80]	; 0x50
 800cc70:	414b      	adcs	r3, r1
 800cc72:	657b      	str	r3, [r7, #84]	; 0x54
 800cc74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cc76:	685b      	ldr	r3, [r3, #4]
 800cc78:	461a      	mov	r2, r3
 800cc7a:	f04f 0300 	mov.w	r3, #0
 800cc7e:	1891      	adds	r1, r2, r2
 800cc80:	61b9      	str	r1, [r7, #24]
 800cc82:	415b      	adcs	r3, r3
 800cc84:	61fb      	str	r3, [r7, #28]
 800cc86:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800cc8a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800cc8e:	f7f3 fffb 	bl	8000c88 <__aeabi_uldivmod>
 800cc92:	4602      	mov	r2, r0
 800cc94:	460b      	mov	r3, r1
 800cc96:	4b6c      	ldr	r3, [pc, #432]	; (800ce48 <UART_SetConfig+0x38c>)
 800cc98:	fba3 1302 	umull	r1, r3, r3, r2
 800cc9c:	095b      	lsrs	r3, r3, #5
 800cc9e:	2164      	movs	r1, #100	; 0x64
 800cca0:	fb01 f303 	mul.w	r3, r1, r3
 800cca4:	1ad3      	subs	r3, r2, r3
 800cca6:	00db      	lsls	r3, r3, #3
 800cca8:	3332      	adds	r3, #50	; 0x32
 800ccaa:	4a67      	ldr	r2, [pc, #412]	; (800ce48 <UART_SetConfig+0x38c>)
 800ccac:	fba2 2303 	umull	r2, r3, r2, r3
 800ccb0:	095b      	lsrs	r3, r3, #5
 800ccb2:	f003 0207 	and.w	r2, r3, #7
 800ccb6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	4432      	add	r2, r6
 800ccbc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800ccbe:	e0b9      	b.n	800ce34 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ccc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ccc2:	461c      	mov	r4, r3
 800ccc4:	f04f 0500 	mov.w	r5, #0
 800ccc8:	4622      	mov	r2, r4
 800ccca:	462b      	mov	r3, r5
 800cccc:	1891      	adds	r1, r2, r2
 800ccce:	6139      	str	r1, [r7, #16]
 800ccd0:	415b      	adcs	r3, r3
 800ccd2:	617b      	str	r3, [r7, #20]
 800ccd4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ccd8:	1912      	adds	r2, r2, r4
 800ccda:	eb45 0303 	adc.w	r3, r5, r3
 800ccde:	f04f 0000 	mov.w	r0, #0
 800cce2:	f04f 0100 	mov.w	r1, #0
 800cce6:	00d9      	lsls	r1, r3, #3
 800cce8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800ccec:	00d0      	lsls	r0, r2, #3
 800ccee:	4602      	mov	r2, r0
 800ccf0:	460b      	mov	r3, r1
 800ccf2:	eb12 0804 	adds.w	r8, r2, r4
 800ccf6:	eb43 0905 	adc.w	r9, r3, r5
 800ccfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ccfc:	685b      	ldr	r3, [r3, #4]
 800ccfe:	4618      	mov	r0, r3
 800cd00:	f04f 0100 	mov.w	r1, #0
 800cd04:	f04f 0200 	mov.w	r2, #0
 800cd08:	f04f 0300 	mov.w	r3, #0
 800cd0c:	008b      	lsls	r3, r1, #2
 800cd0e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800cd12:	0082      	lsls	r2, r0, #2
 800cd14:	4640      	mov	r0, r8
 800cd16:	4649      	mov	r1, r9
 800cd18:	f7f3 ffb6 	bl	8000c88 <__aeabi_uldivmod>
 800cd1c:	4602      	mov	r2, r0
 800cd1e:	460b      	mov	r3, r1
 800cd20:	4b49      	ldr	r3, [pc, #292]	; (800ce48 <UART_SetConfig+0x38c>)
 800cd22:	fba3 2302 	umull	r2, r3, r3, r2
 800cd26:	095b      	lsrs	r3, r3, #5
 800cd28:	011e      	lsls	r6, r3, #4
 800cd2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd2c:	4618      	mov	r0, r3
 800cd2e:	f04f 0100 	mov.w	r1, #0
 800cd32:	4602      	mov	r2, r0
 800cd34:	460b      	mov	r3, r1
 800cd36:	1894      	adds	r4, r2, r2
 800cd38:	60bc      	str	r4, [r7, #8]
 800cd3a:	415b      	adcs	r3, r3
 800cd3c:	60fb      	str	r3, [r7, #12]
 800cd3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cd42:	1812      	adds	r2, r2, r0
 800cd44:	eb41 0303 	adc.w	r3, r1, r3
 800cd48:	f04f 0400 	mov.w	r4, #0
 800cd4c:	f04f 0500 	mov.w	r5, #0
 800cd50:	00dd      	lsls	r5, r3, #3
 800cd52:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800cd56:	00d4      	lsls	r4, r2, #3
 800cd58:	4622      	mov	r2, r4
 800cd5a:	462b      	mov	r3, r5
 800cd5c:	1814      	adds	r4, r2, r0
 800cd5e:	64bc      	str	r4, [r7, #72]	; 0x48
 800cd60:	414b      	adcs	r3, r1
 800cd62:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cd66:	685b      	ldr	r3, [r3, #4]
 800cd68:	4618      	mov	r0, r3
 800cd6a:	f04f 0100 	mov.w	r1, #0
 800cd6e:	f04f 0200 	mov.w	r2, #0
 800cd72:	f04f 0300 	mov.w	r3, #0
 800cd76:	008b      	lsls	r3, r1, #2
 800cd78:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800cd7c:	0082      	lsls	r2, r0, #2
 800cd7e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800cd82:	f7f3 ff81 	bl	8000c88 <__aeabi_uldivmod>
 800cd86:	4602      	mov	r2, r0
 800cd88:	460b      	mov	r3, r1
 800cd8a:	4b2f      	ldr	r3, [pc, #188]	; (800ce48 <UART_SetConfig+0x38c>)
 800cd8c:	fba3 1302 	umull	r1, r3, r3, r2
 800cd90:	095b      	lsrs	r3, r3, #5
 800cd92:	2164      	movs	r1, #100	; 0x64
 800cd94:	fb01 f303 	mul.w	r3, r1, r3
 800cd98:	1ad3      	subs	r3, r2, r3
 800cd9a:	011b      	lsls	r3, r3, #4
 800cd9c:	3332      	adds	r3, #50	; 0x32
 800cd9e:	4a2a      	ldr	r2, [pc, #168]	; (800ce48 <UART_SetConfig+0x38c>)
 800cda0:	fba2 2303 	umull	r2, r3, r2, r3
 800cda4:	095b      	lsrs	r3, r3, #5
 800cda6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cdaa:	441e      	add	r6, r3
 800cdac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f04f 0100 	mov.w	r1, #0
 800cdb4:	4602      	mov	r2, r0
 800cdb6:	460b      	mov	r3, r1
 800cdb8:	1894      	adds	r4, r2, r2
 800cdba:	603c      	str	r4, [r7, #0]
 800cdbc:	415b      	adcs	r3, r3
 800cdbe:	607b      	str	r3, [r7, #4]
 800cdc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdc4:	1812      	adds	r2, r2, r0
 800cdc6:	eb41 0303 	adc.w	r3, r1, r3
 800cdca:	f04f 0400 	mov.w	r4, #0
 800cdce:	f04f 0500 	mov.w	r5, #0
 800cdd2:	00dd      	lsls	r5, r3, #3
 800cdd4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800cdd8:	00d4      	lsls	r4, r2, #3
 800cdda:	4622      	mov	r2, r4
 800cddc:	462b      	mov	r3, r5
 800cdde:	eb12 0a00 	adds.w	sl, r2, r0
 800cde2:	eb43 0b01 	adc.w	fp, r3, r1
 800cde6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cde8:	685b      	ldr	r3, [r3, #4]
 800cdea:	4618      	mov	r0, r3
 800cdec:	f04f 0100 	mov.w	r1, #0
 800cdf0:	f04f 0200 	mov.w	r2, #0
 800cdf4:	f04f 0300 	mov.w	r3, #0
 800cdf8:	008b      	lsls	r3, r1, #2
 800cdfa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800cdfe:	0082      	lsls	r2, r0, #2
 800ce00:	4650      	mov	r0, sl
 800ce02:	4659      	mov	r1, fp
 800ce04:	f7f3 ff40 	bl	8000c88 <__aeabi_uldivmod>
 800ce08:	4602      	mov	r2, r0
 800ce0a:	460b      	mov	r3, r1
 800ce0c:	4b0e      	ldr	r3, [pc, #56]	; (800ce48 <UART_SetConfig+0x38c>)
 800ce0e:	fba3 1302 	umull	r1, r3, r3, r2
 800ce12:	095b      	lsrs	r3, r3, #5
 800ce14:	2164      	movs	r1, #100	; 0x64
 800ce16:	fb01 f303 	mul.w	r3, r1, r3
 800ce1a:	1ad3      	subs	r3, r2, r3
 800ce1c:	011b      	lsls	r3, r3, #4
 800ce1e:	3332      	adds	r3, #50	; 0x32
 800ce20:	4a09      	ldr	r2, [pc, #36]	; (800ce48 <UART_SetConfig+0x38c>)
 800ce22:	fba2 2303 	umull	r2, r3, r2, r3
 800ce26:	095b      	lsrs	r3, r3, #5
 800ce28:	f003 020f 	and.w	r2, r3, #15
 800ce2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce2e:	681b      	ldr	r3, [r3, #0]
 800ce30:	4432      	add	r2, r6
 800ce32:	609a      	str	r2, [r3, #8]
}
 800ce34:	bf00      	nop
 800ce36:	377c      	adds	r7, #124	; 0x7c
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce3e:	bf00      	nop
 800ce40:	40011000 	.word	0x40011000
 800ce44:	40011400 	.word	0x40011400
 800ce48:	51eb851f 	.word	0x51eb851f

0800ce4c <LWIP_ReInit>:
uint8_t NETMASK_ADDRESS[4];
uint8_t GATEWAY_ADDRESS[4];

/* USER CODE BEGIN 2 */
static void LWIP_ReInit()
{
 800ce4c:	b480      	push	{r7}
 800ce4e:	af00      	add	r7, sp, #0
	if(((uint8_t)settings.retain.eth_sett.addr0 ||
 800ce50:	4b5c      	ldr	r3, [pc, #368]	; (800cfc4 <LWIP_ReInit+0x178>)
 800ce52:	8c1b      	ldrh	r3, [r3, #32]
 800ce54:	b2db      	uxtb	r3, r3
 800ce56:	2b00      	cmp	r3, #0
 800ce58:	d10e      	bne.n	800ce78 <LWIP_ReInit+0x2c>
			(uint8_t)settings.retain.eth_sett.addr1 ||
 800ce5a:	4b5a      	ldr	r3, [pc, #360]	; (800cfc4 <LWIP_ReInit+0x178>)
 800ce5c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ce5e:	b2db      	uxtb	r3, r3
	if(((uint8_t)settings.retain.eth_sett.addr0 ||
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d109      	bne.n	800ce78 <LWIP_ReInit+0x2c>
			(uint8_t)settings.retain.eth_sett.addr2 ||
 800ce64:	4b57      	ldr	r3, [pc, #348]	; (800cfc4 <LWIP_ReInit+0x178>)
 800ce66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ce68:	b2db      	uxtb	r3, r3
			(uint8_t)settings.retain.eth_sett.addr1 ||
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d104      	bne.n	800ce78 <LWIP_ReInit+0x2c>
			(uint8_t)settings.retain.eth_sett.addr3))
 800ce6e:	4b55      	ldr	r3, [pc, #340]	; (800cfc4 <LWIP_ReInit+0x178>)
 800ce70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ce72:	b2db      	uxtb	r3, r3
			(uint8_t)settings.retain.eth_sett.addr2 ||
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d013      	beq.n	800cea0 <LWIP_ReInit+0x54>
	{
		  IP_ADDRESS[0] = (uint8_t)settings.retain.eth_sett.addr0;
 800ce78:	4b52      	ldr	r3, [pc, #328]	; (800cfc4 <LWIP_ReInit+0x178>)
 800ce7a:	8c1b      	ldrh	r3, [r3, #32]
 800ce7c:	b2da      	uxtb	r2, r3
 800ce7e:	4b52      	ldr	r3, [pc, #328]	; (800cfc8 <LWIP_ReInit+0x17c>)
 800ce80:	701a      	strb	r2, [r3, #0]
		  IP_ADDRESS[1] = (uint8_t)settings.retain.eth_sett.addr1;
 800ce82:	4b50      	ldr	r3, [pc, #320]	; (800cfc4 <LWIP_ReInit+0x178>)
 800ce84:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800ce86:	b2da      	uxtb	r2, r3
 800ce88:	4b4f      	ldr	r3, [pc, #316]	; (800cfc8 <LWIP_ReInit+0x17c>)
 800ce8a:	705a      	strb	r2, [r3, #1]
		  IP_ADDRESS[2] = (uint8_t)settings.retain.eth_sett.addr2;
 800ce8c:	4b4d      	ldr	r3, [pc, #308]	; (800cfc4 <LWIP_ReInit+0x178>)
 800ce8e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ce90:	b2da      	uxtb	r2, r3
 800ce92:	4b4d      	ldr	r3, [pc, #308]	; (800cfc8 <LWIP_ReInit+0x17c>)
 800ce94:	709a      	strb	r2, [r3, #2]
		  IP_ADDRESS[3] = (uint8_t)settings.retain.eth_sett.addr3;
 800ce96:	4b4b      	ldr	r3, [pc, #300]	; (800cfc4 <LWIP_ReInit+0x178>)
 800ce98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ce9a:	b2da      	uxtb	r2, r3
 800ce9c:	4b4a      	ldr	r3, [pc, #296]	; (800cfc8 <LWIP_ReInit+0x17c>)
 800ce9e:	70da      	strb	r2, [r3, #3]
	}

	if(((uint8_t)settings.retain.eth_sett.mask0 ||
 800cea0:	4b48      	ldr	r3, [pc, #288]	; (800cfc4 <LWIP_ReInit+0x178>)
 800cea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cea4:	b2db      	uxtb	r3, r3
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d10e      	bne.n	800cec8 <LWIP_ReInit+0x7c>
			(uint8_t)settings.retain.eth_sett.mask1 ||
 800ceaa:	4b46      	ldr	r3, [pc, #280]	; (800cfc4 <LWIP_ReInit+0x178>)
 800ceac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ceae:	b2db      	uxtb	r3, r3
	if(((uint8_t)settings.retain.eth_sett.mask0 ||
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d109      	bne.n	800cec8 <LWIP_ReInit+0x7c>
			(uint8_t)settings.retain.eth_sett.mask2 ||
 800ceb4:	4b43      	ldr	r3, [pc, #268]	; (800cfc4 <LWIP_ReInit+0x178>)
 800ceb6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ceb8:	b2db      	uxtb	r3, r3
			(uint8_t)settings.retain.eth_sett.mask1 ||
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d104      	bne.n	800cec8 <LWIP_ReInit+0x7c>
			(uint8_t)settings.retain.eth_sett.mask3))
 800cebe:	4b41      	ldr	r3, [pc, #260]	; (800cfc4 <LWIP_ReInit+0x178>)
 800cec0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800cec2:	b2db      	uxtb	r3, r3
			(uint8_t)settings.retain.eth_sett.mask2 ||
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d013      	beq.n	800cef0 <LWIP_ReInit+0xa4>
	{
		  NETMASK_ADDRESS[0] = (uint8_t)settings.retain.eth_sett.mask0;
 800cec8:	4b3e      	ldr	r3, [pc, #248]	; (800cfc4 <LWIP_ReInit+0x178>)
 800ceca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cecc:	b2da      	uxtb	r2, r3
 800cece:	4b3f      	ldr	r3, [pc, #252]	; (800cfcc <LWIP_ReInit+0x180>)
 800ced0:	701a      	strb	r2, [r3, #0]
		  NETMASK_ADDRESS[1] = (uint8_t)settings.retain.eth_sett.mask1;
 800ced2:	4b3c      	ldr	r3, [pc, #240]	; (800cfc4 <LWIP_ReInit+0x178>)
 800ced4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ced6:	b2da      	uxtb	r2, r3
 800ced8:	4b3c      	ldr	r3, [pc, #240]	; (800cfcc <LWIP_ReInit+0x180>)
 800ceda:	705a      	strb	r2, [r3, #1]
		  NETMASK_ADDRESS[2] = (uint8_t)settings.retain.eth_sett.mask2;
 800cedc:	4b39      	ldr	r3, [pc, #228]	; (800cfc4 <LWIP_ReInit+0x178>)
 800cede:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cee0:	b2da      	uxtb	r2, r3
 800cee2:	4b3a      	ldr	r3, [pc, #232]	; (800cfcc <LWIP_ReInit+0x180>)
 800cee4:	709a      	strb	r2, [r3, #2]
		  NETMASK_ADDRESS[3] = (uint8_t)settings.retain.eth_sett.mask3;
 800cee6:	4b37      	ldr	r3, [pc, #220]	; (800cfc4 <LWIP_ReInit+0x178>)
 800cee8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ceea:	b2da      	uxtb	r2, r3
 800ceec:	4b37      	ldr	r3, [pc, #220]	; (800cfcc <LWIP_ReInit+0x180>)
 800ceee:	70da      	strb	r2, [r3, #3]
	}
	if(((uint8_t)settings.retain.eth_sett.gateway0 ||
 800cef0:	4b34      	ldr	r3, [pc, #208]	; (800cfc4 <LWIP_ReInit+0x178>)
 800cef2:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800cef4:	b2db      	uxtb	r3, r3
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d10e      	bne.n	800cf18 <LWIP_ReInit+0xcc>
			(uint8_t)settings.retain.eth_sett.gateway1 ||
 800cefa:	4b32      	ldr	r3, [pc, #200]	; (800cfc4 <LWIP_ReInit+0x178>)
 800cefc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cefe:	b2db      	uxtb	r3, r3
	if(((uint8_t)settings.retain.eth_sett.gateway0 ||
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d109      	bne.n	800cf18 <LWIP_ReInit+0xcc>
			(uint8_t)settings.retain.eth_sett.gateway2 ||
 800cf04:	4b2f      	ldr	r3, [pc, #188]	; (800cfc4 <LWIP_ReInit+0x178>)
 800cf06:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800cf08:	b2db      	uxtb	r3, r3
			(uint8_t)settings.retain.eth_sett.gateway1 ||
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d104      	bne.n	800cf18 <LWIP_ReInit+0xcc>
			(uint8_t)settings.retain.eth_sett.gateway3))
 800cf0e:	4b2d      	ldr	r3, [pc, #180]	; (800cfc4 <LWIP_ReInit+0x178>)
 800cf10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cf12:	b2db      	uxtb	r3, r3
			(uint8_t)settings.retain.eth_sett.gateway2 ||
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d013      	beq.n	800cf40 <LWIP_ReInit+0xf4>
	{
		  GATEWAY_ADDRESS[0] = (uint8_t)settings.retain.eth_sett.gateway0;
 800cf18:	4b2a      	ldr	r3, [pc, #168]	; (800cfc4 <LWIP_ReInit+0x178>)
 800cf1a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800cf1c:	b2da      	uxtb	r2, r3
 800cf1e:	4b2c      	ldr	r3, [pc, #176]	; (800cfd0 <LWIP_ReInit+0x184>)
 800cf20:	701a      	strb	r2, [r3, #0]
		  GATEWAY_ADDRESS[1] = (uint8_t)settings.retain.eth_sett.gateway1;
 800cf22:	4b28      	ldr	r3, [pc, #160]	; (800cfc4 <LWIP_ReInit+0x178>)
 800cf24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cf26:	b2da      	uxtb	r2, r3
 800cf28:	4b29      	ldr	r3, [pc, #164]	; (800cfd0 <LWIP_ReInit+0x184>)
 800cf2a:	705a      	strb	r2, [r3, #1]
		  GATEWAY_ADDRESS[2] = (uint8_t)settings.retain.eth_sett.gateway2;
 800cf2c:	4b25      	ldr	r3, [pc, #148]	; (800cfc4 <LWIP_ReInit+0x178>)
 800cf2e:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800cf30:	b2da      	uxtb	r2, r3
 800cf32:	4b27      	ldr	r3, [pc, #156]	; (800cfd0 <LWIP_ReInit+0x184>)
 800cf34:	709a      	strb	r2, [r3, #2]
		  GATEWAY_ADDRESS[3] = (uint8_t)settings.retain.eth_sett.gateway3;
 800cf36:	4b23      	ldr	r3, [pc, #140]	; (800cfc4 <LWIP_ReInit+0x178>)
 800cf38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800cf3a:	b2da      	uxtb	r2, r3
 800cf3c:	4b24      	ldr	r3, [pc, #144]	; (800cfd0 <LWIP_ReInit+0x184>)
 800cf3e:	70da      	strb	r2, [r3, #3]
	}
	settings.retain.eth_sett.addr0 = IP_ADDRESS[0];
 800cf40:	4b21      	ldr	r3, [pc, #132]	; (800cfc8 <LWIP_ReInit+0x17c>)
 800cf42:	781b      	ldrb	r3, [r3, #0]
 800cf44:	b29a      	uxth	r2, r3
 800cf46:	4b1f      	ldr	r3, [pc, #124]	; (800cfc4 <LWIP_ReInit+0x178>)
 800cf48:	841a      	strh	r2, [r3, #32]
	settings.retain.eth_sett.addr1 = IP_ADDRESS[1];
 800cf4a:	4b1f      	ldr	r3, [pc, #124]	; (800cfc8 <LWIP_ReInit+0x17c>)
 800cf4c:	785b      	ldrb	r3, [r3, #1]
 800cf4e:	b29a      	uxth	r2, r3
 800cf50:	4b1c      	ldr	r3, [pc, #112]	; (800cfc4 <LWIP_ReInit+0x178>)
 800cf52:	845a      	strh	r2, [r3, #34]	; 0x22
	settings.retain.eth_sett.addr2 = IP_ADDRESS[2];
 800cf54:	4b1c      	ldr	r3, [pc, #112]	; (800cfc8 <LWIP_ReInit+0x17c>)
 800cf56:	789b      	ldrb	r3, [r3, #2]
 800cf58:	b29a      	uxth	r2, r3
 800cf5a:	4b1a      	ldr	r3, [pc, #104]	; (800cfc4 <LWIP_ReInit+0x178>)
 800cf5c:	849a      	strh	r2, [r3, #36]	; 0x24
	settings.retain.eth_sett.addr3 = IP_ADDRESS[3];
 800cf5e:	4b1a      	ldr	r3, [pc, #104]	; (800cfc8 <LWIP_ReInit+0x17c>)
 800cf60:	78db      	ldrb	r3, [r3, #3]
 800cf62:	b29a      	uxth	r2, r3
 800cf64:	4b17      	ldr	r3, [pc, #92]	; (800cfc4 <LWIP_ReInit+0x178>)
 800cf66:	84da      	strh	r2, [r3, #38]	; 0x26

	settings.retain.eth_sett.mask0 = NETMASK_ADDRESS[0];
 800cf68:	4b18      	ldr	r3, [pc, #96]	; (800cfcc <LWIP_ReInit+0x180>)
 800cf6a:	781b      	ldrb	r3, [r3, #0]
 800cf6c:	b29a      	uxth	r2, r3
 800cf6e:	4b15      	ldr	r3, [pc, #84]	; (800cfc4 <LWIP_ReInit+0x178>)
 800cf70:	851a      	strh	r2, [r3, #40]	; 0x28
	settings.retain.eth_sett.mask1 = NETMASK_ADDRESS[1];
 800cf72:	4b16      	ldr	r3, [pc, #88]	; (800cfcc <LWIP_ReInit+0x180>)
 800cf74:	785b      	ldrb	r3, [r3, #1]
 800cf76:	b29a      	uxth	r2, r3
 800cf78:	4b12      	ldr	r3, [pc, #72]	; (800cfc4 <LWIP_ReInit+0x178>)
 800cf7a:	855a      	strh	r2, [r3, #42]	; 0x2a
	settings.retain.eth_sett.mask2 = NETMASK_ADDRESS[2];
 800cf7c:	4b13      	ldr	r3, [pc, #76]	; (800cfcc <LWIP_ReInit+0x180>)
 800cf7e:	789b      	ldrb	r3, [r3, #2]
 800cf80:	b29a      	uxth	r2, r3
 800cf82:	4b10      	ldr	r3, [pc, #64]	; (800cfc4 <LWIP_ReInit+0x178>)
 800cf84:	859a      	strh	r2, [r3, #44]	; 0x2c
	settings.retain.eth_sett.mask3 = NETMASK_ADDRESS[3];
 800cf86:	4b11      	ldr	r3, [pc, #68]	; (800cfcc <LWIP_ReInit+0x180>)
 800cf88:	78db      	ldrb	r3, [r3, #3]
 800cf8a:	b29a      	uxth	r2, r3
 800cf8c:	4b0d      	ldr	r3, [pc, #52]	; (800cfc4 <LWIP_ReInit+0x178>)
 800cf8e:	85da      	strh	r2, [r3, #46]	; 0x2e

	settings.retain.eth_sett.gateway0 =  GATEWAY_ADDRESS[0];
 800cf90:	4b0f      	ldr	r3, [pc, #60]	; (800cfd0 <LWIP_ReInit+0x184>)
 800cf92:	781b      	ldrb	r3, [r3, #0]
 800cf94:	b29a      	uxth	r2, r3
 800cf96:	4b0b      	ldr	r3, [pc, #44]	; (800cfc4 <LWIP_ReInit+0x178>)
 800cf98:	861a      	strh	r2, [r3, #48]	; 0x30
	settings.retain.eth_sett.gateway1 =  GATEWAY_ADDRESS[1];
 800cf9a:	4b0d      	ldr	r3, [pc, #52]	; (800cfd0 <LWIP_ReInit+0x184>)
 800cf9c:	785b      	ldrb	r3, [r3, #1]
 800cf9e:	b29a      	uxth	r2, r3
 800cfa0:	4b08      	ldr	r3, [pc, #32]	; (800cfc4 <LWIP_ReInit+0x178>)
 800cfa2:	865a      	strh	r2, [r3, #50]	; 0x32
	settings.retain.eth_sett.gateway2 =  GATEWAY_ADDRESS[2];
 800cfa4:	4b0a      	ldr	r3, [pc, #40]	; (800cfd0 <LWIP_ReInit+0x184>)
 800cfa6:	789b      	ldrb	r3, [r3, #2]
 800cfa8:	b29a      	uxth	r2, r3
 800cfaa:	4b06      	ldr	r3, [pc, #24]	; (800cfc4 <LWIP_ReInit+0x178>)
 800cfac:	869a      	strh	r2, [r3, #52]	; 0x34
	settings.retain.eth_sett.gateway3 =  GATEWAY_ADDRESS[3];
 800cfae:	4b08      	ldr	r3, [pc, #32]	; (800cfd0 <LWIP_ReInit+0x184>)
 800cfb0:	78db      	ldrb	r3, [r3, #3]
 800cfb2:	b29a      	uxth	r2, r3
 800cfb4:	4b03      	ldr	r3, [pc, #12]	; (800cfc4 <LWIP_ReInit+0x178>)
 800cfb6:	86da      	strh	r2, [r3, #54]	; 0x36


}
 800cfb8:	bf00      	nop
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc0:	4770      	bx	lr
 800cfc2:	bf00      	nop
 800cfc4:	20007474 	.word	0x20007474
 800cfc8:	20007924 	.word	0x20007924
 800cfcc:	20007920 	.word	0x20007920
 800cfd0:	200078e4 	.word	0x200078e4

0800cfd4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b086      	sub	sp, #24
 800cfd8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800cfda:	4b99      	ldr	r3, [pc, #612]	; (800d240 <MX_LWIP_Init+0x26c>)
 800cfdc:	22c0      	movs	r2, #192	; 0xc0
 800cfde:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800cfe0:	4b97      	ldr	r3, [pc, #604]	; (800d240 <MX_LWIP_Init+0x26c>)
 800cfe2:	22a8      	movs	r2, #168	; 0xa8
 800cfe4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 100;
 800cfe6:	4b96      	ldr	r3, [pc, #600]	; (800d240 <MX_LWIP_Init+0x26c>)
 800cfe8:	2264      	movs	r2, #100	; 0x64
 800cfea:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 177;
 800cfec:	4b94      	ldr	r3, [pc, #592]	; (800d240 <MX_LWIP_Init+0x26c>)
 800cfee:	22b1      	movs	r2, #177	; 0xb1
 800cff0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800cff2:	4b94      	ldr	r3, [pc, #592]	; (800d244 <MX_LWIP_Init+0x270>)
 800cff4:	22ff      	movs	r2, #255	; 0xff
 800cff6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800cff8:	4b92      	ldr	r3, [pc, #584]	; (800d244 <MX_LWIP_Init+0x270>)
 800cffa:	22ff      	movs	r2, #255	; 0xff
 800cffc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800cffe:	4b91      	ldr	r3, [pc, #580]	; (800d244 <MX_LWIP_Init+0x270>)
 800d000:	22ff      	movs	r2, #255	; 0xff
 800d002:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800d004:	4b8f      	ldr	r3, [pc, #572]	; (800d244 <MX_LWIP_Init+0x270>)
 800d006:	2200      	movs	r2, #0
 800d008:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800d00a:	4b8f      	ldr	r3, [pc, #572]	; (800d248 <MX_LWIP_Init+0x274>)
 800d00c:	22c0      	movs	r2, #192	; 0xc0
 800d00e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800d010:	4b8d      	ldr	r3, [pc, #564]	; (800d248 <MX_LWIP_Init+0x274>)
 800d012:	22a8      	movs	r2, #168	; 0xa8
 800d014:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 100;
 800d016:	4b8c      	ldr	r3, [pc, #560]	; (800d248 <MX_LWIP_Init+0x274>)
 800d018:	2264      	movs	r2, #100	; 0x64
 800d01a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800d01c:	4b8a      	ldr	r3, [pc, #552]	; (800d248 <MX_LWIP_Init+0x274>)
 800d01e:	2201      	movs	r2, #1
 800d020:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
  LWIP_ReInit();
 800d022:	f7ff ff13 	bl	800ce4c <LWIP_ReInit>
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800d026:	2100      	movs	r1, #0
 800d028:	2000      	movs	r0, #0
 800d02a:	f005 ff41 	bl	8012eb0 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800d02e:	4b84      	ldr	r3, [pc, #528]	; (800d240 <MX_LWIP_Init+0x26c>)
 800d030:	781b      	ldrb	r3, [r3, #0]
 800d032:	061a      	lsls	r2, r3, #24
 800d034:	4b82      	ldr	r3, [pc, #520]	; (800d240 <MX_LWIP_Init+0x26c>)
 800d036:	785b      	ldrb	r3, [r3, #1]
 800d038:	041b      	lsls	r3, r3, #16
 800d03a:	431a      	orrs	r2, r3
 800d03c:	4b80      	ldr	r3, [pc, #512]	; (800d240 <MX_LWIP_Init+0x26c>)
 800d03e:	789b      	ldrb	r3, [r3, #2]
 800d040:	021b      	lsls	r3, r3, #8
 800d042:	4313      	orrs	r3, r2
 800d044:	4a7e      	ldr	r2, [pc, #504]	; (800d240 <MX_LWIP_Init+0x26c>)
 800d046:	78d2      	ldrb	r2, [r2, #3]
 800d048:	4313      	orrs	r3, r2
 800d04a:	061a      	lsls	r2, r3, #24
 800d04c:	4b7c      	ldr	r3, [pc, #496]	; (800d240 <MX_LWIP_Init+0x26c>)
 800d04e:	781b      	ldrb	r3, [r3, #0]
 800d050:	0619      	lsls	r1, r3, #24
 800d052:	4b7b      	ldr	r3, [pc, #492]	; (800d240 <MX_LWIP_Init+0x26c>)
 800d054:	785b      	ldrb	r3, [r3, #1]
 800d056:	041b      	lsls	r3, r3, #16
 800d058:	4319      	orrs	r1, r3
 800d05a:	4b79      	ldr	r3, [pc, #484]	; (800d240 <MX_LWIP_Init+0x26c>)
 800d05c:	789b      	ldrb	r3, [r3, #2]
 800d05e:	021b      	lsls	r3, r3, #8
 800d060:	430b      	orrs	r3, r1
 800d062:	4977      	ldr	r1, [pc, #476]	; (800d240 <MX_LWIP_Init+0x26c>)
 800d064:	78c9      	ldrb	r1, [r1, #3]
 800d066:	430b      	orrs	r3, r1
 800d068:	021b      	lsls	r3, r3, #8
 800d06a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d06e:	431a      	orrs	r2, r3
 800d070:	4b73      	ldr	r3, [pc, #460]	; (800d240 <MX_LWIP_Init+0x26c>)
 800d072:	781b      	ldrb	r3, [r3, #0]
 800d074:	0619      	lsls	r1, r3, #24
 800d076:	4b72      	ldr	r3, [pc, #456]	; (800d240 <MX_LWIP_Init+0x26c>)
 800d078:	785b      	ldrb	r3, [r3, #1]
 800d07a:	041b      	lsls	r3, r3, #16
 800d07c:	4319      	orrs	r1, r3
 800d07e:	4b70      	ldr	r3, [pc, #448]	; (800d240 <MX_LWIP_Init+0x26c>)
 800d080:	789b      	ldrb	r3, [r3, #2]
 800d082:	021b      	lsls	r3, r3, #8
 800d084:	430b      	orrs	r3, r1
 800d086:	496e      	ldr	r1, [pc, #440]	; (800d240 <MX_LWIP_Init+0x26c>)
 800d088:	78c9      	ldrb	r1, [r1, #3]
 800d08a:	430b      	orrs	r3, r1
 800d08c:	0a1b      	lsrs	r3, r3, #8
 800d08e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d092:	431a      	orrs	r2, r3
 800d094:	4b6a      	ldr	r3, [pc, #424]	; (800d240 <MX_LWIP_Init+0x26c>)
 800d096:	781b      	ldrb	r3, [r3, #0]
 800d098:	0619      	lsls	r1, r3, #24
 800d09a:	4b69      	ldr	r3, [pc, #420]	; (800d240 <MX_LWIP_Init+0x26c>)
 800d09c:	785b      	ldrb	r3, [r3, #1]
 800d09e:	041b      	lsls	r3, r3, #16
 800d0a0:	4319      	orrs	r1, r3
 800d0a2:	4b67      	ldr	r3, [pc, #412]	; (800d240 <MX_LWIP_Init+0x26c>)
 800d0a4:	789b      	ldrb	r3, [r3, #2]
 800d0a6:	021b      	lsls	r3, r3, #8
 800d0a8:	430b      	orrs	r3, r1
 800d0aa:	4965      	ldr	r1, [pc, #404]	; (800d240 <MX_LWIP_Init+0x26c>)
 800d0ac:	78c9      	ldrb	r1, [r1, #3]
 800d0ae:	430b      	orrs	r3, r1
 800d0b0:	0e1b      	lsrs	r3, r3, #24
 800d0b2:	4313      	orrs	r3, r2
 800d0b4:	4a65      	ldr	r2, [pc, #404]	; (800d24c <MX_LWIP_Init+0x278>)
 800d0b6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800d0b8:	4b62      	ldr	r3, [pc, #392]	; (800d244 <MX_LWIP_Init+0x270>)
 800d0ba:	781b      	ldrb	r3, [r3, #0]
 800d0bc:	061a      	lsls	r2, r3, #24
 800d0be:	4b61      	ldr	r3, [pc, #388]	; (800d244 <MX_LWIP_Init+0x270>)
 800d0c0:	785b      	ldrb	r3, [r3, #1]
 800d0c2:	041b      	lsls	r3, r3, #16
 800d0c4:	431a      	orrs	r2, r3
 800d0c6:	4b5f      	ldr	r3, [pc, #380]	; (800d244 <MX_LWIP_Init+0x270>)
 800d0c8:	789b      	ldrb	r3, [r3, #2]
 800d0ca:	021b      	lsls	r3, r3, #8
 800d0cc:	4313      	orrs	r3, r2
 800d0ce:	4a5d      	ldr	r2, [pc, #372]	; (800d244 <MX_LWIP_Init+0x270>)
 800d0d0:	78d2      	ldrb	r2, [r2, #3]
 800d0d2:	4313      	orrs	r3, r2
 800d0d4:	061a      	lsls	r2, r3, #24
 800d0d6:	4b5b      	ldr	r3, [pc, #364]	; (800d244 <MX_LWIP_Init+0x270>)
 800d0d8:	781b      	ldrb	r3, [r3, #0]
 800d0da:	0619      	lsls	r1, r3, #24
 800d0dc:	4b59      	ldr	r3, [pc, #356]	; (800d244 <MX_LWIP_Init+0x270>)
 800d0de:	785b      	ldrb	r3, [r3, #1]
 800d0e0:	041b      	lsls	r3, r3, #16
 800d0e2:	4319      	orrs	r1, r3
 800d0e4:	4b57      	ldr	r3, [pc, #348]	; (800d244 <MX_LWIP_Init+0x270>)
 800d0e6:	789b      	ldrb	r3, [r3, #2]
 800d0e8:	021b      	lsls	r3, r3, #8
 800d0ea:	430b      	orrs	r3, r1
 800d0ec:	4955      	ldr	r1, [pc, #340]	; (800d244 <MX_LWIP_Init+0x270>)
 800d0ee:	78c9      	ldrb	r1, [r1, #3]
 800d0f0:	430b      	orrs	r3, r1
 800d0f2:	021b      	lsls	r3, r3, #8
 800d0f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d0f8:	431a      	orrs	r2, r3
 800d0fa:	4b52      	ldr	r3, [pc, #328]	; (800d244 <MX_LWIP_Init+0x270>)
 800d0fc:	781b      	ldrb	r3, [r3, #0]
 800d0fe:	0619      	lsls	r1, r3, #24
 800d100:	4b50      	ldr	r3, [pc, #320]	; (800d244 <MX_LWIP_Init+0x270>)
 800d102:	785b      	ldrb	r3, [r3, #1]
 800d104:	041b      	lsls	r3, r3, #16
 800d106:	4319      	orrs	r1, r3
 800d108:	4b4e      	ldr	r3, [pc, #312]	; (800d244 <MX_LWIP_Init+0x270>)
 800d10a:	789b      	ldrb	r3, [r3, #2]
 800d10c:	021b      	lsls	r3, r3, #8
 800d10e:	430b      	orrs	r3, r1
 800d110:	494c      	ldr	r1, [pc, #304]	; (800d244 <MX_LWIP_Init+0x270>)
 800d112:	78c9      	ldrb	r1, [r1, #3]
 800d114:	430b      	orrs	r3, r1
 800d116:	0a1b      	lsrs	r3, r3, #8
 800d118:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d11c:	431a      	orrs	r2, r3
 800d11e:	4b49      	ldr	r3, [pc, #292]	; (800d244 <MX_LWIP_Init+0x270>)
 800d120:	781b      	ldrb	r3, [r3, #0]
 800d122:	0619      	lsls	r1, r3, #24
 800d124:	4b47      	ldr	r3, [pc, #284]	; (800d244 <MX_LWIP_Init+0x270>)
 800d126:	785b      	ldrb	r3, [r3, #1]
 800d128:	041b      	lsls	r3, r3, #16
 800d12a:	4319      	orrs	r1, r3
 800d12c:	4b45      	ldr	r3, [pc, #276]	; (800d244 <MX_LWIP_Init+0x270>)
 800d12e:	789b      	ldrb	r3, [r3, #2]
 800d130:	021b      	lsls	r3, r3, #8
 800d132:	430b      	orrs	r3, r1
 800d134:	4943      	ldr	r1, [pc, #268]	; (800d244 <MX_LWIP_Init+0x270>)
 800d136:	78c9      	ldrb	r1, [r1, #3]
 800d138:	430b      	orrs	r3, r1
 800d13a:	0e1b      	lsrs	r3, r3, #24
 800d13c:	4313      	orrs	r3, r2
 800d13e:	4a44      	ldr	r2, [pc, #272]	; (800d250 <MX_LWIP_Init+0x27c>)
 800d140:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800d142:	4b41      	ldr	r3, [pc, #260]	; (800d248 <MX_LWIP_Init+0x274>)
 800d144:	781b      	ldrb	r3, [r3, #0]
 800d146:	061a      	lsls	r2, r3, #24
 800d148:	4b3f      	ldr	r3, [pc, #252]	; (800d248 <MX_LWIP_Init+0x274>)
 800d14a:	785b      	ldrb	r3, [r3, #1]
 800d14c:	041b      	lsls	r3, r3, #16
 800d14e:	431a      	orrs	r2, r3
 800d150:	4b3d      	ldr	r3, [pc, #244]	; (800d248 <MX_LWIP_Init+0x274>)
 800d152:	789b      	ldrb	r3, [r3, #2]
 800d154:	021b      	lsls	r3, r3, #8
 800d156:	4313      	orrs	r3, r2
 800d158:	4a3b      	ldr	r2, [pc, #236]	; (800d248 <MX_LWIP_Init+0x274>)
 800d15a:	78d2      	ldrb	r2, [r2, #3]
 800d15c:	4313      	orrs	r3, r2
 800d15e:	061a      	lsls	r2, r3, #24
 800d160:	4b39      	ldr	r3, [pc, #228]	; (800d248 <MX_LWIP_Init+0x274>)
 800d162:	781b      	ldrb	r3, [r3, #0]
 800d164:	0619      	lsls	r1, r3, #24
 800d166:	4b38      	ldr	r3, [pc, #224]	; (800d248 <MX_LWIP_Init+0x274>)
 800d168:	785b      	ldrb	r3, [r3, #1]
 800d16a:	041b      	lsls	r3, r3, #16
 800d16c:	4319      	orrs	r1, r3
 800d16e:	4b36      	ldr	r3, [pc, #216]	; (800d248 <MX_LWIP_Init+0x274>)
 800d170:	789b      	ldrb	r3, [r3, #2]
 800d172:	021b      	lsls	r3, r3, #8
 800d174:	430b      	orrs	r3, r1
 800d176:	4934      	ldr	r1, [pc, #208]	; (800d248 <MX_LWIP_Init+0x274>)
 800d178:	78c9      	ldrb	r1, [r1, #3]
 800d17a:	430b      	orrs	r3, r1
 800d17c:	021b      	lsls	r3, r3, #8
 800d17e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d182:	431a      	orrs	r2, r3
 800d184:	4b30      	ldr	r3, [pc, #192]	; (800d248 <MX_LWIP_Init+0x274>)
 800d186:	781b      	ldrb	r3, [r3, #0]
 800d188:	0619      	lsls	r1, r3, #24
 800d18a:	4b2f      	ldr	r3, [pc, #188]	; (800d248 <MX_LWIP_Init+0x274>)
 800d18c:	785b      	ldrb	r3, [r3, #1]
 800d18e:	041b      	lsls	r3, r3, #16
 800d190:	4319      	orrs	r1, r3
 800d192:	4b2d      	ldr	r3, [pc, #180]	; (800d248 <MX_LWIP_Init+0x274>)
 800d194:	789b      	ldrb	r3, [r3, #2]
 800d196:	021b      	lsls	r3, r3, #8
 800d198:	430b      	orrs	r3, r1
 800d19a:	492b      	ldr	r1, [pc, #172]	; (800d248 <MX_LWIP_Init+0x274>)
 800d19c:	78c9      	ldrb	r1, [r1, #3]
 800d19e:	430b      	orrs	r3, r1
 800d1a0:	0a1b      	lsrs	r3, r3, #8
 800d1a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d1a6:	431a      	orrs	r2, r3
 800d1a8:	4b27      	ldr	r3, [pc, #156]	; (800d248 <MX_LWIP_Init+0x274>)
 800d1aa:	781b      	ldrb	r3, [r3, #0]
 800d1ac:	0619      	lsls	r1, r3, #24
 800d1ae:	4b26      	ldr	r3, [pc, #152]	; (800d248 <MX_LWIP_Init+0x274>)
 800d1b0:	785b      	ldrb	r3, [r3, #1]
 800d1b2:	041b      	lsls	r3, r3, #16
 800d1b4:	4319      	orrs	r1, r3
 800d1b6:	4b24      	ldr	r3, [pc, #144]	; (800d248 <MX_LWIP_Init+0x274>)
 800d1b8:	789b      	ldrb	r3, [r3, #2]
 800d1ba:	021b      	lsls	r3, r3, #8
 800d1bc:	430b      	orrs	r3, r1
 800d1be:	4922      	ldr	r1, [pc, #136]	; (800d248 <MX_LWIP_Init+0x274>)
 800d1c0:	78c9      	ldrb	r1, [r1, #3]
 800d1c2:	430b      	orrs	r3, r1
 800d1c4:	0e1b      	lsrs	r3, r3, #24
 800d1c6:	4313      	orrs	r3, r2
 800d1c8:	4a22      	ldr	r2, [pc, #136]	; (800d254 <MX_LWIP_Init+0x280>)
 800d1ca:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800d1cc:	4b22      	ldr	r3, [pc, #136]	; (800d258 <MX_LWIP_Init+0x284>)
 800d1ce:	9302      	str	r3, [sp, #8]
 800d1d0:	4b22      	ldr	r3, [pc, #136]	; (800d25c <MX_LWIP_Init+0x288>)
 800d1d2:	9301      	str	r3, [sp, #4]
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	9300      	str	r3, [sp, #0]
 800d1d8:	4b1e      	ldr	r3, [pc, #120]	; (800d254 <MX_LWIP_Init+0x280>)
 800d1da:	4a1d      	ldr	r2, [pc, #116]	; (800d250 <MX_LWIP_Init+0x27c>)
 800d1dc:	491b      	ldr	r1, [pc, #108]	; (800d24c <MX_LWIP_Init+0x278>)
 800d1de:	4820      	ldr	r0, [pc, #128]	; (800d260 <MX_LWIP_Init+0x28c>)
 800d1e0:	f006 fbea 	bl	80139b8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800d1e4:	481e      	ldr	r0, [pc, #120]	; (800d260 <MX_LWIP_Init+0x28c>)
 800d1e6:	f006 fd99 	bl	8013d1c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800d1ea:	4b1d      	ldr	r3, [pc, #116]	; (800d260 <MX_LWIP_Init+0x28c>)
 800d1ec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d1f0:	089b      	lsrs	r3, r3, #2
 800d1f2:	f003 0301 	and.w	r3, r3, #1
 800d1f6:	b2db      	uxtb	r3, r3
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d003      	beq.n	800d204 <MX_LWIP_Init+0x230>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800d1fc:	4818      	ldr	r0, [pc, #96]	; (800d260 <MX_LWIP_Init+0x28c>)
 800d1fe:	f006 fd9d 	bl	8013d3c <netif_set_up>
 800d202:	e002      	b.n	800d20a <MX_LWIP_Init+0x236>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800d204:	4816      	ldr	r0, [pc, #88]	; (800d260 <MX_LWIP_Init+0x28c>)
 800d206:	f006 fe05 	bl	8013e14 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 800d20a:	4916      	ldr	r1, [pc, #88]	; (800d264 <MX_LWIP_Init+0x290>)
 800d20c:	4814      	ldr	r0, [pc, #80]	; (800d260 <MX_LWIP_Init+0x28c>)
 800d20e:	f006 fe33 	bl	8013e78 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 800d212:	2300      	movs	r3, #0
 800d214:	603b      	str	r3, [r7, #0]
 800d216:	2300      	movs	r3, #0
 800d218:	607b      	str	r3, [r7, #4]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 800d21a:	463b      	mov	r3, r7
 800d21c:	2101      	movs	r1, #1
 800d21e:	4618      	mov	r0, r3
 800d220:	f000 fd38 	bl	800dc94 <osSemaphoreCreate>
 800d224:	4603      	mov	r3, r0
 800d226:	4a10      	ldr	r2, [pc, #64]	; (800d268 <MX_LWIP_Init+0x294>)
 800d228:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 800d22a:	4b10      	ldr	r3, [pc, #64]	; (800d26c <MX_LWIP_Init+0x298>)
 800d22c:	4a0c      	ldr	r2, [pc, #48]	; (800d260 <MX_LWIP_Init+0x28c>)
 800d22e:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800d230:	4b0d      	ldr	r3, [pc, #52]	; (800d268 <MX_LWIP_Init+0x294>)
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	4a0d      	ldr	r2, [pc, #52]	; (800d26c <MX_LWIP_Init+0x298>)
 800d236:	6053      	str	r3, [r2, #4]
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800d238:	bf00      	nop
 800d23a:	3708      	adds	r7, #8
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}
 800d240:	20007924 	.word	0x20007924
 800d244:	20007920 	.word	0x20007920
 800d248:	200078e4 	.word	0x200078e4
 800d24c:	2000791c 	.word	0x2000791c
 800d250:	20007928 	.word	0x20007928
 800d254:	2000792c 	.word	0x2000792c
 800d258:	08012dc1 	.word	0x08012dc1
 800d25c:	0800d8a1 	.word	0x0800d8a1
 800d260:	200078e8 	.word	0x200078e8
 800d264:	0800d90d 	.word	0x0800d90d
 800d268:	20000954 	.word	0x20000954
 800d26c:	200078dc 	.word	0x200078dc

0800d270 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b08e      	sub	sp, #56	; 0x38
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d278:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d27c:	2200      	movs	r2, #0
 800d27e:	601a      	str	r2, [r3, #0]
 800d280:	605a      	str	r2, [r3, #4]
 800d282:	609a      	str	r2, [r3, #8]
 800d284:	60da      	str	r2, [r3, #12]
 800d286:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	4a4a      	ldr	r2, [pc, #296]	; (800d3b8 <HAL_ETH_MspInit+0x148>)
 800d28e:	4293      	cmp	r3, r2
 800d290:	f040 808d 	bne.w	800d3ae <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800d294:	2300      	movs	r3, #0
 800d296:	623b      	str	r3, [r7, #32]
 800d298:	4b48      	ldr	r3, [pc, #288]	; (800d3bc <HAL_ETH_MspInit+0x14c>)
 800d29a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d29c:	4a47      	ldr	r2, [pc, #284]	; (800d3bc <HAL_ETH_MspInit+0x14c>)
 800d29e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800d2a2:	6313      	str	r3, [r2, #48]	; 0x30
 800d2a4:	4b45      	ldr	r3, [pc, #276]	; (800d3bc <HAL_ETH_MspInit+0x14c>)
 800d2a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d2ac:	623b      	str	r3, [r7, #32]
 800d2ae:	6a3b      	ldr	r3, [r7, #32]
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	61fb      	str	r3, [r7, #28]
 800d2b4:	4b41      	ldr	r3, [pc, #260]	; (800d3bc <HAL_ETH_MspInit+0x14c>)
 800d2b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2b8:	4a40      	ldr	r2, [pc, #256]	; (800d3bc <HAL_ETH_MspInit+0x14c>)
 800d2ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d2be:	6313      	str	r3, [r2, #48]	; 0x30
 800d2c0:	4b3e      	ldr	r3, [pc, #248]	; (800d3bc <HAL_ETH_MspInit+0x14c>)
 800d2c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d2c8:	61fb      	str	r3, [r7, #28]
 800d2ca:	69fb      	ldr	r3, [r7, #28]
 800d2cc:	2300      	movs	r3, #0
 800d2ce:	61bb      	str	r3, [r7, #24]
 800d2d0:	4b3a      	ldr	r3, [pc, #232]	; (800d3bc <HAL_ETH_MspInit+0x14c>)
 800d2d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2d4:	4a39      	ldr	r2, [pc, #228]	; (800d3bc <HAL_ETH_MspInit+0x14c>)
 800d2d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800d2da:	6313      	str	r3, [r2, #48]	; 0x30
 800d2dc:	4b37      	ldr	r3, [pc, #220]	; (800d3bc <HAL_ETH_MspInit+0x14c>)
 800d2de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d2e4:	61bb      	str	r3, [r7, #24]
 800d2e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800d2e8:	2300      	movs	r3, #0
 800d2ea:	617b      	str	r3, [r7, #20]
 800d2ec:	4b33      	ldr	r3, [pc, #204]	; (800d3bc <HAL_ETH_MspInit+0x14c>)
 800d2ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2f0:	4a32      	ldr	r2, [pc, #200]	; (800d3bc <HAL_ETH_MspInit+0x14c>)
 800d2f2:	f043 0304 	orr.w	r3, r3, #4
 800d2f6:	6313      	str	r3, [r2, #48]	; 0x30
 800d2f8:	4b30      	ldr	r3, [pc, #192]	; (800d3bc <HAL_ETH_MspInit+0x14c>)
 800d2fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2fc:	f003 0304 	and.w	r3, r3, #4
 800d300:	617b      	str	r3, [r7, #20]
 800d302:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d304:	2300      	movs	r3, #0
 800d306:	613b      	str	r3, [r7, #16]
 800d308:	4b2c      	ldr	r3, [pc, #176]	; (800d3bc <HAL_ETH_MspInit+0x14c>)
 800d30a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d30c:	4a2b      	ldr	r2, [pc, #172]	; (800d3bc <HAL_ETH_MspInit+0x14c>)
 800d30e:	f043 0301 	orr.w	r3, r3, #1
 800d312:	6313      	str	r3, [r2, #48]	; 0x30
 800d314:	4b29      	ldr	r3, [pc, #164]	; (800d3bc <HAL_ETH_MspInit+0x14c>)
 800d316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d318:	f003 0301 	and.w	r3, r3, #1
 800d31c:	613b      	str	r3, [r7, #16]
 800d31e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800d320:	2300      	movs	r3, #0
 800d322:	60fb      	str	r3, [r7, #12]
 800d324:	4b25      	ldr	r3, [pc, #148]	; (800d3bc <HAL_ETH_MspInit+0x14c>)
 800d326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d328:	4a24      	ldr	r2, [pc, #144]	; (800d3bc <HAL_ETH_MspInit+0x14c>)
 800d32a:	f043 0302 	orr.w	r3, r3, #2
 800d32e:	6313      	str	r3, [r2, #48]	; 0x30
 800d330:	4b22      	ldr	r3, [pc, #136]	; (800d3bc <HAL_ETH_MspInit+0x14c>)
 800d332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d334:	f003 0302 	and.w	r3, r3, #2
 800d338:	60fb      	str	r3, [r7, #12]
 800d33a:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800d33c:	2332      	movs	r3, #50	; 0x32
 800d33e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d340:	2302      	movs	r3, #2
 800d342:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d344:	2300      	movs	r3, #0
 800d346:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d348:	2303      	movs	r3, #3
 800d34a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d34c:	230b      	movs	r3, #11
 800d34e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800d350:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d354:	4619      	mov	r1, r3
 800d356:	481a      	ldr	r0, [pc, #104]	; (800d3c0 <HAL_ETH_MspInit+0x150>)
 800d358:	f7fc f986 	bl	8009668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800d35c:	2386      	movs	r3, #134	; 0x86
 800d35e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d360:	2302      	movs	r3, #2
 800d362:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d364:	2300      	movs	r3, #0
 800d366:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d368:	2303      	movs	r3, #3
 800d36a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d36c:	230b      	movs	r3, #11
 800d36e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d370:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d374:	4619      	mov	r1, r3
 800d376:	4813      	ldr	r0, [pc, #76]	; (800d3c4 <HAL_ETH_MspInit+0x154>)
 800d378:	f7fc f976 	bl	8009668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800d37c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800d380:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d382:	2302      	movs	r3, #2
 800d384:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d386:	2300      	movs	r3, #0
 800d388:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d38a:	2303      	movs	r3, #3
 800d38c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800d38e:	230b      	movs	r3, #11
 800d390:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800d392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d396:	4619      	mov	r1, r3
 800d398:	480b      	ldr	r0, [pc, #44]	; (800d3c8 <HAL_ETH_MspInit+0x158>)
 800d39a:	f7fc f965 	bl	8009668 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800d39e:	2200      	movs	r2, #0
 800d3a0:	2105      	movs	r1, #5
 800d3a2:	203d      	movs	r0, #61	; 0x3d
 800d3a4:	f7fa fb22 	bl	80079ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800d3a8:	203d      	movs	r0, #61	; 0x3d
 800d3aa:	f7fa fb3b 	bl	8007a24 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800d3ae:	bf00      	nop
 800d3b0:	3738      	adds	r7, #56	; 0x38
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}
 800d3b6:	bf00      	nop
 800d3b8:	40028000 	.word	0x40028000
 800d3bc:	40023800 	.word	0x40023800
 800d3c0:	40020800 	.word	0x40020800
 800d3c4:	40020000 	.word	0x40020000
 800d3c8:	40020400 	.word	0x40020400

0800d3cc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b082      	sub	sp, #8
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 800d3d4:	4b04      	ldr	r3, [pc, #16]	; (800d3e8 <HAL_ETH_RxCpltCallback+0x1c>)
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	4618      	mov	r0, r3
 800d3da:	f000 fcdb 	bl	800dd94 <osSemaphoreRelease>
}
 800d3de:	bf00      	nop
 800d3e0:	3708      	adds	r7, #8
 800d3e2:	46bd      	mov	sp, r7
 800d3e4:	bd80      	pop	{r7, pc}
 800d3e6:	bf00      	nop
 800d3e8:	20000958 	.word	0x20000958

0800d3ec <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800d3ec:	b5b0      	push	{r4, r5, r7, lr}
 800d3ee:	b090      	sub	sp, #64	; 0x40
 800d3f0:	af00      	add	r7, sp, #0
 800d3f2:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800d3f8:	4b60      	ldr	r3, [pc, #384]	; (800d57c <low_level_init+0x190>)
 800d3fa:	4a61      	ldr	r2, [pc, #388]	; (800d580 <low_level_init+0x194>)
 800d3fc:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800d3fe:	4b5f      	ldr	r3, [pc, #380]	; (800d57c <low_level_init+0x190>)
 800d400:	2201      	movs	r2, #1
 800d402:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 800d404:	4b5d      	ldr	r3, [pc, #372]	; (800d57c <low_level_init+0x190>)
 800d406:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d40a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800d40c:	4b5b      	ldr	r3, [pc, #364]	; (800d57c <low_level_init+0x190>)
 800d40e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d412:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = 0;
 800d414:	4b59      	ldr	r3, [pc, #356]	; (800d57c <low_level_init+0x190>)
 800d416:	2200      	movs	r2, #0
 800d418:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800d41a:	2300      	movs	r3, #0
 800d41c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800d420:	2380      	movs	r3, #128	; 0x80
 800d422:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800d426:	23e1      	movs	r3, #225	; 0xe1
 800d428:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 800d42c:	2300      	movs	r3, #0
 800d42e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x13;
 800d432:	2313      	movs	r3, #19
 800d434:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x01;
 800d438:	2301      	movs	r3, #1
 800d43a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800d43e:	4a4f      	ldr	r2, [pc, #316]	; (800d57c <low_level_init+0x190>)
 800d440:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800d444:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800d446:	4b4d      	ldr	r3, [pc, #308]	; (800d57c <low_level_init+0x190>)
 800d448:	2201      	movs	r2, #1
 800d44a:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 800d44c:	4b4b      	ldr	r3, [pc, #300]	; (800d57c <low_level_init+0x190>)
 800d44e:	2200      	movs	r2, #0
 800d450:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800d452:	4b4a      	ldr	r3, [pc, #296]	; (800d57c <low_level_init+0x190>)
 800d454:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800d458:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800d45a:	4848      	ldr	r0, [pc, #288]	; (800d57c <low_level_init+0x190>)
 800d45c:	f7fa ff5e 	bl	800831c <HAL_ETH_Init>
 800d460:	4603      	mov	r3, r0
 800d462:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800d466:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d108      	bne.n	800d480 <low_level_init+0x94>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d474:	f043 0304 	orr.w	r3, r3, #4
 800d478:	b2da      	uxtb	r2, r3
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800d480:	2304      	movs	r3, #4
 800d482:	4a40      	ldr	r2, [pc, #256]	; (800d584 <low_level_init+0x198>)
 800d484:	4940      	ldr	r1, [pc, #256]	; (800d588 <low_level_init+0x19c>)
 800d486:	483d      	ldr	r0, [pc, #244]	; (800d57c <low_level_init+0x190>)
 800d488:	f7fb f8e4 	bl	8008654 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 800d48c:	2304      	movs	r3, #4
 800d48e:	4a3f      	ldr	r2, [pc, #252]	; (800d58c <low_level_init+0x1a0>)
 800d490:	493f      	ldr	r1, [pc, #252]	; (800d590 <low_level_init+0x1a4>)
 800d492:	483a      	ldr	r0, [pc, #232]	; (800d57c <low_level_init+0x190>)
 800d494:	f7fb f947 	bl	8008726 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	2206      	movs	r2, #6
 800d49c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800d4a0:	4b36      	ldr	r3, [pc, #216]	; (800d57c <low_level_init+0x190>)
 800d4a2:	695b      	ldr	r3, [r3, #20]
 800d4a4:	781a      	ldrb	r2, [r3, #0]
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800d4ac:	4b33      	ldr	r3, [pc, #204]	; (800d57c <low_level_init+0x190>)
 800d4ae:	695b      	ldr	r3, [r3, #20]
 800d4b0:	785a      	ldrb	r2, [r3, #1]
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800d4b8:	4b30      	ldr	r3, [pc, #192]	; (800d57c <low_level_init+0x190>)
 800d4ba:	695b      	ldr	r3, [r3, #20]
 800d4bc:	789a      	ldrb	r2, [r3, #2]
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800d4c4:	4b2d      	ldr	r3, [pc, #180]	; (800d57c <low_level_init+0x190>)
 800d4c6:	695b      	ldr	r3, [r3, #20]
 800d4c8:	78da      	ldrb	r2, [r3, #3]
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800d4d0:	4b2a      	ldr	r3, [pc, #168]	; (800d57c <low_level_init+0x190>)
 800d4d2:	695b      	ldr	r3, [r3, #20]
 800d4d4:	791a      	ldrb	r2, [r3, #4]
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800d4dc:	4b27      	ldr	r3, [pc, #156]	; (800d57c <low_level_init+0x190>)
 800d4de:	695b      	ldr	r3, [r3, #20]
 800d4e0:	795a      	ldrb	r2, [r3, #5]
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800d4ee:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d4f6:	f043 030a 	orr.w	r3, r3, #10
 800d4fa:	b2da      	uxtb	r2, r3
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800d502:	2300      	movs	r3, #0
 800d504:	62bb      	str	r3, [r7, #40]	; 0x28
 800d506:	2300      	movs	r3, #0
 800d508:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 800d50a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800d50e:	2101      	movs	r1, #1
 800d510:	4618      	mov	r0, r3
 800d512:	f000 fbbf 	bl	800dc94 <osSemaphoreCreate>
 800d516:	4603      	mov	r3, r0
 800d518:	4a1e      	ldr	r2, [pc, #120]	; (800d594 <low_level_init+0x1a8>)
 800d51a:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800d51c:	4b1e      	ldr	r3, [pc, #120]	; (800d598 <low_level_init+0x1ac>)
 800d51e:	f107 040c 	add.w	r4, r7, #12
 800d522:	461d      	mov	r5, r3
 800d524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d526:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d528:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d52c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800d530:	f107 030c 	add.w	r3, r7, #12
 800d534:	6879      	ldr	r1, [r7, #4]
 800d536:	4618      	mov	r0, r3
 800d538:	f000 faaf 	bl	800da9a <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 800d53c:	480f      	ldr	r0, [pc, #60]	; (800d57c <low_level_init+0x190>)
 800d53e:	f7fb fc1a 	bl	8008d76 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800d542:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d546:	461a      	mov	r2, r3
 800d548:	211d      	movs	r1, #29
 800d54a:	480c      	ldr	r0, [pc, #48]	; (800d57c <low_level_init+0x190>)
 800d54c:	f7fb fb45 	bl	8008bda <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800d550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d552:	f043 030b 	orr.w	r3, r3, #11
 800d556:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800d558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d55a:	461a      	mov	r2, r3
 800d55c:	211d      	movs	r1, #29
 800d55e:	4807      	ldr	r0, [pc, #28]	; (800d57c <low_level_init+0x190>)
 800d560:	f7fb fba3 	bl	8008caa <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800d564:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800d568:	461a      	mov	r2, r3
 800d56a:	211d      	movs	r1, #29
 800d56c:	4803      	ldr	r0, [pc, #12]	; (800d57c <low_level_init+0x190>)
 800d56e:	f7fb fb34 	bl	8008bda <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800d572:	bf00      	nop
 800d574:	3740      	adds	r7, #64	; 0x40
 800d576:	46bd      	mov	sp, r7
 800d578:	bdb0      	pop	{r4, r5, r7, pc}
 800d57a:	bf00      	nop
 800d57c:	20009200 	.word	0x20009200
 800d580:	40028000 	.word	0x40028000
 800d584:	20009248 	.word	0x20009248
 800d588:	20007930 	.word	0x20007930
 800d58c:	200079b0 	.word	0x200079b0
 800d590:	20009180 	.word	0x20009180
 800d594:	20000958 	.word	0x20000958
 800d598:	080236e0 	.word	0x080236e0

0800d59c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b08a      	sub	sp, #40	; 0x28
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800d5a6:	4b4b      	ldr	r3, [pc, #300]	; (800d6d4 <low_level_output+0x138>)
 800d5a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5aa:	689b      	ldr	r3, [r3, #8]
 800d5ac:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 800d5be:	4b45      	ldr	r3, [pc, #276]	; (800d6d4 <low_level_output+0x138>)
 800d5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5c2:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	623b      	str	r3, [r7, #32]
 800d5cc:	e05a      	b.n	800d684 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800d5ce:	69bb      	ldr	r3, [r7, #24]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	da03      	bge.n	800d5de <low_level_output+0x42>
      {
        errval = ERR_USE;
 800d5d6:	23f8      	movs	r3, #248	; 0xf8
 800d5d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 800d5dc:	e05c      	b.n	800d698 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 800d5de:	6a3b      	ldr	r3, [r7, #32]
 800d5e0:	895b      	ldrh	r3, [r3, #10]
 800d5e2:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 800d5e4:	2300      	movs	r3, #0
 800d5e6:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800d5e8:	e02f      	b.n	800d64a <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 800d5ea:	69fa      	ldr	r2, [r7, #28]
 800d5ec:	693b      	ldr	r3, [r7, #16]
 800d5ee:	18d0      	adds	r0, r2, r3
 800d5f0:	6a3b      	ldr	r3, [r7, #32]
 800d5f2:	685a      	ldr	r2, [r3, #4]
 800d5f4:	68bb      	ldr	r3, [r7, #8]
 800d5f6:	18d1      	adds	r1, r2, r3
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800d5fe:	3304      	adds	r3, #4
 800d600:	461a      	mov	r2, r3
 800d602:	f010 fe7f 	bl	801e304 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800d606:	69bb      	ldr	r3, [r7, #24]
 800d608:	68db      	ldr	r3, [r3, #12]
 800d60a:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800d60c:	69bb      	ldr	r3, [r7, #24]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	2b00      	cmp	r3, #0
 800d612:	da03      	bge.n	800d61c <low_level_output+0x80>
        {
          errval = ERR_USE;
 800d614:	23f8      	movs	r3, #248	; 0xf8
 800d616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 800d61a:	e03d      	b.n	800d698 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 800d61c:	69bb      	ldr	r3, [r7, #24]
 800d61e:	689b      	ldr	r3, [r3, #8]
 800d620:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800d622:	693a      	ldr	r2, [r7, #16]
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	4413      	add	r3, r2
 800d628:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800d62c:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800d62e:	68ba      	ldr	r2, [r7, #8]
 800d630:	693b      	ldr	r3, [r7, #16]
 800d632:	1ad3      	subs	r3, r2, r3
 800d634:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800d638:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 800d63a:	697a      	ldr	r2, [r7, #20]
 800d63c:	693b      	ldr	r3, [r7, #16]
 800d63e:	1ad3      	subs	r3, r2, r3
 800d640:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800d644:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800d646:	2300      	movs	r3, #0
 800d648:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 800d64a:	68fa      	ldr	r2, [r7, #12]
 800d64c:	693b      	ldr	r3, [r7, #16]
 800d64e:	4413      	add	r3, r2
 800d650:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800d654:	4293      	cmp	r3, r2
 800d656:	d8c8      	bhi.n	800d5ea <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 800d658:	69fa      	ldr	r2, [r7, #28]
 800d65a:	693b      	ldr	r3, [r7, #16]
 800d65c:	18d0      	adds	r0, r2, r3
 800d65e:	6a3b      	ldr	r3, [r7, #32]
 800d660:	685a      	ldr	r2, [r3, #4]
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	4413      	add	r3, r2
 800d666:	68fa      	ldr	r2, [r7, #12]
 800d668:	4619      	mov	r1, r3
 800d66a:	f010 fe4b 	bl	801e304 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800d66e:	693a      	ldr	r2, [r7, #16]
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	4413      	add	r3, r2
 800d674:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800d676:	697a      	ldr	r2, [r7, #20]
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	4413      	add	r3, r2
 800d67c:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800d67e:	6a3b      	ldr	r3, [r7, #32]
 800d680:	681b      	ldr	r3, [r3, #0]
 800d682:	623b      	str	r3, [r7, #32]
 800d684:	6a3b      	ldr	r3, [r7, #32]
 800d686:	2b00      	cmp	r3, #0
 800d688:	d1a1      	bne.n	800d5ce <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 800d68a:	6979      	ldr	r1, [r7, #20]
 800d68c:	4811      	ldr	r0, [pc, #68]	; (800d6d4 <low_level_output+0x138>)
 800d68e:	f7fb f8b7 	bl	8008800 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800d692:	2300      	movs	r3, #0
 800d694:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 800d698:	4b0e      	ldr	r3, [pc, #56]	; (800d6d4 <low_level_output+0x138>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6a0:	3314      	adds	r3, #20
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	f003 0320 	and.w	r3, r3, #32
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d00d      	beq.n	800d6c8 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 800d6ac:	4b09      	ldr	r3, [pc, #36]	; (800d6d4 <low_level_output+0x138>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6b4:	3314      	adds	r3, #20
 800d6b6:	2220      	movs	r2, #32
 800d6b8:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 800d6ba:	4b06      	ldr	r3, [pc, #24]	; (800d6d4 <low_level_output+0x138>)
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d6c2:	3304      	adds	r3, #4
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	601a      	str	r2, [r3, #0]
  }
  return errval;
 800d6c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800d6cc:	4618      	mov	r0, r3
 800d6ce:	3728      	adds	r7, #40	; 0x28
 800d6d0:	46bd      	mov	sp, r7
 800d6d2:	bd80      	pop	{r7, pc}
 800d6d4:	20009200 	.word	0x20009200

0800d6d8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800d6d8:	b580      	push	{r7, lr}
 800d6da:	b08c      	sub	sp, #48	; 0x30
 800d6dc:	af00      	add	r7, sp, #0
 800d6de:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800d6e0:	2300      	movs	r3, #0
 800d6e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 800d6e4:	2300      	movs	r3, #0
 800d6e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 800d6ec:	2300      	movs	r3, #0
 800d6ee:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 800d6f0:	2300      	movs	r3, #0
 800d6f2:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 800d6fc:	484f      	ldr	r0, [pc, #316]	; (800d83c <low_level_input+0x164>)
 800d6fe:	f7fb f969 	bl	80089d4 <HAL_ETH_GetReceivedFrame_IT>
 800d702:	4603      	mov	r3, r0
 800d704:	2b00      	cmp	r3, #0
 800d706:	d001      	beq.n	800d70c <low_level_input+0x34>

    return NULL;
 800d708:	2300      	movs	r3, #0
 800d70a:	e092      	b.n	800d832 <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 800d70c:	4b4b      	ldr	r3, [pc, #300]	; (800d83c <low_level_input+0x164>)
 800d70e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d710:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800d712:	4b4a      	ldr	r3, [pc, #296]	; (800d83c <low_level_input+0x164>)
 800d714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d716:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 800d718:	89fb      	ldrh	r3, [r7, #14]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d007      	beq.n	800d72e <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800d71e:	89fb      	ldrh	r3, [r7, #14]
 800d720:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800d724:	4619      	mov	r1, r3
 800d726:	2000      	movs	r0, #0
 800d728:	f006 fc70 	bl	801400c <pbuf_alloc>
 800d72c:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 800d72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d730:	2b00      	cmp	r3, #0
 800d732:	d04b      	beq.n	800d7cc <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800d734:	4b41      	ldr	r3, [pc, #260]	; (800d83c <low_level_input+0x164>)
 800d736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d738:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 800d73a:	2300      	movs	r3, #0
 800d73c:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800d73e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d740:	62bb      	str	r3, [r7, #40]	; 0x28
 800d742:	e040      	b.n	800d7c6 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800d744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d746:	895b      	ldrh	r3, [r3, #10]
 800d748:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 800d74a:	2300      	movs	r3, #0
 800d74c:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800d74e:	e021      	b.n	800d794 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800d750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d752:	685a      	ldr	r2, [r3, #4]
 800d754:	69bb      	ldr	r3, [r7, #24]
 800d756:	18d0      	adds	r0, r2, r3
 800d758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d75a:	69fb      	ldr	r3, [r7, #28]
 800d75c:	18d1      	adds	r1, r2, r3
 800d75e:	69fb      	ldr	r3, [r7, #28]
 800d760:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800d764:	3304      	adds	r3, #4
 800d766:	461a      	mov	r2, r3
 800d768:	f010 fdcc 	bl	801e304 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800d76c:	6a3b      	ldr	r3, [r7, #32]
 800d76e:	68db      	ldr	r3, [r3, #12]
 800d770:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800d772:	6a3b      	ldr	r3, [r7, #32]
 800d774:	689b      	ldr	r3, [r3, #8]
 800d776:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 800d778:	69fa      	ldr	r2, [r7, #28]
 800d77a:	697b      	ldr	r3, [r7, #20]
 800d77c:	4413      	add	r3, r2
 800d77e:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800d782:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800d784:	69ba      	ldr	r2, [r7, #24]
 800d786:	69fb      	ldr	r3, [r7, #28]
 800d788:	1ad3      	subs	r3, r2, r3
 800d78a:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800d78e:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800d790:	2300      	movs	r3, #0
 800d792:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800d794:	697a      	ldr	r2, [r7, #20]
 800d796:	69fb      	ldr	r3, [r7, #28]
 800d798:	4413      	add	r3, r2
 800d79a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800d79e:	4293      	cmp	r3, r2
 800d7a0:	d8d6      	bhi.n	800d750 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800d7a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a4:	685a      	ldr	r2, [r3, #4]
 800d7a6:	69bb      	ldr	r3, [r7, #24]
 800d7a8:	18d0      	adds	r0, r2, r3
 800d7aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7ac:	69fb      	ldr	r3, [r7, #28]
 800d7ae:	4413      	add	r3, r2
 800d7b0:	697a      	ldr	r2, [r7, #20]
 800d7b2:	4619      	mov	r1, r3
 800d7b4:	f010 fda6 	bl	801e304 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800d7b8:	69fa      	ldr	r2, [r7, #28]
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	4413      	add	r3, r2
 800d7be:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 800d7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800d7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	d1bb      	bne.n	800d744 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800d7cc:	4b1b      	ldr	r3, [pc, #108]	; (800d83c <low_level_input+0x164>)
 800d7ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d7d0:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	613b      	str	r3, [r7, #16]
 800d7d6:	e00b      	b.n	800d7f0 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 800d7d8:	6a3b      	ldr	r3, [r7, #32]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d7e0:	6a3b      	ldr	r3, [r7, #32]
 800d7e2:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 800d7e4:	6a3b      	ldr	r3, [r7, #32]
 800d7e6:	68db      	ldr	r3, [r3, #12]
 800d7e8:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 800d7ea:	693b      	ldr	r3, [r7, #16]
 800d7ec:	3301      	adds	r3, #1
 800d7ee:	613b      	str	r3, [r7, #16]
 800d7f0:	4b12      	ldr	r3, [pc, #72]	; (800d83c <low_level_input+0x164>)
 800d7f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7f4:	693a      	ldr	r2, [r7, #16]
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d3ee      	bcc.n	800d7d8 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 800d7fa:	4b10      	ldr	r3, [pc, #64]	; (800d83c <low_level_input+0x164>)
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 800d800:	4b0e      	ldr	r3, [pc, #56]	; (800d83c <low_level_input+0x164>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d808:	3314      	adds	r3, #20
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d810:	2b00      	cmp	r3, #0
 800d812:	d00d      	beq.n	800d830 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800d814:	4b09      	ldr	r3, [pc, #36]	; (800d83c <low_level_input+0x164>)
 800d816:	681b      	ldr	r3, [r3, #0]
 800d818:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d81c:	3314      	adds	r3, #20
 800d81e:	2280      	movs	r2, #128	; 0x80
 800d820:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800d822:	4b06      	ldr	r3, [pc, #24]	; (800d83c <low_level_input+0x164>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d82a:	3308      	adds	r3, #8
 800d82c:	2200      	movs	r2, #0
 800d82e:	601a      	str	r2, [r3, #0]
  }
  return p;
 800d830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d832:	4618      	mov	r0, r3
 800d834:	3730      	adds	r7, #48	; 0x30
 800d836:	46bd      	mov	sp, r7
 800d838:	bd80      	pop	{r7, pc}
 800d83a:	bf00      	nop
 800d83c:	20009200 	.word	0x20009200

0800d840 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 800d840:	b580      	push	{r7, lr}
 800d842:	b084      	sub	sp, #16
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800d84c:	4b12      	ldr	r3, [pc, #72]	; (800d898 <ethernetif_input+0x58>)
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	f04f 31ff 	mov.w	r1, #4294967295
 800d854:	4618      	mov	r0, r3
 800d856:	f000 fa4f 	bl	800dcf8 <osSemaphoreWait>
 800d85a:	4603      	mov	r3, r0
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d1f5      	bne.n	800d84c <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 800d860:	480e      	ldr	r0, [pc, #56]	; (800d89c <ethernetif_input+0x5c>)
 800d862:	f010 fbbf 	bl	801dfe4 <sys_mutex_lock>
        p = low_level_input( netif );
 800d866:	68f8      	ldr	r0, [r7, #12]
 800d868:	f7ff ff36 	bl	800d6d8 <low_level_input>
 800d86c:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 800d86e:	68bb      	ldr	r3, [r7, #8]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d00a      	beq.n	800d88a <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	691b      	ldr	r3, [r3, #16]
 800d878:	68f9      	ldr	r1, [r7, #12]
 800d87a:	68b8      	ldr	r0, [r7, #8]
 800d87c:	4798      	blx	r3
 800d87e:	4603      	mov	r3, r0
 800d880:	2b00      	cmp	r3, #0
 800d882:	d002      	beq.n	800d88a <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 800d884:	68b8      	ldr	r0, [r7, #8]
 800d886:	f006 fea5 	bl	80145d4 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 800d88a:	4804      	ldr	r0, [pc, #16]	; (800d89c <ethernetif_input+0x5c>)
 800d88c:	f010 fbb9 	bl	801e002 <sys_mutex_unlock>
      } while(p!=NULL);
 800d890:	68bb      	ldr	r3, [r7, #8]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d1e4      	bne.n	800d860 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800d896:	e7d9      	b.n	800d84c <ethernetif_input+0xc>
 800d898:	20000958 	.word	0x20000958
 800d89c:	2000aa58 	.word	0x2000aa58

0800d8a0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800d8a0:	b580      	push	{r7, lr}
 800d8a2:	b082      	sub	sp, #8
 800d8a4:	af00      	add	r7, sp, #0
 800d8a6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d106      	bne.n	800d8bc <ethernetif_init+0x1c>
 800d8ae:	4b0e      	ldr	r3, [pc, #56]	; (800d8e8 <ethernetif_init+0x48>)
 800d8b0:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800d8b4:	490d      	ldr	r1, [pc, #52]	; (800d8ec <ethernetif_init+0x4c>)
 800d8b6:	480e      	ldr	r0, [pc, #56]	; (800d8f0 <ethernetif_init+0x50>)
 800d8b8:	f011 fc78 	bl	801f1ac <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2273      	movs	r2, #115	; 0x73
 800d8c0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	2274      	movs	r2, #116	; 0x74
 800d8c8:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	4a09      	ldr	r2, [pc, #36]	; (800d8f4 <ethernetif_init+0x54>)
 800d8d0:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	4a08      	ldr	r2, [pc, #32]	; (800d8f8 <ethernetif_init+0x58>)
 800d8d6:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800d8d8:	6878      	ldr	r0, [r7, #4]
 800d8da:	f7ff fd87 	bl	800d3ec <low_level_init>

  return ERR_OK;
 800d8de:	2300      	movs	r3, #0
}
 800d8e0:	4618      	mov	r0, r3
 800d8e2:	3708      	adds	r7, #8
 800d8e4:	46bd      	mov	sp, r7
 800d8e6:	bd80      	pop	{r7, pc}
 800d8e8:	080236fc 	.word	0x080236fc
 800d8ec:	08023718 	.word	0x08023718
 800d8f0:	08023728 	.word	0x08023728
 800d8f4:	0801bff9 	.word	0x0801bff9
 800d8f8:	0800d59d 	.word	0x0800d59d

0800d8fc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 800d8fc:	b580      	push	{r7, lr}
 800d8fe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800d900:	f7f9 fb60 	bl	8006fc4 <HAL_GetTick>
 800d904:	4603      	mov	r3, r0
}
 800d906:	4618      	mov	r0, r3
 800d908:	bd80      	pop	{r7, pc}
	...

0800d90c <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b084      	sub	sp, #16
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 800d914:	2300      	movs	r3, #0
 800d916:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 800d918:	2300      	movs	r3, #0
 800d91a:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800d922:	089b      	lsrs	r3, r3, #2
 800d924:	f003 0301 	and.w	r3, r3, #1
 800d928:	b2db      	uxtb	r3, r3
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d05d      	beq.n	800d9ea <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 800d92e:	4b34      	ldr	r3, [pc, #208]	; (800da00 <ethernetif_update_config+0xf4>)
 800d930:	685b      	ldr	r3, [r3, #4]
 800d932:	2b00      	cmp	r3, #0
 800d934:	d03f      	beq.n	800d9b6 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 800d936:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800d93a:	2100      	movs	r1, #0
 800d93c:	4830      	ldr	r0, [pc, #192]	; (800da00 <ethernetif_update_config+0xf4>)
 800d93e:	f7fb f9b4 	bl	8008caa <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 800d942:	f7f9 fb3f 	bl	8006fc4 <HAL_GetTick>
 800d946:	4603      	mov	r3, r0
 800d948:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 800d94a:	f107 0308 	add.w	r3, r7, #8
 800d94e:	461a      	mov	r2, r3
 800d950:	2101      	movs	r1, #1
 800d952:	482b      	ldr	r0, [pc, #172]	; (800da00 <ethernetif_update_config+0xf4>)
 800d954:	f7fb f941 	bl	8008bda <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 800d958:	f7f9 fb34 	bl	8006fc4 <HAL_GetTick>
 800d95c:	4602      	mov	r2, r0
 800d95e:	68fb      	ldr	r3, [r7, #12]
 800d960:	1ad3      	subs	r3, r2, r3
 800d962:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d966:	d828      	bhi.n	800d9ba <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	f003 0320 	and.w	r3, r3, #32
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d0eb      	beq.n	800d94a <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 800d972:	f107 0308 	add.w	r3, r7, #8
 800d976:	461a      	mov	r2, r3
 800d978:	2110      	movs	r1, #16
 800d97a:	4821      	ldr	r0, [pc, #132]	; (800da00 <ethernetif_update_config+0xf4>)
 800d97c:	f7fb f92d 	bl	8008bda <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 800d980:	68bb      	ldr	r3, [r7, #8]
 800d982:	f003 0304 	and.w	r3, r3, #4
 800d986:	2b00      	cmp	r3, #0
 800d988:	d004      	beq.n	800d994 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800d98a:	4b1d      	ldr	r3, [pc, #116]	; (800da00 <ethernetif_update_config+0xf4>)
 800d98c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d990:	60da      	str	r2, [r3, #12]
 800d992:	e002      	b.n	800d99a <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 800d994:	4b1a      	ldr	r3, [pc, #104]	; (800da00 <ethernetif_update_config+0xf4>)
 800d996:	2200      	movs	r2, #0
 800d998:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	f003 0302 	and.w	r3, r3, #2
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d003      	beq.n	800d9ac <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 800d9a4:	4b16      	ldr	r3, [pc, #88]	; (800da00 <ethernetif_update_config+0xf4>)
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	609a      	str	r2, [r3, #8]
 800d9aa:	e016      	b.n	800d9da <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 800d9ac:	4b14      	ldr	r3, [pc, #80]	; (800da00 <ethernetif_update_config+0xf4>)
 800d9ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800d9b2:	609a      	str	r2, [r3, #8]
 800d9b4:	e011      	b.n	800d9da <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 800d9b6:	bf00      	nop
 800d9b8:	e000      	b.n	800d9bc <ethernetif_update_config+0xb0>
          goto error;
 800d9ba:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800d9bc:	4b10      	ldr	r3, [pc, #64]	; (800da00 <ethernetif_update_config+0xf4>)
 800d9be:	68db      	ldr	r3, [r3, #12]
 800d9c0:	08db      	lsrs	r3, r3, #3
 800d9c2:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 800d9c4:	4b0e      	ldr	r3, [pc, #56]	; (800da00 <ethernetif_update_config+0xf4>)
 800d9c6:	689b      	ldr	r3, [r3, #8]
 800d9c8:	085b      	lsrs	r3, r3, #1
 800d9ca:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 800d9cc:	4313      	orrs	r3, r2
 800d9ce:	b29b      	uxth	r3, r3
 800d9d0:	461a      	mov	r2, r3
 800d9d2:	2100      	movs	r1, #0
 800d9d4:	480a      	ldr	r0, [pc, #40]	; (800da00 <ethernetif_update_config+0xf4>)
 800d9d6:	f7fb f968 	bl	8008caa <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 800d9da:	2100      	movs	r1, #0
 800d9dc:	4808      	ldr	r0, [pc, #32]	; (800da00 <ethernetif_update_config+0xf4>)
 800d9de:	f7fb fa29 	bl	8008e34 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 800d9e2:	4807      	ldr	r0, [pc, #28]	; (800da00 <ethernetif_update_config+0xf4>)
 800d9e4:	f7fb f9c7 	bl	8008d76 <HAL_ETH_Start>
 800d9e8:	e002      	b.n	800d9f0 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 800d9ea:	4805      	ldr	r0, [pc, #20]	; (800da00 <ethernetif_update_config+0xf4>)
 800d9ec:	f7fb f9f2 	bl	8008dd4 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 800d9f0:	6878      	ldr	r0, [r7, #4]
 800d9f2:	f000 f807 	bl	800da04 <ethernetif_notify_conn_changed>
}
 800d9f6:	bf00      	nop
 800d9f8:	3710      	adds	r7, #16
 800d9fa:	46bd      	mov	sp, r7
 800d9fc:	bd80      	pop	{r7, pc}
 800d9fe:	bf00      	nop
 800da00:	20009200 	.word	0x20009200

0800da04 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 800da04:	b480      	push	{r7}
 800da06:	b083      	sub	sp, #12
 800da08:	af00      	add	r7, sp, #0
 800da0a:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 800da0c:	bf00      	nop
 800da0e:	370c      	adds	r7, #12
 800da10:	46bd      	mov	sp, r7
 800da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da16:	4770      	bx	lr

0800da18 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800da18:	b480      	push	{r7}
 800da1a:	b085      	sub	sp, #20
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	4603      	mov	r3, r0
 800da20:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800da22:	2300      	movs	r3, #0
 800da24:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800da26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800da2a:	2b84      	cmp	r3, #132	; 0x84
 800da2c:	d005      	beq.n	800da3a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800da2e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	4413      	add	r3, r2
 800da36:	3303      	adds	r3, #3
 800da38:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800da3a:	68fb      	ldr	r3, [r7, #12]
}
 800da3c:	4618      	mov	r0, r3
 800da3e:	3714      	adds	r7, #20
 800da40:	46bd      	mov	sp, r7
 800da42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da46:	4770      	bx	lr

0800da48 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800da48:	b480      	push	{r7}
 800da4a:	b083      	sub	sp, #12
 800da4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800da4e:	f3ef 8305 	mrs	r3, IPSR
 800da52:	607b      	str	r3, [r7, #4]
  return(result);
 800da54:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800da56:	2b00      	cmp	r3, #0
 800da58:	bf14      	ite	ne
 800da5a:	2301      	movne	r3, #1
 800da5c:	2300      	moveq	r3, #0
 800da5e:	b2db      	uxtb	r3, r3
}
 800da60:	4618      	mov	r0, r3
 800da62:	370c      	adds	r7, #12
 800da64:	46bd      	mov	sp, r7
 800da66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da6a:	4770      	bx	lr

0800da6c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800da6c:	b580      	push	{r7, lr}
 800da6e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800da70:	f001 ff70 	bl	800f954 <vTaskStartScheduler>
  
  return osOK;
 800da74:	2300      	movs	r3, #0
}
 800da76:	4618      	mov	r0, r3
 800da78:	bd80      	pop	{r7, pc}

0800da7a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800da7a:	b580      	push	{r7, lr}
 800da7c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800da7e:	f7ff ffe3 	bl	800da48 <inHandlerMode>
 800da82:	4603      	mov	r3, r0
 800da84:	2b00      	cmp	r3, #0
 800da86:	d003      	beq.n	800da90 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800da88:	f002 f888 	bl	800fb9c <xTaskGetTickCountFromISR>
 800da8c:	4603      	mov	r3, r0
 800da8e:	e002      	b.n	800da96 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800da90:	f002 f874 	bl	800fb7c <xTaskGetTickCount>
 800da94:	4603      	mov	r3, r0
  }
}
 800da96:	4618      	mov	r0, r3
 800da98:	bd80      	pop	{r7, pc}

0800da9a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800da9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800da9c:	b089      	sub	sp, #36	; 0x24
 800da9e:	af04      	add	r7, sp, #16
 800daa0:	6078      	str	r0, [r7, #4]
 800daa2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	695b      	ldr	r3, [r3, #20]
 800daa8:	2b00      	cmp	r3, #0
 800daaa:	d020      	beq.n	800daee <osThreadCreate+0x54>
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	699b      	ldr	r3, [r3, #24]
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	d01c      	beq.n	800daee <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	685c      	ldr	r4, [r3, #4]
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	681d      	ldr	r5, [r3, #0]
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	691e      	ldr	r6, [r3, #16]
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800dac6:	4618      	mov	r0, r3
 800dac8:	f7ff ffa6 	bl	800da18 <makeFreeRtosPriority>
 800dacc:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	695b      	ldr	r3, [r3, #20]
 800dad2:	687a      	ldr	r2, [r7, #4]
 800dad4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dad6:	9202      	str	r2, [sp, #8]
 800dad8:	9301      	str	r3, [sp, #4]
 800dada:	9100      	str	r1, [sp, #0]
 800dadc:	683b      	ldr	r3, [r7, #0]
 800dade:	4632      	mov	r2, r6
 800dae0:	4629      	mov	r1, r5
 800dae2:	4620      	mov	r0, r4
 800dae4:	f001 fd58 	bl	800f598 <xTaskCreateStatic>
 800dae8:	4603      	mov	r3, r0
 800daea:	60fb      	str	r3, [r7, #12]
 800daec:	e01c      	b.n	800db28 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	685c      	ldr	r4, [r3, #4]
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dafa:	b29e      	uxth	r6, r3
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800db02:	4618      	mov	r0, r3
 800db04:	f7ff ff88 	bl	800da18 <makeFreeRtosPriority>
 800db08:	4602      	mov	r2, r0
 800db0a:	f107 030c 	add.w	r3, r7, #12
 800db0e:	9301      	str	r3, [sp, #4]
 800db10:	9200      	str	r2, [sp, #0]
 800db12:	683b      	ldr	r3, [r7, #0]
 800db14:	4632      	mov	r2, r6
 800db16:	4629      	mov	r1, r5
 800db18:	4620      	mov	r0, r4
 800db1a:	f001 fd9a 	bl	800f652 <xTaskCreate>
 800db1e:	4603      	mov	r3, r0
 800db20:	2b01      	cmp	r3, #1
 800db22:	d001      	beq.n	800db28 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800db24:	2300      	movs	r3, #0
 800db26:	e000      	b.n	800db2a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800db28:	68fb      	ldr	r3, [r7, #12]
}
 800db2a:	4618      	mov	r0, r3
 800db2c:	3714      	adds	r7, #20
 800db2e:	46bd      	mov	sp, r7
 800db30:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800db32 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800db32:	b580      	push	{r7, lr}
 800db34:	b084      	sub	sp, #16
 800db36:	af00      	add	r7, sp, #0
 800db38:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d001      	beq.n	800db48 <osDelay+0x16>
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	e000      	b.n	800db4a <osDelay+0x18>
 800db48:	2301      	movs	r3, #1
 800db4a:	4618      	mov	r0, r3
 800db4c:	f001 fece 	bl	800f8ec <vTaskDelay>
  
  return osOK;
 800db50:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800db52:	4618      	mov	r0, r3
 800db54:	3710      	adds	r7, #16
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}

0800db5a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800db5a:	b580      	push	{r7, lr}
 800db5c:	b082      	sub	sp, #8
 800db5e:	af00      	add	r7, sp, #0
 800db60:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	685b      	ldr	r3, [r3, #4]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d007      	beq.n	800db7a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	685b      	ldr	r3, [r3, #4]
 800db6e:	4619      	mov	r1, r3
 800db70:	2001      	movs	r0, #1
 800db72:	f000 feb2 	bl	800e8da <xQueueCreateMutexStatic>
 800db76:	4603      	mov	r3, r0
 800db78:	e003      	b.n	800db82 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800db7a:	2001      	movs	r0, #1
 800db7c:	f000 fe95 	bl	800e8aa <xQueueCreateMutex>
 800db80:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800db82:	4618      	mov	r0, r3
 800db84:	3708      	adds	r7, #8
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}
	...

0800db8c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b084      	sub	sp, #16
 800db90:	af00      	add	r7, sp, #0
 800db92:	6078      	str	r0, [r7, #4]
 800db94:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800db96:	2300      	movs	r3, #0
 800db98:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d101      	bne.n	800dba4 <osMutexWait+0x18>
    return osErrorParameter;
 800dba0:	2380      	movs	r3, #128	; 0x80
 800dba2:	e03a      	b.n	800dc1a <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800dba4:	2300      	movs	r3, #0
 800dba6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800dba8:	683b      	ldr	r3, [r7, #0]
 800dbaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dbae:	d103      	bne.n	800dbb8 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800dbb0:	f04f 33ff 	mov.w	r3, #4294967295
 800dbb4:	60fb      	str	r3, [r7, #12]
 800dbb6:	e009      	b.n	800dbcc <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800dbb8:	683b      	ldr	r3, [r7, #0]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d006      	beq.n	800dbcc <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800dbbe:	683b      	ldr	r3, [r7, #0]
 800dbc0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d101      	bne.n	800dbcc <osMutexWait+0x40>
      ticks = 1;
 800dbc8:	2301      	movs	r3, #1
 800dbca:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800dbcc:	f7ff ff3c 	bl	800da48 <inHandlerMode>
 800dbd0:	4603      	mov	r3, r0
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d017      	beq.n	800dc06 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800dbd6:	f107 0308 	add.w	r3, r7, #8
 800dbda:	461a      	mov	r2, r3
 800dbdc:	2100      	movs	r1, #0
 800dbde:	6878      	ldr	r0, [r7, #4]
 800dbe0:	f001 faa8 	bl	800f134 <xQueueReceiveFromISR>
 800dbe4:	4603      	mov	r3, r0
 800dbe6:	2b01      	cmp	r3, #1
 800dbe8:	d001      	beq.n	800dbee <osMutexWait+0x62>
      return osErrorOS;
 800dbea:	23ff      	movs	r3, #255	; 0xff
 800dbec:	e015      	b.n	800dc1a <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d011      	beq.n	800dc18 <osMutexWait+0x8c>
 800dbf4:	4b0b      	ldr	r3, [pc, #44]	; (800dc24 <osMutexWait+0x98>)
 800dbf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbfa:	601a      	str	r2, [r3, #0]
 800dbfc:	f3bf 8f4f 	dsb	sy
 800dc00:	f3bf 8f6f 	isb	sy
 800dc04:	e008      	b.n	800dc18 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800dc06:	68f9      	ldr	r1, [r7, #12]
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f001 f987 	bl	800ef1c <xQueueSemaphoreTake>
 800dc0e:	4603      	mov	r3, r0
 800dc10:	2b01      	cmp	r3, #1
 800dc12:	d001      	beq.n	800dc18 <osMutexWait+0x8c>
    return osErrorOS;
 800dc14:	23ff      	movs	r3, #255	; 0xff
 800dc16:	e000      	b.n	800dc1a <osMutexWait+0x8e>
  }
  
  return osOK;
 800dc18:	2300      	movs	r3, #0
}
 800dc1a:	4618      	mov	r0, r3
 800dc1c:	3710      	adds	r7, #16
 800dc1e:	46bd      	mov	sp, r7
 800dc20:	bd80      	pop	{r7, pc}
 800dc22:	bf00      	nop
 800dc24:	e000ed04 	.word	0xe000ed04

0800dc28 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b084      	sub	sp, #16
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800dc30:	2300      	movs	r3, #0
 800dc32:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800dc34:	2300      	movs	r3, #0
 800dc36:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800dc38:	f7ff ff06 	bl	800da48 <inHandlerMode>
 800dc3c:	4603      	mov	r3, r0
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d016      	beq.n	800dc70 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800dc42:	f107 0308 	add.w	r3, r7, #8
 800dc46:	4619      	mov	r1, r3
 800dc48:	6878      	ldr	r0, [r7, #4]
 800dc4a:	f000 fffa 	bl	800ec42 <xQueueGiveFromISR>
 800dc4e:	4603      	mov	r3, r0
 800dc50:	2b01      	cmp	r3, #1
 800dc52:	d001      	beq.n	800dc58 <osMutexRelease+0x30>
      return osErrorOS;
 800dc54:	23ff      	movs	r3, #255	; 0xff
 800dc56:	e017      	b.n	800dc88 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800dc58:	68bb      	ldr	r3, [r7, #8]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d013      	beq.n	800dc86 <osMutexRelease+0x5e>
 800dc5e:	4b0c      	ldr	r3, [pc, #48]	; (800dc90 <osMutexRelease+0x68>)
 800dc60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dc64:	601a      	str	r2, [r3, #0]
 800dc66:	f3bf 8f4f 	dsb	sy
 800dc6a:	f3bf 8f6f 	isb	sy
 800dc6e:	e00a      	b.n	800dc86 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800dc70:	2300      	movs	r3, #0
 800dc72:	2200      	movs	r2, #0
 800dc74:	2100      	movs	r1, #0
 800dc76:	6878      	ldr	r0, [r7, #4]
 800dc78:	f000 fe4a 	bl	800e910 <xQueueGenericSend>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	2b01      	cmp	r3, #1
 800dc80:	d001      	beq.n	800dc86 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800dc82:	23ff      	movs	r3, #255	; 0xff
 800dc84:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800dc86:	68fb      	ldr	r3, [r7, #12]
}
 800dc88:	4618      	mov	r0, r3
 800dc8a:	3710      	adds	r7, #16
 800dc8c:	46bd      	mov	sp, r7
 800dc8e:	bd80      	pop	{r7, pc}
 800dc90:	e000ed04 	.word	0xe000ed04

0800dc94 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800dc94:	b580      	push	{r7, lr}
 800dc96:	b086      	sub	sp, #24
 800dc98:	af02      	add	r7, sp, #8
 800dc9a:	6078      	str	r0, [r7, #4]
 800dc9c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d00f      	beq.n	800dcc6 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800dca6:	683b      	ldr	r3, [r7, #0]
 800dca8:	2b01      	cmp	r3, #1
 800dcaa:	d10a      	bne.n	800dcc2 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	685b      	ldr	r3, [r3, #4]
 800dcb0:	2203      	movs	r2, #3
 800dcb2:	9200      	str	r2, [sp, #0]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	2100      	movs	r1, #0
 800dcb8:	2001      	movs	r0, #1
 800dcba:	f000 fd0b 	bl	800e6d4 <xQueueGenericCreateStatic>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	e016      	b.n	800dcf0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	e014      	b.n	800dcf0 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800dcc6:	683b      	ldr	r3, [r7, #0]
 800dcc8:	2b01      	cmp	r3, #1
 800dcca:	d110      	bne.n	800dcee <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800dccc:	2203      	movs	r2, #3
 800dcce:	2100      	movs	r1, #0
 800dcd0:	2001      	movs	r0, #1
 800dcd2:	f000 fd77 	bl	800e7c4 <xQueueGenericCreate>
 800dcd6:	60f8      	str	r0, [r7, #12]
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d005      	beq.n	800dcea <osSemaphoreCreate+0x56>
 800dcde:	2300      	movs	r3, #0
 800dce0:	2200      	movs	r2, #0
 800dce2:	2100      	movs	r1, #0
 800dce4:	68f8      	ldr	r0, [r7, #12]
 800dce6:	f000 fe13 	bl	800e910 <xQueueGenericSend>
      return sema;
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	e000      	b.n	800dcf0 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800dcee:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	3710      	adds	r7, #16
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}

0800dcf8 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800dcf8:	b580      	push	{r7, lr}
 800dcfa:	b084      	sub	sp, #16
 800dcfc:	af00      	add	r7, sp, #0
 800dcfe:	6078      	str	r0, [r7, #4]
 800dd00:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800dd02:	2300      	movs	r3, #0
 800dd04:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2b00      	cmp	r3, #0
 800dd0a:	d101      	bne.n	800dd10 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800dd0c:	2380      	movs	r3, #128	; 0x80
 800dd0e:	e03a      	b.n	800dd86 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800dd10:	2300      	movs	r3, #0
 800dd12:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd1a:	d103      	bne.n	800dd24 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800dd1c:	f04f 33ff 	mov.w	r3, #4294967295
 800dd20:	60fb      	str	r3, [r7, #12]
 800dd22:	e009      	b.n	800dd38 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d006      	beq.n	800dd38 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800dd2a:	683b      	ldr	r3, [r7, #0]
 800dd2c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	2b00      	cmp	r3, #0
 800dd32:	d101      	bne.n	800dd38 <osSemaphoreWait+0x40>
      ticks = 1;
 800dd34:	2301      	movs	r3, #1
 800dd36:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800dd38:	f7ff fe86 	bl	800da48 <inHandlerMode>
 800dd3c:	4603      	mov	r3, r0
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d017      	beq.n	800dd72 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800dd42:	f107 0308 	add.w	r3, r7, #8
 800dd46:	461a      	mov	r2, r3
 800dd48:	2100      	movs	r1, #0
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f001 f9f2 	bl	800f134 <xQueueReceiveFromISR>
 800dd50:	4603      	mov	r3, r0
 800dd52:	2b01      	cmp	r3, #1
 800dd54:	d001      	beq.n	800dd5a <osSemaphoreWait+0x62>
      return osErrorOS;
 800dd56:	23ff      	movs	r3, #255	; 0xff
 800dd58:	e015      	b.n	800dd86 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d011      	beq.n	800dd84 <osSemaphoreWait+0x8c>
 800dd60:	4b0b      	ldr	r3, [pc, #44]	; (800dd90 <osSemaphoreWait+0x98>)
 800dd62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd66:	601a      	str	r2, [r3, #0]
 800dd68:	f3bf 8f4f 	dsb	sy
 800dd6c:	f3bf 8f6f 	isb	sy
 800dd70:	e008      	b.n	800dd84 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800dd72:	68f9      	ldr	r1, [r7, #12]
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	f001 f8d1 	bl	800ef1c <xQueueSemaphoreTake>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	2b01      	cmp	r3, #1
 800dd7e:	d001      	beq.n	800dd84 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800dd80:	23ff      	movs	r3, #255	; 0xff
 800dd82:	e000      	b.n	800dd86 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800dd84:	2300      	movs	r3, #0
}
 800dd86:	4618      	mov	r0, r3
 800dd88:	3710      	adds	r7, #16
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}
 800dd8e:	bf00      	nop
 800dd90:	e000ed04 	.word	0xe000ed04

0800dd94 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800dd94:	b580      	push	{r7, lr}
 800dd96:	b084      	sub	sp, #16
 800dd98:	af00      	add	r7, sp, #0
 800dd9a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800dda0:	2300      	movs	r3, #0
 800dda2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800dda4:	f7ff fe50 	bl	800da48 <inHandlerMode>
 800dda8:	4603      	mov	r3, r0
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d016      	beq.n	800dddc <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ddae:	f107 0308 	add.w	r3, r7, #8
 800ddb2:	4619      	mov	r1, r3
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f000 ff44 	bl	800ec42 <xQueueGiveFromISR>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	2b01      	cmp	r3, #1
 800ddbe:	d001      	beq.n	800ddc4 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800ddc0:	23ff      	movs	r3, #255	; 0xff
 800ddc2:	e017      	b.n	800ddf4 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d013      	beq.n	800ddf2 <osSemaphoreRelease+0x5e>
 800ddca:	4b0c      	ldr	r3, [pc, #48]	; (800ddfc <osSemaphoreRelease+0x68>)
 800ddcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddd0:	601a      	str	r2, [r3, #0]
 800ddd2:	f3bf 8f4f 	dsb	sy
 800ddd6:	f3bf 8f6f 	isb	sy
 800ddda:	e00a      	b.n	800ddf2 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800dddc:	2300      	movs	r3, #0
 800ddde:	2200      	movs	r2, #0
 800dde0:	2100      	movs	r1, #0
 800dde2:	6878      	ldr	r0, [r7, #4]
 800dde4:	f000 fd94 	bl	800e910 <xQueueGenericSend>
 800dde8:	4603      	mov	r3, r0
 800ddea:	2b01      	cmp	r3, #1
 800ddec:	d001      	beq.n	800ddf2 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800ddee:	23ff      	movs	r3, #255	; 0xff
 800ddf0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
}
 800ddf4:	4618      	mov	r0, r3
 800ddf6:	3710      	adds	r7, #16
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	bd80      	pop	{r7, pc}
 800ddfc:	e000ed04 	.word	0xe000ed04

0800de00 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800de00:	b580      	push	{r7, lr}
 800de02:	b082      	sub	sp, #8
 800de04:	af00      	add	r7, sp, #0
 800de06:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800de08:	f7ff fe1e 	bl	800da48 <inHandlerMode>
 800de0c:	4603      	mov	r3, r0
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d001      	beq.n	800de16 <osSemaphoreDelete+0x16>
    return osErrorISR;
 800de12:	2382      	movs	r3, #130	; 0x82
 800de14:	e003      	b.n	800de1e <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800de16:	6878      	ldr	r0, [r7, #4]
 800de18:	f001 fa48 	bl	800f2ac <vQueueDelete>

  return osOK; 
 800de1c:	2300      	movs	r3, #0
}
 800de1e:	4618      	mov	r0, r3
 800de20:	3708      	adds	r7, #8
 800de22:	46bd      	mov	sp, r7
 800de24:	bd80      	pop	{r7, pc}

0800de26 <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 800de26:	b580      	push	{r7, lr}
 800de28:	b086      	sub	sp, #24
 800de2a:	af00      	add	r7, sp, #0
 800de2c:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	685b      	ldr	r3, [r3, #4]
 800de32:	3303      	adds	r3, #3
 800de34:	f023 0303 	bic.w	r3, r3, #3
 800de38:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 800de3a:	2014      	movs	r0, #20
 800de3c:	f002 fe2c 	bl	8010a98 <pvPortMalloc>
 800de40:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 800de42:	697b      	ldr	r3, [r7, #20]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d046      	beq.n	800ded6 <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681a      	ldr	r2, [r3, #0]
 800de4c:	697b      	ldr	r3, [r7, #20]
 800de4e:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 800de50:	68fa      	ldr	r2, [r7, #12]
 800de52:	697b      	ldr	r3, [r7, #20]
 800de54:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 800de56:	697b      	ldr	r3, [r7, #20]
 800de58:	2200      	movs	r2, #0
 800de5a:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	4618      	mov	r0, r3
 800de62:	f002 fe19 	bl	8010a98 <pvPortMalloc>
 800de66:	4602      	mov	r2, r0
 800de68:	697b      	ldr	r3, [r7, #20]
 800de6a:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 800de6c:	697b      	ldr	r3, [r7, #20]
 800de6e:	685b      	ldr	r3, [r3, #4]
 800de70:	2b00      	cmp	r3, #0
 800de72:	d02b      	beq.n	800decc <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	68fa      	ldr	r2, [r7, #12]
 800de7a:	fb02 f303 	mul.w	r3, r2, r3
 800de7e:	4618      	mov	r0, r3
 800de80:	f002 fe0a 	bl	8010a98 <pvPortMalloc>
 800de84:	4602      	mov	r2, r0
 800de86:	697b      	ldr	r3, [r7, #20]
 800de88:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 800de8a:	697b      	ldr	r3, [r7, #20]
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d011      	beq.n	800deb6 <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 800de92:	2300      	movs	r3, #0
 800de94:	613b      	str	r3, [r7, #16]
 800de96:	e008      	b.n	800deaa <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 800de98:	697b      	ldr	r3, [r7, #20]
 800de9a:	685a      	ldr	r2, [r3, #4]
 800de9c:	693b      	ldr	r3, [r7, #16]
 800de9e:	4413      	add	r3, r2
 800dea0:	2200      	movs	r2, #0
 800dea2:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	3301      	adds	r3, #1
 800dea8:	613b      	str	r3, [r7, #16]
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	693a      	ldr	r2, [r7, #16]
 800deb0:	429a      	cmp	r2, r3
 800deb2:	d3f1      	bcc.n	800de98 <osPoolCreate+0x72>
 800deb4:	e00f      	b.n	800ded6 <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 800deb6:	697b      	ldr	r3, [r7, #20]
 800deb8:	685b      	ldr	r3, [r3, #4]
 800deba:	4618      	mov	r0, r3
 800debc:	f002 feb8 	bl	8010c30 <vPortFree>
        vPortFree(thePool);
 800dec0:	6978      	ldr	r0, [r7, #20]
 800dec2:	f002 feb5 	bl	8010c30 <vPortFree>
        thePool = NULL;
 800dec6:	2300      	movs	r3, #0
 800dec8:	617b      	str	r3, [r7, #20]
 800deca:	e004      	b.n	800ded6 <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 800decc:	6978      	ldr	r0, [r7, #20]
 800dece:	f002 feaf 	bl	8010c30 <vPortFree>
      thePool = NULL;
 800ded2:	2300      	movs	r3, #0
 800ded4:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 800ded6:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 800ded8:	4618      	mov	r0, r3
 800deda:	3718      	adds	r7, #24
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}

0800dee0 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b08a      	sub	sp, #40	; 0x28
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 800dee8:	2300      	movs	r3, #0
 800deea:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 800deec:	2300      	movs	r3, #0
 800deee:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 800def0:	f7ff fdaa 	bl	800da48 <inHandlerMode>
 800def4:	4603      	mov	r3, r0
 800def6:	2b00      	cmp	r3, #0
 800def8:	d00e      	beq.n	800df18 <osPoolAlloc+0x38>
	__asm volatile
 800defa:	f3ef 8211 	mrs	r2, BASEPRI
 800defe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df02:	f383 8811 	msr	BASEPRI, r3
 800df06:	f3bf 8f6f 	isb	sy
 800df0a:	f3bf 8f4f 	dsb	sy
 800df0e:	617a      	str	r2, [r7, #20]
 800df10:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800df12:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 800df14:	627b      	str	r3, [r7, #36]	; 0x24
 800df16:	e001      	b.n	800df1c <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 800df18:	f002 fc9c 	bl	8010854 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 800df1c:	2300      	movs	r3, #0
 800df1e:	61fb      	str	r3, [r7, #28]
 800df20:	e029      	b.n	800df76 <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	691a      	ldr	r2, [r3, #16]
 800df26:	69fb      	ldr	r3, [r7, #28]
 800df28:	4413      	add	r3, r2
 800df2a:	687a      	ldr	r2, [r7, #4]
 800df2c:	6892      	ldr	r2, [r2, #8]
 800df2e:	fbb3 f1f2 	udiv	r1, r3, r2
 800df32:	fb02 f201 	mul.w	r2, r2, r1
 800df36:	1a9b      	subs	r3, r3, r2
 800df38:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	685a      	ldr	r2, [r3, #4]
 800df3e:	69bb      	ldr	r3, [r7, #24]
 800df40:	4413      	add	r3, r2
 800df42:	781b      	ldrb	r3, [r3, #0]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d113      	bne.n	800df70 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	685a      	ldr	r2, [r3, #4]
 800df4c:	69bb      	ldr	r3, [r7, #24]
 800df4e:	4413      	add	r3, r2
 800df50:	2201      	movs	r2, #1
 800df52:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	4619      	mov	r1, r3
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	68db      	ldr	r3, [r3, #12]
 800df5e:	69ba      	ldr	r2, [r7, #24]
 800df60:	fb02 f303 	mul.w	r3, r2, r3
 800df64:	440b      	add	r3, r1
 800df66:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	69ba      	ldr	r2, [r7, #24]
 800df6c:	611a      	str	r2, [r3, #16]
      break;
 800df6e:	e007      	b.n	800df80 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 800df70:	69fb      	ldr	r3, [r7, #28]
 800df72:	3301      	adds	r3, #1
 800df74:	61fb      	str	r3, [r7, #28]
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	689b      	ldr	r3, [r3, #8]
 800df7a:	69fa      	ldr	r2, [r7, #28]
 800df7c:	429a      	cmp	r2, r3
 800df7e:	d3d0      	bcc.n	800df22 <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 800df80:	f7ff fd62 	bl	800da48 <inHandlerMode>
 800df84:	4603      	mov	r3, r0
 800df86:	2b00      	cmp	r3, #0
 800df88:	d005      	beq.n	800df96 <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 800df8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df8c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	f383 8811 	msr	BASEPRI, r3
}
 800df94:	e001      	b.n	800df9a <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 800df96:	f002 fc8d 	bl	80108b4 <vPortExitCritical>
  }
  
  return p;
 800df9a:	6a3b      	ldr	r3, [r7, #32]
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	3728      	adds	r7, #40	; 0x28
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}

0800dfa4 <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 800dfa4:	b480      	push	{r7}
 800dfa6:	b085      	sub	sp, #20
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
 800dfac:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d101      	bne.n	800dfb8 <osPoolFree+0x14>
    return osErrorParameter;
 800dfb4:	2380      	movs	r3, #128	; 0x80
 800dfb6:	e030      	b.n	800e01a <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 800dfb8:	683b      	ldr	r3, [r7, #0]
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d101      	bne.n	800dfc2 <osPoolFree+0x1e>
    return osErrorParameter;
 800dfbe:	2380      	movs	r3, #128	; 0x80
 800dfc0:	e02b      	b.n	800e01a <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	683a      	ldr	r2, [r7, #0]
 800dfc8:	429a      	cmp	r2, r3
 800dfca:	d201      	bcs.n	800dfd0 <osPoolFree+0x2c>
    return osErrorParameter;
 800dfcc:	2380      	movs	r3, #128	; 0x80
 800dfce:	e024      	b.n	800e01a <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	687a      	ldr	r2, [r7, #4]
 800dfd4:	6812      	ldr	r2, [r2, #0]
 800dfd6:	1a9b      	subs	r3, r3, r2
 800dfd8:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	68da      	ldr	r2, [r3, #12]
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	fbb3 f1f2 	udiv	r1, r3, r2
 800dfe4:	fb02 f201 	mul.w	r2, r2, r1
 800dfe8:	1a9b      	subs	r3, r3, r2
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d001      	beq.n	800dff2 <osPoolFree+0x4e>
    return osErrorParameter;
 800dfee:	2380      	movs	r3, #128	; 0x80
 800dff0:	e013      	b.n	800e01a <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	68db      	ldr	r3, [r3, #12]
 800dff6:	68fa      	ldr	r2, [r7, #12]
 800dff8:	fbb2 f3f3 	udiv	r3, r2, r3
 800dffc:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	689b      	ldr	r3, [r3, #8]
 800e002:	68fa      	ldr	r2, [r7, #12]
 800e004:	429a      	cmp	r2, r3
 800e006:	d301      	bcc.n	800e00c <osPoolFree+0x68>
    return osErrorParameter;
 800e008:	2380      	movs	r3, #128	; 0x80
 800e00a:	e006      	b.n	800e01a <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	685a      	ldr	r2, [r3, #4]
 800e010:	68fb      	ldr	r3, [r7, #12]
 800e012:	4413      	add	r3, r2
 800e014:	2200      	movs	r2, #0
 800e016:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 800e018:	2300      	movs	r3, #0
}
 800e01a:	4618      	mov	r0, r3
 800e01c:	3714      	adds	r7, #20
 800e01e:	46bd      	mov	sp, r7
 800e020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e024:	4770      	bx	lr

0800e026 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800e026:	b590      	push	{r4, r7, lr}
 800e028:	b085      	sub	sp, #20
 800e02a:	af02      	add	r7, sp, #8
 800e02c:	6078      	str	r0, [r7, #4]
 800e02e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	689b      	ldr	r3, [r3, #8]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d011      	beq.n	800e05c <osMessageCreate+0x36>
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	68db      	ldr	r3, [r3, #12]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d00d      	beq.n	800e05c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6818      	ldr	r0, [r3, #0]
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6859      	ldr	r1, [r3, #4]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	689a      	ldr	r2, [r3, #8]
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	68db      	ldr	r3, [r3, #12]
 800e050:	2400      	movs	r4, #0
 800e052:	9400      	str	r4, [sp, #0]
 800e054:	f000 fb3e 	bl	800e6d4 <xQueueGenericCreateStatic>
 800e058:	4603      	mov	r3, r0
 800e05a:	e008      	b.n	800e06e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	6818      	ldr	r0, [r3, #0]
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	685b      	ldr	r3, [r3, #4]
 800e064:	2200      	movs	r2, #0
 800e066:	4619      	mov	r1, r3
 800e068:	f000 fbac 	bl	800e7c4 <xQueueGenericCreate>
 800e06c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800e06e:	4618      	mov	r0, r3
 800e070:	370c      	adds	r7, #12
 800e072:	46bd      	mov	sp, r7
 800e074:	bd90      	pop	{r4, r7, pc}
	...

0800e078 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b086      	sub	sp, #24
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	60f8      	str	r0, [r7, #12]
 800e080:	60b9      	str	r1, [r7, #8]
 800e082:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800e084:	2300      	movs	r3, #0
 800e086:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800e08c:	697b      	ldr	r3, [r7, #20]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d101      	bne.n	800e096 <osMessagePut+0x1e>
    ticks = 1;
 800e092:	2301      	movs	r3, #1
 800e094:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800e096:	f7ff fcd7 	bl	800da48 <inHandlerMode>
 800e09a:	4603      	mov	r3, r0
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d018      	beq.n	800e0d2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800e0a0:	f107 0210 	add.w	r2, r7, #16
 800e0a4:	f107 0108 	add.w	r1, r7, #8
 800e0a8:	2300      	movs	r3, #0
 800e0aa:	68f8      	ldr	r0, [r7, #12]
 800e0ac:	f000 fd2e 	bl	800eb0c <xQueueGenericSendFromISR>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	2b01      	cmp	r3, #1
 800e0b4:	d001      	beq.n	800e0ba <osMessagePut+0x42>
      return osErrorOS;
 800e0b6:	23ff      	movs	r3, #255	; 0xff
 800e0b8:	e018      	b.n	800e0ec <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e0ba:	693b      	ldr	r3, [r7, #16]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d014      	beq.n	800e0ea <osMessagePut+0x72>
 800e0c0:	4b0c      	ldr	r3, [pc, #48]	; (800e0f4 <osMessagePut+0x7c>)
 800e0c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0c6:	601a      	str	r2, [r3, #0]
 800e0c8:	f3bf 8f4f 	dsb	sy
 800e0cc:	f3bf 8f6f 	isb	sy
 800e0d0:	e00b      	b.n	800e0ea <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800e0d2:	f107 0108 	add.w	r1, r7, #8
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	697a      	ldr	r2, [r7, #20]
 800e0da:	68f8      	ldr	r0, [r7, #12]
 800e0dc:	f000 fc18 	bl	800e910 <xQueueGenericSend>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	2b01      	cmp	r3, #1
 800e0e4:	d001      	beq.n	800e0ea <osMessagePut+0x72>
      return osErrorOS;
 800e0e6:	23ff      	movs	r3, #255	; 0xff
 800e0e8:	e000      	b.n	800e0ec <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800e0ea:	2300      	movs	r3, #0
}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	3718      	adds	r7, #24
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}
 800e0f4:	e000ed04 	.word	0xe000ed04

0800e0f8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800e0f8:	b590      	push	{r4, r7, lr}
 800e0fa:	b08b      	sub	sp, #44	; 0x2c
 800e0fc:	af00      	add	r7, sp, #0
 800e0fe:	60f8      	str	r0, [r7, #12]
 800e100:	60b9      	str	r1, [r7, #8]
 800e102:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800e104:	68bb      	ldr	r3, [r7, #8]
 800e106:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800e108:	2300      	movs	r3, #0
 800e10a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	d10a      	bne.n	800e128 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800e112:	2380      	movs	r3, #128	; 0x80
 800e114:	617b      	str	r3, [r7, #20]
    return event;
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	461c      	mov	r4, r3
 800e11a:	f107 0314 	add.w	r3, r7, #20
 800e11e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e122:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e126:	e054      	b.n	800e1d2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800e128:	2300      	movs	r3, #0
 800e12a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800e12c:	2300      	movs	r3, #0
 800e12e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e136:	d103      	bne.n	800e140 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800e138:	f04f 33ff 	mov.w	r3, #4294967295
 800e13c:	627b      	str	r3, [r7, #36]	; 0x24
 800e13e:	e009      	b.n	800e154 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	2b00      	cmp	r3, #0
 800e144:	d006      	beq.n	800e154 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800e14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d101      	bne.n	800e154 <osMessageGet+0x5c>
      ticks = 1;
 800e150:	2301      	movs	r3, #1
 800e152:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800e154:	f7ff fc78 	bl	800da48 <inHandlerMode>
 800e158:	4603      	mov	r3, r0
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d01c      	beq.n	800e198 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800e15e:	f107 0220 	add.w	r2, r7, #32
 800e162:	f107 0314 	add.w	r3, r7, #20
 800e166:	3304      	adds	r3, #4
 800e168:	4619      	mov	r1, r3
 800e16a:	68b8      	ldr	r0, [r7, #8]
 800e16c:	f000 ffe2 	bl	800f134 <xQueueReceiveFromISR>
 800e170:	4603      	mov	r3, r0
 800e172:	2b01      	cmp	r3, #1
 800e174:	d102      	bne.n	800e17c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800e176:	2310      	movs	r3, #16
 800e178:	617b      	str	r3, [r7, #20]
 800e17a:	e001      	b.n	800e180 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800e17c:	2300      	movs	r3, #0
 800e17e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e180:	6a3b      	ldr	r3, [r7, #32]
 800e182:	2b00      	cmp	r3, #0
 800e184:	d01d      	beq.n	800e1c2 <osMessageGet+0xca>
 800e186:	4b15      	ldr	r3, [pc, #84]	; (800e1dc <osMessageGet+0xe4>)
 800e188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e18c:	601a      	str	r2, [r3, #0]
 800e18e:	f3bf 8f4f 	dsb	sy
 800e192:	f3bf 8f6f 	isb	sy
 800e196:	e014      	b.n	800e1c2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800e198:	f107 0314 	add.w	r3, r7, #20
 800e19c:	3304      	adds	r3, #4
 800e19e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e1a0:	4619      	mov	r1, r3
 800e1a2:	68b8      	ldr	r0, [r7, #8]
 800e1a4:	f000 fdda 	bl	800ed5c <xQueueReceive>
 800e1a8:	4603      	mov	r3, r0
 800e1aa:	2b01      	cmp	r3, #1
 800e1ac:	d102      	bne.n	800e1b4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800e1ae:	2310      	movs	r3, #16
 800e1b0:	617b      	str	r3, [r7, #20]
 800e1b2:	e006      	b.n	800e1c2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800e1b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d101      	bne.n	800e1be <osMessageGet+0xc6>
 800e1ba:	2300      	movs	r3, #0
 800e1bc:	e000      	b.n	800e1c0 <osMessageGet+0xc8>
 800e1be:	2340      	movs	r3, #64	; 0x40
 800e1c0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	461c      	mov	r4, r3
 800e1c6:	f107 0314 	add.w	r3, r7, #20
 800e1ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e1ce:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800e1d2:	68f8      	ldr	r0, [r7, #12]
 800e1d4:	372c      	adds	r7, #44	; 0x2c
 800e1d6:	46bd      	mov	sp, r7
 800e1d8:	bd90      	pop	{r4, r7, pc}
 800e1da:	bf00      	nop
 800e1dc:	e000ed04 	.word	0xe000ed04

0800e1e0 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 800e1e0:	b590      	push	{r4, r7, lr}
 800e1e2:	b087      	sub	sp, #28
 800e1e4:	af00      	add	r7, sp, #0
 800e1e6:	6078      	str	r0, [r7, #4]
 800e1e8:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	60fb      	str	r3, [r7, #12]
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	685b      	ldr	r3, [r3, #4]
 800e1f4:	613b      	str	r3, [r7, #16]
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	689c      	ldr	r4, [r3, #8]
 800e1fe:	200c      	movs	r0, #12
 800e200:	f002 fc4a 	bl	8010a98 <pvPortMalloc>
 800e204:	4603      	mov	r3, r0
 800e206:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	689b      	ldr	r3, [r3, #8]
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d101      	bne.n	800e216 <osMailCreate+0x36>
    return NULL;
 800e212:	2300      	movs	r3, #0
 800e214:	e038      	b.n	800e288 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	689b      	ldr	r3, [r3, #8]
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	687a      	ldr	r2, [r7, #4]
 800e21e:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	6818      	ldr	r0, [r3, #0]
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	689b      	ldr	r3, [r3, #8]
 800e228:	681c      	ldr	r4, [r3, #0]
 800e22a:	2200      	movs	r2, #0
 800e22c:	2104      	movs	r1, #4
 800e22e:	f000 fac9 	bl	800e7c4 <xQueueGenericCreate>
 800e232:	4603      	mov	r3, r0
 800e234:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	689b      	ldr	r3, [r3, #8]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	685b      	ldr	r3, [r3, #4]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d107      	bne.n	800e252 <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	689b      	ldr	r3, [r3, #8]
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	4618      	mov	r0, r3
 800e24a:	f002 fcf1 	bl	8010c30 <vPortFree>
    return NULL;
 800e24e:	2300      	movs	r3, #0
 800e250:	e01a      	b.n	800e288 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	689b      	ldr	r3, [r3, #8]
 800e256:	681c      	ldr	r4, [r3, #0]
 800e258:	f107 030c 	add.w	r3, r7, #12
 800e25c:	4618      	mov	r0, r3
 800e25e:	f7ff fde2 	bl	800de26 <osPoolCreate>
 800e262:	4603      	mov	r3, r0
 800e264:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	689b      	ldr	r3, [r3, #8]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	689b      	ldr	r3, [r3, #8]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d107      	bne.n	800e282 <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	689b      	ldr	r3, [r3, #8]
 800e276:	681b      	ldr	r3, [r3, #0]
 800e278:	4618      	mov	r0, r3
 800e27a:	f002 fcd9 	bl	8010c30 <vPortFree>
    return NULL;
 800e27e:	2300      	movs	r3, #0
 800e280:	e002      	b.n	800e288 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	689b      	ldr	r3, [r3, #8]
 800e286:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 800e288:	4618      	mov	r0, r3
 800e28a:	371c      	adds	r7, #28
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bd90      	pop	{r4, r7, pc}

0800e290 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b084      	sub	sp, #16
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
 800e298:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d101      	bne.n	800e2a4 <osMailAlloc+0x14>
    return NULL;
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	e006      	b.n	800e2b2 <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	689b      	ldr	r3, [r3, #8]
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	f7ff fe19 	bl	800dee0 <osPoolAlloc>
 800e2ae:	60f8      	str	r0, [r7, #12]
  
  return p;
 800e2b0:	68fb      	ldr	r3, [r7, #12]
}
 800e2b2:	4618      	mov	r0, r3
 800e2b4:	3710      	adds	r7, #16
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}
	...

0800e2bc <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b084      	sub	sp, #16
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
 800e2c4:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d101      	bne.n	800e2d0 <osMailPut+0x14>
    return osErrorParameter;
 800e2cc:	2380      	movs	r3, #128	; 0x80
 800e2ce:	e02c      	b.n	800e32a <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 800e2d4:	f7ff fbb8 	bl	800da48 <inHandlerMode>
 800e2d8:	4603      	mov	r3, r0
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d018      	beq.n	800e310 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	6858      	ldr	r0, [r3, #4]
 800e2e2:	f107 020c 	add.w	r2, r7, #12
 800e2e6:	4639      	mov	r1, r7
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	f000 fc0f 	bl	800eb0c <xQueueGenericSendFromISR>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	2b01      	cmp	r3, #1
 800e2f2:	d001      	beq.n	800e2f8 <osMailPut+0x3c>
      return osErrorOS;
 800e2f4:	23ff      	movs	r3, #255	; 0xff
 800e2f6:	e018      	b.n	800e32a <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e2f8:	68fb      	ldr	r3, [r7, #12]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d014      	beq.n	800e328 <osMailPut+0x6c>
 800e2fe:	4b0d      	ldr	r3, [pc, #52]	; (800e334 <osMailPut+0x78>)
 800e300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e304:	601a      	str	r2, [r3, #0]
 800e306:	f3bf 8f4f 	dsb	sy
 800e30a:	f3bf 8f6f 	isb	sy
 800e30e:	e00b      	b.n	800e328 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 800e310:	687b      	ldr	r3, [r7, #4]
 800e312:	6858      	ldr	r0, [r3, #4]
 800e314:	4639      	mov	r1, r7
 800e316:	2300      	movs	r3, #0
 800e318:	2200      	movs	r2, #0
 800e31a:	f000 faf9 	bl	800e910 <xQueueGenericSend>
 800e31e:	4603      	mov	r3, r0
 800e320:	2b01      	cmp	r3, #1
 800e322:	d001      	beq.n	800e328 <osMailPut+0x6c>
      return osErrorOS;
 800e324:	23ff      	movs	r3, #255	; 0xff
 800e326:	e000      	b.n	800e32a <osMailPut+0x6e>
    }
  }
  
  return osOK;
 800e328:	2300      	movs	r3, #0
}
 800e32a:	4618      	mov	r0, r3
 800e32c:	3710      	adds	r7, #16
 800e32e:	46bd      	mov	sp, r7
 800e330:	bd80      	pop	{r7, pc}
 800e332:	bf00      	nop
 800e334:	e000ed04 	.word	0xe000ed04

0800e338 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 800e338:	b590      	push	{r4, r7, lr}
 800e33a:	b08b      	sub	sp, #44	; 0x2c
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	60f8      	str	r0, [r7, #12]
 800e340:	60b9      	str	r1, [r7, #8]
 800e342:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 800e344:	68bb      	ldr	r3, [r7, #8]
 800e346:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 800e348:	68bb      	ldr	r3, [r7, #8]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d10a      	bne.n	800e364 <osMailGet+0x2c>
    event.status = osErrorParameter;
 800e34e:	2380      	movs	r3, #128	; 0x80
 800e350:	617b      	str	r3, [r7, #20]
    return event;
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	461c      	mov	r4, r3
 800e356:	f107 0314 	add.w	r3, r7, #20
 800e35a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e35e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e362:	e056      	b.n	800e412 <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800e364:	2300      	movs	r3, #0
 800e366:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800e368:	2300      	movs	r3, #0
 800e36a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e372:	d103      	bne.n	800e37c <osMailGet+0x44>
    ticks = portMAX_DELAY;
 800e374:	f04f 33ff 	mov.w	r3, #4294967295
 800e378:	627b      	str	r3, [r7, #36]	; 0x24
 800e37a:	e009      	b.n	800e390 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	2b00      	cmp	r3, #0
 800e380:	d006      	beq.n	800e390 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800e386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e388:	2b00      	cmp	r3, #0
 800e38a:	d101      	bne.n	800e390 <osMailGet+0x58>
      ticks = 1;
 800e38c:	2301      	movs	r3, #1
 800e38e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800e390:	f7ff fb5a 	bl	800da48 <inHandlerMode>
 800e394:	4603      	mov	r3, r0
 800e396:	2b00      	cmp	r3, #0
 800e398:	d01d      	beq.n	800e3d6 <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 800e39a:	68bb      	ldr	r3, [r7, #8]
 800e39c:	6858      	ldr	r0, [r3, #4]
 800e39e:	f107 0220 	add.w	r2, r7, #32
 800e3a2:	f107 0314 	add.w	r3, r7, #20
 800e3a6:	3304      	adds	r3, #4
 800e3a8:	4619      	mov	r1, r3
 800e3aa:	f000 fec3 	bl	800f134 <xQueueReceiveFromISR>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	2b01      	cmp	r3, #1
 800e3b2:	d102      	bne.n	800e3ba <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 800e3b4:	2320      	movs	r3, #32
 800e3b6:	617b      	str	r3, [r7, #20]
 800e3b8:	e001      	b.n	800e3be <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800e3be:	6a3b      	ldr	r3, [r7, #32]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d01e      	beq.n	800e402 <osMailGet+0xca>
 800e3c4:	4b15      	ldr	r3, [pc, #84]	; (800e41c <osMailGet+0xe4>)
 800e3c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e3ca:	601a      	str	r2, [r3, #0]
 800e3cc:	f3bf 8f4f 	dsb	sy
 800e3d0:	f3bf 8f6f 	isb	sy
 800e3d4:	e015      	b.n	800e402 <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 800e3d6:	68bb      	ldr	r3, [r7, #8]
 800e3d8:	6858      	ldr	r0, [r3, #4]
 800e3da:	f107 0314 	add.w	r3, r7, #20
 800e3de:	3304      	adds	r3, #4
 800e3e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e3e2:	4619      	mov	r1, r3
 800e3e4:	f000 fcba 	bl	800ed5c <xQueueReceive>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	2b01      	cmp	r3, #1
 800e3ec:	d102      	bne.n	800e3f4 <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 800e3ee:	2320      	movs	r3, #32
 800e3f0:	617b      	str	r3, [r7, #20]
 800e3f2:	e006      	b.n	800e402 <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800e3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d101      	bne.n	800e3fe <osMailGet+0xc6>
 800e3fa:	2300      	movs	r3, #0
 800e3fc:	e000      	b.n	800e400 <osMailGet+0xc8>
 800e3fe:	2340      	movs	r3, #64	; 0x40
 800e400:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	461c      	mov	r4, r3
 800e406:	f107 0314 	add.w	r3, r7, #20
 800e40a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e40e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800e412:	68f8      	ldr	r0, [r7, #12]
 800e414:	372c      	adds	r7, #44	; 0x2c
 800e416:	46bd      	mov	sp, r7
 800e418:	bd90      	pop	{r4, r7, pc}
 800e41a:	bf00      	nop
 800e41c:	e000ed04 	.word	0xe000ed04

0800e420 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b082      	sub	sp, #8
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
 800e428:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d101      	bne.n	800e434 <osMailFree+0x14>
    return osErrorParameter;
 800e430:	2380      	movs	r3, #128	; 0x80
 800e432:	e006      	b.n	800e442 <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	689b      	ldr	r3, [r3, #8]
 800e438:	6839      	ldr	r1, [r7, #0]
 800e43a:	4618      	mov	r0, r3
 800e43c:	f7ff fdb2 	bl	800dfa4 <osPoolFree>
 800e440:	4603      	mov	r3, r0
}
 800e442:	4618      	mov	r0, r3
 800e444:	3708      	adds	r7, #8
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}

0800e44a <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800e44a:	b580      	push	{r7, lr}
 800e44c:	b082      	sub	sp, #8
 800e44e:	af00      	add	r7, sp, #0
 800e450:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800e452:	f7ff faf9 	bl	800da48 <inHandlerMode>
 800e456:	4603      	mov	r3, r0
 800e458:	2b00      	cmp	r3, #0
 800e45a:	d004      	beq.n	800e466 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800e45c:	6878      	ldr	r0, [r7, #4]
 800e45e:	f000 ff07 	bl	800f270 <uxQueueMessagesWaitingFromISR>
 800e462:	4603      	mov	r3, r0
 800e464:	e003      	b.n	800e46e <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800e466:	6878      	ldr	r0, [r7, #4]
 800e468:	f000 fee4 	bl	800f234 <uxQueueMessagesWaiting>
 800e46c:	4603      	mov	r3, r0
  }
}
 800e46e:	4618      	mov	r0, r3
 800e470:	3708      	adds	r7, #8
 800e472:	46bd      	mov	sp, r7
 800e474:	bd80      	pop	{r7, pc}

0800e476 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800e476:	b580      	push	{r7, lr}
 800e478:	b082      	sub	sp, #8
 800e47a:	af00      	add	r7, sp, #0
 800e47c:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800e47e:	f7ff fae3 	bl	800da48 <inHandlerMode>
 800e482:	4603      	mov	r3, r0
 800e484:	2b00      	cmp	r3, #0
 800e486:	d001      	beq.n	800e48c <osMessageDelete+0x16>
    return osErrorISR;
 800e488:	2382      	movs	r3, #130	; 0x82
 800e48a:	e003      	b.n	800e494 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f000 ff0d 	bl	800f2ac <vQueueDelete>

  return osOK; 
 800e492:	2300      	movs	r3, #0
}
 800e494:	4618      	mov	r0, r3
 800e496:	3708      	adds	r7, #8
 800e498:	46bd      	mov	sp, r7
 800e49a:	bd80      	pop	{r7, pc}

0800e49c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e49c:	b480      	push	{r7}
 800e49e:	b083      	sub	sp, #12
 800e4a0:	af00      	add	r7, sp, #0
 800e4a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f103 0208 	add.w	r2, r3, #8
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e4ae:	687b      	ldr	r3, [r7, #4]
 800e4b0:	f04f 32ff 	mov.w	r2, #4294967295
 800e4b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e4b6:	687b      	ldr	r3, [r7, #4]
 800e4b8:	f103 0208 	add.w	r2, r3, #8
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f103 0208 	add.w	r2, r3, #8
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e4d0:	bf00      	nop
 800e4d2:	370c      	adds	r7, #12
 800e4d4:	46bd      	mov	sp, r7
 800e4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4da:	4770      	bx	lr

0800e4dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e4dc:	b480      	push	{r7}
 800e4de:	b083      	sub	sp, #12
 800e4e0:	af00      	add	r7, sp, #0
 800e4e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e4ea:	bf00      	nop
 800e4ec:	370c      	adds	r7, #12
 800e4ee:	46bd      	mov	sp, r7
 800e4f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f4:	4770      	bx	lr

0800e4f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e4f6:	b480      	push	{r7}
 800e4f8:	b085      	sub	sp, #20
 800e4fa:	af00      	add	r7, sp, #0
 800e4fc:	6078      	str	r0, [r7, #4]
 800e4fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	685b      	ldr	r3, [r3, #4]
 800e504:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e506:	683b      	ldr	r3, [r7, #0]
 800e508:	68fa      	ldr	r2, [r7, #12]
 800e50a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	689a      	ldr	r2, [r3, #8]
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	689b      	ldr	r3, [r3, #8]
 800e518:	683a      	ldr	r2, [r7, #0]
 800e51a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	683a      	ldr	r2, [r7, #0]
 800e520:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	687a      	ldr	r2, [r7, #4]
 800e526:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	1c5a      	adds	r2, r3, #1
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	601a      	str	r2, [r3, #0]
}
 800e532:	bf00      	nop
 800e534:	3714      	adds	r7, #20
 800e536:	46bd      	mov	sp, r7
 800e538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53c:	4770      	bx	lr

0800e53e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e53e:	b480      	push	{r7}
 800e540:	b085      	sub	sp, #20
 800e542:	af00      	add	r7, sp, #0
 800e544:	6078      	str	r0, [r7, #4]
 800e546:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e548:	683b      	ldr	r3, [r7, #0]
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e554:	d103      	bne.n	800e55e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	691b      	ldr	r3, [r3, #16]
 800e55a:	60fb      	str	r3, [r7, #12]
 800e55c:	e00c      	b.n	800e578 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	3308      	adds	r3, #8
 800e562:	60fb      	str	r3, [r7, #12]
 800e564:	e002      	b.n	800e56c <vListInsert+0x2e>
 800e566:	68fb      	ldr	r3, [r7, #12]
 800e568:	685b      	ldr	r3, [r3, #4]
 800e56a:	60fb      	str	r3, [r7, #12]
 800e56c:	68fb      	ldr	r3, [r7, #12]
 800e56e:	685b      	ldr	r3, [r3, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	68ba      	ldr	r2, [r7, #8]
 800e574:	429a      	cmp	r2, r3
 800e576:	d2f6      	bcs.n	800e566 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	685a      	ldr	r2, [r3, #4]
 800e57c:	683b      	ldr	r3, [r7, #0]
 800e57e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	685b      	ldr	r3, [r3, #4]
 800e584:	683a      	ldr	r2, [r7, #0]
 800e586:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e588:	683b      	ldr	r3, [r7, #0]
 800e58a:	68fa      	ldr	r2, [r7, #12]
 800e58c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e58e:	68fb      	ldr	r3, [r7, #12]
 800e590:	683a      	ldr	r2, [r7, #0]
 800e592:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	687a      	ldr	r2, [r7, #4]
 800e598:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	1c5a      	adds	r2, r3, #1
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	601a      	str	r2, [r3, #0]
}
 800e5a4:	bf00      	nop
 800e5a6:	3714      	adds	r7, #20
 800e5a8:	46bd      	mov	sp, r7
 800e5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ae:	4770      	bx	lr

0800e5b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e5b0:	b480      	push	{r7}
 800e5b2:	b085      	sub	sp, #20
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	691b      	ldr	r3, [r3, #16]
 800e5bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e5be:	687b      	ldr	r3, [r7, #4]
 800e5c0:	685b      	ldr	r3, [r3, #4]
 800e5c2:	687a      	ldr	r2, [r7, #4]
 800e5c4:	6892      	ldr	r2, [r2, #8]
 800e5c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	689b      	ldr	r3, [r3, #8]
 800e5cc:	687a      	ldr	r2, [r7, #4]
 800e5ce:	6852      	ldr	r2, [r2, #4]
 800e5d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	685b      	ldr	r3, [r3, #4]
 800e5d6:	687a      	ldr	r2, [r7, #4]
 800e5d8:	429a      	cmp	r2, r3
 800e5da:	d103      	bne.n	800e5e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	689a      	ldr	r2, [r3, #8]
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	1e5a      	subs	r2, r3, #1
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	681b      	ldr	r3, [r3, #0]
}
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	3714      	adds	r7, #20
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e602:	4770      	bx	lr

0800e604 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b084      	sub	sp, #16
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	2b00      	cmp	r3, #0
 800e616:	d10a      	bne.n	800e62e <xQueueGenericReset+0x2a>
	__asm volatile
 800e618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e61c:	f383 8811 	msr	BASEPRI, r3
 800e620:	f3bf 8f6f 	isb	sy
 800e624:	f3bf 8f4f 	dsb	sy
 800e628:	60bb      	str	r3, [r7, #8]
}
 800e62a:	bf00      	nop
 800e62c:	e7fe      	b.n	800e62c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e62e:	f002 f911 	bl	8010854 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	681a      	ldr	r2, [r3, #0]
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e63a:	68f9      	ldr	r1, [r7, #12]
 800e63c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e63e:	fb01 f303 	mul.w	r3, r1, r3
 800e642:	441a      	add	r2, r3
 800e644:	68fb      	ldr	r3, [r7, #12]
 800e646:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e648:	68fb      	ldr	r3, [r7, #12]
 800e64a:	2200      	movs	r2, #0
 800e64c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	681a      	ldr	r2, [r3, #0]
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	681a      	ldr	r2, [r3, #0]
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e65e:	3b01      	subs	r3, #1
 800e660:	68f9      	ldr	r1, [r7, #12]
 800e662:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e664:	fb01 f303 	mul.w	r3, r1, r3
 800e668:	441a      	add	r2, r3
 800e66a:	68fb      	ldr	r3, [r7, #12]
 800e66c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	22ff      	movs	r2, #255	; 0xff
 800e672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	22ff      	movs	r2, #255	; 0xff
 800e67a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e67e:	683b      	ldr	r3, [r7, #0]
 800e680:	2b00      	cmp	r3, #0
 800e682:	d114      	bne.n	800e6ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	691b      	ldr	r3, [r3, #16]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d01a      	beq.n	800e6c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	3310      	adds	r3, #16
 800e690:	4618      	mov	r0, r3
 800e692:	f001 fbd3 	bl	800fe3c <xTaskRemoveFromEventList>
 800e696:	4603      	mov	r3, r0
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d012      	beq.n	800e6c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e69c:	4b0c      	ldr	r3, [pc, #48]	; (800e6d0 <xQueueGenericReset+0xcc>)
 800e69e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6a2:	601a      	str	r2, [r3, #0]
 800e6a4:	f3bf 8f4f 	dsb	sy
 800e6a8:	f3bf 8f6f 	isb	sy
 800e6ac:	e009      	b.n	800e6c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	3310      	adds	r3, #16
 800e6b2:	4618      	mov	r0, r3
 800e6b4:	f7ff fef2 	bl	800e49c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e6b8:	68fb      	ldr	r3, [r7, #12]
 800e6ba:	3324      	adds	r3, #36	; 0x24
 800e6bc:	4618      	mov	r0, r3
 800e6be:	f7ff feed 	bl	800e49c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e6c2:	f002 f8f7 	bl	80108b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e6c6:	2301      	movs	r3, #1
}
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	3710      	adds	r7, #16
 800e6cc:	46bd      	mov	sp, r7
 800e6ce:	bd80      	pop	{r7, pc}
 800e6d0:	e000ed04 	.word	0xe000ed04

0800e6d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b08e      	sub	sp, #56	; 0x38
 800e6d8:	af02      	add	r7, sp, #8
 800e6da:	60f8      	str	r0, [r7, #12]
 800e6dc:	60b9      	str	r1, [r7, #8]
 800e6de:	607a      	str	r2, [r7, #4]
 800e6e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	d10a      	bne.n	800e6fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e6e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ec:	f383 8811 	msr	BASEPRI, r3
 800e6f0:	f3bf 8f6f 	isb	sy
 800e6f4:	f3bf 8f4f 	dsb	sy
 800e6f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e6fa:	bf00      	nop
 800e6fc:	e7fe      	b.n	800e6fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d10a      	bne.n	800e71a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e708:	f383 8811 	msr	BASEPRI, r3
 800e70c:	f3bf 8f6f 	isb	sy
 800e710:	f3bf 8f4f 	dsb	sy
 800e714:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e716:	bf00      	nop
 800e718:	e7fe      	b.n	800e718 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d002      	beq.n	800e726 <xQueueGenericCreateStatic+0x52>
 800e720:	68bb      	ldr	r3, [r7, #8]
 800e722:	2b00      	cmp	r3, #0
 800e724:	d001      	beq.n	800e72a <xQueueGenericCreateStatic+0x56>
 800e726:	2301      	movs	r3, #1
 800e728:	e000      	b.n	800e72c <xQueueGenericCreateStatic+0x58>
 800e72a:	2300      	movs	r3, #0
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d10a      	bne.n	800e746 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e730:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e734:	f383 8811 	msr	BASEPRI, r3
 800e738:	f3bf 8f6f 	isb	sy
 800e73c:	f3bf 8f4f 	dsb	sy
 800e740:	623b      	str	r3, [r7, #32]
}
 800e742:	bf00      	nop
 800e744:	e7fe      	b.n	800e744 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d102      	bne.n	800e752 <xQueueGenericCreateStatic+0x7e>
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d101      	bne.n	800e756 <xQueueGenericCreateStatic+0x82>
 800e752:	2301      	movs	r3, #1
 800e754:	e000      	b.n	800e758 <xQueueGenericCreateStatic+0x84>
 800e756:	2300      	movs	r3, #0
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d10a      	bne.n	800e772 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e760:	f383 8811 	msr	BASEPRI, r3
 800e764:	f3bf 8f6f 	isb	sy
 800e768:	f3bf 8f4f 	dsb	sy
 800e76c:	61fb      	str	r3, [r7, #28]
}
 800e76e:	bf00      	nop
 800e770:	e7fe      	b.n	800e770 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e772:	2348      	movs	r3, #72	; 0x48
 800e774:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e776:	697b      	ldr	r3, [r7, #20]
 800e778:	2b48      	cmp	r3, #72	; 0x48
 800e77a:	d00a      	beq.n	800e792 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e77c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e780:	f383 8811 	msr	BASEPRI, r3
 800e784:	f3bf 8f6f 	isb	sy
 800e788:	f3bf 8f4f 	dsb	sy
 800e78c:	61bb      	str	r3, [r7, #24]
}
 800e78e:	bf00      	nop
 800e790:	e7fe      	b.n	800e790 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e792:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e794:	683b      	ldr	r3, [r7, #0]
 800e796:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e79a:	2b00      	cmp	r3, #0
 800e79c:	d00d      	beq.n	800e7ba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a0:	2201      	movs	r2, #1
 800e7a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e7a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ac:	9300      	str	r3, [sp, #0]
 800e7ae:	4613      	mov	r3, r2
 800e7b0:	687a      	ldr	r2, [r7, #4]
 800e7b2:	68b9      	ldr	r1, [r7, #8]
 800e7b4:	68f8      	ldr	r0, [r7, #12]
 800e7b6:	f000 f83f 	bl	800e838 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e7ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e7bc:	4618      	mov	r0, r3
 800e7be:	3730      	adds	r7, #48	; 0x30
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}

0800e7c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b08a      	sub	sp, #40	; 0x28
 800e7c8:	af02      	add	r7, sp, #8
 800e7ca:	60f8      	str	r0, [r7, #12]
 800e7cc:	60b9      	str	r1, [r7, #8]
 800e7ce:	4613      	mov	r3, r2
 800e7d0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d10a      	bne.n	800e7ee <xQueueGenericCreate+0x2a>
	__asm volatile
 800e7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7dc:	f383 8811 	msr	BASEPRI, r3
 800e7e0:	f3bf 8f6f 	isb	sy
 800e7e4:	f3bf 8f4f 	dsb	sy
 800e7e8:	613b      	str	r3, [r7, #16]
}
 800e7ea:	bf00      	nop
 800e7ec:	e7fe      	b.n	800e7ec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e7ee:	68fb      	ldr	r3, [r7, #12]
 800e7f0:	68ba      	ldr	r2, [r7, #8]
 800e7f2:	fb02 f303 	mul.w	r3, r2, r3
 800e7f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e7f8:	69fb      	ldr	r3, [r7, #28]
 800e7fa:	3348      	adds	r3, #72	; 0x48
 800e7fc:	4618      	mov	r0, r3
 800e7fe:	f002 f94b 	bl	8010a98 <pvPortMalloc>
 800e802:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e804:	69bb      	ldr	r3, [r7, #24]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d011      	beq.n	800e82e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e80a:	69bb      	ldr	r3, [r7, #24]
 800e80c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e80e:	697b      	ldr	r3, [r7, #20]
 800e810:	3348      	adds	r3, #72	; 0x48
 800e812:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e814:	69bb      	ldr	r3, [r7, #24]
 800e816:	2200      	movs	r2, #0
 800e818:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e81c:	79fa      	ldrb	r2, [r7, #7]
 800e81e:	69bb      	ldr	r3, [r7, #24]
 800e820:	9300      	str	r3, [sp, #0]
 800e822:	4613      	mov	r3, r2
 800e824:	697a      	ldr	r2, [r7, #20]
 800e826:	68b9      	ldr	r1, [r7, #8]
 800e828:	68f8      	ldr	r0, [r7, #12]
 800e82a:	f000 f805 	bl	800e838 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e82e:	69bb      	ldr	r3, [r7, #24]
	}
 800e830:	4618      	mov	r0, r3
 800e832:	3720      	adds	r7, #32
 800e834:	46bd      	mov	sp, r7
 800e836:	bd80      	pop	{r7, pc}

0800e838 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e838:	b580      	push	{r7, lr}
 800e83a:	b084      	sub	sp, #16
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	60f8      	str	r0, [r7, #12]
 800e840:	60b9      	str	r1, [r7, #8]
 800e842:	607a      	str	r2, [r7, #4]
 800e844:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d103      	bne.n	800e854 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e84c:	69bb      	ldr	r3, [r7, #24]
 800e84e:	69ba      	ldr	r2, [r7, #24]
 800e850:	601a      	str	r2, [r3, #0]
 800e852:	e002      	b.n	800e85a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e854:	69bb      	ldr	r3, [r7, #24]
 800e856:	687a      	ldr	r2, [r7, #4]
 800e858:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e85a:	69bb      	ldr	r3, [r7, #24]
 800e85c:	68fa      	ldr	r2, [r7, #12]
 800e85e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e860:	69bb      	ldr	r3, [r7, #24]
 800e862:	68ba      	ldr	r2, [r7, #8]
 800e864:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e866:	2101      	movs	r1, #1
 800e868:	69b8      	ldr	r0, [r7, #24]
 800e86a:	f7ff fecb 	bl	800e604 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e86e:	bf00      	nop
 800e870:	3710      	adds	r7, #16
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}

0800e876 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800e876:	b580      	push	{r7, lr}
 800e878:	b082      	sub	sp, #8
 800e87a:	af00      	add	r7, sp, #0
 800e87c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2b00      	cmp	r3, #0
 800e882:	d00e      	beq.n	800e8a2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2200      	movs	r2, #0
 800e888:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	2200      	movs	r2, #0
 800e88e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2200      	movs	r2, #0
 800e894:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e896:	2300      	movs	r3, #0
 800e898:	2200      	movs	r2, #0
 800e89a:	2100      	movs	r1, #0
 800e89c:	6878      	ldr	r0, [r7, #4]
 800e89e:	f000 f837 	bl	800e910 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800e8a2:	bf00      	nop
 800e8a4:	3708      	adds	r7, #8
 800e8a6:	46bd      	mov	sp, r7
 800e8a8:	bd80      	pop	{r7, pc}

0800e8aa <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800e8aa:	b580      	push	{r7, lr}
 800e8ac:	b086      	sub	sp, #24
 800e8ae:	af00      	add	r7, sp, #0
 800e8b0:	4603      	mov	r3, r0
 800e8b2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e8b4:	2301      	movs	r3, #1
 800e8b6:	617b      	str	r3, [r7, #20]
 800e8b8:	2300      	movs	r3, #0
 800e8ba:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800e8bc:	79fb      	ldrb	r3, [r7, #7]
 800e8be:	461a      	mov	r2, r3
 800e8c0:	6939      	ldr	r1, [r7, #16]
 800e8c2:	6978      	ldr	r0, [r7, #20]
 800e8c4:	f7ff ff7e 	bl	800e7c4 <xQueueGenericCreate>
 800e8c8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e8ca:	68f8      	ldr	r0, [r7, #12]
 800e8cc:	f7ff ffd3 	bl	800e876 <prvInitialiseMutex>

		return xNewQueue;
 800e8d0:	68fb      	ldr	r3, [r7, #12]
	}
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	3718      	adds	r7, #24
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	bd80      	pop	{r7, pc}

0800e8da <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800e8da:	b580      	push	{r7, lr}
 800e8dc:	b088      	sub	sp, #32
 800e8de:	af02      	add	r7, sp, #8
 800e8e0:	4603      	mov	r3, r0
 800e8e2:	6039      	str	r1, [r7, #0]
 800e8e4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800e8e6:	2301      	movs	r3, #1
 800e8e8:	617b      	str	r3, [r7, #20]
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e8ee:	79fb      	ldrb	r3, [r7, #7]
 800e8f0:	9300      	str	r3, [sp, #0]
 800e8f2:	683b      	ldr	r3, [r7, #0]
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	6939      	ldr	r1, [r7, #16]
 800e8f8:	6978      	ldr	r0, [r7, #20]
 800e8fa:	f7ff feeb 	bl	800e6d4 <xQueueGenericCreateStatic>
 800e8fe:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800e900:	68f8      	ldr	r0, [r7, #12]
 800e902:	f7ff ffb8 	bl	800e876 <prvInitialiseMutex>

		return xNewQueue;
 800e906:	68fb      	ldr	r3, [r7, #12]
	}
 800e908:	4618      	mov	r0, r3
 800e90a:	3718      	adds	r7, #24
 800e90c:	46bd      	mov	sp, r7
 800e90e:	bd80      	pop	{r7, pc}

0800e910 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e910:	b580      	push	{r7, lr}
 800e912:	b08e      	sub	sp, #56	; 0x38
 800e914:	af00      	add	r7, sp, #0
 800e916:	60f8      	str	r0, [r7, #12]
 800e918:	60b9      	str	r1, [r7, #8]
 800e91a:	607a      	str	r2, [r7, #4]
 800e91c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e91e:	2300      	movs	r3, #0
 800e920:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e922:	68fb      	ldr	r3, [r7, #12]
 800e924:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d10a      	bne.n	800e942 <xQueueGenericSend+0x32>
	__asm volatile
 800e92c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e930:	f383 8811 	msr	BASEPRI, r3
 800e934:	f3bf 8f6f 	isb	sy
 800e938:	f3bf 8f4f 	dsb	sy
 800e93c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e93e:	bf00      	nop
 800e940:	e7fe      	b.n	800e940 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e942:	68bb      	ldr	r3, [r7, #8]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d103      	bne.n	800e950 <xQueueGenericSend+0x40>
 800e948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e94a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d101      	bne.n	800e954 <xQueueGenericSend+0x44>
 800e950:	2301      	movs	r3, #1
 800e952:	e000      	b.n	800e956 <xQueueGenericSend+0x46>
 800e954:	2300      	movs	r3, #0
 800e956:	2b00      	cmp	r3, #0
 800e958:	d10a      	bne.n	800e970 <xQueueGenericSend+0x60>
	__asm volatile
 800e95a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e95e:	f383 8811 	msr	BASEPRI, r3
 800e962:	f3bf 8f6f 	isb	sy
 800e966:	f3bf 8f4f 	dsb	sy
 800e96a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e96c:	bf00      	nop
 800e96e:	e7fe      	b.n	800e96e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	2b02      	cmp	r3, #2
 800e974:	d103      	bne.n	800e97e <xQueueGenericSend+0x6e>
 800e976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e97a:	2b01      	cmp	r3, #1
 800e97c:	d101      	bne.n	800e982 <xQueueGenericSend+0x72>
 800e97e:	2301      	movs	r3, #1
 800e980:	e000      	b.n	800e984 <xQueueGenericSend+0x74>
 800e982:	2300      	movs	r3, #0
 800e984:	2b00      	cmp	r3, #0
 800e986:	d10a      	bne.n	800e99e <xQueueGenericSend+0x8e>
	__asm volatile
 800e988:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e98c:	f383 8811 	msr	BASEPRI, r3
 800e990:	f3bf 8f6f 	isb	sy
 800e994:	f3bf 8f4f 	dsb	sy
 800e998:	623b      	str	r3, [r7, #32]
}
 800e99a:	bf00      	nop
 800e99c:	e7fe      	b.n	800e99c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e99e:	f001 fc0d 	bl	80101bc <xTaskGetSchedulerState>
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d102      	bne.n	800e9ae <xQueueGenericSend+0x9e>
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d101      	bne.n	800e9b2 <xQueueGenericSend+0xa2>
 800e9ae:	2301      	movs	r3, #1
 800e9b0:	e000      	b.n	800e9b4 <xQueueGenericSend+0xa4>
 800e9b2:	2300      	movs	r3, #0
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d10a      	bne.n	800e9ce <xQueueGenericSend+0xbe>
	__asm volatile
 800e9b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9bc:	f383 8811 	msr	BASEPRI, r3
 800e9c0:	f3bf 8f6f 	isb	sy
 800e9c4:	f3bf 8f4f 	dsb	sy
 800e9c8:	61fb      	str	r3, [r7, #28]
}
 800e9ca:	bf00      	nop
 800e9cc:	e7fe      	b.n	800e9cc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e9ce:	f001 ff41 	bl	8010854 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e9d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e9d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e9da:	429a      	cmp	r2, r3
 800e9dc:	d302      	bcc.n	800e9e4 <xQueueGenericSend+0xd4>
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	2b02      	cmp	r3, #2
 800e9e2:	d129      	bne.n	800ea38 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e9e4:	683a      	ldr	r2, [r7, #0]
 800e9e6:	68b9      	ldr	r1, [r7, #8]
 800e9e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e9ea:	f000 fc9a 	bl	800f322 <prvCopyDataToQueue>
 800e9ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e9f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d010      	beq.n	800ea1a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e9f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e9fa:	3324      	adds	r3, #36	; 0x24
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f001 fa1d 	bl	800fe3c <xTaskRemoveFromEventList>
 800ea02:	4603      	mov	r3, r0
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d013      	beq.n	800ea30 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ea08:	4b3f      	ldr	r3, [pc, #252]	; (800eb08 <xQueueGenericSend+0x1f8>)
 800ea0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea0e:	601a      	str	r2, [r3, #0]
 800ea10:	f3bf 8f4f 	dsb	sy
 800ea14:	f3bf 8f6f 	isb	sy
 800ea18:	e00a      	b.n	800ea30 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ea1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d007      	beq.n	800ea30 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ea20:	4b39      	ldr	r3, [pc, #228]	; (800eb08 <xQueueGenericSend+0x1f8>)
 800ea22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea26:	601a      	str	r2, [r3, #0]
 800ea28:	f3bf 8f4f 	dsb	sy
 800ea2c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ea30:	f001 ff40 	bl	80108b4 <vPortExitCritical>
				return pdPASS;
 800ea34:	2301      	movs	r3, #1
 800ea36:	e063      	b.n	800eb00 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d103      	bne.n	800ea46 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ea3e:	f001 ff39 	bl	80108b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ea42:	2300      	movs	r3, #0
 800ea44:	e05c      	b.n	800eb00 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ea46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d106      	bne.n	800ea5a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ea4c:	f107 0314 	add.w	r3, r7, #20
 800ea50:	4618      	mov	r0, r3
 800ea52:	f001 fa55 	bl	800ff00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ea56:	2301      	movs	r3, #1
 800ea58:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ea5a:	f001 ff2b 	bl	80108b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ea5e:	f000 ffe3 	bl	800fa28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ea62:	f001 fef7 	bl	8010854 <vPortEnterCritical>
 800ea66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea68:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ea6c:	b25b      	sxtb	r3, r3
 800ea6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea72:	d103      	bne.n	800ea7c <xQueueGenericSend+0x16c>
 800ea74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea76:	2200      	movs	r2, #0
 800ea78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ea7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ea82:	b25b      	sxtb	r3, r3
 800ea84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ea88:	d103      	bne.n	800ea92 <xQueueGenericSend+0x182>
 800ea8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ea92:	f001 ff0f 	bl	80108b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ea96:	1d3a      	adds	r2, r7, #4
 800ea98:	f107 0314 	add.w	r3, r7, #20
 800ea9c:	4611      	mov	r1, r2
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	f001 fa44 	bl	800ff2c <xTaskCheckForTimeOut>
 800eaa4:	4603      	mov	r3, r0
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d124      	bne.n	800eaf4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800eaaa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eaac:	f000 fd31 	bl	800f512 <prvIsQueueFull>
 800eab0:	4603      	mov	r3, r0
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d018      	beq.n	800eae8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800eab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab8:	3310      	adds	r3, #16
 800eaba:	687a      	ldr	r2, [r7, #4]
 800eabc:	4611      	mov	r1, r2
 800eabe:	4618      	mov	r0, r3
 800eac0:	f001 f998 	bl	800fdf4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800eac4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eac6:	f000 fcbc 	bl	800f442 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800eaca:	f000 ffbb 	bl	800fa44 <xTaskResumeAll>
 800eace:	4603      	mov	r3, r0
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	f47f af7c 	bne.w	800e9ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ead6:	4b0c      	ldr	r3, [pc, #48]	; (800eb08 <xQueueGenericSend+0x1f8>)
 800ead8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eadc:	601a      	str	r2, [r3, #0]
 800eade:	f3bf 8f4f 	dsb	sy
 800eae2:	f3bf 8f6f 	isb	sy
 800eae6:	e772      	b.n	800e9ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800eae8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eaea:	f000 fcaa 	bl	800f442 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eaee:	f000 ffa9 	bl	800fa44 <xTaskResumeAll>
 800eaf2:	e76c      	b.n	800e9ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800eaf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eaf6:	f000 fca4 	bl	800f442 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eafa:	f000 ffa3 	bl	800fa44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800eafe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800eb00:	4618      	mov	r0, r3
 800eb02:	3738      	adds	r7, #56	; 0x38
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}
 800eb08:	e000ed04 	.word	0xe000ed04

0800eb0c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b090      	sub	sp, #64	; 0x40
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	60f8      	str	r0, [r7, #12]
 800eb14:	60b9      	str	r1, [r7, #8]
 800eb16:	607a      	str	r2, [r7, #4]
 800eb18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800eb1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d10a      	bne.n	800eb3a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800eb24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb28:	f383 8811 	msr	BASEPRI, r3
 800eb2c:	f3bf 8f6f 	isb	sy
 800eb30:	f3bf 8f4f 	dsb	sy
 800eb34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800eb36:	bf00      	nop
 800eb38:	e7fe      	b.n	800eb38 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eb3a:	68bb      	ldr	r3, [r7, #8]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d103      	bne.n	800eb48 <xQueueGenericSendFromISR+0x3c>
 800eb40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d101      	bne.n	800eb4c <xQueueGenericSendFromISR+0x40>
 800eb48:	2301      	movs	r3, #1
 800eb4a:	e000      	b.n	800eb4e <xQueueGenericSendFromISR+0x42>
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d10a      	bne.n	800eb68 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800eb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb56:	f383 8811 	msr	BASEPRI, r3
 800eb5a:	f3bf 8f6f 	isb	sy
 800eb5e:	f3bf 8f4f 	dsb	sy
 800eb62:	627b      	str	r3, [r7, #36]	; 0x24
}
 800eb64:	bf00      	nop
 800eb66:	e7fe      	b.n	800eb66 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	2b02      	cmp	r3, #2
 800eb6c:	d103      	bne.n	800eb76 <xQueueGenericSendFromISR+0x6a>
 800eb6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb72:	2b01      	cmp	r3, #1
 800eb74:	d101      	bne.n	800eb7a <xQueueGenericSendFromISR+0x6e>
 800eb76:	2301      	movs	r3, #1
 800eb78:	e000      	b.n	800eb7c <xQueueGenericSendFromISR+0x70>
 800eb7a:	2300      	movs	r3, #0
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d10a      	bne.n	800eb96 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800eb80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb84:	f383 8811 	msr	BASEPRI, r3
 800eb88:	f3bf 8f6f 	isb	sy
 800eb8c:	f3bf 8f4f 	dsb	sy
 800eb90:	623b      	str	r3, [r7, #32]
}
 800eb92:	bf00      	nop
 800eb94:	e7fe      	b.n	800eb94 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800eb96:	f001 ff3f 	bl	8010a18 <vPortValidateInterruptPriority>
	__asm volatile
 800eb9a:	f3ef 8211 	mrs	r2, BASEPRI
 800eb9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eba2:	f383 8811 	msr	BASEPRI, r3
 800eba6:	f3bf 8f6f 	isb	sy
 800ebaa:	f3bf 8f4f 	dsb	sy
 800ebae:	61fa      	str	r2, [r7, #28]
 800ebb0:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800ebb2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ebb4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ebb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ebba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	d302      	bcc.n	800ebc8 <xQueueGenericSendFromISR+0xbc>
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	2b02      	cmp	r3, #2
 800ebc6:	d12f      	bne.n	800ec28 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ebc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ebce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ebd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ebd6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ebd8:	683a      	ldr	r2, [r7, #0]
 800ebda:	68b9      	ldr	r1, [r7, #8]
 800ebdc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ebde:	f000 fba0 	bl	800f322 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ebe2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ebe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebea:	d112      	bne.n	800ec12 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ebec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d016      	beq.n	800ec22 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ebf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebf6:	3324      	adds	r3, #36	; 0x24
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f001 f91f 	bl	800fe3c <xTaskRemoveFromEventList>
 800ebfe:	4603      	mov	r3, r0
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d00e      	beq.n	800ec22 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d00b      	beq.n	800ec22 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	2201      	movs	r2, #1
 800ec0e:	601a      	str	r2, [r3, #0]
 800ec10:	e007      	b.n	800ec22 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ec12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ec16:	3301      	adds	r3, #1
 800ec18:	b2db      	uxtb	r3, r3
 800ec1a:	b25a      	sxtb	r2, r3
 800ec1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ec22:	2301      	movs	r3, #1
 800ec24:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ec26:	e001      	b.n	800ec2c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ec28:	2300      	movs	r3, #0
 800ec2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ec2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ec2e:	617b      	str	r3, [r7, #20]
	__asm volatile
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	f383 8811 	msr	BASEPRI, r3
}
 800ec36:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ec38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	3740      	adds	r7, #64	; 0x40
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}

0800ec42 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ec42:	b580      	push	{r7, lr}
 800ec44:	b08e      	sub	sp, #56	; 0x38
 800ec46:	af00      	add	r7, sp, #0
 800ec48:	6078      	str	r0, [r7, #4]
 800ec4a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ec50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d10a      	bne.n	800ec6c <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ec56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec5a:	f383 8811 	msr	BASEPRI, r3
 800ec5e:	f3bf 8f6f 	isb	sy
 800ec62:	f3bf 8f4f 	dsb	sy
 800ec66:	623b      	str	r3, [r7, #32]
}
 800ec68:	bf00      	nop
 800ec6a:	e7fe      	b.n	800ec6a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ec6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d00a      	beq.n	800ec8a <xQueueGiveFromISR+0x48>
	__asm volatile
 800ec74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec78:	f383 8811 	msr	BASEPRI, r3
 800ec7c:	f3bf 8f6f 	isb	sy
 800ec80:	f3bf 8f4f 	dsb	sy
 800ec84:	61fb      	str	r3, [r7, #28]
}
 800ec86:	bf00      	nop
 800ec88:	e7fe      	b.n	800ec88 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ec8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d103      	bne.n	800ec9a <xQueueGiveFromISR+0x58>
 800ec92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec94:	689b      	ldr	r3, [r3, #8]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d101      	bne.n	800ec9e <xQueueGiveFromISR+0x5c>
 800ec9a:	2301      	movs	r3, #1
 800ec9c:	e000      	b.n	800eca0 <xQueueGiveFromISR+0x5e>
 800ec9e:	2300      	movs	r3, #0
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	d10a      	bne.n	800ecba <xQueueGiveFromISR+0x78>
	__asm volatile
 800eca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eca8:	f383 8811 	msr	BASEPRI, r3
 800ecac:	f3bf 8f6f 	isb	sy
 800ecb0:	f3bf 8f4f 	dsb	sy
 800ecb4:	61bb      	str	r3, [r7, #24]
}
 800ecb6:	bf00      	nop
 800ecb8:	e7fe      	b.n	800ecb8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ecba:	f001 fead 	bl	8010a18 <vPortValidateInterruptPriority>
	__asm volatile
 800ecbe:	f3ef 8211 	mrs	r2, BASEPRI
 800ecc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecc6:	f383 8811 	msr	BASEPRI, r3
 800ecca:	f3bf 8f6f 	isb	sy
 800ecce:	f3bf 8f4f 	dsb	sy
 800ecd2:	617a      	str	r2, [r7, #20]
 800ecd4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ecd6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ecd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ecda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ecde:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ece0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ece2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ece4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ece6:	429a      	cmp	r2, r3
 800ece8:	d22b      	bcs.n	800ed42 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ecea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ecf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ecf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecf6:	1c5a      	adds	r2, r3, #1
 800ecf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecfa:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ecfc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ed00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed04:	d112      	bne.n	800ed2c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ed06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d016      	beq.n	800ed3c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ed0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed10:	3324      	adds	r3, #36	; 0x24
 800ed12:	4618      	mov	r0, r3
 800ed14:	f001 f892 	bl	800fe3c <xTaskRemoveFromEventList>
 800ed18:	4603      	mov	r3, r0
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d00e      	beq.n	800ed3c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d00b      	beq.n	800ed3c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	2201      	movs	r2, #1
 800ed28:	601a      	str	r2, [r3, #0]
 800ed2a:	e007      	b.n	800ed3c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ed2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed30:	3301      	adds	r3, #1
 800ed32:	b2db      	uxtb	r3, r3
 800ed34:	b25a      	sxtb	r2, r3
 800ed36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ed3c:	2301      	movs	r3, #1
 800ed3e:	637b      	str	r3, [r7, #52]	; 0x34
 800ed40:	e001      	b.n	800ed46 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ed42:	2300      	movs	r3, #0
 800ed44:	637b      	str	r3, [r7, #52]	; 0x34
 800ed46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed48:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	f383 8811 	msr	BASEPRI, r3
}
 800ed50:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ed52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ed54:	4618      	mov	r0, r3
 800ed56:	3738      	adds	r7, #56	; 0x38
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}

0800ed5c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ed5c:	b580      	push	{r7, lr}
 800ed5e:	b08c      	sub	sp, #48	; 0x30
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	60f8      	str	r0, [r7, #12]
 800ed64:	60b9      	str	r1, [r7, #8]
 800ed66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ed68:	2300      	movs	r3, #0
 800ed6a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ed70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d10a      	bne.n	800ed8c <xQueueReceive+0x30>
	__asm volatile
 800ed76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed7a:	f383 8811 	msr	BASEPRI, r3
 800ed7e:	f3bf 8f6f 	isb	sy
 800ed82:	f3bf 8f4f 	dsb	sy
 800ed86:	623b      	str	r3, [r7, #32]
}
 800ed88:	bf00      	nop
 800ed8a:	e7fe      	b.n	800ed8a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d103      	bne.n	800ed9a <xQueueReceive+0x3e>
 800ed92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	d101      	bne.n	800ed9e <xQueueReceive+0x42>
 800ed9a:	2301      	movs	r3, #1
 800ed9c:	e000      	b.n	800eda0 <xQueueReceive+0x44>
 800ed9e:	2300      	movs	r3, #0
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d10a      	bne.n	800edba <xQueueReceive+0x5e>
	__asm volatile
 800eda4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eda8:	f383 8811 	msr	BASEPRI, r3
 800edac:	f3bf 8f6f 	isb	sy
 800edb0:	f3bf 8f4f 	dsb	sy
 800edb4:	61fb      	str	r3, [r7, #28]
}
 800edb6:	bf00      	nop
 800edb8:	e7fe      	b.n	800edb8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800edba:	f001 f9ff 	bl	80101bc <xTaskGetSchedulerState>
 800edbe:	4603      	mov	r3, r0
 800edc0:	2b00      	cmp	r3, #0
 800edc2:	d102      	bne.n	800edca <xQueueReceive+0x6e>
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d101      	bne.n	800edce <xQueueReceive+0x72>
 800edca:	2301      	movs	r3, #1
 800edcc:	e000      	b.n	800edd0 <xQueueReceive+0x74>
 800edce:	2300      	movs	r3, #0
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d10a      	bne.n	800edea <xQueueReceive+0x8e>
	__asm volatile
 800edd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edd8:	f383 8811 	msr	BASEPRI, r3
 800eddc:	f3bf 8f6f 	isb	sy
 800ede0:	f3bf 8f4f 	dsb	sy
 800ede4:	61bb      	str	r3, [r7, #24]
}
 800ede6:	bf00      	nop
 800ede8:	e7fe      	b.n	800ede8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800edea:	f001 fd33 	bl	8010854 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800edee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800edf2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800edf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	d01f      	beq.n	800ee3a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800edfa:	68b9      	ldr	r1, [r7, #8]
 800edfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800edfe:	f000 fafa 	bl	800f3f6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ee02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee04:	1e5a      	subs	r2, r3, #1
 800ee06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee08:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ee0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee0c:	691b      	ldr	r3, [r3, #16]
 800ee0e:	2b00      	cmp	r3, #0
 800ee10:	d00f      	beq.n	800ee32 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ee12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee14:	3310      	adds	r3, #16
 800ee16:	4618      	mov	r0, r3
 800ee18:	f001 f810 	bl	800fe3c <xTaskRemoveFromEventList>
 800ee1c:	4603      	mov	r3, r0
 800ee1e:	2b00      	cmp	r3, #0
 800ee20:	d007      	beq.n	800ee32 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ee22:	4b3d      	ldr	r3, [pc, #244]	; (800ef18 <xQueueReceive+0x1bc>)
 800ee24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee28:	601a      	str	r2, [r3, #0]
 800ee2a:	f3bf 8f4f 	dsb	sy
 800ee2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ee32:	f001 fd3f 	bl	80108b4 <vPortExitCritical>
				return pdPASS;
 800ee36:	2301      	movs	r3, #1
 800ee38:	e069      	b.n	800ef0e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	2b00      	cmp	r3, #0
 800ee3e:	d103      	bne.n	800ee48 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ee40:	f001 fd38 	bl	80108b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ee44:	2300      	movs	r3, #0
 800ee46:	e062      	b.n	800ef0e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ee48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d106      	bne.n	800ee5c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ee4e:	f107 0310 	add.w	r3, r7, #16
 800ee52:	4618      	mov	r0, r3
 800ee54:	f001 f854 	bl	800ff00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ee58:	2301      	movs	r3, #1
 800ee5a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ee5c:	f001 fd2a 	bl	80108b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ee60:	f000 fde2 	bl	800fa28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ee64:	f001 fcf6 	bl	8010854 <vPortEnterCritical>
 800ee68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ee6e:	b25b      	sxtb	r3, r3
 800ee70:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee74:	d103      	bne.n	800ee7e <xQueueReceive+0x122>
 800ee76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee78:	2200      	movs	r2, #0
 800ee7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ee7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ee84:	b25b      	sxtb	r3, r3
 800ee86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee8a:	d103      	bne.n	800ee94 <xQueueReceive+0x138>
 800ee8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee8e:	2200      	movs	r2, #0
 800ee90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ee94:	f001 fd0e 	bl	80108b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ee98:	1d3a      	adds	r2, r7, #4
 800ee9a:	f107 0310 	add.w	r3, r7, #16
 800ee9e:	4611      	mov	r1, r2
 800eea0:	4618      	mov	r0, r3
 800eea2:	f001 f843 	bl	800ff2c <xTaskCheckForTimeOut>
 800eea6:	4603      	mov	r3, r0
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	d123      	bne.n	800eef4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eeac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eeae:	f000 fb1a 	bl	800f4e6 <prvIsQueueEmpty>
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d017      	beq.n	800eee8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800eeb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeba:	3324      	adds	r3, #36	; 0x24
 800eebc:	687a      	ldr	r2, [r7, #4]
 800eebe:	4611      	mov	r1, r2
 800eec0:	4618      	mov	r0, r3
 800eec2:	f000 ff97 	bl	800fdf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800eec6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eec8:	f000 fabb 	bl	800f442 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800eecc:	f000 fdba 	bl	800fa44 <xTaskResumeAll>
 800eed0:	4603      	mov	r3, r0
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d189      	bne.n	800edea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800eed6:	4b10      	ldr	r3, [pc, #64]	; (800ef18 <xQueueReceive+0x1bc>)
 800eed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eedc:	601a      	str	r2, [r3, #0]
 800eede:	f3bf 8f4f 	dsb	sy
 800eee2:	f3bf 8f6f 	isb	sy
 800eee6:	e780      	b.n	800edea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800eee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eeea:	f000 faaa 	bl	800f442 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eeee:	f000 fda9 	bl	800fa44 <xTaskResumeAll>
 800eef2:	e77a      	b.n	800edea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800eef4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eef6:	f000 faa4 	bl	800f442 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eefa:	f000 fda3 	bl	800fa44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eefe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef00:	f000 faf1 	bl	800f4e6 <prvIsQueueEmpty>
 800ef04:	4603      	mov	r3, r0
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	f43f af6f 	beq.w	800edea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ef0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	3730      	adds	r7, #48	; 0x30
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}
 800ef16:	bf00      	nop
 800ef18:	e000ed04 	.word	0xe000ed04

0800ef1c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b08e      	sub	sp, #56	; 0x38
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
 800ef24:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ef26:	2300      	movs	r3, #0
 800ef28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ef2e:	2300      	movs	r3, #0
 800ef30:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ef32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d10a      	bne.n	800ef4e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ef38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef3c:	f383 8811 	msr	BASEPRI, r3
 800ef40:	f3bf 8f6f 	isb	sy
 800ef44:	f3bf 8f4f 	dsb	sy
 800ef48:	623b      	str	r3, [r7, #32]
}
 800ef4a:	bf00      	nop
 800ef4c:	e7fe      	b.n	800ef4c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ef4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d00a      	beq.n	800ef6c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ef56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef5a:	f383 8811 	msr	BASEPRI, r3
 800ef5e:	f3bf 8f6f 	isb	sy
 800ef62:	f3bf 8f4f 	dsb	sy
 800ef66:	61fb      	str	r3, [r7, #28]
}
 800ef68:	bf00      	nop
 800ef6a:	e7fe      	b.n	800ef6a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ef6c:	f001 f926 	bl	80101bc <xTaskGetSchedulerState>
 800ef70:	4603      	mov	r3, r0
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d102      	bne.n	800ef7c <xQueueSemaphoreTake+0x60>
 800ef76:	683b      	ldr	r3, [r7, #0]
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d101      	bne.n	800ef80 <xQueueSemaphoreTake+0x64>
 800ef7c:	2301      	movs	r3, #1
 800ef7e:	e000      	b.n	800ef82 <xQueueSemaphoreTake+0x66>
 800ef80:	2300      	movs	r3, #0
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d10a      	bne.n	800ef9c <xQueueSemaphoreTake+0x80>
	__asm volatile
 800ef86:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef8a:	f383 8811 	msr	BASEPRI, r3
 800ef8e:	f3bf 8f6f 	isb	sy
 800ef92:	f3bf 8f4f 	dsb	sy
 800ef96:	61bb      	str	r3, [r7, #24]
}
 800ef98:	bf00      	nop
 800ef9a:	e7fe      	b.n	800ef9a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ef9c:	f001 fc5a 	bl	8010854 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800efa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800efa4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800efa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d024      	beq.n	800eff6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800efac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efae:	1e5a      	subs	r2, r3, #1
 800efb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efb2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800efb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d104      	bne.n	800efc6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800efbc:	f001 faa6 	bl	801050c <pvTaskIncrementMutexHeldCount>
 800efc0:	4602      	mov	r2, r0
 800efc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800efc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efc8:	691b      	ldr	r3, [r3, #16]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d00f      	beq.n	800efee <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800efce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800efd0:	3310      	adds	r3, #16
 800efd2:	4618      	mov	r0, r3
 800efd4:	f000 ff32 	bl	800fe3c <xTaskRemoveFromEventList>
 800efd8:	4603      	mov	r3, r0
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d007      	beq.n	800efee <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800efde:	4b54      	ldr	r3, [pc, #336]	; (800f130 <xQueueSemaphoreTake+0x214>)
 800efe0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800efe4:	601a      	str	r2, [r3, #0]
 800efe6:	f3bf 8f4f 	dsb	sy
 800efea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800efee:	f001 fc61 	bl	80108b4 <vPortExitCritical>
				return pdPASS;
 800eff2:	2301      	movs	r3, #1
 800eff4:	e097      	b.n	800f126 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eff6:	683b      	ldr	r3, [r7, #0]
 800eff8:	2b00      	cmp	r3, #0
 800effa:	d111      	bne.n	800f020 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800effc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800effe:	2b00      	cmp	r3, #0
 800f000:	d00a      	beq.n	800f018 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800f002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f006:	f383 8811 	msr	BASEPRI, r3
 800f00a:	f3bf 8f6f 	isb	sy
 800f00e:	f3bf 8f4f 	dsb	sy
 800f012:	617b      	str	r3, [r7, #20]
}
 800f014:	bf00      	nop
 800f016:	e7fe      	b.n	800f016 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f018:	f001 fc4c 	bl	80108b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f01c:	2300      	movs	r3, #0
 800f01e:	e082      	b.n	800f126 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f022:	2b00      	cmp	r3, #0
 800f024:	d106      	bne.n	800f034 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f026:	f107 030c 	add.w	r3, r7, #12
 800f02a:	4618      	mov	r0, r3
 800f02c:	f000 ff68 	bl	800ff00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f030:	2301      	movs	r3, #1
 800f032:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f034:	f001 fc3e 	bl	80108b4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f038:	f000 fcf6 	bl	800fa28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f03c:	f001 fc0a 	bl	8010854 <vPortEnterCritical>
 800f040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f042:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f046:	b25b      	sxtb	r3, r3
 800f048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f04c:	d103      	bne.n	800f056 <xQueueSemaphoreTake+0x13a>
 800f04e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f050:	2200      	movs	r2, #0
 800f052:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f058:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f05c:	b25b      	sxtb	r3, r3
 800f05e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f062:	d103      	bne.n	800f06c <xQueueSemaphoreTake+0x150>
 800f064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f066:	2200      	movs	r2, #0
 800f068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f06c:	f001 fc22 	bl	80108b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f070:	463a      	mov	r2, r7
 800f072:	f107 030c 	add.w	r3, r7, #12
 800f076:	4611      	mov	r1, r2
 800f078:	4618      	mov	r0, r3
 800f07a:	f000 ff57 	bl	800ff2c <xTaskCheckForTimeOut>
 800f07e:	4603      	mov	r3, r0
 800f080:	2b00      	cmp	r3, #0
 800f082:	d132      	bne.n	800f0ea <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f084:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f086:	f000 fa2e 	bl	800f4e6 <prvIsQueueEmpty>
 800f08a:	4603      	mov	r3, r0
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d026      	beq.n	800f0de <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f090:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f092:	681b      	ldr	r3, [r3, #0]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d109      	bne.n	800f0ac <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800f098:	f001 fbdc 	bl	8010854 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f09e:	689b      	ldr	r3, [r3, #8]
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	f001 f8a9 	bl	80101f8 <xTaskPriorityInherit>
 800f0a6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f0a8:	f001 fc04 	bl	80108b4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0ae:	3324      	adds	r3, #36	; 0x24
 800f0b0:	683a      	ldr	r2, [r7, #0]
 800f0b2:	4611      	mov	r1, r2
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	f000 fe9d 	bl	800fdf4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f0ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f0bc:	f000 f9c1 	bl	800f442 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f0c0:	f000 fcc0 	bl	800fa44 <xTaskResumeAll>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	f47f af68 	bne.w	800ef9c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800f0cc:	4b18      	ldr	r3, [pc, #96]	; (800f130 <xQueueSemaphoreTake+0x214>)
 800f0ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0d2:	601a      	str	r2, [r3, #0]
 800f0d4:	f3bf 8f4f 	dsb	sy
 800f0d8:	f3bf 8f6f 	isb	sy
 800f0dc:	e75e      	b.n	800ef9c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f0de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f0e0:	f000 f9af 	bl	800f442 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f0e4:	f000 fcae 	bl	800fa44 <xTaskResumeAll>
 800f0e8:	e758      	b.n	800ef9c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f0ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f0ec:	f000 f9a9 	bl	800f442 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f0f0:	f000 fca8 	bl	800fa44 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f0f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f0f6:	f000 f9f6 	bl	800f4e6 <prvIsQueueEmpty>
 800f0fa:	4603      	mov	r3, r0
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	f43f af4d 	beq.w	800ef9c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f104:	2b00      	cmp	r3, #0
 800f106:	d00d      	beq.n	800f124 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800f108:	f001 fba4 	bl	8010854 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f10c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f10e:	f000 f8f0 	bl	800f2f2 <prvGetDisinheritPriorityAfterTimeout>
 800f112:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f116:	689b      	ldr	r3, [r3, #8]
 800f118:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f11a:	4618      	mov	r0, r3
 800f11c:	f001 f968 	bl	80103f0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f120:	f001 fbc8 	bl	80108b4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f124:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f126:	4618      	mov	r0, r3
 800f128:	3738      	adds	r7, #56	; 0x38
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}
 800f12e:	bf00      	nop
 800f130:	e000ed04 	.word	0xe000ed04

0800f134 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b08e      	sub	sp, #56	; 0x38
 800f138:	af00      	add	r7, sp, #0
 800f13a:	60f8      	str	r0, [r7, #12]
 800f13c:	60b9      	str	r1, [r7, #8]
 800f13e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f146:	2b00      	cmp	r3, #0
 800f148:	d10a      	bne.n	800f160 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800f14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f14e:	f383 8811 	msr	BASEPRI, r3
 800f152:	f3bf 8f6f 	isb	sy
 800f156:	f3bf 8f4f 	dsb	sy
 800f15a:	623b      	str	r3, [r7, #32]
}
 800f15c:	bf00      	nop
 800f15e:	e7fe      	b.n	800f15e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f160:	68bb      	ldr	r3, [r7, #8]
 800f162:	2b00      	cmp	r3, #0
 800f164:	d103      	bne.n	800f16e <xQueueReceiveFromISR+0x3a>
 800f166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f16a:	2b00      	cmp	r3, #0
 800f16c:	d101      	bne.n	800f172 <xQueueReceiveFromISR+0x3e>
 800f16e:	2301      	movs	r3, #1
 800f170:	e000      	b.n	800f174 <xQueueReceiveFromISR+0x40>
 800f172:	2300      	movs	r3, #0
 800f174:	2b00      	cmp	r3, #0
 800f176:	d10a      	bne.n	800f18e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800f178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f17c:	f383 8811 	msr	BASEPRI, r3
 800f180:	f3bf 8f6f 	isb	sy
 800f184:	f3bf 8f4f 	dsb	sy
 800f188:	61fb      	str	r3, [r7, #28]
}
 800f18a:	bf00      	nop
 800f18c:	e7fe      	b.n	800f18c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f18e:	f001 fc43 	bl	8010a18 <vPortValidateInterruptPriority>
	__asm volatile
 800f192:	f3ef 8211 	mrs	r2, BASEPRI
 800f196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f19a:	f383 8811 	msr	BASEPRI, r3
 800f19e:	f3bf 8f6f 	isb	sy
 800f1a2:	f3bf 8f4f 	dsb	sy
 800f1a6:	61ba      	str	r2, [r7, #24]
 800f1a8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f1aa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f1ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1b2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d02f      	beq.n	800f21a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f1ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f1c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f1c4:	68b9      	ldr	r1, [r7, #8]
 800f1c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f1c8:	f000 f915 	bl	800f3f6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f1cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1ce:	1e5a      	subs	r2, r3, #1
 800f1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1d2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f1d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f1d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1dc:	d112      	bne.n	800f204 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1e0:	691b      	ldr	r3, [r3, #16]
 800f1e2:	2b00      	cmp	r3, #0
 800f1e4:	d016      	beq.n	800f214 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1e8:	3310      	adds	r3, #16
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f000 fe26 	bl	800fe3c <xTaskRemoveFromEventList>
 800f1f0:	4603      	mov	r3, r0
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	d00e      	beq.n	800f214 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	d00b      	beq.n	800f214 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2201      	movs	r2, #1
 800f200:	601a      	str	r2, [r3, #0]
 800f202:	e007      	b.n	800f214 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f204:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f208:	3301      	adds	r3, #1
 800f20a:	b2db      	uxtb	r3, r3
 800f20c:	b25a      	sxtb	r2, r3
 800f20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f210:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f214:	2301      	movs	r3, #1
 800f216:	637b      	str	r3, [r7, #52]	; 0x34
 800f218:	e001      	b.n	800f21e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800f21a:	2300      	movs	r3, #0
 800f21c:	637b      	str	r3, [r7, #52]	; 0x34
 800f21e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f220:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f222:	693b      	ldr	r3, [r7, #16]
 800f224:	f383 8811 	msr	BASEPRI, r3
}
 800f228:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f22a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f22c:	4618      	mov	r0, r3
 800f22e:	3738      	adds	r7, #56	; 0x38
 800f230:	46bd      	mov	sp, r7
 800f232:	bd80      	pop	{r7, pc}

0800f234 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800f234:	b580      	push	{r7, lr}
 800f236:	b084      	sub	sp, #16
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d10a      	bne.n	800f258 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800f242:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f246:	f383 8811 	msr	BASEPRI, r3
 800f24a:	f3bf 8f6f 	isb	sy
 800f24e:	f3bf 8f4f 	dsb	sy
 800f252:	60bb      	str	r3, [r7, #8]
}
 800f254:	bf00      	nop
 800f256:	e7fe      	b.n	800f256 <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800f258:	f001 fafc 	bl	8010854 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f260:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800f262:	f001 fb27 	bl	80108b4 <vPortExitCritical>

	return uxReturn;
 800f266:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800f268:	4618      	mov	r0, r3
 800f26a:	3710      	adds	r7, #16
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}

0800f270 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800f270:	b480      	push	{r7}
 800f272:	b087      	sub	sp, #28
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800f27c:	697b      	ldr	r3, [r7, #20]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d10a      	bne.n	800f298 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800f282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f286:	f383 8811 	msr	BASEPRI, r3
 800f28a:	f3bf 8f6f 	isb	sy
 800f28e:	f3bf 8f4f 	dsb	sy
 800f292:	60fb      	str	r3, [r7, #12]
}
 800f294:	bf00      	nop
 800f296:	e7fe      	b.n	800f296 <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800f298:	697b      	ldr	r3, [r7, #20]
 800f29a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f29c:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800f29e:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	371c      	adds	r7, #28
 800f2a4:	46bd      	mov	sp, r7
 800f2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2aa:	4770      	bx	lr

0800f2ac <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800f2ac:	b580      	push	{r7, lr}
 800f2ae:	b084      	sub	sp, #16
 800f2b0:	af00      	add	r7, sp, #0
 800f2b2:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d10a      	bne.n	800f2d4 <vQueueDelete+0x28>
	__asm volatile
 800f2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2c2:	f383 8811 	msr	BASEPRI, r3
 800f2c6:	f3bf 8f6f 	isb	sy
 800f2ca:	f3bf 8f4f 	dsb	sy
 800f2ce:	60bb      	str	r3, [r7, #8]
}
 800f2d0:	bf00      	nop
 800f2d2:	e7fe      	b.n	800f2d2 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800f2d4:	68f8      	ldr	r0, [r7, #12]
 800f2d6:	f000 f935 	bl	800f544 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800f2da:	68fb      	ldr	r3, [r7, #12]
 800f2dc:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d102      	bne.n	800f2ea <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800f2e4:	68f8      	ldr	r0, [r7, #12]
 800f2e6:	f001 fca3 	bl	8010c30 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800f2ea:	bf00      	nop
 800f2ec:	3710      	adds	r7, #16
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	bd80      	pop	{r7, pc}

0800f2f2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f2f2:	b480      	push	{r7}
 800f2f4:	b085      	sub	sp, #20
 800f2f6:	af00      	add	r7, sp, #0
 800f2f8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d006      	beq.n	800f310 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	f1c3 0307 	rsb	r3, r3, #7
 800f30c:	60fb      	str	r3, [r7, #12]
 800f30e:	e001      	b.n	800f314 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f310:	2300      	movs	r3, #0
 800f312:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f314:	68fb      	ldr	r3, [r7, #12]
	}
 800f316:	4618      	mov	r0, r3
 800f318:	3714      	adds	r7, #20
 800f31a:	46bd      	mov	sp, r7
 800f31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f320:	4770      	bx	lr

0800f322 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f322:	b580      	push	{r7, lr}
 800f324:	b086      	sub	sp, #24
 800f326:	af00      	add	r7, sp, #0
 800f328:	60f8      	str	r0, [r7, #12]
 800f32a:	60b9      	str	r1, [r7, #8]
 800f32c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f32e:	2300      	movs	r3, #0
 800f330:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f332:	68fb      	ldr	r3, [r7, #12]
 800f334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f336:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f33c:	2b00      	cmp	r3, #0
 800f33e:	d10d      	bne.n	800f35c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f340:	68fb      	ldr	r3, [r7, #12]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d14d      	bne.n	800f3e4 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	689b      	ldr	r3, [r3, #8]
 800f34c:	4618      	mov	r0, r3
 800f34e:	f000 ffc9 	bl	80102e4 <xTaskPriorityDisinherit>
 800f352:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	2200      	movs	r2, #0
 800f358:	609a      	str	r2, [r3, #8]
 800f35a:	e043      	b.n	800f3e4 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d119      	bne.n	800f396 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f362:	68fb      	ldr	r3, [r7, #12]
 800f364:	6858      	ldr	r0, [r3, #4]
 800f366:	68fb      	ldr	r3, [r7, #12]
 800f368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f36a:	461a      	mov	r2, r3
 800f36c:	68b9      	ldr	r1, [r7, #8]
 800f36e:	f00e ffc9 	bl	801e304 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f372:	68fb      	ldr	r3, [r7, #12]
 800f374:	685a      	ldr	r2, [r3, #4]
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f37a:	441a      	add	r2, r3
 800f37c:	68fb      	ldr	r3, [r7, #12]
 800f37e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	685a      	ldr	r2, [r3, #4]
 800f384:	68fb      	ldr	r3, [r7, #12]
 800f386:	689b      	ldr	r3, [r3, #8]
 800f388:	429a      	cmp	r2, r3
 800f38a:	d32b      	bcc.n	800f3e4 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f38c:	68fb      	ldr	r3, [r7, #12]
 800f38e:	681a      	ldr	r2, [r3, #0]
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	605a      	str	r2, [r3, #4]
 800f394:	e026      	b.n	800f3e4 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f396:	68fb      	ldr	r3, [r7, #12]
 800f398:	68d8      	ldr	r0, [r3, #12]
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f39e:	461a      	mov	r2, r3
 800f3a0:	68b9      	ldr	r1, [r7, #8]
 800f3a2:	f00e ffaf 	bl	801e304 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f3a6:	68fb      	ldr	r3, [r7, #12]
 800f3a8:	68da      	ldr	r2, [r3, #12]
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3ae:	425b      	negs	r3, r3
 800f3b0:	441a      	add	r2, r3
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	68da      	ldr	r2, [r3, #12]
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	429a      	cmp	r2, r3
 800f3c0:	d207      	bcs.n	800f3d2 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f3c2:	68fb      	ldr	r3, [r7, #12]
 800f3c4:	689a      	ldr	r2, [r3, #8]
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3ca:	425b      	negs	r3, r3
 800f3cc:	441a      	add	r2, r3
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	2b02      	cmp	r3, #2
 800f3d6:	d105      	bne.n	800f3e4 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f3d8:	693b      	ldr	r3, [r7, #16]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d002      	beq.n	800f3e4 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f3de:	693b      	ldr	r3, [r7, #16]
 800f3e0:	3b01      	subs	r3, #1
 800f3e2:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f3e4:	693b      	ldr	r3, [r7, #16]
 800f3e6:	1c5a      	adds	r2, r3, #1
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f3ec:	697b      	ldr	r3, [r7, #20]
}
 800f3ee:	4618      	mov	r0, r3
 800f3f0:	3718      	adds	r7, #24
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}

0800f3f6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f3f6:	b580      	push	{r7, lr}
 800f3f8:	b082      	sub	sp, #8
 800f3fa:	af00      	add	r7, sp, #0
 800f3fc:	6078      	str	r0, [r7, #4]
 800f3fe:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f404:	2b00      	cmp	r3, #0
 800f406:	d018      	beq.n	800f43a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	68da      	ldr	r2, [r3, #12]
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f410:	441a      	add	r2, r3
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	68da      	ldr	r2, [r3, #12]
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	689b      	ldr	r3, [r3, #8]
 800f41e:	429a      	cmp	r2, r3
 800f420:	d303      	bcc.n	800f42a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	681a      	ldr	r2, [r3, #0]
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	68d9      	ldr	r1, [r3, #12]
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f432:	461a      	mov	r2, r3
 800f434:	6838      	ldr	r0, [r7, #0]
 800f436:	f00e ff65 	bl	801e304 <memcpy>
	}
}
 800f43a:	bf00      	nop
 800f43c:	3708      	adds	r7, #8
 800f43e:	46bd      	mov	sp, r7
 800f440:	bd80      	pop	{r7, pc}

0800f442 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f442:	b580      	push	{r7, lr}
 800f444:	b084      	sub	sp, #16
 800f446:	af00      	add	r7, sp, #0
 800f448:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f44a:	f001 fa03 	bl	8010854 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f454:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f456:	e011      	b.n	800f47c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d012      	beq.n	800f486 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	3324      	adds	r3, #36	; 0x24
 800f464:	4618      	mov	r0, r3
 800f466:	f000 fce9 	bl	800fe3c <xTaskRemoveFromEventList>
 800f46a:	4603      	mov	r3, r0
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d001      	beq.n	800f474 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f470:	f000 fdbe 	bl	800fff0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f474:	7bfb      	ldrb	r3, [r7, #15]
 800f476:	3b01      	subs	r3, #1
 800f478:	b2db      	uxtb	r3, r3
 800f47a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f47c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f480:	2b00      	cmp	r3, #0
 800f482:	dce9      	bgt.n	800f458 <prvUnlockQueue+0x16>
 800f484:	e000      	b.n	800f488 <prvUnlockQueue+0x46>
					break;
 800f486:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	22ff      	movs	r2, #255	; 0xff
 800f48c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f490:	f001 fa10 	bl	80108b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f494:	f001 f9de 	bl	8010854 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f49e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f4a0:	e011      	b.n	800f4c6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	691b      	ldr	r3, [r3, #16]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d012      	beq.n	800f4d0 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	3310      	adds	r3, #16
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f000 fcc4 	bl	800fe3c <xTaskRemoveFromEventList>
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d001      	beq.n	800f4be <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f4ba:	f000 fd99 	bl	800fff0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f4be:	7bbb      	ldrb	r3, [r7, #14]
 800f4c0:	3b01      	subs	r3, #1
 800f4c2:	b2db      	uxtb	r3, r3
 800f4c4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f4c6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	dce9      	bgt.n	800f4a2 <prvUnlockQueue+0x60>
 800f4ce:	e000      	b.n	800f4d2 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f4d0:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	22ff      	movs	r2, #255	; 0xff
 800f4d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f4da:	f001 f9eb 	bl	80108b4 <vPortExitCritical>
}
 800f4de:	bf00      	nop
 800f4e0:	3710      	adds	r7, #16
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	bd80      	pop	{r7, pc}

0800f4e6 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f4e6:	b580      	push	{r7, lr}
 800f4e8:	b084      	sub	sp, #16
 800f4ea:	af00      	add	r7, sp, #0
 800f4ec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f4ee:	f001 f9b1 	bl	8010854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f4f2:	687b      	ldr	r3, [r7, #4]
 800f4f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d102      	bne.n	800f500 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f4fa:	2301      	movs	r3, #1
 800f4fc:	60fb      	str	r3, [r7, #12]
 800f4fe:	e001      	b.n	800f504 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f500:	2300      	movs	r3, #0
 800f502:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f504:	f001 f9d6 	bl	80108b4 <vPortExitCritical>

	return xReturn;
 800f508:	68fb      	ldr	r3, [r7, #12]
}
 800f50a:	4618      	mov	r0, r3
 800f50c:	3710      	adds	r7, #16
 800f50e:	46bd      	mov	sp, r7
 800f510:	bd80      	pop	{r7, pc}

0800f512 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f512:	b580      	push	{r7, lr}
 800f514:	b084      	sub	sp, #16
 800f516:	af00      	add	r7, sp, #0
 800f518:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f51a:	f001 f99b 	bl	8010854 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f526:	429a      	cmp	r2, r3
 800f528:	d102      	bne.n	800f530 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f52a:	2301      	movs	r3, #1
 800f52c:	60fb      	str	r3, [r7, #12]
 800f52e:	e001      	b.n	800f534 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f530:	2300      	movs	r3, #0
 800f532:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f534:	f001 f9be 	bl	80108b4 <vPortExitCritical>

	return xReturn;
 800f538:	68fb      	ldr	r3, [r7, #12]
}
 800f53a:	4618      	mov	r0, r3
 800f53c:	3710      	adds	r7, #16
 800f53e:	46bd      	mov	sp, r7
 800f540:	bd80      	pop	{r7, pc}
	...

0800f544 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f544:	b480      	push	{r7}
 800f546:	b085      	sub	sp, #20
 800f548:	af00      	add	r7, sp, #0
 800f54a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f54c:	2300      	movs	r3, #0
 800f54e:	60fb      	str	r3, [r7, #12]
 800f550:	e016      	b.n	800f580 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f552:	4a10      	ldr	r2, [pc, #64]	; (800f594 <vQueueUnregisterQueue+0x50>)
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	00db      	lsls	r3, r3, #3
 800f558:	4413      	add	r3, r2
 800f55a:	685b      	ldr	r3, [r3, #4]
 800f55c:	687a      	ldr	r2, [r7, #4]
 800f55e:	429a      	cmp	r2, r3
 800f560:	d10b      	bne.n	800f57a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f562:	4a0c      	ldr	r2, [pc, #48]	; (800f594 <vQueueUnregisterQueue+0x50>)
 800f564:	68fb      	ldr	r3, [r7, #12]
 800f566:	2100      	movs	r1, #0
 800f568:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f56c:	4a09      	ldr	r2, [pc, #36]	; (800f594 <vQueueUnregisterQueue+0x50>)
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	00db      	lsls	r3, r3, #3
 800f572:	4413      	add	r3, r2
 800f574:	2200      	movs	r2, #0
 800f576:	605a      	str	r2, [r3, #4]
				break;
 800f578:	e006      	b.n	800f588 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	3301      	adds	r3, #1
 800f57e:	60fb      	str	r3, [r7, #12]
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	2b07      	cmp	r3, #7
 800f584:	d9e5      	bls.n	800f552 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f586:	bf00      	nop
 800f588:	bf00      	nop
 800f58a:	3714      	adds	r7, #20
 800f58c:	46bd      	mov	sp, r7
 800f58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f592:	4770      	bx	lr
 800f594:	2000aa18 	.word	0x2000aa18

0800f598 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f598:	b580      	push	{r7, lr}
 800f59a:	b08e      	sub	sp, #56	; 0x38
 800f59c:	af04      	add	r7, sp, #16
 800f59e:	60f8      	str	r0, [r7, #12]
 800f5a0:	60b9      	str	r1, [r7, #8]
 800f5a2:	607a      	str	r2, [r7, #4]
 800f5a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f5a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d10a      	bne.n	800f5c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800f5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5b0:	f383 8811 	msr	BASEPRI, r3
 800f5b4:	f3bf 8f6f 	isb	sy
 800f5b8:	f3bf 8f4f 	dsb	sy
 800f5bc:	623b      	str	r3, [r7, #32]
}
 800f5be:	bf00      	nop
 800f5c0:	e7fe      	b.n	800f5c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d10a      	bne.n	800f5de <xTaskCreateStatic+0x46>
	__asm volatile
 800f5c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5cc:	f383 8811 	msr	BASEPRI, r3
 800f5d0:	f3bf 8f6f 	isb	sy
 800f5d4:	f3bf 8f4f 	dsb	sy
 800f5d8:	61fb      	str	r3, [r7, #28]
}
 800f5da:	bf00      	nop
 800f5dc:	e7fe      	b.n	800f5dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f5de:	23b4      	movs	r3, #180	; 0xb4
 800f5e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f5e2:	693b      	ldr	r3, [r7, #16]
 800f5e4:	2bb4      	cmp	r3, #180	; 0xb4
 800f5e6:	d00a      	beq.n	800f5fe <xTaskCreateStatic+0x66>
	__asm volatile
 800f5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ec:	f383 8811 	msr	BASEPRI, r3
 800f5f0:	f3bf 8f6f 	isb	sy
 800f5f4:	f3bf 8f4f 	dsb	sy
 800f5f8:	61bb      	str	r3, [r7, #24]
}
 800f5fa:	bf00      	nop
 800f5fc:	e7fe      	b.n	800f5fc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f5fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f602:	2b00      	cmp	r3, #0
 800f604:	d01e      	beq.n	800f644 <xTaskCreateStatic+0xac>
 800f606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d01b      	beq.n	800f644 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f60c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f60e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f612:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f614:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f618:	2202      	movs	r2, #2
 800f61a:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f61e:	2300      	movs	r3, #0
 800f620:	9303      	str	r3, [sp, #12]
 800f622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f624:	9302      	str	r3, [sp, #8]
 800f626:	f107 0314 	add.w	r3, r7, #20
 800f62a:	9301      	str	r3, [sp, #4]
 800f62c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f62e:	9300      	str	r3, [sp, #0]
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	687a      	ldr	r2, [r7, #4]
 800f634:	68b9      	ldr	r1, [r7, #8]
 800f636:	68f8      	ldr	r0, [r7, #12]
 800f638:	f000 f850 	bl	800f6dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f63c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f63e:	f000 f8eb 	bl	800f818 <prvAddNewTaskToReadyList>
 800f642:	e001      	b.n	800f648 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f644:	2300      	movs	r3, #0
 800f646:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f648:	697b      	ldr	r3, [r7, #20]
	}
 800f64a:	4618      	mov	r0, r3
 800f64c:	3728      	adds	r7, #40	; 0x28
 800f64e:	46bd      	mov	sp, r7
 800f650:	bd80      	pop	{r7, pc}

0800f652 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f652:	b580      	push	{r7, lr}
 800f654:	b08c      	sub	sp, #48	; 0x30
 800f656:	af04      	add	r7, sp, #16
 800f658:	60f8      	str	r0, [r7, #12]
 800f65a:	60b9      	str	r1, [r7, #8]
 800f65c:	603b      	str	r3, [r7, #0]
 800f65e:	4613      	mov	r3, r2
 800f660:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f662:	88fb      	ldrh	r3, [r7, #6]
 800f664:	009b      	lsls	r3, r3, #2
 800f666:	4618      	mov	r0, r3
 800f668:	f001 fa16 	bl	8010a98 <pvPortMalloc>
 800f66c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f66e:	697b      	ldr	r3, [r7, #20]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d00e      	beq.n	800f692 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f674:	20b4      	movs	r0, #180	; 0xb4
 800f676:	f001 fa0f 	bl	8010a98 <pvPortMalloc>
 800f67a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f67c:	69fb      	ldr	r3, [r7, #28]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d003      	beq.n	800f68a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f682:	69fb      	ldr	r3, [r7, #28]
 800f684:	697a      	ldr	r2, [r7, #20]
 800f686:	631a      	str	r2, [r3, #48]	; 0x30
 800f688:	e005      	b.n	800f696 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f68a:	6978      	ldr	r0, [r7, #20]
 800f68c:	f001 fad0 	bl	8010c30 <vPortFree>
 800f690:	e001      	b.n	800f696 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f692:	2300      	movs	r3, #0
 800f694:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f696:	69fb      	ldr	r3, [r7, #28]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d017      	beq.n	800f6cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f69c:	69fb      	ldr	r3, [r7, #28]
 800f69e:	2200      	movs	r2, #0
 800f6a0:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f6a4:	88fa      	ldrh	r2, [r7, #6]
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	9303      	str	r3, [sp, #12]
 800f6aa:	69fb      	ldr	r3, [r7, #28]
 800f6ac:	9302      	str	r3, [sp, #8]
 800f6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6b0:	9301      	str	r3, [sp, #4]
 800f6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f6b4:	9300      	str	r3, [sp, #0]
 800f6b6:	683b      	ldr	r3, [r7, #0]
 800f6b8:	68b9      	ldr	r1, [r7, #8]
 800f6ba:	68f8      	ldr	r0, [r7, #12]
 800f6bc:	f000 f80e 	bl	800f6dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f6c0:	69f8      	ldr	r0, [r7, #28]
 800f6c2:	f000 f8a9 	bl	800f818 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f6c6:	2301      	movs	r3, #1
 800f6c8:	61bb      	str	r3, [r7, #24]
 800f6ca:	e002      	b.n	800f6d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f6cc:	f04f 33ff 	mov.w	r3, #4294967295
 800f6d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f6d2:	69bb      	ldr	r3, [r7, #24]
	}
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	3720      	adds	r7, #32
 800f6d8:	46bd      	mov	sp, r7
 800f6da:	bd80      	pop	{r7, pc}

0800f6dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b088      	sub	sp, #32
 800f6e0:	af00      	add	r7, sp, #0
 800f6e2:	60f8      	str	r0, [r7, #12]
 800f6e4:	60b9      	str	r1, [r7, #8]
 800f6e6:	607a      	str	r2, [r7, #4]
 800f6e8:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f6f4:	3b01      	subs	r3, #1
 800f6f6:	009b      	lsls	r3, r3, #2
 800f6f8:	4413      	add	r3, r2
 800f6fa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f6fc:	69bb      	ldr	r3, [r7, #24]
 800f6fe:	f023 0307 	bic.w	r3, r3, #7
 800f702:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f704:	69bb      	ldr	r3, [r7, #24]
 800f706:	f003 0307 	and.w	r3, r3, #7
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d00a      	beq.n	800f724 <prvInitialiseNewTask+0x48>
	__asm volatile
 800f70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f712:	f383 8811 	msr	BASEPRI, r3
 800f716:	f3bf 8f6f 	isb	sy
 800f71a:	f3bf 8f4f 	dsb	sy
 800f71e:	617b      	str	r3, [r7, #20]
}
 800f720:	bf00      	nop
 800f722:	e7fe      	b.n	800f722 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f724:	68bb      	ldr	r3, [r7, #8]
 800f726:	2b00      	cmp	r3, #0
 800f728:	d01f      	beq.n	800f76a <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f72a:	2300      	movs	r3, #0
 800f72c:	61fb      	str	r3, [r7, #28]
 800f72e:	e012      	b.n	800f756 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f730:	68ba      	ldr	r2, [r7, #8]
 800f732:	69fb      	ldr	r3, [r7, #28]
 800f734:	4413      	add	r3, r2
 800f736:	7819      	ldrb	r1, [r3, #0]
 800f738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f73a:	69fb      	ldr	r3, [r7, #28]
 800f73c:	4413      	add	r3, r2
 800f73e:	3334      	adds	r3, #52	; 0x34
 800f740:	460a      	mov	r2, r1
 800f742:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f744:	68ba      	ldr	r2, [r7, #8]
 800f746:	69fb      	ldr	r3, [r7, #28]
 800f748:	4413      	add	r3, r2
 800f74a:	781b      	ldrb	r3, [r3, #0]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d006      	beq.n	800f75e <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f750:	69fb      	ldr	r3, [r7, #28]
 800f752:	3301      	adds	r3, #1
 800f754:	61fb      	str	r3, [r7, #28]
 800f756:	69fb      	ldr	r3, [r7, #28]
 800f758:	2b0f      	cmp	r3, #15
 800f75a:	d9e9      	bls.n	800f730 <prvInitialiseNewTask+0x54>
 800f75c:	e000      	b.n	800f760 <prvInitialiseNewTask+0x84>
			{
				break;
 800f75e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f762:	2200      	movs	r2, #0
 800f764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f768:	e003      	b.n	800f772 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f76c:	2200      	movs	r2, #0
 800f76e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f772:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f774:	2b06      	cmp	r3, #6
 800f776:	d901      	bls.n	800f77c <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f778:	2306      	movs	r3, #6
 800f77a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f77c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f77e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f780:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f784:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f786:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800f788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f78a:	2200      	movs	r2, #0
 800f78c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f78e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f790:	3304      	adds	r3, #4
 800f792:	4618      	mov	r0, r3
 800f794:	f7fe fea2 	bl	800e4dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f79a:	3318      	adds	r3, #24
 800f79c:	4618      	mov	r0, r3
 800f79e:	f7fe fe9d 	bl	800e4dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f7a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7a6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7aa:	f1c3 0207 	rsb	r2, r3, #7
 800f7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7b0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f7b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f7b6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c2:	2200      	movs	r2, #0
 800f7c4:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7ca:	334c      	adds	r3, #76	; 0x4c
 800f7cc:	2260      	movs	r2, #96	; 0x60
 800f7ce:	2100      	movs	r1, #0
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	f00e fdbf 	bl	801e354 <memset>
 800f7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7d8:	4a0c      	ldr	r2, [pc, #48]	; (800f80c <prvInitialiseNewTask+0x130>)
 800f7da:	651a      	str	r2, [r3, #80]	; 0x50
 800f7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7de:	4a0c      	ldr	r2, [pc, #48]	; (800f810 <prvInitialiseNewTask+0x134>)
 800f7e0:	655a      	str	r2, [r3, #84]	; 0x54
 800f7e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7e4:	4a0b      	ldr	r2, [pc, #44]	; (800f814 <prvInitialiseNewTask+0x138>)
 800f7e6:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f7e8:	683a      	ldr	r2, [r7, #0]
 800f7ea:	68f9      	ldr	r1, [r7, #12]
 800f7ec:	69b8      	ldr	r0, [r7, #24]
 800f7ee:	f000 ff07 	bl	8010600 <pxPortInitialiseStack>
 800f7f2:	4602      	mov	r2, r0
 800f7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7f6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7fa:	2b00      	cmp	r3, #0
 800f7fc:	d002      	beq.n	800f804 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f7fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f802:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f804:	bf00      	nop
 800f806:	3720      	adds	r7, #32
 800f808:	46bd      	mov	sp, r7
 800f80a:	bd80      	pop	{r7, pc}
 800f80c:	08027060 	.word	0x08027060
 800f810:	08027080 	.word	0x08027080
 800f814:	08027040 	.word	0x08027040

0800f818 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f818:	b580      	push	{r7, lr}
 800f81a:	b082      	sub	sp, #8
 800f81c:	af00      	add	r7, sp, #0
 800f81e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f820:	f001 f818 	bl	8010854 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f824:	4b2a      	ldr	r3, [pc, #168]	; (800f8d0 <prvAddNewTaskToReadyList+0xb8>)
 800f826:	681b      	ldr	r3, [r3, #0]
 800f828:	3301      	adds	r3, #1
 800f82a:	4a29      	ldr	r2, [pc, #164]	; (800f8d0 <prvAddNewTaskToReadyList+0xb8>)
 800f82c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f82e:	4b29      	ldr	r3, [pc, #164]	; (800f8d4 <prvAddNewTaskToReadyList+0xbc>)
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d109      	bne.n	800f84a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f836:	4a27      	ldr	r2, [pc, #156]	; (800f8d4 <prvAddNewTaskToReadyList+0xbc>)
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f83c:	4b24      	ldr	r3, [pc, #144]	; (800f8d0 <prvAddNewTaskToReadyList+0xb8>)
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	2b01      	cmp	r3, #1
 800f842:	d110      	bne.n	800f866 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f844:	f000 fbf8 	bl	8010038 <prvInitialiseTaskLists>
 800f848:	e00d      	b.n	800f866 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f84a:	4b23      	ldr	r3, [pc, #140]	; (800f8d8 <prvAddNewTaskToReadyList+0xc0>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d109      	bne.n	800f866 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f852:	4b20      	ldr	r3, [pc, #128]	; (800f8d4 <prvAddNewTaskToReadyList+0xbc>)
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f85c:	429a      	cmp	r2, r3
 800f85e:	d802      	bhi.n	800f866 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f860:	4a1c      	ldr	r2, [pc, #112]	; (800f8d4 <prvAddNewTaskToReadyList+0xbc>)
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f866:	4b1d      	ldr	r3, [pc, #116]	; (800f8dc <prvAddNewTaskToReadyList+0xc4>)
 800f868:	681b      	ldr	r3, [r3, #0]
 800f86a:	3301      	adds	r3, #1
 800f86c:	4a1b      	ldr	r2, [pc, #108]	; (800f8dc <prvAddNewTaskToReadyList+0xc4>)
 800f86e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f874:	2201      	movs	r2, #1
 800f876:	409a      	lsls	r2, r3
 800f878:	4b19      	ldr	r3, [pc, #100]	; (800f8e0 <prvAddNewTaskToReadyList+0xc8>)
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	4313      	orrs	r3, r2
 800f87e:	4a18      	ldr	r2, [pc, #96]	; (800f8e0 <prvAddNewTaskToReadyList+0xc8>)
 800f880:	6013      	str	r3, [r2, #0]
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f886:	4613      	mov	r3, r2
 800f888:	009b      	lsls	r3, r3, #2
 800f88a:	4413      	add	r3, r2
 800f88c:	009b      	lsls	r3, r3, #2
 800f88e:	4a15      	ldr	r2, [pc, #84]	; (800f8e4 <prvAddNewTaskToReadyList+0xcc>)
 800f890:	441a      	add	r2, r3
 800f892:	687b      	ldr	r3, [r7, #4]
 800f894:	3304      	adds	r3, #4
 800f896:	4619      	mov	r1, r3
 800f898:	4610      	mov	r0, r2
 800f89a:	f7fe fe2c 	bl	800e4f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f89e:	f001 f809 	bl	80108b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f8a2:	4b0d      	ldr	r3, [pc, #52]	; (800f8d8 <prvAddNewTaskToReadyList+0xc0>)
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d00e      	beq.n	800f8c8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f8aa:	4b0a      	ldr	r3, [pc, #40]	; (800f8d4 <prvAddNewTaskToReadyList+0xbc>)
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8b4:	429a      	cmp	r2, r3
 800f8b6:	d207      	bcs.n	800f8c8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f8b8:	4b0b      	ldr	r3, [pc, #44]	; (800f8e8 <prvAddNewTaskToReadyList+0xd0>)
 800f8ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8be:	601a      	str	r2, [r3, #0]
 800f8c0:	f3bf 8f4f 	dsb	sy
 800f8c4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f8c8:	bf00      	nop
 800f8ca:	3708      	adds	r7, #8
 800f8cc:	46bd      	mov	sp, r7
 800f8ce:	bd80      	pop	{r7, pc}
 800f8d0:	20000a5c 	.word	0x20000a5c
 800f8d4:	2000095c 	.word	0x2000095c
 800f8d8:	20000a68 	.word	0x20000a68
 800f8dc:	20000a78 	.word	0x20000a78
 800f8e0:	20000a64 	.word	0x20000a64
 800f8e4:	20000960 	.word	0x20000960
 800f8e8:	e000ed04 	.word	0xe000ed04

0800f8ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b084      	sub	sp, #16
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f8f4:	2300      	movs	r3, #0
 800f8f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d017      	beq.n	800f92e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f8fe:	4b13      	ldr	r3, [pc, #76]	; (800f94c <vTaskDelay+0x60>)
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	2b00      	cmp	r3, #0
 800f904:	d00a      	beq.n	800f91c <vTaskDelay+0x30>
	__asm volatile
 800f906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f90a:	f383 8811 	msr	BASEPRI, r3
 800f90e:	f3bf 8f6f 	isb	sy
 800f912:	f3bf 8f4f 	dsb	sy
 800f916:	60bb      	str	r3, [r7, #8]
}
 800f918:	bf00      	nop
 800f91a:	e7fe      	b.n	800f91a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800f91c:	f000 f884 	bl	800fa28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f920:	2100      	movs	r1, #0
 800f922:	6878      	ldr	r0, [r7, #4]
 800f924:	f000 fe06 	bl	8010534 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f928:	f000 f88c 	bl	800fa44 <xTaskResumeAll>
 800f92c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f92e:	68fb      	ldr	r3, [r7, #12]
 800f930:	2b00      	cmp	r3, #0
 800f932:	d107      	bne.n	800f944 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800f934:	4b06      	ldr	r3, [pc, #24]	; (800f950 <vTaskDelay+0x64>)
 800f936:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f93a:	601a      	str	r2, [r3, #0]
 800f93c:	f3bf 8f4f 	dsb	sy
 800f940:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f944:	bf00      	nop
 800f946:	3710      	adds	r7, #16
 800f948:	46bd      	mov	sp, r7
 800f94a:	bd80      	pop	{r7, pc}
 800f94c:	20000a84 	.word	0x20000a84
 800f950:	e000ed04 	.word	0xe000ed04

0800f954 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f954:	b580      	push	{r7, lr}
 800f956:	b08a      	sub	sp, #40	; 0x28
 800f958:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f95a:	2300      	movs	r3, #0
 800f95c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f95e:	2300      	movs	r3, #0
 800f960:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f962:	463a      	mov	r2, r7
 800f964:	1d39      	adds	r1, r7, #4
 800f966:	f107 0308 	add.w	r3, r7, #8
 800f96a:	4618      	mov	r0, r3
 800f96c:	f7f2 f9fc 	bl	8001d68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f970:	6839      	ldr	r1, [r7, #0]
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	68ba      	ldr	r2, [r7, #8]
 800f976:	9202      	str	r2, [sp, #8]
 800f978:	9301      	str	r3, [sp, #4]
 800f97a:	2300      	movs	r3, #0
 800f97c:	9300      	str	r3, [sp, #0]
 800f97e:	2300      	movs	r3, #0
 800f980:	460a      	mov	r2, r1
 800f982:	4921      	ldr	r1, [pc, #132]	; (800fa08 <vTaskStartScheduler+0xb4>)
 800f984:	4821      	ldr	r0, [pc, #132]	; (800fa0c <vTaskStartScheduler+0xb8>)
 800f986:	f7ff fe07 	bl	800f598 <xTaskCreateStatic>
 800f98a:	4603      	mov	r3, r0
 800f98c:	4a20      	ldr	r2, [pc, #128]	; (800fa10 <vTaskStartScheduler+0xbc>)
 800f98e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f990:	4b1f      	ldr	r3, [pc, #124]	; (800fa10 <vTaskStartScheduler+0xbc>)
 800f992:	681b      	ldr	r3, [r3, #0]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d002      	beq.n	800f99e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f998:	2301      	movs	r3, #1
 800f99a:	617b      	str	r3, [r7, #20]
 800f99c:	e001      	b.n	800f9a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f99e:	2300      	movs	r3, #0
 800f9a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f9a2:	697b      	ldr	r3, [r7, #20]
 800f9a4:	2b01      	cmp	r3, #1
 800f9a6:	d11b      	bne.n	800f9e0 <vTaskStartScheduler+0x8c>
	__asm volatile
 800f9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9ac:	f383 8811 	msr	BASEPRI, r3
 800f9b0:	f3bf 8f6f 	isb	sy
 800f9b4:	f3bf 8f4f 	dsb	sy
 800f9b8:	613b      	str	r3, [r7, #16]
}
 800f9ba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f9bc:	4b15      	ldr	r3, [pc, #84]	; (800fa14 <vTaskStartScheduler+0xc0>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	334c      	adds	r3, #76	; 0x4c
 800f9c2:	4a15      	ldr	r2, [pc, #84]	; (800fa18 <vTaskStartScheduler+0xc4>)
 800f9c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f9c6:	4b15      	ldr	r3, [pc, #84]	; (800fa1c <vTaskStartScheduler+0xc8>)
 800f9c8:	f04f 32ff 	mov.w	r2, #4294967295
 800f9cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f9ce:	4b14      	ldr	r3, [pc, #80]	; (800fa20 <vTaskStartScheduler+0xcc>)
 800f9d0:	2201      	movs	r2, #1
 800f9d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f9d4:	4b13      	ldr	r3, [pc, #76]	; (800fa24 <vTaskStartScheduler+0xd0>)
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f9da:	f000 fe99 	bl	8010710 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f9de:	e00e      	b.n	800f9fe <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f9e0:	697b      	ldr	r3, [r7, #20]
 800f9e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f9e6:	d10a      	bne.n	800f9fe <vTaskStartScheduler+0xaa>
	__asm volatile
 800f9e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9ec:	f383 8811 	msr	BASEPRI, r3
 800f9f0:	f3bf 8f6f 	isb	sy
 800f9f4:	f3bf 8f4f 	dsb	sy
 800f9f8:	60fb      	str	r3, [r7, #12]
}
 800f9fa:	bf00      	nop
 800f9fc:	e7fe      	b.n	800f9fc <vTaskStartScheduler+0xa8>
}
 800f9fe:	bf00      	nop
 800fa00:	3718      	adds	r7, #24
 800fa02:	46bd      	mov	sp, r7
 800fa04:	bd80      	pop	{r7, pc}
 800fa06:	bf00      	nop
 800fa08:	08023750 	.word	0x08023750
 800fa0c:	08010009 	.word	0x08010009
 800fa10:	20000a80 	.word	0x20000a80
 800fa14:	2000095c 	.word	0x2000095c
 800fa18:	200003b8 	.word	0x200003b8
 800fa1c:	20000a7c 	.word	0x20000a7c
 800fa20:	20000a68 	.word	0x20000a68
 800fa24:	20000a60 	.word	0x20000a60

0800fa28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fa28:	b480      	push	{r7}
 800fa2a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fa2c:	4b04      	ldr	r3, [pc, #16]	; (800fa40 <vTaskSuspendAll+0x18>)
 800fa2e:	681b      	ldr	r3, [r3, #0]
 800fa30:	3301      	adds	r3, #1
 800fa32:	4a03      	ldr	r2, [pc, #12]	; (800fa40 <vTaskSuspendAll+0x18>)
 800fa34:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fa36:	bf00      	nop
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3e:	4770      	bx	lr
 800fa40:	20000a84 	.word	0x20000a84

0800fa44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fa44:	b580      	push	{r7, lr}
 800fa46:	b084      	sub	sp, #16
 800fa48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fa52:	4b41      	ldr	r3, [pc, #260]	; (800fb58 <xTaskResumeAll+0x114>)
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	d10a      	bne.n	800fa70 <xTaskResumeAll+0x2c>
	__asm volatile
 800fa5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa5e:	f383 8811 	msr	BASEPRI, r3
 800fa62:	f3bf 8f6f 	isb	sy
 800fa66:	f3bf 8f4f 	dsb	sy
 800fa6a:	603b      	str	r3, [r7, #0]
}
 800fa6c:	bf00      	nop
 800fa6e:	e7fe      	b.n	800fa6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fa70:	f000 fef0 	bl	8010854 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fa74:	4b38      	ldr	r3, [pc, #224]	; (800fb58 <xTaskResumeAll+0x114>)
 800fa76:	681b      	ldr	r3, [r3, #0]
 800fa78:	3b01      	subs	r3, #1
 800fa7a:	4a37      	ldr	r2, [pc, #220]	; (800fb58 <xTaskResumeAll+0x114>)
 800fa7c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fa7e:	4b36      	ldr	r3, [pc, #216]	; (800fb58 <xTaskResumeAll+0x114>)
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d161      	bne.n	800fb4a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fa86:	4b35      	ldr	r3, [pc, #212]	; (800fb5c <xTaskResumeAll+0x118>)
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d05d      	beq.n	800fb4a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fa8e:	e02e      	b.n	800faee <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa90:	4b33      	ldr	r3, [pc, #204]	; (800fb60 <xTaskResumeAll+0x11c>)
 800fa92:	68db      	ldr	r3, [r3, #12]
 800fa94:	68db      	ldr	r3, [r3, #12]
 800fa96:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	3318      	adds	r3, #24
 800fa9c:	4618      	mov	r0, r3
 800fa9e:	f7fe fd87 	bl	800e5b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	3304      	adds	r3, #4
 800faa6:	4618      	mov	r0, r3
 800faa8:	f7fe fd82 	bl	800e5b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fab0:	2201      	movs	r2, #1
 800fab2:	409a      	lsls	r2, r3
 800fab4:	4b2b      	ldr	r3, [pc, #172]	; (800fb64 <xTaskResumeAll+0x120>)
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	4313      	orrs	r3, r2
 800faba:	4a2a      	ldr	r2, [pc, #168]	; (800fb64 <xTaskResumeAll+0x120>)
 800fabc:	6013      	str	r3, [r2, #0]
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fac2:	4613      	mov	r3, r2
 800fac4:	009b      	lsls	r3, r3, #2
 800fac6:	4413      	add	r3, r2
 800fac8:	009b      	lsls	r3, r3, #2
 800faca:	4a27      	ldr	r2, [pc, #156]	; (800fb68 <xTaskResumeAll+0x124>)
 800facc:	441a      	add	r2, r3
 800face:	68fb      	ldr	r3, [r7, #12]
 800fad0:	3304      	adds	r3, #4
 800fad2:	4619      	mov	r1, r3
 800fad4:	4610      	mov	r0, r2
 800fad6:	f7fe fd0e 	bl	800e4f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fade:	4b23      	ldr	r3, [pc, #140]	; (800fb6c <xTaskResumeAll+0x128>)
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fae4:	429a      	cmp	r2, r3
 800fae6:	d302      	bcc.n	800faee <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800fae8:	4b21      	ldr	r3, [pc, #132]	; (800fb70 <xTaskResumeAll+0x12c>)
 800faea:	2201      	movs	r2, #1
 800faec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800faee:	4b1c      	ldr	r3, [pc, #112]	; (800fb60 <xTaskResumeAll+0x11c>)
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	d1cc      	bne.n	800fa90 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	2b00      	cmp	r3, #0
 800fafa:	d001      	beq.n	800fb00 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fafc:	f000 fb3e 	bl	801017c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fb00:	4b1c      	ldr	r3, [pc, #112]	; (800fb74 <xTaskResumeAll+0x130>)
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d010      	beq.n	800fb2e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fb0c:	f000 f858 	bl	800fbc0 <xTaskIncrementTick>
 800fb10:	4603      	mov	r3, r0
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d002      	beq.n	800fb1c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800fb16:	4b16      	ldr	r3, [pc, #88]	; (800fb70 <xTaskResumeAll+0x12c>)
 800fb18:	2201      	movs	r2, #1
 800fb1a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	3b01      	subs	r3, #1
 800fb20:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d1f1      	bne.n	800fb0c <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800fb28:	4b12      	ldr	r3, [pc, #72]	; (800fb74 <xTaskResumeAll+0x130>)
 800fb2a:	2200      	movs	r2, #0
 800fb2c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fb2e:	4b10      	ldr	r3, [pc, #64]	; (800fb70 <xTaskResumeAll+0x12c>)
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d009      	beq.n	800fb4a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fb36:	2301      	movs	r3, #1
 800fb38:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fb3a:	4b0f      	ldr	r3, [pc, #60]	; (800fb78 <xTaskResumeAll+0x134>)
 800fb3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb40:	601a      	str	r2, [r3, #0]
 800fb42:	f3bf 8f4f 	dsb	sy
 800fb46:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fb4a:	f000 feb3 	bl	80108b4 <vPortExitCritical>

	return xAlreadyYielded;
 800fb4e:	68bb      	ldr	r3, [r7, #8]
}
 800fb50:	4618      	mov	r0, r3
 800fb52:	3710      	adds	r7, #16
 800fb54:	46bd      	mov	sp, r7
 800fb56:	bd80      	pop	{r7, pc}
 800fb58:	20000a84 	.word	0x20000a84
 800fb5c:	20000a5c 	.word	0x20000a5c
 800fb60:	20000a1c 	.word	0x20000a1c
 800fb64:	20000a64 	.word	0x20000a64
 800fb68:	20000960 	.word	0x20000960
 800fb6c:	2000095c 	.word	0x2000095c
 800fb70:	20000a70 	.word	0x20000a70
 800fb74:	20000a6c 	.word	0x20000a6c
 800fb78:	e000ed04 	.word	0xe000ed04

0800fb7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fb7c:	b480      	push	{r7}
 800fb7e:	b083      	sub	sp, #12
 800fb80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fb82:	4b05      	ldr	r3, [pc, #20]	; (800fb98 <xTaskGetTickCount+0x1c>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fb88:	687b      	ldr	r3, [r7, #4]
}
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	370c      	adds	r7, #12
 800fb8e:	46bd      	mov	sp, r7
 800fb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb94:	4770      	bx	lr
 800fb96:	bf00      	nop
 800fb98:	20000a60 	.word	0x20000a60

0800fb9c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b082      	sub	sp, #8
 800fba0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fba2:	f000 ff39 	bl	8010a18 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800fba6:	2300      	movs	r3, #0
 800fba8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800fbaa:	4b04      	ldr	r3, [pc, #16]	; (800fbbc <xTaskGetTickCountFromISR+0x20>)
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fbb0:	683b      	ldr	r3, [r7, #0]
}
 800fbb2:	4618      	mov	r0, r3
 800fbb4:	3708      	adds	r7, #8
 800fbb6:	46bd      	mov	sp, r7
 800fbb8:	bd80      	pop	{r7, pc}
 800fbba:	bf00      	nop
 800fbbc:	20000a60 	.word	0x20000a60

0800fbc0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fbc0:	b580      	push	{r7, lr}
 800fbc2:	b086      	sub	sp, #24
 800fbc4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fbca:	4b4e      	ldr	r3, [pc, #312]	; (800fd04 <xTaskIncrementTick+0x144>)
 800fbcc:	681b      	ldr	r3, [r3, #0]
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	f040 808e 	bne.w	800fcf0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fbd4:	4b4c      	ldr	r3, [pc, #304]	; (800fd08 <xTaskIncrementTick+0x148>)
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	3301      	adds	r3, #1
 800fbda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fbdc:	4a4a      	ldr	r2, [pc, #296]	; (800fd08 <xTaskIncrementTick+0x148>)
 800fbde:	693b      	ldr	r3, [r7, #16]
 800fbe0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fbe2:	693b      	ldr	r3, [r7, #16]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d120      	bne.n	800fc2a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800fbe8:	4b48      	ldr	r3, [pc, #288]	; (800fd0c <xTaskIncrementTick+0x14c>)
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d00a      	beq.n	800fc08 <xTaskIncrementTick+0x48>
	__asm volatile
 800fbf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbf6:	f383 8811 	msr	BASEPRI, r3
 800fbfa:	f3bf 8f6f 	isb	sy
 800fbfe:	f3bf 8f4f 	dsb	sy
 800fc02:	603b      	str	r3, [r7, #0]
}
 800fc04:	bf00      	nop
 800fc06:	e7fe      	b.n	800fc06 <xTaskIncrementTick+0x46>
 800fc08:	4b40      	ldr	r3, [pc, #256]	; (800fd0c <xTaskIncrementTick+0x14c>)
 800fc0a:	681b      	ldr	r3, [r3, #0]
 800fc0c:	60fb      	str	r3, [r7, #12]
 800fc0e:	4b40      	ldr	r3, [pc, #256]	; (800fd10 <xTaskIncrementTick+0x150>)
 800fc10:	681b      	ldr	r3, [r3, #0]
 800fc12:	4a3e      	ldr	r2, [pc, #248]	; (800fd0c <xTaskIncrementTick+0x14c>)
 800fc14:	6013      	str	r3, [r2, #0]
 800fc16:	4a3e      	ldr	r2, [pc, #248]	; (800fd10 <xTaskIncrementTick+0x150>)
 800fc18:	68fb      	ldr	r3, [r7, #12]
 800fc1a:	6013      	str	r3, [r2, #0]
 800fc1c:	4b3d      	ldr	r3, [pc, #244]	; (800fd14 <xTaskIncrementTick+0x154>)
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	3301      	adds	r3, #1
 800fc22:	4a3c      	ldr	r2, [pc, #240]	; (800fd14 <xTaskIncrementTick+0x154>)
 800fc24:	6013      	str	r3, [r2, #0]
 800fc26:	f000 faa9 	bl	801017c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fc2a:	4b3b      	ldr	r3, [pc, #236]	; (800fd18 <xTaskIncrementTick+0x158>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	693a      	ldr	r2, [r7, #16]
 800fc30:	429a      	cmp	r2, r3
 800fc32:	d348      	bcc.n	800fcc6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fc34:	4b35      	ldr	r3, [pc, #212]	; (800fd0c <xTaskIncrementTick+0x14c>)
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	681b      	ldr	r3, [r3, #0]
 800fc3a:	2b00      	cmp	r3, #0
 800fc3c:	d104      	bne.n	800fc48 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fc3e:	4b36      	ldr	r3, [pc, #216]	; (800fd18 <xTaskIncrementTick+0x158>)
 800fc40:	f04f 32ff 	mov.w	r2, #4294967295
 800fc44:	601a      	str	r2, [r3, #0]
					break;
 800fc46:	e03e      	b.n	800fcc6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fc48:	4b30      	ldr	r3, [pc, #192]	; (800fd0c <xTaskIncrementTick+0x14c>)
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	68db      	ldr	r3, [r3, #12]
 800fc4e:	68db      	ldr	r3, [r3, #12]
 800fc50:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fc52:	68bb      	ldr	r3, [r7, #8]
 800fc54:	685b      	ldr	r3, [r3, #4]
 800fc56:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fc58:	693a      	ldr	r2, [r7, #16]
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	429a      	cmp	r2, r3
 800fc5e:	d203      	bcs.n	800fc68 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fc60:	4a2d      	ldr	r2, [pc, #180]	; (800fd18 <xTaskIncrementTick+0x158>)
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fc66:	e02e      	b.n	800fcc6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fc68:	68bb      	ldr	r3, [r7, #8]
 800fc6a:	3304      	adds	r3, #4
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	f7fe fc9f 	bl	800e5b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fc72:	68bb      	ldr	r3, [r7, #8]
 800fc74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d004      	beq.n	800fc84 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fc7a:	68bb      	ldr	r3, [r7, #8]
 800fc7c:	3318      	adds	r3, #24
 800fc7e:	4618      	mov	r0, r3
 800fc80:	f7fe fc96 	bl	800e5b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fc84:	68bb      	ldr	r3, [r7, #8]
 800fc86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc88:	2201      	movs	r2, #1
 800fc8a:	409a      	lsls	r2, r3
 800fc8c:	4b23      	ldr	r3, [pc, #140]	; (800fd1c <xTaskIncrementTick+0x15c>)
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	4313      	orrs	r3, r2
 800fc92:	4a22      	ldr	r2, [pc, #136]	; (800fd1c <xTaskIncrementTick+0x15c>)
 800fc94:	6013      	str	r3, [r2, #0]
 800fc96:	68bb      	ldr	r3, [r7, #8]
 800fc98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc9a:	4613      	mov	r3, r2
 800fc9c:	009b      	lsls	r3, r3, #2
 800fc9e:	4413      	add	r3, r2
 800fca0:	009b      	lsls	r3, r3, #2
 800fca2:	4a1f      	ldr	r2, [pc, #124]	; (800fd20 <xTaskIncrementTick+0x160>)
 800fca4:	441a      	add	r2, r3
 800fca6:	68bb      	ldr	r3, [r7, #8]
 800fca8:	3304      	adds	r3, #4
 800fcaa:	4619      	mov	r1, r3
 800fcac:	4610      	mov	r0, r2
 800fcae:	f7fe fc22 	bl	800e4f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fcb2:	68bb      	ldr	r3, [r7, #8]
 800fcb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fcb6:	4b1b      	ldr	r3, [pc, #108]	; (800fd24 <xTaskIncrementTick+0x164>)
 800fcb8:	681b      	ldr	r3, [r3, #0]
 800fcba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fcbc:	429a      	cmp	r2, r3
 800fcbe:	d3b9      	bcc.n	800fc34 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fcc0:	2301      	movs	r3, #1
 800fcc2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fcc4:	e7b6      	b.n	800fc34 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fcc6:	4b17      	ldr	r3, [pc, #92]	; (800fd24 <xTaskIncrementTick+0x164>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fccc:	4914      	ldr	r1, [pc, #80]	; (800fd20 <xTaskIncrementTick+0x160>)
 800fcce:	4613      	mov	r3, r2
 800fcd0:	009b      	lsls	r3, r3, #2
 800fcd2:	4413      	add	r3, r2
 800fcd4:	009b      	lsls	r3, r3, #2
 800fcd6:	440b      	add	r3, r1
 800fcd8:	681b      	ldr	r3, [r3, #0]
 800fcda:	2b01      	cmp	r3, #1
 800fcdc:	d901      	bls.n	800fce2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800fcde:	2301      	movs	r3, #1
 800fce0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fce2:	4b11      	ldr	r3, [pc, #68]	; (800fd28 <xTaskIncrementTick+0x168>)
 800fce4:	681b      	ldr	r3, [r3, #0]
 800fce6:	2b00      	cmp	r3, #0
 800fce8:	d007      	beq.n	800fcfa <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800fcea:	2301      	movs	r3, #1
 800fcec:	617b      	str	r3, [r7, #20]
 800fcee:	e004      	b.n	800fcfa <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fcf0:	4b0e      	ldr	r3, [pc, #56]	; (800fd2c <xTaskIncrementTick+0x16c>)
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	3301      	adds	r3, #1
 800fcf6:	4a0d      	ldr	r2, [pc, #52]	; (800fd2c <xTaskIncrementTick+0x16c>)
 800fcf8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fcfa:	697b      	ldr	r3, [r7, #20]
}
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	3718      	adds	r7, #24
 800fd00:	46bd      	mov	sp, r7
 800fd02:	bd80      	pop	{r7, pc}
 800fd04:	20000a84 	.word	0x20000a84
 800fd08:	20000a60 	.word	0x20000a60
 800fd0c:	20000a14 	.word	0x20000a14
 800fd10:	20000a18 	.word	0x20000a18
 800fd14:	20000a74 	.word	0x20000a74
 800fd18:	20000a7c 	.word	0x20000a7c
 800fd1c:	20000a64 	.word	0x20000a64
 800fd20:	20000960 	.word	0x20000960
 800fd24:	2000095c 	.word	0x2000095c
 800fd28:	20000a70 	.word	0x20000a70
 800fd2c:	20000a6c 	.word	0x20000a6c

0800fd30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fd30:	b480      	push	{r7}
 800fd32:	b087      	sub	sp, #28
 800fd34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fd36:	4b29      	ldr	r3, [pc, #164]	; (800fddc <vTaskSwitchContext+0xac>)
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d003      	beq.n	800fd46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fd3e:	4b28      	ldr	r3, [pc, #160]	; (800fde0 <vTaskSwitchContext+0xb0>)
 800fd40:	2201      	movs	r2, #1
 800fd42:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fd44:	e044      	b.n	800fdd0 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800fd46:	4b26      	ldr	r3, [pc, #152]	; (800fde0 <vTaskSwitchContext+0xb0>)
 800fd48:	2200      	movs	r2, #0
 800fd4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd4c:	4b25      	ldr	r3, [pc, #148]	; (800fde4 <vTaskSwitchContext+0xb4>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	fab3 f383 	clz	r3, r3
 800fd58:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800fd5a:	7afb      	ldrb	r3, [r7, #11]
 800fd5c:	f1c3 031f 	rsb	r3, r3, #31
 800fd60:	617b      	str	r3, [r7, #20]
 800fd62:	4921      	ldr	r1, [pc, #132]	; (800fde8 <vTaskSwitchContext+0xb8>)
 800fd64:	697a      	ldr	r2, [r7, #20]
 800fd66:	4613      	mov	r3, r2
 800fd68:	009b      	lsls	r3, r3, #2
 800fd6a:	4413      	add	r3, r2
 800fd6c:	009b      	lsls	r3, r3, #2
 800fd6e:	440b      	add	r3, r1
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	2b00      	cmp	r3, #0
 800fd74:	d10a      	bne.n	800fd8c <vTaskSwitchContext+0x5c>
	__asm volatile
 800fd76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd7a:	f383 8811 	msr	BASEPRI, r3
 800fd7e:	f3bf 8f6f 	isb	sy
 800fd82:	f3bf 8f4f 	dsb	sy
 800fd86:	607b      	str	r3, [r7, #4]
}
 800fd88:	bf00      	nop
 800fd8a:	e7fe      	b.n	800fd8a <vTaskSwitchContext+0x5a>
 800fd8c:	697a      	ldr	r2, [r7, #20]
 800fd8e:	4613      	mov	r3, r2
 800fd90:	009b      	lsls	r3, r3, #2
 800fd92:	4413      	add	r3, r2
 800fd94:	009b      	lsls	r3, r3, #2
 800fd96:	4a14      	ldr	r2, [pc, #80]	; (800fde8 <vTaskSwitchContext+0xb8>)
 800fd98:	4413      	add	r3, r2
 800fd9a:	613b      	str	r3, [r7, #16]
 800fd9c:	693b      	ldr	r3, [r7, #16]
 800fd9e:	685b      	ldr	r3, [r3, #4]
 800fda0:	685a      	ldr	r2, [r3, #4]
 800fda2:	693b      	ldr	r3, [r7, #16]
 800fda4:	605a      	str	r2, [r3, #4]
 800fda6:	693b      	ldr	r3, [r7, #16]
 800fda8:	685a      	ldr	r2, [r3, #4]
 800fdaa:	693b      	ldr	r3, [r7, #16]
 800fdac:	3308      	adds	r3, #8
 800fdae:	429a      	cmp	r2, r3
 800fdb0:	d104      	bne.n	800fdbc <vTaskSwitchContext+0x8c>
 800fdb2:	693b      	ldr	r3, [r7, #16]
 800fdb4:	685b      	ldr	r3, [r3, #4]
 800fdb6:	685a      	ldr	r2, [r3, #4]
 800fdb8:	693b      	ldr	r3, [r7, #16]
 800fdba:	605a      	str	r2, [r3, #4]
 800fdbc:	693b      	ldr	r3, [r7, #16]
 800fdbe:	685b      	ldr	r3, [r3, #4]
 800fdc0:	68db      	ldr	r3, [r3, #12]
 800fdc2:	4a0a      	ldr	r2, [pc, #40]	; (800fdec <vTaskSwitchContext+0xbc>)
 800fdc4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800fdc6:	4b09      	ldr	r3, [pc, #36]	; (800fdec <vTaskSwitchContext+0xbc>)
 800fdc8:	681b      	ldr	r3, [r3, #0]
 800fdca:	334c      	adds	r3, #76	; 0x4c
 800fdcc:	4a08      	ldr	r2, [pc, #32]	; (800fdf0 <vTaskSwitchContext+0xc0>)
 800fdce:	6013      	str	r3, [r2, #0]
}
 800fdd0:	bf00      	nop
 800fdd2:	371c      	adds	r7, #28
 800fdd4:	46bd      	mov	sp, r7
 800fdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdda:	4770      	bx	lr
 800fddc:	20000a84 	.word	0x20000a84
 800fde0:	20000a70 	.word	0x20000a70
 800fde4:	20000a64 	.word	0x20000a64
 800fde8:	20000960 	.word	0x20000960
 800fdec:	2000095c 	.word	0x2000095c
 800fdf0:	200003b8 	.word	0x200003b8

0800fdf4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b084      	sub	sp, #16
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
 800fdfc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	2b00      	cmp	r3, #0
 800fe02:	d10a      	bne.n	800fe1a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fe04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe08:	f383 8811 	msr	BASEPRI, r3
 800fe0c:	f3bf 8f6f 	isb	sy
 800fe10:	f3bf 8f4f 	dsb	sy
 800fe14:	60fb      	str	r3, [r7, #12]
}
 800fe16:	bf00      	nop
 800fe18:	e7fe      	b.n	800fe18 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fe1a:	4b07      	ldr	r3, [pc, #28]	; (800fe38 <vTaskPlaceOnEventList+0x44>)
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	3318      	adds	r3, #24
 800fe20:	4619      	mov	r1, r3
 800fe22:	6878      	ldr	r0, [r7, #4]
 800fe24:	f7fe fb8b 	bl	800e53e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fe28:	2101      	movs	r1, #1
 800fe2a:	6838      	ldr	r0, [r7, #0]
 800fe2c:	f000 fb82 	bl	8010534 <prvAddCurrentTaskToDelayedList>
}
 800fe30:	bf00      	nop
 800fe32:	3710      	adds	r7, #16
 800fe34:	46bd      	mov	sp, r7
 800fe36:	bd80      	pop	{r7, pc}
 800fe38:	2000095c 	.word	0x2000095c

0800fe3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800fe3c:	b580      	push	{r7, lr}
 800fe3e:	b086      	sub	sp, #24
 800fe40:	af00      	add	r7, sp, #0
 800fe42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	68db      	ldr	r3, [r3, #12]
 800fe48:	68db      	ldr	r3, [r3, #12]
 800fe4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fe4c:	693b      	ldr	r3, [r7, #16]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d10a      	bne.n	800fe68 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800fe52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe56:	f383 8811 	msr	BASEPRI, r3
 800fe5a:	f3bf 8f6f 	isb	sy
 800fe5e:	f3bf 8f4f 	dsb	sy
 800fe62:	60fb      	str	r3, [r7, #12]
}
 800fe64:	bf00      	nop
 800fe66:	e7fe      	b.n	800fe66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fe68:	693b      	ldr	r3, [r7, #16]
 800fe6a:	3318      	adds	r3, #24
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	f7fe fb9f 	bl	800e5b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fe72:	4b1d      	ldr	r3, [pc, #116]	; (800fee8 <xTaskRemoveFromEventList+0xac>)
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d11c      	bne.n	800feb4 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800fe7a:	693b      	ldr	r3, [r7, #16]
 800fe7c:	3304      	adds	r3, #4
 800fe7e:	4618      	mov	r0, r3
 800fe80:	f7fe fb96 	bl	800e5b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800fe84:	693b      	ldr	r3, [r7, #16]
 800fe86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe88:	2201      	movs	r2, #1
 800fe8a:	409a      	lsls	r2, r3
 800fe8c:	4b17      	ldr	r3, [pc, #92]	; (800feec <xTaskRemoveFromEventList+0xb0>)
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	4313      	orrs	r3, r2
 800fe92:	4a16      	ldr	r2, [pc, #88]	; (800feec <xTaskRemoveFromEventList+0xb0>)
 800fe94:	6013      	str	r3, [r2, #0]
 800fe96:	693b      	ldr	r3, [r7, #16]
 800fe98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe9a:	4613      	mov	r3, r2
 800fe9c:	009b      	lsls	r3, r3, #2
 800fe9e:	4413      	add	r3, r2
 800fea0:	009b      	lsls	r3, r3, #2
 800fea2:	4a13      	ldr	r2, [pc, #76]	; (800fef0 <xTaskRemoveFromEventList+0xb4>)
 800fea4:	441a      	add	r2, r3
 800fea6:	693b      	ldr	r3, [r7, #16]
 800fea8:	3304      	adds	r3, #4
 800feaa:	4619      	mov	r1, r3
 800feac:	4610      	mov	r0, r2
 800feae:	f7fe fb22 	bl	800e4f6 <vListInsertEnd>
 800feb2:	e005      	b.n	800fec0 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800feb4:	693b      	ldr	r3, [r7, #16]
 800feb6:	3318      	adds	r3, #24
 800feb8:	4619      	mov	r1, r3
 800feba:	480e      	ldr	r0, [pc, #56]	; (800fef4 <xTaskRemoveFromEventList+0xb8>)
 800febc:	f7fe fb1b 	bl	800e4f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fec0:	693b      	ldr	r3, [r7, #16]
 800fec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fec4:	4b0c      	ldr	r3, [pc, #48]	; (800fef8 <xTaskRemoveFromEventList+0xbc>)
 800fec6:	681b      	ldr	r3, [r3, #0]
 800fec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800feca:	429a      	cmp	r2, r3
 800fecc:	d905      	bls.n	800feda <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fece:	2301      	movs	r3, #1
 800fed0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fed2:	4b0a      	ldr	r3, [pc, #40]	; (800fefc <xTaskRemoveFromEventList+0xc0>)
 800fed4:	2201      	movs	r2, #1
 800fed6:	601a      	str	r2, [r3, #0]
 800fed8:	e001      	b.n	800fede <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800feda:	2300      	movs	r3, #0
 800fedc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fede:	697b      	ldr	r3, [r7, #20]
}
 800fee0:	4618      	mov	r0, r3
 800fee2:	3718      	adds	r7, #24
 800fee4:	46bd      	mov	sp, r7
 800fee6:	bd80      	pop	{r7, pc}
 800fee8:	20000a84 	.word	0x20000a84
 800feec:	20000a64 	.word	0x20000a64
 800fef0:	20000960 	.word	0x20000960
 800fef4:	20000a1c 	.word	0x20000a1c
 800fef8:	2000095c 	.word	0x2000095c
 800fefc:	20000a70 	.word	0x20000a70

0800ff00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ff00:	b480      	push	{r7}
 800ff02:	b083      	sub	sp, #12
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ff08:	4b06      	ldr	r3, [pc, #24]	; (800ff24 <vTaskInternalSetTimeOutState+0x24>)
 800ff0a:	681a      	ldr	r2, [r3, #0]
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ff10:	4b05      	ldr	r3, [pc, #20]	; (800ff28 <vTaskInternalSetTimeOutState+0x28>)
 800ff12:	681a      	ldr	r2, [r3, #0]
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	605a      	str	r2, [r3, #4]
}
 800ff18:	bf00      	nop
 800ff1a:	370c      	adds	r7, #12
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff22:	4770      	bx	lr
 800ff24:	20000a74 	.word	0x20000a74
 800ff28:	20000a60 	.word	0x20000a60

0800ff2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ff2c:	b580      	push	{r7, lr}
 800ff2e:	b088      	sub	sp, #32
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
 800ff34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d10a      	bne.n	800ff52 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ff3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff40:	f383 8811 	msr	BASEPRI, r3
 800ff44:	f3bf 8f6f 	isb	sy
 800ff48:	f3bf 8f4f 	dsb	sy
 800ff4c:	613b      	str	r3, [r7, #16]
}
 800ff4e:	bf00      	nop
 800ff50:	e7fe      	b.n	800ff50 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ff52:	683b      	ldr	r3, [r7, #0]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d10a      	bne.n	800ff6e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ff58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff5c:	f383 8811 	msr	BASEPRI, r3
 800ff60:	f3bf 8f6f 	isb	sy
 800ff64:	f3bf 8f4f 	dsb	sy
 800ff68:	60fb      	str	r3, [r7, #12]
}
 800ff6a:	bf00      	nop
 800ff6c:	e7fe      	b.n	800ff6c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ff6e:	f000 fc71 	bl	8010854 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ff72:	4b1d      	ldr	r3, [pc, #116]	; (800ffe8 <xTaskCheckForTimeOut+0xbc>)
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	685b      	ldr	r3, [r3, #4]
 800ff7c:	69ba      	ldr	r2, [r7, #24]
 800ff7e:	1ad3      	subs	r3, r2, r3
 800ff80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ff82:	683b      	ldr	r3, [r7, #0]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ff8a:	d102      	bne.n	800ff92 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	61fb      	str	r3, [r7, #28]
 800ff90:	e023      	b.n	800ffda <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	681a      	ldr	r2, [r3, #0]
 800ff96:	4b15      	ldr	r3, [pc, #84]	; (800ffec <xTaskCheckForTimeOut+0xc0>)
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d007      	beq.n	800ffae <xTaskCheckForTimeOut+0x82>
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	685b      	ldr	r3, [r3, #4]
 800ffa2:	69ba      	ldr	r2, [r7, #24]
 800ffa4:	429a      	cmp	r2, r3
 800ffa6:	d302      	bcc.n	800ffae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ffa8:	2301      	movs	r3, #1
 800ffaa:	61fb      	str	r3, [r7, #28]
 800ffac:	e015      	b.n	800ffda <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ffae:	683b      	ldr	r3, [r7, #0]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	697a      	ldr	r2, [r7, #20]
 800ffb4:	429a      	cmp	r2, r3
 800ffb6:	d20b      	bcs.n	800ffd0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ffb8:	683b      	ldr	r3, [r7, #0]
 800ffba:	681a      	ldr	r2, [r3, #0]
 800ffbc:	697b      	ldr	r3, [r7, #20]
 800ffbe:	1ad2      	subs	r2, r2, r3
 800ffc0:	683b      	ldr	r3, [r7, #0]
 800ffc2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ffc4:	6878      	ldr	r0, [r7, #4]
 800ffc6:	f7ff ff9b 	bl	800ff00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ffca:	2300      	movs	r3, #0
 800ffcc:	61fb      	str	r3, [r7, #28]
 800ffce:	e004      	b.n	800ffda <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800ffd0:	683b      	ldr	r3, [r7, #0]
 800ffd2:	2200      	movs	r2, #0
 800ffd4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ffd6:	2301      	movs	r3, #1
 800ffd8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ffda:	f000 fc6b 	bl	80108b4 <vPortExitCritical>

	return xReturn;
 800ffde:	69fb      	ldr	r3, [r7, #28]
}
 800ffe0:	4618      	mov	r0, r3
 800ffe2:	3720      	adds	r7, #32
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	bd80      	pop	{r7, pc}
 800ffe8:	20000a60 	.word	0x20000a60
 800ffec:	20000a74 	.word	0x20000a74

0800fff0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fff0:	b480      	push	{r7}
 800fff2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fff4:	4b03      	ldr	r3, [pc, #12]	; (8010004 <vTaskMissedYield+0x14>)
 800fff6:	2201      	movs	r2, #1
 800fff8:	601a      	str	r2, [r3, #0]
}
 800fffa:	bf00      	nop
 800fffc:	46bd      	mov	sp, r7
 800fffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010002:	4770      	bx	lr
 8010004:	20000a70 	.word	0x20000a70

08010008 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b082      	sub	sp, #8
 801000c:	af00      	add	r7, sp, #0
 801000e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010010:	f000 f852 	bl	80100b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010014:	4b06      	ldr	r3, [pc, #24]	; (8010030 <prvIdleTask+0x28>)
 8010016:	681b      	ldr	r3, [r3, #0]
 8010018:	2b01      	cmp	r3, #1
 801001a:	d9f9      	bls.n	8010010 <prvIdleTask+0x8>
			{
				taskYIELD();
 801001c:	4b05      	ldr	r3, [pc, #20]	; (8010034 <prvIdleTask+0x2c>)
 801001e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010022:	601a      	str	r2, [r3, #0]
 8010024:	f3bf 8f4f 	dsb	sy
 8010028:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801002c:	e7f0      	b.n	8010010 <prvIdleTask+0x8>
 801002e:	bf00      	nop
 8010030:	20000960 	.word	0x20000960
 8010034:	e000ed04 	.word	0xe000ed04

08010038 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b082      	sub	sp, #8
 801003c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801003e:	2300      	movs	r3, #0
 8010040:	607b      	str	r3, [r7, #4]
 8010042:	e00c      	b.n	801005e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010044:	687a      	ldr	r2, [r7, #4]
 8010046:	4613      	mov	r3, r2
 8010048:	009b      	lsls	r3, r3, #2
 801004a:	4413      	add	r3, r2
 801004c:	009b      	lsls	r3, r3, #2
 801004e:	4a12      	ldr	r2, [pc, #72]	; (8010098 <prvInitialiseTaskLists+0x60>)
 8010050:	4413      	add	r3, r2
 8010052:	4618      	mov	r0, r3
 8010054:	f7fe fa22 	bl	800e49c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	3301      	adds	r3, #1
 801005c:	607b      	str	r3, [r7, #4]
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	2b06      	cmp	r3, #6
 8010062:	d9ef      	bls.n	8010044 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010064:	480d      	ldr	r0, [pc, #52]	; (801009c <prvInitialiseTaskLists+0x64>)
 8010066:	f7fe fa19 	bl	800e49c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801006a:	480d      	ldr	r0, [pc, #52]	; (80100a0 <prvInitialiseTaskLists+0x68>)
 801006c:	f7fe fa16 	bl	800e49c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010070:	480c      	ldr	r0, [pc, #48]	; (80100a4 <prvInitialiseTaskLists+0x6c>)
 8010072:	f7fe fa13 	bl	800e49c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010076:	480c      	ldr	r0, [pc, #48]	; (80100a8 <prvInitialiseTaskLists+0x70>)
 8010078:	f7fe fa10 	bl	800e49c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801007c:	480b      	ldr	r0, [pc, #44]	; (80100ac <prvInitialiseTaskLists+0x74>)
 801007e:	f7fe fa0d 	bl	800e49c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010082:	4b0b      	ldr	r3, [pc, #44]	; (80100b0 <prvInitialiseTaskLists+0x78>)
 8010084:	4a05      	ldr	r2, [pc, #20]	; (801009c <prvInitialiseTaskLists+0x64>)
 8010086:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010088:	4b0a      	ldr	r3, [pc, #40]	; (80100b4 <prvInitialiseTaskLists+0x7c>)
 801008a:	4a05      	ldr	r2, [pc, #20]	; (80100a0 <prvInitialiseTaskLists+0x68>)
 801008c:	601a      	str	r2, [r3, #0]
}
 801008e:	bf00      	nop
 8010090:	3708      	adds	r7, #8
 8010092:	46bd      	mov	sp, r7
 8010094:	bd80      	pop	{r7, pc}
 8010096:	bf00      	nop
 8010098:	20000960 	.word	0x20000960
 801009c:	200009ec 	.word	0x200009ec
 80100a0:	20000a00 	.word	0x20000a00
 80100a4:	20000a1c 	.word	0x20000a1c
 80100a8:	20000a30 	.word	0x20000a30
 80100ac:	20000a48 	.word	0x20000a48
 80100b0:	20000a14 	.word	0x20000a14
 80100b4:	20000a18 	.word	0x20000a18

080100b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80100b8:	b580      	push	{r7, lr}
 80100ba:	b082      	sub	sp, #8
 80100bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80100be:	e019      	b.n	80100f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80100c0:	f000 fbc8 	bl	8010854 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80100c4:	4b10      	ldr	r3, [pc, #64]	; (8010108 <prvCheckTasksWaitingTermination+0x50>)
 80100c6:	68db      	ldr	r3, [r3, #12]
 80100c8:	68db      	ldr	r3, [r3, #12]
 80100ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80100cc:	687b      	ldr	r3, [r7, #4]
 80100ce:	3304      	adds	r3, #4
 80100d0:	4618      	mov	r0, r3
 80100d2:	f7fe fa6d 	bl	800e5b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80100d6:	4b0d      	ldr	r3, [pc, #52]	; (801010c <prvCheckTasksWaitingTermination+0x54>)
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	3b01      	subs	r3, #1
 80100dc:	4a0b      	ldr	r2, [pc, #44]	; (801010c <prvCheckTasksWaitingTermination+0x54>)
 80100de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80100e0:	4b0b      	ldr	r3, [pc, #44]	; (8010110 <prvCheckTasksWaitingTermination+0x58>)
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	3b01      	subs	r3, #1
 80100e6:	4a0a      	ldr	r2, [pc, #40]	; (8010110 <prvCheckTasksWaitingTermination+0x58>)
 80100e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80100ea:	f000 fbe3 	bl	80108b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80100ee:	6878      	ldr	r0, [r7, #4]
 80100f0:	f000 f810 	bl	8010114 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80100f4:	4b06      	ldr	r3, [pc, #24]	; (8010110 <prvCheckTasksWaitingTermination+0x58>)
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d1e1      	bne.n	80100c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80100fc:	bf00      	nop
 80100fe:	bf00      	nop
 8010100:	3708      	adds	r7, #8
 8010102:	46bd      	mov	sp, r7
 8010104:	bd80      	pop	{r7, pc}
 8010106:	bf00      	nop
 8010108:	20000a30 	.word	0x20000a30
 801010c:	20000a5c 	.word	0x20000a5c
 8010110:	20000a44 	.word	0x20000a44

08010114 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010114:	b580      	push	{r7, lr}
 8010116:	b084      	sub	sp, #16
 8010118:	af00      	add	r7, sp, #0
 801011a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	334c      	adds	r3, #76	; 0x4c
 8010120:	4618      	mov	r0, r3
 8010122:	f00f f8a9 	bl	801f278 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 801012c:	2b00      	cmp	r3, #0
 801012e:	d108      	bne.n	8010142 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010134:	4618      	mov	r0, r3
 8010136:	f000 fd7b 	bl	8010c30 <vPortFree>
				vPortFree( pxTCB );
 801013a:	6878      	ldr	r0, [r7, #4]
 801013c:	f000 fd78 	bl	8010c30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010140:	e018      	b.n	8010174 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8010148:	2b01      	cmp	r3, #1
 801014a:	d103      	bne.n	8010154 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801014c:	6878      	ldr	r0, [r7, #4]
 801014e:	f000 fd6f 	bl	8010c30 <vPortFree>
	}
 8010152:	e00f      	b.n	8010174 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 801015a:	2b02      	cmp	r3, #2
 801015c:	d00a      	beq.n	8010174 <prvDeleteTCB+0x60>
	__asm volatile
 801015e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010162:	f383 8811 	msr	BASEPRI, r3
 8010166:	f3bf 8f6f 	isb	sy
 801016a:	f3bf 8f4f 	dsb	sy
 801016e:	60fb      	str	r3, [r7, #12]
}
 8010170:	bf00      	nop
 8010172:	e7fe      	b.n	8010172 <prvDeleteTCB+0x5e>
	}
 8010174:	bf00      	nop
 8010176:	3710      	adds	r7, #16
 8010178:	46bd      	mov	sp, r7
 801017a:	bd80      	pop	{r7, pc}

0801017c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801017c:	b480      	push	{r7}
 801017e:	b083      	sub	sp, #12
 8010180:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010182:	4b0c      	ldr	r3, [pc, #48]	; (80101b4 <prvResetNextTaskUnblockTime+0x38>)
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	2b00      	cmp	r3, #0
 801018a:	d104      	bne.n	8010196 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801018c:	4b0a      	ldr	r3, [pc, #40]	; (80101b8 <prvResetNextTaskUnblockTime+0x3c>)
 801018e:	f04f 32ff 	mov.w	r2, #4294967295
 8010192:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010194:	e008      	b.n	80101a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010196:	4b07      	ldr	r3, [pc, #28]	; (80101b4 <prvResetNextTaskUnblockTime+0x38>)
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	68db      	ldr	r3, [r3, #12]
 801019c:	68db      	ldr	r3, [r3, #12]
 801019e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	685b      	ldr	r3, [r3, #4]
 80101a4:	4a04      	ldr	r2, [pc, #16]	; (80101b8 <prvResetNextTaskUnblockTime+0x3c>)
 80101a6:	6013      	str	r3, [r2, #0]
}
 80101a8:	bf00      	nop
 80101aa:	370c      	adds	r7, #12
 80101ac:	46bd      	mov	sp, r7
 80101ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101b2:	4770      	bx	lr
 80101b4:	20000a14 	.word	0x20000a14
 80101b8:	20000a7c 	.word	0x20000a7c

080101bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80101bc:	b480      	push	{r7}
 80101be:	b083      	sub	sp, #12
 80101c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80101c2:	4b0b      	ldr	r3, [pc, #44]	; (80101f0 <xTaskGetSchedulerState+0x34>)
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d102      	bne.n	80101d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80101ca:	2301      	movs	r3, #1
 80101cc:	607b      	str	r3, [r7, #4]
 80101ce:	e008      	b.n	80101e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80101d0:	4b08      	ldr	r3, [pc, #32]	; (80101f4 <xTaskGetSchedulerState+0x38>)
 80101d2:	681b      	ldr	r3, [r3, #0]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d102      	bne.n	80101de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80101d8:	2302      	movs	r3, #2
 80101da:	607b      	str	r3, [r7, #4]
 80101dc:	e001      	b.n	80101e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80101de:	2300      	movs	r3, #0
 80101e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80101e2:	687b      	ldr	r3, [r7, #4]
	}
 80101e4:	4618      	mov	r0, r3
 80101e6:	370c      	adds	r7, #12
 80101e8:	46bd      	mov	sp, r7
 80101ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101ee:	4770      	bx	lr
 80101f0:	20000a68 	.word	0x20000a68
 80101f4:	20000a84 	.word	0x20000a84

080101f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80101f8:	b580      	push	{r7, lr}
 80101fa:	b084      	sub	sp, #16
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010204:	2300      	movs	r3, #0
 8010206:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	2b00      	cmp	r3, #0
 801020c:	d05e      	beq.n	80102cc <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801020e:	68bb      	ldr	r3, [r7, #8]
 8010210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010212:	4b31      	ldr	r3, [pc, #196]	; (80102d8 <xTaskPriorityInherit+0xe0>)
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010218:	429a      	cmp	r2, r3
 801021a:	d24e      	bcs.n	80102ba <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801021c:	68bb      	ldr	r3, [r7, #8]
 801021e:	699b      	ldr	r3, [r3, #24]
 8010220:	2b00      	cmp	r3, #0
 8010222:	db06      	blt.n	8010232 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010224:	4b2c      	ldr	r3, [pc, #176]	; (80102d8 <xTaskPriorityInherit+0xe0>)
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801022a:	f1c3 0207 	rsb	r2, r3, #7
 801022e:	68bb      	ldr	r3, [r7, #8]
 8010230:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010232:	68bb      	ldr	r3, [r7, #8]
 8010234:	6959      	ldr	r1, [r3, #20]
 8010236:	68bb      	ldr	r3, [r7, #8]
 8010238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801023a:	4613      	mov	r3, r2
 801023c:	009b      	lsls	r3, r3, #2
 801023e:	4413      	add	r3, r2
 8010240:	009b      	lsls	r3, r3, #2
 8010242:	4a26      	ldr	r2, [pc, #152]	; (80102dc <xTaskPriorityInherit+0xe4>)
 8010244:	4413      	add	r3, r2
 8010246:	4299      	cmp	r1, r3
 8010248:	d12f      	bne.n	80102aa <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801024a:	68bb      	ldr	r3, [r7, #8]
 801024c:	3304      	adds	r3, #4
 801024e:	4618      	mov	r0, r3
 8010250:	f7fe f9ae 	bl	800e5b0 <uxListRemove>
 8010254:	4603      	mov	r3, r0
 8010256:	2b00      	cmp	r3, #0
 8010258:	d10a      	bne.n	8010270 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 801025a:	68bb      	ldr	r3, [r7, #8]
 801025c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801025e:	2201      	movs	r2, #1
 8010260:	fa02 f303 	lsl.w	r3, r2, r3
 8010264:	43da      	mvns	r2, r3
 8010266:	4b1e      	ldr	r3, [pc, #120]	; (80102e0 <xTaskPriorityInherit+0xe8>)
 8010268:	681b      	ldr	r3, [r3, #0]
 801026a:	4013      	ands	r3, r2
 801026c:	4a1c      	ldr	r2, [pc, #112]	; (80102e0 <xTaskPriorityInherit+0xe8>)
 801026e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010270:	4b19      	ldr	r3, [pc, #100]	; (80102d8 <xTaskPriorityInherit+0xe0>)
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010276:	68bb      	ldr	r3, [r7, #8]
 8010278:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 801027a:	68bb      	ldr	r3, [r7, #8]
 801027c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801027e:	2201      	movs	r2, #1
 8010280:	409a      	lsls	r2, r3
 8010282:	4b17      	ldr	r3, [pc, #92]	; (80102e0 <xTaskPriorityInherit+0xe8>)
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	4313      	orrs	r3, r2
 8010288:	4a15      	ldr	r2, [pc, #84]	; (80102e0 <xTaskPriorityInherit+0xe8>)
 801028a:	6013      	str	r3, [r2, #0]
 801028c:	68bb      	ldr	r3, [r7, #8]
 801028e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010290:	4613      	mov	r3, r2
 8010292:	009b      	lsls	r3, r3, #2
 8010294:	4413      	add	r3, r2
 8010296:	009b      	lsls	r3, r3, #2
 8010298:	4a10      	ldr	r2, [pc, #64]	; (80102dc <xTaskPriorityInherit+0xe4>)
 801029a:	441a      	add	r2, r3
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	3304      	adds	r3, #4
 80102a0:	4619      	mov	r1, r3
 80102a2:	4610      	mov	r0, r2
 80102a4:	f7fe f927 	bl	800e4f6 <vListInsertEnd>
 80102a8:	e004      	b.n	80102b4 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80102aa:	4b0b      	ldr	r3, [pc, #44]	; (80102d8 <xTaskPriorityInherit+0xe0>)
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102b0:	68bb      	ldr	r3, [r7, #8]
 80102b2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80102b4:	2301      	movs	r3, #1
 80102b6:	60fb      	str	r3, [r7, #12]
 80102b8:	e008      	b.n	80102cc <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80102ba:	68bb      	ldr	r3, [r7, #8]
 80102bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80102be:	4b06      	ldr	r3, [pc, #24]	; (80102d8 <xTaskPriorityInherit+0xe0>)
 80102c0:	681b      	ldr	r3, [r3, #0]
 80102c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102c4:	429a      	cmp	r2, r3
 80102c6:	d201      	bcs.n	80102cc <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80102c8:	2301      	movs	r3, #1
 80102ca:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80102cc:	68fb      	ldr	r3, [r7, #12]
	}
 80102ce:	4618      	mov	r0, r3
 80102d0:	3710      	adds	r7, #16
 80102d2:	46bd      	mov	sp, r7
 80102d4:	bd80      	pop	{r7, pc}
 80102d6:	bf00      	nop
 80102d8:	2000095c 	.word	0x2000095c
 80102dc:	20000960 	.word	0x20000960
 80102e0:	20000a64 	.word	0x20000a64

080102e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80102e4:	b580      	push	{r7, lr}
 80102e6:	b086      	sub	sp, #24
 80102e8:	af00      	add	r7, sp, #0
 80102ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80102f0:	2300      	movs	r3, #0
 80102f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d06e      	beq.n	80103d8 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80102fa:	4b3a      	ldr	r3, [pc, #232]	; (80103e4 <xTaskPriorityDisinherit+0x100>)
 80102fc:	681b      	ldr	r3, [r3, #0]
 80102fe:	693a      	ldr	r2, [r7, #16]
 8010300:	429a      	cmp	r2, r3
 8010302:	d00a      	beq.n	801031a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8010304:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010308:	f383 8811 	msr	BASEPRI, r3
 801030c:	f3bf 8f6f 	isb	sy
 8010310:	f3bf 8f4f 	dsb	sy
 8010314:	60fb      	str	r3, [r7, #12]
}
 8010316:	bf00      	nop
 8010318:	e7fe      	b.n	8010318 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801031a:	693b      	ldr	r3, [r7, #16]
 801031c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801031e:	2b00      	cmp	r3, #0
 8010320:	d10a      	bne.n	8010338 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8010322:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010326:	f383 8811 	msr	BASEPRI, r3
 801032a:	f3bf 8f6f 	isb	sy
 801032e:	f3bf 8f4f 	dsb	sy
 8010332:	60bb      	str	r3, [r7, #8]
}
 8010334:	bf00      	nop
 8010336:	e7fe      	b.n	8010336 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010338:	693b      	ldr	r3, [r7, #16]
 801033a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801033c:	1e5a      	subs	r2, r3, #1
 801033e:	693b      	ldr	r3, [r7, #16]
 8010340:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010342:	693b      	ldr	r3, [r7, #16]
 8010344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010346:	693b      	ldr	r3, [r7, #16]
 8010348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801034a:	429a      	cmp	r2, r3
 801034c:	d044      	beq.n	80103d8 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801034e:	693b      	ldr	r3, [r7, #16]
 8010350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010352:	2b00      	cmp	r3, #0
 8010354:	d140      	bne.n	80103d8 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010356:	693b      	ldr	r3, [r7, #16]
 8010358:	3304      	adds	r3, #4
 801035a:	4618      	mov	r0, r3
 801035c:	f7fe f928 	bl	800e5b0 <uxListRemove>
 8010360:	4603      	mov	r3, r0
 8010362:	2b00      	cmp	r3, #0
 8010364:	d115      	bne.n	8010392 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010366:	693b      	ldr	r3, [r7, #16]
 8010368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801036a:	491f      	ldr	r1, [pc, #124]	; (80103e8 <xTaskPriorityDisinherit+0x104>)
 801036c:	4613      	mov	r3, r2
 801036e:	009b      	lsls	r3, r3, #2
 8010370:	4413      	add	r3, r2
 8010372:	009b      	lsls	r3, r3, #2
 8010374:	440b      	add	r3, r1
 8010376:	681b      	ldr	r3, [r3, #0]
 8010378:	2b00      	cmp	r3, #0
 801037a:	d10a      	bne.n	8010392 <xTaskPriorityDisinherit+0xae>
 801037c:	693b      	ldr	r3, [r7, #16]
 801037e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010380:	2201      	movs	r2, #1
 8010382:	fa02 f303 	lsl.w	r3, r2, r3
 8010386:	43da      	mvns	r2, r3
 8010388:	4b18      	ldr	r3, [pc, #96]	; (80103ec <xTaskPriorityDisinherit+0x108>)
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	4013      	ands	r3, r2
 801038e:	4a17      	ldr	r2, [pc, #92]	; (80103ec <xTaskPriorityDisinherit+0x108>)
 8010390:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010392:	693b      	ldr	r3, [r7, #16]
 8010394:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010396:	693b      	ldr	r3, [r7, #16]
 8010398:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801039a:	693b      	ldr	r3, [r7, #16]
 801039c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801039e:	f1c3 0207 	rsb	r2, r3, #7
 80103a2:	693b      	ldr	r3, [r7, #16]
 80103a4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80103a6:	693b      	ldr	r3, [r7, #16]
 80103a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103aa:	2201      	movs	r2, #1
 80103ac:	409a      	lsls	r2, r3
 80103ae:	4b0f      	ldr	r3, [pc, #60]	; (80103ec <xTaskPriorityDisinherit+0x108>)
 80103b0:	681b      	ldr	r3, [r3, #0]
 80103b2:	4313      	orrs	r3, r2
 80103b4:	4a0d      	ldr	r2, [pc, #52]	; (80103ec <xTaskPriorityDisinherit+0x108>)
 80103b6:	6013      	str	r3, [r2, #0]
 80103b8:	693b      	ldr	r3, [r7, #16]
 80103ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103bc:	4613      	mov	r3, r2
 80103be:	009b      	lsls	r3, r3, #2
 80103c0:	4413      	add	r3, r2
 80103c2:	009b      	lsls	r3, r3, #2
 80103c4:	4a08      	ldr	r2, [pc, #32]	; (80103e8 <xTaskPriorityDisinherit+0x104>)
 80103c6:	441a      	add	r2, r3
 80103c8:	693b      	ldr	r3, [r7, #16]
 80103ca:	3304      	adds	r3, #4
 80103cc:	4619      	mov	r1, r3
 80103ce:	4610      	mov	r0, r2
 80103d0:	f7fe f891 	bl	800e4f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80103d4:	2301      	movs	r3, #1
 80103d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80103d8:	697b      	ldr	r3, [r7, #20]
	}
 80103da:	4618      	mov	r0, r3
 80103dc:	3718      	adds	r7, #24
 80103de:	46bd      	mov	sp, r7
 80103e0:	bd80      	pop	{r7, pc}
 80103e2:	bf00      	nop
 80103e4:	2000095c 	.word	0x2000095c
 80103e8:	20000960 	.word	0x20000960
 80103ec:	20000a64 	.word	0x20000a64

080103f0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80103f0:	b580      	push	{r7, lr}
 80103f2:	b088      	sub	sp, #32
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
 80103f8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80103fe:	2301      	movs	r3, #1
 8010400:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	2b00      	cmp	r3, #0
 8010406:	d077      	beq.n	80104f8 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010408:	69bb      	ldr	r3, [r7, #24]
 801040a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801040c:	2b00      	cmp	r3, #0
 801040e:	d10a      	bne.n	8010426 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8010410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010414:	f383 8811 	msr	BASEPRI, r3
 8010418:	f3bf 8f6f 	isb	sy
 801041c:	f3bf 8f4f 	dsb	sy
 8010420:	60fb      	str	r3, [r7, #12]
}
 8010422:	bf00      	nop
 8010424:	e7fe      	b.n	8010424 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010426:	69bb      	ldr	r3, [r7, #24]
 8010428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801042a:	683a      	ldr	r2, [r7, #0]
 801042c:	429a      	cmp	r2, r3
 801042e:	d902      	bls.n	8010436 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010430:	683b      	ldr	r3, [r7, #0]
 8010432:	61fb      	str	r3, [r7, #28]
 8010434:	e002      	b.n	801043c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010436:	69bb      	ldr	r3, [r7, #24]
 8010438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801043a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801043c:	69bb      	ldr	r3, [r7, #24]
 801043e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010440:	69fa      	ldr	r2, [r7, #28]
 8010442:	429a      	cmp	r2, r3
 8010444:	d058      	beq.n	80104f8 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010446:	69bb      	ldr	r3, [r7, #24]
 8010448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801044a:	697a      	ldr	r2, [r7, #20]
 801044c:	429a      	cmp	r2, r3
 801044e:	d153      	bne.n	80104f8 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010450:	4b2b      	ldr	r3, [pc, #172]	; (8010500 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	69ba      	ldr	r2, [r7, #24]
 8010456:	429a      	cmp	r2, r3
 8010458:	d10a      	bne.n	8010470 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 801045a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801045e:	f383 8811 	msr	BASEPRI, r3
 8010462:	f3bf 8f6f 	isb	sy
 8010466:	f3bf 8f4f 	dsb	sy
 801046a:	60bb      	str	r3, [r7, #8]
}
 801046c:	bf00      	nop
 801046e:	e7fe      	b.n	801046e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010470:	69bb      	ldr	r3, [r7, #24]
 8010472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010474:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010476:	69bb      	ldr	r3, [r7, #24]
 8010478:	69fa      	ldr	r2, [r7, #28]
 801047a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801047c:	69bb      	ldr	r3, [r7, #24]
 801047e:	699b      	ldr	r3, [r3, #24]
 8010480:	2b00      	cmp	r3, #0
 8010482:	db04      	blt.n	801048e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010484:	69fb      	ldr	r3, [r7, #28]
 8010486:	f1c3 0207 	rsb	r2, r3, #7
 801048a:	69bb      	ldr	r3, [r7, #24]
 801048c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 801048e:	69bb      	ldr	r3, [r7, #24]
 8010490:	6959      	ldr	r1, [r3, #20]
 8010492:	693a      	ldr	r2, [r7, #16]
 8010494:	4613      	mov	r3, r2
 8010496:	009b      	lsls	r3, r3, #2
 8010498:	4413      	add	r3, r2
 801049a:	009b      	lsls	r3, r3, #2
 801049c:	4a19      	ldr	r2, [pc, #100]	; (8010504 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 801049e:	4413      	add	r3, r2
 80104a0:	4299      	cmp	r1, r3
 80104a2:	d129      	bne.n	80104f8 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80104a4:	69bb      	ldr	r3, [r7, #24]
 80104a6:	3304      	adds	r3, #4
 80104a8:	4618      	mov	r0, r3
 80104aa:	f7fe f881 	bl	800e5b0 <uxListRemove>
 80104ae:	4603      	mov	r3, r0
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	d10a      	bne.n	80104ca <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80104b4:	69bb      	ldr	r3, [r7, #24]
 80104b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104b8:	2201      	movs	r2, #1
 80104ba:	fa02 f303 	lsl.w	r3, r2, r3
 80104be:	43da      	mvns	r2, r3
 80104c0:	4b11      	ldr	r3, [pc, #68]	; (8010508 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	4013      	ands	r3, r2
 80104c6:	4a10      	ldr	r2, [pc, #64]	; (8010508 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80104c8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80104ca:	69bb      	ldr	r3, [r7, #24]
 80104cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80104ce:	2201      	movs	r2, #1
 80104d0:	409a      	lsls	r2, r3
 80104d2:	4b0d      	ldr	r3, [pc, #52]	; (8010508 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	4313      	orrs	r3, r2
 80104d8:	4a0b      	ldr	r2, [pc, #44]	; (8010508 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 80104da:	6013      	str	r3, [r2, #0]
 80104dc:	69bb      	ldr	r3, [r7, #24]
 80104de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80104e0:	4613      	mov	r3, r2
 80104e2:	009b      	lsls	r3, r3, #2
 80104e4:	4413      	add	r3, r2
 80104e6:	009b      	lsls	r3, r3, #2
 80104e8:	4a06      	ldr	r2, [pc, #24]	; (8010504 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80104ea:	441a      	add	r2, r3
 80104ec:	69bb      	ldr	r3, [r7, #24]
 80104ee:	3304      	adds	r3, #4
 80104f0:	4619      	mov	r1, r3
 80104f2:	4610      	mov	r0, r2
 80104f4:	f7fd ffff 	bl	800e4f6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80104f8:	bf00      	nop
 80104fa:	3720      	adds	r7, #32
 80104fc:	46bd      	mov	sp, r7
 80104fe:	bd80      	pop	{r7, pc}
 8010500:	2000095c 	.word	0x2000095c
 8010504:	20000960 	.word	0x20000960
 8010508:	20000a64 	.word	0x20000a64

0801050c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801050c:	b480      	push	{r7}
 801050e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010510:	4b07      	ldr	r3, [pc, #28]	; (8010530 <pvTaskIncrementMutexHeldCount+0x24>)
 8010512:	681b      	ldr	r3, [r3, #0]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d004      	beq.n	8010522 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010518:	4b05      	ldr	r3, [pc, #20]	; (8010530 <pvTaskIncrementMutexHeldCount+0x24>)
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801051e:	3201      	adds	r2, #1
 8010520:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8010522:	4b03      	ldr	r3, [pc, #12]	; (8010530 <pvTaskIncrementMutexHeldCount+0x24>)
 8010524:	681b      	ldr	r3, [r3, #0]
	}
 8010526:	4618      	mov	r0, r3
 8010528:	46bd      	mov	sp, r7
 801052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052e:	4770      	bx	lr
 8010530:	2000095c 	.word	0x2000095c

08010534 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010534:	b580      	push	{r7, lr}
 8010536:	b084      	sub	sp, #16
 8010538:	af00      	add	r7, sp, #0
 801053a:	6078      	str	r0, [r7, #4]
 801053c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801053e:	4b29      	ldr	r3, [pc, #164]	; (80105e4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8010540:	681b      	ldr	r3, [r3, #0]
 8010542:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010544:	4b28      	ldr	r3, [pc, #160]	; (80105e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010546:	681b      	ldr	r3, [r3, #0]
 8010548:	3304      	adds	r3, #4
 801054a:	4618      	mov	r0, r3
 801054c:	f7fe f830 	bl	800e5b0 <uxListRemove>
 8010550:	4603      	mov	r3, r0
 8010552:	2b00      	cmp	r3, #0
 8010554:	d10b      	bne.n	801056e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8010556:	4b24      	ldr	r3, [pc, #144]	; (80105e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801055c:	2201      	movs	r2, #1
 801055e:	fa02 f303 	lsl.w	r3, r2, r3
 8010562:	43da      	mvns	r2, r3
 8010564:	4b21      	ldr	r3, [pc, #132]	; (80105ec <prvAddCurrentTaskToDelayedList+0xb8>)
 8010566:	681b      	ldr	r3, [r3, #0]
 8010568:	4013      	ands	r3, r2
 801056a:	4a20      	ldr	r2, [pc, #128]	; (80105ec <prvAddCurrentTaskToDelayedList+0xb8>)
 801056c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010574:	d10a      	bne.n	801058c <prvAddCurrentTaskToDelayedList+0x58>
 8010576:	683b      	ldr	r3, [r7, #0]
 8010578:	2b00      	cmp	r3, #0
 801057a:	d007      	beq.n	801058c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801057c:	4b1a      	ldr	r3, [pc, #104]	; (80105e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	3304      	adds	r3, #4
 8010582:	4619      	mov	r1, r3
 8010584:	481a      	ldr	r0, [pc, #104]	; (80105f0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8010586:	f7fd ffb6 	bl	800e4f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801058a:	e026      	b.n	80105da <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801058c:	68fa      	ldr	r2, [r7, #12]
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	4413      	add	r3, r2
 8010592:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010594:	4b14      	ldr	r3, [pc, #80]	; (80105e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	68ba      	ldr	r2, [r7, #8]
 801059a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801059c:	68ba      	ldr	r2, [r7, #8]
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	429a      	cmp	r2, r3
 80105a2:	d209      	bcs.n	80105b8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80105a4:	4b13      	ldr	r3, [pc, #76]	; (80105f4 <prvAddCurrentTaskToDelayedList+0xc0>)
 80105a6:	681a      	ldr	r2, [r3, #0]
 80105a8:	4b0f      	ldr	r3, [pc, #60]	; (80105e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	3304      	adds	r3, #4
 80105ae:	4619      	mov	r1, r3
 80105b0:	4610      	mov	r0, r2
 80105b2:	f7fd ffc4 	bl	800e53e <vListInsert>
}
 80105b6:	e010      	b.n	80105da <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80105b8:	4b0f      	ldr	r3, [pc, #60]	; (80105f8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80105ba:	681a      	ldr	r2, [r3, #0]
 80105bc:	4b0a      	ldr	r3, [pc, #40]	; (80105e8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	3304      	adds	r3, #4
 80105c2:	4619      	mov	r1, r3
 80105c4:	4610      	mov	r0, r2
 80105c6:	f7fd ffba 	bl	800e53e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80105ca:	4b0c      	ldr	r3, [pc, #48]	; (80105fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	68ba      	ldr	r2, [r7, #8]
 80105d0:	429a      	cmp	r2, r3
 80105d2:	d202      	bcs.n	80105da <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80105d4:	4a09      	ldr	r2, [pc, #36]	; (80105fc <prvAddCurrentTaskToDelayedList+0xc8>)
 80105d6:	68bb      	ldr	r3, [r7, #8]
 80105d8:	6013      	str	r3, [r2, #0]
}
 80105da:	bf00      	nop
 80105dc:	3710      	adds	r7, #16
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd80      	pop	{r7, pc}
 80105e2:	bf00      	nop
 80105e4:	20000a60 	.word	0x20000a60
 80105e8:	2000095c 	.word	0x2000095c
 80105ec:	20000a64 	.word	0x20000a64
 80105f0:	20000a48 	.word	0x20000a48
 80105f4:	20000a18 	.word	0x20000a18
 80105f8:	20000a14 	.word	0x20000a14
 80105fc:	20000a7c 	.word	0x20000a7c

08010600 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010600:	b480      	push	{r7}
 8010602:	b085      	sub	sp, #20
 8010604:	af00      	add	r7, sp, #0
 8010606:	60f8      	str	r0, [r7, #12]
 8010608:	60b9      	str	r1, [r7, #8]
 801060a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801060c:	68fb      	ldr	r3, [r7, #12]
 801060e:	3b04      	subs	r3, #4
 8010610:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010618:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	3b04      	subs	r3, #4
 801061e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010620:	68bb      	ldr	r3, [r7, #8]
 8010622:	f023 0201 	bic.w	r2, r3, #1
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	3b04      	subs	r3, #4
 801062e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010630:	4a0c      	ldr	r2, [pc, #48]	; (8010664 <pxPortInitialiseStack+0x64>)
 8010632:	68fb      	ldr	r3, [r7, #12]
 8010634:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010636:	68fb      	ldr	r3, [r7, #12]
 8010638:	3b14      	subs	r3, #20
 801063a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801063c:	687a      	ldr	r2, [r7, #4]
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010642:	68fb      	ldr	r3, [r7, #12]
 8010644:	3b04      	subs	r3, #4
 8010646:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	f06f 0202 	mvn.w	r2, #2
 801064e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010650:	68fb      	ldr	r3, [r7, #12]
 8010652:	3b20      	subs	r3, #32
 8010654:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010656:	68fb      	ldr	r3, [r7, #12]
}
 8010658:	4618      	mov	r0, r3
 801065a:	3714      	adds	r7, #20
 801065c:	46bd      	mov	sp, r7
 801065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010662:	4770      	bx	lr
 8010664:	08010669 	.word	0x08010669

08010668 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010668:	b480      	push	{r7}
 801066a:	b085      	sub	sp, #20
 801066c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801066e:	2300      	movs	r3, #0
 8010670:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010672:	4b12      	ldr	r3, [pc, #72]	; (80106bc <prvTaskExitError+0x54>)
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	f1b3 3fff 	cmp.w	r3, #4294967295
 801067a:	d00a      	beq.n	8010692 <prvTaskExitError+0x2a>
	__asm volatile
 801067c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010680:	f383 8811 	msr	BASEPRI, r3
 8010684:	f3bf 8f6f 	isb	sy
 8010688:	f3bf 8f4f 	dsb	sy
 801068c:	60fb      	str	r3, [r7, #12]
}
 801068e:	bf00      	nop
 8010690:	e7fe      	b.n	8010690 <prvTaskExitError+0x28>
	__asm volatile
 8010692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010696:	f383 8811 	msr	BASEPRI, r3
 801069a:	f3bf 8f6f 	isb	sy
 801069e:	f3bf 8f4f 	dsb	sy
 80106a2:	60bb      	str	r3, [r7, #8]
}
 80106a4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80106a6:	bf00      	nop
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d0fc      	beq.n	80106a8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80106ae:	bf00      	nop
 80106b0:	bf00      	nop
 80106b2:	3714      	adds	r7, #20
 80106b4:	46bd      	mov	sp, r7
 80106b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106ba:	4770      	bx	lr
 80106bc:	200003a8 	.word	0x200003a8

080106c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80106c0:	4b07      	ldr	r3, [pc, #28]	; (80106e0 <pxCurrentTCBConst2>)
 80106c2:	6819      	ldr	r1, [r3, #0]
 80106c4:	6808      	ldr	r0, [r1, #0]
 80106c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106ca:	f380 8809 	msr	PSP, r0
 80106ce:	f3bf 8f6f 	isb	sy
 80106d2:	f04f 0000 	mov.w	r0, #0
 80106d6:	f380 8811 	msr	BASEPRI, r0
 80106da:	4770      	bx	lr
 80106dc:	f3af 8000 	nop.w

080106e0 <pxCurrentTCBConst2>:
 80106e0:	2000095c 	.word	0x2000095c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80106e4:	bf00      	nop
 80106e6:	bf00      	nop

080106e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80106e8:	4808      	ldr	r0, [pc, #32]	; (801070c <prvPortStartFirstTask+0x24>)
 80106ea:	6800      	ldr	r0, [r0, #0]
 80106ec:	6800      	ldr	r0, [r0, #0]
 80106ee:	f380 8808 	msr	MSP, r0
 80106f2:	f04f 0000 	mov.w	r0, #0
 80106f6:	f380 8814 	msr	CONTROL, r0
 80106fa:	b662      	cpsie	i
 80106fc:	b661      	cpsie	f
 80106fe:	f3bf 8f4f 	dsb	sy
 8010702:	f3bf 8f6f 	isb	sy
 8010706:	df00      	svc	0
 8010708:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801070a:	bf00      	nop
 801070c:	e000ed08 	.word	0xe000ed08

08010710 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b086      	sub	sp, #24
 8010714:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010716:	4b46      	ldr	r3, [pc, #280]	; (8010830 <xPortStartScheduler+0x120>)
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	4a46      	ldr	r2, [pc, #280]	; (8010834 <xPortStartScheduler+0x124>)
 801071c:	4293      	cmp	r3, r2
 801071e:	d10a      	bne.n	8010736 <xPortStartScheduler+0x26>
	__asm volatile
 8010720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010724:	f383 8811 	msr	BASEPRI, r3
 8010728:	f3bf 8f6f 	isb	sy
 801072c:	f3bf 8f4f 	dsb	sy
 8010730:	613b      	str	r3, [r7, #16]
}
 8010732:	bf00      	nop
 8010734:	e7fe      	b.n	8010734 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010736:	4b3e      	ldr	r3, [pc, #248]	; (8010830 <xPortStartScheduler+0x120>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	4a3f      	ldr	r2, [pc, #252]	; (8010838 <xPortStartScheduler+0x128>)
 801073c:	4293      	cmp	r3, r2
 801073e:	d10a      	bne.n	8010756 <xPortStartScheduler+0x46>
	__asm volatile
 8010740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010744:	f383 8811 	msr	BASEPRI, r3
 8010748:	f3bf 8f6f 	isb	sy
 801074c:	f3bf 8f4f 	dsb	sy
 8010750:	60fb      	str	r3, [r7, #12]
}
 8010752:	bf00      	nop
 8010754:	e7fe      	b.n	8010754 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010756:	4b39      	ldr	r3, [pc, #228]	; (801083c <xPortStartScheduler+0x12c>)
 8010758:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801075a:	697b      	ldr	r3, [r7, #20]
 801075c:	781b      	ldrb	r3, [r3, #0]
 801075e:	b2db      	uxtb	r3, r3
 8010760:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010762:	697b      	ldr	r3, [r7, #20]
 8010764:	22ff      	movs	r2, #255	; 0xff
 8010766:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010768:	697b      	ldr	r3, [r7, #20]
 801076a:	781b      	ldrb	r3, [r3, #0]
 801076c:	b2db      	uxtb	r3, r3
 801076e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010770:	78fb      	ldrb	r3, [r7, #3]
 8010772:	b2db      	uxtb	r3, r3
 8010774:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010778:	b2da      	uxtb	r2, r3
 801077a:	4b31      	ldr	r3, [pc, #196]	; (8010840 <xPortStartScheduler+0x130>)
 801077c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801077e:	4b31      	ldr	r3, [pc, #196]	; (8010844 <xPortStartScheduler+0x134>)
 8010780:	2207      	movs	r2, #7
 8010782:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010784:	e009      	b.n	801079a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010786:	4b2f      	ldr	r3, [pc, #188]	; (8010844 <xPortStartScheduler+0x134>)
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	3b01      	subs	r3, #1
 801078c:	4a2d      	ldr	r2, [pc, #180]	; (8010844 <xPortStartScheduler+0x134>)
 801078e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010790:	78fb      	ldrb	r3, [r7, #3]
 8010792:	b2db      	uxtb	r3, r3
 8010794:	005b      	lsls	r3, r3, #1
 8010796:	b2db      	uxtb	r3, r3
 8010798:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801079a:	78fb      	ldrb	r3, [r7, #3]
 801079c:	b2db      	uxtb	r3, r3
 801079e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80107a2:	2b80      	cmp	r3, #128	; 0x80
 80107a4:	d0ef      	beq.n	8010786 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80107a6:	4b27      	ldr	r3, [pc, #156]	; (8010844 <xPortStartScheduler+0x134>)
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	f1c3 0307 	rsb	r3, r3, #7
 80107ae:	2b04      	cmp	r3, #4
 80107b0:	d00a      	beq.n	80107c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80107b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107b6:	f383 8811 	msr	BASEPRI, r3
 80107ba:	f3bf 8f6f 	isb	sy
 80107be:	f3bf 8f4f 	dsb	sy
 80107c2:	60bb      	str	r3, [r7, #8]
}
 80107c4:	bf00      	nop
 80107c6:	e7fe      	b.n	80107c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80107c8:	4b1e      	ldr	r3, [pc, #120]	; (8010844 <xPortStartScheduler+0x134>)
 80107ca:	681b      	ldr	r3, [r3, #0]
 80107cc:	021b      	lsls	r3, r3, #8
 80107ce:	4a1d      	ldr	r2, [pc, #116]	; (8010844 <xPortStartScheduler+0x134>)
 80107d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80107d2:	4b1c      	ldr	r3, [pc, #112]	; (8010844 <xPortStartScheduler+0x134>)
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80107da:	4a1a      	ldr	r2, [pc, #104]	; (8010844 <xPortStartScheduler+0x134>)
 80107dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	b2da      	uxtb	r2, r3
 80107e2:	697b      	ldr	r3, [r7, #20]
 80107e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80107e6:	4b18      	ldr	r3, [pc, #96]	; (8010848 <xPortStartScheduler+0x138>)
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	4a17      	ldr	r2, [pc, #92]	; (8010848 <xPortStartScheduler+0x138>)
 80107ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80107f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80107f2:	4b15      	ldr	r3, [pc, #84]	; (8010848 <xPortStartScheduler+0x138>)
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	4a14      	ldr	r2, [pc, #80]	; (8010848 <xPortStartScheduler+0x138>)
 80107f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80107fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80107fe:	f000 f8dd 	bl	80109bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010802:	4b12      	ldr	r3, [pc, #72]	; (801084c <xPortStartScheduler+0x13c>)
 8010804:	2200      	movs	r2, #0
 8010806:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010808:	f000 f8fc 	bl	8010a04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801080c:	4b10      	ldr	r3, [pc, #64]	; (8010850 <xPortStartScheduler+0x140>)
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	4a0f      	ldr	r2, [pc, #60]	; (8010850 <xPortStartScheduler+0x140>)
 8010812:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010816:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010818:	f7ff ff66 	bl	80106e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801081c:	f7ff fa88 	bl	800fd30 <vTaskSwitchContext>
	prvTaskExitError();
 8010820:	f7ff ff22 	bl	8010668 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010824:	2300      	movs	r3, #0
}
 8010826:	4618      	mov	r0, r3
 8010828:	3718      	adds	r7, #24
 801082a:	46bd      	mov	sp, r7
 801082c:	bd80      	pop	{r7, pc}
 801082e:	bf00      	nop
 8010830:	e000ed00 	.word	0xe000ed00
 8010834:	410fc271 	.word	0x410fc271
 8010838:	410fc270 	.word	0x410fc270
 801083c:	e000e400 	.word	0xe000e400
 8010840:	20000a88 	.word	0x20000a88
 8010844:	20000a8c 	.word	0x20000a8c
 8010848:	e000ed20 	.word	0xe000ed20
 801084c:	200003a8 	.word	0x200003a8
 8010850:	e000ef34 	.word	0xe000ef34

08010854 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010854:	b480      	push	{r7}
 8010856:	b083      	sub	sp, #12
 8010858:	af00      	add	r7, sp, #0
	__asm volatile
 801085a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801085e:	f383 8811 	msr	BASEPRI, r3
 8010862:	f3bf 8f6f 	isb	sy
 8010866:	f3bf 8f4f 	dsb	sy
 801086a:	607b      	str	r3, [r7, #4]
}
 801086c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801086e:	4b0f      	ldr	r3, [pc, #60]	; (80108ac <vPortEnterCritical+0x58>)
 8010870:	681b      	ldr	r3, [r3, #0]
 8010872:	3301      	adds	r3, #1
 8010874:	4a0d      	ldr	r2, [pc, #52]	; (80108ac <vPortEnterCritical+0x58>)
 8010876:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010878:	4b0c      	ldr	r3, [pc, #48]	; (80108ac <vPortEnterCritical+0x58>)
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	2b01      	cmp	r3, #1
 801087e:	d10f      	bne.n	80108a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010880:	4b0b      	ldr	r3, [pc, #44]	; (80108b0 <vPortEnterCritical+0x5c>)
 8010882:	681b      	ldr	r3, [r3, #0]
 8010884:	b2db      	uxtb	r3, r3
 8010886:	2b00      	cmp	r3, #0
 8010888:	d00a      	beq.n	80108a0 <vPortEnterCritical+0x4c>
	__asm volatile
 801088a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801088e:	f383 8811 	msr	BASEPRI, r3
 8010892:	f3bf 8f6f 	isb	sy
 8010896:	f3bf 8f4f 	dsb	sy
 801089a:	603b      	str	r3, [r7, #0]
}
 801089c:	bf00      	nop
 801089e:	e7fe      	b.n	801089e <vPortEnterCritical+0x4a>
	}
}
 80108a0:	bf00      	nop
 80108a2:	370c      	adds	r7, #12
 80108a4:	46bd      	mov	sp, r7
 80108a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108aa:	4770      	bx	lr
 80108ac:	200003a8 	.word	0x200003a8
 80108b0:	e000ed04 	.word	0xe000ed04

080108b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80108b4:	b480      	push	{r7}
 80108b6:	b083      	sub	sp, #12
 80108b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80108ba:	4b12      	ldr	r3, [pc, #72]	; (8010904 <vPortExitCritical+0x50>)
 80108bc:	681b      	ldr	r3, [r3, #0]
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d10a      	bne.n	80108d8 <vPortExitCritical+0x24>
	__asm volatile
 80108c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108c6:	f383 8811 	msr	BASEPRI, r3
 80108ca:	f3bf 8f6f 	isb	sy
 80108ce:	f3bf 8f4f 	dsb	sy
 80108d2:	607b      	str	r3, [r7, #4]
}
 80108d4:	bf00      	nop
 80108d6:	e7fe      	b.n	80108d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80108d8:	4b0a      	ldr	r3, [pc, #40]	; (8010904 <vPortExitCritical+0x50>)
 80108da:	681b      	ldr	r3, [r3, #0]
 80108dc:	3b01      	subs	r3, #1
 80108de:	4a09      	ldr	r2, [pc, #36]	; (8010904 <vPortExitCritical+0x50>)
 80108e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80108e2:	4b08      	ldr	r3, [pc, #32]	; (8010904 <vPortExitCritical+0x50>)
 80108e4:	681b      	ldr	r3, [r3, #0]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d105      	bne.n	80108f6 <vPortExitCritical+0x42>
 80108ea:	2300      	movs	r3, #0
 80108ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80108ee:	683b      	ldr	r3, [r7, #0]
 80108f0:	f383 8811 	msr	BASEPRI, r3
}
 80108f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80108f6:	bf00      	nop
 80108f8:	370c      	adds	r7, #12
 80108fa:	46bd      	mov	sp, r7
 80108fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010900:	4770      	bx	lr
 8010902:	bf00      	nop
 8010904:	200003a8 	.word	0x200003a8
	...

08010910 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010910:	f3ef 8009 	mrs	r0, PSP
 8010914:	f3bf 8f6f 	isb	sy
 8010918:	4b15      	ldr	r3, [pc, #84]	; (8010970 <pxCurrentTCBConst>)
 801091a:	681a      	ldr	r2, [r3, #0]
 801091c:	f01e 0f10 	tst.w	lr, #16
 8010920:	bf08      	it	eq
 8010922:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010926:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801092a:	6010      	str	r0, [r2, #0]
 801092c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010930:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010934:	f380 8811 	msr	BASEPRI, r0
 8010938:	f3bf 8f4f 	dsb	sy
 801093c:	f3bf 8f6f 	isb	sy
 8010940:	f7ff f9f6 	bl	800fd30 <vTaskSwitchContext>
 8010944:	f04f 0000 	mov.w	r0, #0
 8010948:	f380 8811 	msr	BASEPRI, r0
 801094c:	bc09      	pop	{r0, r3}
 801094e:	6819      	ldr	r1, [r3, #0]
 8010950:	6808      	ldr	r0, [r1, #0]
 8010952:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010956:	f01e 0f10 	tst.w	lr, #16
 801095a:	bf08      	it	eq
 801095c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010960:	f380 8809 	msr	PSP, r0
 8010964:	f3bf 8f6f 	isb	sy
 8010968:	4770      	bx	lr
 801096a:	bf00      	nop
 801096c:	f3af 8000 	nop.w

08010970 <pxCurrentTCBConst>:
 8010970:	2000095c 	.word	0x2000095c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010974:	bf00      	nop
 8010976:	bf00      	nop

08010978 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010978:	b580      	push	{r7, lr}
 801097a:	b082      	sub	sp, #8
 801097c:	af00      	add	r7, sp, #0
	__asm volatile
 801097e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010982:	f383 8811 	msr	BASEPRI, r3
 8010986:	f3bf 8f6f 	isb	sy
 801098a:	f3bf 8f4f 	dsb	sy
 801098e:	607b      	str	r3, [r7, #4]
}
 8010990:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010992:	f7ff f915 	bl	800fbc0 <xTaskIncrementTick>
 8010996:	4603      	mov	r3, r0
 8010998:	2b00      	cmp	r3, #0
 801099a:	d003      	beq.n	80109a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801099c:	4b06      	ldr	r3, [pc, #24]	; (80109b8 <SysTick_Handler+0x40>)
 801099e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109a2:	601a      	str	r2, [r3, #0]
 80109a4:	2300      	movs	r3, #0
 80109a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80109a8:	683b      	ldr	r3, [r7, #0]
 80109aa:	f383 8811 	msr	BASEPRI, r3
}
 80109ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80109b0:	bf00      	nop
 80109b2:	3708      	adds	r7, #8
 80109b4:	46bd      	mov	sp, r7
 80109b6:	bd80      	pop	{r7, pc}
 80109b8:	e000ed04 	.word	0xe000ed04

080109bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80109bc:	b480      	push	{r7}
 80109be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80109c0:	4b0b      	ldr	r3, [pc, #44]	; (80109f0 <vPortSetupTimerInterrupt+0x34>)
 80109c2:	2200      	movs	r2, #0
 80109c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80109c6:	4b0b      	ldr	r3, [pc, #44]	; (80109f4 <vPortSetupTimerInterrupt+0x38>)
 80109c8:	2200      	movs	r2, #0
 80109ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80109cc:	4b0a      	ldr	r3, [pc, #40]	; (80109f8 <vPortSetupTimerInterrupt+0x3c>)
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	4a0a      	ldr	r2, [pc, #40]	; (80109fc <vPortSetupTimerInterrupt+0x40>)
 80109d2:	fba2 2303 	umull	r2, r3, r2, r3
 80109d6:	099b      	lsrs	r3, r3, #6
 80109d8:	4a09      	ldr	r2, [pc, #36]	; (8010a00 <vPortSetupTimerInterrupt+0x44>)
 80109da:	3b01      	subs	r3, #1
 80109dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80109de:	4b04      	ldr	r3, [pc, #16]	; (80109f0 <vPortSetupTimerInterrupt+0x34>)
 80109e0:	2207      	movs	r2, #7
 80109e2:	601a      	str	r2, [r3, #0]
}
 80109e4:	bf00      	nop
 80109e6:	46bd      	mov	sp, r7
 80109e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109ec:	4770      	bx	lr
 80109ee:	bf00      	nop
 80109f0:	e000e010 	.word	0xe000e010
 80109f4:	e000e018 	.word	0xe000e018
 80109f8:	2000039c 	.word	0x2000039c
 80109fc:	10624dd3 	.word	0x10624dd3
 8010a00:	e000e014 	.word	0xe000e014

08010a04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010a04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010a14 <vPortEnableVFP+0x10>
 8010a08:	6801      	ldr	r1, [r0, #0]
 8010a0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010a0e:	6001      	str	r1, [r0, #0]
 8010a10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010a12:	bf00      	nop
 8010a14:	e000ed88 	.word	0xe000ed88

08010a18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010a18:	b480      	push	{r7}
 8010a1a:	b085      	sub	sp, #20
 8010a1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010a1e:	f3ef 8305 	mrs	r3, IPSR
 8010a22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010a24:	68fb      	ldr	r3, [r7, #12]
 8010a26:	2b0f      	cmp	r3, #15
 8010a28:	d914      	bls.n	8010a54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010a2a:	4a17      	ldr	r2, [pc, #92]	; (8010a88 <vPortValidateInterruptPriority+0x70>)
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	4413      	add	r3, r2
 8010a30:	781b      	ldrb	r3, [r3, #0]
 8010a32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010a34:	4b15      	ldr	r3, [pc, #84]	; (8010a8c <vPortValidateInterruptPriority+0x74>)
 8010a36:	781b      	ldrb	r3, [r3, #0]
 8010a38:	7afa      	ldrb	r2, [r7, #11]
 8010a3a:	429a      	cmp	r2, r3
 8010a3c:	d20a      	bcs.n	8010a54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8010a3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a42:	f383 8811 	msr	BASEPRI, r3
 8010a46:	f3bf 8f6f 	isb	sy
 8010a4a:	f3bf 8f4f 	dsb	sy
 8010a4e:	607b      	str	r3, [r7, #4]
}
 8010a50:	bf00      	nop
 8010a52:	e7fe      	b.n	8010a52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010a54:	4b0e      	ldr	r3, [pc, #56]	; (8010a90 <vPortValidateInterruptPriority+0x78>)
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010a5c:	4b0d      	ldr	r3, [pc, #52]	; (8010a94 <vPortValidateInterruptPriority+0x7c>)
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	429a      	cmp	r2, r3
 8010a62:	d90a      	bls.n	8010a7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8010a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a68:	f383 8811 	msr	BASEPRI, r3
 8010a6c:	f3bf 8f6f 	isb	sy
 8010a70:	f3bf 8f4f 	dsb	sy
 8010a74:	603b      	str	r3, [r7, #0]
}
 8010a76:	bf00      	nop
 8010a78:	e7fe      	b.n	8010a78 <vPortValidateInterruptPriority+0x60>
	}
 8010a7a:	bf00      	nop
 8010a7c:	3714      	adds	r7, #20
 8010a7e:	46bd      	mov	sp, r7
 8010a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a84:	4770      	bx	lr
 8010a86:	bf00      	nop
 8010a88:	e000e3f0 	.word	0xe000e3f0
 8010a8c:	20000a88 	.word	0x20000a88
 8010a90:	e000ed0c 	.word	0xe000ed0c
 8010a94:	20000a8c 	.word	0x20000a8c

08010a98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b08a      	sub	sp, #40	; 0x28
 8010a9c:	af00      	add	r7, sp, #0
 8010a9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010aa0:	2300      	movs	r3, #0
 8010aa2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010aa4:	f7fe ffc0 	bl	800fa28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010aa8:	4b5b      	ldr	r3, [pc, #364]	; (8010c18 <pvPortMalloc+0x180>)
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d101      	bne.n	8010ab4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010ab0:	f000 f92c 	bl	8010d0c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010ab4:	4b59      	ldr	r3, [pc, #356]	; (8010c1c <pvPortMalloc+0x184>)
 8010ab6:	681a      	ldr	r2, [r3, #0]
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	4013      	ands	r3, r2
 8010abc:	2b00      	cmp	r3, #0
 8010abe:	f040 8093 	bne.w	8010be8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010ac2:	687b      	ldr	r3, [r7, #4]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d01d      	beq.n	8010b04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8010ac8:	2208      	movs	r2, #8
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	4413      	add	r3, r2
 8010ace:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	f003 0307 	and.w	r3, r3, #7
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	d014      	beq.n	8010b04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	f023 0307 	bic.w	r3, r3, #7
 8010ae0:	3308      	adds	r3, #8
 8010ae2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	f003 0307 	and.w	r3, r3, #7
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d00a      	beq.n	8010b04 <pvPortMalloc+0x6c>
	__asm volatile
 8010aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010af2:	f383 8811 	msr	BASEPRI, r3
 8010af6:	f3bf 8f6f 	isb	sy
 8010afa:	f3bf 8f4f 	dsb	sy
 8010afe:	617b      	str	r3, [r7, #20]
}
 8010b00:	bf00      	nop
 8010b02:	e7fe      	b.n	8010b02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	2b00      	cmp	r3, #0
 8010b08:	d06e      	beq.n	8010be8 <pvPortMalloc+0x150>
 8010b0a:	4b45      	ldr	r3, [pc, #276]	; (8010c20 <pvPortMalloc+0x188>)
 8010b0c:	681b      	ldr	r3, [r3, #0]
 8010b0e:	687a      	ldr	r2, [r7, #4]
 8010b10:	429a      	cmp	r2, r3
 8010b12:	d869      	bhi.n	8010be8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010b14:	4b43      	ldr	r3, [pc, #268]	; (8010c24 <pvPortMalloc+0x18c>)
 8010b16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010b18:	4b42      	ldr	r3, [pc, #264]	; (8010c24 <pvPortMalloc+0x18c>)
 8010b1a:	681b      	ldr	r3, [r3, #0]
 8010b1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010b1e:	e004      	b.n	8010b2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8010b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b26:	681b      	ldr	r3, [r3, #0]
 8010b28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b2c:	685b      	ldr	r3, [r3, #4]
 8010b2e:	687a      	ldr	r2, [r7, #4]
 8010b30:	429a      	cmp	r2, r3
 8010b32:	d903      	bls.n	8010b3c <pvPortMalloc+0xa4>
 8010b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b36:	681b      	ldr	r3, [r3, #0]
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d1f1      	bne.n	8010b20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010b3c:	4b36      	ldr	r3, [pc, #216]	; (8010c18 <pvPortMalloc+0x180>)
 8010b3e:	681b      	ldr	r3, [r3, #0]
 8010b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b42:	429a      	cmp	r2, r3
 8010b44:	d050      	beq.n	8010be8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010b46:	6a3b      	ldr	r3, [r7, #32]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	2208      	movs	r2, #8
 8010b4c:	4413      	add	r3, r2
 8010b4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b52:	681a      	ldr	r2, [r3, #0]
 8010b54:	6a3b      	ldr	r3, [r7, #32]
 8010b56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b5a:	685a      	ldr	r2, [r3, #4]
 8010b5c:	687b      	ldr	r3, [r7, #4]
 8010b5e:	1ad2      	subs	r2, r2, r3
 8010b60:	2308      	movs	r3, #8
 8010b62:	005b      	lsls	r3, r3, #1
 8010b64:	429a      	cmp	r2, r3
 8010b66:	d91f      	bls.n	8010ba8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	4413      	add	r3, r2
 8010b6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010b70:	69bb      	ldr	r3, [r7, #24]
 8010b72:	f003 0307 	and.w	r3, r3, #7
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d00a      	beq.n	8010b90 <pvPortMalloc+0xf8>
	__asm volatile
 8010b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b7e:	f383 8811 	msr	BASEPRI, r3
 8010b82:	f3bf 8f6f 	isb	sy
 8010b86:	f3bf 8f4f 	dsb	sy
 8010b8a:	613b      	str	r3, [r7, #16]
}
 8010b8c:	bf00      	nop
 8010b8e:	e7fe      	b.n	8010b8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b92:	685a      	ldr	r2, [r3, #4]
 8010b94:	687b      	ldr	r3, [r7, #4]
 8010b96:	1ad2      	subs	r2, r2, r3
 8010b98:	69bb      	ldr	r3, [r7, #24]
 8010b9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b9e:	687a      	ldr	r2, [r7, #4]
 8010ba0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010ba2:	69b8      	ldr	r0, [r7, #24]
 8010ba4:	f000 f914 	bl	8010dd0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010ba8:	4b1d      	ldr	r3, [pc, #116]	; (8010c20 <pvPortMalloc+0x188>)
 8010baa:	681a      	ldr	r2, [r3, #0]
 8010bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bae:	685b      	ldr	r3, [r3, #4]
 8010bb0:	1ad3      	subs	r3, r2, r3
 8010bb2:	4a1b      	ldr	r2, [pc, #108]	; (8010c20 <pvPortMalloc+0x188>)
 8010bb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010bb6:	4b1a      	ldr	r3, [pc, #104]	; (8010c20 <pvPortMalloc+0x188>)
 8010bb8:	681a      	ldr	r2, [r3, #0]
 8010bba:	4b1b      	ldr	r3, [pc, #108]	; (8010c28 <pvPortMalloc+0x190>)
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	429a      	cmp	r2, r3
 8010bc0:	d203      	bcs.n	8010bca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010bc2:	4b17      	ldr	r3, [pc, #92]	; (8010c20 <pvPortMalloc+0x188>)
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	4a18      	ldr	r2, [pc, #96]	; (8010c28 <pvPortMalloc+0x190>)
 8010bc8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bcc:	685a      	ldr	r2, [r3, #4]
 8010bce:	4b13      	ldr	r3, [pc, #76]	; (8010c1c <pvPortMalloc+0x184>)
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	431a      	orrs	r2, r3
 8010bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bd6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bda:	2200      	movs	r2, #0
 8010bdc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8010bde:	4b13      	ldr	r3, [pc, #76]	; (8010c2c <pvPortMalloc+0x194>)
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	3301      	adds	r3, #1
 8010be4:	4a11      	ldr	r2, [pc, #68]	; (8010c2c <pvPortMalloc+0x194>)
 8010be6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010be8:	f7fe ff2c 	bl	800fa44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010bec:	69fb      	ldr	r3, [r7, #28]
 8010bee:	f003 0307 	and.w	r3, r3, #7
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d00a      	beq.n	8010c0c <pvPortMalloc+0x174>
	__asm volatile
 8010bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bfa:	f383 8811 	msr	BASEPRI, r3
 8010bfe:	f3bf 8f6f 	isb	sy
 8010c02:	f3bf 8f4f 	dsb	sy
 8010c06:	60fb      	str	r3, [r7, #12]
}
 8010c08:	bf00      	nop
 8010c0a:	e7fe      	b.n	8010c0a <pvPortMalloc+0x172>
	return pvReturn;
 8010c0c:	69fb      	ldr	r3, [r7, #28]
}
 8010c0e:	4618      	mov	r0, r3
 8010c10:	3728      	adds	r7, #40	; 0x28
 8010c12:	46bd      	mov	sp, r7
 8010c14:	bd80      	pop	{r7, pc}
 8010c16:	bf00      	nop
 8010c18:	20006da8 	.word	0x20006da8
 8010c1c:	20006dbc 	.word	0x20006dbc
 8010c20:	20006dac 	.word	0x20006dac
 8010c24:	20006da0 	.word	0x20006da0
 8010c28:	20006db0 	.word	0x20006db0
 8010c2c:	20006db4 	.word	0x20006db4

08010c30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b086      	sub	sp, #24
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010c3c:	687b      	ldr	r3, [r7, #4]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d04d      	beq.n	8010cde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010c42:	2308      	movs	r3, #8
 8010c44:	425b      	negs	r3, r3
 8010c46:	697a      	ldr	r2, [r7, #20]
 8010c48:	4413      	add	r3, r2
 8010c4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010c4c:	697b      	ldr	r3, [r7, #20]
 8010c4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010c50:	693b      	ldr	r3, [r7, #16]
 8010c52:	685a      	ldr	r2, [r3, #4]
 8010c54:	4b24      	ldr	r3, [pc, #144]	; (8010ce8 <vPortFree+0xb8>)
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	4013      	ands	r3, r2
 8010c5a:	2b00      	cmp	r3, #0
 8010c5c:	d10a      	bne.n	8010c74 <vPortFree+0x44>
	__asm volatile
 8010c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c62:	f383 8811 	msr	BASEPRI, r3
 8010c66:	f3bf 8f6f 	isb	sy
 8010c6a:	f3bf 8f4f 	dsb	sy
 8010c6e:	60fb      	str	r3, [r7, #12]
}
 8010c70:	bf00      	nop
 8010c72:	e7fe      	b.n	8010c72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010c74:	693b      	ldr	r3, [r7, #16]
 8010c76:	681b      	ldr	r3, [r3, #0]
 8010c78:	2b00      	cmp	r3, #0
 8010c7a:	d00a      	beq.n	8010c92 <vPortFree+0x62>
	__asm volatile
 8010c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c80:	f383 8811 	msr	BASEPRI, r3
 8010c84:	f3bf 8f6f 	isb	sy
 8010c88:	f3bf 8f4f 	dsb	sy
 8010c8c:	60bb      	str	r3, [r7, #8]
}
 8010c8e:	bf00      	nop
 8010c90:	e7fe      	b.n	8010c90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010c92:	693b      	ldr	r3, [r7, #16]
 8010c94:	685a      	ldr	r2, [r3, #4]
 8010c96:	4b14      	ldr	r3, [pc, #80]	; (8010ce8 <vPortFree+0xb8>)
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	4013      	ands	r3, r2
 8010c9c:	2b00      	cmp	r3, #0
 8010c9e:	d01e      	beq.n	8010cde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010ca0:	693b      	ldr	r3, [r7, #16]
 8010ca2:	681b      	ldr	r3, [r3, #0]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d11a      	bne.n	8010cde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010ca8:	693b      	ldr	r3, [r7, #16]
 8010caa:	685a      	ldr	r2, [r3, #4]
 8010cac:	4b0e      	ldr	r3, [pc, #56]	; (8010ce8 <vPortFree+0xb8>)
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	43db      	mvns	r3, r3
 8010cb2:	401a      	ands	r2, r3
 8010cb4:	693b      	ldr	r3, [r7, #16]
 8010cb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010cb8:	f7fe feb6 	bl	800fa28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010cbc:	693b      	ldr	r3, [r7, #16]
 8010cbe:	685a      	ldr	r2, [r3, #4]
 8010cc0:	4b0a      	ldr	r3, [pc, #40]	; (8010cec <vPortFree+0xbc>)
 8010cc2:	681b      	ldr	r3, [r3, #0]
 8010cc4:	4413      	add	r3, r2
 8010cc6:	4a09      	ldr	r2, [pc, #36]	; (8010cec <vPortFree+0xbc>)
 8010cc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010cca:	6938      	ldr	r0, [r7, #16]
 8010ccc:	f000 f880 	bl	8010dd0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8010cd0:	4b07      	ldr	r3, [pc, #28]	; (8010cf0 <vPortFree+0xc0>)
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	3301      	adds	r3, #1
 8010cd6:	4a06      	ldr	r2, [pc, #24]	; (8010cf0 <vPortFree+0xc0>)
 8010cd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8010cda:	f7fe feb3 	bl	800fa44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010cde:	bf00      	nop
 8010ce0:	3718      	adds	r7, #24
 8010ce2:	46bd      	mov	sp, r7
 8010ce4:	bd80      	pop	{r7, pc}
 8010ce6:	bf00      	nop
 8010ce8:	20006dbc 	.word	0x20006dbc
 8010cec:	20006dac 	.word	0x20006dac
 8010cf0:	20006db8 	.word	0x20006db8

08010cf4 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8010cf4:	b480      	push	{r7}
 8010cf6:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 8010cf8:	4b03      	ldr	r3, [pc, #12]	; (8010d08 <xPortGetFreeHeapSize+0x14>)
 8010cfa:	681b      	ldr	r3, [r3, #0]
}
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d04:	4770      	bx	lr
 8010d06:	bf00      	nop
 8010d08:	20006dac 	.word	0x20006dac

08010d0c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010d0c:	b480      	push	{r7}
 8010d0e:	b085      	sub	sp, #20
 8010d10:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010d12:	f246 3310 	movw	r3, #25360	; 0x6310
 8010d16:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010d18:	4b27      	ldr	r3, [pc, #156]	; (8010db8 <prvHeapInit+0xac>)
 8010d1a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	f003 0307 	and.w	r3, r3, #7
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d00c      	beq.n	8010d40 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	3307      	adds	r3, #7
 8010d2a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010d2c:	68fb      	ldr	r3, [r7, #12]
 8010d2e:	f023 0307 	bic.w	r3, r3, #7
 8010d32:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010d34:	68ba      	ldr	r2, [r7, #8]
 8010d36:	68fb      	ldr	r3, [r7, #12]
 8010d38:	1ad3      	subs	r3, r2, r3
 8010d3a:	4a1f      	ldr	r2, [pc, #124]	; (8010db8 <prvHeapInit+0xac>)
 8010d3c:	4413      	add	r3, r2
 8010d3e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010d40:	68fb      	ldr	r3, [r7, #12]
 8010d42:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010d44:	4a1d      	ldr	r2, [pc, #116]	; (8010dbc <prvHeapInit+0xb0>)
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010d4a:	4b1c      	ldr	r3, [pc, #112]	; (8010dbc <prvHeapInit+0xb0>)
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	68ba      	ldr	r2, [r7, #8]
 8010d54:	4413      	add	r3, r2
 8010d56:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010d58:	2208      	movs	r2, #8
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	1a9b      	subs	r3, r3, r2
 8010d5e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010d60:	68fb      	ldr	r3, [r7, #12]
 8010d62:	f023 0307 	bic.w	r3, r3, #7
 8010d66:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010d68:	68fb      	ldr	r3, [r7, #12]
 8010d6a:	4a15      	ldr	r2, [pc, #84]	; (8010dc0 <prvHeapInit+0xb4>)
 8010d6c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010d6e:	4b14      	ldr	r3, [pc, #80]	; (8010dc0 <prvHeapInit+0xb4>)
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	2200      	movs	r2, #0
 8010d74:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010d76:	4b12      	ldr	r3, [pc, #72]	; (8010dc0 <prvHeapInit+0xb4>)
 8010d78:	681b      	ldr	r3, [r3, #0]
 8010d7a:	2200      	movs	r2, #0
 8010d7c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010d82:	683b      	ldr	r3, [r7, #0]
 8010d84:	68fa      	ldr	r2, [r7, #12]
 8010d86:	1ad2      	subs	r2, r2, r3
 8010d88:	683b      	ldr	r3, [r7, #0]
 8010d8a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8010d8c:	4b0c      	ldr	r3, [pc, #48]	; (8010dc0 <prvHeapInit+0xb4>)
 8010d8e:	681a      	ldr	r2, [r3, #0]
 8010d90:	683b      	ldr	r3, [r7, #0]
 8010d92:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010d94:	683b      	ldr	r3, [r7, #0]
 8010d96:	685b      	ldr	r3, [r3, #4]
 8010d98:	4a0a      	ldr	r2, [pc, #40]	; (8010dc4 <prvHeapInit+0xb8>)
 8010d9a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8010d9c:	683b      	ldr	r3, [r7, #0]
 8010d9e:	685b      	ldr	r3, [r3, #4]
 8010da0:	4a09      	ldr	r2, [pc, #36]	; (8010dc8 <prvHeapInit+0xbc>)
 8010da2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8010da4:	4b09      	ldr	r3, [pc, #36]	; (8010dcc <prvHeapInit+0xc0>)
 8010da6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8010daa:	601a      	str	r2, [r3, #0]
}
 8010dac:	bf00      	nop
 8010dae:	3714      	adds	r7, #20
 8010db0:	46bd      	mov	sp, r7
 8010db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db6:	4770      	bx	lr
 8010db8:	20000a90 	.word	0x20000a90
 8010dbc:	20006da0 	.word	0x20006da0
 8010dc0:	20006da8 	.word	0x20006da8
 8010dc4:	20006db0 	.word	0x20006db0
 8010dc8:	20006dac 	.word	0x20006dac
 8010dcc:	20006dbc 	.word	0x20006dbc

08010dd0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8010dd0:	b480      	push	{r7}
 8010dd2:	b085      	sub	sp, #20
 8010dd4:	af00      	add	r7, sp, #0
 8010dd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8010dd8:	4b28      	ldr	r3, [pc, #160]	; (8010e7c <prvInsertBlockIntoFreeList+0xac>)
 8010dda:	60fb      	str	r3, [r7, #12]
 8010ddc:	e002      	b.n	8010de4 <prvInsertBlockIntoFreeList+0x14>
 8010dde:	68fb      	ldr	r3, [r7, #12]
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	60fb      	str	r3, [r7, #12]
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	687a      	ldr	r2, [r7, #4]
 8010dea:	429a      	cmp	r2, r3
 8010dec:	d8f7      	bhi.n	8010dde <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8010dee:	68fb      	ldr	r3, [r7, #12]
 8010df0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	685b      	ldr	r3, [r3, #4]
 8010df6:	68ba      	ldr	r2, [r7, #8]
 8010df8:	4413      	add	r3, r2
 8010dfa:	687a      	ldr	r2, [r7, #4]
 8010dfc:	429a      	cmp	r2, r3
 8010dfe:	d108      	bne.n	8010e12 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8010e00:	68fb      	ldr	r3, [r7, #12]
 8010e02:	685a      	ldr	r2, [r3, #4]
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	685b      	ldr	r3, [r3, #4]
 8010e08:	441a      	add	r2, r3
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8010e0e:	68fb      	ldr	r3, [r7, #12]
 8010e10:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	685b      	ldr	r3, [r3, #4]
 8010e1a:	68ba      	ldr	r2, [r7, #8]
 8010e1c:	441a      	add	r2, r3
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	429a      	cmp	r2, r3
 8010e24:	d118      	bne.n	8010e58 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	681a      	ldr	r2, [r3, #0]
 8010e2a:	4b15      	ldr	r3, [pc, #84]	; (8010e80 <prvInsertBlockIntoFreeList+0xb0>)
 8010e2c:	681b      	ldr	r3, [r3, #0]
 8010e2e:	429a      	cmp	r2, r3
 8010e30:	d00d      	beq.n	8010e4e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	685a      	ldr	r2, [r3, #4]
 8010e36:	68fb      	ldr	r3, [r7, #12]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	685b      	ldr	r3, [r3, #4]
 8010e3c:	441a      	add	r2, r3
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	681b      	ldr	r3, [r3, #0]
 8010e46:	681a      	ldr	r2, [r3, #0]
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	601a      	str	r2, [r3, #0]
 8010e4c:	e008      	b.n	8010e60 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8010e4e:	4b0c      	ldr	r3, [pc, #48]	; (8010e80 <prvInsertBlockIntoFreeList+0xb0>)
 8010e50:	681a      	ldr	r2, [r3, #0]
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	601a      	str	r2, [r3, #0]
 8010e56:	e003      	b.n	8010e60 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8010e58:	68fb      	ldr	r3, [r7, #12]
 8010e5a:	681a      	ldr	r2, [r3, #0]
 8010e5c:	687b      	ldr	r3, [r7, #4]
 8010e5e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8010e60:	68fa      	ldr	r2, [r7, #12]
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	429a      	cmp	r2, r3
 8010e66:	d002      	beq.n	8010e6e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8010e68:	68fb      	ldr	r3, [r7, #12]
 8010e6a:	687a      	ldr	r2, [r7, #4]
 8010e6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010e6e:	bf00      	nop
 8010e70:	3714      	adds	r7, #20
 8010e72:	46bd      	mov	sp, r7
 8010e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e78:	4770      	bx	lr
 8010e7a:	bf00      	nop
 8010e7c:	20006da0 	.word	0x20006da0
 8010e80:	20006da8 	.word	0x20006da8

08010e84 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b084      	sub	sp, #16
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	6078      	str	r0, [r7, #4]
 8010e8c:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8010e8e:	683b      	ldr	r3, [r7, #0]
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	330c      	adds	r3, #12
 8010e94:	461a      	mov	r2, r3
 8010e96:	6839      	ldr	r1, [r7, #0]
 8010e98:	6878      	ldr	r0, [r7, #4]
 8010e9a:	f001 fff3 	bl	8012e84 <tcpip_send_msg_wait_sem>
 8010e9e:	4603      	mov	r3, r0
 8010ea0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8010ea2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d103      	bne.n	8010eb2 <netconn_apimsg+0x2e>
    return apimsg->err;
 8010eaa:	683b      	ldr	r3, [r7, #0]
 8010eac:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8010eb0:	e001      	b.n	8010eb6 <netconn_apimsg+0x32>
  }
  return err;
 8010eb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010eb6:	4618      	mov	r0, r3
 8010eb8:	3710      	adds	r7, #16
 8010eba:	46bd      	mov	sp, r7
 8010ebc:	bd80      	pop	{r7, pc}
	...

08010ec0 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b08c      	sub	sp, #48	; 0x30
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	603a      	str	r2, [r7, #0]
 8010eca:	71fb      	strb	r3, [r7, #7]
 8010ecc:	460b      	mov	r3, r1
 8010ece:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8010ed0:	79fb      	ldrb	r3, [r7, #7]
 8010ed2:	6839      	ldr	r1, [r7, #0]
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f000 ff21 	bl	8011d1c <netconn_alloc>
 8010eda:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8010edc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ede:	2b00      	cmp	r3, #0
 8010ee0:	d054      	beq.n	8010f8c <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8010ee2:	79bb      	ldrb	r3, [r7, #6]
 8010ee4:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8010ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ee8:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8010eea:	f107 0308 	add.w	r3, r7, #8
 8010eee:	4619      	mov	r1, r3
 8010ef0:	4829      	ldr	r0, [pc, #164]	; (8010f98 <netconn_new_with_proto_and_callback+0xd8>)
 8010ef2:	f7ff ffc7 	bl	8010e84 <netconn_apimsg>
 8010ef6:	4603      	mov	r3, r0
 8010ef8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8010efc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d043      	beq.n	8010f8c <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8010f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f06:	685b      	ldr	r3, [r3, #4]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d005      	beq.n	8010f18 <netconn_new_with_proto_and_callback+0x58>
 8010f0c:	4b23      	ldr	r3, [pc, #140]	; (8010f9c <netconn_new_with_proto_and_callback+0xdc>)
 8010f0e:	22a3      	movs	r2, #163	; 0xa3
 8010f10:	4923      	ldr	r1, [pc, #140]	; (8010fa0 <netconn_new_with_proto_and_callback+0xe0>)
 8010f12:	4824      	ldr	r0, [pc, #144]	; (8010fa4 <netconn_new_with_proto_and_callback+0xe4>)
 8010f14:	f00e f94a 	bl	801f1ac <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8010f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f1a:	3310      	adds	r3, #16
 8010f1c:	4618      	mov	r0, r3
 8010f1e:	f00c ff88 	bl	801de32 <sys_mbox_valid>
 8010f22:	4603      	mov	r3, r0
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d105      	bne.n	8010f34 <netconn_new_with_proto_and_callback+0x74>
 8010f28:	4b1c      	ldr	r3, [pc, #112]	; (8010f9c <netconn_new_with_proto_and_callback+0xdc>)
 8010f2a:	22a4      	movs	r2, #164	; 0xa4
 8010f2c:	491e      	ldr	r1, [pc, #120]	; (8010fa8 <netconn_new_with_proto_and_callback+0xe8>)
 8010f2e:	481d      	ldr	r0, [pc, #116]	; (8010fa4 <netconn_new_with_proto_and_callback+0xe4>)
 8010f30:	f00e f93c 	bl	801f1ac <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8010f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f36:	3314      	adds	r3, #20
 8010f38:	4618      	mov	r0, r3
 8010f3a:	f00c ff7a 	bl	801de32 <sys_mbox_valid>
 8010f3e:	4603      	mov	r3, r0
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d005      	beq.n	8010f50 <netconn_new_with_proto_and_callback+0x90>
 8010f44:	4b15      	ldr	r3, [pc, #84]	; (8010f9c <netconn_new_with_proto_and_callback+0xdc>)
 8010f46:	22a6      	movs	r2, #166	; 0xa6
 8010f48:	4918      	ldr	r1, [pc, #96]	; (8010fac <netconn_new_with_proto_and_callback+0xec>)
 8010f4a:	4816      	ldr	r0, [pc, #88]	; (8010fa4 <netconn_new_with_proto_and_callback+0xe4>)
 8010f4c:	f00e f92e 	bl	801f1ac <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8010f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f52:	330c      	adds	r3, #12
 8010f54:	4618      	mov	r0, r3
 8010f56:	f00c fffd 	bl	801df54 <sys_sem_valid>
 8010f5a:	4603      	mov	r3, r0
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	d105      	bne.n	8010f6c <netconn_new_with_proto_and_callback+0xac>
 8010f60:	4b0e      	ldr	r3, [pc, #56]	; (8010f9c <netconn_new_with_proto_and_callback+0xdc>)
 8010f62:	22a9      	movs	r2, #169	; 0xa9
 8010f64:	4912      	ldr	r1, [pc, #72]	; (8010fb0 <netconn_new_with_proto_and_callback+0xf0>)
 8010f66:	480f      	ldr	r0, [pc, #60]	; (8010fa4 <netconn_new_with_proto_and_callback+0xe4>)
 8010f68:	f00e f920 	bl	801f1ac <iprintf>
      sys_sem_free(&conn->op_completed);
 8010f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f6e:	330c      	adds	r3, #12
 8010f70:	4618      	mov	r0, r3
 8010f72:	f00c ffe2 	bl	801df3a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8010f76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f78:	3310      	adds	r3, #16
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	f00c fed2 	bl	801dd24 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8010f80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010f82:	2007      	movs	r0, #7
 8010f84:	f002 fce6 	bl	8013954 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8010f88:	2300      	movs	r3, #0
 8010f8a:	e000      	b.n	8010f8e <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8010f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8010f8e:	4618      	mov	r0, r3
 8010f90:	3730      	adds	r7, #48	; 0x30
 8010f92:	46bd      	mov	sp, r7
 8010f94:	bd80      	pop	{r7, pc}
 8010f96:	bf00      	nop
 8010f98:	08011cf1 	.word	0x08011cf1
 8010f9c:	08023758 	.word	0x08023758
 8010fa0:	0802378c 	.word	0x0802378c
 8010fa4:	080237b0 	.word	0x080237b0
 8010fa8:	080237d8 	.word	0x080237d8
 8010fac:	080237f0 	.word	0x080237f0
 8010fb0:	08023814 	.word	0x08023814

08010fb4 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8010fb4:	b580      	push	{r7, lr}
 8010fb6:	b08c      	sub	sp, #48	; 0x30
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d101      	bne.n	8010fc6 <netconn_prepare_delete+0x12>
    return ERR_OK;
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	e014      	b.n	8010ff0 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8010fca:	2329      	movs	r3, #41	; 0x29
 8010fcc:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8010fce:	f107 030c 	add.w	r3, r7, #12
 8010fd2:	4619      	mov	r1, r3
 8010fd4:	4808      	ldr	r0, [pc, #32]	; (8010ff8 <netconn_prepare_delete+0x44>)
 8010fd6:	f7ff ff55 	bl	8010e84 <netconn_apimsg>
 8010fda:	4603      	mov	r3, r0
 8010fdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8010fe0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8010fe4:	2b00      	cmp	r3, #0
 8010fe6:	d002      	beq.n	8010fee <netconn_prepare_delete+0x3a>
    return err;
 8010fe8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8010fec:	e000      	b.n	8010ff0 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8010fee:	2300      	movs	r3, #0
}
 8010ff0:	4618      	mov	r0, r3
 8010ff2:	3730      	adds	r7, #48	; 0x30
 8010ff4:	46bd      	mov	sp, r7
 8010ff6:	bd80      	pop	{r7, pc}
 8010ff8:	08012255 	.word	0x08012255

08010ffc <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	b084      	sub	sp, #16
 8011000:	af00      	add	r7, sp, #0
 8011002:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	2b00      	cmp	r3, #0
 8011008:	d101      	bne.n	801100e <netconn_delete+0x12>
    return ERR_OK;
 801100a:	2300      	movs	r3, #0
 801100c:	e00d      	b.n	801102a <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 801100e:	6878      	ldr	r0, [r7, #4]
 8011010:	f7ff ffd0 	bl	8010fb4 <netconn_prepare_delete>
 8011014:	4603      	mov	r3, r0
 8011016:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8011018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801101c:	2b00      	cmp	r3, #0
 801101e:	d102      	bne.n	8011026 <netconn_delete+0x2a>
    netconn_free(conn);
 8011020:	6878      	ldr	r0, [r7, #4]
 8011022:	f000 fee9 	bl	8011df8 <netconn_free>
  }
  return err;
 8011026:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801102a:	4618      	mov	r0, r3
 801102c:	3710      	adds	r7, #16
 801102e:	46bd      	mov	sp, r7
 8011030:	bd80      	pop	{r7, pc}
	...

08011034 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8011034:	b580      	push	{r7, lr}
 8011036:	b08e      	sub	sp, #56	; 0x38
 8011038:	af00      	add	r7, sp, #0
 801103a:	60f8      	str	r0, [r7, #12]
 801103c:	60b9      	str	r1, [r7, #8]
 801103e:	4613      	mov	r3, r2
 8011040:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8011042:	68fb      	ldr	r3, [r7, #12]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d109      	bne.n	801105c <netconn_bind+0x28>
 8011048:	4b11      	ldr	r3, [pc, #68]	; (8011090 <netconn_bind+0x5c>)
 801104a:	f44f 729c 	mov.w	r2, #312	; 0x138
 801104e:	4911      	ldr	r1, [pc, #68]	; (8011094 <netconn_bind+0x60>)
 8011050:	4811      	ldr	r0, [pc, #68]	; (8011098 <netconn_bind+0x64>)
 8011052:	f00e f8ab 	bl	801f1ac <iprintf>
 8011056:	f06f 030f 	mvn.w	r3, #15
 801105a:	e015      	b.n	8011088 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 801105c:	68bb      	ldr	r3, [r7, #8]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d101      	bne.n	8011066 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8011062:	4b0e      	ldr	r3, [pc, #56]	; (801109c <netconn_bind+0x68>)
 8011064:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 801106a:	68bb      	ldr	r3, [r7, #8]
 801106c:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 801106e:	88fb      	ldrh	r3, [r7, #6]
 8011070:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8011072:	f107 0314 	add.w	r3, r7, #20
 8011076:	4619      	mov	r1, r3
 8011078:	4809      	ldr	r0, [pc, #36]	; (80110a0 <netconn_bind+0x6c>)
 801107a:	f7ff ff03 	bl	8010e84 <netconn_apimsg>
 801107e:	4603      	mov	r3, r0
 8011080:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8011084:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8011088:	4618      	mov	r0, r3
 801108a:	3738      	adds	r7, #56	; 0x38
 801108c:	46bd      	mov	sp, r7
 801108e:	bd80      	pop	{r7, pc}
 8011090:	08023758 	.word	0x08023758
 8011094:	08023890 	.word	0x08023890
 8011098:	080237b0 	.word	0x080237b0
 801109c:	08026f20 	.word	0x08026f20
 80110a0:	0801241d 	.word	0x0801241d

080110a4 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 80110a4:	b580      	push	{r7, lr}
 80110a6:	b088      	sub	sp, #32
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	60f8      	str	r0, [r7, #12]
 80110ac:	60b9      	str	r1, [r7, #8]
 80110ae:	4613      	mov	r3, r2
 80110b0:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 80110b2:	2300      	movs	r3, #0
 80110b4:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80110b6:	68bb      	ldr	r3, [r7, #8]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d109      	bne.n	80110d0 <netconn_recv_data+0x2c>
 80110bc:	4b58      	ldr	r3, [pc, #352]	; (8011220 <netconn_recv_data+0x17c>)
 80110be:	f44f 7212 	mov.w	r2, #584	; 0x248
 80110c2:	4958      	ldr	r1, [pc, #352]	; (8011224 <netconn_recv_data+0x180>)
 80110c4:	4858      	ldr	r0, [pc, #352]	; (8011228 <netconn_recv_data+0x184>)
 80110c6:	f00e f871 	bl	801f1ac <iprintf>
 80110ca:	f06f 030f 	mvn.w	r3, #15
 80110ce:	e0a2      	b.n	8011216 <netconn_recv_data+0x172>
  *new_buf = NULL;
 80110d0:	68bb      	ldr	r3, [r7, #8]
 80110d2:	2200      	movs	r2, #0
 80110d4:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	d109      	bne.n	80110f0 <netconn_recv_data+0x4c>
 80110dc:	4b50      	ldr	r3, [pc, #320]	; (8011220 <netconn_recv_data+0x17c>)
 80110de:	f240 224a 	movw	r2, #586	; 0x24a
 80110e2:	4952      	ldr	r1, [pc, #328]	; (801122c <netconn_recv_data+0x188>)
 80110e4:	4850      	ldr	r0, [pc, #320]	; (8011228 <netconn_recv_data+0x184>)
 80110e6:	f00e f861 	bl	801f1ac <iprintf>
 80110ea:	f06f 030f 	mvn.w	r3, #15
 80110ee:	e092      	b.n	8011216 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	3310      	adds	r3, #16
 80110f4:	4618      	mov	r0, r3
 80110f6:	f00c fe9c 	bl	801de32 <sys_mbox_valid>
 80110fa:	4603      	mov	r3, r0
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d10e      	bne.n	801111e <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8011100:	68f8      	ldr	r0, [r7, #12]
 8011102:	f000 fa45 	bl	8011590 <netconn_err>
 8011106:	4603      	mov	r3, r0
 8011108:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 801110a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801110e:	2b00      	cmp	r3, #0
 8011110:	d002      	beq.n	8011118 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8011112:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8011116:	e07e      	b.n	8011216 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8011118:	f06f 030a 	mvn.w	r3, #10
 801111c:	e07b      	b.n	8011216 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	7f1b      	ldrb	r3, [r3, #28]
 8011122:	f003 0302 	and.w	r3, r3, #2
 8011126:	2b00      	cmp	r3, #0
 8011128:	d10f      	bne.n	801114a <netconn_recv_data+0xa6>
 801112a:	79fb      	ldrb	r3, [r7, #7]
 801112c:	f003 0304 	and.w	r3, r3, #4
 8011130:	2b00      	cmp	r3, #0
 8011132:	d10a      	bne.n	801114a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	7f1b      	ldrb	r3, [r3, #28]
 8011138:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 801113c:	2b00      	cmp	r3, #0
 801113e:	d104      	bne.n	801114a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d023      	beq.n	8011192 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 801114a:	68fb      	ldr	r3, [r7, #12]
 801114c:	3310      	adds	r3, #16
 801114e:	f107 0218 	add.w	r2, r7, #24
 8011152:	4611      	mov	r1, r2
 8011154:	4618      	mov	r0, r3
 8011156:	f00c fe50 	bl	801ddfa <sys_arch_mbox_tryfetch>
 801115a:	4603      	mov	r3, r0
 801115c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011160:	d11f      	bne.n	80111a2 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 8011162:	68f8      	ldr	r0, [r7, #12]
 8011164:	f000 fa14 	bl	8011590 <netconn_err>
 8011168:	4603      	mov	r3, r0
 801116a:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 801116c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011170:	2b00      	cmp	r3, #0
 8011172:	d002      	beq.n	801117a <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 8011174:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8011178:	e04d      	b.n	8011216 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	7f1b      	ldrb	r3, [r3, #28]
 801117e:	f003 0301 	and.w	r3, r3, #1
 8011182:	2b00      	cmp	r3, #0
 8011184:	d002      	beq.n	801118c <netconn_recv_data+0xe8>
        return ERR_CONN;
 8011186:	f06f 030a 	mvn.w	r3, #10
 801118a:	e044      	b.n	8011216 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 801118c:	f06f 0306 	mvn.w	r3, #6
 8011190:	e041      	b.n	8011216 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	3310      	adds	r3, #16
 8011196:	f107 0118 	add.w	r1, r7, #24
 801119a:	2200      	movs	r2, #0
 801119c:	4618      	mov	r0, r3
 801119e:	f00c fded 	bl	801dd7c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	781b      	ldrb	r3, [r3, #0]
 80111a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80111aa:	2b10      	cmp	r3, #16
 80111ac:	d117      	bne.n	80111de <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80111ae:	69bb      	ldr	r3, [r7, #24]
 80111b0:	f107 0217 	add.w	r2, r7, #23
 80111b4:	4611      	mov	r1, r2
 80111b6:	4618      	mov	r0, r3
 80111b8:	f000 fa3c 	bl	8011634 <lwip_netconn_is_err_msg>
 80111bc:	4603      	mov	r3, r0
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d009      	beq.n	80111d6 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80111c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80111c6:	f113 0f0f 	cmn.w	r3, #15
 80111ca:	d101      	bne.n	80111d0 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80111cc:	2300      	movs	r3, #0
 80111ce:	e022      	b.n	8011216 <netconn_recv_data+0x172>
      }
      return err;
 80111d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80111d4:	e01f      	b.n	8011216 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80111d6:	69bb      	ldr	r3, [r7, #24]
 80111d8:	891b      	ldrh	r3, [r3, #8]
 80111da:	83fb      	strh	r3, [r7, #30]
 80111dc:	e00d      	b.n	80111fa <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80111de:	69bb      	ldr	r3, [r7, #24]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d106      	bne.n	80111f2 <netconn_recv_data+0x14e>
 80111e4:	4b0e      	ldr	r3, [pc, #56]	; (8011220 <netconn_recv_data+0x17c>)
 80111e6:	f240 2291 	movw	r2, #657	; 0x291
 80111ea:	4911      	ldr	r1, [pc, #68]	; (8011230 <netconn_recv_data+0x18c>)
 80111ec:	480e      	ldr	r0, [pc, #56]	; (8011228 <netconn_recv_data+0x184>)
 80111ee:	f00d ffdd 	bl	801f1ac <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80111f2:	69bb      	ldr	r3, [r7, #24]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	891b      	ldrh	r3, [r3, #8]
 80111f8:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d005      	beq.n	801120e <netconn_recv_data+0x16a>
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011206:	8bfa      	ldrh	r2, [r7, #30]
 8011208:	2101      	movs	r1, #1
 801120a:	68f8      	ldr	r0, [r7, #12]
 801120c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 801120e:	69ba      	ldr	r2, [r7, #24]
 8011210:	68bb      	ldr	r3, [r7, #8]
 8011212:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8011214:	2300      	movs	r3, #0
}
 8011216:	4618      	mov	r0, r3
 8011218:	3720      	adds	r7, #32
 801121a:	46bd      	mov	sp, r7
 801121c:	bd80      	pop	{r7, pc}
 801121e:	bf00      	nop
 8011220:	08023758 	.word	0x08023758
 8011224:	08023970 	.word	0x08023970
 8011228:	080237b0 	.word	0x080237b0
 801122c:	08023990 	.word	0x08023990
 8011230:	080239ac 	.word	0x080239ac

08011234 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8011234:	b580      	push	{r7, lr}
 8011236:	b084      	sub	sp, #16
 8011238:	af00      	add	r7, sp, #0
 801123a:	60f8      	str	r0, [r7, #12]
 801123c:	60b9      	str	r1, [r7, #8]
 801123e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	2b00      	cmp	r3, #0
 8011244:	d005      	beq.n	8011252 <netconn_tcp_recvd_msg+0x1e>
 8011246:	68fb      	ldr	r3, [r7, #12]
 8011248:	781b      	ldrb	r3, [r3, #0]
 801124a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801124e:	2b10      	cmp	r3, #16
 8011250:	d009      	beq.n	8011266 <netconn_tcp_recvd_msg+0x32>
 8011252:	4b0c      	ldr	r3, [pc, #48]	; (8011284 <netconn_tcp_recvd_msg+0x50>)
 8011254:	f240 22a7 	movw	r2, #679	; 0x2a7
 8011258:	490b      	ldr	r1, [pc, #44]	; (8011288 <netconn_tcp_recvd_msg+0x54>)
 801125a:	480c      	ldr	r0, [pc, #48]	; (801128c <netconn_tcp_recvd_msg+0x58>)
 801125c:	f00d ffa6 	bl	801f1ac <iprintf>
 8011260:	f06f 030f 	mvn.w	r3, #15
 8011264:	e00a      	b.n	801127c <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	68fa      	ldr	r2, [r7, #12]
 801126a:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	68ba      	ldr	r2, [r7, #8]
 8011270:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8011272:	6879      	ldr	r1, [r7, #4]
 8011274:	4806      	ldr	r0, [pc, #24]	; (8011290 <netconn_tcp_recvd_msg+0x5c>)
 8011276:	f7ff fe05 	bl	8010e84 <netconn_apimsg>
 801127a:	4603      	mov	r3, r0
}
 801127c:	4618      	mov	r0, r3
 801127e:	3710      	adds	r7, #16
 8011280:	46bd      	mov	sp, r7
 8011282:	bd80      	pop	{r7, pc}
 8011284:	08023758 	.word	0x08023758
 8011288:	080239b8 	.word	0x080239b8
 801128c:	080237b0 	.word	0x080237b0
 8011290:	0801252b 	.word	0x0801252b

08011294 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8011294:	b580      	push	{r7, lr}
 8011296:	b090      	sub	sp, #64	; 0x40
 8011298:	af00      	add	r7, sp, #0
 801129a:	60f8      	str	r0, [r7, #12]
 801129c:	60b9      	str	r1, [r7, #8]
 801129e:	4613      	mov	r3, r2
 80112a0:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	3310      	adds	r3, #16
 80112a6:	4618      	mov	r0, r3
 80112a8:	f00c fdc3 	bl	801de32 <sys_mbox_valid>
 80112ac:	4603      	mov	r3, r0
 80112ae:	2b00      	cmp	r3, #0
 80112b0:	d102      	bne.n	80112b8 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 80112b2:	f06f 030a 	mvn.w	r3, #10
 80112b6:	e06d      	b.n	8011394 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	7f1b      	ldrb	r3, [r3, #28]
 80112bc:	b25b      	sxtb	r3, r3
 80112be:	2b00      	cmp	r3, #0
 80112c0:	da07      	bge.n	80112d2 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	7f1b      	ldrb	r3, [r3, #28]
 80112c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80112ca:	b2da      	uxtb	r2, r3
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 80112d0:	e039      	b.n	8011346 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 80112d2:	79fb      	ldrb	r3, [r7, #7]
 80112d4:	461a      	mov	r2, r3
 80112d6:	68b9      	ldr	r1, [r7, #8]
 80112d8:	68f8      	ldr	r0, [r7, #12]
 80112da:	f7ff fee3 	bl	80110a4 <netconn_recv_data>
 80112de:	4603      	mov	r3, r0
 80112e0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 80112e4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d002      	beq.n	80112f2 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 80112ec:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80112f0:	e050      	b.n	8011394 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 80112f2:	68bb      	ldr	r3, [r7, #8]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 80112f8:	79fb      	ldrb	r3, [r7, #7]
 80112fa:	f003 0308 	and.w	r3, r3, #8
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d10e      	bne.n	8011320 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8011302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011304:	2b00      	cmp	r3, #0
 8011306:	d002      	beq.n	801130e <netconn_recv_data_tcp+0x7a>
 8011308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801130a:	891b      	ldrh	r3, [r3, #8]
 801130c:	e000      	b.n	8011310 <netconn_recv_data_tcp+0x7c>
 801130e:	2301      	movs	r3, #1
 8011310:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8011312:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011314:	f107 0214 	add.w	r2, r7, #20
 8011318:	4619      	mov	r1, r3
 801131a:	68f8      	ldr	r0, [r7, #12]
 801131c:	f7ff ff8a 	bl	8011234 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8011320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011322:	2b00      	cmp	r3, #0
 8011324:	d134      	bne.n	8011390 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8011326:	79fb      	ldrb	r3, [r7, #7]
 8011328:	f003 0310 	and.w	r3, r3, #16
 801132c:	2b00      	cmp	r3, #0
 801132e:	d009      	beq.n	8011344 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	7f1b      	ldrb	r3, [r3, #28]
 8011334:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011338:	b2da      	uxtb	r2, r3
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 801133e:	f06f 0306 	mvn.w	r3, #6
 8011342:	e027      	b.n	8011394 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8011344:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801134a:	2b00      	cmp	r3, #0
 801134c:	d005      	beq.n	801135a <netconn_recv_data_tcp+0xc6>
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011352:	2200      	movs	r2, #0
 8011354:	2101      	movs	r1, #1
 8011356:	68f8      	ldr	r0, [r7, #12]
 8011358:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	685b      	ldr	r3, [r3, #4]
 801135e:	2b00      	cmp	r3, #0
 8011360:	d10f      	bne.n	8011382 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8011362:	68f8      	ldr	r0, [r7, #12]
 8011364:	f000 f914 	bl	8011590 <netconn_err>
 8011368:	4603      	mov	r3, r0
 801136a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 801136e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8011372:	2b00      	cmp	r3, #0
 8011374:	d002      	beq.n	801137c <netconn_recv_data_tcp+0xe8>
          return err;
 8011376:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 801137a:	e00b      	b.n	8011394 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 801137c:	f06f 030d 	mvn.w	r3, #13
 8011380:	e008      	b.n	8011394 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8011382:	2101      	movs	r1, #1
 8011384:	68f8      	ldr	r0, [r7, #12]
 8011386:	f000 f8d3 	bl	8011530 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 801138a:	f06f 030e 	mvn.w	r3, #14
 801138e:	e001      	b.n	8011394 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8011390:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8011394:	4618      	mov	r0, r3
 8011396:	3740      	adds	r7, #64	; 0x40
 8011398:	46bd      	mov	sp, r7
 801139a:	bd80      	pop	{r7, pc}

0801139c <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 801139c:	b580      	push	{r7, lr}
 801139e:	b086      	sub	sp, #24
 80113a0:	af00      	add	r7, sp, #0
 80113a2:	6078      	str	r0, [r7, #4]
 80113a4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 80113a6:	2300      	movs	r3, #0
 80113a8:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80113aa:	683b      	ldr	r3, [r7, #0]
 80113ac:	2b00      	cmp	r3, #0
 80113ae:	d109      	bne.n	80113c4 <netconn_recv+0x28>
 80113b0:	4b32      	ldr	r3, [pc, #200]	; (801147c <netconn_recv+0xe0>)
 80113b2:	f240 3263 	movw	r2, #867	; 0x363
 80113b6:	4932      	ldr	r1, [pc, #200]	; (8011480 <netconn_recv+0xe4>)
 80113b8:	4832      	ldr	r0, [pc, #200]	; (8011484 <netconn_recv+0xe8>)
 80113ba:	f00d fef7 	bl	801f1ac <iprintf>
 80113be:	f06f 030f 	mvn.w	r3, #15
 80113c2:	e056      	b.n	8011472 <netconn_recv+0xd6>
  *new_buf = NULL;
 80113c4:	683b      	ldr	r3, [r7, #0]
 80113c6:	2200      	movs	r2, #0
 80113c8:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d109      	bne.n	80113e4 <netconn_recv+0x48>
 80113d0:	4b2a      	ldr	r3, [pc, #168]	; (801147c <netconn_recv+0xe0>)
 80113d2:	f240 3265 	movw	r2, #869	; 0x365
 80113d6:	492c      	ldr	r1, [pc, #176]	; (8011488 <netconn_recv+0xec>)
 80113d8:	482a      	ldr	r0, [pc, #168]	; (8011484 <netconn_recv+0xe8>)
 80113da:	f00d fee7 	bl	801f1ac <iprintf>
 80113de:	f06f 030f 	mvn.w	r3, #15
 80113e2:	e046      	b.n	8011472 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	781b      	ldrb	r3, [r3, #0]
 80113e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80113ec:	2b10      	cmp	r3, #16
 80113ee:	d13a      	bne.n	8011466 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 80113f0:	2300      	movs	r3, #0
 80113f2:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80113f4:	2006      	movs	r0, #6
 80113f6:	f002 fa5b 	bl	80138b0 <memp_malloc>
 80113fa:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 80113fc:	697b      	ldr	r3, [r7, #20]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d102      	bne.n	8011408 <netconn_recv+0x6c>
      return ERR_MEM;
 8011402:	f04f 33ff 	mov.w	r3, #4294967295
 8011406:	e034      	b.n	8011472 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8011408:	f107 030c 	add.w	r3, r7, #12
 801140c:	2200      	movs	r2, #0
 801140e:	4619      	mov	r1, r3
 8011410:	6878      	ldr	r0, [r7, #4]
 8011412:	f7ff ff3f 	bl	8011294 <netconn_recv_data_tcp>
 8011416:	4603      	mov	r3, r0
 8011418:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801141a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801141e:	2b00      	cmp	r3, #0
 8011420:	d006      	beq.n	8011430 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8011422:	6979      	ldr	r1, [r7, #20]
 8011424:	2006      	movs	r0, #6
 8011426:	f002 fa95 	bl	8013954 <memp_free>
      return err;
 801142a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801142e:	e020      	b.n	8011472 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	2b00      	cmp	r3, #0
 8011434:	d106      	bne.n	8011444 <netconn_recv+0xa8>
 8011436:	4b11      	ldr	r3, [pc, #68]	; (801147c <netconn_recv+0xe0>)
 8011438:	f240 3279 	movw	r2, #889	; 0x379
 801143c:	4913      	ldr	r1, [pc, #76]	; (801148c <netconn_recv+0xf0>)
 801143e:	4811      	ldr	r0, [pc, #68]	; (8011484 <netconn_recv+0xe8>)
 8011440:	f00d feb4 	bl	801f1ac <iprintf>

    buf->p = p;
 8011444:	68fa      	ldr	r2, [r7, #12]
 8011446:	697b      	ldr	r3, [r7, #20]
 8011448:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 801144a:	68fa      	ldr	r2, [r7, #12]
 801144c:	697b      	ldr	r3, [r7, #20]
 801144e:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8011450:	697b      	ldr	r3, [r7, #20]
 8011452:	2200      	movs	r2, #0
 8011454:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8011456:	697b      	ldr	r3, [r7, #20]
 8011458:	2200      	movs	r2, #0
 801145a:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 801145c:	683b      	ldr	r3, [r7, #0]
 801145e:	697a      	ldr	r2, [r7, #20]
 8011460:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8011462:	2300      	movs	r3, #0
 8011464:	e005      	b.n	8011472 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8011466:	2200      	movs	r2, #0
 8011468:	6839      	ldr	r1, [r7, #0]
 801146a:	6878      	ldr	r0, [r7, #4]
 801146c:	f7ff fe1a 	bl	80110a4 <netconn_recv_data>
 8011470:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8011472:	4618      	mov	r0, r3
 8011474:	3718      	adds	r7, #24
 8011476:	46bd      	mov	sp, r7
 8011478:	bd80      	pop	{r7, pc}
 801147a:	bf00      	nop
 801147c:	08023758 	.word	0x08023758
 8011480:	08023970 	.word	0x08023970
 8011484:	080237b0 	.word	0x080237b0
 8011488:	08023990 	.word	0x08023990
 801148c:	08023a08 	.word	0x08023a08

08011490 <netconn_sendto>:
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, const ip_addr_t *addr, u16_t port)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b084      	sub	sp, #16
 8011494:	af00      	add	r7, sp, #0
 8011496:	60f8      	str	r0, [r7, #12]
 8011498:	60b9      	str	r1, [r7, #8]
 801149a:	607a      	str	r2, [r7, #4]
 801149c:	807b      	strh	r3, [r7, #2]
  if (buf != NULL) {
 801149e:	68bb      	ldr	r3, [r7, #8]
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d011      	beq.n	80114c8 <netconn_sendto+0x38>
    ip_addr_set(&buf->addr, addr);
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	2b00      	cmp	r3, #0
 80114a8:	d002      	beq.n	80114b0 <netconn_sendto+0x20>
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	e000      	b.n	80114b2 <netconn_sendto+0x22>
 80114b0:	2300      	movs	r3, #0
 80114b2:	68ba      	ldr	r2, [r7, #8]
 80114b4:	6093      	str	r3, [r2, #8]
    buf->port = port;
 80114b6:	68bb      	ldr	r3, [r7, #8]
 80114b8:	887a      	ldrh	r2, [r7, #2]
 80114ba:	819a      	strh	r2, [r3, #12]
    return netconn_send(conn, buf);
 80114bc:	68b9      	ldr	r1, [r7, #8]
 80114be:	68f8      	ldr	r0, [r7, #12]
 80114c0:	f000 f808 	bl	80114d4 <netconn_send>
 80114c4:	4603      	mov	r3, r0
 80114c6:	e001      	b.n	80114cc <netconn_sendto+0x3c>
  }
  return ERR_VAL;
 80114c8:	f06f 0305 	mvn.w	r3, #5
}
 80114cc:	4618      	mov	r0, r3
 80114ce:	3710      	adds	r7, #16
 80114d0:	46bd      	mov	sp, r7
 80114d2:	bd80      	pop	{r7, pc}

080114d4 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 80114d4:	b580      	push	{r7, lr}
 80114d6:	b08c      	sub	sp, #48	; 0x30
 80114d8:	af00      	add	r7, sp, #0
 80114da:	6078      	str	r0, [r7, #4]
 80114dc:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	d109      	bne.n	80114f8 <netconn_send+0x24>
 80114e4:	4b0e      	ldr	r3, [pc, #56]	; (8011520 <netconn_send+0x4c>)
 80114e6:	f240 32b2 	movw	r2, #946	; 0x3b2
 80114ea:	490e      	ldr	r1, [pc, #56]	; (8011524 <netconn_send+0x50>)
 80114ec:	480e      	ldr	r0, [pc, #56]	; (8011528 <netconn_send+0x54>)
 80114ee:	f00d fe5d 	bl	801f1ac <iprintf>
 80114f2:	f06f 030f 	mvn.w	r3, #15
 80114f6:	e00e      	b.n	8011516 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80114f8:	687b      	ldr	r3, [r7, #4]
 80114fa:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 80114fc:	683b      	ldr	r3, [r7, #0]
 80114fe:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 8011500:	f107 030c 	add.w	r3, r7, #12
 8011504:	4619      	mov	r1, r3
 8011506:	4809      	ldr	r0, [pc, #36]	; (801152c <netconn_send+0x58>)
 8011508:	f7ff fcbc 	bl	8010e84 <netconn_apimsg>
 801150c:	4603      	mov	r3, r0
 801150e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8011512:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8011516:	4618      	mov	r0, r3
 8011518:	3730      	adds	r7, #48	; 0x30
 801151a:	46bd      	mov	sp, r7
 801151c:	bd80      	pop	{r7, pc}
 801151e:	bf00      	nop
 8011520:	08023758 	.word	0x08023758
 8011524:	08023a14 	.word	0x08023a14
 8011528:	080237b0 	.word	0x080237b0
 801152c:	08012491 	.word	0x08012491

08011530 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8011530:	b580      	push	{r7, lr}
 8011532:	b08c      	sub	sp, #48	; 0x30
 8011534:	af00      	add	r7, sp, #0
 8011536:	6078      	str	r0, [r7, #4]
 8011538:	460b      	mov	r3, r1
 801153a:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 801153c:	687b      	ldr	r3, [r7, #4]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d109      	bne.n	8011556 <netconn_close_shutdown+0x26>
 8011542:	4b0f      	ldr	r3, [pc, #60]	; (8011580 <netconn_close_shutdown+0x50>)
 8011544:	f240 4247 	movw	r2, #1095	; 0x447
 8011548:	490e      	ldr	r1, [pc, #56]	; (8011584 <netconn_close_shutdown+0x54>)
 801154a:	480f      	ldr	r0, [pc, #60]	; (8011588 <netconn_close_shutdown+0x58>)
 801154c:	f00d fe2e 	bl	801f1ac <iprintf>
 8011550:	f06f 030f 	mvn.w	r3, #15
 8011554:	e010      	b.n	8011578 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 801155a:	78fb      	ldrb	r3, [r7, #3]
 801155c:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801155e:	2329      	movs	r3, #41	; 0x29
 8011560:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8011562:	f107 030c 	add.w	r3, r7, #12
 8011566:	4619      	mov	r1, r3
 8011568:	4808      	ldr	r0, [pc, #32]	; (801158c <netconn_close_shutdown+0x5c>)
 801156a:	f7ff fc8b 	bl	8010e84 <netconn_apimsg>
 801156e:	4603      	mov	r3, r0
 8011570:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8011574:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8011578:	4618      	mov	r0, r3
 801157a:	3730      	adds	r7, #48	; 0x30
 801157c:	46bd      	mov	sp, r7
 801157e:	bd80      	pop	{r7, pc}
 8011580:	08023758 	.word	0x08023758
 8011584:	08023a94 	.word	0x08023a94
 8011588:	080237b0 	.word	0x080237b0
 801158c:	0801292d 	.word	0x0801292d

08011590 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8011590:	b580      	push	{r7, lr}
 8011592:	b084      	sub	sp, #16
 8011594:	af00      	add	r7, sp, #0
 8011596:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8011598:	687b      	ldr	r3, [r7, #4]
 801159a:	2b00      	cmp	r3, #0
 801159c:	d101      	bne.n	80115a2 <netconn_err+0x12>
    return ERR_OK;
 801159e:	2300      	movs	r3, #0
 80115a0:	e00d      	b.n	80115be <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 80115a2:	f00c fd61 	bl	801e068 <sys_arch_protect>
 80115a6:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	7a1b      	ldrb	r3, [r3, #8]
 80115ac:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	2200      	movs	r2, #0
 80115b2:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 80115b4:	68f8      	ldr	r0, [r7, #12]
 80115b6:	f00c fd65 	bl	801e084 <sys_arch_unprotect>
  return err;
 80115ba:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80115be:	4618      	mov	r0, r3
 80115c0:	3710      	adds	r7, #16
 80115c2:	46bd      	mov	sp, r7
 80115c4:	bd80      	pop	{r7, pc}
	...

080115c8 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 80115c8:	b580      	push	{r7, lr}
 80115ca:	b082      	sub	sp, #8
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	4603      	mov	r3, r0
 80115d0:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 80115d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80115d6:	f113 0f0d 	cmn.w	r3, #13
 80115da:	d009      	beq.n	80115f0 <lwip_netconn_err_to_msg+0x28>
 80115dc:	f113 0f0d 	cmn.w	r3, #13
 80115e0:	dc0c      	bgt.n	80115fc <lwip_netconn_err_to_msg+0x34>
 80115e2:	f113 0f0f 	cmn.w	r3, #15
 80115e6:	d007      	beq.n	80115f8 <lwip_netconn_err_to_msg+0x30>
 80115e8:	f113 0f0e 	cmn.w	r3, #14
 80115ec:	d002      	beq.n	80115f4 <lwip_netconn_err_to_msg+0x2c>
 80115ee:	e005      	b.n	80115fc <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80115f0:	4b0a      	ldr	r3, [pc, #40]	; (801161c <lwip_netconn_err_to_msg+0x54>)
 80115f2:	e00e      	b.n	8011612 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 80115f4:	4b0a      	ldr	r3, [pc, #40]	; (8011620 <lwip_netconn_err_to_msg+0x58>)
 80115f6:	e00c      	b.n	8011612 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80115f8:	4b0a      	ldr	r3, [pc, #40]	; (8011624 <lwip_netconn_err_to_msg+0x5c>)
 80115fa:	e00a      	b.n	8011612 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80115fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8011600:	2b00      	cmp	r3, #0
 8011602:	d005      	beq.n	8011610 <lwip_netconn_err_to_msg+0x48>
 8011604:	4b08      	ldr	r3, [pc, #32]	; (8011628 <lwip_netconn_err_to_msg+0x60>)
 8011606:	227d      	movs	r2, #125	; 0x7d
 8011608:	4908      	ldr	r1, [pc, #32]	; (801162c <lwip_netconn_err_to_msg+0x64>)
 801160a:	4809      	ldr	r0, [pc, #36]	; (8011630 <lwip_netconn_err_to_msg+0x68>)
 801160c:	f00d fdce 	bl	801f1ac <iprintf>
      return NULL;
 8011610:	2300      	movs	r3, #0
  }
}
 8011612:	4618      	mov	r0, r3
 8011614:	3708      	adds	r7, #8
 8011616:	46bd      	mov	sp, r7
 8011618:	bd80      	pop	{r7, pc}
 801161a:	bf00      	nop
 801161c:	08026e0c 	.word	0x08026e0c
 8011620:	08026e0d 	.word	0x08026e0d
 8011624:	08026e0e 	.word	0x08026e0e
 8011628:	08023ab0 	.word	0x08023ab0
 801162c:	08023ae4 	.word	0x08023ae4
 8011630:	08023af4 	.word	0x08023af4

08011634 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8011634:	b580      	push	{r7, lr}
 8011636:	b082      	sub	sp, #8
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
 801163c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 801163e:	683b      	ldr	r3, [r7, #0]
 8011640:	2b00      	cmp	r3, #0
 8011642:	d105      	bne.n	8011650 <lwip_netconn_is_err_msg+0x1c>
 8011644:	4b12      	ldr	r3, [pc, #72]	; (8011690 <lwip_netconn_is_err_msg+0x5c>)
 8011646:	2285      	movs	r2, #133	; 0x85
 8011648:	4912      	ldr	r1, [pc, #72]	; (8011694 <lwip_netconn_is_err_msg+0x60>)
 801164a:	4813      	ldr	r0, [pc, #76]	; (8011698 <lwip_netconn_is_err_msg+0x64>)
 801164c:	f00d fdae 	bl	801f1ac <iprintf>

  if (msg == &netconn_aborted) {
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	4a12      	ldr	r2, [pc, #72]	; (801169c <lwip_netconn_is_err_msg+0x68>)
 8011654:	4293      	cmp	r3, r2
 8011656:	d104      	bne.n	8011662 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8011658:	683b      	ldr	r3, [r7, #0]
 801165a:	22f3      	movs	r2, #243	; 0xf3
 801165c:	701a      	strb	r2, [r3, #0]
    return 1;
 801165e:	2301      	movs	r3, #1
 8011660:	e012      	b.n	8011688 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8011662:	687b      	ldr	r3, [r7, #4]
 8011664:	4a0e      	ldr	r2, [pc, #56]	; (80116a0 <lwip_netconn_is_err_msg+0x6c>)
 8011666:	4293      	cmp	r3, r2
 8011668:	d104      	bne.n	8011674 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 801166a:	683b      	ldr	r3, [r7, #0]
 801166c:	22f2      	movs	r2, #242	; 0xf2
 801166e:	701a      	strb	r2, [r3, #0]
    return 1;
 8011670:	2301      	movs	r3, #1
 8011672:	e009      	b.n	8011688 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	4a0b      	ldr	r2, [pc, #44]	; (80116a4 <lwip_netconn_is_err_msg+0x70>)
 8011678:	4293      	cmp	r3, r2
 801167a:	d104      	bne.n	8011686 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 801167c:	683b      	ldr	r3, [r7, #0]
 801167e:	22f1      	movs	r2, #241	; 0xf1
 8011680:	701a      	strb	r2, [r3, #0]
    return 1;
 8011682:	2301      	movs	r3, #1
 8011684:	e000      	b.n	8011688 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8011686:	2300      	movs	r3, #0
}
 8011688:	4618      	mov	r0, r3
 801168a:	3708      	adds	r7, #8
 801168c:	46bd      	mov	sp, r7
 801168e:	bd80      	pop	{r7, pc}
 8011690:	08023ab0 	.word	0x08023ab0
 8011694:	08023b1c 	.word	0x08023b1c
 8011698:	08023af4 	.word	0x08023af4
 801169c:	08026e0c 	.word	0x08026e0c
 80116a0:	08026e0d 	.word	0x08026e0d
 80116a4:	08026e0e 	.word	0x08026e0e

080116a8 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 80116a8:	b580      	push	{r7, lr}
 80116aa:	b088      	sub	sp, #32
 80116ac:	af00      	add	r7, sp, #0
 80116ae:	60f8      	str	r0, [r7, #12]
 80116b0:	60b9      	str	r1, [r7, #8]
 80116b2:	607a      	str	r2, [r7, #4]
 80116b4:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 80116b6:	68bb      	ldr	r3, [r7, #8]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d105      	bne.n	80116c8 <recv_udp+0x20>
 80116bc:	4b34      	ldr	r3, [pc, #208]	; (8011790 <recv_udp+0xe8>)
 80116be:	22e5      	movs	r2, #229	; 0xe5
 80116c0:	4934      	ldr	r1, [pc, #208]	; (8011794 <recv_udp+0xec>)
 80116c2:	4835      	ldr	r0, [pc, #212]	; (8011798 <recv_udp+0xf0>)
 80116c4:	f00d fd72 	bl	801f1ac <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d105      	bne.n	80116da <recv_udp+0x32>
 80116ce:	4b30      	ldr	r3, [pc, #192]	; (8011790 <recv_udp+0xe8>)
 80116d0:	22e6      	movs	r2, #230	; 0xe6
 80116d2:	4932      	ldr	r1, [pc, #200]	; (801179c <recv_udp+0xf4>)
 80116d4:	4830      	ldr	r0, [pc, #192]	; (8011798 <recv_udp+0xf0>)
 80116d6:	f00d fd69 	bl	801f1ac <iprintf>
  conn = (struct netconn *)arg;
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80116de:	69fb      	ldr	r3, [r7, #28]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d103      	bne.n	80116ec <recv_udp+0x44>
    pbuf_free(p);
 80116e4:	6878      	ldr	r0, [r7, #4]
 80116e6:	f002 ff75 	bl	80145d4 <pbuf_free>
    return;
 80116ea:	e04d      	b.n	8011788 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80116ec:	69fb      	ldr	r3, [r7, #28]
 80116ee:	685b      	ldr	r3, [r3, #4]
 80116f0:	68ba      	ldr	r2, [r7, #8]
 80116f2:	429a      	cmp	r2, r3
 80116f4:	d005      	beq.n	8011702 <recv_udp+0x5a>
 80116f6:	4b26      	ldr	r3, [pc, #152]	; (8011790 <recv_udp+0xe8>)
 80116f8:	22ee      	movs	r2, #238	; 0xee
 80116fa:	4929      	ldr	r1, [pc, #164]	; (80117a0 <recv_udp+0xf8>)
 80116fc:	4826      	ldr	r0, [pc, #152]	; (8011798 <recv_udp+0xf0>)
 80116fe:	f00d fd55 	bl	801f1ac <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011702:	69fb      	ldr	r3, [r7, #28]
 8011704:	3310      	adds	r3, #16
 8011706:	4618      	mov	r0, r3
 8011708:	f00c fb93 	bl	801de32 <sys_mbox_valid>
 801170c:	4603      	mov	r3, r0
 801170e:	2b00      	cmp	r3, #0
 8011710:	d103      	bne.n	801171a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 8011712:	6878      	ldr	r0, [r7, #4]
 8011714:	f002 ff5e 	bl	80145d4 <pbuf_free>
    return;
 8011718:	e036      	b.n	8011788 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 801171a:	2006      	movs	r0, #6
 801171c:	f002 f8c8 	bl	80138b0 <memp_malloc>
 8011720:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 8011722:	69bb      	ldr	r3, [r7, #24]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d103      	bne.n	8011730 <recv_udp+0x88>
    pbuf_free(p);
 8011728:	6878      	ldr	r0, [r7, #4]
 801172a:	f002 ff53 	bl	80145d4 <pbuf_free>
    return;
 801172e:	e02b      	b.n	8011788 <recv_udp+0xe0>
  } else {
    buf->p = p;
 8011730:	69bb      	ldr	r3, [r7, #24]
 8011732:	687a      	ldr	r2, [r7, #4]
 8011734:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8011736:	69bb      	ldr	r3, [r7, #24]
 8011738:	687a      	ldr	r2, [r7, #4]
 801173a:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 801173c:	683b      	ldr	r3, [r7, #0]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d002      	beq.n	8011748 <recv_udp+0xa0>
 8011742:	683b      	ldr	r3, [r7, #0]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	e000      	b.n	801174a <recv_udp+0xa2>
 8011748:	2300      	movs	r3, #0
 801174a:	69ba      	ldr	r2, [r7, #24]
 801174c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 801174e:	69bb      	ldr	r3, [r7, #24]
 8011750:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8011752:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	891b      	ldrh	r3, [r3, #8]
 8011758:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 801175a:	69fb      	ldr	r3, [r7, #28]
 801175c:	3310      	adds	r3, #16
 801175e:	69b9      	ldr	r1, [r7, #24]
 8011760:	4618      	mov	r0, r3
 8011762:	f00c faf1 	bl	801dd48 <sys_mbox_trypost>
 8011766:	4603      	mov	r3, r0
 8011768:	2b00      	cmp	r3, #0
 801176a:	d003      	beq.n	8011774 <recv_udp+0xcc>
    netbuf_delete(buf);
 801176c:	69b8      	ldr	r0, [r7, #24]
 801176e:	f001 f97d 	bl	8012a6c <netbuf_delete>
    return;
 8011772:	e009      	b.n	8011788 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8011774:	69fb      	ldr	r3, [r7, #28]
 8011776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011778:	2b00      	cmp	r3, #0
 801177a:	d005      	beq.n	8011788 <recv_udp+0xe0>
 801177c:	69fb      	ldr	r3, [r7, #28]
 801177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011780:	8afa      	ldrh	r2, [r7, #22]
 8011782:	2100      	movs	r1, #0
 8011784:	69f8      	ldr	r0, [r7, #28]
 8011786:	4798      	blx	r3
  }
}
 8011788:	3720      	adds	r7, #32
 801178a:	46bd      	mov	sp, r7
 801178c:	bd80      	pop	{r7, pc}
 801178e:	bf00      	nop
 8011790:	08023ab0 	.word	0x08023ab0
 8011794:	08023b28 	.word	0x08023b28
 8011798:	08023af4 	.word	0x08023af4
 801179c:	08023b4c 	.word	0x08023b4c
 80117a0:	08023b6c 	.word	0x08023b6c

080117a4 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b088      	sub	sp, #32
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	60f8      	str	r0, [r7, #12]
 80117ac:	60b9      	str	r1, [r7, #8]
 80117ae:	607a      	str	r2, [r7, #4]
 80117b0:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 80117b2:	68bb      	ldr	r3, [r7, #8]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d106      	bne.n	80117c6 <recv_tcp+0x22>
 80117b8:	4b36      	ldr	r3, [pc, #216]	; (8011894 <recv_tcp+0xf0>)
 80117ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80117be:	4936      	ldr	r1, [pc, #216]	; (8011898 <recv_tcp+0xf4>)
 80117c0:	4836      	ldr	r0, [pc, #216]	; (801189c <recv_tcp+0xf8>)
 80117c2:	f00d fcf3 	bl	801f1ac <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d106      	bne.n	80117da <recv_tcp+0x36>
 80117cc:	4b31      	ldr	r3, [pc, #196]	; (8011894 <recv_tcp+0xf0>)
 80117ce:	f240 122d 	movw	r2, #301	; 0x12d
 80117d2:	4933      	ldr	r1, [pc, #204]	; (80118a0 <recv_tcp+0xfc>)
 80117d4:	4831      	ldr	r0, [pc, #196]	; (801189c <recv_tcp+0xf8>)
 80117d6:	f00d fce9 	bl	801f1ac <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80117da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d006      	beq.n	80117f0 <recv_tcp+0x4c>
 80117e2:	4b2c      	ldr	r3, [pc, #176]	; (8011894 <recv_tcp+0xf0>)
 80117e4:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80117e8:	492e      	ldr	r1, [pc, #184]	; (80118a4 <recv_tcp+0x100>)
 80117ea:	482c      	ldr	r0, [pc, #176]	; (801189c <recv_tcp+0xf8>)
 80117ec:	f00d fcde 	bl	801f1ac <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 80117f4:	697b      	ldr	r3, [r7, #20]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d102      	bne.n	8011800 <recv_tcp+0x5c>
    return ERR_VAL;
 80117fa:	f06f 0305 	mvn.w	r3, #5
 80117fe:	e045      	b.n	801188c <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 8011800:	697b      	ldr	r3, [r7, #20]
 8011802:	685b      	ldr	r3, [r3, #4]
 8011804:	68ba      	ldr	r2, [r7, #8]
 8011806:	429a      	cmp	r2, r3
 8011808:	d006      	beq.n	8011818 <recv_tcp+0x74>
 801180a:	4b22      	ldr	r3, [pc, #136]	; (8011894 <recv_tcp+0xf0>)
 801180c:	f240 1235 	movw	r2, #309	; 0x135
 8011810:	4925      	ldr	r1, [pc, #148]	; (80118a8 <recv_tcp+0x104>)
 8011812:	4822      	ldr	r0, [pc, #136]	; (801189c <recv_tcp+0xf8>)
 8011814:	f00d fcca 	bl	801f1ac <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011818:	697b      	ldr	r3, [r7, #20]
 801181a:	3310      	adds	r3, #16
 801181c:	4618      	mov	r0, r3
 801181e:	f00c fb08 	bl	801de32 <sys_mbox_valid>
 8011822:	4603      	mov	r3, r0
 8011824:	2b00      	cmp	r3, #0
 8011826:	d10d      	bne.n	8011844 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d008      	beq.n	8011840 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	891b      	ldrh	r3, [r3, #8]
 8011832:	4619      	mov	r1, r3
 8011834:	68b8      	ldr	r0, [r7, #8]
 8011836:	f003 fdcb 	bl	80153d0 <tcp_recved>
      pbuf_free(p);
 801183a:	6878      	ldr	r0, [r7, #4]
 801183c:	f002 feca 	bl	80145d4 <pbuf_free>
    }
    return ERR_OK;
 8011840:	2300      	movs	r3, #0
 8011842:	e023      	b.n	801188c <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 8011844:	687b      	ldr	r3, [r7, #4]
 8011846:	2b00      	cmp	r3, #0
 8011848:	d005      	beq.n	8011856 <recv_tcp+0xb2>
    msg = p;
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 801184e:	687b      	ldr	r3, [r7, #4]
 8011850:	891b      	ldrh	r3, [r3, #8]
 8011852:	83fb      	strh	r3, [r7, #30]
 8011854:	e003      	b.n	801185e <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 8011856:	4b15      	ldr	r3, [pc, #84]	; (80118ac <recv_tcp+0x108>)
 8011858:	61bb      	str	r3, [r7, #24]
    len = 0;
 801185a:	2300      	movs	r3, #0
 801185c:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 801185e:	697b      	ldr	r3, [r7, #20]
 8011860:	3310      	adds	r3, #16
 8011862:	69b9      	ldr	r1, [r7, #24]
 8011864:	4618      	mov	r0, r3
 8011866:	f00c fa6f 	bl	801dd48 <sys_mbox_trypost>
 801186a:	4603      	mov	r3, r0
 801186c:	2b00      	cmp	r3, #0
 801186e:	d002      	beq.n	8011876 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8011870:	f04f 33ff 	mov.w	r3, #4294967295
 8011874:	e00a      	b.n	801188c <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8011876:	697b      	ldr	r3, [r7, #20]
 8011878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801187a:	2b00      	cmp	r3, #0
 801187c:	d005      	beq.n	801188a <recv_tcp+0xe6>
 801187e:	697b      	ldr	r3, [r7, #20]
 8011880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011882:	8bfa      	ldrh	r2, [r7, #30]
 8011884:	2100      	movs	r1, #0
 8011886:	6978      	ldr	r0, [r7, #20]
 8011888:	4798      	blx	r3
  }

  return ERR_OK;
 801188a:	2300      	movs	r3, #0
}
 801188c:	4618      	mov	r0, r3
 801188e:	3720      	adds	r7, #32
 8011890:	46bd      	mov	sp, r7
 8011892:	bd80      	pop	{r7, pc}
 8011894:	08023ab0 	.word	0x08023ab0
 8011898:	08023b8c 	.word	0x08023b8c
 801189c:	08023af4 	.word	0x08023af4
 80118a0:	08023bb0 	.word	0x08023bb0
 80118a4:	08023bd0 	.word	0x08023bd0
 80118a8:	08023be8 	.word	0x08023be8
 80118ac:	08026e0e 	.word	0x08026e0e

080118b0 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 80118b0:	b580      	push	{r7, lr}
 80118b2:	b084      	sub	sp, #16
 80118b4:	af00      	add	r7, sp, #0
 80118b6:	6078      	str	r0, [r7, #4]
 80118b8:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	2b00      	cmp	r3, #0
 80118c2:	d106      	bne.n	80118d2 <poll_tcp+0x22>
 80118c4:	4b29      	ldr	r3, [pc, #164]	; (801196c <poll_tcp+0xbc>)
 80118c6:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 80118ca:	4929      	ldr	r1, [pc, #164]	; (8011970 <poll_tcp+0xc0>)
 80118cc:	4829      	ldr	r0, [pc, #164]	; (8011974 <poll_tcp+0xc4>)
 80118ce:	f00d fc6d 	bl	801f1ac <iprintf>

  if (conn->state == NETCONN_WRITE) {
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	785b      	ldrb	r3, [r3, #1]
 80118d6:	2b01      	cmp	r3, #1
 80118d8:	d104      	bne.n	80118e4 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80118da:	2101      	movs	r1, #1
 80118dc:	68f8      	ldr	r0, [r7, #12]
 80118de:	f000 fe59 	bl	8012594 <lwip_netconn_do_writemore>
 80118e2:	e016      	b.n	8011912 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80118e4:	68fb      	ldr	r3, [r7, #12]
 80118e6:	785b      	ldrb	r3, [r3, #1]
 80118e8:	2b04      	cmp	r3, #4
 80118ea:	d112      	bne.n	8011912 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	6a1b      	ldr	r3, [r3, #32]
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d00a      	beq.n	801190a <poll_tcp+0x5a>
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	6a1b      	ldr	r3, [r3, #32]
 80118f8:	7a5b      	ldrb	r3, [r3, #9]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d005      	beq.n	801190a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80118fe:	68fb      	ldr	r3, [r7, #12]
 8011900:	6a1b      	ldr	r3, [r3, #32]
 8011902:	7a5a      	ldrb	r2, [r3, #9]
 8011904:	3a01      	subs	r2, #1
 8011906:	b2d2      	uxtb	r2, r2
 8011908:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 801190a:	2101      	movs	r1, #1
 801190c:	68f8      	ldr	r0, [r7, #12]
 801190e:	f000 fb3b 	bl	8011f88 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	7f1b      	ldrb	r3, [r3, #28]
 8011916:	f003 0310 	and.w	r3, r3, #16
 801191a:	2b00      	cmp	r3, #0
 801191c:	d021      	beq.n	8011962 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801191e:	68fb      	ldr	r3, [r7, #12]
 8011920:	685b      	ldr	r3, [r3, #4]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d01d      	beq.n	8011962 <poll_tcp+0xb2>
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	685b      	ldr	r3, [r3, #4]
 801192a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801192e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8011932:	d316      	bcc.n	8011962 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	685b      	ldr	r3, [r3, #4]
 8011938:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 801193c:	2b04      	cmp	r3, #4
 801193e:	d810      	bhi.n	8011962 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8011940:	68fb      	ldr	r3, [r7, #12]
 8011942:	7f1b      	ldrb	r3, [r3, #28]
 8011944:	f023 0310 	bic.w	r3, r3, #16
 8011948:	b2da      	uxtb	r2, r3
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011952:	2b00      	cmp	r3, #0
 8011954:	d005      	beq.n	8011962 <poll_tcp+0xb2>
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801195a:	2200      	movs	r2, #0
 801195c:	2102      	movs	r1, #2
 801195e:	68f8      	ldr	r0, [r7, #12]
 8011960:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8011962:	2300      	movs	r3, #0
}
 8011964:	4618      	mov	r0, r3
 8011966:	3710      	adds	r7, #16
 8011968:	46bd      	mov	sp, r7
 801196a:	bd80      	pop	{r7, pc}
 801196c:	08023ab0 	.word	0x08023ab0
 8011970:	08023c08 	.word	0x08023c08
 8011974:	08023af4 	.word	0x08023af4

08011978 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8011978:	b580      	push	{r7, lr}
 801197a:	b086      	sub	sp, #24
 801197c:	af00      	add	r7, sp, #0
 801197e:	60f8      	str	r0, [r7, #12]
 8011980:	60b9      	str	r1, [r7, #8]
 8011982:	4613      	mov	r3, r2
 8011984:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 801198a:	697b      	ldr	r3, [r7, #20]
 801198c:	2b00      	cmp	r3, #0
 801198e:	d106      	bne.n	801199e <sent_tcp+0x26>
 8011990:	4b20      	ldr	r3, [pc, #128]	; (8011a14 <sent_tcp+0x9c>)
 8011992:	f240 1293 	movw	r2, #403	; 0x193
 8011996:	4920      	ldr	r1, [pc, #128]	; (8011a18 <sent_tcp+0xa0>)
 8011998:	4820      	ldr	r0, [pc, #128]	; (8011a1c <sent_tcp+0xa4>)
 801199a:	f00d fc07 	bl	801f1ac <iprintf>

  if (conn) {
 801199e:	697b      	ldr	r3, [r7, #20]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d032      	beq.n	8011a0a <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 80119a4:	697b      	ldr	r3, [r7, #20]
 80119a6:	785b      	ldrb	r3, [r3, #1]
 80119a8:	2b01      	cmp	r3, #1
 80119aa:	d104      	bne.n	80119b6 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80119ac:	2101      	movs	r1, #1
 80119ae:	6978      	ldr	r0, [r7, #20]
 80119b0:	f000 fdf0 	bl	8012594 <lwip_netconn_do_writemore>
 80119b4:	e007      	b.n	80119c6 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 80119b6:	697b      	ldr	r3, [r7, #20]
 80119b8:	785b      	ldrb	r3, [r3, #1]
 80119ba:	2b04      	cmp	r3, #4
 80119bc:	d103      	bne.n	80119c6 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80119be:	2101      	movs	r1, #1
 80119c0:	6978      	ldr	r0, [r7, #20]
 80119c2:	f000 fae1 	bl	8011f88 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80119c6:	697b      	ldr	r3, [r7, #20]
 80119c8:	685b      	ldr	r3, [r3, #4]
 80119ca:	2b00      	cmp	r3, #0
 80119cc:	d01d      	beq.n	8011a0a <sent_tcp+0x92>
 80119ce:	697b      	ldr	r3, [r7, #20]
 80119d0:	685b      	ldr	r3, [r3, #4]
 80119d2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80119d6:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80119da:	d316      	bcc.n	8011a0a <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80119dc:	697b      	ldr	r3, [r7, #20]
 80119de:	685b      	ldr	r3, [r3, #4]
 80119e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80119e4:	2b04      	cmp	r3, #4
 80119e6:	d810      	bhi.n	8011a0a <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 80119e8:	697b      	ldr	r3, [r7, #20]
 80119ea:	7f1b      	ldrb	r3, [r3, #28]
 80119ec:	f023 0310 	bic.w	r3, r3, #16
 80119f0:	b2da      	uxtb	r2, r3
 80119f2:	697b      	ldr	r3, [r7, #20]
 80119f4:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80119f6:	697b      	ldr	r3, [r7, #20]
 80119f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119fa:	2b00      	cmp	r3, #0
 80119fc:	d005      	beq.n	8011a0a <sent_tcp+0x92>
 80119fe:	697b      	ldr	r3, [r7, #20]
 8011a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a02:	88fa      	ldrh	r2, [r7, #6]
 8011a04:	2102      	movs	r1, #2
 8011a06:	6978      	ldr	r0, [r7, #20]
 8011a08:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8011a0a:	2300      	movs	r3, #0
}
 8011a0c:	4618      	mov	r0, r3
 8011a0e:	3718      	adds	r7, #24
 8011a10:	46bd      	mov	sp, r7
 8011a12:	bd80      	pop	{r7, pc}
 8011a14:	08023ab0 	.word	0x08023ab0
 8011a18:	08023c08 	.word	0x08023c08
 8011a1c:	08023af4 	.word	0x08023af4

08011a20 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8011a20:	b580      	push	{r7, lr}
 8011a22:	b088      	sub	sp, #32
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	6078      	str	r0, [r7, #4]
 8011a28:	460b      	mov	r3, r1
 8011a2a:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8011a30:	69fb      	ldr	r3, [r7, #28]
 8011a32:	2b00      	cmp	r3, #0
 8011a34:	d106      	bne.n	8011a44 <err_tcp+0x24>
 8011a36:	4b5f      	ldr	r3, [pc, #380]	; (8011bb4 <err_tcp+0x194>)
 8011a38:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8011a3c:	495e      	ldr	r1, [pc, #376]	; (8011bb8 <err_tcp+0x198>)
 8011a3e:	485f      	ldr	r0, [pc, #380]	; (8011bbc <err_tcp+0x19c>)
 8011a40:	f00d fbb4 	bl	801f1ac <iprintf>

  SYS_ARCH_PROTECT(lev);
 8011a44:	f00c fb10 	bl	801e068 <sys_arch_protect>
 8011a48:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8011a4a:	69fb      	ldr	r3, [r7, #28]
 8011a4c:	2200      	movs	r2, #0
 8011a4e:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8011a50:	69fb      	ldr	r3, [r7, #28]
 8011a52:	78fa      	ldrb	r2, [r7, #3]
 8011a54:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8011a56:	69fb      	ldr	r3, [r7, #28]
 8011a58:	7f1b      	ldrb	r3, [r3, #28]
 8011a5a:	f043 0301 	orr.w	r3, r3, #1
 8011a5e:	b2da      	uxtb	r2, r3
 8011a60:	69fb      	ldr	r3, [r7, #28]
 8011a62:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8011a64:	69fb      	ldr	r3, [r7, #28]
 8011a66:	785b      	ldrb	r3, [r3, #1]
 8011a68:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8011a6a:	69fb      	ldr	r3, [r7, #28]
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8011a70:	69b8      	ldr	r0, [r7, #24]
 8011a72:	f00c fb07 	bl	801e084 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8011a76:	69fb      	ldr	r3, [r7, #28]
 8011a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d005      	beq.n	8011a8a <err_tcp+0x6a>
 8011a7e:	69fb      	ldr	r3, [r7, #28]
 8011a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a82:	2200      	movs	r2, #0
 8011a84:	2104      	movs	r1, #4
 8011a86:	69f8      	ldr	r0, [r7, #28]
 8011a88:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8011a8a:	69fb      	ldr	r3, [r7, #28]
 8011a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a8e:	2b00      	cmp	r3, #0
 8011a90:	d005      	beq.n	8011a9e <err_tcp+0x7e>
 8011a92:	69fb      	ldr	r3, [r7, #28]
 8011a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a96:	2200      	movs	r2, #0
 8011a98:	2100      	movs	r1, #0
 8011a9a:	69f8      	ldr	r0, [r7, #28]
 8011a9c:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8011a9e:	69fb      	ldr	r3, [r7, #28]
 8011aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011aa2:	2b00      	cmp	r3, #0
 8011aa4:	d005      	beq.n	8011ab2 <err_tcp+0x92>
 8011aa6:	69fb      	ldr	r3, [r7, #28]
 8011aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011aaa:	2200      	movs	r2, #0
 8011aac:	2102      	movs	r1, #2
 8011aae:	69f8      	ldr	r0, [r7, #28]
 8011ab0:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8011ab2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011ab6:	4618      	mov	r0, r3
 8011ab8:	f7ff fd86 	bl	80115c8 <lwip_netconn_err_to_msg>
 8011abc:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8011abe:	69fb      	ldr	r3, [r7, #28]
 8011ac0:	3310      	adds	r3, #16
 8011ac2:	4618      	mov	r0, r3
 8011ac4:	f00c f9b5 	bl	801de32 <sys_mbox_valid>
 8011ac8:	4603      	mov	r3, r0
 8011aca:	2b00      	cmp	r3, #0
 8011acc:	d005      	beq.n	8011ada <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8011ace:	69fb      	ldr	r3, [r7, #28]
 8011ad0:	3310      	adds	r3, #16
 8011ad2:	6939      	ldr	r1, [r7, #16]
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	f00c f937 	bl	801dd48 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8011ada:	69fb      	ldr	r3, [r7, #28]
 8011adc:	3314      	adds	r3, #20
 8011ade:	4618      	mov	r0, r3
 8011ae0:	f00c f9a7 	bl	801de32 <sys_mbox_valid>
 8011ae4:	4603      	mov	r3, r0
 8011ae6:	2b00      	cmp	r3, #0
 8011ae8:	d005      	beq.n	8011af6 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8011aea:	69fb      	ldr	r3, [r7, #28]
 8011aec:	3314      	adds	r3, #20
 8011aee:	6939      	ldr	r1, [r7, #16]
 8011af0:	4618      	mov	r0, r3
 8011af2:	f00c f929 	bl	801dd48 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8011af6:	7dfb      	ldrb	r3, [r7, #23]
 8011af8:	2b01      	cmp	r3, #1
 8011afa:	d005      	beq.n	8011b08 <err_tcp+0xe8>
 8011afc:	7dfb      	ldrb	r3, [r7, #23]
 8011afe:	2b04      	cmp	r3, #4
 8011b00:	d002      	beq.n	8011b08 <err_tcp+0xe8>
 8011b02:	7dfb      	ldrb	r3, [r7, #23]
 8011b04:	2b03      	cmp	r3, #3
 8011b06:	d143      	bne.n	8011b90 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8011b08:	69fb      	ldr	r3, [r7, #28]
 8011b0a:	7f1b      	ldrb	r3, [r3, #28]
 8011b0c:	f003 0304 	and.w	r3, r3, #4
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	bf14      	ite	ne
 8011b14:	2301      	movne	r3, #1
 8011b16:	2300      	moveq	r3, #0
 8011b18:	b2db      	uxtb	r3, r3
 8011b1a:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8011b1c:	69fb      	ldr	r3, [r7, #28]
 8011b1e:	7f1b      	ldrb	r3, [r3, #28]
 8011b20:	f023 0304 	bic.w	r3, r3, #4
 8011b24:	b2da      	uxtb	r2, r3
 8011b26:	69fb      	ldr	r3, [r7, #28]
 8011b28:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8011b2a:	68fb      	ldr	r3, [r7, #12]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d13b      	bne.n	8011ba8 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8011b30:	69fb      	ldr	r3, [r7, #28]
 8011b32:	6a1b      	ldr	r3, [r3, #32]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d106      	bne.n	8011b46 <err_tcp+0x126>
 8011b38:	4b1e      	ldr	r3, [pc, #120]	; (8011bb4 <err_tcp+0x194>)
 8011b3a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011b3e:	4920      	ldr	r1, [pc, #128]	; (8011bc0 <err_tcp+0x1a0>)
 8011b40:	481e      	ldr	r0, [pc, #120]	; (8011bbc <err_tcp+0x19c>)
 8011b42:	f00d fb33 	bl	801f1ac <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8011b46:	7dfb      	ldrb	r3, [r7, #23]
 8011b48:	2b04      	cmp	r3, #4
 8011b4a:	d104      	bne.n	8011b56 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8011b4c:	69fb      	ldr	r3, [r7, #28]
 8011b4e:	6a1b      	ldr	r3, [r3, #32]
 8011b50:	2200      	movs	r2, #0
 8011b52:	711a      	strb	r2, [r3, #4]
 8011b54:	e003      	b.n	8011b5e <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8011b56:	69fb      	ldr	r3, [r7, #28]
 8011b58:	6a1b      	ldr	r3, [r3, #32]
 8011b5a:	78fa      	ldrb	r2, [r7, #3]
 8011b5c:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8011b5e:	69fb      	ldr	r3, [r7, #28]
 8011b60:	6a1b      	ldr	r3, [r3, #32]
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	330c      	adds	r3, #12
 8011b66:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8011b68:	68b8      	ldr	r0, [r7, #8]
 8011b6a:	f00c f9f3 	bl	801df54 <sys_sem_valid>
 8011b6e:	4603      	mov	r3, r0
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d106      	bne.n	8011b82 <err_tcp+0x162>
 8011b74:	4b0f      	ldr	r3, [pc, #60]	; (8011bb4 <err_tcp+0x194>)
 8011b76:	f240 12ef 	movw	r2, #495	; 0x1ef
 8011b7a:	4912      	ldr	r1, [pc, #72]	; (8011bc4 <err_tcp+0x1a4>)
 8011b7c:	480f      	ldr	r0, [pc, #60]	; (8011bbc <err_tcp+0x19c>)
 8011b7e:	f00d fb15 	bl	801f1ac <iprintf>
      conn->current_msg = NULL;
 8011b82:	69fb      	ldr	r3, [r7, #28]
 8011b84:	2200      	movs	r2, #0
 8011b86:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8011b88:	68b8      	ldr	r0, [r7, #8]
 8011b8a:	f00c f9c9 	bl	801df20 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8011b8e:	e00b      	b.n	8011ba8 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8011b90:	69fb      	ldr	r3, [r7, #28]
 8011b92:	6a1b      	ldr	r3, [r3, #32]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d008      	beq.n	8011baa <err_tcp+0x18a>
 8011b98:	4b06      	ldr	r3, [pc, #24]	; (8011bb4 <err_tcp+0x194>)
 8011b9a:	f240 12f7 	movw	r2, #503	; 0x1f7
 8011b9e:	490a      	ldr	r1, [pc, #40]	; (8011bc8 <err_tcp+0x1a8>)
 8011ba0:	4806      	ldr	r0, [pc, #24]	; (8011bbc <err_tcp+0x19c>)
 8011ba2:	f00d fb03 	bl	801f1ac <iprintf>
  }
}
 8011ba6:	e000      	b.n	8011baa <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8011ba8:	bf00      	nop
}
 8011baa:	bf00      	nop
 8011bac:	3720      	adds	r7, #32
 8011bae:	46bd      	mov	sp, r7
 8011bb0:	bd80      	pop	{r7, pc}
 8011bb2:	bf00      	nop
 8011bb4:	08023ab0 	.word	0x08023ab0
 8011bb8:	08023c08 	.word	0x08023c08
 8011bbc:	08023af4 	.word	0x08023af4
 8011bc0:	08023c18 	.word	0x08023c18
 8011bc4:	08023c34 	.word	0x08023c34
 8011bc8:	08023c50 	.word	0x08023c50

08011bcc <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	b084      	sub	sp, #16
 8011bd0:	af00      	add	r7, sp, #0
 8011bd2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8011bd4:	687b      	ldr	r3, [r7, #4]
 8011bd6:	685b      	ldr	r3, [r3, #4]
 8011bd8:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8011bda:	6879      	ldr	r1, [r7, #4]
 8011bdc:	68f8      	ldr	r0, [r7, #12]
 8011bde:	f004 fabd 	bl	801615c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8011be2:	490a      	ldr	r1, [pc, #40]	; (8011c0c <setup_tcp+0x40>)
 8011be4:	68f8      	ldr	r0, [r7, #12]
 8011be6:	f004 facb 	bl	8016180 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8011bea:	4909      	ldr	r1, [pc, #36]	; (8011c10 <setup_tcp+0x44>)
 8011bec:	68f8      	ldr	r0, [r7, #12]
 8011bee:	f004 fae9 	bl	80161c4 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8011bf2:	2202      	movs	r2, #2
 8011bf4:	4907      	ldr	r1, [pc, #28]	; (8011c14 <setup_tcp+0x48>)
 8011bf6:	68f8      	ldr	r0, [r7, #12]
 8011bf8:	f004 fb40 	bl	801627c <tcp_poll>
  tcp_err(pcb, err_tcp);
 8011bfc:	4906      	ldr	r1, [pc, #24]	; (8011c18 <setup_tcp+0x4c>)
 8011bfe:	68f8      	ldr	r0, [r7, #12]
 8011c00:	f004 fb02 	bl	8016208 <tcp_err>
}
 8011c04:	bf00      	nop
 8011c06:	3710      	adds	r7, #16
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	bd80      	pop	{r7, pc}
 8011c0c:	080117a5 	.word	0x080117a5
 8011c10:	08011979 	.word	0x08011979
 8011c14:	080118b1 	.word	0x080118b1
 8011c18:	08011a21 	.word	0x08011a21

08011c1c <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8011c1c:	b590      	push	{r4, r7, lr}
 8011c1e:	b085      	sub	sp, #20
 8011c20:	af00      	add	r7, sp, #0
 8011c22:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8011c24:	2300      	movs	r3, #0
 8011c26:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	681b      	ldr	r3, [r3, #0]
 8011c2c:	685b      	ldr	r3, [r3, #4]
 8011c2e:	2b00      	cmp	r3, #0
 8011c30:	d006      	beq.n	8011c40 <pcb_new+0x24>
 8011c32:	4b2b      	ldr	r3, [pc, #172]	; (8011ce0 <pcb_new+0xc4>)
 8011c34:	f240 2265 	movw	r2, #613	; 0x265
 8011c38:	492a      	ldr	r1, [pc, #168]	; (8011ce4 <pcb_new+0xc8>)
 8011c3a:	482b      	ldr	r0, [pc, #172]	; (8011ce8 <pcb_new+0xcc>)
 8011c3c:	f00d fab6 	bl	801f1ac <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	781b      	ldrb	r3, [r3, #0]
 8011c46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011c4a:	2b10      	cmp	r3, #16
 8011c4c:	d022      	beq.n	8011c94 <pcb_new+0x78>
 8011c4e:	2b20      	cmp	r3, #32
 8011c50:	d133      	bne.n	8011cba <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8011c52:	687b      	ldr	r3, [r7, #4]
 8011c54:	681c      	ldr	r4, [r3, #0]
 8011c56:	7bfb      	ldrb	r3, [r7, #15]
 8011c58:	4618      	mov	r0, r3
 8011c5a:	f009 fd44 	bl	801b6e6 <udp_new_ip_type>
 8011c5e:	4603      	mov	r3, r0
 8011c60:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	685b      	ldr	r3, [r3, #4]
 8011c68:	2b00      	cmp	r3, #0
 8011c6a:	d02a      	beq.n	8011cc2 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	681b      	ldr	r3, [r3, #0]
 8011c70:	781b      	ldrb	r3, [r3, #0]
 8011c72:	2b22      	cmp	r3, #34	; 0x22
 8011c74:	d104      	bne.n	8011c80 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	681b      	ldr	r3, [r3, #0]
 8011c7a:	685b      	ldr	r3, [r3, #4]
 8011c7c:	2201      	movs	r2, #1
 8011c7e:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8011c80:	687b      	ldr	r3, [r7, #4]
 8011c82:	681b      	ldr	r3, [r3, #0]
 8011c84:	6858      	ldr	r0, [r3, #4]
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	461a      	mov	r2, r3
 8011c8c:	4917      	ldr	r1, [pc, #92]	; (8011cec <pcb_new+0xd0>)
 8011c8e:	f009 fcb1 	bl	801b5f4 <udp_recv>
      }
      break;
 8011c92:	e016      	b.n	8011cc2 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	681c      	ldr	r4, [r3, #0]
 8011c98:	7bfb      	ldrb	r3, [r7, #15]
 8011c9a:	4618      	mov	r0, r3
 8011c9c:	f004 fa50 	bl	8016140 <tcp_new_ip_type>
 8011ca0:	4603      	mov	r3, r0
 8011ca2:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	685b      	ldr	r3, [r3, #4]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d00b      	beq.n	8011cc6 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8011cae:	687b      	ldr	r3, [r7, #4]
 8011cb0:	681b      	ldr	r3, [r3, #0]
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	f7ff ff8a 	bl	8011bcc <setup_tcp>
      }
      break;
 8011cb8:	e005      	b.n	8011cc6 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	22fa      	movs	r2, #250	; 0xfa
 8011cbe:	711a      	strb	r2, [r3, #4]
      return;
 8011cc0:	e00a      	b.n	8011cd8 <pcb_new+0xbc>
      break;
 8011cc2:	bf00      	nop
 8011cc4:	e000      	b.n	8011cc8 <pcb_new+0xac>
      break;
 8011cc6:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	685b      	ldr	r3, [r3, #4]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d102      	bne.n	8011cd8 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8011cd2:	687b      	ldr	r3, [r7, #4]
 8011cd4:	22ff      	movs	r2, #255	; 0xff
 8011cd6:	711a      	strb	r2, [r3, #4]
  }
}
 8011cd8:	3714      	adds	r7, #20
 8011cda:	46bd      	mov	sp, r7
 8011cdc:	bd90      	pop	{r4, r7, pc}
 8011cde:	bf00      	nop
 8011ce0:	08023ab0 	.word	0x08023ab0
 8011ce4:	08023c94 	.word	0x08023c94
 8011ce8:	08023af4 	.word	0x08023af4
 8011cec:	080116a9 	.word	0x080116a9

08011cf0 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8011cf0:	b580      	push	{r7, lr}
 8011cf2:	b084      	sub	sp, #16
 8011cf4:	af00      	add	r7, sp, #0
 8011cf6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8011cfc:	68fb      	ldr	r3, [r7, #12]
 8011cfe:	2200      	movs	r2, #0
 8011d00:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	681b      	ldr	r3, [r3, #0]
 8011d06:	685b      	ldr	r3, [r3, #4]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d102      	bne.n	8011d12 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8011d0c:	68f8      	ldr	r0, [r7, #12]
 8011d0e:	f7ff ff85 	bl	8011c1c <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8011d12:	bf00      	nop
 8011d14:	3710      	adds	r7, #16
 8011d16:	46bd      	mov	sp, r7
 8011d18:	bd80      	pop	{r7, pc}
	...

08011d1c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8011d1c:	b580      	push	{r7, lr}
 8011d1e:	b086      	sub	sp, #24
 8011d20:	af00      	add	r7, sp, #0
 8011d22:	4603      	mov	r3, r0
 8011d24:	6039      	str	r1, [r7, #0]
 8011d26:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8011d28:	2300      	movs	r3, #0
 8011d2a:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8011d2c:	2007      	movs	r0, #7
 8011d2e:	f001 fdbf 	bl	80138b0 <memp_malloc>
 8011d32:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d101      	bne.n	8011d3e <netconn_alloc+0x22>
    return NULL;
 8011d3a:	2300      	movs	r3, #0
 8011d3c:	e052      	b.n	8011de4 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8011d3e:	68fb      	ldr	r3, [r7, #12]
 8011d40:	2200      	movs	r2, #0
 8011d42:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8011d44:	68fb      	ldr	r3, [r7, #12]
 8011d46:	79fa      	ldrb	r2, [r7, #7]
 8011d48:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8011d4a:	68fb      	ldr	r3, [r7, #12]
 8011d4c:	2200      	movs	r2, #0
 8011d4e:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8011d50:	79fb      	ldrb	r3, [r7, #7]
 8011d52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011d56:	2b10      	cmp	r3, #16
 8011d58:	d004      	beq.n	8011d64 <netconn_alloc+0x48>
 8011d5a:	2b20      	cmp	r3, #32
 8011d5c:	d105      	bne.n	8011d6a <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8011d5e:	2306      	movs	r3, #6
 8011d60:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8011d62:	e00a      	b.n	8011d7a <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8011d64:	2306      	movs	r3, #6
 8011d66:	617b      	str	r3, [r7, #20]
      break;
 8011d68:	e007      	b.n	8011d7a <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8011d6a:	4b20      	ldr	r3, [pc, #128]	; (8011dec <netconn_alloc+0xd0>)
 8011d6c:	f240 22e5 	movw	r2, #741	; 0x2e5
 8011d70:	491f      	ldr	r1, [pc, #124]	; (8011df0 <netconn_alloc+0xd4>)
 8011d72:	4820      	ldr	r0, [pc, #128]	; (8011df4 <netconn_alloc+0xd8>)
 8011d74:	f00d fa1a 	bl	801f1ac <iprintf>
      goto free_and_return;
 8011d78:	e02f      	b.n	8011dda <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8011d7a:	68fb      	ldr	r3, [r7, #12]
 8011d7c:	3310      	adds	r3, #16
 8011d7e:	6979      	ldr	r1, [r7, #20]
 8011d80:	4618      	mov	r0, r3
 8011d82:	f00b ffad 	bl	801dce0 <sys_mbox_new>
 8011d86:	4603      	mov	r3, r0
 8011d88:	2b00      	cmp	r3, #0
 8011d8a:	d125      	bne.n	8011dd8 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	330c      	adds	r3, #12
 8011d90:	2100      	movs	r1, #0
 8011d92:	4618      	mov	r0, r3
 8011d94:	f00c f86b 	bl	801de6e <sys_sem_new>
 8011d98:	4603      	mov	r3, r0
 8011d9a:	2b00      	cmp	r3, #0
 8011d9c:	d005      	beq.n	8011daa <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8011d9e:	68fb      	ldr	r3, [r7, #12]
 8011da0:	3310      	adds	r3, #16
 8011da2:	4618      	mov	r0, r3
 8011da4:	f00b ffbe 	bl	801dd24 <sys_mbox_free>
    goto free_and_return;
 8011da8:	e017      	b.n	8011dda <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8011daa:	68fb      	ldr	r3, [r7, #12]
 8011dac:	3314      	adds	r3, #20
 8011dae:	4618      	mov	r0, r3
 8011db0:	f00c f850 	bl	801de54 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	2200      	movs	r2, #0
 8011db8:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8011dba:	68fb      	ldr	r3, [r7, #12]
 8011dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8011dc0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8011dc2:	68fb      	ldr	r3, [r7, #12]
 8011dc4:	683a      	ldr	r2, [r7, #0]
 8011dc6:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8011dc8:	68fb      	ldr	r3, [r7, #12]
 8011dca:	2200      	movs	r2, #0
 8011dcc:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 8011dce:	68fb      	ldr	r3, [r7, #12]
 8011dd0:	7cfa      	ldrb	r2, [r7, #19]
 8011dd2:	771a      	strb	r2, [r3, #28]
  return conn;
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	e005      	b.n	8011de4 <netconn_alloc+0xc8>
    goto free_and_return;
 8011dd8:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8011dda:	68f9      	ldr	r1, [r7, #12]
 8011ddc:	2007      	movs	r0, #7
 8011dde:	f001 fdb9 	bl	8013954 <memp_free>
  return NULL;
 8011de2:	2300      	movs	r3, #0
}
 8011de4:	4618      	mov	r0, r3
 8011de6:	3718      	adds	r7, #24
 8011de8:	46bd      	mov	sp, r7
 8011dea:	bd80      	pop	{r7, pc}
 8011dec:	08023ab0 	.word	0x08023ab0
 8011df0:	08023cb4 	.word	0x08023cb4
 8011df4:	08023af4 	.word	0x08023af4

08011df8 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8011df8:	b580      	push	{r7, lr}
 8011dfa:	b082      	sub	sp, #8
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	685b      	ldr	r3, [r3, #4]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d006      	beq.n	8011e16 <netconn_free+0x1e>
 8011e08:	4b1b      	ldr	r3, [pc, #108]	; (8011e78 <netconn_free+0x80>)
 8011e0a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8011e0e:	491b      	ldr	r1, [pc, #108]	; (8011e7c <netconn_free+0x84>)
 8011e10:	481b      	ldr	r0, [pc, #108]	; (8011e80 <netconn_free+0x88>)
 8011e12:	f00d f9cb 	bl	801f1ac <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	3310      	adds	r3, #16
 8011e1a:	4618      	mov	r0, r3
 8011e1c:	f00c f809 	bl	801de32 <sys_mbox_valid>
 8011e20:	4603      	mov	r3, r0
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d006      	beq.n	8011e34 <netconn_free+0x3c>
 8011e26:	4b14      	ldr	r3, [pc, #80]	; (8011e78 <netconn_free+0x80>)
 8011e28:	f240 3223 	movw	r2, #803	; 0x323
 8011e2c:	4915      	ldr	r1, [pc, #84]	; (8011e84 <netconn_free+0x8c>)
 8011e2e:	4814      	ldr	r0, [pc, #80]	; (8011e80 <netconn_free+0x88>)
 8011e30:	f00d f9bc 	bl	801f1ac <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	3314      	adds	r3, #20
 8011e38:	4618      	mov	r0, r3
 8011e3a:	f00b fffa 	bl	801de32 <sys_mbox_valid>
 8011e3e:	4603      	mov	r3, r0
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d006      	beq.n	8011e52 <netconn_free+0x5a>
 8011e44:	4b0c      	ldr	r3, [pc, #48]	; (8011e78 <netconn_free+0x80>)
 8011e46:	f240 3226 	movw	r2, #806	; 0x326
 8011e4a:	490f      	ldr	r1, [pc, #60]	; (8011e88 <netconn_free+0x90>)
 8011e4c:	480c      	ldr	r0, [pc, #48]	; (8011e80 <netconn_free+0x88>)
 8011e4e:	f00d f9ad 	bl	801f1ac <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8011e52:	687b      	ldr	r3, [r7, #4]
 8011e54:	330c      	adds	r3, #12
 8011e56:	4618      	mov	r0, r3
 8011e58:	f00c f86f 	bl	801df3a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	330c      	adds	r3, #12
 8011e60:	4618      	mov	r0, r3
 8011e62:	f00c f888 	bl	801df76 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8011e66:	6879      	ldr	r1, [r7, #4]
 8011e68:	2007      	movs	r0, #7
 8011e6a:	f001 fd73 	bl	8013954 <memp_free>
}
 8011e6e:	bf00      	nop
 8011e70:	3708      	adds	r7, #8
 8011e72:	46bd      	mov	sp, r7
 8011e74:	bd80      	pop	{r7, pc}
 8011e76:	bf00      	nop
 8011e78:	08023ab0 	.word	0x08023ab0
 8011e7c:	08023cdc 	.word	0x08023cdc
 8011e80:	08023af4 	.word	0x08023af4
 8011e84:	08023d0c 	.word	0x08023d0c
 8011e88:	08023d48 	.word	0x08023d48

08011e8c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	b086      	sub	sp, #24
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	3310      	adds	r3, #16
 8011e98:	4618      	mov	r0, r3
 8011e9a:	f00b ffca 	bl	801de32 <sys_mbox_valid>
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d02f      	beq.n	8011f04 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8011ea4:	e018      	b.n	8011ed8 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	781b      	ldrb	r3, [r3, #0]
 8011eaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011eae:	2b10      	cmp	r3, #16
 8011eb0:	d10e      	bne.n	8011ed0 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 8011eb2:	693b      	ldr	r3, [r7, #16]
 8011eb4:	f107 020f 	add.w	r2, r7, #15
 8011eb8:	4611      	mov	r1, r2
 8011eba:	4618      	mov	r0, r3
 8011ebc:	f7ff fbba 	bl	8011634 <lwip_netconn_is_err_msg>
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d108      	bne.n	8011ed8 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8011ec6:	693b      	ldr	r3, [r7, #16]
 8011ec8:	4618      	mov	r0, r3
 8011eca:	f002 fb83 	bl	80145d4 <pbuf_free>
 8011ece:	e003      	b.n	8011ed8 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8011ed0:	693b      	ldr	r3, [r7, #16]
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	f000 fdca 	bl	8012a6c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	3310      	adds	r3, #16
 8011edc:	f107 0210 	add.w	r2, r7, #16
 8011ee0:	4611      	mov	r1, r2
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	f00b ff89 	bl	801ddfa <sys_arch_mbox_tryfetch>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011eee:	d1da      	bne.n	8011ea6 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8011ef0:	687b      	ldr	r3, [r7, #4]
 8011ef2:	3310      	adds	r3, #16
 8011ef4:	4618      	mov	r0, r3
 8011ef6:	f00b ff15 	bl	801dd24 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	3310      	adds	r3, #16
 8011efe:	4618      	mov	r0, r3
 8011f00:	f00b ffa8 	bl	801de54 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	3314      	adds	r3, #20
 8011f08:	4618      	mov	r0, r3
 8011f0a:	f00b ff92 	bl	801de32 <sys_mbox_valid>
 8011f0e:	4603      	mov	r3, r0
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d034      	beq.n	8011f7e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8011f14:	e01d      	b.n	8011f52 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8011f16:	693b      	ldr	r3, [r7, #16]
 8011f18:	f107 020e 	add.w	r2, r7, #14
 8011f1c:	4611      	mov	r1, r2
 8011f1e:	4618      	mov	r0, r3
 8011f20:	f7ff fb88 	bl	8011634 <lwip_netconn_is_err_msg>
 8011f24:	4603      	mov	r3, r0
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d113      	bne.n	8011f52 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 8011f2a:	693b      	ldr	r3, [r7, #16]
 8011f2c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 8011f2e:	6978      	ldr	r0, [r7, #20]
 8011f30:	f7ff ffac 	bl	8011e8c <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8011f34:	697b      	ldr	r3, [r7, #20]
 8011f36:	685b      	ldr	r3, [r3, #4]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d007      	beq.n	8011f4c <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 8011f3c:	697b      	ldr	r3, [r7, #20]
 8011f3e:	685b      	ldr	r3, [r3, #4]
 8011f40:	4618      	mov	r0, r3
 8011f42:	f003 f947 	bl	80151d4 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8011f46:	697b      	ldr	r3, [r7, #20]
 8011f48:	2200      	movs	r2, #0
 8011f4a:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 8011f4c:	6978      	ldr	r0, [r7, #20]
 8011f4e:	f7ff ff53 	bl	8011df8 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8011f52:	687b      	ldr	r3, [r7, #4]
 8011f54:	3314      	adds	r3, #20
 8011f56:	f107 0210 	add.w	r2, r7, #16
 8011f5a:	4611      	mov	r1, r2
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	f00b ff4c 	bl	801ddfa <sys_arch_mbox_tryfetch>
 8011f62:	4603      	mov	r3, r0
 8011f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f68:	d1d5      	bne.n	8011f16 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	3314      	adds	r3, #20
 8011f6e:	4618      	mov	r0, r3
 8011f70:	f00b fed8 	bl	801dd24 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8011f74:	687b      	ldr	r3, [r7, #4]
 8011f76:	3314      	adds	r3, #20
 8011f78:	4618      	mov	r0, r3
 8011f7a:	f00b ff6b 	bl	801de54 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8011f7e:	bf00      	nop
 8011f80:	3718      	adds	r7, #24
 8011f82:	46bd      	mov	sp, r7
 8011f84:	bd80      	pop	{r7, pc}
	...

08011f88 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b086      	sub	sp, #24
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
 8011f90:	460b      	mov	r3, r1
 8011f92:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 8011f94:	2300      	movs	r3, #0
 8011f96:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8011f98:	687b      	ldr	r3, [r7, #4]
 8011f9a:	2b00      	cmp	r3, #0
 8011f9c:	d106      	bne.n	8011fac <lwip_netconn_do_close_internal+0x24>
 8011f9e:	4ba1      	ldr	r3, [pc, #644]	; (8012224 <lwip_netconn_do_close_internal+0x29c>)
 8011fa0:	f240 32a2 	movw	r2, #930	; 0x3a2
 8011fa4:	49a0      	ldr	r1, [pc, #640]	; (8012228 <lwip_netconn_do_close_internal+0x2a0>)
 8011fa6:	48a1      	ldr	r0, [pc, #644]	; (801222c <lwip_netconn_do_close_internal+0x2a4>)
 8011fa8:	f00d f900 	bl	801f1ac <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	781b      	ldrb	r3, [r3, #0]
 8011fb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011fb4:	2b10      	cmp	r3, #16
 8011fb6:	d006      	beq.n	8011fc6 <lwip_netconn_do_close_internal+0x3e>
 8011fb8:	4b9a      	ldr	r3, [pc, #616]	; (8012224 <lwip_netconn_do_close_internal+0x29c>)
 8011fba:	f240 32a3 	movw	r2, #931	; 0x3a3
 8011fbe:	499c      	ldr	r1, [pc, #624]	; (8012230 <lwip_netconn_do_close_internal+0x2a8>)
 8011fc0:	489a      	ldr	r0, [pc, #616]	; (801222c <lwip_netconn_do_close_internal+0x2a4>)
 8011fc2:	f00d f8f3 	bl	801f1ac <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	785b      	ldrb	r3, [r3, #1]
 8011fca:	2b04      	cmp	r3, #4
 8011fcc:	d006      	beq.n	8011fdc <lwip_netconn_do_close_internal+0x54>
 8011fce:	4b95      	ldr	r3, [pc, #596]	; (8012224 <lwip_netconn_do_close_internal+0x29c>)
 8011fd0:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8011fd4:	4997      	ldr	r1, [pc, #604]	; (8012234 <lwip_netconn_do_close_internal+0x2ac>)
 8011fd6:	4895      	ldr	r0, [pc, #596]	; (801222c <lwip_netconn_do_close_internal+0x2a4>)
 8011fd8:	f00d f8e8 	bl	801f1ac <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	685b      	ldr	r3, [r3, #4]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d106      	bne.n	8011ff2 <lwip_netconn_do_close_internal+0x6a>
 8011fe4:	4b8f      	ldr	r3, [pc, #572]	; (8012224 <lwip_netconn_do_close_internal+0x29c>)
 8011fe6:	f240 32a5 	movw	r2, #933	; 0x3a5
 8011fea:	4993      	ldr	r1, [pc, #588]	; (8012238 <lwip_netconn_do_close_internal+0x2b0>)
 8011fec:	488f      	ldr	r0, [pc, #572]	; (801222c <lwip_netconn_do_close_internal+0x2a4>)
 8011fee:	f00d f8dd 	bl	801f1ac <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8011ff2:	687b      	ldr	r3, [r7, #4]
 8011ff4:	6a1b      	ldr	r3, [r3, #32]
 8011ff6:	2b00      	cmp	r3, #0
 8011ff8:	d106      	bne.n	8012008 <lwip_netconn_do_close_internal+0x80>
 8011ffa:	4b8a      	ldr	r3, [pc, #552]	; (8012224 <lwip_netconn_do_close_internal+0x29c>)
 8011ffc:	f240 32a6 	movw	r2, #934	; 0x3a6
 8012000:	498e      	ldr	r1, [pc, #568]	; (801223c <lwip_netconn_do_close_internal+0x2b4>)
 8012002:	488a      	ldr	r0, [pc, #552]	; (801222c <lwip_netconn_do_close_internal+0x2a4>)
 8012004:	f00d f8d2 	bl	801f1ac <iprintf>

  tpcb = conn->pcb.tcp;
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	685b      	ldr	r3, [r3, #4]
 801200c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	6a1b      	ldr	r3, [r3, #32]
 8012012:	7a1b      	ldrb	r3, [r3, #8]
 8012014:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8012016:	7bfb      	ldrb	r3, [r7, #15]
 8012018:	f003 0301 	and.w	r3, r3, #1
 801201c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 801201e:	7bfb      	ldrb	r3, [r7, #15]
 8012020:	f003 0302 	and.w	r3, r3, #2
 8012024:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8012026:	7bfb      	ldrb	r3, [r7, #15]
 8012028:	2b03      	cmp	r3, #3
 801202a:	d102      	bne.n	8012032 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 801202c:	2301      	movs	r3, #1
 801202e:	75bb      	strb	r3, [r7, #22]
 8012030:	e01f      	b.n	8012072 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8012032:	7bbb      	ldrb	r3, [r7, #14]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d00e      	beq.n	8012056 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8012038:	693b      	ldr	r3, [r7, #16]
 801203a:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 801203c:	2b05      	cmp	r3, #5
 801203e:	d007      	beq.n	8012050 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8012040:	693b      	ldr	r3, [r7, #16]
 8012042:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8012044:	2b06      	cmp	r3, #6
 8012046:	d003      	beq.n	8012050 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8012048:	693b      	ldr	r3, [r7, #16]
 801204a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 801204c:	2b08      	cmp	r3, #8
 801204e:	d102      	bne.n	8012056 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8012050:	2301      	movs	r3, #1
 8012052:	75bb      	strb	r3, [r7, #22]
 8012054:	e00d      	b.n	8012072 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8012056:	7b7b      	ldrb	r3, [r7, #13]
 8012058:	2b00      	cmp	r3, #0
 801205a:	d008      	beq.n	801206e <lwip_netconn_do_close_internal+0xe6>
 801205c:	693b      	ldr	r3, [r7, #16]
 801205e:	8b5b      	ldrh	r3, [r3, #26]
 8012060:	f003 0310 	and.w	r3, r3, #16
 8012064:	2b00      	cmp	r3, #0
 8012066:	d002      	beq.n	801206e <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 8012068:	2301      	movs	r3, #1
 801206a:	75bb      	strb	r3, [r7, #22]
 801206c:	e001      	b.n	8012072 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 801206e:	2300      	movs	r3, #0
 8012070:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 8012072:	7dbb      	ldrb	r3, [r7, #22]
 8012074:	2b00      	cmp	r3, #0
 8012076:	d003      	beq.n	8012080 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8012078:	2100      	movs	r1, #0
 801207a:	6938      	ldr	r0, [r7, #16]
 801207c:	f004 f86e 	bl	801615c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8012080:	693b      	ldr	r3, [r7, #16]
 8012082:	7d1b      	ldrb	r3, [r3, #20]
 8012084:	2b01      	cmp	r3, #1
 8012086:	d104      	bne.n	8012092 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8012088:	2100      	movs	r1, #0
 801208a:	6938      	ldr	r0, [r7, #16]
 801208c:	f004 f8de 	bl	801624c <tcp_accept>
 8012090:	e01d      	b.n	80120ce <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8012092:	7bbb      	ldrb	r3, [r7, #14]
 8012094:	2b00      	cmp	r3, #0
 8012096:	d007      	beq.n	80120a8 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8012098:	2100      	movs	r1, #0
 801209a:	6938      	ldr	r0, [r7, #16]
 801209c:	f004 f870 	bl	8016180 <tcp_recv>
      tcp_accept(tpcb, NULL);
 80120a0:	2100      	movs	r1, #0
 80120a2:	6938      	ldr	r0, [r7, #16]
 80120a4:	f004 f8d2 	bl	801624c <tcp_accept>
    }
    if (shut_tx) {
 80120a8:	7b7b      	ldrb	r3, [r7, #13]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d003      	beq.n	80120b6 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 80120ae:	2100      	movs	r1, #0
 80120b0:	6938      	ldr	r0, [r7, #16]
 80120b2:	f004 f887 	bl	80161c4 <tcp_sent>
    }
    if (shut_close) {
 80120b6:	7dbb      	ldrb	r3, [r7, #22]
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d008      	beq.n	80120ce <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 80120bc:	2200      	movs	r2, #0
 80120be:	2100      	movs	r1, #0
 80120c0:	6938      	ldr	r0, [r7, #16]
 80120c2:	f004 f8db 	bl	801627c <tcp_poll>
      tcp_err(tpcb, NULL);
 80120c6:	2100      	movs	r1, #0
 80120c8:	6938      	ldr	r0, [r7, #16]
 80120ca:	f004 f89d 	bl	8016208 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 80120ce:	7dbb      	ldrb	r3, [r7, #22]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d005      	beq.n	80120e0 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 80120d4:	6938      	ldr	r0, [r7, #16]
 80120d6:	f002 ff37 	bl	8014f48 <tcp_close>
 80120da:	4603      	mov	r3, r0
 80120dc:	75fb      	strb	r3, [r7, #23]
 80120de:	e007      	b.n	80120f0 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 80120e0:	7bbb      	ldrb	r3, [r7, #14]
 80120e2:	7b7a      	ldrb	r2, [r7, #13]
 80120e4:	4619      	mov	r1, r3
 80120e6:	6938      	ldr	r0, [r7, #16]
 80120e8:	f002 ff5a 	bl	8014fa0 <tcp_shutdown>
 80120ec:	4603      	mov	r3, r0
 80120ee:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 80120f0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d102      	bne.n	80120fe <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 80120f8:	2301      	movs	r3, #1
 80120fa:	757b      	strb	r3, [r7, #21]
 80120fc:	e016      	b.n	801212c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 80120fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012106:	d10f      	bne.n	8012128 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	6a1b      	ldr	r3, [r3, #32]
 801210c:	7a5b      	ldrb	r3, [r3, #9]
 801210e:	2b00      	cmp	r3, #0
 8012110:	d10c      	bne.n	801212c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8012112:	2301      	movs	r3, #1
 8012114:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8012116:	7dbb      	ldrb	r3, [r7, #22]
 8012118:	2b00      	cmp	r3, #0
 801211a:	d007      	beq.n	801212c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 801211c:	6938      	ldr	r0, [r7, #16]
 801211e:	f003 f859 	bl	80151d4 <tcp_abort>
          err = ERR_OK;
 8012122:	2300      	movs	r3, #0
 8012124:	75fb      	strb	r3, [r7, #23]
 8012126:	e001      	b.n	801212c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8012128:	2301      	movs	r3, #1
 801212a:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 801212c:	7d7b      	ldrb	r3, [r7, #21]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d044      	beq.n	80121bc <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	6a1b      	ldr	r3, [r3, #32]
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	330c      	adds	r3, #12
 801213a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	6a1b      	ldr	r3, [r3, #32]
 8012140:	7dfa      	ldrb	r2, [r7, #23]
 8012142:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	2200      	movs	r2, #0
 8012148:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	2200      	movs	r2, #0
 801214e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8012150:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d129      	bne.n	80121ac <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8012158:	7dbb      	ldrb	r3, [r7, #22]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d00c      	beq.n	8012178 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	2200      	movs	r2, #0
 8012162:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012168:	2b00      	cmp	r3, #0
 801216a:	d005      	beq.n	8012178 <lwip_netconn_do_close_internal+0x1f0>
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012170:	2200      	movs	r2, #0
 8012172:	2104      	movs	r1, #4
 8012174:	6878      	ldr	r0, [r7, #4]
 8012176:	4798      	blx	r3
      }
      if (shut_rx) {
 8012178:	7bbb      	ldrb	r3, [r7, #14]
 801217a:	2b00      	cmp	r3, #0
 801217c:	d009      	beq.n	8012192 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012182:	2b00      	cmp	r3, #0
 8012184:	d005      	beq.n	8012192 <lwip_netconn_do_close_internal+0x20a>
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801218a:	2200      	movs	r2, #0
 801218c:	2100      	movs	r1, #0
 801218e:	6878      	ldr	r0, [r7, #4]
 8012190:	4798      	blx	r3
      }
      if (shut_tx) {
 8012192:	7b7b      	ldrb	r3, [r7, #13]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d009      	beq.n	80121ac <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801219c:	2b00      	cmp	r3, #0
 801219e:	d005      	beq.n	80121ac <lwip_netconn_do_close_internal+0x224>
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121a4:	2200      	movs	r2, #0
 80121a6:	2102      	movs	r1, #2
 80121a8:	6878      	ldr	r0, [r7, #4]
 80121aa:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80121ac:	78fb      	ldrb	r3, [r7, #3]
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d002      	beq.n	80121b8 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 80121b2:	68b8      	ldr	r0, [r7, #8]
 80121b4:	f00b feb4 	bl	801df20 <sys_sem_signal>
    }
    return ERR_OK;
 80121b8:	2300      	movs	r3, #0
 80121ba:	e02e      	b.n	801221a <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 80121bc:	7d7b      	ldrb	r3, [r7, #21]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d11e      	bne.n	8012200 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 80121c2:	693b      	ldr	r3, [r7, #16]
 80121c4:	7d1b      	ldrb	r3, [r3, #20]
 80121c6:	2b01      	cmp	r3, #1
 80121c8:	d106      	bne.n	80121d8 <lwip_netconn_do_close_internal+0x250>
 80121ca:	4b16      	ldr	r3, [pc, #88]	; (8012224 <lwip_netconn_do_close_internal+0x29c>)
 80121cc:	f240 4241 	movw	r2, #1089	; 0x441
 80121d0:	491b      	ldr	r1, [pc, #108]	; (8012240 <lwip_netconn_do_close_internal+0x2b8>)
 80121d2:	4816      	ldr	r0, [pc, #88]	; (801222c <lwip_netconn_do_close_internal+0x2a4>)
 80121d4:	f00c ffea 	bl	801f1ac <iprintf>
    if (shut_tx) {
 80121d8:	7b7b      	ldrb	r3, [r7, #13]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d003      	beq.n	80121e6 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 80121de:	4919      	ldr	r1, [pc, #100]	; (8012244 <lwip_netconn_do_close_internal+0x2bc>)
 80121e0:	6938      	ldr	r0, [r7, #16]
 80121e2:	f003 ffef 	bl	80161c4 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 80121e6:	2201      	movs	r2, #1
 80121e8:	4917      	ldr	r1, [pc, #92]	; (8012248 <lwip_netconn_do_close_internal+0x2c0>)
 80121ea:	6938      	ldr	r0, [r7, #16]
 80121ec:	f004 f846 	bl	801627c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80121f0:	4916      	ldr	r1, [pc, #88]	; (801224c <lwip_netconn_do_close_internal+0x2c4>)
 80121f2:	6938      	ldr	r0, [r7, #16]
 80121f4:	f004 f808 	bl	8016208 <tcp_err>
    tcp_arg(tpcb, conn);
 80121f8:	6879      	ldr	r1, [r7, #4]
 80121fa:	6938      	ldr	r0, [r7, #16]
 80121fc:	f003 ffae 	bl	801615c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 8012200:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d106      	bne.n	8012216 <lwip_netconn_do_close_internal+0x28e>
 8012208:	4b06      	ldr	r3, [pc, #24]	; (8012224 <lwip_netconn_do_close_internal+0x29c>)
 801220a:	f240 424d 	movw	r2, #1101	; 0x44d
 801220e:	4910      	ldr	r1, [pc, #64]	; (8012250 <lwip_netconn_do_close_internal+0x2c8>)
 8012210:	4806      	ldr	r0, [pc, #24]	; (801222c <lwip_netconn_do_close_internal+0x2a4>)
 8012212:	f00c ffcb 	bl	801f1ac <iprintf>
  return err;
 8012216:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801221a:	4618      	mov	r0, r3
 801221c:	3718      	adds	r7, #24
 801221e:	46bd      	mov	sp, r7
 8012220:	bd80      	pop	{r7, pc}
 8012222:	bf00      	nop
 8012224:	08023ab0 	.word	0x08023ab0
 8012228:	08023d84 	.word	0x08023d84
 801222c:	08023af4 	.word	0x08023af4
 8012230:	08023d94 	.word	0x08023d94
 8012234:	08023db4 	.word	0x08023db4
 8012238:	08023dd8 	.word	0x08023dd8
 801223c:	08023c18 	.word	0x08023c18
 8012240:	08023dec 	.word	0x08023dec
 8012244:	08011979 	.word	0x08011979
 8012248:	080118b1 	.word	0x080118b1
 801224c:	08011a21 	.word	0x08011a21
 8012250:	08023e10 	.word	0x08023e10

08012254 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 8012254:	b580      	push	{r7, lr}
 8012256:	b084      	sub	sp, #16
 8012258:	af00      	add	r7, sp, #0
 801225a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 8012260:	68fb      	ldr	r3, [r7, #12]
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	785b      	ldrb	r3, [r3, #1]
 8012266:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8012268:	7afb      	ldrb	r3, [r7, #11]
 801226a:	2b00      	cmp	r3, #0
 801226c:	d00d      	beq.n	801228a <lwip_netconn_do_delconn+0x36>
 801226e:	68fb      	ldr	r3, [r7, #12]
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	781b      	ldrb	r3, [r3, #0]
 8012274:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012278:	2b10      	cmp	r3, #16
 801227a:	d006      	beq.n	801228a <lwip_netconn_do_delconn+0x36>
 801227c:	4b60      	ldr	r3, [pc, #384]	; (8012400 <lwip_netconn_do_delconn+0x1ac>)
 801227e:	f240 425e 	movw	r2, #1118	; 0x45e
 8012282:	4960      	ldr	r1, [pc, #384]	; (8012404 <lwip_netconn_do_delconn+0x1b0>)
 8012284:	4860      	ldr	r0, [pc, #384]	; (8012408 <lwip_netconn_do_delconn+0x1b4>)
 8012286:	f00c ff91 	bl	801f1ac <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 801228a:	7afb      	ldrb	r3, [r7, #11]
 801228c:	2b00      	cmp	r3, #0
 801228e:	d005      	beq.n	801229c <lwip_netconn_do_delconn+0x48>
 8012290:	7afb      	ldrb	r3, [r7, #11]
 8012292:	2b02      	cmp	r3, #2
 8012294:	d002      	beq.n	801229c <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 8012296:	7afb      	ldrb	r3, [r7, #11]
 8012298:	2b03      	cmp	r3, #3
 801229a:	d109      	bne.n	80122b0 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 801229c:	7afb      	ldrb	r3, [r7, #11]
 801229e:	2b03      	cmp	r3, #3
 80122a0:	d10a      	bne.n	80122b8 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80122a2:	68fb      	ldr	r3, [r7, #12]
 80122a4:	681b      	ldr	r3, [r3, #0]
 80122a6:	7f1b      	ldrb	r3, [r3, #28]
 80122a8:	f003 0304 	and.w	r3, r3, #4
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d103      	bne.n	80122b8 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	22fb      	movs	r2, #251	; 0xfb
 80122b4:	711a      	strb	r2, [r3, #4]
 80122b6:	e097      	b.n	80123e8 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 80122b8:	7afb      	ldrb	r3, [r7, #11]
 80122ba:	2b03      	cmp	r3, #3
 80122bc:	d10d      	bne.n	80122da <lwip_netconn_do_delconn+0x86>
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	7f1b      	ldrb	r3, [r3, #28]
 80122c4:	f003 0304 	and.w	r3, r3, #4
 80122c8:	2b00      	cmp	r3, #0
 80122ca:	d106      	bne.n	80122da <lwip_netconn_do_delconn+0x86>
 80122cc:	4b4c      	ldr	r3, [pc, #304]	; (8012400 <lwip_netconn_do_delconn+0x1ac>)
 80122ce:	f240 427a 	movw	r2, #1146	; 0x47a
 80122d2:	494e      	ldr	r1, [pc, #312]	; (801240c <lwip_netconn_do_delconn+0x1b8>)
 80122d4:	484c      	ldr	r0, [pc, #304]	; (8012408 <lwip_netconn_do_delconn+0x1b4>)
 80122d6:	f00c ff69 	bl	801f1ac <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	2200      	movs	r2, #0
 80122de:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	4618      	mov	r0, r3
 80122e6:	f7ff fdd1 	bl	8011e8c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 80122ea:	68fb      	ldr	r3, [r7, #12]
 80122ec:	681b      	ldr	r3, [r3, #0]
 80122ee:	685b      	ldr	r3, [r3, #4]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	d05f      	beq.n	80123b4 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	681b      	ldr	r3, [r3, #0]
 80122f8:	781b      	ldrb	r3, [r3, #0]
 80122fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80122fe:	2b10      	cmp	r3, #16
 8012300:	d00d      	beq.n	801231e <lwip_netconn_do_delconn+0xca>
 8012302:	2b20      	cmp	r3, #32
 8012304:	d151      	bne.n	80123aa <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 8012306:	68fb      	ldr	r3, [r7, #12]
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	685b      	ldr	r3, [r3, #4]
 801230c:	2200      	movs	r2, #0
 801230e:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	685b      	ldr	r3, [r3, #4]
 8012316:	4618      	mov	r0, r3
 8012318:	f009 f98c 	bl	801b634 <udp_remove>
          break;
 801231c:	e046      	b.n	80123ac <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 801231e:	68fb      	ldr	r3, [r7, #12]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	6a1b      	ldr	r3, [r3, #32]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d006      	beq.n	8012336 <lwip_netconn_do_delconn+0xe2>
 8012328:	4b35      	ldr	r3, [pc, #212]	; (8012400 <lwip_netconn_do_delconn+0x1ac>)
 801232a:	f240 4294 	movw	r2, #1172	; 0x494
 801232e:	4938      	ldr	r1, [pc, #224]	; (8012410 <lwip_netconn_do_delconn+0x1bc>)
 8012330:	4835      	ldr	r0, [pc, #212]	; (8012408 <lwip_netconn_do_delconn+0x1b4>)
 8012332:	f00c ff3b 	bl	801f1ac <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	2204      	movs	r2, #4
 801233c:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	2203      	movs	r2, #3
 8012342:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 8012344:	68fb      	ldr	r3, [r7, #12]
 8012346:	681b      	ldr	r3, [r3, #0]
 8012348:	68fa      	ldr	r2, [r7, #12]
 801234a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 801234c:	68fb      	ldr	r3, [r7, #12]
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	2100      	movs	r1, #0
 8012352:	4618      	mov	r0, r3
 8012354:	f7ff fe18 	bl	8011f88 <lwip_netconn_do_close_internal>
 8012358:	4603      	mov	r3, r0
 801235a:	2b00      	cmp	r3, #0
 801235c:	d04b      	beq.n	80123f6 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	681b      	ldr	r3, [r3, #0]
 8012362:	785b      	ldrb	r3, [r3, #1]
 8012364:	2b04      	cmp	r3, #4
 8012366:	d006      	beq.n	8012376 <lwip_netconn_do_delconn+0x122>
 8012368:	4b25      	ldr	r3, [pc, #148]	; (8012400 <lwip_netconn_do_delconn+0x1ac>)
 801236a:	f240 429a 	movw	r2, #1178	; 0x49a
 801236e:	4929      	ldr	r1, [pc, #164]	; (8012414 <lwip_netconn_do_delconn+0x1c0>)
 8012370:	4825      	ldr	r0, [pc, #148]	; (8012408 <lwip_netconn_do_delconn+0x1b4>)
 8012372:	f00c ff1b 	bl	801f1ac <iprintf>
            UNLOCK_TCPIP_CORE();
 8012376:	4828      	ldr	r0, [pc, #160]	; (8012418 <lwip_netconn_do_delconn+0x1c4>)
 8012378:	f00b fe43 	bl	801e002 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 801237c:	68fb      	ldr	r3, [r7, #12]
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	330c      	adds	r3, #12
 8012382:	2100      	movs	r1, #0
 8012384:	4618      	mov	r0, r3
 8012386:	f00b fd9a 	bl	801debe <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 801238a:	4823      	ldr	r0, [pc, #140]	; (8012418 <lwip_netconn_do_delconn+0x1c4>)
 801238c:	f00b fe2a 	bl	801dfe4 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	681b      	ldr	r3, [r3, #0]
 8012394:	785b      	ldrb	r3, [r3, #1]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d02d      	beq.n	80123f6 <lwip_netconn_do_delconn+0x1a2>
 801239a:	4b19      	ldr	r3, [pc, #100]	; (8012400 <lwip_netconn_do_delconn+0x1ac>)
 801239c:	f240 429e 	movw	r2, #1182	; 0x49e
 80123a0:	491c      	ldr	r1, [pc, #112]	; (8012414 <lwip_netconn_do_delconn+0x1c0>)
 80123a2:	4819      	ldr	r0, [pc, #100]	; (8012408 <lwip_netconn_do_delconn+0x1b4>)
 80123a4:	f00c ff02 	bl	801f1ac <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 80123a8:	e025      	b.n	80123f6 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 80123aa:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	681b      	ldr	r3, [r3, #0]
 80123b0:	2200      	movs	r2, #0
 80123b2:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80123b4:	68fb      	ldr	r3, [r7, #12]
 80123b6:	681b      	ldr	r3, [r3, #0]
 80123b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d007      	beq.n	80123ce <lwip_netconn_do_delconn+0x17a>
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123c4:	68fa      	ldr	r2, [r7, #12]
 80123c6:	6810      	ldr	r0, [r2, #0]
 80123c8:	2200      	movs	r2, #0
 80123ca:	2100      	movs	r1, #0
 80123cc:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 80123ce:	68fb      	ldr	r3, [r7, #12]
 80123d0:	681b      	ldr	r3, [r3, #0]
 80123d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d007      	beq.n	80123e8 <lwip_netconn_do_delconn+0x194>
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	681b      	ldr	r3, [r3, #0]
 80123dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123de:	68fa      	ldr	r2, [r7, #12]
 80123e0:	6810      	ldr	r0, [r2, #0]
 80123e2:	2200      	movs	r2, #0
 80123e4:	2102      	movs	r1, #2
 80123e6:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80123e8:	68fb      	ldr	r3, [r7, #12]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	330c      	adds	r3, #12
 80123ee:	4618      	mov	r0, r3
 80123f0:	f00b fdb0 	bl	801df54 <sys_sem_valid>
 80123f4:	e000      	b.n	80123f8 <lwip_netconn_do_delconn+0x1a4>
          return;
 80123f6:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 80123f8:	3710      	adds	r7, #16
 80123fa:	46bd      	mov	sp, r7
 80123fc:	bd80      	pop	{r7, pc}
 80123fe:	bf00      	nop
 8012400:	08023ab0 	.word	0x08023ab0
 8012404:	08023e20 	.word	0x08023e20
 8012408:	08023af4 	.word	0x08023af4
 801240c:	08023e34 	.word	0x08023e34
 8012410:	08023e54 	.word	0x08023e54
 8012414:	08023e70 	.word	0x08023e70
 8012418:	2000aa58 	.word	0x2000aa58

0801241c <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 801241c:	b580      	push	{r7, lr}
 801241e:	b084      	sub	sp, #16
 8012420:	af00      	add	r7, sp, #0
 8012422:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8012428:	68bb      	ldr	r3, [r7, #8]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	685b      	ldr	r3, [r3, #4]
 801242e:	2b00      	cmp	r3, #0
 8012430:	d025      	beq.n	801247e <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8012432:	68bb      	ldr	r3, [r7, #8]
 8012434:	681b      	ldr	r3, [r3, #0]
 8012436:	781b      	ldrb	r3, [r3, #0]
 8012438:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801243c:	2b10      	cmp	r3, #16
 801243e:	d00e      	beq.n	801245e <lwip_netconn_do_bind+0x42>
 8012440:	2b20      	cmp	r3, #32
 8012442:	d119      	bne.n	8012478 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8012444:	68bb      	ldr	r3, [r7, #8]
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	6858      	ldr	r0, [r3, #4]
 801244a:	68bb      	ldr	r3, [r7, #8]
 801244c:	6899      	ldr	r1, [r3, #8]
 801244e:	68bb      	ldr	r3, [r7, #8]
 8012450:	899b      	ldrh	r3, [r3, #12]
 8012452:	461a      	mov	r2, r3
 8012454:	f009 f846 	bl	801b4e4 <udp_bind>
 8012458:	4603      	mov	r3, r0
 801245a:	73fb      	strb	r3, [r7, #15]
        break;
 801245c:	e011      	b.n	8012482 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 801245e:	68bb      	ldr	r3, [r7, #8]
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	6858      	ldr	r0, [r3, #4]
 8012464:	68bb      	ldr	r3, [r7, #8]
 8012466:	6899      	ldr	r1, [r3, #8]
 8012468:	68bb      	ldr	r3, [r7, #8]
 801246a:	899b      	ldrh	r3, [r3, #12]
 801246c:	461a      	mov	r2, r3
 801246e:	f002 febd 	bl	80151ec <tcp_bind>
 8012472:	4603      	mov	r3, r0
 8012474:	73fb      	strb	r3, [r7, #15]
        break;
 8012476:	e004      	b.n	8012482 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 8012478:	23fa      	movs	r3, #250	; 0xfa
 801247a:	73fb      	strb	r3, [r7, #15]
        break;
 801247c:	e001      	b.n	8012482 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 801247e:	23fa      	movs	r3, #250	; 0xfa
 8012480:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 8012482:	68bb      	ldr	r3, [r7, #8]
 8012484:	7bfa      	ldrb	r2, [r7, #15]
 8012486:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8012488:	bf00      	nop
 801248a:	3710      	adds	r7, #16
 801248c:	46bd      	mov	sp, r7
 801248e:	bd80      	pop	{r7, pc}

08012490 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8012490:	b580      	push	{r7, lr}
 8012492:	b084      	sub	sp, #16
 8012494:	af00      	add	r7, sp, #0
 8012496:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 801249c:	68bb      	ldr	r3, [r7, #8]
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	4618      	mov	r0, r3
 80124a2:	f7ff f875 	bl	8011590 <netconn_err>
 80124a6:	4603      	mov	r3, r0
 80124a8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 80124aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80124ae:	2b00      	cmp	r3, #0
 80124b0:	d134      	bne.n	801251c <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 80124b2:	68bb      	ldr	r3, [r7, #8]
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	685b      	ldr	r3, [r3, #4]
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d02d      	beq.n	8012518 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80124bc:	68bb      	ldr	r3, [r7, #8]
 80124be:	681b      	ldr	r3, [r3, #0]
 80124c0:	781b      	ldrb	r3, [r3, #0]
 80124c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80124c6:	2b20      	cmp	r3, #32
 80124c8:	d123      	bne.n	8012512 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 80124ca:	68bb      	ldr	r3, [r7, #8]
 80124cc:	689b      	ldr	r3, [r3, #8]
 80124ce:	689b      	ldr	r3, [r3, #8]
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d10c      	bne.n	80124ee <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 80124d4:	68bb      	ldr	r3, [r7, #8]
 80124d6:	681b      	ldr	r3, [r3, #0]
 80124d8:	685a      	ldr	r2, [r3, #4]
 80124da:	68bb      	ldr	r3, [r7, #8]
 80124dc:	689b      	ldr	r3, [r3, #8]
 80124de:	681b      	ldr	r3, [r3, #0]
 80124e0:	4619      	mov	r1, r3
 80124e2:	4610      	mov	r0, r2
 80124e4:	f008 fe14 	bl	801b110 <udp_send>
 80124e8:	4603      	mov	r3, r0
 80124ea:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 80124ec:	e016      	b.n	801251c <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 80124ee:	68bb      	ldr	r3, [r7, #8]
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	6858      	ldr	r0, [r3, #4]
 80124f4:	68bb      	ldr	r3, [r7, #8]
 80124f6:	689b      	ldr	r3, [r3, #8]
 80124f8:	6819      	ldr	r1, [r3, #0]
 80124fa:	68bb      	ldr	r3, [r7, #8]
 80124fc:	689b      	ldr	r3, [r3, #8]
 80124fe:	f103 0208 	add.w	r2, r3, #8
 8012502:	68bb      	ldr	r3, [r7, #8]
 8012504:	689b      	ldr	r3, [r3, #8]
 8012506:	899b      	ldrh	r3, [r3, #12]
 8012508:	f008 fe36 	bl	801b178 <udp_sendto>
 801250c:	4603      	mov	r3, r0
 801250e:	73fb      	strb	r3, [r7, #15]
          break;
 8012510:	e004      	b.n	801251c <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 8012512:	23f5      	movs	r3, #245	; 0xf5
 8012514:	73fb      	strb	r3, [r7, #15]
          break;
 8012516:	e001      	b.n	801251c <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 8012518:	23f5      	movs	r3, #245	; 0xf5
 801251a:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 801251c:	68bb      	ldr	r3, [r7, #8]
 801251e:	7bfa      	ldrb	r2, [r7, #15]
 8012520:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8012522:	bf00      	nop
 8012524:	3710      	adds	r7, #16
 8012526:	46bd      	mov	sp, r7
 8012528:	bd80      	pop	{r7, pc}

0801252a <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 801252a:	b580      	push	{r7, lr}
 801252c:	b086      	sub	sp, #24
 801252e:	af00      	add	r7, sp, #0
 8012530:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8012536:	693b      	ldr	r3, [r7, #16]
 8012538:	2200      	movs	r2, #0
 801253a:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 801253c:	693b      	ldr	r3, [r7, #16]
 801253e:	681b      	ldr	r3, [r3, #0]
 8012540:	685b      	ldr	r3, [r3, #4]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d022      	beq.n	801258c <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8012546:	693b      	ldr	r3, [r7, #16]
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	781b      	ldrb	r3, [r3, #0]
 801254c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012550:	2b10      	cmp	r3, #16
 8012552:	d11b      	bne.n	801258c <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8012554:	693b      	ldr	r3, [r7, #16]
 8012556:	689b      	ldr	r3, [r3, #8]
 8012558:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 801255a:	697b      	ldr	r3, [r7, #20]
 801255c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012560:	d202      	bcs.n	8012568 <lwip_netconn_do_recv+0x3e>
 8012562:	697b      	ldr	r3, [r7, #20]
 8012564:	b29b      	uxth	r3, r3
 8012566:	e001      	b.n	801256c <lwip_netconn_do_recv+0x42>
 8012568:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801256c:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 801256e:	693b      	ldr	r3, [r7, #16]
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	685b      	ldr	r3, [r3, #4]
 8012574:	89fa      	ldrh	r2, [r7, #14]
 8012576:	4611      	mov	r1, r2
 8012578:	4618      	mov	r0, r3
 801257a:	f002 ff29 	bl	80153d0 <tcp_recved>
        remaining -= recved;
 801257e:	89fb      	ldrh	r3, [r7, #14]
 8012580:	697a      	ldr	r2, [r7, #20]
 8012582:	1ad3      	subs	r3, r2, r3
 8012584:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8012586:	697b      	ldr	r3, [r7, #20]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d1e6      	bne.n	801255a <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 801258c:	bf00      	nop
 801258e:	3718      	adds	r7, #24
 8012590:	46bd      	mov	sp, r7
 8012592:	bd80      	pop	{r7, pc}

08012594 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8012594:	b580      	push	{r7, lr}
 8012596:	b088      	sub	sp, #32
 8012598:	af00      	add	r7, sp, #0
 801259a:	6078      	str	r0, [r7, #4]
 801259c:	460b      	mov	r3, r1
 801259e:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 80125a0:	2300      	movs	r3, #0
 80125a2:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	2b00      	cmp	r3, #0
 80125a8:	d106      	bne.n	80125b8 <lwip_netconn_do_writemore+0x24>
 80125aa:	4b96      	ldr	r3, [pc, #600]	; (8012804 <lwip_netconn_do_writemore+0x270>)
 80125ac:	f240 6273 	movw	r2, #1651	; 0x673
 80125b0:	4995      	ldr	r1, [pc, #596]	; (8012808 <lwip_netconn_do_writemore+0x274>)
 80125b2:	4896      	ldr	r0, [pc, #600]	; (801280c <lwip_netconn_do_writemore+0x278>)
 80125b4:	f00c fdfa 	bl	801f1ac <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	785b      	ldrb	r3, [r3, #1]
 80125bc:	2b01      	cmp	r3, #1
 80125be:	d006      	beq.n	80125ce <lwip_netconn_do_writemore+0x3a>
 80125c0:	4b90      	ldr	r3, [pc, #576]	; (8012804 <lwip_netconn_do_writemore+0x270>)
 80125c2:	f240 6274 	movw	r2, #1652	; 0x674
 80125c6:	4992      	ldr	r1, [pc, #584]	; (8012810 <lwip_netconn_do_writemore+0x27c>)
 80125c8:	4890      	ldr	r0, [pc, #576]	; (801280c <lwip_netconn_do_writemore+0x278>)
 80125ca:	f00c fdef 	bl	801f1ac <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	6a1b      	ldr	r3, [r3, #32]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	d106      	bne.n	80125e4 <lwip_netconn_do_writemore+0x50>
 80125d6:	4b8b      	ldr	r3, [pc, #556]	; (8012804 <lwip_netconn_do_writemore+0x270>)
 80125d8:	f240 6275 	movw	r2, #1653	; 0x675
 80125dc:	498d      	ldr	r1, [pc, #564]	; (8012814 <lwip_netconn_do_writemore+0x280>)
 80125de:	488b      	ldr	r0, [pc, #556]	; (801280c <lwip_netconn_do_writemore+0x278>)
 80125e0:	f00c fde4 	bl	801f1ac <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 80125e4:	687b      	ldr	r3, [r7, #4]
 80125e6:	685b      	ldr	r3, [r3, #4]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d106      	bne.n	80125fa <lwip_netconn_do_writemore+0x66>
 80125ec:	4b85      	ldr	r3, [pc, #532]	; (8012804 <lwip_netconn_do_writemore+0x270>)
 80125ee:	f240 6276 	movw	r2, #1654	; 0x676
 80125f2:	4989      	ldr	r1, [pc, #548]	; (8012818 <lwip_netconn_do_writemore+0x284>)
 80125f4:	4885      	ldr	r0, [pc, #532]	; (801280c <lwip_netconn_do_writemore+0x278>)
 80125f6:	f00c fdd9 	bl	801f1ac <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	6a1b      	ldr	r3, [r3, #32]
 80125fe:	699a      	ldr	r2, [r3, #24]
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	6a1b      	ldr	r3, [r3, #32]
 8012604:	695b      	ldr	r3, [r3, #20]
 8012606:	429a      	cmp	r2, r3
 8012608:	d306      	bcc.n	8012618 <lwip_netconn_do_writemore+0x84>
 801260a:	4b7e      	ldr	r3, [pc, #504]	; (8012804 <lwip_netconn_do_writemore+0x270>)
 801260c:	f240 6277 	movw	r2, #1655	; 0x677
 8012610:	4982      	ldr	r1, [pc, #520]	; (801281c <lwip_netconn_do_writemore+0x288>)
 8012612:	487e      	ldr	r0, [pc, #504]	; (801280c <lwip_netconn_do_writemore+0x278>)
 8012614:	f00c fdca 	bl	801f1ac <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	6a1b      	ldr	r3, [r3, #32]
 801261c:	899b      	ldrh	r3, [r3, #12]
 801261e:	2b00      	cmp	r3, #0
 8012620:	d106      	bne.n	8012630 <lwip_netconn_do_writemore+0x9c>
 8012622:	4b78      	ldr	r3, [pc, #480]	; (8012804 <lwip_netconn_do_writemore+0x270>)
 8012624:	f240 6279 	movw	r2, #1657	; 0x679
 8012628:	497d      	ldr	r1, [pc, #500]	; (8012820 <lwip_netconn_do_writemore+0x28c>)
 801262a:	4878      	ldr	r0, [pc, #480]	; (801280c <lwip_netconn_do_writemore+0x278>)
 801262c:	f00c fdbe 	bl	801f1ac <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	6a1b      	ldr	r3, [r3, #32]
 8012634:	7f1b      	ldrb	r3, [r3, #28]
 8012636:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	7f1b      	ldrb	r3, [r3, #28]
 801263c:	f003 0302 	and.w	r3, r3, #2
 8012640:	2b00      	cmp	r3, #0
 8012642:	d104      	bne.n	801264e <lwip_netconn_do_writemore+0xba>
 8012644:	7ebb      	ldrb	r3, [r7, #26]
 8012646:	f003 0304 	and.w	r3, r3, #4
 801264a:	2b00      	cmp	r3, #0
 801264c:	d001      	beq.n	8012652 <lwip_netconn_do_writemore+0xbe>
 801264e:	2301      	movs	r3, #1
 8012650:	e000      	b.n	8012654 <lwip_netconn_do_writemore+0xc0>
 8012652:	2300      	movs	r3, #0
 8012654:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	6a1b      	ldr	r3, [r3, #32]
 801265a:	689b      	ldr	r3, [r3, #8]
 801265c:	681a      	ldr	r2, [r3, #0]
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	6a1b      	ldr	r3, [r3, #32]
 8012662:	691b      	ldr	r3, [r3, #16]
 8012664:	4413      	add	r3, r2
 8012666:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	6a1b      	ldr	r3, [r3, #32]
 801266c:	689b      	ldr	r3, [r3, #8]
 801266e:	685a      	ldr	r2, [r3, #4]
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	6a1b      	ldr	r3, [r3, #32]
 8012674:	691b      	ldr	r3, [r3, #16]
 8012676:	1ad3      	subs	r3, r2, r3
 8012678:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 801267a:	693b      	ldr	r3, [r7, #16]
 801267c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012680:	d307      	bcc.n	8012692 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8012682:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012686:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8012688:	7ebb      	ldrb	r3, [r7, #26]
 801268a:	f043 0302 	orr.w	r3, r3, #2
 801268e:	76bb      	strb	r3, [r7, #26]
 8012690:	e001      	b.n	8012696 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8012692:	693b      	ldr	r3, [r7, #16]
 8012694:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8012696:	687b      	ldr	r3, [r7, #4]
 8012698:	685b      	ldr	r3, [r3, #4]
 801269a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801269e:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 80126a0:	89fa      	ldrh	r2, [r7, #14]
 80126a2:	8bbb      	ldrh	r3, [r7, #28]
 80126a4:	429a      	cmp	r2, r3
 80126a6:	d216      	bcs.n	80126d6 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 80126a8:	89fb      	ldrh	r3, [r7, #14]
 80126aa:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 80126ac:	7e3b      	ldrb	r3, [r7, #24]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d00d      	beq.n	80126ce <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 80126b2:	8bbb      	ldrh	r3, [r7, #28]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d10e      	bne.n	80126d6 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	6a1b      	ldr	r3, [r3, #32]
 80126bc:	699b      	ldr	r3, [r3, #24]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d102      	bne.n	80126c8 <lwip_netconn_do_writemore+0x134>
 80126c2:	f06f 0306 	mvn.w	r3, #6
 80126c6:	e000      	b.n	80126ca <lwip_netconn_do_writemore+0x136>
 80126c8:	2300      	movs	r3, #0
 80126ca:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 80126cc:	e07d      	b.n	80127ca <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 80126ce:	7ebb      	ldrb	r3, [r7, #26]
 80126d0:	f043 0302 	orr.w	r3, r3, #2
 80126d4:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	6a1b      	ldr	r3, [r3, #32]
 80126da:	691a      	ldr	r2, [r3, #16]
 80126dc:	8bbb      	ldrh	r3, [r7, #28]
 80126de:	441a      	add	r2, r3
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	6a1b      	ldr	r3, [r3, #32]
 80126e4:	689b      	ldr	r3, [r3, #8]
 80126e6:	685b      	ldr	r3, [r3, #4]
 80126e8:	429a      	cmp	r2, r3
 80126ea:	d906      	bls.n	80126fa <lwip_netconn_do_writemore+0x166>
 80126ec:	4b45      	ldr	r3, [pc, #276]	; (8012804 <lwip_netconn_do_writemore+0x270>)
 80126ee:	f240 62a3 	movw	r2, #1699	; 0x6a3
 80126f2:	494c      	ldr	r1, [pc, #304]	; (8012824 <lwip_netconn_do_writemore+0x290>)
 80126f4:	4845      	ldr	r0, [pc, #276]	; (801280c <lwip_netconn_do_writemore+0x278>)
 80126f6:	f00c fd59 	bl	801f1ac <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 80126fa:	8bbb      	ldrh	r3, [r7, #28]
 80126fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012700:	4293      	cmp	r3, r2
 8012702:	d103      	bne.n	801270c <lwip_netconn_do_writemore+0x178>
 8012704:	693b      	ldr	r3, [r7, #16]
 8012706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801270a:	d209      	bcs.n	8012720 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 801270c:	693b      	ldr	r3, [r7, #16]
 801270e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8012710:	8bba      	ldrh	r2, [r7, #28]
 8012712:	429a      	cmp	r2, r3
 8012714:	d10b      	bne.n	801272e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	6a1b      	ldr	r3, [r3, #32]
 801271a:	899b      	ldrh	r3, [r3, #12]
 801271c:	2b01      	cmp	r3, #1
 801271e:	d906      	bls.n	801272e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8012720:	2301      	movs	r3, #1
 8012722:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8012724:	7ebb      	ldrb	r3, [r7, #26]
 8012726:	f043 0302 	orr.w	r3, r3, #2
 801272a:	76bb      	strb	r3, [r7, #26]
 801272c:	e001      	b.n	8012732 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 801272e:	2300      	movs	r3, #0
 8012730:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	6858      	ldr	r0, [r3, #4]
 8012736:	7ebb      	ldrb	r3, [r7, #26]
 8012738:	8bba      	ldrh	r2, [r7, #28]
 801273a:	6979      	ldr	r1, [r7, #20]
 801273c:	f006 fc4c 	bl	8018fd8 <tcp_write>
 8012740:	4603      	mov	r3, r0
 8012742:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8012744:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8012748:	2b00      	cmp	r3, #0
 801274a:	d12c      	bne.n	80127a6 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	6a1b      	ldr	r3, [r3, #32]
 8012750:	6999      	ldr	r1, [r3, #24]
 8012752:	8bba      	ldrh	r2, [r7, #28]
 8012754:	687b      	ldr	r3, [r7, #4]
 8012756:	6a1b      	ldr	r3, [r3, #32]
 8012758:	440a      	add	r2, r1
 801275a:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	6a1b      	ldr	r3, [r3, #32]
 8012760:	6919      	ldr	r1, [r3, #16]
 8012762:	8bba      	ldrh	r2, [r7, #28]
 8012764:	687b      	ldr	r3, [r7, #4]
 8012766:	6a1b      	ldr	r3, [r3, #32]
 8012768:	440a      	add	r2, r1
 801276a:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	6a1b      	ldr	r3, [r3, #32]
 8012770:	691a      	ldr	r2, [r3, #16]
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	6a1b      	ldr	r3, [r3, #32]
 8012776:	689b      	ldr	r3, [r3, #8]
 8012778:	685b      	ldr	r3, [r3, #4]
 801277a:	429a      	cmp	r2, r3
 801277c:	d113      	bne.n	80127a6 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	6a1b      	ldr	r3, [r3, #32]
 8012782:	899a      	ldrh	r2, [r3, #12]
 8012784:	3a01      	subs	r2, #1
 8012786:	b292      	uxth	r2, r2
 8012788:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	6a1b      	ldr	r3, [r3, #32]
 801278e:	899b      	ldrh	r3, [r3, #12]
 8012790:	2b00      	cmp	r3, #0
 8012792:	d008      	beq.n	80127a6 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8012794:	687b      	ldr	r3, [r7, #4]
 8012796:	6a1b      	ldr	r3, [r3, #32]
 8012798:	689a      	ldr	r2, [r3, #8]
 801279a:	3208      	adds	r2, #8
 801279c:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 801279e:	687b      	ldr	r3, [r7, #4]
 80127a0:	6a1b      	ldr	r3, [r3, #32]
 80127a2:	2200      	movs	r2, #0
 80127a4:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 80127a6:	7e7b      	ldrb	r3, [r7, #25]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d004      	beq.n	80127b6 <lwip_netconn_do_writemore+0x222>
 80127ac:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80127b0:	2b00      	cmp	r3, #0
 80127b2:	f43f af50 	beq.w	8012656 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 80127b6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d004      	beq.n	80127c8 <lwip_netconn_do_writemore+0x234>
 80127be:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80127c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127c6:	d146      	bne.n	8012856 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 80127c8:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 80127ca:	7e3b      	ldrb	r3, [r7, #24]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d02b      	beq.n	8012828 <lwip_netconn_do_writemore+0x294>
 80127d0:	687b      	ldr	r3, [r7, #4]
 80127d2:	6a1b      	ldr	r3, [r3, #32]
 80127d4:	699a      	ldr	r2, [r3, #24]
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	6a1b      	ldr	r3, [r3, #32]
 80127da:	695b      	ldr	r3, [r3, #20]
 80127dc:	429a      	cmp	r2, r3
 80127de:	d223      	bcs.n	8012828 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d005      	beq.n	80127f4 <lwip_netconn_do_writemore+0x260>
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127ec:	2200      	movs	r2, #0
 80127ee:	2103      	movs	r1, #3
 80127f0:	6878      	ldr	r0, [r7, #4]
 80127f2:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	7f1b      	ldrb	r3, [r3, #28]
 80127f8:	f043 0310 	orr.w	r3, r3, #16
 80127fc:	b2da      	uxtb	r2, r3
 80127fe:	687b      	ldr	r3, [r7, #4]
 8012800:	771a      	strb	r2, [r3, #28]
 8012802:	e028      	b.n	8012856 <lwip_netconn_do_writemore+0x2c2>
 8012804:	08023ab0 	.word	0x08023ab0
 8012808:	08023c08 	.word	0x08023c08
 801280c:	08023af4 	.word	0x08023af4
 8012810:	08023f10 	.word	0x08023f10
 8012814:	08023c18 	.word	0x08023c18
 8012818:	08023f30 	.word	0x08023f30
 801281c:	08023f48 	.word	0x08023f48
 8012820:	08023f88 	.word	0x08023f88
 8012824:	08023fb0 	.word	0x08023fb0
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	685b      	ldr	r3, [r3, #4]
 801282c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012830:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8012834:	d305      	bcc.n	8012842 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	685b      	ldr	r3, [r3, #4]
 801283a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 801283e:	2b04      	cmp	r3, #4
 8012840:	d909      	bls.n	8012856 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012846:	2b00      	cmp	r3, #0
 8012848:	d005      	beq.n	8012856 <lwip_netconn_do_writemore+0x2c2>
 801284a:	687b      	ldr	r3, [r7, #4]
 801284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801284e:	2200      	movs	r2, #0
 8012850:	2103      	movs	r1, #3
 8012852:	6878      	ldr	r0, [r7, #4]
 8012854:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8012856:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801285a:	2b00      	cmp	r3, #0
 801285c:	d11d      	bne.n	801289a <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	6a1b      	ldr	r3, [r3, #32]
 8012862:	699a      	ldr	r2, [r3, #24]
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	6a1b      	ldr	r3, [r3, #32]
 8012868:	695b      	ldr	r3, [r3, #20]
 801286a:	429a      	cmp	r2, r3
 801286c:	d002      	beq.n	8012874 <lwip_netconn_do_writemore+0x2e0>
 801286e:	7e3b      	ldrb	r3, [r7, #24]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d001      	beq.n	8012878 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8012874:	2301      	movs	r3, #1
 8012876:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	685b      	ldr	r3, [r3, #4]
 801287c:	4618      	mov	r0, r3
 801287e:	f007 f995 	bl	8019bac <tcp_output>
 8012882:	4603      	mov	r3, r0
 8012884:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8012886:	f997 300c 	ldrsb.w	r3, [r7, #12]
 801288a:	f113 0f04 	cmn.w	r3, #4
 801288e:	d12c      	bne.n	80128ea <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8012890:	7b3b      	ldrb	r3, [r7, #12]
 8012892:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8012894:	2301      	movs	r3, #1
 8012896:	76fb      	strb	r3, [r7, #27]
 8012898:	e027      	b.n	80128ea <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 801289a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801289e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80128a2:	d120      	bne.n	80128e6 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	685b      	ldr	r3, [r3, #4]
 80128a8:	4618      	mov	r0, r3
 80128aa:	f007 f97f 	bl	8019bac <tcp_output>
 80128ae:	4603      	mov	r3, r0
 80128b0:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 80128b2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80128b6:	f113 0f04 	cmn.w	r3, #4
 80128ba:	d104      	bne.n	80128c6 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 80128bc:	7b7b      	ldrb	r3, [r7, #13]
 80128be:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80128c0:	2301      	movs	r3, #1
 80128c2:	76fb      	strb	r3, [r7, #27]
 80128c4:	e011      	b.n	80128ea <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 80128c6:	7e3b      	ldrb	r3, [r7, #24]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d00e      	beq.n	80128ea <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	6a1b      	ldr	r3, [r3, #32]
 80128d0:	699b      	ldr	r3, [r3, #24]
 80128d2:	2b00      	cmp	r3, #0
 80128d4:	d102      	bne.n	80128dc <lwip_netconn_do_writemore+0x348>
 80128d6:	f06f 0306 	mvn.w	r3, #6
 80128da:	e000      	b.n	80128de <lwip_netconn_do_writemore+0x34a>
 80128dc:	2300      	movs	r3, #0
 80128de:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 80128e0:	2301      	movs	r3, #1
 80128e2:	76fb      	strb	r3, [r7, #27]
 80128e4:	e001      	b.n	80128ea <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 80128e6:	2301      	movs	r3, #1
 80128e8:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 80128ea:	7efb      	ldrb	r3, [r7, #27]
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d015      	beq.n	801291c <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	6a1b      	ldr	r3, [r3, #32]
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	330c      	adds	r3, #12
 80128f8:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	6a1b      	ldr	r3, [r3, #32]
 80128fe:	7ffa      	ldrb	r2, [r7, #31]
 8012900:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	2200      	movs	r2, #0
 8012906:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	2200      	movs	r2, #0
 801290c:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 801290e:	78fb      	ldrb	r3, [r7, #3]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d006      	beq.n	8012922 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8012914:	68b8      	ldr	r0, [r7, #8]
 8012916:	f00b fb03 	bl	801df20 <sys_sem_signal>
 801291a:	e002      	b.n	8012922 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 801291c:	f04f 33ff 	mov.w	r3, #4294967295
 8012920:	e000      	b.n	8012924 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8012922:	2300      	movs	r3, #0
}
 8012924:	4618      	mov	r0, r3
 8012926:	3720      	adds	r7, #32
 8012928:	46bd      	mov	sp, r7
 801292a:	bd80      	pop	{r7, pc}

0801292c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 801292c:	b580      	push	{r7, lr}
 801292e:	b084      	sub	sp, #16
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	785b      	ldrb	r3, [r3, #1]
 801293e:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	681b      	ldr	r3, [r3, #0]
 8012944:	685b      	ldr	r3, [r3, #4]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d069      	beq.n	8012a1e <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	781b      	ldrb	r3, [r3, #0]
 8012950:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8012954:	2b10      	cmp	r3, #16
 8012956:	d162      	bne.n	8012a1e <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 801295c:	2b03      	cmp	r3, #3
 801295e:	d002      	beq.n	8012966 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8012960:	7afb      	ldrb	r3, [r7, #11]
 8012962:	2b02      	cmp	r3, #2
 8012964:	d05b      	beq.n	8012a1e <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8012966:	7afb      	ldrb	r3, [r7, #11]
 8012968:	2b03      	cmp	r3, #3
 801296a:	d103      	bne.n	8012974 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 801296c:	68fb      	ldr	r3, [r7, #12]
 801296e:	22f5      	movs	r2, #245	; 0xf5
 8012970:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8012972:	e059      	b.n	8012a28 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 8012974:	7afb      	ldrb	r3, [r7, #11]
 8012976:	2b01      	cmp	r3, #1
 8012978:	d103      	bne.n	8012982 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	22fb      	movs	r2, #251	; 0xfb
 801297e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8012980:	e052      	b.n	8012a28 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	7a1b      	ldrb	r3, [r3, #8]
 8012986:	f003 0301 	and.w	r3, r3, #1
 801298a:	2b00      	cmp	r3, #0
 801298c:	d004      	beq.n	8012998 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	4618      	mov	r0, r3
 8012994:	f7ff fa7a 	bl	8011e8c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	6a1b      	ldr	r3, [r3, #32]
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d006      	beq.n	80129b0 <lwip_netconn_do_close+0x84>
 80129a2:	4b23      	ldr	r3, [pc, #140]	; (8012a30 <lwip_netconn_do_close+0x104>)
 80129a4:	f240 72bd 	movw	r2, #1981	; 0x7bd
 80129a8:	4922      	ldr	r1, [pc, #136]	; (8012a34 <lwip_netconn_do_close+0x108>)
 80129aa:	4823      	ldr	r0, [pc, #140]	; (8012a38 <lwip_netconn_do_close+0x10c>)
 80129ac:	f00c fbfe 	bl	801f1ac <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	2204      	movs	r2, #4
 80129b6:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	68fa      	ldr	r2, [r7, #12]
 80129be:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80129c0:	68fb      	ldr	r3, [r7, #12]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	2100      	movs	r1, #0
 80129c6:	4618      	mov	r0, r3
 80129c8:	f7ff fade 	bl	8011f88 <lwip_netconn_do_close_internal>
 80129cc:	4603      	mov	r3, r0
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d029      	beq.n	8012a26 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	785b      	ldrb	r3, [r3, #1]
 80129d8:	2b04      	cmp	r3, #4
 80129da:	d006      	beq.n	80129ea <lwip_netconn_do_close+0xbe>
 80129dc:	4b14      	ldr	r3, [pc, #80]	; (8012a30 <lwip_netconn_do_close+0x104>)
 80129de:	f240 72c2 	movw	r2, #1986	; 0x7c2
 80129e2:	4916      	ldr	r1, [pc, #88]	; (8012a3c <lwip_netconn_do_close+0x110>)
 80129e4:	4814      	ldr	r0, [pc, #80]	; (8012a38 <lwip_netconn_do_close+0x10c>)
 80129e6:	f00c fbe1 	bl	801f1ac <iprintf>
        UNLOCK_TCPIP_CORE();
 80129ea:	4815      	ldr	r0, [pc, #84]	; (8012a40 <lwip_netconn_do_close+0x114>)
 80129ec:	f00b fb09 	bl	801e002 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	681b      	ldr	r3, [r3, #0]
 80129f4:	330c      	adds	r3, #12
 80129f6:	2100      	movs	r1, #0
 80129f8:	4618      	mov	r0, r3
 80129fa:	f00b fa60 	bl	801debe <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 80129fe:	4810      	ldr	r0, [pc, #64]	; (8012a40 <lwip_netconn_do_close+0x114>)
 8012a00:	f00b faf0 	bl	801dfe4 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8012a04:	68fb      	ldr	r3, [r7, #12]
 8012a06:	681b      	ldr	r3, [r3, #0]
 8012a08:	785b      	ldrb	r3, [r3, #1]
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d00b      	beq.n	8012a26 <lwip_netconn_do_close+0xfa>
 8012a0e:	4b08      	ldr	r3, [pc, #32]	; (8012a30 <lwip_netconn_do_close+0x104>)
 8012a10:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8012a14:	4909      	ldr	r1, [pc, #36]	; (8012a3c <lwip_netconn_do_close+0x110>)
 8012a16:	4808      	ldr	r0, [pc, #32]	; (8012a38 <lwip_netconn_do_close+0x10c>)
 8012a18:	f00c fbc8 	bl	801f1ac <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8012a1c:	e003      	b.n	8012a26 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	22f5      	movs	r2, #245	; 0xf5
 8012a22:	711a      	strb	r2, [r3, #4]
 8012a24:	e000      	b.n	8012a28 <lwip_netconn_do_close+0xfc>
      return;
 8012a26:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8012a28:	3710      	adds	r7, #16
 8012a2a:	46bd      	mov	sp, r7
 8012a2c:	bd80      	pop	{r7, pc}
 8012a2e:	bf00      	nop
 8012a30:	08023ab0 	.word	0x08023ab0
 8012a34:	08023e54 	.word	0x08023e54
 8012a38:	08023af4 	.word	0x08023af4
 8012a3c:	08023e70 	.word	0x08023e70
 8012a40:	2000aa58 	.word	0x2000aa58

08012a44 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b082      	sub	sp, #8
 8012a48:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8012a4a:	2006      	movs	r0, #6
 8012a4c:	f000 ff30 	bl	80138b0 <memp_malloc>
 8012a50:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d004      	beq.n	8012a62 <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 8012a58:	2210      	movs	r2, #16
 8012a5a:	2100      	movs	r1, #0
 8012a5c:	6878      	ldr	r0, [r7, #4]
 8012a5e:	f00b fc79 	bl	801e354 <memset>
  }
  return buf;
 8012a62:	687b      	ldr	r3, [r7, #4]
}
 8012a64:	4618      	mov	r0, r3
 8012a66:	3708      	adds	r7, #8
 8012a68:	46bd      	mov	sp, r7
 8012a6a:	bd80      	pop	{r7, pc}

08012a6c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8012a6c:	b580      	push	{r7, lr}
 8012a6e:	b082      	sub	sp, #8
 8012a70:	af00      	add	r7, sp, #0
 8012a72:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d013      	beq.n	8012aa2 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	681b      	ldr	r3, [r3, #0]
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d00b      	beq.n	8012a9a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	681b      	ldr	r3, [r3, #0]
 8012a86:	4618      	mov	r0, r3
 8012a88:	f001 fda4 	bl	80145d4 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	2200      	movs	r2, #0
 8012a90:	605a      	str	r2, [r3, #4]
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	685a      	ldr	r2, [r3, #4]
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8012a9a:	6879      	ldr	r1, [r7, #4]
 8012a9c:	2006      	movs	r0, #6
 8012a9e:	f000 ff59 	bl	8013954 <memp_free>
  }
}
 8012aa2:	bf00      	nop
 8012aa4:	3708      	adds	r7, #8
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	bd80      	pop	{r7, pc}
	...

08012aac <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 8012aac:	b580      	push	{r7, lr}
 8012aae:	b084      	sub	sp, #16
 8012ab0:	af00      	add	r7, sp, #0
 8012ab2:	60f8      	str	r0, [r7, #12]
 8012ab4:	60b9      	str	r1, [r7, #8]
 8012ab6:	4613      	mov	r3, r2
 8012ab8:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d108      	bne.n	8012ad2 <netbuf_ref+0x26>
 8012ac0:	4b1c      	ldr	r3, [pc, #112]	; (8012b34 <netbuf_ref+0x88>)
 8012ac2:	2299      	movs	r2, #153	; 0x99
 8012ac4:	491c      	ldr	r1, [pc, #112]	; (8012b38 <netbuf_ref+0x8c>)
 8012ac6:	481d      	ldr	r0, [pc, #116]	; (8012b3c <netbuf_ref+0x90>)
 8012ac8:	f00c fb70 	bl	801f1ac <iprintf>
 8012acc:	f06f 030f 	mvn.w	r3, #15
 8012ad0:	e02b      	b.n	8012b2a <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d004      	beq.n	8012ae4 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 8012ada:	68fb      	ldr	r3, [r7, #12]
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	4618      	mov	r0, r3
 8012ae0:	f001 fd78 	bl	80145d4 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8012ae4:	2241      	movs	r2, #65	; 0x41
 8012ae6:	2100      	movs	r1, #0
 8012ae8:	2036      	movs	r0, #54	; 0x36
 8012aea:	f001 fa8f 	bl	801400c <pbuf_alloc>
 8012aee:	4602      	mov	r2, r0
 8012af0:	68fb      	ldr	r3, [r7, #12]
 8012af2:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	681b      	ldr	r3, [r3, #0]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d105      	bne.n	8012b08 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	2200      	movs	r2, #0
 8012b00:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 8012b02:	f04f 33ff 	mov.w	r3, #4294967295
 8012b06:	e010      	b.n	8012b2a <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8012b08:	68fb      	ldr	r3, [r7, #12]
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	68ba      	ldr	r2, [r7, #8]
 8012b0e:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 8012b10:	68fb      	ldr	r3, [r7, #12]
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	88fa      	ldrh	r2, [r7, #6]
 8012b16:	811a      	strh	r2, [r3, #8]
 8012b18:	68fa      	ldr	r2, [r7, #12]
 8012b1a:	6812      	ldr	r2, [r2, #0]
 8012b1c:	891b      	ldrh	r3, [r3, #8]
 8012b1e:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	681a      	ldr	r2, [r3, #0]
 8012b24:	68fb      	ldr	r3, [r7, #12]
 8012b26:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8012b28:	2300      	movs	r3, #0
}
 8012b2a:	4618      	mov	r0, r3
 8012b2c:	3710      	adds	r7, #16
 8012b2e:	46bd      	mov	sp, r7
 8012b30:	bd80      	pop	{r7, pc}
 8012b32:	bf00      	nop
 8012b34:	08024008 	.word	0x08024008
 8012b38:	080240c0 	.word	0x080240c0
 8012b3c:	08024058 	.word	0x08024058

08012b40 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b084      	sub	sp, #16
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	60f8      	str	r0, [r7, #12]
 8012b48:	60b9      	str	r1, [r7, #8]
 8012b4a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d108      	bne.n	8012b64 <netbuf_data+0x24>
 8012b52:	4b1b      	ldr	r3, [pc, #108]	; (8012bc0 <netbuf_data+0x80>)
 8012b54:	22c6      	movs	r2, #198	; 0xc6
 8012b56:	491b      	ldr	r1, [pc, #108]	; (8012bc4 <netbuf_data+0x84>)
 8012b58:	481b      	ldr	r0, [pc, #108]	; (8012bc8 <netbuf_data+0x88>)
 8012b5a:	f00c fb27 	bl	801f1ac <iprintf>
 8012b5e:	f06f 030f 	mvn.w	r3, #15
 8012b62:	e029      	b.n	8012bb8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8012b64:	68bb      	ldr	r3, [r7, #8]
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d108      	bne.n	8012b7c <netbuf_data+0x3c>
 8012b6a:	4b15      	ldr	r3, [pc, #84]	; (8012bc0 <netbuf_data+0x80>)
 8012b6c:	22c7      	movs	r2, #199	; 0xc7
 8012b6e:	4917      	ldr	r1, [pc, #92]	; (8012bcc <netbuf_data+0x8c>)
 8012b70:	4815      	ldr	r0, [pc, #84]	; (8012bc8 <netbuf_data+0x88>)
 8012b72:	f00c fb1b 	bl	801f1ac <iprintf>
 8012b76:	f06f 030f 	mvn.w	r3, #15
 8012b7a:	e01d      	b.n	8012bb8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8012b7c:	687b      	ldr	r3, [r7, #4]
 8012b7e:	2b00      	cmp	r3, #0
 8012b80:	d108      	bne.n	8012b94 <netbuf_data+0x54>
 8012b82:	4b0f      	ldr	r3, [pc, #60]	; (8012bc0 <netbuf_data+0x80>)
 8012b84:	22c8      	movs	r2, #200	; 0xc8
 8012b86:	4912      	ldr	r1, [pc, #72]	; (8012bd0 <netbuf_data+0x90>)
 8012b88:	480f      	ldr	r0, [pc, #60]	; (8012bc8 <netbuf_data+0x88>)
 8012b8a:	f00c fb0f 	bl	801f1ac <iprintf>
 8012b8e:	f06f 030f 	mvn.w	r3, #15
 8012b92:	e011      	b.n	8012bb8 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	685b      	ldr	r3, [r3, #4]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d102      	bne.n	8012ba2 <netbuf_data+0x62>
    return ERR_BUF;
 8012b9c:	f06f 0301 	mvn.w	r3, #1
 8012ba0:	e00a      	b.n	8012bb8 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8012ba2:	68fb      	ldr	r3, [r7, #12]
 8012ba4:	685b      	ldr	r3, [r3, #4]
 8012ba6:	685a      	ldr	r2, [r3, #4]
 8012ba8:	68bb      	ldr	r3, [r7, #8]
 8012baa:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	685b      	ldr	r3, [r3, #4]
 8012bb0:	895a      	ldrh	r2, [r3, #10]
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8012bb6:	2300      	movs	r3, #0
}
 8012bb8:	4618      	mov	r0, r3
 8012bba:	3710      	adds	r7, #16
 8012bbc:	46bd      	mov	sp, r7
 8012bbe:	bd80      	pop	{r7, pc}
 8012bc0:	08024008 	.word	0x08024008
 8012bc4:	08024110 	.word	0x08024110
 8012bc8:	08024058 	.word	0x08024058
 8012bcc:	0802412c 	.word	0x0802412c
 8012bd0:	0802414c 	.word	0x0802414c

08012bd4 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8012bd4:	b580      	push	{r7, lr}
 8012bd6:	b084      	sub	sp, #16
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	6078      	str	r0, [r7, #4]
 8012bdc:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8012bde:	f008 f89d 	bl	801ad1c <sys_timeouts_sleeptime>
 8012be2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012bea:	d10b      	bne.n	8012c04 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8012bec:	4813      	ldr	r0, [pc, #76]	; (8012c3c <tcpip_timeouts_mbox_fetch+0x68>)
 8012bee:	f00b fa08 	bl	801e002 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8012bf2:	2200      	movs	r2, #0
 8012bf4:	6839      	ldr	r1, [r7, #0]
 8012bf6:	6878      	ldr	r0, [r7, #4]
 8012bf8:	f00b f8c0 	bl	801dd7c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 8012bfc:	480f      	ldr	r0, [pc, #60]	; (8012c3c <tcpip_timeouts_mbox_fetch+0x68>)
 8012bfe:	f00b f9f1 	bl	801dfe4 <sys_mutex_lock>
    return;
 8012c02:	e018      	b.n	8012c36 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 8012c04:	68fb      	ldr	r3, [r7, #12]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d102      	bne.n	8012c10 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8012c0a:	f008 f84d 	bl	801aca8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012c0e:	e7e6      	b.n	8012bde <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8012c10:	480a      	ldr	r0, [pc, #40]	; (8012c3c <tcpip_timeouts_mbox_fetch+0x68>)
 8012c12:	f00b f9f6 	bl	801e002 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 8012c16:	68fa      	ldr	r2, [r7, #12]
 8012c18:	6839      	ldr	r1, [r7, #0]
 8012c1a:	6878      	ldr	r0, [r7, #4]
 8012c1c:	f00b f8ae 	bl	801dd7c <sys_arch_mbox_fetch>
 8012c20:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 8012c22:	4806      	ldr	r0, [pc, #24]	; (8012c3c <tcpip_timeouts_mbox_fetch+0x68>)
 8012c24:	f00b f9de 	bl	801dfe4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8012c28:	68bb      	ldr	r3, [r7, #8]
 8012c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c2e:	d102      	bne.n	8012c36 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8012c30:	f008 f83a 	bl	801aca8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012c34:	e7d3      	b.n	8012bde <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 8012c36:	3710      	adds	r7, #16
 8012c38:	46bd      	mov	sp, r7
 8012c3a:	bd80      	pop	{r7, pc}
 8012c3c:	2000aa58 	.word	0x2000aa58

08012c40 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8012c40:	b580      	push	{r7, lr}
 8012c42:	b084      	sub	sp, #16
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8012c48:	4810      	ldr	r0, [pc, #64]	; (8012c8c <tcpip_thread+0x4c>)
 8012c4a:	f00b f9cb 	bl	801dfe4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8012c4e:	4b10      	ldr	r3, [pc, #64]	; (8012c90 <tcpip_thread+0x50>)
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d005      	beq.n	8012c62 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8012c56:	4b0e      	ldr	r3, [pc, #56]	; (8012c90 <tcpip_thread+0x50>)
 8012c58:	681b      	ldr	r3, [r3, #0]
 8012c5a:	4a0e      	ldr	r2, [pc, #56]	; (8012c94 <tcpip_thread+0x54>)
 8012c5c:	6812      	ldr	r2, [r2, #0]
 8012c5e:	4610      	mov	r0, r2
 8012c60:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012c62:	f107 030c 	add.w	r3, r7, #12
 8012c66:	4619      	mov	r1, r3
 8012c68:	480b      	ldr	r0, [pc, #44]	; (8012c98 <tcpip_thread+0x58>)
 8012c6a:	f7ff ffb3 	bl	8012bd4 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d106      	bne.n	8012c82 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012c74:	4b09      	ldr	r3, [pc, #36]	; (8012c9c <tcpip_thread+0x5c>)
 8012c76:	2291      	movs	r2, #145	; 0x91
 8012c78:	4909      	ldr	r1, [pc, #36]	; (8012ca0 <tcpip_thread+0x60>)
 8012c7a:	480a      	ldr	r0, [pc, #40]	; (8012ca4 <tcpip_thread+0x64>)
 8012c7c:	f00c fa96 	bl	801f1ac <iprintf>
      continue;
 8012c80:	e003      	b.n	8012c8a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	4618      	mov	r0, r3
 8012c86:	f000 f80f 	bl	8012ca8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012c8a:	e7ea      	b.n	8012c62 <tcpip_thread+0x22>
 8012c8c:	2000aa58 	.word	0x2000aa58
 8012c90:	20006dc0 	.word	0x20006dc0
 8012c94:	20006dc4 	.word	0x20006dc4
 8012c98:	20006dc8 	.word	0x20006dc8
 8012c9c:	080241a0 	.word	0x080241a0
 8012ca0:	080241d0 	.word	0x080241d0
 8012ca4:	080241f0 	.word	0x080241f0

08012ca8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8012ca8:	b580      	push	{r7, lr}
 8012caa:	b082      	sub	sp, #8
 8012cac:	af00      	add	r7, sp, #0
 8012cae:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	781b      	ldrb	r3, [r3, #0]
 8012cb4:	2b02      	cmp	r3, #2
 8012cb6:	d026      	beq.n	8012d06 <tcpip_thread_handle_msg+0x5e>
 8012cb8:	2b02      	cmp	r3, #2
 8012cba:	dc2b      	bgt.n	8012d14 <tcpip_thread_handle_msg+0x6c>
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d002      	beq.n	8012cc6 <tcpip_thread_handle_msg+0x1e>
 8012cc0:	2b01      	cmp	r3, #1
 8012cc2:	d015      	beq.n	8012cf0 <tcpip_thread_handle_msg+0x48>
 8012cc4:	e026      	b.n	8012d14 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	68db      	ldr	r3, [r3, #12]
 8012cca:	687a      	ldr	r2, [r7, #4]
 8012ccc:	6850      	ldr	r0, [r2, #4]
 8012cce:	687a      	ldr	r2, [r7, #4]
 8012cd0:	6892      	ldr	r2, [r2, #8]
 8012cd2:	4611      	mov	r1, r2
 8012cd4:	4798      	blx	r3
 8012cd6:	4603      	mov	r3, r0
 8012cd8:	2b00      	cmp	r3, #0
 8012cda:	d004      	beq.n	8012ce6 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	685b      	ldr	r3, [r3, #4]
 8012ce0:	4618      	mov	r0, r3
 8012ce2:	f001 fc77 	bl	80145d4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012ce6:	6879      	ldr	r1, [r7, #4]
 8012ce8:	2009      	movs	r0, #9
 8012cea:	f000 fe33 	bl	8013954 <memp_free>
      break;
 8012cee:	e018      	b.n	8012d22 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012cf0:	687b      	ldr	r3, [r7, #4]
 8012cf2:	685b      	ldr	r3, [r3, #4]
 8012cf4:	687a      	ldr	r2, [r7, #4]
 8012cf6:	6892      	ldr	r2, [r2, #8]
 8012cf8:	4610      	mov	r0, r2
 8012cfa:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8012cfc:	6879      	ldr	r1, [r7, #4]
 8012cfe:	2008      	movs	r0, #8
 8012d00:	f000 fe28 	bl	8013954 <memp_free>
      break;
 8012d04:	e00d      	b.n	8012d22 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	685b      	ldr	r3, [r3, #4]
 8012d0a:	687a      	ldr	r2, [r7, #4]
 8012d0c:	6892      	ldr	r2, [r2, #8]
 8012d0e:	4610      	mov	r0, r2
 8012d10:	4798      	blx	r3
      break;
 8012d12:	e006      	b.n	8012d22 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012d14:	4b05      	ldr	r3, [pc, #20]	; (8012d2c <tcpip_thread_handle_msg+0x84>)
 8012d16:	22cf      	movs	r2, #207	; 0xcf
 8012d18:	4905      	ldr	r1, [pc, #20]	; (8012d30 <tcpip_thread_handle_msg+0x88>)
 8012d1a:	4806      	ldr	r0, [pc, #24]	; (8012d34 <tcpip_thread_handle_msg+0x8c>)
 8012d1c:	f00c fa46 	bl	801f1ac <iprintf>
      break;
 8012d20:	bf00      	nop
  }
}
 8012d22:	bf00      	nop
 8012d24:	3708      	adds	r7, #8
 8012d26:	46bd      	mov	sp, r7
 8012d28:	bd80      	pop	{r7, pc}
 8012d2a:	bf00      	nop
 8012d2c:	080241a0 	.word	0x080241a0
 8012d30:	080241d0 	.word	0x080241d0
 8012d34:	080241f0 	.word	0x080241f0

08012d38 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8012d38:	b580      	push	{r7, lr}
 8012d3a:	b086      	sub	sp, #24
 8012d3c:	af00      	add	r7, sp, #0
 8012d3e:	60f8      	str	r0, [r7, #12]
 8012d40:	60b9      	str	r1, [r7, #8]
 8012d42:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012d44:	481a      	ldr	r0, [pc, #104]	; (8012db0 <tcpip_inpkt+0x78>)
 8012d46:	f00b f874 	bl	801de32 <sys_mbox_valid>
 8012d4a:	4603      	mov	r3, r0
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d105      	bne.n	8012d5c <tcpip_inpkt+0x24>
 8012d50:	4b18      	ldr	r3, [pc, #96]	; (8012db4 <tcpip_inpkt+0x7c>)
 8012d52:	22fc      	movs	r2, #252	; 0xfc
 8012d54:	4918      	ldr	r1, [pc, #96]	; (8012db8 <tcpip_inpkt+0x80>)
 8012d56:	4819      	ldr	r0, [pc, #100]	; (8012dbc <tcpip_inpkt+0x84>)
 8012d58:	f00c fa28 	bl	801f1ac <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8012d5c:	2009      	movs	r0, #9
 8012d5e:	f000 fda7 	bl	80138b0 <memp_malloc>
 8012d62:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8012d64:	697b      	ldr	r3, [r7, #20]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d102      	bne.n	8012d70 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8012d6a:	f04f 33ff 	mov.w	r3, #4294967295
 8012d6e:	e01a      	b.n	8012da6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8012d70:	697b      	ldr	r3, [r7, #20]
 8012d72:	2200      	movs	r2, #0
 8012d74:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8012d76:	697b      	ldr	r3, [r7, #20]
 8012d78:	68fa      	ldr	r2, [r7, #12]
 8012d7a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8012d7c:	697b      	ldr	r3, [r7, #20]
 8012d7e:	68ba      	ldr	r2, [r7, #8]
 8012d80:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8012d82:	697b      	ldr	r3, [r7, #20]
 8012d84:	687a      	ldr	r2, [r7, #4]
 8012d86:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012d88:	6979      	ldr	r1, [r7, #20]
 8012d8a:	4809      	ldr	r0, [pc, #36]	; (8012db0 <tcpip_inpkt+0x78>)
 8012d8c:	f00a ffdc 	bl	801dd48 <sys_mbox_trypost>
 8012d90:	4603      	mov	r3, r0
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d006      	beq.n	8012da4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012d96:	6979      	ldr	r1, [r7, #20]
 8012d98:	2009      	movs	r0, #9
 8012d9a:	f000 fddb 	bl	8013954 <memp_free>
    return ERR_MEM;
 8012d9e:	f04f 33ff 	mov.w	r3, #4294967295
 8012da2:	e000      	b.n	8012da6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8012da4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8012da6:	4618      	mov	r0, r3
 8012da8:	3718      	adds	r7, #24
 8012daa:	46bd      	mov	sp, r7
 8012dac:	bd80      	pop	{r7, pc}
 8012dae:	bf00      	nop
 8012db0:	20006dc8 	.word	0x20006dc8
 8012db4:	080241a0 	.word	0x080241a0
 8012db8:	08024218 	.word	0x08024218
 8012dbc:	080241f0 	.word	0x080241f0

08012dc0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	b082      	sub	sp, #8
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	6078      	str	r0, [r7, #4]
 8012dc8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8012dca:	683b      	ldr	r3, [r7, #0]
 8012dcc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012dd0:	f003 0318 	and.w	r3, r3, #24
 8012dd4:	2b00      	cmp	r3, #0
 8012dd6:	d006      	beq.n	8012de6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8012dd8:	4a08      	ldr	r2, [pc, #32]	; (8012dfc <tcpip_input+0x3c>)
 8012dda:	6839      	ldr	r1, [r7, #0]
 8012ddc:	6878      	ldr	r0, [r7, #4]
 8012dde:	f7ff ffab 	bl	8012d38 <tcpip_inpkt>
 8012de2:	4603      	mov	r3, r0
 8012de4:	e005      	b.n	8012df2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8012de6:	4a06      	ldr	r2, [pc, #24]	; (8012e00 <tcpip_input+0x40>)
 8012de8:	6839      	ldr	r1, [r7, #0]
 8012dea:	6878      	ldr	r0, [r7, #4]
 8012dec:	f7ff ffa4 	bl	8012d38 <tcpip_inpkt>
 8012df0:	4603      	mov	r3, r0
}
 8012df2:	4618      	mov	r0, r3
 8012df4:	3708      	adds	r7, #8
 8012df6:	46bd      	mov	sp, r7
 8012df8:	bd80      	pop	{r7, pc}
 8012dfa:	bf00      	nop
 8012dfc:	0801db35 	.word	0x0801db35
 8012e00:	0801ca49 	.word	0x0801ca49

08012e04 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8012e04:	b580      	push	{r7, lr}
 8012e06:	b084      	sub	sp, #16
 8012e08:	af00      	add	r7, sp, #0
 8012e0a:	6078      	str	r0, [r7, #4]
 8012e0c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012e0e:	4819      	ldr	r0, [pc, #100]	; (8012e74 <tcpip_try_callback+0x70>)
 8012e10:	f00b f80f 	bl	801de32 <sys_mbox_valid>
 8012e14:	4603      	mov	r3, r0
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d106      	bne.n	8012e28 <tcpip_try_callback+0x24>
 8012e1a:	4b17      	ldr	r3, [pc, #92]	; (8012e78 <tcpip_try_callback+0x74>)
 8012e1c:	f240 125d 	movw	r2, #349	; 0x15d
 8012e20:	4916      	ldr	r1, [pc, #88]	; (8012e7c <tcpip_try_callback+0x78>)
 8012e22:	4817      	ldr	r0, [pc, #92]	; (8012e80 <tcpip_try_callback+0x7c>)
 8012e24:	f00c f9c2 	bl	801f1ac <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8012e28:	2008      	movs	r0, #8
 8012e2a:	f000 fd41 	bl	80138b0 <memp_malloc>
 8012e2e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	d102      	bne.n	8012e3c <tcpip_try_callback+0x38>
    return ERR_MEM;
 8012e36:	f04f 33ff 	mov.w	r3, #4294967295
 8012e3a:	e017      	b.n	8012e6c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8012e3c:	68fb      	ldr	r3, [r7, #12]
 8012e3e:	2201      	movs	r2, #1
 8012e40:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8012e42:	68fb      	ldr	r3, [r7, #12]
 8012e44:	687a      	ldr	r2, [r7, #4]
 8012e46:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8012e48:	68fb      	ldr	r3, [r7, #12]
 8012e4a:	683a      	ldr	r2, [r7, #0]
 8012e4c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012e4e:	68f9      	ldr	r1, [r7, #12]
 8012e50:	4808      	ldr	r0, [pc, #32]	; (8012e74 <tcpip_try_callback+0x70>)
 8012e52:	f00a ff79 	bl	801dd48 <sys_mbox_trypost>
 8012e56:	4603      	mov	r3, r0
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d006      	beq.n	8012e6a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8012e5c:	68f9      	ldr	r1, [r7, #12]
 8012e5e:	2008      	movs	r0, #8
 8012e60:	f000 fd78 	bl	8013954 <memp_free>
    return ERR_MEM;
 8012e64:	f04f 33ff 	mov.w	r3, #4294967295
 8012e68:	e000      	b.n	8012e6c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8012e6a:	2300      	movs	r3, #0
}
 8012e6c:	4618      	mov	r0, r3
 8012e6e:	3710      	adds	r7, #16
 8012e70:	46bd      	mov	sp, r7
 8012e72:	bd80      	pop	{r7, pc}
 8012e74:	20006dc8 	.word	0x20006dc8
 8012e78:	080241a0 	.word	0x080241a0
 8012e7c:	08024218 	.word	0x08024218
 8012e80:	080241f0 	.word	0x080241f0

08012e84 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 8012e84:	b580      	push	{r7, lr}
 8012e86:	b084      	sub	sp, #16
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	60f8      	str	r0, [r7, #12]
 8012e8c:	60b9      	str	r1, [r7, #8]
 8012e8e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8012e90:	4806      	ldr	r0, [pc, #24]	; (8012eac <tcpip_send_msg_wait_sem+0x28>)
 8012e92:	f00b f8a7 	bl	801dfe4 <sys_mutex_lock>
  fn(apimsg);
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	68b8      	ldr	r0, [r7, #8]
 8012e9a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8012e9c:	4803      	ldr	r0, [pc, #12]	; (8012eac <tcpip_send_msg_wait_sem+0x28>)
 8012e9e:	f00b f8b0 	bl	801e002 <sys_mutex_unlock>
  return ERR_OK;
 8012ea2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8012ea4:	4618      	mov	r0, r3
 8012ea6:	3710      	adds	r7, #16
 8012ea8:	46bd      	mov	sp, r7
 8012eaa:	bd80      	pop	{r7, pc}
 8012eac:	2000aa58 	.word	0x2000aa58

08012eb0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b084      	sub	sp, #16
 8012eb4:	af02      	add	r7, sp, #8
 8012eb6:	6078      	str	r0, [r7, #4]
 8012eb8:	6039      	str	r1, [r7, #0]
  lwip_init();
 8012eba:	f000 f871 	bl	8012fa0 <lwip_init>

  tcpip_init_done = initfunc;
 8012ebe:	4a17      	ldr	r2, [pc, #92]	; (8012f1c <tcpip_init+0x6c>)
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8012ec4:	4a16      	ldr	r2, [pc, #88]	; (8012f20 <tcpip_init+0x70>)
 8012ec6:	683b      	ldr	r3, [r7, #0]
 8012ec8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8012eca:	2106      	movs	r1, #6
 8012ecc:	4815      	ldr	r0, [pc, #84]	; (8012f24 <tcpip_init+0x74>)
 8012ece:	f00a ff07 	bl	801dce0 <sys_mbox_new>
 8012ed2:	4603      	mov	r3, r0
 8012ed4:	2b00      	cmp	r3, #0
 8012ed6:	d006      	beq.n	8012ee6 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8012ed8:	4b13      	ldr	r3, [pc, #76]	; (8012f28 <tcpip_init+0x78>)
 8012eda:	f240 2261 	movw	r2, #609	; 0x261
 8012ede:	4913      	ldr	r1, [pc, #76]	; (8012f2c <tcpip_init+0x7c>)
 8012ee0:	4813      	ldr	r0, [pc, #76]	; (8012f30 <tcpip_init+0x80>)
 8012ee2:	f00c f963 	bl	801f1ac <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8012ee6:	4813      	ldr	r0, [pc, #76]	; (8012f34 <tcpip_init+0x84>)
 8012ee8:	f00b f860 	bl	801dfac <sys_mutex_new>
 8012eec:	4603      	mov	r3, r0
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d006      	beq.n	8012f00 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8012ef2:	4b0d      	ldr	r3, [pc, #52]	; (8012f28 <tcpip_init+0x78>)
 8012ef4:	f240 2265 	movw	r2, #613	; 0x265
 8012ef8:	490f      	ldr	r1, [pc, #60]	; (8012f38 <tcpip_init+0x88>)
 8012efa:	480d      	ldr	r0, [pc, #52]	; (8012f30 <tcpip_init+0x80>)
 8012efc:	f00c f956 	bl	801f1ac <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8012f00:	2300      	movs	r3, #0
 8012f02:	9300      	str	r3, [sp, #0]
 8012f04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012f08:	2200      	movs	r2, #0
 8012f0a:	490c      	ldr	r1, [pc, #48]	; (8012f3c <tcpip_init+0x8c>)
 8012f0c:	480c      	ldr	r0, [pc, #48]	; (8012f40 <tcpip_init+0x90>)
 8012f0e:	f00b f885 	bl	801e01c <sys_thread_new>
}
 8012f12:	bf00      	nop
 8012f14:	3708      	adds	r7, #8
 8012f16:	46bd      	mov	sp, r7
 8012f18:	bd80      	pop	{r7, pc}
 8012f1a:	bf00      	nop
 8012f1c:	20006dc0 	.word	0x20006dc0
 8012f20:	20006dc4 	.word	0x20006dc4
 8012f24:	20006dc8 	.word	0x20006dc8
 8012f28:	080241a0 	.word	0x080241a0
 8012f2c:	08024228 	.word	0x08024228
 8012f30:	080241f0 	.word	0x080241f0
 8012f34:	2000aa58 	.word	0x2000aa58
 8012f38:	0802424c 	.word	0x0802424c
 8012f3c:	08012c41 	.word	0x08012c41
 8012f40:	08024270 	.word	0x08024270

08012f44 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8012f44:	b480      	push	{r7}
 8012f46:	b083      	sub	sp, #12
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	4603      	mov	r3, r0
 8012f4c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8012f4e:	88fb      	ldrh	r3, [r7, #6]
 8012f50:	021b      	lsls	r3, r3, #8
 8012f52:	b21a      	sxth	r2, r3
 8012f54:	88fb      	ldrh	r3, [r7, #6]
 8012f56:	0a1b      	lsrs	r3, r3, #8
 8012f58:	b29b      	uxth	r3, r3
 8012f5a:	b21b      	sxth	r3, r3
 8012f5c:	4313      	orrs	r3, r2
 8012f5e:	b21b      	sxth	r3, r3
 8012f60:	b29b      	uxth	r3, r3
}
 8012f62:	4618      	mov	r0, r3
 8012f64:	370c      	adds	r7, #12
 8012f66:	46bd      	mov	sp, r7
 8012f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f6c:	4770      	bx	lr

08012f6e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8012f6e:	b480      	push	{r7}
 8012f70:	b083      	sub	sp, #12
 8012f72:	af00      	add	r7, sp, #0
 8012f74:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	061a      	lsls	r2, r3, #24
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	021b      	lsls	r3, r3, #8
 8012f7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012f82:	431a      	orrs	r2, r3
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	0a1b      	lsrs	r3, r3, #8
 8012f88:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8012f8c:	431a      	orrs	r2, r3
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	0e1b      	lsrs	r3, r3, #24
 8012f92:	4313      	orrs	r3, r2
}
 8012f94:	4618      	mov	r0, r3
 8012f96:	370c      	adds	r7, #12
 8012f98:	46bd      	mov	sp, r7
 8012f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f9e:	4770      	bx	lr

08012fa0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8012fa0:	b580      	push	{r7, lr}
 8012fa2:	b082      	sub	sp, #8
 8012fa4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8012fa6:	2300      	movs	r3, #0
 8012fa8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8012faa:	f00a fff1 	bl	801df90 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8012fae:	f000 f8d5 	bl	801315c <mem_init>
  memp_init();
 8012fb2:	f000 fc31 	bl	8013818 <memp_init>
  pbuf_init();
  netif_init();
 8012fb6:	f000 fcf7 	bl	80139a8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8012fba:	f007 fee7 	bl	801ad8c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8012fbe:	f001 fdb3 	bl	8014b28 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8012fc2:	f007 fe29 	bl	801ac18 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8012fc6:	bf00      	nop
 8012fc8:	3708      	adds	r7, #8
 8012fca:	46bd      	mov	sp, r7
 8012fcc:	bd80      	pop	{r7, pc}
	...

08012fd0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8012fd0:	b480      	push	{r7}
 8012fd2:	b083      	sub	sp, #12
 8012fd4:	af00      	add	r7, sp, #0
 8012fd6:	4603      	mov	r3, r0
 8012fd8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8012fda:	4b05      	ldr	r3, [pc, #20]	; (8012ff0 <ptr_to_mem+0x20>)
 8012fdc:	681a      	ldr	r2, [r3, #0]
 8012fde:	88fb      	ldrh	r3, [r7, #6]
 8012fe0:	4413      	add	r3, r2
}
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	370c      	adds	r7, #12
 8012fe6:	46bd      	mov	sp, r7
 8012fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fec:	4770      	bx	lr
 8012fee:	bf00      	nop
 8012ff0:	20006dcc 	.word	0x20006dcc

08012ff4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8012ff4:	b480      	push	{r7}
 8012ff6:	b083      	sub	sp, #12
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8012ffc:	4b05      	ldr	r3, [pc, #20]	; (8013014 <mem_to_ptr+0x20>)
 8012ffe:	681b      	ldr	r3, [r3, #0]
 8013000:	687a      	ldr	r2, [r7, #4]
 8013002:	1ad3      	subs	r3, r2, r3
 8013004:	b29b      	uxth	r3, r3
}
 8013006:	4618      	mov	r0, r3
 8013008:	370c      	adds	r7, #12
 801300a:	46bd      	mov	sp, r7
 801300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013010:	4770      	bx	lr
 8013012:	bf00      	nop
 8013014:	20006dcc 	.word	0x20006dcc

08013018 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8013018:	b590      	push	{r4, r7, lr}
 801301a:	b085      	sub	sp, #20
 801301c:	af00      	add	r7, sp, #0
 801301e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8013020:	4b45      	ldr	r3, [pc, #276]	; (8013138 <plug_holes+0x120>)
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	687a      	ldr	r2, [r7, #4]
 8013026:	429a      	cmp	r2, r3
 8013028:	d206      	bcs.n	8013038 <plug_holes+0x20>
 801302a:	4b44      	ldr	r3, [pc, #272]	; (801313c <plug_holes+0x124>)
 801302c:	f240 12df 	movw	r2, #479	; 0x1df
 8013030:	4943      	ldr	r1, [pc, #268]	; (8013140 <plug_holes+0x128>)
 8013032:	4844      	ldr	r0, [pc, #272]	; (8013144 <plug_holes+0x12c>)
 8013034:	f00c f8ba 	bl	801f1ac <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8013038:	4b43      	ldr	r3, [pc, #268]	; (8013148 <plug_holes+0x130>)
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	687a      	ldr	r2, [r7, #4]
 801303e:	429a      	cmp	r2, r3
 8013040:	d306      	bcc.n	8013050 <plug_holes+0x38>
 8013042:	4b3e      	ldr	r3, [pc, #248]	; (801313c <plug_holes+0x124>)
 8013044:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8013048:	4940      	ldr	r1, [pc, #256]	; (801314c <plug_holes+0x134>)
 801304a:	483e      	ldr	r0, [pc, #248]	; (8013144 <plug_holes+0x12c>)
 801304c:	f00c f8ae 	bl	801f1ac <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	791b      	ldrb	r3, [r3, #4]
 8013054:	2b00      	cmp	r3, #0
 8013056:	d006      	beq.n	8013066 <plug_holes+0x4e>
 8013058:	4b38      	ldr	r3, [pc, #224]	; (801313c <plug_holes+0x124>)
 801305a:	f240 12e1 	movw	r2, #481	; 0x1e1
 801305e:	493c      	ldr	r1, [pc, #240]	; (8013150 <plug_holes+0x138>)
 8013060:	4838      	ldr	r0, [pc, #224]	; (8013144 <plug_holes+0x12c>)
 8013062:	f00c f8a3 	bl	801f1ac <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8013066:	687b      	ldr	r3, [r7, #4]
 8013068:	881b      	ldrh	r3, [r3, #0]
 801306a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801306e:	d906      	bls.n	801307e <plug_holes+0x66>
 8013070:	4b32      	ldr	r3, [pc, #200]	; (801313c <plug_holes+0x124>)
 8013072:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8013076:	4937      	ldr	r1, [pc, #220]	; (8013154 <plug_holes+0x13c>)
 8013078:	4832      	ldr	r0, [pc, #200]	; (8013144 <plug_holes+0x12c>)
 801307a:	f00c f897 	bl	801f1ac <iprintf>

  nmem = ptr_to_mem(mem->next);
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	881b      	ldrh	r3, [r3, #0]
 8013082:	4618      	mov	r0, r3
 8013084:	f7ff ffa4 	bl	8012fd0 <ptr_to_mem>
 8013088:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801308a:	687a      	ldr	r2, [r7, #4]
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	429a      	cmp	r2, r3
 8013090:	d024      	beq.n	80130dc <plug_holes+0xc4>
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	791b      	ldrb	r3, [r3, #4]
 8013096:	2b00      	cmp	r3, #0
 8013098:	d120      	bne.n	80130dc <plug_holes+0xc4>
 801309a:	4b2b      	ldr	r3, [pc, #172]	; (8013148 <plug_holes+0x130>)
 801309c:	681b      	ldr	r3, [r3, #0]
 801309e:	68fa      	ldr	r2, [r7, #12]
 80130a0:	429a      	cmp	r2, r3
 80130a2:	d01b      	beq.n	80130dc <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80130a4:	4b2c      	ldr	r3, [pc, #176]	; (8013158 <plug_holes+0x140>)
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	68fa      	ldr	r2, [r7, #12]
 80130aa:	429a      	cmp	r2, r3
 80130ac:	d102      	bne.n	80130b4 <plug_holes+0x9c>
      lfree = mem;
 80130ae:	4a2a      	ldr	r2, [pc, #168]	; (8013158 <plug_holes+0x140>)
 80130b0:	687b      	ldr	r3, [r7, #4]
 80130b2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80130b4:	68fb      	ldr	r3, [r7, #12]
 80130b6:	881a      	ldrh	r2, [r3, #0]
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	881b      	ldrh	r3, [r3, #0]
 80130c0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80130c4:	d00a      	beq.n	80130dc <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80130c6:	68fb      	ldr	r3, [r7, #12]
 80130c8:	881b      	ldrh	r3, [r3, #0]
 80130ca:	4618      	mov	r0, r3
 80130cc:	f7ff ff80 	bl	8012fd0 <ptr_to_mem>
 80130d0:	4604      	mov	r4, r0
 80130d2:	6878      	ldr	r0, [r7, #4]
 80130d4:	f7ff ff8e 	bl	8012ff4 <mem_to_ptr>
 80130d8:	4603      	mov	r3, r0
 80130da:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	885b      	ldrh	r3, [r3, #2]
 80130e0:	4618      	mov	r0, r3
 80130e2:	f7ff ff75 	bl	8012fd0 <ptr_to_mem>
 80130e6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80130e8:	68ba      	ldr	r2, [r7, #8]
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	429a      	cmp	r2, r3
 80130ee:	d01f      	beq.n	8013130 <plug_holes+0x118>
 80130f0:	68bb      	ldr	r3, [r7, #8]
 80130f2:	791b      	ldrb	r3, [r3, #4]
 80130f4:	2b00      	cmp	r3, #0
 80130f6:	d11b      	bne.n	8013130 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80130f8:	4b17      	ldr	r3, [pc, #92]	; (8013158 <plug_holes+0x140>)
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	687a      	ldr	r2, [r7, #4]
 80130fe:	429a      	cmp	r2, r3
 8013100:	d102      	bne.n	8013108 <plug_holes+0xf0>
      lfree = pmem;
 8013102:	4a15      	ldr	r2, [pc, #84]	; (8013158 <plug_holes+0x140>)
 8013104:	68bb      	ldr	r3, [r7, #8]
 8013106:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	881a      	ldrh	r2, [r3, #0]
 801310c:	68bb      	ldr	r3, [r7, #8]
 801310e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	881b      	ldrh	r3, [r3, #0]
 8013114:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013118:	d00a      	beq.n	8013130 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	881b      	ldrh	r3, [r3, #0]
 801311e:	4618      	mov	r0, r3
 8013120:	f7ff ff56 	bl	8012fd0 <ptr_to_mem>
 8013124:	4604      	mov	r4, r0
 8013126:	68b8      	ldr	r0, [r7, #8]
 8013128:	f7ff ff64 	bl	8012ff4 <mem_to_ptr>
 801312c:	4603      	mov	r3, r0
 801312e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8013130:	bf00      	nop
 8013132:	3714      	adds	r7, #20
 8013134:	46bd      	mov	sp, r7
 8013136:	bd90      	pop	{r4, r7, pc}
 8013138:	20006dcc 	.word	0x20006dcc
 801313c:	08024280 	.word	0x08024280
 8013140:	080242b0 	.word	0x080242b0
 8013144:	080242c8 	.word	0x080242c8
 8013148:	20006dd0 	.word	0x20006dd0
 801314c:	080242f0 	.word	0x080242f0
 8013150:	0802430c 	.word	0x0802430c
 8013154:	08024328 	.word	0x08024328
 8013158:	20006dd8 	.word	0x20006dd8

0801315c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801315c:	b580      	push	{r7, lr}
 801315e:	b082      	sub	sp, #8
 8013160:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8013162:	4b1f      	ldr	r3, [pc, #124]	; (80131e0 <mem_init+0x84>)
 8013164:	3303      	adds	r3, #3
 8013166:	f023 0303 	bic.w	r3, r3, #3
 801316a:	461a      	mov	r2, r3
 801316c:	4b1d      	ldr	r3, [pc, #116]	; (80131e4 <mem_init+0x88>)
 801316e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8013170:	4b1c      	ldr	r3, [pc, #112]	; (80131e4 <mem_init+0x88>)
 8013172:	681b      	ldr	r3, [r3, #0]
 8013174:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801317c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	2200      	movs	r2, #0
 8013182:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8013184:	687b      	ldr	r3, [r7, #4]
 8013186:	2200      	movs	r2, #0
 8013188:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801318a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 801318e:	f7ff ff1f 	bl	8012fd0 <ptr_to_mem>
 8013192:	4603      	mov	r3, r0
 8013194:	4a14      	ldr	r2, [pc, #80]	; (80131e8 <mem_init+0x8c>)
 8013196:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8013198:	4b13      	ldr	r3, [pc, #76]	; (80131e8 <mem_init+0x8c>)
 801319a:	681b      	ldr	r3, [r3, #0]
 801319c:	2201      	movs	r2, #1
 801319e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80131a0:	4b11      	ldr	r3, [pc, #68]	; (80131e8 <mem_init+0x8c>)
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80131a8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80131aa:	4b0f      	ldr	r3, [pc, #60]	; (80131e8 <mem_init+0x8c>)
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80131b2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80131b4:	4b0b      	ldr	r3, [pc, #44]	; (80131e4 <mem_init+0x88>)
 80131b6:	681b      	ldr	r3, [r3, #0]
 80131b8:	4a0c      	ldr	r2, [pc, #48]	; (80131ec <mem_init+0x90>)
 80131ba:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80131bc:	480c      	ldr	r0, [pc, #48]	; (80131f0 <mem_init+0x94>)
 80131be:	f00a fef5 	bl	801dfac <sys_mutex_new>
 80131c2:	4603      	mov	r3, r0
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d006      	beq.n	80131d6 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80131c8:	4b0a      	ldr	r3, [pc, #40]	; (80131f4 <mem_init+0x98>)
 80131ca:	f240 221f 	movw	r2, #543	; 0x21f
 80131ce:	490a      	ldr	r1, [pc, #40]	; (80131f8 <mem_init+0x9c>)
 80131d0:	480a      	ldr	r0, [pc, #40]	; (80131fc <mem_init+0xa0>)
 80131d2:	f00b ffeb 	bl	801f1ac <iprintf>
  }
}
 80131d6:	bf00      	nop
 80131d8:	3708      	adds	r7, #8
 80131da:	46bd      	mov	sp, r7
 80131dc:	bd80      	pop	{r7, pc}
 80131de:	bf00      	nop
 80131e0:	2000aa74 	.word	0x2000aa74
 80131e4:	20006dcc 	.word	0x20006dcc
 80131e8:	20006dd0 	.word	0x20006dd0
 80131ec:	20006dd8 	.word	0x20006dd8
 80131f0:	20006dd4 	.word	0x20006dd4
 80131f4:	08024280 	.word	0x08024280
 80131f8:	08024354 	.word	0x08024354
 80131fc:	080242c8 	.word	0x080242c8

08013200 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8013200:	b580      	push	{r7, lr}
 8013202:	b086      	sub	sp, #24
 8013204:	af00      	add	r7, sp, #0
 8013206:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8013208:	6878      	ldr	r0, [r7, #4]
 801320a:	f7ff fef3 	bl	8012ff4 <mem_to_ptr>
 801320e:	4603      	mov	r3, r0
 8013210:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	881b      	ldrh	r3, [r3, #0]
 8013216:	4618      	mov	r0, r3
 8013218:	f7ff feda 	bl	8012fd0 <ptr_to_mem>
 801321c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801321e:	687b      	ldr	r3, [r7, #4]
 8013220:	885b      	ldrh	r3, [r3, #2]
 8013222:	4618      	mov	r0, r3
 8013224:	f7ff fed4 	bl	8012fd0 <ptr_to_mem>
 8013228:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	881b      	ldrh	r3, [r3, #0]
 801322e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013232:	d818      	bhi.n	8013266 <mem_link_valid+0x66>
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	885b      	ldrh	r3, [r3, #2]
 8013238:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801323c:	d813      	bhi.n	8013266 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801323e:	687b      	ldr	r3, [r7, #4]
 8013240:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8013242:	8afa      	ldrh	r2, [r7, #22]
 8013244:	429a      	cmp	r2, r3
 8013246:	d004      	beq.n	8013252 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	881b      	ldrh	r3, [r3, #0]
 801324c:	8afa      	ldrh	r2, [r7, #22]
 801324e:	429a      	cmp	r2, r3
 8013250:	d109      	bne.n	8013266 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8013252:	4b08      	ldr	r3, [pc, #32]	; (8013274 <mem_link_valid+0x74>)
 8013254:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8013256:	693a      	ldr	r2, [r7, #16]
 8013258:	429a      	cmp	r2, r3
 801325a:	d006      	beq.n	801326a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801325c:	693b      	ldr	r3, [r7, #16]
 801325e:	885b      	ldrh	r3, [r3, #2]
 8013260:	8afa      	ldrh	r2, [r7, #22]
 8013262:	429a      	cmp	r2, r3
 8013264:	d001      	beq.n	801326a <mem_link_valid+0x6a>
    return 0;
 8013266:	2300      	movs	r3, #0
 8013268:	e000      	b.n	801326c <mem_link_valid+0x6c>
  }
  return 1;
 801326a:	2301      	movs	r3, #1
}
 801326c:	4618      	mov	r0, r3
 801326e:	3718      	adds	r7, #24
 8013270:	46bd      	mov	sp, r7
 8013272:	bd80      	pop	{r7, pc}
 8013274:	20006dd0 	.word	0x20006dd0

08013278 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8013278:	b580      	push	{r7, lr}
 801327a:	b088      	sub	sp, #32
 801327c:	af00      	add	r7, sp, #0
 801327e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d070      	beq.n	8013368 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	f003 0303 	and.w	r3, r3, #3
 801328c:	2b00      	cmp	r3, #0
 801328e:	d00d      	beq.n	80132ac <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8013290:	4b37      	ldr	r3, [pc, #220]	; (8013370 <mem_free+0xf8>)
 8013292:	f240 2273 	movw	r2, #627	; 0x273
 8013296:	4937      	ldr	r1, [pc, #220]	; (8013374 <mem_free+0xfc>)
 8013298:	4837      	ldr	r0, [pc, #220]	; (8013378 <mem_free+0x100>)
 801329a:	f00b ff87 	bl	801f1ac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801329e:	f00a fee3 	bl	801e068 <sys_arch_protect>
 80132a2:	60f8      	str	r0, [r7, #12]
 80132a4:	68f8      	ldr	r0, [r7, #12]
 80132a6:	f00a feed 	bl	801e084 <sys_arch_unprotect>
    return;
 80132aa:	e05e      	b.n	801336a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	3b08      	subs	r3, #8
 80132b0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80132b2:	4b32      	ldr	r3, [pc, #200]	; (801337c <mem_free+0x104>)
 80132b4:	681b      	ldr	r3, [r3, #0]
 80132b6:	69fa      	ldr	r2, [r7, #28]
 80132b8:	429a      	cmp	r2, r3
 80132ba:	d306      	bcc.n	80132ca <mem_free+0x52>
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	f103 020c 	add.w	r2, r3, #12
 80132c2:	4b2f      	ldr	r3, [pc, #188]	; (8013380 <mem_free+0x108>)
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	429a      	cmp	r2, r3
 80132c8:	d90d      	bls.n	80132e6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80132ca:	4b29      	ldr	r3, [pc, #164]	; (8013370 <mem_free+0xf8>)
 80132cc:	f240 227f 	movw	r2, #639	; 0x27f
 80132d0:	492c      	ldr	r1, [pc, #176]	; (8013384 <mem_free+0x10c>)
 80132d2:	4829      	ldr	r0, [pc, #164]	; (8013378 <mem_free+0x100>)
 80132d4:	f00b ff6a 	bl	801f1ac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80132d8:	f00a fec6 	bl	801e068 <sys_arch_protect>
 80132dc:	6138      	str	r0, [r7, #16]
 80132de:	6938      	ldr	r0, [r7, #16]
 80132e0:	f00a fed0 	bl	801e084 <sys_arch_unprotect>
    return;
 80132e4:	e041      	b.n	801336a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80132e6:	4828      	ldr	r0, [pc, #160]	; (8013388 <mem_free+0x110>)
 80132e8:	f00a fe7c 	bl	801dfe4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80132ec:	69fb      	ldr	r3, [r7, #28]
 80132ee:	791b      	ldrb	r3, [r3, #4]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d110      	bne.n	8013316 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80132f4:	4b1e      	ldr	r3, [pc, #120]	; (8013370 <mem_free+0xf8>)
 80132f6:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80132fa:	4924      	ldr	r1, [pc, #144]	; (801338c <mem_free+0x114>)
 80132fc:	481e      	ldr	r0, [pc, #120]	; (8013378 <mem_free+0x100>)
 80132fe:	f00b ff55 	bl	801f1ac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8013302:	4821      	ldr	r0, [pc, #132]	; (8013388 <mem_free+0x110>)
 8013304:	f00a fe7d 	bl	801e002 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013308:	f00a feae 	bl	801e068 <sys_arch_protect>
 801330c:	6178      	str	r0, [r7, #20]
 801330e:	6978      	ldr	r0, [r7, #20]
 8013310:	f00a feb8 	bl	801e084 <sys_arch_unprotect>
    return;
 8013314:	e029      	b.n	801336a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8013316:	69f8      	ldr	r0, [r7, #28]
 8013318:	f7ff ff72 	bl	8013200 <mem_link_valid>
 801331c:	4603      	mov	r3, r0
 801331e:	2b00      	cmp	r3, #0
 8013320:	d110      	bne.n	8013344 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8013322:	4b13      	ldr	r3, [pc, #76]	; (8013370 <mem_free+0xf8>)
 8013324:	f240 2295 	movw	r2, #661	; 0x295
 8013328:	4919      	ldr	r1, [pc, #100]	; (8013390 <mem_free+0x118>)
 801332a:	4813      	ldr	r0, [pc, #76]	; (8013378 <mem_free+0x100>)
 801332c:	f00b ff3e 	bl	801f1ac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8013330:	4815      	ldr	r0, [pc, #84]	; (8013388 <mem_free+0x110>)
 8013332:	f00a fe66 	bl	801e002 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013336:	f00a fe97 	bl	801e068 <sys_arch_protect>
 801333a:	61b8      	str	r0, [r7, #24]
 801333c:	69b8      	ldr	r0, [r7, #24]
 801333e:	f00a fea1 	bl	801e084 <sys_arch_unprotect>
    return;
 8013342:	e012      	b.n	801336a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8013344:	69fb      	ldr	r3, [r7, #28]
 8013346:	2200      	movs	r2, #0
 8013348:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801334a:	4b12      	ldr	r3, [pc, #72]	; (8013394 <mem_free+0x11c>)
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	69fa      	ldr	r2, [r7, #28]
 8013350:	429a      	cmp	r2, r3
 8013352:	d202      	bcs.n	801335a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8013354:	4a0f      	ldr	r2, [pc, #60]	; (8013394 <mem_free+0x11c>)
 8013356:	69fb      	ldr	r3, [r7, #28]
 8013358:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801335a:	69f8      	ldr	r0, [r7, #28]
 801335c:	f7ff fe5c 	bl	8013018 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013360:	4809      	ldr	r0, [pc, #36]	; (8013388 <mem_free+0x110>)
 8013362:	f00a fe4e 	bl	801e002 <sys_mutex_unlock>
 8013366:	e000      	b.n	801336a <mem_free+0xf2>
    return;
 8013368:	bf00      	nop
}
 801336a:	3720      	adds	r7, #32
 801336c:	46bd      	mov	sp, r7
 801336e:	bd80      	pop	{r7, pc}
 8013370:	08024280 	.word	0x08024280
 8013374:	08024370 	.word	0x08024370
 8013378:	080242c8 	.word	0x080242c8
 801337c:	20006dcc 	.word	0x20006dcc
 8013380:	20006dd0 	.word	0x20006dd0
 8013384:	08024394 	.word	0x08024394
 8013388:	20006dd4 	.word	0x20006dd4
 801338c:	080243b0 	.word	0x080243b0
 8013390:	080243d8 	.word	0x080243d8
 8013394:	20006dd8 	.word	0x20006dd8

08013398 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8013398:	b580      	push	{r7, lr}
 801339a:	b088      	sub	sp, #32
 801339c:	af00      	add	r7, sp, #0
 801339e:	6078      	str	r0, [r7, #4]
 80133a0:	460b      	mov	r3, r1
 80133a2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80133a4:	887b      	ldrh	r3, [r7, #2]
 80133a6:	3303      	adds	r3, #3
 80133a8:	b29b      	uxth	r3, r3
 80133aa:	f023 0303 	bic.w	r3, r3, #3
 80133ae:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 80133b0:	8bfb      	ldrh	r3, [r7, #30]
 80133b2:	2b0b      	cmp	r3, #11
 80133b4:	d801      	bhi.n	80133ba <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80133b6:	230c      	movs	r3, #12
 80133b8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80133ba:	8bfb      	ldrh	r3, [r7, #30]
 80133bc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80133c0:	d803      	bhi.n	80133ca <mem_trim+0x32>
 80133c2:	8bfa      	ldrh	r2, [r7, #30]
 80133c4:	887b      	ldrh	r3, [r7, #2]
 80133c6:	429a      	cmp	r2, r3
 80133c8:	d201      	bcs.n	80133ce <mem_trim+0x36>
    return NULL;
 80133ca:	2300      	movs	r3, #0
 80133cc:	e0d8      	b.n	8013580 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80133ce:	4b6e      	ldr	r3, [pc, #440]	; (8013588 <mem_trim+0x1f0>)
 80133d0:	681b      	ldr	r3, [r3, #0]
 80133d2:	687a      	ldr	r2, [r7, #4]
 80133d4:	429a      	cmp	r2, r3
 80133d6:	d304      	bcc.n	80133e2 <mem_trim+0x4a>
 80133d8:	4b6c      	ldr	r3, [pc, #432]	; (801358c <mem_trim+0x1f4>)
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	687a      	ldr	r2, [r7, #4]
 80133de:	429a      	cmp	r2, r3
 80133e0:	d306      	bcc.n	80133f0 <mem_trim+0x58>
 80133e2:	4b6b      	ldr	r3, [pc, #428]	; (8013590 <mem_trim+0x1f8>)
 80133e4:	f240 22d1 	movw	r2, #721	; 0x2d1
 80133e8:	496a      	ldr	r1, [pc, #424]	; (8013594 <mem_trim+0x1fc>)
 80133ea:	486b      	ldr	r0, [pc, #428]	; (8013598 <mem_trim+0x200>)
 80133ec:	f00b fede 	bl	801f1ac <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 80133f0:	4b65      	ldr	r3, [pc, #404]	; (8013588 <mem_trim+0x1f0>)
 80133f2:	681b      	ldr	r3, [r3, #0]
 80133f4:	687a      	ldr	r2, [r7, #4]
 80133f6:	429a      	cmp	r2, r3
 80133f8:	d304      	bcc.n	8013404 <mem_trim+0x6c>
 80133fa:	4b64      	ldr	r3, [pc, #400]	; (801358c <mem_trim+0x1f4>)
 80133fc:	681b      	ldr	r3, [r3, #0]
 80133fe:	687a      	ldr	r2, [r7, #4]
 8013400:	429a      	cmp	r2, r3
 8013402:	d307      	bcc.n	8013414 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8013404:	f00a fe30 	bl	801e068 <sys_arch_protect>
 8013408:	60b8      	str	r0, [r7, #8]
 801340a:	68b8      	ldr	r0, [r7, #8]
 801340c:	f00a fe3a 	bl	801e084 <sys_arch_unprotect>
    return rmem;
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	e0b5      	b.n	8013580 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	3b08      	subs	r3, #8
 8013418:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801341a:	69b8      	ldr	r0, [r7, #24]
 801341c:	f7ff fdea 	bl	8012ff4 <mem_to_ptr>
 8013420:	4603      	mov	r3, r0
 8013422:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8013424:	69bb      	ldr	r3, [r7, #24]
 8013426:	881a      	ldrh	r2, [r3, #0]
 8013428:	8afb      	ldrh	r3, [r7, #22]
 801342a:	1ad3      	subs	r3, r2, r3
 801342c:	b29b      	uxth	r3, r3
 801342e:	3b08      	subs	r3, #8
 8013430:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8013432:	8bfa      	ldrh	r2, [r7, #30]
 8013434:	8abb      	ldrh	r3, [r7, #20]
 8013436:	429a      	cmp	r2, r3
 8013438:	d906      	bls.n	8013448 <mem_trim+0xb0>
 801343a:	4b55      	ldr	r3, [pc, #340]	; (8013590 <mem_trim+0x1f8>)
 801343c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8013440:	4956      	ldr	r1, [pc, #344]	; (801359c <mem_trim+0x204>)
 8013442:	4855      	ldr	r0, [pc, #340]	; (8013598 <mem_trim+0x200>)
 8013444:	f00b feb2 	bl	801f1ac <iprintf>
  if (newsize > size) {
 8013448:	8bfa      	ldrh	r2, [r7, #30]
 801344a:	8abb      	ldrh	r3, [r7, #20]
 801344c:	429a      	cmp	r2, r3
 801344e:	d901      	bls.n	8013454 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8013450:	2300      	movs	r3, #0
 8013452:	e095      	b.n	8013580 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8013454:	8bfa      	ldrh	r2, [r7, #30]
 8013456:	8abb      	ldrh	r3, [r7, #20]
 8013458:	429a      	cmp	r2, r3
 801345a:	d101      	bne.n	8013460 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 801345c:	687b      	ldr	r3, [r7, #4]
 801345e:	e08f      	b.n	8013580 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8013460:	484f      	ldr	r0, [pc, #316]	; (80135a0 <mem_trim+0x208>)
 8013462:	f00a fdbf 	bl	801dfe4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8013466:	69bb      	ldr	r3, [r7, #24]
 8013468:	881b      	ldrh	r3, [r3, #0]
 801346a:	4618      	mov	r0, r3
 801346c:	f7ff fdb0 	bl	8012fd0 <ptr_to_mem>
 8013470:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8013472:	693b      	ldr	r3, [r7, #16]
 8013474:	791b      	ldrb	r3, [r3, #4]
 8013476:	2b00      	cmp	r3, #0
 8013478:	d13f      	bne.n	80134fa <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801347a:	69bb      	ldr	r3, [r7, #24]
 801347c:	881b      	ldrh	r3, [r3, #0]
 801347e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013482:	d106      	bne.n	8013492 <mem_trim+0xfa>
 8013484:	4b42      	ldr	r3, [pc, #264]	; (8013590 <mem_trim+0x1f8>)
 8013486:	f240 22f5 	movw	r2, #757	; 0x2f5
 801348a:	4946      	ldr	r1, [pc, #280]	; (80135a4 <mem_trim+0x20c>)
 801348c:	4842      	ldr	r0, [pc, #264]	; (8013598 <mem_trim+0x200>)
 801348e:	f00b fe8d 	bl	801f1ac <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8013492:	693b      	ldr	r3, [r7, #16]
 8013494:	881b      	ldrh	r3, [r3, #0]
 8013496:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013498:	8afa      	ldrh	r2, [r7, #22]
 801349a:	8bfb      	ldrh	r3, [r7, #30]
 801349c:	4413      	add	r3, r2
 801349e:	b29b      	uxth	r3, r3
 80134a0:	3308      	adds	r3, #8
 80134a2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 80134a4:	4b40      	ldr	r3, [pc, #256]	; (80135a8 <mem_trim+0x210>)
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	693a      	ldr	r2, [r7, #16]
 80134aa:	429a      	cmp	r2, r3
 80134ac:	d106      	bne.n	80134bc <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 80134ae:	89fb      	ldrh	r3, [r7, #14]
 80134b0:	4618      	mov	r0, r3
 80134b2:	f7ff fd8d 	bl	8012fd0 <ptr_to_mem>
 80134b6:	4603      	mov	r3, r0
 80134b8:	4a3b      	ldr	r2, [pc, #236]	; (80135a8 <mem_trim+0x210>)
 80134ba:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80134bc:	89fb      	ldrh	r3, [r7, #14]
 80134be:	4618      	mov	r0, r3
 80134c0:	f7ff fd86 	bl	8012fd0 <ptr_to_mem>
 80134c4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 80134c6:	693b      	ldr	r3, [r7, #16]
 80134c8:	2200      	movs	r2, #0
 80134ca:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 80134cc:	693b      	ldr	r3, [r7, #16]
 80134ce:	89ba      	ldrh	r2, [r7, #12]
 80134d0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80134d2:	693b      	ldr	r3, [r7, #16]
 80134d4:	8afa      	ldrh	r2, [r7, #22]
 80134d6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 80134d8:	69bb      	ldr	r3, [r7, #24]
 80134da:	89fa      	ldrh	r2, [r7, #14]
 80134dc:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80134de:	693b      	ldr	r3, [r7, #16]
 80134e0:	881b      	ldrh	r3, [r3, #0]
 80134e2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80134e6:	d047      	beq.n	8013578 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80134e8:	693b      	ldr	r3, [r7, #16]
 80134ea:	881b      	ldrh	r3, [r3, #0]
 80134ec:	4618      	mov	r0, r3
 80134ee:	f7ff fd6f 	bl	8012fd0 <ptr_to_mem>
 80134f2:	4602      	mov	r2, r0
 80134f4:	89fb      	ldrh	r3, [r7, #14]
 80134f6:	8053      	strh	r3, [r2, #2]
 80134f8:	e03e      	b.n	8013578 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80134fa:	8bfb      	ldrh	r3, [r7, #30]
 80134fc:	f103 0214 	add.w	r2, r3, #20
 8013500:	8abb      	ldrh	r3, [r7, #20]
 8013502:	429a      	cmp	r2, r3
 8013504:	d838      	bhi.n	8013578 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8013506:	8afa      	ldrh	r2, [r7, #22]
 8013508:	8bfb      	ldrh	r3, [r7, #30]
 801350a:	4413      	add	r3, r2
 801350c:	b29b      	uxth	r3, r3
 801350e:	3308      	adds	r3, #8
 8013510:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8013512:	69bb      	ldr	r3, [r7, #24]
 8013514:	881b      	ldrh	r3, [r3, #0]
 8013516:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801351a:	d106      	bne.n	801352a <mem_trim+0x192>
 801351c:	4b1c      	ldr	r3, [pc, #112]	; (8013590 <mem_trim+0x1f8>)
 801351e:	f240 3216 	movw	r2, #790	; 0x316
 8013522:	4920      	ldr	r1, [pc, #128]	; (80135a4 <mem_trim+0x20c>)
 8013524:	481c      	ldr	r0, [pc, #112]	; (8013598 <mem_trim+0x200>)
 8013526:	f00b fe41 	bl	801f1ac <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801352a:	89fb      	ldrh	r3, [r7, #14]
 801352c:	4618      	mov	r0, r3
 801352e:	f7ff fd4f 	bl	8012fd0 <ptr_to_mem>
 8013532:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8013534:	4b1c      	ldr	r3, [pc, #112]	; (80135a8 <mem_trim+0x210>)
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	693a      	ldr	r2, [r7, #16]
 801353a:	429a      	cmp	r2, r3
 801353c:	d202      	bcs.n	8013544 <mem_trim+0x1ac>
      lfree = mem2;
 801353e:	4a1a      	ldr	r2, [pc, #104]	; (80135a8 <mem_trim+0x210>)
 8013540:	693b      	ldr	r3, [r7, #16]
 8013542:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8013544:	693b      	ldr	r3, [r7, #16]
 8013546:	2200      	movs	r2, #0
 8013548:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801354a:	69bb      	ldr	r3, [r7, #24]
 801354c:	881a      	ldrh	r2, [r3, #0]
 801354e:	693b      	ldr	r3, [r7, #16]
 8013550:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8013552:	693b      	ldr	r3, [r7, #16]
 8013554:	8afa      	ldrh	r2, [r7, #22]
 8013556:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8013558:	69bb      	ldr	r3, [r7, #24]
 801355a:	89fa      	ldrh	r2, [r7, #14]
 801355c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801355e:	693b      	ldr	r3, [r7, #16]
 8013560:	881b      	ldrh	r3, [r3, #0]
 8013562:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013566:	d007      	beq.n	8013578 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8013568:	693b      	ldr	r3, [r7, #16]
 801356a:	881b      	ldrh	r3, [r3, #0]
 801356c:	4618      	mov	r0, r3
 801356e:	f7ff fd2f 	bl	8012fd0 <ptr_to_mem>
 8013572:	4602      	mov	r2, r0
 8013574:	89fb      	ldrh	r3, [r7, #14]
 8013576:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8013578:	4809      	ldr	r0, [pc, #36]	; (80135a0 <mem_trim+0x208>)
 801357a:	f00a fd42 	bl	801e002 <sys_mutex_unlock>
  return rmem;
 801357e:	687b      	ldr	r3, [r7, #4]
}
 8013580:	4618      	mov	r0, r3
 8013582:	3720      	adds	r7, #32
 8013584:	46bd      	mov	sp, r7
 8013586:	bd80      	pop	{r7, pc}
 8013588:	20006dcc 	.word	0x20006dcc
 801358c:	20006dd0 	.word	0x20006dd0
 8013590:	08024280 	.word	0x08024280
 8013594:	0802440c 	.word	0x0802440c
 8013598:	080242c8 	.word	0x080242c8
 801359c:	08024424 	.word	0x08024424
 80135a0:	20006dd4 	.word	0x20006dd4
 80135a4:	08024444 	.word	0x08024444
 80135a8:	20006dd8 	.word	0x20006dd8

080135ac <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80135ac:	b580      	push	{r7, lr}
 80135ae:	b088      	sub	sp, #32
 80135b0:	af00      	add	r7, sp, #0
 80135b2:	4603      	mov	r3, r0
 80135b4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80135b6:	88fb      	ldrh	r3, [r7, #6]
 80135b8:	2b00      	cmp	r3, #0
 80135ba:	d101      	bne.n	80135c0 <mem_malloc+0x14>
    return NULL;
 80135bc:	2300      	movs	r3, #0
 80135be:	e0e2      	b.n	8013786 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80135c0:	88fb      	ldrh	r3, [r7, #6]
 80135c2:	3303      	adds	r3, #3
 80135c4:	b29b      	uxth	r3, r3
 80135c6:	f023 0303 	bic.w	r3, r3, #3
 80135ca:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 80135cc:	8bbb      	ldrh	r3, [r7, #28]
 80135ce:	2b0b      	cmp	r3, #11
 80135d0:	d801      	bhi.n	80135d6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80135d2:	230c      	movs	r3, #12
 80135d4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80135d6:	8bbb      	ldrh	r3, [r7, #28]
 80135d8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80135dc:	d803      	bhi.n	80135e6 <mem_malloc+0x3a>
 80135de:	8bba      	ldrh	r2, [r7, #28]
 80135e0:	88fb      	ldrh	r3, [r7, #6]
 80135e2:	429a      	cmp	r2, r3
 80135e4:	d201      	bcs.n	80135ea <mem_malloc+0x3e>
    return NULL;
 80135e6:	2300      	movs	r3, #0
 80135e8:	e0cd      	b.n	8013786 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 80135ea:	4869      	ldr	r0, [pc, #420]	; (8013790 <mem_malloc+0x1e4>)
 80135ec:	f00a fcfa 	bl	801dfe4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80135f0:	4b68      	ldr	r3, [pc, #416]	; (8013794 <mem_malloc+0x1e8>)
 80135f2:	681b      	ldr	r3, [r3, #0]
 80135f4:	4618      	mov	r0, r3
 80135f6:	f7ff fcfd 	bl	8012ff4 <mem_to_ptr>
 80135fa:	4603      	mov	r3, r0
 80135fc:	83fb      	strh	r3, [r7, #30]
 80135fe:	e0b7      	b.n	8013770 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8013600:	8bfb      	ldrh	r3, [r7, #30]
 8013602:	4618      	mov	r0, r3
 8013604:	f7ff fce4 	bl	8012fd0 <ptr_to_mem>
 8013608:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801360a:	697b      	ldr	r3, [r7, #20]
 801360c:	791b      	ldrb	r3, [r3, #4]
 801360e:	2b00      	cmp	r3, #0
 8013610:	f040 80a7 	bne.w	8013762 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8013614:	697b      	ldr	r3, [r7, #20]
 8013616:	881b      	ldrh	r3, [r3, #0]
 8013618:	461a      	mov	r2, r3
 801361a:	8bfb      	ldrh	r3, [r7, #30]
 801361c:	1ad3      	subs	r3, r2, r3
 801361e:	f1a3 0208 	sub.w	r2, r3, #8
 8013622:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8013624:	429a      	cmp	r2, r3
 8013626:	f0c0 809c 	bcc.w	8013762 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801362a:	697b      	ldr	r3, [r7, #20]
 801362c:	881b      	ldrh	r3, [r3, #0]
 801362e:	461a      	mov	r2, r3
 8013630:	8bfb      	ldrh	r3, [r7, #30]
 8013632:	1ad3      	subs	r3, r2, r3
 8013634:	f1a3 0208 	sub.w	r2, r3, #8
 8013638:	8bbb      	ldrh	r3, [r7, #28]
 801363a:	3314      	adds	r3, #20
 801363c:	429a      	cmp	r2, r3
 801363e:	d333      	bcc.n	80136a8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8013640:	8bfa      	ldrh	r2, [r7, #30]
 8013642:	8bbb      	ldrh	r3, [r7, #28]
 8013644:	4413      	add	r3, r2
 8013646:	b29b      	uxth	r3, r3
 8013648:	3308      	adds	r3, #8
 801364a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801364c:	8a7b      	ldrh	r3, [r7, #18]
 801364e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013652:	d106      	bne.n	8013662 <mem_malloc+0xb6>
 8013654:	4b50      	ldr	r3, [pc, #320]	; (8013798 <mem_malloc+0x1ec>)
 8013656:	f240 3287 	movw	r2, #903	; 0x387
 801365a:	4950      	ldr	r1, [pc, #320]	; (801379c <mem_malloc+0x1f0>)
 801365c:	4850      	ldr	r0, [pc, #320]	; (80137a0 <mem_malloc+0x1f4>)
 801365e:	f00b fda5 	bl	801f1ac <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8013662:	8a7b      	ldrh	r3, [r7, #18]
 8013664:	4618      	mov	r0, r3
 8013666:	f7ff fcb3 	bl	8012fd0 <ptr_to_mem>
 801366a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	2200      	movs	r2, #0
 8013670:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8013672:	697b      	ldr	r3, [r7, #20]
 8013674:	881a      	ldrh	r2, [r3, #0]
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801367a:	68fb      	ldr	r3, [r7, #12]
 801367c:	8bfa      	ldrh	r2, [r7, #30]
 801367e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8013680:	697b      	ldr	r3, [r7, #20]
 8013682:	8a7a      	ldrh	r2, [r7, #18]
 8013684:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8013686:	697b      	ldr	r3, [r7, #20]
 8013688:	2201      	movs	r2, #1
 801368a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	881b      	ldrh	r3, [r3, #0]
 8013690:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8013694:	d00b      	beq.n	80136ae <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	881b      	ldrh	r3, [r3, #0]
 801369a:	4618      	mov	r0, r3
 801369c:	f7ff fc98 	bl	8012fd0 <ptr_to_mem>
 80136a0:	4602      	mov	r2, r0
 80136a2:	8a7b      	ldrh	r3, [r7, #18]
 80136a4:	8053      	strh	r3, [r2, #2]
 80136a6:	e002      	b.n	80136ae <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 80136a8:	697b      	ldr	r3, [r7, #20]
 80136aa:	2201      	movs	r2, #1
 80136ac:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 80136ae:	4b39      	ldr	r3, [pc, #228]	; (8013794 <mem_malloc+0x1e8>)
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	697a      	ldr	r2, [r7, #20]
 80136b4:	429a      	cmp	r2, r3
 80136b6:	d127      	bne.n	8013708 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 80136b8:	4b36      	ldr	r3, [pc, #216]	; (8013794 <mem_malloc+0x1e8>)
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80136be:	e005      	b.n	80136cc <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80136c0:	69bb      	ldr	r3, [r7, #24]
 80136c2:	881b      	ldrh	r3, [r3, #0]
 80136c4:	4618      	mov	r0, r3
 80136c6:	f7ff fc83 	bl	8012fd0 <ptr_to_mem>
 80136ca:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 80136cc:	69bb      	ldr	r3, [r7, #24]
 80136ce:	791b      	ldrb	r3, [r3, #4]
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	d004      	beq.n	80136de <mem_malloc+0x132>
 80136d4:	4b33      	ldr	r3, [pc, #204]	; (80137a4 <mem_malloc+0x1f8>)
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	69ba      	ldr	r2, [r7, #24]
 80136da:	429a      	cmp	r2, r3
 80136dc:	d1f0      	bne.n	80136c0 <mem_malloc+0x114>
          }
          lfree = cur;
 80136de:	4a2d      	ldr	r2, [pc, #180]	; (8013794 <mem_malloc+0x1e8>)
 80136e0:	69bb      	ldr	r3, [r7, #24]
 80136e2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80136e4:	4b2b      	ldr	r3, [pc, #172]	; (8013794 <mem_malloc+0x1e8>)
 80136e6:	681a      	ldr	r2, [r3, #0]
 80136e8:	4b2e      	ldr	r3, [pc, #184]	; (80137a4 <mem_malloc+0x1f8>)
 80136ea:	681b      	ldr	r3, [r3, #0]
 80136ec:	429a      	cmp	r2, r3
 80136ee:	d00b      	beq.n	8013708 <mem_malloc+0x15c>
 80136f0:	4b28      	ldr	r3, [pc, #160]	; (8013794 <mem_malloc+0x1e8>)
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	791b      	ldrb	r3, [r3, #4]
 80136f6:	2b00      	cmp	r3, #0
 80136f8:	d006      	beq.n	8013708 <mem_malloc+0x15c>
 80136fa:	4b27      	ldr	r3, [pc, #156]	; (8013798 <mem_malloc+0x1ec>)
 80136fc:	f240 32b5 	movw	r2, #949	; 0x3b5
 8013700:	4929      	ldr	r1, [pc, #164]	; (80137a8 <mem_malloc+0x1fc>)
 8013702:	4827      	ldr	r0, [pc, #156]	; (80137a0 <mem_malloc+0x1f4>)
 8013704:	f00b fd52 	bl	801f1ac <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8013708:	4821      	ldr	r0, [pc, #132]	; (8013790 <mem_malloc+0x1e4>)
 801370a:	f00a fc7a 	bl	801e002 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801370e:	8bba      	ldrh	r2, [r7, #28]
 8013710:	697b      	ldr	r3, [r7, #20]
 8013712:	4413      	add	r3, r2
 8013714:	3308      	adds	r3, #8
 8013716:	4a23      	ldr	r2, [pc, #140]	; (80137a4 <mem_malloc+0x1f8>)
 8013718:	6812      	ldr	r2, [r2, #0]
 801371a:	4293      	cmp	r3, r2
 801371c:	d906      	bls.n	801372c <mem_malloc+0x180>
 801371e:	4b1e      	ldr	r3, [pc, #120]	; (8013798 <mem_malloc+0x1ec>)
 8013720:	f240 32b9 	movw	r2, #953	; 0x3b9
 8013724:	4921      	ldr	r1, [pc, #132]	; (80137ac <mem_malloc+0x200>)
 8013726:	481e      	ldr	r0, [pc, #120]	; (80137a0 <mem_malloc+0x1f4>)
 8013728:	f00b fd40 	bl	801f1ac <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801372c:	697b      	ldr	r3, [r7, #20]
 801372e:	f003 0303 	and.w	r3, r3, #3
 8013732:	2b00      	cmp	r3, #0
 8013734:	d006      	beq.n	8013744 <mem_malloc+0x198>
 8013736:	4b18      	ldr	r3, [pc, #96]	; (8013798 <mem_malloc+0x1ec>)
 8013738:	f240 32bb 	movw	r2, #955	; 0x3bb
 801373c:	491c      	ldr	r1, [pc, #112]	; (80137b0 <mem_malloc+0x204>)
 801373e:	4818      	ldr	r0, [pc, #96]	; (80137a0 <mem_malloc+0x1f4>)
 8013740:	f00b fd34 	bl	801f1ac <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8013744:	697b      	ldr	r3, [r7, #20]
 8013746:	f003 0303 	and.w	r3, r3, #3
 801374a:	2b00      	cmp	r3, #0
 801374c:	d006      	beq.n	801375c <mem_malloc+0x1b0>
 801374e:	4b12      	ldr	r3, [pc, #72]	; (8013798 <mem_malloc+0x1ec>)
 8013750:	f240 32bd 	movw	r2, #957	; 0x3bd
 8013754:	4917      	ldr	r1, [pc, #92]	; (80137b4 <mem_malloc+0x208>)
 8013756:	4812      	ldr	r0, [pc, #72]	; (80137a0 <mem_malloc+0x1f4>)
 8013758:	f00b fd28 	bl	801f1ac <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801375c:	697b      	ldr	r3, [r7, #20]
 801375e:	3308      	adds	r3, #8
 8013760:	e011      	b.n	8013786 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8013762:	8bfb      	ldrh	r3, [r7, #30]
 8013764:	4618      	mov	r0, r3
 8013766:	f7ff fc33 	bl	8012fd0 <ptr_to_mem>
 801376a:	4603      	mov	r3, r0
 801376c:	881b      	ldrh	r3, [r3, #0]
 801376e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8013770:	8bfa      	ldrh	r2, [r7, #30]
 8013772:	8bbb      	ldrh	r3, [r7, #28]
 8013774:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8013778:	429a      	cmp	r2, r3
 801377a:	f4ff af41 	bcc.w	8013600 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801377e:	4804      	ldr	r0, [pc, #16]	; (8013790 <mem_malloc+0x1e4>)
 8013780:	f00a fc3f 	bl	801e002 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8013784:	2300      	movs	r3, #0
}
 8013786:	4618      	mov	r0, r3
 8013788:	3720      	adds	r7, #32
 801378a:	46bd      	mov	sp, r7
 801378c:	bd80      	pop	{r7, pc}
 801378e:	bf00      	nop
 8013790:	20006dd4 	.word	0x20006dd4
 8013794:	20006dd8 	.word	0x20006dd8
 8013798:	08024280 	.word	0x08024280
 801379c:	08024444 	.word	0x08024444
 80137a0:	080242c8 	.word	0x080242c8
 80137a4:	20006dd0 	.word	0x20006dd0
 80137a8:	08024458 	.word	0x08024458
 80137ac:	08024474 	.word	0x08024474
 80137b0:	080244a4 	.word	0x080244a4
 80137b4:	080244d4 	.word	0x080244d4

080137b8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 80137b8:	b480      	push	{r7}
 80137ba:	b085      	sub	sp, #20
 80137bc:	af00      	add	r7, sp, #0
 80137be:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	689b      	ldr	r3, [r3, #8]
 80137c4:	2200      	movs	r2, #0
 80137c6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	685b      	ldr	r3, [r3, #4]
 80137cc:	3303      	adds	r3, #3
 80137ce:	f023 0303 	bic.w	r3, r3, #3
 80137d2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80137d4:	2300      	movs	r3, #0
 80137d6:	60fb      	str	r3, [r7, #12]
 80137d8:	e011      	b.n	80137fe <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	689b      	ldr	r3, [r3, #8]
 80137de:	681a      	ldr	r2, [r3, #0]
 80137e0:	68bb      	ldr	r3, [r7, #8]
 80137e2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	689b      	ldr	r3, [r3, #8]
 80137e8:	68ba      	ldr	r2, [r7, #8]
 80137ea:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	881b      	ldrh	r3, [r3, #0]
 80137f0:	461a      	mov	r2, r3
 80137f2:	68bb      	ldr	r3, [r7, #8]
 80137f4:	4413      	add	r3, r2
 80137f6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	3301      	adds	r3, #1
 80137fc:	60fb      	str	r3, [r7, #12]
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	885b      	ldrh	r3, [r3, #2]
 8013802:	461a      	mov	r2, r3
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	4293      	cmp	r3, r2
 8013808:	dbe7      	blt.n	80137da <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801380a:	bf00      	nop
 801380c:	bf00      	nop
 801380e:	3714      	adds	r7, #20
 8013810:	46bd      	mov	sp, r7
 8013812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013816:	4770      	bx	lr

08013818 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8013818:	b580      	push	{r7, lr}
 801381a:	b082      	sub	sp, #8
 801381c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801381e:	2300      	movs	r3, #0
 8013820:	80fb      	strh	r3, [r7, #6]
 8013822:	e009      	b.n	8013838 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8013824:	88fb      	ldrh	r3, [r7, #6]
 8013826:	4a08      	ldr	r2, [pc, #32]	; (8013848 <memp_init+0x30>)
 8013828:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801382c:	4618      	mov	r0, r3
 801382e:	f7ff ffc3 	bl	80137b8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8013832:	88fb      	ldrh	r3, [r7, #6]
 8013834:	3301      	adds	r3, #1
 8013836:	80fb      	strh	r3, [r7, #6]
 8013838:	88fb      	ldrh	r3, [r7, #6]
 801383a:	2b0c      	cmp	r3, #12
 801383c:	d9f2      	bls.n	8013824 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801383e:	bf00      	nop
 8013840:	bf00      	nop
 8013842:	3708      	adds	r7, #8
 8013844:	46bd      	mov	sp, r7
 8013846:	bd80      	pop	{r7, pc}
 8013848:	08026eac 	.word	0x08026eac

0801384c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801384c:	b580      	push	{r7, lr}
 801384e:	b084      	sub	sp, #16
 8013850:	af00      	add	r7, sp, #0
 8013852:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8013854:	f00a fc08 	bl	801e068 <sys_arch_protect>
 8013858:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 801385a:	687b      	ldr	r3, [r7, #4]
 801385c:	689b      	ldr	r3, [r3, #8]
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8013862:	68bb      	ldr	r3, [r7, #8]
 8013864:	2b00      	cmp	r3, #0
 8013866:	d015      	beq.n	8013894 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8013868:	687b      	ldr	r3, [r7, #4]
 801386a:	689b      	ldr	r3, [r3, #8]
 801386c:	68ba      	ldr	r2, [r7, #8]
 801386e:	6812      	ldr	r2, [r2, #0]
 8013870:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8013872:	68bb      	ldr	r3, [r7, #8]
 8013874:	f003 0303 	and.w	r3, r3, #3
 8013878:	2b00      	cmp	r3, #0
 801387a:	d006      	beq.n	801388a <do_memp_malloc_pool+0x3e>
 801387c:	4b09      	ldr	r3, [pc, #36]	; (80138a4 <do_memp_malloc_pool+0x58>)
 801387e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8013882:	4909      	ldr	r1, [pc, #36]	; (80138a8 <do_memp_malloc_pool+0x5c>)
 8013884:	4809      	ldr	r0, [pc, #36]	; (80138ac <do_memp_malloc_pool+0x60>)
 8013886:	f00b fc91 	bl	801f1ac <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801388a:	68f8      	ldr	r0, [r7, #12]
 801388c:	f00a fbfa 	bl	801e084 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8013890:	68bb      	ldr	r3, [r7, #8]
 8013892:	e003      	b.n	801389c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8013894:	68f8      	ldr	r0, [r7, #12]
 8013896:	f00a fbf5 	bl	801e084 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801389a:	2300      	movs	r3, #0
}
 801389c:	4618      	mov	r0, r3
 801389e:	3710      	adds	r7, #16
 80138a0:	46bd      	mov	sp, r7
 80138a2:	bd80      	pop	{r7, pc}
 80138a4:	080244f8 	.word	0x080244f8
 80138a8:	08024528 	.word	0x08024528
 80138ac:	0802454c 	.word	0x0802454c

080138b0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80138b0:	b580      	push	{r7, lr}
 80138b2:	b084      	sub	sp, #16
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	4603      	mov	r3, r0
 80138b8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80138ba:	79fb      	ldrb	r3, [r7, #7]
 80138bc:	2b0c      	cmp	r3, #12
 80138be:	d908      	bls.n	80138d2 <memp_malloc+0x22>
 80138c0:	4b0a      	ldr	r3, [pc, #40]	; (80138ec <memp_malloc+0x3c>)
 80138c2:	f240 1257 	movw	r2, #343	; 0x157
 80138c6:	490a      	ldr	r1, [pc, #40]	; (80138f0 <memp_malloc+0x40>)
 80138c8:	480a      	ldr	r0, [pc, #40]	; (80138f4 <memp_malloc+0x44>)
 80138ca:	f00b fc6f 	bl	801f1ac <iprintf>
 80138ce:	2300      	movs	r3, #0
 80138d0:	e008      	b.n	80138e4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80138d2:	79fb      	ldrb	r3, [r7, #7]
 80138d4:	4a08      	ldr	r2, [pc, #32]	; (80138f8 <memp_malloc+0x48>)
 80138d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80138da:	4618      	mov	r0, r3
 80138dc:	f7ff ffb6 	bl	801384c <do_memp_malloc_pool>
 80138e0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80138e2:	68fb      	ldr	r3, [r7, #12]
}
 80138e4:	4618      	mov	r0, r3
 80138e6:	3710      	adds	r7, #16
 80138e8:	46bd      	mov	sp, r7
 80138ea:	bd80      	pop	{r7, pc}
 80138ec:	080244f8 	.word	0x080244f8
 80138f0:	08024588 	.word	0x08024588
 80138f4:	0802454c 	.word	0x0802454c
 80138f8:	08026eac 	.word	0x08026eac

080138fc <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80138fc:	b580      	push	{r7, lr}
 80138fe:	b084      	sub	sp, #16
 8013900:	af00      	add	r7, sp, #0
 8013902:	6078      	str	r0, [r7, #4]
 8013904:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8013906:	683b      	ldr	r3, [r7, #0]
 8013908:	f003 0303 	and.w	r3, r3, #3
 801390c:	2b00      	cmp	r3, #0
 801390e:	d006      	beq.n	801391e <do_memp_free_pool+0x22>
 8013910:	4b0d      	ldr	r3, [pc, #52]	; (8013948 <do_memp_free_pool+0x4c>)
 8013912:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8013916:	490d      	ldr	r1, [pc, #52]	; (801394c <do_memp_free_pool+0x50>)
 8013918:	480d      	ldr	r0, [pc, #52]	; (8013950 <do_memp_free_pool+0x54>)
 801391a:	f00b fc47 	bl	801f1ac <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801391e:	683b      	ldr	r3, [r7, #0]
 8013920:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8013922:	f00a fba1 	bl	801e068 <sys_arch_protect>
 8013926:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	689b      	ldr	r3, [r3, #8]
 801392c:	681a      	ldr	r2, [r3, #0]
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	689b      	ldr	r3, [r3, #8]
 8013936:	68fa      	ldr	r2, [r7, #12]
 8013938:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801393a:	68b8      	ldr	r0, [r7, #8]
 801393c:	f00a fba2 	bl	801e084 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8013940:	bf00      	nop
 8013942:	3710      	adds	r7, #16
 8013944:	46bd      	mov	sp, r7
 8013946:	bd80      	pop	{r7, pc}
 8013948:	080244f8 	.word	0x080244f8
 801394c:	080245a8 	.word	0x080245a8
 8013950:	0802454c 	.word	0x0802454c

08013954 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8013954:	b580      	push	{r7, lr}
 8013956:	b082      	sub	sp, #8
 8013958:	af00      	add	r7, sp, #0
 801395a:	4603      	mov	r3, r0
 801395c:	6039      	str	r1, [r7, #0]
 801395e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8013960:	79fb      	ldrb	r3, [r7, #7]
 8013962:	2b0c      	cmp	r3, #12
 8013964:	d907      	bls.n	8013976 <memp_free+0x22>
 8013966:	4b0c      	ldr	r3, [pc, #48]	; (8013998 <memp_free+0x44>)
 8013968:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801396c:	490b      	ldr	r1, [pc, #44]	; (801399c <memp_free+0x48>)
 801396e:	480c      	ldr	r0, [pc, #48]	; (80139a0 <memp_free+0x4c>)
 8013970:	f00b fc1c 	bl	801f1ac <iprintf>
 8013974:	e00c      	b.n	8013990 <memp_free+0x3c>

  if (mem == NULL) {
 8013976:	683b      	ldr	r3, [r7, #0]
 8013978:	2b00      	cmp	r3, #0
 801397a:	d008      	beq.n	801398e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801397c:	79fb      	ldrb	r3, [r7, #7]
 801397e:	4a09      	ldr	r2, [pc, #36]	; (80139a4 <memp_free+0x50>)
 8013980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013984:	6839      	ldr	r1, [r7, #0]
 8013986:	4618      	mov	r0, r3
 8013988:	f7ff ffb8 	bl	80138fc <do_memp_free_pool>
 801398c:	e000      	b.n	8013990 <memp_free+0x3c>
    return;
 801398e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8013990:	3708      	adds	r7, #8
 8013992:	46bd      	mov	sp, r7
 8013994:	bd80      	pop	{r7, pc}
 8013996:	bf00      	nop
 8013998:	080244f8 	.word	0x080244f8
 801399c:	080245c8 	.word	0x080245c8
 80139a0:	0802454c 	.word	0x0802454c
 80139a4:	08026eac 	.word	0x08026eac

080139a8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80139a8:	b480      	push	{r7}
 80139aa:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80139ac:	bf00      	nop
 80139ae:	46bd      	mov	sp, r7
 80139b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139b4:	4770      	bx	lr
	...

080139b8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b086      	sub	sp, #24
 80139bc:	af00      	add	r7, sp, #0
 80139be:	60f8      	str	r0, [r7, #12]
 80139c0:	60b9      	str	r1, [r7, #8]
 80139c2:	607a      	str	r2, [r7, #4]
 80139c4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	2b00      	cmp	r3, #0
 80139ca:	d108      	bne.n	80139de <netif_add+0x26>
 80139cc:	4b57      	ldr	r3, [pc, #348]	; (8013b2c <netif_add+0x174>)
 80139ce:	f240 1227 	movw	r2, #295	; 0x127
 80139d2:	4957      	ldr	r1, [pc, #348]	; (8013b30 <netif_add+0x178>)
 80139d4:	4857      	ldr	r0, [pc, #348]	; (8013b34 <netif_add+0x17c>)
 80139d6:	f00b fbe9 	bl	801f1ac <iprintf>
 80139da:	2300      	movs	r3, #0
 80139dc:	e0a2      	b.n	8013b24 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 80139de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d108      	bne.n	80139f6 <netif_add+0x3e>
 80139e4:	4b51      	ldr	r3, [pc, #324]	; (8013b2c <netif_add+0x174>)
 80139e6:	f44f 7294 	mov.w	r2, #296	; 0x128
 80139ea:	4953      	ldr	r1, [pc, #332]	; (8013b38 <netif_add+0x180>)
 80139ec:	4851      	ldr	r0, [pc, #324]	; (8013b34 <netif_add+0x17c>)
 80139ee:	f00b fbdd 	bl	801f1ac <iprintf>
 80139f2:	2300      	movs	r3, #0
 80139f4:	e096      	b.n	8013b24 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 80139f6:	68bb      	ldr	r3, [r7, #8]
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d101      	bne.n	8013a00 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 80139fc:	4b4f      	ldr	r3, [pc, #316]	; (8013b3c <netif_add+0x184>)
 80139fe:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d101      	bne.n	8013a0a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8013a06:	4b4d      	ldr	r3, [pc, #308]	; (8013b3c <netif_add+0x184>)
 8013a08:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013a0a:	683b      	ldr	r3, [r7, #0]
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	d101      	bne.n	8013a14 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8013a10:	4b4a      	ldr	r3, [pc, #296]	; (8013b3c <netif_add+0x184>)
 8013a12:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	2200      	movs	r2, #0
 8013a18:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	2200      	movs	r2, #0
 8013a1e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8013a20:	68fb      	ldr	r3, [r7, #12]
 8013a22:	2200      	movs	r2, #0
 8013a24:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8013a26:	68fb      	ldr	r3, [r7, #12]
 8013a28:	4a45      	ldr	r2, [pc, #276]	; (8013b40 <netif_add+0x188>)
 8013a2a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	2200      	movs	r2, #0
 8013a30:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	2200      	movs	r2, #0
 8013a36:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8013a3a:	68fb      	ldr	r3, [r7, #12]
 8013a3c:	2200      	movs	r2, #0
 8013a3e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8013a40:	68fb      	ldr	r3, [r7, #12]
 8013a42:	6a3a      	ldr	r2, [r7, #32]
 8013a44:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8013a46:	4b3f      	ldr	r3, [pc, #252]	; (8013b44 <netif_add+0x18c>)
 8013a48:	781a      	ldrb	r2, [r3, #0]
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013a54:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8013a56:	683b      	ldr	r3, [r7, #0]
 8013a58:	687a      	ldr	r2, [r7, #4]
 8013a5a:	68b9      	ldr	r1, [r7, #8]
 8013a5c:	68f8      	ldr	r0, [r7, #12]
 8013a5e:	f000 f913 	bl	8013c88 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8013a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a64:	68f8      	ldr	r0, [r7, #12]
 8013a66:	4798      	blx	r3
 8013a68:	4603      	mov	r3, r0
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d001      	beq.n	8013a72 <netif_add+0xba>
    return NULL;
 8013a6e:	2300      	movs	r3, #0
 8013a70:	e058      	b.n	8013b24 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 8013a72:	68fb      	ldr	r3, [r7, #12]
 8013a74:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013a78:	2bff      	cmp	r3, #255	; 0xff
 8013a7a:	d103      	bne.n	8013a84 <netif_add+0xcc>
        netif->num = 0;
 8013a7c:	68fb      	ldr	r3, [r7, #12]
 8013a7e:	2200      	movs	r2, #0
 8013a80:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8013a84:	2300      	movs	r3, #0
 8013a86:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013a88:	4b2f      	ldr	r3, [pc, #188]	; (8013b48 <netif_add+0x190>)
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	617b      	str	r3, [r7, #20]
 8013a8e:	e02b      	b.n	8013ae8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8013a90:	697a      	ldr	r2, [r7, #20]
 8013a92:	68fb      	ldr	r3, [r7, #12]
 8013a94:	429a      	cmp	r2, r3
 8013a96:	d106      	bne.n	8013aa6 <netif_add+0xee>
 8013a98:	4b24      	ldr	r3, [pc, #144]	; (8013b2c <netif_add+0x174>)
 8013a9a:	f240 128b 	movw	r2, #395	; 0x18b
 8013a9e:	492b      	ldr	r1, [pc, #172]	; (8013b4c <netif_add+0x194>)
 8013aa0:	4824      	ldr	r0, [pc, #144]	; (8013b34 <netif_add+0x17c>)
 8013aa2:	f00b fb83 	bl	801f1ac <iprintf>
        num_netifs++;
 8013aa6:	693b      	ldr	r3, [r7, #16]
 8013aa8:	3301      	adds	r3, #1
 8013aaa:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8013aac:	693b      	ldr	r3, [r7, #16]
 8013aae:	2bff      	cmp	r3, #255	; 0xff
 8013ab0:	dd06      	ble.n	8013ac0 <netif_add+0x108>
 8013ab2:	4b1e      	ldr	r3, [pc, #120]	; (8013b2c <netif_add+0x174>)
 8013ab4:	f240 128d 	movw	r2, #397	; 0x18d
 8013ab8:	4925      	ldr	r1, [pc, #148]	; (8013b50 <netif_add+0x198>)
 8013aba:	481e      	ldr	r0, [pc, #120]	; (8013b34 <netif_add+0x17c>)
 8013abc:	f00b fb76 	bl	801f1ac <iprintf>
        if (netif2->num == netif->num) {
 8013ac0:	697b      	ldr	r3, [r7, #20]
 8013ac2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8013ac6:	68fb      	ldr	r3, [r7, #12]
 8013ac8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013acc:	429a      	cmp	r2, r3
 8013ace:	d108      	bne.n	8013ae2 <netif_add+0x12a>
          netif->num++;
 8013ad0:	68fb      	ldr	r3, [r7, #12]
 8013ad2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013ad6:	3301      	adds	r3, #1
 8013ad8:	b2da      	uxtb	r2, r3
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8013ae0:	e005      	b.n	8013aee <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8013ae2:	697b      	ldr	r3, [r7, #20]
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	617b      	str	r3, [r7, #20]
 8013ae8:	697b      	ldr	r3, [r7, #20]
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d1d0      	bne.n	8013a90 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8013aee:	697b      	ldr	r3, [r7, #20]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	d1be      	bne.n	8013a72 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8013af4:	68fb      	ldr	r3, [r7, #12]
 8013af6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013afa:	2bfe      	cmp	r3, #254	; 0xfe
 8013afc:	d103      	bne.n	8013b06 <netif_add+0x14e>
    netif_num = 0;
 8013afe:	4b11      	ldr	r3, [pc, #68]	; (8013b44 <netif_add+0x18c>)
 8013b00:	2200      	movs	r2, #0
 8013b02:	701a      	strb	r2, [r3, #0]
 8013b04:	e006      	b.n	8013b14 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8013b06:	68fb      	ldr	r3, [r7, #12]
 8013b08:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013b0c:	3301      	adds	r3, #1
 8013b0e:	b2da      	uxtb	r2, r3
 8013b10:	4b0c      	ldr	r3, [pc, #48]	; (8013b44 <netif_add+0x18c>)
 8013b12:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8013b14:	4b0c      	ldr	r3, [pc, #48]	; (8013b48 <netif_add+0x190>)
 8013b16:	681a      	ldr	r2, [r3, #0]
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8013b1c:	4a0a      	ldr	r2, [pc, #40]	; (8013b48 <netif_add+0x190>)
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8013b22:	68fb      	ldr	r3, [r7, #12]
}
 8013b24:	4618      	mov	r0, r3
 8013b26:	3718      	adds	r7, #24
 8013b28:	46bd      	mov	sp, r7
 8013b2a:	bd80      	pop	{r7, pc}
 8013b2c:	080245e4 	.word	0x080245e4
 8013b30:	08024678 	.word	0x08024678
 8013b34:	08024634 	.word	0x08024634
 8013b38:	08024694 	.word	0x08024694
 8013b3c:	08026f20 	.word	0x08026f20
 8013b40:	08013e9b 	.word	0x08013e9b
 8013b44:	20006e10 	.word	0x20006e10
 8013b48:	2000e160 	.word	0x2000e160
 8013b4c:	080246b8 	.word	0x080246b8
 8013b50:	080246cc 	.word	0x080246cc

08013b54 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013b54:	b580      	push	{r7, lr}
 8013b56:	b082      	sub	sp, #8
 8013b58:	af00      	add	r7, sp, #0
 8013b5a:	6078      	str	r0, [r7, #4]
 8013b5c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8013b5e:	6839      	ldr	r1, [r7, #0]
 8013b60:	6878      	ldr	r0, [r7, #4]
 8013b62:	f002 fd31 	bl	80165c8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8013b66:	6839      	ldr	r1, [r7, #0]
 8013b68:	6878      	ldr	r0, [r7, #4]
 8013b6a:	f007 fdc9 	bl	801b700 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8013b6e:	bf00      	nop
 8013b70:	3708      	adds	r7, #8
 8013b72:	46bd      	mov	sp, r7
 8013b74:	bd80      	pop	{r7, pc}
	...

08013b78 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8013b78:	b580      	push	{r7, lr}
 8013b7a:	b086      	sub	sp, #24
 8013b7c:	af00      	add	r7, sp, #0
 8013b7e:	60f8      	str	r0, [r7, #12]
 8013b80:	60b9      	str	r1, [r7, #8]
 8013b82:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8013b84:	68bb      	ldr	r3, [r7, #8]
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d106      	bne.n	8013b98 <netif_do_set_ipaddr+0x20>
 8013b8a:	4b1d      	ldr	r3, [pc, #116]	; (8013c00 <netif_do_set_ipaddr+0x88>)
 8013b8c:	f240 12cb 	movw	r2, #459	; 0x1cb
 8013b90:	491c      	ldr	r1, [pc, #112]	; (8013c04 <netif_do_set_ipaddr+0x8c>)
 8013b92:	481d      	ldr	r0, [pc, #116]	; (8013c08 <netif_do_set_ipaddr+0x90>)
 8013b94:	f00b fb0a 	bl	801f1ac <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8013b98:	687b      	ldr	r3, [r7, #4]
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d106      	bne.n	8013bac <netif_do_set_ipaddr+0x34>
 8013b9e:	4b18      	ldr	r3, [pc, #96]	; (8013c00 <netif_do_set_ipaddr+0x88>)
 8013ba0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8013ba4:	4917      	ldr	r1, [pc, #92]	; (8013c04 <netif_do_set_ipaddr+0x8c>)
 8013ba6:	4818      	ldr	r0, [pc, #96]	; (8013c08 <netif_do_set_ipaddr+0x90>)
 8013ba8:	f00b fb00 	bl	801f1ac <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8013bac:	68bb      	ldr	r3, [r7, #8]
 8013bae:	681a      	ldr	r2, [r3, #0]
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	3304      	adds	r3, #4
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	429a      	cmp	r2, r3
 8013bb8:	d01c      	beq.n	8013bf4 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8013bba:	68bb      	ldr	r3, [r7, #8]
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	3304      	adds	r3, #4
 8013bc4:	681a      	ldr	r2, [r3, #0]
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8013bca:	f107 0314 	add.w	r3, r7, #20
 8013bce:	4619      	mov	r1, r3
 8013bd0:	6878      	ldr	r0, [r7, #4]
 8013bd2:	f7ff ffbf 	bl	8013b54 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8013bd6:	68bb      	ldr	r3, [r7, #8]
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d002      	beq.n	8013be2 <netif_do_set_ipaddr+0x6a>
 8013bdc:	68bb      	ldr	r3, [r7, #8]
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	e000      	b.n	8013be4 <netif_do_set_ipaddr+0x6c>
 8013be2:	2300      	movs	r3, #0
 8013be4:	68fa      	ldr	r2, [r7, #12]
 8013be6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8013be8:	2101      	movs	r1, #1
 8013bea:	68f8      	ldr	r0, [r7, #12]
 8013bec:	f000 f8d2 	bl	8013d94 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8013bf0:	2301      	movs	r3, #1
 8013bf2:	e000      	b.n	8013bf6 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8013bf4:	2300      	movs	r3, #0
}
 8013bf6:	4618      	mov	r0, r3
 8013bf8:	3718      	adds	r7, #24
 8013bfa:	46bd      	mov	sp, r7
 8013bfc:	bd80      	pop	{r7, pc}
 8013bfe:	bf00      	nop
 8013c00:	080245e4 	.word	0x080245e4
 8013c04:	080246fc 	.word	0x080246fc
 8013c08:	08024634 	.word	0x08024634

08013c0c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8013c0c:	b480      	push	{r7}
 8013c0e:	b085      	sub	sp, #20
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	60f8      	str	r0, [r7, #12]
 8013c14:	60b9      	str	r1, [r7, #8]
 8013c16:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8013c18:	68bb      	ldr	r3, [r7, #8]
 8013c1a:	681a      	ldr	r2, [r3, #0]
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	3308      	adds	r3, #8
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	429a      	cmp	r2, r3
 8013c24:	d00a      	beq.n	8013c3c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8013c26:	68bb      	ldr	r3, [r7, #8]
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d002      	beq.n	8013c32 <netif_do_set_netmask+0x26>
 8013c2c:	68bb      	ldr	r3, [r7, #8]
 8013c2e:	681b      	ldr	r3, [r3, #0]
 8013c30:	e000      	b.n	8013c34 <netif_do_set_netmask+0x28>
 8013c32:	2300      	movs	r3, #0
 8013c34:	68fa      	ldr	r2, [r7, #12]
 8013c36:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8013c38:	2301      	movs	r3, #1
 8013c3a:	e000      	b.n	8013c3e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8013c3c:	2300      	movs	r3, #0
}
 8013c3e:	4618      	mov	r0, r3
 8013c40:	3714      	adds	r7, #20
 8013c42:	46bd      	mov	sp, r7
 8013c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c48:	4770      	bx	lr

08013c4a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8013c4a:	b480      	push	{r7}
 8013c4c:	b085      	sub	sp, #20
 8013c4e:	af00      	add	r7, sp, #0
 8013c50:	60f8      	str	r0, [r7, #12]
 8013c52:	60b9      	str	r1, [r7, #8]
 8013c54:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8013c56:	68bb      	ldr	r3, [r7, #8]
 8013c58:	681a      	ldr	r2, [r3, #0]
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	330c      	adds	r3, #12
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	429a      	cmp	r2, r3
 8013c62:	d00a      	beq.n	8013c7a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8013c64:	68bb      	ldr	r3, [r7, #8]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d002      	beq.n	8013c70 <netif_do_set_gw+0x26>
 8013c6a:	68bb      	ldr	r3, [r7, #8]
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	e000      	b.n	8013c72 <netif_do_set_gw+0x28>
 8013c70:	2300      	movs	r3, #0
 8013c72:	68fa      	ldr	r2, [r7, #12]
 8013c74:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8013c76:	2301      	movs	r3, #1
 8013c78:	e000      	b.n	8013c7c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8013c7a:	2300      	movs	r3, #0
}
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	3714      	adds	r7, #20
 8013c80:	46bd      	mov	sp, r7
 8013c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c86:	4770      	bx	lr

08013c88 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	b088      	sub	sp, #32
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	60f8      	str	r0, [r7, #12]
 8013c90:	60b9      	str	r1, [r7, #8]
 8013c92:	607a      	str	r2, [r7, #4]
 8013c94:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8013c96:	2300      	movs	r3, #0
 8013c98:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8013c9a:	2300      	movs	r3, #0
 8013c9c:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013c9e:	68bb      	ldr	r3, [r7, #8]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d101      	bne.n	8013ca8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8013ca4:	4b1c      	ldr	r3, [pc, #112]	; (8013d18 <netif_set_addr+0x90>)
 8013ca6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8013ca8:	687b      	ldr	r3, [r7, #4]
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d101      	bne.n	8013cb2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8013cae:	4b1a      	ldr	r3, [pc, #104]	; (8013d18 <netif_set_addr+0x90>)
 8013cb0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013cb2:	683b      	ldr	r3, [r7, #0]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d101      	bne.n	8013cbc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8013cb8:	4b17      	ldr	r3, [pc, #92]	; (8013d18 <netif_set_addr+0x90>)
 8013cba:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8013cbc:	68bb      	ldr	r3, [r7, #8]
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d003      	beq.n	8013cca <netif_set_addr+0x42>
 8013cc2:	68bb      	ldr	r3, [r7, #8]
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	2b00      	cmp	r3, #0
 8013cc8:	d101      	bne.n	8013cce <netif_set_addr+0x46>
 8013cca:	2301      	movs	r3, #1
 8013ccc:	e000      	b.n	8013cd0 <netif_set_addr+0x48>
 8013cce:	2300      	movs	r3, #0
 8013cd0:	617b      	str	r3, [r7, #20]
  if (remove) {
 8013cd2:	697b      	ldr	r3, [r7, #20]
 8013cd4:	2b00      	cmp	r3, #0
 8013cd6:	d006      	beq.n	8013ce6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013cd8:	f107 0310 	add.w	r3, r7, #16
 8013cdc:	461a      	mov	r2, r3
 8013cde:	68b9      	ldr	r1, [r7, #8]
 8013ce0:	68f8      	ldr	r0, [r7, #12]
 8013ce2:	f7ff ff49 	bl	8013b78 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8013ce6:	69fa      	ldr	r2, [r7, #28]
 8013ce8:	6879      	ldr	r1, [r7, #4]
 8013cea:	68f8      	ldr	r0, [r7, #12]
 8013cec:	f7ff ff8e 	bl	8013c0c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8013cf0:	69ba      	ldr	r2, [r7, #24]
 8013cf2:	6839      	ldr	r1, [r7, #0]
 8013cf4:	68f8      	ldr	r0, [r7, #12]
 8013cf6:	f7ff ffa8 	bl	8013c4a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8013cfa:	697b      	ldr	r3, [r7, #20]
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	d106      	bne.n	8013d0e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013d00:	f107 0310 	add.w	r3, r7, #16
 8013d04:	461a      	mov	r2, r3
 8013d06:	68b9      	ldr	r1, [r7, #8]
 8013d08:	68f8      	ldr	r0, [r7, #12]
 8013d0a:	f7ff ff35 	bl	8013b78 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8013d0e:	bf00      	nop
 8013d10:	3720      	adds	r7, #32
 8013d12:	46bd      	mov	sp, r7
 8013d14:	bd80      	pop	{r7, pc}
 8013d16:	bf00      	nop
 8013d18:	08026f20 	.word	0x08026f20

08013d1c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8013d1c:	b480      	push	{r7}
 8013d1e:	b083      	sub	sp, #12
 8013d20:	af00      	add	r7, sp, #0
 8013d22:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8013d24:	4a04      	ldr	r2, [pc, #16]	; (8013d38 <netif_set_default+0x1c>)
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8013d2a:	bf00      	nop
 8013d2c:	370c      	adds	r7, #12
 8013d2e:	46bd      	mov	sp, r7
 8013d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d34:	4770      	bx	lr
 8013d36:	bf00      	nop
 8013d38:	2000e164 	.word	0x2000e164

08013d3c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8013d3c:	b580      	push	{r7, lr}
 8013d3e:	b082      	sub	sp, #8
 8013d40:	af00      	add	r7, sp, #0
 8013d42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	2b00      	cmp	r3, #0
 8013d48:	d107      	bne.n	8013d5a <netif_set_up+0x1e>
 8013d4a:	4b0f      	ldr	r3, [pc, #60]	; (8013d88 <netif_set_up+0x4c>)
 8013d4c:	f44f 7254 	mov.w	r2, #848	; 0x350
 8013d50:	490e      	ldr	r1, [pc, #56]	; (8013d8c <netif_set_up+0x50>)
 8013d52:	480f      	ldr	r0, [pc, #60]	; (8013d90 <netif_set_up+0x54>)
 8013d54:	f00b fa2a 	bl	801f1ac <iprintf>
 8013d58:	e013      	b.n	8013d82 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013d60:	f003 0301 	and.w	r3, r3, #1
 8013d64:	2b00      	cmp	r3, #0
 8013d66:	d10c      	bne.n	8013d82 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013d6e:	f043 0301 	orr.w	r3, r3, #1
 8013d72:	b2da      	uxtb	r2, r3
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8013d7a:	2103      	movs	r1, #3
 8013d7c:	6878      	ldr	r0, [r7, #4]
 8013d7e:	f000 f809 	bl	8013d94 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8013d82:	3708      	adds	r7, #8
 8013d84:	46bd      	mov	sp, r7
 8013d86:	bd80      	pop	{r7, pc}
 8013d88:	080245e4 	.word	0x080245e4
 8013d8c:	0802476c 	.word	0x0802476c
 8013d90:	08024634 	.word	0x08024634

08013d94 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8013d94:	b580      	push	{r7, lr}
 8013d96:	b082      	sub	sp, #8
 8013d98:	af00      	add	r7, sp, #0
 8013d9a:	6078      	str	r0, [r7, #4]
 8013d9c:	460b      	mov	r3, r1
 8013d9e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d106      	bne.n	8013db4 <netif_issue_reports+0x20>
 8013da6:	4b18      	ldr	r3, [pc, #96]	; (8013e08 <netif_issue_reports+0x74>)
 8013da8:	f240 326d 	movw	r2, #877	; 0x36d
 8013dac:	4917      	ldr	r1, [pc, #92]	; (8013e0c <netif_issue_reports+0x78>)
 8013dae:	4818      	ldr	r0, [pc, #96]	; (8013e10 <netif_issue_reports+0x7c>)
 8013db0:	f00b f9fc 	bl	801f1ac <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013dba:	f003 0304 	and.w	r3, r3, #4
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d01e      	beq.n	8013e00 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8013dc2:	687b      	ldr	r3, [r7, #4]
 8013dc4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013dc8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d017      	beq.n	8013e00 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013dd0:	78fb      	ldrb	r3, [r7, #3]
 8013dd2:	f003 0301 	and.w	r3, r3, #1
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	d013      	beq.n	8013e02 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	3304      	adds	r3, #4
 8013dde:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8013de0:	2b00      	cmp	r3, #0
 8013de2:	d00e      	beq.n	8013e02 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8013de4:	687b      	ldr	r3, [r7, #4]
 8013de6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013dea:	f003 0308 	and.w	r3, r3, #8
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d007      	beq.n	8013e02 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	3304      	adds	r3, #4
 8013df6:	4619      	mov	r1, r3
 8013df8:	6878      	ldr	r0, [r7, #4]
 8013dfa:	f008 fbeb 	bl	801c5d4 <etharp_request>
 8013dfe:	e000      	b.n	8013e02 <netif_issue_reports+0x6e>
    return;
 8013e00:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8013e02:	3708      	adds	r7, #8
 8013e04:	46bd      	mov	sp, r7
 8013e06:	bd80      	pop	{r7, pc}
 8013e08:	080245e4 	.word	0x080245e4
 8013e0c:	08024788 	.word	0x08024788
 8013e10:	08024634 	.word	0x08024634

08013e14 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8013e14:	b580      	push	{r7, lr}
 8013e16:	b082      	sub	sp, #8
 8013e18:	af00      	add	r7, sp, #0
 8013e1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d107      	bne.n	8013e32 <netif_set_down+0x1e>
 8013e22:	4b12      	ldr	r3, [pc, #72]	; (8013e6c <netif_set_down+0x58>)
 8013e24:	f240 329b 	movw	r2, #923	; 0x39b
 8013e28:	4911      	ldr	r1, [pc, #68]	; (8013e70 <netif_set_down+0x5c>)
 8013e2a:	4812      	ldr	r0, [pc, #72]	; (8013e74 <netif_set_down+0x60>)
 8013e2c:	f00b f9be 	bl	801f1ac <iprintf>
 8013e30:	e019      	b.n	8013e66 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013e38:	f003 0301 	and.w	r3, r3, #1
 8013e3c:	2b00      	cmp	r3, #0
 8013e3e:	d012      	beq.n	8013e66 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013e46:	f023 0301 	bic.w	r3, r3, #1
 8013e4a:	b2da      	uxtb	r2, r3
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013e58:	f003 0308 	and.w	r3, r3, #8
 8013e5c:	2b00      	cmp	r3, #0
 8013e5e:	d002      	beq.n	8013e66 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8013e60:	6878      	ldr	r0, [r7, #4]
 8013e62:	f007 ff75 	bl	801bd50 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8013e66:	3708      	adds	r7, #8
 8013e68:	46bd      	mov	sp, r7
 8013e6a:	bd80      	pop	{r7, pc}
 8013e6c:	080245e4 	.word	0x080245e4
 8013e70:	080247ac 	.word	0x080247ac
 8013e74:	08024634 	.word	0x08024634

08013e78 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8013e78:	b480      	push	{r7}
 8013e7a:	b083      	sub	sp, #12
 8013e7c:	af00      	add	r7, sp, #0
 8013e7e:	6078      	str	r0, [r7, #4]
 8013e80:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d002      	beq.n	8013e8e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	683a      	ldr	r2, [r7, #0]
 8013e8c:	61da      	str	r2, [r3, #28]
  }
}
 8013e8e:	bf00      	nop
 8013e90:	370c      	adds	r7, #12
 8013e92:	46bd      	mov	sp, r7
 8013e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e98:	4770      	bx	lr

08013e9a <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8013e9a:	b480      	push	{r7}
 8013e9c:	b085      	sub	sp, #20
 8013e9e:	af00      	add	r7, sp, #0
 8013ea0:	60f8      	str	r0, [r7, #12]
 8013ea2:	60b9      	str	r1, [r7, #8]
 8013ea4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8013ea6:	f06f 030b 	mvn.w	r3, #11
}
 8013eaa:	4618      	mov	r0, r3
 8013eac:	3714      	adds	r7, #20
 8013eae:	46bd      	mov	sp, r7
 8013eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eb4:	4770      	bx	lr
	...

08013eb8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8013eb8:	b480      	push	{r7}
 8013eba:	b085      	sub	sp, #20
 8013ebc:	af00      	add	r7, sp, #0
 8013ebe:	4603      	mov	r3, r0
 8013ec0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8013ec2:	79fb      	ldrb	r3, [r7, #7]
 8013ec4:	2b00      	cmp	r3, #0
 8013ec6:	d013      	beq.n	8013ef0 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8013ec8:	4b0d      	ldr	r3, [pc, #52]	; (8013f00 <netif_get_by_index+0x48>)
 8013eca:	681b      	ldr	r3, [r3, #0]
 8013ecc:	60fb      	str	r3, [r7, #12]
 8013ece:	e00c      	b.n	8013eea <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013ed6:	3301      	adds	r3, #1
 8013ed8:	b2db      	uxtb	r3, r3
 8013eda:	79fa      	ldrb	r2, [r7, #7]
 8013edc:	429a      	cmp	r2, r3
 8013ede:	d101      	bne.n	8013ee4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8013ee0:	68fb      	ldr	r3, [r7, #12]
 8013ee2:	e006      	b.n	8013ef2 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	60fb      	str	r3, [r7, #12]
 8013eea:	68fb      	ldr	r3, [r7, #12]
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d1ef      	bne.n	8013ed0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8013ef0:	2300      	movs	r3, #0
}
 8013ef2:	4618      	mov	r0, r3
 8013ef4:	3714      	adds	r7, #20
 8013ef6:	46bd      	mov	sp, r7
 8013ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013efc:	4770      	bx	lr
 8013efe:	bf00      	nop
 8013f00:	2000e160 	.word	0x2000e160

08013f04 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8013f04:	b580      	push	{r7, lr}
 8013f06:	b082      	sub	sp, #8
 8013f08:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8013f0a:	f00a f8ad 	bl	801e068 <sys_arch_protect>
 8013f0e:	6038      	str	r0, [r7, #0]
 8013f10:	4b0d      	ldr	r3, [pc, #52]	; (8013f48 <pbuf_free_ooseq+0x44>)
 8013f12:	2200      	movs	r2, #0
 8013f14:	701a      	strb	r2, [r3, #0]
 8013f16:	6838      	ldr	r0, [r7, #0]
 8013f18:	f00a f8b4 	bl	801e084 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013f1c:	4b0b      	ldr	r3, [pc, #44]	; (8013f4c <pbuf_free_ooseq+0x48>)
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	607b      	str	r3, [r7, #4]
 8013f22:	e00a      	b.n	8013f3a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8013f24:	687b      	ldr	r3, [r7, #4]
 8013f26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013f28:	2b00      	cmp	r3, #0
 8013f2a:	d003      	beq.n	8013f34 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8013f2c:	6878      	ldr	r0, [r7, #4]
 8013f2e:	f002 fb89 	bl	8016644 <tcp_free_ooseq>
      return;
 8013f32:	e005      	b.n	8013f40 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013f34:	687b      	ldr	r3, [r7, #4]
 8013f36:	68db      	ldr	r3, [r3, #12]
 8013f38:	607b      	str	r3, [r7, #4]
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	2b00      	cmp	r3, #0
 8013f3e:	d1f1      	bne.n	8013f24 <pbuf_free_ooseq+0x20>
    }
  }
}
 8013f40:	3708      	adds	r7, #8
 8013f42:	46bd      	mov	sp, r7
 8013f44:	bd80      	pop	{r7, pc}
 8013f46:	bf00      	nop
 8013f48:	2000e168 	.word	0x2000e168
 8013f4c:	2000e170 	.word	0x2000e170

08013f50 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8013f50:	b580      	push	{r7, lr}
 8013f52:	b082      	sub	sp, #8
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8013f58:	f7ff ffd4 	bl	8013f04 <pbuf_free_ooseq>
}
 8013f5c:	bf00      	nop
 8013f5e:	3708      	adds	r7, #8
 8013f60:	46bd      	mov	sp, r7
 8013f62:	bd80      	pop	{r7, pc}

08013f64 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8013f64:	b580      	push	{r7, lr}
 8013f66:	b082      	sub	sp, #8
 8013f68:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8013f6a:	f00a f87d 	bl	801e068 <sys_arch_protect>
 8013f6e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8013f70:	4b0f      	ldr	r3, [pc, #60]	; (8013fb0 <pbuf_pool_is_empty+0x4c>)
 8013f72:	781b      	ldrb	r3, [r3, #0]
 8013f74:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8013f76:	4b0e      	ldr	r3, [pc, #56]	; (8013fb0 <pbuf_pool_is_empty+0x4c>)
 8013f78:	2201      	movs	r2, #1
 8013f7a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8013f7c:	6878      	ldr	r0, [r7, #4]
 8013f7e:	f00a f881 	bl	801e084 <sys_arch_unprotect>

  if (!queued) {
 8013f82:	78fb      	ldrb	r3, [r7, #3]
 8013f84:	2b00      	cmp	r3, #0
 8013f86:	d10f      	bne.n	8013fa8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8013f88:	2100      	movs	r1, #0
 8013f8a:	480a      	ldr	r0, [pc, #40]	; (8013fb4 <pbuf_pool_is_empty+0x50>)
 8013f8c:	f7fe ff3a 	bl	8012e04 <tcpip_try_callback>
 8013f90:	4603      	mov	r3, r0
 8013f92:	2b00      	cmp	r3, #0
 8013f94:	d008      	beq.n	8013fa8 <pbuf_pool_is_empty+0x44>
 8013f96:	f00a f867 	bl	801e068 <sys_arch_protect>
 8013f9a:	6078      	str	r0, [r7, #4]
 8013f9c:	4b04      	ldr	r3, [pc, #16]	; (8013fb0 <pbuf_pool_is_empty+0x4c>)
 8013f9e:	2200      	movs	r2, #0
 8013fa0:	701a      	strb	r2, [r3, #0]
 8013fa2:	6878      	ldr	r0, [r7, #4]
 8013fa4:	f00a f86e 	bl	801e084 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8013fa8:	bf00      	nop
 8013faa:	3708      	adds	r7, #8
 8013fac:	46bd      	mov	sp, r7
 8013fae:	bd80      	pop	{r7, pc}
 8013fb0:	2000e168 	.word	0x2000e168
 8013fb4:	08013f51 	.word	0x08013f51

08013fb8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8013fb8:	b480      	push	{r7}
 8013fba:	b085      	sub	sp, #20
 8013fbc:	af00      	add	r7, sp, #0
 8013fbe:	60f8      	str	r0, [r7, #12]
 8013fc0:	60b9      	str	r1, [r7, #8]
 8013fc2:	4611      	mov	r1, r2
 8013fc4:	461a      	mov	r2, r3
 8013fc6:	460b      	mov	r3, r1
 8013fc8:	80fb      	strh	r3, [r7, #6]
 8013fca:	4613      	mov	r3, r2
 8013fcc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8013fce:	68fb      	ldr	r3, [r7, #12]
 8013fd0:	2200      	movs	r2, #0
 8013fd2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8013fd4:	68fb      	ldr	r3, [r7, #12]
 8013fd6:	68ba      	ldr	r2, [r7, #8]
 8013fd8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8013fda:	68fb      	ldr	r3, [r7, #12]
 8013fdc:	88fa      	ldrh	r2, [r7, #6]
 8013fde:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8013fe0:	68fb      	ldr	r3, [r7, #12]
 8013fe2:	88ba      	ldrh	r2, [r7, #4]
 8013fe4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8013fe6:	8b3b      	ldrh	r3, [r7, #24]
 8013fe8:	b2da      	uxtb	r2, r3
 8013fea:	68fb      	ldr	r3, [r7, #12]
 8013fec:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8013fee:	68fb      	ldr	r3, [r7, #12]
 8013ff0:	7f3a      	ldrb	r2, [r7, #28]
 8013ff2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	2201      	movs	r2, #1
 8013ff8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8013ffa:	68fb      	ldr	r3, [r7, #12]
 8013ffc:	2200      	movs	r2, #0
 8013ffe:	73da      	strb	r2, [r3, #15]
}
 8014000:	bf00      	nop
 8014002:	3714      	adds	r7, #20
 8014004:	46bd      	mov	sp, r7
 8014006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801400a:	4770      	bx	lr

0801400c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 801400c:	b580      	push	{r7, lr}
 801400e:	b08c      	sub	sp, #48	; 0x30
 8014010:	af02      	add	r7, sp, #8
 8014012:	4603      	mov	r3, r0
 8014014:	71fb      	strb	r3, [r7, #7]
 8014016:	460b      	mov	r3, r1
 8014018:	80bb      	strh	r3, [r7, #4]
 801401a:	4613      	mov	r3, r2
 801401c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801401e:	79fb      	ldrb	r3, [r7, #7]
 8014020:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8014022:	887b      	ldrh	r3, [r7, #2]
 8014024:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8014028:	d07f      	beq.n	801412a <pbuf_alloc+0x11e>
 801402a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801402e:	f300 80c8 	bgt.w	80141c2 <pbuf_alloc+0x1b6>
 8014032:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8014036:	d010      	beq.n	801405a <pbuf_alloc+0x4e>
 8014038:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801403c:	f300 80c1 	bgt.w	80141c2 <pbuf_alloc+0x1b6>
 8014040:	2b01      	cmp	r3, #1
 8014042:	d002      	beq.n	801404a <pbuf_alloc+0x3e>
 8014044:	2b41      	cmp	r3, #65	; 0x41
 8014046:	f040 80bc 	bne.w	80141c2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801404a:	887a      	ldrh	r2, [r7, #2]
 801404c:	88bb      	ldrh	r3, [r7, #4]
 801404e:	4619      	mov	r1, r3
 8014050:	2000      	movs	r0, #0
 8014052:	f000 f8d1 	bl	80141f8 <pbuf_alloc_reference>
 8014056:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8014058:	e0bd      	b.n	80141d6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801405a:	2300      	movs	r3, #0
 801405c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 801405e:	2300      	movs	r3, #0
 8014060:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8014062:	88bb      	ldrh	r3, [r7, #4]
 8014064:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8014066:	200c      	movs	r0, #12
 8014068:	f7ff fc22 	bl	80138b0 <memp_malloc>
 801406c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801406e:	693b      	ldr	r3, [r7, #16]
 8014070:	2b00      	cmp	r3, #0
 8014072:	d109      	bne.n	8014088 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8014074:	f7ff ff76 	bl	8013f64 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8014078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801407a:	2b00      	cmp	r3, #0
 801407c:	d002      	beq.n	8014084 <pbuf_alloc+0x78>
            pbuf_free(p);
 801407e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014080:	f000 faa8 	bl	80145d4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8014084:	2300      	movs	r3, #0
 8014086:	e0a7      	b.n	80141d8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8014088:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801408a:	3303      	adds	r3, #3
 801408c:	b29b      	uxth	r3, r3
 801408e:	f023 0303 	bic.w	r3, r3, #3
 8014092:	b29b      	uxth	r3, r3
 8014094:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8014098:	b29b      	uxth	r3, r3
 801409a:	8b7a      	ldrh	r2, [r7, #26]
 801409c:	4293      	cmp	r3, r2
 801409e:	bf28      	it	cs
 80140a0:	4613      	movcs	r3, r2
 80140a2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80140a4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80140a6:	3310      	adds	r3, #16
 80140a8:	693a      	ldr	r2, [r7, #16]
 80140aa:	4413      	add	r3, r2
 80140ac:	3303      	adds	r3, #3
 80140ae:	f023 0303 	bic.w	r3, r3, #3
 80140b2:	4618      	mov	r0, r3
 80140b4:	89f9      	ldrh	r1, [r7, #14]
 80140b6:	8b7a      	ldrh	r2, [r7, #26]
 80140b8:	2300      	movs	r3, #0
 80140ba:	9301      	str	r3, [sp, #4]
 80140bc:	887b      	ldrh	r3, [r7, #2]
 80140be:	9300      	str	r3, [sp, #0]
 80140c0:	460b      	mov	r3, r1
 80140c2:	4601      	mov	r1, r0
 80140c4:	6938      	ldr	r0, [r7, #16]
 80140c6:	f7ff ff77 	bl	8013fb8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80140ca:	693b      	ldr	r3, [r7, #16]
 80140cc:	685b      	ldr	r3, [r3, #4]
 80140ce:	f003 0303 	and.w	r3, r3, #3
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d006      	beq.n	80140e4 <pbuf_alloc+0xd8>
 80140d6:	4b42      	ldr	r3, [pc, #264]	; (80141e0 <pbuf_alloc+0x1d4>)
 80140d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80140dc:	4941      	ldr	r1, [pc, #260]	; (80141e4 <pbuf_alloc+0x1d8>)
 80140de:	4842      	ldr	r0, [pc, #264]	; (80141e8 <pbuf_alloc+0x1dc>)
 80140e0:	f00b f864 	bl	801f1ac <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80140e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80140e6:	3303      	adds	r3, #3
 80140e8:	f023 0303 	bic.w	r3, r3, #3
 80140ec:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80140f0:	d106      	bne.n	8014100 <pbuf_alloc+0xf4>
 80140f2:	4b3b      	ldr	r3, [pc, #236]	; (80141e0 <pbuf_alloc+0x1d4>)
 80140f4:	f44f 7281 	mov.w	r2, #258	; 0x102
 80140f8:	493c      	ldr	r1, [pc, #240]	; (80141ec <pbuf_alloc+0x1e0>)
 80140fa:	483b      	ldr	r0, [pc, #236]	; (80141e8 <pbuf_alloc+0x1dc>)
 80140fc:	f00b f856 	bl	801f1ac <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8014100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014102:	2b00      	cmp	r3, #0
 8014104:	d102      	bne.n	801410c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8014106:	693b      	ldr	r3, [r7, #16]
 8014108:	627b      	str	r3, [r7, #36]	; 0x24
 801410a:	e002      	b.n	8014112 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801410c:	69fb      	ldr	r3, [r7, #28]
 801410e:	693a      	ldr	r2, [r7, #16]
 8014110:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8014112:	693b      	ldr	r3, [r7, #16]
 8014114:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8014116:	8b7a      	ldrh	r2, [r7, #26]
 8014118:	89fb      	ldrh	r3, [r7, #14]
 801411a:	1ad3      	subs	r3, r2, r3
 801411c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801411e:	2300      	movs	r3, #0
 8014120:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8014122:	8b7b      	ldrh	r3, [r7, #26]
 8014124:	2b00      	cmp	r3, #0
 8014126:	d19e      	bne.n	8014066 <pbuf_alloc+0x5a>
      break;
 8014128:	e055      	b.n	80141d6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801412a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801412c:	3303      	adds	r3, #3
 801412e:	b29b      	uxth	r3, r3
 8014130:	f023 0303 	bic.w	r3, r3, #3
 8014134:	b29a      	uxth	r2, r3
 8014136:	88bb      	ldrh	r3, [r7, #4]
 8014138:	3303      	adds	r3, #3
 801413a:	b29b      	uxth	r3, r3
 801413c:	f023 0303 	bic.w	r3, r3, #3
 8014140:	b29b      	uxth	r3, r3
 8014142:	4413      	add	r3, r2
 8014144:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8014146:	8b3b      	ldrh	r3, [r7, #24]
 8014148:	3310      	adds	r3, #16
 801414a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801414c:	8b3a      	ldrh	r2, [r7, #24]
 801414e:	88bb      	ldrh	r3, [r7, #4]
 8014150:	3303      	adds	r3, #3
 8014152:	f023 0303 	bic.w	r3, r3, #3
 8014156:	429a      	cmp	r2, r3
 8014158:	d306      	bcc.n	8014168 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801415a:	8afa      	ldrh	r2, [r7, #22]
 801415c:	88bb      	ldrh	r3, [r7, #4]
 801415e:	3303      	adds	r3, #3
 8014160:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8014164:	429a      	cmp	r2, r3
 8014166:	d201      	bcs.n	801416c <pbuf_alloc+0x160>
        return NULL;
 8014168:	2300      	movs	r3, #0
 801416a:	e035      	b.n	80141d8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801416c:	8afb      	ldrh	r3, [r7, #22]
 801416e:	4618      	mov	r0, r3
 8014170:	f7ff fa1c 	bl	80135ac <mem_malloc>
 8014174:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8014176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014178:	2b00      	cmp	r3, #0
 801417a:	d101      	bne.n	8014180 <pbuf_alloc+0x174>
        return NULL;
 801417c:	2300      	movs	r3, #0
 801417e:	e02b      	b.n	80141d8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8014180:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014182:	3310      	adds	r3, #16
 8014184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014186:	4413      	add	r3, r2
 8014188:	3303      	adds	r3, #3
 801418a:	f023 0303 	bic.w	r3, r3, #3
 801418e:	4618      	mov	r0, r3
 8014190:	88b9      	ldrh	r1, [r7, #4]
 8014192:	88ba      	ldrh	r2, [r7, #4]
 8014194:	2300      	movs	r3, #0
 8014196:	9301      	str	r3, [sp, #4]
 8014198:	887b      	ldrh	r3, [r7, #2]
 801419a:	9300      	str	r3, [sp, #0]
 801419c:	460b      	mov	r3, r1
 801419e:	4601      	mov	r1, r0
 80141a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80141a2:	f7ff ff09 	bl	8013fb8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80141a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141a8:	685b      	ldr	r3, [r3, #4]
 80141aa:	f003 0303 	and.w	r3, r3, #3
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d010      	beq.n	80141d4 <pbuf_alloc+0x1c8>
 80141b2:	4b0b      	ldr	r3, [pc, #44]	; (80141e0 <pbuf_alloc+0x1d4>)
 80141b4:	f44f 7291 	mov.w	r2, #290	; 0x122
 80141b8:	490d      	ldr	r1, [pc, #52]	; (80141f0 <pbuf_alloc+0x1e4>)
 80141ba:	480b      	ldr	r0, [pc, #44]	; (80141e8 <pbuf_alloc+0x1dc>)
 80141bc:	f00a fff6 	bl	801f1ac <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80141c0:	e008      	b.n	80141d4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80141c2:	4b07      	ldr	r3, [pc, #28]	; (80141e0 <pbuf_alloc+0x1d4>)
 80141c4:	f240 1227 	movw	r2, #295	; 0x127
 80141c8:	490a      	ldr	r1, [pc, #40]	; (80141f4 <pbuf_alloc+0x1e8>)
 80141ca:	4807      	ldr	r0, [pc, #28]	; (80141e8 <pbuf_alloc+0x1dc>)
 80141cc:	f00a ffee 	bl	801f1ac <iprintf>
      return NULL;
 80141d0:	2300      	movs	r3, #0
 80141d2:	e001      	b.n	80141d8 <pbuf_alloc+0x1cc>
      break;
 80141d4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80141d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80141d8:	4618      	mov	r0, r3
 80141da:	3728      	adds	r7, #40	; 0x28
 80141dc:	46bd      	mov	sp, r7
 80141de:	bd80      	pop	{r7, pc}
 80141e0:	08024814 	.word	0x08024814
 80141e4:	08024844 	.word	0x08024844
 80141e8:	08024874 	.word	0x08024874
 80141ec:	0802489c 	.word	0x0802489c
 80141f0:	080248d0 	.word	0x080248d0
 80141f4:	080248fc 	.word	0x080248fc

080141f8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	b086      	sub	sp, #24
 80141fc:	af02      	add	r7, sp, #8
 80141fe:	6078      	str	r0, [r7, #4]
 8014200:	460b      	mov	r3, r1
 8014202:	807b      	strh	r3, [r7, #2]
 8014204:	4613      	mov	r3, r2
 8014206:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8014208:	883b      	ldrh	r3, [r7, #0]
 801420a:	2b41      	cmp	r3, #65	; 0x41
 801420c:	d009      	beq.n	8014222 <pbuf_alloc_reference+0x2a>
 801420e:	883b      	ldrh	r3, [r7, #0]
 8014210:	2b01      	cmp	r3, #1
 8014212:	d006      	beq.n	8014222 <pbuf_alloc_reference+0x2a>
 8014214:	4b0f      	ldr	r3, [pc, #60]	; (8014254 <pbuf_alloc_reference+0x5c>)
 8014216:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801421a:	490f      	ldr	r1, [pc, #60]	; (8014258 <pbuf_alloc_reference+0x60>)
 801421c:	480f      	ldr	r0, [pc, #60]	; (801425c <pbuf_alloc_reference+0x64>)
 801421e:	f00a ffc5 	bl	801f1ac <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8014222:	200b      	movs	r0, #11
 8014224:	f7ff fb44 	bl	80138b0 <memp_malloc>
 8014228:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801422a:	68fb      	ldr	r3, [r7, #12]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d101      	bne.n	8014234 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8014230:	2300      	movs	r3, #0
 8014232:	e00b      	b.n	801424c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8014234:	8879      	ldrh	r1, [r7, #2]
 8014236:	887a      	ldrh	r2, [r7, #2]
 8014238:	2300      	movs	r3, #0
 801423a:	9301      	str	r3, [sp, #4]
 801423c:	883b      	ldrh	r3, [r7, #0]
 801423e:	9300      	str	r3, [sp, #0]
 8014240:	460b      	mov	r3, r1
 8014242:	6879      	ldr	r1, [r7, #4]
 8014244:	68f8      	ldr	r0, [r7, #12]
 8014246:	f7ff feb7 	bl	8013fb8 <pbuf_init_alloced_pbuf>
  return p;
 801424a:	68fb      	ldr	r3, [r7, #12]
}
 801424c:	4618      	mov	r0, r3
 801424e:	3710      	adds	r7, #16
 8014250:	46bd      	mov	sp, r7
 8014252:	bd80      	pop	{r7, pc}
 8014254:	08024814 	.word	0x08024814
 8014258:	08024918 	.word	0x08024918
 801425c:	08024874 	.word	0x08024874

08014260 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8014260:	b580      	push	{r7, lr}
 8014262:	b088      	sub	sp, #32
 8014264:	af02      	add	r7, sp, #8
 8014266:	607b      	str	r3, [r7, #4]
 8014268:	4603      	mov	r3, r0
 801426a:	73fb      	strb	r3, [r7, #15]
 801426c:	460b      	mov	r3, r1
 801426e:	81bb      	strh	r3, [r7, #12]
 8014270:	4613      	mov	r3, r2
 8014272:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8014274:	7bfb      	ldrb	r3, [r7, #15]
 8014276:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8014278:	8a7b      	ldrh	r3, [r7, #18]
 801427a:	3303      	adds	r3, #3
 801427c:	f023 0203 	bic.w	r2, r3, #3
 8014280:	89bb      	ldrh	r3, [r7, #12]
 8014282:	441a      	add	r2, r3
 8014284:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014286:	429a      	cmp	r2, r3
 8014288:	d901      	bls.n	801428e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801428a:	2300      	movs	r3, #0
 801428c:	e018      	b.n	80142c0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801428e:	6a3b      	ldr	r3, [r7, #32]
 8014290:	2b00      	cmp	r3, #0
 8014292:	d007      	beq.n	80142a4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8014294:	8a7b      	ldrh	r3, [r7, #18]
 8014296:	3303      	adds	r3, #3
 8014298:	f023 0303 	bic.w	r3, r3, #3
 801429c:	6a3a      	ldr	r2, [r7, #32]
 801429e:	4413      	add	r3, r2
 80142a0:	617b      	str	r3, [r7, #20]
 80142a2:	e001      	b.n	80142a8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80142a4:	2300      	movs	r3, #0
 80142a6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80142a8:	6878      	ldr	r0, [r7, #4]
 80142aa:	89b9      	ldrh	r1, [r7, #12]
 80142ac:	89ba      	ldrh	r2, [r7, #12]
 80142ae:	2302      	movs	r3, #2
 80142b0:	9301      	str	r3, [sp, #4]
 80142b2:	897b      	ldrh	r3, [r7, #10]
 80142b4:	9300      	str	r3, [sp, #0]
 80142b6:	460b      	mov	r3, r1
 80142b8:	6979      	ldr	r1, [r7, #20]
 80142ba:	f7ff fe7d 	bl	8013fb8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80142be:	687b      	ldr	r3, [r7, #4]
}
 80142c0:	4618      	mov	r0, r3
 80142c2:	3718      	adds	r7, #24
 80142c4:	46bd      	mov	sp, r7
 80142c6:	bd80      	pop	{r7, pc}

080142c8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80142c8:	b580      	push	{r7, lr}
 80142ca:	b084      	sub	sp, #16
 80142cc:	af00      	add	r7, sp, #0
 80142ce:	6078      	str	r0, [r7, #4]
 80142d0:	460b      	mov	r3, r1
 80142d2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d106      	bne.n	80142e8 <pbuf_realloc+0x20>
 80142da:	4b3a      	ldr	r3, [pc, #232]	; (80143c4 <pbuf_realloc+0xfc>)
 80142dc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80142e0:	4939      	ldr	r1, [pc, #228]	; (80143c8 <pbuf_realloc+0x100>)
 80142e2:	483a      	ldr	r0, [pc, #232]	; (80143cc <pbuf_realloc+0x104>)
 80142e4:	f00a ff62 	bl	801f1ac <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	891b      	ldrh	r3, [r3, #8]
 80142ec:	887a      	ldrh	r2, [r7, #2]
 80142ee:	429a      	cmp	r2, r3
 80142f0:	d263      	bcs.n	80143ba <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	891a      	ldrh	r2, [r3, #8]
 80142f6:	887b      	ldrh	r3, [r7, #2]
 80142f8:	1ad3      	subs	r3, r2, r3
 80142fa:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80142fc:	887b      	ldrh	r3, [r7, #2]
 80142fe:	817b      	strh	r3, [r7, #10]
  q = p;
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8014304:	e018      	b.n	8014338 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8014306:	68fb      	ldr	r3, [r7, #12]
 8014308:	895b      	ldrh	r3, [r3, #10]
 801430a:	897a      	ldrh	r2, [r7, #10]
 801430c:	1ad3      	subs	r3, r2, r3
 801430e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8014310:	68fb      	ldr	r3, [r7, #12]
 8014312:	891a      	ldrh	r2, [r3, #8]
 8014314:	893b      	ldrh	r3, [r7, #8]
 8014316:	1ad3      	subs	r3, r2, r3
 8014318:	b29a      	uxth	r2, r3
 801431a:	68fb      	ldr	r3, [r7, #12]
 801431c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d106      	bne.n	8014338 <pbuf_realloc+0x70>
 801432a:	4b26      	ldr	r3, [pc, #152]	; (80143c4 <pbuf_realloc+0xfc>)
 801432c:	f240 12af 	movw	r2, #431	; 0x1af
 8014330:	4927      	ldr	r1, [pc, #156]	; (80143d0 <pbuf_realloc+0x108>)
 8014332:	4826      	ldr	r0, [pc, #152]	; (80143cc <pbuf_realloc+0x104>)
 8014334:	f00a ff3a 	bl	801f1ac <iprintf>
  while (rem_len > q->len) {
 8014338:	68fb      	ldr	r3, [r7, #12]
 801433a:	895b      	ldrh	r3, [r3, #10]
 801433c:	897a      	ldrh	r2, [r7, #10]
 801433e:	429a      	cmp	r2, r3
 8014340:	d8e1      	bhi.n	8014306 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	7b1b      	ldrb	r3, [r3, #12]
 8014346:	f003 030f 	and.w	r3, r3, #15
 801434a:	2b00      	cmp	r3, #0
 801434c:	d121      	bne.n	8014392 <pbuf_realloc+0xca>
 801434e:	68fb      	ldr	r3, [r7, #12]
 8014350:	895b      	ldrh	r3, [r3, #10]
 8014352:	897a      	ldrh	r2, [r7, #10]
 8014354:	429a      	cmp	r2, r3
 8014356:	d01c      	beq.n	8014392 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8014358:	68fb      	ldr	r3, [r7, #12]
 801435a:	7b5b      	ldrb	r3, [r3, #13]
 801435c:	f003 0302 	and.w	r3, r3, #2
 8014360:	2b00      	cmp	r3, #0
 8014362:	d116      	bne.n	8014392 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	685a      	ldr	r2, [r3, #4]
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	1ad3      	subs	r3, r2, r3
 801436c:	b29a      	uxth	r2, r3
 801436e:	897b      	ldrh	r3, [r7, #10]
 8014370:	4413      	add	r3, r2
 8014372:	b29b      	uxth	r3, r3
 8014374:	4619      	mov	r1, r3
 8014376:	68f8      	ldr	r0, [r7, #12]
 8014378:	f7ff f80e 	bl	8013398 <mem_trim>
 801437c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801437e:	68fb      	ldr	r3, [r7, #12]
 8014380:	2b00      	cmp	r3, #0
 8014382:	d106      	bne.n	8014392 <pbuf_realloc+0xca>
 8014384:	4b0f      	ldr	r3, [pc, #60]	; (80143c4 <pbuf_realloc+0xfc>)
 8014386:	f240 12bd 	movw	r2, #445	; 0x1bd
 801438a:	4912      	ldr	r1, [pc, #72]	; (80143d4 <pbuf_realloc+0x10c>)
 801438c:	480f      	ldr	r0, [pc, #60]	; (80143cc <pbuf_realloc+0x104>)
 801438e:	f00a ff0d 	bl	801f1ac <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8014392:	68fb      	ldr	r3, [r7, #12]
 8014394:	897a      	ldrh	r2, [r7, #10]
 8014396:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8014398:	68fb      	ldr	r3, [r7, #12]
 801439a:	895a      	ldrh	r2, [r3, #10]
 801439c:	68fb      	ldr	r3, [r7, #12]
 801439e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80143a0:	68fb      	ldr	r3, [r7, #12]
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	2b00      	cmp	r3, #0
 80143a6:	d004      	beq.n	80143b2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80143a8:	68fb      	ldr	r3, [r7, #12]
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	4618      	mov	r0, r3
 80143ae:	f000 f911 	bl	80145d4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	2200      	movs	r2, #0
 80143b6:	601a      	str	r2, [r3, #0]
 80143b8:	e000      	b.n	80143bc <pbuf_realloc+0xf4>
    return;
 80143ba:	bf00      	nop

}
 80143bc:	3710      	adds	r7, #16
 80143be:	46bd      	mov	sp, r7
 80143c0:	bd80      	pop	{r7, pc}
 80143c2:	bf00      	nop
 80143c4:	08024814 	.word	0x08024814
 80143c8:	0802492c 	.word	0x0802492c
 80143cc:	08024874 	.word	0x08024874
 80143d0:	08024944 	.word	0x08024944
 80143d4:	0802495c 	.word	0x0802495c

080143d8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80143d8:	b580      	push	{r7, lr}
 80143da:	b086      	sub	sp, #24
 80143dc:	af00      	add	r7, sp, #0
 80143de:	60f8      	str	r0, [r7, #12]
 80143e0:	60b9      	str	r1, [r7, #8]
 80143e2:	4613      	mov	r3, r2
 80143e4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80143e6:	68fb      	ldr	r3, [r7, #12]
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d106      	bne.n	80143fa <pbuf_add_header_impl+0x22>
 80143ec:	4b2b      	ldr	r3, [pc, #172]	; (801449c <pbuf_add_header_impl+0xc4>)
 80143ee:	f240 12df 	movw	r2, #479	; 0x1df
 80143f2:	492b      	ldr	r1, [pc, #172]	; (80144a0 <pbuf_add_header_impl+0xc8>)
 80143f4:	482b      	ldr	r0, [pc, #172]	; (80144a4 <pbuf_add_header_impl+0xcc>)
 80143f6:	f00a fed9 	bl	801f1ac <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80143fa:	68fb      	ldr	r3, [r7, #12]
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d003      	beq.n	8014408 <pbuf_add_header_impl+0x30>
 8014400:	68bb      	ldr	r3, [r7, #8]
 8014402:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014406:	d301      	bcc.n	801440c <pbuf_add_header_impl+0x34>
    return 1;
 8014408:	2301      	movs	r3, #1
 801440a:	e043      	b.n	8014494 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801440c:	68bb      	ldr	r3, [r7, #8]
 801440e:	2b00      	cmp	r3, #0
 8014410:	d101      	bne.n	8014416 <pbuf_add_header_impl+0x3e>
    return 0;
 8014412:	2300      	movs	r3, #0
 8014414:	e03e      	b.n	8014494 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8014416:	68bb      	ldr	r3, [r7, #8]
 8014418:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801441a:	68fb      	ldr	r3, [r7, #12]
 801441c:	891a      	ldrh	r2, [r3, #8]
 801441e:	8a7b      	ldrh	r3, [r7, #18]
 8014420:	4413      	add	r3, r2
 8014422:	b29b      	uxth	r3, r3
 8014424:	8a7a      	ldrh	r2, [r7, #18]
 8014426:	429a      	cmp	r2, r3
 8014428:	d901      	bls.n	801442e <pbuf_add_header_impl+0x56>
    return 1;
 801442a:	2301      	movs	r3, #1
 801442c:	e032      	b.n	8014494 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801442e:	68fb      	ldr	r3, [r7, #12]
 8014430:	7b1b      	ldrb	r3, [r3, #12]
 8014432:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8014434:	8a3b      	ldrh	r3, [r7, #16]
 8014436:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801443a:	2b00      	cmp	r3, #0
 801443c:	d00c      	beq.n	8014458 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801443e:	68fb      	ldr	r3, [r7, #12]
 8014440:	685a      	ldr	r2, [r3, #4]
 8014442:	68bb      	ldr	r3, [r7, #8]
 8014444:	425b      	negs	r3, r3
 8014446:	4413      	add	r3, r2
 8014448:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	3310      	adds	r3, #16
 801444e:	697a      	ldr	r2, [r7, #20]
 8014450:	429a      	cmp	r2, r3
 8014452:	d20d      	bcs.n	8014470 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8014454:	2301      	movs	r3, #1
 8014456:	e01d      	b.n	8014494 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8014458:	79fb      	ldrb	r3, [r7, #7]
 801445a:	2b00      	cmp	r3, #0
 801445c:	d006      	beq.n	801446c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	685a      	ldr	r2, [r3, #4]
 8014462:	68bb      	ldr	r3, [r7, #8]
 8014464:	425b      	negs	r3, r3
 8014466:	4413      	add	r3, r2
 8014468:	617b      	str	r3, [r7, #20]
 801446a:	e001      	b.n	8014470 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801446c:	2301      	movs	r3, #1
 801446e:	e011      	b.n	8014494 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	697a      	ldr	r2, [r7, #20]
 8014474:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	895a      	ldrh	r2, [r3, #10]
 801447a:	8a7b      	ldrh	r3, [r7, #18]
 801447c:	4413      	add	r3, r2
 801447e:	b29a      	uxth	r2, r3
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	891a      	ldrh	r2, [r3, #8]
 8014488:	8a7b      	ldrh	r3, [r7, #18]
 801448a:	4413      	add	r3, r2
 801448c:	b29a      	uxth	r2, r3
 801448e:	68fb      	ldr	r3, [r7, #12]
 8014490:	811a      	strh	r2, [r3, #8]


  return 0;
 8014492:	2300      	movs	r3, #0
}
 8014494:	4618      	mov	r0, r3
 8014496:	3718      	adds	r7, #24
 8014498:	46bd      	mov	sp, r7
 801449a:	bd80      	pop	{r7, pc}
 801449c:	08024814 	.word	0x08024814
 80144a0:	08024978 	.word	0x08024978
 80144a4:	08024874 	.word	0x08024874

080144a8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80144a8:	b580      	push	{r7, lr}
 80144aa:	b082      	sub	sp, #8
 80144ac:	af00      	add	r7, sp, #0
 80144ae:	6078      	str	r0, [r7, #4]
 80144b0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80144b2:	2200      	movs	r2, #0
 80144b4:	6839      	ldr	r1, [r7, #0]
 80144b6:	6878      	ldr	r0, [r7, #4]
 80144b8:	f7ff ff8e 	bl	80143d8 <pbuf_add_header_impl>
 80144bc:	4603      	mov	r3, r0
}
 80144be:	4618      	mov	r0, r3
 80144c0:	3708      	adds	r7, #8
 80144c2:	46bd      	mov	sp, r7
 80144c4:	bd80      	pop	{r7, pc}
	...

080144c8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80144c8:	b580      	push	{r7, lr}
 80144ca:	b084      	sub	sp, #16
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	6078      	str	r0, [r7, #4]
 80144d0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d106      	bne.n	80144e6 <pbuf_remove_header+0x1e>
 80144d8:	4b20      	ldr	r3, [pc, #128]	; (801455c <pbuf_remove_header+0x94>)
 80144da:	f240 224b 	movw	r2, #587	; 0x24b
 80144de:	4920      	ldr	r1, [pc, #128]	; (8014560 <pbuf_remove_header+0x98>)
 80144e0:	4820      	ldr	r0, [pc, #128]	; (8014564 <pbuf_remove_header+0x9c>)
 80144e2:	f00a fe63 	bl	801f1ac <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d003      	beq.n	80144f4 <pbuf_remove_header+0x2c>
 80144ec:	683b      	ldr	r3, [r7, #0]
 80144ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80144f2:	d301      	bcc.n	80144f8 <pbuf_remove_header+0x30>
    return 1;
 80144f4:	2301      	movs	r3, #1
 80144f6:	e02c      	b.n	8014552 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80144f8:	683b      	ldr	r3, [r7, #0]
 80144fa:	2b00      	cmp	r3, #0
 80144fc:	d101      	bne.n	8014502 <pbuf_remove_header+0x3a>
    return 0;
 80144fe:	2300      	movs	r3, #0
 8014500:	e027      	b.n	8014552 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8014502:	683b      	ldr	r3, [r7, #0]
 8014504:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8014506:	687b      	ldr	r3, [r7, #4]
 8014508:	895b      	ldrh	r3, [r3, #10]
 801450a:	89fa      	ldrh	r2, [r7, #14]
 801450c:	429a      	cmp	r2, r3
 801450e:	d908      	bls.n	8014522 <pbuf_remove_header+0x5a>
 8014510:	4b12      	ldr	r3, [pc, #72]	; (801455c <pbuf_remove_header+0x94>)
 8014512:	f240 2255 	movw	r2, #597	; 0x255
 8014516:	4914      	ldr	r1, [pc, #80]	; (8014568 <pbuf_remove_header+0xa0>)
 8014518:	4812      	ldr	r0, [pc, #72]	; (8014564 <pbuf_remove_header+0x9c>)
 801451a:	f00a fe47 	bl	801f1ac <iprintf>
 801451e:	2301      	movs	r3, #1
 8014520:	e017      	b.n	8014552 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	685b      	ldr	r3, [r3, #4]
 8014526:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	685a      	ldr	r2, [r3, #4]
 801452c:	683b      	ldr	r3, [r7, #0]
 801452e:	441a      	add	r2, r3
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8014534:	687b      	ldr	r3, [r7, #4]
 8014536:	895a      	ldrh	r2, [r3, #10]
 8014538:	89fb      	ldrh	r3, [r7, #14]
 801453a:	1ad3      	subs	r3, r2, r3
 801453c:	b29a      	uxth	r2, r3
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	891a      	ldrh	r2, [r3, #8]
 8014546:	89fb      	ldrh	r3, [r7, #14]
 8014548:	1ad3      	subs	r3, r2, r3
 801454a:	b29a      	uxth	r2, r3
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8014550:	2300      	movs	r3, #0
}
 8014552:	4618      	mov	r0, r3
 8014554:	3710      	adds	r7, #16
 8014556:	46bd      	mov	sp, r7
 8014558:	bd80      	pop	{r7, pc}
 801455a:	bf00      	nop
 801455c:	08024814 	.word	0x08024814
 8014560:	08024978 	.word	0x08024978
 8014564:	08024874 	.word	0x08024874
 8014568:	08024984 	.word	0x08024984

0801456c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801456c:	b580      	push	{r7, lr}
 801456e:	b082      	sub	sp, #8
 8014570:	af00      	add	r7, sp, #0
 8014572:	6078      	str	r0, [r7, #4]
 8014574:	460b      	mov	r3, r1
 8014576:	807b      	strh	r3, [r7, #2]
 8014578:	4613      	mov	r3, r2
 801457a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801457c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014580:	2b00      	cmp	r3, #0
 8014582:	da08      	bge.n	8014596 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8014584:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014588:	425b      	negs	r3, r3
 801458a:	4619      	mov	r1, r3
 801458c:	6878      	ldr	r0, [r7, #4]
 801458e:	f7ff ff9b 	bl	80144c8 <pbuf_remove_header>
 8014592:	4603      	mov	r3, r0
 8014594:	e007      	b.n	80145a6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8014596:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801459a:	787a      	ldrb	r2, [r7, #1]
 801459c:	4619      	mov	r1, r3
 801459e:	6878      	ldr	r0, [r7, #4]
 80145a0:	f7ff ff1a 	bl	80143d8 <pbuf_add_header_impl>
 80145a4:	4603      	mov	r3, r0
  }
}
 80145a6:	4618      	mov	r0, r3
 80145a8:	3708      	adds	r7, #8
 80145aa:	46bd      	mov	sp, r7
 80145ac:	bd80      	pop	{r7, pc}

080145ae <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80145ae:	b580      	push	{r7, lr}
 80145b0:	b082      	sub	sp, #8
 80145b2:	af00      	add	r7, sp, #0
 80145b4:	6078      	str	r0, [r7, #4]
 80145b6:	460b      	mov	r3, r1
 80145b8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80145ba:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80145be:	2201      	movs	r2, #1
 80145c0:	4619      	mov	r1, r3
 80145c2:	6878      	ldr	r0, [r7, #4]
 80145c4:	f7ff ffd2 	bl	801456c <pbuf_header_impl>
 80145c8:	4603      	mov	r3, r0
}
 80145ca:	4618      	mov	r0, r3
 80145cc:	3708      	adds	r7, #8
 80145ce:	46bd      	mov	sp, r7
 80145d0:	bd80      	pop	{r7, pc}
	...

080145d4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80145d4:	b580      	push	{r7, lr}
 80145d6:	b088      	sub	sp, #32
 80145d8:	af00      	add	r7, sp, #0
 80145da:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d10b      	bne.n	80145fa <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	2b00      	cmp	r3, #0
 80145e6:	d106      	bne.n	80145f6 <pbuf_free+0x22>
 80145e8:	4b3b      	ldr	r3, [pc, #236]	; (80146d8 <pbuf_free+0x104>)
 80145ea:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80145ee:	493b      	ldr	r1, [pc, #236]	; (80146dc <pbuf_free+0x108>)
 80145f0:	483b      	ldr	r0, [pc, #236]	; (80146e0 <pbuf_free+0x10c>)
 80145f2:	f00a fddb 	bl	801f1ac <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80145f6:	2300      	movs	r3, #0
 80145f8:	e069      	b.n	80146ce <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80145fa:	2300      	movs	r3, #0
 80145fc:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80145fe:	e062      	b.n	80146c6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8014600:	f009 fd32 	bl	801e068 <sys_arch_protect>
 8014604:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	7b9b      	ldrb	r3, [r3, #14]
 801460a:	2b00      	cmp	r3, #0
 801460c:	d106      	bne.n	801461c <pbuf_free+0x48>
 801460e:	4b32      	ldr	r3, [pc, #200]	; (80146d8 <pbuf_free+0x104>)
 8014610:	f240 22f1 	movw	r2, #753	; 0x2f1
 8014614:	4933      	ldr	r1, [pc, #204]	; (80146e4 <pbuf_free+0x110>)
 8014616:	4832      	ldr	r0, [pc, #200]	; (80146e0 <pbuf_free+0x10c>)
 8014618:	f00a fdc8 	bl	801f1ac <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	7b9b      	ldrb	r3, [r3, #14]
 8014620:	3b01      	subs	r3, #1
 8014622:	b2da      	uxtb	r2, r3
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	739a      	strb	r2, [r3, #14]
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	7b9b      	ldrb	r3, [r3, #14]
 801462c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801462e:	69b8      	ldr	r0, [r7, #24]
 8014630:	f009 fd28 	bl	801e084 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8014634:	7dfb      	ldrb	r3, [r7, #23]
 8014636:	2b00      	cmp	r3, #0
 8014638:	d143      	bne.n	80146c2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	7b1b      	ldrb	r3, [r3, #12]
 8014644:	f003 030f 	and.w	r3, r3, #15
 8014648:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801464a:	687b      	ldr	r3, [r7, #4]
 801464c:	7b5b      	ldrb	r3, [r3, #13]
 801464e:	f003 0302 	and.w	r3, r3, #2
 8014652:	2b00      	cmp	r3, #0
 8014654:	d011      	beq.n	801467a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801465a:	68bb      	ldr	r3, [r7, #8]
 801465c:	691b      	ldr	r3, [r3, #16]
 801465e:	2b00      	cmp	r3, #0
 8014660:	d106      	bne.n	8014670 <pbuf_free+0x9c>
 8014662:	4b1d      	ldr	r3, [pc, #116]	; (80146d8 <pbuf_free+0x104>)
 8014664:	f240 22ff 	movw	r2, #767	; 0x2ff
 8014668:	491f      	ldr	r1, [pc, #124]	; (80146e8 <pbuf_free+0x114>)
 801466a:	481d      	ldr	r0, [pc, #116]	; (80146e0 <pbuf_free+0x10c>)
 801466c:	f00a fd9e 	bl	801f1ac <iprintf>
        pc->custom_free_function(p);
 8014670:	68bb      	ldr	r3, [r7, #8]
 8014672:	691b      	ldr	r3, [r3, #16]
 8014674:	6878      	ldr	r0, [r7, #4]
 8014676:	4798      	blx	r3
 8014678:	e01d      	b.n	80146b6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801467a:	7bfb      	ldrb	r3, [r7, #15]
 801467c:	2b02      	cmp	r3, #2
 801467e:	d104      	bne.n	801468a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8014680:	6879      	ldr	r1, [r7, #4]
 8014682:	200c      	movs	r0, #12
 8014684:	f7ff f966 	bl	8013954 <memp_free>
 8014688:	e015      	b.n	80146b6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801468a:	7bfb      	ldrb	r3, [r7, #15]
 801468c:	2b01      	cmp	r3, #1
 801468e:	d104      	bne.n	801469a <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8014690:	6879      	ldr	r1, [r7, #4]
 8014692:	200b      	movs	r0, #11
 8014694:	f7ff f95e 	bl	8013954 <memp_free>
 8014698:	e00d      	b.n	80146b6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801469a:	7bfb      	ldrb	r3, [r7, #15]
 801469c:	2b00      	cmp	r3, #0
 801469e:	d103      	bne.n	80146a8 <pbuf_free+0xd4>
          mem_free(p);
 80146a0:	6878      	ldr	r0, [r7, #4]
 80146a2:	f7fe fde9 	bl	8013278 <mem_free>
 80146a6:	e006      	b.n	80146b6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80146a8:	4b0b      	ldr	r3, [pc, #44]	; (80146d8 <pbuf_free+0x104>)
 80146aa:	f240 320f 	movw	r2, #783	; 0x30f
 80146ae:	490f      	ldr	r1, [pc, #60]	; (80146ec <pbuf_free+0x118>)
 80146b0:	480b      	ldr	r0, [pc, #44]	; (80146e0 <pbuf_free+0x10c>)
 80146b2:	f00a fd7b 	bl	801f1ac <iprintf>
        }
      }
      count++;
 80146b6:	7ffb      	ldrb	r3, [r7, #31]
 80146b8:	3301      	adds	r3, #1
 80146ba:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80146bc:	693b      	ldr	r3, [r7, #16]
 80146be:	607b      	str	r3, [r7, #4]
 80146c0:	e001      	b.n	80146c6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80146c2:	2300      	movs	r3, #0
 80146c4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d199      	bne.n	8014600 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80146cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80146ce:	4618      	mov	r0, r3
 80146d0:	3720      	adds	r7, #32
 80146d2:	46bd      	mov	sp, r7
 80146d4:	bd80      	pop	{r7, pc}
 80146d6:	bf00      	nop
 80146d8:	08024814 	.word	0x08024814
 80146dc:	08024978 	.word	0x08024978
 80146e0:	08024874 	.word	0x08024874
 80146e4:	080249a4 	.word	0x080249a4
 80146e8:	080249bc 	.word	0x080249bc
 80146ec:	080249e0 	.word	0x080249e0

080146f0 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80146f0:	b480      	push	{r7}
 80146f2:	b085      	sub	sp, #20
 80146f4:	af00      	add	r7, sp, #0
 80146f6:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80146f8:	2300      	movs	r3, #0
 80146fa:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80146fc:	e005      	b.n	801470a <pbuf_clen+0x1a>
    ++len;
 80146fe:	89fb      	ldrh	r3, [r7, #14]
 8014700:	3301      	adds	r3, #1
 8014702:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	2b00      	cmp	r3, #0
 801470e:	d1f6      	bne.n	80146fe <pbuf_clen+0xe>
  }
  return len;
 8014710:	89fb      	ldrh	r3, [r7, #14]
}
 8014712:	4618      	mov	r0, r3
 8014714:	3714      	adds	r7, #20
 8014716:	46bd      	mov	sp, r7
 8014718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801471c:	4770      	bx	lr
	...

08014720 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8014720:	b580      	push	{r7, lr}
 8014722:	b084      	sub	sp, #16
 8014724:	af00      	add	r7, sp, #0
 8014726:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	2b00      	cmp	r3, #0
 801472c:	d016      	beq.n	801475c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801472e:	f009 fc9b 	bl	801e068 <sys_arch_protect>
 8014732:	60f8      	str	r0, [r7, #12]
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	7b9b      	ldrb	r3, [r3, #14]
 8014738:	3301      	adds	r3, #1
 801473a:	b2da      	uxtb	r2, r3
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	739a      	strb	r2, [r3, #14]
 8014740:	68f8      	ldr	r0, [r7, #12]
 8014742:	f009 fc9f 	bl	801e084 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	7b9b      	ldrb	r3, [r3, #14]
 801474a:	2b00      	cmp	r3, #0
 801474c:	d106      	bne.n	801475c <pbuf_ref+0x3c>
 801474e:	4b05      	ldr	r3, [pc, #20]	; (8014764 <pbuf_ref+0x44>)
 8014750:	f240 3242 	movw	r2, #834	; 0x342
 8014754:	4904      	ldr	r1, [pc, #16]	; (8014768 <pbuf_ref+0x48>)
 8014756:	4805      	ldr	r0, [pc, #20]	; (801476c <pbuf_ref+0x4c>)
 8014758:	f00a fd28 	bl	801f1ac <iprintf>
  }
}
 801475c:	bf00      	nop
 801475e:	3710      	adds	r7, #16
 8014760:	46bd      	mov	sp, r7
 8014762:	bd80      	pop	{r7, pc}
 8014764:	08024814 	.word	0x08024814
 8014768:	080249f4 	.word	0x080249f4
 801476c:	08024874 	.word	0x08024874

08014770 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8014770:	b580      	push	{r7, lr}
 8014772:	b084      	sub	sp, #16
 8014774:	af00      	add	r7, sp, #0
 8014776:	6078      	str	r0, [r7, #4]
 8014778:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	2b00      	cmp	r3, #0
 801477e:	d002      	beq.n	8014786 <pbuf_cat+0x16>
 8014780:	683b      	ldr	r3, [r7, #0]
 8014782:	2b00      	cmp	r3, #0
 8014784:	d107      	bne.n	8014796 <pbuf_cat+0x26>
 8014786:	4b20      	ldr	r3, [pc, #128]	; (8014808 <pbuf_cat+0x98>)
 8014788:	f240 3259 	movw	r2, #857	; 0x359
 801478c:	491f      	ldr	r1, [pc, #124]	; (801480c <pbuf_cat+0x9c>)
 801478e:	4820      	ldr	r0, [pc, #128]	; (8014810 <pbuf_cat+0xa0>)
 8014790:	f00a fd0c 	bl	801f1ac <iprintf>
 8014794:	e034      	b.n	8014800 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	60fb      	str	r3, [r7, #12]
 801479a:	e00a      	b.n	80147b2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801479c:	68fb      	ldr	r3, [r7, #12]
 801479e:	891a      	ldrh	r2, [r3, #8]
 80147a0:	683b      	ldr	r3, [r7, #0]
 80147a2:	891b      	ldrh	r3, [r3, #8]
 80147a4:	4413      	add	r3, r2
 80147a6:	b29a      	uxth	r2, r3
 80147a8:	68fb      	ldr	r3, [r7, #12]
 80147aa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80147ac:	68fb      	ldr	r3, [r7, #12]
 80147ae:	681b      	ldr	r3, [r3, #0]
 80147b0:	60fb      	str	r3, [r7, #12]
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d1f0      	bne.n	801479c <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80147ba:	68fb      	ldr	r3, [r7, #12]
 80147bc:	891a      	ldrh	r2, [r3, #8]
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	895b      	ldrh	r3, [r3, #10]
 80147c2:	429a      	cmp	r2, r3
 80147c4:	d006      	beq.n	80147d4 <pbuf_cat+0x64>
 80147c6:	4b10      	ldr	r3, [pc, #64]	; (8014808 <pbuf_cat+0x98>)
 80147c8:	f240 3262 	movw	r2, #866	; 0x362
 80147cc:	4911      	ldr	r1, [pc, #68]	; (8014814 <pbuf_cat+0xa4>)
 80147ce:	4810      	ldr	r0, [pc, #64]	; (8014810 <pbuf_cat+0xa0>)
 80147d0:	f00a fcec 	bl	801f1ac <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80147d4:	68fb      	ldr	r3, [r7, #12]
 80147d6:	681b      	ldr	r3, [r3, #0]
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d006      	beq.n	80147ea <pbuf_cat+0x7a>
 80147dc:	4b0a      	ldr	r3, [pc, #40]	; (8014808 <pbuf_cat+0x98>)
 80147de:	f240 3263 	movw	r2, #867	; 0x363
 80147e2:	490d      	ldr	r1, [pc, #52]	; (8014818 <pbuf_cat+0xa8>)
 80147e4:	480a      	ldr	r0, [pc, #40]	; (8014810 <pbuf_cat+0xa0>)
 80147e6:	f00a fce1 	bl	801f1ac <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80147ea:	68fb      	ldr	r3, [r7, #12]
 80147ec:	891a      	ldrh	r2, [r3, #8]
 80147ee:	683b      	ldr	r3, [r7, #0]
 80147f0:	891b      	ldrh	r3, [r3, #8]
 80147f2:	4413      	add	r3, r2
 80147f4:	b29a      	uxth	r2, r3
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80147fa:	68fb      	ldr	r3, [r7, #12]
 80147fc:	683a      	ldr	r2, [r7, #0]
 80147fe:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8014800:	3710      	adds	r7, #16
 8014802:	46bd      	mov	sp, r7
 8014804:	bd80      	pop	{r7, pc}
 8014806:	bf00      	nop
 8014808:	08024814 	.word	0x08024814
 801480c:	08024a08 	.word	0x08024a08
 8014810:	08024874 	.word	0x08024874
 8014814:	08024a40 	.word	0x08024a40
 8014818:	08024a70 	.word	0x08024a70

0801481c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 801481c:	b580      	push	{r7, lr}
 801481e:	b082      	sub	sp, #8
 8014820:	af00      	add	r7, sp, #0
 8014822:	6078      	str	r0, [r7, #4]
 8014824:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8014826:	6839      	ldr	r1, [r7, #0]
 8014828:	6878      	ldr	r0, [r7, #4]
 801482a:	f7ff ffa1 	bl	8014770 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801482e:	6838      	ldr	r0, [r7, #0]
 8014830:	f7ff ff76 	bl	8014720 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8014834:	bf00      	nop
 8014836:	3708      	adds	r7, #8
 8014838:	46bd      	mov	sp, r7
 801483a:	bd80      	pop	{r7, pc}

0801483c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801483c:	b580      	push	{r7, lr}
 801483e:	b086      	sub	sp, #24
 8014840:	af00      	add	r7, sp, #0
 8014842:	6078      	str	r0, [r7, #4]
 8014844:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8014846:	2300      	movs	r3, #0
 8014848:	617b      	str	r3, [r7, #20]
 801484a:	2300      	movs	r3, #0
 801484c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	2b00      	cmp	r3, #0
 8014852:	d008      	beq.n	8014866 <pbuf_copy+0x2a>
 8014854:	683b      	ldr	r3, [r7, #0]
 8014856:	2b00      	cmp	r3, #0
 8014858:	d005      	beq.n	8014866 <pbuf_copy+0x2a>
 801485a:	687b      	ldr	r3, [r7, #4]
 801485c:	891a      	ldrh	r2, [r3, #8]
 801485e:	683b      	ldr	r3, [r7, #0]
 8014860:	891b      	ldrh	r3, [r3, #8]
 8014862:	429a      	cmp	r2, r3
 8014864:	d209      	bcs.n	801487a <pbuf_copy+0x3e>
 8014866:	4b57      	ldr	r3, [pc, #348]	; (80149c4 <pbuf_copy+0x188>)
 8014868:	f240 32c9 	movw	r2, #969	; 0x3c9
 801486c:	4956      	ldr	r1, [pc, #344]	; (80149c8 <pbuf_copy+0x18c>)
 801486e:	4857      	ldr	r0, [pc, #348]	; (80149cc <pbuf_copy+0x190>)
 8014870:	f00a fc9c 	bl	801f1ac <iprintf>
 8014874:	f06f 030f 	mvn.w	r3, #15
 8014878:	e09f      	b.n	80149ba <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801487a:	687b      	ldr	r3, [r7, #4]
 801487c:	895b      	ldrh	r3, [r3, #10]
 801487e:	461a      	mov	r2, r3
 8014880:	697b      	ldr	r3, [r7, #20]
 8014882:	1ad2      	subs	r2, r2, r3
 8014884:	683b      	ldr	r3, [r7, #0]
 8014886:	895b      	ldrh	r3, [r3, #10]
 8014888:	4619      	mov	r1, r3
 801488a:	693b      	ldr	r3, [r7, #16]
 801488c:	1acb      	subs	r3, r1, r3
 801488e:	429a      	cmp	r2, r3
 8014890:	d306      	bcc.n	80148a0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8014892:	683b      	ldr	r3, [r7, #0]
 8014894:	895b      	ldrh	r3, [r3, #10]
 8014896:	461a      	mov	r2, r3
 8014898:	693b      	ldr	r3, [r7, #16]
 801489a:	1ad3      	subs	r3, r2, r3
 801489c:	60fb      	str	r3, [r7, #12]
 801489e:	e005      	b.n	80148ac <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	895b      	ldrh	r3, [r3, #10]
 80148a4:	461a      	mov	r2, r3
 80148a6:	697b      	ldr	r3, [r7, #20]
 80148a8:	1ad3      	subs	r3, r2, r3
 80148aa:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	685a      	ldr	r2, [r3, #4]
 80148b0:	697b      	ldr	r3, [r7, #20]
 80148b2:	18d0      	adds	r0, r2, r3
 80148b4:	683b      	ldr	r3, [r7, #0]
 80148b6:	685a      	ldr	r2, [r3, #4]
 80148b8:	693b      	ldr	r3, [r7, #16]
 80148ba:	4413      	add	r3, r2
 80148bc:	68fa      	ldr	r2, [r7, #12]
 80148be:	4619      	mov	r1, r3
 80148c0:	f009 fd20 	bl	801e304 <memcpy>
    offset_to += len;
 80148c4:	697a      	ldr	r2, [r7, #20]
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	4413      	add	r3, r2
 80148ca:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80148cc:	693a      	ldr	r2, [r7, #16]
 80148ce:	68fb      	ldr	r3, [r7, #12]
 80148d0:	4413      	add	r3, r2
 80148d2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80148d4:	687b      	ldr	r3, [r7, #4]
 80148d6:	895b      	ldrh	r3, [r3, #10]
 80148d8:	461a      	mov	r2, r3
 80148da:	697b      	ldr	r3, [r7, #20]
 80148dc:	4293      	cmp	r3, r2
 80148de:	d906      	bls.n	80148ee <pbuf_copy+0xb2>
 80148e0:	4b38      	ldr	r3, [pc, #224]	; (80149c4 <pbuf_copy+0x188>)
 80148e2:	f240 32d9 	movw	r2, #985	; 0x3d9
 80148e6:	493a      	ldr	r1, [pc, #232]	; (80149d0 <pbuf_copy+0x194>)
 80148e8:	4838      	ldr	r0, [pc, #224]	; (80149cc <pbuf_copy+0x190>)
 80148ea:	f00a fc5f 	bl	801f1ac <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80148ee:	683b      	ldr	r3, [r7, #0]
 80148f0:	895b      	ldrh	r3, [r3, #10]
 80148f2:	461a      	mov	r2, r3
 80148f4:	693b      	ldr	r3, [r7, #16]
 80148f6:	4293      	cmp	r3, r2
 80148f8:	d906      	bls.n	8014908 <pbuf_copy+0xcc>
 80148fa:	4b32      	ldr	r3, [pc, #200]	; (80149c4 <pbuf_copy+0x188>)
 80148fc:	f240 32da 	movw	r2, #986	; 0x3da
 8014900:	4934      	ldr	r1, [pc, #208]	; (80149d4 <pbuf_copy+0x198>)
 8014902:	4832      	ldr	r0, [pc, #200]	; (80149cc <pbuf_copy+0x190>)
 8014904:	f00a fc52 	bl	801f1ac <iprintf>
    if (offset_from >= p_from->len) {
 8014908:	683b      	ldr	r3, [r7, #0]
 801490a:	895b      	ldrh	r3, [r3, #10]
 801490c:	461a      	mov	r2, r3
 801490e:	693b      	ldr	r3, [r7, #16]
 8014910:	4293      	cmp	r3, r2
 8014912:	d304      	bcc.n	801491e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8014914:	2300      	movs	r3, #0
 8014916:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8014918:	683b      	ldr	r3, [r7, #0]
 801491a:	681b      	ldr	r3, [r3, #0]
 801491c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	895b      	ldrh	r3, [r3, #10]
 8014922:	461a      	mov	r2, r3
 8014924:	697b      	ldr	r3, [r7, #20]
 8014926:	4293      	cmp	r3, r2
 8014928:	d114      	bne.n	8014954 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801492a:	2300      	movs	r3, #0
 801492c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	2b00      	cmp	r3, #0
 8014938:	d10c      	bne.n	8014954 <pbuf_copy+0x118>
 801493a:	683b      	ldr	r3, [r7, #0]
 801493c:	2b00      	cmp	r3, #0
 801493e:	d009      	beq.n	8014954 <pbuf_copy+0x118>
 8014940:	4b20      	ldr	r3, [pc, #128]	; (80149c4 <pbuf_copy+0x188>)
 8014942:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8014946:	4924      	ldr	r1, [pc, #144]	; (80149d8 <pbuf_copy+0x19c>)
 8014948:	4820      	ldr	r0, [pc, #128]	; (80149cc <pbuf_copy+0x190>)
 801494a:	f00a fc2f 	bl	801f1ac <iprintf>
 801494e:	f06f 030f 	mvn.w	r3, #15
 8014952:	e032      	b.n	80149ba <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8014954:	683b      	ldr	r3, [r7, #0]
 8014956:	2b00      	cmp	r3, #0
 8014958:	d013      	beq.n	8014982 <pbuf_copy+0x146>
 801495a:	683b      	ldr	r3, [r7, #0]
 801495c:	895a      	ldrh	r2, [r3, #10]
 801495e:	683b      	ldr	r3, [r7, #0]
 8014960:	891b      	ldrh	r3, [r3, #8]
 8014962:	429a      	cmp	r2, r3
 8014964:	d10d      	bne.n	8014982 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014966:	683b      	ldr	r3, [r7, #0]
 8014968:	681b      	ldr	r3, [r3, #0]
 801496a:	2b00      	cmp	r3, #0
 801496c:	d009      	beq.n	8014982 <pbuf_copy+0x146>
 801496e:	4b15      	ldr	r3, [pc, #84]	; (80149c4 <pbuf_copy+0x188>)
 8014970:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8014974:	4919      	ldr	r1, [pc, #100]	; (80149dc <pbuf_copy+0x1a0>)
 8014976:	4815      	ldr	r0, [pc, #84]	; (80149cc <pbuf_copy+0x190>)
 8014978:	f00a fc18 	bl	801f1ac <iprintf>
 801497c:	f06f 0305 	mvn.w	r3, #5
 8014980:	e01b      	b.n	80149ba <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	2b00      	cmp	r3, #0
 8014986:	d013      	beq.n	80149b0 <pbuf_copy+0x174>
 8014988:	687b      	ldr	r3, [r7, #4]
 801498a:	895a      	ldrh	r2, [r3, #10]
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	891b      	ldrh	r3, [r3, #8]
 8014990:	429a      	cmp	r2, r3
 8014992:	d10d      	bne.n	80149b0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	681b      	ldr	r3, [r3, #0]
 8014998:	2b00      	cmp	r3, #0
 801499a:	d009      	beq.n	80149b0 <pbuf_copy+0x174>
 801499c:	4b09      	ldr	r3, [pc, #36]	; (80149c4 <pbuf_copy+0x188>)
 801499e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80149a2:	490e      	ldr	r1, [pc, #56]	; (80149dc <pbuf_copy+0x1a0>)
 80149a4:	4809      	ldr	r0, [pc, #36]	; (80149cc <pbuf_copy+0x190>)
 80149a6:	f00a fc01 	bl	801f1ac <iprintf>
 80149aa:	f06f 0305 	mvn.w	r3, #5
 80149ae:	e004      	b.n	80149ba <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80149b0:	683b      	ldr	r3, [r7, #0]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	f47f af61 	bne.w	801487a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80149b8:	2300      	movs	r3, #0
}
 80149ba:	4618      	mov	r0, r3
 80149bc:	3718      	adds	r7, #24
 80149be:	46bd      	mov	sp, r7
 80149c0:	bd80      	pop	{r7, pc}
 80149c2:	bf00      	nop
 80149c4:	08024814 	.word	0x08024814
 80149c8:	08024abc 	.word	0x08024abc
 80149cc:	08024874 	.word	0x08024874
 80149d0:	08024aec 	.word	0x08024aec
 80149d4:	08024b04 	.word	0x08024b04
 80149d8:	08024b20 	.word	0x08024b20
 80149dc:	08024b30 	.word	0x08024b30

080149e0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80149e0:	b580      	push	{r7, lr}
 80149e2:	b088      	sub	sp, #32
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	60f8      	str	r0, [r7, #12]
 80149e8:	60b9      	str	r1, [r7, #8]
 80149ea:	4611      	mov	r1, r2
 80149ec:	461a      	mov	r2, r3
 80149ee:	460b      	mov	r3, r1
 80149f0:	80fb      	strh	r3, [r7, #6]
 80149f2:	4613      	mov	r3, r2
 80149f4:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80149f6:	2300      	movs	r3, #0
 80149f8:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80149fa:	2300      	movs	r3, #0
 80149fc:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80149fe:	68fb      	ldr	r3, [r7, #12]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	d108      	bne.n	8014a16 <pbuf_copy_partial+0x36>
 8014a04:	4b2b      	ldr	r3, [pc, #172]	; (8014ab4 <pbuf_copy_partial+0xd4>)
 8014a06:	f240 420a 	movw	r2, #1034	; 0x40a
 8014a0a:	492b      	ldr	r1, [pc, #172]	; (8014ab8 <pbuf_copy_partial+0xd8>)
 8014a0c:	482b      	ldr	r0, [pc, #172]	; (8014abc <pbuf_copy_partial+0xdc>)
 8014a0e:	f00a fbcd 	bl	801f1ac <iprintf>
 8014a12:	2300      	movs	r3, #0
 8014a14:	e04a      	b.n	8014aac <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8014a16:	68bb      	ldr	r3, [r7, #8]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d108      	bne.n	8014a2e <pbuf_copy_partial+0x4e>
 8014a1c:	4b25      	ldr	r3, [pc, #148]	; (8014ab4 <pbuf_copy_partial+0xd4>)
 8014a1e:	f240 420b 	movw	r2, #1035	; 0x40b
 8014a22:	4927      	ldr	r1, [pc, #156]	; (8014ac0 <pbuf_copy_partial+0xe0>)
 8014a24:	4825      	ldr	r0, [pc, #148]	; (8014abc <pbuf_copy_partial+0xdc>)
 8014a26:	f00a fbc1 	bl	801f1ac <iprintf>
 8014a2a:	2300      	movs	r3, #0
 8014a2c:	e03e      	b.n	8014aac <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	61fb      	str	r3, [r7, #28]
 8014a32:	e034      	b.n	8014a9e <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8014a34:	88bb      	ldrh	r3, [r7, #4]
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d00a      	beq.n	8014a50 <pbuf_copy_partial+0x70>
 8014a3a:	69fb      	ldr	r3, [r7, #28]
 8014a3c:	895b      	ldrh	r3, [r3, #10]
 8014a3e:	88ba      	ldrh	r2, [r7, #4]
 8014a40:	429a      	cmp	r2, r3
 8014a42:	d305      	bcc.n	8014a50 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8014a44:	69fb      	ldr	r3, [r7, #28]
 8014a46:	895b      	ldrh	r3, [r3, #10]
 8014a48:	88ba      	ldrh	r2, [r7, #4]
 8014a4a:	1ad3      	subs	r3, r2, r3
 8014a4c:	80bb      	strh	r3, [r7, #4]
 8014a4e:	e023      	b.n	8014a98 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8014a50:	69fb      	ldr	r3, [r7, #28]
 8014a52:	895a      	ldrh	r2, [r3, #10]
 8014a54:	88bb      	ldrh	r3, [r7, #4]
 8014a56:	1ad3      	subs	r3, r2, r3
 8014a58:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8014a5a:	8b3a      	ldrh	r2, [r7, #24]
 8014a5c:	88fb      	ldrh	r3, [r7, #6]
 8014a5e:	429a      	cmp	r2, r3
 8014a60:	d901      	bls.n	8014a66 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8014a62:	88fb      	ldrh	r3, [r7, #6]
 8014a64:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8014a66:	8b7b      	ldrh	r3, [r7, #26]
 8014a68:	68ba      	ldr	r2, [r7, #8]
 8014a6a:	18d0      	adds	r0, r2, r3
 8014a6c:	69fb      	ldr	r3, [r7, #28]
 8014a6e:	685a      	ldr	r2, [r3, #4]
 8014a70:	88bb      	ldrh	r3, [r7, #4]
 8014a72:	4413      	add	r3, r2
 8014a74:	8b3a      	ldrh	r2, [r7, #24]
 8014a76:	4619      	mov	r1, r3
 8014a78:	f009 fc44 	bl	801e304 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8014a7c:	8afa      	ldrh	r2, [r7, #22]
 8014a7e:	8b3b      	ldrh	r3, [r7, #24]
 8014a80:	4413      	add	r3, r2
 8014a82:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8014a84:	8b7a      	ldrh	r2, [r7, #26]
 8014a86:	8b3b      	ldrh	r3, [r7, #24]
 8014a88:	4413      	add	r3, r2
 8014a8a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8014a8c:	88fa      	ldrh	r2, [r7, #6]
 8014a8e:	8b3b      	ldrh	r3, [r7, #24]
 8014a90:	1ad3      	subs	r3, r2, r3
 8014a92:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8014a94:	2300      	movs	r3, #0
 8014a96:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014a98:	69fb      	ldr	r3, [r7, #28]
 8014a9a:	681b      	ldr	r3, [r3, #0]
 8014a9c:	61fb      	str	r3, [r7, #28]
 8014a9e:	88fb      	ldrh	r3, [r7, #6]
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d002      	beq.n	8014aaa <pbuf_copy_partial+0xca>
 8014aa4:	69fb      	ldr	r3, [r7, #28]
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d1c4      	bne.n	8014a34 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8014aaa:	8afb      	ldrh	r3, [r7, #22]
}
 8014aac:	4618      	mov	r0, r3
 8014aae:	3720      	adds	r7, #32
 8014ab0:	46bd      	mov	sp, r7
 8014ab2:	bd80      	pop	{r7, pc}
 8014ab4:	08024814 	.word	0x08024814
 8014ab8:	08024b5c 	.word	0x08024b5c
 8014abc:	08024874 	.word	0x08024874
 8014ac0:	08024b7c 	.word	0x08024b7c

08014ac4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b084      	sub	sp, #16
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	4603      	mov	r3, r0
 8014acc:	603a      	str	r2, [r7, #0]
 8014ace:	71fb      	strb	r3, [r7, #7]
 8014ad0:	460b      	mov	r3, r1
 8014ad2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8014ad4:	683b      	ldr	r3, [r7, #0]
 8014ad6:	8919      	ldrh	r1, [r3, #8]
 8014ad8:	88ba      	ldrh	r2, [r7, #4]
 8014ada:	79fb      	ldrb	r3, [r7, #7]
 8014adc:	4618      	mov	r0, r3
 8014ade:	f7ff fa95 	bl	801400c <pbuf_alloc>
 8014ae2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	2b00      	cmp	r3, #0
 8014ae8:	d101      	bne.n	8014aee <pbuf_clone+0x2a>
    return NULL;
 8014aea:	2300      	movs	r3, #0
 8014aec:	e011      	b.n	8014b12 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8014aee:	6839      	ldr	r1, [r7, #0]
 8014af0:	68f8      	ldr	r0, [r7, #12]
 8014af2:	f7ff fea3 	bl	801483c <pbuf_copy>
 8014af6:	4603      	mov	r3, r0
 8014af8:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8014afa:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014afe:	2b00      	cmp	r3, #0
 8014b00:	d006      	beq.n	8014b10 <pbuf_clone+0x4c>
 8014b02:	4b06      	ldr	r3, [pc, #24]	; (8014b1c <pbuf_clone+0x58>)
 8014b04:	f240 5224 	movw	r2, #1316	; 0x524
 8014b08:	4905      	ldr	r1, [pc, #20]	; (8014b20 <pbuf_clone+0x5c>)
 8014b0a:	4806      	ldr	r0, [pc, #24]	; (8014b24 <pbuf_clone+0x60>)
 8014b0c:	f00a fb4e 	bl	801f1ac <iprintf>
  return q;
 8014b10:	68fb      	ldr	r3, [r7, #12]
}
 8014b12:	4618      	mov	r0, r3
 8014b14:	3710      	adds	r7, #16
 8014b16:	46bd      	mov	sp, r7
 8014b18:	bd80      	pop	{r7, pc}
 8014b1a:	bf00      	nop
 8014b1c:	08024814 	.word	0x08024814
 8014b20:	08024c88 	.word	0x08024c88
 8014b24:	08024874 	.word	0x08024874

08014b28 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8014b28:	b580      	push	{r7, lr}
 8014b2a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014b2c:	f00a fb56 	bl	801f1dc <rand>
 8014b30:	4603      	mov	r3, r0
 8014b32:	b29b      	uxth	r3, r3
 8014b34:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8014b38:	b29b      	uxth	r3, r3
 8014b3a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8014b3e:	b29a      	uxth	r2, r3
 8014b40:	4b01      	ldr	r3, [pc, #4]	; (8014b48 <tcp_init+0x20>)
 8014b42:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014b44:	bf00      	nop
 8014b46:	bd80      	pop	{r7, pc}
 8014b48:	200003ac 	.word	0x200003ac

08014b4c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8014b4c:	b580      	push	{r7, lr}
 8014b4e:	b082      	sub	sp, #8
 8014b50:	af00      	add	r7, sp, #0
 8014b52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	7d1b      	ldrb	r3, [r3, #20]
 8014b58:	2b01      	cmp	r3, #1
 8014b5a:	d105      	bne.n	8014b68 <tcp_free+0x1c>
 8014b5c:	4b06      	ldr	r3, [pc, #24]	; (8014b78 <tcp_free+0x2c>)
 8014b5e:	22d4      	movs	r2, #212	; 0xd4
 8014b60:	4906      	ldr	r1, [pc, #24]	; (8014b7c <tcp_free+0x30>)
 8014b62:	4807      	ldr	r0, [pc, #28]	; (8014b80 <tcp_free+0x34>)
 8014b64:	f00a fb22 	bl	801f1ac <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8014b68:	6879      	ldr	r1, [r7, #4]
 8014b6a:	2001      	movs	r0, #1
 8014b6c:	f7fe fef2 	bl	8013954 <memp_free>
}
 8014b70:	bf00      	nop
 8014b72:	3708      	adds	r7, #8
 8014b74:	46bd      	mov	sp, r7
 8014b76:	bd80      	pop	{r7, pc}
 8014b78:	08024d14 	.word	0x08024d14
 8014b7c:	08024d44 	.word	0x08024d44
 8014b80:	08024d58 	.word	0x08024d58

08014b84 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8014b84:	b580      	push	{r7, lr}
 8014b86:	b082      	sub	sp, #8
 8014b88:	af00      	add	r7, sp, #0
 8014b8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8014b8c:	687b      	ldr	r3, [r7, #4]
 8014b8e:	7d1b      	ldrb	r3, [r3, #20]
 8014b90:	2b01      	cmp	r3, #1
 8014b92:	d105      	bne.n	8014ba0 <tcp_free_listen+0x1c>
 8014b94:	4b06      	ldr	r3, [pc, #24]	; (8014bb0 <tcp_free_listen+0x2c>)
 8014b96:	22df      	movs	r2, #223	; 0xdf
 8014b98:	4906      	ldr	r1, [pc, #24]	; (8014bb4 <tcp_free_listen+0x30>)
 8014b9a:	4807      	ldr	r0, [pc, #28]	; (8014bb8 <tcp_free_listen+0x34>)
 8014b9c:	f00a fb06 	bl	801f1ac <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8014ba0:	6879      	ldr	r1, [r7, #4]
 8014ba2:	2002      	movs	r0, #2
 8014ba4:	f7fe fed6 	bl	8013954 <memp_free>
}
 8014ba8:	bf00      	nop
 8014baa:	3708      	adds	r7, #8
 8014bac:	46bd      	mov	sp, r7
 8014bae:	bd80      	pop	{r7, pc}
 8014bb0:	08024d14 	.word	0x08024d14
 8014bb4:	08024d80 	.word	0x08024d80
 8014bb8:	08024d58 	.word	0x08024d58

08014bbc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8014bbc:	b580      	push	{r7, lr}
 8014bbe:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8014bc0:	f000 ffdc 	bl	8015b7c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8014bc4:	4b07      	ldr	r3, [pc, #28]	; (8014be4 <tcp_tmr+0x28>)
 8014bc6:	781b      	ldrb	r3, [r3, #0]
 8014bc8:	3301      	adds	r3, #1
 8014bca:	b2da      	uxtb	r2, r3
 8014bcc:	4b05      	ldr	r3, [pc, #20]	; (8014be4 <tcp_tmr+0x28>)
 8014bce:	701a      	strb	r2, [r3, #0]
 8014bd0:	4b04      	ldr	r3, [pc, #16]	; (8014be4 <tcp_tmr+0x28>)
 8014bd2:	781b      	ldrb	r3, [r3, #0]
 8014bd4:	f003 0301 	and.w	r3, r3, #1
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d001      	beq.n	8014be0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8014bdc:	f000 fc8e 	bl	80154fc <tcp_slowtmr>
  }
}
 8014be0:	bf00      	nop
 8014be2:	bd80      	pop	{r7, pc}
 8014be4:	20006e11 	.word	0x20006e11

08014be8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8014be8:	b580      	push	{r7, lr}
 8014bea:	b084      	sub	sp, #16
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	6078      	str	r0, [r7, #4]
 8014bf0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8014bf2:	683b      	ldr	r3, [r7, #0]
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d105      	bne.n	8014c04 <tcp_remove_listener+0x1c>
 8014bf8:	4b0d      	ldr	r3, [pc, #52]	; (8014c30 <tcp_remove_listener+0x48>)
 8014bfa:	22ff      	movs	r2, #255	; 0xff
 8014bfc:	490d      	ldr	r1, [pc, #52]	; (8014c34 <tcp_remove_listener+0x4c>)
 8014bfe:	480e      	ldr	r0, [pc, #56]	; (8014c38 <tcp_remove_listener+0x50>)
 8014c00:	f00a fad4 	bl	801f1ac <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014c04:	687b      	ldr	r3, [r7, #4]
 8014c06:	60fb      	str	r3, [r7, #12]
 8014c08:	e00a      	b.n	8014c20 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014c0e:	683a      	ldr	r2, [r7, #0]
 8014c10:	429a      	cmp	r2, r3
 8014c12:	d102      	bne.n	8014c1a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8014c14:	68fb      	ldr	r3, [r7, #12]
 8014c16:	2200      	movs	r2, #0
 8014c18:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014c1a:	68fb      	ldr	r3, [r7, #12]
 8014c1c:	68db      	ldr	r3, [r3, #12]
 8014c1e:	60fb      	str	r3, [r7, #12]
 8014c20:	68fb      	ldr	r3, [r7, #12]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d1f1      	bne.n	8014c0a <tcp_remove_listener+0x22>
    }
  }
}
 8014c26:	bf00      	nop
 8014c28:	bf00      	nop
 8014c2a:	3710      	adds	r7, #16
 8014c2c:	46bd      	mov	sp, r7
 8014c2e:	bd80      	pop	{r7, pc}
 8014c30:	08024d14 	.word	0x08024d14
 8014c34:	08024d9c 	.word	0x08024d9c
 8014c38:	08024d58 	.word	0x08024d58

08014c3c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8014c3c:	b580      	push	{r7, lr}
 8014c3e:	b084      	sub	sp, #16
 8014c40:	af00      	add	r7, sp, #0
 8014c42:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d106      	bne.n	8014c58 <tcp_listen_closed+0x1c>
 8014c4a:	4b14      	ldr	r3, [pc, #80]	; (8014c9c <tcp_listen_closed+0x60>)
 8014c4c:	f240 1211 	movw	r2, #273	; 0x111
 8014c50:	4913      	ldr	r1, [pc, #76]	; (8014ca0 <tcp_listen_closed+0x64>)
 8014c52:	4814      	ldr	r0, [pc, #80]	; (8014ca4 <tcp_listen_closed+0x68>)
 8014c54:	f00a faaa 	bl	801f1ac <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	7d1b      	ldrb	r3, [r3, #20]
 8014c5c:	2b01      	cmp	r3, #1
 8014c5e:	d006      	beq.n	8014c6e <tcp_listen_closed+0x32>
 8014c60:	4b0e      	ldr	r3, [pc, #56]	; (8014c9c <tcp_listen_closed+0x60>)
 8014c62:	f44f 7289 	mov.w	r2, #274	; 0x112
 8014c66:	4910      	ldr	r1, [pc, #64]	; (8014ca8 <tcp_listen_closed+0x6c>)
 8014c68:	480e      	ldr	r0, [pc, #56]	; (8014ca4 <tcp_listen_closed+0x68>)
 8014c6a:	f00a fa9f 	bl	801f1ac <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8014c6e:	2301      	movs	r3, #1
 8014c70:	60fb      	str	r3, [r7, #12]
 8014c72:	e00b      	b.n	8014c8c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8014c74:	4a0d      	ldr	r2, [pc, #52]	; (8014cac <tcp_listen_closed+0x70>)
 8014c76:	68fb      	ldr	r3, [r7, #12]
 8014c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	6879      	ldr	r1, [r7, #4]
 8014c80:	4618      	mov	r0, r3
 8014c82:	f7ff ffb1 	bl	8014be8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	3301      	adds	r3, #1
 8014c8a:	60fb      	str	r3, [r7, #12]
 8014c8c:	68fb      	ldr	r3, [r7, #12]
 8014c8e:	2b03      	cmp	r3, #3
 8014c90:	d9f0      	bls.n	8014c74 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8014c92:	bf00      	nop
 8014c94:	bf00      	nop
 8014c96:	3710      	adds	r7, #16
 8014c98:	46bd      	mov	sp, r7
 8014c9a:	bd80      	pop	{r7, pc}
 8014c9c:	08024d14 	.word	0x08024d14
 8014ca0:	08024dc4 	.word	0x08024dc4
 8014ca4:	08024d58 	.word	0x08024d58
 8014ca8:	08024dd0 	.word	0x08024dd0
 8014cac:	08026ef8 	.word	0x08026ef8

08014cb0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8014cb0:	b5b0      	push	{r4, r5, r7, lr}
 8014cb2:	b088      	sub	sp, #32
 8014cb4:	af04      	add	r7, sp, #16
 8014cb6:	6078      	str	r0, [r7, #4]
 8014cb8:	460b      	mov	r3, r1
 8014cba:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d106      	bne.n	8014cd0 <tcp_close_shutdown+0x20>
 8014cc2:	4b63      	ldr	r3, [pc, #396]	; (8014e50 <tcp_close_shutdown+0x1a0>)
 8014cc4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8014cc8:	4962      	ldr	r1, [pc, #392]	; (8014e54 <tcp_close_shutdown+0x1a4>)
 8014cca:	4863      	ldr	r0, [pc, #396]	; (8014e58 <tcp_close_shutdown+0x1a8>)
 8014ccc:	f00a fa6e 	bl	801f1ac <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8014cd0:	78fb      	ldrb	r3, [r7, #3]
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d066      	beq.n	8014da4 <tcp_close_shutdown+0xf4>
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	7d1b      	ldrb	r3, [r3, #20]
 8014cda:	2b04      	cmp	r3, #4
 8014cdc:	d003      	beq.n	8014ce6 <tcp_close_shutdown+0x36>
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	7d1b      	ldrb	r3, [r3, #20]
 8014ce2:	2b07      	cmp	r3, #7
 8014ce4:	d15e      	bne.n	8014da4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d104      	bne.n	8014cf8 <tcp_close_shutdown+0x48>
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014cf2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8014cf6:	d055      	beq.n	8014da4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	8b5b      	ldrh	r3, [r3, #26]
 8014cfc:	f003 0310 	and.w	r3, r3, #16
 8014d00:	2b00      	cmp	r3, #0
 8014d02:	d106      	bne.n	8014d12 <tcp_close_shutdown+0x62>
 8014d04:	4b52      	ldr	r3, [pc, #328]	; (8014e50 <tcp_close_shutdown+0x1a0>)
 8014d06:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8014d0a:	4954      	ldr	r1, [pc, #336]	; (8014e5c <tcp_close_shutdown+0x1ac>)
 8014d0c:	4852      	ldr	r0, [pc, #328]	; (8014e58 <tcp_close_shutdown+0x1a8>)
 8014d0e:	f00a fa4d 	bl	801f1ac <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8014d16:	687b      	ldr	r3, [r7, #4]
 8014d18:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014d1a:	687d      	ldr	r5, [r7, #4]
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	3304      	adds	r3, #4
 8014d20:	687a      	ldr	r2, [r7, #4]
 8014d22:	8ad2      	ldrh	r2, [r2, #22]
 8014d24:	6879      	ldr	r1, [r7, #4]
 8014d26:	8b09      	ldrh	r1, [r1, #24]
 8014d28:	9102      	str	r1, [sp, #8]
 8014d2a:	9201      	str	r2, [sp, #4]
 8014d2c:	9300      	str	r3, [sp, #0]
 8014d2e:	462b      	mov	r3, r5
 8014d30:	4622      	mov	r2, r4
 8014d32:	4601      	mov	r1, r0
 8014d34:	6878      	ldr	r0, [r7, #4]
 8014d36:	f005 fced 	bl	801a714 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8014d3a:	6878      	ldr	r0, [r7, #4]
 8014d3c:	f001 face 	bl	80162dc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8014d40:	4b47      	ldr	r3, [pc, #284]	; (8014e60 <tcp_close_shutdown+0x1b0>)
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	687a      	ldr	r2, [r7, #4]
 8014d46:	429a      	cmp	r2, r3
 8014d48:	d105      	bne.n	8014d56 <tcp_close_shutdown+0xa6>
 8014d4a:	4b45      	ldr	r3, [pc, #276]	; (8014e60 <tcp_close_shutdown+0x1b0>)
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	68db      	ldr	r3, [r3, #12]
 8014d50:	4a43      	ldr	r2, [pc, #268]	; (8014e60 <tcp_close_shutdown+0x1b0>)
 8014d52:	6013      	str	r3, [r2, #0]
 8014d54:	e013      	b.n	8014d7e <tcp_close_shutdown+0xce>
 8014d56:	4b42      	ldr	r3, [pc, #264]	; (8014e60 <tcp_close_shutdown+0x1b0>)
 8014d58:	681b      	ldr	r3, [r3, #0]
 8014d5a:	60fb      	str	r3, [r7, #12]
 8014d5c:	e00c      	b.n	8014d78 <tcp_close_shutdown+0xc8>
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	68db      	ldr	r3, [r3, #12]
 8014d62:	687a      	ldr	r2, [r7, #4]
 8014d64:	429a      	cmp	r2, r3
 8014d66:	d104      	bne.n	8014d72 <tcp_close_shutdown+0xc2>
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	68da      	ldr	r2, [r3, #12]
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	60da      	str	r2, [r3, #12]
 8014d70:	e005      	b.n	8014d7e <tcp_close_shutdown+0xce>
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	68db      	ldr	r3, [r3, #12]
 8014d76:	60fb      	str	r3, [r7, #12]
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	2b00      	cmp	r3, #0
 8014d7c:	d1ef      	bne.n	8014d5e <tcp_close_shutdown+0xae>
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	2200      	movs	r2, #0
 8014d82:	60da      	str	r2, [r3, #12]
 8014d84:	4b37      	ldr	r3, [pc, #220]	; (8014e64 <tcp_close_shutdown+0x1b4>)
 8014d86:	2201      	movs	r2, #1
 8014d88:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8014d8a:	4b37      	ldr	r3, [pc, #220]	; (8014e68 <tcp_close_shutdown+0x1b8>)
 8014d8c:	681b      	ldr	r3, [r3, #0]
 8014d8e:	687a      	ldr	r2, [r7, #4]
 8014d90:	429a      	cmp	r2, r3
 8014d92:	d102      	bne.n	8014d9a <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8014d94:	f003 ff62 	bl	8018c5c <tcp_trigger_input_pcb_close>
 8014d98:	e002      	b.n	8014da0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8014d9a:	6878      	ldr	r0, [r7, #4]
 8014d9c:	f7ff fed6 	bl	8014b4c <tcp_free>
      }
      return ERR_OK;
 8014da0:	2300      	movs	r3, #0
 8014da2:	e050      	b.n	8014e46 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	7d1b      	ldrb	r3, [r3, #20]
 8014da8:	2b02      	cmp	r3, #2
 8014daa:	d03b      	beq.n	8014e24 <tcp_close_shutdown+0x174>
 8014dac:	2b02      	cmp	r3, #2
 8014dae:	dc44      	bgt.n	8014e3a <tcp_close_shutdown+0x18a>
 8014db0:	2b00      	cmp	r3, #0
 8014db2:	d002      	beq.n	8014dba <tcp_close_shutdown+0x10a>
 8014db4:	2b01      	cmp	r3, #1
 8014db6:	d02a      	beq.n	8014e0e <tcp_close_shutdown+0x15e>
 8014db8:	e03f      	b.n	8014e3a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8014dba:	687b      	ldr	r3, [r7, #4]
 8014dbc:	8adb      	ldrh	r3, [r3, #22]
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d021      	beq.n	8014e06 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014dc2:	4b2a      	ldr	r3, [pc, #168]	; (8014e6c <tcp_close_shutdown+0x1bc>)
 8014dc4:	681b      	ldr	r3, [r3, #0]
 8014dc6:	687a      	ldr	r2, [r7, #4]
 8014dc8:	429a      	cmp	r2, r3
 8014dca:	d105      	bne.n	8014dd8 <tcp_close_shutdown+0x128>
 8014dcc:	4b27      	ldr	r3, [pc, #156]	; (8014e6c <tcp_close_shutdown+0x1bc>)
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	68db      	ldr	r3, [r3, #12]
 8014dd2:	4a26      	ldr	r2, [pc, #152]	; (8014e6c <tcp_close_shutdown+0x1bc>)
 8014dd4:	6013      	str	r3, [r2, #0]
 8014dd6:	e013      	b.n	8014e00 <tcp_close_shutdown+0x150>
 8014dd8:	4b24      	ldr	r3, [pc, #144]	; (8014e6c <tcp_close_shutdown+0x1bc>)
 8014dda:	681b      	ldr	r3, [r3, #0]
 8014ddc:	60bb      	str	r3, [r7, #8]
 8014dde:	e00c      	b.n	8014dfa <tcp_close_shutdown+0x14a>
 8014de0:	68bb      	ldr	r3, [r7, #8]
 8014de2:	68db      	ldr	r3, [r3, #12]
 8014de4:	687a      	ldr	r2, [r7, #4]
 8014de6:	429a      	cmp	r2, r3
 8014de8:	d104      	bne.n	8014df4 <tcp_close_shutdown+0x144>
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	68da      	ldr	r2, [r3, #12]
 8014dee:	68bb      	ldr	r3, [r7, #8]
 8014df0:	60da      	str	r2, [r3, #12]
 8014df2:	e005      	b.n	8014e00 <tcp_close_shutdown+0x150>
 8014df4:	68bb      	ldr	r3, [r7, #8]
 8014df6:	68db      	ldr	r3, [r3, #12]
 8014df8:	60bb      	str	r3, [r7, #8]
 8014dfa:	68bb      	ldr	r3, [r7, #8]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d1ef      	bne.n	8014de0 <tcp_close_shutdown+0x130>
 8014e00:	687b      	ldr	r3, [r7, #4]
 8014e02:	2200      	movs	r2, #0
 8014e04:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8014e06:	6878      	ldr	r0, [r7, #4]
 8014e08:	f7ff fea0 	bl	8014b4c <tcp_free>
      break;
 8014e0c:	e01a      	b.n	8014e44 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8014e0e:	6878      	ldr	r0, [r7, #4]
 8014e10:	f7ff ff14 	bl	8014c3c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8014e14:	6879      	ldr	r1, [r7, #4]
 8014e16:	4816      	ldr	r0, [pc, #88]	; (8014e70 <tcp_close_shutdown+0x1c0>)
 8014e18:	f001 fab0 	bl	801637c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8014e1c:	6878      	ldr	r0, [r7, #4]
 8014e1e:	f7ff feb1 	bl	8014b84 <tcp_free_listen>
      break;
 8014e22:	e00f      	b.n	8014e44 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014e24:	6879      	ldr	r1, [r7, #4]
 8014e26:	480e      	ldr	r0, [pc, #56]	; (8014e60 <tcp_close_shutdown+0x1b0>)
 8014e28:	f001 faa8 	bl	801637c <tcp_pcb_remove>
 8014e2c:	4b0d      	ldr	r3, [pc, #52]	; (8014e64 <tcp_close_shutdown+0x1b4>)
 8014e2e:	2201      	movs	r2, #1
 8014e30:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8014e32:	6878      	ldr	r0, [r7, #4]
 8014e34:	f7ff fe8a 	bl	8014b4c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8014e38:	e004      	b.n	8014e44 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8014e3a:	6878      	ldr	r0, [r7, #4]
 8014e3c:	f000 f81a 	bl	8014e74 <tcp_close_shutdown_fin>
 8014e40:	4603      	mov	r3, r0
 8014e42:	e000      	b.n	8014e46 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8014e44:	2300      	movs	r3, #0
}
 8014e46:	4618      	mov	r0, r3
 8014e48:	3710      	adds	r7, #16
 8014e4a:	46bd      	mov	sp, r7
 8014e4c:	bdb0      	pop	{r4, r5, r7, pc}
 8014e4e:	bf00      	nop
 8014e50:	08024d14 	.word	0x08024d14
 8014e54:	08024de8 	.word	0x08024de8
 8014e58:	08024d58 	.word	0x08024d58
 8014e5c:	08024e08 	.word	0x08024e08
 8014e60:	2000e170 	.word	0x2000e170
 8014e64:	2000e16c 	.word	0x2000e16c
 8014e68:	2000e184 	.word	0x2000e184
 8014e6c:	2000e17c 	.word	0x2000e17c
 8014e70:	2000e178 	.word	0x2000e178

08014e74 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8014e74:	b580      	push	{r7, lr}
 8014e76:	b084      	sub	sp, #16
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	2b00      	cmp	r3, #0
 8014e80:	d106      	bne.n	8014e90 <tcp_close_shutdown_fin+0x1c>
 8014e82:	4b2e      	ldr	r3, [pc, #184]	; (8014f3c <tcp_close_shutdown_fin+0xc8>)
 8014e84:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8014e88:	492d      	ldr	r1, [pc, #180]	; (8014f40 <tcp_close_shutdown_fin+0xcc>)
 8014e8a:	482e      	ldr	r0, [pc, #184]	; (8014f44 <tcp_close_shutdown_fin+0xd0>)
 8014e8c:	f00a f98e 	bl	801f1ac <iprintf>

  switch (pcb->state) {
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	7d1b      	ldrb	r3, [r3, #20]
 8014e94:	2b07      	cmp	r3, #7
 8014e96:	d020      	beq.n	8014eda <tcp_close_shutdown_fin+0x66>
 8014e98:	2b07      	cmp	r3, #7
 8014e9a:	dc2b      	bgt.n	8014ef4 <tcp_close_shutdown_fin+0x80>
 8014e9c:	2b03      	cmp	r3, #3
 8014e9e:	d002      	beq.n	8014ea6 <tcp_close_shutdown_fin+0x32>
 8014ea0:	2b04      	cmp	r3, #4
 8014ea2:	d00d      	beq.n	8014ec0 <tcp_close_shutdown_fin+0x4c>
 8014ea4:	e026      	b.n	8014ef4 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8014ea6:	6878      	ldr	r0, [r7, #4]
 8014ea8:	f004 fd42 	bl	8019930 <tcp_send_fin>
 8014eac:	4603      	mov	r3, r0
 8014eae:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014eb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d11f      	bne.n	8014ef8 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	2205      	movs	r2, #5
 8014ebc:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014ebe:	e01b      	b.n	8014ef8 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8014ec0:	6878      	ldr	r0, [r7, #4]
 8014ec2:	f004 fd35 	bl	8019930 <tcp_send_fin>
 8014ec6:	4603      	mov	r3, r0
 8014ec8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d114      	bne.n	8014efc <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8014ed2:	687b      	ldr	r3, [r7, #4]
 8014ed4:	2205      	movs	r2, #5
 8014ed6:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014ed8:	e010      	b.n	8014efc <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8014eda:	6878      	ldr	r0, [r7, #4]
 8014edc:	f004 fd28 	bl	8019930 <tcp_send_fin>
 8014ee0:	4603      	mov	r3, r0
 8014ee2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8014ee4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d109      	bne.n	8014f00 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	2209      	movs	r2, #9
 8014ef0:	751a      	strb	r2, [r3, #20]
      }
      break;
 8014ef2:	e005      	b.n	8014f00 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8014ef4:	2300      	movs	r3, #0
 8014ef6:	e01c      	b.n	8014f32 <tcp_close_shutdown_fin+0xbe>
      break;
 8014ef8:	bf00      	nop
 8014efa:	e002      	b.n	8014f02 <tcp_close_shutdown_fin+0x8e>
      break;
 8014efc:	bf00      	nop
 8014efe:	e000      	b.n	8014f02 <tcp_close_shutdown_fin+0x8e>
      break;
 8014f00:	bf00      	nop
  }

  if (err == ERR_OK) {
 8014f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d103      	bne.n	8014f12 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8014f0a:	6878      	ldr	r0, [r7, #4]
 8014f0c:	f004 fe4e 	bl	8019bac <tcp_output>
 8014f10:	e00d      	b.n	8014f2e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8014f12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014f16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014f1a:	d108      	bne.n	8014f2e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	8b5b      	ldrh	r3, [r3, #26]
 8014f20:	f043 0308 	orr.w	r3, r3, #8
 8014f24:	b29a      	uxth	r2, r3
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8014f2a:	2300      	movs	r3, #0
 8014f2c:	e001      	b.n	8014f32 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8014f2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014f32:	4618      	mov	r0, r3
 8014f34:	3710      	adds	r7, #16
 8014f36:	46bd      	mov	sp, r7
 8014f38:	bd80      	pop	{r7, pc}
 8014f3a:	bf00      	nop
 8014f3c:	08024d14 	.word	0x08024d14
 8014f40:	08024dc4 	.word	0x08024dc4
 8014f44:	08024d58 	.word	0x08024d58

08014f48 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8014f48:	b580      	push	{r7, lr}
 8014f4a:	b082      	sub	sp, #8
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	2b00      	cmp	r3, #0
 8014f54:	d109      	bne.n	8014f6a <tcp_close+0x22>
 8014f56:	4b0f      	ldr	r3, [pc, #60]	; (8014f94 <tcp_close+0x4c>)
 8014f58:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8014f5c:	490e      	ldr	r1, [pc, #56]	; (8014f98 <tcp_close+0x50>)
 8014f5e:	480f      	ldr	r0, [pc, #60]	; (8014f9c <tcp_close+0x54>)
 8014f60:	f00a f924 	bl	801f1ac <iprintf>
 8014f64:	f06f 030f 	mvn.w	r3, #15
 8014f68:	e00f      	b.n	8014f8a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8014f6a:	687b      	ldr	r3, [r7, #4]
 8014f6c:	7d1b      	ldrb	r3, [r3, #20]
 8014f6e:	2b01      	cmp	r3, #1
 8014f70:	d006      	beq.n	8014f80 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8014f72:	687b      	ldr	r3, [r7, #4]
 8014f74:	8b5b      	ldrh	r3, [r3, #26]
 8014f76:	f043 0310 	orr.w	r3, r3, #16
 8014f7a:	b29a      	uxth	r2, r3
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8014f80:	2101      	movs	r1, #1
 8014f82:	6878      	ldr	r0, [r7, #4]
 8014f84:	f7ff fe94 	bl	8014cb0 <tcp_close_shutdown>
 8014f88:	4603      	mov	r3, r0
}
 8014f8a:	4618      	mov	r0, r3
 8014f8c:	3708      	adds	r7, #8
 8014f8e:	46bd      	mov	sp, r7
 8014f90:	bd80      	pop	{r7, pc}
 8014f92:	bf00      	nop
 8014f94:	08024d14 	.word	0x08024d14
 8014f98:	08024e24 	.word	0x08024e24
 8014f9c:	08024d58 	.word	0x08024d58

08014fa0 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 8014fa0:	b580      	push	{r7, lr}
 8014fa2:	b084      	sub	sp, #16
 8014fa4:	af00      	add	r7, sp, #0
 8014fa6:	60f8      	str	r0, [r7, #12]
 8014fa8:	60b9      	str	r1, [r7, #8]
 8014faa:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 8014fac:	68fb      	ldr	r3, [r7, #12]
 8014fae:	2b00      	cmp	r3, #0
 8014fb0:	d109      	bne.n	8014fc6 <tcp_shutdown+0x26>
 8014fb2:	4b26      	ldr	r3, [pc, #152]	; (801504c <tcp_shutdown+0xac>)
 8014fb4:	f240 2207 	movw	r2, #519	; 0x207
 8014fb8:	4925      	ldr	r1, [pc, #148]	; (8015050 <tcp_shutdown+0xb0>)
 8014fba:	4826      	ldr	r0, [pc, #152]	; (8015054 <tcp_shutdown+0xb4>)
 8014fbc:	f00a f8f6 	bl	801f1ac <iprintf>
 8014fc0:	f06f 030f 	mvn.w	r3, #15
 8014fc4:	e03d      	b.n	8015042 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	7d1b      	ldrb	r3, [r3, #20]
 8014fca:	2b01      	cmp	r3, #1
 8014fcc:	d102      	bne.n	8014fd4 <tcp_shutdown+0x34>
    return ERR_CONN;
 8014fce:	f06f 030a 	mvn.w	r3, #10
 8014fd2:	e036      	b.n	8015042 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8014fd4:	68bb      	ldr	r3, [r7, #8]
 8014fd6:	2b00      	cmp	r3, #0
 8014fd8:	d01b      	beq.n	8015012 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8014fda:	68fb      	ldr	r3, [r7, #12]
 8014fdc:	8b5b      	ldrh	r3, [r3, #26]
 8014fde:	f043 0310 	orr.w	r3, r3, #16
 8014fe2:	b29a      	uxth	r2, r3
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8014fe8:	687b      	ldr	r3, [r7, #4]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d005      	beq.n	8014ffa <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 8014fee:	2101      	movs	r1, #1
 8014ff0:	68f8      	ldr	r0, [r7, #12]
 8014ff2:	f7ff fe5d 	bl	8014cb0 <tcp_close_shutdown>
 8014ff6:	4603      	mov	r3, r0
 8014ff8:	e023      	b.n	8015042 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8014ffa:	68fb      	ldr	r3, [r7, #12]
 8014ffc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014ffe:	2b00      	cmp	r3, #0
 8015000:	d007      	beq.n	8015012 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8015002:	68fb      	ldr	r3, [r7, #12]
 8015004:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015006:	4618      	mov	r0, r3
 8015008:	f7ff fae4 	bl	80145d4 <pbuf_free>
      pcb->refused_data = NULL;
 801500c:	68fb      	ldr	r3, [r7, #12]
 801500e:	2200      	movs	r2, #0
 8015010:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	2b00      	cmp	r3, #0
 8015016:	d013      	beq.n	8015040 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8015018:	68fb      	ldr	r3, [r7, #12]
 801501a:	7d1b      	ldrb	r3, [r3, #20]
 801501c:	2b04      	cmp	r3, #4
 801501e:	dc02      	bgt.n	8015026 <tcp_shutdown+0x86>
 8015020:	2b03      	cmp	r3, #3
 8015022:	da02      	bge.n	801502a <tcp_shutdown+0x8a>
 8015024:	e009      	b.n	801503a <tcp_shutdown+0x9a>
 8015026:	2b07      	cmp	r3, #7
 8015028:	d107      	bne.n	801503a <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801502a:	68bb      	ldr	r3, [r7, #8]
 801502c:	b2db      	uxtb	r3, r3
 801502e:	4619      	mov	r1, r3
 8015030:	68f8      	ldr	r0, [r7, #12]
 8015032:	f7ff fe3d 	bl	8014cb0 <tcp_close_shutdown>
 8015036:	4603      	mov	r3, r0
 8015038:	e003      	b.n	8015042 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 801503a:	f06f 030a 	mvn.w	r3, #10
 801503e:	e000      	b.n	8015042 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8015040:	2300      	movs	r3, #0
}
 8015042:	4618      	mov	r0, r3
 8015044:	3710      	adds	r7, #16
 8015046:	46bd      	mov	sp, r7
 8015048:	bd80      	pop	{r7, pc}
 801504a:	bf00      	nop
 801504c:	08024d14 	.word	0x08024d14
 8015050:	08024e3c 	.word	0x08024e3c
 8015054:	08024d58 	.word	0x08024d58

08015058 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8015058:	b580      	push	{r7, lr}
 801505a:	b08e      	sub	sp, #56	; 0x38
 801505c:	af04      	add	r7, sp, #16
 801505e:	6078      	str	r0, [r7, #4]
 8015060:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	2b00      	cmp	r3, #0
 8015066:	d107      	bne.n	8015078 <tcp_abandon+0x20>
 8015068:	4b52      	ldr	r3, [pc, #328]	; (80151b4 <tcp_abandon+0x15c>)
 801506a:	f240 223d 	movw	r2, #573	; 0x23d
 801506e:	4952      	ldr	r1, [pc, #328]	; (80151b8 <tcp_abandon+0x160>)
 8015070:	4852      	ldr	r0, [pc, #328]	; (80151bc <tcp_abandon+0x164>)
 8015072:	f00a f89b 	bl	801f1ac <iprintf>
 8015076:	e099      	b.n	80151ac <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8015078:	687b      	ldr	r3, [r7, #4]
 801507a:	7d1b      	ldrb	r3, [r3, #20]
 801507c:	2b01      	cmp	r3, #1
 801507e:	d106      	bne.n	801508e <tcp_abandon+0x36>
 8015080:	4b4c      	ldr	r3, [pc, #304]	; (80151b4 <tcp_abandon+0x15c>)
 8015082:	f44f 7210 	mov.w	r2, #576	; 0x240
 8015086:	494e      	ldr	r1, [pc, #312]	; (80151c0 <tcp_abandon+0x168>)
 8015088:	484c      	ldr	r0, [pc, #304]	; (80151bc <tcp_abandon+0x164>)
 801508a:	f00a f88f 	bl	801f1ac <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	7d1b      	ldrb	r3, [r3, #20]
 8015092:	2b0a      	cmp	r3, #10
 8015094:	d107      	bne.n	80150a6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8015096:	6879      	ldr	r1, [r7, #4]
 8015098:	484a      	ldr	r0, [pc, #296]	; (80151c4 <tcp_abandon+0x16c>)
 801509a:	f001 f96f 	bl	801637c <tcp_pcb_remove>
    tcp_free(pcb);
 801509e:	6878      	ldr	r0, [r7, #4]
 80150a0:	f7ff fd54 	bl	8014b4c <tcp_free>
 80150a4:	e082      	b.n	80151ac <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80150a6:	2300      	movs	r3, #0
 80150a8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80150aa:	2300      	movs	r3, #0
 80150ac:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80150b2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150b8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80150c0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	691b      	ldr	r3, [r3, #16]
 80150c6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	7d1b      	ldrb	r3, [r3, #20]
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d126      	bne.n	801511e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	8adb      	ldrh	r3, [r3, #22]
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	d02e      	beq.n	8015136 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80150d8:	4b3b      	ldr	r3, [pc, #236]	; (80151c8 <tcp_abandon+0x170>)
 80150da:	681b      	ldr	r3, [r3, #0]
 80150dc:	687a      	ldr	r2, [r7, #4]
 80150de:	429a      	cmp	r2, r3
 80150e0:	d105      	bne.n	80150ee <tcp_abandon+0x96>
 80150e2:	4b39      	ldr	r3, [pc, #228]	; (80151c8 <tcp_abandon+0x170>)
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	68db      	ldr	r3, [r3, #12]
 80150e8:	4a37      	ldr	r2, [pc, #220]	; (80151c8 <tcp_abandon+0x170>)
 80150ea:	6013      	str	r3, [r2, #0]
 80150ec:	e013      	b.n	8015116 <tcp_abandon+0xbe>
 80150ee:	4b36      	ldr	r3, [pc, #216]	; (80151c8 <tcp_abandon+0x170>)
 80150f0:	681b      	ldr	r3, [r3, #0]
 80150f2:	61fb      	str	r3, [r7, #28]
 80150f4:	e00c      	b.n	8015110 <tcp_abandon+0xb8>
 80150f6:	69fb      	ldr	r3, [r7, #28]
 80150f8:	68db      	ldr	r3, [r3, #12]
 80150fa:	687a      	ldr	r2, [r7, #4]
 80150fc:	429a      	cmp	r2, r3
 80150fe:	d104      	bne.n	801510a <tcp_abandon+0xb2>
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	68da      	ldr	r2, [r3, #12]
 8015104:	69fb      	ldr	r3, [r7, #28]
 8015106:	60da      	str	r2, [r3, #12]
 8015108:	e005      	b.n	8015116 <tcp_abandon+0xbe>
 801510a:	69fb      	ldr	r3, [r7, #28]
 801510c:	68db      	ldr	r3, [r3, #12]
 801510e:	61fb      	str	r3, [r7, #28]
 8015110:	69fb      	ldr	r3, [r7, #28]
 8015112:	2b00      	cmp	r3, #0
 8015114:	d1ef      	bne.n	80150f6 <tcp_abandon+0x9e>
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	2200      	movs	r2, #0
 801511a:	60da      	str	r2, [r3, #12]
 801511c:	e00b      	b.n	8015136 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801511e:	683b      	ldr	r3, [r7, #0]
 8015120:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8015122:	687b      	ldr	r3, [r7, #4]
 8015124:	8adb      	ldrh	r3, [r3, #22]
 8015126:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8015128:	6879      	ldr	r1, [r7, #4]
 801512a:	4828      	ldr	r0, [pc, #160]	; (80151cc <tcp_abandon+0x174>)
 801512c:	f001 f926 	bl	801637c <tcp_pcb_remove>
 8015130:	4b27      	ldr	r3, [pc, #156]	; (80151d0 <tcp_abandon+0x178>)
 8015132:	2201      	movs	r2, #1
 8015134:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801513a:	2b00      	cmp	r3, #0
 801513c:	d004      	beq.n	8015148 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015142:	4618      	mov	r0, r3
 8015144:	f000 fdfa 	bl	8015d3c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8015148:	687b      	ldr	r3, [r7, #4]
 801514a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801514c:	2b00      	cmp	r3, #0
 801514e:	d004      	beq.n	801515a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015154:	4618      	mov	r0, r3
 8015156:	f000 fdf1 	bl	8015d3c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801515e:	2b00      	cmp	r3, #0
 8015160:	d004      	beq.n	801516c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015166:	4618      	mov	r0, r3
 8015168:	f000 fde8 	bl	8015d3c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801516e:	2b00      	cmp	r3, #0
 8015170:	d00e      	beq.n	8015190 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8015172:	6879      	ldr	r1, [r7, #4]
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	3304      	adds	r3, #4
 8015178:	687a      	ldr	r2, [r7, #4]
 801517a:	8b12      	ldrh	r2, [r2, #24]
 801517c:	9202      	str	r2, [sp, #8]
 801517e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015180:	9201      	str	r2, [sp, #4]
 8015182:	9300      	str	r3, [sp, #0]
 8015184:	460b      	mov	r3, r1
 8015186:	697a      	ldr	r2, [r7, #20]
 8015188:	69b9      	ldr	r1, [r7, #24]
 801518a:	6878      	ldr	r0, [r7, #4]
 801518c:	f005 fac2 	bl	801a714 <tcp_rst>
    }
    last_state = pcb->state;
 8015190:	687b      	ldr	r3, [r7, #4]
 8015192:	7d1b      	ldrb	r3, [r3, #20]
 8015194:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8015196:	6878      	ldr	r0, [r7, #4]
 8015198:	f7ff fcd8 	bl	8014b4c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801519c:	693b      	ldr	r3, [r7, #16]
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d004      	beq.n	80151ac <tcp_abandon+0x154>
 80151a2:	693b      	ldr	r3, [r7, #16]
 80151a4:	f06f 010c 	mvn.w	r1, #12
 80151a8:	68f8      	ldr	r0, [r7, #12]
 80151aa:	4798      	blx	r3
  }
}
 80151ac:	3728      	adds	r7, #40	; 0x28
 80151ae:	46bd      	mov	sp, r7
 80151b0:	bd80      	pop	{r7, pc}
 80151b2:	bf00      	nop
 80151b4:	08024d14 	.word	0x08024d14
 80151b8:	08024e58 	.word	0x08024e58
 80151bc:	08024d58 	.word	0x08024d58
 80151c0:	08024e74 	.word	0x08024e74
 80151c4:	2000e180 	.word	0x2000e180
 80151c8:	2000e17c 	.word	0x2000e17c
 80151cc:	2000e170 	.word	0x2000e170
 80151d0:	2000e16c 	.word	0x2000e16c

080151d4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80151d4:	b580      	push	{r7, lr}
 80151d6:	b082      	sub	sp, #8
 80151d8:	af00      	add	r7, sp, #0
 80151da:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80151dc:	2101      	movs	r1, #1
 80151de:	6878      	ldr	r0, [r7, #4]
 80151e0:	f7ff ff3a 	bl	8015058 <tcp_abandon>
}
 80151e4:	bf00      	nop
 80151e6:	3708      	adds	r7, #8
 80151e8:	46bd      	mov	sp, r7
 80151ea:	bd80      	pop	{r7, pc}

080151ec <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80151ec:	b580      	push	{r7, lr}
 80151ee:	b088      	sub	sp, #32
 80151f0:	af00      	add	r7, sp, #0
 80151f2:	60f8      	str	r0, [r7, #12]
 80151f4:	60b9      	str	r1, [r7, #8]
 80151f6:	4613      	mov	r3, r2
 80151f8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80151fa:	2304      	movs	r3, #4
 80151fc:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80151fe:	68bb      	ldr	r3, [r7, #8]
 8015200:	2b00      	cmp	r3, #0
 8015202:	d101      	bne.n	8015208 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8015204:	4b3e      	ldr	r3, [pc, #248]	; (8015300 <tcp_bind+0x114>)
 8015206:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d109      	bne.n	8015222 <tcp_bind+0x36>
 801520e:	4b3d      	ldr	r3, [pc, #244]	; (8015304 <tcp_bind+0x118>)
 8015210:	f240 22a9 	movw	r2, #681	; 0x2a9
 8015214:	493c      	ldr	r1, [pc, #240]	; (8015308 <tcp_bind+0x11c>)
 8015216:	483d      	ldr	r0, [pc, #244]	; (801530c <tcp_bind+0x120>)
 8015218:	f009 ffc8 	bl	801f1ac <iprintf>
 801521c:	f06f 030f 	mvn.w	r3, #15
 8015220:	e06a      	b.n	80152f8 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	7d1b      	ldrb	r3, [r3, #20]
 8015226:	2b00      	cmp	r3, #0
 8015228:	d009      	beq.n	801523e <tcp_bind+0x52>
 801522a:	4b36      	ldr	r3, [pc, #216]	; (8015304 <tcp_bind+0x118>)
 801522c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015230:	4937      	ldr	r1, [pc, #220]	; (8015310 <tcp_bind+0x124>)
 8015232:	4836      	ldr	r0, [pc, #216]	; (801530c <tcp_bind+0x120>)
 8015234:	f009 ffba 	bl	801f1ac <iprintf>
 8015238:	f06f 0305 	mvn.w	r3, #5
 801523c:	e05c      	b.n	80152f8 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801523e:	88fb      	ldrh	r3, [r7, #6]
 8015240:	2b00      	cmp	r3, #0
 8015242:	d109      	bne.n	8015258 <tcp_bind+0x6c>
    port = tcp_new_port();
 8015244:	f000 f914 	bl	8015470 <tcp_new_port>
 8015248:	4603      	mov	r3, r0
 801524a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801524c:	88fb      	ldrh	r3, [r7, #6]
 801524e:	2b00      	cmp	r3, #0
 8015250:	d135      	bne.n	80152be <tcp_bind+0xd2>
      return ERR_BUF;
 8015252:	f06f 0301 	mvn.w	r3, #1
 8015256:	e04f      	b.n	80152f8 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8015258:	2300      	movs	r3, #0
 801525a:	61fb      	str	r3, [r7, #28]
 801525c:	e02b      	b.n	80152b6 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801525e:	4a2d      	ldr	r2, [pc, #180]	; (8015314 <tcp_bind+0x128>)
 8015260:	69fb      	ldr	r3, [r7, #28]
 8015262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	61bb      	str	r3, [r7, #24]
 801526a:	e01e      	b.n	80152aa <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 801526c:	69bb      	ldr	r3, [r7, #24]
 801526e:	8adb      	ldrh	r3, [r3, #22]
 8015270:	88fa      	ldrh	r2, [r7, #6]
 8015272:	429a      	cmp	r2, r3
 8015274:	d116      	bne.n	80152a4 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8015276:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8015278:	2b00      	cmp	r3, #0
 801527a:	d010      	beq.n	801529e <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 801527c:	69bb      	ldr	r3, [r7, #24]
 801527e:	681b      	ldr	r3, [r3, #0]
 8015280:	2b00      	cmp	r3, #0
 8015282:	d00c      	beq.n	801529e <tcp_bind+0xb2>
 8015284:	68bb      	ldr	r3, [r7, #8]
 8015286:	2b00      	cmp	r3, #0
 8015288:	d009      	beq.n	801529e <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 801528a:	68bb      	ldr	r3, [r7, #8]
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	2b00      	cmp	r3, #0
 8015290:	d005      	beq.n	801529e <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8015292:	69bb      	ldr	r3, [r7, #24]
 8015294:	681a      	ldr	r2, [r3, #0]
 8015296:	68bb      	ldr	r3, [r7, #8]
 8015298:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 801529a:	429a      	cmp	r2, r3
 801529c:	d102      	bne.n	80152a4 <tcp_bind+0xb8>
              return ERR_USE;
 801529e:	f06f 0307 	mvn.w	r3, #7
 80152a2:	e029      	b.n	80152f8 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80152a4:	69bb      	ldr	r3, [r7, #24]
 80152a6:	68db      	ldr	r3, [r3, #12]
 80152a8:	61bb      	str	r3, [r7, #24]
 80152aa:	69bb      	ldr	r3, [r7, #24]
 80152ac:	2b00      	cmp	r3, #0
 80152ae:	d1dd      	bne.n	801526c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80152b0:	69fb      	ldr	r3, [r7, #28]
 80152b2:	3301      	adds	r3, #1
 80152b4:	61fb      	str	r3, [r7, #28]
 80152b6:	69fa      	ldr	r2, [r7, #28]
 80152b8:	697b      	ldr	r3, [r7, #20]
 80152ba:	429a      	cmp	r2, r3
 80152bc:	dbcf      	blt.n	801525e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80152be:	68bb      	ldr	r3, [r7, #8]
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d00c      	beq.n	80152de <tcp_bind+0xf2>
 80152c4:	68bb      	ldr	r3, [r7, #8]
 80152c6:	681b      	ldr	r3, [r3, #0]
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d008      	beq.n	80152de <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80152cc:	68bb      	ldr	r3, [r7, #8]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d002      	beq.n	80152d8 <tcp_bind+0xec>
 80152d2:	68bb      	ldr	r3, [r7, #8]
 80152d4:	681b      	ldr	r3, [r3, #0]
 80152d6:	e000      	b.n	80152da <tcp_bind+0xee>
 80152d8:	2300      	movs	r3, #0
 80152da:	68fa      	ldr	r2, [r7, #12]
 80152dc:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	88fa      	ldrh	r2, [r7, #6]
 80152e2:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80152e4:	4b0c      	ldr	r3, [pc, #48]	; (8015318 <tcp_bind+0x12c>)
 80152e6:	681a      	ldr	r2, [r3, #0]
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	60da      	str	r2, [r3, #12]
 80152ec:	4a0a      	ldr	r2, [pc, #40]	; (8015318 <tcp_bind+0x12c>)
 80152ee:	68fb      	ldr	r3, [r7, #12]
 80152f0:	6013      	str	r3, [r2, #0]
 80152f2:	f005 fbd1 	bl	801aa98 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80152f6:	2300      	movs	r3, #0
}
 80152f8:	4618      	mov	r0, r3
 80152fa:	3720      	adds	r7, #32
 80152fc:	46bd      	mov	sp, r7
 80152fe:	bd80      	pop	{r7, pc}
 8015300:	08026f20 	.word	0x08026f20
 8015304:	08024d14 	.word	0x08024d14
 8015308:	08024ea8 	.word	0x08024ea8
 801530c:	08024d58 	.word	0x08024d58
 8015310:	08024ec0 	.word	0x08024ec0
 8015314:	08026ef8 	.word	0x08026ef8
 8015318:	2000e17c 	.word	0x2000e17c

0801531c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801531c:	b580      	push	{r7, lr}
 801531e:	b084      	sub	sp, #16
 8015320:	af00      	add	r7, sp, #0
 8015322:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	2b00      	cmp	r3, #0
 8015328:	d106      	bne.n	8015338 <tcp_update_rcv_ann_wnd+0x1c>
 801532a:	4b25      	ldr	r3, [pc, #148]	; (80153c0 <tcp_update_rcv_ann_wnd+0xa4>)
 801532c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8015330:	4924      	ldr	r1, [pc, #144]	; (80153c4 <tcp_update_rcv_ann_wnd+0xa8>)
 8015332:	4825      	ldr	r0, [pc, #148]	; (80153c8 <tcp_update_rcv_ann_wnd+0xac>)
 8015334:	f009 ff3a 	bl	801f1ac <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8015338:	687b      	ldr	r3, [r7, #4]
 801533a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801533c:	687a      	ldr	r2, [r7, #4]
 801533e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8015340:	4413      	add	r3, r2
 8015342:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015348:	687a      	ldr	r2, [r7, #4]
 801534a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801534c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8015350:	bf28      	it	cs
 8015352:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8015356:	b292      	uxth	r2, r2
 8015358:	4413      	add	r3, r2
 801535a:	68fa      	ldr	r2, [r7, #12]
 801535c:	1ad3      	subs	r3, r2, r3
 801535e:	2b00      	cmp	r3, #0
 8015360:	db08      	blt.n	8015374 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801536e:	68fa      	ldr	r2, [r7, #12]
 8015370:	1ad3      	subs	r3, r2, r3
 8015372:	e020      	b.n	80153b6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801537c:	1ad3      	subs	r3, r2, r3
 801537e:	2b00      	cmp	r3, #0
 8015380:	dd03      	ble.n	801538a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	2200      	movs	r2, #0
 8015386:	855a      	strh	r2, [r3, #42]	; 0x2a
 8015388:	e014      	b.n	80153b4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015392:	1ad3      	subs	r3, r2, r3
 8015394:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8015396:	68bb      	ldr	r3, [r7, #8]
 8015398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801539c:	d306      	bcc.n	80153ac <tcp_update_rcv_ann_wnd+0x90>
 801539e:	4b08      	ldr	r3, [pc, #32]	; (80153c0 <tcp_update_rcv_ann_wnd+0xa4>)
 80153a0:	f240 32b6 	movw	r2, #950	; 0x3b6
 80153a4:	4909      	ldr	r1, [pc, #36]	; (80153cc <tcp_update_rcv_ann_wnd+0xb0>)
 80153a6:	4808      	ldr	r0, [pc, #32]	; (80153c8 <tcp_update_rcv_ann_wnd+0xac>)
 80153a8:	f009 ff00 	bl	801f1ac <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80153ac:	68bb      	ldr	r3, [r7, #8]
 80153ae:	b29a      	uxth	r2, r3
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80153b4:	2300      	movs	r3, #0
  }
}
 80153b6:	4618      	mov	r0, r3
 80153b8:	3710      	adds	r7, #16
 80153ba:	46bd      	mov	sp, r7
 80153bc:	bd80      	pop	{r7, pc}
 80153be:	bf00      	nop
 80153c0:	08024d14 	.word	0x08024d14
 80153c4:	08024f70 	.word	0x08024f70
 80153c8:	08024d58 	.word	0x08024d58
 80153cc:	08024f94 	.word	0x08024f94

080153d0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80153d0:	b580      	push	{r7, lr}
 80153d2:	b084      	sub	sp, #16
 80153d4:	af00      	add	r7, sp, #0
 80153d6:	6078      	str	r0, [r7, #4]
 80153d8:	460b      	mov	r3, r1
 80153da:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	2b00      	cmp	r3, #0
 80153e0:	d107      	bne.n	80153f2 <tcp_recved+0x22>
 80153e2:	4b1f      	ldr	r3, [pc, #124]	; (8015460 <tcp_recved+0x90>)
 80153e4:	f240 32cf 	movw	r2, #975	; 0x3cf
 80153e8:	491e      	ldr	r1, [pc, #120]	; (8015464 <tcp_recved+0x94>)
 80153ea:	481f      	ldr	r0, [pc, #124]	; (8015468 <tcp_recved+0x98>)
 80153ec:	f009 fede 	bl	801f1ac <iprintf>
 80153f0:	e032      	b.n	8015458 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	7d1b      	ldrb	r3, [r3, #20]
 80153f6:	2b01      	cmp	r3, #1
 80153f8:	d106      	bne.n	8015408 <tcp_recved+0x38>
 80153fa:	4b19      	ldr	r3, [pc, #100]	; (8015460 <tcp_recved+0x90>)
 80153fc:	f240 32d2 	movw	r2, #978	; 0x3d2
 8015400:	491a      	ldr	r1, [pc, #104]	; (801546c <tcp_recved+0x9c>)
 8015402:	4819      	ldr	r0, [pc, #100]	; (8015468 <tcp_recved+0x98>)
 8015404:	f009 fed2 	bl	801f1ac <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801540c:	887b      	ldrh	r3, [r7, #2]
 801540e:	4413      	add	r3, r2
 8015410:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8015412:	89fb      	ldrh	r3, [r7, #14]
 8015414:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015418:	d804      	bhi.n	8015424 <tcp_recved+0x54>
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801541e:	89fa      	ldrh	r2, [r7, #14]
 8015420:	429a      	cmp	r2, r3
 8015422:	d204      	bcs.n	801542e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801542a:	851a      	strh	r2, [r3, #40]	; 0x28
 801542c:	e002      	b.n	8015434 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	89fa      	ldrh	r2, [r7, #14]
 8015432:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8015434:	6878      	ldr	r0, [r7, #4]
 8015436:	f7ff ff71 	bl	801531c <tcp_update_rcv_ann_wnd>
 801543a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801543c:	68bb      	ldr	r3, [r7, #8]
 801543e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8015442:	d309      	bcc.n	8015458 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	8b5b      	ldrh	r3, [r3, #26]
 8015448:	f043 0302 	orr.w	r3, r3, #2
 801544c:	b29a      	uxth	r2, r3
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015452:	6878      	ldr	r0, [r7, #4]
 8015454:	f004 fbaa 	bl	8019bac <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8015458:	3710      	adds	r7, #16
 801545a:	46bd      	mov	sp, r7
 801545c:	bd80      	pop	{r7, pc}
 801545e:	bf00      	nop
 8015460:	08024d14 	.word	0x08024d14
 8015464:	08024fb0 	.word	0x08024fb0
 8015468:	08024d58 	.word	0x08024d58
 801546c:	08024fc8 	.word	0x08024fc8

08015470 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8015470:	b480      	push	{r7}
 8015472:	b083      	sub	sp, #12
 8015474:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8015476:	2300      	movs	r3, #0
 8015478:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801547a:	4b1e      	ldr	r3, [pc, #120]	; (80154f4 <tcp_new_port+0x84>)
 801547c:	881b      	ldrh	r3, [r3, #0]
 801547e:	3301      	adds	r3, #1
 8015480:	b29a      	uxth	r2, r3
 8015482:	4b1c      	ldr	r3, [pc, #112]	; (80154f4 <tcp_new_port+0x84>)
 8015484:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8015486:	4b1b      	ldr	r3, [pc, #108]	; (80154f4 <tcp_new_port+0x84>)
 8015488:	881b      	ldrh	r3, [r3, #0]
 801548a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801548e:	4293      	cmp	r3, r2
 8015490:	d103      	bne.n	801549a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8015492:	4b18      	ldr	r3, [pc, #96]	; (80154f4 <tcp_new_port+0x84>)
 8015494:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8015498:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 801549a:	2300      	movs	r3, #0
 801549c:	71fb      	strb	r3, [r7, #7]
 801549e:	e01e      	b.n	80154de <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80154a0:	79fb      	ldrb	r3, [r7, #7]
 80154a2:	4a15      	ldr	r2, [pc, #84]	; (80154f8 <tcp_new_port+0x88>)
 80154a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	603b      	str	r3, [r7, #0]
 80154ac:	e011      	b.n	80154d2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80154ae:	683b      	ldr	r3, [r7, #0]
 80154b0:	8ada      	ldrh	r2, [r3, #22]
 80154b2:	4b10      	ldr	r3, [pc, #64]	; (80154f4 <tcp_new_port+0x84>)
 80154b4:	881b      	ldrh	r3, [r3, #0]
 80154b6:	429a      	cmp	r2, r3
 80154b8:	d108      	bne.n	80154cc <tcp_new_port+0x5c>
        n++;
 80154ba:	88bb      	ldrh	r3, [r7, #4]
 80154bc:	3301      	adds	r3, #1
 80154be:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80154c0:	88bb      	ldrh	r3, [r7, #4]
 80154c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80154c6:	d3d8      	bcc.n	801547a <tcp_new_port+0xa>
          return 0;
 80154c8:	2300      	movs	r3, #0
 80154ca:	e00d      	b.n	80154e8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80154cc:	683b      	ldr	r3, [r7, #0]
 80154ce:	68db      	ldr	r3, [r3, #12]
 80154d0:	603b      	str	r3, [r7, #0]
 80154d2:	683b      	ldr	r3, [r7, #0]
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d1ea      	bne.n	80154ae <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80154d8:	79fb      	ldrb	r3, [r7, #7]
 80154da:	3301      	adds	r3, #1
 80154dc:	71fb      	strb	r3, [r7, #7]
 80154de:	79fb      	ldrb	r3, [r7, #7]
 80154e0:	2b03      	cmp	r3, #3
 80154e2:	d9dd      	bls.n	80154a0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80154e4:	4b03      	ldr	r3, [pc, #12]	; (80154f4 <tcp_new_port+0x84>)
 80154e6:	881b      	ldrh	r3, [r3, #0]
}
 80154e8:	4618      	mov	r0, r3
 80154ea:	370c      	adds	r7, #12
 80154ec:	46bd      	mov	sp, r7
 80154ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154f2:	4770      	bx	lr
 80154f4:	200003ac 	.word	0x200003ac
 80154f8:	08026ef8 	.word	0x08026ef8

080154fc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80154fc:	b5b0      	push	{r4, r5, r7, lr}
 80154fe:	b090      	sub	sp, #64	; 0x40
 8015500:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8015502:	2300      	movs	r3, #0
 8015504:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8015508:	4b94      	ldr	r3, [pc, #592]	; (801575c <tcp_slowtmr+0x260>)
 801550a:	681b      	ldr	r3, [r3, #0]
 801550c:	3301      	adds	r3, #1
 801550e:	4a93      	ldr	r2, [pc, #588]	; (801575c <tcp_slowtmr+0x260>)
 8015510:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8015512:	4b93      	ldr	r3, [pc, #588]	; (8015760 <tcp_slowtmr+0x264>)
 8015514:	781b      	ldrb	r3, [r3, #0]
 8015516:	3301      	adds	r3, #1
 8015518:	b2da      	uxtb	r2, r3
 801551a:	4b91      	ldr	r3, [pc, #580]	; (8015760 <tcp_slowtmr+0x264>)
 801551c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801551e:	2300      	movs	r3, #0
 8015520:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8015522:	4b90      	ldr	r3, [pc, #576]	; (8015764 <tcp_slowtmr+0x268>)
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8015528:	e29f      	b.n	8015a6a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801552a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801552c:	7d1b      	ldrb	r3, [r3, #20]
 801552e:	2b00      	cmp	r3, #0
 8015530:	d106      	bne.n	8015540 <tcp_slowtmr+0x44>
 8015532:	4b8d      	ldr	r3, [pc, #564]	; (8015768 <tcp_slowtmr+0x26c>)
 8015534:	f240 42be 	movw	r2, #1214	; 0x4be
 8015538:	498c      	ldr	r1, [pc, #560]	; (801576c <tcp_slowtmr+0x270>)
 801553a:	488d      	ldr	r0, [pc, #564]	; (8015770 <tcp_slowtmr+0x274>)
 801553c:	f009 fe36 	bl	801f1ac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8015540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015542:	7d1b      	ldrb	r3, [r3, #20]
 8015544:	2b01      	cmp	r3, #1
 8015546:	d106      	bne.n	8015556 <tcp_slowtmr+0x5a>
 8015548:	4b87      	ldr	r3, [pc, #540]	; (8015768 <tcp_slowtmr+0x26c>)
 801554a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801554e:	4989      	ldr	r1, [pc, #548]	; (8015774 <tcp_slowtmr+0x278>)
 8015550:	4887      	ldr	r0, [pc, #540]	; (8015770 <tcp_slowtmr+0x274>)
 8015552:	f009 fe2b 	bl	801f1ac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8015556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015558:	7d1b      	ldrb	r3, [r3, #20]
 801555a:	2b0a      	cmp	r3, #10
 801555c:	d106      	bne.n	801556c <tcp_slowtmr+0x70>
 801555e:	4b82      	ldr	r3, [pc, #520]	; (8015768 <tcp_slowtmr+0x26c>)
 8015560:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8015564:	4984      	ldr	r1, [pc, #528]	; (8015778 <tcp_slowtmr+0x27c>)
 8015566:	4882      	ldr	r0, [pc, #520]	; (8015770 <tcp_slowtmr+0x274>)
 8015568:	f009 fe20 	bl	801f1ac <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801556c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801556e:	7f9a      	ldrb	r2, [r3, #30]
 8015570:	4b7b      	ldr	r3, [pc, #492]	; (8015760 <tcp_slowtmr+0x264>)
 8015572:	781b      	ldrb	r3, [r3, #0]
 8015574:	429a      	cmp	r2, r3
 8015576:	d105      	bne.n	8015584 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8015578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801557a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801557c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801557e:	68db      	ldr	r3, [r3, #12]
 8015580:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8015582:	e272      	b.n	8015a6a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8015584:	4b76      	ldr	r3, [pc, #472]	; (8015760 <tcp_slowtmr+0x264>)
 8015586:	781a      	ldrb	r2, [r3, #0]
 8015588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801558a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 801558c:	2300      	movs	r3, #0
 801558e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8015592:	2300      	movs	r3, #0
 8015594:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8015598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801559a:	7d1b      	ldrb	r3, [r3, #20]
 801559c:	2b02      	cmp	r3, #2
 801559e:	d10a      	bne.n	80155b6 <tcp_slowtmr+0xba>
 80155a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80155a6:	2b05      	cmp	r3, #5
 80155a8:	d905      	bls.n	80155b6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 80155aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80155ae:	3301      	adds	r3, #1
 80155b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80155b4:	e11e      	b.n	80157f4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80155b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80155bc:	2b0b      	cmp	r3, #11
 80155be:	d905      	bls.n	80155cc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80155c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80155c4:	3301      	adds	r3, #1
 80155c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80155ca:	e113      	b.n	80157f4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80155cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155ce:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d075      	beq.n	80156c2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80155d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d006      	beq.n	80155ec <tcp_slowtmr+0xf0>
 80155de:	4b62      	ldr	r3, [pc, #392]	; (8015768 <tcp_slowtmr+0x26c>)
 80155e0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80155e4:	4965      	ldr	r1, [pc, #404]	; (801577c <tcp_slowtmr+0x280>)
 80155e6:	4862      	ldr	r0, [pc, #392]	; (8015770 <tcp_slowtmr+0x274>)
 80155e8:	f009 fde0 	bl	801f1ac <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80155ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80155f0:	2b00      	cmp	r3, #0
 80155f2:	d106      	bne.n	8015602 <tcp_slowtmr+0x106>
 80155f4:	4b5c      	ldr	r3, [pc, #368]	; (8015768 <tcp_slowtmr+0x26c>)
 80155f6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80155fa:	4961      	ldr	r1, [pc, #388]	; (8015780 <tcp_slowtmr+0x284>)
 80155fc:	485c      	ldr	r0, [pc, #368]	; (8015770 <tcp_slowtmr+0x274>)
 80155fe:	f009 fdd5 	bl	801f1ac <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8015602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015604:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015608:	2b0b      	cmp	r3, #11
 801560a:	d905      	bls.n	8015618 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 801560c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015610:	3301      	adds	r3, #1
 8015612:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015616:	e0ed      	b.n	80157f4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8015618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801561a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801561e:	3b01      	subs	r3, #1
 8015620:	4a58      	ldr	r2, [pc, #352]	; (8015784 <tcp_slowtmr+0x288>)
 8015622:	5cd3      	ldrb	r3, [r2, r3]
 8015624:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8015626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015628:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801562c:	7c7a      	ldrb	r2, [r7, #17]
 801562e:	429a      	cmp	r2, r3
 8015630:	d907      	bls.n	8015642 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8015632:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015634:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8015638:	3301      	adds	r3, #1
 801563a:	b2da      	uxtb	r2, r3
 801563c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801563e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8015642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015644:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8015648:	7c7a      	ldrb	r2, [r7, #17]
 801564a:	429a      	cmp	r2, r3
 801564c:	f200 80d2 	bhi.w	80157f4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8015650:	2301      	movs	r3, #1
 8015652:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8015654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015656:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801565a:	2b00      	cmp	r3, #0
 801565c:	d108      	bne.n	8015670 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801565e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015660:	f005 f94c 	bl	801a8fc <tcp_zero_window_probe>
 8015664:	4603      	mov	r3, r0
 8015666:	2b00      	cmp	r3, #0
 8015668:	d014      	beq.n	8015694 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801566a:	2300      	movs	r3, #0
 801566c:	623b      	str	r3, [r7, #32]
 801566e:	e011      	b.n	8015694 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8015670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015672:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015676:	4619      	mov	r1, r3
 8015678:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801567a:	f004 f811 	bl	80196a0 <tcp_split_unsent_seg>
 801567e:	4603      	mov	r3, r0
 8015680:	2b00      	cmp	r3, #0
 8015682:	d107      	bne.n	8015694 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8015684:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015686:	f004 fa91 	bl	8019bac <tcp_output>
 801568a:	4603      	mov	r3, r0
 801568c:	2b00      	cmp	r3, #0
 801568e:	d101      	bne.n	8015694 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8015690:	2300      	movs	r3, #0
 8015692:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8015694:	6a3b      	ldr	r3, [r7, #32]
 8015696:	2b00      	cmp	r3, #0
 8015698:	f000 80ac 	beq.w	80157f4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 801569c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801569e:	2200      	movs	r2, #0
 80156a0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80156a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156a6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80156aa:	2b06      	cmp	r3, #6
 80156ac:	f200 80a2 	bhi.w	80157f4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80156b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156b2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80156b6:	3301      	adds	r3, #1
 80156b8:	b2da      	uxtb	r2, r3
 80156ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156bc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80156c0:	e098      	b.n	80157f4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80156c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156c4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	db0f      	blt.n	80156ec <tcp_slowtmr+0x1f0>
 80156cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156ce:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80156d2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80156d6:	4293      	cmp	r3, r2
 80156d8:	d008      	beq.n	80156ec <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80156da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80156e0:	b29b      	uxth	r3, r3
 80156e2:	3301      	adds	r3, #1
 80156e4:	b29b      	uxth	r3, r3
 80156e6:	b21a      	sxth	r2, r3
 80156e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156ea:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80156ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156ee:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80156f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156f4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80156f8:	429a      	cmp	r2, r3
 80156fa:	db7b      	blt.n	80157f4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80156fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80156fe:	f004 fd47 	bl	801a190 <tcp_rexmit_rto_prepare>
 8015702:	4603      	mov	r3, r0
 8015704:	2b00      	cmp	r3, #0
 8015706:	d007      	beq.n	8015718 <tcp_slowtmr+0x21c>
 8015708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801570a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801570c:	2b00      	cmp	r3, #0
 801570e:	d171      	bne.n	80157f4 <tcp_slowtmr+0x2f8>
 8015710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015714:	2b00      	cmp	r3, #0
 8015716:	d06d      	beq.n	80157f4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8015718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801571a:	7d1b      	ldrb	r3, [r3, #20]
 801571c:	2b02      	cmp	r3, #2
 801571e:	d03a      	beq.n	8015796 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8015720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015722:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8015726:	2b0c      	cmp	r3, #12
 8015728:	bf28      	it	cs
 801572a:	230c      	movcs	r3, #12
 801572c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801572e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015730:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015734:	10db      	asrs	r3, r3, #3
 8015736:	b21b      	sxth	r3, r3
 8015738:	461a      	mov	r2, r3
 801573a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801573c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015740:	4413      	add	r3, r2
 8015742:	7efa      	ldrb	r2, [r7, #27]
 8015744:	4910      	ldr	r1, [pc, #64]	; (8015788 <tcp_slowtmr+0x28c>)
 8015746:	5c8a      	ldrb	r2, [r1, r2]
 8015748:	4093      	lsls	r3, r2
 801574a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801574c:	697b      	ldr	r3, [r7, #20]
 801574e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8015752:	4293      	cmp	r3, r2
 8015754:	dc1a      	bgt.n	801578c <tcp_slowtmr+0x290>
 8015756:	697b      	ldr	r3, [r7, #20]
 8015758:	b21a      	sxth	r2, r3
 801575a:	e019      	b.n	8015790 <tcp_slowtmr+0x294>
 801575c:	2000e174 	.word	0x2000e174
 8015760:	20006e12 	.word	0x20006e12
 8015764:	2000e170 	.word	0x2000e170
 8015768:	08024d14 	.word	0x08024d14
 801576c:	08025058 	.word	0x08025058
 8015770:	08024d58 	.word	0x08024d58
 8015774:	08025084 	.word	0x08025084
 8015778:	080250b0 	.word	0x080250b0
 801577c:	080250e0 	.word	0x080250e0
 8015780:	08025114 	.word	0x08025114
 8015784:	08026ef0 	.word	0x08026ef0
 8015788:	08026ee0 	.word	0x08026ee0
 801578c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8015790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015792:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8015796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015798:	2200      	movs	r2, #0
 801579a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801579c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801579e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80157a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157a4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80157a8:	4293      	cmp	r3, r2
 80157aa:	bf28      	it	cs
 80157ac:	4613      	movcs	r3, r2
 80157ae:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80157b0:	8a7b      	ldrh	r3, [r7, #18]
 80157b2:	085b      	lsrs	r3, r3, #1
 80157b4:	b29a      	uxth	r2, r3
 80157b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157b8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80157bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157be:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80157c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80157c6:	005b      	lsls	r3, r3, #1
 80157c8:	b29b      	uxth	r3, r3
 80157ca:	429a      	cmp	r2, r3
 80157cc:	d206      	bcs.n	80157dc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80157ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80157d2:	005b      	lsls	r3, r3, #1
 80157d4:	b29a      	uxth	r2, r3
 80157d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157d8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80157dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157de:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80157e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157e2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80157e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157e8:	2200      	movs	r2, #0
 80157ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80157ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80157f0:	f004 fd3e 	bl	801a270 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80157f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157f6:	7d1b      	ldrb	r3, [r3, #20]
 80157f8:	2b06      	cmp	r3, #6
 80157fa:	d111      	bne.n	8015820 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80157fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157fe:	8b5b      	ldrh	r3, [r3, #26]
 8015800:	f003 0310 	and.w	r3, r3, #16
 8015804:	2b00      	cmp	r3, #0
 8015806:	d00b      	beq.n	8015820 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015808:	4b9d      	ldr	r3, [pc, #628]	; (8015a80 <tcp_slowtmr+0x584>)
 801580a:	681a      	ldr	r2, [r3, #0]
 801580c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801580e:	6a1b      	ldr	r3, [r3, #32]
 8015810:	1ad3      	subs	r3, r2, r3
 8015812:	2b28      	cmp	r3, #40	; 0x28
 8015814:	d904      	bls.n	8015820 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8015816:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801581a:	3301      	adds	r3, #1
 801581c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015822:	7a5b      	ldrb	r3, [r3, #9]
 8015824:	f003 0308 	and.w	r3, r3, #8
 8015828:	2b00      	cmp	r3, #0
 801582a:	d04c      	beq.n	80158c6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 801582c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801582e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8015830:	2b04      	cmp	r3, #4
 8015832:	d003      	beq.n	801583c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8015834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015836:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8015838:	2b07      	cmp	r3, #7
 801583a:	d144      	bne.n	80158c6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801583c:	4b90      	ldr	r3, [pc, #576]	; (8015a80 <tcp_slowtmr+0x584>)
 801583e:	681a      	ldr	r2, [r3, #0]
 8015840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015842:	6a1b      	ldr	r3, [r3, #32]
 8015844:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8015846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015848:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801584c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8015850:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8015854:	498b      	ldr	r1, [pc, #556]	; (8015a84 <tcp_slowtmr+0x588>)
 8015856:	fba1 1303 	umull	r1, r3, r1, r3
 801585a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801585c:	429a      	cmp	r2, r3
 801585e:	d90a      	bls.n	8015876 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8015860:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015864:	3301      	adds	r3, #1
 8015866:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801586a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801586e:	3301      	adds	r3, #1
 8015870:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8015874:	e027      	b.n	80158c6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8015876:	4b82      	ldr	r3, [pc, #520]	; (8015a80 <tcp_slowtmr+0x584>)
 8015878:	681a      	ldr	r2, [r3, #0]
 801587a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801587c:	6a1b      	ldr	r3, [r3, #32]
 801587e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8015880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015882:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8015886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015888:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801588c:	4618      	mov	r0, r3
 801588e:	4b7e      	ldr	r3, [pc, #504]	; (8015a88 <tcp_slowtmr+0x58c>)
 8015890:	fb03 f300 	mul.w	r3, r3, r0
 8015894:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8015896:	497b      	ldr	r1, [pc, #492]	; (8015a84 <tcp_slowtmr+0x588>)
 8015898:	fba1 1303 	umull	r1, r3, r1, r3
 801589c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801589e:	429a      	cmp	r2, r3
 80158a0:	d911      	bls.n	80158c6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 80158a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80158a4:	f004 ffea 	bl	801a87c <tcp_keepalive>
 80158a8:	4603      	mov	r3, r0
 80158aa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 80158ae:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80158b2:	2b00      	cmp	r3, #0
 80158b4:	d107      	bne.n	80158c6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 80158b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158b8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 80158bc:	3301      	adds	r3, #1
 80158be:	b2da      	uxtb	r2, r3
 80158c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158c2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 80158c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d011      	beq.n	80158f2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80158ce:	4b6c      	ldr	r3, [pc, #432]	; (8015a80 <tcp_slowtmr+0x584>)
 80158d0:	681a      	ldr	r2, [r3, #0]
 80158d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158d4:	6a1b      	ldr	r3, [r3, #32]
 80158d6:	1ad2      	subs	r2, r2, r3
 80158d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158da:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80158de:	4619      	mov	r1, r3
 80158e0:	460b      	mov	r3, r1
 80158e2:	005b      	lsls	r3, r3, #1
 80158e4:	440b      	add	r3, r1
 80158e6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80158e8:	429a      	cmp	r2, r3
 80158ea:	d302      	bcc.n	80158f2 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80158ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80158ee:	f000 fea9 	bl	8016644 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80158f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158f4:	7d1b      	ldrb	r3, [r3, #20]
 80158f6:	2b03      	cmp	r3, #3
 80158f8:	d10b      	bne.n	8015912 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80158fa:	4b61      	ldr	r3, [pc, #388]	; (8015a80 <tcp_slowtmr+0x584>)
 80158fc:	681a      	ldr	r2, [r3, #0]
 80158fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015900:	6a1b      	ldr	r3, [r3, #32]
 8015902:	1ad3      	subs	r3, r2, r3
 8015904:	2b28      	cmp	r3, #40	; 0x28
 8015906:	d904      	bls.n	8015912 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8015908:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801590c:	3301      	adds	r3, #1
 801590e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8015912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015914:	7d1b      	ldrb	r3, [r3, #20]
 8015916:	2b09      	cmp	r3, #9
 8015918:	d10b      	bne.n	8015932 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801591a:	4b59      	ldr	r3, [pc, #356]	; (8015a80 <tcp_slowtmr+0x584>)
 801591c:	681a      	ldr	r2, [r3, #0]
 801591e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015920:	6a1b      	ldr	r3, [r3, #32]
 8015922:	1ad3      	subs	r3, r2, r3
 8015924:	2bf0      	cmp	r3, #240	; 0xf0
 8015926:	d904      	bls.n	8015932 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8015928:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801592c:	3301      	adds	r3, #1
 801592e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8015932:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015936:	2b00      	cmp	r3, #0
 8015938:	d060      	beq.n	80159fc <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801593a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801593c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015940:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8015942:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015944:	f000 fcca 	bl	80162dc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8015948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801594a:	2b00      	cmp	r3, #0
 801594c:	d010      	beq.n	8015970 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801594e:	4b4f      	ldr	r3, [pc, #316]	; (8015a8c <tcp_slowtmr+0x590>)
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015954:	429a      	cmp	r2, r3
 8015956:	d106      	bne.n	8015966 <tcp_slowtmr+0x46a>
 8015958:	4b4d      	ldr	r3, [pc, #308]	; (8015a90 <tcp_slowtmr+0x594>)
 801595a:	f240 526d 	movw	r2, #1389	; 0x56d
 801595e:	494d      	ldr	r1, [pc, #308]	; (8015a94 <tcp_slowtmr+0x598>)
 8015960:	484d      	ldr	r0, [pc, #308]	; (8015a98 <tcp_slowtmr+0x59c>)
 8015962:	f009 fc23 	bl	801f1ac <iprintf>
        prev->next = pcb->next;
 8015966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015968:	68da      	ldr	r2, [r3, #12]
 801596a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801596c:	60da      	str	r2, [r3, #12]
 801596e:	e00f      	b.n	8015990 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8015970:	4b46      	ldr	r3, [pc, #280]	; (8015a8c <tcp_slowtmr+0x590>)
 8015972:	681b      	ldr	r3, [r3, #0]
 8015974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015976:	429a      	cmp	r2, r3
 8015978:	d006      	beq.n	8015988 <tcp_slowtmr+0x48c>
 801597a:	4b45      	ldr	r3, [pc, #276]	; (8015a90 <tcp_slowtmr+0x594>)
 801597c:	f240 5271 	movw	r2, #1393	; 0x571
 8015980:	4946      	ldr	r1, [pc, #280]	; (8015a9c <tcp_slowtmr+0x5a0>)
 8015982:	4845      	ldr	r0, [pc, #276]	; (8015a98 <tcp_slowtmr+0x59c>)
 8015984:	f009 fc12 	bl	801f1ac <iprintf>
        tcp_active_pcbs = pcb->next;
 8015988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801598a:	68db      	ldr	r3, [r3, #12]
 801598c:	4a3f      	ldr	r2, [pc, #252]	; (8015a8c <tcp_slowtmr+0x590>)
 801598e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8015990:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8015994:	2b00      	cmp	r3, #0
 8015996:	d013      	beq.n	80159c0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8015998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801599a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801599c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801599e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80159a0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 80159a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159a4:	3304      	adds	r3, #4
 80159a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80159a8:	8ad2      	ldrh	r2, [r2, #22]
 80159aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80159ac:	8b09      	ldrh	r1, [r1, #24]
 80159ae:	9102      	str	r1, [sp, #8]
 80159b0:	9201      	str	r2, [sp, #4]
 80159b2:	9300      	str	r3, [sp, #0]
 80159b4:	462b      	mov	r3, r5
 80159b6:	4622      	mov	r2, r4
 80159b8:	4601      	mov	r1, r0
 80159ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80159bc:	f004 feaa 	bl	801a714 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 80159c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159c2:	691b      	ldr	r3, [r3, #16]
 80159c4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 80159c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159c8:	7d1b      	ldrb	r3, [r3, #20]
 80159ca:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 80159cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159ce:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 80159d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159d2:	68db      	ldr	r3, [r3, #12]
 80159d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80159d6:	6838      	ldr	r0, [r7, #0]
 80159d8:	f7ff f8b8 	bl	8014b4c <tcp_free>

      tcp_active_pcbs_changed = 0;
 80159dc:	4b30      	ldr	r3, [pc, #192]	; (8015aa0 <tcp_slowtmr+0x5a4>)
 80159de:	2200      	movs	r2, #0
 80159e0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80159e2:	68fb      	ldr	r3, [r7, #12]
 80159e4:	2b00      	cmp	r3, #0
 80159e6:	d004      	beq.n	80159f2 <tcp_slowtmr+0x4f6>
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	f06f 010c 	mvn.w	r1, #12
 80159ee:	68b8      	ldr	r0, [r7, #8]
 80159f0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80159f2:	4b2b      	ldr	r3, [pc, #172]	; (8015aa0 <tcp_slowtmr+0x5a4>)
 80159f4:	781b      	ldrb	r3, [r3, #0]
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d037      	beq.n	8015a6a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 80159fa:	e590      	b.n	801551e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80159fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159fe:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8015a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a02:	68db      	ldr	r3, [r3, #12]
 8015a04:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8015a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a08:	7f1b      	ldrb	r3, [r3, #28]
 8015a0a:	3301      	adds	r3, #1
 8015a0c:	b2da      	uxtb	r2, r3
 8015a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a10:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8015a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a14:	7f1a      	ldrb	r2, [r3, #28]
 8015a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a18:	7f5b      	ldrb	r3, [r3, #29]
 8015a1a:	429a      	cmp	r2, r3
 8015a1c:	d325      	bcc.n	8015a6a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8015a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a20:	2200      	movs	r2, #0
 8015a22:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8015a24:	4b1e      	ldr	r3, [pc, #120]	; (8015aa0 <tcp_slowtmr+0x5a4>)
 8015a26:	2200      	movs	r2, #0
 8015a28:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8015a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015a30:	2b00      	cmp	r3, #0
 8015a32:	d00b      	beq.n	8015a4c <tcp_slowtmr+0x550>
 8015a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015a3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015a3c:	6912      	ldr	r2, [r2, #16]
 8015a3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015a40:	4610      	mov	r0, r2
 8015a42:	4798      	blx	r3
 8015a44:	4603      	mov	r3, r0
 8015a46:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8015a4a:	e002      	b.n	8015a52 <tcp_slowtmr+0x556>
 8015a4c:	2300      	movs	r3, #0
 8015a4e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8015a52:	4b13      	ldr	r3, [pc, #76]	; (8015aa0 <tcp_slowtmr+0x5a4>)
 8015a54:	781b      	ldrb	r3, [r3, #0]
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d000      	beq.n	8015a5c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8015a5a:	e560      	b.n	801551e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8015a5c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d102      	bne.n	8015a6a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8015a64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015a66:	f004 f8a1 	bl	8019bac <tcp_output>
  while (pcb != NULL) {
 8015a6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	f47f ad5c 	bne.w	801552a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8015a72:	2300      	movs	r3, #0
 8015a74:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8015a76:	4b0b      	ldr	r3, [pc, #44]	; (8015aa4 <tcp_slowtmr+0x5a8>)
 8015a78:	681b      	ldr	r3, [r3, #0]
 8015a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8015a7c:	e067      	b.n	8015b4e <tcp_slowtmr+0x652>
 8015a7e:	bf00      	nop
 8015a80:	2000e174 	.word	0x2000e174
 8015a84:	10624dd3 	.word	0x10624dd3
 8015a88:	000124f8 	.word	0x000124f8
 8015a8c:	2000e170 	.word	0x2000e170
 8015a90:	08024d14 	.word	0x08024d14
 8015a94:	0802514c 	.word	0x0802514c
 8015a98:	08024d58 	.word	0x08024d58
 8015a9c:	08025178 	.word	0x08025178
 8015aa0:	2000e16c 	.word	0x2000e16c
 8015aa4:	2000e180 	.word	0x2000e180
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8015aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015aaa:	7d1b      	ldrb	r3, [r3, #20]
 8015aac:	2b0a      	cmp	r3, #10
 8015aae:	d006      	beq.n	8015abe <tcp_slowtmr+0x5c2>
 8015ab0:	4b2b      	ldr	r3, [pc, #172]	; (8015b60 <tcp_slowtmr+0x664>)
 8015ab2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8015ab6:	492b      	ldr	r1, [pc, #172]	; (8015b64 <tcp_slowtmr+0x668>)
 8015ab8:	482b      	ldr	r0, [pc, #172]	; (8015b68 <tcp_slowtmr+0x66c>)
 8015aba:	f009 fb77 	bl	801f1ac <iprintf>
    pcb_remove = 0;
 8015abe:	2300      	movs	r3, #0
 8015ac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8015ac4:	4b29      	ldr	r3, [pc, #164]	; (8015b6c <tcp_slowtmr+0x670>)
 8015ac6:	681a      	ldr	r2, [r3, #0]
 8015ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015aca:	6a1b      	ldr	r3, [r3, #32]
 8015acc:	1ad3      	subs	r3, r2, r3
 8015ace:	2bf0      	cmp	r3, #240	; 0xf0
 8015ad0:	d904      	bls.n	8015adc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8015ad2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ad6:	3301      	adds	r3, #1
 8015ad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8015adc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015ae0:	2b00      	cmp	r3, #0
 8015ae2:	d02f      	beq.n	8015b44 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8015ae4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015ae6:	f000 fbf9 	bl	80162dc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8015aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d010      	beq.n	8015b12 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8015af0:	4b1f      	ldr	r3, [pc, #124]	; (8015b70 <tcp_slowtmr+0x674>)
 8015af2:	681b      	ldr	r3, [r3, #0]
 8015af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015af6:	429a      	cmp	r2, r3
 8015af8:	d106      	bne.n	8015b08 <tcp_slowtmr+0x60c>
 8015afa:	4b19      	ldr	r3, [pc, #100]	; (8015b60 <tcp_slowtmr+0x664>)
 8015afc:	f240 52af 	movw	r2, #1455	; 0x5af
 8015b00:	491c      	ldr	r1, [pc, #112]	; (8015b74 <tcp_slowtmr+0x678>)
 8015b02:	4819      	ldr	r0, [pc, #100]	; (8015b68 <tcp_slowtmr+0x66c>)
 8015b04:	f009 fb52 	bl	801f1ac <iprintf>
        prev->next = pcb->next;
 8015b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b0a:	68da      	ldr	r2, [r3, #12]
 8015b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b0e:	60da      	str	r2, [r3, #12]
 8015b10:	e00f      	b.n	8015b32 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8015b12:	4b17      	ldr	r3, [pc, #92]	; (8015b70 <tcp_slowtmr+0x674>)
 8015b14:	681b      	ldr	r3, [r3, #0]
 8015b16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015b18:	429a      	cmp	r2, r3
 8015b1a:	d006      	beq.n	8015b2a <tcp_slowtmr+0x62e>
 8015b1c:	4b10      	ldr	r3, [pc, #64]	; (8015b60 <tcp_slowtmr+0x664>)
 8015b1e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8015b22:	4915      	ldr	r1, [pc, #84]	; (8015b78 <tcp_slowtmr+0x67c>)
 8015b24:	4810      	ldr	r0, [pc, #64]	; (8015b68 <tcp_slowtmr+0x66c>)
 8015b26:	f009 fb41 	bl	801f1ac <iprintf>
        tcp_tw_pcbs = pcb->next;
 8015b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b2c:	68db      	ldr	r3, [r3, #12]
 8015b2e:	4a10      	ldr	r2, [pc, #64]	; (8015b70 <tcp_slowtmr+0x674>)
 8015b30:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8015b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b34:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8015b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b38:	68db      	ldr	r3, [r3, #12]
 8015b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8015b3c:	69f8      	ldr	r0, [r7, #28]
 8015b3e:	f7ff f805 	bl	8014b4c <tcp_free>
 8015b42:	e004      	b.n	8015b4e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8015b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b46:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8015b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b4a:	68db      	ldr	r3, [r3, #12]
 8015b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8015b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d1a9      	bne.n	8015aa8 <tcp_slowtmr+0x5ac>
    }
  }
}
 8015b54:	bf00      	nop
 8015b56:	bf00      	nop
 8015b58:	3730      	adds	r7, #48	; 0x30
 8015b5a:	46bd      	mov	sp, r7
 8015b5c:	bdb0      	pop	{r4, r5, r7, pc}
 8015b5e:	bf00      	nop
 8015b60:	08024d14 	.word	0x08024d14
 8015b64:	080251a4 	.word	0x080251a4
 8015b68:	08024d58 	.word	0x08024d58
 8015b6c:	2000e174 	.word	0x2000e174
 8015b70:	2000e180 	.word	0x2000e180
 8015b74:	080251d4 	.word	0x080251d4
 8015b78:	080251fc 	.word	0x080251fc

08015b7c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8015b7c:	b580      	push	{r7, lr}
 8015b7e:	b082      	sub	sp, #8
 8015b80:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8015b82:	4b2d      	ldr	r3, [pc, #180]	; (8015c38 <tcp_fasttmr+0xbc>)
 8015b84:	781b      	ldrb	r3, [r3, #0]
 8015b86:	3301      	adds	r3, #1
 8015b88:	b2da      	uxtb	r2, r3
 8015b8a:	4b2b      	ldr	r3, [pc, #172]	; (8015c38 <tcp_fasttmr+0xbc>)
 8015b8c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8015b8e:	4b2b      	ldr	r3, [pc, #172]	; (8015c3c <tcp_fasttmr+0xc0>)
 8015b90:	681b      	ldr	r3, [r3, #0]
 8015b92:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8015b94:	e048      	b.n	8015c28 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8015b96:	687b      	ldr	r3, [r7, #4]
 8015b98:	7f9a      	ldrb	r2, [r3, #30]
 8015b9a:	4b27      	ldr	r3, [pc, #156]	; (8015c38 <tcp_fasttmr+0xbc>)
 8015b9c:	781b      	ldrb	r3, [r3, #0]
 8015b9e:	429a      	cmp	r2, r3
 8015ba0:	d03f      	beq.n	8015c22 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8015ba2:	4b25      	ldr	r3, [pc, #148]	; (8015c38 <tcp_fasttmr+0xbc>)
 8015ba4:	781a      	ldrb	r2, [r3, #0]
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	8b5b      	ldrh	r3, [r3, #26]
 8015bae:	f003 0301 	and.w	r3, r3, #1
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d010      	beq.n	8015bd8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	8b5b      	ldrh	r3, [r3, #26]
 8015bba:	f043 0302 	orr.w	r3, r3, #2
 8015bbe:	b29a      	uxth	r2, r3
 8015bc0:	687b      	ldr	r3, [r7, #4]
 8015bc2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8015bc4:	6878      	ldr	r0, [r7, #4]
 8015bc6:	f003 fff1 	bl	8019bac <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	8b5b      	ldrh	r3, [r3, #26]
 8015bce:	f023 0303 	bic.w	r3, r3, #3
 8015bd2:	b29a      	uxth	r2, r3
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	8b5b      	ldrh	r3, [r3, #26]
 8015bdc:	f003 0308 	and.w	r3, r3, #8
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d009      	beq.n	8015bf8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	8b5b      	ldrh	r3, [r3, #26]
 8015be8:	f023 0308 	bic.w	r3, r3, #8
 8015bec:	b29a      	uxth	r2, r3
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8015bf2:	6878      	ldr	r0, [r7, #4]
 8015bf4:	f7ff f93e 	bl	8014e74 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	68db      	ldr	r3, [r3, #12]
 8015bfc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015c02:	2b00      	cmp	r3, #0
 8015c04:	d00a      	beq.n	8015c1c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8015c06:	4b0e      	ldr	r3, [pc, #56]	; (8015c40 <tcp_fasttmr+0xc4>)
 8015c08:	2200      	movs	r2, #0
 8015c0a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8015c0c:	6878      	ldr	r0, [r7, #4]
 8015c0e:	f000 f819 	bl	8015c44 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8015c12:	4b0b      	ldr	r3, [pc, #44]	; (8015c40 <tcp_fasttmr+0xc4>)
 8015c14:	781b      	ldrb	r3, [r3, #0]
 8015c16:	2b00      	cmp	r3, #0
 8015c18:	d000      	beq.n	8015c1c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8015c1a:	e7b8      	b.n	8015b8e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8015c1c:	683b      	ldr	r3, [r7, #0]
 8015c1e:	607b      	str	r3, [r7, #4]
 8015c20:	e002      	b.n	8015c28 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	68db      	ldr	r3, [r3, #12]
 8015c26:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d1b3      	bne.n	8015b96 <tcp_fasttmr+0x1a>
    }
  }
}
 8015c2e:	bf00      	nop
 8015c30:	bf00      	nop
 8015c32:	3708      	adds	r7, #8
 8015c34:	46bd      	mov	sp, r7
 8015c36:	bd80      	pop	{r7, pc}
 8015c38:	20006e12 	.word	0x20006e12
 8015c3c:	2000e170 	.word	0x2000e170
 8015c40:	2000e16c 	.word	0x2000e16c

08015c44 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8015c44:	b590      	push	{r4, r7, lr}
 8015c46:	b085      	sub	sp, #20
 8015c48:	af00      	add	r7, sp, #0
 8015c4a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d109      	bne.n	8015c66 <tcp_process_refused_data+0x22>
 8015c52:	4b37      	ldr	r3, [pc, #220]	; (8015d30 <tcp_process_refused_data+0xec>)
 8015c54:	f240 6209 	movw	r2, #1545	; 0x609
 8015c58:	4936      	ldr	r1, [pc, #216]	; (8015d34 <tcp_process_refused_data+0xf0>)
 8015c5a:	4837      	ldr	r0, [pc, #220]	; (8015d38 <tcp_process_refused_data+0xf4>)
 8015c5c:	f009 faa6 	bl	801f1ac <iprintf>
 8015c60:	f06f 030f 	mvn.w	r3, #15
 8015c64:	e060      	b.n	8015d28 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015c6a:	7b5b      	ldrb	r3, [r3, #13]
 8015c6c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015c72:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	2200      	movs	r2, #0
 8015c78:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d00b      	beq.n	8015c9c <tcp_process_refused_data+0x58>
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	6918      	ldr	r0, [r3, #16]
 8015c8e:	2300      	movs	r3, #0
 8015c90:	68ba      	ldr	r2, [r7, #8]
 8015c92:	6879      	ldr	r1, [r7, #4]
 8015c94:	47a0      	blx	r4
 8015c96:	4603      	mov	r3, r0
 8015c98:	73fb      	strb	r3, [r7, #15]
 8015c9a:	e007      	b.n	8015cac <tcp_process_refused_data+0x68>
 8015c9c:	2300      	movs	r3, #0
 8015c9e:	68ba      	ldr	r2, [r7, #8]
 8015ca0:	6879      	ldr	r1, [r7, #4]
 8015ca2:	2000      	movs	r0, #0
 8015ca4:	f000 f8a4 	bl	8015df0 <tcp_recv_null>
 8015ca8:	4603      	mov	r3, r0
 8015caa:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8015cac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d12a      	bne.n	8015d0a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8015cb4:	7bbb      	ldrb	r3, [r7, #14]
 8015cb6:	f003 0320 	and.w	r3, r3, #32
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d033      	beq.n	8015d26 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8015cbe:	687b      	ldr	r3, [r7, #4]
 8015cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015cc2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015cc6:	d005      	beq.n	8015cd4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015ccc:	3301      	adds	r3, #1
 8015cce:	b29a      	uxth	r2, r3
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015cda:	2b00      	cmp	r3, #0
 8015cdc:	d00b      	beq.n	8015cf6 <tcp_process_refused_data+0xb2>
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	6918      	ldr	r0, [r3, #16]
 8015ce8:	2300      	movs	r3, #0
 8015cea:	2200      	movs	r2, #0
 8015cec:	6879      	ldr	r1, [r7, #4]
 8015cee:	47a0      	blx	r4
 8015cf0:	4603      	mov	r3, r0
 8015cf2:	73fb      	strb	r3, [r7, #15]
 8015cf4:	e001      	b.n	8015cfa <tcp_process_refused_data+0xb6>
 8015cf6:	2300      	movs	r3, #0
 8015cf8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8015cfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015cfe:	f113 0f0d 	cmn.w	r3, #13
 8015d02:	d110      	bne.n	8015d26 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8015d04:	f06f 030c 	mvn.w	r3, #12
 8015d08:	e00e      	b.n	8015d28 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8015d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015d0e:	f113 0f0d 	cmn.w	r3, #13
 8015d12:	d102      	bne.n	8015d1a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8015d14:	f06f 030c 	mvn.w	r3, #12
 8015d18:	e006      	b.n	8015d28 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	68ba      	ldr	r2, [r7, #8]
 8015d1e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8015d20:	f06f 0304 	mvn.w	r3, #4
 8015d24:	e000      	b.n	8015d28 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8015d26:	2300      	movs	r3, #0
}
 8015d28:	4618      	mov	r0, r3
 8015d2a:	3714      	adds	r7, #20
 8015d2c:	46bd      	mov	sp, r7
 8015d2e:	bd90      	pop	{r4, r7, pc}
 8015d30:	08024d14 	.word	0x08024d14
 8015d34:	08025224 	.word	0x08025224
 8015d38:	08024d58 	.word	0x08024d58

08015d3c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8015d3c:	b580      	push	{r7, lr}
 8015d3e:	b084      	sub	sp, #16
 8015d40:	af00      	add	r7, sp, #0
 8015d42:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8015d44:	e007      	b.n	8015d56 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	681b      	ldr	r3, [r3, #0]
 8015d4a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8015d4c:	6878      	ldr	r0, [r7, #4]
 8015d4e:	f000 f80a 	bl	8015d66 <tcp_seg_free>
    seg = next;
 8015d52:	68fb      	ldr	r3, [r7, #12]
 8015d54:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	2b00      	cmp	r3, #0
 8015d5a:	d1f4      	bne.n	8015d46 <tcp_segs_free+0xa>
  }
}
 8015d5c:	bf00      	nop
 8015d5e:	bf00      	nop
 8015d60:	3710      	adds	r7, #16
 8015d62:	46bd      	mov	sp, r7
 8015d64:	bd80      	pop	{r7, pc}

08015d66 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8015d66:	b580      	push	{r7, lr}
 8015d68:	b082      	sub	sp, #8
 8015d6a:	af00      	add	r7, sp, #0
 8015d6c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8015d6e:	687b      	ldr	r3, [r7, #4]
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d00c      	beq.n	8015d8e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	685b      	ldr	r3, [r3, #4]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d004      	beq.n	8015d86 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	685b      	ldr	r3, [r3, #4]
 8015d80:	4618      	mov	r0, r3
 8015d82:	f7fe fc27 	bl	80145d4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8015d86:	6879      	ldr	r1, [r7, #4]
 8015d88:	2003      	movs	r0, #3
 8015d8a:	f7fd fde3 	bl	8013954 <memp_free>
  }
}
 8015d8e:	bf00      	nop
 8015d90:	3708      	adds	r7, #8
 8015d92:	46bd      	mov	sp, r7
 8015d94:	bd80      	pop	{r7, pc}
	...

08015d98 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8015d98:	b580      	push	{r7, lr}
 8015d9a:	b084      	sub	sp, #16
 8015d9c:	af00      	add	r7, sp, #0
 8015d9e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8015da0:	687b      	ldr	r3, [r7, #4]
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d106      	bne.n	8015db4 <tcp_seg_copy+0x1c>
 8015da6:	4b0f      	ldr	r3, [pc, #60]	; (8015de4 <tcp_seg_copy+0x4c>)
 8015da8:	f240 6282 	movw	r2, #1666	; 0x682
 8015dac:	490e      	ldr	r1, [pc, #56]	; (8015de8 <tcp_seg_copy+0x50>)
 8015dae:	480f      	ldr	r0, [pc, #60]	; (8015dec <tcp_seg_copy+0x54>)
 8015db0:	f009 f9fc 	bl	801f1ac <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8015db4:	2003      	movs	r0, #3
 8015db6:	f7fd fd7b 	bl	80138b0 <memp_malloc>
 8015dba:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8015dbc:	68fb      	ldr	r3, [r7, #12]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d101      	bne.n	8015dc6 <tcp_seg_copy+0x2e>
    return NULL;
 8015dc2:	2300      	movs	r3, #0
 8015dc4:	e00a      	b.n	8015ddc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8015dc6:	2210      	movs	r2, #16
 8015dc8:	6879      	ldr	r1, [r7, #4]
 8015dca:	68f8      	ldr	r0, [r7, #12]
 8015dcc:	f008 fa9a 	bl	801e304 <memcpy>
  pbuf_ref(cseg->p);
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	685b      	ldr	r3, [r3, #4]
 8015dd4:	4618      	mov	r0, r3
 8015dd6:	f7fe fca3 	bl	8014720 <pbuf_ref>
  return cseg;
 8015dda:	68fb      	ldr	r3, [r7, #12]
}
 8015ddc:	4618      	mov	r0, r3
 8015dde:	3710      	adds	r7, #16
 8015de0:	46bd      	mov	sp, r7
 8015de2:	bd80      	pop	{r7, pc}
 8015de4:	08024d14 	.word	0x08024d14
 8015de8:	08025268 	.word	0x08025268
 8015dec:	08024d58 	.word	0x08024d58

08015df0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8015df0:	b580      	push	{r7, lr}
 8015df2:	b084      	sub	sp, #16
 8015df4:	af00      	add	r7, sp, #0
 8015df6:	60f8      	str	r0, [r7, #12]
 8015df8:	60b9      	str	r1, [r7, #8]
 8015dfa:	607a      	str	r2, [r7, #4]
 8015dfc:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8015dfe:	68bb      	ldr	r3, [r7, #8]
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d109      	bne.n	8015e18 <tcp_recv_null+0x28>
 8015e04:	4b12      	ldr	r3, [pc, #72]	; (8015e50 <tcp_recv_null+0x60>)
 8015e06:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8015e0a:	4912      	ldr	r1, [pc, #72]	; (8015e54 <tcp_recv_null+0x64>)
 8015e0c:	4812      	ldr	r0, [pc, #72]	; (8015e58 <tcp_recv_null+0x68>)
 8015e0e:	f009 f9cd 	bl	801f1ac <iprintf>
 8015e12:	f06f 030f 	mvn.w	r3, #15
 8015e16:	e016      	b.n	8015e46 <tcp_recv_null+0x56>

  if (p != NULL) {
 8015e18:	687b      	ldr	r3, [r7, #4]
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d009      	beq.n	8015e32 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	891b      	ldrh	r3, [r3, #8]
 8015e22:	4619      	mov	r1, r3
 8015e24:	68b8      	ldr	r0, [r7, #8]
 8015e26:	f7ff fad3 	bl	80153d0 <tcp_recved>
    pbuf_free(p);
 8015e2a:	6878      	ldr	r0, [r7, #4]
 8015e2c:	f7fe fbd2 	bl	80145d4 <pbuf_free>
 8015e30:	e008      	b.n	8015e44 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8015e32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d104      	bne.n	8015e44 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8015e3a:	68b8      	ldr	r0, [r7, #8]
 8015e3c:	f7ff f884 	bl	8014f48 <tcp_close>
 8015e40:	4603      	mov	r3, r0
 8015e42:	e000      	b.n	8015e46 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8015e44:	2300      	movs	r3, #0
}
 8015e46:	4618      	mov	r0, r3
 8015e48:	3710      	adds	r7, #16
 8015e4a:	46bd      	mov	sp, r7
 8015e4c:	bd80      	pop	{r7, pc}
 8015e4e:	bf00      	nop
 8015e50:	08024d14 	.word	0x08024d14
 8015e54:	08025284 	.word	0x08025284
 8015e58:	08024d58 	.word	0x08024d58

08015e5c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8015e5c:	b580      	push	{r7, lr}
 8015e5e:	b086      	sub	sp, #24
 8015e60:	af00      	add	r7, sp, #0
 8015e62:	4603      	mov	r3, r0
 8015e64:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8015e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	db01      	blt.n	8015e72 <tcp_kill_prio+0x16>
 8015e6e:	79fb      	ldrb	r3, [r7, #7]
 8015e70:	e000      	b.n	8015e74 <tcp_kill_prio+0x18>
 8015e72:	237f      	movs	r3, #127	; 0x7f
 8015e74:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8015e76:	7afb      	ldrb	r3, [r7, #11]
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d034      	beq.n	8015ee6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8015e7c:	7afb      	ldrb	r3, [r7, #11]
 8015e7e:	3b01      	subs	r3, #1
 8015e80:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8015e82:	2300      	movs	r3, #0
 8015e84:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015e86:	2300      	movs	r3, #0
 8015e88:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015e8a:	4b19      	ldr	r3, [pc, #100]	; (8015ef0 <tcp_kill_prio+0x94>)
 8015e8c:	681b      	ldr	r3, [r3, #0]
 8015e8e:	617b      	str	r3, [r7, #20]
 8015e90:	e01f      	b.n	8015ed2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8015e92:	697b      	ldr	r3, [r7, #20]
 8015e94:	7d5b      	ldrb	r3, [r3, #21]
 8015e96:	7afa      	ldrb	r2, [r7, #11]
 8015e98:	429a      	cmp	r2, r3
 8015e9a:	d80c      	bhi.n	8015eb6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015e9c:	697b      	ldr	r3, [r7, #20]
 8015e9e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8015ea0:	7afa      	ldrb	r2, [r7, #11]
 8015ea2:	429a      	cmp	r2, r3
 8015ea4:	d112      	bne.n	8015ecc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015ea6:	4b13      	ldr	r3, [pc, #76]	; (8015ef4 <tcp_kill_prio+0x98>)
 8015ea8:	681a      	ldr	r2, [r3, #0]
 8015eaa:	697b      	ldr	r3, [r7, #20]
 8015eac:	6a1b      	ldr	r3, [r3, #32]
 8015eae:	1ad3      	subs	r3, r2, r3
 8015eb0:	68fa      	ldr	r2, [r7, #12]
 8015eb2:	429a      	cmp	r2, r3
 8015eb4:	d80a      	bhi.n	8015ecc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8015eb6:	4b0f      	ldr	r3, [pc, #60]	; (8015ef4 <tcp_kill_prio+0x98>)
 8015eb8:	681a      	ldr	r2, [r3, #0]
 8015eba:	697b      	ldr	r3, [r7, #20]
 8015ebc:	6a1b      	ldr	r3, [r3, #32]
 8015ebe:	1ad3      	subs	r3, r2, r3
 8015ec0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8015ec2:	697b      	ldr	r3, [r7, #20]
 8015ec4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8015ec6:	697b      	ldr	r3, [r7, #20]
 8015ec8:	7d5b      	ldrb	r3, [r3, #21]
 8015eca:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015ecc:	697b      	ldr	r3, [r7, #20]
 8015ece:	68db      	ldr	r3, [r3, #12]
 8015ed0:	617b      	str	r3, [r7, #20]
 8015ed2:	697b      	ldr	r3, [r7, #20]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d1dc      	bne.n	8015e92 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8015ed8:	693b      	ldr	r3, [r7, #16]
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d004      	beq.n	8015ee8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8015ede:	6938      	ldr	r0, [r7, #16]
 8015ee0:	f7ff f978 	bl	80151d4 <tcp_abort>
 8015ee4:	e000      	b.n	8015ee8 <tcp_kill_prio+0x8c>
    return;
 8015ee6:	bf00      	nop
  }
}
 8015ee8:	3718      	adds	r7, #24
 8015eea:	46bd      	mov	sp, r7
 8015eec:	bd80      	pop	{r7, pc}
 8015eee:	bf00      	nop
 8015ef0:	2000e170 	.word	0x2000e170
 8015ef4:	2000e174 	.word	0x2000e174

08015ef8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8015ef8:	b580      	push	{r7, lr}
 8015efa:	b086      	sub	sp, #24
 8015efc:	af00      	add	r7, sp, #0
 8015efe:	4603      	mov	r3, r0
 8015f00:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8015f02:	79fb      	ldrb	r3, [r7, #7]
 8015f04:	2b08      	cmp	r3, #8
 8015f06:	d009      	beq.n	8015f1c <tcp_kill_state+0x24>
 8015f08:	79fb      	ldrb	r3, [r7, #7]
 8015f0a:	2b09      	cmp	r3, #9
 8015f0c:	d006      	beq.n	8015f1c <tcp_kill_state+0x24>
 8015f0e:	4b1a      	ldr	r3, [pc, #104]	; (8015f78 <tcp_kill_state+0x80>)
 8015f10:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8015f14:	4919      	ldr	r1, [pc, #100]	; (8015f7c <tcp_kill_state+0x84>)
 8015f16:	481a      	ldr	r0, [pc, #104]	; (8015f80 <tcp_kill_state+0x88>)
 8015f18:	f009 f948 	bl	801f1ac <iprintf>

  inactivity = 0;
 8015f1c:	2300      	movs	r3, #0
 8015f1e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015f20:	2300      	movs	r3, #0
 8015f22:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015f24:	4b17      	ldr	r3, [pc, #92]	; (8015f84 <tcp_kill_state+0x8c>)
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	617b      	str	r3, [r7, #20]
 8015f2a:	e017      	b.n	8015f5c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8015f2c:	697b      	ldr	r3, [r7, #20]
 8015f2e:	7d1b      	ldrb	r3, [r3, #20]
 8015f30:	79fa      	ldrb	r2, [r7, #7]
 8015f32:	429a      	cmp	r2, r3
 8015f34:	d10f      	bne.n	8015f56 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8015f36:	4b14      	ldr	r3, [pc, #80]	; (8015f88 <tcp_kill_state+0x90>)
 8015f38:	681a      	ldr	r2, [r3, #0]
 8015f3a:	697b      	ldr	r3, [r7, #20]
 8015f3c:	6a1b      	ldr	r3, [r3, #32]
 8015f3e:	1ad3      	subs	r3, r2, r3
 8015f40:	68fa      	ldr	r2, [r7, #12]
 8015f42:	429a      	cmp	r2, r3
 8015f44:	d807      	bhi.n	8015f56 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8015f46:	4b10      	ldr	r3, [pc, #64]	; (8015f88 <tcp_kill_state+0x90>)
 8015f48:	681a      	ldr	r2, [r3, #0]
 8015f4a:	697b      	ldr	r3, [r7, #20]
 8015f4c:	6a1b      	ldr	r3, [r3, #32]
 8015f4e:	1ad3      	subs	r3, r2, r3
 8015f50:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8015f52:	697b      	ldr	r3, [r7, #20]
 8015f54:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015f56:	697b      	ldr	r3, [r7, #20]
 8015f58:	68db      	ldr	r3, [r3, #12]
 8015f5a:	617b      	str	r3, [r7, #20]
 8015f5c:	697b      	ldr	r3, [r7, #20]
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d1e4      	bne.n	8015f2c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8015f62:	693b      	ldr	r3, [r7, #16]
 8015f64:	2b00      	cmp	r3, #0
 8015f66:	d003      	beq.n	8015f70 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8015f68:	2100      	movs	r1, #0
 8015f6a:	6938      	ldr	r0, [r7, #16]
 8015f6c:	f7ff f874 	bl	8015058 <tcp_abandon>
  }
}
 8015f70:	bf00      	nop
 8015f72:	3718      	adds	r7, #24
 8015f74:	46bd      	mov	sp, r7
 8015f76:	bd80      	pop	{r7, pc}
 8015f78:	08024d14 	.word	0x08024d14
 8015f7c:	080252a0 	.word	0x080252a0
 8015f80:	08024d58 	.word	0x08024d58
 8015f84:	2000e170 	.word	0x2000e170
 8015f88:	2000e174 	.word	0x2000e174

08015f8c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8015f8c:	b580      	push	{r7, lr}
 8015f8e:	b084      	sub	sp, #16
 8015f90:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8015f92:	2300      	movs	r3, #0
 8015f94:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8015f96:	2300      	movs	r3, #0
 8015f98:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015f9a:	4b12      	ldr	r3, [pc, #72]	; (8015fe4 <tcp_kill_timewait+0x58>)
 8015f9c:	681b      	ldr	r3, [r3, #0]
 8015f9e:	60fb      	str	r3, [r7, #12]
 8015fa0:	e012      	b.n	8015fc8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8015fa2:	4b11      	ldr	r3, [pc, #68]	; (8015fe8 <tcp_kill_timewait+0x5c>)
 8015fa4:	681a      	ldr	r2, [r3, #0]
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	6a1b      	ldr	r3, [r3, #32]
 8015faa:	1ad3      	subs	r3, r2, r3
 8015fac:	687a      	ldr	r2, [r7, #4]
 8015fae:	429a      	cmp	r2, r3
 8015fb0:	d807      	bhi.n	8015fc2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8015fb2:	4b0d      	ldr	r3, [pc, #52]	; (8015fe8 <tcp_kill_timewait+0x5c>)
 8015fb4:	681a      	ldr	r2, [r3, #0]
 8015fb6:	68fb      	ldr	r3, [r7, #12]
 8015fb8:	6a1b      	ldr	r3, [r3, #32]
 8015fba:	1ad3      	subs	r3, r2, r3
 8015fbc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015fc2:	68fb      	ldr	r3, [r7, #12]
 8015fc4:	68db      	ldr	r3, [r3, #12]
 8015fc6:	60fb      	str	r3, [r7, #12]
 8015fc8:	68fb      	ldr	r3, [r7, #12]
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d1e9      	bne.n	8015fa2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8015fce:	68bb      	ldr	r3, [r7, #8]
 8015fd0:	2b00      	cmp	r3, #0
 8015fd2:	d002      	beq.n	8015fda <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8015fd4:	68b8      	ldr	r0, [r7, #8]
 8015fd6:	f7ff f8fd 	bl	80151d4 <tcp_abort>
  }
}
 8015fda:	bf00      	nop
 8015fdc:	3710      	adds	r7, #16
 8015fde:	46bd      	mov	sp, r7
 8015fe0:	bd80      	pop	{r7, pc}
 8015fe2:	bf00      	nop
 8015fe4:	2000e180 	.word	0x2000e180
 8015fe8:	2000e174 	.word	0x2000e174

08015fec <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8015fec:	b580      	push	{r7, lr}
 8015fee:	b082      	sub	sp, #8
 8015ff0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8015ff2:	4b10      	ldr	r3, [pc, #64]	; (8016034 <tcp_handle_closepend+0x48>)
 8015ff4:	681b      	ldr	r3, [r3, #0]
 8015ff6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8015ff8:	e014      	b.n	8016024 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	68db      	ldr	r3, [r3, #12]
 8015ffe:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	8b5b      	ldrh	r3, [r3, #26]
 8016004:	f003 0308 	and.w	r3, r3, #8
 8016008:	2b00      	cmp	r3, #0
 801600a:	d009      	beq.n	8016020 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	8b5b      	ldrh	r3, [r3, #26]
 8016010:	f023 0308 	bic.w	r3, r3, #8
 8016014:	b29a      	uxth	r2, r3
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801601a:	6878      	ldr	r0, [r7, #4]
 801601c:	f7fe ff2a 	bl	8014e74 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8016020:	683b      	ldr	r3, [r7, #0]
 8016022:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	2b00      	cmp	r3, #0
 8016028:	d1e7      	bne.n	8015ffa <tcp_handle_closepend+0xe>
  }
}
 801602a:	bf00      	nop
 801602c:	bf00      	nop
 801602e:	3708      	adds	r7, #8
 8016030:	46bd      	mov	sp, r7
 8016032:	bd80      	pop	{r7, pc}
 8016034:	2000e170 	.word	0x2000e170

08016038 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8016038:	b580      	push	{r7, lr}
 801603a:	b084      	sub	sp, #16
 801603c:	af00      	add	r7, sp, #0
 801603e:	4603      	mov	r3, r0
 8016040:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016042:	2001      	movs	r0, #1
 8016044:	f7fd fc34 	bl	80138b0 <memp_malloc>
 8016048:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801604a:	68fb      	ldr	r3, [r7, #12]
 801604c:	2b00      	cmp	r3, #0
 801604e:	d126      	bne.n	801609e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8016050:	f7ff ffcc 	bl	8015fec <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8016054:	f7ff ff9a 	bl	8015f8c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016058:	2001      	movs	r0, #1
 801605a:	f7fd fc29 	bl	80138b0 <memp_malloc>
 801605e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8016060:	68fb      	ldr	r3, [r7, #12]
 8016062:	2b00      	cmp	r3, #0
 8016064:	d11b      	bne.n	801609e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8016066:	2009      	movs	r0, #9
 8016068:	f7ff ff46 	bl	8015ef8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801606c:	2001      	movs	r0, #1
 801606e:	f7fd fc1f 	bl	80138b0 <memp_malloc>
 8016072:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	2b00      	cmp	r3, #0
 8016078:	d111      	bne.n	801609e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801607a:	2008      	movs	r0, #8
 801607c:	f7ff ff3c 	bl	8015ef8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016080:	2001      	movs	r0, #1
 8016082:	f7fd fc15 	bl	80138b0 <memp_malloc>
 8016086:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8016088:	68fb      	ldr	r3, [r7, #12]
 801608a:	2b00      	cmp	r3, #0
 801608c:	d107      	bne.n	801609e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801608e:	79fb      	ldrb	r3, [r7, #7]
 8016090:	4618      	mov	r0, r3
 8016092:	f7ff fee3 	bl	8015e5c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8016096:	2001      	movs	r0, #1
 8016098:	f7fd fc0a 	bl	80138b0 <memp_malloc>
 801609c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801609e:	68fb      	ldr	r3, [r7, #12]
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d03f      	beq.n	8016124 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80160a4:	229c      	movs	r2, #156	; 0x9c
 80160a6:	2100      	movs	r1, #0
 80160a8:	68f8      	ldr	r0, [r7, #12]
 80160aa:	f008 f953 	bl	801e354 <memset>
    pcb->prio = prio;
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	79fa      	ldrb	r2, [r7, #7]
 80160b2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80160b4:	68fb      	ldr	r3, [r7, #12]
 80160b6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80160ba:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80160be:	68fb      	ldr	r3, [r7, #12]
 80160c0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80160c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80160c6:	68fb      	ldr	r3, [r7, #12]
 80160c8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80160ca:	68fb      	ldr	r3, [r7, #12]
 80160cc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80160ce:	68fb      	ldr	r3, [r7, #12]
 80160d0:	22ff      	movs	r2, #255	; 0xff
 80160d2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80160d4:	68fb      	ldr	r3, [r7, #12]
 80160d6:	f44f 7206 	mov.w	r2, #536	; 0x218
 80160da:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	2206      	movs	r2, #6
 80160e0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	2206      	movs	r2, #6
 80160e8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80160ea:	68fb      	ldr	r3, [r7, #12]
 80160ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80160f0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	2201      	movs	r2, #1
 80160f6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80160fa:	4b0d      	ldr	r3, [pc, #52]	; (8016130 <tcp_alloc+0xf8>)
 80160fc:	681a      	ldr	r2, [r3, #0]
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8016102:	4b0c      	ldr	r3, [pc, #48]	; (8016134 <tcp_alloc+0xfc>)
 8016104:	781a      	ldrb	r2, [r3, #0]
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8016110:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8016114:	68fb      	ldr	r3, [r7, #12]
 8016116:	4a08      	ldr	r2, [pc, #32]	; (8016138 <tcp_alloc+0x100>)
 8016118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	4a07      	ldr	r2, [pc, #28]	; (801613c <tcp_alloc+0x104>)
 8016120:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8016124:	68fb      	ldr	r3, [r7, #12]
}
 8016126:	4618      	mov	r0, r3
 8016128:	3710      	adds	r7, #16
 801612a:	46bd      	mov	sp, r7
 801612c:	bd80      	pop	{r7, pc}
 801612e:	bf00      	nop
 8016130:	2000e174 	.word	0x2000e174
 8016134:	20006e12 	.word	0x20006e12
 8016138:	08015df1 	.word	0x08015df1
 801613c:	006ddd00 	.word	0x006ddd00

08016140 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8016140:	b580      	push	{r7, lr}
 8016142:	b084      	sub	sp, #16
 8016144:	af00      	add	r7, sp, #0
 8016146:	4603      	mov	r3, r0
 8016148:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801614a:	2040      	movs	r0, #64	; 0x40
 801614c:	f7ff ff74 	bl	8016038 <tcp_alloc>
 8016150:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8016152:	68fb      	ldr	r3, [r7, #12]
}
 8016154:	4618      	mov	r0, r3
 8016156:	3710      	adds	r7, #16
 8016158:	46bd      	mov	sp, r7
 801615a:	bd80      	pop	{r7, pc}

0801615c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801615c:	b480      	push	{r7}
 801615e:	b083      	sub	sp, #12
 8016160:	af00      	add	r7, sp, #0
 8016162:	6078      	str	r0, [r7, #4]
 8016164:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	2b00      	cmp	r3, #0
 801616a:	d002      	beq.n	8016172 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	683a      	ldr	r2, [r7, #0]
 8016170:	611a      	str	r2, [r3, #16]
  }
}
 8016172:	bf00      	nop
 8016174:	370c      	adds	r7, #12
 8016176:	46bd      	mov	sp, r7
 8016178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801617c:	4770      	bx	lr
	...

08016180 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8016180:	b580      	push	{r7, lr}
 8016182:	b082      	sub	sp, #8
 8016184:	af00      	add	r7, sp, #0
 8016186:	6078      	str	r0, [r7, #4]
 8016188:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	2b00      	cmp	r3, #0
 801618e:	d00e      	beq.n	80161ae <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8016190:	687b      	ldr	r3, [r7, #4]
 8016192:	7d1b      	ldrb	r3, [r3, #20]
 8016194:	2b01      	cmp	r3, #1
 8016196:	d106      	bne.n	80161a6 <tcp_recv+0x26>
 8016198:	4b07      	ldr	r3, [pc, #28]	; (80161b8 <tcp_recv+0x38>)
 801619a:	f240 72df 	movw	r2, #2015	; 0x7df
 801619e:	4907      	ldr	r1, [pc, #28]	; (80161bc <tcp_recv+0x3c>)
 80161a0:	4807      	ldr	r0, [pc, #28]	; (80161c0 <tcp_recv+0x40>)
 80161a2:	f009 f803 	bl	801f1ac <iprintf>
    pcb->recv = recv;
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	683a      	ldr	r2, [r7, #0]
 80161aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80161ae:	bf00      	nop
 80161b0:	3708      	adds	r7, #8
 80161b2:	46bd      	mov	sp, r7
 80161b4:	bd80      	pop	{r7, pc}
 80161b6:	bf00      	nop
 80161b8:	08024d14 	.word	0x08024d14
 80161bc:	080252b0 	.word	0x080252b0
 80161c0:	08024d58 	.word	0x08024d58

080161c4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80161c4:	b580      	push	{r7, lr}
 80161c6:	b082      	sub	sp, #8
 80161c8:	af00      	add	r7, sp, #0
 80161ca:	6078      	str	r0, [r7, #4]
 80161cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80161ce:	687b      	ldr	r3, [r7, #4]
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d00e      	beq.n	80161f2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	7d1b      	ldrb	r3, [r3, #20]
 80161d8:	2b01      	cmp	r3, #1
 80161da:	d106      	bne.n	80161ea <tcp_sent+0x26>
 80161dc:	4b07      	ldr	r3, [pc, #28]	; (80161fc <tcp_sent+0x38>)
 80161de:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80161e2:	4907      	ldr	r1, [pc, #28]	; (8016200 <tcp_sent+0x3c>)
 80161e4:	4807      	ldr	r0, [pc, #28]	; (8016204 <tcp_sent+0x40>)
 80161e6:	f008 ffe1 	bl	801f1ac <iprintf>
    pcb->sent = sent;
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	683a      	ldr	r2, [r7, #0]
 80161ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80161f2:	bf00      	nop
 80161f4:	3708      	adds	r7, #8
 80161f6:	46bd      	mov	sp, r7
 80161f8:	bd80      	pop	{r7, pc}
 80161fa:	bf00      	nop
 80161fc:	08024d14 	.word	0x08024d14
 8016200:	080252d8 	.word	0x080252d8
 8016204:	08024d58 	.word	0x08024d58

08016208 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8016208:	b580      	push	{r7, lr}
 801620a:	b082      	sub	sp, #8
 801620c:	af00      	add	r7, sp, #0
 801620e:	6078      	str	r0, [r7, #4]
 8016210:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	2b00      	cmp	r3, #0
 8016216:	d00e      	beq.n	8016236 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	7d1b      	ldrb	r3, [r3, #20]
 801621c:	2b01      	cmp	r3, #1
 801621e:	d106      	bne.n	801622e <tcp_err+0x26>
 8016220:	4b07      	ldr	r3, [pc, #28]	; (8016240 <tcp_err+0x38>)
 8016222:	f640 020d 	movw	r2, #2061	; 0x80d
 8016226:	4907      	ldr	r1, [pc, #28]	; (8016244 <tcp_err+0x3c>)
 8016228:	4807      	ldr	r0, [pc, #28]	; (8016248 <tcp_err+0x40>)
 801622a:	f008 ffbf 	bl	801f1ac <iprintf>
    pcb->errf = err;
 801622e:	687b      	ldr	r3, [r7, #4]
 8016230:	683a      	ldr	r2, [r7, #0]
 8016232:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8016236:	bf00      	nop
 8016238:	3708      	adds	r7, #8
 801623a:	46bd      	mov	sp, r7
 801623c:	bd80      	pop	{r7, pc}
 801623e:	bf00      	nop
 8016240:	08024d14 	.word	0x08024d14
 8016244:	08025300 	.word	0x08025300
 8016248:	08024d58 	.word	0x08024d58

0801624c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801624c:	b480      	push	{r7}
 801624e:	b085      	sub	sp, #20
 8016250:	af00      	add	r7, sp, #0
 8016252:	6078      	str	r0, [r7, #4]
 8016254:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	2b00      	cmp	r3, #0
 801625a:	d008      	beq.n	801626e <tcp_accept+0x22>
 801625c:	687b      	ldr	r3, [r7, #4]
 801625e:	7d1b      	ldrb	r3, [r3, #20]
 8016260:	2b01      	cmp	r3, #1
 8016262:	d104      	bne.n	801626e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8016268:	68fb      	ldr	r3, [r7, #12]
 801626a:	683a      	ldr	r2, [r7, #0]
 801626c:	619a      	str	r2, [r3, #24]
  }
}
 801626e:	bf00      	nop
 8016270:	3714      	adds	r7, #20
 8016272:	46bd      	mov	sp, r7
 8016274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016278:	4770      	bx	lr
	...

0801627c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801627c:	b580      	push	{r7, lr}
 801627e:	b084      	sub	sp, #16
 8016280:	af00      	add	r7, sp, #0
 8016282:	60f8      	str	r0, [r7, #12]
 8016284:	60b9      	str	r1, [r7, #8]
 8016286:	4613      	mov	r3, r2
 8016288:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801628a:	68fb      	ldr	r3, [r7, #12]
 801628c:	2b00      	cmp	r3, #0
 801628e:	d107      	bne.n	80162a0 <tcp_poll+0x24>
 8016290:	4b0e      	ldr	r3, [pc, #56]	; (80162cc <tcp_poll+0x50>)
 8016292:	f640 023d 	movw	r2, #2109	; 0x83d
 8016296:	490e      	ldr	r1, [pc, #56]	; (80162d0 <tcp_poll+0x54>)
 8016298:	480e      	ldr	r0, [pc, #56]	; (80162d4 <tcp_poll+0x58>)
 801629a:	f008 ff87 	bl	801f1ac <iprintf>
 801629e:	e011      	b.n	80162c4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80162a0:	68fb      	ldr	r3, [r7, #12]
 80162a2:	7d1b      	ldrb	r3, [r3, #20]
 80162a4:	2b01      	cmp	r3, #1
 80162a6:	d106      	bne.n	80162b6 <tcp_poll+0x3a>
 80162a8:	4b08      	ldr	r3, [pc, #32]	; (80162cc <tcp_poll+0x50>)
 80162aa:	f640 023e 	movw	r2, #2110	; 0x83e
 80162ae:	490a      	ldr	r1, [pc, #40]	; (80162d8 <tcp_poll+0x5c>)
 80162b0:	4808      	ldr	r0, [pc, #32]	; (80162d4 <tcp_poll+0x58>)
 80162b2:	f008 ff7b 	bl	801f1ac <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	68ba      	ldr	r2, [r7, #8]
 80162ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80162be:	68fb      	ldr	r3, [r7, #12]
 80162c0:	79fa      	ldrb	r2, [r7, #7]
 80162c2:	775a      	strb	r2, [r3, #29]
}
 80162c4:	3710      	adds	r7, #16
 80162c6:	46bd      	mov	sp, r7
 80162c8:	bd80      	pop	{r7, pc}
 80162ca:	bf00      	nop
 80162cc:	08024d14 	.word	0x08024d14
 80162d0:	08025328 	.word	0x08025328
 80162d4:	08024d58 	.word	0x08024d58
 80162d8:	08025340 	.word	0x08025340

080162dc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80162dc:	b580      	push	{r7, lr}
 80162de:	b082      	sub	sp, #8
 80162e0:	af00      	add	r7, sp, #0
 80162e2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80162e4:	687b      	ldr	r3, [r7, #4]
 80162e6:	2b00      	cmp	r3, #0
 80162e8:	d107      	bne.n	80162fa <tcp_pcb_purge+0x1e>
 80162ea:	4b21      	ldr	r3, [pc, #132]	; (8016370 <tcp_pcb_purge+0x94>)
 80162ec:	f640 0251 	movw	r2, #2129	; 0x851
 80162f0:	4920      	ldr	r1, [pc, #128]	; (8016374 <tcp_pcb_purge+0x98>)
 80162f2:	4821      	ldr	r0, [pc, #132]	; (8016378 <tcp_pcb_purge+0x9c>)
 80162f4:	f008 ff5a 	bl	801f1ac <iprintf>
 80162f8:	e037      	b.n	801636a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	7d1b      	ldrb	r3, [r3, #20]
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d033      	beq.n	801636a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8016306:	2b0a      	cmp	r3, #10
 8016308:	d02f      	beq.n	801636a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801630a:	687b      	ldr	r3, [r7, #4]
 801630c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801630e:	2b01      	cmp	r3, #1
 8016310:	d02b      	beq.n	801636a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8016312:	687b      	ldr	r3, [r7, #4]
 8016314:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016316:	2b00      	cmp	r3, #0
 8016318:	d007      	beq.n	801632a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801631e:	4618      	mov	r0, r3
 8016320:	f7fe f958 	bl	80145d4 <pbuf_free>
      pcb->refused_data = NULL;
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	2200      	movs	r2, #0
 8016328:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801632a:	687b      	ldr	r3, [r7, #4]
 801632c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801632e:	2b00      	cmp	r3, #0
 8016330:	d002      	beq.n	8016338 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8016332:	6878      	ldr	r0, [r7, #4]
 8016334:	f000 f986 	bl	8016644 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801633e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016344:	4618      	mov	r0, r3
 8016346:	f7ff fcf9 	bl	8015d3c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801634a:	687b      	ldr	r3, [r7, #4]
 801634c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801634e:	4618      	mov	r0, r3
 8016350:	f7ff fcf4 	bl	8015d3c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	2200      	movs	r2, #0
 8016358:	66da      	str	r2, [r3, #108]	; 0x6c
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8016362:	687b      	ldr	r3, [r7, #4]
 8016364:	2200      	movs	r2, #0
 8016366:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801636a:	3708      	adds	r7, #8
 801636c:	46bd      	mov	sp, r7
 801636e:	bd80      	pop	{r7, pc}
 8016370:	08024d14 	.word	0x08024d14
 8016374:	08025360 	.word	0x08025360
 8016378:	08024d58 	.word	0x08024d58

0801637c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801637c:	b580      	push	{r7, lr}
 801637e:	b084      	sub	sp, #16
 8016380:	af00      	add	r7, sp, #0
 8016382:	6078      	str	r0, [r7, #4]
 8016384:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8016386:	683b      	ldr	r3, [r7, #0]
 8016388:	2b00      	cmp	r3, #0
 801638a:	d106      	bne.n	801639a <tcp_pcb_remove+0x1e>
 801638c:	4b3e      	ldr	r3, [pc, #248]	; (8016488 <tcp_pcb_remove+0x10c>)
 801638e:	f640 0283 	movw	r2, #2179	; 0x883
 8016392:	493e      	ldr	r1, [pc, #248]	; (801648c <tcp_pcb_remove+0x110>)
 8016394:	483e      	ldr	r0, [pc, #248]	; (8016490 <tcp_pcb_remove+0x114>)
 8016396:	f008 ff09 	bl	801f1ac <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	2b00      	cmp	r3, #0
 801639e:	d106      	bne.n	80163ae <tcp_pcb_remove+0x32>
 80163a0:	4b39      	ldr	r3, [pc, #228]	; (8016488 <tcp_pcb_remove+0x10c>)
 80163a2:	f640 0284 	movw	r2, #2180	; 0x884
 80163a6:	493b      	ldr	r1, [pc, #236]	; (8016494 <tcp_pcb_remove+0x118>)
 80163a8:	4839      	ldr	r0, [pc, #228]	; (8016490 <tcp_pcb_remove+0x114>)
 80163aa:	f008 feff 	bl	801f1ac <iprintf>

  TCP_RMV(pcblist, pcb);
 80163ae:	687b      	ldr	r3, [r7, #4]
 80163b0:	681b      	ldr	r3, [r3, #0]
 80163b2:	683a      	ldr	r2, [r7, #0]
 80163b4:	429a      	cmp	r2, r3
 80163b6:	d105      	bne.n	80163c4 <tcp_pcb_remove+0x48>
 80163b8:	687b      	ldr	r3, [r7, #4]
 80163ba:	681b      	ldr	r3, [r3, #0]
 80163bc:	68da      	ldr	r2, [r3, #12]
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	601a      	str	r2, [r3, #0]
 80163c2:	e013      	b.n	80163ec <tcp_pcb_remove+0x70>
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	60fb      	str	r3, [r7, #12]
 80163ca:	e00c      	b.n	80163e6 <tcp_pcb_remove+0x6a>
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	68db      	ldr	r3, [r3, #12]
 80163d0:	683a      	ldr	r2, [r7, #0]
 80163d2:	429a      	cmp	r2, r3
 80163d4:	d104      	bne.n	80163e0 <tcp_pcb_remove+0x64>
 80163d6:	683b      	ldr	r3, [r7, #0]
 80163d8:	68da      	ldr	r2, [r3, #12]
 80163da:	68fb      	ldr	r3, [r7, #12]
 80163dc:	60da      	str	r2, [r3, #12]
 80163de:	e005      	b.n	80163ec <tcp_pcb_remove+0x70>
 80163e0:	68fb      	ldr	r3, [r7, #12]
 80163e2:	68db      	ldr	r3, [r3, #12]
 80163e4:	60fb      	str	r3, [r7, #12]
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	2b00      	cmp	r3, #0
 80163ea:	d1ef      	bne.n	80163cc <tcp_pcb_remove+0x50>
 80163ec:	683b      	ldr	r3, [r7, #0]
 80163ee:	2200      	movs	r2, #0
 80163f0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80163f2:	6838      	ldr	r0, [r7, #0]
 80163f4:	f7ff ff72 	bl	80162dc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80163f8:	683b      	ldr	r3, [r7, #0]
 80163fa:	7d1b      	ldrb	r3, [r3, #20]
 80163fc:	2b0a      	cmp	r3, #10
 80163fe:	d013      	beq.n	8016428 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8016400:	683b      	ldr	r3, [r7, #0]
 8016402:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8016404:	2b01      	cmp	r3, #1
 8016406:	d00f      	beq.n	8016428 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8016408:	683b      	ldr	r3, [r7, #0]
 801640a:	8b5b      	ldrh	r3, [r3, #26]
 801640c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8016410:	2b00      	cmp	r3, #0
 8016412:	d009      	beq.n	8016428 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8016414:	683b      	ldr	r3, [r7, #0]
 8016416:	8b5b      	ldrh	r3, [r3, #26]
 8016418:	f043 0302 	orr.w	r3, r3, #2
 801641c:	b29a      	uxth	r2, r3
 801641e:	683b      	ldr	r3, [r7, #0]
 8016420:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8016422:	6838      	ldr	r0, [r7, #0]
 8016424:	f003 fbc2 	bl	8019bac <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8016428:	683b      	ldr	r3, [r7, #0]
 801642a:	7d1b      	ldrb	r3, [r3, #20]
 801642c:	2b01      	cmp	r3, #1
 801642e:	d020      	beq.n	8016472 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8016430:	683b      	ldr	r3, [r7, #0]
 8016432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016434:	2b00      	cmp	r3, #0
 8016436:	d006      	beq.n	8016446 <tcp_pcb_remove+0xca>
 8016438:	4b13      	ldr	r3, [pc, #76]	; (8016488 <tcp_pcb_remove+0x10c>)
 801643a:	f640 0293 	movw	r2, #2195	; 0x893
 801643e:	4916      	ldr	r1, [pc, #88]	; (8016498 <tcp_pcb_remove+0x11c>)
 8016440:	4813      	ldr	r0, [pc, #76]	; (8016490 <tcp_pcb_remove+0x114>)
 8016442:	f008 feb3 	bl	801f1ac <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8016446:	683b      	ldr	r3, [r7, #0]
 8016448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801644a:	2b00      	cmp	r3, #0
 801644c:	d006      	beq.n	801645c <tcp_pcb_remove+0xe0>
 801644e:	4b0e      	ldr	r3, [pc, #56]	; (8016488 <tcp_pcb_remove+0x10c>)
 8016450:	f640 0294 	movw	r2, #2196	; 0x894
 8016454:	4911      	ldr	r1, [pc, #68]	; (801649c <tcp_pcb_remove+0x120>)
 8016456:	480e      	ldr	r0, [pc, #56]	; (8016490 <tcp_pcb_remove+0x114>)
 8016458:	f008 fea8 	bl	801f1ac <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801645c:	683b      	ldr	r3, [r7, #0]
 801645e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016460:	2b00      	cmp	r3, #0
 8016462:	d006      	beq.n	8016472 <tcp_pcb_remove+0xf6>
 8016464:	4b08      	ldr	r3, [pc, #32]	; (8016488 <tcp_pcb_remove+0x10c>)
 8016466:	f640 0296 	movw	r2, #2198	; 0x896
 801646a:	490d      	ldr	r1, [pc, #52]	; (80164a0 <tcp_pcb_remove+0x124>)
 801646c:	4808      	ldr	r0, [pc, #32]	; (8016490 <tcp_pcb_remove+0x114>)
 801646e:	f008 fe9d 	bl	801f1ac <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8016472:	683b      	ldr	r3, [r7, #0]
 8016474:	2200      	movs	r2, #0
 8016476:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8016478:	683b      	ldr	r3, [r7, #0]
 801647a:	2200      	movs	r2, #0
 801647c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801647e:	bf00      	nop
 8016480:	3710      	adds	r7, #16
 8016482:	46bd      	mov	sp, r7
 8016484:	bd80      	pop	{r7, pc}
 8016486:	bf00      	nop
 8016488:	08024d14 	.word	0x08024d14
 801648c:	0802537c 	.word	0x0802537c
 8016490:	08024d58 	.word	0x08024d58
 8016494:	08025398 	.word	0x08025398
 8016498:	080253b8 	.word	0x080253b8
 801649c:	080253d0 	.word	0x080253d0
 80164a0:	080253ec 	.word	0x080253ec

080164a4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80164a4:	b580      	push	{r7, lr}
 80164a6:	b082      	sub	sp, #8
 80164a8:	af00      	add	r7, sp, #0
 80164aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80164ac:	687b      	ldr	r3, [r7, #4]
 80164ae:	2b00      	cmp	r3, #0
 80164b0:	d106      	bne.n	80164c0 <tcp_next_iss+0x1c>
 80164b2:	4b0a      	ldr	r3, [pc, #40]	; (80164dc <tcp_next_iss+0x38>)
 80164b4:	f640 02af 	movw	r2, #2223	; 0x8af
 80164b8:	4909      	ldr	r1, [pc, #36]	; (80164e0 <tcp_next_iss+0x3c>)
 80164ba:	480a      	ldr	r0, [pc, #40]	; (80164e4 <tcp_next_iss+0x40>)
 80164bc:	f008 fe76 	bl	801f1ac <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80164c0:	4b09      	ldr	r3, [pc, #36]	; (80164e8 <tcp_next_iss+0x44>)
 80164c2:	681a      	ldr	r2, [r3, #0]
 80164c4:	4b09      	ldr	r3, [pc, #36]	; (80164ec <tcp_next_iss+0x48>)
 80164c6:	681b      	ldr	r3, [r3, #0]
 80164c8:	4413      	add	r3, r2
 80164ca:	4a07      	ldr	r2, [pc, #28]	; (80164e8 <tcp_next_iss+0x44>)
 80164cc:	6013      	str	r3, [r2, #0]
  return iss;
 80164ce:	4b06      	ldr	r3, [pc, #24]	; (80164e8 <tcp_next_iss+0x44>)
 80164d0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80164d2:	4618      	mov	r0, r3
 80164d4:	3708      	adds	r7, #8
 80164d6:	46bd      	mov	sp, r7
 80164d8:	bd80      	pop	{r7, pc}
 80164da:	bf00      	nop
 80164dc:	08024d14 	.word	0x08024d14
 80164e0:	08025404 	.word	0x08025404
 80164e4:	08024d58 	.word	0x08024d58
 80164e8:	200003b0 	.word	0x200003b0
 80164ec:	2000e174 	.word	0x2000e174

080164f0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80164f0:	b580      	push	{r7, lr}
 80164f2:	b086      	sub	sp, #24
 80164f4:	af00      	add	r7, sp, #0
 80164f6:	4603      	mov	r3, r0
 80164f8:	60b9      	str	r1, [r7, #8]
 80164fa:	607a      	str	r2, [r7, #4]
 80164fc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80164fe:	687b      	ldr	r3, [r7, #4]
 8016500:	2b00      	cmp	r3, #0
 8016502:	d106      	bne.n	8016512 <tcp_eff_send_mss_netif+0x22>
 8016504:	4b14      	ldr	r3, [pc, #80]	; (8016558 <tcp_eff_send_mss_netif+0x68>)
 8016506:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801650a:	4914      	ldr	r1, [pc, #80]	; (801655c <tcp_eff_send_mss_netif+0x6c>)
 801650c:	4814      	ldr	r0, [pc, #80]	; (8016560 <tcp_eff_send_mss_netif+0x70>)
 801650e:	f008 fe4d 	bl	801f1ac <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8016512:	68bb      	ldr	r3, [r7, #8]
 8016514:	2b00      	cmp	r3, #0
 8016516:	d101      	bne.n	801651c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8016518:	89fb      	ldrh	r3, [r7, #14]
 801651a:	e019      	b.n	8016550 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801651c:	68bb      	ldr	r3, [r7, #8]
 801651e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016520:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8016522:	8afb      	ldrh	r3, [r7, #22]
 8016524:	2b00      	cmp	r3, #0
 8016526:	d012      	beq.n	801654e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8016528:	2328      	movs	r3, #40	; 0x28
 801652a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801652c:	8afa      	ldrh	r2, [r7, #22]
 801652e:	8abb      	ldrh	r3, [r7, #20]
 8016530:	429a      	cmp	r2, r3
 8016532:	d904      	bls.n	801653e <tcp_eff_send_mss_netif+0x4e>
 8016534:	8afa      	ldrh	r2, [r7, #22]
 8016536:	8abb      	ldrh	r3, [r7, #20]
 8016538:	1ad3      	subs	r3, r2, r3
 801653a:	b29b      	uxth	r3, r3
 801653c:	e000      	b.n	8016540 <tcp_eff_send_mss_netif+0x50>
 801653e:	2300      	movs	r3, #0
 8016540:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8016542:	8a7a      	ldrh	r2, [r7, #18]
 8016544:	89fb      	ldrh	r3, [r7, #14]
 8016546:	4293      	cmp	r3, r2
 8016548:	bf28      	it	cs
 801654a:	4613      	movcs	r3, r2
 801654c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801654e:	89fb      	ldrh	r3, [r7, #14]
}
 8016550:	4618      	mov	r0, r3
 8016552:	3718      	adds	r7, #24
 8016554:	46bd      	mov	sp, r7
 8016556:	bd80      	pop	{r7, pc}
 8016558:	08024d14 	.word	0x08024d14
 801655c:	08025420 	.word	0x08025420
 8016560:	08024d58 	.word	0x08024d58

08016564 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8016564:	b580      	push	{r7, lr}
 8016566:	b084      	sub	sp, #16
 8016568:	af00      	add	r7, sp, #0
 801656a:	6078      	str	r0, [r7, #4]
 801656c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801656e:	683b      	ldr	r3, [r7, #0]
 8016570:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	2b00      	cmp	r3, #0
 8016576:	d119      	bne.n	80165ac <tcp_netif_ip_addr_changed_pcblist+0x48>
 8016578:	4b10      	ldr	r3, [pc, #64]	; (80165bc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801657a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801657e:	4910      	ldr	r1, [pc, #64]	; (80165c0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8016580:	4810      	ldr	r0, [pc, #64]	; (80165c4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8016582:	f008 fe13 	bl	801f1ac <iprintf>

  while (pcb != NULL) {
 8016586:	e011      	b.n	80165ac <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8016588:	68fb      	ldr	r3, [r7, #12]
 801658a:	681a      	ldr	r2, [r3, #0]
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	429a      	cmp	r2, r3
 8016592:	d108      	bne.n	80165a6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	68db      	ldr	r3, [r3, #12]
 8016598:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801659a:	68f8      	ldr	r0, [r7, #12]
 801659c:	f7fe fe1a 	bl	80151d4 <tcp_abort>
      pcb = next;
 80165a0:	68bb      	ldr	r3, [r7, #8]
 80165a2:	60fb      	str	r3, [r7, #12]
 80165a4:	e002      	b.n	80165ac <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	68db      	ldr	r3, [r3, #12]
 80165aa:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80165ac:	68fb      	ldr	r3, [r7, #12]
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d1ea      	bne.n	8016588 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80165b2:	bf00      	nop
 80165b4:	bf00      	nop
 80165b6:	3710      	adds	r7, #16
 80165b8:	46bd      	mov	sp, r7
 80165ba:	bd80      	pop	{r7, pc}
 80165bc:	08024d14 	.word	0x08024d14
 80165c0:	08025448 	.word	0x08025448
 80165c4:	08024d58 	.word	0x08024d58

080165c8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80165c8:	b580      	push	{r7, lr}
 80165ca:	b084      	sub	sp, #16
 80165cc:	af00      	add	r7, sp, #0
 80165ce:	6078      	str	r0, [r7, #4]
 80165d0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d02a      	beq.n	801662e <tcp_netif_ip_addr_changed+0x66>
 80165d8:	687b      	ldr	r3, [r7, #4]
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	2b00      	cmp	r3, #0
 80165de:	d026      	beq.n	801662e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80165e0:	4b15      	ldr	r3, [pc, #84]	; (8016638 <tcp_netif_ip_addr_changed+0x70>)
 80165e2:	681b      	ldr	r3, [r3, #0]
 80165e4:	4619      	mov	r1, r3
 80165e6:	6878      	ldr	r0, [r7, #4]
 80165e8:	f7ff ffbc 	bl	8016564 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80165ec:	4b13      	ldr	r3, [pc, #76]	; (801663c <tcp_netif_ip_addr_changed+0x74>)
 80165ee:	681b      	ldr	r3, [r3, #0]
 80165f0:	4619      	mov	r1, r3
 80165f2:	6878      	ldr	r0, [r7, #4]
 80165f4:	f7ff ffb6 	bl	8016564 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80165f8:	683b      	ldr	r3, [r7, #0]
 80165fa:	2b00      	cmp	r3, #0
 80165fc:	d017      	beq.n	801662e <tcp_netif_ip_addr_changed+0x66>
 80165fe:	683b      	ldr	r3, [r7, #0]
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	2b00      	cmp	r3, #0
 8016604:	d013      	beq.n	801662e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016606:	4b0e      	ldr	r3, [pc, #56]	; (8016640 <tcp_netif_ip_addr_changed+0x78>)
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	60fb      	str	r3, [r7, #12]
 801660c:	e00c      	b.n	8016628 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801660e:	68fb      	ldr	r3, [r7, #12]
 8016610:	681a      	ldr	r2, [r3, #0]
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	429a      	cmp	r2, r3
 8016618:	d103      	bne.n	8016622 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801661a:	683b      	ldr	r3, [r7, #0]
 801661c:	681a      	ldr	r2, [r3, #0]
 801661e:	68fb      	ldr	r3, [r7, #12]
 8016620:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016622:	68fb      	ldr	r3, [r7, #12]
 8016624:	68db      	ldr	r3, [r3, #12]
 8016626:	60fb      	str	r3, [r7, #12]
 8016628:	68fb      	ldr	r3, [r7, #12]
 801662a:	2b00      	cmp	r3, #0
 801662c:	d1ef      	bne.n	801660e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801662e:	bf00      	nop
 8016630:	3710      	adds	r7, #16
 8016632:	46bd      	mov	sp, r7
 8016634:	bd80      	pop	{r7, pc}
 8016636:	bf00      	nop
 8016638:	2000e170 	.word	0x2000e170
 801663c:	2000e17c 	.word	0x2000e17c
 8016640:	2000e178 	.word	0x2000e178

08016644 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8016644:	b580      	push	{r7, lr}
 8016646:	b082      	sub	sp, #8
 8016648:	af00      	add	r7, sp, #0
 801664a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016650:	2b00      	cmp	r3, #0
 8016652:	d007      	beq.n	8016664 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016658:	4618      	mov	r0, r3
 801665a:	f7ff fb6f 	bl	8015d3c <tcp_segs_free>
    pcb->ooseq = NULL;
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	2200      	movs	r2, #0
 8016662:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8016664:	bf00      	nop
 8016666:	3708      	adds	r7, #8
 8016668:	46bd      	mov	sp, r7
 801666a:	bd80      	pop	{r7, pc}

0801666c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801666c:	b590      	push	{r4, r7, lr}
 801666e:	b08d      	sub	sp, #52	; 0x34
 8016670:	af04      	add	r7, sp, #16
 8016672:	6078      	str	r0, [r7, #4]
 8016674:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	2b00      	cmp	r3, #0
 801667a:	d105      	bne.n	8016688 <tcp_input+0x1c>
 801667c:	4b9b      	ldr	r3, [pc, #620]	; (80168ec <tcp_input+0x280>)
 801667e:	2283      	movs	r2, #131	; 0x83
 8016680:	499b      	ldr	r1, [pc, #620]	; (80168f0 <tcp_input+0x284>)
 8016682:	489c      	ldr	r0, [pc, #624]	; (80168f4 <tcp_input+0x288>)
 8016684:	f008 fd92 	bl	801f1ac <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	685b      	ldr	r3, [r3, #4]
 801668c:	4a9a      	ldr	r2, [pc, #616]	; (80168f8 <tcp_input+0x28c>)
 801668e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	895b      	ldrh	r3, [r3, #10]
 8016694:	2b13      	cmp	r3, #19
 8016696:	f240 83c4 	bls.w	8016e22 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801669a:	4b98      	ldr	r3, [pc, #608]	; (80168fc <tcp_input+0x290>)
 801669c:	695b      	ldr	r3, [r3, #20]
 801669e:	4a97      	ldr	r2, [pc, #604]	; (80168fc <tcp_input+0x290>)
 80166a0:	6812      	ldr	r2, [r2, #0]
 80166a2:	4611      	mov	r1, r2
 80166a4:	4618      	mov	r0, r3
 80166a6:	f006 fbcb 	bl	801ce40 <ip4_addr_isbroadcast_u32>
 80166aa:	4603      	mov	r3, r0
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	f040 83ba 	bne.w	8016e26 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80166b2:	4b92      	ldr	r3, [pc, #584]	; (80168fc <tcp_input+0x290>)
 80166b4:	695b      	ldr	r3, [r3, #20]
 80166b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80166ba:	2be0      	cmp	r3, #224	; 0xe0
 80166bc:	f000 83b3 	beq.w	8016e26 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80166c0:	4b8d      	ldr	r3, [pc, #564]	; (80168f8 <tcp_input+0x28c>)
 80166c2:	681b      	ldr	r3, [r3, #0]
 80166c4:	899b      	ldrh	r3, [r3, #12]
 80166c6:	b29b      	uxth	r3, r3
 80166c8:	4618      	mov	r0, r3
 80166ca:	f7fc fc3b 	bl	8012f44 <lwip_htons>
 80166ce:	4603      	mov	r3, r0
 80166d0:	0b1b      	lsrs	r3, r3, #12
 80166d2:	b29b      	uxth	r3, r3
 80166d4:	b2db      	uxtb	r3, r3
 80166d6:	009b      	lsls	r3, r3, #2
 80166d8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80166da:	7cbb      	ldrb	r3, [r7, #18]
 80166dc:	2b13      	cmp	r3, #19
 80166de:	f240 83a4 	bls.w	8016e2a <tcp_input+0x7be>
 80166e2:	7cbb      	ldrb	r3, [r7, #18]
 80166e4:	b29a      	uxth	r2, r3
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	891b      	ldrh	r3, [r3, #8]
 80166ea:	429a      	cmp	r2, r3
 80166ec:	f200 839d 	bhi.w	8016e2a <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80166f0:	7cbb      	ldrb	r3, [r7, #18]
 80166f2:	b29b      	uxth	r3, r3
 80166f4:	3b14      	subs	r3, #20
 80166f6:	b29a      	uxth	r2, r3
 80166f8:	4b81      	ldr	r3, [pc, #516]	; (8016900 <tcp_input+0x294>)
 80166fa:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80166fc:	4b81      	ldr	r3, [pc, #516]	; (8016904 <tcp_input+0x298>)
 80166fe:	2200      	movs	r2, #0
 8016700:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	895a      	ldrh	r2, [r3, #10]
 8016706:	7cbb      	ldrb	r3, [r7, #18]
 8016708:	b29b      	uxth	r3, r3
 801670a:	429a      	cmp	r2, r3
 801670c:	d309      	bcc.n	8016722 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801670e:	4b7c      	ldr	r3, [pc, #496]	; (8016900 <tcp_input+0x294>)
 8016710:	881a      	ldrh	r2, [r3, #0]
 8016712:	4b7d      	ldr	r3, [pc, #500]	; (8016908 <tcp_input+0x29c>)
 8016714:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8016716:	7cbb      	ldrb	r3, [r7, #18]
 8016718:	4619      	mov	r1, r3
 801671a:	6878      	ldr	r0, [r7, #4]
 801671c:	f7fd fed4 	bl	80144c8 <pbuf_remove_header>
 8016720:	e04e      	b.n	80167c0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	2b00      	cmp	r3, #0
 8016728:	d105      	bne.n	8016736 <tcp_input+0xca>
 801672a:	4b70      	ldr	r3, [pc, #448]	; (80168ec <tcp_input+0x280>)
 801672c:	22c2      	movs	r2, #194	; 0xc2
 801672e:	4977      	ldr	r1, [pc, #476]	; (801690c <tcp_input+0x2a0>)
 8016730:	4870      	ldr	r0, [pc, #448]	; (80168f4 <tcp_input+0x288>)
 8016732:	f008 fd3b 	bl	801f1ac <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8016736:	2114      	movs	r1, #20
 8016738:	6878      	ldr	r0, [r7, #4]
 801673a:	f7fd fec5 	bl	80144c8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801673e:	687b      	ldr	r3, [r7, #4]
 8016740:	895a      	ldrh	r2, [r3, #10]
 8016742:	4b71      	ldr	r3, [pc, #452]	; (8016908 <tcp_input+0x29c>)
 8016744:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8016746:	4b6e      	ldr	r3, [pc, #440]	; (8016900 <tcp_input+0x294>)
 8016748:	881a      	ldrh	r2, [r3, #0]
 801674a:	4b6f      	ldr	r3, [pc, #444]	; (8016908 <tcp_input+0x29c>)
 801674c:	881b      	ldrh	r3, [r3, #0]
 801674e:	1ad3      	subs	r3, r2, r3
 8016750:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8016752:	4b6d      	ldr	r3, [pc, #436]	; (8016908 <tcp_input+0x29c>)
 8016754:	881b      	ldrh	r3, [r3, #0]
 8016756:	4619      	mov	r1, r3
 8016758:	6878      	ldr	r0, [r7, #4]
 801675a:	f7fd feb5 	bl	80144c8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	681b      	ldr	r3, [r3, #0]
 8016762:	895b      	ldrh	r3, [r3, #10]
 8016764:	8a3a      	ldrh	r2, [r7, #16]
 8016766:	429a      	cmp	r2, r3
 8016768:	f200 8361 	bhi.w	8016e2e <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	681b      	ldr	r3, [r3, #0]
 8016770:	685b      	ldr	r3, [r3, #4]
 8016772:	4a64      	ldr	r2, [pc, #400]	; (8016904 <tcp_input+0x298>)
 8016774:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8016776:	687b      	ldr	r3, [r7, #4]
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	8a3a      	ldrh	r2, [r7, #16]
 801677c:	4611      	mov	r1, r2
 801677e:	4618      	mov	r0, r3
 8016780:	f7fd fea2 	bl	80144c8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8016784:	687b      	ldr	r3, [r7, #4]
 8016786:	891a      	ldrh	r2, [r3, #8]
 8016788:	8a3b      	ldrh	r3, [r7, #16]
 801678a:	1ad3      	subs	r3, r2, r3
 801678c:	b29a      	uxth	r2, r3
 801678e:	687b      	ldr	r3, [r7, #4]
 8016790:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8016792:	687b      	ldr	r3, [r7, #4]
 8016794:	895b      	ldrh	r3, [r3, #10]
 8016796:	2b00      	cmp	r3, #0
 8016798:	d005      	beq.n	80167a6 <tcp_input+0x13a>
 801679a:	4b54      	ldr	r3, [pc, #336]	; (80168ec <tcp_input+0x280>)
 801679c:	22df      	movs	r2, #223	; 0xdf
 801679e:	495c      	ldr	r1, [pc, #368]	; (8016910 <tcp_input+0x2a4>)
 80167a0:	4854      	ldr	r0, [pc, #336]	; (80168f4 <tcp_input+0x288>)
 80167a2:	f008 fd03 	bl	801f1ac <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80167a6:	687b      	ldr	r3, [r7, #4]
 80167a8:	891a      	ldrh	r2, [r3, #8]
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	681b      	ldr	r3, [r3, #0]
 80167ae:	891b      	ldrh	r3, [r3, #8]
 80167b0:	429a      	cmp	r2, r3
 80167b2:	d005      	beq.n	80167c0 <tcp_input+0x154>
 80167b4:	4b4d      	ldr	r3, [pc, #308]	; (80168ec <tcp_input+0x280>)
 80167b6:	22e0      	movs	r2, #224	; 0xe0
 80167b8:	4956      	ldr	r1, [pc, #344]	; (8016914 <tcp_input+0x2a8>)
 80167ba:	484e      	ldr	r0, [pc, #312]	; (80168f4 <tcp_input+0x288>)
 80167bc:	f008 fcf6 	bl	801f1ac <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80167c0:	4b4d      	ldr	r3, [pc, #308]	; (80168f8 <tcp_input+0x28c>)
 80167c2:	681b      	ldr	r3, [r3, #0]
 80167c4:	881b      	ldrh	r3, [r3, #0]
 80167c6:	b29b      	uxth	r3, r3
 80167c8:	4a4b      	ldr	r2, [pc, #300]	; (80168f8 <tcp_input+0x28c>)
 80167ca:	6814      	ldr	r4, [r2, #0]
 80167cc:	4618      	mov	r0, r3
 80167ce:	f7fc fbb9 	bl	8012f44 <lwip_htons>
 80167d2:	4603      	mov	r3, r0
 80167d4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80167d6:	4b48      	ldr	r3, [pc, #288]	; (80168f8 <tcp_input+0x28c>)
 80167d8:	681b      	ldr	r3, [r3, #0]
 80167da:	885b      	ldrh	r3, [r3, #2]
 80167dc:	b29b      	uxth	r3, r3
 80167de:	4a46      	ldr	r2, [pc, #280]	; (80168f8 <tcp_input+0x28c>)
 80167e0:	6814      	ldr	r4, [r2, #0]
 80167e2:	4618      	mov	r0, r3
 80167e4:	f7fc fbae 	bl	8012f44 <lwip_htons>
 80167e8:	4603      	mov	r3, r0
 80167ea:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80167ec:	4b42      	ldr	r3, [pc, #264]	; (80168f8 <tcp_input+0x28c>)
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	685b      	ldr	r3, [r3, #4]
 80167f2:	4a41      	ldr	r2, [pc, #260]	; (80168f8 <tcp_input+0x28c>)
 80167f4:	6814      	ldr	r4, [r2, #0]
 80167f6:	4618      	mov	r0, r3
 80167f8:	f7fc fbb9 	bl	8012f6e <lwip_htonl>
 80167fc:	4603      	mov	r3, r0
 80167fe:	6063      	str	r3, [r4, #4]
 8016800:	6863      	ldr	r3, [r4, #4]
 8016802:	4a45      	ldr	r2, [pc, #276]	; (8016918 <tcp_input+0x2ac>)
 8016804:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8016806:	4b3c      	ldr	r3, [pc, #240]	; (80168f8 <tcp_input+0x28c>)
 8016808:	681b      	ldr	r3, [r3, #0]
 801680a:	689b      	ldr	r3, [r3, #8]
 801680c:	4a3a      	ldr	r2, [pc, #232]	; (80168f8 <tcp_input+0x28c>)
 801680e:	6814      	ldr	r4, [r2, #0]
 8016810:	4618      	mov	r0, r3
 8016812:	f7fc fbac 	bl	8012f6e <lwip_htonl>
 8016816:	4603      	mov	r3, r0
 8016818:	60a3      	str	r3, [r4, #8]
 801681a:	68a3      	ldr	r3, [r4, #8]
 801681c:	4a3f      	ldr	r2, [pc, #252]	; (801691c <tcp_input+0x2b0>)
 801681e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8016820:	4b35      	ldr	r3, [pc, #212]	; (80168f8 <tcp_input+0x28c>)
 8016822:	681b      	ldr	r3, [r3, #0]
 8016824:	89db      	ldrh	r3, [r3, #14]
 8016826:	b29b      	uxth	r3, r3
 8016828:	4a33      	ldr	r2, [pc, #204]	; (80168f8 <tcp_input+0x28c>)
 801682a:	6814      	ldr	r4, [r2, #0]
 801682c:	4618      	mov	r0, r3
 801682e:	f7fc fb89 	bl	8012f44 <lwip_htons>
 8016832:	4603      	mov	r3, r0
 8016834:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8016836:	4b30      	ldr	r3, [pc, #192]	; (80168f8 <tcp_input+0x28c>)
 8016838:	681b      	ldr	r3, [r3, #0]
 801683a:	899b      	ldrh	r3, [r3, #12]
 801683c:	b29b      	uxth	r3, r3
 801683e:	4618      	mov	r0, r3
 8016840:	f7fc fb80 	bl	8012f44 <lwip_htons>
 8016844:	4603      	mov	r3, r0
 8016846:	b2db      	uxtb	r3, r3
 8016848:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801684c:	b2da      	uxtb	r2, r3
 801684e:	4b34      	ldr	r3, [pc, #208]	; (8016920 <tcp_input+0x2b4>)
 8016850:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	891a      	ldrh	r2, [r3, #8]
 8016856:	4b33      	ldr	r3, [pc, #204]	; (8016924 <tcp_input+0x2b8>)
 8016858:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801685a:	4b31      	ldr	r3, [pc, #196]	; (8016920 <tcp_input+0x2b4>)
 801685c:	781b      	ldrb	r3, [r3, #0]
 801685e:	f003 0303 	and.w	r3, r3, #3
 8016862:	2b00      	cmp	r3, #0
 8016864:	d00c      	beq.n	8016880 <tcp_input+0x214>
    tcplen++;
 8016866:	4b2f      	ldr	r3, [pc, #188]	; (8016924 <tcp_input+0x2b8>)
 8016868:	881b      	ldrh	r3, [r3, #0]
 801686a:	3301      	adds	r3, #1
 801686c:	b29a      	uxth	r2, r3
 801686e:	4b2d      	ldr	r3, [pc, #180]	; (8016924 <tcp_input+0x2b8>)
 8016870:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	891a      	ldrh	r2, [r3, #8]
 8016876:	4b2b      	ldr	r3, [pc, #172]	; (8016924 <tcp_input+0x2b8>)
 8016878:	881b      	ldrh	r3, [r3, #0]
 801687a:	429a      	cmp	r2, r3
 801687c:	f200 82d9 	bhi.w	8016e32 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8016880:	2300      	movs	r3, #0
 8016882:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8016884:	4b28      	ldr	r3, [pc, #160]	; (8016928 <tcp_input+0x2bc>)
 8016886:	681b      	ldr	r3, [r3, #0]
 8016888:	61fb      	str	r3, [r7, #28]
 801688a:	e09d      	b.n	80169c8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801688c:	69fb      	ldr	r3, [r7, #28]
 801688e:	7d1b      	ldrb	r3, [r3, #20]
 8016890:	2b00      	cmp	r3, #0
 8016892:	d105      	bne.n	80168a0 <tcp_input+0x234>
 8016894:	4b15      	ldr	r3, [pc, #84]	; (80168ec <tcp_input+0x280>)
 8016896:	22fb      	movs	r2, #251	; 0xfb
 8016898:	4924      	ldr	r1, [pc, #144]	; (801692c <tcp_input+0x2c0>)
 801689a:	4816      	ldr	r0, [pc, #88]	; (80168f4 <tcp_input+0x288>)
 801689c:	f008 fc86 	bl	801f1ac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 80168a0:	69fb      	ldr	r3, [r7, #28]
 80168a2:	7d1b      	ldrb	r3, [r3, #20]
 80168a4:	2b0a      	cmp	r3, #10
 80168a6:	d105      	bne.n	80168b4 <tcp_input+0x248>
 80168a8:	4b10      	ldr	r3, [pc, #64]	; (80168ec <tcp_input+0x280>)
 80168aa:	22fc      	movs	r2, #252	; 0xfc
 80168ac:	4920      	ldr	r1, [pc, #128]	; (8016930 <tcp_input+0x2c4>)
 80168ae:	4811      	ldr	r0, [pc, #68]	; (80168f4 <tcp_input+0x288>)
 80168b0:	f008 fc7c 	bl	801f1ac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 80168b4:	69fb      	ldr	r3, [r7, #28]
 80168b6:	7d1b      	ldrb	r3, [r3, #20]
 80168b8:	2b01      	cmp	r3, #1
 80168ba:	d105      	bne.n	80168c8 <tcp_input+0x25c>
 80168bc:	4b0b      	ldr	r3, [pc, #44]	; (80168ec <tcp_input+0x280>)
 80168be:	22fd      	movs	r2, #253	; 0xfd
 80168c0:	491c      	ldr	r1, [pc, #112]	; (8016934 <tcp_input+0x2c8>)
 80168c2:	480c      	ldr	r0, [pc, #48]	; (80168f4 <tcp_input+0x288>)
 80168c4:	f008 fc72 	bl	801f1ac <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80168c8:	69fb      	ldr	r3, [r7, #28]
 80168ca:	7a1b      	ldrb	r3, [r3, #8]
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d033      	beq.n	8016938 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80168d0:	69fb      	ldr	r3, [r7, #28]
 80168d2:	7a1a      	ldrb	r2, [r3, #8]
 80168d4:	4b09      	ldr	r3, [pc, #36]	; (80168fc <tcp_input+0x290>)
 80168d6:	685b      	ldr	r3, [r3, #4]
 80168d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80168dc:	3301      	adds	r3, #1
 80168de:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80168e0:	429a      	cmp	r2, r3
 80168e2:	d029      	beq.n	8016938 <tcp_input+0x2cc>
      prev = pcb;
 80168e4:	69fb      	ldr	r3, [r7, #28]
 80168e6:	61bb      	str	r3, [r7, #24]
      continue;
 80168e8:	e06b      	b.n	80169c2 <tcp_input+0x356>
 80168ea:	bf00      	nop
 80168ec:	0802547c 	.word	0x0802547c
 80168f0:	080254b0 	.word	0x080254b0
 80168f4:	080254c8 	.word	0x080254c8
 80168f8:	20006e24 	.word	0x20006e24
 80168fc:	2000aa5c 	.word	0x2000aa5c
 8016900:	20006e28 	.word	0x20006e28
 8016904:	20006e2c 	.word	0x20006e2c
 8016908:	20006e2a 	.word	0x20006e2a
 801690c:	080254f0 	.word	0x080254f0
 8016910:	08025500 	.word	0x08025500
 8016914:	0802550c 	.word	0x0802550c
 8016918:	20006e34 	.word	0x20006e34
 801691c:	20006e38 	.word	0x20006e38
 8016920:	20006e40 	.word	0x20006e40
 8016924:	20006e3e 	.word	0x20006e3e
 8016928:	2000e170 	.word	0x2000e170
 801692c:	0802552c 	.word	0x0802552c
 8016930:	08025554 	.word	0x08025554
 8016934:	08025580 	.word	0x08025580
    }

    if (pcb->remote_port == tcphdr->src &&
 8016938:	69fb      	ldr	r3, [r7, #28]
 801693a:	8b1a      	ldrh	r2, [r3, #24]
 801693c:	4b94      	ldr	r3, [pc, #592]	; (8016b90 <tcp_input+0x524>)
 801693e:	681b      	ldr	r3, [r3, #0]
 8016940:	881b      	ldrh	r3, [r3, #0]
 8016942:	b29b      	uxth	r3, r3
 8016944:	429a      	cmp	r2, r3
 8016946:	d13a      	bne.n	80169be <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8016948:	69fb      	ldr	r3, [r7, #28]
 801694a:	8ada      	ldrh	r2, [r3, #22]
 801694c:	4b90      	ldr	r3, [pc, #576]	; (8016b90 <tcp_input+0x524>)
 801694e:	681b      	ldr	r3, [r3, #0]
 8016950:	885b      	ldrh	r3, [r3, #2]
 8016952:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8016954:	429a      	cmp	r2, r3
 8016956:	d132      	bne.n	80169be <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016958:	69fb      	ldr	r3, [r7, #28]
 801695a:	685a      	ldr	r2, [r3, #4]
 801695c:	4b8d      	ldr	r3, [pc, #564]	; (8016b94 <tcp_input+0x528>)
 801695e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8016960:	429a      	cmp	r2, r3
 8016962:	d12c      	bne.n	80169be <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016964:	69fb      	ldr	r3, [r7, #28]
 8016966:	681a      	ldr	r2, [r3, #0]
 8016968:	4b8a      	ldr	r3, [pc, #552]	; (8016b94 <tcp_input+0x528>)
 801696a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801696c:	429a      	cmp	r2, r3
 801696e:	d126      	bne.n	80169be <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8016970:	69fb      	ldr	r3, [r7, #28]
 8016972:	68db      	ldr	r3, [r3, #12]
 8016974:	69fa      	ldr	r2, [r7, #28]
 8016976:	429a      	cmp	r2, r3
 8016978:	d106      	bne.n	8016988 <tcp_input+0x31c>
 801697a:	4b87      	ldr	r3, [pc, #540]	; (8016b98 <tcp_input+0x52c>)
 801697c:	f240 120d 	movw	r2, #269	; 0x10d
 8016980:	4986      	ldr	r1, [pc, #536]	; (8016b9c <tcp_input+0x530>)
 8016982:	4887      	ldr	r0, [pc, #540]	; (8016ba0 <tcp_input+0x534>)
 8016984:	f008 fc12 	bl	801f1ac <iprintf>
      if (prev != NULL) {
 8016988:	69bb      	ldr	r3, [r7, #24]
 801698a:	2b00      	cmp	r3, #0
 801698c:	d00a      	beq.n	80169a4 <tcp_input+0x338>
        prev->next = pcb->next;
 801698e:	69fb      	ldr	r3, [r7, #28]
 8016990:	68da      	ldr	r2, [r3, #12]
 8016992:	69bb      	ldr	r3, [r7, #24]
 8016994:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8016996:	4b83      	ldr	r3, [pc, #524]	; (8016ba4 <tcp_input+0x538>)
 8016998:	681a      	ldr	r2, [r3, #0]
 801699a:	69fb      	ldr	r3, [r7, #28]
 801699c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801699e:	4a81      	ldr	r2, [pc, #516]	; (8016ba4 <tcp_input+0x538>)
 80169a0:	69fb      	ldr	r3, [r7, #28]
 80169a2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80169a4:	69fb      	ldr	r3, [r7, #28]
 80169a6:	68db      	ldr	r3, [r3, #12]
 80169a8:	69fa      	ldr	r2, [r7, #28]
 80169aa:	429a      	cmp	r2, r3
 80169ac:	d111      	bne.n	80169d2 <tcp_input+0x366>
 80169ae:	4b7a      	ldr	r3, [pc, #488]	; (8016b98 <tcp_input+0x52c>)
 80169b0:	f240 1215 	movw	r2, #277	; 0x115
 80169b4:	497c      	ldr	r1, [pc, #496]	; (8016ba8 <tcp_input+0x53c>)
 80169b6:	487a      	ldr	r0, [pc, #488]	; (8016ba0 <tcp_input+0x534>)
 80169b8:	f008 fbf8 	bl	801f1ac <iprintf>
      break;
 80169bc:	e009      	b.n	80169d2 <tcp_input+0x366>
    }
    prev = pcb;
 80169be:	69fb      	ldr	r3, [r7, #28]
 80169c0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80169c2:	69fb      	ldr	r3, [r7, #28]
 80169c4:	68db      	ldr	r3, [r3, #12]
 80169c6:	61fb      	str	r3, [r7, #28]
 80169c8:	69fb      	ldr	r3, [r7, #28]
 80169ca:	2b00      	cmp	r3, #0
 80169cc:	f47f af5e 	bne.w	801688c <tcp_input+0x220>
 80169d0:	e000      	b.n	80169d4 <tcp_input+0x368>
      break;
 80169d2:	bf00      	nop
  }

  if (pcb == NULL) {
 80169d4:	69fb      	ldr	r3, [r7, #28]
 80169d6:	2b00      	cmp	r3, #0
 80169d8:	f040 8095 	bne.w	8016b06 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80169dc:	4b73      	ldr	r3, [pc, #460]	; (8016bac <tcp_input+0x540>)
 80169de:	681b      	ldr	r3, [r3, #0]
 80169e0:	61fb      	str	r3, [r7, #28]
 80169e2:	e03f      	b.n	8016a64 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80169e4:	69fb      	ldr	r3, [r7, #28]
 80169e6:	7d1b      	ldrb	r3, [r3, #20]
 80169e8:	2b0a      	cmp	r3, #10
 80169ea:	d006      	beq.n	80169fa <tcp_input+0x38e>
 80169ec:	4b6a      	ldr	r3, [pc, #424]	; (8016b98 <tcp_input+0x52c>)
 80169ee:	f240 121f 	movw	r2, #287	; 0x11f
 80169f2:	496f      	ldr	r1, [pc, #444]	; (8016bb0 <tcp_input+0x544>)
 80169f4:	486a      	ldr	r0, [pc, #424]	; (8016ba0 <tcp_input+0x534>)
 80169f6:	f008 fbd9 	bl	801f1ac <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80169fa:	69fb      	ldr	r3, [r7, #28]
 80169fc:	7a1b      	ldrb	r3, [r3, #8]
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d009      	beq.n	8016a16 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016a02:	69fb      	ldr	r3, [r7, #28]
 8016a04:	7a1a      	ldrb	r2, [r3, #8]
 8016a06:	4b63      	ldr	r3, [pc, #396]	; (8016b94 <tcp_input+0x528>)
 8016a08:	685b      	ldr	r3, [r3, #4]
 8016a0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016a0e:	3301      	adds	r3, #1
 8016a10:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016a12:	429a      	cmp	r2, r3
 8016a14:	d122      	bne.n	8016a5c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8016a16:	69fb      	ldr	r3, [r7, #28]
 8016a18:	8b1a      	ldrh	r2, [r3, #24]
 8016a1a:	4b5d      	ldr	r3, [pc, #372]	; (8016b90 <tcp_input+0x524>)
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	881b      	ldrh	r3, [r3, #0]
 8016a20:	b29b      	uxth	r3, r3
 8016a22:	429a      	cmp	r2, r3
 8016a24:	d11b      	bne.n	8016a5e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8016a26:	69fb      	ldr	r3, [r7, #28]
 8016a28:	8ada      	ldrh	r2, [r3, #22]
 8016a2a:	4b59      	ldr	r3, [pc, #356]	; (8016b90 <tcp_input+0x524>)
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	885b      	ldrh	r3, [r3, #2]
 8016a30:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8016a32:	429a      	cmp	r2, r3
 8016a34:	d113      	bne.n	8016a5e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016a36:	69fb      	ldr	r3, [r7, #28]
 8016a38:	685a      	ldr	r2, [r3, #4]
 8016a3a:	4b56      	ldr	r3, [pc, #344]	; (8016b94 <tcp_input+0x528>)
 8016a3c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8016a3e:	429a      	cmp	r2, r3
 8016a40:	d10d      	bne.n	8016a5e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016a42:	69fb      	ldr	r3, [r7, #28]
 8016a44:	681a      	ldr	r2, [r3, #0]
 8016a46:	4b53      	ldr	r3, [pc, #332]	; (8016b94 <tcp_input+0x528>)
 8016a48:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8016a4a:	429a      	cmp	r2, r3
 8016a4c:	d107      	bne.n	8016a5e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8016a4e:	69f8      	ldr	r0, [r7, #28]
 8016a50:	f000 fb54 	bl	80170fc <tcp_timewait_input>
        }
        pbuf_free(p);
 8016a54:	6878      	ldr	r0, [r7, #4]
 8016a56:	f7fd fdbd 	bl	80145d4 <pbuf_free>
        return;
 8016a5a:	e1f0      	b.n	8016e3e <tcp_input+0x7d2>
        continue;
 8016a5c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8016a5e:	69fb      	ldr	r3, [r7, #28]
 8016a60:	68db      	ldr	r3, [r3, #12]
 8016a62:	61fb      	str	r3, [r7, #28]
 8016a64:	69fb      	ldr	r3, [r7, #28]
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d1bc      	bne.n	80169e4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8016a6a:	2300      	movs	r3, #0
 8016a6c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016a6e:	4b51      	ldr	r3, [pc, #324]	; (8016bb4 <tcp_input+0x548>)
 8016a70:	681b      	ldr	r3, [r3, #0]
 8016a72:	617b      	str	r3, [r7, #20]
 8016a74:	e02a      	b.n	8016acc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016a76:	697b      	ldr	r3, [r7, #20]
 8016a78:	7a1b      	ldrb	r3, [r3, #8]
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d00c      	beq.n	8016a98 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016a7e:	697b      	ldr	r3, [r7, #20]
 8016a80:	7a1a      	ldrb	r2, [r3, #8]
 8016a82:	4b44      	ldr	r3, [pc, #272]	; (8016b94 <tcp_input+0x528>)
 8016a84:	685b      	ldr	r3, [r3, #4]
 8016a86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016a8a:	3301      	adds	r3, #1
 8016a8c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8016a8e:	429a      	cmp	r2, r3
 8016a90:	d002      	beq.n	8016a98 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8016a92:	697b      	ldr	r3, [r7, #20]
 8016a94:	61bb      	str	r3, [r7, #24]
        continue;
 8016a96:	e016      	b.n	8016ac6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8016a98:	697b      	ldr	r3, [r7, #20]
 8016a9a:	8ada      	ldrh	r2, [r3, #22]
 8016a9c:	4b3c      	ldr	r3, [pc, #240]	; (8016b90 <tcp_input+0x524>)
 8016a9e:	681b      	ldr	r3, [r3, #0]
 8016aa0:	885b      	ldrh	r3, [r3, #2]
 8016aa2:	b29b      	uxth	r3, r3
 8016aa4:	429a      	cmp	r2, r3
 8016aa6:	d10c      	bne.n	8016ac2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8016aa8:	697b      	ldr	r3, [r7, #20]
 8016aaa:	681a      	ldr	r2, [r3, #0]
 8016aac:	4b39      	ldr	r3, [pc, #228]	; (8016b94 <tcp_input+0x528>)
 8016aae:	695b      	ldr	r3, [r3, #20]
 8016ab0:	429a      	cmp	r2, r3
 8016ab2:	d00f      	beq.n	8016ad4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8016ab4:	697b      	ldr	r3, [r7, #20]
 8016ab6:	2b00      	cmp	r3, #0
 8016ab8:	d00d      	beq.n	8016ad6 <tcp_input+0x46a>
 8016aba:	697b      	ldr	r3, [r7, #20]
 8016abc:	681b      	ldr	r3, [r3, #0]
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d009      	beq.n	8016ad6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8016ac2:	697b      	ldr	r3, [r7, #20]
 8016ac4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8016ac6:	697b      	ldr	r3, [r7, #20]
 8016ac8:	68db      	ldr	r3, [r3, #12]
 8016aca:	617b      	str	r3, [r7, #20]
 8016acc:	697b      	ldr	r3, [r7, #20]
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	d1d1      	bne.n	8016a76 <tcp_input+0x40a>
 8016ad2:	e000      	b.n	8016ad6 <tcp_input+0x46a>
            break;
 8016ad4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8016ad6:	697b      	ldr	r3, [r7, #20]
 8016ad8:	2b00      	cmp	r3, #0
 8016ada:	d014      	beq.n	8016b06 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8016adc:	69bb      	ldr	r3, [r7, #24]
 8016ade:	2b00      	cmp	r3, #0
 8016ae0:	d00a      	beq.n	8016af8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8016ae2:	697b      	ldr	r3, [r7, #20]
 8016ae4:	68da      	ldr	r2, [r3, #12]
 8016ae6:	69bb      	ldr	r3, [r7, #24]
 8016ae8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8016aea:	4b32      	ldr	r3, [pc, #200]	; (8016bb4 <tcp_input+0x548>)
 8016aec:	681a      	ldr	r2, [r3, #0]
 8016aee:	697b      	ldr	r3, [r7, #20]
 8016af0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8016af2:	4a30      	ldr	r2, [pc, #192]	; (8016bb4 <tcp_input+0x548>)
 8016af4:	697b      	ldr	r3, [r7, #20]
 8016af6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8016af8:	6978      	ldr	r0, [r7, #20]
 8016afa:	f000 fa01 	bl	8016f00 <tcp_listen_input>
      }
      pbuf_free(p);
 8016afe:	6878      	ldr	r0, [r7, #4]
 8016b00:	f7fd fd68 	bl	80145d4 <pbuf_free>
      return;
 8016b04:	e19b      	b.n	8016e3e <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8016b06:	69fb      	ldr	r3, [r7, #28]
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	f000 8160 	beq.w	8016dce <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8016b0e:	4b2a      	ldr	r3, [pc, #168]	; (8016bb8 <tcp_input+0x54c>)
 8016b10:	2200      	movs	r2, #0
 8016b12:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	891a      	ldrh	r2, [r3, #8]
 8016b18:	4b27      	ldr	r3, [pc, #156]	; (8016bb8 <tcp_input+0x54c>)
 8016b1a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8016b1c:	4a26      	ldr	r2, [pc, #152]	; (8016bb8 <tcp_input+0x54c>)
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8016b22:	4b1b      	ldr	r3, [pc, #108]	; (8016b90 <tcp_input+0x524>)
 8016b24:	681b      	ldr	r3, [r3, #0]
 8016b26:	4a24      	ldr	r2, [pc, #144]	; (8016bb8 <tcp_input+0x54c>)
 8016b28:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8016b2a:	4b24      	ldr	r3, [pc, #144]	; (8016bbc <tcp_input+0x550>)
 8016b2c:	2200      	movs	r2, #0
 8016b2e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8016b30:	4b23      	ldr	r3, [pc, #140]	; (8016bc0 <tcp_input+0x554>)
 8016b32:	2200      	movs	r2, #0
 8016b34:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8016b36:	4b23      	ldr	r3, [pc, #140]	; (8016bc4 <tcp_input+0x558>)
 8016b38:	2200      	movs	r2, #0
 8016b3a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8016b3c:	4b22      	ldr	r3, [pc, #136]	; (8016bc8 <tcp_input+0x55c>)
 8016b3e:	781b      	ldrb	r3, [r3, #0]
 8016b40:	f003 0308 	and.w	r3, r3, #8
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	d006      	beq.n	8016b56 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	7b5b      	ldrb	r3, [r3, #13]
 8016b4c:	f043 0301 	orr.w	r3, r3, #1
 8016b50:	b2da      	uxtb	r2, r3
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8016b56:	69fb      	ldr	r3, [r7, #28]
 8016b58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d038      	beq.n	8016bd0 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016b5e:	69f8      	ldr	r0, [r7, #28]
 8016b60:	f7ff f870 	bl	8015c44 <tcp_process_refused_data>
 8016b64:	4603      	mov	r3, r0
 8016b66:	f113 0f0d 	cmn.w	r3, #13
 8016b6a:	d007      	beq.n	8016b7c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016b6c:	69fb      	ldr	r3, [r7, #28]
 8016b6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	d02d      	beq.n	8016bd0 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8016b74:	4b15      	ldr	r3, [pc, #84]	; (8016bcc <tcp_input+0x560>)
 8016b76:	881b      	ldrh	r3, [r3, #0]
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d029      	beq.n	8016bd0 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8016b7c:	69fb      	ldr	r3, [r7, #28]
 8016b7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8016b80:	2b00      	cmp	r3, #0
 8016b82:	f040 8104 	bne.w	8016d8e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8016b86:	69f8      	ldr	r0, [r7, #28]
 8016b88:	f003 fe16 	bl	801a7b8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8016b8c:	e0ff      	b.n	8016d8e <tcp_input+0x722>
 8016b8e:	bf00      	nop
 8016b90:	20006e24 	.word	0x20006e24
 8016b94:	2000aa5c 	.word	0x2000aa5c
 8016b98:	0802547c 	.word	0x0802547c
 8016b9c:	080255a8 	.word	0x080255a8
 8016ba0:	080254c8 	.word	0x080254c8
 8016ba4:	2000e170 	.word	0x2000e170
 8016ba8:	080255d4 	.word	0x080255d4
 8016bac:	2000e180 	.word	0x2000e180
 8016bb0:	08025600 	.word	0x08025600
 8016bb4:	2000e178 	.word	0x2000e178
 8016bb8:	20006e14 	.word	0x20006e14
 8016bbc:	20006e44 	.word	0x20006e44
 8016bc0:	20006e41 	.word	0x20006e41
 8016bc4:	20006e3c 	.word	0x20006e3c
 8016bc8:	20006e40 	.word	0x20006e40
 8016bcc:	20006e3e 	.word	0x20006e3e
      }
    }
    tcp_input_pcb = pcb;
 8016bd0:	4a9c      	ldr	r2, [pc, #624]	; (8016e44 <tcp_input+0x7d8>)
 8016bd2:	69fb      	ldr	r3, [r7, #28]
 8016bd4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8016bd6:	69f8      	ldr	r0, [r7, #28]
 8016bd8:	f000 fb0a 	bl	80171f0 <tcp_process>
 8016bdc:	4603      	mov	r3, r0
 8016bde:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8016be0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016be4:	f113 0f0d 	cmn.w	r3, #13
 8016be8:	f000 80d3 	beq.w	8016d92 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8016bec:	4b96      	ldr	r3, [pc, #600]	; (8016e48 <tcp_input+0x7dc>)
 8016bee:	781b      	ldrb	r3, [r3, #0]
 8016bf0:	f003 0308 	and.w	r3, r3, #8
 8016bf4:	2b00      	cmp	r3, #0
 8016bf6:	d015      	beq.n	8016c24 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8016bf8:	69fb      	ldr	r3, [r7, #28]
 8016bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d008      	beq.n	8016c14 <tcp_input+0x5a8>
 8016c02:	69fb      	ldr	r3, [r7, #28]
 8016c04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016c08:	69fa      	ldr	r2, [r7, #28]
 8016c0a:	6912      	ldr	r2, [r2, #16]
 8016c0c:	f06f 010d 	mvn.w	r1, #13
 8016c10:	4610      	mov	r0, r2
 8016c12:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8016c14:	69f9      	ldr	r1, [r7, #28]
 8016c16:	488d      	ldr	r0, [pc, #564]	; (8016e4c <tcp_input+0x7e0>)
 8016c18:	f7ff fbb0 	bl	801637c <tcp_pcb_remove>
        tcp_free(pcb);
 8016c1c:	69f8      	ldr	r0, [r7, #28]
 8016c1e:	f7fd ff95 	bl	8014b4c <tcp_free>
 8016c22:	e0c1      	b.n	8016da8 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8016c24:	2300      	movs	r3, #0
 8016c26:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8016c28:	4b89      	ldr	r3, [pc, #548]	; (8016e50 <tcp_input+0x7e4>)
 8016c2a:	881b      	ldrh	r3, [r3, #0]
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d01d      	beq.n	8016c6c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8016c30:	4b87      	ldr	r3, [pc, #540]	; (8016e50 <tcp_input+0x7e4>)
 8016c32:	881b      	ldrh	r3, [r3, #0]
 8016c34:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8016c36:	69fb      	ldr	r3, [r7, #28]
 8016c38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016c3c:	2b00      	cmp	r3, #0
 8016c3e:	d00a      	beq.n	8016c56 <tcp_input+0x5ea>
 8016c40:	69fb      	ldr	r3, [r7, #28]
 8016c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8016c46:	69fa      	ldr	r2, [r7, #28]
 8016c48:	6910      	ldr	r0, [r2, #16]
 8016c4a:	89fa      	ldrh	r2, [r7, #14]
 8016c4c:	69f9      	ldr	r1, [r7, #28]
 8016c4e:	4798      	blx	r3
 8016c50:	4603      	mov	r3, r0
 8016c52:	74fb      	strb	r3, [r7, #19]
 8016c54:	e001      	b.n	8016c5a <tcp_input+0x5ee>
 8016c56:	2300      	movs	r3, #0
 8016c58:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8016c5a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016c5e:	f113 0f0d 	cmn.w	r3, #13
 8016c62:	f000 8098 	beq.w	8016d96 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8016c66:	4b7a      	ldr	r3, [pc, #488]	; (8016e50 <tcp_input+0x7e4>)
 8016c68:	2200      	movs	r2, #0
 8016c6a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8016c6c:	69f8      	ldr	r0, [r7, #28]
 8016c6e:	f000 f907 	bl	8016e80 <tcp_input_delayed_close>
 8016c72:	4603      	mov	r3, r0
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	f040 8090 	bne.w	8016d9a <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8016c7a:	4b76      	ldr	r3, [pc, #472]	; (8016e54 <tcp_input+0x7e8>)
 8016c7c:	681b      	ldr	r3, [r3, #0]
 8016c7e:	2b00      	cmp	r3, #0
 8016c80:	d041      	beq.n	8016d06 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8016c82:	69fb      	ldr	r3, [r7, #28]
 8016c84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d006      	beq.n	8016c98 <tcp_input+0x62c>
 8016c8a:	4b73      	ldr	r3, [pc, #460]	; (8016e58 <tcp_input+0x7ec>)
 8016c8c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8016c90:	4972      	ldr	r1, [pc, #456]	; (8016e5c <tcp_input+0x7f0>)
 8016c92:	4873      	ldr	r0, [pc, #460]	; (8016e60 <tcp_input+0x7f4>)
 8016c94:	f008 fa8a 	bl	801f1ac <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8016c98:	69fb      	ldr	r3, [r7, #28]
 8016c9a:	8b5b      	ldrh	r3, [r3, #26]
 8016c9c:	f003 0310 	and.w	r3, r3, #16
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d008      	beq.n	8016cb6 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8016ca4:	4b6b      	ldr	r3, [pc, #428]	; (8016e54 <tcp_input+0x7e8>)
 8016ca6:	681b      	ldr	r3, [r3, #0]
 8016ca8:	4618      	mov	r0, r3
 8016caa:	f7fd fc93 	bl	80145d4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8016cae:	69f8      	ldr	r0, [r7, #28]
 8016cb0:	f7fe fa90 	bl	80151d4 <tcp_abort>
            goto aborted;
 8016cb4:	e078      	b.n	8016da8 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8016cb6:	69fb      	ldr	r3, [r7, #28]
 8016cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016cbc:	2b00      	cmp	r3, #0
 8016cbe:	d00c      	beq.n	8016cda <tcp_input+0x66e>
 8016cc0:	69fb      	ldr	r3, [r7, #28]
 8016cc2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016cc6:	69fb      	ldr	r3, [r7, #28]
 8016cc8:	6918      	ldr	r0, [r3, #16]
 8016cca:	4b62      	ldr	r3, [pc, #392]	; (8016e54 <tcp_input+0x7e8>)
 8016ccc:	681a      	ldr	r2, [r3, #0]
 8016cce:	2300      	movs	r3, #0
 8016cd0:	69f9      	ldr	r1, [r7, #28]
 8016cd2:	47a0      	blx	r4
 8016cd4:	4603      	mov	r3, r0
 8016cd6:	74fb      	strb	r3, [r7, #19]
 8016cd8:	e008      	b.n	8016cec <tcp_input+0x680>
 8016cda:	4b5e      	ldr	r3, [pc, #376]	; (8016e54 <tcp_input+0x7e8>)
 8016cdc:	681a      	ldr	r2, [r3, #0]
 8016cde:	2300      	movs	r3, #0
 8016ce0:	69f9      	ldr	r1, [r7, #28]
 8016ce2:	2000      	movs	r0, #0
 8016ce4:	f7ff f884 	bl	8015df0 <tcp_recv_null>
 8016ce8:	4603      	mov	r3, r0
 8016cea:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8016cec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016cf0:	f113 0f0d 	cmn.w	r3, #13
 8016cf4:	d053      	beq.n	8016d9e <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8016cf6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	d003      	beq.n	8016d06 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8016cfe:	4b55      	ldr	r3, [pc, #340]	; (8016e54 <tcp_input+0x7e8>)
 8016d00:	681a      	ldr	r2, [r3, #0]
 8016d02:	69fb      	ldr	r3, [r7, #28]
 8016d04:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8016d06:	4b50      	ldr	r3, [pc, #320]	; (8016e48 <tcp_input+0x7dc>)
 8016d08:	781b      	ldrb	r3, [r3, #0]
 8016d0a:	f003 0320 	and.w	r3, r3, #32
 8016d0e:	2b00      	cmp	r3, #0
 8016d10:	d030      	beq.n	8016d74 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8016d12:	69fb      	ldr	r3, [r7, #28]
 8016d14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	d009      	beq.n	8016d2e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8016d1a:	69fb      	ldr	r3, [r7, #28]
 8016d1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016d1e:	7b5a      	ldrb	r2, [r3, #13]
 8016d20:	69fb      	ldr	r3, [r7, #28]
 8016d22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016d24:	f042 0220 	orr.w	r2, r2, #32
 8016d28:	b2d2      	uxtb	r2, r2
 8016d2a:	735a      	strb	r2, [r3, #13]
 8016d2c:	e022      	b.n	8016d74 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8016d2e:	69fb      	ldr	r3, [r7, #28]
 8016d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016d32:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8016d36:	d005      	beq.n	8016d44 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8016d38:	69fb      	ldr	r3, [r7, #28]
 8016d3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016d3c:	3301      	adds	r3, #1
 8016d3e:	b29a      	uxth	r2, r3
 8016d40:	69fb      	ldr	r3, [r7, #28]
 8016d42:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8016d44:	69fb      	ldr	r3, [r7, #28]
 8016d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016d4a:	2b00      	cmp	r3, #0
 8016d4c:	d00b      	beq.n	8016d66 <tcp_input+0x6fa>
 8016d4e:	69fb      	ldr	r3, [r7, #28]
 8016d50:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016d54:	69fb      	ldr	r3, [r7, #28]
 8016d56:	6918      	ldr	r0, [r3, #16]
 8016d58:	2300      	movs	r3, #0
 8016d5a:	2200      	movs	r2, #0
 8016d5c:	69f9      	ldr	r1, [r7, #28]
 8016d5e:	47a0      	blx	r4
 8016d60:	4603      	mov	r3, r0
 8016d62:	74fb      	strb	r3, [r7, #19]
 8016d64:	e001      	b.n	8016d6a <tcp_input+0x6fe>
 8016d66:	2300      	movs	r3, #0
 8016d68:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8016d6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8016d6e:	f113 0f0d 	cmn.w	r3, #13
 8016d72:	d016      	beq.n	8016da2 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8016d74:	4b33      	ldr	r3, [pc, #204]	; (8016e44 <tcp_input+0x7d8>)
 8016d76:	2200      	movs	r2, #0
 8016d78:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8016d7a:	69f8      	ldr	r0, [r7, #28]
 8016d7c:	f000 f880 	bl	8016e80 <tcp_input_delayed_close>
 8016d80:	4603      	mov	r3, r0
 8016d82:	2b00      	cmp	r3, #0
 8016d84:	d10f      	bne.n	8016da6 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8016d86:	69f8      	ldr	r0, [r7, #28]
 8016d88:	f002 ff10 	bl	8019bac <tcp_output>
 8016d8c:	e00c      	b.n	8016da8 <tcp_input+0x73c>
        goto aborted;
 8016d8e:	bf00      	nop
 8016d90:	e00a      	b.n	8016da8 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8016d92:	bf00      	nop
 8016d94:	e008      	b.n	8016da8 <tcp_input+0x73c>
              goto aborted;
 8016d96:	bf00      	nop
 8016d98:	e006      	b.n	8016da8 <tcp_input+0x73c>
          goto aborted;
 8016d9a:	bf00      	nop
 8016d9c:	e004      	b.n	8016da8 <tcp_input+0x73c>
            goto aborted;
 8016d9e:	bf00      	nop
 8016da0:	e002      	b.n	8016da8 <tcp_input+0x73c>
              goto aborted;
 8016da2:	bf00      	nop
 8016da4:	e000      	b.n	8016da8 <tcp_input+0x73c>
          goto aborted;
 8016da6:	bf00      	nop
    tcp_input_pcb = NULL;
 8016da8:	4b26      	ldr	r3, [pc, #152]	; (8016e44 <tcp_input+0x7d8>)
 8016daa:	2200      	movs	r2, #0
 8016dac:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8016dae:	4b29      	ldr	r3, [pc, #164]	; (8016e54 <tcp_input+0x7e8>)
 8016db0:	2200      	movs	r2, #0
 8016db2:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8016db4:	4b2b      	ldr	r3, [pc, #172]	; (8016e64 <tcp_input+0x7f8>)
 8016db6:	685b      	ldr	r3, [r3, #4]
 8016db8:	2b00      	cmp	r3, #0
 8016dba:	d03f      	beq.n	8016e3c <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8016dbc:	4b29      	ldr	r3, [pc, #164]	; (8016e64 <tcp_input+0x7f8>)
 8016dbe:	685b      	ldr	r3, [r3, #4]
 8016dc0:	4618      	mov	r0, r3
 8016dc2:	f7fd fc07 	bl	80145d4 <pbuf_free>
      inseg.p = NULL;
 8016dc6:	4b27      	ldr	r3, [pc, #156]	; (8016e64 <tcp_input+0x7f8>)
 8016dc8:	2200      	movs	r2, #0
 8016dca:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8016dcc:	e036      	b.n	8016e3c <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8016dce:	4b26      	ldr	r3, [pc, #152]	; (8016e68 <tcp_input+0x7fc>)
 8016dd0:	681b      	ldr	r3, [r3, #0]
 8016dd2:	899b      	ldrh	r3, [r3, #12]
 8016dd4:	b29b      	uxth	r3, r3
 8016dd6:	4618      	mov	r0, r3
 8016dd8:	f7fc f8b4 	bl	8012f44 <lwip_htons>
 8016ddc:	4603      	mov	r3, r0
 8016dde:	b2db      	uxtb	r3, r3
 8016de0:	f003 0304 	and.w	r3, r3, #4
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	d118      	bne.n	8016e1a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016de8:	4b20      	ldr	r3, [pc, #128]	; (8016e6c <tcp_input+0x800>)
 8016dea:	6819      	ldr	r1, [r3, #0]
 8016dec:	4b20      	ldr	r3, [pc, #128]	; (8016e70 <tcp_input+0x804>)
 8016dee:	881b      	ldrh	r3, [r3, #0]
 8016df0:	461a      	mov	r2, r3
 8016df2:	4b20      	ldr	r3, [pc, #128]	; (8016e74 <tcp_input+0x808>)
 8016df4:	681b      	ldr	r3, [r3, #0]
 8016df6:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016df8:	4b1b      	ldr	r3, [pc, #108]	; (8016e68 <tcp_input+0x7fc>)
 8016dfa:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016dfc:	885b      	ldrh	r3, [r3, #2]
 8016dfe:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016e00:	4a19      	ldr	r2, [pc, #100]	; (8016e68 <tcp_input+0x7fc>)
 8016e02:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016e04:	8812      	ldrh	r2, [r2, #0]
 8016e06:	b292      	uxth	r2, r2
 8016e08:	9202      	str	r2, [sp, #8]
 8016e0a:	9301      	str	r3, [sp, #4]
 8016e0c:	4b1a      	ldr	r3, [pc, #104]	; (8016e78 <tcp_input+0x80c>)
 8016e0e:	9300      	str	r3, [sp, #0]
 8016e10:	4b1a      	ldr	r3, [pc, #104]	; (8016e7c <tcp_input+0x810>)
 8016e12:	4602      	mov	r2, r0
 8016e14:	2000      	movs	r0, #0
 8016e16:	f003 fc7d 	bl	801a714 <tcp_rst>
    pbuf_free(p);
 8016e1a:	6878      	ldr	r0, [r7, #4]
 8016e1c:	f7fd fbda 	bl	80145d4 <pbuf_free>
  return;
 8016e20:	e00c      	b.n	8016e3c <tcp_input+0x7d0>
    goto dropped;
 8016e22:	bf00      	nop
 8016e24:	e006      	b.n	8016e34 <tcp_input+0x7c8>
    goto dropped;
 8016e26:	bf00      	nop
 8016e28:	e004      	b.n	8016e34 <tcp_input+0x7c8>
    goto dropped;
 8016e2a:	bf00      	nop
 8016e2c:	e002      	b.n	8016e34 <tcp_input+0x7c8>
      goto dropped;
 8016e2e:	bf00      	nop
 8016e30:	e000      	b.n	8016e34 <tcp_input+0x7c8>
      goto dropped;
 8016e32:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8016e34:	6878      	ldr	r0, [r7, #4]
 8016e36:	f7fd fbcd 	bl	80145d4 <pbuf_free>
 8016e3a:	e000      	b.n	8016e3e <tcp_input+0x7d2>
  return;
 8016e3c:	bf00      	nop
}
 8016e3e:	3724      	adds	r7, #36	; 0x24
 8016e40:	46bd      	mov	sp, r7
 8016e42:	bd90      	pop	{r4, r7, pc}
 8016e44:	2000e184 	.word	0x2000e184
 8016e48:	20006e41 	.word	0x20006e41
 8016e4c:	2000e170 	.word	0x2000e170
 8016e50:	20006e3c 	.word	0x20006e3c
 8016e54:	20006e44 	.word	0x20006e44
 8016e58:	0802547c 	.word	0x0802547c
 8016e5c:	08025630 	.word	0x08025630
 8016e60:	080254c8 	.word	0x080254c8
 8016e64:	20006e14 	.word	0x20006e14
 8016e68:	20006e24 	.word	0x20006e24
 8016e6c:	20006e38 	.word	0x20006e38
 8016e70:	20006e3e 	.word	0x20006e3e
 8016e74:	20006e34 	.word	0x20006e34
 8016e78:	2000aa6c 	.word	0x2000aa6c
 8016e7c:	2000aa70 	.word	0x2000aa70

08016e80 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8016e80:	b580      	push	{r7, lr}
 8016e82:	b082      	sub	sp, #8
 8016e84:	af00      	add	r7, sp, #0
 8016e86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	d106      	bne.n	8016e9c <tcp_input_delayed_close+0x1c>
 8016e8e:	4b17      	ldr	r3, [pc, #92]	; (8016eec <tcp_input_delayed_close+0x6c>)
 8016e90:	f240 225a 	movw	r2, #602	; 0x25a
 8016e94:	4916      	ldr	r1, [pc, #88]	; (8016ef0 <tcp_input_delayed_close+0x70>)
 8016e96:	4817      	ldr	r0, [pc, #92]	; (8016ef4 <tcp_input_delayed_close+0x74>)
 8016e98:	f008 f988 	bl	801f1ac <iprintf>

  if (recv_flags & TF_CLOSED) {
 8016e9c:	4b16      	ldr	r3, [pc, #88]	; (8016ef8 <tcp_input_delayed_close+0x78>)
 8016e9e:	781b      	ldrb	r3, [r3, #0]
 8016ea0:	f003 0310 	and.w	r3, r3, #16
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	d01c      	beq.n	8016ee2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	8b5b      	ldrh	r3, [r3, #26]
 8016eac:	f003 0310 	and.w	r3, r3, #16
 8016eb0:	2b00      	cmp	r3, #0
 8016eb2:	d10d      	bne.n	8016ed0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	d008      	beq.n	8016ed0 <tcp_input_delayed_close+0x50>
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8016ec4:	687a      	ldr	r2, [r7, #4]
 8016ec6:	6912      	ldr	r2, [r2, #16]
 8016ec8:	f06f 010e 	mvn.w	r1, #14
 8016ecc:	4610      	mov	r0, r2
 8016ece:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8016ed0:	6879      	ldr	r1, [r7, #4]
 8016ed2:	480a      	ldr	r0, [pc, #40]	; (8016efc <tcp_input_delayed_close+0x7c>)
 8016ed4:	f7ff fa52 	bl	801637c <tcp_pcb_remove>
    tcp_free(pcb);
 8016ed8:	6878      	ldr	r0, [r7, #4]
 8016eda:	f7fd fe37 	bl	8014b4c <tcp_free>
    return 1;
 8016ede:	2301      	movs	r3, #1
 8016ee0:	e000      	b.n	8016ee4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8016ee2:	2300      	movs	r3, #0
}
 8016ee4:	4618      	mov	r0, r3
 8016ee6:	3708      	adds	r7, #8
 8016ee8:	46bd      	mov	sp, r7
 8016eea:	bd80      	pop	{r7, pc}
 8016eec:	0802547c 	.word	0x0802547c
 8016ef0:	0802564c 	.word	0x0802564c
 8016ef4:	080254c8 	.word	0x080254c8
 8016ef8:	20006e41 	.word	0x20006e41
 8016efc:	2000e170 	.word	0x2000e170

08016f00 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8016f00:	b590      	push	{r4, r7, lr}
 8016f02:	b08b      	sub	sp, #44	; 0x2c
 8016f04:	af04      	add	r7, sp, #16
 8016f06:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8016f08:	4b6f      	ldr	r3, [pc, #444]	; (80170c8 <tcp_listen_input+0x1c8>)
 8016f0a:	781b      	ldrb	r3, [r3, #0]
 8016f0c:	f003 0304 	and.w	r3, r3, #4
 8016f10:	2b00      	cmp	r3, #0
 8016f12:	f040 80d2 	bne.w	80170ba <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	2b00      	cmp	r3, #0
 8016f1a:	d106      	bne.n	8016f2a <tcp_listen_input+0x2a>
 8016f1c:	4b6b      	ldr	r3, [pc, #428]	; (80170cc <tcp_listen_input+0x1cc>)
 8016f1e:	f240 2281 	movw	r2, #641	; 0x281
 8016f22:	496b      	ldr	r1, [pc, #428]	; (80170d0 <tcp_listen_input+0x1d0>)
 8016f24:	486b      	ldr	r0, [pc, #428]	; (80170d4 <tcp_listen_input+0x1d4>)
 8016f26:	f008 f941 	bl	801f1ac <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8016f2a:	4b67      	ldr	r3, [pc, #412]	; (80170c8 <tcp_listen_input+0x1c8>)
 8016f2c:	781b      	ldrb	r3, [r3, #0]
 8016f2e:	f003 0310 	and.w	r3, r3, #16
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	d019      	beq.n	8016f6a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016f36:	4b68      	ldr	r3, [pc, #416]	; (80170d8 <tcp_listen_input+0x1d8>)
 8016f38:	6819      	ldr	r1, [r3, #0]
 8016f3a:	4b68      	ldr	r3, [pc, #416]	; (80170dc <tcp_listen_input+0x1dc>)
 8016f3c:	881b      	ldrh	r3, [r3, #0]
 8016f3e:	461a      	mov	r2, r3
 8016f40:	4b67      	ldr	r3, [pc, #412]	; (80170e0 <tcp_listen_input+0x1e0>)
 8016f42:	681b      	ldr	r3, [r3, #0]
 8016f44:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016f46:	4b67      	ldr	r3, [pc, #412]	; (80170e4 <tcp_listen_input+0x1e4>)
 8016f48:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016f4a:	885b      	ldrh	r3, [r3, #2]
 8016f4c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016f4e:	4a65      	ldr	r2, [pc, #404]	; (80170e4 <tcp_listen_input+0x1e4>)
 8016f50:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016f52:	8812      	ldrh	r2, [r2, #0]
 8016f54:	b292      	uxth	r2, r2
 8016f56:	9202      	str	r2, [sp, #8]
 8016f58:	9301      	str	r3, [sp, #4]
 8016f5a:	4b63      	ldr	r3, [pc, #396]	; (80170e8 <tcp_listen_input+0x1e8>)
 8016f5c:	9300      	str	r3, [sp, #0]
 8016f5e:	4b63      	ldr	r3, [pc, #396]	; (80170ec <tcp_listen_input+0x1ec>)
 8016f60:	4602      	mov	r2, r0
 8016f62:	6878      	ldr	r0, [r7, #4]
 8016f64:	f003 fbd6 	bl	801a714 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8016f68:	e0a9      	b.n	80170be <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8016f6a:	4b57      	ldr	r3, [pc, #348]	; (80170c8 <tcp_listen_input+0x1c8>)
 8016f6c:	781b      	ldrb	r3, [r3, #0]
 8016f6e:	f003 0302 	and.w	r3, r3, #2
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	f000 80a3 	beq.w	80170be <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	7d5b      	ldrb	r3, [r3, #21]
 8016f7c:	4618      	mov	r0, r3
 8016f7e:	f7ff f85b 	bl	8016038 <tcp_alloc>
 8016f82:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8016f84:	697b      	ldr	r3, [r7, #20]
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d111      	bne.n	8016fae <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	699b      	ldr	r3, [r3, #24]
 8016f8e:	2b00      	cmp	r3, #0
 8016f90:	d00a      	beq.n	8016fa8 <tcp_listen_input+0xa8>
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	699b      	ldr	r3, [r3, #24]
 8016f96:	687a      	ldr	r2, [r7, #4]
 8016f98:	6910      	ldr	r0, [r2, #16]
 8016f9a:	f04f 32ff 	mov.w	r2, #4294967295
 8016f9e:	2100      	movs	r1, #0
 8016fa0:	4798      	blx	r3
 8016fa2:	4603      	mov	r3, r0
 8016fa4:	73bb      	strb	r3, [r7, #14]
      return;
 8016fa6:	e08b      	b.n	80170c0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8016fa8:	23f0      	movs	r3, #240	; 0xf0
 8016faa:	73bb      	strb	r3, [r7, #14]
      return;
 8016fac:	e088      	b.n	80170c0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8016fae:	4b50      	ldr	r3, [pc, #320]	; (80170f0 <tcp_listen_input+0x1f0>)
 8016fb0:	695a      	ldr	r2, [r3, #20]
 8016fb2:	697b      	ldr	r3, [r7, #20]
 8016fb4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8016fb6:	4b4e      	ldr	r3, [pc, #312]	; (80170f0 <tcp_listen_input+0x1f0>)
 8016fb8:	691a      	ldr	r2, [r3, #16]
 8016fba:	697b      	ldr	r3, [r7, #20]
 8016fbc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	8ada      	ldrh	r2, [r3, #22]
 8016fc2:	697b      	ldr	r3, [r7, #20]
 8016fc4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8016fc6:	4b47      	ldr	r3, [pc, #284]	; (80170e4 <tcp_listen_input+0x1e4>)
 8016fc8:	681b      	ldr	r3, [r3, #0]
 8016fca:	881b      	ldrh	r3, [r3, #0]
 8016fcc:	b29a      	uxth	r2, r3
 8016fce:	697b      	ldr	r3, [r7, #20]
 8016fd0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8016fd2:	697b      	ldr	r3, [r7, #20]
 8016fd4:	2203      	movs	r2, #3
 8016fd6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8016fd8:	4b41      	ldr	r3, [pc, #260]	; (80170e0 <tcp_listen_input+0x1e0>)
 8016fda:	681b      	ldr	r3, [r3, #0]
 8016fdc:	1c5a      	adds	r2, r3, #1
 8016fde:	697b      	ldr	r3, [r7, #20]
 8016fe0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8016fe2:	697b      	ldr	r3, [r7, #20]
 8016fe4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016fe6:	697b      	ldr	r3, [r7, #20]
 8016fe8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8016fea:	6978      	ldr	r0, [r7, #20]
 8016fec:	f7ff fa5a 	bl	80164a4 <tcp_next_iss>
 8016ff0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8016ff2:	697b      	ldr	r3, [r7, #20]
 8016ff4:	693a      	ldr	r2, [r7, #16]
 8016ff6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8016ff8:	697b      	ldr	r3, [r7, #20]
 8016ffa:	693a      	ldr	r2, [r7, #16]
 8016ffc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8016ffe:	697b      	ldr	r3, [r7, #20]
 8017000:	693a      	ldr	r2, [r7, #16]
 8017002:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8017004:	697b      	ldr	r3, [r7, #20]
 8017006:	693a      	ldr	r2, [r7, #16]
 8017008:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801700a:	4b35      	ldr	r3, [pc, #212]	; (80170e0 <tcp_listen_input+0x1e0>)
 801700c:	681b      	ldr	r3, [r3, #0]
 801700e:	1e5a      	subs	r2, r3, #1
 8017010:	697b      	ldr	r3, [r7, #20]
 8017012:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	691a      	ldr	r2, [r3, #16]
 8017018:	697b      	ldr	r3, [r7, #20]
 801701a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801701c:	697b      	ldr	r3, [r7, #20]
 801701e:	687a      	ldr	r2, [r7, #4]
 8017020:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	7a5b      	ldrb	r3, [r3, #9]
 8017026:	f003 030c 	and.w	r3, r3, #12
 801702a:	b2da      	uxtb	r2, r3
 801702c:	697b      	ldr	r3, [r7, #20]
 801702e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	7a1a      	ldrb	r2, [r3, #8]
 8017034:	697b      	ldr	r3, [r7, #20]
 8017036:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8017038:	4b2e      	ldr	r3, [pc, #184]	; (80170f4 <tcp_listen_input+0x1f4>)
 801703a:	681a      	ldr	r2, [r3, #0]
 801703c:	697b      	ldr	r3, [r7, #20]
 801703e:	60da      	str	r2, [r3, #12]
 8017040:	4a2c      	ldr	r2, [pc, #176]	; (80170f4 <tcp_listen_input+0x1f4>)
 8017042:	697b      	ldr	r3, [r7, #20]
 8017044:	6013      	str	r3, [r2, #0]
 8017046:	f003 fd27 	bl	801aa98 <tcp_timer_needed>
 801704a:	4b2b      	ldr	r3, [pc, #172]	; (80170f8 <tcp_listen_input+0x1f8>)
 801704c:	2201      	movs	r2, #1
 801704e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8017050:	6978      	ldr	r0, [r7, #20]
 8017052:	f001 fd8d 	bl	8018b70 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8017056:	4b23      	ldr	r3, [pc, #140]	; (80170e4 <tcp_listen_input+0x1e4>)
 8017058:	681b      	ldr	r3, [r3, #0]
 801705a:	89db      	ldrh	r3, [r3, #14]
 801705c:	b29a      	uxth	r2, r3
 801705e:	697b      	ldr	r3, [r7, #20]
 8017060:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8017064:	697b      	ldr	r3, [r7, #20]
 8017066:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801706a:	697b      	ldr	r3, [r7, #20]
 801706c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8017070:	697b      	ldr	r3, [r7, #20]
 8017072:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8017074:	697b      	ldr	r3, [r7, #20]
 8017076:	3304      	adds	r3, #4
 8017078:	4618      	mov	r0, r3
 801707a:	f005 fc4b 	bl	801c914 <ip4_route>
 801707e:	4601      	mov	r1, r0
 8017080:	697b      	ldr	r3, [r7, #20]
 8017082:	3304      	adds	r3, #4
 8017084:	461a      	mov	r2, r3
 8017086:	4620      	mov	r0, r4
 8017088:	f7ff fa32 	bl	80164f0 <tcp_eff_send_mss_netif>
 801708c:	4603      	mov	r3, r0
 801708e:	461a      	mov	r2, r3
 8017090:	697b      	ldr	r3, [r7, #20]
 8017092:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8017094:	2112      	movs	r1, #18
 8017096:	6978      	ldr	r0, [r7, #20]
 8017098:	f002 fc9a 	bl	80199d0 <tcp_enqueue_flags>
 801709c:	4603      	mov	r3, r0
 801709e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80170a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d004      	beq.n	80170b2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80170a8:	2100      	movs	r1, #0
 80170aa:	6978      	ldr	r0, [r7, #20]
 80170ac:	f7fd ffd4 	bl	8015058 <tcp_abandon>
      return;
 80170b0:	e006      	b.n	80170c0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80170b2:	6978      	ldr	r0, [r7, #20]
 80170b4:	f002 fd7a 	bl	8019bac <tcp_output>
  return;
 80170b8:	e001      	b.n	80170be <tcp_listen_input+0x1be>
    return;
 80170ba:	bf00      	nop
 80170bc:	e000      	b.n	80170c0 <tcp_listen_input+0x1c0>
  return;
 80170be:	bf00      	nop
}
 80170c0:	371c      	adds	r7, #28
 80170c2:	46bd      	mov	sp, r7
 80170c4:	bd90      	pop	{r4, r7, pc}
 80170c6:	bf00      	nop
 80170c8:	20006e40 	.word	0x20006e40
 80170cc:	0802547c 	.word	0x0802547c
 80170d0:	08025674 	.word	0x08025674
 80170d4:	080254c8 	.word	0x080254c8
 80170d8:	20006e38 	.word	0x20006e38
 80170dc:	20006e3e 	.word	0x20006e3e
 80170e0:	20006e34 	.word	0x20006e34
 80170e4:	20006e24 	.word	0x20006e24
 80170e8:	2000aa6c 	.word	0x2000aa6c
 80170ec:	2000aa70 	.word	0x2000aa70
 80170f0:	2000aa5c 	.word	0x2000aa5c
 80170f4:	2000e170 	.word	0x2000e170
 80170f8:	2000e16c 	.word	0x2000e16c

080170fc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80170fc:	b580      	push	{r7, lr}
 80170fe:	b086      	sub	sp, #24
 8017100:	af04      	add	r7, sp, #16
 8017102:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8017104:	4b2f      	ldr	r3, [pc, #188]	; (80171c4 <tcp_timewait_input+0xc8>)
 8017106:	781b      	ldrb	r3, [r3, #0]
 8017108:	f003 0304 	and.w	r3, r3, #4
 801710c:	2b00      	cmp	r3, #0
 801710e:	d153      	bne.n	80171b8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	2b00      	cmp	r3, #0
 8017114:	d106      	bne.n	8017124 <tcp_timewait_input+0x28>
 8017116:	4b2c      	ldr	r3, [pc, #176]	; (80171c8 <tcp_timewait_input+0xcc>)
 8017118:	f240 22ee 	movw	r2, #750	; 0x2ee
 801711c:	492b      	ldr	r1, [pc, #172]	; (80171cc <tcp_timewait_input+0xd0>)
 801711e:	482c      	ldr	r0, [pc, #176]	; (80171d0 <tcp_timewait_input+0xd4>)
 8017120:	f008 f844 	bl	801f1ac <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8017124:	4b27      	ldr	r3, [pc, #156]	; (80171c4 <tcp_timewait_input+0xc8>)
 8017126:	781b      	ldrb	r3, [r3, #0]
 8017128:	f003 0302 	and.w	r3, r3, #2
 801712c:	2b00      	cmp	r3, #0
 801712e:	d02a      	beq.n	8017186 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8017130:	4b28      	ldr	r3, [pc, #160]	; (80171d4 <tcp_timewait_input+0xd8>)
 8017132:	681a      	ldr	r2, [r3, #0]
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017138:	1ad3      	subs	r3, r2, r3
 801713a:	2b00      	cmp	r3, #0
 801713c:	db2d      	blt.n	801719a <tcp_timewait_input+0x9e>
 801713e:	4b25      	ldr	r3, [pc, #148]	; (80171d4 <tcp_timewait_input+0xd8>)
 8017140:	681a      	ldr	r2, [r3, #0]
 8017142:	687b      	ldr	r3, [r7, #4]
 8017144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017146:	6879      	ldr	r1, [r7, #4]
 8017148:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801714a:	440b      	add	r3, r1
 801714c:	1ad3      	subs	r3, r2, r3
 801714e:	2b00      	cmp	r3, #0
 8017150:	dc23      	bgt.n	801719a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017152:	4b21      	ldr	r3, [pc, #132]	; (80171d8 <tcp_timewait_input+0xdc>)
 8017154:	6819      	ldr	r1, [r3, #0]
 8017156:	4b21      	ldr	r3, [pc, #132]	; (80171dc <tcp_timewait_input+0xe0>)
 8017158:	881b      	ldrh	r3, [r3, #0]
 801715a:	461a      	mov	r2, r3
 801715c:	4b1d      	ldr	r3, [pc, #116]	; (80171d4 <tcp_timewait_input+0xd8>)
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017162:	4b1f      	ldr	r3, [pc, #124]	; (80171e0 <tcp_timewait_input+0xe4>)
 8017164:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017166:	885b      	ldrh	r3, [r3, #2]
 8017168:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801716a:	4a1d      	ldr	r2, [pc, #116]	; (80171e0 <tcp_timewait_input+0xe4>)
 801716c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801716e:	8812      	ldrh	r2, [r2, #0]
 8017170:	b292      	uxth	r2, r2
 8017172:	9202      	str	r2, [sp, #8]
 8017174:	9301      	str	r3, [sp, #4]
 8017176:	4b1b      	ldr	r3, [pc, #108]	; (80171e4 <tcp_timewait_input+0xe8>)
 8017178:	9300      	str	r3, [sp, #0]
 801717a:	4b1b      	ldr	r3, [pc, #108]	; (80171e8 <tcp_timewait_input+0xec>)
 801717c:	4602      	mov	r2, r0
 801717e:	6878      	ldr	r0, [r7, #4]
 8017180:	f003 fac8 	bl	801a714 <tcp_rst>
      return;
 8017184:	e01b      	b.n	80171be <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8017186:	4b0f      	ldr	r3, [pc, #60]	; (80171c4 <tcp_timewait_input+0xc8>)
 8017188:	781b      	ldrb	r3, [r3, #0]
 801718a:	f003 0301 	and.w	r3, r3, #1
 801718e:	2b00      	cmp	r3, #0
 8017190:	d003      	beq.n	801719a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8017192:	4b16      	ldr	r3, [pc, #88]	; (80171ec <tcp_timewait_input+0xf0>)
 8017194:	681a      	ldr	r2, [r3, #0]
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801719a:	4b10      	ldr	r3, [pc, #64]	; (80171dc <tcp_timewait_input+0xe0>)
 801719c:	881b      	ldrh	r3, [r3, #0]
 801719e:	2b00      	cmp	r3, #0
 80171a0:	d00c      	beq.n	80171bc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	8b5b      	ldrh	r3, [r3, #26]
 80171a6:	f043 0302 	orr.w	r3, r3, #2
 80171aa:	b29a      	uxth	r2, r3
 80171ac:	687b      	ldr	r3, [r7, #4]
 80171ae:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80171b0:	6878      	ldr	r0, [r7, #4]
 80171b2:	f002 fcfb 	bl	8019bac <tcp_output>
  }
  return;
 80171b6:	e001      	b.n	80171bc <tcp_timewait_input+0xc0>
    return;
 80171b8:	bf00      	nop
 80171ba:	e000      	b.n	80171be <tcp_timewait_input+0xc2>
  return;
 80171bc:	bf00      	nop
}
 80171be:	3708      	adds	r7, #8
 80171c0:	46bd      	mov	sp, r7
 80171c2:	bd80      	pop	{r7, pc}
 80171c4:	20006e40 	.word	0x20006e40
 80171c8:	0802547c 	.word	0x0802547c
 80171cc:	08025694 	.word	0x08025694
 80171d0:	080254c8 	.word	0x080254c8
 80171d4:	20006e34 	.word	0x20006e34
 80171d8:	20006e38 	.word	0x20006e38
 80171dc:	20006e3e 	.word	0x20006e3e
 80171e0:	20006e24 	.word	0x20006e24
 80171e4:	2000aa6c 	.word	0x2000aa6c
 80171e8:	2000aa70 	.word	0x2000aa70
 80171ec:	2000e174 	.word	0x2000e174

080171f0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80171f0:	b590      	push	{r4, r7, lr}
 80171f2:	b08d      	sub	sp, #52	; 0x34
 80171f4:	af04      	add	r7, sp, #16
 80171f6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80171f8:	2300      	movs	r3, #0
 80171fa:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80171fc:	2300      	movs	r3, #0
 80171fe:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	2b00      	cmp	r3, #0
 8017204:	d106      	bne.n	8017214 <tcp_process+0x24>
 8017206:	4ba5      	ldr	r3, [pc, #660]	; (801749c <tcp_process+0x2ac>)
 8017208:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801720c:	49a4      	ldr	r1, [pc, #656]	; (80174a0 <tcp_process+0x2b0>)
 801720e:	48a5      	ldr	r0, [pc, #660]	; (80174a4 <tcp_process+0x2b4>)
 8017210:	f007 ffcc 	bl	801f1ac <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8017214:	4ba4      	ldr	r3, [pc, #656]	; (80174a8 <tcp_process+0x2b8>)
 8017216:	781b      	ldrb	r3, [r3, #0]
 8017218:	f003 0304 	and.w	r3, r3, #4
 801721c:	2b00      	cmp	r3, #0
 801721e:	d04e      	beq.n	80172be <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8017220:	687b      	ldr	r3, [r7, #4]
 8017222:	7d1b      	ldrb	r3, [r3, #20]
 8017224:	2b02      	cmp	r3, #2
 8017226:	d108      	bne.n	801723a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801722c:	4b9f      	ldr	r3, [pc, #636]	; (80174ac <tcp_process+0x2bc>)
 801722e:	681b      	ldr	r3, [r3, #0]
 8017230:	429a      	cmp	r2, r3
 8017232:	d123      	bne.n	801727c <tcp_process+0x8c>
        acceptable = 1;
 8017234:	2301      	movs	r3, #1
 8017236:	76fb      	strb	r3, [r7, #27]
 8017238:	e020      	b.n	801727c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801723a:	687b      	ldr	r3, [r7, #4]
 801723c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801723e:	4b9c      	ldr	r3, [pc, #624]	; (80174b0 <tcp_process+0x2c0>)
 8017240:	681b      	ldr	r3, [r3, #0]
 8017242:	429a      	cmp	r2, r3
 8017244:	d102      	bne.n	801724c <tcp_process+0x5c>
        acceptable = 1;
 8017246:	2301      	movs	r3, #1
 8017248:	76fb      	strb	r3, [r7, #27]
 801724a:	e017      	b.n	801727c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801724c:	4b98      	ldr	r3, [pc, #608]	; (80174b0 <tcp_process+0x2c0>)
 801724e:	681a      	ldr	r2, [r3, #0]
 8017250:	687b      	ldr	r3, [r7, #4]
 8017252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017254:	1ad3      	subs	r3, r2, r3
 8017256:	2b00      	cmp	r3, #0
 8017258:	db10      	blt.n	801727c <tcp_process+0x8c>
 801725a:	4b95      	ldr	r3, [pc, #596]	; (80174b0 <tcp_process+0x2c0>)
 801725c:	681a      	ldr	r2, [r3, #0]
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017262:	6879      	ldr	r1, [r7, #4]
 8017264:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017266:	440b      	add	r3, r1
 8017268:	1ad3      	subs	r3, r2, r3
 801726a:	2b00      	cmp	r3, #0
 801726c:	dc06      	bgt.n	801727c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	8b5b      	ldrh	r3, [r3, #26]
 8017272:	f043 0302 	orr.w	r3, r3, #2
 8017276:	b29a      	uxth	r2, r3
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801727c:	7efb      	ldrb	r3, [r7, #27]
 801727e:	2b00      	cmp	r3, #0
 8017280:	d01b      	beq.n	80172ba <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	7d1b      	ldrb	r3, [r3, #20]
 8017286:	2b00      	cmp	r3, #0
 8017288:	d106      	bne.n	8017298 <tcp_process+0xa8>
 801728a:	4b84      	ldr	r3, [pc, #528]	; (801749c <tcp_process+0x2ac>)
 801728c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8017290:	4988      	ldr	r1, [pc, #544]	; (80174b4 <tcp_process+0x2c4>)
 8017292:	4884      	ldr	r0, [pc, #528]	; (80174a4 <tcp_process+0x2b4>)
 8017294:	f007 ff8a 	bl	801f1ac <iprintf>
      recv_flags |= TF_RESET;
 8017298:	4b87      	ldr	r3, [pc, #540]	; (80174b8 <tcp_process+0x2c8>)
 801729a:	781b      	ldrb	r3, [r3, #0]
 801729c:	f043 0308 	orr.w	r3, r3, #8
 80172a0:	b2da      	uxtb	r2, r3
 80172a2:	4b85      	ldr	r3, [pc, #532]	; (80174b8 <tcp_process+0x2c8>)
 80172a4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	8b5b      	ldrh	r3, [r3, #26]
 80172aa:	f023 0301 	bic.w	r3, r3, #1
 80172ae:	b29a      	uxth	r2, r3
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80172b4:	f06f 030d 	mvn.w	r3, #13
 80172b8:	e37a      	b.n	80179b0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80172ba:	2300      	movs	r3, #0
 80172bc:	e378      	b.n	80179b0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80172be:	4b7a      	ldr	r3, [pc, #488]	; (80174a8 <tcp_process+0x2b8>)
 80172c0:	781b      	ldrb	r3, [r3, #0]
 80172c2:	f003 0302 	and.w	r3, r3, #2
 80172c6:	2b00      	cmp	r3, #0
 80172c8:	d010      	beq.n	80172ec <tcp_process+0xfc>
 80172ca:	687b      	ldr	r3, [r7, #4]
 80172cc:	7d1b      	ldrb	r3, [r3, #20]
 80172ce:	2b02      	cmp	r3, #2
 80172d0:	d00c      	beq.n	80172ec <tcp_process+0xfc>
 80172d2:	687b      	ldr	r3, [r7, #4]
 80172d4:	7d1b      	ldrb	r3, [r3, #20]
 80172d6:	2b03      	cmp	r3, #3
 80172d8:	d008      	beq.n	80172ec <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	8b5b      	ldrh	r3, [r3, #26]
 80172de:	f043 0302 	orr.w	r3, r3, #2
 80172e2:	b29a      	uxth	r2, r3
 80172e4:	687b      	ldr	r3, [r7, #4]
 80172e6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80172e8:	2300      	movs	r3, #0
 80172ea:	e361      	b.n	80179b0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	8b5b      	ldrh	r3, [r3, #26]
 80172f0:	f003 0310 	and.w	r3, r3, #16
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d103      	bne.n	8017300 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80172f8:	4b70      	ldr	r3, [pc, #448]	; (80174bc <tcp_process+0x2cc>)
 80172fa:	681a      	ldr	r2, [r3, #0]
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	2200      	movs	r2, #0
 8017304:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	2200      	movs	r2, #0
 801730c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8017310:	6878      	ldr	r0, [r7, #4]
 8017312:	f001 fc2d 	bl	8018b70 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	7d1b      	ldrb	r3, [r3, #20]
 801731a:	3b02      	subs	r3, #2
 801731c:	2b07      	cmp	r3, #7
 801731e:	f200 8337 	bhi.w	8017990 <tcp_process+0x7a0>
 8017322:	a201      	add	r2, pc, #4	; (adr r2, 8017328 <tcp_process+0x138>)
 8017324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017328:	08017349 	.word	0x08017349
 801732c:	08017579 	.word	0x08017579
 8017330:	080176f1 	.word	0x080176f1
 8017334:	0801771b 	.word	0x0801771b
 8017338:	0801783f 	.word	0x0801783f
 801733c:	080176f1 	.word	0x080176f1
 8017340:	080178cb 	.word	0x080178cb
 8017344:	0801795b 	.word	0x0801795b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8017348:	4b57      	ldr	r3, [pc, #348]	; (80174a8 <tcp_process+0x2b8>)
 801734a:	781b      	ldrb	r3, [r3, #0]
 801734c:	f003 0310 	and.w	r3, r3, #16
 8017350:	2b00      	cmp	r3, #0
 8017352:	f000 80e4 	beq.w	801751e <tcp_process+0x32e>
 8017356:	4b54      	ldr	r3, [pc, #336]	; (80174a8 <tcp_process+0x2b8>)
 8017358:	781b      	ldrb	r3, [r3, #0]
 801735a:	f003 0302 	and.w	r3, r3, #2
 801735e:	2b00      	cmp	r3, #0
 8017360:	f000 80dd 	beq.w	801751e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8017364:	687b      	ldr	r3, [r7, #4]
 8017366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017368:	1c5a      	adds	r2, r3, #1
 801736a:	4b50      	ldr	r3, [pc, #320]	; (80174ac <tcp_process+0x2bc>)
 801736c:	681b      	ldr	r3, [r3, #0]
 801736e:	429a      	cmp	r2, r3
 8017370:	f040 80d5 	bne.w	801751e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8017374:	4b4e      	ldr	r3, [pc, #312]	; (80174b0 <tcp_process+0x2c0>)
 8017376:	681b      	ldr	r3, [r3, #0]
 8017378:	1c5a      	adds	r2, r3, #1
 801737a:	687b      	ldr	r3, [r7, #4]
 801737c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8017386:	4b49      	ldr	r3, [pc, #292]	; (80174ac <tcp_process+0x2bc>)
 8017388:	681a      	ldr	r2, [r3, #0]
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801738e:	4b4c      	ldr	r3, [pc, #304]	; (80174c0 <tcp_process+0x2d0>)
 8017390:	681b      	ldr	r3, [r3, #0]
 8017392:	89db      	ldrh	r3, [r3, #14]
 8017394:	b29a      	uxth	r2, r3
 8017396:	687b      	ldr	r3, [r7, #4]
 8017398:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801739c:	687b      	ldr	r3, [r7, #4]
 801739e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80173a8:	4b41      	ldr	r3, [pc, #260]	; (80174b0 <tcp_process+0x2c0>)
 80173aa:	681b      	ldr	r3, [r3, #0]
 80173ac:	1e5a      	subs	r2, r3, #1
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	2204      	movs	r2, #4
 80173b6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80173bc:	687b      	ldr	r3, [r7, #4]
 80173be:	3304      	adds	r3, #4
 80173c0:	4618      	mov	r0, r3
 80173c2:	f005 faa7 	bl	801c914 <ip4_route>
 80173c6:	4601      	mov	r1, r0
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	3304      	adds	r3, #4
 80173cc:	461a      	mov	r2, r3
 80173ce:	4620      	mov	r0, r4
 80173d0:	f7ff f88e 	bl	80164f0 <tcp_eff_send_mss_netif>
 80173d4:	4603      	mov	r3, r0
 80173d6:	461a      	mov	r2, r3
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80173dc:	687b      	ldr	r3, [r7, #4]
 80173de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80173e0:	009a      	lsls	r2, r3, #2
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80173e6:	005b      	lsls	r3, r3, #1
 80173e8:	f241 111c 	movw	r1, #4380	; 0x111c
 80173ec:	428b      	cmp	r3, r1
 80173ee:	bf38      	it	cc
 80173f0:	460b      	movcc	r3, r1
 80173f2:	429a      	cmp	r2, r3
 80173f4:	d204      	bcs.n	8017400 <tcp_process+0x210>
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80173fa:	009b      	lsls	r3, r3, #2
 80173fc:	b29b      	uxth	r3, r3
 80173fe:	e00d      	b.n	801741c <tcp_process+0x22c>
 8017400:	687b      	ldr	r3, [r7, #4]
 8017402:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017404:	005b      	lsls	r3, r3, #1
 8017406:	f241 121c 	movw	r2, #4380	; 0x111c
 801740a:	4293      	cmp	r3, r2
 801740c:	d904      	bls.n	8017418 <tcp_process+0x228>
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017412:	005b      	lsls	r3, r3, #1
 8017414:	b29b      	uxth	r3, r3
 8017416:	e001      	b.n	801741c <tcp_process+0x22c>
 8017418:	f241 131c 	movw	r3, #4380	; 0x111c
 801741c:	687a      	ldr	r2, [r7, #4]
 801741e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017428:	2b00      	cmp	r3, #0
 801742a:	d106      	bne.n	801743a <tcp_process+0x24a>
 801742c:	4b1b      	ldr	r3, [pc, #108]	; (801749c <tcp_process+0x2ac>)
 801742e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8017432:	4924      	ldr	r1, [pc, #144]	; (80174c4 <tcp_process+0x2d4>)
 8017434:	481b      	ldr	r0, [pc, #108]	; (80174a4 <tcp_process+0x2b4>)
 8017436:	f007 feb9 	bl	801f1ac <iprintf>
        --pcb->snd_queuelen;
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017440:	3b01      	subs	r3, #1
 8017442:	b29a      	uxth	r2, r3
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801744e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8017450:	69fb      	ldr	r3, [r7, #28]
 8017452:	2b00      	cmp	r3, #0
 8017454:	d111      	bne.n	801747a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8017456:	687b      	ldr	r3, [r7, #4]
 8017458:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801745a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801745c:	69fb      	ldr	r3, [r7, #28]
 801745e:	2b00      	cmp	r3, #0
 8017460:	d106      	bne.n	8017470 <tcp_process+0x280>
 8017462:	4b0e      	ldr	r3, [pc, #56]	; (801749c <tcp_process+0x2ac>)
 8017464:	f44f 725d 	mov.w	r2, #884	; 0x374
 8017468:	4917      	ldr	r1, [pc, #92]	; (80174c8 <tcp_process+0x2d8>)
 801746a:	480e      	ldr	r0, [pc, #56]	; (80174a4 <tcp_process+0x2b4>)
 801746c:	f007 fe9e 	bl	801f1ac <iprintf>
          pcb->unsent = rseg->next;
 8017470:	69fb      	ldr	r3, [r7, #28]
 8017472:	681a      	ldr	r2, [r3, #0]
 8017474:	687b      	ldr	r3, [r7, #4]
 8017476:	66da      	str	r2, [r3, #108]	; 0x6c
 8017478:	e003      	b.n	8017482 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801747a:	69fb      	ldr	r3, [r7, #28]
 801747c:	681a      	ldr	r2, [r3, #0]
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8017482:	69f8      	ldr	r0, [r7, #28]
 8017484:	f7fe fc6f 	bl	8015d66 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801748c:	2b00      	cmp	r3, #0
 801748e:	d11d      	bne.n	80174cc <tcp_process+0x2dc>
          pcb->rtime = -1;
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017496:	861a      	strh	r2, [r3, #48]	; 0x30
 8017498:	e01f      	b.n	80174da <tcp_process+0x2ea>
 801749a:	bf00      	nop
 801749c:	0802547c 	.word	0x0802547c
 80174a0:	080256b4 	.word	0x080256b4
 80174a4:	080254c8 	.word	0x080254c8
 80174a8:	20006e40 	.word	0x20006e40
 80174ac:	20006e38 	.word	0x20006e38
 80174b0:	20006e34 	.word	0x20006e34
 80174b4:	080256d0 	.word	0x080256d0
 80174b8:	20006e41 	.word	0x20006e41
 80174bc:	2000e174 	.word	0x2000e174
 80174c0:	20006e24 	.word	0x20006e24
 80174c4:	080256f0 	.word	0x080256f0
 80174c8:	08025708 	.word	0x08025708
        } else {
          pcb->rtime = 0;
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	2200      	movs	r2, #0
 80174d0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	2200      	movs	r2, #0
 80174d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	d00a      	beq.n	80174fa <tcp_process+0x30a>
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80174ea:	687a      	ldr	r2, [r7, #4]
 80174ec:	6910      	ldr	r0, [r2, #16]
 80174ee:	2200      	movs	r2, #0
 80174f0:	6879      	ldr	r1, [r7, #4]
 80174f2:	4798      	blx	r3
 80174f4:	4603      	mov	r3, r0
 80174f6:	76bb      	strb	r3, [r7, #26]
 80174f8:	e001      	b.n	80174fe <tcp_process+0x30e>
 80174fa:	2300      	movs	r3, #0
 80174fc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80174fe:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017502:	f113 0f0d 	cmn.w	r3, #13
 8017506:	d102      	bne.n	801750e <tcp_process+0x31e>
          return ERR_ABRT;
 8017508:	f06f 030c 	mvn.w	r3, #12
 801750c:	e250      	b.n	80179b0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	8b5b      	ldrh	r3, [r3, #26]
 8017512:	f043 0302 	orr.w	r3, r3, #2
 8017516:	b29a      	uxth	r2, r3
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801751c:	e23a      	b.n	8017994 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801751e:	4b9d      	ldr	r3, [pc, #628]	; (8017794 <tcp_process+0x5a4>)
 8017520:	781b      	ldrb	r3, [r3, #0]
 8017522:	f003 0310 	and.w	r3, r3, #16
 8017526:	2b00      	cmp	r3, #0
 8017528:	f000 8234 	beq.w	8017994 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801752c:	4b9a      	ldr	r3, [pc, #616]	; (8017798 <tcp_process+0x5a8>)
 801752e:	6819      	ldr	r1, [r3, #0]
 8017530:	4b9a      	ldr	r3, [pc, #616]	; (801779c <tcp_process+0x5ac>)
 8017532:	881b      	ldrh	r3, [r3, #0]
 8017534:	461a      	mov	r2, r3
 8017536:	4b9a      	ldr	r3, [pc, #616]	; (80177a0 <tcp_process+0x5b0>)
 8017538:	681b      	ldr	r3, [r3, #0]
 801753a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801753c:	4b99      	ldr	r3, [pc, #612]	; (80177a4 <tcp_process+0x5b4>)
 801753e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017540:	885b      	ldrh	r3, [r3, #2]
 8017542:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8017544:	4a97      	ldr	r2, [pc, #604]	; (80177a4 <tcp_process+0x5b4>)
 8017546:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017548:	8812      	ldrh	r2, [r2, #0]
 801754a:	b292      	uxth	r2, r2
 801754c:	9202      	str	r2, [sp, #8]
 801754e:	9301      	str	r3, [sp, #4]
 8017550:	4b95      	ldr	r3, [pc, #596]	; (80177a8 <tcp_process+0x5b8>)
 8017552:	9300      	str	r3, [sp, #0]
 8017554:	4b95      	ldr	r3, [pc, #596]	; (80177ac <tcp_process+0x5bc>)
 8017556:	4602      	mov	r2, r0
 8017558:	6878      	ldr	r0, [r7, #4]
 801755a:	f003 f8db 	bl	801a714 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801755e:	687b      	ldr	r3, [r7, #4]
 8017560:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017564:	2b05      	cmp	r3, #5
 8017566:	f200 8215 	bhi.w	8017994 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	2200      	movs	r2, #0
 801756e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8017570:	6878      	ldr	r0, [r7, #4]
 8017572:	f002 fea5 	bl	801a2c0 <tcp_rexmit_rto>
      break;
 8017576:	e20d      	b.n	8017994 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8017578:	4b86      	ldr	r3, [pc, #536]	; (8017794 <tcp_process+0x5a4>)
 801757a:	781b      	ldrb	r3, [r3, #0]
 801757c:	f003 0310 	and.w	r3, r3, #16
 8017580:	2b00      	cmp	r3, #0
 8017582:	f000 80a1 	beq.w	80176c8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017586:	4b84      	ldr	r3, [pc, #528]	; (8017798 <tcp_process+0x5a8>)
 8017588:	681a      	ldr	r2, [r3, #0]
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801758e:	1ad3      	subs	r3, r2, r3
 8017590:	3b01      	subs	r3, #1
 8017592:	2b00      	cmp	r3, #0
 8017594:	db7e      	blt.n	8017694 <tcp_process+0x4a4>
 8017596:	4b80      	ldr	r3, [pc, #512]	; (8017798 <tcp_process+0x5a8>)
 8017598:	681a      	ldr	r2, [r3, #0]
 801759a:	687b      	ldr	r3, [r7, #4]
 801759c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801759e:	1ad3      	subs	r3, r2, r3
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	dc77      	bgt.n	8017694 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80175a4:	687b      	ldr	r3, [r7, #4]
 80175a6:	2204      	movs	r2, #4
 80175a8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80175aa:	687b      	ldr	r3, [r7, #4]
 80175ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80175ae:	2b00      	cmp	r3, #0
 80175b0:	d102      	bne.n	80175b8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80175b2:	23fa      	movs	r3, #250	; 0xfa
 80175b4:	76bb      	strb	r3, [r7, #26]
 80175b6:	e01d      	b.n	80175f4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80175bc:	699b      	ldr	r3, [r3, #24]
 80175be:	2b00      	cmp	r3, #0
 80175c0:	d106      	bne.n	80175d0 <tcp_process+0x3e0>
 80175c2:	4b7b      	ldr	r3, [pc, #492]	; (80177b0 <tcp_process+0x5c0>)
 80175c4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80175c8:	497a      	ldr	r1, [pc, #488]	; (80177b4 <tcp_process+0x5c4>)
 80175ca:	487b      	ldr	r0, [pc, #492]	; (80177b8 <tcp_process+0x5c8>)
 80175cc:	f007 fdee 	bl	801f1ac <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80175d4:	699b      	ldr	r3, [r3, #24]
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	d00a      	beq.n	80175f0 <tcp_process+0x400>
 80175da:	687b      	ldr	r3, [r7, #4]
 80175dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80175de:	699b      	ldr	r3, [r3, #24]
 80175e0:	687a      	ldr	r2, [r7, #4]
 80175e2:	6910      	ldr	r0, [r2, #16]
 80175e4:	2200      	movs	r2, #0
 80175e6:	6879      	ldr	r1, [r7, #4]
 80175e8:	4798      	blx	r3
 80175ea:	4603      	mov	r3, r0
 80175ec:	76bb      	strb	r3, [r7, #26]
 80175ee:	e001      	b.n	80175f4 <tcp_process+0x404>
 80175f0:	23f0      	movs	r3, #240	; 0xf0
 80175f2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80175f4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80175f8:	2b00      	cmp	r3, #0
 80175fa:	d00a      	beq.n	8017612 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80175fc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8017600:	f113 0f0d 	cmn.w	r3, #13
 8017604:	d002      	beq.n	801760c <tcp_process+0x41c>
              tcp_abort(pcb);
 8017606:	6878      	ldr	r0, [r7, #4]
 8017608:	f7fd fde4 	bl	80151d4 <tcp_abort>
            }
            return ERR_ABRT;
 801760c:	f06f 030c 	mvn.w	r3, #12
 8017610:	e1ce      	b.n	80179b0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8017612:	6878      	ldr	r0, [r7, #4]
 8017614:	f000 fae0 	bl	8017bd8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8017618:	4b68      	ldr	r3, [pc, #416]	; (80177bc <tcp_process+0x5cc>)
 801761a:	881b      	ldrh	r3, [r3, #0]
 801761c:	2b00      	cmp	r3, #0
 801761e:	d005      	beq.n	801762c <tcp_process+0x43c>
            recv_acked--;
 8017620:	4b66      	ldr	r3, [pc, #408]	; (80177bc <tcp_process+0x5cc>)
 8017622:	881b      	ldrh	r3, [r3, #0]
 8017624:	3b01      	subs	r3, #1
 8017626:	b29a      	uxth	r2, r3
 8017628:	4b64      	ldr	r3, [pc, #400]	; (80177bc <tcp_process+0x5cc>)
 801762a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801762c:	687b      	ldr	r3, [r7, #4]
 801762e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017630:	009a      	lsls	r2, r3, #2
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017636:	005b      	lsls	r3, r3, #1
 8017638:	f241 111c 	movw	r1, #4380	; 0x111c
 801763c:	428b      	cmp	r3, r1
 801763e:	bf38      	it	cc
 8017640:	460b      	movcc	r3, r1
 8017642:	429a      	cmp	r2, r3
 8017644:	d204      	bcs.n	8017650 <tcp_process+0x460>
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801764a:	009b      	lsls	r3, r3, #2
 801764c:	b29b      	uxth	r3, r3
 801764e:	e00d      	b.n	801766c <tcp_process+0x47c>
 8017650:	687b      	ldr	r3, [r7, #4]
 8017652:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017654:	005b      	lsls	r3, r3, #1
 8017656:	f241 121c 	movw	r2, #4380	; 0x111c
 801765a:	4293      	cmp	r3, r2
 801765c:	d904      	bls.n	8017668 <tcp_process+0x478>
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017662:	005b      	lsls	r3, r3, #1
 8017664:	b29b      	uxth	r3, r3
 8017666:	e001      	b.n	801766c <tcp_process+0x47c>
 8017668:	f241 131c 	movw	r3, #4380	; 0x111c
 801766c:	687a      	ldr	r2, [r7, #4]
 801766e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8017672:	4b53      	ldr	r3, [pc, #332]	; (80177c0 <tcp_process+0x5d0>)
 8017674:	781b      	ldrb	r3, [r3, #0]
 8017676:	f003 0320 	and.w	r3, r3, #32
 801767a:	2b00      	cmp	r3, #0
 801767c:	d037      	beq.n	80176ee <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801767e:	687b      	ldr	r3, [r7, #4]
 8017680:	8b5b      	ldrh	r3, [r3, #26]
 8017682:	f043 0302 	orr.w	r3, r3, #2
 8017686:	b29a      	uxth	r2, r3
 8017688:	687b      	ldr	r3, [r7, #4]
 801768a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801768c:	687b      	ldr	r3, [r7, #4]
 801768e:	2207      	movs	r2, #7
 8017690:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8017692:	e02c      	b.n	80176ee <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8017694:	4b40      	ldr	r3, [pc, #256]	; (8017798 <tcp_process+0x5a8>)
 8017696:	6819      	ldr	r1, [r3, #0]
 8017698:	4b40      	ldr	r3, [pc, #256]	; (801779c <tcp_process+0x5ac>)
 801769a:	881b      	ldrh	r3, [r3, #0]
 801769c:	461a      	mov	r2, r3
 801769e:	4b40      	ldr	r3, [pc, #256]	; (80177a0 <tcp_process+0x5b0>)
 80176a0:	681b      	ldr	r3, [r3, #0]
 80176a2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80176a4:	4b3f      	ldr	r3, [pc, #252]	; (80177a4 <tcp_process+0x5b4>)
 80176a6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80176a8:	885b      	ldrh	r3, [r3, #2]
 80176aa:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80176ac:	4a3d      	ldr	r2, [pc, #244]	; (80177a4 <tcp_process+0x5b4>)
 80176ae:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80176b0:	8812      	ldrh	r2, [r2, #0]
 80176b2:	b292      	uxth	r2, r2
 80176b4:	9202      	str	r2, [sp, #8]
 80176b6:	9301      	str	r3, [sp, #4]
 80176b8:	4b3b      	ldr	r3, [pc, #236]	; (80177a8 <tcp_process+0x5b8>)
 80176ba:	9300      	str	r3, [sp, #0]
 80176bc:	4b3b      	ldr	r3, [pc, #236]	; (80177ac <tcp_process+0x5bc>)
 80176be:	4602      	mov	r2, r0
 80176c0:	6878      	ldr	r0, [r7, #4]
 80176c2:	f003 f827 	bl	801a714 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80176c6:	e167      	b.n	8017998 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80176c8:	4b32      	ldr	r3, [pc, #200]	; (8017794 <tcp_process+0x5a4>)
 80176ca:	781b      	ldrb	r3, [r3, #0]
 80176cc:	f003 0302 	and.w	r3, r3, #2
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	f000 8161 	beq.w	8017998 <tcp_process+0x7a8>
 80176d6:	687b      	ldr	r3, [r7, #4]
 80176d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80176da:	1e5a      	subs	r2, r3, #1
 80176dc:	4b30      	ldr	r3, [pc, #192]	; (80177a0 <tcp_process+0x5b0>)
 80176de:	681b      	ldr	r3, [r3, #0]
 80176e0:	429a      	cmp	r2, r3
 80176e2:	f040 8159 	bne.w	8017998 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80176e6:	6878      	ldr	r0, [r7, #4]
 80176e8:	f002 fe0c 	bl	801a304 <tcp_rexmit>
      break;
 80176ec:	e154      	b.n	8017998 <tcp_process+0x7a8>
 80176ee:	e153      	b.n	8017998 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80176f0:	6878      	ldr	r0, [r7, #4]
 80176f2:	f000 fa71 	bl	8017bd8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80176f6:	4b32      	ldr	r3, [pc, #200]	; (80177c0 <tcp_process+0x5d0>)
 80176f8:	781b      	ldrb	r3, [r3, #0]
 80176fa:	f003 0320 	and.w	r3, r3, #32
 80176fe:	2b00      	cmp	r3, #0
 8017700:	f000 814c 	beq.w	801799c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	8b5b      	ldrh	r3, [r3, #26]
 8017708:	f043 0302 	orr.w	r3, r3, #2
 801770c:	b29a      	uxth	r2, r3
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8017712:	687b      	ldr	r3, [r7, #4]
 8017714:	2207      	movs	r2, #7
 8017716:	751a      	strb	r2, [r3, #20]
      }
      break;
 8017718:	e140      	b.n	801799c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801771a:	6878      	ldr	r0, [r7, #4]
 801771c:	f000 fa5c 	bl	8017bd8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017720:	4b27      	ldr	r3, [pc, #156]	; (80177c0 <tcp_process+0x5d0>)
 8017722:	781b      	ldrb	r3, [r3, #0]
 8017724:	f003 0320 	and.w	r3, r3, #32
 8017728:	2b00      	cmp	r3, #0
 801772a:	d071      	beq.n	8017810 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801772c:	4b19      	ldr	r3, [pc, #100]	; (8017794 <tcp_process+0x5a4>)
 801772e:	781b      	ldrb	r3, [r3, #0]
 8017730:	f003 0310 	and.w	r3, r3, #16
 8017734:	2b00      	cmp	r3, #0
 8017736:	d060      	beq.n	80177fa <tcp_process+0x60a>
 8017738:	687b      	ldr	r3, [r7, #4]
 801773a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801773c:	4b16      	ldr	r3, [pc, #88]	; (8017798 <tcp_process+0x5a8>)
 801773e:	681b      	ldr	r3, [r3, #0]
 8017740:	429a      	cmp	r2, r3
 8017742:	d15a      	bne.n	80177fa <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8017744:	687b      	ldr	r3, [r7, #4]
 8017746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017748:	2b00      	cmp	r3, #0
 801774a:	d156      	bne.n	80177fa <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	8b5b      	ldrh	r3, [r3, #26]
 8017750:	f043 0302 	orr.w	r3, r3, #2
 8017754:	b29a      	uxth	r2, r3
 8017756:	687b      	ldr	r3, [r7, #4]
 8017758:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801775a:	6878      	ldr	r0, [r7, #4]
 801775c:	f7fe fdbe 	bl	80162dc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8017760:	4b18      	ldr	r3, [pc, #96]	; (80177c4 <tcp_process+0x5d4>)
 8017762:	681b      	ldr	r3, [r3, #0]
 8017764:	687a      	ldr	r2, [r7, #4]
 8017766:	429a      	cmp	r2, r3
 8017768:	d105      	bne.n	8017776 <tcp_process+0x586>
 801776a:	4b16      	ldr	r3, [pc, #88]	; (80177c4 <tcp_process+0x5d4>)
 801776c:	681b      	ldr	r3, [r3, #0]
 801776e:	68db      	ldr	r3, [r3, #12]
 8017770:	4a14      	ldr	r2, [pc, #80]	; (80177c4 <tcp_process+0x5d4>)
 8017772:	6013      	str	r3, [r2, #0]
 8017774:	e02e      	b.n	80177d4 <tcp_process+0x5e4>
 8017776:	4b13      	ldr	r3, [pc, #76]	; (80177c4 <tcp_process+0x5d4>)
 8017778:	681b      	ldr	r3, [r3, #0]
 801777a:	617b      	str	r3, [r7, #20]
 801777c:	e027      	b.n	80177ce <tcp_process+0x5de>
 801777e:	697b      	ldr	r3, [r7, #20]
 8017780:	68db      	ldr	r3, [r3, #12]
 8017782:	687a      	ldr	r2, [r7, #4]
 8017784:	429a      	cmp	r2, r3
 8017786:	d11f      	bne.n	80177c8 <tcp_process+0x5d8>
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	68da      	ldr	r2, [r3, #12]
 801778c:	697b      	ldr	r3, [r7, #20]
 801778e:	60da      	str	r2, [r3, #12]
 8017790:	e020      	b.n	80177d4 <tcp_process+0x5e4>
 8017792:	bf00      	nop
 8017794:	20006e40 	.word	0x20006e40
 8017798:	20006e38 	.word	0x20006e38
 801779c:	20006e3e 	.word	0x20006e3e
 80177a0:	20006e34 	.word	0x20006e34
 80177a4:	20006e24 	.word	0x20006e24
 80177a8:	2000aa6c 	.word	0x2000aa6c
 80177ac:	2000aa70 	.word	0x2000aa70
 80177b0:	0802547c 	.word	0x0802547c
 80177b4:	0802571c 	.word	0x0802571c
 80177b8:	080254c8 	.word	0x080254c8
 80177bc:	20006e3c 	.word	0x20006e3c
 80177c0:	20006e41 	.word	0x20006e41
 80177c4:	2000e170 	.word	0x2000e170
 80177c8:	697b      	ldr	r3, [r7, #20]
 80177ca:	68db      	ldr	r3, [r3, #12]
 80177cc:	617b      	str	r3, [r7, #20]
 80177ce:	697b      	ldr	r3, [r7, #20]
 80177d0:	2b00      	cmp	r3, #0
 80177d2:	d1d4      	bne.n	801777e <tcp_process+0x58e>
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	2200      	movs	r2, #0
 80177d8:	60da      	str	r2, [r3, #12]
 80177da:	4b77      	ldr	r3, [pc, #476]	; (80179b8 <tcp_process+0x7c8>)
 80177dc:	2201      	movs	r2, #1
 80177de:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	220a      	movs	r2, #10
 80177e4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80177e6:	4b75      	ldr	r3, [pc, #468]	; (80179bc <tcp_process+0x7cc>)
 80177e8:	681a      	ldr	r2, [r3, #0]
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	60da      	str	r2, [r3, #12]
 80177ee:	4a73      	ldr	r2, [pc, #460]	; (80179bc <tcp_process+0x7cc>)
 80177f0:	687b      	ldr	r3, [r7, #4]
 80177f2:	6013      	str	r3, [r2, #0]
 80177f4:	f003 f950 	bl	801aa98 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80177f8:	e0d2      	b.n	80179a0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80177fa:	687b      	ldr	r3, [r7, #4]
 80177fc:	8b5b      	ldrh	r3, [r3, #26]
 80177fe:	f043 0302 	orr.w	r3, r3, #2
 8017802:	b29a      	uxth	r2, r3
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	2208      	movs	r2, #8
 801780c:	751a      	strb	r2, [r3, #20]
      break;
 801780e:	e0c7      	b.n	80179a0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017810:	4b6b      	ldr	r3, [pc, #428]	; (80179c0 <tcp_process+0x7d0>)
 8017812:	781b      	ldrb	r3, [r3, #0]
 8017814:	f003 0310 	and.w	r3, r3, #16
 8017818:	2b00      	cmp	r3, #0
 801781a:	f000 80c1 	beq.w	80179a0 <tcp_process+0x7b0>
 801781e:	687b      	ldr	r3, [r7, #4]
 8017820:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017822:	4b68      	ldr	r3, [pc, #416]	; (80179c4 <tcp_process+0x7d4>)
 8017824:	681b      	ldr	r3, [r3, #0]
 8017826:	429a      	cmp	r2, r3
 8017828:	f040 80ba 	bne.w	80179a0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801782c:	687b      	ldr	r3, [r7, #4]
 801782e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8017830:	2b00      	cmp	r3, #0
 8017832:	f040 80b5 	bne.w	80179a0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8017836:	687b      	ldr	r3, [r7, #4]
 8017838:	2206      	movs	r2, #6
 801783a:	751a      	strb	r2, [r3, #20]
      break;
 801783c:	e0b0      	b.n	80179a0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801783e:	6878      	ldr	r0, [r7, #4]
 8017840:	f000 f9ca 	bl	8017bd8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8017844:	4b60      	ldr	r3, [pc, #384]	; (80179c8 <tcp_process+0x7d8>)
 8017846:	781b      	ldrb	r3, [r3, #0]
 8017848:	f003 0320 	and.w	r3, r3, #32
 801784c:	2b00      	cmp	r3, #0
 801784e:	f000 80a9 	beq.w	80179a4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8017852:	687b      	ldr	r3, [r7, #4]
 8017854:	8b5b      	ldrh	r3, [r3, #26]
 8017856:	f043 0302 	orr.w	r3, r3, #2
 801785a:	b29a      	uxth	r2, r3
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8017860:	6878      	ldr	r0, [r7, #4]
 8017862:	f7fe fd3b 	bl	80162dc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8017866:	4b59      	ldr	r3, [pc, #356]	; (80179cc <tcp_process+0x7dc>)
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	687a      	ldr	r2, [r7, #4]
 801786c:	429a      	cmp	r2, r3
 801786e:	d105      	bne.n	801787c <tcp_process+0x68c>
 8017870:	4b56      	ldr	r3, [pc, #344]	; (80179cc <tcp_process+0x7dc>)
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	68db      	ldr	r3, [r3, #12]
 8017876:	4a55      	ldr	r2, [pc, #340]	; (80179cc <tcp_process+0x7dc>)
 8017878:	6013      	str	r3, [r2, #0]
 801787a:	e013      	b.n	80178a4 <tcp_process+0x6b4>
 801787c:	4b53      	ldr	r3, [pc, #332]	; (80179cc <tcp_process+0x7dc>)
 801787e:	681b      	ldr	r3, [r3, #0]
 8017880:	613b      	str	r3, [r7, #16]
 8017882:	e00c      	b.n	801789e <tcp_process+0x6ae>
 8017884:	693b      	ldr	r3, [r7, #16]
 8017886:	68db      	ldr	r3, [r3, #12]
 8017888:	687a      	ldr	r2, [r7, #4]
 801788a:	429a      	cmp	r2, r3
 801788c:	d104      	bne.n	8017898 <tcp_process+0x6a8>
 801788e:	687b      	ldr	r3, [r7, #4]
 8017890:	68da      	ldr	r2, [r3, #12]
 8017892:	693b      	ldr	r3, [r7, #16]
 8017894:	60da      	str	r2, [r3, #12]
 8017896:	e005      	b.n	80178a4 <tcp_process+0x6b4>
 8017898:	693b      	ldr	r3, [r7, #16]
 801789a:	68db      	ldr	r3, [r3, #12]
 801789c:	613b      	str	r3, [r7, #16]
 801789e:	693b      	ldr	r3, [r7, #16]
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	d1ef      	bne.n	8017884 <tcp_process+0x694>
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	2200      	movs	r2, #0
 80178a8:	60da      	str	r2, [r3, #12]
 80178aa:	4b43      	ldr	r3, [pc, #268]	; (80179b8 <tcp_process+0x7c8>)
 80178ac:	2201      	movs	r2, #1
 80178ae:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	220a      	movs	r2, #10
 80178b4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80178b6:	4b41      	ldr	r3, [pc, #260]	; (80179bc <tcp_process+0x7cc>)
 80178b8:	681a      	ldr	r2, [r3, #0]
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	60da      	str	r2, [r3, #12]
 80178be:	4a3f      	ldr	r2, [pc, #252]	; (80179bc <tcp_process+0x7cc>)
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	6013      	str	r3, [r2, #0]
 80178c4:	f003 f8e8 	bl	801aa98 <tcp_timer_needed>
      }
      break;
 80178c8:	e06c      	b.n	80179a4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80178ca:	6878      	ldr	r0, [r7, #4]
 80178cc:	f000 f984 	bl	8017bd8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80178d0:	4b3b      	ldr	r3, [pc, #236]	; (80179c0 <tcp_process+0x7d0>)
 80178d2:	781b      	ldrb	r3, [r3, #0]
 80178d4:	f003 0310 	and.w	r3, r3, #16
 80178d8:	2b00      	cmp	r3, #0
 80178da:	d065      	beq.n	80179a8 <tcp_process+0x7b8>
 80178dc:	687b      	ldr	r3, [r7, #4]
 80178de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80178e0:	4b38      	ldr	r3, [pc, #224]	; (80179c4 <tcp_process+0x7d4>)
 80178e2:	681b      	ldr	r3, [r3, #0]
 80178e4:	429a      	cmp	r2, r3
 80178e6:	d15f      	bne.n	80179a8 <tcp_process+0x7b8>
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d15b      	bne.n	80179a8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80178f0:	6878      	ldr	r0, [r7, #4]
 80178f2:	f7fe fcf3 	bl	80162dc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80178f6:	4b35      	ldr	r3, [pc, #212]	; (80179cc <tcp_process+0x7dc>)
 80178f8:	681b      	ldr	r3, [r3, #0]
 80178fa:	687a      	ldr	r2, [r7, #4]
 80178fc:	429a      	cmp	r2, r3
 80178fe:	d105      	bne.n	801790c <tcp_process+0x71c>
 8017900:	4b32      	ldr	r3, [pc, #200]	; (80179cc <tcp_process+0x7dc>)
 8017902:	681b      	ldr	r3, [r3, #0]
 8017904:	68db      	ldr	r3, [r3, #12]
 8017906:	4a31      	ldr	r2, [pc, #196]	; (80179cc <tcp_process+0x7dc>)
 8017908:	6013      	str	r3, [r2, #0]
 801790a:	e013      	b.n	8017934 <tcp_process+0x744>
 801790c:	4b2f      	ldr	r3, [pc, #188]	; (80179cc <tcp_process+0x7dc>)
 801790e:	681b      	ldr	r3, [r3, #0]
 8017910:	60fb      	str	r3, [r7, #12]
 8017912:	e00c      	b.n	801792e <tcp_process+0x73e>
 8017914:	68fb      	ldr	r3, [r7, #12]
 8017916:	68db      	ldr	r3, [r3, #12]
 8017918:	687a      	ldr	r2, [r7, #4]
 801791a:	429a      	cmp	r2, r3
 801791c:	d104      	bne.n	8017928 <tcp_process+0x738>
 801791e:	687b      	ldr	r3, [r7, #4]
 8017920:	68da      	ldr	r2, [r3, #12]
 8017922:	68fb      	ldr	r3, [r7, #12]
 8017924:	60da      	str	r2, [r3, #12]
 8017926:	e005      	b.n	8017934 <tcp_process+0x744>
 8017928:	68fb      	ldr	r3, [r7, #12]
 801792a:	68db      	ldr	r3, [r3, #12]
 801792c:	60fb      	str	r3, [r7, #12]
 801792e:	68fb      	ldr	r3, [r7, #12]
 8017930:	2b00      	cmp	r3, #0
 8017932:	d1ef      	bne.n	8017914 <tcp_process+0x724>
 8017934:	687b      	ldr	r3, [r7, #4]
 8017936:	2200      	movs	r2, #0
 8017938:	60da      	str	r2, [r3, #12]
 801793a:	4b1f      	ldr	r3, [pc, #124]	; (80179b8 <tcp_process+0x7c8>)
 801793c:	2201      	movs	r2, #1
 801793e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	220a      	movs	r2, #10
 8017944:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8017946:	4b1d      	ldr	r3, [pc, #116]	; (80179bc <tcp_process+0x7cc>)
 8017948:	681a      	ldr	r2, [r3, #0]
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	60da      	str	r2, [r3, #12]
 801794e:	4a1b      	ldr	r2, [pc, #108]	; (80179bc <tcp_process+0x7cc>)
 8017950:	687b      	ldr	r3, [r7, #4]
 8017952:	6013      	str	r3, [r2, #0]
 8017954:	f003 f8a0 	bl	801aa98 <tcp_timer_needed>
      }
      break;
 8017958:	e026      	b.n	80179a8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801795a:	6878      	ldr	r0, [r7, #4]
 801795c:	f000 f93c 	bl	8017bd8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8017960:	4b17      	ldr	r3, [pc, #92]	; (80179c0 <tcp_process+0x7d0>)
 8017962:	781b      	ldrb	r3, [r3, #0]
 8017964:	f003 0310 	and.w	r3, r3, #16
 8017968:	2b00      	cmp	r3, #0
 801796a:	d01f      	beq.n	80179ac <tcp_process+0x7bc>
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017970:	4b14      	ldr	r3, [pc, #80]	; (80179c4 <tcp_process+0x7d4>)
 8017972:	681b      	ldr	r3, [r3, #0]
 8017974:	429a      	cmp	r2, r3
 8017976:	d119      	bne.n	80179ac <tcp_process+0x7bc>
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801797c:	2b00      	cmp	r3, #0
 801797e:	d115      	bne.n	80179ac <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8017980:	4b11      	ldr	r3, [pc, #68]	; (80179c8 <tcp_process+0x7d8>)
 8017982:	781b      	ldrb	r3, [r3, #0]
 8017984:	f043 0310 	orr.w	r3, r3, #16
 8017988:	b2da      	uxtb	r2, r3
 801798a:	4b0f      	ldr	r3, [pc, #60]	; (80179c8 <tcp_process+0x7d8>)
 801798c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801798e:	e00d      	b.n	80179ac <tcp_process+0x7bc>
    default:
      break;
 8017990:	bf00      	nop
 8017992:	e00c      	b.n	80179ae <tcp_process+0x7be>
      break;
 8017994:	bf00      	nop
 8017996:	e00a      	b.n	80179ae <tcp_process+0x7be>
      break;
 8017998:	bf00      	nop
 801799a:	e008      	b.n	80179ae <tcp_process+0x7be>
      break;
 801799c:	bf00      	nop
 801799e:	e006      	b.n	80179ae <tcp_process+0x7be>
      break;
 80179a0:	bf00      	nop
 80179a2:	e004      	b.n	80179ae <tcp_process+0x7be>
      break;
 80179a4:	bf00      	nop
 80179a6:	e002      	b.n	80179ae <tcp_process+0x7be>
      break;
 80179a8:	bf00      	nop
 80179aa:	e000      	b.n	80179ae <tcp_process+0x7be>
      break;
 80179ac:	bf00      	nop
  }
  return ERR_OK;
 80179ae:	2300      	movs	r3, #0
}
 80179b0:	4618      	mov	r0, r3
 80179b2:	3724      	adds	r7, #36	; 0x24
 80179b4:	46bd      	mov	sp, r7
 80179b6:	bd90      	pop	{r4, r7, pc}
 80179b8:	2000e16c 	.word	0x2000e16c
 80179bc:	2000e180 	.word	0x2000e180
 80179c0:	20006e40 	.word	0x20006e40
 80179c4:	20006e38 	.word	0x20006e38
 80179c8:	20006e41 	.word	0x20006e41
 80179cc:	2000e170 	.word	0x2000e170

080179d0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80179d0:	b590      	push	{r4, r7, lr}
 80179d2:	b085      	sub	sp, #20
 80179d4:	af00      	add	r7, sp, #0
 80179d6:	6078      	str	r0, [r7, #4]
 80179d8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80179da:	687b      	ldr	r3, [r7, #4]
 80179dc:	2b00      	cmp	r3, #0
 80179de:	d106      	bne.n	80179ee <tcp_oos_insert_segment+0x1e>
 80179e0:	4b3b      	ldr	r3, [pc, #236]	; (8017ad0 <tcp_oos_insert_segment+0x100>)
 80179e2:	f240 421f 	movw	r2, #1055	; 0x41f
 80179e6:	493b      	ldr	r1, [pc, #236]	; (8017ad4 <tcp_oos_insert_segment+0x104>)
 80179e8:	483b      	ldr	r0, [pc, #236]	; (8017ad8 <tcp_oos_insert_segment+0x108>)
 80179ea:	f007 fbdf 	bl	801f1ac <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	68db      	ldr	r3, [r3, #12]
 80179f2:	899b      	ldrh	r3, [r3, #12]
 80179f4:	b29b      	uxth	r3, r3
 80179f6:	4618      	mov	r0, r3
 80179f8:	f7fb faa4 	bl	8012f44 <lwip_htons>
 80179fc:	4603      	mov	r3, r0
 80179fe:	b2db      	uxtb	r3, r3
 8017a00:	f003 0301 	and.w	r3, r3, #1
 8017a04:	2b00      	cmp	r3, #0
 8017a06:	d028      	beq.n	8017a5a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8017a08:	6838      	ldr	r0, [r7, #0]
 8017a0a:	f7fe f997 	bl	8015d3c <tcp_segs_free>
    next = NULL;
 8017a0e:	2300      	movs	r3, #0
 8017a10:	603b      	str	r3, [r7, #0]
 8017a12:	e056      	b.n	8017ac2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8017a14:	683b      	ldr	r3, [r7, #0]
 8017a16:	68db      	ldr	r3, [r3, #12]
 8017a18:	899b      	ldrh	r3, [r3, #12]
 8017a1a:	b29b      	uxth	r3, r3
 8017a1c:	4618      	mov	r0, r3
 8017a1e:	f7fb fa91 	bl	8012f44 <lwip_htons>
 8017a22:	4603      	mov	r3, r0
 8017a24:	b2db      	uxtb	r3, r3
 8017a26:	f003 0301 	and.w	r3, r3, #1
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d00d      	beq.n	8017a4a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8017a2e:	687b      	ldr	r3, [r7, #4]
 8017a30:	68db      	ldr	r3, [r3, #12]
 8017a32:	899b      	ldrh	r3, [r3, #12]
 8017a34:	b29c      	uxth	r4, r3
 8017a36:	2001      	movs	r0, #1
 8017a38:	f7fb fa84 	bl	8012f44 <lwip_htons>
 8017a3c:	4603      	mov	r3, r0
 8017a3e:	461a      	mov	r2, r3
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	68db      	ldr	r3, [r3, #12]
 8017a44:	4322      	orrs	r2, r4
 8017a46:	b292      	uxth	r2, r2
 8017a48:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8017a4a:	683b      	ldr	r3, [r7, #0]
 8017a4c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8017a4e:	683b      	ldr	r3, [r7, #0]
 8017a50:	681b      	ldr	r3, [r3, #0]
 8017a52:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8017a54:	68f8      	ldr	r0, [r7, #12]
 8017a56:	f7fe f986 	bl	8015d66 <tcp_seg_free>
    while (next &&
 8017a5a:	683b      	ldr	r3, [r7, #0]
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d00e      	beq.n	8017a7e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8017a60:	687b      	ldr	r3, [r7, #4]
 8017a62:	891b      	ldrh	r3, [r3, #8]
 8017a64:	461a      	mov	r2, r3
 8017a66:	4b1d      	ldr	r3, [pc, #116]	; (8017adc <tcp_oos_insert_segment+0x10c>)
 8017a68:	681b      	ldr	r3, [r3, #0]
 8017a6a:	441a      	add	r2, r3
 8017a6c:	683b      	ldr	r3, [r7, #0]
 8017a6e:	68db      	ldr	r3, [r3, #12]
 8017a70:	685b      	ldr	r3, [r3, #4]
 8017a72:	6839      	ldr	r1, [r7, #0]
 8017a74:	8909      	ldrh	r1, [r1, #8]
 8017a76:	440b      	add	r3, r1
 8017a78:	1ad3      	subs	r3, r2, r3
    while (next &&
 8017a7a:	2b00      	cmp	r3, #0
 8017a7c:	daca      	bge.n	8017a14 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8017a7e:	683b      	ldr	r3, [r7, #0]
 8017a80:	2b00      	cmp	r3, #0
 8017a82:	d01e      	beq.n	8017ac2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8017a84:	687b      	ldr	r3, [r7, #4]
 8017a86:	891b      	ldrh	r3, [r3, #8]
 8017a88:	461a      	mov	r2, r3
 8017a8a:	4b14      	ldr	r3, [pc, #80]	; (8017adc <tcp_oos_insert_segment+0x10c>)
 8017a8c:	681b      	ldr	r3, [r3, #0]
 8017a8e:	441a      	add	r2, r3
 8017a90:	683b      	ldr	r3, [r7, #0]
 8017a92:	68db      	ldr	r3, [r3, #12]
 8017a94:	685b      	ldr	r3, [r3, #4]
 8017a96:	1ad3      	subs	r3, r2, r3
    if (next &&
 8017a98:	2b00      	cmp	r3, #0
 8017a9a:	dd12      	ble.n	8017ac2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8017a9c:	683b      	ldr	r3, [r7, #0]
 8017a9e:	68db      	ldr	r3, [r3, #12]
 8017aa0:	685b      	ldr	r3, [r3, #4]
 8017aa2:	b29a      	uxth	r2, r3
 8017aa4:	4b0d      	ldr	r3, [pc, #52]	; (8017adc <tcp_oos_insert_segment+0x10c>)
 8017aa6:	681b      	ldr	r3, [r3, #0]
 8017aa8:	b29b      	uxth	r3, r3
 8017aaa:	1ad3      	subs	r3, r2, r3
 8017aac:	b29a      	uxth	r2, r3
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8017ab2:	687b      	ldr	r3, [r7, #4]
 8017ab4:	685a      	ldr	r2, [r3, #4]
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	891b      	ldrh	r3, [r3, #8]
 8017aba:	4619      	mov	r1, r3
 8017abc:	4610      	mov	r0, r2
 8017abe:	f7fc fc03 	bl	80142c8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	683a      	ldr	r2, [r7, #0]
 8017ac6:	601a      	str	r2, [r3, #0]
}
 8017ac8:	bf00      	nop
 8017aca:	3714      	adds	r7, #20
 8017acc:	46bd      	mov	sp, r7
 8017ace:	bd90      	pop	{r4, r7, pc}
 8017ad0:	0802547c 	.word	0x0802547c
 8017ad4:	0802573c 	.word	0x0802573c
 8017ad8:	080254c8 	.word	0x080254c8
 8017adc:	20006e34 	.word	0x20006e34

08017ae0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8017ae0:	b5b0      	push	{r4, r5, r7, lr}
 8017ae2:	b086      	sub	sp, #24
 8017ae4:	af00      	add	r7, sp, #0
 8017ae6:	60f8      	str	r0, [r7, #12]
 8017ae8:	60b9      	str	r1, [r7, #8]
 8017aea:	607a      	str	r2, [r7, #4]
 8017aec:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8017aee:	e03e      	b.n	8017b6e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8017af0:	68bb      	ldr	r3, [r7, #8]
 8017af2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8017af4:	68bb      	ldr	r3, [r7, #8]
 8017af6:	681b      	ldr	r3, [r3, #0]
 8017af8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8017afa:	697b      	ldr	r3, [r7, #20]
 8017afc:	685b      	ldr	r3, [r3, #4]
 8017afe:	4618      	mov	r0, r3
 8017b00:	f7fc fdf6 	bl	80146f0 <pbuf_clen>
 8017b04:	4603      	mov	r3, r0
 8017b06:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8017b08:	68fb      	ldr	r3, [r7, #12]
 8017b0a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017b0e:	8a7a      	ldrh	r2, [r7, #18]
 8017b10:	429a      	cmp	r2, r3
 8017b12:	d906      	bls.n	8017b22 <tcp_free_acked_segments+0x42>
 8017b14:	4b2a      	ldr	r3, [pc, #168]	; (8017bc0 <tcp_free_acked_segments+0xe0>)
 8017b16:	f240 4257 	movw	r2, #1111	; 0x457
 8017b1a:	492a      	ldr	r1, [pc, #168]	; (8017bc4 <tcp_free_acked_segments+0xe4>)
 8017b1c:	482a      	ldr	r0, [pc, #168]	; (8017bc8 <tcp_free_acked_segments+0xe8>)
 8017b1e:	f007 fb45 	bl	801f1ac <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8017b22:	68fb      	ldr	r3, [r7, #12]
 8017b24:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8017b28:	8a7b      	ldrh	r3, [r7, #18]
 8017b2a:	1ad3      	subs	r3, r2, r3
 8017b2c:	b29a      	uxth	r2, r3
 8017b2e:	68fb      	ldr	r3, [r7, #12]
 8017b30:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8017b34:	697b      	ldr	r3, [r7, #20]
 8017b36:	891a      	ldrh	r2, [r3, #8]
 8017b38:	4b24      	ldr	r3, [pc, #144]	; (8017bcc <tcp_free_acked_segments+0xec>)
 8017b3a:	881b      	ldrh	r3, [r3, #0]
 8017b3c:	4413      	add	r3, r2
 8017b3e:	b29a      	uxth	r2, r3
 8017b40:	4b22      	ldr	r3, [pc, #136]	; (8017bcc <tcp_free_acked_segments+0xec>)
 8017b42:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8017b44:	6978      	ldr	r0, [r7, #20]
 8017b46:	f7fe f90e 	bl	8015d66 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8017b4a:	68fb      	ldr	r3, [r7, #12]
 8017b4c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	d00c      	beq.n	8017b6e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8017b54:	68bb      	ldr	r3, [r7, #8]
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d109      	bne.n	8017b6e <tcp_free_acked_segments+0x8e>
 8017b5a:	683b      	ldr	r3, [r7, #0]
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d106      	bne.n	8017b6e <tcp_free_acked_segments+0x8e>
 8017b60:	4b17      	ldr	r3, [pc, #92]	; (8017bc0 <tcp_free_acked_segments+0xe0>)
 8017b62:	f240 4261 	movw	r2, #1121	; 0x461
 8017b66:	491a      	ldr	r1, [pc, #104]	; (8017bd0 <tcp_free_acked_segments+0xf0>)
 8017b68:	4817      	ldr	r0, [pc, #92]	; (8017bc8 <tcp_free_acked_segments+0xe8>)
 8017b6a:	f007 fb1f 	bl	801f1ac <iprintf>
  while (seg_list != NULL &&
 8017b6e:	68bb      	ldr	r3, [r7, #8]
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	d020      	beq.n	8017bb6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8017b74:	68bb      	ldr	r3, [r7, #8]
 8017b76:	68db      	ldr	r3, [r3, #12]
 8017b78:	685b      	ldr	r3, [r3, #4]
 8017b7a:	4618      	mov	r0, r3
 8017b7c:	f7fb f9f7 	bl	8012f6e <lwip_htonl>
 8017b80:	4604      	mov	r4, r0
 8017b82:	68bb      	ldr	r3, [r7, #8]
 8017b84:	891b      	ldrh	r3, [r3, #8]
 8017b86:	461d      	mov	r5, r3
 8017b88:	68bb      	ldr	r3, [r7, #8]
 8017b8a:	68db      	ldr	r3, [r3, #12]
 8017b8c:	899b      	ldrh	r3, [r3, #12]
 8017b8e:	b29b      	uxth	r3, r3
 8017b90:	4618      	mov	r0, r3
 8017b92:	f7fb f9d7 	bl	8012f44 <lwip_htons>
 8017b96:	4603      	mov	r3, r0
 8017b98:	b2db      	uxtb	r3, r3
 8017b9a:	f003 0303 	and.w	r3, r3, #3
 8017b9e:	2b00      	cmp	r3, #0
 8017ba0:	d001      	beq.n	8017ba6 <tcp_free_acked_segments+0xc6>
 8017ba2:	2301      	movs	r3, #1
 8017ba4:	e000      	b.n	8017ba8 <tcp_free_acked_segments+0xc8>
 8017ba6:	2300      	movs	r3, #0
 8017ba8:	442b      	add	r3, r5
 8017baa:	18e2      	adds	r2, r4, r3
 8017bac:	4b09      	ldr	r3, [pc, #36]	; (8017bd4 <tcp_free_acked_segments+0xf4>)
 8017bae:	681b      	ldr	r3, [r3, #0]
 8017bb0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8017bb2:	2b00      	cmp	r3, #0
 8017bb4:	dd9c      	ble.n	8017af0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8017bb6:	68bb      	ldr	r3, [r7, #8]
}
 8017bb8:	4618      	mov	r0, r3
 8017bba:	3718      	adds	r7, #24
 8017bbc:	46bd      	mov	sp, r7
 8017bbe:	bdb0      	pop	{r4, r5, r7, pc}
 8017bc0:	0802547c 	.word	0x0802547c
 8017bc4:	08025764 	.word	0x08025764
 8017bc8:	080254c8 	.word	0x080254c8
 8017bcc:	20006e3c 	.word	0x20006e3c
 8017bd0:	0802578c 	.word	0x0802578c
 8017bd4:	20006e38 	.word	0x20006e38

08017bd8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8017bd8:	b5b0      	push	{r4, r5, r7, lr}
 8017bda:	b094      	sub	sp, #80	; 0x50
 8017bdc:	af00      	add	r7, sp, #0
 8017bde:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8017be0:	2300      	movs	r3, #0
 8017be2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	2b00      	cmp	r3, #0
 8017be8:	d106      	bne.n	8017bf8 <tcp_receive+0x20>
 8017bea:	4ba6      	ldr	r3, [pc, #664]	; (8017e84 <tcp_receive+0x2ac>)
 8017bec:	f240 427b 	movw	r2, #1147	; 0x47b
 8017bf0:	49a5      	ldr	r1, [pc, #660]	; (8017e88 <tcp_receive+0x2b0>)
 8017bf2:	48a6      	ldr	r0, [pc, #664]	; (8017e8c <tcp_receive+0x2b4>)
 8017bf4:	f007 fada 	bl	801f1ac <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	7d1b      	ldrb	r3, [r3, #20]
 8017bfc:	2b03      	cmp	r3, #3
 8017bfe:	d806      	bhi.n	8017c0e <tcp_receive+0x36>
 8017c00:	4ba0      	ldr	r3, [pc, #640]	; (8017e84 <tcp_receive+0x2ac>)
 8017c02:	f240 427c 	movw	r2, #1148	; 0x47c
 8017c06:	49a2      	ldr	r1, [pc, #648]	; (8017e90 <tcp_receive+0x2b8>)
 8017c08:	48a0      	ldr	r0, [pc, #640]	; (8017e8c <tcp_receive+0x2b4>)
 8017c0a:	f007 facf 	bl	801f1ac <iprintf>

  if (flags & TCP_ACK) {
 8017c0e:	4ba1      	ldr	r3, [pc, #644]	; (8017e94 <tcp_receive+0x2bc>)
 8017c10:	781b      	ldrb	r3, [r3, #0]
 8017c12:	f003 0310 	and.w	r3, r3, #16
 8017c16:	2b00      	cmp	r3, #0
 8017c18:	f000 8263 	beq.w	80180e2 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017c22:	461a      	mov	r2, r3
 8017c24:	687b      	ldr	r3, [r7, #4]
 8017c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017c28:	4413      	add	r3, r2
 8017c2a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8017c2c:	687b      	ldr	r3, [r7, #4]
 8017c2e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8017c30:	4b99      	ldr	r3, [pc, #612]	; (8017e98 <tcp_receive+0x2c0>)
 8017c32:	681b      	ldr	r3, [r3, #0]
 8017c34:	1ad3      	subs	r3, r2, r3
 8017c36:	2b00      	cmp	r3, #0
 8017c38:	db1b      	blt.n	8017c72 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8017c3e:	4b96      	ldr	r3, [pc, #600]	; (8017e98 <tcp_receive+0x2c0>)
 8017c40:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8017c42:	429a      	cmp	r2, r3
 8017c44:	d106      	bne.n	8017c54 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8017c4a:	4b94      	ldr	r3, [pc, #592]	; (8017e9c <tcp_receive+0x2c4>)
 8017c4c:	681b      	ldr	r3, [r3, #0]
 8017c4e:	1ad3      	subs	r3, r2, r3
 8017c50:	2b00      	cmp	r3, #0
 8017c52:	db0e      	blt.n	8017c72 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8017c58:	4b90      	ldr	r3, [pc, #576]	; (8017e9c <tcp_receive+0x2c4>)
 8017c5a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8017c5c:	429a      	cmp	r2, r3
 8017c5e:	d125      	bne.n	8017cac <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8017c60:	4b8f      	ldr	r3, [pc, #572]	; (8017ea0 <tcp_receive+0x2c8>)
 8017c62:	681b      	ldr	r3, [r3, #0]
 8017c64:	89db      	ldrh	r3, [r3, #14]
 8017c66:	b29a      	uxth	r2, r3
 8017c68:	687b      	ldr	r3, [r7, #4]
 8017c6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017c6e:	429a      	cmp	r2, r3
 8017c70:	d91c      	bls.n	8017cac <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8017c72:	4b8b      	ldr	r3, [pc, #556]	; (8017ea0 <tcp_receive+0x2c8>)
 8017c74:	681b      	ldr	r3, [r3, #0]
 8017c76:	89db      	ldrh	r3, [r3, #14]
 8017c78:	b29a      	uxth	r2, r3
 8017c7a:	687b      	ldr	r3, [r7, #4]
 8017c7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8017c80:	687b      	ldr	r3, [r7, #4]
 8017c82:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8017c86:	687b      	ldr	r3, [r7, #4]
 8017c88:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017c8c:	429a      	cmp	r2, r3
 8017c8e:	d205      	bcs.n	8017c9c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8017c90:	687b      	ldr	r3, [r7, #4]
 8017c92:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8017c9c:	4b7e      	ldr	r3, [pc, #504]	; (8017e98 <tcp_receive+0x2c0>)
 8017c9e:	681a      	ldr	r2, [r3, #0]
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8017ca4:	4b7d      	ldr	r3, [pc, #500]	; (8017e9c <tcp_receive+0x2c4>)
 8017ca6:	681a      	ldr	r2, [r3, #0]
 8017ca8:	687b      	ldr	r3, [r7, #4]
 8017caa:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8017cac:	4b7b      	ldr	r3, [pc, #492]	; (8017e9c <tcp_receive+0x2c4>)
 8017cae:	681a      	ldr	r2, [r3, #0]
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017cb4:	1ad3      	subs	r3, r2, r3
 8017cb6:	2b00      	cmp	r3, #0
 8017cb8:	dc58      	bgt.n	8017d6c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8017cba:	4b7a      	ldr	r3, [pc, #488]	; (8017ea4 <tcp_receive+0x2cc>)
 8017cbc:	881b      	ldrh	r3, [r3, #0]
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d14b      	bne.n	8017d5a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8017cc2:	687b      	ldr	r3, [r7, #4]
 8017cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017cc6:	687a      	ldr	r2, [r7, #4]
 8017cc8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8017ccc:	4413      	add	r3, r2
 8017cce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017cd0:	429a      	cmp	r2, r3
 8017cd2:	d142      	bne.n	8017d5a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8017cda:	2b00      	cmp	r3, #0
 8017cdc:	db3d      	blt.n	8017d5a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8017ce2:	4b6e      	ldr	r3, [pc, #440]	; (8017e9c <tcp_receive+0x2c4>)
 8017ce4:	681b      	ldr	r3, [r3, #0]
 8017ce6:	429a      	cmp	r2, r3
 8017ce8:	d137      	bne.n	8017d5a <tcp_receive+0x182>
              found_dupack = 1;
 8017cea:	2301      	movs	r3, #1
 8017cec:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017cf4:	2bff      	cmp	r3, #255	; 0xff
 8017cf6:	d007      	beq.n	8017d08 <tcp_receive+0x130>
                ++pcb->dupacks;
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017cfe:	3301      	adds	r3, #1
 8017d00:	b2da      	uxtb	r2, r3
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8017d08:	687b      	ldr	r3, [r7, #4]
 8017d0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017d0e:	2b03      	cmp	r3, #3
 8017d10:	d91b      	bls.n	8017d4a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8017d12:	687b      	ldr	r3, [r7, #4]
 8017d14:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017d18:	687b      	ldr	r3, [r7, #4]
 8017d1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017d1c:	4413      	add	r3, r2
 8017d1e:	b29a      	uxth	r2, r3
 8017d20:	687b      	ldr	r3, [r7, #4]
 8017d22:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017d26:	429a      	cmp	r2, r3
 8017d28:	d30a      	bcc.n	8017d40 <tcp_receive+0x168>
 8017d2a:	687b      	ldr	r3, [r7, #4]
 8017d2c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017d34:	4413      	add	r3, r2
 8017d36:	b29a      	uxth	r2, r3
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017d3e:	e004      	b.n	8017d4a <tcp_receive+0x172>
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017d46:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017d50:	2b02      	cmp	r3, #2
 8017d52:	d902      	bls.n	8017d5a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8017d54:	6878      	ldr	r0, [r7, #4]
 8017d56:	f002 fb41 	bl	801a3dc <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8017d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017d5c:	2b00      	cmp	r3, #0
 8017d5e:	f040 8160 	bne.w	8018022 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8017d62:	687b      	ldr	r3, [r7, #4]
 8017d64:	2200      	movs	r2, #0
 8017d66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017d6a:	e15a      	b.n	8018022 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017d6c:	4b4b      	ldr	r3, [pc, #300]	; (8017e9c <tcp_receive+0x2c4>)
 8017d6e:	681a      	ldr	r2, [r3, #0]
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017d74:	1ad3      	subs	r3, r2, r3
 8017d76:	3b01      	subs	r3, #1
 8017d78:	2b00      	cmp	r3, #0
 8017d7a:	f2c0 814d 	blt.w	8018018 <tcp_receive+0x440>
 8017d7e:	4b47      	ldr	r3, [pc, #284]	; (8017e9c <tcp_receive+0x2c4>)
 8017d80:	681a      	ldr	r2, [r3, #0]
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017d86:	1ad3      	subs	r3, r2, r3
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	f300 8145 	bgt.w	8018018 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	8b5b      	ldrh	r3, [r3, #26]
 8017d92:	f003 0304 	and.w	r3, r3, #4
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	d010      	beq.n	8017dbc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	8b5b      	ldrh	r3, [r3, #26]
 8017d9e:	f023 0304 	bic.w	r3, r3, #4
 8017da2:	b29a      	uxth	r2, r3
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8017da8:	687b      	ldr	r3, [r7, #4]
 8017daa:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	2200      	movs	r2, #0
 8017db8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	2200      	movs	r2, #0
 8017dc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8017dca:	10db      	asrs	r3, r3, #3
 8017dcc:	b21b      	sxth	r3, r3
 8017dce:	b29a      	uxth	r2, r3
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8017dd6:	b29b      	uxth	r3, r3
 8017dd8:	4413      	add	r3, r2
 8017dda:	b29b      	uxth	r3, r3
 8017ddc:	b21a      	sxth	r2, r3
 8017dde:	687b      	ldr	r3, [r7, #4]
 8017de0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8017de4:	4b2d      	ldr	r3, [pc, #180]	; (8017e9c <tcp_receive+0x2c4>)
 8017de6:	681b      	ldr	r3, [r3, #0]
 8017de8:	b29a      	uxth	r2, r3
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017dee:	b29b      	uxth	r3, r3
 8017df0:	1ad3      	subs	r3, r2, r3
 8017df2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	2200      	movs	r2, #0
 8017df8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8017dfc:	4b27      	ldr	r3, [pc, #156]	; (8017e9c <tcp_receive+0x2c4>)
 8017dfe:	681a      	ldr	r2, [r3, #0]
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	7d1b      	ldrb	r3, [r3, #20]
 8017e08:	2b03      	cmp	r3, #3
 8017e0a:	f240 8096 	bls.w	8017f3a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8017e1a:	429a      	cmp	r2, r3
 8017e1c:	d244      	bcs.n	8017ea8 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	8b5b      	ldrh	r3, [r3, #26]
 8017e22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	d001      	beq.n	8017e2e <tcp_receive+0x256>
 8017e2a:	2301      	movs	r3, #1
 8017e2c:	e000      	b.n	8017e30 <tcp_receive+0x258>
 8017e2e:	2302      	movs	r3, #2
 8017e30:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8017e34:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8017e38:	b29a      	uxth	r2, r3
 8017e3a:	687b      	ldr	r3, [r7, #4]
 8017e3c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017e3e:	fb12 f303 	smulbb	r3, r2, r3
 8017e42:	b29b      	uxth	r3, r3
 8017e44:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017e46:	4293      	cmp	r3, r2
 8017e48:	bf28      	it	cs
 8017e4a:	4613      	movcs	r3, r2
 8017e4c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8017e4e:	687b      	ldr	r3, [r7, #4]
 8017e50:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017e54:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017e56:	4413      	add	r3, r2
 8017e58:	b29a      	uxth	r2, r3
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017e60:	429a      	cmp	r2, r3
 8017e62:	d309      	bcc.n	8017e78 <tcp_receive+0x2a0>
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017e6a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017e6c:	4413      	add	r3, r2
 8017e6e:	b29a      	uxth	r2, r3
 8017e70:	687b      	ldr	r3, [r7, #4]
 8017e72:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017e76:	e060      	b.n	8017f3a <tcp_receive+0x362>
 8017e78:	687b      	ldr	r3, [r7, #4]
 8017e7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017e7e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017e82:	e05a      	b.n	8017f3a <tcp_receive+0x362>
 8017e84:	0802547c 	.word	0x0802547c
 8017e88:	080257ac 	.word	0x080257ac
 8017e8c:	080254c8 	.word	0x080254c8
 8017e90:	080257c8 	.word	0x080257c8
 8017e94:	20006e40 	.word	0x20006e40
 8017e98:	20006e34 	.word	0x20006e34
 8017e9c:	20006e38 	.word	0x20006e38
 8017ea0:	20006e24 	.word	0x20006e24
 8017ea4:	20006e3e 	.word	0x20006e3e
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017eae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017eb0:	4413      	add	r3, r2
 8017eb2:	b29a      	uxth	r2, r3
 8017eb4:	687b      	ldr	r3, [r7, #4]
 8017eb6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8017eba:	429a      	cmp	r2, r3
 8017ebc:	d309      	bcc.n	8017ed2 <tcp_receive+0x2fa>
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017ec4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017ec6:	4413      	add	r3, r2
 8017ec8:	b29a      	uxth	r2, r3
 8017eca:	687b      	ldr	r3, [r7, #4]
 8017ecc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8017ed0:	e004      	b.n	8017edc <tcp_receive+0x304>
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017ed8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017ee8:	429a      	cmp	r2, r3
 8017eea:	d326      	bcc.n	8017f3a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8017eec:	687b      	ldr	r3, [r7, #4]
 8017eee:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017ef8:	1ad3      	subs	r3, r2, r3
 8017efa:	b29a      	uxth	r2, r3
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017f0c:	4413      	add	r3, r2
 8017f0e:	b29a      	uxth	r2, r3
 8017f10:	687b      	ldr	r3, [r7, #4]
 8017f12:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017f16:	429a      	cmp	r2, r3
 8017f18:	d30a      	bcc.n	8017f30 <tcp_receive+0x358>
 8017f1a:	687b      	ldr	r3, [r7, #4]
 8017f1c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017f24:	4413      	add	r3, r2
 8017f26:	b29a      	uxth	r2, r3
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017f2e:	e004      	b.n	8017f3a <tcp_receive+0x362>
 8017f30:	687b      	ldr	r3, [r7, #4]
 8017f32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017f36:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8017f3a:	687b      	ldr	r3, [r7, #4]
 8017f3c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017f42:	4a98      	ldr	r2, [pc, #608]	; (80181a4 <tcp_receive+0x5cc>)
 8017f44:	6878      	ldr	r0, [r7, #4]
 8017f46:	f7ff fdcb 	bl	8017ae0 <tcp_free_acked_segments>
 8017f4a:	4602      	mov	r2, r0
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8017f50:	687b      	ldr	r3, [r7, #4]
 8017f52:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017f58:	4a93      	ldr	r2, [pc, #588]	; (80181a8 <tcp_receive+0x5d0>)
 8017f5a:	6878      	ldr	r0, [r7, #4]
 8017f5c:	f7ff fdc0 	bl	8017ae0 <tcp_free_acked_segments>
 8017f60:	4602      	mov	r2, r0
 8017f62:	687b      	ldr	r3, [r7, #4]
 8017f64:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d104      	bne.n	8017f78 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017f74:	861a      	strh	r2, [r3, #48]	; 0x30
 8017f76:	e002      	b.n	8017f7e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	2200      	movs	r2, #0
 8017f7c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	2200      	movs	r2, #0
 8017f82:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	d103      	bne.n	8017f94 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	2200      	movs	r2, #0
 8017f90:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8017f9a:	4b84      	ldr	r3, [pc, #528]	; (80181ac <tcp_receive+0x5d4>)
 8017f9c:	881b      	ldrh	r3, [r3, #0]
 8017f9e:	4413      	add	r3, r2
 8017fa0:	b29a      	uxth	r2, r3
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	8b5b      	ldrh	r3, [r3, #26]
 8017fac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d035      	beq.n	8018020 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017fb8:	2b00      	cmp	r3, #0
 8017fba:	d118      	bne.n	8017fee <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	d00c      	beq.n	8017fde <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8017fc8:	687b      	ldr	r3, [r7, #4]
 8017fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017fcc:	68db      	ldr	r3, [r3, #12]
 8017fce:	685b      	ldr	r3, [r3, #4]
 8017fd0:	4618      	mov	r0, r3
 8017fd2:	f7fa ffcc 	bl	8012f6e <lwip_htonl>
 8017fd6:	4603      	mov	r3, r0
 8017fd8:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8017fda:	2b00      	cmp	r3, #0
 8017fdc:	dc20      	bgt.n	8018020 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 8017fde:	687b      	ldr	r3, [r7, #4]
 8017fe0:	8b5b      	ldrh	r3, [r3, #26]
 8017fe2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8017fe6:	b29a      	uxth	r2, r3
 8017fe8:	687b      	ldr	r3, [r7, #4]
 8017fea:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017fec:	e018      	b.n	8018020 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017ff6:	68db      	ldr	r3, [r3, #12]
 8017ff8:	685b      	ldr	r3, [r3, #4]
 8017ffa:	4618      	mov	r0, r3
 8017ffc:	f7fa ffb7 	bl	8012f6e <lwip_htonl>
 8018000:	4603      	mov	r3, r0
 8018002:	1ae3      	subs	r3, r4, r3
 8018004:	2b00      	cmp	r3, #0
 8018006:	dc0b      	bgt.n	8018020 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	8b5b      	ldrh	r3, [r3, #26]
 801800c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8018010:	b29a      	uxth	r2, r3
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018016:	e003      	b.n	8018020 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8018018:	6878      	ldr	r0, [r7, #4]
 801801a:	f002 fbcd 	bl	801a7b8 <tcp_send_empty_ack>
 801801e:	e000      	b.n	8018022 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8018020:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018026:	2b00      	cmp	r3, #0
 8018028:	d05b      	beq.n	80180e2 <tcp_receive+0x50a>
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801802e:	4b60      	ldr	r3, [pc, #384]	; (80181b0 <tcp_receive+0x5d8>)
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	1ad3      	subs	r3, r2, r3
 8018034:	2b00      	cmp	r3, #0
 8018036:	da54      	bge.n	80180e2 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8018038:	4b5e      	ldr	r3, [pc, #376]	; (80181b4 <tcp_receive+0x5dc>)
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	b29a      	uxth	r2, r3
 801803e:	687b      	ldr	r3, [r7, #4]
 8018040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018042:	b29b      	uxth	r3, r3
 8018044:	1ad3      	subs	r3, r2, r3
 8018046:	b29b      	uxth	r3, r3
 8018048:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801804c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8018056:	10db      	asrs	r3, r3, #3
 8018058:	b21b      	sxth	r3, r3
 801805a:	b29b      	uxth	r3, r3
 801805c:	1ad3      	subs	r3, r2, r3
 801805e:	b29b      	uxth	r3, r3
 8018060:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801806a:	b29a      	uxth	r2, r3
 801806c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8018070:	4413      	add	r3, r2
 8018072:	b29b      	uxth	r3, r3
 8018074:	b21a      	sxth	r2, r3
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801807a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801807e:	2b00      	cmp	r3, #0
 8018080:	da05      	bge.n	801808e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8018082:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8018086:	425b      	negs	r3, r3
 8018088:	b29b      	uxth	r3, r3
 801808a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801808e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8018092:	687b      	ldr	r3, [r7, #4]
 8018094:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8018098:	109b      	asrs	r3, r3, #2
 801809a:	b21b      	sxth	r3, r3
 801809c:	b29b      	uxth	r3, r3
 801809e:	1ad3      	subs	r3, r2, r3
 80180a0:	b29b      	uxth	r3, r3
 80180a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80180ac:	b29a      	uxth	r2, r3
 80180ae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80180b2:	4413      	add	r3, r2
 80180b4:	b29b      	uxth	r3, r3
 80180b6:	b21a      	sxth	r2, r3
 80180b8:	687b      	ldr	r3, [r7, #4]
 80180ba:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80180bc:	687b      	ldr	r3, [r7, #4]
 80180be:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80180c2:	10db      	asrs	r3, r3, #3
 80180c4:	b21b      	sxth	r3, r3
 80180c6:	b29a      	uxth	r2, r3
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80180ce:	b29b      	uxth	r3, r3
 80180d0:	4413      	add	r3, r2
 80180d2:	b29b      	uxth	r3, r3
 80180d4:	b21a      	sxth	r2, r3
 80180d6:	687b      	ldr	r3, [r7, #4]
 80180d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	2200      	movs	r2, #0
 80180e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80180e2:	4b35      	ldr	r3, [pc, #212]	; (80181b8 <tcp_receive+0x5e0>)
 80180e4:	881b      	ldrh	r3, [r3, #0]
 80180e6:	2b00      	cmp	r3, #0
 80180e8:	f000 84e1 	beq.w	8018aae <tcp_receive+0xed6>
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	7d1b      	ldrb	r3, [r3, #20]
 80180f0:	2b06      	cmp	r3, #6
 80180f2:	f200 84dc 	bhi.w	8018aae <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80180f6:	687b      	ldr	r3, [r7, #4]
 80180f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80180fa:	4b30      	ldr	r3, [pc, #192]	; (80181bc <tcp_receive+0x5e4>)
 80180fc:	681b      	ldr	r3, [r3, #0]
 80180fe:	1ad3      	subs	r3, r2, r3
 8018100:	3b01      	subs	r3, #1
 8018102:	2b00      	cmp	r3, #0
 8018104:	f2c0 808e 	blt.w	8018224 <tcp_receive+0x64c>
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801810c:	4b2a      	ldr	r3, [pc, #168]	; (80181b8 <tcp_receive+0x5e0>)
 801810e:	881b      	ldrh	r3, [r3, #0]
 8018110:	4619      	mov	r1, r3
 8018112:	4b2a      	ldr	r3, [pc, #168]	; (80181bc <tcp_receive+0x5e4>)
 8018114:	681b      	ldr	r3, [r3, #0]
 8018116:	440b      	add	r3, r1
 8018118:	1ad3      	subs	r3, r2, r3
 801811a:	3301      	adds	r3, #1
 801811c:	2b00      	cmp	r3, #0
 801811e:	f300 8081 	bgt.w	8018224 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8018122:	4b27      	ldr	r3, [pc, #156]	; (80181c0 <tcp_receive+0x5e8>)
 8018124:	685b      	ldr	r3, [r3, #4]
 8018126:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8018128:	687b      	ldr	r3, [r7, #4]
 801812a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801812c:	4b23      	ldr	r3, [pc, #140]	; (80181bc <tcp_receive+0x5e4>)
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	1ad3      	subs	r3, r2, r3
 8018132:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8018134:	4b22      	ldr	r3, [pc, #136]	; (80181c0 <tcp_receive+0x5e8>)
 8018136:	685b      	ldr	r3, [r3, #4]
 8018138:	2b00      	cmp	r3, #0
 801813a:	d106      	bne.n	801814a <tcp_receive+0x572>
 801813c:	4b21      	ldr	r3, [pc, #132]	; (80181c4 <tcp_receive+0x5ec>)
 801813e:	f240 5294 	movw	r2, #1428	; 0x594
 8018142:	4921      	ldr	r1, [pc, #132]	; (80181c8 <tcp_receive+0x5f0>)
 8018144:	4821      	ldr	r0, [pc, #132]	; (80181cc <tcp_receive+0x5f4>)
 8018146:	f007 f831 	bl	801f1ac <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801814a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801814c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8018150:	4293      	cmp	r3, r2
 8018152:	d906      	bls.n	8018162 <tcp_receive+0x58a>
 8018154:	4b1b      	ldr	r3, [pc, #108]	; (80181c4 <tcp_receive+0x5ec>)
 8018156:	f240 5295 	movw	r2, #1429	; 0x595
 801815a:	491d      	ldr	r1, [pc, #116]	; (80181d0 <tcp_receive+0x5f8>)
 801815c:	481b      	ldr	r0, [pc, #108]	; (80181cc <tcp_receive+0x5f4>)
 801815e:	f007 f825 	bl	801f1ac <iprintf>
      off = (u16_t)off32;
 8018162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018164:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8018168:	4b15      	ldr	r3, [pc, #84]	; (80181c0 <tcp_receive+0x5e8>)
 801816a:	685b      	ldr	r3, [r3, #4]
 801816c:	891b      	ldrh	r3, [r3, #8]
 801816e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018172:	429a      	cmp	r2, r3
 8018174:	d906      	bls.n	8018184 <tcp_receive+0x5ac>
 8018176:	4b13      	ldr	r3, [pc, #76]	; (80181c4 <tcp_receive+0x5ec>)
 8018178:	f240 5297 	movw	r2, #1431	; 0x597
 801817c:	4915      	ldr	r1, [pc, #84]	; (80181d4 <tcp_receive+0x5fc>)
 801817e:	4813      	ldr	r0, [pc, #76]	; (80181cc <tcp_receive+0x5f4>)
 8018180:	f007 f814 	bl	801f1ac <iprintf>
      inseg.len -= off;
 8018184:	4b0e      	ldr	r3, [pc, #56]	; (80181c0 <tcp_receive+0x5e8>)
 8018186:	891a      	ldrh	r2, [r3, #8]
 8018188:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801818c:	1ad3      	subs	r3, r2, r3
 801818e:	b29a      	uxth	r2, r3
 8018190:	4b0b      	ldr	r3, [pc, #44]	; (80181c0 <tcp_receive+0x5e8>)
 8018192:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8018194:	4b0a      	ldr	r3, [pc, #40]	; (80181c0 <tcp_receive+0x5e8>)
 8018196:	685b      	ldr	r3, [r3, #4]
 8018198:	891a      	ldrh	r2, [r3, #8]
 801819a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801819e:	1ad3      	subs	r3, r2, r3
 80181a0:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80181a2:	e029      	b.n	80181f8 <tcp_receive+0x620>
 80181a4:	080257e4 	.word	0x080257e4
 80181a8:	080257ec 	.word	0x080257ec
 80181ac:	20006e3c 	.word	0x20006e3c
 80181b0:	20006e38 	.word	0x20006e38
 80181b4:	2000e174 	.word	0x2000e174
 80181b8:	20006e3e 	.word	0x20006e3e
 80181bc:	20006e34 	.word	0x20006e34
 80181c0:	20006e14 	.word	0x20006e14
 80181c4:	0802547c 	.word	0x0802547c
 80181c8:	080257f4 	.word	0x080257f4
 80181cc:	080254c8 	.word	0x080254c8
 80181d0:	08025804 	.word	0x08025804
 80181d4:	08025814 	.word	0x08025814
        off -= p->len;
 80181d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181da:	895b      	ldrh	r3, [r3, #10]
 80181dc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80181e0:	1ad3      	subs	r3, r2, r3
 80181e2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80181e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181e8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80181ea:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80181ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181ee:	2200      	movs	r2, #0
 80181f0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80181f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181f4:	681b      	ldr	r3, [r3, #0]
 80181f6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80181f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181fa:	895b      	ldrh	r3, [r3, #10]
 80181fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8018200:	429a      	cmp	r2, r3
 8018202:	d8e9      	bhi.n	80181d8 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8018204:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8018208:	4619      	mov	r1, r3
 801820a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801820c:	f7fc f95c 	bl	80144c8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8018210:	687b      	ldr	r3, [r7, #4]
 8018212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018214:	4a91      	ldr	r2, [pc, #580]	; (801845c <tcp_receive+0x884>)
 8018216:	6013      	str	r3, [r2, #0]
 8018218:	4b91      	ldr	r3, [pc, #580]	; (8018460 <tcp_receive+0x888>)
 801821a:	68db      	ldr	r3, [r3, #12]
 801821c:	4a8f      	ldr	r2, [pc, #572]	; (801845c <tcp_receive+0x884>)
 801821e:	6812      	ldr	r2, [r2, #0]
 8018220:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8018222:	e00d      	b.n	8018240 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8018224:	4b8d      	ldr	r3, [pc, #564]	; (801845c <tcp_receive+0x884>)
 8018226:	681a      	ldr	r2, [r3, #0]
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801822c:	1ad3      	subs	r3, r2, r3
 801822e:	2b00      	cmp	r3, #0
 8018230:	da06      	bge.n	8018240 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	8b5b      	ldrh	r3, [r3, #26]
 8018236:	f043 0302 	orr.w	r3, r3, #2
 801823a:	b29a      	uxth	r2, r3
 801823c:	687b      	ldr	r3, [r7, #4]
 801823e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018240:	4b86      	ldr	r3, [pc, #536]	; (801845c <tcp_receive+0x884>)
 8018242:	681a      	ldr	r2, [r3, #0]
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018248:	1ad3      	subs	r3, r2, r3
 801824a:	2b00      	cmp	r3, #0
 801824c:	f2c0 842a 	blt.w	8018aa4 <tcp_receive+0xecc>
 8018250:	4b82      	ldr	r3, [pc, #520]	; (801845c <tcp_receive+0x884>)
 8018252:	681a      	ldr	r2, [r3, #0]
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018258:	6879      	ldr	r1, [r7, #4]
 801825a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801825c:	440b      	add	r3, r1
 801825e:	1ad3      	subs	r3, r2, r3
 8018260:	3301      	adds	r3, #1
 8018262:	2b00      	cmp	r3, #0
 8018264:	f300 841e 	bgt.w	8018aa4 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8018268:	687b      	ldr	r3, [r7, #4]
 801826a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801826c:	4b7b      	ldr	r3, [pc, #492]	; (801845c <tcp_receive+0x884>)
 801826e:	681b      	ldr	r3, [r3, #0]
 8018270:	429a      	cmp	r2, r3
 8018272:	f040 829a 	bne.w	80187aa <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8018276:	4b7a      	ldr	r3, [pc, #488]	; (8018460 <tcp_receive+0x888>)
 8018278:	891c      	ldrh	r4, [r3, #8]
 801827a:	4b79      	ldr	r3, [pc, #484]	; (8018460 <tcp_receive+0x888>)
 801827c:	68db      	ldr	r3, [r3, #12]
 801827e:	899b      	ldrh	r3, [r3, #12]
 8018280:	b29b      	uxth	r3, r3
 8018282:	4618      	mov	r0, r3
 8018284:	f7fa fe5e 	bl	8012f44 <lwip_htons>
 8018288:	4603      	mov	r3, r0
 801828a:	b2db      	uxtb	r3, r3
 801828c:	f003 0303 	and.w	r3, r3, #3
 8018290:	2b00      	cmp	r3, #0
 8018292:	d001      	beq.n	8018298 <tcp_receive+0x6c0>
 8018294:	2301      	movs	r3, #1
 8018296:	e000      	b.n	801829a <tcp_receive+0x6c2>
 8018298:	2300      	movs	r3, #0
 801829a:	4423      	add	r3, r4
 801829c:	b29a      	uxth	r2, r3
 801829e:	4b71      	ldr	r3, [pc, #452]	; (8018464 <tcp_receive+0x88c>)
 80182a0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80182a2:	687b      	ldr	r3, [r7, #4]
 80182a4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80182a6:	4b6f      	ldr	r3, [pc, #444]	; (8018464 <tcp_receive+0x88c>)
 80182a8:	881b      	ldrh	r3, [r3, #0]
 80182aa:	429a      	cmp	r2, r3
 80182ac:	d275      	bcs.n	801839a <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80182ae:	4b6c      	ldr	r3, [pc, #432]	; (8018460 <tcp_receive+0x888>)
 80182b0:	68db      	ldr	r3, [r3, #12]
 80182b2:	899b      	ldrh	r3, [r3, #12]
 80182b4:	b29b      	uxth	r3, r3
 80182b6:	4618      	mov	r0, r3
 80182b8:	f7fa fe44 	bl	8012f44 <lwip_htons>
 80182bc:	4603      	mov	r3, r0
 80182be:	b2db      	uxtb	r3, r3
 80182c0:	f003 0301 	and.w	r3, r3, #1
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	d01f      	beq.n	8018308 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80182c8:	4b65      	ldr	r3, [pc, #404]	; (8018460 <tcp_receive+0x888>)
 80182ca:	68db      	ldr	r3, [r3, #12]
 80182cc:	899b      	ldrh	r3, [r3, #12]
 80182ce:	b29b      	uxth	r3, r3
 80182d0:	b21b      	sxth	r3, r3
 80182d2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80182d6:	b21c      	sxth	r4, r3
 80182d8:	4b61      	ldr	r3, [pc, #388]	; (8018460 <tcp_receive+0x888>)
 80182da:	68db      	ldr	r3, [r3, #12]
 80182dc:	899b      	ldrh	r3, [r3, #12]
 80182de:	b29b      	uxth	r3, r3
 80182e0:	4618      	mov	r0, r3
 80182e2:	f7fa fe2f 	bl	8012f44 <lwip_htons>
 80182e6:	4603      	mov	r3, r0
 80182e8:	b2db      	uxtb	r3, r3
 80182ea:	b29b      	uxth	r3, r3
 80182ec:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80182f0:	b29b      	uxth	r3, r3
 80182f2:	4618      	mov	r0, r3
 80182f4:	f7fa fe26 	bl	8012f44 <lwip_htons>
 80182f8:	4603      	mov	r3, r0
 80182fa:	b21b      	sxth	r3, r3
 80182fc:	4323      	orrs	r3, r4
 80182fe:	b21a      	sxth	r2, r3
 8018300:	4b57      	ldr	r3, [pc, #348]	; (8018460 <tcp_receive+0x888>)
 8018302:	68db      	ldr	r3, [r3, #12]
 8018304:	b292      	uxth	r2, r2
 8018306:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801830c:	4b54      	ldr	r3, [pc, #336]	; (8018460 <tcp_receive+0x888>)
 801830e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8018310:	4b53      	ldr	r3, [pc, #332]	; (8018460 <tcp_receive+0x888>)
 8018312:	68db      	ldr	r3, [r3, #12]
 8018314:	899b      	ldrh	r3, [r3, #12]
 8018316:	b29b      	uxth	r3, r3
 8018318:	4618      	mov	r0, r3
 801831a:	f7fa fe13 	bl	8012f44 <lwip_htons>
 801831e:	4603      	mov	r3, r0
 8018320:	b2db      	uxtb	r3, r3
 8018322:	f003 0302 	and.w	r3, r3, #2
 8018326:	2b00      	cmp	r3, #0
 8018328:	d005      	beq.n	8018336 <tcp_receive+0x75e>
            inseg.len -= 1;
 801832a:	4b4d      	ldr	r3, [pc, #308]	; (8018460 <tcp_receive+0x888>)
 801832c:	891b      	ldrh	r3, [r3, #8]
 801832e:	3b01      	subs	r3, #1
 8018330:	b29a      	uxth	r2, r3
 8018332:	4b4b      	ldr	r3, [pc, #300]	; (8018460 <tcp_receive+0x888>)
 8018334:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8018336:	4b4a      	ldr	r3, [pc, #296]	; (8018460 <tcp_receive+0x888>)
 8018338:	685b      	ldr	r3, [r3, #4]
 801833a:	4a49      	ldr	r2, [pc, #292]	; (8018460 <tcp_receive+0x888>)
 801833c:	8912      	ldrh	r2, [r2, #8]
 801833e:	4611      	mov	r1, r2
 8018340:	4618      	mov	r0, r3
 8018342:	f7fb ffc1 	bl	80142c8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8018346:	4b46      	ldr	r3, [pc, #280]	; (8018460 <tcp_receive+0x888>)
 8018348:	891c      	ldrh	r4, [r3, #8]
 801834a:	4b45      	ldr	r3, [pc, #276]	; (8018460 <tcp_receive+0x888>)
 801834c:	68db      	ldr	r3, [r3, #12]
 801834e:	899b      	ldrh	r3, [r3, #12]
 8018350:	b29b      	uxth	r3, r3
 8018352:	4618      	mov	r0, r3
 8018354:	f7fa fdf6 	bl	8012f44 <lwip_htons>
 8018358:	4603      	mov	r3, r0
 801835a:	b2db      	uxtb	r3, r3
 801835c:	f003 0303 	and.w	r3, r3, #3
 8018360:	2b00      	cmp	r3, #0
 8018362:	d001      	beq.n	8018368 <tcp_receive+0x790>
 8018364:	2301      	movs	r3, #1
 8018366:	e000      	b.n	801836a <tcp_receive+0x792>
 8018368:	2300      	movs	r3, #0
 801836a:	4423      	add	r3, r4
 801836c:	b29a      	uxth	r2, r3
 801836e:	4b3d      	ldr	r3, [pc, #244]	; (8018464 <tcp_receive+0x88c>)
 8018370:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018372:	4b3c      	ldr	r3, [pc, #240]	; (8018464 <tcp_receive+0x88c>)
 8018374:	881b      	ldrh	r3, [r3, #0]
 8018376:	461a      	mov	r2, r3
 8018378:	4b38      	ldr	r3, [pc, #224]	; (801845c <tcp_receive+0x884>)
 801837a:	681b      	ldr	r3, [r3, #0]
 801837c:	441a      	add	r2, r3
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018382:	6879      	ldr	r1, [r7, #4]
 8018384:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018386:	440b      	add	r3, r1
 8018388:	429a      	cmp	r2, r3
 801838a:	d006      	beq.n	801839a <tcp_receive+0x7c2>
 801838c:	4b36      	ldr	r3, [pc, #216]	; (8018468 <tcp_receive+0x890>)
 801838e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8018392:	4936      	ldr	r1, [pc, #216]	; (801846c <tcp_receive+0x894>)
 8018394:	4836      	ldr	r0, [pc, #216]	; (8018470 <tcp_receive+0x898>)
 8018396:	f006 ff09 	bl	801f1ac <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801839e:	2b00      	cmp	r3, #0
 80183a0:	f000 80e7 	beq.w	8018572 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80183a4:	4b2e      	ldr	r3, [pc, #184]	; (8018460 <tcp_receive+0x888>)
 80183a6:	68db      	ldr	r3, [r3, #12]
 80183a8:	899b      	ldrh	r3, [r3, #12]
 80183aa:	b29b      	uxth	r3, r3
 80183ac:	4618      	mov	r0, r3
 80183ae:	f7fa fdc9 	bl	8012f44 <lwip_htons>
 80183b2:	4603      	mov	r3, r0
 80183b4:	b2db      	uxtb	r3, r3
 80183b6:	f003 0301 	and.w	r3, r3, #1
 80183ba:	2b00      	cmp	r3, #0
 80183bc:	d010      	beq.n	80183e0 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80183be:	e00a      	b.n	80183d6 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80183c0:	687b      	ldr	r3, [r7, #4]
 80183c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80183c4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80183c6:	687b      	ldr	r3, [r7, #4]
 80183c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80183ca:	681a      	ldr	r2, [r3, #0]
 80183cc:	687b      	ldr	r3, [r7, #4]
 80183ce:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80183d0:	68f8      	ldr	r0, [r7, #12]
 80183d2:	f7fd fcc8 	bl	8015d66 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80183d6:	687b      	ldr	r3, [r7, #4]
 80183d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80183da:	2b00      	cmp	r3, #0
 80183dc:	d1f0      	bne.n	80183c0 <tcp_receive+0x7e8>
 80183de:	e0c8      	b.n	8018572 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80183e4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80183e6:	e052      	b.n	801848e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80183e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80183ea:	68db      	ldr	r3, [r3, #12]
 80183ec:	899b      	ldrh	r3, [r3, #12]
 80183ee:	b29b      	uxth	r3, r3
 80183f0:	4618      	mov	r0, r3
 80183f2:	f7fa fda7 	bl	8012f44 <lwip_htons>
 80183f6:	4603      	mov	r3, r0
 80183f8:	b2db      	uxtb	r3, r3
 80183fa:	f003 0301 	and.w	r3, r3, #1
 80183fe:	2b00      	cmp	r3, #0
 8018400:	d03d      	beq.n	801847e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8018402:	4b17      	ldr	r3, [pc, #92]	; (8018460 <tcp_receive+0x888>)
 8018404:	68db      	ldr	r3, [r3, #12]
 8018406:	899b      	ldrh	r3, [r3, #12]
 8018408:	b29b      	uxth	r3, r3
 801840a:	4618      	mov	r0, r3
 801840c:	f7fa fd9a 	bl	8012f44 <lwip_htons>
 8018410:	4603      	mov	r3, r0
 8018412:	b2db      	uxtb	r3, r3
 8018414:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8018418:	2b00      	cmp	r3, #0
 801841a:	d130      	bne.n	801847e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801841c:	4b10      	ldr	r3, [pc, #64]	; (8018460 <tcp_receive+0x888>)
 801841e:	68db      	ldr	r3, [r3, #12]
 8018420:	899b      	ldrh	r3, [r3, #12]
 8018422:	b29c      	uxth	r4, r3
 8018424:	2001      	movs	r0, #1
 8018426:	f7fa fd8d 	bl	8012f44 <lwip_htons>
 801842a:	4603      	mov	r3, r0
 801842c:	461a      	mov	r2, r3
 801842e:	4b0c      	ldr	r3, [pc, #48]	; (8018460 <tcp_receive+0x888>)
 8018430:	68db      	ldr	r3, [r3, #12]
 8018432:	4322      	orrs	r2, r4
 8018434:	b292      	uxth	r2, r2
 8018436:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8018438:	4b09      	ldr	r3, [pc, #36]	; (8018460 <tcp_receive+0x888>)
 801843a:	891c      	ldrh	r4, [r3, #8]
 801843c:	4b08      	ldr	r3, [pc, #32]	; (8018460 <tcp_receive+0x888>)
 801843e:	68db      	ldr	r3, [r3, #12]
 8018440:	899b      	ldrh	r3, [r3, #12]
 8018442:	b29b      	uxth	r3, r3
 8018444:	4618      	mov	r0, r3
 8018446:	f7fa fd7d 	bl	8012f44 <lwip_htons>
 801844a:	4603      	mov	r3, r0
 801844c:	b2db      	uxtb	r3, r3
 801844e:	f003 0303 	and.w	r3, r3, #3
 8018452:	2b00      	cmp	r3, #0
 8018454:	d00e      	beq.n	8018474 <tcp_receive+0x89c>
 8018456:	2301      	movs	r3, #1
 8018458:	e00d      	b.n	8018476 <tcp_receive+0x89e>
 801845a:	bf00      	nop
 801845c:	20006e34 	.word	0x20006e34
 8018460:	20006e14 	.word	0x20006e14
 8018464:	20006e3e 	.word	0x20006e3e
 8018468:	0802547c 	.word	0x0802547c
 801846c:	08025824 	.word	0x08025824
 8018470:	080254c8 	.word	0x080254c8
 8018474:	2300      	movs	r3, #0
 8018476:	4423      	add	r3, r4
 8018478:	b29a      	uxth	r2, r3
 801847a:	4b98      	ldr	r3, [pc, #608]	; (80186dc <tcp_receive+0xb04>)
 801847c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801847e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018480:	613b      	str	r3, [r7, #16]
              next = next->next;
 8018482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018484:	681b      	ldr	r3, [r3, #0]
 8018486:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8018488:	6938      	ldr	r0, [r7, #16]
 801848a:	f7fd fc6c 	bl	8015d66 <tcp_seg_free>
            while (next &&
 801848e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018490:	2b00      	cmp	r3, #0
 8018492:	d00e      	beq.n	80184b2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8018494:	4b91      	ldr	r3, [pc, #580]	; (80186dc <tcp_receive+0xb04>)
 8018496:	881b      	ldrh	r3, [r3, #0]
 8018498:	461a      	mov	r2, r3
 801849a:	4b91      	ldr	r3, [pc, #580]	; (80186e0 <tcp_receive+0xb08>)
 801849c:	681b      	ldr	r3, [r3, #0]
 801849e:	441a      	add	r2, r3
 80184a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80184a2:	68db      	ldr	r3, [r3, #12]
 80184a4:	685b      	ldr	r3, [r3, #4]
 80184a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80184a8:	8909      	ldrh	r1, [r1, #8]
 80184aa:	440b      	add	r3, r1
 80184ac:	1ad3      	subs	r3, r2, r3
            while (next &&
 80184ae:	2b00      	cmp	r3, #0
 80184b0:	da9a      	bge.n	80183e8 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80184b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d059      	beq.n	801856c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80184b8:	4b88      	ldr	r3, [pc, #544]	; (80186dc <tcp_receive+0xb04>)
 80184ba:	881b      	ldrh	r3, [r3, #0]
 80184bc:	461a      	mov	r2, r3
 80184be:	4b88      	ldr	r3, [pc, #544]	; (80186e0 <tcp_receive+0xb08>)
 80184c0:	681b      	ldr	r3, [r3, #0]
 80184c2:	441a      	add	r2, r3
 80184c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80184c6:	68db      	ldr	r3, [r3, #12]
 80184c8:	685b      	ldr	r3, [r3, #4]
 80184ca:	1ad3      	subs	r3, r2, r3
            if (next &&
 80184cc:	2b00      	cmp	r3, #0
 80184ce:	dd4d      	ble.n	801856c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80184d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80184d2:	68db      	ldr	r3, [r3, #12]
 80184d4:	685b      	ldr	r3, [r3, #4]
 80184d6:	b29a      	uxth	r2, r3
 80184d8:	4b81      	ldr	r3, [pc, #516]	; (80186e0 <tcp_receive+0xb08>)
 80184da:	681b      	ldr	r3, [r3, #0]
 80184dc:	b29b      	uxth	r3, r3
 80184de:	1ad3      	subs	r3, r2, r3
 80184e0:	b29a      	uxth	r2, r3
 80184e2:	4b80      	ldr	r3, [pc, #512]	; (80186e4 <tcp_receive+0xb0c>)
 80184e4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80184e6:	4b7f      	ldr	r3, [pc, #508]	; (80186e4 <tcp_receive+0xb0c>)
 80184e8:	68db      	ldr	r3, [r3, #12]
 80184ea:	899b      	ldrh	r3, [r3, #12]
 80184ec:	b29b      	uxth	r3, r3
 80184ee:	4618      	mov	r0, r3
 80184f0:	f7fa fd28 	bl	8012f44 <lwip_htons>
 80184f4:	4603      	mov	r3, r0
 80184f6:	b2db      	uxtb	r3, r3
 80184f8:	f003 0302 	and.w	r3, r3, #2
 80184fc:	2b00      	cmp	r3, #0
 80184fe:	d005      	beq.n	801850c <tcp_receive+0x934>
                inseg.len -= 1;
 8018500:	4b78      	ldr	r3, [pc, #480]	; (80186e4 <tcp_receive+0xb0c>)
 8018502:	891b      	ldrh	r3, [r3, #8]
 8018504:	3b01      	subs	r3, #1
 8018506:	b29a      	uxth	r2, r3
 8018508:	4b76      	ldr	r3, [pc, #472]	; (80186e4 <tcp_receive+0xb0c>)
 801850a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801850c:	4b75      	ldr	r3, [pc, #468]	; (80186e4 <tcp_receive+0xb0c>)
 801850e:	685b      	ldr	r3, [r3, #4]
 8018510:	4a74      	ldr	r2, [pc, #464]	; (80186e4 <tcp_receive+0xb0c>)
 8018512:	8912      	ldrh	r2, [r2, #8]
 8018514:	4611      	mov	r1, r2
 8018516:	4618      	mov	r0, r3
 8018518:	f7fb fed6 	bl	80142c8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801851c:	4b71      	ldr	r3, [pc, #452]	; (80186e4 <tcp_receive+0xb0c>)
 801851e:	891c      	ldrh	r4, [r3, #8]
 8018520:	4b70      	ldr	r3, [pc, #448]	; (80186e4 <tcp_receive+0xb0c>)
 8018522:	68db      	ldr	r3, [r3, #12]
 8018524:	899b      	ldrh	r3, [r3, #12]
 8018526:	b29b      	uxth	r3, r3
 8018528:	4618      	mov	r0, r3
 801852a:	f7fa fd0b 	bl	8012f44 <lwip_htons>
 801852e:	4603      	mov	r3, r0
 8018530:	b2db      	uxtb	r3, r3
 8018532:	f003 0303 	and.w	r3, r3, #3
 8018536:	2b00      	cmp	r3, #0
 8018538:	d001      	beq.n	801853e <tcp_receive+0x966>
 801853a:	2301      	movs	r3, #1
 801853c:	e000      	b.n	8018540 <tcp_receive+0x968>
 801853e:	2300      	movs	r3, #0
 8018540:	4423      	add	r3, r4
 8018542:	b29a      	uxth	r2, r3
 8018544:	4b65      	ldr	r3, [pc, #404]	; (80186dc <tcp_receive+0xb04>)
 8018546:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8018548:	4b64      	ldr	r3, [pc, #400]	; (80186dc <tcp_receive+0xb04>)
 801854a:	881b      	ldrh	r3, [r3, #0]
 801854c:	461a      	mov	r2, r3
 801854e:	4b64      	ldr	r3, [pc, #400]	; (80186e0 <tcp_receive+0xb08>)
 8018550:	681b      	ldr	r3, [r3, #0]
 8018552:	441a      	add	r2, r3
 8018554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018556:	68db      	ldr	r3, [r3, #12]
 8018558:	685b      	ldr	r3, [r3, #4]
 801855a:	429a      	cmp	r2, r3
 801855c:	d006      	beq.n	801856c <tcp_receive+0x994>
 801855e:	4b62      	ldr	r3, [pc, #392]	; (80186e8 <tcp_receive+0xb10>)
 8018560:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8018564:	4961      	ldr	r1, [pc, #388]	; (80186ec <tcp_receive+0xb14>)
 8018566:	4862      	ldr	r0, [pc, #392]	; (80186f0 <tcp_receive+0xb18>)
 8018568:	f006 fe20 	bl	801f1ac <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8018570:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8018572:	4b5a      	ldr	r3, [pc, #360]	; (80186dc <tcp_receive+0xb04>)
 8018574:	881b      	ldrh	r3, [r3, #0]
 8018576:	461a      	mov	r2, r3
 8018578:	4b59      	ldr	r3, [pc, #356]	; (80186e0 <tcp_receive+0xb08>)
 801857a:	681b      	ldr	r3, [r3, #0]
 801857c:	441a      	add	r2, r3
 801857e:	687b      	ldr	r3, [r7, #4]
 8018580:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8018586:	4b55      	ldr	r3, [pc, #340]	; (80186dc <tcp_receive+0xb04>)
 8018588:	881b      	ldrh	r3, [r3, #0]
 801858a:	429a      	cmp	r2, r3
 801858c:	d206      	bcs.n	801859c <tcp_receive+0x9c4>
 801858e:	4b56      	ldr	r3, [pc, #344]	; (80186e8 <tcp_receive+0xb10>)
 8018590:	f240 6207 	movw	r2, #1543	; 0x607
 8018594:	4957      	ldr	r1, [pc, #348]	; (80186f4 <tcp_receive+0xb1c>)
 8018596:	4856      	ldr	r0, [pc, #344]	; (80186f0 <tcp_receive+0xb18>)
 8018598:	f006 fe08 	bl	801f1ac <iprintf>
        pcb->rcv_wnd -= tcplen;
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80185a0:	4b4e      	ldr	r3, [pc, #312]	; (80186dc <tcp_receive+0xb04>)
 80185a2:	881b      	ldrh	r3, [r3, #0]
 80185a4:	1ad3      	subs	r3, r2, r3
 80185a6:	b29a      	uxth	r2, r3
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80185ac:	6878      	ldr	r0, [r7, #4]
 80185ae:	f7fc feb5 	bl	801531c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80185b2:	4b4c      	ldr	r3, [pc, #304]	; (80186e4 <tcp_receive+0xb0c>)
 80185b4:	685b      	ldr	r3, [r3, #4]
 80185b6:	891b      	ldrh	r3, [r3, #8]
 80185b8:	2b00      	cmp	r3, #0
 80185ba:	d006      	beq.n	80185ca <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80185bc:	4b49      	ldr	r3, [pc, #292]	; (80186e4 <tcp_receive+0xb0c>)
 80185be:	685b      	ldr	r3, [r3, #4]
 80185c0:	4a4d      	ldr	r2, [pc, #308]	; (80186f8 <tcp_receive+0xb20>)
 80185c2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80185c4:	4b47      	ldr	r3, [pc, #284]	; (80186e4 <tcp_receive+0xb0c>)
 80185c6:	2200      	movs	r2, #0
 80185c8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80185ca:	4b46      	ldr	r3, [pc, #280]	; (80186e4 <tcp_receive+0xb0c>)
 80185cc:	68db      	ldr	r3, [r3, #12]
 80185ce:	899b      	ldrh	r3, [r3, #12]
 80185d0:	b29b      	uxth	r3, r3
 80185d2:	4618      	mov	r0, r3
 80185d4:	f7fa fcb6 	bl	8012f44 <lwip_htons>
 80185d8:	4603      	mov	r3, r0
 80185da:	b2db      	uxtb	r3, r3
 80185dc:	f003 0301 	and.w	r3, r3, #1
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	f000 80b8 	beq.w	8018756 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80185e6:	4b45      	ldr	r3, [pc, #276]	; (80186fc <tcp_receive+0xb24>)
 80185e8:	781b      	ldrb	r3, [r3, #0]
 80185ea:	f043 0320 	orr.w	r3, r3, #32
 80185ee:	b2da      	uxtb	r2, r3
 80185f0:	4b42      	ldr	r3, [pc, #264]	; (80186fc <tcp_receive+0xb24>)
 80185f2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80185f4:	e0af      	b.n	8018756 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80185fa:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018600:	68db      	ldr	r3, [r3, #12]
 8018602:	685b      	ldr	r3, [r3, #4]
 8018604:	4a36      	ldr	r2, [pc, #216]	; (80186e0 <tcp_receive+0xb08>)
 8018606:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8018608:	68bb      	ldr	r3, [r7, #8]
 801860a:	891b      	ldrh	r3, [r3, #8]
 801860c:	461c      	mov	r4, r3
 801860e:	68bb      	ldr	r3, [r7, #8]
 8018610:	68db      	ldr	r3, [r3, #12]
 8018612:	899b      	ldrh	r3, [r3, #12]
 8018614:	b29b      	uxth	r3, r3
 8018616:	4618      	mov	r0, r3
 8018618:	f7fa fc94 	bl	8012f44 <lwip_htons>
 801861c:	4603      	mov	r3, r0
 801861e:	b2db      	uxtb	r3, r3
 8018620:	f003 0303 	and.w	r3, r3, #3
 8018624:	2b00      	cmp	r3, #0
 8018626:	d001      	beq.n	801862c <tcp_receive+0xa54>
 8018628:	2301      	movs	r3, #1
 801862a:	e000      	b.n	801862e <tcp_receive+0xa56>
 801862c:	2300      	movs	r3, #0
 801862e:	191a      	adds	r2, r3, r4
 8018630:	687b      	ldr	r3, [r7, #4]
 8018632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018634:	441a      	add	r2, r3
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801863a:	687b      	ldr	r3, [r7, #4]
 801863c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801863e:	461c      	mov	r4, r3
 8018640:	68bb      	ldr	r3, [r7, #8]
 8018642:	891b      	ldrh	r3, [r3, #8]
 8018644:	461d      	mov	r5, r3
 8018646:	68bb      	ldr	r3, [r7, #8]
 8018648:	68db      	ldr	r3, [r3, #12]
 801864a:	899b      	ldrh	r3, [r3, #12]
 801864c:	b29b      	uxth	r3, r3
 801864e:	4618      	mov	r0, r3
 8018650:	f7fa fc78 	bl	8012f44 <lwip_htons>
 8018654:	4603      	mov	r3, r0
 8018656:	b2db      	uxtb	r3, r3
 8018658:	f003 0303 	and.w	r3, r3, #3
 801865c:	2b00      	cmp	r3, #0
 801865e:	d001      	beq.n	8018664 <tcp_receive+0xa8c>
 8018660:	2301      	movs	r3, #1
 8018662:	e000      	b.n	8018666 <tcp_receive+0xa8e>
 8018664:	2300      	movs	r3, #0
 8018666:	442b      	add	r3, r5
 8018668:	429c      	cmp	r4, r3
 801866a:	d206      	bcs.n	801867a <tcp_receive+0xaa2>
 801866c:	4b1e      	ldr	r3, [pc, #120]	; (80186e8 <tcp_receive+0xb10>)
 801866e:	f240 622b 	movw	r2, #1579	; 0x62b
 8018672:	4923      	ldr	r1, [pc, #140]	; (8018700 <tcp_receive+0xb28>)
 8018674:	481e      	ldr	r0, [pc, #120]	; (80186f0 <tcp_receive+0xb18>)
 8018676:	f006 fd99 	bl	801f1ac <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801867a:	68bb      	ldr	r3, [r7, #8]
 801867c:	891b      	ldrh	r3, [r3, #8]
 801867e:	461c      	mov	r4, r3
 8018680:	68bb      	ldr	r3, [r7, #8]
 8018682:	68db      	ldr	r3, [r3, #12]
 8018684:	899b      	ldrh	r3, [r3, #12]
 8018686:	b29b      	uxth	r3, r3
 8018688:	4618      	mov	r0, r3
 801868a:	f7fa fc5b 	bl	8012f44 <lwip_htons>
 801868e:	4603      	mov	r3, r0
 8018690:	b2db      	uxtb	r3, r3
 8018692:	f003 0303 	and.w	r3, r3, #3
 8018696:	2b00      	cmp	r3, #0
 8018698:	d001      	beq.n	801869e <tcp_receive+0xac6>
 801869a:	2301      	movs	r3, #1
 801869c:	e000      	b.n	80186a0 <tcp_receive+0xac8>
 801869e:	2300      	movs	r3, #0
 80186a0:	1919      	adds	r1, r3, r4
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80186a6:	b28b      	uxth	r3, r1
 80186a8:	1ad3      	subs	r3, r2, r3
 80186aa:	b29a      	uxth	r2, r3
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80186b0:	6878      	ldr	r0, [r7, #4]
 80186b2:	f7fc fe33 	bl	801531c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80186b6:	68bb      	ldr	r3, [r7, #8]
 80186b8:	685b      	ldr	r3, [r3, #4]
 80186ba:	891b      	ldrh	r3, [r3, #8]
 80186bc:	2b00      	cmp	r3, #0
 80186be:	d028      	beq.n	8018712 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80186c0:	4b0d      	ldr	r3, [pc, #52]	; (80186f8 <tcp_receive+0xb20>)
 80186c2:	681b      	ldr	r3, [r3, #0]
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	d01d      	beq.n	8018704 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80186c8:	4b0b      	ldr	r3, [pc, #44]	; (80186f8 <tcp_receive+0xb20>)
 80186ca:	681a      	ldr	r2, [r3, #0]
 80186cc:	68bb      	ldr	r3, [r7, #8]
 80186ce:	685b      	ldr	r3, [r3, #4]
 80186d0:	4619      	mov	r1, r3
 80186d2:	4610      	mov	r0, r2
 80186d4:	f7fc f84c 	bl	8014770 <pbuf_cat>
 80186d8:	e018      	b.n	801870c <tcp_receive+0xb34>
 80186da:	bf00      	nop
 80186dc:	20006e3e 	.word	0x20006e3e
 80186e0:	20006e34 	.word	0x20006e34
 80186e4:	20006e14 	.word	0x20006e14
 80186e8:	0802547c 	.word	0x0802547c
 80186ec:	0802585c 	.word	0x0802585c
 80186f0:	080254c8 	.word	0x080254c8
 80186f4:	08025898 	.word	0x08025898
 80186f8:	20006e44 	.word	0x20006e44
 80186fc:	20006e41 	.word	0x20006e41
 8018700:	080258b8 	.word	0x080258b8
            } else {
              recv_data = cseg->p;
 8018704:	68bb      	ldr	r3, [r7, #8]
 8018706:	685b      	ldr	r3, [r3, #4]
 8018708:	4a70      	ldr	r2, [pc, #448]	; (80188cc <tcp_receive+0xcf4>)
 801870a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801870c:	68bb      	ldr	r3, [r7, #8]
 801870e:	2200      	movs	r2, #0
 8018710:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8018712:	68bb      	ldr	r3, [r7, #8]
 8018714:	68db      	ldr	r3, [r3, #12]
 8018716:	899b      	ldrh	r3, [r3, #12]
 8018718:	b29b      	uxth	r3, r3
 801871a:	4618      	mov	r0, r3
 801871c:	f7fa fc12 	bl	8012f44 <lwip_htons>
 8018720:	4603      	mov	r3, r0
 8018722:	b2db      	uxtb	r3, r3
 8018724:	f003 0301 	and.w	r3, r3, #1
 8018728:	2b00      	cmp	r3, #0
 801872a:	d00d      	beq.n	8018748 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801872c:	4b68      	ldr	r3, [pc, #416]	; (80188d0 <tcp_receive+0xcf8>)
 801872e:	781b      	ldrb	r3, [r3, #0]
 8018730:	f043 0320 	orr.w	r3, r3, #32
 8018734:	b2da      	uxtb	r2, r3
 8018736:	4b66      	ldr	r3, [pc, #408]	; (80188d0 <tcp_receive+0xcf8>)
 8018738:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801873a:	687b      	ldr	r3, [r7, #4]
 801873c:	7d1b      	ldrb	r3, [r3, #20]
 801873e:	2b04      	cmp	r3, #4
 8018740:	d102      	bne.n	8018748 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	2207      	movs	r2, #7
 8018746:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8018748:	68bb      	ldr	r3, [r7, #8]
 801874a:	681a      	ldr	r2, [r3, #0]
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8018750:	68b8      	ldr	r0, [r7, #8]
 8018752:	f7fd fb08 	bl	8015d66 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801875a:	2b00      	cmp	r3, #0
 801875c:	d008      	beq.n	8018770 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801875e:	687b      	ldr	r3, [r7, #4]
 8018760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018762:	68db      	ldr	r3, [r3, #12]
 8018764:	685a      	ldr	r2, [r3, #4]
 8018766:	687b      	ldr	r3, [r7, #4]
 8018768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801876a:	429a      	cmp	r2, r3
 801876c:	f43f af43 	beq.w	80185f6 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	8b5b      	ldrh	r3, [r3, #26]
 8018774:	f003 0301 	and.w	r3, r3, #1
 8018778:	2b00      	cmp	r3, #0
 801877a:	d00e      	beq.n	801879a <tcp_receive+0xbc2>
 801877c:	687b      	ldr	r3, [r7, #4]
 801877e:	8b5b      	ldrh	r3, [r3, #26]
 8018780:	f023 0301 	bic.w	r3, r3, #1
 8018784:	b29a      	uxth	r2, r3
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	835a      	strh	r2, [r3, #26]
 801878a:	687b      	ldr	r3, [r7, #4]
 801878c:	8b5b      	ldrh	r3, [r3, #26]
 801878e:	f043 0302 	orr.w	r3, r3, #2
 8018792:	b29a      	uxth	r2, r3
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8018798:	e188      	b.n	8018aac <tcp_receive+0xed4>
        tcp_ack(pcb);
 801879a:	687b      	ldr	r3, [r7, #4]
 801879c:	8b5b      	ldrh	r3, [r3, #26]
 801879e:	f043 0301 	orr.w	r3, r3, #1
 80187a2:	b29a      	uxth	r2, r3
 80187a4:	687b      	ldr	r3, [r7, #4]
 80187a6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80187a8:	e180      	b.n	8018aac <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80187aa:	687b      	ldr	r3, [r7, #4]
 80187ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80187ae:	2b00      	cmp	r3, #0
 80187b0:	d106      	bne.n	80187c0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80187b2:	4848      	ldr	r0, [pc, #288]	; (80188d4 <tcp_receive+0xcfc>)
 80187b4:	f7fd faf0 	bl	8015d98 <tcp_seg_copy>
 80187b8:	4602      	mov	r2, r0
 80187ba:	687b      	ldr	r3, [r7, #4]
 80187bc:	675a      	str	r2, [r3, #116]	; 0x74
 80187be:	e16d      	b.n	8018a9c <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80187c0:	2300      	movs	r3, #0
 80187c2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80187c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80187ca:	e157      	b.n	8018a7c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80187cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80187ce:	68db      	ldr	r3, [r3, #12]
 80187d0:	685a      	ldr	r2, [r3, #4]
 80187d2:	4b41      	ldr	r3, [pc, #260]	; (80188d8 <tcp_receive+0xd00>)
 80187d4:	681b      	ldr	r3, [r3, #0]
 80187d6:	429a      	cmp	r2, r3
 80187d8:	d11d      	bne.n	8018816 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80187da:	4b3e      	ldr	r3, [pc, #248]	; (80188d4 <tcp_receive+0xcfc>)
 80187dc:	891a      	ldrh	r2, [r3, #8]
 80187de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80187e0:	891b      	ldrh	r3, [r3, #8]
 80187e2:	429a      	cmp	r2, r3
 80187e4:	f240 814f 	bls.w	8018a86 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80187e8:	483a      	ldr	r0, [pc, #232]	; (80188d4 <tcp_receive+0xcfc>)
 80187ea:	f7fd fad5 	bl	8015d98 <tcp_seg_copy>
 80187ee:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80187f0:	697b      	ldr	r3, [r7, #20]
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	f000 8149 	beq.w	8018a8a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 80187f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80187fa:	2b00      	cmp	r3, #0
 80187fc:	d003      	beq.n	8018806 <tcp_receive+0xc2e>
                    prev->next = cseg;
 80187fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018800:	697a      	ldr	r2, [r7, #20]
 8018802:	601a      	str	r2, [r3, #0]
 8018804:	e002      	b.n	801880c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8018806:	687b      	ldr	r3, [r7, #4]
 8018808:	697a      	ldr	r2, [r7, #20]
 801880a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801880c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801880e:	6978      	ldr	r0, [r7, #20]
 8018810:	f7ff f8de 	bl	80179d0 <tcp_oos_insert_segment>
                }
                break;
 8018814:	e139      	b.n	8018a8a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8018816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018818:	2b00      	cmp	r3, #0
 801881a:	d117      	bne.n	801884c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801881c:	4b2e      	ldr	r3, [pc, #184]	; (80188d8 <tcp_receive+0xd00>)
 801881e:	681a      	ldr	r2, [r3, #0]
 8018820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018822:	68db      	ldr	r3, [r3, #12]
 8018824:	685b      	ldr	r3, [r3, #4]
 8018826:	1ad3      	subs	r3, r2, r3
 8018828:	2b00      	cmp	r3, #0
 801882a:	da57      	bge.n	80188dc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801882c:	4829      	ldr	r0, [pc, #164]	; (80188d4 <tcp_receive+0xcfc>)
 801882e:	f7fd fab3 	bl	8015d98 <tcp_seg_copy>
 8018832:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8018834:	69bb      	ldr	r3, [r7, #24]
 8018836:	2b00      	cmp	r3, #0
 8018838:	f000 8129 	beq.w	8018a8e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 801883c:	687b      	ldr	r3, [r7, #4]
 801883e:	69ba      	ldr	r2, [r7, #24]
 8018840:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8018842:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8018844:	69b8      	ldr	r0, [r7, #24]
 8018846:	f7ff f8c3 	bl	80179d0 <tcp_oos_insert_segment>
                  }
                  break;
 801884a:	e120      	b.n	8018a8e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801884c:	4b22      	ldr	r3, [pc, #136]	; (80188d8 <tcp_receive+0xd00>)
 801884e:	681a      	ldr	r2, [r3, #0]
 8018850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018852:	68db      	ldr	r3, [r3, #12]
 8018854:	685b      	ldr	r3, [r3, #4]
 8018856:	1ad3      	subs	r3, r2, r3
 8018858:	3b01      	subs	r3, #1
 801885a:	2b00      	cmp	r3, #0
 801885c:	db3e      	blt.n	80188dc <tcp_receive+0xd04>
 801885e:	4b1e      	ldr	r3, [pc, #120]	; (80188d8 <tcp_receive+0xd00>)
 8018860:	681a      	ldr	r2, [r3, #0]
 8018862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018864:	68db      	ldr	r3, [r3, #12]
 8018866:	685b      	ldr	r3, [r3, #4]
 8018868:	1ad3      	subs	r3, r2, r3
 801886a:	3301      	adds	r3, #1
 801886c:	2b00      	cmp	r3, #0
 801886e:	dc35      	bgt.n	80188dc <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8018870:	4818      	ldr	r0, [pc, #96]	; (80188d4 <tcp_receive+0xcfc>)
 8018872:	f7fd fa91 	bl	8015d98 <tcp_seg_copy>
 8018876:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8018878:	69fb      	ldr	r3, [r7, #28]
 801887a:	2b00      	cmp	r3, #0
 801887c:	f000 8109 	beq.w	8018a92 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8018880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018882:	68db      	ldr	r3, [r3, #12]
 8018884:	685b      	ldr	r3, [r3, #4]
 8018886:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018888:	8912      	ldrh	r2, [r2, #8]
 801888a:	441a      	add	r2, r3
 801888c:	4b12      	ldr	r3, [pc, #72]	; (80188d8 <tcp_receive+0xd00>)
 801888e:	681b      	ldr	r3, [r3, #0]
 8018890:	1ad3      	subs	r3, r2, r3
 8018892:	2b00      	cmp	r3, #0
 8018894:	dd12      	ble.n	80188bc <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8018896:	4b10      	ldr	r3, [pc, #64]	; (80188d8 <tcp_receive+0xd00>)
 8018898:	681b      	ldr	r3, [r3, #0]
 801889a:	b29a      	uxth	r2, r3
 801889c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801889e:	68db      	ldr	r3, [r3, #12]
 80188a0:	685b      	ldr	r3, [r3, #4]
 80188a2:	b29b      	uxth	r3, r3
 80188a4:	1ad3      	subs	r3, r2, r3
 80188a6:	b29a      	uxth	r2, r3
 80188a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188aa:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80188ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188ae:	685a      	ldr	r2, [r3, #4]
 80188b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188b2:	891b      	ldrh	r3, [r3, #8]
 80188b4:	4619      	mov	r1, r3
 80188b6:	4610      	mov	r0, r2
 80188b8:	f7fb fd06 	bl	80142c8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80188bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188be:	69fa      	ldr	r2, [r7, #28]
 80188c0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80188c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80188c4:	69f8      	ldr	r0, [r7, #28]
 80188c6:	f7ff f883 	bl	80179d0 <tcp_oos_insert_segment>
                  }
                  break;
 80188ca:	e0e2      	b.n	8018a92 <tcp_receive+0xeba>
 80188cc:	20006e44 	.word	0x20006e44
 80188d0:	20006e41 	.word	0x20006e41
 80188d4:	20006e14 	.word	0x20006e14
 80188d8:	20006e34 	.word	0x20006e34
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80188dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188de:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80188e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188e2:	681b      	ldr	r3, [r3, #0]
 80188e4:	2b00      	cmp	r3, #0
 80188e6:	f040 80c6 	bne.w	8018a76 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80188ea:	4b80      	ldr	r3, [pc, #512]	; (8018aec <tcp_receive+0xf14>)
 80188ec:	681a      	ldr	r2, [r3, #0]
 80188ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188f0:	68db      	ldr	r3, [r3, #12]
 80188f2:	685b      	ldr	r3, [r3, #4]
 80188f4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80188f6:	2b00      	cmp	r3, #0
 80188f8:	f340 80bd 	ble.w	8018a76 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80188fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80188fe:	68db      	ldr	r3, [r3, #12]
 8018900:	899b      	ldrh	r3, [r3, #12]
 8018902:	b29b      	uxth	r3, r3
 8018904:	4618      	mov	r0, r3
 8018906:	f7fa fb1d 	bl	8012f44 <lwip_htons>
 801890a:	4603      	mov	r3, r0
 801890c:	b2db      	uxtb	r3, r3
 801890e:	f003 0301 	and.w	r3, r3, #1
 8018912:	2b00      	cmp	r3, #0
 8018914:	f040 80bf 	bne.w	8018a96 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8018918:	4875      	ldr	r0, [pc, #468]	; (8018af0 <tcp_receive+0xf18>)
 801891a:	f7fd fa3d 	bl	8015d98 <tcp_seg_copy>
 801891e:	4602      	mov	r2, r0
 8018920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018922:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8018924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018926:	681b      	ldr	r3, [r3, #0]
 8018928:	2b00      	cmp	r3, #0
 801892a:	f000 80b6 	beq.w	8018a9a <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801892e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018930:	68db      	ldr	r3, [r3, #12]
 8018932:	685b      	ldr	r3, [r3, #4]
 8018934:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8018936:	8912      	ldrh	r2, [r2, #8]
 8018938:	441a      	add	r2, r3
 801893a:	4b6c      	ldr	r3, [pc, #432]	; (8018aec <tcp_receive+0xf14>)
 801893c:	681b      	ldr	r3, [r3, #0]
 801893e:	1ad3      	subs	r3, r2, r3
 8018940:	2b00      	cmp	r3, #0
 8018942:	dd12      	ble.n	801896a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8018944:	4b69      	ldr	r3, [pc, #420]	; (8018aec <tcp_receive+0xf14>)
 8018946:	681b      	ldr	r3, [r3, #0]
 8018948:	b29a      	uxth	r2, r3
 801894a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801894c:	68db      	ldr	r3, [r3, #12]
 801894e:	685b      	ldr	r3, [r3, #4]
 8018950:	b29b      	uxth	r3, r3
 8018952:	1ad3      	subs	r3, r2, r3
 8018954:	b29a      	uxth	r2, r3
 8018956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018958:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801895a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801895c:	685a      	ldr	r2, [r3, #4]
 801895e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018960:	891b      	ldrh	r3, [r3, #8]
 8018962:	4619      	mov	r1, r3
 8018964:	4610      	mov	r0, r2
 8018966:	f7fb fcaf 	bl	80142c8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801896a:	4b62      	ldr	r3, [pc, #392]	; (8018af4 <tcp_receive+0xf1c>)
 801896c:	881b      	ldrh	r3, [r3, #0]
 801896e:	461a      	mov	r2, r3
 8018970:	4b5e      	ldr	r3, [pc, #376]	; (8018aec <tcp_receive+0xf14>)
 8018972:	681b      	ldr	r3, [r3, #0]
 8018974:	441a      	add	r2, r3
 8018976:	687b      	ldr	r3, [r7, #4]
 8018978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801897a:	6879      	ldr	r1, [r7, #4]
 801897c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801897e:	440b      	add	r3, r1
 8018980:	1ad3      	subs	r3, r2, r3
 8018982:	2b00      	cmp	r3, #0
 8018984:	f340 8089 	ble.w	8018a9a <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8018988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801898a:	681b      	ldr	r3, [r3, #0]
 801898c:	68db      	ldr	r3, [r3, #12]
 801898e:	899b      	ldrh	r3, [r3, #12]
 8018990:	b29b      	uxth	r3, r3
 8018992:	4618      	mov	r0, r3
 8018994:	f7fa fad6 	bl	8012f44 <lwip_htons>
 8018998:	4603      	mov	r3, r0
 801899a:	b2db      	uxtb	r3, r3
 801899c:	f003 0301 	and.w	r3, r3, #1
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	d022      	beq.n	80189ea <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80189a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189a6:	681b      	ldr	r3, [r3, #0]
 80189a8:	68db      	ldr	r3, [r3, #12]
 80189aa:	899b      	ldrh	r3, [r3, #12]
 80189ac:	b29b      	uxth	r3, r3
 80189ae:	b21b      	sxth	r3, r3
 80189b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80189b4:	b21c      	sxth	r4, r3
 80189b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189b8:	681b      	ldr	r3, [r3, #0]
 80189ba:	68db      	ldr	r3, [r3, #12]
 80189bc:	899b      	ldrh	r3, [r3, #12]
 80189be:	b29b      	uxth	r3, r3
 80189c0:	4618      	mov	r0, r3
 80189c2:	f7fa fabf 	bl	8012f44 <lwip_htons>
 80189c6:	4603      	mov	r3, r0
 80189c8:	b2db      	uxtb	r3, r3
 80189ca:	b29b      	uxth	r3, r3
 80189cc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80189d0:	b29b      	uxth	r3, r3
 80189d2:	4618      	mov	r0, r3
 80189d4:	f7fa fab6 	bl	8012f44 <lwip_htons>
 80189d8:	4603      	mov	r3, r0
 80189da:	b21b      	sxth	r3, r3
 80189dc:	4323      	orrs	r3, r4
 80189de:	b21a      	sxth	r2, r3
 80189e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80189e2:	681b      	ldr	r3, [r3, #0]
 80189e4:	68db      	ldr	r3, [r3, #12]
 80189e6:	b292      	uxth	r2, r2
 80189e8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80189ea:	687b      	ldr	r3, [r7, #4]
 80189ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80189ee:	b29a      	uxth	r2, r3
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80189f4:	4413      	add	r3, r2
 80189f6:	b299      	uxth	r1, r3
 80189f8:	4b3c      	ldr	r3, [pc, #240]	; (8018aec <tcp_receive+0xf14>)
 80189fa:	681b      	ldr	r3, [r3, #0]
 80189fc:	b29a      	uxth	r2, r3
 80189fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a00:	681b      	ldr	r3, [r3, #0]
 8018a02:	1a8a      	subs	r2, r1, r2
 8018a04:	b292      	uxth	r2, r2
 8018a06:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8018a08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a0a:	681b      	ldr	r3, [r3, #0]
 8018a0c:	685a      	ldr	r2, [r3, #4]
 8018a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	891b      	ldrh	r3, [r3, #8]
 8018a14:	4619      	mov	r1, r3
 8018a16:	4610      	mov	r0, r2
 8018a18:	f7fb fc56 	bl	80142c8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8018a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a1e:	681b      	ldr	r3, [r3, #0]
 8018a20:	891c      	ldrh	r4, [r3, #8]
 8018a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	68db      	ldr	r3, [r3, #12]
 8018a28:	899b      	ldrh	r3, [r3, #12]
 8018a2a:	b29b      	uxth	r3, r3
 8018a2c:	4618      	mov	r0, r3
 8018a2e:	f7fa fa89 	bl	8012f44 <lwip_htons>
 8018a32:	4603      	mov	r3, r0
 8018a34:	b2db      	uxtb	r3, r3
 8018a36:	f003 0303 	and.w	r3, r3, #3
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d001      	beq.n	8018a42 <tcp_receive+0xe6a>
 8018a3e:	2301      	movs	r3, #1
 8018a40:	e000      	b.n	8018a44 <tcp_receive+0xe6c>
 8018a42:	2300      	movs	r3, #0
 8018a44:	4423      	add	r3, r4
 8018a46:	b29a      	uxth	r2, r3
 8018a48:	4b2a      	ldr	r3, [pc, #168]	; (8018af4 <tcp_receive+0xf1c>)
 8018a4a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8018a4c:	4b29      	ldr	r3, [pc, #164]	; (8018af4 <tcp_receive+0xf1c>)
 8018a4e:	881b      	ldrh	r3, [r3, #0]
 8018a50:	461a      	mov	r2, r3
 8018a52:	4b26      	ldr	r3, [pc, #152]	; (8018aec <tcp_receive+0xf14>)
 8018a54:	681b      	ldr	r3, [r3, #0]
 8018a56:	441a      	add	r2, r3
 8018a58:	687b      	ldr	r3, [r7, #4]
 8018a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018a5c:	6879      	ldr	r1, [r7, #4]
 8018a5e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018a60:	440b      	add	r3, r1
 8018a62:	429a      	cmp	r2, r3
 8018a64:	d019      	beq.n	8018a9a <tcp_receive+0xec2>
 8018a66:	4b24      	ldr	r3, [pc, #144]	; (8018af8 <tcp_receive+0xf20>)
 8018a68:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8018a6c:	4923      	ldr	r1, [pc, #140]	; (8018afc <tcp_receive+0xf24>)
 8018a6e:	4824      	ldr	r0, [pc, #144]	; (8018b00 <tcp_receive+0xf28>)
 8018a70:	f006 fb9c 	bl	801f1ac <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8018a74:	e011      	b.n	8018a9a <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8018a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a78:	681b      	ldr	r3, [r3, #0]
 8018a7a:	63bb      	str	r3, [r7, #56]	; 0x38
 8018a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018a7e:	2b00      	cmp	r3, #0
 8018a80:	f47f aea4 	bne.w	80187cc <tcp_receive+0xbf4>
 8018a84:	e00a      	b.n	8018a9c <tcp_receive+0xec4>
                break;
 8018a86:	bf00      	nop
 8018a88:	e008      	b.n	8018a9c <tcp_receive+0xec4>
                break;
 8018a8a:	bf00      	nop
 8018a8c:	e006      	b.n	8018a9c <tcp_receive+0xec4>
                  break;
 8018a8e:	bf00      	nop
 8018a90:	e004      	b.n	8018a9c <tcp_receive+0xec4>
                  break;
 8018a92:	bf00      	nop
 8018a94:	e002      	b.n	8018a9c <tcp_receive+0xec4>
                  break;
 8018a96:	bf00      	nop
 8018a98:	e000      	b.n	8018a9c <tcp_receive+0xec4>
                break;
 8018a9a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8018a9c:	6878      	ldr	r0, [r7, #4]
 8018a9e:	f001 fe8b 	bl	801a7b8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8018aa2:	e003      	b.n	8018aac <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8018aa4:	6878      	ldr	r0, [r7, #4]
 8018aa6:	f001 fe87 	bl	801a7b8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8018aaa:	e01a      	b.n	8018ae2 <tcp_receive+0xf0a>
 8018aac:	e019      	b.n	8018ae2 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8018aae:	4b0f      	ldr	r3, [pc, #60]	; (8018aec <tcp_receive+0xf14>)
 8018ab0:	681a      	ldr	r2, [r3, #0]
 8018ab2:	687b      	ldr	r3, [r7, #4]
 8018ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ab6:	1ad3      	subs	r3, r2, r3
 8018ab8:	2b00      	cmp	r3, #0
 8018aba:	db0a      	blt.n	8018ad2 <tcp_receive+0xefa>
 8018abc:	4b0b      	ldr	r3, [pc, #44]	; (8018aec <tcp_receive+0xf14>)
 8018abe:	681a      	ldr	r2, [r3, #0]
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018ac4:	6879      	ldr	r1, [r7, #4]
 8018ac6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8018ac8:	440b      	add	r3, r1
 8018aca:	1ad3      	subs	r3, r2, r3
 8018acc:	3301      	adds	r3, #1
 8018ace:	2b00      	cmp	r3, #0
 8018ad0:	dd07      	ble.n	8018ae2 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8018ad2:	687b      	ldr	r3, [r7, #4]
 8018ad4:	8b5b      	ldrh	r3, [r3, #26]
 8018ad6:	f043 0302 	orr.w	r3, r3, #2
 8018ada:	b29a      	uxth	r2, r3
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8018ae0:	e7ff      	b.n	8018ae2 <tcp_receive+0xf0a>
 8018ae2:	bf00      	nop
 8018ae4:	3750      	adds	r7, #80	; 0x50
 8018ae6:	46bd      	mov	sp, r7
 8018ae8:	bdb0      	pop	{r4, r5, r7, pc}
 8018aea:	bf00      	nop
 8018aec:	20006e34 	.word	0x20006e34
 8018af0:	20006e14 	.word	0x20006e14
 8018af4:	20006e3e 	.word	0x20006e3e
 8018af8:	0802547c 	.word	0x0802547c
 8018afc:	08025824 	.word	0x08025824
 8018b00:	080254c8 	.word	0x080254c8

08018b04 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8018b04:	b480      	push	{r7}
 8018b06:	b083      	sub	sp, #12
 8018b08:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8018b0a:	4b15      	ldr	r3, [pc, #84]	; (8018b60 <tcp_get_next_optbyte+0x5c>)
 8018b0c:	881b      	ldrh	r3, [r3, #0]
 8018b0e:	1c5a      	adds	r2, r3, #1
 8018b10:	b291      	uxth	r1, r2
 8018b12:	4a13      	ldr	r2, [pc, #76]	; (8018b60 <tcp_get_next_optbyte+0x5c>)
 8018b14:	8011      	strh	r1, [r2, #0]
 8018b16:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8018b18:	4b12      	ldr	r3, [pc, #72]	; (8018b64 <tcp_get_next_optbyte+0x60>)
 8018b1a:	681b      	ldr	r3, [r3, #0]
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	d004      	beq.n	8018b2a <tcp_get_next_optbyte+0x26>
 8018b20:	4b11      	ldr	r3, [pc, #68]	; (8018b68 <tcp_get_next_optbyte+0x64>)
 8018b22:	881b      	ldrh	r3, [r3, #0]
 8018b24:	88fa      	ldrh	r2, [r7, #6]
 8018b26:	429a      	cmp	r2, r3
 8018b28:	d208      	bcs.n	8018b3c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8018b2a:	4b10      	ldr	r3, [pc, #64]	; (8018b6c <tcp_get_next_optbyte+0x68>)
 8018b2c:	681b      	ldr	r3, [r3, #0]
 8018b2e:	3314      	adds	r3, #20
 8018b30:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8018b32:	88fb      	ldrh	r3, [r7, #6]
 8018b34:	683a      	ldr	r2, [r7, #0]
 8018b36:	4413      	add	r3, r2
 8018b38:	781b      	ldrb	r3, [r3, #0]
 8018b3a:	e00b      	b.n	8018b54 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8018b3c:	88fb      	ldrh	r3, [r7, #6]
 8018b3e:	b2da      	uxtb	r2, r3
 8018b40:	4b09      	ldr	r3, [pc, #36]	; (8018b68 <tcp_get_next_optbyte+0x64>)
 8018b42:	881b      	ldrh	r3, [r3, #0]
 8018b44:	b2db      	uxtb	r3, r3
 8018b46:	1ad3      	subs	r3, r2, r3
 8018b48:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8018b4a:	4b06      	ldr	r3, [pc, #24]	; (8018b64 <tcp_get_next_optbyte+0x60>)
 8018b4c:	681a      	ldr	r2, [r3, #0]
 8018b4e:	797b      	ldrb	r3, [r7, #5]
 8018b50:	4413      	add	r3, r2
 8018b52:	781b      	ldrb	r3, [r3, #0]
  }
}
 8018b54:	4618      	mov	r0, r3
 8018b56:	370c      	adds	r7, #12
 8018b58:	46bd      	mov	sp, r7
 8018b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b5e:	4770      	bx	lr
 8018b60:	20006e30 	.word	0x20006e30
 8018b64:	20006e2c 	.word	0x20006e2c
 8018b68:	20006e2a 	.word	0x20006e2a
 8018b6c:	20006e24 	.word	0x20006e24

08018b70 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8018b70:	b580      	push	{r7, lr}
 8018b72:	b084      	sub	sp, #16
 8018b74:	af00      	add	r7, sp, #0
 8018b76:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8018b78:	687b      	ldr	r3, [r7, #4]
 8018b7a:	2b00      	cmp	r3, #0
 8018b7c:	d106      	bne.n	8018b8c <tcp_parseopt+0x1c>
 8018b7e:	4b32      	ldr	r3, [pc, #200]	; (8018c48 <tcp_parseopt+0xd8>)
 8018b80:	f240 727d 	movw	r2, #1917	; 0x77d
 8018b84:	4931      	ldr	r1, [pc, #196]	; (8018c4c <tcp_parseopt+0xdc>)
 8018b86:	4832      	ldr	r0, [pc, #200]	; (8018c50 <tcp_parseopt+0xe0>)
 8018b88:	f006 fb10 	bl	801f1ac <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8018b8c:	4b31      	ldr	r3, [pc, #196]	; (8018c54 <tcp_parseopt+0xe4>)
 8018b8e:	881b      	ldrh	r3, [r3, #0]
 8018b90:	2b00      	cmp	r3, #0
 8018b92:	d055      	beq.n	8018c40 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018b94:	4b30      	ldr	r3, [pc, #192]	; (8018c58 <tcp_parseopt+0xe8>)
 8018b96:	2200      	movs	r2, #0
 8018b98:	801a      	strh	r2, [r3, #0]
 8018b9a:	e045      	b.n	8018c28 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8018b9c:	f7ff ffb2 	bl	8018b04 <tcp_get_next_optbyte>
 8018ba0:	4603      	mov	r3, r0
 8018ba2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8018ba4:	7bfb      	ldrb	r3, [r7, #15]
 8018ba6:	2b02      	cmp	r3, #2
 8018ba8:	d006      	beq.n	8018bb8 <tcp_parseopt+0x48>
 8018baa:	2b02      	cmp	r3, #2
 8018bac:	dc2b      	bgt.n	8018c06 <tcp_parseopt+0x96>
 8018bae:	2b00      	cmp	r3, #0
 8018bb0:	d041      	beq.n	8018c36 <tcp_parseopt+0xc6>
 8018bb2:	2b01      	cmp	r3, #1
 8018bb4:	d127      	bne.n	8018c06 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8018bb6:	e037      	b.n	8018c28 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8018bb8:	f7ff ffa4 	bl	8018b04 <tcp_get_next_optbyte>
 8018bbc:	4603      	mov	r3, r0
 8018bbe:	2b04      	cmp	r3, #4
 8018bc0:	d13b      	bne.n	8018c3a <tcp_parseopt+0xca>
 8018bc2:	4b25      	ldr	r3, [pc, #148]	; (8018c58 <tcp_parseopt+0xe8>)
 8018bc4:	881b      	ldrh	r3, [r3, #0]
 8018bc6:	3301      	adds	r3, #1
 8018bc8:	4a22      	ldr	r2, [pc, #136]	; (8018c54 <tcp_parseopt+0xe4>)
 8018bca:	8812      	ldrh	r2, [r2, #0]
 8018bcc:	4293      	cmp	r3, r2
 8018bce:	da34      	bge.n	8018c3a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8018bd0:	f7ff ff98 	bl	8018b04 <tcp_get_next_optbyte>
 8018bd4:	4603      	mov	r3, r0
 8018bd6:	b29b      	uxth	r3, r3
 8018bd8:	021b      	lsls	r3, r3, #8
 8018bda:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8018bdc:	f7ff ff92 	bl	8018b04 <tcp_get_next_optbyte>
 8018be0:	4603      	mov	r3, r0
 8018be2:	b29a      	uxth	r2, r3
 8018be4:	89bb      	ldrh	r3, [r7, #12]
 8018be6:	4313      	orrs	r3, r2
 8018be8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8018bea:	89bb      	ldrh	r3, [r7, #12]
 8018bec:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8018bf0:	d804      	bhi.n	8018bfc <tcp_parseopt+0x8c>
 8018bf2:	89bb      	ldrh	r3, [r7, #12]
 8018bf4:	2b00      	cmp	r3, #0
 8018bf6:	d001      	beq.n	8018bfc <tcp_parseopt+0x8c>
 8018bf8:	89ba      	ldrh	r2, [r7, #12]
 8018bfa:	e001      	b.n	8018c00 <tcp_parseopt+0x90>
 8018bfc:	f44f 7206 	mov.w	r2, #536	; 0x218
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8018c04:	e010      	b.n	8018c28 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8018c06:	f7ff ff7d 	bl	8018b04 <tcp_get_next_optbyte>
 8018c0a:	4603      	mov	r3, r0
 8018c0c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8018c0e:	7afb      	ldrb	r3, [r7, #11]
 8018c10:	2b01      	cmp	r3, #1
 8018c12:	d914      	bls.n	8018c3e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8018c14:	7afb      	ldrb	r3, [r7, #11]
 8018c16:	b29a      	uxth	r2, r3
 8018c18:	4b0f      	ldr	r3, [pc, #60]	; (8018c58 <tcp_parseopt+0xe8>)
 8018c1a:	881b      	ldrh	r3, [r3, #0]
 8018c1c:	4413      	add	r3, r2
 8018c1e:	b29b      	uxth	r3, r3
 8018c20:	3b02      	subs	r3, #2
 8018c22:	b29a      	uxth	r2, r3
 8018c24:	4b0c      	ldr	r3, [pc, #48]	; (8018c58 <tcp_parseopt+0xe8>)
 8018c26:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8018c28:	4b0b      	ldr	r3, [pc, #44]	; (8018c58 <tcp_parseopt+0xe8>)
 8018c2a:	881a      	ldrh	r2, [r3, #0]
 8018c2c:	4b09      	ldr	r3, [pc, #36]	; (8018c54 <tcp_parseopt+0xe4>)
 8018c2e:	881b      	ldrh	r3, [r3, #0]
 8018c30:	429a      	cmp	r2, r3
 8018c32:	d3b3      	bcc.n	8018b9c <tcp_parseopt+0x2c>
 8018c34:	e004      	b.n	8018c40 <tcp_parseopt+0xd0>
          return;
 8018c36:	bf00      	nop
 8018c38:	e002      	b.n	8018c40 <tcp_parseopt+0xd0>
            return;
 8018c3a:	bf00      	nop
 8018c3c:	e000      	b.n	8018c40 <tcp_parseopt+0xd0>
            return;
 8018c3e:	bf00      	nop
      }
    }
  }
}
 8018c40:	3710      	adds	r7, #16
 8018c42:	46bd      	mov	sp, r7
 8018c44:	bd80      	pop	{r7, pc}
 8018c46:	bf00      	nop
 8018c48:	0802547c 	.word	0x0802547c
 8018c4c:	080258e0 	.word	0x080258e0
 8018c50:	080254c8 	.word	0x080254c8
 8018c54:	20006e28 	.word	0x20006e28
 8018c58:	20006e30 	.word	0x20006e30

08018c5c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8018c5c:	b480      	push	{r7}
 8018c5e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8018c60:	4b05      	ldr	r3, [pc, #20]	; (8018c78 <tcp_trigger_input_pcb_close+0x1c>)
 8018c62:	781b      	ldrb	r3, [r3, #0]
 8018c64:	f043 0310 	orr.w	r3, r3, #16
 8018c68:	b2da      	uxtb	r2, r3
 8018c6a:	4b03      	ldr	r3, [pc, #12]	; (8018c78 <tcp_trigger_input_pcb_close+0x1c>)
 8018c6c:	701a      	strb	r2, [r3, #0]
}
 8018c6e:	bf00      	nop
 8018c70:	46bd      	mov	sp, r7
 8018c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c76:	4770      	bx	lr
 8018c78:	20006e41 	.word	0x20006e41

08018c7c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8018c7c:	b580      	push	{r7, lr}
 8018c7e:	b084      	sub	sp, #16
 8018c80:	af00      	add	r7, sp, #0
 8018c82:	60f8      	str	r0, [r7, #12]
 8018c84:	60b9      	str	r1, [r7, #8]
 8018c86:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8018c88:	68fb      	ldr	r3, [r7, #12]
 8018c8a:	2b00      	cmp	r3, #0
 8018c8c:	d00a      	beq.n	8018ca4 <tcp_route+0x28>
 8018c8e:	68fb      	ldr	r3, [r7, #12]
 8018c90:	7a1b      	ldrb	r3, [r3, #8]
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	d006      	beq.n	8018ca4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8018c96:	68fb      	ldr	r3, [r7, #12]
 8018c98:	7a1b      	ldrb	r3, [r3, #8]
 8018c9a:	4618      	mov	r0, r3
 8018c9c:	f7fb f90c 	bl	8013eb8 <netif_get_by_index>
 8018ca0:	4603      	mov	r3, r0
 8018ca2:	e003      	b.n	8018cac <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8018ca4:	6878      	ldr	r0, [r7, #4]
 8018ca6:	f003 fe35 	bl	801c914 <ip4_route>
 8018caa:	4603      	mov	r3, r0
  }
}
 8018cac:	4618      	mov	r0, r3
 8018cae:	3710      	adds	r7, #16
 8018cb0:	46bd      	mov	sp, r7
 8018cb2:	bd80      	pop	{r7, pc}

08018cb4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8018cb4:	b590      	push	{r4, r7, lr}
 8018cb6:	b087      	sub	sp, #28
 8018cb8:	af00      	add	r7, sp, #0
 8018cba:	60f8      	str	r0, [r7, #12]
 8018cbc:	60b9      	str	r1, [r7, #8]
 8018cbe:	603b      	str	r3, [r7, #0]
 8018cc0:	4613      	mov	r3, r2
 8018cc2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8018cc4:	68fb      	ldr	r3, [r7, #12]
 8018cc6:	2b00      	cmp	r3, #0
 8018cc8:	d105      	bne.n	8018cd6 <tcp_create_segment+0x22>
 8018cca:	4b44      	ldr	r3, [pc, #272]	; (8018ddc <tcp_create_segment+0x128>)
 8018ccc:	22a3      	movs	r2, #163	; 0xa3
 8018cce:	4944      	ldr	r1, [pc, #272]	; (8018de0 <tcp_create_segment+0x12c>)
 8018cd0:	4844      	ldr	r0, [pc, #272]	; (8018de4 <tcp_create_segment+0x130>)
 8018cd2:	f006 fa6b 	bl	801f1ac <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8018cd6:	68bb      	ldr	r3, [r7, #8]
 8018cd8:	2b00      	cmp	r3, #0
 8018cda:	d105      	bne.n	8018ce8 <tcp_create_segment+0x34>
 8018cdc:	4b3f      	ldr	r3, [pc, #252]	; (8018ddc <tcp_create_segment+0x128>)
 8018cde:	22a4      	movs	r2, #164	; 0xa4
 8018ce0:	4941      	ldr	r1, [pc, #260]	; (8018de8 <tcp_create_segment+0x134>)
 8018ce2:	4840      	ldr	r0, [pc, #256]	; (8018de4 <tcp_create_segment+0x130>)
 8018ce4:	f006 fa62 	bl	801f1ac <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018ce8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018cec:	009b      	lsls	r3, r3, #2
 8018cee:	b2db      	uxtb	r3, r3
 8018cf0:	f003 0304 	and.w	r3, r3, #4
 8018cf4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8018cf6:	2003      	movs	r0, #3
 8018cf8:	f7fa fdda 	bl	80138b0 <memp_malloc>
 8018cfc:	6138      	str	r0, [r7, #16]
 8018cfe:	693b      	ldr	r3, [r7, #16]
 8018d00:	2b00      	cmp	r3, #0
 8018d02:	d104      	bne.n	8018d0e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8018d04:	68b8      	ldr	r0, [r7, #8]
 8018d06:	f7fb fc65 	bl	80145d4 <pbuf_free>
    return NULL;
 8018d0a:	2300      	movs	r3, #0
 8018d0c:	e061      	b.n	8018dd2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8018d0e:	693b      	ldr	r3, [r7, #16]
 8018d10:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018d14:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8018d16:	693b      	ldr	r3, [r7, #16]
 8018d18:	2200      	movs	r2, #0
 8018d1a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8018d1c:	693b      	ldr	r3, [r7, #16]
 8018d1e:	68ba      	ldr	r2, [r7, #8]
 8018d20:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8018d22:	68bb      	ldr	r3, [r7, #8]
 8018d24:	891a      	ldrh	r2, [r3, #8]
 8018d26:	7dfb      	ldrb	r3, [r7, #23]
 8018d28:	b29b      	uxth	r3, r3
 8018d2a:	429a      	cmp	r2, r3
 8018d2c:	d205      	bcs.n	8018d3a <tcp_create_segment+0x86>
 8018d2e:	4b2b      	ldr	r3, [pc, #172]	; (8018ddc <tcp_create_segment+0x128>)
 8018d30:	22b0      	movs	r2, #176	; 0xb0
 8018d32:	492e      	ldr	r1, [pc, #184]	; (8018dec <tcp_create_segment+0x138>)
 8018d34:	482b      	ldr	r0, [pc, #172]	; (8018de4 <tcp_create_segment+0x130>)
 8018d36:	f006 fa39 	bl	801f1ac <iprintf>
  seg->len = p->tot_len - optlen;
 8018d3a:	68bb      	ldr	r3, [r7, #8]
 8018d3c:	891a      	ldrh	r2, [r3, #8]
 8018d3e:	7dfb      	ldrb	r3, [r7, #23]
 8018d40:	b29b      	uxth	r3, r3
 8018d42:	1ad3      	subs	r3, r2, r3
 8018d44:	b29a      	uxth	r2, r3
 8018d46:	693b      	ldr	r3, [r7, #16]
 8018d48:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8018d4a:	2114      	movs	r1, #20
 8018d4c:	68b8      	ldr	r0, [r7, #8]
 8018d4e:	f7fb fbab 	bl	80144a8 <pbuf_add_header>
 8018d52:	4603      	mov	r3, r0
 8018d54:	2b00      	cmp	r3, #0
 8018d56:	d004      	beq.n	8018d62 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8018d58:	6938      	ldr	r0, [r7, #16]
 8018d5a:	f7fd f804 	bl	8015d66 <tcp_seg_free>
    return NULL;
 8018d5e:	2300      	movs	r3, #0
 8018d60:	e037      	b.n	8018dd2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8018d62:	693b      	ldr	r3, [r7, #16]
 8018d64:	685b      	ldr	r3, [r3, #4]
 8018d66:	685a      	ldr	r2, [r3, #4]
 8018d68:	693b      	ldr	r3, [r7, #16]
 8018d6a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8018d6c:	68fb      	ldr	r3, [r7, #12]
 8018d6e:	8ada      	ldrh	r2, [r3, #22]
 8018d70:	693b      	ldr	r3, [r7, #16]
 8018d72:	68dc      	ldr	r4, [r3, #12]
 8018d74:	4610      	mov	r0, r2
 8018d76:	f7fa f8e5 	bl	8012f44 <lwip_htons>
 8018d7a:	4603      	mov	r3, r0
 8018d7c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8018d7e:	68fb      	ldr	r3, [r7, #12]
 8018d80:	8b1a      	ldrh	r2, [r3, #24]
 8018d82:	693b      	ldr	r3, [r7, #16]
 8018d84:	68dc      	ldr	r4, [r3, #12]
 8018d86:	4610      	mov	r0, r2
 8018d88:	f7fa f8dc 	bl	8012f44 <lwip_htons>
 8018d8c:	4603      	mov	r3, r0
 8018d8e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8018d90:	693b      	ldr	r3, [r7, #16]
 8018d92:	68dc      	ldr	r4, [r3, #12]
 8018d94:	6838      	ldr	r0, [r7, #0]
 8018d96:	f7fa f8ea 	bl	8012f6e <lwip_htonl>
 8018d9a:	4603      	mov	r3, r0
 8018d9c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8018d9e:	7dfb      	ldrb	r3, [r7, #23]
 8018da0:	089b      	lsrs	r3, r3, #2
 8018da2:	b2db      	uxtb	r3, r3
 8018da4:	b29b      	uxth	r3, r3
 8018da6:	3305      	adds	r3, #5
 8018da8:	b29b      	uxth	r3, r3
 8018daa:	031b      	lsls	r3, r3, #12
 8018dac:	b29a      	uxth	r2, r3
 8018dae:	79fb      	ldrb	r3, [r7, #7]
 8018db0:	b29b      	uxth	r3, r3
 8018db2:	4313      	orrs	r3, r2
 8018db4:	b29a      	uxth	r2, r3
 8018db6:	693b      	ldr	r3, [r7, #16]
 8018db8:	68dc      	ldr	r4, [r3, #12]
 8018dba:	4610      	mov	r0, r2
 8018dbc:	f7fa f8c2 	bl	8012f44 <lwip_htons>
 8018dc0:	4603      	mov	r3, r0
 8018dc2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8018dc4:	693b      	ldr	r3, [r7, #16]
 8018dc6:	68db      	ldr	r3, [r3, #12]
 8018dc8:	2200      	movs	r2, #0
 8018dca:	749a      	strb	r2, [r3, #18]
 8018dcc:	2200      	movs	r2, #0
 8018dce:	74da      	strb	r2, [r3, #19]
  return seg;
 8018dd0:	693b      	ldr	r3, [r7, #16]
}
 8018dd2:	4618      	mov	r0, r3
 8018dd4:	371c      	adds	r7, #28
 8018dd6:	46bd      	mov	sp, r7
 8018dd8:	bd90      	pop	{r4, r7, pc}
 8018dda:	bf00      	nop
 8018ddc:	080258fc 	.word	0x080258fc
 8018de0:	08025930 	.word	0x08025930
 8018de4:	08025950 	.word	0x08025950
 8018de8:	08025978 	.word	0x08025978
 8018dec:	0802599c 	.word	0x0802599c

08018df0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8018df0:	b580      	push	{r7, lr}
 8018df2:	b086      	sub	sp, #24
 8018df4:	af00      	add	r7, sp, #0
 8018df6:	607b      	str	r3, [r7, #4]
 8018df8:	4603      	mov	r3, r0
 8018dfa:	73fb      	strb	r3, [r7, #15]
 8018dfc:	460b      	mov	r3, r1
 8018dfe:	81bb      	strh	r3, [r7, #12]
 8018e00:	4613      	mov	r3, r2
 8018e02:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8018e04:	89bb      	ldrh	r3, [r7, #12]
 8018e06:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	d105      	bne.n	8018e1a <tcp_pbuf_prealloc+0x2a>
 8018e0e:	4b30      	ldr	r3, [pc, #192]	; (8018ed0 <tcp_pbuf_prealloc+0xe0>)
 8018e10:	22e8      	movs	r2, #232	; 0xe8
 8018e12:	4930      	ldr	r1, [pc, #192]	; (8018ed4 <tcp_pbuf_prealloc+0xe4>)
 8018e14:	4830      	ldr	r0, [pc, #192]	; (8018ed8 <tcp_pbuf_prealloc+0xe8>)
 8018e16:	f006 f9c9 	bl	801f1ac <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8018e1a:	6a3b      	ldr	r3, [r7, #32]
 8018e1c:	2b00      	cmp	r3, #0
 8018e1e:	d105      	bne.n	8018e2c <tcp_pbuf_prealloc+0x3c>
 8018e20:	4b2b      	ldr	r3, [pc, #172]	; (8018ed0 <tcp_pbuf_prealloc+0xe0>)
 8018e22:	22e9      	movs	r2, #233	; 0xe9
 8018e24:	492d      	ldr	r1, [pc, #180]	; (8018edc <tcp_pbuf_prealloc+0xec>)
 8018e26:	482c      	ldr	r0, [pc, #176]	; (8018ed8 <tcp_pbuf_prealloc+0xe8>)
 8018e28:	f006 f9c0 	bl	801f1ac <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8018e2c:	89ba      	ldrh	r2, [r7, #12]
 8018e2e:	897b      	ldrh	r3, [r7, #10]
 8018e30:	429a      	cmp	r2, r3
 8018e32:	d221      	bcs.n	8018e78 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8018e34:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018e38:	f003 0302 	and.w	r3, r3, #2
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	d111      	bne.n	8018e64 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8018e40:	6a3b      	ldr	r3, [r7, #32]
 8018e42:	8b5b      	ldrh	r3, [r3, #26]
 8018e44:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8018e48:	2b00      	cmp	r3, #0
 8018e4a:	d115      	bne.n	8018e78 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8018e4c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018e50:	2b00      	cmp	r3, #0
 8018e52:	d007      	beq.n	8018e64 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8018e54:	6a3b      	ldr	r3, [r7, #32]
 8018e56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	d103      	bne.n	8018e64 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8018e5c:	6a3b      	ldr	r3, [r7, #32]
 8018e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8018e60:	2b00      	cmp	r3, #0
 8018e62:	d009      	beq.n	8018e78 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8018e64:	89bb      	ldrh	r3, [r7, #12]
 8018e66:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8018e6a:	f023 0203 	bic.w	r2, r3, #3
 8018e6e:	897b      	ldrh	r3, [r7, #10]
 8018e70:	4293      	cmp	r3, r2
 8018e72:	bf28      	it	cs
 8018e74:	4613      	movcs	r3, r2
 8018e76:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8018e78:	8af9      	ldrh	r1, [r7, #22]
 8018e7a:	7bfb      	ldrb	r3, [r7, #15]
 8018e7c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018e80:	4618      	mov	r0, r3
 8018e82:	f7fb f8c3 	bl	801400c <pbuf_alloc>
 8018e86:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018e88:	693b      	ldr	r3, [r7, #16]
 8018e8a:	2b00      	cmp	r3, #0
 8018e8c:	d101      	bne.n	8018e92 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8018e8e:	2300      	movs	r3, #0
 8018e90:	e019      	b.n	8018ec6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8018e92:	693b      	ldr	r3, [r7, #16]
 8018e94:	681b      	ldr	r3, [r3, #0]
 8018e96:	2b00      	cmp	r3, #0
 8018e98:	d006      	beq.n	8018ea8 <tcp_pbuf_prealloc+0xb8>
 8018e9a:	4b0d      	ldr	r3, [pc, #52]	; (8018ed0 <tcp_pbuf_prealloc+0xe0>)
 8018e9c:	f240 120b 	movw	r2, #267	; 0x10b
 8018ea0:	490f      	ldr	r1, [pc, #60]	; (8018ee0 <tcp_pbuf_prealloc+0xf0>)
 8018ea2:	480d      	ldr	r0, [pc, #52]	; (8018ed8 <tcp_pbuf_prealloc+0xe8>)
 8018ea4:	f006 f982 	bl	801f1ac <iprintf>
  *oversize = p->len - length;
 8018ea8:	693b      	ldr	r3, [r7, #16]
 8018eaa:	895a      	ldrh	r2, [r3, #10]
 8018eac:	89bb      	ldrh	r3, [r7, #12]
 8018eae:	1ad3      	subs	r3, r2, r3
 8018eb0:	b29a      	uxth	r2, r3
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8018eb6:	693b      	ldr	r3, [r7, #16]
 8018eb8:	89ba      	ldrh	r2, [r7, #12]
 8018eba:	811a      	strh	r2, [r3, #8]
 8018ebc:	693b      	ldr	r3, [r7, #16]
 8018ebe:	891a      	ldrh	r2, [r3, #8]
 8018ec0:	693b      	ldr	r3, [r7, #16]
 8018ec2:	815a      	strh	r2, [r3, #10]
  return p;
 8018ec4:	693b      	ldr	r3, [r7, #16]
}
 8018ec6:	4618      	mov	r0, r3
 8018ec8:	3718      	adds	r7, #24
 8018eca:	46bd      	mov	sp, r7
 8018ecc:	bd80      	pop	{r7, pc}
 8018ece:	bf00      	nop
 8018ed0:	080258fc 	.word	0x080258fc
 8018ed4:	080259b4 	.word	0x080259b4
 8018ed8:	08025950 	.word	0x08025950
 8018edc:	080259d8 	.word	0x080259d8
 8018ee0:	080259f8 	.word	0x080259f8

08018ee4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8018ee4:	b580      	push	{r7, lr}
 8018ee6:	b082      	sub	sp, #8
 8018ee8:	af00      	add	r7, sp, #0
 8018eea:	6078      	str	r0, [r7, #4]
 8018eec:	460b      	mov	r3, r1
 8018eee:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8018ef0:	687b      	ldr	r3, [r7, #4]
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	d106      	bne.n	8018f04 <tcp_write_checks+0x20>
 8018ef6:	4b33      	ldr	r3, [pc, #204]	; (8018fc4 <tcp_write_checks+0xe0>)
 8018ef8:	f240 1233 	movw	r2, #307	; 0x133
 8018efc:	4932      	ldr	r1, [pc, #200]	; (8018fc8 <tcp_write_checks+0xe4>)
 8018efe:	4833      	ldr	r0, [pc, #204]	; (8018fcc <tcp_write_checks+0xe8>)
 8018f00:	f006 f954 	bl	801f1ac <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	7d1b      	ldrb	r3, [r3, #20]
 8018f08:	2b04      	cmp	r3, #4
 8018f0a:	d00e      	beq.n	8018f2a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8018f0c:	687b      	ldr	r3, [r7, #4]
 8018f0e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8018f10:	2b07      	cmp	r3, #7
 8018f12:	d00a      	beq.n	8018f2a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8018f18:	2b02      	cmp	r3, #2
 8018f1a:	d006      	beq.n	8018f2a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8018f20:	2b03      	cmp	r3, #3
 8018f22:	d002      	beq.n	8018f2a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8018f24:	f06f 030a 	mvn.w	r3, #10
 8018f28:	e048      	b.n	8018fbc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8018f2a:	887b      	ldrh	r3, [r7, #2]
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	d101      	bne.n	8018f34 <tcp_write_checks+0x50>
    return ERR_OK;
 8018f30:	2300      	movs	r3, #0
 8018f32:	e043      	b.n	8018fbc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8018f3a:	887a      	ldrh	r2, [r7, #2]
 8018f3c:	429a      	cmp	r2, r3
 8018f3e:	d909      	bls.n	8018f54 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	8b5b      	ldrh	r3, [r3, #26]
 8018f44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018f48:	b29a      	uxth	r2, r3
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8018f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8018f52:	e033      	b.n	8018fbc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018f5a:	2b08      	cmp	r3, #8
 8018f5c:	d909      	bls.n	8018f72 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8018f5e:	687b      	ldr	r3, [r7, #4]
 8018f60:	8b5b      	ldrh	r3, [r3, #26]
 8018f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018f66:	b29a      	uxth	r2, r3
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8018f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8018f70:	e024      	b.n	8018fbc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8018f78:	2b00      	cmp	r3, #0
 8018f7a:	d00f      	beq.n	8018f9c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018f80:	2b00      	cmp	r3, #0
 8018f82:	d11a      	bne.n	8018fba <tcp_write_checks+0xd6>
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018f88:	2b00      	cmp	r3, #0
 8018f8a:	d116      	bne.n	8018fba <tcp_write_checks+0xd6>
 8018f8c:	4b0d      	ldr	r3, [pc, #52]	; (8018fc4 <tcp_write_checks+0xe0>)
 8018f8e:	f240 1255 	movw	r2, #341	; 0x155
 8018f92:	490f      	ldr	r1, [pc, #60]	; (8018fd0 <tcp_write_checks+0xec>)
 8018f94:	480d      	ldr	r0, [pc, #52]	; (8018fcc <tcp_write_checks+0xe8>)
 8018f96:	f006 f909 	bl	801f1ac <iprintf>
 8018f9a:	e00e      	b.n	8018fba <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8018f9c:	687b      	ldr	r3, [r7, #4]
 8018f9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018fa0:	2b00      	cmp	r3, #0
 8018fa2:	d103      	bne.n	8018fac <tcp_write_checks+0xc8>
 8018fa4:	687b      	ldr	r3, [r7, #4]
 8018fa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018fa8:	2b00      	cmp	r3, #0
 8018faa:	d006      	beq.n	8018fba <tcp_write_checks+0xd6>
 8018fac:	4b05      	ldr	r3, [pc, #20]	; (8018fc4 <tcp_write_checks+0xe0>)
 8018fae:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8018fb2:	4908      	ldr	r1, [pc, #32]	; (8018fd4 <tcp_write_checks+0xf0>)
 8018fb4:	4805      	ldr	r0, [pc, #20]	; (8018fcc <tcp_write_checks+0xe8>)
 8018fb6:	f006 f8f9 	bl	801f1ac <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8018fba:	2300      	movs	r3, #0
}
 8018fbc:	4618      	mov	r0, r3
 8018fbe:	3708      	adds	r7, #8
 8018fc0:	46bd      	mov	sp, r7
 8018fc2:	bd80      	pop	{r7, pc}
 8018fc4:	080258fc 	.word	0x080258fc
 8018fc8:	08025a0c 	.word	0x08025a0c
 8018fcc:	08025950 	.word	0x08025950
 8018fd0:	08025a2c 	.word	0x08025a2c
 8018fd4:	08025a68 	.word	0x08025a68

08018fd8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8018fd8:	b590      	push	{r4, r7, lr}
 8018fda:	b09b      	sub	sp, #108	; 0x6c
 8018fdc:	af04      	add	r7, sp, #16
 8018fde:	60f8      	str	r0, [r7, #12]
 8018fe0:	60b9      	str	r1, [r7, #8]
 8018fe2:	4611      	mov	r1, r2
 8018fe4:	461a      	mov	r2, r3
 8018fe6:	460b      	mov	r3, r1
 8018fe8:	80fb      	strh	r3, [r7, #6]
 8018fea:	4613      	mov	r3, r2
 8018fec:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8018fee:	2300      	movs	r3, #0
 8018ff0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8018ff2:	2300      	movs	r3, #0
 8018ff4:	653b      	str	r3, [r7, #80]	; 0x50
 8018ff6:	2300      	movs	r3, #0
 8018ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8018ffa:	2300      	movs	r3, #0
 8018ffc:	64bb      	str	r3, [r7, #72]	; 0x48
 8018ffe:	2300      	movs	r3, #0
 8019000:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8019002:	2300      	movs	r3, #0
 8019004:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8019008:	2300      	movs	r3, #0
 801900a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801900e:	2300      	movs	r3, #0
 8019010:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8019012:	2300      	movs	r3, #0
 8019014:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8019016:	2300      	movs	r3, #0
 8019018:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801901a:	68fb      	ldr	r3, [r7, #12]
 801901c:	2b00      	cmp	r3, #0
 801901e:	d109      	bne.n	8019034 <tcp_write+0x5c>
 8019020:	4ba4      	ldr	r3, [pc, #656]	; (80192b4 <tcp_write+0x2dc>)
 8019022:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8019026:	49a4      	ldr	r1, [pc, #656]	; (80192b8 <tcp_write+0x2e0>)
 8019028:	48a4      	ldr	r0, [pc, #656]	; (80192bc <tcp_write+0x2e4>)
 801902a:	f006 f8bf 	bl	801f1ac <iprintf>
 801902e:	f06f 030f 	mvn.w	r3, #15
 8019032:	e32a      	b.n	801968a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8019034:	68fb      	ldr	r3, [r7, #12]
 8019036:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801903a:	085b      	lsrs	r3, r3, #1
 801903c:	b29a      	uxth	r2, r3
 801903e:	68fb      	ldr	r3, [r7, #12]
 8019040:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019042:	4293      	cmp	r3, r2
 8019044:	bf28      	it	cs
 8019046:	4613      	movcs	r3, r2
 8019048:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801904a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801904c:	2b00      	cmp	r3, #0
 801904e:	d102      	bne.n	8019056 <tcp_write+0x7e>
 8019050:	68fb      	ldr	r3, [r7, #12]
 8019052:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019054:	e000      	b.n	8019058 <tcp_write+0x80>
 8019056:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019058:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801905a:	68bb      	ldr	r3, [r7, #8]
 801905c:	2b00      	cmp	r3, #0
 801905e:	d109      	bne.n	8019074 <tcp_write+0x9c>
 8019060:	4b94      	ldr	r3, [pc, #592]	; (80192b4 <tcp_write+0x2dc>)
 8019062:	f240 12ad 	movw	r2, #429	; 0x1ad
 8019066:	4996      	ldr	r1, [pc, #600]	; (80192c0 <tcp_write+0x2e8>)
 8019068:	4894      	ldr	r0, [pc, #592]	; (80192bc <tcp_write+0x2e4>)
 801906a:	f006 f89f 	bl	801f1ac <iprintf>
 801906e:	f06f 030f 	mvn.w	r3, #15
 8019072:	e30a      	b.n	801968a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8019074:	88fb      	ldrh	r3, [r7, #6]
 8019076:	4619      	mov	r1, r3
 8019078:	68f8      	ldr	r0, [r7, #12]
 801907a:	f7ff ff33 	bl	8018ee4 <tcp_write_checks>
 801907e:	4603      	mov	r3, r0
 8019080:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8019084:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8019088:	2b00      	cmp	r3, #0
 801908a:	d002      	beq.n	8019092 <tcp_write+0xba>
    return err;
 801908c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8019090:	e2fb      	b.n	801968a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8019092:	68fb      	ldr	r3, [r7, #12]
 8019094:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019098:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801909c:	2300      	movs	r3, #0
 801909e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80190a2:	68fb      	ldr	r3, [r7, #12]
 80190a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	f000 80f6 	beq.w	8019298 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80190ac:	68fb      	ldr	r3, [r7, #12]
 80190ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80190b0:	653b      	str	r3, [r7, #80]	; 0x50
 80190b2:	e002      	b.n	80190ba <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80190b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80190b6:	681b      	ldr	r3, [r3, #0]
 80190b8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80190ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80190bc:	681b      	ldr	r3, [r3, #0]
 80190be:	2b00      	cmp	r3, #0
 80190c0:	d1f8      	bne.n	80190b4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80190c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80190c4:	7a9b      	ldrb	r3, [r3, #10]
 80190c6:	009b      	lsls	r3, r3, #2
 80190c8:	b29b      	uxth	r3, r3
 80190ca:	f003 0304 	and.w	r3, r3, #4
 80190ce:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80190d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80190d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80190d4:	891b      	ldrh	r3, [r3, #8]
 80190d6:	4619      	mov	r1, r3
 80190d8:	8c3b      	ldrh	r3, [r7, #32]
 80190da:	440b      	add	r3, r1
 80190dc:	429a      	cmp	r2, r3
 80190de:	da06      	bge.n	80190ee <tcp_write+0x116>
 80190e0:	4b74      	ldr	r3, [pc, #464]	; (80192b4 <tcp_write+0x2dc>)
 80190e2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80190e6:	4977      	ldr	r1, [pc, #476]	; (80192c4 <tcp_write+0x2ec>)
 80190e8:	4874      	ldr	r0, [pc, #464]	; (80192bc <tcp_write+0x2e4>)
 80190ea:	f006 f85f 	bl	801f1ac <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80190ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80190f0:	891a      	ldrh	r2, [r3, #8]
 80190f2:	8c3b      	ldrh	r3, [r7, #32]
 80190f4:	4413      	add	r3, r2
 80190f6:	b29b      	uxth	r3, r3
 80190f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80190fa:	1ad3      	subs	r3, r2, r3
 80190fc:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80190fe:	68fb      	ldr	r3, [r7, #12]
 8019100:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8019104:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8019106:	8a7b      	ldrh	r3, [r7, #18]
 8019108:	2b00      	cmp	r3, #0
 801910a:	d026      	beq.n	801915a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801910c:	8a7b      	ldrh	r3, [r7, #18]
 801910e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019110:	429a      	cmp	r2, r3
 8019112:	d206      	bcs.n	8019122 <tcp_write+0x14a>
 8019114:	4b67      	ldr	r3, [pc, #412]	; (80192b4 <tcp_write+0x2dc>)
 8019116:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801911a:	496b      	ldr	r1, [pc, #428]	; (80192c8 <tcp_write+0x2f0>)
 801911c:	4867      	ldr	r0, [pc, #412]	; (80192bc <tcp_write+0x2e4>)
 801911e:	f006 f845 	bl	801f1ac <iprintf>
      seg = last_unsent;
 8019122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019124:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8019126:	8a7b      	ldrh	r3, [r7, #18]
 8019128:	88fa      	ldrh	r2, [r7, #6]
 801912a:	4293      	cmp	r3, r2
 801912c:	bf28      	it	cs
 801912e:	4613      	movcs	r3, r2
 8019130:	b29b      	uxth	r3, r3
 8019132:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019134:	4293      	cmp	r3, r2
 8019136:	bf28      	it	cs
 8019138:	4613      	movcs	r3, r2
 801913a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801913c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019140:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019142:	4413      	add	r3, r2
 8019144:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8019148:	8a7a      	ldrh	r2, [r7, #18]
 801914a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801914c:	1ad3      	subs	r3, r2, r3
 801914e:	b29b      	uxth	r3, r3
 8019150:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8019152:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019154:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019156:	1ad3      	subs	r3, r2, r3
 8019158:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801915a:	8a7b      	ldrh	r3, [r7, #18]
 801915c:	2b00      	cmp	r3, #0
 801915e:	d00b      	beq.n	8019178 <tcp_write+0x1a0>
 8019160:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019164:	88fb      	ldrh	r3, [r7, #6]
 8019166:	429a      	cmp	r2, r3
 8019168:	d006      	beq.n	8019178 <tcp_write+0x1a0>
 801916a:	4b52      	ldr	r3, [pc, #328]	; (80192b4 <tcp_write+0x2dc>)
 801916c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8019170:	4956      	ldr	r1, [pc, #344]	; (80192cc <tcp_write+0x2f4>)
 8019172:	4852      	ldr	r0, [pc, #328]	; (80192bc <tcp_write+0x2e4>)
 8019174:	f006 f81a 	bl	801f1ac <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8019178:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801917c:	88fb      	ldrh	r3, [r7, #6]
 801917e:	429a      	cmp	r2, r3
 8019180:	f080 8167 	bcs.w	8019452 <tcp_write+0x47a>
 8019184:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019186:	2b00      	cmp	r3, #0
 8019188:	f000 8163 	beq.w	8019452 <tcp_write+0x47a>
 801918c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801918e:	891b      	ldrh	r3, [r3, #8]
 8019190:	2b00      	cmp	r3, #0
 8019192:	f000 815e 	beq.w	8019452 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8019196:	88fa      	ldrh	r2, [r7, #6]
 8019198:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801919c:	1ad2      	subs	r2, r2, r3
 801919e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80191a0:	4293      	cmp	r3, r2
 80191a2:	bfa8      	it	ge
 80191a4:	4613      	movge	r3, r2
 80191a6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80191a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80191aa:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80191ac:	797b      	ldrb	r3, [r7, #5]
 80191ae:	f003 0301 	and.w	r3, r3, #1
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	d027      	beq.n	8019206 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80191b6:	f107 0012 	add.w	r0, r7, #18
 80191ba:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80191bc:	8bf9      	ldrh	r1, [r7, #30]
 80191be:	2301      	movs	r3, #1
 80191c0:	9302      	str	r3, [sp, #8]
 80191c2:	797b      	ldrb	r3, [r7, #5]
 80191c4:	9301      	str	r3, [sp, #4]
 80191c6:	68fb      	ldr	r3, [r7, #12]
 80191c8:	9300      	str	r3, [sp, #0]
 80191ca:	4603      	mov	r3, r0
 80191cc:	2000      	movs	r0, #0
 80191ce:	f7ff fe0f 	bl	8018df0 <tcp_pbuf_prealloc>
 80191d2:	6578      	str	r0, [r7, #84]	; 0x54
 80191d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	f000 8225 	beq.w	8019626 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80191dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80191de:	6858      	ldr	r0, [r3, #4]
 80191e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80191e4:	68ba      	ldr	r2, [r7, #8]
 80191e6:	4413      	add	r3, r2
 80191e8:	8bfa      	ldrh	r2, [r7, #30]
 80191ea:	4619      	mov	r1, r3
 80191ec:	f005 f88a 	bl	801e304 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80191f0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80191f2:	f7fb fa7d 	bl	80146f0 <pbuf_clen>
 80191f6:	4603      	mov	r3, r0
 80191f8:	461a      	mov	r2, r3
 80191fa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80191fe:	4413      	add	r3, r2
 8019200:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8019204:	e041      	b.n	801928a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8019206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019208:	685b      	ldr	r3, [r3, #4]
 801920a:	637b      	str	r3, [r7, #52]	; 0x34
 801920c:	e002      	b.n	8019214 <tcp_write+0x23c>
 801920e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019210:	681b      	ldr	r3, [r3, #0]
 8019212:	637b      	str	r3, [r7, #52]	; 0x34
 8019214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019216:	681b      	ldr	r3, [r3, #0]
 8019218:	2b00      	cmp	r3, #0
 801921a:	d1f8      	bne.n	801920e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801921c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801921e:	7b1b      	ldrb	r3, [r3, #12]
 8019220:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8019224:	2b00      	cmp	r3, #0
 8019226:	d115      	bne.n	8019254 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8019228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801922a:	685b      	ldr	r3, [r3, #4]
 801922c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801922e:	8952      	ldrh	r2, [r2, #10]
 8019230:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8019232:	68ba      	ldr	r2, [r7, #8]
 8019234:	429a      	cmp	r2, r3
 8019236:	d10d      	bne.n	8019254 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8019238:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801923c:	2b00      	cmp	r3, #0
 801923e:	d006      	beq.n	801924e <tcp_write+0x276>
 8019240:	4b1c      	ldr	r3, [pc, #112]	; (80192b4 <tcp_write+0x2dc>)
 8019242:	f240 2231 	movw	r2, #561	; 0x231
 8019246:	4922      	ldr	r1, [pc, #136]	; (80192d0 <tcp_write+0x2f8>)
 8019248:	481c      	ldr	r0, [pc, #112]	; (80192bc <tcp_write+0x2e4>)
 801924a:	f005 ffaf 	bl	801f1ac <iprintf>
          extendlen = seglen;
 801924e:	8bfb      	ldrh	r3, [r7, #30]
 8019250:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8019252:	e01a      	b.n	801928a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8019254:	8bfb      	ldrh	r3, [r7, #30]
 8019256:	2201      	movs	r2, #1
 8019258:	4619      	mov	r1, r3
 801925a:	2000      	movs	r0, #0
 801925c:	f7fa fed6 	bl	801400c <pbuf_alloc>
 8019260:	6578      	str	r0, [r7, #84]	; 0x54
 8019262:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019264:	2b00      	cmp	r3, #0
 8019266:	f000 81e0 	beq.w	801962a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801926a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801926e:	68ba      	ldr	r2, [r7, #8]
 8019270:	441a      	add	r2, r3
 8019272:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019274:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8019276:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8019278:	f7fb fa3a 	bl	80146f0 <pbuf_clen>
 801927c:	4603      	mov	r3, r0
 801927e:	461a      	mov	r2, r3
 8019280:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019284:	4413      	add	r3, r2
 8019286:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801928a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801928e:	8bfb      	ldrh	r3, [r7, #30]
 8019290:	4413      	add	r3, r2
 8019292:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8019296:	e0dc      	b.n	8019452 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8019298:	68fb      	ldr	r3, [r7, #12]
 801929a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801929e:	2b00      	cmp	r3, #0
 80192a0:	f000 80d7 	beq.w	8019452 <tcp_write+0x47a>
 80192a4:	4b03      	ldr	r3, [pc, #12]	; (80192b4 <tcp_write+0x2dc>)
 80192a6:	f240 224a 	movw	r2, #586	; 0x24a
 80192aa:	490a      	ldr	r1, [pc, #40]	; (80192d4 <tcp_write+0x2fc>)
 80192ac:	4803      	ldr	r0, [pc, #12]	; (80192bc <tcp_write+0x2e4>)
 80192ae:	f005 ff7d 	bl	801f1ac <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80192b2:	e0ce      	b.n	8019452 <tcp_write+0x47a>
 80192b4:	080258fc 	.word	0x080258fc
 80192b8:	08025a9c 	.word	0x08025a9c
 80192bc:	08025950 	.word	0x08025950
 80192c0:	08025ab4 	.word	0x08025ab4
 80192c4:	08025ae8 	.word	0x08025ae8
 80192c8:	08025b00 	.word	0x08025b00
 80192cc:	08025b20 	.word	0x08025b20
 80192d0:	08025b40 	.word	0x08025b40
 80192d4:	08025b6c 	.word	0x08025b6c
    struct pbuf *p;
    u16_t left = len - pos;
 80192d8:	88fa      	ldrh	r2, [r7, #6]
 80192da:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80192de:	1ad3      	subs	r3, r2, r3
 80192e0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80192e2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80192e6:	b29b      	uxth	r3, r3
 80192e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80192ea:	1ad3      	subs	r3, r2, r3
 80192ec:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80192ee:	8b7a      	ldrh	r2, [r7, #26]
 80192f0:	8bbb      	ldrh	r3, [r7, #28]
 80192f2:	4293      	cmp	r3, r2
 80192f4:	bf28      	it	cs
 80192f6:	4613      	movcs	r3, r2
 80192f8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80192fa:	797b      	ldrb	r3, [r7, #5]
 80192fc:	f003 0301 	and.w	r3, r3, #1
 8019300:	2b00      	cmp	r3, #0
 8019302:	d036      	beq.n	8019372 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8019304:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8019308:	b29a      	uxth	r2, r3
 801930a:	8b3b      	ldrh	r3, [r7, #24]
 801930c:	4413      	add	r3, r2
 801930e:	b299      	uxth	r1, r3
 8019310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019312:	2b00      	cmp	r3, #0
 8019314:	bf0c      	ite	eq
 8019316:	2301      	moveq	r3, #1
 8019318:	2300      	movne	r3, #0
 801931a:	b2db      	uxtb	r3, r3
 801931c:	f107 0012 	add.w	r0, r7, #18
 8019320:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8019322:	9302      	str	r3, [sp, #8]
 8019324:	797b      	ldrb	r3, [r7, #5]
 8019326:	9301      	str	r3, [sp, #4]
 8019328:	68fb      	ldr	r3, [r7, #12]
 801932a:	9300      	str	r3, [sp, #0]
 801932c:	4603      	mov	r3, r0
 801932e:	2036      	movs	r0, #54	; 0x36
 8019330:	f7ff fd5e 	bl	8018df0 <tcp_pbuf_prealloc>
 8019334:	6338      	str	r0, [r7, #48]	; 0x30
 8019336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019338:	2b00      	cmp	r3, #0
 801933a:	f000 8178 	beq.w	801962e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801933e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019340:	895b      	ldrh	r3, [r3, #10]
 8019342:	8b3a      	ldrh	r2, [r7, #24]
 8019344:	429a      	cmp	r2, r3
 8019346:	d906      	bls.n	8019356 <tcp_write+0x37e>
 8019348:	4b8c      	ldr	r3, [pc, #560]	; (801957c <tcp_write+0x5a4>)
 801934a:	f240 2266 	movw	r2, #614	; 0x266
 801934e:	498c      	ldr	r1, [pc, #560]	; (8019580 <tcp_write+0x5a8>)
 8019350:	488c      	ldr	r0, [pc, #560]	; (8019584 <tcp_write+0x5ac>)
 8019352:	f005 ff2b 	bl	801f1ac <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8019356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019358:	685a      	ldr	r2, [r3, #4]
 801935a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801935e:	18d0      	adds	r0, r2, r3
 8019360:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019364:	68ba      	ldr	r2, [r7, #8]
 8019366:	4413      	add	r3, r2
 8019368:	8b3a      	ldrh	r2, [r7, #24]
 801936a:	4619      	mov	r1, r3
 801936c:	f004 ffca 	bl	801e304 <memcpy>
 8019370:	e02f      	b.n	80193d2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8019372:	8a7b      	ldrh	r3, [r7, #18]
 8019374:	2b00      	cmp	r3, #0
 8019376:	d006      	beq.n	8019386 <tcp_write+0x3ae>
 8019378:	4b80      	ldr	r3, [pc, #512]	; (801957c <tcp_write+0x5a4>)
 801937a:	f240 2271 	movw	r2, #625	; 0x271
 801937e:	4982      	ldr	r1, [pc, #520]	; (8019588 <tcp_write+0x5b0>)
 8019380:	4880      	ldr	r0, [pc, #512]	; (8019584 <tcp_write+0x5ac>)
 8019382:	f005 ff13 	bl	801f1ac <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8019386:	8b3b      	ldrh	r3, [r7, #24]
 8019388:	2201      	movs	r2, #1
 801938a:	4619      	mov	r1, r3
 801938c:	2036      	movs	r0, #54	; 0x36
 801938e:	f7fa fe3d 	bl	801400c <pbuf_alloc>
 8019392:	6178      	str	r0, [r7, #20]
 8019394:	697b      	ldr	r3, [r7, #20]
 8019396:	2b00      	cmp	r3, #0
 8019398:	f000 814b 	beq.w	8019632 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801939c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80193a0:	68ba      	ldr	r2, [r7, #8]
 80193a2:	441a      	add	r2, r3
 80193a4:	697b      	ldr	r3, [r7, #20]
 80193a6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80193a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80193ac:	b29b      	uxth	r3, r3
 80193ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 80193b2:	4619      	mov	r1, r3
 80193b4:	2036      	movs	r0, #54	; 0x36
 80193b6:	f7fa fe29 	bl	801400c <pbuf_alloc>
 80193ba:	6338      	str	r0, [r7, #48]	; 0x30
 80193bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193be:	2b00      	cmp	r3, #0
 80193c0:	d103      	bne.n	80193ca <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80193c2:	6978      	ldr	r0, [r7, #20]
 80193c4:	f7fb f906 	bl	80145d4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80193c8:	e136      	b.n	8019638 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80193ca:	6979      	ldr	r1, [r7, #20]
 80193cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80193ce:	f7fb f9cf 	bl	8014770 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80193d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80193d4:	f7fb f98c 	bl	80146f0 <pbuf_clen>
 80193d8:	4603      	mov	r3, r0
 80193da:	461a      	mov	r2, r3
 80193dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80193e0:	4413      	add	r3, r2
 80193e2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80193e6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80193ea:	2b09      	cmp	r3, #9
 80193ec:	d903      	bls.n	80193f6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80193ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80193f0:	f7fb f8f0 	bl	80145d4 <pbuf_free>
      goto memerr;
 80193f4:	e120      	b.n	8019638 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80193f6:	68fb      	ldr	r3, [r7, #12]
 80193f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80193fa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80193fe:	441a      	add	r2, r3
 8019400:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019404:	9300      	str	r3, [sp, #0]
 8019406:	4613      	mov	r3, r2
 8019408:	2200      	movs	r2, #0
 801940a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801940c:	68f8      	ldr	r0, [r7, #12]
 801940e:	f7ff fc51 	bl	8018cb4 <tcp_create_segment>
 8019412:	64f8      	str	r0, [r7, #76]	; 0x4c
 8019414:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019416:	2b00      	cmp	r3, #0
 8019418:	f000 810d 	beq.w	8019636 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801941c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801941e:	2b00      	cmp	r3, #0
 8019420:	d102      	bne.n	8019428 <tcp_write+0x450>
      queue = seg;
 8019422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019424:	647b      	str	r3, [r7, #68]	; 0x44
 8019426:	e00c      	b.n	8019442 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8019428:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801942a:	2b00      	cmp	r3, #0
 801942c:	d106      	bne.n	801943c <tcp_write+0x464>
 801942e:	4b53      	ldr	r3, [pc, #332]	; (801957c <tcp_write+0x5a4>)
 8019430:	f240 22ab 	movw	r2, #683	; 0x2ab
 8019434:	4955      	ldr	r1, [pc, #340]	; (801958c <tcp_write+0x5b4>)
 8019436:	4853      	ldr	r0, [pc, #332]	; (8019584 <tcp_write+0x5ac>)
 8019438:	f005 feb8 	bl	801f1ac <iprintf>
      prev_seg->next = seg;
 801943c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801943e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019440:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8019442:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019444:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8019446:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801944a:	8b3b      	ldrh	r3, [r7, #24]
 801944c:	4413      	add	r3, r2
 801944e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8019452:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019456:	88fb      	ldrh	r3, [r7, #6]
 8019458:	429a      	cmp	r2, r3
 801945a:	f4ff af3d 	bcc.w	80192d8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801945e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019460:	2b00      	cmp	r3, #0
 8019462:	d02c      	beq.n	80194be <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8019464:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019466:	685b      	ldr	r3, [r3, #4]
 8019468:	62fb      	str	r3, [r7, #44]	; 0x2c
 801946a:	e01e      	b.n	80194aa <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801946c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801946e:	891a      	ldrh	r2, [r3, #8]
 8019470:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019472:	4413      	add	r3, r2
 8019474:	b29a      	uxth	r2, r3
 8019476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019478:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801947a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801947c:	681b      	ldr	r3, [r3, #0]
 801947e:	2b00      	cmp	r3, #0
 8019480:	d110      	bne.n	80194a4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8019482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019484:	685b      	ldr	r3, [r3, #4]
 8019486:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019488:	8952      	ldrh	r2, [r2, #10]
 801948a:	4413      	add	r3, r2
 801948c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801948e:	68b9      	ldr	r1, [r7, #8]
 8019490:	4618      	mov	r0, r3
 8019492:	f004 ff37 	bl	801e304 <memcpy>
        p->len += oversize_used;
 8019496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019498:	895a      	ldrh	r2, [r3, #10]
 801949a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801949c:	4413      	add	r3, r2
 801949e:	b29a      	uxth	r2, r3
 80194a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194a2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80194a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194a6:	681b      	ldr	r3, [r3, #0]
 80194a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80194aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194ac:	2b00      	cmp	r3, #0
 80194ae:	d1dd      	bne.n	801946c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80194b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80194b2:	891a      	ldrh	r2, [r3, #8]
 80194b4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80194b6:	4413      	add	r3, r2
 80194b8:	b29a      	uxth	r2, r3
 80194ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80194bc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80194be:	8a7a      	ldrh	r2, [r7, #18]
 80194c0:	68fb      	ldr	r3, [r7, #12]
 80194c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80194c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80194c8:	2b00      	cmp	r3, #0
 80194ca:	d018      	beq.n	80194fe <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80194cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80194ce:	2b00      	cmp	r3, #0
 80194d0:	d106      	bne.n	80194e0 <tcp_write+0x508>
 80194d2:	4b2a      	ldr	r3, [pc, #168]	; (801957c <tcp_write+0x5a4>)
 80194d4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80194d8:	492d      	ldr	r1, [pc, #180]	; (8019590 <tcp_write+0x5b8>)
 80194da:	482a      	ldr	r0, [pc, #168]	; (8019584 <tcp_write+0x5ac>)
 80194dc:	f005 fe66 	bl	801f1ac <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80194e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80194e2:	685b      	ldr	r3, [r3, #4]
 80194e4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80194e6:	4618      	mov	r0, r3
 80194e8:	f7fb f942 	bl	8014770 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80194ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80194ee:	891a      	ldrh	r2, [r3, #8]
 80194f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80194f2:	891b      	ldrh	r3, [r3, #8]
 80194f4:	4413      	add	r3, r2
 80194f6:	b29a      	uxth	r2, r3
 80194f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80194fa:	811a      	strh	r2, [r3, #8]
 80194fc:	e037      	b.n	801956e <tcp_write+0x596>
  } else if (extendlen > 0) {
 80194fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019500:	2b00      	cmp	r3, #0
 8019502:	d034      	beq.n	801956e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8019504:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019506:	2b00      	cmp	r3, #0
 8019508:	d003      	beq.n	8019512 <tcp_write+0x53a>
 801950a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801950c:	685b      	ldr	r3, [r3, #4]
 801950e:	2b00      	cmp	r3, #0
 8019510:	d106      	bne.n	8019520 <tcp_write+0x548>
 8019512:	4b1a      	ldr	r3, [pc, #104]	; (801957c <tcp_write+0x5a4>)
 8019514:	f240 22e6 	movw	r2, #742	; 0x2e6
 8019518:	491e      	ldr	r1, [pc, #120]	; (8019594 <tcp_write+0x5bc>)
 801951a:	481a      	ldr	r0, [pc, #104]	; (8019584 <tcp_write+0x5ac>)
 801951c:	f005 fe46 	bl	801f1ac <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8019520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019522:	685b      	ldr	r3, [r3, #4]
 8019524:	62bb      	str	r3, [r7, #40]	; 0x28
 8019526:	e009      	b.n	801953c <tcp_write+0x564>
      p->tot_len += extendlen;
 8019528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801952a:	891a      	ldrh	r2, [r3, #8]
 801952c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801952e:	4413      	add	r3, r2
 8019530:	b29a      	uxth	r2, r3
 8019532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019534:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8019536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019538:	681b      	ldr	r3, [r3, #0]
 801953a:	62bb      	str	r3, [r7, #40]	; 0x28
 801953c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801953e:	681b      	ldr	r3, [r3, #0]
 8019540:	2b00      	cmp	r3, #0
 8019542:	d1f1      	bne.n	8019528 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8019544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019546:	891a      	ldrh	r2, [r3, #8]
 8019548:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801954a:	4413      	add	r3, r2
 801954c:	b29a      	uxth	r2, r3
 801954e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019550:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8019552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019554:	895a      	ldrh	r2, [r3, #10]
 8019556:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019558:	4413      	add	r3, r2
 801955a:	b29a      	uxth	r2, r3
 801955c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801955e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8019560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019562:	891a      	ldrh	r2, [r3, #8]
 8019564:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019566:	4413      	add	r3, r2
 8019568:	b29a      	uxth	r2, r3
 801956a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801956c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801956e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019570:	2b00      	cmp	r3, #0
 8019572:	d111      	bne.n	8019598 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8019574:	68fb      	ldr	r3, [r7, #12]
 8019576:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019578:	66da      	str	r2, [r3, #108]	; 0x6c
 801957a:	e010      	b.n	801959e <tcp_write+0x5c6>
 801957c:	080258fc 	.word	0x080258fc
 8019580:	08025b9c 	.word	0x08025b9c
 8019584:	08025950 	.word	0x08025950
 8019588:	08025bdc 	.word	0x08025bdc
 801958c:	08025bec 	.word	0x08025bec
 8019590:	08025c00 	.word	0x08025c00
 8019594:	08025c38 	.word	0x08025c38
  } else {
    last_unsent->next = queue;
 8019598:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801959a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801959c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801959e:	68fb      	ldr	r3, [r7, #12]
 80195a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80195a2:	88fb      	ldrh	r3, [r7, #6]
 80195a4:	441a      	add	r2, r3
 80195a6:	68fb      	ldr	r3, [r7, #12]
 80195a8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80195aa:	68fb      	ldr	r3, [r7, #12]
 80195ac:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80195b0:	88fb      	ldrh	r3, [r7, #6]
 80195b2:	1ad3      	subs	r3, r2, r3
 80195b4:	b29a      	uxth	r2, r3
 80195b6:	68fb      	ldr	r3, [r7, #12]
 80195b8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80195bc:	68fb      	ldr	r3, [r7, #12]
 80195be:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80195c2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80195c6:	68fb      	ldr	r3, [r7, #12]
 80195c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80195cc:	2b00      	cmp	r3, #0
 80195ce:	d00e      	beq.n	80195ee <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80195d0:	68fb      	ldr	r3, [r7, #12]
 80195d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80195d4:	2b00      	cmp	r3, #0
 80195d6:	d10a      	bne.n	80195ee <tcp_write+0x616>
 80195d8:	68fb      	ldr	r3, [r7, #12]
 80195da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80195dc:	2b00      	cmp	r3, #0
 80195de:	d106      	bne.n	80195ee <tcp_write+0x616>
 80195e0:	4b2c      	ldr	r3, [pc, #176]	; (8019694 <tcp_write+0x6bc>)
 80195e2:	f240 3212 	movw	r2, #786	; 0x312
 80195e6:	492c      	ldr	r1, [pc, #176]	; (8019698 <tcp_write+0x6c0>)
 80195e8:	482c      	ldr	r0, [pc, #176]	; (801969c <tcp_write+0x6c4>)
 80195ea:	f005 fddf 	bl	801f1ac <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80195ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80195f0:	2b00      	cmp	r3, #0
 80195f2:	d016      	beq.n	8019622 <tcp_write+0x64a>
 80195f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80195f6:	68db      	ldr	r3, [r3, #12]
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	d012      	beq.n	8019622 <tcp_write+0x64a>
 80195fc:	797b      	ldrb	r3, [r7, #5]
 80195fe:	f003 0302 	and.w	r3, r3, #2
 8019602:	2b00      	cmp	r3, #0
 8019604:	d10d      	bne.n	8019622 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8019606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019608:	68db      	ldr	r3, [r3, #12]
 801960a:	899b      	ldrh	r3, [r3, #12]
 801960c:	b29c      	uxth	r4, r3
 801960e:	2008      	movs	r0, #8
 8019610:	f7f9 fc98 	bl	8012f44 <lwip_htons>
 8019614:	4603      	mov	r3, r0
 8019616:	461a      	mov	r2, r3
 8019618:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801961a:	68db      	ldr	r3, [r3, #12]
 801961c:	4322      	orrs	r2, r4
 801961e:	b292      	uxth	r2, r2
 8019620:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8019622:	2300      	movs	r3, #0
 8019624:	e031      	b.n	801968a <tcp_write+0x6b2>
          goto memerr;
 8019626:	bf00      	nop
 8019628:	e006      	b.n	8019638 <tcp_write+0x660>
            goto memerr;
 801962a:	bf00      	nop
 801962c:	e004      	b.n	8019638 <tcp_write+0x660>
        goto memerr;
 801962e:	bf00      	nop
 8019630:	e002      	b.n	8019638 <tcp_write+0x660>
        goto memerr;
 8019632:	bf00      	nop
 8019634:	e000      	b.n	8019638 <tcp_write+0x660>
      goto memerr;
 8019636:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019638:	68fb      	ldr	r3, [r7, #12]
 801963a:	8b5b      	ldrh	r3, [r3, #26]
 801963c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019640:	b29a      	uxth	r2, r3
 8019642:	68fb      	ldr	r3, [r7, #12]
 8019644:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8019646:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8019648:	2b00      	cmp	r3, #0
 801964a:	d002      	beq.n	8019652 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801964c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801964e:	f7fa ffc1 	bl	80145d4 <pbuf_free>
  }
  if (queue != NULL) {
 8019652:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8019654:	2b00      	cmp	r3, #0
 8019656:	d002      	beq.n	801965e <tcp_write+0x686>
    tcp_segs_free(queue);
 8019658:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801965a:	f7fc fb6f 	bl	8015d3c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801965e:	68fb      	ldr	r3, [r7, #12]
 8019660:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019664:	2b00      	cmp	r3, #0
 8019666:	d00e      	beq.n	8019686 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8019668:	68fb      	ldr	r3, [r7, #12]
 801966a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801966c:	2b00      	cmp	r3, #0
 801966e:	d10a      	bne.n	8019686 <tcp_write+0x6ae>
 8019670:	68fb      	ldr	r3, [r7, #12]
 8019672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019674:	2b00      	cmp	r3, #0
 8019676:	d106      	bne.n	8019686 <tcp_write+0x6ae>
 8019678:	4b06      	ldr	r3, [pc, #24]	; (8019694 <tcp_write+0x6bc>)
 801967a:	f240 3227 	movw	r2, #807	; 0x327
 801967e:	4906      	ldr	r1, [pc, #24]	; (8019698 <tcp_write+0x6c0>)
 8019680:	4806      	ldr	r0, [pc, #24]	; (801969c <tcp_write+0x6c4>)
 8019682:	f005 fd93 	bl	801f1ac <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8019686:	f04f 33ff 	mov.w	r3, #4294967295
}
 801968a:	4618      	mov	r0, r3
 801968c:	375c      	adds	r7, #92	; 0x5c
 801968e:	46bd      	mov	sp, r7
 8019690:	bd90      	pop	{r4, r7, pc}
 8019692:	bf00      	nop
 8019694:	080258fc 	.word	0x080258fc
 8019698:	08025c70 	.word	0x08025c70
 801969c:	08025950 	.word	0x08025950

080196a0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80196a0:	b590      	push	{r4, r7, lr}
 80196a2:	b08b      	sub	sp, #44	; 0x2c
 80196a4:	af02      	add	r7, sp, #8
 80196a6:	6078      	str	r0, [r7, #4]
 80196a8:	460b      	mov	r3, r1
 80196aa:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80196ac:	2300      	movs	r3, #0
 80196ae:	61fb      	str	r3, [r7, #28]
 80196b0:	2300      	movs	r3, #0
 80196b2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80196b4:	2300      	movs	r3, #0
 80196b6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	2b00      	cmp	r3, #0
 80196bc:	d106      	bne.n	80196cc <tcp_split_unsent_seg+0x2c>
 80196be:	4b95      	ldr	r3, [pc, #596]	; (8019914 <tcp_split_unsent_seg+0x274>)
 80196c0:	f240 324b 	movw	r2, #843	; 0x34b
 80196c4:	4994      	ldr	r1, [pc, #592]	; (8019918 <tcp_split_unsent_seg+0x278>)
 80196c6:	4895      	ldr	r0, [pc, #596]	; (801991c <tcp_split_unsent_seg+0x27c>)
 80196c8:	f005 fd70 	bl	801f1ac <iprintf>

  useg = pcb->unsent;
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80196d0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80196d2:	697b      	ldr	r3, [r7, #20]
 80196d4:	2b00      	cmp	r3, #0
 80196d6:	d102      	bne.n	80196de <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80196d8:	f04f 33ff 	mov.w	r3, #4294967295
 80196dc:	e116      	b.n	801990c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80196de:	887b      	ldrh	r3, [r7, #2]
 80196e0:	2b00      	cmp	r3, #0
 80196e2:	d109      	bne.n	80196f8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80196e4:	4b8b      	ldr	r3, [pc, #556]	; (8019914 <tcp_split_unsent_seg+0x274>)
 80196e6:	f240 3253 	movw	r2, #851	; 0x353
 80196ea:	498d      	ldr	r1, [pc, #564]	; (8019920 <tcp_split_unsent_seg+0x280>)
 80196ec:	488b      	ldr	r0, [pc, #556]	; (801991c <tcp_split_unsent_seg+0x27c>)
 80196ee:	f005 fd5d 	bl	801f1ac <iprintf>
    return ERR_VAL;
 80196f2:	f06f 0305 	mvn.w	r3, #5
 80196f6:	e109      	b.n	801990c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80196f8:	697b      	ldr	r3, [r7, #20]
 80196fa:	891b      	ldrh	r3, [r3, #8]
 80196fc:	887a      	ldrh	r2, [r7, #2]
 80196fe:	429a      	cmp	r2, r3
 8019700:	d301      	bcc.n	8019706 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8019702:	2300      	movs	r3, #0
 8019704:	e102      	b.n	801990c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8019706:	687b      	ldr	r3, [r7, #4]
 8019708:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801970a:	887a      	ldrh	r2, [r7, #2]
 801970c:	429a      	cmp	r2, r3
 801970e:	d906      	bls.n	801971e <tcp_split_unsent_seg+0x7e>
 8019710:	4b80      	ldr	r3, [pc, #512]	; (8019914 <tcp_split_unsent_seg+0x274>)
 8019712:	f240 325b 	movw	r2, #859	; 0x35b
 8019716:	4983      	ldr	r1, [pc, #524]	; (8019924 <tcp_split_unsent_seg+0x284>)
 8019718:	4880      	ldr	r0, [pc, #512]	; (801991c <tcp_split_unsent_seg+0x27c>)
 801971a:	f005 fd47 	bl	801f1ac <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801971e:	697b      	ldr	r3, [r7, #20]
 8019720:	891b      	ldrh	r3, [r3, #8]
 8019722:	2b00      	cmp	r3, #0
 8019724:	d106      	bne.n	8019734 <tcp_split_unsent_seg+0x94>
 8019726:	4b7b      	ldr	r3, [pc, #492]	; (8019914 <tcp_split_unsent_seg+0x274>)
 8019728:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801972c:	497e      	ldr	r1, [pc, #504]	; (8019928 <tcp_split_unsent_seg+0x288>)
 801972e:	487b      	ldr	r0, [pc, #492]	; (801991c <tcp_split_unsent_seg+0x27c>)
 8019730:	f005 fd3c 	bl	801f1ac <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8019734:	697b      	ldr	r3, [r7, #20]
 8019736:	7a9b      	ldrb	r3, [r3, #10]
 8019738:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801973a:	7bfb      	ldrb	r3, [r7, #15]
 801973c:	009b      	lsls	r3, r3, #2
 801973e:	b2db      	uxtb	r3, r3
 8019740:	f003 0304 	and.w	r3, r3, #4
 8019744:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8019746:	697b      	ldr	r3, [r7, #20]
 8019748:	891a      	ldrh	r2, [r3, #8]
 801974a:	887b      	ldrh	r3, [r7, #2]
 801974c:	1ad3      	subs	r3, r2, r3
 801974e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8019750:	7bbb      	ldrb	r3, [r7, #14]
 8019752:	b29a      	uxth	r2, r3
 8019754:	89bb      	ldrh	r3, [r7, #12]
 8019756:	4413      	add	r3, r2
 8019758:	b29b      	uxth	r3, r3
 801975a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801975e:	4619      	mov	r1, r3
 8019760:	2036      	movs	r0, #54	; 0x36
 8019762:	f7fa fc53 	bl	801400c <pbuf_alloc>
 8019766:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019768:	693b      	ldr	r3, [r7, #16]
 801976a:	2b00      	cmp	r3, #0
 801976c:	f000 80b7 	beq.w	80198de <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8019770:	697b      	ldr	r3, [r7, #20]
 8019772:	685b      	ldr	r3, [r3, #4]
 8019774:	891a      	ldrh	r2, [r3, #8]
 8019776:	697b      	ldr	r3, [r7, #20]
 8019778:	891b      	ldrh	r3, [r3, #8]
 801977a:	1ad3      	subs	r3, r2, r3
 801977c:	b29a      	uxth	r2, r3
 801977e:	887b      	ldrh	r3, [r7, #2]
 8019780:	4413      	add	r3, r2
 8019782:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8019784:	697b      	ldr	r3, [r7, #20]
 8019786:	6858      	ldr	r0, [r3, #4]
 8019788:	693b      	ldr	r3, [r7, #16]
 801978a:	685a      	ldr	r2, [r3, #4]
 801978c:	7bbb      	ldrb	r3, [r7, #14]
 801978e:	18d1      	adds	r1, r2, r3
 8019790:	897b      	ldrh	r3, [r7, #10]
 8019792:	89ba      	ldrh	r2, [r7, #12]
 8019794:	f7fb f924 	bl	80149e0 <pbuf_copy_partial>
 8019798:	4603      	mov	r3, r0
 801979a:	461a      	mov	r2, r3
 801979c:	89bb      	ldrh	r3, [r7, #12]
 801979e:	4293      	cmp	r3, r2
 80197a0:	f040 809f 	bne.w	80198e2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80197a4:	697b      	ldr	r3, [r7, #20]
 80197a6:	68db      	ldr	r3, [r3, #12]
 80197a8:	899b      	ldrh	r3, [r3, #12]
 80197aa:	b29b      	uxth	r3, r3
 80197ac:	4618      	mov	r0, r3
 80197ae:	f7f9 fbc9 	bl	8012f44 <lwip_htons>
 80197b2:	4603      	mov	r3, r0
 80197b4:	b2db      	uxtb	r3, r3
 80197b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80197ba:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80197bc:	2300      	movs	r3, #0
 80197be:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80197c0:	7efb      	ldrb	r3, [r7, #27]
 80197c2:	f003 0308 	and.w	r3, r3, #8
 80197c6:	2b00      	cmp	r3, #0
 80197c8:	d007      	beq.n	80197da <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80197ca:	7efb      	ldrb	r3, [r7, #27]
 80197cc:	f023 0308 	bic.w	r3, r3, #8
 80197d0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80197d2:	7ebb      	ldrb	r3, [r7, #26]
 80197d4:	f043 0308 	orr.w	r3, r3, #8
 80197d8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80197da:	7efb      	ldrb	r3, [r7, #27]
 80197dc:	f003 0301 	and.w	r3, r3, #1
 80197e0:	2b00      	cmp	r3, #0
 80197e2:	d007      	beq.n	80197f4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80197e4:	7efb      	ldrb	r3, [r7, #27]
 80197e6:	f023 0301 	bic.w	r3, r3, #1
 80197ea:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80197ec:	7ebb      	ldrb	r3, [r7, #26]
 80197ee:	f043 0301 	orr.w	r3, r3, #1
 80197f2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80197f4:	697b      	ldr	r3, [r7, #20]
 80197f6:	68db      	ldr	r3, [r3, #12]
 80197f8:	685b      	ldr	r3, [r3, #4]
 80197fa:	4618      	mov	r0, r3
 80197fc:	f7f9 fbb7 	bl	8012f6e <lwip_htonl>
 8019800:	4602      	mov	r2, r0
 8019802:	887b      	ldrh	r3, [r7, #2]
 8019804:	18d1      	adds	r1, r2, r3
 8019806:	7eba      	ldrb	r2, [r7, #26]
 8019808:	7bfb      	ldrb	r3, [r7, #15]
 801980a:	9300      	str	r3, [sp, #0]
 801980c:	460b      	mov	r3, r1
 801980e:	6939      	ldr	r1, [r7, #16]
 8019810:	6878      	ldr	r0, [r7, #4]
 8019812:	f7ff fa4f 	bl	8018cb4 <tcp_create_segment>
 8019816:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8019818:	69fb      	ldr	r3, [r7, #28]
 801981a:	2b00      	cmp	r3, #0
 801981c:	d063      	beq.n	80198e6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801981e:	697b      	ldr	r3, [r7, #20]
 8019820:	685b      	ldr	r3, [r3, #4]
 8019822:	4618      	mov	r0, r3
 8019824:	f7fa ff64 	bl	80146f0 <pbuf_clen>
 8019828:	4603      	mov	r3, r0
 801982a:	461a      	mov	r2, r3
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019832:	1a9b      	subs	r3, r3, r2
 8019834:	b29a      	uxth	r2, r3
 8019836:	687b      	ldr	r3, [r7, #4]
 8019838:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801983c:	697b      	ldr	r3, [r7, #20]
 801983e:	6858      	ldr	r0, [r3, #4]
 8019840:	697b      	ldr	r3, [r7, #20]
 8019842:	685b      	ldr	r3, [r3, #4]
 8019844:	891a      	ldrh	r2, [r3, #8]
 8019846:	89bb      	ldrh	r3, [r7, #12]
 8019848:	1ad3      	subs	r3, r2, r3
 801984a:	b29b      	uxth	r3, r3
 801984c:	4619      	mov	r1, r3
 801984e:	f7fa fd3b 	bl	80142c8 <pbuf_realloc>
  useg->len -= remainder;
 8019852:	697b      	ldr	r3, [r7, #20]
 8019854:	891a      	ldrh	r2, [r3, #8]
 8019856:	89bb      	ldrh	r3, [r7, #12]
 8019858:	1ad3      	subs	r3, r2, r3
 801985a:	b29a      	uxth	r2, r3
 801985c:	697b      	ldr	r3, [r7, #20]
 801985e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8019860:	697b      	ldr	r3, [r7, #20]
 8019862:	68db      	ldr	r3, [r3, #12]
 8019864:	899b      	ldrh	r3, [r3, #12]
 8019866:	b29c      	uxth	r4, r3
 8019868:	7efb      	ldrb	r3, [r7, #27]
 801986a:	b29b      	uxth	r3, r3
 801986c:	4618      	mov	r0, r3
 801986e:	f7f9 fb69 	bl	8012f44 <lwip_htons>
 8019872:	4603      	mov	r3, r0
 8019874:	461a      	mov	r2, r3
 8019876:	697b      	ldr	r3, [r7, #20]
 8019878:	68db      	ldr	r3, [r3, #12]
 801987a:	4322      	orrs	r2, r4
 801987c:	b292      	uxth	r2, r2
 801987e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8019880:	697b      	ldr	r3, [r7, #20]
 8019882:	685b      	ldr	r3, [r3, #4]
 8019884:	4618      	mov	r0, r3
 8019886:	f7fa ff33 	bl	80146f0 <pbuf_clen>
 801988a:	4603      	mov	r3, r0
 801988c:	461a      	mov	r2, r3
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019894:	4413      	add	r3, r2
 8019896:	b29a      	uxth	r2, r3
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801989e:	69fb      	ldr	r3, [r7, #28]
 80198a0:	685b      	ldr	r3, [r3, #4]
 80198a2:	4618      	mov	r0, r3
 80198a4:	f7fa ff24 	bl	80146f0 <pbuf_clen>
 80198a8:	4603      	mov	r3, r0
 80198aa:	461a      	mov	r2, r3
 80198ac:	687b      	ldr	r3, [r7, #4]
 80198ae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80198b2:	4413      	add	r3, r2
 80198b4:	b29a      	uxth	r2, r3
 80198b6:	687b      	ldr	r3, [r7, #4]
 80198b8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80198bc:	697b      	ldr	r3, [r7, #20]
 80198be:	681a      	ldr	r2, [r3, #0]
 80198c0:	69fb      	ldr	r3, [r7, #28]
 80198c2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80198c4:	697b      	ldr	r3, [r7, #20]
 80198c6:	69fa      	ldr	r2, [r7, #28]
 80198c8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80198ca:	69fb      	ldr	r3, [r7, #28]
 80198cc:	681b      	ldr	r3, [r3, #0]
 80198ce:	2b00      	cmp	r3, #0
 80198d0:	d103      	bne.n	80198da <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80198d2:	687b      	ldr	r3, [r7, #4]
 80198d4:	2200      	movs	r2, #0
 80198d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80198da:	2300      	movs	r3, #0
 80198dc:	e016      	b.n	801990c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80198de:	bf00      	nop
 80198e0:	e002      	b.n	80198e8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80198e2:	bf00      	nop
 80198e4:	e000      	b.n	80198e8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80198e6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80198e8:	69fb      	ldr	r3, [r7, #28]
 80198ea:	2b00      	cmp	r3, #0
 80198ec:	d006      	beq.n	80198fc <tcp_split_unsent_seg+0x25c>
 80198ee:	4b09      	ldr	r3, [pc, #36]	; (8019914 <tcp_split_unsent_seg+0x274>)
 80198f0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80198f4:	490d      	ldr	r1, [pc, #52]	; (801992c <tcp_split_unsent_seg+0x28c>)
 80198f6:	4809      	ldr	r0, [pc, #36]	; (801991c <tcp_split_unsent_seg+0x27c>)
 80198f8:	f005 fc58 	bl	801f1ac <iprintf>
  if (p != NULL) {
 80198fc:	693b      	ldr	r3, [r7, #16]
 80198fe:	2b00      	cmp	r3, #0
 8019900:	d002      	beq.n	8019908 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8019902:	6938      	ldr	r0, [r7, #16]
 8019904:	f7fa fe66 	bl	80145d4 <pbuf_free>
  }

  return ERR_MEM;
 8019908:	f04f 33ff 	mov.w	r3, #4294967295
}
 801990c:	4618      	mov	r0, r3
 801990e:	3724      	adds	r7, #36	; 0x24
 8019910:	46bd      	mov	sp, r7
 8019912:	bd90      	pop	{r4, r7, pc}
 8019914:	080258fc 	.word	0x080258fc
 8019918:	08025c90 	.word	0x08025c90
 801991c:	08025950 	.word	0x08025950
 8019920:	08025cb4 	.word	0x08025cb4
 8019924:	08025cd8 	.word	0x08025cd8
 8019928:	08025ce8 	.word	0x08025ce8
 801992c:	08025cf8 	.word	0x08025cf8

08019930 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8019930:	b590      	push	{r4, r7, lr}
 8019932:	b085      	sub	sp, #20
 8019934:	af00      	add	r7, sp, #0
 8019936:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8019938:	687b      	ldr	r3, [r7, #4]
 801993a:	2b00      	cmp	r3, #0
 801993c:	d106      	bne.n	801994c <tcp_send_fin+0x1c>
 801993e:	4b21      	ldr	r3, [pc, #132]	; (80199c4 <tcp_send_fin+0x94>)
 8019940:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8019944:	4920      	ldr	r1, [pc, #128]	; (80199c8 <tcp_send_fin+0x98>)
 8019946:	4821      	ldr	r0, [pc, #132]	; (80199cc <tcp_send_fin+0x9c>)
 8019948:	f005 fc30 	bl	801f1ac <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019950:	2b00      	cmp	r3, #0
 8019952:	d02e      	beq.n	80199b2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019954:	687b      	ldr	r3, [r7, #4]
 8019956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019958:	60fb      	str	r3, [r7, #12]
 801995a:	e002      	b.n	8019962 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801995c:	68fb      	ldr	r3, [r7, #12]
 801995e:	681b      	ldr	r3, [r3, #0]
 8019960:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8019962:	68fb      	ldr	r3, [r7, #12]
 8019964:	681b      	ldr	r3, [r3, #0]
 8019966:	2b00      	cmp	r3, #0
 8019968:	d1f8      	bne.n	801995c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801996a:	68fb      	ldr	r3, [r7, #12]
 801996c:	68db      	ldr	r3, [r3, #12]
 801996e:	899b      	ldrh	r3, [r3, #12]
 8019970:	b29b      	uxth	r3, r3
 8019972:	4618      	mov	r0, r3
 8019974:	f7f9 fae6 	bl	8012f44 <lwip_htons>
 8019978:	4603      	mov	r3, r0
 801997a:	b2db      	uxtb	r3, r3
 801997c:	f003 0307 	and.w	r3, r3, #7
 8019980:	2b00      	cmp	r3, #0
 8019982:	d116      	bne.n	80199b2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8019984:	68fb      	ldr	r3, [r7, #12]
 8019986:	68db      	ldr	r3, [r3, #12]
 8019988:	899b      	ldrh	r3, [r3, #12]
 801998a:	b29c      	uxth	r4, r3
 801998c:	2001      	movs	r0, #1
 801998e:	f7f9 fad9 	bl	8012f44 <lwip_htons>
 8019992:	4603      	mov	r3, r0
 8019994:	461a      	mov	r2, r3
 8019996:	68fb      	ldr	r3, [r7, #12]
 8019998:	68db      	ldr	r3, [r3, #12]
 801999a:	4322      	orrs	r2, r4
 801999c:	b292      	uxth	r2, r2
 801999e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80199a0:	687b      	ldr	r3, [r7, #4]
 80199a2:	8b5b      	ldrh	r3, [r3, #26]
 80199a4:	f043 0320 	orr.w	r3, r3, #32
 80199a8:	b29a      	uxth	r2, r3
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80199ae:	2300      	movs	r3, #0
 80199b0:	e004      	b.n	80199bc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80199b2:	2101      	movs	r1, #1
 80199b4:	6878      	ldr	r0, [r7, #4]
 80199b6:	f000 f80b 	bl	80199d0 <tcp_enqueue_flags>
 80199ba:	4603      	mov	r3, r0
}
 80199bc:	4618      	mov	r0, r3
 80199be:	3714      	adds	r7, #20
 80199c0:	46bd      	mov	sp, r7
 80199c2:	bd90      	pop	{r4, r7, pc}
 80199c4:	080258fc 	.word	0x080258fc
 80199c8:	08025d04 	.word	0x08025d04
 80199cc:	08025950 	.word	0x08025950

080199d0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80199d0:	b580      	push	{r7, lr}
 80199d2:	b08a      	sub	sp, #40	; 0x28
 80199d4:	af02      	add	r7, sp, #8
 80199d6:	6078      	str	r0, [r7, #4]
 80199d8:	460b      	mov	r3, r1
 80199da:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80199dc:	2300      	movs	r3, #0
 80199de:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80199e0:	2300      	movs	r3, #0
 80199e2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80199e4:	78fb      	ldrb	r3, [r7, #3]
 80199e6:	f003 0303 	and.w	r3, r3, #3
 80199ea:	2b00      	cmp	r3, #0
 80199ec:	d106      	bne.n	80199fc <tcp_enqueue_flags+0x2c>
 80199ee:	4b67      	ldr	r3, [pc, #412]	; (8019b8c <tcp_enqueue_flags+0x1bc>)
 80199f0:	f240 4211 	movw	r2, #1041	; 0x411
 80199f4:	4966      	ldr	r1, [pc, #408]	; (8019b90 <tcp_enqueue_flags+0x1c0>)
 80199f6:	4867      	ldr	r0, [pc, #412]	; (8019b94 <tcp_enqueue_flags+0x1c4>)
 80199f8:	f005 fbd8 	bl	801f1ac <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	2b00      	cmp	r3, #0
 8019a00:	d106      	bne.n	8019a10 <tcp_enqueue_flags+0x40>
 8019a02:	4b62      	ldr	r3, [pc, #392]	; (8019b8c <tcp_enqueue_flags+0x1bc>)
 8019a04:	f240 4213 	movw	r2, #1043	; 0x413
 8019a08:	4963      	ldr	r1, [pc, #396]	; (8019b98 <tcp_enqueue_flags+0x1c8>)
 8019a0a:	4862      	ldr	r0, [pc, #392]	; (8019b94 <tcp_enqueue_flags+0x1c4>)
 8019a0c:	f005 fbce 	bl	801f1ac <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8019a10:	78fb      	ldrb	r3, [r7, #3]
 8019a12:	f003 0302 	and.w	r3, r3, #2
 8019a16:	2b00      	cmp	r3, #0
 8019a18:	d001      	beq.n	8019a1e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8019a1a:	2301      	movs	r3, #1
 8019a1c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019a1e:	7ffb      	ldrb	r3, [r7, #31]
 8019a20:	009b      	lsls	r3, r3, #2
 8019a22:	b2db      	uxtb	r3, r3
 8019a24:	f003 0304 	and.w	r3, r3, #4
 8019a28:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8019a2a:	7dfb      	ldrb	r3, [r7, #23]
 8019a2c:	b29b      	uxth	r3, r3
 8019a2e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019a32:	4619      	mov	r1, r3
 8019a34:	2036      	movs	r0, #54	; 0x36
 8019a36:	f7fa fae9 	bl	801400c <pbuf_alloc>
 8019a3a:	6138      	str	r0, [r7, #16]
 8019a3c:	693b      	ldr	r3, [r7, #16]
 8019a3e:	2b00      	cmp	r3, #0
 8019a40:	d109      	bne.n	8019a56 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019a42:	687b      	ldr	r3, [r7, #4]
 8019a44:	8b5b      	ldrh	r3, [r3, #26]
 8019a46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019a4a:	b29a      	uxth	r2, r3
 8019a4c:	687b      	ldr	r3, [r7, #4]
 8019a4e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8019a50:	f04f 33ff 	mov.w	r3, #4294967295
 8019a54:	e095      	b.n	8019b82 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8019a56:	693b      	ldr	r3, [r7, #16]
 8019a58:	895a      	ldrh	r2, [r3, #10]
 8019a5a:	7dfb      	ldrb	r3, [r7, #23]
 8019a5c:	b29b      	uxth	r3, r3
 8019a5e:	429a      	cmp	r2, r3
 8019a60:	d206      	bcs.n	8019a70 <tcp_enqueue_flags+0xa0>
 8019a62:	4b4a      	ldr	r3, [pc, #296]	; (8019b8c <tcp_enqueue_flags+0x1bc>)
 8019a64:	f240 4239 	movw	r2, #1081	; 0x439
 8019a68:	494c      	ldr	r1, [pc, #304]	; (8019b9c <tcp_enqueue_flags+0x1cc>)
 8019a6a:	484a      	ldr	r0, [pc, #296]	; (8019b94 <tcp_enqueue_flags+0x1c4>)
 8019a6c:	f005 fb9e 	bl	801f1ac <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8019a70:	687b      	ldr	r3, [r7, #4]
 8019a72:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8019a74:	78fa      	ldrb	r2, [r7, #3]
 8019a76:	7ffb      	ldrb	r3, [r7, #31]
 8019a78:	9300      	str	r3, [sp, #0]
 8019a7a:	460b      	mov	r3, r1
 8019a7c:	6939      	ldr	r1, [r7, #16]
 8019a7e:	6878      	ldr	r0, [r7, #4]
 8019a80:	f7ff f918 	bl	8018cb4 <tcp_create_segment>
 8019a84:	60f8      	str	r0, [r7, #12]
 8019a86:	68fb      	ldr	r3, [r7, #12]
 8019a88:	2b00      	cmp	r3, #0
 8019a8a:	d109      	bne.n	8019aa0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	8b5b      	ldrh	r3, [r3, #26]
 8019a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019a94:	b29a      	uxth	r2, r3
 8019a96:	687b      	ldr	r3, [r7, #4]
 8019a98:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8019a9a:	f04f 33ff 	mov.w	r3, #4294967295
 8019a9e:	e070      	b.n	8019b82 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8019aa0:	68fb      	ldr	r3, [r7, #12]
 8019aa2:	68db      	ldr	r3, [r3, #12]
 8019aa4:	f003 0303 	and.w	r3, r3, #3
 8019aa8:	2b00      	cmp	r3, #0
 8019aaa:	d006      	beq.n	8019aba <tcp_enqueue_flags+0xea>
 8019aac:	4b37      	ldr	r3, [pc, #220]	; (8019b8c <tcp_enqueue_flags+0x1bc>)
 8019aae:	f240 4242 	movw	r2, #1090	; 0x442
 8019ab2:	493b      	ldr	r1, [pc, #236]	; (8019ba0 <tcp_enqueue_flags+0x1d0>)
 8019ab4:	4837      	ldr	r0, [pc, #220]	; (8019b94 <tcp_enqueue_flags+0x1c4>)
 8019ab6:	f005 fb79 	bl	801f1ac <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8019aba:	68fb      	ldr	r3, [r7, #12]
 8019abc:	891b      	ldrh	r3, [r3, #8]
 8019abe:	2b00      	cmp	r3, #0
 8019ac0:	d006      	beq.n	8019ad0 <tcp_enqueue_flags+0x100>
 8019ac2:	4b32      	ldr	r3, [pc, #200]	; (8019b8c <tcp_enqueue_flags+0x1bc>)
 8019ac4:	f240 4243 	movw	r2, #1091	; 0x443
 8019ac8:	4936      	ldr	r1, [pc, #216]	; (8019ba4 <tcp_enqueue_flags+0x1d4>)
 8019aca:	4832      	ldr	r0, [pc, #200]	; (8019b94 <tcp_enqueue_flags+0x1c4>)
 8019acc:	f005 fb6e 	bl	801f1ac <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8019ad0:	687b      	ldr	r3, [r7, #4]
 8019ad2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019ad4:	2b00      	cmp	r3, #0
 8019ad6:	d103      	bne.n	8019ae0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8019ad8:	687b      	ldr	r3, [r7, #4]
 8019ada:	68fa      	ldr	r2, [r7, #12]
 8019adc:	66da      	str	r2, [r3, #108]	; 0x6c
 8019ade:	e00d      	b.n	8019afc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8019ae0:	687b      	ldr	r3, [r7, #4]
 8019ae2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019ae4:	61bb      	str	r3, [r7, #24]
 8019ae6:	e002      	b.n	8019aee <tcp_enqueue_flags+0x11e>
 8019ae8:	69bb      	ldr	r3, [r7, #24]
 8019aea:	681b      	ldr	r3, [r3, #0]
 8019aec:	61bb      	str	r3, [r7, #24]
 8019aee:	69bb      	ldr	r3, [r7, #24]
 8019af0:	681b      	ldr	r3, [r3, #0]
 8019af2:	2b00      	cmp	r3, #0
 8019af4:	d1f8      	bne.n	8019ae8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8019af6:	69bb      	ldr	r3, [r7, #24]
 8019af8:	68fa      	ldr	r2, [r7, #12]
 8019afa:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8019afc:	687b      	ldr	r3, [r7, #4]
 8019afe:	2200      	movs	r2, #0
 8019b00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8019b04:	78fb      	ldrb	r3, [r7, #3]
 8019b06:	f003 0302 	and.w	r3, r3, #2
 8019b0a:	2b00      	cmp	r3, #0
 8019b0c:	d104      	bne.n	8019b18 <tcp_enqueue_flags+0x148>
 8019b0e:	78fb      	ldrb	r3, [r7, #3]
 8019b10:	f003 0301 	and.w	r3, r3, #1
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d004      	beq.n	8019b22 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019b1c:	1c5a      	adds	r2, r3, #1
 8019b1e:	687b      	ldr	r3, [r7, #4]
 8019b20:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8019b22:	78fb      	ldrb	r3, [r7, #3]
 8019b24:	f003 0301 	and.w	r3, r3, #1
 8019b28:	2b00      	cmp	r3, #0
 8019b2a:	d006      	beq.n	8019b3a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	8b5b      	ldrh	r3, [r3, #26]
 8019b30:	f043 0320 	orr.w	r3, r3, #32
 8019b34:	b29a      	uxth	r2, r3
 8019b36:	687b      	ldr	r3, [r7, #4]
 8019b38:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8019b3a:	68fb      	ldr	r3, [r7, #12]
 8019b3c:	685b      	ldr	r3, [r3, #4]
 8019b3e:	4618      	mov	r0, r3
 8019b40:	f7fa fdd6 	bl	80146f0 <pbuf_clen>
 8019b44:	4603      	mov	r3, r0
 8019b46:	461a      	mov	r2, r3
 8019b48:	687b      	ldr	r3, [r7, #4]
 8019b4a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019b4e:	4413      	add	r3, r2
 8019b50:	b29a      	uxth	r2, r3
 8019b52:	687b      	ldr	r3, [r7, #4]
 8019b54:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8019b58:	687b      	ldr	r3, [r7, #4]
 8019b5a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019b5e:	2b00      	cmp	r3, #0
 8019b60:	d00e      	beq.n	8019b80 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019b66:	2b00      	cmp	r3, #0
 8019b68:	d10a      	bne.n	8019b80 <tcp_enqueue_flags+0x1b0>
 8019b6a:	687b      	ldr	r3, [r7, #4]
 8019b6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019b6e:	2b00      	cmp	r3, #0
 8019b70:	d106      	bne.n	8019b80 <tcp_enqueue_flags+0x1b0>
 8019b72:	4b06      	ldr	r3, [pc, #24]	; (8019b8c <tcp_enqueue_flags+0x1bc>)
 8019b74:	f240 4265 	movw	r2, #1125	; 0x465
 8019b78:	490b      	ldr	r1, [pc, #44]	; (8019ba8 <tcp_enqueue_flags+0x1d8>)
 8019b7a:	4806      	ldr	r0, [pc, #24]	; (8019b94 <tcp_enqueue_flags+0x1c4>)
 8019b7c:	f005 fb16 	bl	801f1ac <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8019b80:	2300      	movs	r3, #0
}
 8019b82:	4618      	mov	r0, r3
 8019b84:	3720      	adds	r7, #32
 8019b86:	46bd      	mov	sp, r7
 8019b88:	bd80      	pop	{r7, pc}
 8019b8a:	bf00      	nop
 8019b8c:	080258fc 	.word	0x080258fc
 8019b90:	08025d20 	.word	0x08025d20
 8019b94:	08025950 	.word	0x08025950
 8019b98:	08025d78 	.word	0x08025d78
 8019b9c:	08025d98 	.word	0x08025d98
 8019ba0:	08025dd4 	.word	0x08025dd4
 8019ba4:	08025dec 	.word	0x08025dec
 8019ba8:	08025e18 	.word	0x08025e18

08019bac <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8019bac:	b5b0      	push	{r4, r5, r7, lr}
 8019bae:	b08a      	sub	sp, #40	; 0x28
 8019bb0:	af00      	add	r7, sp, #0
 8019bb2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	2b00      	cmp	r3, #0
 8019bb8:	d106      	bne.n	8019bc8 <tcp_output+0x1c>
 8019bba:	4b9e      	ldr	r3, [pc, #632]	; (8019e34 <tcp_output+0x288>)
 8019bbc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8019bc0:	499d      	ldr	r1, [pc, #628]	; (8019e38 <tcp_output+0x28c>)
 8019bc2:	489e      	ldr	r0, [pc, #632]	; (8019e3c <tcp_output+0x290>)
 8019bc4:	f005 faf2 	bl	801f1ac <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8019bc8:	687b      	ldr	r3, [r7, #4]
 8019bca:	7d1b      	ldrb	r3, [r3, #20]
 8019bcc:	2b01      	cmp	r3, #1
 8019bce:	d106      	bne.n	8019bde <tcp_output+0x32>
 8019bd0:	4b98      	ldr	r3, [pc, #608]	; (8019e34 <tcp_output+0x288>)
 8019bd2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8019bd6:	499a      	ldr	r1, [pc, #616]	; (8019e40 <tcp_output+0x294>)
 8019bd8:	4898      	ldr	r0, [pc, #608]	; (8019e3c <tcp_output+0x290>)
 8019bda:	f005 fae7 	bl	801f1ac <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8019bde:	4b99      	ldr	r3, [pc, #612]	; (8019e44 <tcp_output+0x298>)
 8019be0:	681b      	ldr	r3, [r3, #0]
 8019be2:	687a      	ldr	r2, [r7, #4]
 8019be4:	429a      	cmp	r2, r3
 8019be6:	d101      	bne.n	8019bec <tcp_output+0x40>
    return ERR_OK;
 8019be8:	2300      	movs	r3, #0
 8019bea:	e1ce      	b.n	8019f8a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8019bec:	687b      	ldr	r3, [r7, #4]
 8019bee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8019bf2:	687b      	ldr	r3, [r7, #4]
 8019bf4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019bf8:	4293      	cmp	r3, r2
 8019bfa:	bf28      	it	cs
 8019bfc:	4613      	movcs	r3, r2
 8019bfe:	b29b      	uxth	r3, r3
 8019c00:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8019c02:	687b      	ldr	r3, [r7, #4]
 8019c04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019c06:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8019c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	d10b      	bne.n	8019c26 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8019c0e:	687b      	ldr	r3, [r7, #4]
 8019c10:	8b5b      	ldrh	r3, [r3, #26]
 8019c12:	f003 0302 	and.w	r3, r3, #2
 8019c16:	2b00      	cmp	r3, #0
 8019c18:	f000 81aa 	beq.w	8019f70 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8019c1c:	6878      	ldr	r0, [r7, #4]
 8019c1e:	f000 fdcb 	bl	801a7b8 <tcp_send_empty_ack>
 8019c22:	4603      	mov	r3, r0
 8019c24:	e1b1      	b.n	8019f8a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8019c26:	6879      	ldr	r1, [r7, #4]
 8019c28:	687b      	ldr	r3, [r7, #4]
 8019c2a:	3304      	adds	r3, #4
 8019c2c:	461a      	mov	r2, r3
 8019c2e:	6878      	ldr	r0, [r7, #4]
 8019c30:	f7ff f824 	bl	8018c7c <tcp_route>
 8019c34:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8019c36:	697b      	ldr	r3, [r7, #20]
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	d102      	bne.n	8019c42 <tcp_output+0x96>
    return ERR_RTE;
 8019c3c:	f06f 0303 	mvn.w	r3, #3
 8019c40:	e1a3      	b.n	8019f8a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8019c42:	687b      	ldr	r3, [r7, #4]
 8019c44:	2b00      	cmp	r3, #0
 8019c46:	d003      	beq.n	8019c50 <tcp_output+0xa4>
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	681b      	ldr	r3, [r3, #0]
 8019c4c:	2b00      	cmp	r3, #0
 8019c4e:	d111      	bne.n	8019c74 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8019c50:	697b      	ldr	r3, [r7, #20]
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d002      	beq.n	8019c5c <tcp_output+0xb0>
 8019c56:	697b      	ldr	r3, [r7, #20]
 8019c58:	3304      	adds	r3, #4
 8019c5a:	e000      	b.n	8019c5e <tcp_output+0xb2>
 8019c5c:	2300      	movs	r3, #0
 8019c5e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8019c60:	693b      	ldr	r3, [r7, #16]
 8019c62:	2b00      	cmp	r3, #0
 8019c64:	d102      	bne.n	8019c6c <tcp_output+0xc0>
      return ERR_RTE;
 8019c66:	f06f 0303 	mvn.w	r3, #3
 8019c6a:	e18e      	b.n	8019f8a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8019c6c:	693b      	ldr	r3, [r7, #16]
 8019c6e:	681a      	ldr	r2, [r3, #0]
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8019c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c76:	68db      	ldr	r3, [r3, #12]
 8019c78:	685b      	ldr	r3, [r3, #4]
 8019c7a:	4618      	mov	r0, r3
 8019c7c:	f7f9 f977 	bl	8012f6e <lwip_htonl>
 8019c80:	4602      	mov	r2, r0
 8019c82:	687b      	ldr	r3, [r7, #4]
 8019c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019c86:	1ad3      	subs	r3, r2, r3
 8019c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019c8a:	8912      	ldrh	r2, [r2, #8]
 8019c8c:	4413      	add	r3, r2
 8019c8e:	69ba      	ldr	r2, [r7, #24]
 8019c90:	429a      	cmp	r2, r3
 8019c92:	d227      	bcs.n	8019ce4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8019c9a:	461a      	mov	r2, r3
 8019c9c:	69bb      	ldr	r3, [r7, #24]
 8019c9e:	4293      	cmp	r3, r2
 8019ca0:	d114      	bne.n	8019ccc <tcp_output+0x120>
 8019ca2:	687b      	ldr	r3, [r7, #4]
 8019ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019ca6:	2b00      	cmp	r3, #0
 8019ca8:	d110      	bne.n	8019ccc <tcp_output+0x120>
 8019caa:	687b      	ldr	r3, [r7, #4]
 8019cac:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8019cb0:	2b00      	cmp	r3, #0
 8019cb2:	d10b      	bne.n	8019ccc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	2200      	movs	r2, #0
 8019cb8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8019cbc:	687b      	ldr	r3, [r7, #4]
 8019cbe:	2201      	movs	r2, #1
 8019cc0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	2200      	movs	r2, #0
 8019cc8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	8b5b      	ldrh	r3, [r3, #26]
 8019cd0:	f003 0302 	and.w	r3, r3, #2
 8019cd4:	2b00      	cmp	r3, #0
 8019cd6:	f000 814d 	beq.w	8019f74 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8019cda:	6878      	ldr	r0, [r7, #4]
 8019cdc:	f000 fd6c 	bl	801a7b8 <tcp_send_empty_ack>
 8019ce0:	4603      	mov	r3, r0
 8019ce2:	e152      	b.n	8019f8a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	2200      	movs	r2, #0
 8019ce8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019cf0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8019cf2:	6a3b      	ldr	r3, [r7, #32]
 8019cf4:	2b00      	cmp	r3, #0
 8019cf6:	f000 811c 	beq.w	8019f32 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8019cfa:	e002      	b.n	8019d02 <tcp_output+0x156>
 8019cfc:	6a3b      	ldr	r3, [r7, #32]
 8019cfe:	681b      	ldr	r3, [r3, #0]
 8019d00:	623b      	str	r3, [r7, #32]
 8019d02:	6a3b      	ldr	r3, [r7, #32]
 8019d04:	681b      	ldr	r3, [r3, #0]
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d1f8      	bne.n	8019cfc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8019d0a:	e112      	b.n	8019f32 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8019d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d0e:	68db      	ldr	r3, [r3, #12]
 8019d10:	899b      	ldrh	r3, [r3, #12]
 8019d12:	b29b      	uxth	r3, r3
 8019d14:	4618      	mov	r0, r3
 8019d16:	f7f9 f915 	bl	8012f44 <lwip_htons>
 8019d1a:	4603      	mov	r3, r0
 8019d1c:	b2db      	uxtb	r3, r3
 8019d1e:	f003 0304 	and.w	r3, r3, #4
 8019d22:	2b00      	cmp	r3, #0
 8019d24:	d006      	beq.n	8019d34 <tcp_output+0x188>
 8019d26:	4b43      	ldr	r3, [pc, #268]	; (8019e34 <tcp_output+0x288>)
 8019d28:	f240 5236 	movw	r2, #1334	; 0x536
 8019d2c:	4946      	ldr	r1, [pc, #280]	; (8019e48 <tcp_output+0x29c>)
 8019d2e:	4843      	ldr	r0, [pc, #268]	; (8019e3c <tcp_output+0x290>)
 8019d30:	f005 fa3c 	bl	801f1ac <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8019d34:	687b      	ldr	r3, [r7, #4]
 8019d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019d38:	2b00      	cmp	r3, #0
 8019d3a:	d01f      	beq.n	8019d7c <tcp_output+0x1d0>
 8019d3c:	687b      	ldr	r3, [r7, #4]
 8019d3e:	8b5b      	ldrh	r3, [r3, #26]
 8019d40:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8019d44:	2b00      	cmp	r3, #0
 8019d46:	d119      	bne.n	8019d7c <tcp_output+0x1d0>
 8019d48:	687b      	ldr	r3, [r7, #4]
 8019d4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019d4c:	2b00      	cmp	r3, #0
 8019d4e:	d00b      	beq.n	8019d68 <tcp_output+0x1bc>
 8019d50:	687b      	ldr	r3, [r7, #4]
 8019d52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019d54:	681b      	ldr	r3, [r3, #0]
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	d110      	bne.n	8019d7c <tcp_output+0x1d0>
 8019d5a:	687b      	ldr	r3, [r7, #4]
 8019d5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019d5e:	891a      	ldrh	r2, [r3, #8]
 8019d60:	687b      	ldr	r3, [r7, #4]
 8019d62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8019d64:	429a      	cmp	r2, r3
 8019d66:	d209      	bcs.n	8019d7c <tcp_output+0x1d0>
 8019d68:	687b      	ldr	r3, [r7, #4]
 8019d6a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8019d6e:	2b00      	cmp	r3, #0
 8019d70:	d004      	beq.n	8019d7c <tcp_output+0x1d0>
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8019d78:	2b08      	cmp	r3, #8
 8019d7a:	d901      	bls.n	8019d80 <tcp_output+0x1d4>
 8019d7c:	2301      	movs	r3, #1
 8019d7e:	e000      	b.n	8019d82 <tcp_output+0x1d6>
 8019d80:	2300      	movs	r3, #0
 8019d82:	2b00      	cmp	r3, #0
 8019d84:	d106      	bne.n	8019d94 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8019d86:	687b      	ldr	r3, [r7, #4]
 8019d88:	8b5b      	ldrh	r3, [r3, #26]
 8019d8a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8019d8e:	2b00      	cmp	r3, #0
 8019d90:	f000 80e4 	beq.w	8019f5c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8019d94:	687b      	ldr	r3, [r7, #4]
 8019d96:	7d1b      	ldrb	r3, [r3, #20]
 8019d98:	2b02      	cmp	r3, #2
 8019d9a:	d00d      	beq.n	8019db8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8019d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019d9e:	68db      	ldr	r3, [r3, #12]
 8019da0:	899b      	ldrh	r3, [r3, #12]
 8019da2:	b29c      	uxth	r4, r3
 8019da4:	2010      	movs	r0, #16
 8019da6:	f7f9 f8cd 	bl	8012f44 <lwip_htons>
 8019daa:	4603      	mov	r3, r0
 8019dac:	461a      	mov	r2, r3
 8019dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019db0:	68db      	ldr	r3, [r3, #12]
 8019db2:	4322      	orrs	r2, r4
 8019db4:	b292      	uxth	r2, r2
 8019db6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8019db8:	697a      	ldr	r2, [r7, #20]
 8019dba:	6879      	ldr	r1, [r7, #4]
 8019dbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019dbe:	f000 f909 	bl	8019fd4 <tcp_output_segment>
 8019dc2:	4603      	mov	r3, r0
 8019dc4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8019dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019dca:	2b00      	cmp	r3, #0
 8019dcc:	d009      	beq.n	8019de2 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	8b5b      	ldrh	r3, [r3, #26]
 8019dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019dd6:	b29a      	uxth	r2, r3
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	835a      	strh	r2, [r3, #26]
      return err;
 8019ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019de0:	e0d3      	b.n	8019f8a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8019de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019de4:	681a      	ldr	r2, [r3, #0]
 8019de6:	687b      	ldr	r3, [r7, #4]
 8019de8:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8019dea:	687b      	ldr	r3, [r7, #4]
 8019dec:	7d1b      	ldrb	r3, [r3, #20]
 8019dee:	2b02      	cmp	r3, #2
 8019df0:	d006      	beq.n	8019e00 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019df2:	687b      	ldr	r3, [r7, #4]
 8019df4:	8b5b      	ldrh	r3, [r3, #26]
 8019df6:	f023 0303 	bic.w	r3, r3, #3
 8019dfa:	b29a      	uxth	r2, r3
 8019dfc:	687b      	ldr	r3, [r7, #4]
 8019dfe:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8019e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e02:	68db      	ldr	r3, [r3, #12]
 8019e04:	685b      	ldr	r3, [r3, #4]
 8019e06:	4618      	mov	r0, r3
 8019e08:	f7f9 f8b1 	bl	8012f6e <lwip_htonl>
 8019e0c:	4604      	mov	r4, r0
 8019e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e10:	891b      	ldrh	r3, [r3, #8]
 8019e12:	461d      	mov	r5, r3
 8019e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e16:	68db      	ldr	r3, [r3, #12]
 8019e18:	899b      	ldrh	r3, [r3, #12]
 8019e1a:	b29b      	uxth	r3, r3
 8019e1c:	4618      	mov	r0, r3
 8019e1e:	f7f9 f891 	bl	8012f44 <lwip_htons>
 8019e22:	4603      	mov	r3, r0
 8019e24:	b2db      	uxtb	r3, r3
 8019e26:	f003 0303 	and.w	r3, r3, #3
 8019e2a:	2b00      	cmp	r3, #0
 8019e2c:	d00e      	beq.n	8019e4c <tcp_output+0x2a0>
 8019e2e:	2301      	movs	r3, #1
 8019e30:	e00d      	b.n	8019e4e <tcp_output+0x2a2>
 8019e32:	bf00      	nop
 8019e34:	080258fc 	.word	0x080258fc
 8019e38:	08025e40 	.word	0x08025e40
 8019e3c:	08025950 	.word	0x08025950
 8019e40:	08025e58 	.word	0x08025e58
 8019e44:	2000e184 	.word	0x2000e184
 8019e48:	08025e80 	.word	0x08025e80
 8019e4c:	2300      	movs	r3, #0
 8019e4e:	442b      	add	r3, r5
 8019e50:	4423      	add	r3, r4
 8019e52:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019e58:	68bb      	ldr	r3, [r7, #8]
 8019e5a:	1ad3      	subs	r3, r2, r3
 8019e5c:	2b00      	cmp	r3, #0
 8019e5e:	da02      	bge.n	8019e66 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8019e60:	687b      	ldr	r3, [r7, #4]
 8019e62:	68ba      	ldr	r2, [r7, #8]
 8019e64:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8019e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e68:	891b      	ldrh	r3, [r3, #8]
 8019e6a:	461c      	mov	r4, r3
 8019e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e6e:	68db      	ldr	r3, [r3, #12]
 8019e70:	899b      	ldrh	r3, [r3, #12]
 8019e72:	b29b      	uxth	r3, r3
 8019e74:	4618      	mov	r0, r3
 8019e76:	f7f9 f865 	bl	8012f44 <lwip_htons>
 8019e7a:	4603      	mov	r3, r0
 8019e7c:	b2db      	uxtb	r3, r3
 8019e7e:	f003 0303 	and.w	r3, r3, #3
 8019e82:	2b00      	cmp	r3, #0
 8019e84:	d001      	beq.n	8019e8a <tcp_output+0x2de>
 8019e86:	2301      	movs	r3, #1
 8019e88:	e000      	b.n	8019e8c <tcp_output+0x2e0>
 8019e8a:	2300      	movs	r3, #0
 8019e8c:	4423      	add	r3, r4
 8019e8e:	2b00      	cmp	r3, #0
 8019e90:	d049      	beq.n	8019f26 <tcp_output+0x37a>
      seg->next = NULL;
 8019e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019e94:	2200      	movs	r2, #0
 8019e96:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8019e98:	687b      	ldr	r3, [r7, #4]
 8019e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019e9c:	2b00      	cmp	r3, #0
 8019e9e:	d105      	bne.n	8019eac <tcp_output+0x300>
        pcb->unacked = seg;
 8019ea0:	687b      	ldr	r3, [r7, #4]
 8019ea2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019ea4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8019ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ea8:	623b      	str	r3, [r7, #32]
 8019eaa:	e03f      	b.n	8019f2c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8019eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019eae:	68db      	ldr	r3, [r3, #12]
 8019eb0:	685b      	ldr	r3, [r3, #4]
 8019eb2:	4618      	mov	r0, r3
 8019eb4:	f7f9 f85b 	bl	8012f6e <lwip_htonl>
 8019eb8:	4604      	mov	r4, r0
 8019eba:	6a3b      	ldr	r3, [r7, #32]
 8019ebc:	68db      	ldr	r3, [r3, #12]
 8019ebe:	685b      	ldr	r3, [r3, #4]
 8019ec0:	4618      	mov	r0, r3
 8019ec2:	f7f9 f854 	bl	8012f6e <lwip_htonl>
 8019ec6:	4603      	mov	r3, r0
 8019ec8:	1ae3      	subs	r3, r4, r3
 8019eca:	2b00      	cmp	r3, #0
 8019ecc:	da24      	bge.n	8019f18 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8019ece:	687b      	ldr	r3, [r7, #4]
 8019ed0:	3370      	adds	r3, #112	; 0x70
 8019ed2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8019ed4:	e002      	b.n	8019edc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8019ed6:	69fb      	ldr	r3, [r7, #28]
 8019ed8:	681b      	ldr	r3, [r3, #0]
 8019eda:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8019edc:	69fb      	ldr	r3, [r7, #28]
 8019ede:	681b      	ldr	r3, [r3, #0]
 8019ee0:	2b00      	cmp	r3, #0
 8019ee2:	d011      	beq.n	8019f08 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8019ee4:	69fb      	ldr	r3, [r7, #28]
 8019ee6:	681b      	ldr	r3, [r3, #0]
 8019ee8:	68db      	ldr	r3, [r3, #12]
 8019eea:	685b      	ldr	r3, [r3, #4]
 8019eec:	4618      	mov	r0, r3
 8019eee:	f7f9 f83e 	bl	8012f6e <lwip_htonl>
 8019ef2:	4604      	mov	r4, r0
 8019ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ef6:	68db      	ldr	r3, [r3, #12]
 8019ef8:	685b      	ldr	r3, [r3, #4]
 8019efa:	4618      	mov	r0, r3
 8019efc:	f7f9 f837 	bl	8012f6e <lwip_htonl>
 8019f00:	4603      	mov	r3, r0
 8019f02:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8019f04:	2b00      	cmp	r3, #0
 8019f06:	dbe6      	blt.n	8019ed6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8019f08:	69fb      	ldr	r3, [r7, #28]
 8019f0a:	681a      	ldr	r2, [r3, #0]
 8019f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f0e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8019f10:	69fb      	ldr	r3, [r7, #28]
 8019f12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f14:	601a      	str	r2, [r3, #0]
 8019f16:	e009      	b.n	8019f2c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8019f18:	6a3b      	ldr	r3, [r7, #32]
 8019f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f1c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8019f1e:	6a3b      	ldr	r3, [r7, #32]
 8019f20:	681b      	ldr	r3, [r3, #0]
 8019f22:	623b      	str	r3, [r7, #32]
 8019f24:	e002      	b.n	8019f2c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8019f26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019f28:	f7fb ff1d 	bl	8015d66 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019f30:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8019f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f34:	2b00      	cmp	r3, #0
 8019f36:	d012      	beq.n	8019f5e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8019f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f3a:	68db      	ldr	r3, [r3, #12]
 8019f3c:	685b      	ldr	r3, [r3, #4]
 8019f3e:	4618      	mov	r0, r3
 8019f40:	f7f9 f815 	bl	8012f6e <lwip_htonl>
 8019f44:	4602      	mov	r2, r0
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019f4a:	1ad3      	subs	r3, r2, r3
 8019f4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019f4e:	8912      	ldrh	r2, [r2, #8]
 8019f50:	4413      	add	r3, r2
  while (seg != NULL &&
 8019f52:	69ba      	ldr	r2, [r7, #24]
 8019f54:	429a      	cmp	r2, r3
 8019f56:	f4bf aed9 	bcs.w	8019d0c <tcp_output+0x160>
 8019f5a:	e000      	b.n	8019f5e <tcp_output+0x3b2>
      break;
 8019f5c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019f62:	2b00      	cmp	r3, #0
 8019f64:	d108      	bne.n	8019f78 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8019f66:	687b      	ldr	r3, [r7, #4]
 8019f68:	2200      	movs	r2, #0
 8019f6a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8019f6e:	e004      	b.n	8019f7a <tcp_output+0x3ce>
    goto output_done;
 8019f70:	bf00      	nop
 8019f72:	e002      	b.n	8019f7a <tcp_output+0x3ce>
    goto output_done;
 8019f74:	bf00      	nop
 8019f76:	e000      	b.n	8019f7a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8019f78:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	8b5b      	ldrh	r3, [r3, #26]
 8019f7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8019f82:	b29a      	uxth	r2, r3
 8019f84:	687b      	ldr	r3, [r7, #4]
 8019f86:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8019f88:	2300      	movs	r3, #0
}
 8019f8a:	4618      	mov	r0, r3
 8019f8c:	3728      	adds	r7, #40	; 0x28
 8019f8e:	46bd      	mov	sp, r7
 8019f90:	bdb0      	pop	{r4, r5, r7, pc}
 8019f92:	bf00      	nop

08019f94 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8019f94:	b580      	push	{r7, lr}
 8019f96:	b082      	sub	sp, #8
 8019f98:	af00      	add	r7, sp, #0
 8019f9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8019f9c:	687b      	ldr	r3, [r7, #4]
 8019f9e:	2b00      	cmp	r3, #0
 8019fa0:	d106      	bne.n	8019fb0 <tcp_output_segment_busy+0x1c>
 8019fa2:	4b09      	ldr	r3, [pc, #36]	; (8019fc8 <tcp_output_segment_busy+0x34>)
 8019fa4:	f240 529a 	movw	r2, #1434	; 0x59a
 8019fa8:	4908      	ldr	r1, [pc, #32]	; (8019fcc <tcp_output_segment_busy+0x38>)
 8019faa:	4809      	ldr	r0, [pc, #36]	; (8019fd0 <tcp_output_segment_busy+0x3c>)
 8019fac:	f005 f8fe 	bl	801f1ac <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	685b      	ldr	r3, [r3, #4]
 8019fb4:	7b9b      	ldrb	r3, [r3, #14]
 8019fb6:	2b01      	cmp	r3, #1
 8019fb8:	d001      	beq.n	8019fbe <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8019fba:	2301      	movs	r3, #1
 8019fbc:	e000      	b.n	8019fc0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8019fbe:	2300      	movs	r3, #0
}
 8019fc0:	4618      	mov	r0, r3
 8019fc2:	3708      	adds	r7, #8
 8019fc4:	46bd      	mov	sp, r7
 8019fc6:	bd80      	pop	{r7, pc}
 8019fc8:	080258fc 	.word	0x080258fc
 8019fcc:	08025e98 	.word	0x08025e98
 8019fd0:	08025950 	.word	0x08025950

08019fd4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8019fd4:	b5b0      	push	{r4, r5, r7, lr}
 8019fd6:	b08c      	sub	sp, #48	; 0x30
 8019fd8:	af04      	add	r7, sp, #16
 8019fda:	60f8      	str	r0, [r7, #12]
 8019fdc:	60b9      	str	r1, [r7, #8]
 8019fde:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8019fe0:	68fb      	ldr	r3, [r7, #12]
 8019fe2:	2b00      	cmp	r3, #0
 8019fe4:	d106      	bne.n	8019ff4 <tcp_output_segment+0x20>
 8019fe6:	4b63      	ldr	r3, [pc, #396]	; (801a174 <tcp_output_segment+0x1a0>)
 8019fe8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8019fec:	4962      	ldr	r1, [pc, #392]	; (801a178 <tcp_output_segment+0x1a4>)
 8019fee:	4863      	ldr	r0, [pc, #396]	; (801a17c <tcp_output_segment+0x1a8>)
 8019ff0:	f005 f8dc 	bl	801f1ac <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8019ff4:	68bb      	ldr	r3, [r7, #8]
 8019ff6:	2b00      	cmp	r3, #0
 8019ff8:	d106      	bne.n	801a008 <tcp_output_segment+0x34>
 8019ffa:	4b5e      	ldr	r3, [pc, #376]	; (801a174 <tcp_output_segment+0x1a0>)
 8019ffc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801a000:	495f      	ldr	r1, [pc, #380]	; (801a180 <tcp_output_segment+0x1ac>)
 801a002:	485e      	ldr	r0, [pc, #376]	; (801a17c <tcp_output_segment+0x1a8>)
 801a004:	f005 f8d2 	bl	801f1ac <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801a008:	687b      	ldr	r3, [r7, #4]
 801a00a:	2b00      	cmp	r3, #0
 801a00c:	d106      	bne.n	801a01c <tcp_output_segment+0x48>
 801a00e:	4b59      	ldr	r3, [pc, #356]	; (801a174 <tcp_output_segment+0x1a0>)
 801a010:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801a014:	495b      	ldr	r1, [pc, #364]	; (801a184 <tcp_output_segment+0x1b0>)
 801a016:	4859      	ldr	r0, [pc, #356]	; (801a17c <tcp_output_segment+0x1a8>)
 801a018:	f005 f8c8 	bl	801f1ac <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801a01c:	68f8      	ldr	r0, [r7, #12]
 801a01e:	f7ff ffb9 	bl	8019f94 <tcp_output_segment_busy>
 801a022:	4603      	mov	r3, r0
 801a024:	2b00      	cmp	r3, #0
 801a026:	d001      	beq.n	801a02c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801a028:	2300      	movs	r3, #0
 801a02a:	e09f      	b.n	801a16c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801a02c:	68bb      	ldr	r3, [r7, #8]
 801a02e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a030:	68fb      	ldr	r3, [r7, #12]
 801a032:	68dc      	ldr	r4, [r3, #12]
 801a034:	4610      	mov	r0, r2
 801a036:	f7f8 ff9a 	bl	8012f6e <lwip_htonl>
 801a03a:	4603      	mov	r3, r0
 801a03c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801a03e:	68bb      	ldr	r3, [r7, #8]
 801a040:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801a042:	68fb      	ldr	r3, [r7, #12]
 801a044:	68dc      	ldr	r4, [r3, #12]
 801a046:	4610      	mov	r0, r2
 801a048:	f7f8 ff7c 	bl	8012f44 <lwip_htons>
 801a04c:	4603      	mov	r3, r0
 801a04e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a050:	68bb      	ldr	r3, [r7, #8]
 801a052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a054:	68ba      	ldr	r2, [r7, #8]
 801a056:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801a058:	441a      	add	r2, r3
 801a05a:	68bb      	ldr	r3, [r7, #8]
 801a05c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801a05e:	68fb      	ldr	r3, [r7, #12]
 801a060:	68db      	ldr	r3, [r3, #12]
 801a062:	3314      	adds	r3, #20
 801a064:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801a066:	68fb      	ldr	r3, [r7, #12]
 801a068:	7a9b      	ldrb	r3, [r3, #10]
 801a06a:	f003 0301 	and.w	r3, r3, #1
 801a06e:	2b00      	cmp	r3, #0
 801a070:	d015      	beq.n	801a09e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801a072:	68bb      	ldr	r3, [r7, #8]
 801a074:	3304      	adds	r3, #4
 801a076:	461a      	mov	r2, r3
 801a078:	6879      	ldr	r1, [r7, #4]
 801a07a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801a07e:	f7fc fa37 	bl	80164f0 <tcp_eff_send_mss_netif>
 801a082:	4603      	mov	r3, r0
 801a084:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801a086:	8b7b      	ldrh	r3, [r7, #26]
 801a088:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801a08c:	4618      	mov	r0, r3
 801a08e:	f7f8 ff6e 	bl	8012f6e <lwip_htonl>
 801a092:	4602      	mov	r2, r0
 801a094:	69fb      	ldr	r3, [r7, #28]
 801a096:	601a      	str	r2, [r3, #0]
    opts += 1;
 801a098:	69fb      	ldr	r3, [r7, #28]
 801a09a:	3304      	adds	r3, #4
 801a09c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801a09e:	68bb      	ldr	r3, [r7, #8]
 801a0a0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801a0a4:	2b00      	cmp	r3, #0
 801a0a6:	da02      	bge.n	801a0ae <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801a0a8:	68bb      	ldr	r3, [r7, #8]
 801a0aa:	2200      	movs	r2, #0
 801a0ac:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801a0ae:	68bb      	ldr	r3, [r7, #8]
 801a0b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a0b2:	2b00      	cmp	r3, #0
 801a0b4:	d10c      	bne.n	801a0d0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801a0b6:	4b34      	ldr	r3, [pc, #208]	; (801a188 <tcp_output_segment+0x1b4>)
 801a0b8:	681a      	ldr	r2, [r3, #0]
 801a0ba:	68bb      	ldr	r3, [r7, #8]
 801a0bc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801a0be:	68fb      	ldr	r3, [r7, #12]
 801a0c0:	68db      	ldr	r3, [r3, #12]
 801a0c2:	685b      	ldr	r3, [r3, #4]
 801a0c4:	4618      	mov	r0, r3
 801a0c6:	f7f8 ff52 	bl	8012f6e <lwip_htonl>
 801a0ca:	4602      	mov	r2, r0
 801a0cc:	68bb      	ldr	r3, [r7, #8]
 801a0ce:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801a0d0:	68fb      	ldr	r3, [r7, #12]
 801a0d2:	68da      	ldr	r2, [r3, #12]
 801a0d4:	68fb      	ldr	r3, [r7, #12]
 801a0d6:	685b      	ldr	r3, [r3, #4]
 801a0d8:	685b      	ldr	r3, [r3, #4]
 801a0da:	1ad3      	subs	r3, r2, r3
 801a0dc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801a0de:	68fb      	ldr	r3, [r7, #12]
 801a0e0:	685b      	ldr	r3, [r3, #4]
 801a0e2:	8959      	ldrh	r1, [r3, #10]
 801a0e4:	68fb      	ldr	r3, [r7, #12]
 801a0e6:	685b      	ldr	r3, [r3, #4]
 801a0e8:	8b3a      	ldrh	r2, [r7, #24]
 801a0ea:	1a8a      	subs	r2, r1, r2
 801a0ec:	b292      	uxth	r2, r2
 801a0ee:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801a0f0:	68fb      	ldr	r3, [r7, #12]
 801a0f2:	685b      	ldr	r3, [r3, #4]
 801a0f4:	8919      	ldrh	r1, [r3, #8]
 801a0f6:	68fb      	ldr	r3, [r7, #12]
 801a0f8:	685b      	ldr	r3, [r3, #4]
 801a0fa:	8b3a      	ldrh	r2, [r7, #24]
 801a0fc:	1a8a      	subs	r2, r1, r2
 801a0fe:	b292      	uxth	r2, r2
 801a100:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801a102:	68fb      	ldr	r3, [r7, #12]
 801a104:	685b      	ldr	r3, [r3, #4]
 801a106:	68fa      	ldr	r2, [r7, #12]
 801a108:	68d2      	ldr	r2, [r2, #12]
 801a10a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801a10c:	68fb      	ldr	r3, [r7, #12]
 801a10e:	68db      	ldr	r3, [r3, #12]
 801a110:	2200      	movs	r2, #0
 801a112:	741a      	strb	r2, [r3, #16]
 801a114:	2200      	movs	r2, #0
 801a116:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801a118:	68fb      	ldr	r3, [r7, #12]
 801a11a:	68db      	ldr	r3, [r3, #12]
 801a11c:	f103 0214 	add.w	r2, r3, #20
 801a120:	68fb      	ldr	r3, [r7, #12]
 801a122:	7a9b      	ldrb	r3, [r3, #10]
 801a124:	009b      	lsls	r3, r3, #2
 801a126:	f003 0304 	and.w	r3, r3, #4
 801a12a:	4413      	add	r3, r2
 801a12c:	69fa      	ldr	r2, [r7, #28]
 801a12e:	429a      	cmp	r2, r3
 801a130:	d006      	beq.n	801a140 <tcp_output_segment+0x16c>
 801a132:	4b10      	ldr	r3, [pc, #64]	; (801a174 <tcp_output_segment+0x1a0>)
 801a134:	f240 621c 	movw	r2, #1564	; 0x61c
 801a138:	4914      	ldr	r1, [pc, #80]	; (801a18c <tcp_output_segment+0x1b8>)
 801a13a:	4810      	ldr	r0, [pc, #64]	; (801a17c <tcp_output_segment+0x1a8>)
 801a13c:	f005 f836 	bl	801f1ac <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801a140:	68fb      	ldr	r3, [r7, #12]
 801a142:	6858      	ldr	r0, [r3, #4]
 801a144:	68b9      	ldr	r1, [r7, #8]
 801a146:	68bb      	ldr	r3, [r7, #8]
 801a148:	1d1c      	adds	r4, r3, #4
 801a14a:	68bb      	ldr	r3, [r7, #8]
 801a14c:	7add      	ldrb	r5, [r3, #11]
 801a14e:	68bb      	ldr	r3, [r7, #8]
 801a150:	7a9b      	ldrb	r3, [r3, #10]
 801a152:	687a      	ldr	r2, [r7, #4]
 801a154:	9202      	str	r2, [sp, #8]
 801a156:	2206      	movs	r2, #6
 801a158:	9201      	str	r2, [sp, #4]
 801a15a:	9300      	str	r3, [sp, #0]
 801a15c:	462b      	mov	r3, r5
 801a15e:	4622      	mov	r2, r4
 801a160:	f002 fd96 	bl	801cc90 <ip4_output_if>
 801a164:	4603      	mov	r3, r0
 801a166:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801a168:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a16c:	4618      	mov	r0, r3
 801a16e:	3720      	adds	r7, #32
 801a170:	46bd      	mov	sp, r7
 801a172:	bdb0      	pop	{r4, r5, r7, pc}
 801a174:	080258fc 	.word	0x080258fc
 801a178:	08025ec0 	.word	0x08025ec0
 801a17c:	08025950 	.word	0x08025950
 801a180:	08025ee0 	.word	0x08025ee0
 801a184:	08025f00 	.word	0x08025f00
 801a188:	2000e174 	.word	0x2000e174
 801a18c:	08025f24 	.word	0x08025f24

0801a190 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801a190:	b5b0      	push	{r4, r5, r7, lr}
 801a192:	b084      	sub	sp, #16
 801a194:	af00      	add	r7, sp, #0
 801a196:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801a198:	687b      	ldr	r3, [r7, #4]
 801a19a:	2b00      	cmp	r3, #0
 801a19c:	d106      	bne.n	801a1ac <tcp_rexmit_rto_prepare+0x1c>
 801a19e:	4b31      	ldr	r3, [pc, #196]	; (801a264 <tcp_rexmit_rto_prepare+0xd4>)
 801a1a0:	f240 6263 	movw	r2, #1635	; 0x663
 801a1a4:	4930      	ldr	r1, [pc, #192]	; (801a268 <tcp_rexmit_rto_prepare+0xd8>)
 801a1a6:	4831      	ldr	r0, [pc, #196]	; (801a26c <tcp_rexmit_rto_prepare+0xdc>)
 801a1a8:	f005 f800 	bl	801f1ac <iprintf>

  if (pcb->unacked == NULL) {
 801a1ac:	687b      	ldr	r3, [r7, #4]
 801a1ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a1b0:	2b00      	cmp	r3, #0
 801a1b2:	d102      	bne.n	801a1ba <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801a1b4:	f06f 0305 	mvn.w	r3, #5
 801a1b8:	e050      	b.n	801a25c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801a1ba:	687b      	ldr	r3, [r7, #4]
 801a1bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a1be:	60fb      	str	r3, [r7, #12]
 801a1c0:	e00b      	b.n	801a1da <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801a1c2:	68f8      	ldr	r0, [r7, #12]
 801a1c4:	f7ff fee6 	bl	8019f94 <tcp_output_segment_busy>
 801a1c8:	4603      	mov	r3, r0
 801a1ca:	2b00      	cmp	r3, #0
 801a1cc:	d002      	beq.n	801a1d4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801a1ce:	f06f 0305 	mvn.w	r3, #5
 801a1d2:	e043      	b.n	801a25c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801a1d4:	68fb      	ldr	r3, [r7, #12]
 801a1d6:	681b      	ldr	r3, [r3, #0]
 801a1d8:	60fb      	str	r3, [r7, #12]
 801a1da:	68fb      	ldr	r3, [r7, #12]
 801a1dc:	681b      	ldr	r3, [r3, #0]
 801a1de:	2b00      	cmp	r3, #0
 801a1e0:	d1ef      	bne.n	801a1c2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801a1e2:	68f8      	ldr	r0, [r7, #12]
 801a1e4:	f7ff fed6 	bl	8019f94 <tcp_output_segment_busy>
 801a1e8:	4603      	mov	r3, r0
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	d002      	beq.n	801a1f4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801a1ee:	f06f 0305 	mvn.w	r3, #5
 801a1f2:	e033      	b.n	801a25c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801a1f4:	687b      	ldr	r3, [r7, #4]
 801a1f6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801a1f8:	68fb      	ldr	r3, [r7, #12]
 801a1fa:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801a1fc:	687b      	ldr	r3, [r7, #4]
 801a1fe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801a200:	687b      	ldr	r3, [r7, #4]
 801a202:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801a204:	687b      	ldr	r3, [r7, #4]
 801a206:	2200      	movs	r2, #0
 801a208:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801a20a:	687b      	ldr	r3, [r7, #4]
 801a20c:	8b5b      	ldrh	r3, [r3, #26]
 801a20e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801a212:	b29a      	uxth	r2, r3
 801a214:	687b      	ldr	r3, [r7, #4]
 801a216:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801a218:	68fb      	ldr	r3, [r7, #12]
 801a21a:	68db      	ldr	r3, [r3, #12]
 801a21c:	685b      	ldr	r3, [r3, #4]
 801a21e:	4618      	mov	r0, r3
 801a220:	f7f8 fea5 	bl	8012f6e <lwip_htonl>
 801a224:	4604      	mov	r4, r0
 801a226:	68fb      	ldr	r3, [r7, #12]
 801a228:	891b      	ldrh	r3, [r3, #8]
 801a22a:	461d      	mov	r5, r3
 801a22c:	68fb      	ldr	r3, [r7, #12]
 801a22e:	68db      	ldr	r3, [r3, #12]
 801a230:	899b      	ldrh	r3, [r3, #12]
 801a232:	b29b      	uxth	r3, r3
 801a234:	4618      	mov	r0, r3
 801a236:	f7f8 fe85 	bl	8012f44 <lwip_htons>
 801a23a:	4603      	mov	r3, r0
 801a23c:	b2db      	uxtb	r3, r3
 801a23e:	f003 0303 	and.w	r3, r3, #3
 801a242:	2b00      	cmp	r3, #0
 801a244:	d001      	beq.n	801a24a <tcp_rexmit_rto_prepare+0xba>
 801a246:	2301      	movs	r3, #1
 801a248:	e000      	b.n	801a24c <tcp_rexmit_rto_prepare+0xbc>
 801a24a:	2300      	movs	r3, #0
 801a24c:	442b      	add	r3, r5
 801a24e:	18e2      	adds	r2, r4, r3
 801a250:	687b      	ldr	r3, [r7, #4]
 801a252:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801a254:	687b      	ldr	r3, [r7, #4]
 801a256:	2200      	movs	r2, #0
 801a258:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801a25a:	2300      	movs	r3, #0
}
 801a25c:	4618      	mov	r0, r3
 801a25e:	3710      	adds	r7, #16
 801a260:	46bd      	mov	sp, r7
 801a262:	bdb0      	pop	{r4, r5, r7, pc}
 801a264:	080258fc 	.word	0x080258fc
 801a268:	08025f38 	.word	0x08025f38
 801a26c:	08025950 	.word	0x08025950

0801a270 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801a270:	b580      	push	{r7, lr}
 801a272:	b082      	sub	sp, #8
 801a274:	af00      	add	r7, sp, #0
 801a276:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801a278:	687b      	ldr	r3, [r7, #4]
 801a27a:	2b00      	cmp	r3, #0
 801a27c:	d106      	bne.n	801a28c <tcp_rexmit_rto_commit+0x1c>
 801a27e:	4b0d      	ldr	r3, [pc, #52]	; (801a2b4 <tcp_rexmit_rto_commit+0x44>)
 801a280:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801a284:	490c      	ldr	r1, [pc, #48]	; (801a2b8 <tcp_rexmit_rto_commit+0x48>)
 801a286:	480d      	ldr	r0, [pc, #52]	; (801a2bc <tcp_rexmit_rto_commit+0x4c>)
 801a288:	f004 ff90 	bl	801f1ac <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801a28c:	687b      	ldr	r3, [r7, #4]
 801a28e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a292:	2bff      	cmp	r3, #255	; 0xff
 801a294:	d007      	beq.n	801a2a6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801a296:	687b      	ldr	r3, [r7, #4]
 801a298:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a29c:	3301      	adds	r3, #1
 801a29e:	b2da      	uxtb	r2, r3
 801a2a0:	687b      	ldr	r3, [r7, #4]
 801a2a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801a2a6:	6878      	ldr	r0, [r7, #4]
 801a2a8:	f7ff fc80 	bl	8019bac <tcp_output>
}
 801a2ac:	bf00      	nop
 801a2ae:	3708      	adds	r7, #8
 801a2b0:	46bd      	mov	sp, r7
 801a2b2:	bd80      	pop	{r7, pc}
 801a2b4:	080258fc 	.word	0x080258fc
 801a2b8:	08025f5c 	.word	0x08025f5c
 801a2bc:	08025950 	.word	0x08025950

0801a2c0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801a2c0:	b580      	push	{r7, lr}
 801a2c2:	b082      	sub	sp, #8
 801a2c4:	af00      	add	r7, sp, #0
 801a2c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801a2c8:	687b      	ldr	r3, [r7, #4]
 801a2ca:	2b00      	cmp	r3, #0
 801a2cc:	d106      	bne.n	801a2dc <tcp_rexmit_rto+0x1c>
 801a2ce:	4b0a      	ldr	r3, [pc, #40]	; (801a2f8 <tcp_rexmit_rto+0x38>)
 801a2d0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801a2d4:	4909      	ldr	r1, [pc, #36]	; (801a2fc <tcp_rexmit_rto+0x3c>)
 801a2d6:	480a      	ldr	r0, [pc, #40]	; (801a300 <tcp_rexmit_rto+0x40>)
 801a2d8:	f004 ff68 	bl	801f1ac <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801a2dc:	6878      	ldr	r0, [r7, #4]
 801a2de:	f7ff ff57 	bl	801a190 <tcp_rexmit_rto_prepare>
 801a2e2:	4603      	mov	r3, r0
 801a2e4:	2b00      	cmp	r3, #0
 801a2e6:	d102      	bne.n	801a2ee <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801a2e8:	6878      	ldr	r0, [r7, #4]
 801a2ea:	f7ff ffc1 	bl	801a270 <tcp_rexmit_rto_commit>
  }
}
 801a2ee:	bf00      	nop
 801a2f0:	3708      	adds	r7, #8
 801a2f2:	46bd      	mov	sp, r7
 801a2f4:	bd80      	pop	{r7, pc}
 801a2f6:	bf00      	nop
 801a2f8:	080258fc 	.word	0x080258fc
 801a2fc:	08025f80 	.word	0x08025f80
 801a300:	08025950 	.word	0x08025950

0801a304 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801a304:	b590      	push	{r4, r7, lr}
 801a306:	b085      	sub	sp, #20
 801a308:	af00      	add	r7, sp, #0
 801a30a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801a30c:	687b      	ldr	r3, [r7, #4]
 801a30e:	2b00      	cmp	r3, #0
 801a310:	d106      	bne.n	801a320 <tcp_rexmit+0x1c>
 801a312:	4b2f      	ldr	r3, [pc, #188]	; (801a3d0 <tcp_rexmit+0xcc>)
 801a314:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801a318:	492e      	ldr	r1, [pc, #184]	; (801a3d4 <tcp_rexmit+0xd0>)
 801a31a:	482f      	ldr	r0, [pc, #188]	; (801a3d8 <tcp_rexmit+0xd4>)
 801a31c:	f004 ff46 	bl	801f1ac <iprintf>

  if (pcb->unacked == NULL) {
 801a320:	687b      	ldr	r3, [r7, #4]
 801a322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a324:	2b00      	cmp	r3, #0
 801a326:	d102      	bne.n	801a32e <tcp_rexmit+0x2a>
    return ERR_VAL;
 801a328:	f06f 0305 	mvn.w	r3, #5
 801a32c:	e04c      	b.n	801a3c8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801a32e:	687b      	ldr	r3, [r7, #4]
 801a330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a332:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801a334:	68b8      	ldr	r0, [r7, #8]
 801a336:	f7ff fe2d 	bl	8019f94 <tcp_output_segment_busy>
 801a33a:	4603      	mov	r3, r0
 801a33c:	2b00      	cmp	r3, #0
 801a33e:	d002      	beq.n	801a346 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801a340:	f06f 0305 	mvn.w	r3, #5
 801a344:	e040      	b.n	801a3c8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801a346:	68bb      	ldr	r3, [r7, #8]
 801a348:	681a      	ldr	r2, [r3, #0]
 801a34a:	687b      	ldr	r3, [r7, #4]
 801a34c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	336c      	adds	r3, #108	; 0x6c
 801a352:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801a354:	e002      	b.n	801a35c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801a356:	68fb      	ldr	r3, [r7, #12]
 801a358:	681b      	ldr	r3, [r3, #0]
 801a35a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801a35c:	68fb      	ldr	r3, [r7, #12]
 801a35e:	681b      	ldr	r3, [r3, #0]
 801a360:	2b00      	cmp	r3, #0
 801a362:	d011      	beq.n	801a388 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801a364:	68fb      	ldr	r3, [r7, #12]
 801a366:	681b      	ldr	r3, [r3, #0]
 801a368:	68db      	ldr	r3, [r3, #12]
 801a36a:	685b      	ldr	r3, [r3, #4]
 801a36c:	4618      	mov	r0, r3
 801a36e:	f7f8 fdfe 	bl	8012f6e <lwip_htonl>
 801a372:	4604      	mov	r4, r0
 801a374:	68bb      	ldr	r3, [r7, #8]
 801a376:	68db      	ldr	r3, [r3, #12]
 801a378:	685b      	ldr	r3, [r3, #4]
 801a37a:	4618      	mov	r0, r3
 801a37c:	f7f8 fdf7 	bl	8012f6e <lwip_htonl>
 801a380:	4603      	mov	r3, r0
 801a382:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801a384:	2b00      	cmp	r3, #0
 801a386:	dbe6      	blt.n	801a356 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801a388:	68fb      	ldr	r3, [r7, #12]
 801a38a:	681a      	ldr	r2, [r3, #0]
 801a38c:	68bb      	ldr	r3, [r7, #8]
 801a38e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801a390:	68fb      	ldr	r3, [r7, #12]
 801a392:	68ba      	ldr	r2, [r7, #8]
 801a394:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801a396:	68bb      	ldr	r3, [r7, #8]
 801a398:	681b      	ldr	r3, [r3, #0]
 801a39a:	2b00      	cmp	r3, #0
 801a39c:	d103      	bne.n	801a3a6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801a39e:	687b      	ldr	r3, [r7, #4]
 801a3a0:	2200      	movs	r2, #0
 801a3a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801a3a6:	687b      	ldr	r3, [r7, #4]
 801a3a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a3ac:	2bff      	cmp	r3, #255	; 0xff
 801a3ae:	d007      	beq.n	801a3c0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801a3b0:	687b      	ldr	r3, [r7, #4]
 801a3b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a3b6:	3301      	adds	r3, #1
 801a3b8:	b2da      	uxtb	r2, r3
 801a3ba:	687b      	ldr	r3, [r7, #4]
 801a3bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	2200      	movs	r2, #0
 801a3c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801a3c6:	2300      	movs	r3, #0
}
 801a3c8:	4618      	mov	r0, r3
 801a3ca:	3714      	adds	r7, #20
 801a3cc:	46bd      	mov	sp, r7
 801a3ce:	bd90      	pop	{r4, r7, pc}
 801a3d0:	080258fc 	.word	0x080258fc
 801a3d4:	08025f9c 	.word	0x08025f9c
 801a3d8:	08025950 	.word	0x08025950

0801a3dc <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801a3dc:	b580      	push	{r7, lr}
 801a3de:	b082      	sub	sp, #8
 801a3e0:	af00      	add	r7, sp, #0
 801a3e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	2b00      	cmp	r3, #0
 801a3e8:	d106      	bne.n	801a3f8 <tcp_rexmit_fast+0x1c>
 801a3ea:	4b2a      	ldr	r3, [pc, #168]	; (801a494 <tcp_rexmit_fast+0xb8>)
 801a3ec:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801a3f0:	4929      	ldr	r1, [pc, #164]	; (801a498 <tcp_rexmit_fast+0xbc>)
 801a3f2:	482a      	ldr	r0, [pc, #168]	; (801a49c <tcp_rexmit_fast+0xc0>)
 801a3f4:	f004 feda 	bl	801f1ac <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801a3f8:	687b      	ldr	r3, [r7, #4]
 801a3fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a3fc:	2b00      	cmp	r3, #0
 801a3fe:	d044      	beq.n	801a48a <tcp_rexmit_fast+0xae>
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	8b5b      	ldrh	r3, [r3, #26]
 801a404:	f003 0304 	and.w	r3, r3, #4
 801a408:	2b00      	cmp	r3, #0
 801a40a:	d13e      	bne.n	801a48a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801a40c:	6878      	ldr	r0, [r7, #4]
 801a40e:	f7ff ff79 	bl	801a304 <tcp_rexmit>
 801a412:	4603      	mov	r3, r0
 801a414:	2b00      	cmp	r3, #0
 801a416:	d138      	bne.n	801a48a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801a418:	687b      	ldr	r3, [r7, #4]
 801a41a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a41e:	687b      	ldr	r3, [r7, #4]
 801a420:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a424:	4293      	cmp	r3, r2
 801a426:	bf28      	it	cs
 801a428:	4613      	movcs	r3, r2
 801a42a:	b29b      	uxth	r3, r3
 801a42c:	0fda      	lsrs	r2, r3, #31
 801a42e:	4413      	add	r3, r2
 801a430:	105b      	asrs	r3, r3, #1
 801a432:	b29a      	uxth	r2, r3
 801a434:	687b      	ldr	r3, [r7, #4]
 801a436:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801a43a:	687b      	ldr	r3, [r7, #4]
 801a43c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801a440:	461a      	mov	r2, r3
 801a442:	687b      	ldr	r3, [r7, #4]
 801a444:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a446:	005b      	lsls	r3, r3, #1
 801a448:	429a      	cmp	r2, r3
 801a44a:	d206      	bcs.n	801a45a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801a44c:	687b      	ldr	r3, [r7, #4]
 801a44e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a450:	005b      	lsls	r3, r3, #1
 801a452:	b29a      	uxth	r2, r3
 801a454:	687b      	ldr	r3, [r7, #4]
 801a456:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801a45a:	687b      	ldr	r3, [r7, #4]
 801a45c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801a460:	687b      	ldr	r3, [r7, #4]
 801a462:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a464:	4619      	mov	r1, r3
 801a466:	0049      	lsls	r1, r1, #1
 801a468:	440b      	add	r3, r1
 801a46a:	b29b      	uxth	r3, r3
 801a46c:	4413      	add	r3, r2
 801a46e:	b29a      	uxth	r2, r3
 801a470:	687b      	ldr	r3, [r7, #4]
 801a472:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801a476:	687b      	ldr	r3, [r7, #4]
 801a478:	8b5b      	ldrh	r3, [r3, #26]
 801a47a:	f043 0304 	orr.w	r3, r3, #4
 801a47e:	b29a      	uxth	r2, r3
 801a480:	687b      	ldr	r3, [r7, #4]
 801a482:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801a484:	687b      	ldr	r3, [r7, #4]
 801a486:	2200      	movs	r2, #0
 801a488:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801a48a:	bf00      	nop
 801a48c:	3708      	adds	r7, #8
 801a48e:	46bd      	mov	sp, r7
 801a490:	bd80      	pop	{r7, pc}
 801a492:	bf00      	nop
 801a494:	080258fc 	.word	0x080258fc
 801a498:	08025fb4 	.word	0x08025fb4
 801a49c:	08025950 	.word	0x08025950

0801a4a0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801a4a0:	b580      	push	{r7, lr}
 801a4a2:	b086      	sub	sp, #24
 801a4a4:	af00      	add	r7, sp, #0
 801a4a6:	60f8      	str	r0, [r7, #12]
 801a4a8:	607b      	str	r3, [r7, #4]
 801a4aa:	460b      	mov	r3, r1
 801a4ac:	817b      	strh	r3, [r7, #10]
 801a4ae:	4613      	mov	r3, r2
 801a4b0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801a4b2:	897a      	ldrh	r2, [r7, #10]
 801a4b4:	893b      	ldrh	r3, [r7, #8]
 801a4b6:	4413      	add	r3, r2
 801a4b8:	b29b      	uxth	r3, r3
 801a4ba:	3314      	adds	r3, #20
 801a4bc:	b29b      	uxth	r3, r3
 801a4be:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a4c2:	4619      	mov	r1, r3
 801a4c4:	2022      	movs	r0, #34	; 0x22
 801a4c6:	f7f9 fda1 	bl	801400c <pbuf_alloc>
 801a4ca:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801a4cc:	697b      	ldr	r3, [r7, #20]
 801a4ce:	2b00      	cmp	r3, #0
 801a4d0:	d04d      	beq.n	801a56e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801a4d2:	897b      	ldrh	r3, [r7, #10]
 801a4d4:	3313      	adds	r3, #19
 801a4d6:	697a      	ldr	r2, [r7, #20]
 801a4d8:	8952      	ldrh	r2, [r2, #10]
 801a4da:	4293      	cmp	r3, r2
 801a4dc:	db06      	blt.n	801a4ec <tcp_output_alloc_header_common+0x4c>
 801a4de:	4b26      	ldr	r3, [pc, #152]	; (801a578 <tcp_output_alloc_header_common+0xd8>)
 801a4e0:	f240 7223 	movw	r2, #1827	; 0x723
 801a4e4:	4925      	ldr	r1, [pc, #148]	; (801a57c <tcp_output_alloc_header_common+0xdc>)
 801a4e6:	4826      	ldr	r0, [pc, #152]	; (801a580 <tcp_output_alloc_header_common+0xe0>)
 801a4e8:	f004 fe60 	bl	801f1ac <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801a4ec:	697b      	ldr	r3, [r7, #20]
 801a4ee:	685b      	ldr	r3, [r3, #4]
 801a4f0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801a4f2:	8c3b      	ldrh	r3, [r7, #32]
 801a4f4:	4618      	mov	r0, r3
 801a4f6:	f7f8 fd25 	bl	8012f44 <lwip_htons>
 801a4fa:	4603      	mov	r3, r0
 801a4fc:	461a      	mov	r2, r3
 801a4fe:	693b      	ldr	r3, [r7, #16]
 801a500:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801a502:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a504:	4618      	mov	r0, r3
 801a506:	f7f8 fd1d 	bl	8012f44 <lwip_htons>
 801a50a:	4603      	mov	r3, r0
 801a50c:	461a      	mov	r2, r3
 801a50e:	693b      	ldr	r3, [r7, #16]
 801a510:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801a512:	693b      	ldr	r3, [r7, #16]
 801a514:	687a      	ldr	r2, [r7, #4]
 801a516:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801a518:	68f8      	ldr	r0, [r7, #12]
 801a51a:	f7f8 fd28 	bl	8012f6e <lwip_htonl>
 801a51e:	4602      	mov	r2, r0
 801a520:	693b      	ldr	r3, [r7, #16]
 801a522:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801a524:	897b      	ldrh	r3, [r7, #10]
 801a526:	089b      	lsrs	r3, r3, #2
 801a528:	b29b      	uxth	r3, r3
 801a52a:	3305      	adds	r3, #5
 801a52c:	b29b      	uxth	r3, r3
 801a52e:	031b      	lsls	r3, r3, #12
 801a530:	b29a      	uxth	r2, r3
 801a532:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801a536:	b29b      	uxth	r3, r3
 801a538:	4313      	orrs	r3, r2
 801a53a:	b29b      	uxth	r3, r3
 801a53c:	4618      	mov	r0, r3
 801a53e:	f7f8 fd01 	bl	8012f44 <lwip_htons>
 801a542:	4603      	mov	r3, r0
 801a544:	461a      	mov	r2, r3
 801a546:	693b      	ldr	r3, [r7, #16]
 801a548:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801a54a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801a54c:	4618      	mov	r0, r3
 801a54e:	f7f8 fcf9 	bl	8012f44 <lwip_htons>
 801a552:	4603      	mov	r3, r0
 801a554:	461a      	mov	r2, r3
 801a556:	693b      	ldr	r3, [r7, #16]
 801a558:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801a55a:	693b      	ldr	r3, [r7, #16]
 801a55c:	2200      	movs	r2, #0
 801a55e:	741a      	strb	r2, [r3, #16]
 801a560:	2200      	movs	r2, #0
 801a562:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801a564:	693b      	ldr	r3, [r7, #16]
 801a566:	2200      	movs	r2, #0
 801a568:	749a      	strb	r2, [r3, #18]
 801a56a:	2200      	movs	r2, #0
 801a56c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801a56e:	697b      	ldr	r3, [r7, #20]
}
 801a570:	4618      	mov	r0, r3
 801a572:	3718      	adds	r7, #24
 801a574:	46bd      	mov	sp, r7
 801a576:	bd80      	pop	{r7, pc}
 801a578:	080258fc 	.word	0x080258fc
 801a57c:	08025fd4 	.word	0x08025fd4
 801a580:	08025950 	.word	0x08025950

0801a584 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801a584:	b5b0      	push	{r4, r5, r7, lr}
 801a586:	b08a      	sub	sp, #40	; 0x28
 801a588:	af04      	add	r7, sp, #16
 801a58a:	60f8      	str	r0, [r7, #12]
 801a58c:	607b      	str	r3, [r7, #4]
 801a58e:	460b      	mov	r3, r1
 801a590:	817b      	strh	r3, [r7, #10]
 801a592:	4613      	mov	r3, r2
 801a594:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801a596:	68fb      	ldr	r3, [r7, #12]
 801a598:	2b00      	cmp	r3, #0
 801a59a:	d106      	bne.n	801a5aa <tcp_output_alloc_header+0x26>
 801a59c:	4b15      	ldr	r3, [pc, #84]	; (801a5f4 <tcp_output_alloc_header+0x70>)
 801a59e:	f240 7242 	movw	r2, #1858	; 0x742
 801a5a2:	4915      	ldr	r1, [pc, #84]	; (801a5f8 <tcp_output_alloc_header+0x74>)
 801a5a4:	4815      	ldr	r0, [pc, #84]	; (801a5fc <tcp_output_alloc_header+0x78>)
 801a5a6:	f004 fe01 	bl	801f1ac <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801a5aa:	68fb      	ldr	r3, [r7, #12]
 801a5ac:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801a5ae:	68fb      	ldr	r3, [r7, #12]
 801a5b0:	8adb      	ldrh	r3, [r3, #22]
 801a5b2:	68fa      	ldr	r2, [r7, #12]
 801a5b4:	8b12      	ldrh	r2, [r2, #24]
 801a5b6:	68f9      	ldr	r1, [r7, #12]
 801a5b8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801a5ba:	893d      	ldrh	r5, [r7, #8]
 801a5bc:	897c      	ldrh	r4, [r7, #10]
 801a5be:	9103      	str	r1, [sp, #12]
 801a5c0:	2110      	movs	r1, #16
 801a5c2:	9102      	str	r1, [sp, #8]
 801a5c4:	9201      	str	r2, [sp, #4]
 801a5c6:	9300      	str	r3, [sp, #0]
 801a5c8:	687b      	ldr	r3, [r7, #4]
 801a5ca:	462a      	mov	r2, r5
 801a5cc:	4621      	mov	r1, r4
 801a5ce:	f7ff ff67 	bl	801a4a0 <tcp_output_alloc_header_common>
 801a5d2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801a5d4:	697b      	ldr	r3, [r7, #20]
 801a5d6:	2b00      	cmp	r3, #0
 801a5d8:	d006      	beq.n	801a5e8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801a5da:	68fb      	ldr	r3, [r7, #12]
 801a5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a5de:	68fa      	ldr	r2, [r7, #12]
 801a5e0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801a5e2:	441a      	add	r2, r3
 801a5e4:	68fb      	ldr	r3, [r7, #12]
 801a5e6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801a5e8:	697b      	ldr	r3, [r7, #20]
}
 801a5ea:	4618      	mov	r0, r3
 801a5ec:	3718      	adds	r7, #24
 801a5ee:	46bd      	mov	sp, r7
 801a5f0:	bdb0      	pop	{r4, r5, r7, pc}
 801a5f2:	bf00      	nop
 801a5f4:	080258fc 	.word	0x080258fc
 801a5f8:	08026004 	.word	0x08026004
 801a5fc:	08025950 	.word	0x08025950

0801a600 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801a600:	b580      	push	{r7, lr}
 801a602:	b088      	sub	sp, #32
 801a604:	af00      	add	r7, sp, #0
 801a606:	60f8      	str	r0, [r7, #12]
 801a608:	60b9      	str	r1, [r7, #8]
 801a60a:	4611      	mov	r1, r2
 801a60c:	461a      	mov	r2, r3
 801a60e:	460b      	mov	r3, r1
 801a610:	71fb      	strb	r3, [r7, #7]
 801a612:	4613      	mov	r3, r2
 801a614:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801a616:	2300      	movs	r3, #0
 801a618:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801a61a:	68bb      	ldr	r3, [r7, #8]
 801a61c:	2b00      	cmp	r3, #0
 801a61e:	d106      	bne.n	801a62e <tcp_output_fill_options+0x2e>
 801a620:	4b13      	ldr	r3, [pc, #76]	; (801a670 <tcp_output_fill_options+0x70>)
 801a622:	f240 7256 	movw	r2, #1878	; 0x756
 801a626:	4913      	ldr	r1, [pc, #76]	; (801a674 <tcp_output_fill_options+0x74>)
 801a628:	4813      	ldr	r0, [pc, #76]	; (801a678 <tcp_output_fill_options+0x78>)
 801a62a:	f004 fdbf 	bl	801f1ac <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801a62e:	68bb      	ldr	r3, [r7, #8]
 801a630:	685b      	ldr	r3, [r3, #4]
 801a632:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801a634:	69bb      	ldr	r3, [r7, #24]
 801a636:	3314      	adds	r3, #20
 801a638:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801a63a:	69bb      	ldr	r3, [r7, #24]
 801a63c:	f103 0214 	add.w	r2, r3, #20
 801a640:	8bfb      	ldrh	r3, [r7, #30]
 801a642:	009b      	lsls	r3, r3, #2
 801a644:	4619      	mov	r1, r3
 801a646:	79fb      	ldrb	r3, [r7, #7]
 801a648:	009b      	lsls	r3, r3, #2
 801a64a:	f003 0304 	and.w	r3, r3, #4
 801a64e:	440b      	add	r3, r1
 801a650:	4413      	add	r3, r2
 801a652:	697a      	ldr	r2, [r7, #20]
 801a654:	429a      	cmp	r2, r3
 801a656:	d006      	beq.n	801a666 <tcp_output_fill_options+0x66>
 801a658:	4b05      	ldr	r3, [pc, #20]	; (801a670 <tcp_output_fill_options+0x70>)
 801a65a:	f240 7275 	movw	r2, #1909	; 0x775
 801a65e:	4907      	ldr	r1, [pc, #28]	; (801a67c <tcp_output_fill_options+0x7c>)
 801a660:	4805      	ldr	r0, [pc, #20]	; (801a678 <tcp_output_fill_options+0x78>)
 801a662:	f004 fda3 	bl	801f1ac <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801a666:	bf00      	nop
 801a668:	3720      	adds	r7, #32
 801a66a:	46bd      	mov	sp, r7
 801a66c:	bd80      	pop	{r7, pc}
 801a66e:	bf00      	nop
 801a670:	080258fc 	.word	0x080258fc
 801a674:	0802602c 	.word	0x0802602c
 801a678:	08025950 	.word	0x08025950
 801a67c:	08025f24 	.word	0x08025f24

0801a680 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801a680:	b580      	push	{r7, lr}
 801a682:	b08a      	sub	sp, #40	; 0x28
 801a684:	af04      	add	r7, sp, #16
 801a686:	60f8      	str	r0, [r7, #12]
 801a688:	60b9      	str	r1, [r7, #8]
 801a68a:	607a      	str	r2, [r7, #4]
 801a68c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801a68e:	68bb      	ldr	r3, [r7, #8]
 801a690:	2b00      	cmp	r3, #0
 801a692:	d106      	bne.n	801a6a2 <tcp_output_control_segment+0x22>
 801a694:	4b1c      	ldr	r3, [pc, #112]	; (801a708 <tcp_output_control_segment+0x88>)
 801a696:	f240 7287 	movw	r2, #1927	; 0x787
 801a69a:	491c      	ldr	r1, [pc, #112]	; (801a70c <tcp_output_control_segment+0x8c>)
 801a69c:	481c      	ldr	r0, [pc, #112]	; (801a710 <tcp_output_control_segment+0x90>)
 801a69e:	f004 fd85 	bl	801f1ac <iprintf>

  netif = tcp_route(pcb, src, dst);
 801a6a2:	683a      	ldr	r2, [r7, #0]
 801a6a4:	6879      	ldr	r1, [r7, #4]
 801a6a6:	68f8      	ldr	r0, [r7, #12]
 801a6a8:	f7fe fae8 	bl	8018c7c <tcp_route>
 801a6ac:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801a6ae:	693b      	ldr	r3, [r7, #16]
 801a6b0:	2b00      	cmp	r3, #0
 801a6b2:	d102      	bne.n	801a6ba <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801a6b4:	23fc      	movs	r3, #252	; 0xfc
 801a6b6:	75fb      	strb	r3, [r7, #23]
 801a6b8:	e01c      	b.n	801a6f4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801a6ba:	68fb      	ldr	r3, [r7, #12]
 801a6bc:	2b00      	cmp	r3, #0
 801a6be:	d006      	beq.n	801a6ce <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801a6c0:	68fb      	ldr	r3, [r7, #12]
 801a6c2:	7adb      	ldrb	r3, [r3, #11]
 801a6c4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801a6c6:	68fb      	ldr	r3, [r7, #12]
 801a6c8:	7a9b      	ldrb	r3, [r3, #10]
 801a6ca:	757b      	strb	r3, [r7, #21]
 801a6cc:	e003      	b.n	801a6d6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801a6ce:	23ff      	movs	r3, #255	; 0xff
 801a6d0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801a6d2:	2300      	movs	r3, #0
 801a6d4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801a6d6:	7dba      	ldrb	r2, [r7, #22]
 801a6d8:	693b      	ldr	r3, [r7, #16]
 801a6da:	9302      	str	r3, [sp, #8]
 801a6dc:	2306      	movs	r3, #6
 801a6de:	9301      	str	r3, [sp, #4]
 801a6e0:	7d7b      	ldrb	r3, [r7, #21]
 801a6e2:	9300      	str	r3, [sp, #0]
 801a6e4:	4613      	mov	r3, r2
 801a6e6:	683a      	ldr	r2, [r7, #0]
 801a6e8:	6879      	ldr	r1, [r7, #4]
 801a6ea:	68b8      	ldr	r0, [r7, #8]
 801a6ec:	f002 fad0 	bl	801cc90 <ip4_output_if>
 801a6f0:	4603      	mov	r3, r0
 801a6f2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801a6f4:	68b8      	ldr	r0, [r7, #8]
 801a6f6:	f7f9 ff6d 	bl	80145d4 <pbuf_free>
  return err;
 801a6fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801a6fe:	4618      	mov	r0, r3
 801a700:	3718      	adds	r7, #24
 801a702:	46bd      	mov	sp, r7
 801a704:	bd80      	pop	{r7, pc}
 801a706:	bf00      	nop
 801a708:	080258fc 	.word	0x080258fc
 801a70c:	08026054 	.word	0x08026054
 801a710:	08025950 	.word	0x08025950

0801a714 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801a714:	b590      	push	{r4, r7, lr}
 801a716:	b08b      	sub	sp, #44	; 0x2c
 801a718:	af04      	add	r7, sp, #16
 801a71a:	60f8      	str	r0, [r7, #12]
 801a71c:	60b9      	str	r1, [r7, #8]
 801a71e:	607a      	str	r2, [r7, #4]
 801a720:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801a722:	683b      	ldr	r3, [r7, #0]
 801a724:	2b00      	cmp	r3, #0
 801a726:	d106      	bne.n	801a736 <tcp_rst+0x22>
 801a728:	4b1f      	ldr	r3, [pc, #124]	; (801a7a8 <tcp_rst+0x94>)
 801a72a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801a72e:	491f      	ldr	r1, [pc, #124]	; (801a7ac <tcp_rst+0x98>)
 801a730:	481f      	ldr	r0, [pc, #124]	; (801a7b0 <tcp_rst+0x9c>)
 801a732:	f004 fd3b 	bl	801f1ac <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801a736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a738:	2b00      	cmp	r3, #0
 801a73a:	d106      	bne.n	801a74a <tcp_rst+0x36>
 801a73c:	4b1a      	ldr	r3, [pc, #104]	; (801a7a8 <tcp_rst+0x94>)
 801a73e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801a742:	491c      	ldr	r1, [pc, #112]	; (801a7b4 <tcp_rst+0xa0>)
 801a744:	481a      	ldr	r0, [pc, #104]	; (801a7b0 <tcp_rst+0x9c>)
 801a746:	f004 fd31 	bl	801f1ac <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a74a:	2300      	movs	r3, #0
 801a74c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801a74e:	f246 0308 	movw	r3, #24584	; 0x6008
 801a752:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801a754:	7dfb      	ldrb	r3, [r7, #23]
 801a756:	b29c      	uxth	r4, r3
 801a758:	68b8      	ldr	r0, [r7, #8]
 801a75a:	f7f8 fc08 	bl	8012f6e <lwip_htonl>
 801a75e:	4602      	mov	r2, r0
 801a760:	8abb      	ldrh	r3, [r7, #20]
 801a762:	9303      	str	r3, [sp, #12]
 801a764:	2314      	movs	r3, #20
 801a766:	9302      	str	r3, [sp, #8]
 801a768:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801a76a:	9301      	str	r3, [sp, #4]
 801a76c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801a76e:	9300      	str	r3, [sp, #0]
 801a770:	4613      	mov	r3, r2
 801a772:	2200      	movs	r2, #0
 801a774:	4621      	mov	r1, r4
 801a776:	6878      	ldr	r0, [r7, #4]
 801a778:	f7ff fe92 	bl	801a4a0 <tcp_output_alloc_header_common>
 801a77c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801a77e:	693b      	ldr	r3, [r7, #16]
 801a780:	2b00      	cmp	r3, #0
 801a782:	d00c      	beq.n	801a79e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a784:	7dfb      	ldrb	r3, [r7, #23]
 801a786:	2200      	movs	r2, #0
 801a788:	6939      	ldr	r1, [r7, #16]
 801a78a:	68f8      	ldr	r0, [r7, #12]
 801a78c:	f7ff ff38 	bl	801a600 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801a790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a792:	683a      	ldr	r2, [r7, #0]
 801a794:	6939      	ldr	r1, [r7, #16]
 801a796:	68f8      	ldr	r0, [r7, #12]
 801a798:	f7ff ff72 	bl	801a680 <tcp_output_control_segment>
 801a79c:	e000      	b.n	801a7a0 <tcp_rst+0x8c>
    return;
 801a79e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801a7a0:	371c      	adds	r7, #28
 801a7a2:	46bd      	mov	sp, r7
 801a7a4:	bd90      	pop	{r4, r7, pc}
 801a7a6:	bf00      	nop
 801a7a8:	080258fc 	.word	0x080258fc
 801a7ac:	08026080 	.word	0x08026080
 801a7b0:	08025950 	.word	0x08025950
 801a7b4:	0802609c 	.word	0x0802609c

0801a7b8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801a7b8:	b590      	push	{r4, r7, lr}
 801a7ba:	b087      	sub	sp, #28
 801a7bc:	af00      	add	r7, sp, #0
 801a7be:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801a7c0:	2300      	movs	r3, #0
 801a7c2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801a7c4:	2300      	movs	r3, #0
 801a7c6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801a7c8:	687b      	ldr	r3, [r7, #4]
 801a7ca:	2b00      	cmp	r3, #0
 801a7cc:	d106      	bne.n	801a7dc <tcp_send_empty_ack+0x24>
 801a7ce:	4b28      	ldr	r3, [pc, #160]	; (801a870 <tcp_send_empty_ack+0xb8>)
 801a7d0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801a7d4:	4927      	ldr	r1, [pc, #156]	; (801a874 <tcp_send_empty_ack+0xbc>)
 801a7d6:	4828      	ldr	r0, [pc, #160]	; (801a878 <tcp_send_empty_ack+0xc0>)
 801a7d8:	f004 fce8 	bl	801f1ac <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801a7dc:	7dfb      	ldrb	r3, [r7, #23]
 801a7de:	009b      	lsls	r3, r3, #2
 801a7e0:	b2db      	uxtb	r3, r3
 801a7e2:	f003 0304 	and.w	r3, r3, #4
 801a7e6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801a7e8:	7d7b      	ldrb	r3, [r7, #21]
 801a7ea:	b29c      	uxth	r4, r3
 801a7ec:	687b      	ldr	r3, [r7, #4]
 801a7ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a7f0:	4618      	mov	r0, r3
 801a7f2:	f7f8 fbbc 	bl	8012f6e <lwip_htonl>
 801a7f6:	4603      	mov	r3, r0
 801a7f8:	2200      	movs	r2, #0
 801a7fa:	4621      	mov	r1, r4
 801a7fc:	6878      	ldr	r0, [r7, #4]
 801a7fe:	f7ff fec1 	bl	801a584 <tcp_output_alloc_header>
 801a802:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a804:	693b      	ldr	r3, [r7, #16]
 801a806:	2b00      	cmp	r3, #0
 801a808:	d109      	bne.n	801a81e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a80a:	687b      	ldr	r3, [r7, #4]
 801a80c:	8b5b      	ldrh	r3, [r3, #26]
 801a80e:	f043 0303 	orr.w	r3, r3, #3
 801a812:	b29a      	uxth	r2, r3
 801a814:	687b      	ldr	r3, [r7, #4]
 801a816:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801a818:	f06f 0301 	mvn.w	r3, #1
 801a81c:	e023      	b.n	801a866 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801a81e:	7dbb      	ldrb	r3, [r7, #22]
 801a820:	7dfa      	ldrb	r2, [r7, #23]
 801a822:	6939      	ldr	r1, [r7, #16]
 801a824:	6878      	ldr	r0, [r7, #4]
 801a826:	f7ff feeb 	bl	801a600 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a82a:	687a      	ldr	r2, [r7, #4]
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	3304      	adds	r3, #4
 801a830:	6939      	ldr	r1, [r7, #16]
 801a832:	6878      	ldr	r0, [r7, #4]
 801a834:	f7ff ff24 	bl	801a680 <tcp_output_control_segment>
 801a838:	4603      	mov	r3, r0
 801a83a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801a83c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a840:	2b00      	cmp	r3, #0
 801a842:	d007      	beq.n	801a854 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a844:	687b      	ldr	r3, [r7, #4]
 801a846:	8b5b      	ldrh	r3, [r3, #26]
 801a848:	f043 0303 	orr.w	r3, r3, #3
 801a84c:	b29a      	uxth	r2, r3
 801a84e:	687b      	ldr	r3, [r7, #4]
 801a850:	835a      	strh	r2, [r3, #26]
 801a852:	e006      	b.n	801a862 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	8b5b      	ldrh	r3, [r3, #26]
 801a858:	f023 0303 	bic.w	r3, r3, #3
 801a85c:	b29a      	uxth	r2, r3
 801a85e:	687b      	ldr	r3, [r7, #4]
 801a860:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801a862:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a866:	4618      	mov	r0, r3
 801a868:	371c      	adds	r7, #28
 801a86a:	46bd      	mov	sp, r7
 801a86c:	bd90      	pop	{r4, r7, pc}
 801a86e:	bf00      	nop
 801a870:	080258fc 	.word	0x080258fc
 801a874:	080260b8 	.word	0x080260b8
 801a878:	08025950 	.word	0x08025950

0801a87c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801a87c:	b590      	push	{r4, r7, lr}
 801a87e:	b087      	sub	sp, #28
 801a880:	af00      	add	r7, sp, #0
 801a882:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a884:	2300      	movs	r3, #0
 801a886:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801a888:	687b      	ldr	r3, [r7, #4]
 801a88a:	2b00      	cmp	r3, #0
 801a88c:	d106      	bne.n	801a89c <tcp_keepalive+0x20>
 801a88e:	4b18      	ldr	r3, [pc, #96]	; (801a8f0 <tcp_keepalive+0x74>)
 801a890:	f640 0224 	movw	r2, #2084	; 0x824
 801a894:	4917      	ldr	r1, [pc, #92]	; (801a8f4 <tcp_keepalive+0x78>)
 801a896:	4818      	ldr	r0, [pc, #96]	; (801a8f8 <tcp_keepalive+0x7c>)
 801a898:	f004 fc88 	bl	801f1ac <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801a89c:	7dfb      	ldrb	r3, [r7, #23]
 801a89e:	b29c      	uxth	r4, r3
 801a8a0:	687b      	ldr	r3, [r7, #4]
 801a8a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a8a4:	3b01      	subs	r3, #1
 801a8a6:	4618      	mov	r0, r3
 801a8a8:	f7f8 fb61 	bl	8012f6e <lwip_htonl>
 801a8ac:	4603      	mov	r3, r0
 801a8ae:	2200      	movs	r2, #0
 801a8b0:	4621      	mov	r1, r4
 801a8b2:	6878      	ldr	r0, [r7, #4]
 801a8b4:	f7ff fe66 	bl	801a584 <tcp_output_alloc_header>
 801a8b8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801a8ba:	693b      	ldr	r3, [r7, #16]
 801a8bc:	2b00      	cmp	r3, #0
 801a8be:	d102      	bne.n	801a8c6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801a8c0:	f04f 33ff 	mov.w	r3, #4294967295
 801a8c4:	e010      	b.n	801a8e8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801a8c6:	7dfb      	ldrb	r3, [r7, #23]
 801a8c8:	2200      	movs	r2, #0
 801a8ca:	6939      	ldr	r1, [r7, #16]
 801a8cc:	6878      	ldr	r0, [r7, #4]
 801a8ce:	f7ff fe97 	bl	801a600 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801a8d2:	687a      	ldr	r2, [r7, #4]
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	3304      	adds	r3, #4
 801a8d8:	6939      	ldr	r1, [r7, #16]
 801a8da:	6878      	ldr	r0, [r7, #4]
 801a8dc:	f7ff fed0 	bl	801a680 <tcp_output_control_segment>
 801a8e0:	4603      	mov	r3, r0
 801a8e2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801a8e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801a8e8:	4618      	mov	r0, r3
 801a8ea:	371c      	adds	r7, #28
 801a8ec:	46bd      	mov	sp, r7
 801a8ee:	bd90      	pop	{r4, r7, pc}
 801a8f0:	080258fc 	.word	0x080258fc
 801a8f4:	080260d8 	.word	0x080260d8
 801a8f8:	08025950 	.word	0x08025950

0801a8fc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801a8fc:	b590      	push	{r4, r7, lr}
 801a8fe:	b08b      	sub	sp, #44	; 0x2c
 801a900:	af00      	add	r7, sp, #0
 801a902:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801a904:	2300      	movs	r3, #0
 801a906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801a90a:	687b      	ldr	r3, [r7, #4]
 801a90c:	2b00      	cmp	r3, #0
 801a90e:	d106      	bne.n	801a91e <tcp_zero_window_probe+0x22>
 801a910:	4b4c      	ldr	r3, [pc, #304]	; (801aa44 <tcp_zero_window_probe+0x148>)
 801a912:	f640 024f 	movw	r2, #2127	; 0x84f
 801a916:	494c      	ldr	r1, [pc, #304]	; (801aa48 <tcp_zero_window_probe+0x14c>)
 801a918:	484c      	ldr	r0, [pc, #304]	; (801aa4c <tcp_zero_window_probe+0x150>)
 801a91a:	f004 fc47 	bl	801f1ac <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801a91e:	687b      	ldr	r3, [r7, #4]
 801a920:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a922:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801a924:	6a3b      	ldr	r3, [r7, #32]
 801a926:	2b00      	cmp	r3, #0
 801a928:	d101      	bne.n	801a92e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801a92a:	2300      	movs	r3, #0
 801a92c:	e086      	b.n	801aa3c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801a92e:	687b      	ldr	r3, [r7, #4]
 801a930:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801a934:	2bff      	cmp	r3, #255	; 0xff
 801a936:	d007      	beq.n	801a948 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801a938:	687b      	ldr	r3, [r7, #4]
 801a93a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801a93e:	3301      	adds	r3, #1
 801a940:	b2da      	uxtb	r2, r3
 801a942:	687b      	ldr	r3, [r7, #4]
 801a944:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801a948:	6a3b      	ldr	r3, [r7, #32]
 801a94a:	68db      	ldr	r3, [r3, #12]
 801a94c:	899b      	ldrh	r3, [r3, #12]
 801a94e:	b29b      	uxth	r3, r3
 801a950:	4618      	mov	r0, r3
 801a952:	f7f8 faf7 	bl	8012f44 <lwip_htons>
 801a956:	4603      	mov	r3, r0
 801a958:	b2db      	uxtb	r3, r3
 801a95a:	f003 0301 	and.w	r3, r3, #1
 801a95e:	2b00      	cmp	r3, #0
 801a960:	d005      	beq.n	801a96e <tcp_zero_window_probe+0x72>
 801a962:	6a3b      	ldr	r3, [r7, #32]
 801a964:	891b      	ldrh	r3, [r3, #8]
 801a966:	2b00      	cmp	r3, #0
 801a968:	d101      	bne.n	801a96e <tcp_zero_window_probe+0x72>
 801a96a:	2301      	movs	r3, #1
 801a96c:	e000      	b.n	801a970 <tcp_zero_window_probe+0x74>
 801a96e:	2300      	movs	r3, #0
 801a970:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801a972:	7ffb      	ldrb	r3, [r7, #31]
 801a974:	2b00      	cmp	r3, #0
 801a976:	bf0c      	ite	eq
 801a978:	2301      	moveq	r3, #1
 801a97a:	2300      	movne	r3, #0
 801a97c:	b2db      	uxtb	r3, r3
 801a97e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801a980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a984:	b299      	uxth	r1, r3
 801a986:	6a3b      	ldr	r3, [r7, #32]
 801a988:	68db      	ldr	r3, [r3, #12]
 801a98a:	685b      	ldr	r3, [r3, #4]
 801a98c:	8bba      	ldrh	r2, [r7, #28]
 801a98e:	6878      	ldr	r0, [r7, #4]
 801a990:	f7ff fdf8 	bl	801a584 <tcp_output_alloc_header>
 801a994:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801a996:	69bb      	ldr	r3, [r7, #24]
 801a998:	2b00      	cmp	r3, #0
 801a99a:	d102      	bne.n	801a9a2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801a99c:	f04f 33ff 	mov.w	r3, #4294967295
 801a9a0:	e04c      	b.n	801aa3c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801a9a2:	69bb      	ldr	r3, [r7, #24]
 801a9a4:	685b      	ldr	r3, [r3, #4]
 801a9a6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801a9a8:	7ffb      	ldrb	r3, [r7, #31]
 801a9aa:	2b00      	cmp	r3, #0
 801a9ac:	d011      	beq.n	801a9d2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801a9ae:	697b      	ldr	r3, [r7, #20]
 801a9b0:	899b      	ldrh	r3, [r3, #12]
 801a9b2:	b29b      	uxth	r3, r3
 801a9b4:	b21b      	sxth	r3, r3
 801a9b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801a9ba:	b21c      	sxth	r4, r3
 801a9bc:	2011      	movs	r0, #17
 801a9be:	f7f8 fac1 	bl	8012f44 <lwip_htons>
 801a9c2:	4603      	mov	r3, r0
 801a9c4:	b21b      	sxth	r3, r3
 801a9c6:	4323      	orrs	r3, r4
 801a9c8:	b21b      	sxth	r3, r3
 801a9ca:	b29a      	uxth	r2, r3
 801a9cc:	697b      	ldr	r3, [r7, #20]
 801a9ce:	819a      	strh	r2, [r3, #12]
 801a9d0:	e010      	b.n	801a9f4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801a9d2:	69bb      	ldr	r3, [r7, #24]
 801a9d4:	685b      	ldr	r3, [r3, #4]
 801a9d6:	3314      	adds	r3, #20
 801a9d8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801a9da:	6a3b      	ldr	r3, [r7, #32]
 801a9dc:	6858      	ldr	r0, [r3, #4]
 801a9de:	6a3b      	ldr	r3, [r7, #32]
 801a9e0:	685b      	ldr	r3, [r3, #4]
 801a9e2:	891a      	ldrh	r2, [r3, #8]
 801a9e4:	6a3b      	ldr	r3, [r7, #32]
 801a9e6:	891b      	ldrh	r3, [r3, #8]
 801a9e8:	1ad3      	subs	r3, r2, r3
 801a9ea:	b29b      	uxth	r3, r3
 801a9ec:	2201      	movs	r2, #1
 801a9ee:	6939      	ldr	r1, [r7, #16]
 801a9f0:	f7f9 fff6 	bl	80149e0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801a9f4:	6a3b      	ldr	r3, [r7, #32]
 801a9f6:	68db      	ldr	r3, [r3, #12]
 801a9f8:	685b      	ldr	r3, [r3, #4]
 801a9fa:	4618      	mov	r0, r3
 801a9fc:	f7f8 fab7 	bl	8012f6e <lwip_htonl>
 801aa00:	4603      	mov	r3, r0
 801aa02:	3301      	adds	r3, #1
 801aa04:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801aa06:	687b      	ldr	r3, [r7, #4]
 801aa08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801aa0a:	68fb      	ldr	r3, [r7, #12]
 801aa0c:	1ad3      	subs	r3, r2, r3
 801aa0e:	2b00      	cmp	r3, #0
 801aa10:	da02      	bge.n	801aa18 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	68fa      	ldr	r2, [r7, #12]
 801aa16:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801aa18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801aa1c:	2200      	movs	r2, #0
 801aa1e:	69b9      	ldr	r1, [r7, #24]
 801aa20:	6878      	ldr	r0, [r7, #4]
 801aa22:	f7ff fded 	bl	801a600 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801aa26:	687a      	ldr	r2, [r7, #4]
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	3304      	adds	r3, #4
 801aa2c:	69b9      	ldr	r1, [r7, #24]
 801aa2e:	6878      	ldr	r0, [r7, #4]
 801aa30:	f7ff fe26 	bl	801a680 <tcp_output_control_segment>
 801aa34:	4603      	mov	r3, r0
 801aa36:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801aa38:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801aa3c:	4618      	mov	r0, r3
 801aa3e:	372c      	adds	r7, #44	; 0x2c
 801aa40:	46bd      	mov	sp, r7
 801aa42:	bd90      	pop	{r4, r7, pc}
 801aa44:	080258fc 	.word	0x080258fc
 801aa48:	080260f4 	.word	0x080260f4
 801aa4c:	08025950 	.word	0x08025950

0801aa50 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801aa50:	b580      	push	{r7, lr}
 801aa52:	b082      	sub	sp, #8
 801aa54:	af00      	add	r7, sp, #0
 801aa56:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801aa58:	f7fa f8b0 	bl	8014bbc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801aa5c:	4b0a      	ldr	r3, [pc, #40]	; (801aa88 <tcpip_tcp_timer+0x38>)
 801aa5e:	681b      	ldr	r3, [r3, #0]
 801aa60:	2b00      	cmp	r3, #0
 801aa62:	d103      	bne.n	801aa6c <tcpip_tcp_timer+0x1c>
 801aa64:	4b09      	ldr	r3, [pc, #36]	; (801aa8c <tcpip_tcp_timer+0x3c>)
 801aa66:	681b      	ldr	r3, [r3, #0]
 801aa68:	2b00      	cmp	r3, #0
 801aa6a:	d005      	beq.n	801aa78 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801aa6c:	2200      	movs	r2, #0
 801aa6e:	4908      	ldr	r1, [pc, #32]	; (801aa90 <tcpip_tcp_timer+0x40>)
 801aa70:	20fa      	movs	r0, #250	; 0xfa
 801aa72:	f000 f8f3 	bl	801ac5c <sys_timeout>
 801aa76:	e003      	b.n	801aa80 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801aa78:	4b06      	ldr	r3, [pc, #24]	; (801aa94 <tcpip_tcp_timer+0x44>)
 801aa7a:	2200      	movs	r2, #0
 801aa7c:	601a      	str	r2, [r3, #0]
  }
}
 801aa7e:	bf00      	nop
 801aa80:	bf00      	nop
 801aa82:	3708      	adds	r7, #8
 801aa84:	46bd      	mov	sp, r7
 801aa86:	bd80      	pop	{r7, pc}
 801aa88:	2000e170 	.word	0x2000e170
 801aa8c:	2000e180 	.word	0x2000e180
 801aa90:	0801aa51 	.word	0x0801aa51
 801aa94:	20006e50 	.word	0x20006e50

0801aa98 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801aa98:	b580      	push	{r7, lr}
 801aa9a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801aa9c:	4b0a      	ldr	r3, [pc, #40]	; (801aac8 <tcp_timer_needed+0x30>)
 801aa9e:	681b      	ldr	r3, [r3, #0]
 801aaa0:	2b00      	cmp	r3, #0
 801aaa2:	d10f      	bne.n	801aac4 <tcp_timer_needed+0x2c>
 801aaa4:	4b09      	ldr	r3, [pc, #36]	; (801aacc <tcp_timer_needed+0x34>)
 801aaa6:	681b      	ldr	r3, [r3, #0]
 801aaa8:	2b00      	cmp	r3, #0
 801aaaa:	d103      	bne.n	801aab4 <tcp_timer_needed+0x1c>
 801aaac:	4b08      	ldr	r3, [pc, #32]	; (801aad0 <tcp_timer_needed+0x38>)
 801aaae:	681b      	ldr	r3, [r3, #0]
 801aab0:	2b00      	cmp	r3, #0
 801aab2:	d007      	beq.n	801aac4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801aab4:	4b04      	ldr	r3, [pc, #16]	; (801aac8 <tcp_timer_needed+0x30>)
 801aab6:	2201      	movs	r2, #1
 801aab8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801aaba:	2200      	movs	r2, #0
 801aabc:	4905      	ldr	r1, [pc, #20]	; (801aad4 <tcp_timer_needed+0x3c>)
 801aabe:	20fa      	movs	r0, #250	; 0xfa
 801aac0:	f000 f8cc 	bl	801ac5c <sys_timeout>
  }
}
 801aac4:	bf00      	nop
 801aac6:	bd80      	pop	{r7, pc}
 801aac8:	20006e50 	.word	0x20006e50
 801aacc:	2000e170 	.word	0x2000e170
 801aad0:	2000e180 	.word	0x2000e180
 801aad4:	0801aa51 	.word	0x0801aa51

0801aad8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801aad8:	b580      	push	{r7, lr}
 801aada:	b086      	sub	sp, #24
 801aadc:	af00      	add	r7, sp, #0
 801aade:	60f8      	str	r0, [r7, #12]
 801aae0:	60b9      	str	r1, [r7, #8]
 801aae2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801aae4:	200a      	movs	r0, #10
 801aae6:	f7f8 fee3 	bl	80138b0 <memp_malloc>
 801aaea:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801aaec:	693b      	ldr	r3, [r7, #16]
 801aaee:	2b00      	cmp	r3, #0
 801aaf0:	d109      	bne.n	801ab06 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801aaf2:	693b      	ldr	r3, [r7, #16]
 801aaf4:	2b00      	cmp	r3, #0
 801aaf6:	d151      	bne.n	801ab9c <sys_timeout_abs+0xc4>
 801aaf8:	4b2a      	ldr	r3, [pc, #168]	; (801aba4 <sys_timeout_abs+0xcc>)
 801aafa:	22be      	movs	r2, #190	; 0xbe
 801aafc:	492a      	ldr	r1, [pc, #168]	; (801aba8 <sys_timeout_abs+0xd0>)
 801aafe:	482b      	ldr	r0, [pc, #172]	; (801abac <sys_timeout_abs+0xd4>)
 801ab00:	f004 fb54 	bl	801f1ac <iprintf>
    return;
 801ab04:	e04a      	b.n	801ab9c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801ab06:	693b      	ldr	r3, [r7, #16]
 801ab08:	2200      	movs	r2, #0
 801ab0a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801ab0c:	693b      	ldr	r3, [r7, #16]
 801ab0e:	68ba      	ldr	r2, [r7, #8]
 801ab10:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801ab12:	693b      	ldr	r3, [r7, #16]
 801ab14:	687a      	ldr	r2, [r7, #4]
 801ab16:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801ab18:	693b      	ldr	r3, [r7, #16]
 801ab1a:	68fa      	ldr	r2, [r7, #12]
 801ab1c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801ab1e:	4b24      	ldr	r3, [pc, #144]	; (801abb0 <sys_timeout_abs+0xd8>)
 801ab20:	681b      	ldr	r3, [r3, #0]
 801ab22:	2b00      	cmp	r3, #0
 801ab24:	d103      	bne.n	801ab2e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801ab26:	4a22      	ldr	r2, [pc, #136]	; (801abb0 <sys_timeout_abs+0xd8>)
 801ab28:	693b      	ldr	r3, [r7, #16]
 801ab2a:	6013      	str	r3, [r2, #0]
    return;
 801ab2c:	e037      	b.n	801ab9e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801ab2e:	693b      	ldr	r3, [r7, #16]
 801ab30:	685a      	ldr	r2, [r3, #4]
 801ab32:	4b1f      	ldr	r3, [pc, #124]	; (801abb0 <sys_timeout_abs+0xd8>)
 801ab34:	681b      	ldr	r3, [r3, #0]
 801ab36:	685b      	ldr	r3, [r3, #4]
 801ab38:	1ad3      	subs	r3, r2, r3
 801ab3a:	0fdb      	lsrs	r3, r3, #31
 801ab3c:	f003 0301 	and.w	r3, r3, #1
 801ab40:	b2db      	uxtb	r3, r3
 801ab42:	2b00      	cmp	r3, #0
 801ab44:	d007      	beq.n	801ab56 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801ab46:	4b1a      	ldr	r3, [pc, #104]	; (801abb0 <sys_timeout_abs+0xd8>)
 801ab48:	681a      	ldr	r2, [r3, #0]
 801ab4a:	693b      	ldr	r3, [r7, #16]
 801ab4c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801ab4e:	4a18      	ldr	r2, [pc, #96]	; (801abb0 <sys_timeout_abs+0xd8>)
 801ab50:	693b      	ldr	r3, [r7, #16]
 801ab52:	6013      	str	r3, [r2, #0]
 801ab54:	e023      	b.n	801ab9e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801ab56:	4b16      	ldr	r3, [pc, #88]	; (801abb0 <sys_timeout_abs+0xd8>)
 801ab58:	681b      	ldr	r3, [r3, #0]
 801ab5a:	617b      	str	r3, [r7, #20]
 801ab5c:	e01a      	b.n	801ab94 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801ab5e:	697b      	ldr	r3, [r7, #20]
 801ab60:	681b      	ldr	r3, [r3, #0]
 801ab62:	2b00      	cmp	r3, #0
 801ab64:	d00b      	beq.n	801ab7e <sys_timeout_abs+0xa6>
 801ab66:	693b      	ldr	r3, [r7, #16]
 801ab68:	685a      	ldr	r2, [r3, #4]
 801ab6a:	697b      	ldr	r3, [r7, #20]
 801ab6c:	681b      	ldr	r3, [r3, #0]
 801ab6e:	685b      	ldr	r3, [r3, #4]
 801ab70:	1ad3      	subs	r3, r2, r3
 801ab72:	0fdb      	lsrs	r3, r3, #31
 801ab74:	f003 0301 	and.w	r3, r3, #1
 801ab78:	b2db      	uxtb	r3, r3
 801ab7a:	2b00      	cmp	r3, #0
 801ab7c:	d007      	beq.n	801ab8e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801ab7e:	697b      	ldr	r3, [r7, #20]
 801ab80:	681a      	ldr	r2, [r3, #0]
 801ab82:	693b      	ldr	r3, [r7, #16]
 801ab84:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801ab86:	697b      	ldr	r3, [r7, #20]
 801ab88:	693a      	ldr	r2, [r7, #16]
 801ab8a:	601a      	str	r2, [r3, #0]
        break;
 801ab8c:	e007      	b.n	801ab9e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801ab8e:	697b      	ldr	r3, [r7, #20]
 801ab90:	681b      	ldr	r3, [r3, #0]
 801ab92:	617b      	str	r3, [r7, #20]
 801ab94:	697b      	ldr	r3, [r7, #20]
 801ab96:	2b00      	cmp	r3, #0
 801ab98:	d1e1      	bne.n	801ab5e <sys_timeout_abs+0x86>
 801ab9a:	e000      	b.n	801ab9e <sys_timeout_abs+0xc6>
    return;
 801ab9c:	bf00      	nop
      }
    }
  }
}
 801ab9e:	3718      	adds	r7, #24
 801aba0:	46bd      	mov	sp, r7
 801aba2:	bd80      	pop	{r7, pc}
 801aba4:	08026118 	.word	0x08026118
 801aba8:	0802614c 	.word	0x0802614c
 801abac:	0802618c 	.word	0x0802618c
 801abb0:	20006e48 	.word	0x20006e48

0801abb4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801abb4:	b580      	push	{r7, lr}
 801abb6:	b086      	sub	sp, #24
 801abb8:	af00      	add	r7, sp, #0
 801abba:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801abbc:	687b      	ldr	r3, [r7, #4]
 801abbe:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801abc0:	697b      	ldr	r3, [r7, #20]
 801abc2:	685b      	ldr	r3, [r3, #4]
 801abc4:	4798      	blx	r3

  now = sys_now();
 801abc6:	f7f2 fe99 	bl	800d8fc <sys_now>
 801abca:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801abcc:	697b      	ldr	r3, [r7, #20]
 801abce:	681a      	ldr	r2, [r3, #0]
 801abd0:	4b0f      	ldr	r3, [pc, #60]	; (801ac10 <lwip_cyclic_timer+0x5c>)
 801abd2:	681b      	ldr	r3, [r3, #0]
 801abd4:	4413      	add	r3, r2
 801abd6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801abd8:	68fa      	ldr	r2, [r7, #12]
 801abda:	693b      	ldr	r3, [r7, #16]
 801abdc:	1ad3      	subs	r3, r2, r3
 801abde:	0fdb      	lsrs	r3, r3, #31
 801abe0:	f003 0301 	and.w	r3, r3, #1
 801abe4:	b2db      	uxtb	r3, r3
 801abe6:	2b00      	cmp	r3, #0
 801abe8:	d009      	beq.n	801abfe <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801abea:	697b      	ldr	r3, [r7, #20]
 801abec:	681a      	ldr	r2, [r3, #0]
 801abee:	693b      	ldr	r3, [r7, #16]
 801abf0:	4413      	add	r3, r2
 801abf2:	687a      	ldr	r2, [r7, #4]
 801abf4:	4907      	ldr	r1, [pc, #28]	; (801ac14 <lwip_cyclic_timer+0x60>)
 801abf6:	4618      	mov	r0, r3
 801abf8:	f7ff ff6e 	bl	801aad8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801abfc:	e004      	b.n	801ac08 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801abfe:	687a      	ldr	r2, [r7, #4]
 801ac00:	4904      	ldr	r1, [pc, #16]	; (801ac14 <lwip_cyclic_timer+0x60>)
 801ac02:	68f8      	ldr	r0, [r7, #12]
 801ac04:	f7ff ff68 	bl	801aad8 <sys_timeout_abs>
}
 801ac08:	bf00      	nop
 801ac0a:	3718      	adds	r7, #24
 801ac0c:	46bd      	mov	sp, r7
 801ac0e:	bd80      	pop	{r7, pc}
 801ac10:	20006e4c 	.word	0x20006e4c
 801ac14:	0801abb5 	.word	0x0801abb5

0801ac18 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801ac18:	b580      	push	{r7, lr}
 801ac1a:	b082      	sub	sp, #8
 801ac1c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801ac1e:	2301      	movs	r3, #1
 801ac20:	607b      	str	r3, [r7, #4]
 801ac22:	e00e      	b.n	801ac42 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801ac24:	4a0b      	ldr	r2, [pc, #44]	; (801ac54 <sys_timeouts_init+0x3c>)
 801ac26:	687b      	ldr	r3, [r7, #4]
 801ac28:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801ac2c:	687b      	ldr	r3, [r7, #4]
 801ac2e:	00db      	lsls	r3, r3, #3
 801ac30:	4a08      	ldr	r2, [pc, #32]	; (801ac54 <sys_timeouts_init+0x3c>)
 801ac32:	4413      	add	r3, r2
 801ac34:	461a      	mov	r2, r3
 801ac36:	4908      	ldr	r1, [pc, #32]	; (801ac58 <sys_timeouts_init+0x40>)
 801ac38:	f000 f810 	bl	801ac5c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	3301      	adds	r3, #1
 801ac40:	607b      	str	r3, [r7, #4]
 801ac42:	687b      	ldr	r3, [r7, #4]
 801ac44:	2b02      	cmp	r3, #2
 801ac46:	d9ed      	bls.n	801ac24 <sys_timeouts_init+0xc>
  }
}
 801ac48:	bf00      	nop
 801ac4a:	bf00      	nop
 801ac4c:	3708      	adds	r7, #8
 801ac4e:	46bd      	mov	sp, r7
 801ac50:	bd80      	pop	{r7, pc}
 801ac52:	bf00      	nop
 801ac54:	08026f08 	.word	0x08026f08
 801ac58:	0801abb5 	.word	0x0801abb5

0801ac5c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801ac5c:	b580      	push	{r7, lr}
 801ac5e:	b086      	sub	sp, #24
 801ac60:	af00      	add	r7, sp, #0
 801ac62:	60f8      	str	r0, [r7, #12]
 801ac64:	60b9      	str	r1, [r7, #8]
 801ac66:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801ac68:	68fb      	ldr	r3, [r7, #12]
 801ac6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ac6e:	d306      	bcc.n	801ac7e <sys_timeout+0x22>
 801ac70:	4b0a      	ldr	r3, [pc, #40]	; (801ac9c <sys_timeout+0x40>)
 801ac72:	f240 1229 	movw	r2, #297	; 0x129
 801ac76:	490a      	ldr	r1, [pc, #40]	; (801aca0 <sys_timeout+0x44>)
 801ac78:	480a      	ldr	r0, [pc, #40]	; (801aca4 <sys_timeout+0x48>)
 801ac7a:	f004 fa97 	bl	801f1ac <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801ac7e:	f7f2 fe3d 	bl	800d8fc <sys_now>
 801ac82:	4602      	mov	r2, r0
 801ac84:	68fb      	ldr	r3, [r7, #12]
 801ac86:	4413      	add	r3, r2
 801ac88:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801ac8a:	687a      	ldr	r2, [r7, #4]
 801ac8c:	68b9      	ldr	r1, [r7, #8]
 801ac8e:	6978      	ldr	r0, [r7, #20]
 801ac90:	f7ff ff22 	bl	801aad8 <sys_timeout_abs>
#endif
}
 801ac94:	bf00      	nop
 801ac96:	3718      	adds	r7, #24
 801ac98:	46bd      	mov	sp, r7
 801ac9a:	bd80      	pop	{r7, pc}
 801ac9c:	08026118 	.word	0x08026118
 801aca0:	080261b4 	.word	0x080261b4
 801aca4:	0802618c 	.word	0x0802618c

0801aca8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801aca8:	b580      	push	{r7, lr}
 801acaa:	b084      	sub	sp, #16
 801acac:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801acae:	f7f2 fe25 	bl	800d8fc <sys_now>
 801acb2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801acb4:	4b17      	ldr	r3, [pc, #92]	; (801ad14 <sys_check_timeouts+0x6c>)
 801acb6:	681b      	ldr	r3, [r3, #0]
 801acb8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801acba:	68bb      	ldr	r3, [r7, #8]
 801acbc:	2b00      	cmp	r3, #0
 801acbe:	d022      	beq.n	801ad06 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801acc0:	68bb      	ldr	r3, [r7, #8]
 801acc2:	685b      	ldr	r3, [r3, #4]
 801acc4:	68fa      	ldr	r2, [r7, #12]
 801acc6:	1ad3      	subs	r3, r2, r3
 801acc8:	0fdb      	lsrs	r3, r3, #31
 801acca:	f003 0301 	and.w	r3, r3, #1
 801acce:	b2db      	uxtb	r3, r3
 801acd0:	2b00      	cmp	r3, #0
 801acd2:	d11a      	bne.n	801ad0a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801acd4:	68bb      	ldr	r3, [r7, #8]
 801acd6:	681b      	ldr	r3, [r3, #0]
 801acd8:	4a0e      	ldr	r2, [pc, #56]	; (801ad14 <sys_check_timeouts+0x6c>)
 801acda:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801acdc:	68bb      	ldr	r3, [r7, #8]
 801acde:	689b      	ldr	r3, [r3, #8]
 801ace0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801ace2:	68bb      	ldr	r3, [r7, #8]
 801ace4:	68db      	ldr	r3, [r3, #12]
 801ace6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801ace8:	68bb      	ldr	r3, [r7, #8]
 801acea:	685b      	ldr	r3, [r3, #4]
 801acec:	4a0a      	ldr	r2, [pc, #40]	; (801ad18 <sys_check_timeouts+0x70>)
 801acee:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801acf0:	68b9      	ldr	r1, [r7, #8]
 801acf2:	200a      	movs	r0, #10
 801acf4:	f7f8 fe2e 	bl	8013954 <memp_free>
    if (handler != NULL) {
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	2b00      	cmp	r3, #0
 801acfc:	d0da      	beq.n	801acb4 <sys_check_timeouts+0xc>
      handler(arg);
 801acfe:	687b      	ldr	r3, [r7, #4]
 801ad00:	6838      	ldr	r0, [r7, #0]
 801ad02:	4798      	blx	r3
  do {
 801ad04:	e7d6      	b.n	801acb4 <sys_check_timeouts+0xc>
      return;
 801ad06:	bf00      	nop
 801ad08:	e000      	b.n	801ad0c <sys_check_timeouts+0x64>
      return;
 801ad0a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801ad0c:	3710      	adds	r7, #16
 801ad0e:	46bd      	mov	sp, r7
 801ad10:	bd80      	pop	{r7, pc}
 801ad12:	bf00      	nop
 801ad14:	20006e48 	.word	0x20006e48
 801ad18:	20006e4c 	.word	0x20006e4c

0801ad1c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801ad1c:	b580      	push	{r7, lr}
 801ad1e:	b082      	sub	sp, #8
 801ad20:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801ad22:	4b16      	ldr	r3, [pc, #88]	; (801ad7c <sys_timeouts_sleeptime+0x60>)
 801ad24:	681b      	ldr	r3, [r3, #0]
 801ad26:	2b00      	cmp	r3, #0
 801ad28:	d102      	bne.n	801ad30 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801ad2a:	f04f 33ff 	mov.w	r3, #4294967295
 801ad2e:	e020      	b.n	801ad72 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801ad30:	f7f2 fde4 	bl	800d8fc <sys_now>
 801ad34:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801ad36:	4b11      	ldr	r3, [pc, #68]	; (801ad7c <sys_timeouts_sleeptime+0x60>)
 801ad38:	681b      	ldr	r3, [r3, #0]
 801ad3a:	685a      	ldr	r2, [r3, #4]
 801ad3c:	687b      	ldr	r3, [r7, #4]
 801ad3e:	1ad3      	subs	r3, r2, r3
 801ad40:	0fdb      	lsrs	r3, r3, #31
 801ad42:	f003 0301 	and.w	r3, r3, #1
 801ad46:	b2db      	uxtb	r3, r3
 801ad48:	2b00      	cmp	r3, #0
 801ad4a:	d001      	beq.n	801ad50 <sys_timeouts_sleeptime+0x34>
    return 0;
 801ad4c:	2300      	movs	r3, #0
 801ad4e:	e010      	b.n	801ad72 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801ad50:	4b0a      	ldr	r3, [pc, #40]	; (801ad7c <sys_timeouts_sleeptime+0x60>)
 801ad52:	681b      	ldr	r3, [r3, #0]
 801ad54:	685a      	ldr	r2, [r3, #4]
 801ad56:	687b      	ldr	r3, [r7, #4]
 801ad58:	1ad3      	subs	r3, r2, r3
 801ad5a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801ad5c:	683b      	ldr	r3, [r7, #0]
 801ad5e:	2b00      	cmp	r3, #0
 801ad60:	da06      	bge.n	801ad70 <sys_timeouts_sleeptime+0x54>
 801ad62:	4b07      	ldr	r3, [pc, #28]	; (801ad80 <sys_timeouts_sleeptime+0x64>)
 801ad64:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801ad68:	4906      	ldr	r1, [pc, #24]	; (801ad84 <sys_timeouts_sleeptime+0x68>)
 801ad6a:	4807      	ldr	r0, [pc, #28]	; (801ad88 <sys_timeouts_sleeptime+0x6c>)
 801ad6c:	f004 fa1e 	bl	801f1ac <iprintf>
    return ret;
 801ad70:	683b      	ldr	r3, [r7, #0]
  }
}
 801ad72:	4618      	mov	r0, r3
 801ad74:	3708      	adds	r7, #8
 801ad76:	46bd      	mov	sp, r7
 801ad78:	bd80      	pop	{r7, pc}
 801ad7a:	bf00      	nop
 801ad7c:	20006e48 	.word	0x20006e48
 801ad80:	08026118 	.word	0x08026118
 801ad84:	080261ec 	.word	0x080261ec
 801ad88:	0802618c 	.word	0x0802618c

0801ad8c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801ad8c:	b580      	push	{r7, lr}
 801ad8e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801ad90:	f004 fa24 	bl	801f1dc <rand>
 801ad94:	4603      	mov	r3, r0
 801ad96:	b29b      	uxth	r3, r3
 801ad98:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801ad9c:	b29b      	uxth	r3, r3
 801ad9e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801ada2:	b29a      	uxth	r2, r3
 801ada4:	4b01      	ldr	r3, [pc, #4]	; (801adac <udp_init+0x20>)
 801ada6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801ada8:	bf00      	nop
 801adaa:	bd80      	pop	{r7, pc}
 801adac:	200003b4 	.word	0x200003b4

0801adb0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801adb0:	b480      	push	{r7}
 801adb2:	b083      	sub	sp, #12
 801adb4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801adb6:	2300      	movs	r3, #0
 801adb8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801adba:	4b17      	ldr	r3, [pc, #92]	; (801ae18 <udp_new_port+0x68>)
 801adbc:	881b      	ldrh	r3, [r3, #0]
 801adbe:	1c5a      	adds	r2, r3, #1
 801adc0:	b291      	uxth	r1, r2
 801adc2:	4a15      	ldr	r2, [pc, #84]	; (801ae18 <udp_new_port+0x68>)
 801adc4:	8011      	strh	r1, [r2, #0]
 801adc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801adca:	4293      	cmp	r3, r2
 801adcc:	d103      	bne.n	801add6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801adce:	4b12      	ldr	r3, [pc, #72]	; (801ae18 <udp_new_port+0x68>)
 801add0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801add4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801add6:	4b11      	ldr	r3, [pc, #68]	; (801ae1c <udp_new_port+0x6c>)
 801add8:	681b      	ldr	r3, [r3, #0]
 801adda:	603b      	str	r3, [r7, #0]
 801addc:	e011      	b.n	801ae02 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801adde:	683b      	ldr	r3, [r7, #0]
 801ade0:	8a5a      	ldrh	r2, [r3, #18]
 801ade2:	4b0d      	ldr	r3, [pc, #52]	; (801ae18 <udp_new_port+0x68>)
 801ade4:	881b      	ldrh	r3, [r3, #0]
 801ade6:	429a      	cmp	r2, r3
 801ade8:	d108      	bne.n	801adfc <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801adea:	88fb      	ldrh	r3, [r7, #6]
 801adec:	3301      	adds	r3, #1
 801adee:	80fb      	strh	r3, [r7, #6]
 801adf0:	88fb      	ldrh	r3, [r7, #6]
 801adf2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801adf6:	d3e0      	bcc.n	801adba <udp_new_port+0xa>
        return 0;
 801adf8:	2300      	movs	r3, #0
 801adfa:	e007      	b.n	801ae0c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801adfc:	683b      	ldr	r3, [r7, #0]
 801adfe:	68db      	ldr	r3, [r3, #12]
 801ae00:	603b      	str	r3, [r7, #0]
 801ae02:	683b      	ldr	r3, [r7, #0]
 801ae04:	2b00      	cmp	r3, #0
 801ae06:	d1ea      	bne.n	801adde <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801ae08:	4b03      	ldr	r3, [pc, #12]	; (801ae18 <udp_new_port+0x68>)
 801ae0a:	881b      	ldrh	r3, [r3, #0]
}
 801ae0c:	4618      	mov	r0, r3
 801ae0e:	370c      	adds	r7, #12
 801ae10:	46bd      	mov	sp, r7
 801ae12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae16:	4770      	bx	lr
 801ae18:	200003b4 	.word	0x200003b4
 801ae1c:	2000e188 	.word	0x2000e188

0801ae20 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801ae20:	b580      	push	{r7, lr}
 801ae22:	b084      	sub	sp, #16
 801ae24:	af00      	add	r7, sp, #0
 801ae26:	60f8      	str	r0, [r7, #12]
 801ae28:	60b9      	str	r1, [r7, #8]
 801ae2a:	4613      	mov	r3, r2
 801ae2c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801ae2e:	68fb      	ldr	r3, [r7, #12]
 801ae30:	2b00      	cmp	r3, #0
 801ae32:	d105      	bne.n	801ae40 <udp_input_local_match+0x20>
 801ae34:	4b27      	ldr	r3, [pc, #156]	; (801aed4 <udp_input_local_match+0xb4>)
 801ae36:	2287      	movs	r2, #135	; 0x87
 801ae38:	4927      	ldr	r1, [pc, #156]	; (801aed8 <udp_input_local_match+0xb8>)
 801ae3a:	4828      	ldr	r0, [pc, #160]	; (801aedc <udp_input_local_match+0xbc>)
 801ae3c:	f004 f9b6 	bl	801f1ac <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801ae40:	68bb      	ldr	r3, [r7, #8]
 801ae42:	2b00      	cmp	r3, #0
 801ae44:	d105      	bne.n	801ae52 <udp_input_local_match+0x32>
 801ae46:	4b23      	ldr	r3, [pc, #140]	; (801aed4 <udp_input_local_match+0xb4>)
 801ae48:	2288      	movs	r2, #136	; 0x88
 801ae4a:	4925      	ldr	r1, [pc, #148]	; (801aee0 <udp_input_local_match+0xc0>)
 801ae4c:	4823      	ldr	r0, [pc, #140]	; (801aedc <udp_input_local_match+0xbc>)
 801ae4e:	f004 f9ad 	bl	801f1ac <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ae52:	68fb      	ldr	r3, [r7, #12]
 801ae54:	7a1b      	ldrb	r3, [r3, #8]
 801ae56:	2b00      	cmp	r3, #0
 801ae58:	d00b      	beq.n	801ae72 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801ae5a:	68fb      	ldr	r3, [r7, #12]
 801ae5c:	7a1a      	ldrb	r2, [r3, #8]
 801ae5e:	4b21      	ldr	r3, [pc, #132]	; (801aee4 <udp_input_local_match+0xc4>)
 801ae60:	685b      	ldr	r3, [r3, #4]
 801ae62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801ae66:	3301      	adds	r3, #1
 801ae68:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801ae6a:	429a      	cmp	r2, r3
 801ae6c:	d001      	beq.n	801ae72 <udp_input_local_match+0x52>
    return 0;
 801ae6e:	2300      	movs	r3, #0
 801ae70:	e02b      	b.n	801aeca <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801ae72:	79fb      	ldrb	r3, [r7, #7]
 801ae74:	2b00      	cmp	r3, #0
 801ae76:	d018      	beq.n	801aeaa <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ae78:	68fb      	ldr	r3, [r7, #12]
 801ae7a:	2b00      	cmp	r3, #0
 801ae7c:	d013      	beq.n	801aea6 <udp_input_local_match+0x86>
 801ae7e:	68fb      	ldr	r3, [r7, #12]
 801ae80:	681b      	ldr	r3, [r3, #0]
 801ae82:	2b00      	cmp	r3, #0
 801ae84:	d00f      	beq.n	801aea6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801ae86:	4b17      	ldr	r3, [pc, #92]	; (801aee4 <udp_input_local_match+0xc4>)
 801ae88:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801ae8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ae8e:	d00a      	beq.n	801aea6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801ae90:	68fb      	ldr	r3, [r7, #12]
 801ae92:	681a      	ldr	r2, [r3, #0]
 801ae94:	4b13      	ldr	r3, [pc, #76]	; (801aee4 <udp_input_local_match+0xc4>)
 801ae96:	695b      	ldr	r3, [r3, #20]
 801ae98:	405a      	eors	r2, r3
 801ae9a:	68bb      	ldr	r3, [r7, #8]
 801ae9c:	3308      	adds	r3, #8
 801ae9e:	681b      	ldr	r3, [r3, #0]
 801aea0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801aea2:	2b00      	cmp	r3, #0
 801aea4:	d110      	bne.n	801aec8 <udp_input_local_match+0xa8>
          return 1;
 801aea6:	2301      	movs	r3, #1
 801aea8:	e00f      	b.n	801aeca <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801aeaa:	68fb      	ldr	r3, [r7, #12]
 801aeac:	2b00      	cmp	r3, #0
 801aeae:	d009      	beq.n	801aec4 <udp_input_local_match+0xa4>
 801aeb0:	68fb      	ldr	r3, [r7, #12]
 801aeb2:	681b      	ldr	r3, [r3, #0]
 801aeb4:	2b00      	cmp	r3, #0
 801aeb6:	d005      	beq.n	801aec4 <udp_input_local_match+0xa4>
 801aeb8:	68fb      	ldr	r3, [r7, #12]
 801aeba:	681a      	ldr	r2, [r3, #0]
 801aebc:	4b09      	ldr	r3, [pc, #36]	; (801aee4 <udp_input_local_match+0xc4>)
 801aebe:	695b      	ldr	r3, [r3, #20]
 801aec0:	429a      	cmp	r2, r3
 801aec2:	d101      	bne.n	801aec8 <udp_input_local_match+0xa8>
        return 1;
 801aec4:	2301      	movs	r3, #1
 801aec6:	e000      	b.n	801aeca <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801aec8:	2300      	movs	r3, #0
}
 801aeca:	4618      	mov	r0, r3
 801aecc:	3710      	adds	r7, #16
 801aece:	46bd      	mov	sp, r7
 801aed0:	bd80      	pop	{r7, pc}
 801aed2:	bf00      	nop
 801aed4:	08026200 	.word	0x08026200
 801aed8:	08026230 	.word	0x08026230
 801aedc:	08026254 	.word	0x08026254
 801aee0:	0802627c 	.word	0x0802627c
 801aee4:	2000aa5c 	.word	0x2000aa5c

0801aee8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801aee8:	b590      	push	{r4, r7, lr}
 801aeea:	b08d      	sub	sp, #52	; 0x34
 801aeec:	af02      	add	r7, sp, #8
 801aeee:	6078      	str	r0, [r7, #4]
 801aef0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801aef2:	2300      	movs	r3, #0
 801aef4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801aef6:	687b      	ldr	r3, [r7, #4]
 801aef8:	2b00      	cmp	r3, #0
 801aefa:	d105      	bne.n	801af08 <udp_input+0x20>
 801aefc:	4b7c      	ldr	r3, [pc, #496]	; (801b0f0 <udp_input+0x208>)
 801aefe:	22cf      	movs	r2, #207	; 0xcf
 801af00:	497c      	ldr	r1, [pc, #496]	; (801b0f4 <udp_input+0x20c>)
 801af02:	487d      	ldr	r0, [pc, #500]	; (801b0f8 <udp_input+0x210>)
 801af04:	f004 f952 	bl	801f1ac <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801af08:	683b      	ldr	r3, [r7, #0]
 801af0a:	2b00      	cmp	r3, #0
 801af0c:	d105      	bne.n	801af1a <udp_input+0x32>
 801af0e:	4b78      	ldr	r3, [pc, #480]	; (801b0f0 <udp_input+0x208>)
 801af10:	22d0      	movs	r2, #208	; 0xd0
 801af12:	497a      	ldr	r1, [pc, #488]	; (801b0fc <udp_input+0x214>)
 801af14:	4878      	ldr	r0, [pc, #480]	; (801b0f8 <udp_input+0x210>)
 801af16:	f004 f949 	bl	801f1ac <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801af1a:	687b      	ldr	r3, [r7, #4]
 801af1c:	895b      	ldrh	r3, [r3, #10]
 801af1e:	2b07      	cmp	r3, #7
 801af20:	d803      	bhi.n	801af2a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801af22:	6878      	ldr	r0, [r7, #4]
 801af24:	f7f9 fb56 	bl	80145d4 <pbuf_free>
    goto end;
 801af28:	e0de      	b.n	801b0e8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801af2a:	687b      	ldr	r3, [r7, #4]
 801af2c:	685b      	ldr	r3, [r3, #4]
 801af2e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801af30:	4b73      	ldr	r3, [pc, #460]	; (801b100 <udp_input+0x218>)
 801af32:	695b      	ldr	r3, [r3, #20]
 801af34:	4a72      	ldr	r2, [pc, #456]	; (801b100 <udp_input+0x218>)
 801af36:	6812      	ldr	r2, [r2, #0]
 801af38:	4611      	mov	r1, r2
 801af3a:	4618      	mov	r0, r3
 801af3c:	f001 ff80 	bl	801ce40 <ip4_addr_isbroadcast_u32>
 801af40:	4603      	mov	r3, r0
 801af42:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801af44:	697b      	ldr	r3, [r7, #20]
 801af46:	881b      	ldrh	r3, [r3, #0]
 801af48:	b29b      	uxth	r3, r3
 801af4a:	4618      	mov	r0, r3
 801af4c:	f7f7 fffa 	bl	8012f44 <lwip_htons>
 801af50:	4603      	mov	r3, r0
 801af52:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801af54:	697b      	ldr	r3, [r7, #20]
 801af56:	885b      	ldrh	r3, [r3, #2]
 801af58:	b29b      	uxth	r3, r3
 801af5a:	4618      	mov	r0, r3
 801af5c:	f7f7 fff2 	bl	8012f44 <lwip_htons>
 801af60:	4603      	mov	r3, r0
 801af62:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801af64:	2300      	movs	r3, #0
 801af66:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801af68:	2300      	movs	r3, #0
 801af6a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801af6c:	2300      	movs	r3, #0
 801af6e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801af70:	4b64      	ldr	r3, [pc, #400]	; (801b104 <udp_input+0x21c>)
 801af72:	681b      	ldr	r3, [r3, #0]
 801af74:	627b      	str	r3, [r7, #36]	; 0x24
 801af76:	e054      	b.n	801b022 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801af78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af7a:	8a5b      	ldrh	r3, [r3, #18]
 801af7c:	89fa      	ldrh	r2, [r7, #14]
 801af7e:	429a      	cmp	r2, r3
 801af80:	d14a      	bne.n	801b018 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801af82:	7cfb      	ldrb	r3, [r7, #19]
 801af84:	461a      	mov	r2, r3
 801af86:	6839      	ldr	r1, [r7, #0]
 801af88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801af8a:	f7ff ff49 	bl	801ae20 <udp_input_local_match>
 801af8e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801af90:	2b00      	cmp	r3, #0
 801af92:	d041      	beq.n	801b018 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801af94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801af96:	7c1b      	ldrb	r3, [r3, #16]
 801af98:	f003 0304 	and.w	r3, r3, #4
 801af9c:	2b00      	cmp	r3, #0
 801af9e:	d11d      	bne.n	801afdc <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801afa0:	69fb      	ldr	r3, [r7, #28]
 801afa2:	2b00      	cmp	r3, #0
 801afa4:	d102      	bne.n	801afac <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801afa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afa8:	61fb      	str	r3, [r7, #28]
 801afaa:	e017      	b.n	801afdc <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801afac:	7cfb      	ldrb	r3, [r7, #19]
 801afae:	2b00      	cmp	r3, #0
 801afb0:	d014      	beq.n	801afdc <udp_input+0xf4>
 801afb2:	4b53      	ldr	r3, [pc, #332]	; (801b100 <udp_input+0x218>)
 801afb4:	695b      	ldr	r3, [r3, #20]
 801afb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801afba:	d10f      	bne.n	801afdc <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801afbc:	69fb      	ldr	r3, [r7, #28]
 801afbe:	681a      	ldr	r2, [r3, #0]
 801afc0:	683b      	ldr	r3, [r7, #0]
 801afc2:	3304      	adds	r3, #4
 801afc4:	681b      	ldr	r3, [r3, #0]
 801afc6:	429a      	cmp	r2, r3
 801afc8:	d008      	beq.n	801afdc <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801afca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afcc:	681a      	ldr	r2, [r3, #0]
 801afce:	683b      	ldr	r3, [r7, #0]
 801afd0:	3304      	adds	r3, #4
 801afd2:	681b      	ldr	r3, [r3, #0]
 801afd4:	429a      	cmp	r2, r3
 801afd6:	d101      	bne.n	801afdc <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801afd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afda:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801afdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afde:	8a9b      	ldrh	r3, [r3, #20]
 801afe0:	8a3a      	ldrh	r2, [r7, #16]
 801afe2:	429a      	cmp	r2, r3
 801afe4:	d118      	bne.n	801b018 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801afe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afe8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801afea:	2b00      	cmp	r3, #0
 801afec:	d005      	beq.n	801affa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801afee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aff0:	685a      	ldr	r2, [r3, #4]
 801aff2:	4b43      	ldr	r3, [pc, #268]	; (801b100 <udp_input+0x218>)
 801aff4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801aff6:	429a      	cmp	r2, r3
 801aff8:	d10e      	bne.n	801b018 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801affa:	6a3b      	ldr	r3, [r7, #32]
 801affc:	2b00      	cmp	r3, #0
 801affe:	d014      	beq.n	801b02a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801b000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b002:	68da      	ldr	r2, [r3, #12]
 801b004:	6a3b      	ldr	r3, [r7, #32]
 801b006:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801b008:	4b3e      	ldr	r3, [pc, #248]	; (801b104 <udp_input+0x21c>)
 801b00a:	681a      	ldr	r2, [r3, #0]
 801b00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b00e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801b010:	4a3c      	ldr	r2, [pc, #240]	; (801b104 <udp_input+0x21c>)
 801b012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b014:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801b016:	e008      	b.n	801b02a <udp_input+0x142>
      }
    }

    prev = pcb;
 801b018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b01a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801b01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b01e:	68db      	ldr	r3, [r3, #12]
 801b020:	627b      	str	r3, [r7, #36]	; 0x24
 801b022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b024:	2b00      	cmp	r3, #0
 801b026:	d1a7      	bne.n	801af78 <udp_input+0x90>
 801b028:	e000      	b.n	801b02c <udp_input+0x144>
        break;
 801b02a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801b02c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b02e:	2b00      	cmp	r3, #0
 801b030:	d101      	bne.n	801b036 <udp_input+0x14e>
    pcb = uncon_pcb;
 801b032:	69fb      	ldr	r3, [r7, #28]
 801b034:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801b036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b038:	2b00      	cmp	r3, #0
 801b03a:	d002      	beq.n	801b042 <udp_input+0x15a>
    for_us = 1;
 801b03c:	2301      	movs	r3, #1
 801b03e:	76fb      	strb	r3, [r7, #27]
 801b040:	e00a      	b.n	801b058 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801b042:	683b      	ldr	r3, [r7, #0]
 801b044:	3304      	adds	r3, #4
 801b046:	681a      	ldr	r2, [r3, #0]
 801b048:	4b2d      	ldr	r3, [pc, #180]	; (801b100 <udp_input+0x218>)
 801b04a:	695b      	ldr	r3, [r3, #20]
 801b04c:	429a      	cmp	r2, r3
 801b04e:	bf0c      	ite	eq
 801b050:	2301      	moveq	r3, #1
 801b052:	2300      	movne	r3, #0
 801b054:	b2db      	uxtb	r3, r3
 801b056:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801b058:	7efb      	ldrb	r3, [r7, #27]
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d041      	beq.n	801b0e2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801b05e:	2108      	movs	r1, #8
 801b060:	6878      	ldr	r0, [r7, #4]
 801b062:	f7f9 fa31 	bl	80144c8 <pbuf_remove_header>
 801b066:	4603      	mov	r3, r0
 801b068:	2b00      	cmp	r3, #0
 801b06a:	d00a      	beq.n	801b082 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801b06c:	4b20      	ldr	r3, [pc, #128]	; (801b0f0 <udp_input+0x208>)
 801b06e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801b072:	4925      	ldr	r1, [pc, #148]	; (801b108 <udp_input+0x220>)
 801b074:	4820      	ldr	r0, [pc, #128]	; (801b0f8 <udp_input+0x210>)
 801b076:	f004 f899 	bl	801f1ac <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801b07a:	6878      	ldr	r0, [r7, #4]
 801b07c:	f7f9 faaa 	bl	80145d4 <pbuf_free>
      goto end;
 801b080:	e032      	b.n	801b0e8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801b082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b084:	2b00      	cmp	r3, #0
 801b086:	d012      	beq.n	801b0ae <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801b088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b08a:	699b      	ldr	r3, [r3, #24]
 801b08c:	2b00      	cmp	r3, #0
 801b08e:	d00a      	beq.n	801b0a6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801b090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b092:	699c      	ldr	r4, [r3, #24]
 801b094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b096:	69d8      	ldr	r0, [r3, #28]
 801b098:	8a3b      	ldrh	r3, [r7, #16]
 801b09a:	9300      	str	r3, [sp, #0]
 801b09c:	4b1b      	ldr	r3, [pc, #108]	; (801b10c <udp_input+0x224>)
 801b09e:	687a      	ldr	r2, [r7, #4]
 801b0a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b0a2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801b0a4:	e021      	b.n	801b0ea <udp_input+0x202>
        pbuf_free(p);
 801b0a6:	6878      	ldr	r0, [r7, #4]
 801b0a8:	f7f9 fa94 	bl	80145d4 <pbuf_free>
        goto end;
 801b0ac:	e01c      	b.n	801b0e8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801b0ae:	7cfb      	ldrb	r3, [r7, #19]
 801b0b0:	2b00      	cmp	r3, #0
 801b0b2:	d112      	bne.n	801b0da <udp_input+0x1f2>
 801b0b4:	4b12      	ldr	r3, [pc, #72]	; (801b100 <udp_input+0x218>)
 801b0b6:	695b      	ldr	r3, [r3, #20]
 801b0b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b0bc:	2be0      	cmp	r3, #224	; 0xe0
 801b0be:	d00c      	beq.n	801b0da <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801b0c0:	4b0f      	ldr	r3, [pc, #60]	; (801b100 <udp_input+0x218>)
 801b0c2:	899b      	ldrh	r3, [r3, #12]
 801b0c4:	3308      	adds	r3, #8
 801b0c6:	b29b      	uxth	r3, r3
 801b0c8:	b21b      	sxth	r3, r3
 801b0ca:	4619      	mov	r1, r3
 801b0cc:	6878      	ldr	r0, [r7, #4]
 801b0ce:	f7f9 fa6e 	bl	80145ae <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801b0d2:	2103      	movs	r1, #3
 801b0d4:	6878      	ldr	r0, [r7, #4]
 801b0d6:	f001 fb93 	bl	801c800 <icmp_dest_unreach>
      pbuf_free(p);
 801b0da:	6878      	ldr	r0, [r7, #4]
 801b0dc:	f7f9 fa7a 	bl	80145d4 <pbuf_free>
  return;
 801b0e0:	e003      	b.n	801b0ea <udp_input+0x202>
    pbuf_free(p);
 801b0e2:	6878      	ldr	r0, [r7, #4]
 801b0e4:	f7f9 fa76 	bl	80145d4 <pbuf_free>
  return;
 801b0e8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801b0ea:	372c      	adds	r7, #44	; 0x2c
 801b0ec:	46bd      	mov	sp, r7
 801b0ee:	bd90      	pop	{r4, r7, pc}
 801b0f0:	08026200 	.word	0x08026200
 801b0f4:	080262a4 	.word	0x080262a4
 801b0f8:	08026254 	.word	0x08026254
 801b0fc:	080262bc 	.word	0x080262bc
 801b100:	2000aa5c 	.word	0x2000aa5c
 801b104:	2000e188 	.word	0x2000e188
 801b108:	080262d8 	.word	0x080262d8
 801b10c:	2000aa6c 	.word	0x2000aa6c

0801b110 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801b110:	b580      	push	{r7, lr}
 801b112:	b082      	sub	sp, #8
 801b114:	af00      	add	r7, sp, #0
 801b116:	6078      	str	r0, [r7, #4]
 801b118:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801b11a:	687b      	ldr	r3, [r7, #4]
 801b11c:	2b00      	cmp	r3, #0
 801b11e:	d109      	bne.n	801b134 <udp_send+0x24>
 801b120:	4b11      	ldr	r3, [pc, #68]	; (801b168 <udp_send+0x58>)
 801b122:	f240 12d5 	movw	r2, #469	; 0x1d5
 801b126:	4911      	ldr	r1, [pc, #68]	; (801b16c <udp_send+0x5c>)
 801b128:	4811      	ldr	r0, [pc, #68]	; (801b170 <udp_send+0x60>)
 801b12a:	f004 f83f 	bl	801f1ac <iprintf>
 801b12e:	f06f 030f 	mvn.w	r3, #15
 801b132:	e015      	b.n	801b160 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801b134:	683b      	ldr	r3, [r7, #0]
 801b136:	2b00      	cmp	r3, #0
 801b138:	d109      	bne.n	801b14e <udp_send+0x3e>
 801b13a:	4b0b      	ldr	r3, [pc, #44]	; (801b168 <udp_send+0x58>)
 801b13c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801b140:	490c      	ldr	r1, [pc, #48]	; (801b174 <udp_send+0x64>)
 801b142:	480b      	ldr	r0, [pc, #44]	; (801b170 <udp_send+0x60>)
 801b144:	f004 f832 	bl	801f1ac <iprintf>
 801b148:	f06f 030f 	mvn.w	r3, #15
 801b14c:	e008      	b.n	801b160 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801b14e:	687b      	ldr	r3, [r7, #4]
 801b150:	1d1a      	adds	r2, r3, #4
 801b152:	687b      	ldr	r3, [r7, #4]
 801b154:	8a9b      	ldrh	r3, [r3, #20]
 801b156:	6839      	ldr	r1, [r7, #0]
 801b158:	6878      	ldr	r0, [r7, #4]
 801b15a:	f000 f80d 	bl	801b178 <udp_sendto>
 801b15e:	4603      	mov	r3, r0
}
 801b160:	4618      	mov	r0, r3
 801b162:	3708      	adds	r7, #8
 801b164:	46bd      	mov	sp, r7
 801b166:	bd80      	pop	{r7, pc}
 801b168:	08026200 	.word	0x08026200
 801b16c:	080262f4 	.word	0x080262f4
 801b170:	08026254 	.word	0x08026254
 801b174:	0802630c 	.word	0x0802630c

0801b178 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801b178:	b580      	push	{r7, lr}
 801b17a:	b088      	sub	sp, #32
 801b17c:	af02      	add	r7, sp, #8
 801b17e:	60f8      	str	r0, [r7, #12]
 801b180:	60b9      	str	r1, [r7, #8]
 801b182:	607a      	str	r2, [r7, #4]
 801b184:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801b186:	68fb      	ldr	r3, [r7, #12]
 801b188:	2b00      	cmp	r3, #0
 801b18a:	d109      	bne.n	801b1a0 <udp_sendto+0x28>
 801b18c:	4b23      	ldr	r3, [pc, #140]	; (801b21c <udp_sendto+0xa4>)
 801b18e:	f44f 7206 	mov.w	r2, #536	; 0x218
 801b192:	4923      	ldr	r1, [pc, #140]	; (801b220 <udp_sendto+0xa8>)
 801b194:	4823      	ldr	r0, [pc, #140]	; (801b224 <udp_sendto+0xac>)
 801b196:	f004 f809 	bl	801f1ac <iprintf>
 801b19a:	f06f 030f 	mvn.w	r3, #15
 801b19e:	e038      	b.n	801b212 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801b1a0:	68bb      	ldr	r3, [r7, #8]
 801b1a2:	2b00      	cmp	r3, #0
 801b1a4:	d109      	bne.n	801b1ba <udp_sendto+0x42>
 801b1a6:	4b1d      	ldr	r3, [pc, #116]	; (801b21c <udp_sendto+0xa4>)
 801b1a8:	f240 2219 	movw	r2, #537	; 0x219
 801b1ac:	491e      	ldr	r1, [pc, #120]	; (801b228 <udp_sendto+0xb0>)
 801b1ae:	481d      	ldr	r0, [pc, #116]	; (801b224 <udp_sendto+0xac>)
 801b1b0:	f003 fffc 	bl	801f1ac <iprintf>
 801b1b4:	f06f 030f 	mvn.w	r3, #15
 801b1b8:	e02b      	b.n	801b212 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801b1ba:	687b      	ldr	r3, [r7, #4]
 801b1bc:	2b00      	cmp	r3, #0
 801b1be:	d109      	bne.n	801b1d4 <udp_sendto+0x5c>
 801b1c0:	4b16      	ldr	r3, [pc, #88]	; (801b21c <udp_sendto+0xa4>)
 801b1c2:	f240 221a 	movw	r2, #538	; 0x21a
 801b1c6:	4919      	ldr	r1, [pc, #100]	; (801b22c <udp_sendto+0xb4>)
 801b1c8:	4816      	ldr	r0, [pc, #88]	; (801b224 <udp_sendto+0xac>)
 801b1ca:	f003 ffef 	bl	801f1ac <iprintf>
 801b1ce:	f06f 030f 	mvn.w	r3, #15
 801b1d2:	e01e      	b.n	801b212 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801b1d4:	68fb      	ldr	r3, [r7, #12]
 801b1d6:	7a1b      	ldrb	r3, [r3, #8]
 801b1d8:	2b00      	cmp	r3, #0
 801b1da:	d006      	beq.n	801b1ea <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801b1dc:	68fb      	ldr	r3, [r7, #12]
 801b1de:	7a1b      	ldrb	r3, [r3, #8]
 801b1e0:	4618      	mov	r0, r3
 801b1e2:	f7f8 fe69 	bl	8013eb8 <netif_get_by_index>
 801b1e6:	6178      	str	r0, [r7, #20]
 801b1e8:	e003      	b.n	801b1f2 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801b1ea:	6878      	ldr	r0, [r7, #4]
 801b1ec:	f001 fb92 	bl	801c914 <ip4_route>
 801b1f0:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801b1f2:	697b      	ldr	r3, [r7, #20]
 801b1f4:	2b00      	cmp	r3, #0
 801b1f6:	d102      	bne.n	801b1fe <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801b1f8:	f06f 0303 	mvn.w	r3, #3
 801b1fc:	e009      	b.n	801b212 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801b1fe:	887a      	ldrh	r2, [r7, #2]
 801b200:	697b      	ldr	r3, [r7, #20]
 801b202:	9300      	str	r3, [sp, #0]
 801b204:	4613      	mov	r3, r2
 801b206:	687a      	ldr	r2, [r7, #4]
 801b208:	68b9      	ldr	r1, [r7, #8]
 801b20a:	68f8      	ldr	r0, [r7, #12]
 801b20c:	f000 f810 	bl	801b230 <udp_sendto_if>
 801b210:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801b212:	4618      	mov	r0, r3
 801b214:	3718      	adds	r7, #24
 801b216:	46bd      	mov	sp, r7
 801b218:	bd80      	pop	{r7, pc}
 801b21a:	bf00      	nop
 801b21c:	08026200 	.word	0x08026200
 801b220:	08026324 	.word	0x08026324
 801b224:	08026254 	.word	0x08026254
 801b228:	0802633c 	.word	0x0802633c
 801b22c:	08026358 	.word	0x08026358

0801b230 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801b230:	b580      	push	{r7, lr}
 801b232:	b088      	sub	sp, #32
 801b234:	af02      	add	r7, sp, #8
 801b236:	60f8      	str	r0, [r7, #12]
 801b238:	60b9      	str	r1, [r7, #8]
 801b23a:	607a      	str	r2, [r7, #4]
 801b23c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801b23e:	68fb      	ldr	r3, [r7, #12]
 801b240:	2b00      	cmp	r3, #0
 801b242:	d109      	bne.n	801b258 <udp_sendto_if+0x28>
 801b244:	4b2e      	ldr	r3, [pc, #184]	; (801b300 <udp_sendto_if+0xd0>)
 801b246:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b24a:	492e      	ldr	r1, [pc, #184]	; (801b304 <udp_sendto_if+0xd4>)
 801b24c:	482e      	ldr	r0, [pc, #184]	; (801b308 <udp_sendto_if+0xd8>)
 801b24e:	f003 ffad 	bl	801f1ac <iprintf>
 801b252:	f06f 030f 	mvn.w	r3, #15
 801b256:	e04f      	b.n	801b2f8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801b258:	68bb      	ldr	r3, [r7, #8]
 801b25a:	2b00      	cmp	r3, #0
 801b25c:	d109      	bne.n	801b272 <udp_sendto_if+0x42>
 801b25e:	4b28      	ldr	r3, [pc, #160]	; (801b300 <udp_sendto_if+0xd0>)
 801b260:	f240 2281 	movw	r2, #641	; 0x281
 801b264:	4929      	ldr	r1, [pc, #164]	; (801b30c <udp_sendto_if+0xdc>)
 801b266:	4828      	ldr	r0, [pc, #160]	; (801b308 <udp_sendto_if+0xd8>)
 801b268:	f003 ffa0 	bl	801f1ac <iprintf>
 801b26c:	f06f 030f 	mvn.w	r3, #15
 801b270:	e042      	b.n	801b2f8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801b272:	687b      	ldr	r3, [r7, #4]
 801b274:	2b00      	cmp	r3, #0
 801b276:	d109      	bne.n	801b28c <udp_sendto_if+0x5c>
 801b278:	4b21      	ldr	r3, [pc, #132]	; (801b300 <udp_sendto_if+0xd0>)
 801b27a:	f240 2282 	movw	r2, #642	; 0x282
 801b27e:	4924      	ldr	r1, [pc, #144]	; (801b310 <udp_sendto_if+0xe0>)
 801b280:	4821      	ldr	r0, [pc, #132]	; (801b308 <udp_sendto_if+0xd8>)
 801b282:	f003 ff93 	bl	801f1ac <iprintf>
 801b286:	f06f 030f 	mvn.w	r3, #15
 801b28a:	e035      	b.n	801b2f8 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801b28c:	6a3b      	ldr	r3, [r7, #32]
 801b28e:	2b00      	cmp	r3, #0
 801b290:	d109      	bne.n	801b2a6 <udp_sendto_if+0x76>
 801b292:	4b1b      	ldr	r3, [pc, #108]	; (801b300 <udp_sendto_if+0xd0>)
 801b294:	f240 2283 	movw	r2, #643	; 0x283
 801b298:	491e      	ldr	r1, [pc, #120]	; (801b314 <udp_sendto_if+0xe4>)
 801b29a:	481b      	ldr	r0, [pc, #108]	; (801b308 <udp_sendto_if+0xd8>)
 801b29c:	f003 ff86 	bl	801f1ac <iprintf>
 801b2a0:	f06f 030f 	mvn.w	r3, #15
 801b2a4:	e028      	b.n	801b2f8 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b2a6:	68fb      	ldr	r3, [r7, #12]
 801b2a8:	2b00      	cmp	r3, #0
 801b2aa:	d009      	beq.n	801b2c0 <udp_sendto_if+0x90>
 801b2ac:	68fb      	ldr	r3, [r7, #12]
 801b2ae:	681b      	ldr	r3, [r3, #0]
 801b2b0:	2b00      	cmp	r3, #0
 801b2b2:	d005      	beq.n	801b2c0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801b2b4:	68fb      	ldr	r3, [r7, #12]
 801b2b6:	681b      	ldr	r3, [r3, #0]
 801b2b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801b2bc:	2be0      	cmp	r3, #224	; 0xe0
 801b2be:	d103      	bne.n	801b2c8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801b2c0:	6a3b      	ldr	r3, [r7, #32]
 801b2c2:	3304      	adds	r3, #4
 801b2c4:	617b      	str	r3, [r7, #20]
 801b2c6:	e00b      	b.n	801b2e0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801b2c8:	68fb      	ldr	r3, [r7, #12]
 801b2ca:	681a      	ldr	r2, [r3, #0]
 801b2cc:	6a3b      	ldr	r3, [r7, #32]
 801b2ce:	3304      	adds	r3, #4
 801b2d0:	681b      	ldr	r3, [r3, #0]
 801b2d2:	429a      	cmp	r2, r3
 801b2d4:	d002      	beq.n	801b2dc <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801b2d6:	f06f 0303 	mvn.w	r3, #3
 801b2da:	e00d      	b.n	801b2f8 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801b2dc:	68fb      	ldr	r3, [r7, #12]
 801b2de:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801b2e0:	887a      	ldrh	r2, [r7, #2]
 801b2e2:	697b      	ldr	r3, [r7, #20]
 801b2e4:	9301      	str	r3, [sp, #4]
 801b2e6:	6a3b      	ldr	r3, [r7, #32]
 801b2e8:	9300      	str	r3, [sp, #0]
 801b2ea:	4613      	mov	r3, r2
 801b2ec:	687a      	ldr	r2, [r7, #4]
 801b2ee:	68b9      	ldr	r1, [r7, #8]
 801b2f0:	68f8      	ldr	r0, [r7, #12]
 801b2f2:	f000 f811 	bl	801b318 <udp_sendto_if_src>
 801b2f6:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801b2f8:	4618      	mov	r0, r3
 801b2fa:	3718      	adds	r7, #24
 801b2fc:	46bd      	mov	sp, r7
 801b2fe:	bd80      	pop	{r7, pc}
 801b300:	08026200 	.word	0x08026200
 801b304:	08026374 	.word	0x08026374
 801b308:	08026254 	.word	0x08026254
 801b30c:	08026390 	.word	0x08026390
 801b310:	080263ac 	.word	0x080263ac
 801b314:	080263cc 	.word	0x080263cc

0801b318 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801b318:	b580      	push	{r7, lr}
 801b31a:	b08c      	sub	sp, #48	; 0x30
 801b31c:	af04      	add	r7, sp, #16
 801b31e:	60f8      	str	r0, [r7, #12]
 801b320:	60b9      	str	r1, [r7, #8]
 801b322:	607a      	str	r2, [r7, #4]
 801b324:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801b326:	68fb      	ldr	r3, [r7, #12]
 801b328:	2b00      	cmp	r3, #0
 801b32a:	d109      	bne.n	801b340 <udp_sendto_if_src+0x28>
 801b32c:	4b65      	ldr	r3, [pc, #404]	; (801b4c4 <udp_sendto_if_src+0x1ac>)
 801b32e:	f240 22d1 	movw	r2, #721	; 0x2d1
 801b332:	4965      	ldr	r1, [pc, #404]	; (801b4c8 <udp_sendto_if_src+0x1b0>)
 801b334:	4865      	ldr	r0, [pc, #404]	; (801b4cc <udp_sendto_if_src+0x1b4>)
 801b336:	f003 ff39 	bl	801f1ac <iprintf>
 801b33a:	f06f 030f 	mvn.w	r3, #15
 801b33e:	e0bc      	b.n	801b4ba <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801b340:	68bb      	ldr	r3, [r7, #8]
 801b342:	2b00      	cmp	r3, #0
 801b344:	d109      	bne.n	801b35a <udp_sendto_if_src+0x42>
 801b346:	4b5f      	ldr	r3, [pc, #380]	; (801b4c4 <udp_sendto_if_src+0x1ac>)
 801b348:	f240 22d2 	movw	r2, #722	; 0x2d2
 801b34c:	4960      	ldr	r1, [pc, #384]	; (801b4d0 <udp_sendto_if_src+0x1b8>)
 801b34e:	485f      	ldr	r0, [pc, #380]	; (801b4cc <udp_sendto_if_src+0x1b4>)
 801b350:	f003 ff2c 	bl	801f1ac <iprintf>
 801b354:	f06f 030f 	mvn.w	r3, #15
 801b358:	e0af      	b.n	801b4ba <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801b35a:	687b      	ldr	r3, [r7, #4]
 801b35c:	2b00      	cmp	r3, #0
 801b35e:	d109      	bne.n	801b374 <udp_sendto_if_src+0x5c>
 801b360:	4b58      	ldr	r3, [pc, #352]	; (801b4c4 <udp_sendto_if_src+0x1ac>)
 801b362:	f240 22d3 	movw	r2, #723	; 0x2d3
 801b366:	495b      	ldr	r1, [pc, #364]	; (801b4d4 <udp_sendto_if_src+0x1bc>)
 801b368:	4858      	ldr	r0, [pc, #352]	; (801b4cc <udp_sendto_if_src+0x1b4>)
 801b36a:	f003 ff1f 	bl	801f1ac <iprintf>
 801b36e:	f06f 030f 	mvn.w	r3, #15
 801b372:	e0a2      	b.n	801b4ba <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801b374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b376:	2b00      	cmp	r3, #0
 801b378:	d109      	bne.n	801b38e <udp_sendto_if_src+0x76>
 801b37a:	4b52      	ldr	r3, [pc, #328]	; (801b4c4 <udp_sendto_if_src+0x1ac>)
 801b37c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801b380:	4955      	ldr	r1, [pc, #340]	; (801b4d8 <udp_sendto_if_src+0x1c0>)
 801b382:	4852      	ldr	r0, [pc, #328]	; (801b4cc <udp_sendto_if_src+0x1b4>)
 801b384:	f003 ff12 	bl	801f1ac <iprintf>
 801b388:	f06f 030f 	mvn.w	r3, #15
 801b38c:	e095      	b.n	801b4ba <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801b38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b390:	2b00      	cmp	r3, #0
 801b392:	d109      	bne.n	801b3a8 <udp_sendto_if_src+0x90>
 801b394:	4b4b      	ldr	r3, [pc, #300]	; (801b4c4 <udp_sendto_if_src+0x1ac>)
 801b396:	f240 22d5 	movw	r2, #725	; 0x2d5
 801b39a:	4950      	ldr	r1, [pc, #320]	; (801b4dc <udp_sendto_if_src+0x1c4>)
 801b39c:	484b      	ldr	r0, [pc, #300]	; (801b4cc <udp_sendto_if_src+0x1b4>)
 801b39e:	f003 ff05 	bl	801f1ac <iprintf>
 801b3a2:	f06f 030f 	mvn.w	r3, #15
 801b3a6:	e088      	b.n	801b4ba <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801b3a8:	68fb      	ldr	r3, [r7, #12]
 801b3aa:	8a5b      	ldrh	r3, [r3, #18]
 801b3ac:	2b00      	cmp	r3, #0
 801b3ae:	d10f      	bne.n	801b3d0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801b3b0:	68f9      	ldr	r1, [r7, #12]
 801b3b2:	68fb      	ldr	r3, [r7, #12]
 801b3b4:	8a5b      	ldrh	r3, [r3, #18]
 801b3b6:	461a      	mov	r2, r3
 801b3b8:	68f8      	ldr	r0, [r7, #12]
 801b3ba:	f000 f893 	bl	801b4e4 <udp_bind>
 801b3be:	4603      	mov	r3, r0
 801b3c0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801b3c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801b3c6:	2b00      	cmp	r3, #0
 801b3c8:	d002      	beq.n	801b3d0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801b3ca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801b3ce:	e074      	b.n	801b4ba <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801b3d0:	68bb      	ldr	r3, [r7, #8]
 801b3d2:	891b      	ldrh	r3, [r3, #8]
 801b3d4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801b3d8:	4293      	cmp	r3, r2
 801b3da:	d902      	bls.n	801b3e2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801b3dc:	f04f 33ff 	mov.w	r3, #4294967295
 801b3e0:	e06b      	b.n	801b4ba <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801b3e2:	2108      	movs	r1, #8
 801b3e4:	68b8      	ldr	r0, [r7, #8]
 801b3e6:	f7f9 f85f 	bl	80144a8 <pbuf_add_header>
 801b3ea:	4603      	mov	r3, r0
 801b3ec:	2b00      	cmp	r3, #0
 801b3ee:	d015      	beq.n	801b41c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801b3f0:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b3f4:	2108      	movs	r1, #8
 801b3f6:	2022      	movs	r0, #34	; 0x22
 801b3f8:	f7f8 fe08 	bl	801400c <pbuf_alloc>
 801b3fc:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801b3fe:	69fb      	ldr	r3, [r7, #28]
 801b400:	2b00      	cmp	r3, #0
 801b402:	d102      	bne.n	801b40a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801b404:	f04f 33ff 	mov.w	r3, #4294967295
 801b408:	e057      	b.n	801b4ba <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801b40a:	68bb      	ldr	r3, [r7, #8]
 801b40c:	891b      	ldrh	r3, [r3, #8]
 801b40e:	2b00      	cmp	r3, #0
 801b410:	d006      	beq.n	801b420 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801b412:	68b9      	ldr	r1, [r7, #8]
 801b414:	69f8      	ldr	r0, [r7, #28]
 801b416:	f7f9 fa01 	bl	801481c <pbuf_chain>
 801b41a:	e001      	b.n	801b420 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801b41c:	68bb      	ldr	r3, [r7, #8]
 801b41e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801b420:	69fb      	ldr	r3, [r7, #28]
 801b422:	895b      	ldrh	r3, [r3, #10]
 801b424:	2b07      	cmp	r3, #7
 801b426:	d806      	bhi.n	801b436 <udp_sendto_if_src+0x11e>
 801b428:	4b26      	ldr	r3, [pc, #152]	; (801b4c4 <udp_sendto_if_src+0x1ac>)
 801b42a:	f240 320d 	movw	r2, #781	; 0x30d
 801b42e:	492c      	ldr	r1, [pc, #176]	; (801b4e0 <udp_sendto_if_src+0x1c8>)
 801b430:	4826      	ldr	r0, [pc, #152]	; (801b4cc <udp_sendto_if_src+0x1b4>)
 801b432:	f003 febb 	bl	801f1ac <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801b436:	69fb      	ldr	r3, [r7, #28]
 801b438:	685b      	ldr	r3, [r3, #4]
 801b43a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801b43c:	68fb      	ldr	r3, [r7, #12]
 801b43e:	8a5b      	ldrh	r3, [r3, #18]
 801b440:	4618      	mov	r0, r3
 801b442:	f7f7 fd7f 	bl	8012f44 <lwip_htons>
 801b446:	4603      	mov	r3, r0
 801b448:	461a      	mov	r2, r3
 801b44a:	697b      	ldr	r3, [r7, #20]
 801b44c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801b44e:	887b      	ldrh	r3, [r7, #2]
 801b450:	4618      	mov	r0, r3
 801b452:	f7f7 fd77 	bl	8012f44 <lwip_htons>
 801b456:	4603      	mov	r3, r0
 801b458:	461a      	mov	r2, r3
 801b45a:	697b      	ldr	r3, [r7, #20]
 801b45c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801b45e:	697b      	ldr	r3, [r7, #20]
 801b460:	2200      	movs	r2, #0
 801b462:	719a      	strb	r2, [r3, #6]
 801b464:	2200      	movs	r2, #0
 801b466:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801b468:	69fb      	ldr	r3, [r7, #28]
 801b46a:	891b      	ldrh	r3, [r3, #8]
 801b46c:	4618      	mov	r0, r3
 801b46e:	f7f7 fd69 	bl	8012f44 <lwip_htons>
 801b472:	4603      	mov	r3, r0
 801b474:	461a      	mov	r2, r3
 801b476:	697b      	ldr	r3, [r7, #20]
 801b478:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801b47a:	2311      	movs	r3, #17
 801b47c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801b47e:	68fb      	ldr	r3, [r7, #12]
 801b480:	7adb      	ldrb	r3, [r3, #11]
 801b482:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801b484:	68fb      	ldr	r3, [r7, #12]
 801b486:	7a9b      	ldrb	r3, [r3, #10]
 801b488:	7cb9      	ldrb	r1, [r7, #18]
 801b48a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801b48c:	9202      	str	r2, [sp, #8]
 801b48e:	7cfa      	ldrb	r2, [r7, #19]
 801b490:	9201      	str	r2, [sp, #4]
 801b492:	9300      	str	r3, [sp, #0]
 801b494:	460b      	mov	r3, r1
 801b496:	687a      	ldr	r2, [r7, #4]
 801b498:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b49a:	69f8      	ldr	r0, [r7, #28]
 801b49c:	f001 fc22 	bl	801cce4 <ip4_output_if_src>
 801b4a0:	4603      	mov	r3, r0
 801b4a2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801b4a4:	69fa      	ldr	r2, [r7, #28]
 801b4a6:	68bb      	ldr	r3, [r7, #8]
 801b4a8:	429a      	cmp	r2, r3
 801b4aa:	d004      	beq.n	801b4b6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801b4ac:	69f8      	ldr	r0, [r7, #28]
 801b4ae:	f7f9 f891 	bl	80145d4 <pbuf_free>
    q = NULL;
 801b4b2:	2300      	movs	r3, #0
 801b4b4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801b4b6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801b4ba:	4618      	mov	r0, r3
 801b4bc:	3720      	adds	r7, #32
 801b4be:	46bd      	mov	sp, r7
 801b4c0:	bd80      	pop	{r7, pc}
 801b4c2:	bf00      	nop
 801b4c4:	08026200 	.word	0x08026200
 801b4c8:	080263ec 	.word	0x080263ec
 801b4cc:	08026254 	.word	0x08026254
 801b4d0:	0802640c 	.word	0x0802640c
 801b4d4:	0802642c 	.word	0x0802642c
 801b4d8:	08026450 	.word	0x08026450
 801b4dc:	08026474 	.word	0x08026474
 801b4e0:	08026498 	.word	0x08026498

0801b4e4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801b4e4:	b580      	push	{r7, lr}
 801b4e6:	b086      	sub	sp, #24
 801b4e8:	af00      	add	r7, sp, #0
 801b4ea:	60f8      	str	r0, [r7, #12]
 801b4ec:	60b9      	str	r1, [r7, #8]
 801b4ee:	4613      	mov	r3, r2
 801b4f0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801b4f2:	68bb      	ldr	r3, [r7, #8]
 801b4f4:	2b00      	cmp	r3, #0
 801b4f6:	d101      	bne.n	801b4fc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801b4f8:	4b39      	ldr	r3, [pc, #228]	; (801b5e0 <udp_bind+0xfc>)
 801b4fa:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801b4fc:	68fb      	ldr	r3, [r7, #12]
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	d109      	bne.n	801b516 <udp_bind+0x32>
 801b502:	4b38      	ldr	r3, [pc, #224]	; (801b5e4 <udp_bind+0x100>)
 801b504:	f240 32b7 	movw	r2, #951	; 0x3b7
 801b508:	4937      	ldr	r1, [pc, #220]	; (801b5e8 <udp_bind+0x104>)
 801b50a:	4838      	ldr	r0, [pc, #224]	; (801b5ec <udp_bind+0x108>)
 801b50c:	f003 fe4e 	bl	801f1ac <iprintf>
 801b510:	f06f 030f 	mvn.w	r3, #15
 801b514:	e060      	b.n	801b5d8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801b516:	2300      	movs	r3, #0
 801b518:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b51a:	4b35      	ldr	r3, [pc, #212]	; (801b5f0 <udp_bind+0x10c>)
 801b51c:	681b      	ldr	r3, [r3, #0]
 801b51e:	617b      	str	r3, [r7, #20]
 801b520:	e009      	b.n	801b536 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801b522:	68fa      	ldr	r2, [r7, #12]
 801b524:	697b      	ldr	r3, [r7, #20]
 801b526:	429a      	cmp	r2, r3
 801b528:	d102      	bne.n	801b530 <udp_bind+0x4c>
      rebind = 1;
 801b52a:	2301      	movs	r3, #1
 801b52c:	74fb      	strb	r3, [r7, #19]
      break;
 801b52e:	e005      	b.n	801b53c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b530:	697b      	ldr	r3, [r7, #20]
 801b532:	68db      	ldr	r3, [r3, #12]
 801b534:	617b      	str	r3, [r7, #20]
 801b536:	697b      	ldr	r3, [r7, #20]
 801b538:	2b00      	cmp	r3, #0
 801b53a:	d1f2      	bne.n	801b522 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801b53c:	88fb      	ldrh	r3, [r7, #6]
 801b53e:	2b00      	cmp	r3, #0
 801b540:	d109      	bne.n	801b556 <udp_bind+0x72>
    port = udp_new_port();
 801b542:	f7ff fc35 	bl	801adb0 <udp_new_port>
 801b546:	4603      	mov	r3, r0
 801b548:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801b54a:	88fb      	ldrh	r3, [r7, #6]
 801b54c:	2b00      	cmp	r3, #0
 801b54e:	d12c      	bne.n	801b5aa <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801b550:	f06f 0307 	mvn.w	r3, #7
 801b554:	e040      	b.n	801b5d8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b556:	4b26      	ldr	r3, [pc, #152]	; (801b5f0 <udp_bind+0x10c>)
 801b558:	681b      	ldr	r3, [r3, #0]
 801b55a:	617b      	str	r3, [r7, #20]
 801b55c:	e022      	b.n	801b5a4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801b55e:	68fa      	ldr	r2, [r7, #12]
 801b560:	697b      	ldr	r3, [r7, #20]
 801b562:	429a      	cmp	r2, r3
 801b564:	d01b      	beq.n	801b59e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801b566:	697b      	ldr	r3, [r7, #20]
 801b568:	8a5b      	ldrh	r3, [r3, #18]
 801b56a:	88fa      	ldrh	r2, [r7, #6]
 801b56c:	429a      	cmp	r2, r3
 801b56e:	d116      	bne.n	801b59e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b570:	697b      	ldr	r3, [r7, #20]
 801b572:	681a      	ldr	r2, [r3, #0]
 801b574:	68bb      	ldr	r3, [r7, #8]
 801b576:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801b578:	429a      	cmp	r2, r3
 801b57a:	d00d      	beq.n	801b598 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b57c:	68bb      	ldr	r3, [r7, #8]
 801b57e:	2b00      	cmp	r3, #0
 801b580:	d00a      	beq.n	801b598 <udp_bind+0xb4>
 801b582:	68bb      	ldr	r3, [r7, #8]
 801b584:	681b      	ldr	r3, [r3, #0]
 801b586:	2b00      	cmp	r3, #0
 801b588:	d006      	beq.n	801b598 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801b58a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	d003      	beq.n	801b598 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801b590:	697b      	ldr	r3, [r7, #20]
 801b592:	681b      	ldr	r3, [r3, #0]
 801b594:	2b00      	cmp	r3, #0
 801b596:	d102      	bne.n	801b59e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801b598:	f06f 0307 	mvn.w	r3, #7
 801b59c:	e01c      	b.n	801b5d8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801b59e:	697b      	ldr	r3, [r7, #20]
 801b5a0:	68db      	ldr	r3, [r3, #12]
 801b5a2:	617b      	str	r3, [r7, #20]
 801b5a4:	697b      	ldr	r3, [r7, #20]
 801b5a6:	2b00      	cmp	r3, #0
 801b5a8:	d1d9      	bne.n	801b55e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801b5aa:	68bb      	ldr	r3, [r7, #8]
 801b5ac:	2b00      	cmp	r3, #0
 801b5ae:	d002      	beq.n	801b5b6 <udp_bind+0xd2>
 801b5b0:	68bb      	ldr	r3, [r7, #8]
 801b5b2:	681b      	ldr	r3, [r3, #0]
 801b5b4:	e000      	b.n	801b5b8 <udp_bind+0xd4>
 801b5b6:	2300      	movs	r3, #0
 801b5b8:	68fa      	ldr	r2, [r7, #12]
 801b5ba:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801b5bc:	68fb      	ldr	r3, [r7, #12]
 801b5be:	88fa      	ldrh	r2, [r7, #6]
 801b5c0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801b5c2:	7cfb      	ldrb	r3, [r7, #19]
 801b5c4:	2b00      	cmp	r3, #0
 801b5c6:	d106      	bne.n	801b5d6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801b5c8:	4b09      	ldr	r3, [pc, #36]	; (801b5f0 <udp_bind+0x10c>)
 801b5ca:	681a      	ldr	r2, [r3, #0]
 801b5cc:	68fb      	ldr	r3, [r7, #12]
 801b5ce:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801b5d0:	4a07      	ldr	r2, [pc, #28]	; (801b5f0 <udp_bind+0x10c>)
 801b5d2:	68fb      	ldr	r3, [r7, #12]
 801b5d4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801b5d6:	2300      	movs	r3, #0
}
 801b5d8:	4618      	mov	r0, r3
 801b5da:	3718      	adds	r7, #24
 801b5dc:	46bd      	mov	sp, r7
 801b5de:	bd80      	pop	{r7, pc}
 801b5e0:	08026f20 	.word	0x08026f20
 801b5e4:	08026200 	.word	0x08026200
 801b5e8:	080264c8 	.word	0x080264c8
 801b5ec:	08026254 	.word	0x08026254
 801b5f0:	2000e188 	.word	0x2000e188

0801b5f4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801b5f4:	b580      	push	{r7, lr}
 801b5f6:	b084      	sub	sp, #16
 801b5f8:	af00      	add	r7, sp, #0
 801b5fa:	60f8      	str	r0, [r7, #12]
 801b5fc:	60b9      	str	r1, [r7, #8]
 801b5fe:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801b600:	68fb      	ldr	r3, [r7, #12]
 801b602:	2b00      	cmp	r3, #0
 801b604:	d107      	bne.n	801b616 <udp_recv+0x22>
 801b606:	4b08      	ldr	r3, [pc, #32]	; (801b628 <udp_recv+0x34>)
 801b608:	f240 428a 	movw	r2, #1162	; 0x48a
 801b60c:	4907      	ldr	r1, [pc, #28]	; (801b62c <udp_recv+0x38>)
 801b60e:	4808      	ldr	r0, [pc, #32]	; (801b630 <udp_recv+0x3c>)
 801b610:	f003 fdcc 	bl	801f1ac <iprintf>
 801b614:	e005      	b.n	801b622 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801b616:	68fb      	ldr	r3, [r7, #12]
 801b618:	68ba      	ldr	r2, [r7, #8]
 801b61a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801b61c:	68fb      	ldr	r3, [r7, #12]
 801b61e:	687a      	ldr	r2, [r7, #4]
 801b620:	61da      	str	r2, [r3, #28]
}
 801b622:	3710      	adds	r7, #16
 801b624:	46bd      	mov	sp, r7
 801b626:	bd80      	pop	{r7, pc}
 801b628:	08026200 	.word	0x08026200
 801b62c:	08026534 	.word	0x08026534
 801b630:	08026254 	.word	0x08026254

0801b634 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801b634:	b580      	push	{r7, lr}
 801b636:	b084      	sub	sp, #16
 801b638:	af00      	add	r7, sp, #0
 801b63a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801b63c:	687b      	ldr	r3, [r7, #4]
 801b63e:	2b00      	cmp	r3, #0
 801b640:	d107      	bne.n	801b652 <udp_remove+0x1e>
 801b642:	4b19      	ldr	r3, [pc, #100]	; (801b6a8 <udp_remove+0x74>)
 801b644:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801b648:	4918      	ldr	r1, [pc, #96]	; (801b6ac <udp_remove+0x78>)
 801b64a:	4819      	ldr	r0, [pc, #100]	; (801b6b0 <udp_remove+0x7c>)
 801b64c:	f003 fdae 	bl	801f1ac <iprintf>
 801b650:	e026      	b.n	801b6a0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801b652:	4b18      	ldr	r3, [pc, #96]	; (801b6b4 <udp_remove+0x80>)
 801b654:	681b      	ldr	r3, [r3, #0]
 801b656:	687a      	ldr	r2, [r7, #4]
 801b658:	429a      	cmp	r2, r3
 801b65a:	d105      	bne.n	801b668 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801b65c:	4b15      	ldr	r3, [pc, #84]	; (801b6b4 <udp_remove+0x80>)
 801b65e:	681b      	ldr	r3, [r3, #0]
 801b660:	68db      	ldr	r3, [r3, #12]
 801b662:	4a14      	ldr	r2, [pc, #80]	; (801b6b4 <udp_remove+0x80>)
 801b664:	6013      	str	r3, [r2, #0]
 801b666:	e017      	b.n	801b698 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801b668:	4b12      	ldr	r3, [pc, #72]	; (801b6b4 <udp_remove+0x80>)
 801b66a:	681b      	ldr	r3, [r3, #0]
 801b66c:	60fb      	str	r3, [r7, #12]
 801b66e:	e010      	b.n	801b692 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801b670:	68fb      	ldr	r3, [r7, #12]
 801b672:	68db      	ldr	r3, [r3, #12]
 801b674:	2b00      	cmp	r3, #0
 801b676:	d009      	beq.n	801b68c <udp_remove+0x58>
 801b678:	68fb      	ldr	r3, [r7, #12]
 801b67a:	68db      	ldr	r3, [r3, #12]
 801b67c:	687a      	ldr	r2, [r7, #4]
 801b67e:	429a      	cmp	r2, r3
 801b680:	d104      	bne.n	801b68c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801b682:	687b      	ldr	r3, [r7, #4]
 801b684:	68da      	ldr	r2, [r3, #12]
 801b686:	68fb      	ldr	r3, [r7, #12]
 801b688:	60da      	str	r2, [r3, #12]
        break;
 801b68a:	e005      	b.n	801b698 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801b68c:	68fb      	ldr	r3, [r7, #12]
 801b68e:	68db      	ldr	r3, [r3, #12]
 801b690:	60fb      	str	r3, [r7, #12]
 801b692:	68fb      	ldr	r3, [r7, #12]
 801b694:	2b00      	cmp	r3, #0
 801b696:	d1eb      	bne.n	801b670 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801b698:	6879      	ldr	r1, [r7, #4]
 801b69a:	2000      	movs	r0, #0
 801b69c:	f7f8 f95a 	bl	8013954 <memp_free>
}
 801b6a0:	3710      	adds	r7, #16
 801b6a2:	46bd      	mov	sp, r7
 801b6a4:	bd80      	pop	{r7, pc}
 801b6a6:	bf00      	nop
 801b6a8:	08026200 	.word	0x08026200
 801b6ac:	0802654c 	.word	0x0802654c
 801b6b0:	08026254 	.word	0x08026254
 801b6b4:	2000e188 	.word	0x2000e188

0801b6b8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801b6b8:	b580      	push	{r7, lr}
 801b6ba:	b082      	sub	sp, #8
 801b6bc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801b6be:	2000      	movs	r0, #0
 801b6c0:	f7f8 f8f6 	bl	80138b0 <memp_malloc>
 801b6c4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801b6c6:	687b      	ldr	r3, [r7, #4]
 801b6c8:	2b00      	cmp	r3, #0
 801b6ca:	d007      	beq.n	801b6dc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801b6cc:	2220      	movs	r2, #32
 801b6ce:	2100      	movs	r1, #0
 801b6d0:	6878      	ldr	r0, [r7, #4]
 801b6d2:	f002 fe3f 	bl	801e354 <memset>
    pcb->ttl = UDP_TTL;
 801b6d6:	687b      	ldr	r3, [r7, #4]
 801b6d8:	22ff      	movs	r2, #255	; 0xff
 801b6da:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801b6dc:	687b      	ldr	r3, [r7, #4]
}
 801b6de:	4618      	mov	r0, r3
 801b6e0:	3708      	adds	r7, #8
 801b6e2:	46bd      	mov	sp, r7
 801b6e4:	bd80      	pop	{r7, pc}

0801b6e6 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 801b6e6:	b580      	push	{r7, lr}
 801b6e8:	b084      	sub	sp, #16
 801b6ea:	af00      	add	r7, sp, #0
 801b6ec:	4603      	mov	r3, r0
 801b6ee:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 801b6f0:	f7ff ffe2 	bl	801b6b8 <udp_new>
 801b6f4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801b6f6:	68fb      	ldr	r3, [r7, #12]
}
 801b6f8:	4618      	mov	r0, r3
 801b6fa:	3710      	adds	r7, #16
 801b6fc:	46bd      	mov	sp, r7
 801b6fe:	bd80      	pop	{r7, pc}

0801b700 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801b700:	b480      	push	{r7}
 801b702:	b085      	sub	sp, #20
 801b704:	af00      	add	r7, sp, #0
 801b706:	6078      	str	r0, [r7, #4]
 801b708:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801b70a:	687b      	ldr	r3, [r7, #4]
 801b70c:	2b00      	cmp	r3, #0
 801b70e:	d01e      	beq.n	801b74e <udp_netif_ip_addr_changed+0x4e>
 801b710:	687b      	ldr	r3, [r7, #4]
 801b712:	681b      	ldr	r3, [r3, #0]
 801b714:	2b00      	cmp	r3, #0
 801b716:	d01a      	beq.n	801b74e <udp_netif_ip_addr_changed+0x4e>
 801b718:	683b      	ldr	r3, [r7, #0]
 801b71a:	2b00      	cmp	r3, #0
 801b71c:	d017      	beq.n	801b74e <udp_netif_ip_addr_changed+0x4e>
 801b71e:	683b      	ldr	r3, [r7, #0]
 801b720:	681b      	ldr	r3, [r3, #0]
 801b722:	2b00      	cmp	r3, #0
 801b724:	d013      	beq.n	801b74e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801b726:	4b0d      	ldr	r3, [pc, #52]	; (801b75c <udp_netif_ip_addr_changed+0x5c>)
 801b728:	681b      	ldr	r3, [r3, #0]
 801b72a:	60fb      	str	r3, [r7, #12]
 801b72c:	e00c      	b.n	801b748 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801b72e:	68fb      	ldr	r3, [r7, #12]
 801b730:	681a      	ldr	r2, [r3, #0]
 801b732:	687b      	ldr	r3, [r7, #4]
 801b734:	681b      	ldr	r3, [r3, #0]
 801b736:	429a      	cmp	r2, r3
 801b738:	d103      	bne.n	801b742 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801b73a:	683b      	ldr	r3, [r7, #0]
 801b73c:	681a      	ldr	r2, [r3, #0]
 801b73e:	68fb      	ldr	r3, [r7, #12]
 801b740:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801b742:	68fb      	ldr	r3, [r7, #12]
 801b744:	68db      	ldr	r3, [r3, #12]
 801b746:	60fb      	str	r3, [r7, #12]
 801b748:	68fb      	ldr	r3, [r7, #12]
 801b74a:	2b00      	cmp	r3, #0
 801b74c:	d1ef      	bne.n	801b72e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801b74e:	bf00      	nop
 801b750:	3714      	adds	r7, #20
 801b752:	46bd      	mov	sp, r7
 801b754:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b758:	4770      	bx	lr
 801b75a:	bf00      	nop
 801b75c:	2000e188 	.word	0x2000e188

0801b760 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801b760:	b580      	push	{r7, lr}
 801b762:	b082      	sub	sp, #8
 801b764:	af00      	add	r7, sp, #0
 801b766:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801b768:	4915      	ldr	r1, [pc, #84]	; (801b7c0 <etharp_free_entry+0x60>)
 801b76a:	687a      	ldr	r2, [r7, #4]
 801b76c:	4613      	mov	r3, r2
 801b76e:	005b      	lsls	r3, r3, #1
 801b770:	4413      	add	r3, r2
 801b772:	00db      	lsls	r3, r3, #3
 801b774:	440b      	add	r3, r1
 801b776:	681b      	ldr	r3, [r3, #0]
 801b778:	2b00      	cmp	r3, #0
 801b77a:	d013      	beq.n	801b7a4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801b77c:	4910      	ldr	r1, [pc, #64]	; (801b7c0 <etharp_free_entry+0x60>)
 801b77e:	687a      	ldr	r2, [r7, #4]
 801b780:	4613      	mov	r3, r2
 801b782:	005b      	lsls	r3, r3, #1
 801b784:	4413      	add	r3, r2
 801b786:	00db      	lsls	r3, r3, #3
 801b788:	440b      	add	r3, r1
 801b78a:	681b      	ldr	r3, [r3, #0]
 801b78c:	4618      	mov	r0, r3
 801b78e:	f7f8 ff21 	bl	80145d4 <pbuf_free>
    arp_table[i].q = NULL;
 801b792:	490b      	ldr	r1, [pc, #44]	; (801b7c0 <etharp_free_entry+0x60>)
 801b794:	687a      	ldr	r2, [r7, #4]
 801b796:	4613      	mov	r3, r2
 801b798:	005b      	lsls	r3, r3, #1
 801b79a:	4413      	add	r3, r2
 801b79c:	00db      	lsls	r3, r3, #3
 801b79e:	440b      	add	r3, r1
 801b7a0:	2200      	movs	r2, #0
 801b7a2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801b7a4:	4906      	ldr	r1, [pc, #24]	; (801b7c0 <etharp_free_entry+0x60>)
 801b7a6:	687a      	ldr	r2, [r7, #4]
 801b7a8:	4613      	mov	r3, r2
 801b7aa:	005b      	lsls	r3, r3, #1
 801b7ac:	4413      	add	r3, r2
 801b7ae:	00db      	lsls	r3, r3, #3
 801b7b0:	440b      	add	r3, r1
 801b7b2:	3314      	adds	r3, #20
 801b7b4:	2200      	movs	r2, #0
 801b7b6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801b7b8:	bf00      	nop
 801b7ba:	3708      	adds	r7, #8
 801b7bc:	46bd      	mov	sp, r7
 801b7be:	bd80      	pop	{r7, pc}
 801b7c0:	20006e54 	.word	0x20006e54

0801b7c4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801b7c4:	b580      	push	{r7, lr}
 801b7c6:	b082      	sub	sp, #8
 801b7c8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b7ca:	2300      	movs	r3, #0
 801b7cc:	607b      	str	r3, [r7, #4]
 801b7ce:	e096      	b.n	801b8fe <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801b7d0:	494f      	ldr	r1, [pc, #316]	; (801b910 <etharp_tmr+0x14c>)
 801b7d2:	687a      	ldr	r2, [r7, #4]
 801b7d4:	4613      	mov	r3, r2
 801b7d6:	005b      	lsls	r3, r3, #1
 801b7d8:	4413      	add	r3, r2
 801b7da:	00db      	lsls	r3, r3, #3
 801b7dc:	440b      	add	r3, r1
 801b7de:	3314      	adds	r3, #20
 801b7e0:	781b      	ldrb	r3, [r3, #0]
 801b7e2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801b7e4:	78fb      	ldrb	r3, [r7, #3]
 801b7e6:	2b00      	cmp	r3, #0
 801b7e8:	f000 8086 	beq.w	801b8f8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801b7ec:	4948      	ldr	r1, [pc, #288]	; (801b910 <etharp_tmr+0x14c>)
 801b7ee:	687a      	ldr	r2, [r7, #4]
 801b7f0:	4613      	mov	r3, r2
 801b7f2:	005b      	lsls	r3, r3, #1
 801b7f4:	4413      	add	r3, r2
 801b7f6:	00db      	lsls	r3, r3, #3
 801b7f8:	440b      	add	r3, r1
 801b7fa:	3312      	adds	r3, #18
 801b7fc:	881b      	ldrh	r3, [r3, #0]
 801b7fe:	3301      	adds	r3, #1
 801b800:	b298      	uxth	r0, r3
 801b802:	4943      	ldr	r1, [pc, #268]	; (801b910 <etharp_tmr+0x14c>)
 801b804:	687a      	ldr	r2, [r7, #4]
 801b806:	4613      	mov	r3, r2
 801b808:	005b      	lsls	r3, r3, #1
 801b80a:	4413      	add	r3, r2
 801b80c:	00db      	lsls	r3, r3, #3
 801b80e:	440b      	add	r3, r1
 801b810:	3312      	adds	r3, #18
 801b812:	4602      	mov	r2, r0
 801b814:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801b816:	493e      	ldr	r1, [pc, #248]	; (801b910 <etharp_tmr+0x14c>)
 801b818:	687a      	ldr	r2, [r7, #4]
 801b81a:	4613      	mov	r3, r2
 801b81c:	005b      	lsls	r3, r3, #1
 801b81e:	4413      	add	r3, r2
 801b820:	00db      	lsls	r3, r3, #3
 801b822:	440b      	add	r3, r1
 801b824:	3312      	adds	r3, #18
 801b826:	881b      	ldrh	r3, [r3, #0]
 801b828:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801b82c:	d215      	bcs.n	801b85a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801b82e:	4938      	ldr	r1, [pc, #224]	; (801b910 <etharp_tmr+0x14c>)
 801b830:	687a      	ldr	r2, [r7, #4]
 801b832:	4613      	mov	r3, r2
 801b834:	005b      	lsls	r3, r3, #1
 801b836:	4413      	add	r3, r2
 801b838:	00db      	lsls	r3, r3, #3
 801b83a:	440b      	add	r3, r1
 801b83c:	3314      	adds	r3, #20
 801b83e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801b840:	2b01      	cmp	r3, #1
 801b842:	d10e      	bne.n	801b862 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801b844:	4932      	ldr	r1, [pc, #200]	; (801b910 <etharp_tmr+0x14c>)
 801b846:	687a      	ldr	r2, [r7, #4]
 801b848:	4613      	mov	r3, r2
 801b84a:	005b      	lsls	r3, r3, #1
 801b84c:	4413      	add	r3, r2
 801b84e:	00db      	lsls	r3, r3, #3
 801b850:	440b      	add	r3, r1
 801b852:	3312      	adds	r3, #18
 801b854:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801b856:	2b04      	cmp	r3, #4
 801b858:	d903      	bls.n	801b862 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801b85a:	6878      	ldr	r0, [r7, #4]
 801b85c:	f7ff ff80 	bl	801b760 <etharp_free_entry>
 801b860:	e04a      	b.n	801b8f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801b862:	492b      	ldr	r1, [pc, #172]	; (801b910 <etharp_tmr+0x14c>)
 801b864:	687a      	ldr	r2, [r7, #4]
 801b866:	4613      	mov	r3, r2
 801b868:	005b      	lsls	r3, r3, #1
 801b86a:	4413      	add	r3, r2
 801b86c:	00db      	lsls	r3, r3, #3
 801b86e:	440b      	add	r3, r1
 801b870:	3314      	adds	r3, #20
 801b872:	781b      	ldrb	r3, [r3, #0]
 801b874:	2b03      	cmp	r3, #3
 801b876:	d10a      	bne.n	801b88e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801b878:	4925      	ldr	r1, [pc, #148]	; (801b910 <etharp_tmr+0x14c>)
 801b87a:	687a      	ldr	r2, [r7, #4]
 801b87c:	4613      	mov	r3, r2
 801b87e:	005b      	lsls	r3, r3, #1
 801b880:	4413      	add	r3, r2
 801b882:	00db      	lsls	r3, r3, #3
 801b884:	440b      	add	r3, r1
 801b886:	3314      	adds	r3, #20
 801b888:	2204      	movs	r2, #4
 801b88a:	701a      	strb	r2, [r3, #0]
 801b88c:	e034      	b.n	801b8f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801b88e:	4920      	ldr	r1, [pc, #128]	; (801b910 <etharp_tmr+0x14c>)
 801b890:	687a      	ldr	r2, [r7, #4]
 801b892:	4613      	mov	r3, r2
 801b894:	005b      	lsls	r3, r3, #1
 801b896:	4413      	add	r3, r2
 801b898:	00db      	lsls	r3, r3, #3
 801b89a:	440b      	add	r3, r1
 801b89c:	3314      	adds	r3, #20
 801b89e:	781b      	ldrb	r3, [r3, #0]
 801b8a0:	2b04      	cmp	r3, #4
 801b8a2:	d10a      	bne.n	801b8ba <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801b8a4:	491a      	ldr	r1, [pc, #104]	; (801b910 <etharp_tmr+0x14c>)
 801b8a6:	687a      	ldr	r2, [r7, #4]
 801b8a8:	4613      	mov	r3, r2
 801b8aa:	005b      	lsls	r3, r3, #1
 801b8ac:	4413      	add	r3, r2
 801b8ae:	00db      	lsls	r3, r3, #3
 801b8b0:	440b      	add	r3, r1
 801b8b2:	3314      	adds	r3, #20
 801b8b4:	2202      	movs	r2, #2
 801b8b6:	701a      	strb	r2, [r3, #0]
 801b8b8:	e01e      	b.n	801b8f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801b8ba:	4915      	ldr	r1, [pc, #84]	; (801b910 <etharp_tmr+0x14c>)
 801b8bc:	687a      	ldr	r2, [r7, #4]
 801b8be:	4613      	mov	r3, r2
 801b8c0:	005b      	lsls	r3, r3, #1
 801b8c2:	4413      	add	r3, r2
 801b8c4:	00db      	lsls	r3, r3, #3
 801b8c6:	440b      	add	r3, r1
 801b8c8:	3314      	adds	r3, #20
 801b8ca:	781b      	ldrb	r3, [r3, #0]
 801b8cc:	2b01      	cmp	r3, #1
 801b8ce:	d113      	bne.n	801b8f8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801b8d0:	490f      	ldr	r1, [pc, #60]	; (801b910 <etharp_tmr+0x14c>)
 801b8d2:	687a      	ldr	r2, [r7, #4]
 801b8d4:	4613      	mov	r3, r2
 801b8d6:	005b      	lsls	r3, r3, #1
 801b8d8:	4413      	add	r3, r2
 801b8da:	00db      	lsls	r3, r3, #3
 801b8dc:	440b      	add	r3, r1
 801b8de:	3308      	adds	r3, #8
 801b8e0:	6818      	ldr	r0, [r3, #0]
 801b8e2:	687a      	ldr	r2, [r7, #4]
 801b8e4:	4613      	mov	r3, r2
 801b8e6:	005b      	lsls	r3, r3, #1
 801b8e8:	4413      	add	r3, r2
 801b8ea:	00db      	lsls	r3, r3, #3
 801b8ec:	4a08      	ldr	r2, [pc, #32]	; (801b910 <etharp_tmr+0x14c>)
 801b8ee:	4413      	add	r3, r2
 801b8f0:	3304      	adds	r3, #4
 801b8f2:	4619      	mov	r1, r3
 801b8f4:	f000 fe6e 	bl	801c5d4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b8f8:	687b      	ldr	r3, [r7, #4]
 801b8fa:	3301      	adds	r3, #1
 801b8fc:	607b      	str	r3, [r7, #4]
 801b8fe:	687b      	ldr	r3, [r7, #4]
 801b900:	2b09      	cmp	r3, #9
 801b902:	f77f af65 	ble.w	801b7d0 <etharp_tmr+0xc>
      }
    }
  }
}
 801b906:	bf00      	nop
 801b908:	bf00      	nop
 801b90a:	3708      	adds	r7, #8
 801b90c:	46bd      	mov	sp, r7
 801b90e:	bd80      	pop	{r7, pc}
 801b910:	20006e54 	.word	0x20006e54

0801b914 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801b914:	b580      	push	{r7, lr}
 801b916:	b08a      	sub	sp, #40	; 0x28
 801b918:	af00      	add	r7, sp, #0
 801b91a:	60f8      	str	r0, [r7, #12]
 801b91c:	460b      	mov	r3, r1
 801b91e:	607a      	str	r2, [r7, #4]
 801b920:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801b922:	230a      	movs	r3, #10
 801b924:	84fb      	strh	r3, [r7, #38]	; 0x26
 801b926:	230a      	movs	r3, #10
 801b928:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801b92a:	230a      	movs	r3, #10
 801b92c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801b92e:	2300      	movs	r3, #0
 801b930:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801b932:	230a      	movs	r3, #10
 801b934:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801b936:	2300      	movs	r3, #0
 801b938:	83bb      	strh	r3, [r7, #28]
 801b93a:	2300      	movs	r3, #0
 801b93c:	837b      	strh	r3, [r7, #26]
 801b93e:	2300      	movs	r3, #0
 801b940:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801b942:	2300      	movs	r3, #0
 801b944:	843b      	strh	r3, [r7, #32]
 801b946:	e0ae      	b.n	801baa6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801b948:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b94c:	49a6      	ldr	r1, [pc, #664]	; (801bbe8 <etharp_find_entry+0x2d4>)
 801b94e:	4613      	mov	r3, r2
 801b950:	005b      	lsls	r3, r3, #1
 801b952:	4413      	add	r3, r2
 801b954:	00db      	lsls	r3, r3, #3
 801b956:	440b      	add	r3, r1
 801b958:	3314      	adds	r3, #20
 801b95a:	781b      	ldrb	r3, [r3, #0]
 801b95c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801b95e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801b962:	2b0a      	cmp	r3, #10
 801b964:	d105      	bne.n	801b972 <etharp_find_entry+0x5e>
 801b966:	7dfb      	ldrb	r3, [r7, #23]
 801b968:	2b00      	cmp	r3, #0
 801b96a:	d102      	bne.n	801b972 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801b96c:	8c3b      	ldrh	r3, [r7, #32]
 801b96e:	847b      	strh	r3, [r7, #34]	; 0x22
 801b970:	e095      	b.n	801ba9e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801b972:	7dfb      	ldrb	r3, [r7, #23]
 801b974:	2b00      	cmp	r3, #0
 801b976:	f000 8092 	beq.w	801ba9e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801b97a:	7dfb      	ldrb	r3, [r7, #23]
 801b97c:	2b01      	cmp	r3, #1
 801b97e:	d009      	beq.n	801b994 <etharp_find_entry+0x80>
 801b980:	7dfb      	ldrb	r3, [r7, #23]
 801b982:	2b01      	cmp	r3, #1
 801b984:	d806      	bhi.n	801b994 <etharp_find_entry+0x80>
 801b986:	4b99      	ldr	r3, [pc, #612]	; (801bbec <etharp_find_entry+0x2d8>)
 801b988:	f240 1223 	movw	r2, #291	; 0x123
 801b98c:	4998      	ldr	r1, [pc, #608]	; (801bbf0 <etharp_find_entry+0x2dc>)
 801b98e:	4899      	ldr	r0, [pc, #612]	; (801bbf4 <etharp_find_entry+0x2e0>)
 801b990:	f003 fc0c 	bl	801f1ac <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801b994:	68fb      	ldr	r3, [r7, #12]
 801b996:	2b00      	cmp	r3, #0
 801b998:	d020      	beq.n	801b9dc <etharp_find_entry+0xc8>
 801b99a:	68fb      	ldr	r3, [r7, #12]
 801b99c:	6819      	ldr	r1, [r3, #0]
 801b99e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b9a2:	4891      	ldr	r0, [pc, #580]	; (801bbe8 <etharp_find_entry+0x2d4>)
 801b9a4:	4613      	mov	r3, r2
 801b9a6:	005b      	lsls	r3, r3, #1
 801b9a8:	4413      	add	r3, r2
 801b9aa:	00db      	lsls	r3, r3, #3
 801b9ac:	4403      	add	r3, r0
 801b9ae:	3304      	adds	r3, #4
 801b9b0:	681b      	ldr	r3, [r3, #0]
 801b9b2:	4299      	cmp	r1, r3
 801b9b4:	d112      	bne.n	801b9dc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801b9b6:	687b      	ldr	r3, [r7, #4]
 801b9b8:	2b00      	cmp	r3, #0
 801b9ba:	d00c      	beq.n	801b9d6 <etharp_find_entry+0xc2>
 801b9bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b9c0:	4989      	ldr	r1, [pc, #548]	; (801bbe8 <etharp_find_entry+0x2d4>)
 801b9c2:	4613      	mov	r3, r2
 801b9c4:	005b      	lsls	r3, r3, #1
 801b9c6:	4413      	add	r3, r2
 801b9c8:	00db      	lsls	r3, r3, #3
 801b9ca:	440b      	add	r3, r1
 801b9cc:	3308      	adds	r3, #8
 801b9ce:	681b      	ldr	r3, [r3, #0]
 801b9d0:	687a      	ldr	r2, [r7, #4]
 801b9d2:	429a      	cmp	r2, r3
 801b9d4:	d102      	bne.n	801b9dc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801b9d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801b9da:	e100      	b.n	801bbde <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801b9dc:	7dfb      	ldrb	r3, [r7, #23]
 801b9de:	2b01      	cmp	r3, #1
 801b9e0:	d140      	bne.n	801ba64 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801b9e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b9e6:	4980      	ldr	r1, [pc, #512]	; (801bbe8 <etharp_find_entry+0x2d4>)
 801b9e8:	4613      	mov	r3, r2
 801b9ea:	005b      	lsls	r3, r3, #1
 801b9ec:	4413      	add	r3, r2
 801b9ee:	00db      	lsls	r3, r3, #3
 801b9f0:	440b      	add	r3, r1
 801b9f2:	681b      	ldr	r3, [r3, #0]
 801b9f4:	2b00      	cmp	r3, #0
 801b9f6:	d01a      	beq.n	801ba2e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801b9f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801b9fc:	497a      	ldr	r1, [pc, #488]	; (801bbe8 <etharp_find_entry+0x2d4>)
 801b9fe:	4613      	mov	r3, r2
 801ba00:	005b      	lsls	r3, r3, #1
 801ba02:	4413      	add	r3, r2
 801ba04:	00db      	lsls	r3, r3, #3
 801ba06:	440b      	add	r3, r1
 801ba08:	3312      	adds	r3, #18
 801ba0a:	881b      	ldrh	r3, [r3, #0]
 801ba0c:	8bba      	ldrh	r2, [r7, #28]
 801ba0e:	429a      	cmp	r2, r3
 801ba10:	d845      	bhi.n	801ba9e <etharp_find_entry+0x18a>
            old_queue = i;
 801ba12:	8c3b      	ldrh	r3, [r7, #32]
 801ba14:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801ba16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ba1a:	4973      	ldr	r1, [pc, #460]	; (801bbe8 <etharp_find_entry+0x2d4>)
 801ba1c:	4613      	mov	r3, r2
 801ba1e:	005b      	lsls	r3, r3, #1
 801ba20:	4413      	add	r3, r2
 801ba22:	00db      	lsls	r3, r3, #3
 801ba24:	440b      	add	r3, r1
 801ba26:	3312      	adds	r3, #18
 801ba28:	881b      	ldrh	r3, [r3, #0]
 801ba2a:	83bb      	strh	r3, [r7, #28]
 801ba2c:	e037      	b.n	801ba9e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801ba2e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ba32:	496d      	ldr	r1, [pc, #436]	; (801bbe8 <etharp_find_entry+0x2d4>)
 801ba34:	4613      	mov	r3, r2
 801ba36:	005b      	lsls	r3, r3, #1
 801ba38:	4413      	add	r3, r2
 801ba3a:	00db      	lsls	r3, r3, #3
 801ba3c:	440b      	add	r3, r1
 801ba3e:	3312      	adds	r3, #18
 801ba40:	881b      	ldrh	r3, [r3, #0]
 801ba42:	8b7a      	ldrh	r2, [r7, #26]
 801ba44:	429a      	cmp	r2, r3
 801ba46:	d82a      	bhi.n	801ba9e <etharp_find_entry+0x18a>
            old_pending = i;
 801ba48:	8c3b      	ldrh	r3, [r7, #32]
 801ba4a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801ba4c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ba50:	4965      	ldr	r1, [pc, #404]	; (801bbe8 <etharp_find_entry+0x2d4>)
 801ba52:	4613      	mov	r3, r2
 801ba54:	005b      	lsls	r3, r3, #1
 801ba56:	4413      	add	r3, r2
 801ba58:	00db      	lsls	r3, r3, #3
 801ba5a:	440b      	add	r3, r1
 801ba5c:	3312      	adds	r3, #18
 801ba5e:	881b      	ldrh	r3, [r3, #0]
 801ba60:	837b      	strh	r3, [r7, #26]
 801ba62:	e01c      	b.n	801ba9e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801ba64:	7dfb      	ldrb	r3, [r7, #23]
 801ba66:	2b01      	cmp	r3, #1
 801ba68:	d919      	bls.n	801ba9e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801ba6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ba6e:	495e      	ldr	r1, [pc, #376]	; (801bbe8 <etharp_find_entry+0x2d4>)
 801ba70:	4613      	mov	r3, r2
 801ba72:	005b      	lsls	r3, r3, #1
 801ba74:	4413      	add	r3, r2
 801ba76:	00db      	lsls	r3, r3, #3
 801ba78:	440b      	add	r3, r1
 801ba7a:	3312      	adds	r3, #18
 801ba7c:	881b      	ldrh	r3, [r3, #0]
 801ba7e:	8b3a      	ldrh	r2, [r7, #24]
 801ba80:	429a      	cmp	r2, r3
 801ba82:	d80c      	bhi.n	801ba9e <etharp_find_entry+0x18a>
            old_stable = i;
 801ba84:	8c3b      	ldrh	r3, [r7, #32]
 801ba86:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801ba88:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801ba8c:	4956      	ldr	r1, [pc, #344]	; (801bbe8 <etharp_find_entry+0x2d4>)
 801ba8e:	4613      	mov	r3, r2
 801ba90:	005b      	lsls	r3, r3, #1
 801ba92:	4413      	add	r3, r2
 801ba94:	00db      	lsls	r3, r3, #3
 801ba96:	440b      	add	r3, r1
 801ba98:	3312      	adds	r3, #18
 801ba9a:	881b      	ldrh	r3, [r3, #0]
 801ba9c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ba9e:	8c3b      	ldrh	r3, [r7, #32]
 801baa0:	3301      	adds	r3, #1
 801baa2:	b29b      	uxth	r3, r3
 801baa4:	843b      	strh	r3, [r7, #32]
 801baa6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801baaa:	2b09      	cmp	r3, #9
 801baac:	f77f af4c 	ble.w	801b948 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801bab0:	7afb      	ldrb	r3, [r7, #11]
 801bab2:	f003 0302 	and.w	r3, r3, #2
 801bab6:	2b00      	cmp	r3, #0
 801bab8:	d108      	bne.n	801bacc <etharp_find_entry+0x1b8>
 801baba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801babe:	2b0a      	cmp	r3, #10
 801bac0:	d107      	bne.n	801bad2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801bac2:	7afb      	ldrb	r3, [r7, #11]
 801bac4:	f003 0301 	and.w	r3, r3, #1
 801bac8:	2b00      	cmp	r3, #0
 801baca:	d102      	bne.n	801bad2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801bacc:	f04f 33ff 	mov.w	r3, #4294967295
 801bad0:	e085      	b.n	801bbde <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801bad2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801bad6:	2b09      	cmp	r3, #9
 801bad8:	dc02      	bgt.n	801bae0 <etharp_find_entry+0x1cc>
    i = empty;
 801bada:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801badc:	843b      	strh	r3, [r7, #32]
 801bade:	e039      	b.n	801bb54 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801bae0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801bae4:	2b09      	cmp	r3, #9
 801bae6:	dc14      	bgt.n	801bb12 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801bae8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801baea:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801baec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801baf0:	493d      	ldr	r1, [pc, #244]	; (801bbe8 <etharp_find_entry+0x2d4>)
 801baf2:	4613      	mov	r3, r2
 801baf4:	005b      	lsls	r3, r3, #1
 801baf6:	4413      	add	r3, r2
 801baf8:	00db      	lsls	r3, r3, #3
 801bafa:	440b      	add	r3, r1
 801bafc:	681b      	ldr	r3, [r3, #0]
 801bafe:	2b00      	cmp	r3, #0
 801bb00:	d018      	beq.n	801bb34 <etharp_find_entry+0x220>
 801bb02:	4b3a      	ldr	r3, [pc, #232]	; (801bbec <etharp_find_entry+0x2d8>)
 801bb04:	f240 126d 	movw	r2, #365	; 0x16d
 801bb08:	493b      	ldr	r1, [pc, #236]	; (801bbf8 <etharp_find_entry+0x2e4>)
 801bb0a:	483a      	ldr	r0, [pc, #232]	; (801bbf4 <etharp_find_entry+0x2e0>)
 801bb0c:	f003 fb4e 	bl	801f1ac <iprintf>
 801bb10:	e010      	b.n	801bb34 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801bb12:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801bb16:	2b09      	cmp	r3, #9
 801bb18:	dc02      	bgt.n	801bb20 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801bb1a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801bb1c:	843b      	strh	r3, [r7, #32]
 801bb1e:	e009      	b.n	801bb34 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801bb20:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801bb24:	2b09      	cmp	r3, #9
 801bb26:	dc02      	bgt.n	801bb2e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801bb28:	8bfb      	ldrh	r3, [r7, #30]
 801bb2a:	843b      	strh	r3, [r7, #32]
 801bb2c:	e002      	b.n	801bb34 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801bb2e:	f04f 33ff 	mov.w	r3, #4294967295
 801bb32:	e054      	b.n	801bbde <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801bb34:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801bb38:	2b09      	cmp	r3, #9
 801bb3a:	dd06      	ble.n	801bb4a <etharp_find_entry+0x236>
 801bb3c:	4b2b      	ldr	r3, [pc, #172]	; (801bbec <etharp_find_entry+0x2d8>)
 801bb3e:	f240 127f 	movw	r2, #383	; 0x17f
 801bb42:	492e      	ldr	r1, [pc, #184]	; (801bbfc <etharp_find_entry+0x2e8>)
 801bb44:	482b      	ldr	r0, [pc, #172]	; (801bbf4 <etharp_find_entry+0x2e0>)
 801bb46:	f003 fb31 	bl	801f1ac <iprintf>
    etharp_free_entry(i);
 801bb4a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801bb4e:	4618      	mov	r0, r3
 801bb50:	f7ff fe06 	bl	801b760 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801bb54:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801bb58:	2b09      	cmp	r3, #9
 801bb5a:	dd06      	ble.n	801bb6a <etharp_find_entry+0x256>
 801bb5c:	4b23      	ldr	r3, [pc, #140]	; (801bbec <etharp_find_entry+0x2d8>)
 801bb5e:	f240 1283 	movw	r2, #387	; 0x183
 801bb62:	4926      	ldr	r1, [pc, #152]	; (801bbfc <etharp_find_entry+0x2e8>)
 801bb64:	4823      	ldr	r0, [pc, #140]	; (801bbf4 <etharp_find_entry+0x2e0>)
 801bb66:	f003 fb21 	bl	801f1ac <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801bb6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bb6e:	491e      	ldr	r1, [pc, #120]	; (801bbe8 <etharp_find_entry+0x2d4>)
 801bb70:	4613      	mov	r3, r2
 801bb72:	005b      	lsls	r3, r3, #1
 801bb74:	4413      	add	r3, r2
 801bb76:	00db      	lsls	r3, r3, #3
 801bb78:	440b      	add	r3, r1
 801bb7a:	3314      	adds	r3, #20
 801bb7c:	781b      	ldrb	r3, [r3, #0]
 801bb7e:	2b00      	cmp	r3, #0
 801bb80:	d006      	beq.n	801bb90 <etharp_find_entry+0x27c>
 801bb82:	4b1a      	ldr	r3, [pc, #104]	; (801bbec <etharp_find_entry+0x2d8>)
 801bb84:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801bb88:	491d      	ldr	r1, [pc, #116]	; (801bc00 <etharp_find_entry+0x2ec>)
 801bb8a:	481a      	ldr	r0, [pc, #104]	; (801bbf4 <etharp_find_entry+0x2e0>)
 801bb8c:	f003 fb0e 	bl	801f1ac <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801bb90:	68fb      	ldr	r3, [r7, #12]
 801bb92:	2b00      	cmp	r3, #0
 801bb94:	d00b      	beq.n	801bbae <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801bb96:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bb9a:	68fb      	ldr	r3, [r7, #12]
 801bb9c:	6819      	ldr	r1, [r3, #0]
 801bb9e:	4812      	ldr	r0, [pc, #72]	; (801bbe8 <etharp_find_entry+0x2d4>)
 801bba0:	4613      	mov	r3, r2
 801bba2:	005b      	lsls	r3, r3, #1
 801bba4:	4413      	add	r3, r2
 801bba6:	00db      	lsls	r3, r3, #3
 801bba8:	4403      	add	r3, r0
 801bbaa:	3304      	adds	r3, #4
 801bbac:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801bbae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bbb2:	490d      	ldr	r1, [pc, #52]	; (801bbe8 <etharp_find_entry+0x2d4>)
 801bbb4:	4613      	mov	r3, r2
 801bbb6:	005b      	lsls	r3, r3, #1
 801bbb8:	4413      	add	r3, r2
 801bbba:	00db      	lsls	r3, r3, #3
 801bbbc:	440b      	add	r3, r1
 801bbbe:	3312      	adds	r3, #18
 801bbc0:	2200      	movs	r2, #0
 801bbc2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801bbc4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801bbc8:	4907      	ldr	r1, [pc, #28]	; (801bbe8 <etharp_find_entry+0x2d4>)
 801bbca:	4613      	mov	r3, r2
 801bbcc:	005b      	lsls	r3, r3, #1
 801bbce:	4413      	add	r3, r2
 801bbd0:	00db      	lsls	r3, r3, #3
 801bbd2:	440b      	add	r3, r1
 801bbd4:	3308      	adds	r3, #8
 801bbd6:	687a      	ldr	r2, [r7, #4]
 801bbd8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801bbda:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801bbde:	4618      	mov	r0, r3
 801bbe0:	3728      	adds	r7, #40	; 0x28
 801bbe2:	46bd      	mov	sp, r7
 801bbe4:	bd80      	pop	{r7, pc}
 801bbe6:	bf00      	nop
 801bbe8:	20006e54 	.word	0x20006e54
 801bbec:	08026564 	.word	0x08026564
 801bbf0:	0802659c 	.word	0x0802659c
 801bbf4:	080265dc 	.word	0x080265dc
 801bbf8:	08026604 	.word	0x08026604
 801bbfc:	0802661c 	.word	0x0802661c
 801bc00:	08026630 	.word	0x08026630

0801bc04 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801bc04:	b580      	push	{r7, lr}
 801bc06:	b088      	sub	sp, #32
 801bc08:	af02      	add	r7, sp, #8
 801bc0a:	60f8      	str	r0, [r7, #12]
 801bc0c:	60b9      	str	r1, [r7, #8]
 801bc0e:	607a      	str	r2, [r7, #4]
 801bc10:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801bc12:	68fb      	ldr	r3, [r7, #12]
 801bc14:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801bc18:	2b06      	cmp	r3, #6
 801bc1a:	d006      	beq.n	801bc2a <etharp_update_arp_entry+0x26>
 801bc1c:	4b48      	ldr	r3, [pc, #288]	; (801bd40 <etharp_update_arp_entry+0x13c>)
 801bc1e:	f240 12a9 	movw	r2, #425	; 0x1a9
 801bc22:	4948      	ldr	r1, [pc, #288]	; (801bd44 <etharp_update_arp_entry+0x140>)
 801bc24:	4848      	ldr	r0, [pc, #288]	; (801bd48 <etharp_update_arp_entry+0x144>)
 801bc26:	f003 fac1 	bl	801f1ac <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801bc2a:	68bb      	ldr	r3, [r7, #8]
 801bc2c:	2b00      	cmp	r3, #0
 801bc2e:	d012      	beq.n	801bc56 <etharp_update_arp_entry+0x52>
 801bc30:	68bb      	ldr	r3, [r7, #8]
 801bc32:	681b      	ldr	r3, [r3, #0]
 801bc34:	2b00      	cmp	r3, #0
 801bc36:	d00e      	beq.n	801bc56 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801bc38:	68bb      	ldr	r3, [r7, #8]
 801bc3a:	681b      	ldr	r3, [r3, #0]
 801bc3c:	68f9      	ldr	r1, [r7, #12]
 801bc3e:	4618      	mov	r0, r3
 801bc40:	f001 f8fe 	bl	801ce40 <ip4_addr_isbroadcast_u32>
 801bc44:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801bc46:	2b00      	cmp	r3, #0
 801bc48:	d105      	bne.n	801bc56 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801bc4a:	68bb      	ldr	r3, [r7, #8]
 801bc4c:	681b      	ldr	r3, [r3, #0]
 801bc4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801bc52:	2be0      	cmp	r3, #224	; 0xe0
 801bc54:	d102      	bne.n	801bc5c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801bc56:	f06f 030f 	mvn.w	r3, #15
 801bc5a:	e06c      	b.n	801bd36 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801bc5c:	78fb      	ldrb	r3, [r7, #3]
 801bc5e:	68fa      	ldr	r2, [r7, #12]
 801bc60:	4619      	mov	r1, r3
 801bc62:	68b8      	ldr	r0, [r7, #8]
 801bc64:	f7ff fe56 	bl	801b914 <etharp_find_entry>
 801bc68:	4603      	mov	r3, r0
 801bc6a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801bc6c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801bc70:	2b00      	cmp	r3, #0
 801bc72:	da02      	bge.n	801bc7a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801bc74:	8afb      	ldrh	r3, [r7, #22]
 801bc76:	b25b      	sxtb	r3, r3
 801bc78:	e05d      	b.n	801bd36 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801bc7a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bc7e:	4933      	ldr	r1, [pc, #204]	; (801bd4c <etharp_update_arp_entry+0x148>)
 801bc80:	4613      	mov	r3, r2
 801bc82:	005b      	lsls	r3, r3, #1
 801bc84:	4413      	add	r3, r2
 801bc86:	00db      	lsls	r3, r3, #3
 801bc88:	440b      	add	r3, r1
 801bc8a:	3314      	adds	r3, #20
 801bc8c:	2202      	movs	r2, #2
 801bc8e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801bc90:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bc94:	492d      	ldr	r1, [pc, #180]	; (801bd4c <etharp_update_arp_entry+0x148>)
 801bc96:	4613      	mov	r3, r2
 801bc98:	005b      	lsls	r3, r3, #1
 801bc9a:	4413      	add	r3, r2
 801bc9c:	00db      	lsls	r3, r3, #3
 801bc9e:	440b      	add	r3, r1
 801bca0:	3308      	adds	r3, #8
 801bca2:	68fa      	ldr	r2, [r7, #12]
 801bca4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801bca6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bcaa:	4613      	mov	r3, r2
 801bcac:	005b      	lsls	r3, r3, #1
 801bcae:	4413      	add	r3, r2
 801bcb0:	00db      	lsls	r3, r3, #3
 801bcb2:	3308      	adds	r3, #8
 801bcb4:	4a25      	ldr	r2, [pc, #148]	; (801bd4c <etharp_update_arp_entry+0x148>)
 801bcb6:	4413      	add	r3, r2
 801bcb8:	3304      	adds	r3, #4
 801bcba:	2206      	movs	r2, #6
 801bcbc:	6879      	ldr	r1, [r7, #4]
 801bcbe:	4618      	mov	r0, r3
 801bcc0:	f002 fb20 	bl	801e304 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801bcc4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bcc8:	4920      	ldr	r1, [pc, #128]	; (801bd4c <etharp_update_arp_entry+0x148>)
 801bcca:	4613      	mov	r3, r2
 801bccc:	005b      	lsls	r3, r3, #1
 801bcce:	4413      	add	r3, r2
 801bcd0:	00db      	lsls	r3, r3, #3
 801bcd2:	440b      	add	r3, r1
 801bcd4:	3312      	adds	r3, #18
 801bcd6:	2200      	movs	r2, #0
 801bcd8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801bcda:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bcde:	491b      	ldr	r1, [pc, #108]	; (801bd4c <etharp_update_arp_entry+0x148>)
 801bce0:	4613      	mov	r3, r2
 801bce2:	005b      	lsls	r3, r3, #1
 801bce4:	4413      	add	r3, r2
 801bce6:	00db      	lsls	r3, r3, #3
 801bce8:	440b      	add	r3, r1
 801bcea:	681b      	ldr	r3, [r3, #0]
 801bcec:	2b00      	cmp	r3, #0
 801bcee:	d021      	beq.n	801bd34 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801bcf0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bcf4:	4915      	ldr	r1, [pc, #84]	; (801bd4c <etharp_update_arp_entry+0x148>)
 801bcf6:	4613      	mov	r3, r2
 801bcf8:	005b      	lsls	r3, r3, #1
 801bcfa:	4413      	add	r3, r2
 801bcfc:	00db      	lsls	r3, r3, #3
 801bcfe:	440b      	add	r3, r1
 801bd00:	681b      	ldr	r3, [r3, #0]
 801bd02:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801bd04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801bd08:	4910      	ldr	r1, [pc, #64]	; (801bd4c <etharp_update_arp_entry+0x148>)
 801bd0a:	4613      	mov	r3, r2
 801bd0c:	005b      	lsls	r3, r3, #1
 801bd0e:	4413      	add	r3, r2
 801bd10:	00db      	lsls	r3, r3, #3
 801bd12:	440b      	add	r3, r1
 801bd14:	2200      	movs	r2, #0
 801bd16:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801bd18:	68fb      	ldr	r3, [r7, #12]
 801bd1a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801bd1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801bd22:	9300      	str	r3, [sp, #0]
 801bd24:	687b      	ldr	r3, [r7, #4]
 801bd26:	6939      	ldr	r1, [r7, #16]
 801bd28:	68f8      	ldr	r0, [r7, #12]
 801bd2a:	f001 ff91 	bl	801dc50 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801bd2e:	6938      	ldr	r0, [r7, #16]
 801bd30:	f7f8 fc50 	bl	80145d4 <pbuf_free>
  }
  return ERR_OK;
 801bd34:	2300      	movs	r3, #0
}
 801bd36:	4618      	mov	r0, r3
 801bd38:	3718      	adds	r7, #24
 801bd3a:	46bd      	mov	sp, r7
 801bd3c:	bd80      	pop	{r7, pc}
 801bd3e:	bf00      	nop
 801bd40:	08026564 	.word	0x08026564
 801bd44:	0802665c 	.word	0x0802665c
 801bd48:	080265dc 	.word	0x080265dc
 801bd4c:	20006e54 	.word	0x20006e54

0801bd50 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801bd50:	b580      	push	{r7, lr}
 801bd52:	b084      	sub	sp, #16
 801bd54:	af00      	add	r7, sp, #0
 801bd56:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bd58:	2300      	movs	r3, #0
 801bd5a:	60fb      	str	r3, [r7, #12]
 801bd5c:	e01e      	b.n	801bd9c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801bd5e:	4913      	ldr	r1, [pc, #76]	; (801bdac <etharp_cleanup_netif+0x5c>)
 801bd60:	68fa      	ldr	r2, [r7, #12]
 801bd62:	4613      	mov	r3, r2
 801bd64:	005b      	lsls	r3, r3, #1
 801bd66:	4413      	add	r3, r2
 801bd68:	00db      	lsls	r3, r3, #3
 801bd6a:	440b      	add	r3, r1
 801bd6c:	3314      	adds	r3, #20
 801bd6e:	781b      	ldrb	r3, [r3, #0]
 801bd70:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801bd72:	7afb      	ldrb	r3, [r7, #11]
 801bd74:	2b00      	cmp	r3, #0
 801bd76:	d00e      	beq.n	801bd96 <etharp_cleanup_netif+0x46>
 801bd78:	490c      	ldr	r1, [pc, #48]	; (801bdac <etharp_cleanup_netif+0x5c>)
 801bd7a:	68fa      	ldr	r2, [r7, #12]
 801bd7c:	4613      	mov	r3, r2
 801bd7e:	005b      	lsls	r3, r3, #1
 801bd80:	4413      	add	r3, r2
 801bd82:	00db      	lsls	r3, r3, #3
 801bd84:	440b      	add	r3, r1
 801bd86:	3308      	adds	r3, #8
 801bd88:	681b      	ldr	r3, [r3, #0]
 801bd8a:	687a      	ldr	r2, [r7, #4]
 801bd8c:	429a      	cmp	r2, r3
 801bd8e:	d102      	bne.n	801bd96 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801bd90:	68f8      	ldr	r0, [r7, #12]
 801bd92:	f7ff fce5 	bl	801b760 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801bd96:	68fb      	ldr	r3, [r7, #12]
 801bd98:	3301      	adds	r3, #1
 801bd9a:	60fb      	str	r3, [r7, #12]
 801bd9c:	68fb      	ldr	r3, [r7, #12]
 801bd9e:	2b09      	cmp	r3, #9
 801bda0:	dddd      	ble.n	801bd5e <etharp_cleanup_netif+0xe>
    }
  }
}
 801bda2:	bf00      	nop
 801bda4:	bf00      	nop
 801bda6:	3710      	adds	r7, #16
 801bda8:	46bd      	mov	sp, r7
 801bdaa:	bd80      	pop	{r7, pc}
 801bdac:	20006e54 	.word	0x20006e54

0801bdb0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801bdb0:	b5b0      	push	{r4, r5, r7, lr}
 801bdb2:	b08a      	sub	sp, #40	; 0x28
 801bdb4:	af04      	add	r7, sp, #16
 801bdb6:	6078      	str	r0, [r7, #4]
 801bdb8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801bdba:	683b      	ldr	r3, [r7, #0]
 801bdbc:	2b00      	cmp	r3, #0
 801bdbe:	d107      	bne.n	801bdd0 <etharp_input+0x20>
 801bdc0:	4b3d      	ldr	r3, [pc, #244]	; (801beb8 <etharp_input+0x108>)
 801bdc2:	f240 228a 	movw	r2, #650	; 0x28a
 801bdc6:	493d      	ldr	r1, [pc, #244]	; (801bebc <etharp_input+0x10c>)
 801bdc8:	483d      	ldr	r0, [pc, #244]	; (801bec0 <etharp_input+0x110>)
 801bdca:	f003 f9ef 	bl	801f1ac <iprintf>
 801bdce:	e06f      	b.n	801beb0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801bdd0:	687b      	ldr	r3, [r7, #4]
 801bdd2:	685b      	ldr	r3, [r3, #4]
 801bdd4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801bdd6:	693b      	ldr	r3, [r7, #16]
 801bdd8:	881b      	ldrh	r3, [r3, #0]
 801bdda:	b29b      	uxth	r3, r3
 801bddc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bde0:	d10c      	bne.n	801bdfc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801bde2:	693b      	ldr	r3, [r7, #16]
 801bde4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801bde6:	2b06      	cmp	r3, #6
 801bde8:	d108      	bne.n	801bdfc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801bdea:	693b      	ldr	r3, [r7, #16]
 801bdec:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801bdee:	2b04      	cmp	r3, #4
 801bdf0:	d104      	bne.n	801bdfc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801bdf2:	693b      	ldr	r3, [r7, #16]
 801bdf4:	885b      	ldrh	r3, [r3, #2]
 801bdf6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801bdf8:	2b08      	cmp	r3, #8
 801bdfa:	d003      	beq.n	801be04 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801bdfc:	6878      	ldr	r0, [r7, #4]
 801bdfe:	f7f8 fbe9 	bl	80145d4 <pbuf_free>
    return;
 801be02:	e055      	b.n	801beb0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801be04:	693b      	ldr	r3, [r7, #16]
 801be06:	330e      	adds	r3, #14
 801be08:	681b      	ldr	r3, [r3, #0]
 801be0a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801be0c:	693b      	ldr	r3, [r7, #16]
 801be0e:	3318      	adds	r3, #24
 801be10:	681b      	ldr	r3, [r3, #0]
 801be12:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801be14:	683b      	ldr	r3, [r7, #0]
 801be16:	3304      	adds	r3, #4
 801be18:	681b      	ldr	r3, [r3, #0]
 801be1a:	2b00      	cmp	r3, #0
 801be1c:	d102      	bne.n	801be24 <etharp_input+0x74>
    for_us = 0;
 801be1e:	2300      	movs	r3, #0
 801be20:	75fb      	strb	r3, [r7, #23]
 801be22:	e009      	b.n	801be38 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801be24:	68ba      	ldr	r2, [r7, #8]
 801be26:	683b      	ldr	r3, [r7, #0]
 801be28:	3304      	adds	r3, #4
 801be2a:	681b      	ldr	r3, [r3, #0]
 801be2c:	429a      	cmp	r2, r3
 801be2e:	bf0c      	ite	eq
 801be30:	2301      	moveq	r3, #1
 801be32:	2300      	movne	r3, #0
 801be34:	b2db      	uxtb	r3, r3
 801be36:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801be38:	693b      	ldr	r3, [r7, #16]
 801be3a:	f103 0208 	add.w	r2, r3, #8
 801be3e:	7dfb      	ldrb	r3, [r7, #23]
 801be40:	2b00      	cmp	r3, #0
 801be42:	d001      	beq.n	801be48 <etharp_input+0x98>
 801be44:	2301      	movs	r3, #1
 801be46:	e000      	b.n	801be4a <etharp_input+0x9a>
 801be48:	2302      	movs	r3, #2
 801be4a:	f107 010c 	add.w	r1, r7, #12
 801be4e:	6838      	ldr	r0, [r7, #0]
 801be50:	f7ff fed8 	bl	801bc04 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801be54:	693b      	ldr	r3, [r7, #16]
 801be56:	88db      	ldrh	r3, [r3, #6]
 801be58:	b29b      	uxth	r3, r3
 801be5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801be5e:	d003      	beq.n	801be68 <etharp_input+0xb8>
 801be60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801be64:	d01e      	beq.n	801bea4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801be66:	e020      	b.n	801beaa <etharp_input+0xfa>
      if (for_us) {
 801be68:	7dfb      	ldrb	r3, [r7, #23]
 801be6a:	2b00      	cmp	r3, #0
 801be6c:	d01c      	beq.n	801bea8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801be6e:	683b      	ldr	r3, [r7, #0]
 801be70:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801be74:	693b      	ldr	r3, [r7, #16]
 801be76:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801be7a:	683b      	ldr	r3, [r7, #0]
 801be7c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801be80:	683b      	ldr	r3, [r7, #0]
 801be82:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801be84:	693a      	ldr	r2, [r7, #16]
 801be86:	3208      	adds	r2, #8
        etharp_raw(netif,
 801be88:	2102      	movs	r1, #2
 801be8a:	9103      	str	r1, [sp, #12]
 801be8c:	f107 010c 	add.w	r1, r7, #12
 801be90:	9102      	str	r1, [sp, #8]
 801be92:	9201      	str	r2, [sp, #4]
 801be94:	9300      	str	r3, [sp, #0]
 801be96:	462b      	mov	r3, r5
 801be98:	4622      	mov	r2, r4
 801be9a:	4601      	mov	r1, r0
 801be9c:	6838      	ldr	r0, [r7, #0]
 801be9e:	f000 faeb 	bl	801c478 <etharp_raw>
      break;
 801bea2:	e001      	b.n	801bea8 <etharp_input+0xf8>
      break;
 801bea4:	bf00      	nop
 801bea6:	e000      	b.n	801beaa <etharp_input+0xfa>
      break;
 801bea8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801beaa:	6878      	ldr	r0, [r7, #4]
 801beac:	f7f8 fb92 	bl	80145d4 <pbuf_free>
}
 801beb0:	3718      	adds	r7, #24
 801beb2:	46bd      	mov	sp, r7
 801beb4:	bdb0      	pop	{r4, r5, r7, pc}
 801beb6:	bf00      	nop
 801beb8:	08026564 	.word	0x08026564
 801bebc:	080266b4 	.word	0x080266b4
 801bec0:	080265dc 	.word	0x080265dc

0801bec4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801bec4:	b580      	push	{r7, lr}
 801bec6:	b086      	sub	sp, #24
 801bec8:	af02      	add	r7, sp, #8
 801beca:	60f8      	str	r0, [r7, #12]
 801becc:	60b9      	str	r1, [r7, #8]
 801bece:	4613      	mov	r3, r2
 801bed0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801bed2:	79fa      	ldrb	r2, [r7, #7]
 801bed4:	4944      	ldr	r1, [pc, #272]	; (801bfe8 <etharp_output_to_arp_index+0x124>)
 801bed6:	4613      	mov	r3, r2
 801bed8:	005b      	lsls	r3, r3, #1
 801beda:	4413      	add	r3, r2
 801bedc:	00db      	lsls	r3, r3, #3
 801bede:	440b      	add	r3, r1
 801bee0:	3314      	adds	r3, #20
 801bee2:	781b      	ldrb	r3, [r3, #0]
 801bee4:	2b01      	cmp	r3, #1
 801bee6:	d806      	bhi.n	801bef6 <etharp_output_to_arp_index+0x32>
 801bee8:	4b40      	ldr	r3, [pc, #256]	; (801bfec <etharp_output_to_arp_index+0x128>)
 801beea:	f240 22ee 	movw	r2, #750	; 0x2ee
 801beee:	4940      	ldr	r1, [pc, #256]	; (801bff0 <etharp_output_to_arp_index+0x12c>)
 801bef0:	4840      	ldr	r0, [pc, #256]	; (801bff4 <etharp_output_to_arp_index+0x130>)
 801bef2:	f003 f95b 	bl	801f1ac <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801bef6:	79fa      	ldrb	r2, [r7, #7]
 801bef8:	493b      	ldr	r1, [pc, #236]	; (801bfe8 <etharp_output_to_arp_index+0x124>)
 801befa:	4613      	mov	r3, r2
 801befc:	005b      	lsls	r3, r3, #1
 801befe:	4413      	add	r3, r2
 801bf00:	00db      	lsls	r3, r3, #3
 801bf02:	440b      	add	r3, r1
 801bf04:	3314      	adds	r3, #20
 801bf06:	781b      	ldrb	r3, [r3, #0]
 801bf08:	2b02      	cmp	r3, #2
 801bf0a:	d153      	bne.n	801bfb4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801bf0c:	79fa      	ldrb	r2, [r7, #7]
 801bf0e:	4936      	ldr	r1, [pc, #216]	; (801bfe8 <etharp_output_to_arp_index+0x124>)
 801bf10:	4613      	mov	r3, r2
 801bf12:	005b      	lsls	r3, r3, #1
 801bf14:	4413      	add	r3, r2
 801bf16:	00db      	lsls	r3, r3, #3
 801bf18:	440b      	add	r3, r1
 801bf1a:	3312      	adds	r3, #18
 801bf1c:	881b      	ldrh	r3, [r3, #0]
 801bf1e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801bf22:	d919      	bls.n	801bf58 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801bf24:	79fa      	ldrb	r2, [r7, #7]
 801bf26:	4613      	mov	r3, r2
 801bf28:	005b      	lsls	r3, r3, #1
 801bf2a:	4413      	add	r3, r2
 801bf2c:	00db      	lsls	r3, r3, #3
 801bf2e:	4a2e      	ldr	r2, [pc, #184]	; (801bfe8 <etharp_output_to_arp_index+0x124>)
 801bf30:	4413      	add	r3, r2
 801bf32:	3304      	adds	r3, #4
 801bf34:	4619      	mov	r1, r3
 801bf36:	68f8      	ldr	r0, [r7, #12]
 801bf38:	f000 fb4c 	bl	801c5d4 <etharp_request>
 801bf3c:	4603      	mov	r3, r0
 801bf3e:	2b00      	cmp	r3, #0
 801bf40:	d138      	bne.n	801bfb4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801bf42:	79fa      	ldrb	r2, [r7, #7]
 801bf44:	4928      	ldr	r1, [pc, #160]	; (801bfe8 <etharp_output_to_arp_index+0x124>)
 801bf46:	4613      	mov	r3, r2
 801bf48:	005b      	lsls	r3, r3, #1
 801bf4a:	4413      	add	r3, r2
 801bf4c:	00db      	lsls	r3, r3, #3
 801bf4e:	440b      	add	r3, r1
 801bf50:	3314      	adds	r3, #20
 801bf52:	2203      	movs	r2, #3
 801bf54:	701a      	strb	r2, [r3, #0]
 801bf56:	e02d      	b.n	801bfb4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801bf58:	79fa      	ldrb	r2, [r7, #7]
 801bf5a:	4923      	ldr	r1, [pc, #140]	; (801bfe8 <etharp_output_to_arp_index+0x124>)
 801bf5c:	4613      	mov	r3, r2
 801bf5e:	005b      	lsls	r3, r3, #1
 801bf60:	4413      	add	r3, r2
 801bf62:	00db      	lsls	r3, r3, #3
 801bf64:	440b      	add	r3, r1
 801bf66:	3312      	adds	r3, #18
 801bf68:	881b      	ldrh	r3, [r3, #0]
 801bf6a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801bf6e:	d321      	bcc.n	801bfb4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801bf70:	79fa      	ldrb	r2, [r7, #7]
 801bf72:	4613      	mov	r3, r2
 801bf74:	005b      	lsls	r3, r3, #1
 801bf76:	4413      	add	r3, r2
 801bf78:	00db      	lsls	r3, r3, #3
 801bf7a:	4a1b      	ldr	r2, [pc, #108]	; (801bfe8 <etharp_output_to_arp_index+0x124>)
 801bf7c:	4413      	add	r3, r2
 801bf7e:	1d19      	adds	r1, r3, #4
 801bf80:	79fa      	ldrb	r2, [r7, #7]
 801bf82:	4613      	mov	r3, r2
 801bf84:	005b      	lsls	r3, r3, #1
 801bf86:	4413      	add	r3, r2
 801bf88:	00db      	lsls	r3, r3, #3
 801bf8a:	3308      	adds	r3, #8
 801bf8c:	4a16      	ldr	r2, [pc, #88]	; (801bfe8 <etharp_output_to_arp_index+0x124>)
 801bf8e:	4413      	add	r3, r2
 801bf90:	3304      	adds	r3, #4
 801bf92:	461a      	mov	r2, r3
 801bf94:	68f8      	ldr	r0, [r7, #12]
 801bf96:	f000 fafb 	bl	801c590 <etharp_request_dst>
 801bf9a:	4603      	mov	r3, r0
 801bf9c:	2b00      	cmp	r3, #0
 801bf9e:	d109      	bne.n	801bfb4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801bfa0:	79fa      	ldrb	r2, [r7, #7]
 801bfa2:	4911      	ldr	r1, [pc, #68]	; (801bfe8 <etharp_output_to_arp_index+0x124>)
 801bfa4:	4613      	mov	r3, r2
 801bfa6:	005b      	lsls	r3, r3, #1
 801bfa8:	4413      	add	r3, r2
 801bfaa:	00db      	lsls	r3, r3, #3
 801bfac:	440b      	add	r3, r1
 801bfae:	3314      	adds	r3, #20
 801bfb0:	2203      	movs	r2, #3
 801bfb2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801bfb4:	68fb      	ldr	r3, [r7, #12]
 801bfb6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801bfba:	79fa      	ldrb	r2, [r7, #7]
 801bfbc:	4613      	mov	r3, r2
 801bfbe:	005b      	lsls	r3, r3, #1
 801bfc0:	4413      	add	r3, r2
 801bfc2:	00db      	lsls	r3, r3, #3
 801bfc4:	3308      	adds	r3, #8
 801bfc6:	4a08      	ldr	r2, [pc, #32]	; (801bfe8 <etharp_output_to_arp_index+0x124>)
 801bfc8:	4413      	add	r3, r2
 801bfca:	3304      	adds	r3, #4
 801bfcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801bfd0:	9200      	str	r2, [sp, #0]
 801bfd2:	460a      	mov	r2, r1
 801bfd4:	68b9      	ldr	r1, [r7, #8]
 801bfd6:	68f8      	ldr	r0, [r7, #12]
 801bfd8:	f001 fe3a 	bl	801dc50 <ethernet_output>
 801bfdc:	4603      	mov	r3, r0
}
 801bfde:	4618      	mov	r0, r3
 801bfe0:	3710      	adds	r7, #16
 801bfe2:	46bd      	mov	sp, r7
 801bfe4:	bd80      	pop	{r7, pc}
 801bfe6:	bf00      	nop
 801bfe8:	20006e54 	.word	0x20006e54
 801bfec:	08026564 	.word	0x08026564
 801bff0:	080266d4 	.word	0x080266d4
 801bff4:	080265dc 	.word	0x080265dc

0801bff8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801bff8:	b580      	push	{r7, lr}
 801bffa:	b08a      	sub	sp, #40	; 0x28
 801bffc:	af02      	add	r7, sp, #8
 801bffe:	60f8      	str	r0, [r7, #12]
 801c000:	60b9      	str	r1, [r7, #8]
 801c002:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801c004:	687b      	ldr	r3, [r7, #4]
 801c006:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801c008:	68fb      	ldr	r3, [r7, #12]
 801c00a:	2b00      	cmp	r3, #0
 801c00c:	d106      	bne.n	801c01c <etharp_output+0x24>
 801c00e:	4b73      	ldr	r3, [pc, #460]	; (801c1dc <etharp_output+0x1e4>)
 801c010:	f240 321e 	movw	r2, #798	; 0x31e
 801c014:	4972      	ldr	r1, [pc, #456]	; (801c1e0 <etharp_output+0x1e8>)
 801c016:	4873      	ldr	r0, [pc, #460]	; (801c1e4 <etharp_output+0x1ec>)
 801c018:	f003 f8c8 	bl	801f1ac <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801c01c:	68bb      	ldr	r3, [r7, #8]
 801c01e:	2b00      	cmp	r3, #0
 801c020:	d106      	bne.n	801c030 <etharp_output+0x38>
 801c022:	4b6e      	ldr	r3, [pc, #440]	; (801c1dc <etharp_output+0x1e4>)
 801c024:	f240 321f 	movw	r2, #799	; 0x31f
 801c028:	496f      	ldr	r1, [pc, #444]	; (801c1e8 <etharp_output+0x1f0>)
 801c02a:	486e      	ldr	r0, [pc, #440]	; (801c1e4 <etharp_output+0x1ec>)
 801c02c:	f003 f8be 	bl	801f1ac <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801c030:	687b      	ldr	r3, [r7, #4]
 801c032:	2b00      	cmp	r3, #0
 801c034:	d106      	bne.n	801c044 <etharp_output+0x4c>
 801c036:	4b69      	ldr	r3, [pc, #420]	; (801c1dc <etharp_output+0x1e4>)
 801c038:	f44f 7248 	mov.w	r2, #800	; 0x320
 801c03c:	496b      	ldr	r1, [pc, #428]	; (801c1ec <etharp_output+0x1f4>)
 801c03e:	4869      	ldr	r0, [pc, #420]	; (801c1e4 <etharp_output+0x1ec>)
 801c040:	f003 f8b4 	bl	801f1ac <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801c044:	687b      	ldr	r3, [r7, #4]
 801c046:	681b      	ldr	r3, [r3, #0]
 801c048:	68f9      	ldr	r1, [r7, #12]
 801c04a:	4618      	mov	r0, r3
 801c04c:	f000 fef8 	bl	801ce40 <ip4_addr_isbroadcast_u32>
 801c050:	4603      	mov	r3, r0
 801c052:	2b00      	cmp	r3, #0
 801c054:	d002      	beq.n	801c05c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801c056:	4b66      	ldr	r3, [pc, #408]	; (801c1f0 <etharp_output+0x1f8>)
 801c058:	61fb      	str	r3, [r7, #28]
 801c05a:	e0af      	b.n	801c1bc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801c05c:	687b      	ldr	r3, [r7, #4]
 801c05e:	681b      	ldr	r3, [r3, #0]
 801c060:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c064:	2be0      	cmp	r3, #224	; 0xe0
 801c066:	d118      	bne.n	801c09a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801c068:	2301      	movs	r3, #1
 801c06a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801c06c:	2300      	movs	r3, #0
 801c06e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801c070:	235e      	movs	r3, #94	; 0x5e
 801c072:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801c074:	687b      	ldr	r3, [r7, #4]
 801c076:	3301      	adds	r3, #1
 801c078:	781b      	ldrb	r3, [r3, #0]
 801c07a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801c07e:	b2db      	uxtb	r3, r3
 801c080:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801c082:	687b      	ldr	r3, [r7, #4]
 801c084:	3302      	adds	r3, #2
 801c086:	781b      	ldrb	r3, [r3, #0]
 801c088:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801c08a:	687b      	ldr	r3, [r7, #4]
 801c08c:	3303      	adds	r3, #3
 801c08e:	781b      	ldrb	r3, [r3, #0]
 801c090:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801c092:	f107 0310 	add.w	r3, r7, #16
 801c096:	61fb      	str	r3, [r7, #28]
 801c098:	e090      	b.n	801c1bc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801c09a:	687b      	ldr	r3, [r7, #4]
 801c09c:	681a      	ldr	r2, [r3, #0]
 801c09e:	68fb      	ldr	r3, [r7, #12]
 801c0a0:	3304      	adds	r3, #4
 801c0a2:	681b      	ldr	r3, [r3, #0]
 801c0a4:	405a      	eors	r2, r3
 801c0a6:	68fb      	ldr	r3, [r7, #12]
 801c0a8:	3308      	adds	r3, #8
 801c0aa:	681b      	ldr	r3, [r3, #0]
 801c0ac:	4013      	ands	r3, r2
 801c0ae:	2b00      	cmp	r3, #0
 801c0b0:	d012      	beq.n	801c0d8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801c0b2:	687b      	ldr	r3, [r7, #4]
 801c0b4:	681b      	ldr	r3, [r3, #0]
 801c0b6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801c0b8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801c0bc:	4293      	cmp	r3, r2
 801c0be:	d00b      	beq.n	801c0d8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801c0c0:	68fb      	ldr	r3, [r7, #12]
 801c0c2:	330c      	adds	r3, #12
 801c0c4:	681b      	ldr	r3, [r3, #0]
 801c0c6:	2b00      	cmp	r3, #0
 801c0c8:	d003      	beq.n	801c0d2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801c0ca:	68fb      	ldr	r3, [r7, #12]
 801c0cc:	330c      	adds	r3, #12
 801c0ce:	61bb      	str	r3, [r7, #24]
 801c0d0:	e002      	b.n	801c0d8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801c0d2:	f06f 0303 	mvn.w	r3, #3
 801c0d6:	e07d      	b.n	801c1d4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801c0d8:	4b46      	ldr	r3, [pc, #280]	; (801c1f4 <etharp_output+0x1fc>)
 801c0da:	781b      	ldrb	r3, [r3, #0]
 801c0dc:	4619      	mov	r1, r3
 801c0de:	4a46      	ldr	r2, [pc, #280]	; (801c1f8 <etharp_output+0x200>)
 801c0e0:	460b      	mov	r3, r1
 801c0e2:	005b      	lsls	r3, r3, #1
 801c0e4:	440b      	add	r3, r1
 801c0e6:	00db      	lsls	r3, r3, #3
 801c0e8:	4413      	add	r3, r2
 801c0ea:	3314      	adds	r3, #20
 801c0ec:	781b      	ldrb	r3, [r3, #0]
 801c0ee:	2b01      	cmp	r3, #1
 801c0f0:	d925      	bls.n	801c13e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801c0f2:	4b40      	ldr	r3, [pc, #256]	; (801c1f4 <etharp_output+0x1fc>)
 801c0f4:	781b      	ldrb	r3, [r3, #0]
 801c0f6:	4619      	mov	r1, r3
 801c0f8:	4a3f      	ldr	r2, [pc, #252]	; (801c1f8 <etharp_output+0x200>)
 801c0fa:	460b      	mov	r3, r1
 801c0fc:	005b      	lsls	r3, r3, #1
 801c0fe:	440b      	add	r3, r1
 801c100:	00db      	lsls	r3, r3, #3
 801c102:	4413      	add	r3, r2
 801c104:	3308      	adds	r3, #8
 801c106:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801c108:	68fa      	ldr	r2, [r7, #12]
 801c10a:	429a      	cmp	r2, r3
 801c10c:	d117      	bne.n	801c13e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801c10e:	69bb      	ldr	r3, [r7, #24]
 801c110:	681a      	ldr	r2, [r3, #0]
 801c112:	4b38      	ldr	r3, [pc, #224]	; (801c1f4 <etharp_output+0x1fc>)
 801c114:	781b      	ldrb	r3, [r3, #0]
 801c116:	4618      	mov	r0, r3
 801c118:	4937      	ldr	r1, [pc, #220]	; (801c1f8 <etharp_output+0x200>)
 801c11a:	4603      	mov	r3, r0
 801c11c:	005b      	lsls	r3, r3, #1
 801c11e:	4403      	add	r3, r0
 801c120:	00db      	lsls	r3, r3, #3
 801c122:	440b      	add	r3, r1
 801c124:	3304      	adds	r3, #4
 801c126:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801c128:	429a      	cmp	r2, r3
 801c12a:	d108      	bne.n	801c13e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801c12c:	4b31      	ldr	r3, [pc, #196]	; (801c1f4 <etharp_output+0x1fc>)
 801c12e:	781b      	ldrb	r3, [r3, #0]
 801c130:	461a      	mov	r2, r3
 801c132:	68b9      	ldr	r1, [r7, #8]
 801c134:	68f8      	ldr	r0, [r7, #12]
 801c136:	f7ff fec5 	bl	801bec4 <etharp_output_to_arp_index>
 801c13a:	4603      	mov	r3, r0
 801c13c:	e04a      	b.n	801c1d4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801c13e:	2300      	movs	r3, #0
 801c140:	75fb      	strb	r3, [r7, #23]
 801c142:	e031      	b.n	801c1a8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801c144:	7dfa      	ldrb	r2, [r7, #23]
 801c146:	492c      	ldr	r1, [pc, #176]	; (801c1f8 <etharp_output+0x200>)
 801c148:	4613      	mov	r3, r2
 801c14a:	005b      	lsls	r3, r3, #1
 801c14c:	4413      	add	r3, r2
 801c14e:	00db      	lsls	r3, r3, #3
 801c150:	440b      	add	r3, r1
 801c152:	3314      	adds	r3, #20
 801c154:	781b      	ldrb	r3, [r3, #0]
 801c156:	2b01      	cmp	r3, #1
 801c158:	d923      	bls.n	801c1a2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801c15a:	7dfa      	ldrb	r2, [r7, #23]
 801c15c:	4926      	ldr	r1, [pc, #152]	; (801c1f8 <etharp_output+0x200>)
 801c15e:	4613      	mov	r3, r2
 801c160:	005b      	lsls	r3, r3, #1
 801c162:	4413      	add	r3, r2
 801c164:	00db      	lsls	r3, r3, #3
 801c166:	440b      	add	r3, r1
 801c168:	3308      	adds	r3, #8
 801c16a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801c16c:	68fa      	ldr	r2, [r7, #12]
 801c16e:	429a      	cmp	r2, r3
 801c170:	d117      	bne.n	801c1a2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801c172:	69bb      	ldr	r3, [r7, #24]
 801c174:	6819      	ldr	r1, [r3, #0]
 801c176:	7dfa      	ldrb	r2, [r7, #23]
 801c178:	481f      	ldr	r0, [pc, #124]	; (801c1f8 <etharp_output+0x200>)
 801c17a:	4613      	mov	r3, r2
 801c17c:	005b      	lsls	r3, r3, #1
 801c17e:	4413      	add	r3, r2
 801c180:	00db      	lsls	r3, r3, #3
 801c182:	4403      	add	r3, r0
 801c184:	3304      	adds	r3, #4
 801c186:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801c188:	4299      	cmp	r1, r3
 801c18a:	d10a      	bne.n	801c1a2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801c18c:	4a19      	ldr	r2, [pc, #100]	; (801c1f4 <etharp_output+0x1fc>)
 801c18e:	7dfb      	ldrb	r3, [r7, #23]
 801c190:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801c192:	7dfb      	ldrb	r3, [r7, #23]
 801c194:	461a      	mov	r2, r3
 801c196:	68b9      	ldr	r1, [r7, #8]
 801c198:	68f8      	ldr	r0, [r7, #12]
 801c19a:	f7ff fe93 	bl	801bec4 <etharp_output_to_arp_index>
 801c19e:	4603      	mov	r3, r0
 801c1a0:	e018      	b.n	801c1d4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801c1a2:	7dfb      	ldrb	r3, [r7, #23]
 801c1a4:	3301      	adds	r3, #1
 801c1a6:	75fb      	strb	r3, [r7, #23]
 801c1a8:	7dfb      	ldrb	r3, [r7, #23]
 801c1aa:	2b09      	cmp	r3, #9
 801c1ac:	d9ca      	bls.n	801c144 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801c1ae:	68ba      	ldr	r2, [r7, #8]
 801c1b0:	69b9      	ldr	r1, [r7, #24]
 801c1b2:	68f8      	ldr	r0, [r7, #12]
 801c1b4:	f000 f822 	bl	801c1fc <etharp_query>
 801c1b8:	4603      	mov	r3, r0
 801c1ba:	e00b      	b.n	801c1d4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801c1bc:	68fb      	ldr	r3, [r7, #12]
 801c1be:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801c1c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801c1c6:	9300      	str	r3, [sp, #0]
 801c1c8:	69fb      	ldr	r3, [r7, #28]
 801c1ca:	68b9      	ldr	r1, [r7, #8]
 801c1cc:	68f8      	ldr	r0, [r7, #12]
 801c1ce:	f001 fd3f 	bl	801dc50 <ethernet_output>
 801c1d2:	4603      	mov	r3, r0
}
 801c1d4:	4618      	mov	r0, r3
 801c1d6:	3720      	adds	r7, #32
 801c1d8:	46bd      	mov	sp, r7
 801c1da:	bd80      	pop	{r7, pc}
 801c1dc:	08026564 	.word	0x08026564
 801c1e0:	080266b4 	.word	0x080266b4
 801c1e4:	080265dc 	.word	0x080265dc
 801c1e8:	08026704 	.word	0x08026704
 801c1ec:	080266a4 	.word	0x080266a4
 801c1f0:	08026f24 	.word	0x08026f24
 801c1f4:	20006f44 	.word	0x20006f44
 801c1f8:	20006e54 	.word	0x20006e54

0801c1fc <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801c1fc:	b580      	push	{r7, lr}
 801c1fe:	b08c      	sub	sp, #48	; 0x30
 801c200:	af02      	add	r7, sp, #8
 801c202:	60f8      	str	r0, [r7, #12]
 801c204:	60b9      	str	r1, [r7, #8]
 801c206:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801c208:	68fb      	ldr	r3, [r7, #12]
 801c20a:	3326      	adds	r3, #38	; 0x26
 801c20c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801c20e:	23ff      	movs	r3, #255	; 0xff
 801c210:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801c214:	2300      	movs	r3, #0
 801c216:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801c218:	68bb      	ldr	r3, [r7, #8]
 801c21a:	681b      	ldr	r3, [r3, #0]
 801c21c:	68f9      	ldr	r1, [r7, #12]
 801c21e:	4618      	mov	r0, r3
 801c220:	f000 fe0e 	bl	801ce40 <ip4_addr_isbroadcast_u32>
 801c224:	4603      	mov	r3, r0
 801c226:	2b00      	cmp	r3, #0
 801c228:	d10c      	bne.n	801c244 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801c22a:	68bb      	ldr	r3, [r7, #8]
 801c22c:	681b      	ldr	r3, [r3, #0]
 801c22e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801c232:	2be0      	cmp	r3, #224	; 0xe0
 801c234:	d006      	beq.n	801c244 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801c236:	68bb      	ldr	r3, [r7, #8]
 801c238:	2b00      	cmp	r3, #0
 801c23a:	d003      	beq.n	801c244 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801c23c:	68bb      	ldr	r3, [r7, #8]
 801c23e:	681b      	ldr	r3, [r3, #0]
 801c240:	2b00      	cmp	r3, #0
 801c242:	d102      	bne.n	801c24a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801c244:	f06f 030f 	mvn.w	r3, #15
 801c248:	e101      	b.n	801c44e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801c24a:	68fa      	ldr	r2, [r7, #12]
 801c24c:	2101      	movs	r1, #1
 801c24e:	68b8      	ldr	r0, [r7, #8]
 801c250:	f7ff fb60 	bl	801b914 <etharp_find_entry>
 801c254:	4603      	mov	r3, r0
 801c256:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801c258:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801c25c:	2b00      	cmp	r3, #0
 801c25e:	da02      	bge.n	801c266 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801c260:	8a7b      	ldrh	r3, [r7, #18]
 801c262:	b25b      	sxtb	r3, r3
 801c264:	e0f3      	b.n	801c44e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801c266:	8a7b      	ldrh	r3, [r7, #18]
 801c268:	2b7e      	cmp	r3, #126	; 0x7e
 801c26a:	d906      	bls.n	801c27a <etharp_query+0x7e>
 801c26c:	4b7a      	ldr	r3, [pc, #488]	; (801c458 <etharp_query+0x25c>)
 801c26e:	f240 32c1 	movw	r2, #961	; 0x3c1
 801c272:	497a      	ldr	r1, [pc, #488]	; (801c45c <etharp_query+0x260>)
 801c274:	487a      	ldr	r0, [pc, #488]	; (801c460 <etharp_query+0x264>)
 801c276:	f002 ff99 	bl	801f1ac <iprintf>
  i = (netif_addr_idx_t)i_err;
 801c27a:	8a7b      	ldrh	r3, [r7, #18]
 801c27c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801c27e:	7c7a      	ldrb	r2, [r7, #17]
 801c280:	4978      	ldr	r1, [pc, #480]	; (801c464 <etharp_query+0x268>)
 801c282:	4613      	mov	r3, r2
 801c284:	005b      	lsls	r3, r3, #1
 801c286:	4413      	add	r3, r2
 801c288:	00db      	lsls	r3, r3, #3
 801c28a:	440b      	add	r3, r1
 801c28c:	3314      	adds	r3, #20
 801c28e:	781b      	ldrb	r3, [r3, #0]
 801c290:	2b00      	cmp	r3, #0
 801c292:	d115      	bne.n	801c2c0 <etharp_query+0xc4>
    is_new_entry = 1;
 801c294:	2301      	movs	r3, #1
 801c296:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801c298:	7c7a      	ldrb	r2, [r7, #17]
 801c29a:	4972      	ldr	r1, [pc, #456]	; (801c464 <etharp_query+0x268>)
 801c29c:	4613      	mov	r3, r2
 801c29e:	005b      	lsls	r3, r3, #1
 801c2a0:	4413      	add	r3, r2
 801c2a2:	00db      	lsls	r3, r3, #3
 801c2a4:	440b      	add	r3, r1
 801c2a6:	3314      	adds	r3, #20
 801c2a8:	2201      	movs	r2, #1
 801c2aa:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801c2ac:	7c7a      	ldrb	r2, [r7, #17]
 801c2ae:	496d      	ldr	r1, [pc, #436]	; (801c464 <etharp_query+0x268>)
 801c2b0:	4613      	mov	r3, r2
 801c2b2:	005b      	lsls	r3, r3, #1
 801c2b4:	4413      	add	r3, r2
 801c2b6:	00db      	lsls	r3, r3, #3
 801c2b8:	440b      	add	r3, r1
 801c2ba:	3308      	adds	r3, #8
 801c2bc:	68fa      	ldr	r2, [r7, #12]
 801c2be:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801c2c0:	7c7a      	ldrb	r2, [r7, #17]
 801c2c2:	4968      	ldr	r1, [pc, #416]	; (801c464 <etharp_query+0x268>)
 801c2c4:	4613      	mov	r3, r2
 801c2c6:	005b      	lsls	r3, r3, #1
 801c2c8:	4413      	add	r3, r2
 801c2ca:	00db      	lsls	r3, r3, #3
 801c2cc:	440b      	add	r3, r1
 801c2ce:	3314      	adds	r3, #20
 801c2d0:	781b      	ldrb	r3, [r3, #0]
 801c2d2:	2b01      	cmp	r3, #1
 801c2d4:	d011      	beq.n	801c2fa <etharp_query+0xfe>
 801c2d6:	7c7a      	ldrb	r2, [r7, #17]
 801c2d8:	4962      	ldr	r1, [pc, #392]	; (801c464 <etharp_query+0x268>)
 801c2da:	4613      	mov	r3, r2
 801c2dc:	005b      	lsls	r3, r3, #1
 801c2de:	4413      	add	r3, r2
 801c2e0:	00db      	lsls	r3, r3, #3
 801c2e2:	440b      	add	r3, r1
 801c2e4:	3314      	adds	r3, #20
 801c2e6:	781b      	ldrb	r3, [r3, #0]
 801c2e8:	2b01      	cmp	r3, #1
 801c2ea:	d806      	bhi.n	801c2fa <etharp_query+0xfe>
 801c2ec:	4b5a      	ldr	r3, [pc, #360]	; (801c458 <etharp_query+0x25c>)
 801c2ee:	f240 32cd 	movw	r2, #973	; 0x3cd
 801c2f2:	495d      	ldr	r1, [pc, #372]	; (801c468 <etharp_query+0x26c>)
 801c2f4:	485a      	ldr	r0, [pc, #360]	; (801c460 <etharp_query+0x264>)
 801c2f6:	f002 ff59 	bl	801f1ac <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801c2fa:	6a3b      	ldr	r3, [r7, #32]
 801c2fc:	2b00      	cmp	r3, #0
 801c2fe:	d102      	bne.n	801c306 <etharp_query+0x10a>
 801c300:	687b      	ldr	r3, [r7, #4]
 801c302:	2b00      	cmp	r3, #0
 801c304:	d10c      	bne.n	801c320 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801c306:	68b9      	ldr	r1, [r7, #8]
 801c308:	68f8      	ldr	r0, [r7, #12]
 801c30a:	f000 f963 	bl	801c5d4 <etharp_request>
 801c30e:	4603      	mov	r3, r0
 801c310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801c314:	687b      	ldr	r3, [r7, #4]
 801c316:	2b00      	cmp	r3, #0
 801c318:	d102      	bne.n	801c320 <etharp_query+0x124>
      return result;
 801c31a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801c31e:	e096      	b.n	801c44e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801c320:	687b      	ldr	r3, [r7, #4]
 801c322:	2b00      	cmp	r3, #0
 801c324:	d106      	bne.n	801c334 <etharp_query+0x138>
 801c326:	4b4c      	ldr	r3, [pc, #304]	; (801c458 <etharp_query+0x25c>)
 801c328:	f240 32e1 	movw	r2, #993	; 0x3e1
 801c32c:	494f      	ldr	r1, [pc, #316]	; (801c46c <etharp_query+0x270>)
 801c32e:	484c      	ldr	r0, [pc, #304]	; (801c460 <etharp_query+0x264>)
 801c330:	f002 ff3c 	bl	801f1ac <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801c334:	7c7a      	ldrb	r2, [r7, #17]
 801c336:	494b      	ldr	r1, [pc, #300]	; (801c464 <etharp_query+0x268>)
 801c338:	4613      	mov	r3, r2
 801c33a:	005b      	lsls	r3, r3, #1
 801c33c:	4413      	add	r3, r2
 801c33e:	00db      	lsls	r3, r3, #3
 801c340:	440b      	add	r3, r1
 801c342:	3314      	adds	r3, #20
 801c344:	781b      	ldrb	r3, [r3, #0]
 801c346:	2b01      	cmp	r3, #1
 801c348:	d917      	bls.n	801c37a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801c34a:	4a49      	ldr	r2, [pc, #292]	; (801c470 <etharp_query+0x274>)
 801c34c:	7c7b      	ldrb	r3, [r7, #17]
 801c34e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801c350:	7c7a      	ldrb	r2, [r7, #17]
 801c352:	4613      	mov	r3, r2
 801c354:	005b      	lsls	r3, r3, #1
 801c356:	4413      	add	r3, r2
 801c358:	00db      	lsls	r3, r3, #3
 801c35a:	3308      	adds	r3, #8
 801c35c:	4a41      	ldr	r2, [pc, #260]	; (801c464 <etharp_query+0x268>)
 801c35e:	4413      	add	r3, r2
 801c360:	3304      	adds	r3, #4
 801c362:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801c366:	9200      	str	r2, [sp, #0]
 801c368:	697a      	ldr	r2, [r7, #20]
 801c36a:	6879      	ldr	r1, [r7, #4]
 801c36c:	68f8      	ldr	r0, [r7, #12]
 801c36e:	f001 fc6f 	bl	801dc50 <ethernet_output>
 801c372:	4603      	mov	r3, r0
 801c374:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c378:	e067      	b.n	801c44a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801c37a:	7c7a      	ldrb	r2, [r7, #17]
 801c37c:	4939      	ldr	r1, [pc, #228]	; (801c464 <etharp_query+0x268>)
 801c37e:	4613      	mov	r3, r2
 801c380:	005b      	lsls	r3, r3, #1
 801c382:	4413      	add	r3, r2
 801c384:	00db      	lsls	r3, r3, #3
 801c386:	440b      	add	r3, r1
 801c388:	3314      	adds	r3, #20
 801c38a:	781b      	ldrb	r3, [r3, #0]
 801c38c:	2b01      	cmp	r3, #1
 801c38e:	d15c      	bne.n	801c44a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801c390:	2300      	movs	r3, #0
 801c392:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801c394:	687b      	ldr	r3, [r7, #4]
 801c396:	61fb      	str	r3, [r7, #28]
    while (p) {
 801c398:	e01c      	b.n	801c3d4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801c39a:	69fb      	ldr	r3, [r7, #28]
 801c39c:	895a      	ldrh	r2, [r3, #10]
 801c39e:	69fb      	ldr	r3, [r7, #28]
 801c3a0:	891b      	ldrh	r3, [r3, #8]
 801c3a2:	429a      	cmp	r2, r3
 801c3a4:	d10a      	bne.n	801c3bc <etharp_query+0x1c0>
 801c3a6:	69fb      	ldr	r3, [r7, #28]
 801c3a8:	681b      	ldr	r3, [r3, #0]
 801c3aa:	2b00      	cmp	r3, #0
 801c3ac:	d006      	beq.n	801c3bc <etharp_query+0x1c0>
 801c3ae:	4b2a      	ldr	r3, [pc, #168]	; (801c458 <etharp_query+0x25c>)
 801c3b0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801c3b4:	492f      	ldr	r1, [pc, #188]	; (801c474 <etharp_query+0x278>)
 801c3b6:	482a      	ldr	r0, [pc, #168]	; (801c460 <etharp_query+0x264>)
 801c3b8:	f002 fef8 	bl	801f1ac <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801c3bc:	69fb      	ldr	r3, [r7, #28]
 801c3be:	7b1b      	ldrb	r3, [r3, #12]
 801c3c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c3c4:	2b00      	cmp	r3, #0
 801c3c6:	d002      	beq.n	801c3ce <etharp_query+0x1d2>
        copy_needed = 1;
 801c3c8:	2301      	movs	r3, #1
 801c3ca:	61bb      	str	r3, [r7, #24]
        break;
 801c3cc:	e005      	b.n	801c3da <etharp_query+0x1de>
      }
      p = p->next;
 801c3ce:	69fb      	ldr	r3, [r7, #28]
 801c3d0:	681b      	ldr	r3, [r3, #0]
 801c3d2:	61fb      	str	r3, [r7, #28]
    while (p) {
 801c3d4:	69fb      	ldr	r3, [r7, #28]
 801c3d6:	2b00      	cmp	r3, #0
 801c3d8:	d1df      	bne.n	801c39a <etharp_query+0x19e>
    }
    if (copy_needed) {
 801c3da:	69bb      	ldr	r3, [r7, #24]
 801c3dc:	2b00      	cmp	r3, #0
 801c3de:	d007      	beq.n	801c3f0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801c3e0:	687a      	ldr	r2, [r7, #4]
 801c3e2:	f44f 7120 	mov.w	r1, #640	; 0x280
 801c3e6:	200e      	movs	r0, #14
 801c3e8:	f7f8 fb6c 	bl	8014ac4 <pbuf_clone>
 801c3ec:	61f8      	str	r0, [r7, #28]
 801c3ee:	e004      	b.n	801c3fa <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801c3f0:	687b      	ldr	r3, [r7, #4]
 801c3f2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801c3f4:	69f8      	ldr	r0, [r7, #28]
 801c3f6:	f7f8 f993 	bl	8014720 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801c3fa:	69fb      	ldr	r3, [r7, #28]
 801c3fc:	2b00      	cmp	r3, #0
 801c3fe:	d021      	beq.n	801c444 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801c400:	7c7a      	ldrb	r2, [r7, #17]
 801c402:	4918      	ldr	r1, [pc, #96]	; (801c464 <etharp_query+0x268>)
 801c404:	4613      	mov	r3, r2
 801c406:	005b      	lsls	r3, r3, #1
 801c408:	4413      	add	r3, r2
 801c40a:	00db      	lsls	r3, r3, #3
 801c40c:	440b      	add	r3, r1
 801c40e:	681b      	ldr	r3, [r3, #0]
 801c410:	2b00      	cmp	r3, #0
 801c412:	d00a      	beq.n	801c42a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801c414:	7c7a      	ldrb	r2, [r7, #17]
 801c416:	4913      	ldr	r1, [pc, #76]	; (801c464 <etharp_query+0x268>)
 801c418:	4613      	mov	r3, r2
 801c41a:	005b      	lsls	r3, r3, #1
 801c41c:	4413      	add	r3, r2
 801c41e:	00db      	lsls	r3, r3, #3
 801c420:	440b      	add	r3, r1
 801c422:	681b      	ldr	r3, [r3, #0]
 801c424:	4618      	mov	r0, r3
 801c426:	f7f8 f8d5 	bl	80145d4 <pbuf_free>
      }
      arp_table[i].q = p;
 801c42a:	7c7a      	ldrb	r2, [r7, #17]
 801c42c:	490d      	ldr	r1, [pc, #52]	; (801c464 <etharp_query+0x268>)
 801c42e:	4613      	mov	r3, r2
 801c430:	005b      	lsls	r3, r3, #1
 801c432:	4413      	add	r3, r2
 801c434:	00db      	lsls	r3, r3, #3
 801c436:	440b      	add	r3, r1
 801c438:	69fa      	ldr	r2, [r7, #28]
 801c43a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801c43c:	2300      	movs	r3, #0
 801c43e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c442:	e002      	b.n	801c44a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801c444:	23ff      	movs	r3, #255	; 0xff
 801c446:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801c44a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801c44e:	4618      	mov	r0, r3
 801c450:	3728      	adds	r7, #40	; 0x28
 801c452:	46bd      	mov	sp, r7
 801c454:	bd80      	pop	{r7, pc}
 801c456:	bf00      	nop
 801c458:	08026564 	.word	0x08026564
 801c45c:	08026710 	.word	0x08026710
 801c460:	080265dc 	.word	0x080265dc
 801c464:	20006e54 	.word	0x20006e54
 801c468:	08026720 	.word	0x08026720
 801c46c:	08026704 	.word	0x08026704
 801c470:	20006f44 	.word	0x20006f44
 801c474:	08026748 	.word	0x08026748

0801c478 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801c478:	b580      	push	{r7, lr}
 801c47a:	b08a      	sub	sp, #40	; 0x28
 801c47c:	af02      	add	r7, sp, #8
 801c47e:	60f8      	str	r0, [r7, #12]
 801c480:	60b9      	str	r1, [r7, #8]
 801c482:	607a      	str	r2, [r7, #4]
 801c484:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801c486:	2300      	movs	r3, #0
 801c488:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801c48a:	68fb      	ldr	r3, [r7, #12]
 801c48c:	2b00      	cmp	r3, #0
 801c48e:	d106      	bne.n	801c49e <etharp_raw+0x26>
 801c490:	4b3a      	ldr	r3, [pc, #232]	; (801c57c <etharp_raw+0x104>)
 801c492:	f240 4257 	movw	r2, #1111	; 0x457
 801c496:	493a      	ldr	r1, [pc, #232]	; (801c580 <etharp_raw+0x108>)
 801c498:	483a      	ldr	r0, [pc, #232]	; (801c584 <etharp_raw+0x10c>)
 801c49a:	f002 fe87 	bl	801f1ac <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801c49e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c4a2:	211c      	movs	r1, #28
 801c4a4:	200e      	movs	r0, #14
 801c4a6:	f7f7 fdb1 	bl	801400c <pbuf_alloc>
 801c4aa:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801c4ac:	69bb      	ldr	r3, [r7, #24]
 801c4ae:	2b00      	cmp	r3, #0
 801c4b0:	d102      	bne.n	801c4b8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801c4b2:	f04f 33ff 	mov.w	r3, #4294967295
 801c4b6:	e05d      	b.n	801c574 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801c4b8:	69bb      	ldr	r3, [r7, #24]
 801c4ba:	895b      	ldrh	r3, [r3, #10]
 801c4bc:	2b1b      	cmp	r3, #27
 801c4be:	d806      	bhi.n	801c4ce <etharp_raw+0x56>
 801c4c0:	4b2e      	ldr	r3, [pc, #184]	; (801c57c <etharp_raw+0x104>)
 801c4c2:	f240 4262 	movw	r2, #1122	; 0x462
 801c4c6:	4930      	ldr	r1, [pc, #192]	; (801c588 <etharp_raw+0x110>)
 801c4c8:	482e      	ldr	r0, [pc, #184]	; (801c584 <etharp_raw+0x10c>)
 801c4ca:	f002 fe6f 	bl	801f1ac <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801c4ce:	69bb      	ldr	r3, [r7, #24]
 801c4d0:	685b      	ldr	r3, [r3, #4]
 801c4d2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801c4d4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801c4d6:	4618      	mov	r0, r3
 801c4d8:	f7f6 fd34 	bl	8012f44 <lwip_htons>
 801c4dc:	4603      	mov	r3, r0
 801c4de:	461a      	mov	r2, r3
 801c4e0:	697b      	ldr	r3, [r7, #20]
 801c4e2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801c4e4:	68fb      	ldr	r3, [r7, #12]
 801c4e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801c4ea:	2b06      	cmp	r3, #6
 801c4ec:	d006      	beq.n	801c4fc <etharp_raw+0x84>
 801c4ee:	4b23      	ldr	r3, [pc, #140]	; (801c57c <etharp_raw+0x104>)
 801c4f0:	f240 4269 	movw	r2, #1129	; 0x469
 801c4f4:	4925      	ldr	r1, [pc, #148]	; (801c58c <etharp_raw+0x114>)
 801c4f6:	4823      	ldr	r0, [pc, #140]	; (801c584 <etharp_raw+0x10c>)
 801c4f8:	f002 fe58 	bl	801f1ac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801c4fc:	697b      	ldr	r3, [r7, #20]
 801c4fe:	3308      	adds	r3, #8
 801c500:	2206      	movs	r2, #6
 801c502:	6839      	ldr	r1, [r7, #0]
 801c504:	4618      	mov	r0, r3
 801c506:	f001 fefd 	bl	801e304 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801c50a:	697b      	ldr	r3, [r7, #20]
 801c50c:	3312      	adds	r3, #18
 801c50e:	2206      	movs	r2, #6
 801c510:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c512:	4618      	mov	r0, r3
 801c514:	f001 fef6 	bl	801e304 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801c518:	697b      	ldr	r3, [r7, #20]
 801c51a:	330e      	adds	r3, #14
 801c51c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c51e:	6812      	ldr	r2, [r2, #0]
 801c520:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801c522:	697b      	ldr	r3, [r7, #20]
 801c524:	3318      	adds	r3, #24
 801c526:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c528:	6812      	ldr	r2, [r2, #0]
 801c52a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801c52c:	697b      	ldr	r3, [r7, #20]
 801c52e:	2200      	movs	r2, #0
 801c530:	701a      	strb	r2, [r3, #0]
 801c532:	2200      	movs	r2, #0
 801c534:	f042 0201 	orr.w	r2, r2, #1
 801c538:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801c53a:	697b      	ldr	r3, [r7, #20]
 801c53c:	2200      	movs	r2, #0
 801c53e:	f042 0208 	orr.w	r2, r2, #8
 801c542:	709a      	strb	r2, [r3, #2]
 801c544:	2200      	movs	r2, #0
 801c546:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801c548:	697b      	ldr	r3, [r7, #20]
 801c54a:	2206      	movs	r2, #6
 801c54c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801c54e:	697b      	ldr	r3, [r7, #20]
 801c550:	2204      	movs	r2, #4
 801c552:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801c554:	f640 0306 	movw	r3, #2054	; 0x806
 801c558:	9300      	str	r3, [sp, #0]
 801c55a:	687b      	ldr	r3, [r7, #4]
 801c55c:	68ba      	ldr	r2, [r7, #8]
 801c55e:	69b9      	ldr	r1, [r7, #24]
 801c560:	68f8      	ldr	r0, [r7, #12]
 801c562:	f001 fb75 	bl	801dc50 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801c566:	69b8      	ldr	r0, [r7, #24]
 801c568:	f7f8 f834 	bl	80145d4 <pbuf_free>
  p = NULL;
 801c56c:	2300      	movs	r3, #0
 801c56e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801c570:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801c574:	4618      	mov	r0, r3
 801c576:	3720      	adds	r7, #32
 801c578:	46bd      	mov	sp, r7
 801c57a:	bd80      	pop	{r7, pc}
 801c57c:	08026564 	.word	0x08026564
 801c580:	080266b4 	.word	0x080266b4
 801c584:	080265dc 	.word	0x080265dc
 801c588:	08026764 	.word	0x08026764
 801c58c:	08026798 	.word	0x08026798

0801c590 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801c590:	b580      	push	{r7, lr}
 801c592:	b088      	sub	sp, #32
 801c594:	af04      	add	r7, sp, #16
 801c596:	60f8      	str	r0, [r7, #12]
 801c598:	60b9      	str	r1, [r7, #8]
 801c59a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801c59c:	68fb      	ldr	r3, [r7, #12]
 801c59e:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801c5a2:	68fb      	ldr	r3, [r7, #12]
 801c5a4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801c5a8:	68fb      	ldr	r3, [r7, #12]
 801c5aa:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801c5ac:	2201      	movs	r2, #1
 801c5ae:	9203      	str	r2, [sp, #12]
 801c5b0:	68ba      	ldr	r2, [r7, #8]
 801c5b2:	9202      	str	r2, [sp, #8]
 801c5b4:	4a06      	ldr	r2, [pc, #24]	; (801c5d0 <etharp_request_dst+0x40>)
 801c5b6:	9201      	str	r2, [sp, #4]
 801c5b8:	9300      	str	r3, [sp, #0]
 801c5ba:	4603      	mov	r3, r0
 801c5bc:	687a      	ldr	r2, [r7, #4]
 801c5be:	68f8      	ldr	r0, [r7, #12]
 801c5c0:	f7ff ff5a 	bl	801c478 <etharp_raw>
 801c5c4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801c5c6:	4618      	mov	r0, r3
 801c5c8:	3710      	adds	r7, #16
 801c5ca:	46bd      	mov	sp, r7
 801c5cc:	bd80      	pop	{r7, pc}
 801c5ce:	bf00      	nop
 801c5d0:	08026f2c 	.word	0x08026f2c

0801c5d4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801c5d4:	b580      	push	{r7, lr}
 801c5d6:	b082      	sub	sp, #8
 801c5d8:	af00      	add	r7, sp, #0
 801c5da:	6078      	str	r0, [r7, #4]
 801c5dc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801c5de:	4a05      	ldr	r2, [pc, #20]	; (801c5f4 <etharp_request+0x20>)
 801c5e0:	6839      	ldr	r1, [r7, #0]
 801c5e2:	6878      	ldr	r0, [r7, #4]
 801c5e4:	f7ff ffd4 	bl	801c590 <etharp_request_dst>
 801c5e8:	4603      	mov	r3, r0
}
 801c5ea:	4618      	mov	r0, r3
 801c5ec:	3708      	adds	r7, #8
 801c5ee:	46bd      	mov	sp, r7
 801c5f0:	bd80      	pop	{r7, pc}
 801c5f2:	bf00      	nop
 801c5f4:	08026f24 	.word	0x08026f24

0801c5f8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801c5f8:	b580      	push	{r7, lr}
 801c5fa:	b08e      	sub	sp, #56	; 0x38
 801c5fc:	af04      	add	r7, sp, #16
 801c5fe:	6078      	str	r0, [r7, #4]
 801c600:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801c602:	4b79      	ldr	r3, [pc, #484]	; (801c7e8 <icmp_input+0x1f0>)
 801c604:	689b      	ldr	r3, [r3, #8]
 801c606:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801c608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c60a:	781b      	ldrb	r3, [r3, #0]
 801c60c:	f003 030f 	and.w	r3, r3, #15
 801c610:	b2db      	uxtb	r3, r3
 801c612:	009b      	lsls	r3, r3, #2
 801c614:	b2db      	uxtb	r3, r3
 801c616:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801c618:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c61a:	2b13      	cmp	r3, #19
 801c61c:	f240 80cd 	bls.w	801c7ba <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801c620:	687b      	ldr	r3, [r7, #4]
 801c622:	895b      	ldrh	r3, [r3, #10]
 801c624:	2b03      	cmp	r3, #3
 801c626:	f240 80ca 	bls.w	801c7be <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801c62a:	687b      	ldr	r3, [r7, #4]
 801c62c:	685b      	ldr	r3, [r3, #4]
 801c62e:	781b      	ldrb	r3, [r3, #0]
 801c630:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801c634:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801c638:	2b00      	cmp	r3, #0
 801c63a:	f000 80b7 	beq.w	801c7ac <icmp_input+0x1b4>
 801c63e:	2b08      	cmp	r3, #8
 801c640:	f040 80b7 	bne.w	801c7b2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801c644:	4b69      	ldr	r3, [pc, #420]	; (801c7ec <icmp_input+0x1f4>)
 801c646:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801c648:	4b67      	ldr	r3, [pc, #412]	; (801c7e8 <icmp_input+0x1f0>)
 801c64a:	695b      	ldr	r3, [r3, #20]
 801c64c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801c650:	2be0      	cmp	r3, #224	; 0xe0
 801c652:	f000 80bb 	beq.w	801c7cc <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801c656:	4b64      	ldr	r3, [pc, #400]	; (801c7e8 <icmp_input+0x1f0>)
 801c658:	695b      	ldr	r3, [r3, #20]
 801c65a:	4a63      	ldr	r2, [pc, #396]	; (801c7e8 <icmp_input+0x1f0>)
 801c65c:	6812      	ldr	r2, [r2, #0]
 801c65e:	4611      	mov	r1, r2
 801c660:	4618      	mov	r0, r3
 801c662:	f000 fbed 	bl	801ce40 <ip4_addr_isbroadcast_u32>
 801c666:	4603      	mov	r3, r0
 801c668:	2b00      	cmp	r3, #0
 801c66a:	f040 80b1 	bne.w	801c7d0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801c66e:	687b      	ldr	r3, [r7, #4]
 801c670:	891b      	ldrh	r3, [r3, #8]
 801c672:	2b07      	cmp	r3, #7
 801c674:	f240 80a5 	bls.w	801c7c2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801c678:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c67a:	330e      	adds	r3, #14
 801c67c:	4619      	mov	r1, r3
 801c67e:	6878      	ldr	r0, [r7, #4]
 801c680:	f7f7 ff12 	bl	80144a8 <pbuf_add_header>
 801c684:	4603      	mov	r3, r0
 801c686:	2b00      	cmp	r3, #0
 801c688:	d04b      	beq.n	801c722 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801c68a:	687b      	ldr	r3, [r7, #4]
 801c68c:	891a      	ldrh	r2, [r3, #8]
 801c68e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c690:	4413      	add	r3, r2
 801c692:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801c694:	687b      	ldr	r3, [r7, #4]
 801c696:	891b      	ldrh	r3, [r3, #8]
 801c698:	8b7a      	ldrh	r2, [r7, #26]
 801c69a:	429a      	cmp	r2, r3
 801c69c:	f0c0 809a 	bcc.w	801c7d4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801c6a0:	8b7b      	ldrh	r3, [r7, #26]
 801c6a2:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c6a6:	4619      	mov	r1, r3
 801c6a8:	200e      	movs	r0, #14
 801c6aa:	f7f7 fcaf 	bl	801400c <pbuf_alloc>
 801c6ae:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801c6b0:	697b      	ldr	r3, [r7, #20]
 801c6b2:	2b00      	cmp	r3, #0
 801c6b4:	f000 8090 	beq.w	801c7d8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801c6b8:	697b      	ldr	r3, [r7, #20]
 801c6ba:	895b      	ldrh	r3, [r3, #10]
 801c6bc:	461a      	mov	r2, r3
 801c6be:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c6c0:	3308      	adds	r3, #8
 801c6c2:	429a      	cmp	r2, r3
 801c6c4:	d203      	bcs.n	801c6ce <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801c6c6:	6978      	ldr	r0, [r7, #20]
 801c6c8:	f7f7 ff84 	bl	80145d4 <pbuf_free>
          goto icmperr;
 801c6cc:	e085      	b.n	801c7da <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801c6ce:	697b      	ldr	r3, [r7, #20]
 801c6d0:	685b      	ldr	r3, [r3, #4]
 801c6d2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801c6d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c6d6:	4618      	mov	r0, r3
 801c6d8:	f001 fe14 	bl	801e304 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801c6dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c6de:	4619      	mov	r1, r3
 801c6e0:	6978      	ldr	r0, [r7, #20]
 801c6e2:	f7f7 fef1 	bl	80144c8 <pbuf_remove_header>
 801c6e6:	4603      	mov	r3, r0
 801c6e8:	2b00      	cmp	r3, #0
 801c6ea:	d009      	beq.n	801c700 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801c6ec:	4b40      	ldr	r3, [pc, #256]	; (801c7f0 <icmp_input+0x1f8>)
 801c6ee:	22b6      	movs	r2, #182	; 0xb6
 801c6f0:	4940      	ldr	r1, [pc, #256]	; (801c7f4 <icmp_input+0x1fc>)
 801c6f2:	4841      	ldr	r0, [pc, #260]	; (801c7f8 <icmp_input+0x200>)
 801c6f4:	f002 fd5a 	bl	801f1ac <iprintf>
          pbuf_free(r);
 801c6f8:	6978      	ldr	r0, [r7, #20]
 801c6fa:	f7f7 ff6b 	bl	80145d4 <pbuf_free>
          goto icmperr;
 801c6fe:	e06c      	b.n	801c7da <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801c700:	6879      	ldr	r1, [r7, #4]
 801c702:	6978      	ldr	r0, [r7, #20]
 801c704:	f7f8 f89a 	bl	801483c <pbuf_copy>
 801c708:	4603      	mov	r3, r0
 801c70a:	2b00      	cmp	r3, #0
 801c70c:	d003      	beq.n	801c716 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801c70e:	6978      	ldr	r0, [r7, #20]
 801c710:	f7f7 ff60 	bl	80145d4 <pbuf_free>
          goto icmperr;
 801c714:	e061      	b.n	801c7da <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801c716:	6878      	ldr	r0, [r7, #4]
 801c718:	f7f7 ff5c 	bl	80145d4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801c71c:	697b      	ldr	r3, [r7, #20]
 801c71e:	607b      	str	r3, [r7, #4]
 801c720:	e00f      	b.n	801c742 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801c722:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c724:	330e      	adds	r3, #14
 801c726:	4619      	mov	r1, r3
 801c728:	6878      	ldr	r0, [r7, #4]
 801c72a:	f7f7 fecd 	bl	80144c8 <pbuf_remove_header>
 801c72e:	4603      	mov	r3, r0
 801c730:	2b00      	cmp	r3, #0
 801c732:	d006      	beq.n	801c742 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801c734:	4b2e      	ldr	r3, [pc, #184]	; (801c7f0 <icmp_input+0x1f8>)
 801c736:	22c7      	movs	r2, #199	; 0xc7
 801c738:	4930      	ldr	r1, [pc, #192]	; (801c7fc <icmp_input+0x204>)
 801c73a:	482f      	ldr	r0, [pc, #188]	; (801c7f8 <icmp_input+0x200>)
 801c73c:	f002 fd36 	bl	801f1ac <iprintf>
          goto icmperr;
 801c740:	e04b      	b.n	801c7da <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801c742:	687b      	ldr	r3, [r7, #4]
 801c744:	685b      	ldr	r3, [r3, #4]
 801c746:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801c748:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801c74a:	4619      	mov	r1, r3
 801c74c:	6878      	ldr	r0, [r7, #4]
 801c74e:	f7f7 feab 	bl	80144a8 <pbuf_add_header>
 801c752:	4603      	mov	r3, r0
 801c754:	2b00      	cmp	r3, #0
 801c756:	d12b      	bne.n	801c7b0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801c758:	687b      	ldr	r3, [r7, #4]
 801c75a:	685b      	ldr	r3, [r3, #4]
 801c75c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801c75e:	69fb      	ldr	r3, [r7, #28]
 801c760:	681a      	ldr	r2, [r3, #0]
 801c762:	68fb      	ldr	r3, [r7, #12]
 801c764:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801c766:	4b20      	ldr	r3, [pc, #128]	; (801c7e8 <icmp_input+0x1f0>)
 801c768:	691a      	ldr	r2, [r3, #16]
 801c76a:	68fb      	ldr	r3, [r7, #12]
 801c76c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801c76e:	693b      	ldr	r3, [r7, #16]
 801c770:	2200      	movs	r2, #0
 801c772:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801c774:	693b      	ldr	r3, [r7, #16]
 801c776:	2200      	movs	r2, #0
 801c778:	709a      	strb	r2, [r3, #2]
 801c77a:	2200      	movs	r2, #0
 801c77c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801c77e:	68fb      	ldr	r3, [r7, #12]
 801c780:	22ff      	movs	r2, #255	; 0xff
 801c782:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801c784:	68fb      	ldr	r3, [r7, #12]
 801c786:	2200      	movs	r2, #0
 801c788:	729a      	strb	r2, [r3, #10]
 801c78a:	2200      	movs	r2, #0
 801c78c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801c78e:	683b      	ldr	r3, [r7, #0]
 801c790:	9302      	str	r3, [sp, #8]
 801c792:	2301      	movs	r3, #1
 801c794:	9301      	str	r3, [sp, #4]
 801c796:	2300      	movs	r3, #0
 801c798:	9300      	str	r3, [sp, #0]
 801c79a:	23ff      	movs	r3, #255	; 0xff
 801c79c:	2200      	movs	r2, #0
 801c79e:	69f9      	ldr	r1, [r7, #28]
 801c7a0:	6878      	ldr	r0, [r7, #4]
 801c7a2:	f000 fa75 	bl	801cc90 <ip4_output_if>
 801c7a6:	4603      	mov	r3, r0
 801c7a8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801c7aa:	e001      	b.n	801c7b0 <icmp_input+0x1b8>
      break;
 801c7ac:	bf00      	nop
 801c7ae:	e000      	b.n	801c7b2 <icmp_input+0x1ba>
      break;
 801c7b0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801c7b2:	6878      	ldr	r0, [r7, #4]
 801c7b4:	f7f7 ff0e 	bl	80145d4 <pbuf_free>
  return;
 801c7b8:	e013      	b.n	801c7e2 <icmp_input+0x1ea>
    goto lenerr;
 801c7ba:	bf00      	nop
 801c7bc:	e002      	b.n	801c7c4 <icmp_input+0x1cc>
    goto lenerr;
 801c7be:	bf00      	nop
 801c7c0:	e000      	b.n	801c7c4 <icmp_input+0x1cc>
        goto lenerr;
 801c7c2:	bf00      	nop
lenerr:
  pbuf_free(p);
 801c7c4:	6878      	ldr	r0, [r7, #4]
 801c7c6:	f7f7 ff05 	bl	80145d4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801c7ca:	e00a      	b.n	801c7e2 <icmp_input+0x1ea>
        goto icmperr;
 801c7cc:	bf00      	nop
 801c7ce:	e004      	b.n	801c7da <icmp_input+0x1e2>
        goto icmperr;
 801c7d0:	bf00      	nop
 801c7d2:	e002      	b.n	801c7da <icmp_input+0x1e2>
          goto icmperr;
 801c7d4:	bf00      	nop
 801c7d6:	e000      	b.n	801c7da <icmp_input+0x1e2>
          goto icmperr;
 801c7d8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801c7da:	6878      	ldr	r0, [r7, #4]
 801c7dc:	f7f7 fefa 	bl	80145d4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801c7e0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801c7e2:	3728      	adds	r7, #40	; 0x28
 801c7e4:	46bd      	mov	sp, r7
 801c7e6:	bd80      	pop	{r7, pc}
 801c7e8:	2000aa5c 	.word	0x2000aa5c
 801c7ec:	2000aa70 	.word	0x2000aa70
 801c7f0:	080267dc 	.word	0x080267dc
 801c7f4:	08026814 	.word	0x08026814
 801c7f8:	0802684c 	.word	0x0802684c
 801c7fc:	08026874 	.word	0x08026874

0801c800 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801c800:	b580      	push	{r7, lr}
 801c802:	b082      	sub	sp, #8
 801c804:	af00      	add	r7, sp, #0
 801c806:	6078      	str	r0, [r7, #4]
 801c808:	460b      	mov	r3, r1
 801c80a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801c80c:	78fb      	ldrb	r3, [r7, #3]
 801c80e:	461a      	mov	r2, r3
 801c810:	2103      	movs	r1, #3
 801c812:	6878      	ldr	r0, [r7, #4]
 801c814:	f000 f814 	bl	801c840 <icmp_send_response>
}
 801c818:	bf00      	nop
 801c81a:	3708      	adds	r7, #8
 801c81c:	46bd      	mov	sp, r7
 801c81e:	bd80      	pop	{r7, pc}

0801c820 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801c820:	b580      	push	{r7, lr}
 801c822:	b082      	sub	sp, #8
 801c824:	af00      	add	r7, sp, #0
 801c826:	6078      	str	r0, [r7, #4]
 801c828:	460b      	mov	r3, r1
 801c82a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801c82c:	78fb      	ldrb	r3, [r7, #3]
 801c82e:	461a      	mov	r2, r3
 801c830:	210b      	movs	r1, #11
 801c832:	6878      	ldr	r0, [r7, #4]
 801c834:	f000 f804 	bl	801c840 <icmp_send_response>
}
 801c838:	bf00      	nop
 801c83a:	3708      	adds	r7, #8
 801c83c:	46bd      	mov	sp, r7
 801c83e:	bd80      	pop	{r7, pc}

0801c840 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801c840:	b580      	push	{r7, lr}
 801c842:	b08c      	sub	sp, #48	; 0x30
 801c844:	af04      	add	r7, sp, #16
 801c846:	6078      	str	r0, [r7, #4]
 801c848:	460b      	mov	r3, r1
 801c84a:	70fb      	strb	r3, [r7, #3]
 801c84c:	4613      	mov	r3, r2
 801c84e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801c850:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c854:	2124      	movs	r1, #36	; 0x24
 801c856:	2022      	movs	r0, #34	; 0x22
 801c858:	f7f7 fbd8 	bl	801400c <pbuf_alloc>
 801c85c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801c85e:	69fb      	ldr	r3, [r7, #28]
 801c860:	2b00      	cmp	r3, #0
 801c862:	d04c      	beq.n	801c8fe <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801c864:	69fb      	ldr	r3, [r7, #28]
 801c866:	895b      	ldrh	r3, [r3, #10]
 801c868:	2b23      	cmp	r3, #35	; 0x23
 801c86a:	d806      	bhi.n	801c87a <icmp_send_response+0x3a>
 801c86c:	4b26      	ldr	r3, [pc, #152]	; (801c908 <icmp_send_response+0xc8>)
 801c86e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801c872:	4926      	ldr	r1, [pc, #152]	; (801c90c <icmp_send_response+0xcc>)
 801c874:	4826      	ldr	r0, [pc, #152]	; (801c910 <icmp_send_response+0xd0>)
 801c876:	f002 fc99 	bl	801f1ac <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801c87a:	687b      	ldr	r3, [r7, #4]
 801c87c:	685b      	ldr	r3, [r3, #4]
 801c87e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801c880:	69fb      	ldr	r3, [r7, #28]
 801c882:	685b      	ldr	r3, [r3, #4]
 801c884:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801c886:	697b      	ldr	r3, [r7, #20]
 801c888:	78fa      	ldrb	r2, [r7, #3]
 801c88a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801c88c:	697b      	ldr	r3, [r7, #20]
 801c88e:	78ba      	ldrb	r2, [r7, #2]
 801c890:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801c892:	697b      	ldr	r3, [r7, #20]
 801c894:	2200      	movs	r2, #0
 801c896:	711a      	strb	r2, [r3, #4]
 801c898:	2200      	movs	r2, #0
 801c89a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801c89c:	697b      	ldr	r3, [r7, #20]
 801c89e:	2200      	movs	r2, #0
 801c8a0:	719a      	strb	r2, [r3, #6]
 801c8a2:	2200      	movs	r2, #0
 801c8a4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801c8a6:	69fb      	ldr	r3, [r7, #28]
 801c8a8:	685b      	ldr	r3, [r3, #4]
 801c8aa:	f103 0008 	add.w	r0, r3, #8
 801c8ae:	687b      	ldr	r3, [r7, #4]
 801c8b0:	685b      	ldr	r3, [r3, #4]
 801c8b2:	221c      	movs	r2, #28
 801c8b4:	4619      	mov	r1, r3
 801c8b6:	f001 fd25 	bl	801e304 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801c8ba:	69bb      	ldr	r3, [r7, #24]
 801c8bc:	68db      	ldr	r3, [r3, #12]
 801c8be:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801c8c0:	f107 030c 	add.w	r3, r7, #12
 801c8c4:	4618      	mov	r0, r3
 801c8c6:	f000 f825 	bl	801c914 <ip4_route>
 801c8ca:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801c8cc:	693b      	ldr	r3, [r7, #16]
 801c8ce:	2b00      	cmp	r3, #0
 801c8d0:	d011      	beq.n	801c8f6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801c8d2:	697b      	ldr	r3, [r7, #20]
 801c8d4:	2200      	movs	r2, #0
 801c8d6:	709a      	strb	r2, [r3, #2]
 801c8d8:	2200      	movs	r2, #0
 801c8da:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801c8dc:	f107 020c 	add.w	r2, r7, #12
 801c8e0:	693b      	ldr	r3, [r7, #16]
 801c8e2:	9302      	str	r3, [sp, #8]
 801c8e4:	2301      	movs	r3, #1
 801c8e6:	9301      	str	r3, [sp, #4]
 801c8e8:	2300      	movs	r3, #0
 801c8ea:	9300      	str	r3, [sp, #0]
 801c8ec:	23ff      	movs	r3, #255	; 0xff
 801c8ee:	2100      	movs	r1, #0
 801c8f0:	69f8      	ldr	r0, [r7, #28]
 801c8f2:	f000 f9cd 	bl	801cc90 <ip4_output_if>
  }
  pbuf_free(q);
 801c8f6:	69f8      	ldr	r0, [r7, #28]
 801c8f8:	f7f7 fe6c 	bl	80145d4 <pbuf_free>
 801c8fc:	e000      	b.n	801c900 <icmp_send_response+0xc0>
    return;
 801c8fe:	bf00      	nop
}
 801c900:	3720      	adds	r7, #32
 801c902:	46bd      	mov	sp, r7
 801c904:	bd80      	pop	{r7, pc}
 801c906:	bf00      	nop
 801c908:	080267dc 	.word	0x080267dc
 801c90c:	080268a8 	.word	0x080268a8
 801c910:	0802684c 	.word	0x0802684c

0801c914 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801c914:	b480      	push	{r7}
 801c916:	b085      	sub	sp, #20
 801c918:	af00      	add	r7, sp, #0
 801c91a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801c91c:	4b33      	ldr	r3, [pc, #204]	; (801c9ec <ip4_route+0xd8>)
 801c91e:	681b      	ldr	r3, [r3, #0]
 801c920:	60fb      	str	r3, [r7, #12]
 801c922:	e036      	b.n	801c992 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801c924:	68fb      	ldr	r3, [r7, #12]
 801c926:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801c92a:	f003 0301 	and.w	r3, r3, #1
 801c92e:	b2db      	uxtb	r3, r3
 801c930:	2b00      	cmp	r3, #0
 801c932:	d02b      	beq.n	801c98c <ip4_route+0x78>
 801c934:	68fb      	ldr	r3, [r7, #12]
 801c936:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801c93a:	089b      	lsrs	r3, r3, #2
 801c93c:	f003 0301 	and.w	r3, r3, #1
 801c940:	b2db      	uxtb	r3, r3
 801c942:	2b00      	cmp	r3, #0
 801c944:	d022      	beq.n	801c98c <ip4_route+0x78>
 801c946:	68fb      	ldr	r3, [r7, #12]
 801c948:	3304      	adds	r3, #4
 801c94a:	681b      	ldr	r3, [r3, #0]
 801c94c:	2b00      	cmp	r3, #0
 801c94e:	d01d      	beq.n	801c98c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801c950:	687b      	ldr	r3, [r7, #4]
 801c952:	681a      	ldr	r2, [r3, #0]
 801c954:	68fb      	ldr	r3, [r7, #12]
 801c956:	3304      	adds	r3, #4
 801c958:	681b      	ldr	r3, [r3, #0]
 801c95a:	405a      	eors	r2, r3
 801c95c:	68fb      	ldr	r3, [r7, #12]
 801c95e:	3308      	adds	r3, #8
 801c960:	681b      	ldr	r3, [r3, #0]
 801c962:	4013      	ands	r3, r2
 801c964:	2b00      	cmp	r3, #0
 801c966:	d101      	bne.n	801c96c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801c968:	68fb      	ldr	r3, [r7, #12]
 801c96a:	e038      	b.n	801c9de <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801c96c:	68fb      	ldr	r3, [r7, #12]
 801c96e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801c972:	f003 0302 	and.w	r3, r3, #2
 801c976:	2b00      	cmp	r3, #0
 801c978:	d108      	bne.n	801c98c <ip4_route+0x78>
 801c97a:	687b      	ldr	r3, [r7, #4]
 801c97c:	681a      	ldr	r2, [r3, #0]
 801c97e:	68fb      	ldr	r3, [r7, #12]
 801c980:	330c      	adds	r3, #12
 801c982:	681b      	ldr	r3, [r3, #0]
 801c984:	429a      	cmp	r2, r3
 801c986:	d101      	bne.n	801c98c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801c988:	68fb      	ldr	r3, [r7, #12]
 801c98a:	e028      	b.n	801c9de <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801c98c:	68fb      	ldr	r3, [r7, #12]
 801c98e:	681b      	ldr	r3, [r3, #0]
 801c990:	60fb      	str	r3, [r7, #12]
 801c992:	68fb      	ldr	r3, [r7, #12]
 801c994:	2b00      	cmp	r3, #0
 801c996:	d1c5      	bne.n	801c924 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801c998:	4b15      	ldr	r3, [pc, #84]	; (801c9f0 <ip4_route+0xdc>)
 801c99a:	681b      	ldr	r3, [r3, #0]
 801c99c:	2b00      	cmp	r3, #0
 801c99e:	d01a      	beq.n	801c9d6 <ip4_route+0xc2>
 801c9a0:	4b13      	ldr	r3, [pc, #76]	; (801c9f0 <ip4_route+0xdc>)
 801c9a2:	681b      	ldr	r3, [r3, #0]
 801c9a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801c9a8:	f003 0301 	and.w	r3, r3, #1
 801c9ac:	2b00      	cmp	r3, #0
 801c9ae:	d012      	beq.n	801c9d6 <ip4_route+0xc2>
 801c9b0:	4b0f      	ldr	r3, [pc, #60]	; (801c9f0 <ip4_route+0xdc>)
 801c9b2:	681b      	ldr	r3, [r3, #0]
 801c9b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801c9b8:	f003 0304 	and.w	r3, r3, #4
 801c9bc:	2b00      	cmp	r3, #0
 801c9be:	d00a      	beq.n	801c9d6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801c9c0:	4b0b      	ldr	r3, [pc, #44]	; (801c9f0 <ip4_route+0xdc>)
 801c9c2:	681b      	ldr	r3, [r3, #0]
 801c9c4:	3304      	adds	r3, #4
 801c9c6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801c9c8:	2b00      	cmp	r3, #0
 801c9ca:	d004      	beq.n	801c9d6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801c9cc:	687b      	ldr	r3, [r7, #4]
 801c9ce:	681b      	ldr	r3, [r3, #0]
 801c9d0:	b2db      	uxtb	r3, r3
 801c9d2:	2b7f      	cmp	r3, #127	; 0x7f
 801c9d4:	d101      	bne.n	801c9da <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801c9d6:	2300      	movs	r3, #0
 801c9d8:	e001      	b.n	801c9de <ip4_route+0xca>
  }

  return netif_default;
 801c9da:	4b05      	ldr	r3, [pc, #20]	; (801c9f0 <ip4_route+0xdc>)
 801c9dc:	681b      	ldr	r3, [r3, #0]
}
 801c9de:	4618      	mov	r0, r3
 801c9e0:	3714      	adds	r7, #20
 801c9e2:	46bd      	mov	sp, r7
 801c9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9e8:	4770      	bx	lr
 801c9ea:	bf00      	nop
 801c9ec:	2000e160 	.word	0x2000e160
 801c9f0:	2000e164 	.word	0x2000e164

0801c9f4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801c9f4:	b580      	push	{r7, lr}
 801c9f6:	b082      	sub	sp, #8
 801c9f8:	af00      	add	r7, sp, #0
 801c9fa:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801c9fc:	687b      	ldr	r3, [r7, #4]
 801c9fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ca02:	f003 0301 	and.w	r3, r3, #1
 801ca06:	b2db      	uxtb	r3, r3
 801ca08:	2b00      	cmp	r3, #0
 801ca0a:	d016      	beq.n	801ca3a <ip4_input_accept+0x46>
 801ca0c:	687b      	ldr	r3, [r7, #4]
 801ca0e:	3304      	adds	r3, #4
 801ca10:	681b      	ldr	r3, [r3, #0]
 801ca12:	2b00      	cmp	r3, #0
 801ca14:	d011      	beq.n	801ca3a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801ca16:	4b0b      	ldr	r3, [pc, #44]	; (801ca44 <ip4_input_accept+0x50>)
 801ca18:	695a      	ldr	r2, [r3, #20]
 801ca1a:	687b      	ldr	r3, [r7, #4]
 801ca1c:	3304      	adds	r3, #4
 801ca1e:	681b      	ldr	r3, [r3, #0]
 801ca20:	429a      	cmp	r2, r3
 801ca22:	d008      	beq.n	801ca36 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801ca24:	4b07      	ldr	r3, [pc, #28]	; (801ca44 <ip4_input_accept+0x50>)
 801ca26:	695b      	ldr	r3, [r3, #20]
 801ca28:	6879      	ldr	r1, [r7, #4]
 801ca2a:	4618      	mov	r0, r3
 801ca2c:	f000 fa08 	bl	801ce40 <ip4_addr_isbroadcast_u32>
 801ca30:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801ca32:	2b00      	cmp	r3, #0
 801ca34:	d001      	beq.n	801ca3a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801ca36:	2301      	movs	r3, #1
 801ca38:	e000      	b.n	801ca3c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801ca3a:	2300      	movs	r3, #0
}
 801ca3c:	4618      	mov	r0, r3
 801ca3e:	3708      	adds	r7, #8
 801ca40:	46bd      	mov	sp, r7
 801ca42:	bd80      	pop	{r7, pc}
 801ca44:	2000aa5c 	.word	0x2000aa5c

0801ca48 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801ca48:	b580      	push	{r7, lr}
 801ca4a:	b086      	sub	sp, #24
 801ca4c:	af00      	add	r7, sp, #0
 801ca4e:	6078      	str	r0, [r7, #4]
 801ca50:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801ca52:	687b      	ldr	r3, [r7, #4]
 801ca54:	685b      	ldr	r3, [r3, #4]
 801ca56:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801ca58:	697b      	ldr	r3, [r7, #20]
 801ca5a:	781b      	ldrb	r3, [r3, #0]
 801ca5c:	091b      	lsrs	r3, r3, #4
 801ca5e:	b2db      	uxtb	r3, r3
 801ca60:	2b04      	cmp	r3, #4
 801ca62:	d004      	beq.n	801ca6e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801ca64:	6878      	ldr	r0, [r7, #4]
 801ca66:	f7f7 fdb5 	bl	80145d4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801ca6a:	2300      	movs	r3, #0
 801ca6c:	e107      	b.n	801cc7e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801ca6e:	697b      	ldr	r3, [r7, #20]
 801ca70:	781b      	ldrb	r3, [r3, #0]
 801ca72:	f003 030f 	and.w	r3, r3, #15
 801ca76:	b2db      	uxtb	r3, r3
 801ca78:	009b      	lsls	r3, r3, #2
 801ca7a:	b2db      	uxtb	r3, r3
 801ca7c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801ca7e:	697b      	ldr	r3, [r7, #20]
 801ca80:	885b      	ldrh	r3, [r3, #2]
 801ca82:	b29b      	uxth	r3, r3
 801ca84:	4618      	mov	r0, r3
 801ca86:	f7f6 fa5d 	bl	8012f44 <lwip_htons>
 801ca8a:	4603      	mov	r3, r0
 801ca8c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801ca8e:	687b      	ldr	r3, [r7, #4]
 801ca90:	891b      	ldrh	r3, [r3, #8]
 801ca92:	89ba      	ldrh	r2, [r7, #12]
 801ca94:	429a      	cmp	r2, r3
 801ca96:	d204      	bcs.n	801caa2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801ca98:	89bb      	ldrh	r3, [r7, #12]
 801ca9a:	4619      	mov	r1, r3
 801ca9c:	6878      	ldr	r0, [r7, #4]
 801ca9e:	f7f7 fc13 	bl	80142c8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801caa2:	687b      	ldr	r3, [r7, #4]
 801caa4:	895b      	ldrh	r3, [r3, #10]
 801caa6:	89fa      	ldrh	r2, [r7, #14]
 801caa8:	429a      	cmp	r2, r3
 801caaa:	d807      	bhi.n	801cabc <ip4_input+0x74>
 801caac:	687b      	ldr	r3, [r7, #4]
 801caae:	891b      	ldrh	r3, [r3, #8]
 801cab0:	89ba      	ldrh	r2, [r7, #12]
 801cab2:	429a      	cmp	r2, r3
 801cab4:	d802      	bhi.n	801cabc <ip4_input+0x74>
 801cab6:	89fb      	ldrh	r3, [r7, #14]
 801cab8:	2b13      	cmp	r3, #19
 801caba:	d804      	bhi.n	801cac6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801cabc:	6878      	ldr	r0, [r7, #4]
 801cabe:	f7f7 fd89 	bl	80145d4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801cac2:	2300      	movs	r3, #0
 801cac4:	e0db      	b.n	801cc7e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801cac6:	697b      	ldr	r3, [r7, #20]
 801cac8:	691b      	ldr	r3, [r3, #16]
 801caca:	4a6f      	ldr	r2, [pc, #444]	; (801cc88 <ip4_input+0x240>)
 801cacc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801cace:	697b      	ldr	r3, [r7, #20]
 801cad0:	68db      	ldr	r3, [r3, #12]
 801cad2:	4a6d      	ldr	r2, [pc, #436]	; (801cc88 <ip4_input+0x240>)
 801cad4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801cad6:	4b6c      	ldr	r3, [pc, #432]	; (801cc88 <ip4_input+0x240>)
 801cad8:	695b      	ldr	r3, [r3, #20]
 801cada:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801cade:	2be0      	cmp	r3, #224	; 0xe0
 801cae0:	d112      	bne.n	801cb08 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801cae2:	683b      	ldr	r3, [r7, #0]
 801cae4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801cae8:	f003 0301 	and.w	r3, r3, #1
 801caec:	b2db      	uxtb	r3, r3
 801caee:	2b00      	cmp	r3, #0
 801caf0:	d007      	beq.n	801cb02 <ip4_input+0xba>
 801caf2:	683b      	ldr	r3, [r7, #0]
 801caf4:	3304      	adds	r3, #4
 801caf6:	681b      	ldr	r3, [r3, #0]
 801caf8:	2b00      	cmp	r3, #0
 801cafa:	d002      	beq.n	801cb02 <ip4_input+0xba>
      netif = inp;
 801cafc:	683b      	ldr	r3, [r7, #0]
 801cafe:	613b      	str	r3, [r7, #16]
 801cb00:	e02a      	b.n	801cb58 <ip4_input+0x110>
    } else {
      netif = NULL;
 801cb02:	2300      	movs	r3, #0
 801cb04:	613b      	str	r3, [r7, #16]
 801cb06:	e027      	b.n	801cb58 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801cb08:	6838      	ldr	r0, [r7, #0]
 801cb0a:	f7ff ff73 	bl	801c9f4 <ip4_input_accept>
 801cb0e:	4603      	mov	r3, r0
 801cb10:	2b00      	cmp	r3, #0
 801cb12:	d002      	beq.n	801cb1a <ip4_input+0xd2>
      netif = inp;
 801cb14:	683b      	ldr	r3, [r7, #0]
 801cb16:	613b      	str	r3, [r7, #16]
 801cb18:	e01e      	b.n	801cb58 <ip4_input+0x110>
    } else {
      netif = NULL;
 801cb1a:	2300      	movs	r3, #0
 801cb1c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801cb1e:	4b5a      	ldr	r3, [pc, #360]	; (801cc88 <ip4_input+0x240>)
 801cb20:	695b      	ldr	r3, [r3, #20]
 801cb22:	b2db      	uxtb	r3, r3
 801cb24:	2b7f      	cmp	r3, #127	; 0x7f
 801cb26:	d017      	beq.n	801cb58 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801cb28:	4b58      	ldr	r3, [pc, #352]	; (801cc8c <ip4_input+0x244>)
 801cb2a:	681b      	ldr	r3, [r3, #0]
 801cb2c:	613b      	str	r3, [r7, #16]
 801cb2e:	e00e      	b.n	801cb4e <ip4_input+0x106>
          if (netif == inp) {
 801cb30:	693a      	ldr	r2, [r7, #16]
 801cb32:	683b      	ldr	r3, [r7, #0]
 801cb34:	429a      	cmp	r2, r3
 801cb36:	d006      	beq.n	801cb46 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801cb38:	6938      	ldr	r0, [r7, #16]
 801cb3a:	f7ff ff5b 	bl	801c9f4 <ip4_input_accept>
 801cb3e:	4603      	mov	r3, r0
 801cb40:	2b00      	cmp	r3, #0
 801cb42:	d108      	bne.n	801cb56 <ip4_input+0x10e>
 801cb44:	e000      	b.n	801cb48 <ip4_input+0x100>
            continue;
 801cb46:	bf00      	nop
        NETIF_FOREACH(netif) {
 801cb48:	693b      	ldr	r3, [r7, #16]
 801cb4a:	681b      	ldr	r3, [r3, #0]
 801cb4c:	613b      	str	r3, [r7, #16]
 801cb4e:	693b      	ldr	r3, [r7, #16]
 801cb50:	2b00      	cmp	r3, #0
 801cb52:	d1ed      	bne.n	801cb30 <ip4_input+0xe8>
 801cb54:	e000      	b.n	801cb58 <ip4_input+0x110>
            break;
 801cb56:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801cb58:	4b4b      	ldr	r3, [pc, #300]	; (801cc88 <ip4_input+0x240>)
 801cb5a:	691b      	ldr	r3, [r3, #16]
 801cb5c:	6839      	ldr	r1, [r7, #0]
 801cb5e:	4618      	mov	r0, r3
 801cb60:	f000 f96e 	bl	801ce40 <ip4_addr_isbroadcast_u32>
 801cb64:	4603      	mov	r3, r0
 801cb66:	2b00      	cmp	r3, #0
 801cb68:	d105      	bne.n	801cb76 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801cb6a:	4b47      	ldr	r3, [pc, #284]	; (801cc88 <ip4_input+0x240>)
 801cb6c:	691b      	ldr	r3, [r3, #16]
 801cb6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801cb72:	2be0      	cmp	r3, #224	; 0xe0
 801cb74:	d104      	bne.n	801cb80 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801cb76:	6878      	ldr	r0, [r7, #4]
 801cb78:	f7f7 fd2c 	bl	80145d4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801cb7c:	2300      	movs	r3, #0
 801cb7e:	e07e      	b.n	801cc7e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801cb80:	693b      	ldr	r3, [r7, #16]
 801cb82:	2b00      	cmp	r3, #0
 801cb84:	d104      	bne.n	801cb90 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801cb86:	6878      	ldr	r0, [r7, #4]
 801cb88:	f7f7 fd24 	bl	80145d4 <pbuf_free>
    return ERR_OK;
 801cb8c:	2300      	movs	r3, #0
 801cb8e:	e076      	b.n	801cc7e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801cb90:	697b      	ldr	r3, [r7, #20]
 801cb92:	88db      	ldrh	r3, [r3, #6]
 801cb94:	b29b      	uxth	r3, r3
 801cb96:	461a      	mov	r2, r3
 801cb98:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801cb9c:	4013      	ands	r3, r2
 801cb9e:	2b00      	cmp	r3, #0
 801cba0:	d00b      	beq.n	801cbba <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801cba2:	6878      	ldr	r0, [r7, #4]
 801cba4:	f000 fc92 	bl	801d4cc <ip4_reass>
 801cba8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801cbaa:	687b      	ldr	r3, [r7, #4]
 801cbac:	2b00      	cmp	r3, #0
 801cbae:	d101      	bne.n	801cbb4 <ip4_input+0x16c>
      return ERR_OK;
 801cbb0:	2300      	movs	r3, #0
 801cbb2:	e064      	b.n	801cc7e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801cbb4:	687b      	ldr	r3, [r7, #4]
 801cbb6:	685b      	ldr	r3, [r3, #4]
 801cbb8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801cbba:	4a33      	ldr	r2, [pc, #204]	; (801cc88 <ip4_input+0x240>)
 801cbbc:	693b      	ldr	r3, [r7, #16]
 801cbbe:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801cbc0:	4a31      	ldr	r2, [pc, #196]	; (801cc88 <ip4_input+0x240>)
 801cbc2:	683b      	ldr	r3, [r7, #0]
 801cbc4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801cbc6:	4a30      	ldr	r2, [pc, #192]	; (801cc88 <ip4_input+0x240>)
 801cbc8:	697b      	ldr	r3, [r7, #20]
 801cbca:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801cbcc:	697b      	ldr	r3, [r7, #20]
 801cbce:	781b      	ldrb	r3, [r3, #0]
 801cbd0:	f003 030f 	and.w	r3, r3, #15
 801cbd4:	b2db      	uxtb	r3, r3
 801cbd6:	009b      	lsls	r3, r3, #2
 801cbd8:	b2db      	uxtb	r3, r3
 801cbda:	b29a      	uxth	r2, r3
 801cbdc:	4b2a      	ldr	r3, [pc, #168]	; (801cc88 <ip4_input+0x240>)
 801cbde:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801cbe0:	89fb      	ldrh	r3, [r7, #14]
 801cbe2:	4619      	mov	r1, r3
 801cbe4:	6878      	ldr	r0, [r7, #4]
 801cbe6:	f7f7 fc6f 	bl	80144c8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801cbea:	697b      	ldr	r3, [r7, #20]
 801cbec:	7a5b      	ldrb	r3, [r3, #9]
 801cbee:	2b11      	cmp	r3, #17
 801cbf0:	d006      	beq.n	801cc00 <ip4_input+0x1b8>
 801cbf2:	2b11      	cmp	r3, #17
 801cbf4:	dc13      	bgt.n	801cc1e <ip4_input+0x1d6>
 801cbf6:	2b01      	cmp	r3, #1
 801cbf8:	d00c      	beq.n	801cc14 <ip4_input+0x1cc>
 801cbfa:	2b06      	cmp	r3, #6
 801cbfc:	d005      	beq.n	801cc0a <ip4_input+0x1c2>
 801cbfe:	e00e      	b.n	801cc1e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801cc00:	6839      	ldr	r1, [r7, #0]
 801cc02:	6878      	ldr	r0, [r7, #4]
 801cc04:	f7fe f970 	bl	801aee8 <udp_input>
        break;
 801cc08:	e026      	b.n	801cc58 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801cc0a:	6839      	ldr	r1, [r7, #0]
 801cc0c:	6878      	ldr	r0, [r7, #4]
 801cc0e:	f7f9 fd2d 	bl	801666c <tcp_input>
        break;
 801cc12:	e021      	b.n	801cc58 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801cc14:	6839      	ldr	r1, [r7, #0]
 801cc16:	6878      	ldr	r0, [r7, #4]
 801cc18:	f7ff fcee 	bl	801c5f8 <icmp_input>
        break;
 801cc1c:	e01c      	b.n	801cc58 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801cc1e:	4b1a      	ldr	r3, [pc, #104]	; (801cc88 <ip4_input+0x240>)
 801cc20:	695b      	ldr	r3, [r3, #20]
 801cc22:	6939      	ldr	r1, [r7, #16]
 801cc24:	4618      	mov	r0, r3
 801cc26:	f000 f90b 	bl	801ce40 <ip4_addr_isbroadcast_u32>
 801cc2a:	4603      	mov	r3, r0
 801cc2c:	2b00      	cmp	r3, #0
 801cc2e:	d10f      	bne.n	801cc50 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801cc30:	4b15      	ldr	r3, [pc, #84]	; (801cc88 <ip4_input+0x240>)
 801cc32:	695b      	ldr	r3, [r3, #20]
 801cc34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801cc38:	2be0      	cmp	r3, #224	; 0xe0
 801cc3a:	d009      	beq.n	801cc50 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801cc3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801cc40:	4619      	mov	r1, r3
 801cc42:	6878      	ldr	r0, [r7, #4]
 801cc44:	f7f7 fcb3 	bl	80145ae <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801cc48:	2102      	movs	r1, #2
 801cc4a:	6878      	ldr	r0, [r7, #4]
 801cc4c:	f7ff fdd8 	bl	801c800 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801cc50:	6878      	ldr	r0, [r7, #4]
 801cc52:	f7f7 fcbf 	bl	80145d4 <pbuf_free>
        break;
 801cc56:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801cc58:	4b0b      	ldr	r3, [pc, #44]	; (801cc88 <ip4_input+0x240>)
 801cc5a:	2200      	movs	r2, #0
 801cc5c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801cc5e:	4b0a      	ldr	r3, [pc, #40]	; (801cc88 <ip4_input+0x240>)
 801cc60:	2200      	movs	r2, #0
 801cc62:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801cc64:	4b08      	ldr	r3, [pc, #32]	; (801cc88 <ip4_input+0x240>)
 801cc66:	2200      	movs	r2, #0
 801cc68:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801cc6a:	4b07      	ldr	r3, [pc, #28]	; (801cc88 <ip4_input+0x240>)
 801cc6c:	2200      	movs	r2, #0
 801cc6e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801cc70:	4b05      	ldr	r3, [pc, #20]	; (801cc88 <ip4_input+0x240>)
 801cc72:	2200      	movs	r2, #0
 801cc74:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801cc76:	4b04      	ldr	r3, [pc, #16]	; (801cc88 <ip4_input+0x240>)
 801cc78:	2200      	movs	r2, #0
 801cc7a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801cc7c:	2300      	movs	r3, #0
}
 801cc7e:	4618      	mov	r0, r3
 801cc80:	3718      	adds	r7, #24
 801cc82:	46bd      	mov	sp, r7
 801cc84:	bd80      	pop	{r7, pc}
 801cc86:	bf00      	nop
 801cc88:	2000aa5c 	.word	0x2000aa5c
 801cc8c:	2000e160 	.word	0x2000e160

0801cc90 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801cc90:	b580      	push	{r7, lr}
 801cc92:	b08a      	sub	sp, #40	; 0x28
 801cc94:	af04      	add	r7, sp, #16
 801cc96:	60f8      	str	r0, [r7, #12]
 801cc98:	60b9      	str	r1, [r7, #8]
 801cc9a:	607a      	str	r2, [r7, #4]
 801cc9c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801cc9e:	68bb      	ldr	r3, [r7, #8]
 801cca0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801cca2:	687b      	ldr	r3, [r7, #4]
 801cca4:	2b00      	cmp	r3, #0
 801cca6:	d009      	beq.n	801ccbc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801cca8:	68bb      	ldr	r3, [r7, #8]
 801ccaa:	2b00      	cmp	r3, #0
 801ccac:	d003      	beq.n	801ccb6 <ip4_output_if+0x26>
 801ccae:	68bb      	ldr	r3, [r7, #8]
 801ccb0:	681b      	ldr	r3, [r3, #0]
 801ccb2:	2b00      	cmp	r3, #0
 801ccb4:	d102      	bne.n	801ccbc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801ccb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ccb8:	3304      	adds	r3, #4
 801ccba:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801ccbc:	78fa      	ldrb	r2, [r7, #3]
 801ccbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ccc0:	9302      	str	r3, [sp, #8]
 801ccc2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ccc6:	9301      	str	r3, [sp, #4]
 801ccc8:	f897 3020 	ldrb.w	r3, [r7, #32]
 801cccc:	9300      	str	r3, [sp, #0]
 801ccce:	4613      	mov	r3, r2
 801ccd0:	687a      	ldr	r2, [r7, #4]
 801ccd2:	6979      	ldr	r1, [r7, #20]
 801ccd4:	68f8      	ldr	r0, [r7, #12]
 801ccd6:	f000 f805 	bl	801cce4 <ip4_output_if_src>
 801ccda:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801ccdc:	4618      	mov	r0, r3
 801ccde:	3718      	adds	r7, #24
 801cce0:	46bd      	mov	sp, r7
 801cce2:	bd80      	pop	{r7, pc}

0801cce4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801cce4:	b580      	push	{r7, lr}
 801cce6:	b088      	sub	sp, #32
 801cce8:	af00      	add	r7, sp, #0
 801ccea:	60f8      	str	r0, [r7, #12]
 801ccec:	60b9      	str	r1, [r7, #8]
 801ccee:	607a      	str	r2, [r7, #4]
 801ccf0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801ccf2:	68fb      	ldr	r3, [r7, #12]
 801ccf4:	7b9b      	ldrb	r3, [r3, #14]
 801ccf6:	2b01      	cmp	r3, #1
 801ccf8:	d006      	beq.n	801cd08 <ip4_output_if_src+0x24>
 801ccfa:	4b4b      	ldr	r3, [pc, #300]	; (801ce28 <ip4_output_if_src+0x144>)
 801ccfc:	f44f 7255 	mov.w	r2, #852	; 0x354
 801cd00:	494a      	ldr	r1, [pc, #296]	; (801ce2c <ip4_output_if_src+0x148>)
 801cd02:	484b      	ldr	r0, [pc, #300]	; (801ce30 <ip4_output_if_src+0x14c>)
 801cd04:	f002 fa52 	bl	801f1ac <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801cd08:	687b      	ldr	r3, [r7, #4]
 801cd0a:	2b00      	cmp	r3, #0
 801cd0c:	d060      	beq.n	801cdd0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801cd0e:	2314      	movs	r3, #20
 801cd10:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801cd12:	2114      	movs	r1, #20
 801cd14:	68f8      	ldr	r0, [r7, #12]
 801cd16:	f7f7 fbc7 	bl	80144a8 <pbuf_add_header>
 801cd1a:	4603      	mov	r3, r0
 801cd1c:	2b00      	cmp	r3, #0
 801cd1e:	d002      	beq.n	801cd26 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801cd20:	f06f 0301 	mvn.w	r3, #1
 801cd24:	e07c      	b.n	801ce20 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801cd26:	68fb      	ldr	r3, [r7, #12]
 801cd28:	685b      	ldr	r3, [r3, #4]
 801cd2a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801cd2c:	68fb      	ldr	r3, [r7, #12]
 801cd2e:	895b      	ldrh	r3, [r3, #10]
 801cd30:	2b13      	cmp	r3, #19
 801cd32:	d806      	bhi.n	801cd42 <ip4_output_if_src+0x5e>
 801cd34:	4b3c      	ldr	r3, [pc, #240]	; (801ce28 <ip4_output_if_src+0x144>)
 801cd36:	f44f 7262 	mov.w	r2, #904	; 0x388
 801cd3a:	493e      	ldr	r1, [pc, #248]	; (801ce34 <ip4_output_if_src+0x150>)
 801cd3c:	483c      	ldr	r0, [pc, #240]	; (801ce30 <ip4_output_if_src+0x14c>)
 801cd3e:	f002 fa35 	bl	801f1ac <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801cd42:	69fb      	ldr	r3, [r7, #28]
 801cd44:	78fa      	ldrb	r2, [r7, #3]
 801cd46:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801cd48:	69fb      	ldr	r3, [r7, #28]
 801cd4a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801cd4e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801cd50:	687b      	ldr	r3, [r7, #4]
 801cd52:	681a      	ldr	r2, [r3, #0]
 801cd54:	69fb      	ldr	r3, [r7, #28]
 801cd56:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801cd58:	8b7b      	ldrh	r3, [r7, #26]
 801cd5a:	089b      	lsrs	r3, r3, #2
 801cd5c:	b29b      	uxth	r3, r3
 801cd5e:	b2db      	uxtb	r3, r3
 801cd60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cd64:	b2da      	uxtb	r2, r3
 801cd66:	69fb      	ldr	r3, [r7, #28]
 801cd68:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801cd6a:	69fb      	ldr	r3, [r7, #28]
 801cd6c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801cd70:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801cd72:	68fb      	ldr	r3, [r7, #12]
 801cd74:	891b      	ldrh	r3, [r3, #8]
 801cd76:	4618      	mov	r0, r3
 801cd78:	f7f6 f8e4 	bl	8012f44 <lwip_htons>
 801cd7c:	4603      	mov	r3, r0
 801cd7e:	461a      	mov	r2, r3
 801cd80:	69fb      	ldr	r3, [r7, #28]
 801cd82:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801cd84:	69fb      	ldr	r3, [r7, #28]
 801cd86:	2200      	movs	r2, #0
 801cd88:	719a      	strb	r2, [r3, #6]
 801cd8a:	2200      	movs	r2, #0
 801cd8c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801cd8e:	4b2a      	ldr	r3, [pc, #168]	; (801ce38 <ip4_output_if_src+0x154>)
 801cd90:	881b      	ldrh	r3, [r3, #0]
 801cd92:	4618      	mov	r0, r3
 801cd94:	f7f6 f8d6 	bl	8012f44 <lwip_htons>
 801cd98:	4603      	mov	r3, r0
 801cd9a:	461a      	mov	r2, r3
 801cd9c:	69fb      	ldr	r3, [r7, #28]
 801cd9e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801cda0:	4b25      	ldr	r3, [pc, #148]	; (801ce38 <ip4_output_if_src+0x154>)
 801cda2:	881b      	ldrh	r3, [r3, #0]
 801cda4:	3301      	adds	r3, #1
 801cda6:	b29a      	uxth	r2, r3
 801cda8:	4b23      	ldr	r3, [pc, #140]	; (801ce38 <ip4_output_if_src+0x154>)
 801cdaa:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801cdac:	68bb      	ldr	r3, [r7, #8]
 801cdae:	2b00      	cmp	r3, #0
 801cdb0:	d104      	bne.n	801cdbc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801cdb2:	4b22      	ldr	r3, [pc, #136]	; (801ce3c <ip4_output_if_src+0x158>)
 801cdb4:	681a      	ldr	r2, [r3, #0]
 801cdb6:	69fb      	ldr	r3, [r7, #28]
 801cdb8:	60da      	str	r2, [r3, #12]
 801cdba:	e003      	b.n	801cdc4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801cdbc:	68bb      	ldr	r3, [r7, #8]
 801cdbe:	681a      	ldr	r2, [r3, #0]
 801cdc0:	69fb      	ldr	r3, [r7, #28]
 801cdc2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801cdc4:	69fb      	ldr	r3, [r7, #28]
 801cdc6:	2200      	movs	r2, #0
 801cdc8:	729a      	strb	r2, [r3, #10]
 801cdca:	2200      	movs	r2, #0
 801cdcc:	72da      	strb	r2, [r3, #11]
 801cdce:	e00f      	b.n	801cdf0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801cdd0:	68fb      	ldr	r3, [r7, #12]
 801cdd2:	895b      	ldrh	r3, [r3, #10]
 801cdd4:	2b13      	cmp	r3, #19
 801cdd6:	d802      	bhi.n	801cdde <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801cdd8:	f06f 0301 	mvn.w	r3, #1
 801cddc:	e020      	b.n	801ce20 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801cdde:	68fb      	ldr	r3, [r7, #12]
 801cde0:	685b      	ldr	r3, [r3, #4]
 801cde2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801cde4:	69fb      	ldr	r3, [r7, #28]
 801cde6:	691b      	ldr	r3, [r3, #16]
 801cde8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801cdea:	f107 0314 	add.w	r3, r7, #20
 801cdee:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801cdf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cdf2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801cdf4:	2b00      	cmp	r3, #0
 801cdf6:	d00c      	beq.n	801ce12 <ip4_output_if_src+0x12e>
 801cdf8:	68fb      	ldr	r3, [r7, #12]
 801cdfa:	891a      	ldrh	r2, [r3, #8]
 801cdfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801cdfe:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801ce00:	429a      	cmp	r2, r3
 801ce02:	d906      	bls.n	801ce12 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801ce04:	687a      	ldr	r2, [r7, #4]
 801ce06:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ce08:	68f8      	ldr	r0, [r7, #12]
 801ce0a:	f000 fd4d 	bl	801d8a8 <ip4_frag>
 801ce0e:	4603      	mov	r3, r0
 801ce10:	e006      	b.n	801ce20 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801ce12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ce14:	695b      	ldr	r3, [r3, #20]
 801ce16:	687a      	ldr	r2, [r7, #4]
 801ce18:	68f9      	ldr	r1, [r7, #12]
 801ce1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ce1c:	4798      	blx	r3
 801ce1e:	4603      	mov	r3, r0
}
 801ce20:	4618      	mov	r0, r3
 801ce22:	3720      	adds	r7, #32
 801ce24:	46bd      	mov	sp, r7
 801ce26:	bd80      	pop	{r7, pc}
 801ce28:	080268d4 	.word	0x080268d4
 801ce2c:	08026908 	.word	0x08026908
 801ce30:	08026914 	.word	0x08026914
 801ce34:	0802693c 	.word	0x0802693c
 801ce38:	20006f46 	.word	0x20006f46
 801ce3c:	08026f20 	.word	0x08026f20

0801ce40 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801ce40:	b480      	push	{r7}
 801ce42:	b085      	sub	sp, #20
 801ce44:	af00      	add	r7, sp, #0
 801ce46:	6078      	str	r0, [r7, #4]
 801ce48:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801ce4a:	687b      	ldr	r3, [r7, #4]
 801ce4c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801ce4e:	687b      	ldr	r3, [r7, #4]
 801ce50:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ce54:	d002      	beq.n	801ce5c <ip4_addr_isbroadcast_u32+0x1c>
 801ce56:	687b      	ldr	r3, [r7, #4]
 801ce58:	2b00      	cmp	r3, #0
 801ce5a:	d101      	bne.n	801ce60 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801ce5c:	2301      	movs	r3, #1
 801ce5e:	e02a      	b.n	801ceb6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801ce60:	683b      	ldr	r3, [r7, #0]
 801ce62:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ce66:	f003 0302 	and.w	r3, r3, #2
 801ce6a:	2b00      	cmp	r3, #0
 801ce6c:	d101      	bne.n	801ce72 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801ce6e:	2300      	movs	r3, #0
 801ce70:	e021      	b.n	801ceb6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801ce72:	683b      	ldr	r3, [r7, #0]
 801ce74:	3304      	adds	r3, #4
 801ce76:	681b      	ldr	r3, [r3, #0]
 801ce78:	687a      	ldr	r2, [r7, #4]
 801ce7a:	429a      	cmp	r2, r3
 801ce7c:	d101      	bne.n	801ce82 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801ce7e:	2300      	movs	r3, #0
 801ce80:	e019      	b.n	801ceb6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801ce82:	68fa      	ldr	r2, [r7, #12]
 801ce84:	683b      	ldr	r3, [r7, #0]
 801ce86:	3304      	adds	r3, #4
 801ce88:	681b      	ldr	r3, [r3, #0]
 801ce8a:	405a      	eors	r2, r3
 801ce8c:	683b      	ldr	r3, [r7, #0]
 801ce8e:	3308      	adds	r3, #8
 801ce90:	681b      	ldr	r3, [r3, #0]
 801ce92:	4013      	ands	r3, r2
 801ce94:	2b00      	cmp	r3, #0
 801ce96:	d10d      	bne.n	801ceb4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801ce98:	683b      	ldr	r3, [r7, #0]
 801ce9a:	3308      	adds	r3, #8
 801ce9c:	681b      	ldr	r3, [r3, #0]
 801ce9e:	43da      	mvns	r2, r3
 801cea0:	687b      	ldr	r3, [r7, #4]
 801cea2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801cea4:	683b      	ldr	r3, [r7, #0]
 801cea6:	3308      	adds	r3, #8
 801cea8:	681b      	ldr	r3, [r3, #0]
 801ceaa:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801ceac:	429a      	cmp	r2, r3
 801ceae:	d101      	bne.n	801ceb4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801ceb0:	2301      	movs	r3, #1
 801ceb2:	e000      	b.n	801ceb6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801ceb4:	2300      	movs	r3, #0
  }
}
 801ceb6:	4618      	mov	r0, r3
 801ceb8:	3714      	adds	r7, #20
 801ceba:	46bd      	mov	sp, r7
 801cebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cec0:	4770      	bx	lr
	...

0801cec4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801cec4:	b580      	push	{r7, lr}
 801cec6:	b084      	sub	sp, #16
 801cec8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801ceca:	2300      	movs	r3, #0
 801cecc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801cece:	4b12      	ldr	r3, [pc, #72]	; (801cf18 <ip_reass_tmr+0x54>)
 801ced0:	681b      	ldr	r3, [r3, #0]
 801ced2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801ced4:	e018      	b.n	801cf08 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801ced6:	68fb      	ldr	r3, [r7, #12]
 801ced8:	7fdb      	ldrb	r3, [r3, #31]
 801ceda:	2b00      	cmp	r3, #0
 801cedc:	d00b      	beq.n	801cef6 <ip_reass_tmr+0x32>
      r->timer--;
 801cede:	68fb      	ldr	r3, [r7, #12]
 801cee0:	7fdb      	ldrb	r3, [r3, #31]
 801cee2:	3b01      	subs	r3, #1
 801cee4:	b2da      	uxtb	r2, r3
 801cee6:	68fb      	ldr	r3, [r7, #12]
 801cee8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801ceea:	68fb      	ldr	r3, [r7, #12]
 801ceec:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801ceee:	68fb      	ldr	r3, [r7, #12]
 801cef0:	681b      	ldr	r3, [r3, #0]
 801cef2:	60fb      	str	r3, [r7, #12]
 801cef4:	e008      	b.n	801cf08 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801cef6:	68fb      	ldr	r3, [r7, #12]
 801cef8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801cefa:	68fb      	ldr	r3, [r7, #12]
 801cefc:	681b      	ldr	r3, [r3, #0]
 801cefe:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801cf00:	68b9      	ldr	r1, [r7, #8]
 801cf02:	6878      	ldr	r0, [r7, #4]
 801cf04:	f000 f80a 	bl	801cf1c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801cf08:	68fb      	ldr	r3, [r7, #12]
 801cf0a:	2b00      	cmp	r3, #0
 801cf0c:	d1e3      	bne.n	801ced6 <ip_reass_tmr+0x12>
    }
  }
}
 801cf0e:	bf00      	nop
 801cf10:	bf00      	nop
 801cf12:	3710      	adds	r7, #16
 801cf14:	46bd      	mov	sp, r7
 801cf16:	bd80      	pop	{r7, pc}
 801cf18:	20006f48 	.word	0x20006f48

0801cf1c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801cf1c:	b580      	push	{r7, lr}
 801cf1e:	b088      	sub	sp, #32
 801cf20:	af00      	add	r7, sp, #0
 801cf22:	6078      	str	r0, [r7, #4]
 801cf24:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801cf26:	2300      	movs	r3, #0
 801cf28:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801cf2a:	683a      	ldr	r2, [r7, #0]
 801cf2c:	687b      	ldr	r3, [r7, #4]
 801cf2e:	429a      	cmp	r2, r3
 801cf30:	d105      	bne.n	801cf3e <ip_reass_free_complete_datagram+0x22>
 801cf32:	4b45      	ldr	r3, [pc, #276]	; (801d048 <ip_reass_free_complete_datagram+0x12c>)
 801cf34:	22ab      	movs	r2, #171	; 0xab
 801cf36:	4945      	ldr	r1, [pc, #276]	; (801d04c <ip_reass_free_complete_datagram+0x130>)
 801cf38:	4845      	ldr	r0, [pc, #276]	; (801d050 <ip_reass_free_complete_datagram+0x134>)
 801cf3a:	f002 f937 	bl	801f1ac <iprintf>
  if (prev != NULL) {
 801cf3e:	683b      	ldr	r3, [r7, #0]
 801cf40:	2b00      	cmp	r3, #0
 801cf42:	d00a      	beq.n	801cf5a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801cf44:	683b      	ldr	r3, [r7, #0]
 801cf46:	681b      	ldr	r3, [r3, #0]
 801cf48:	687a      	ldr	r2, [r7, #4]
 801cf4a:	429a      	cmp	r2, r3
 801cf4c:	d005      	beq.n	801cf5a <ip_reass_free_complete_datagram+0x3e>
 801cf4e:	4b3e      	ldr	r3, [pc, #248]	; (801d048 <ip_reass_free_complete_datagram+0x12c>)
 801cf50:	22ad      	movs	r2, #173	; 0xad
 801cf52:	4940      	ldr	r1, [pc, #256]	; (801d054 <ip_reass_free_complete_datagram+0x138>)
 801cf54:	483e      	ldr	r0, [pc, #248]	; (801d050 <ip_reass_free_complete_datagram+0x134>)
 801cf56:	f002 f929 	bl	801f1ac <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801cf5a:	687b      	ldr	r3, [r7, #4]
 801cf5c:	685b      	ldr	r3, [r3, #4]
 801cf5e:	685b      	ldr	r3, [r3, #4]
 801cf60:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801cf62:	697b      	ldr	r3, [r7, #20]
 801cf64:	889b      	ldrh	r3, [r3, #4]
 801cf66:	b29b      	uxth	r3, r3
 801cf68:	2b00      	cmp	r3, #0
 801cf6a:	d12a      	bne.n	801cfc2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801cf6c:	687b      	ldr	r3, [r7, #4]
 801cf6e:	685b      	ldr	r3, [r3, #4]
 801cf70:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801cf72:	697b      	ldr	r3, [r7, #20]
 801cf74:	681a      	ldr	r2, [r3, #0]
 801cf76:	687b      	ldr	r3, [r7, #4]
 801cf78:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801cf7a:	69bb      	ldr	r3, [r7, #24]
 801cf7c:	6858      	ldr	r0, [r3, #4]
 801cf7e:	687b      	ldr	r3, [r7, #4]
 801cf80:	3308      	adds	r3, #8
 801cf82:	2214      	movs	r2, #20
 801cf84:	4619      	mov	r1, r3
 801cf86:	f001 f9bd 	bl	801e304 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801cf8a:	2101      	movs	r1, #1
 801cf8c:	69b8      	ldr	r0, [r7, #24]
 801cf8e:	f7ff fc47 	bl	801c820 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801cf92:	69b8      	ldr	r0, [r7, #24]
 801cf94:	f7f7 fbac 	bl	80146f0 <pbuf_clen>
 801cf98:	4603      	mov	r3, r0
 801cf9a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801cf9c:	8bfa      	ldrh	r2, [r7, #30]
 801cf9e:	8a7b      	ldrh	r3, [r7, #18]
 801cfa0:	4413      	add	r3, r2
 801cfa2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cfa6:	db05      	blt.n	801cfb4 <ip_reass_free_complete_datagram+0x98>
 801cfa8:	4b27      	ldr	r3, [pc, #156]	; (801d048 <ip_reass_free_complete_datagram+0x12c>)
 801cfaa:	22bc      	movs	r2, #188	; 0xbc
 801cfac:	492a      	ldr	r1, [pc, #168]	; (801d058 <ip_reass_free_complete_datagram+0x13c>)
 801cfae:	4828      	ldr	r0, [pc, #160]	; (801d050 <ip_reass_free_complete_datagram+0x134>)
 801cfb0:	f002 f8fc 	bl	801f1ac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801cfb4:	8bfa      	ldrh	r2, [r7, #30]
 801cfb6:	8a7b      	ldrh	r3, [r7, #18]
 801cfb8:	4413      	add	r3, r2
 801cfba:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801cfbc:	69b8      	ldr	r0, [r7, #24]
 801cfbe:	f7f7 fb09 	bl	80145d4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801cfc2:	687b      	ldr	r3, [r7, #4]
 801cfc4:	685b      	ldr	r3, [r3, #4]
 801cfc6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801cfc8:	e01f      	b.n	801d00a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801cfca:	69bb      	ldr	r3, [r7, #24]
 801cfcc:	685b      	ldr	r3, [r3, #4]
 801cfce:	617b      	str	r3, [r7, #20]
    pcur = p;
 801cfd0:	69bb      	ldr	r3, [r7, #24]
 801cfd2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801cfd4:	697b      	ldr	r3, [r7, #20]
 801cfd6:	681b      	ldr	r3, [r3, #0]
 801cfd8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801cfda:	68f8      	ldr	r0, [r7, #12]
 801cfdc:	f7f7 fb88 	bl	80146f0 <pbuf_clen>
 801cfe0:	4603      	mov	r3, r0
 801cfe2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801cfe4:	8bfa      	ldrh	r2, [r7, #30]
 801cfe6:	8a7b      	ldrh	r3, [r7, #18]
 801cfe8:	4413      	add	r3, r2
 801cfea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cfee:	db05      	blt.n	801cffc <ip_reass_free_complete_datagram+0xe0>
 801cff0:	4b15      	ldr	r3, [pc, #84]	; (801d048 <ip_reass_free_complete_datagram+0x12c>)
 801cff2:	22cc      	movs	r2, #204	; 0xcc
 801cff4:	4918      	ldr	r1, [pc, #96]	; (801d058 <ip_reass_free_complete_datagram+0x13c>)
 801cff6:	4816      	ldr	r0, [pc, #88]	; (801d050 <ip_reass_free_complete_datagram+0x134>)
 801cff8:	f002 f8d8 	bl	801f1ac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801cffc:	8bfa      	ldrh	r2, [r7, #30]
 801cffe:	8a7b      	ldrh	r3, [r7, #18]
 801d000:	4413      	add	r3, r2
 801d002:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801d004:	68f8      	ldr	r0, [r7, #12]
 801d006:	f7f7 fae5 	bl	80145d4 <pbuf_free>
  while (p != NULL) {
 801d00a:	69bb      	ldr	r3, [r7, #24]
 801d00c:	2b00      	cmp	r3, #0
 801d00e:	d1dc      	bne.n	801cfca <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801d010:	6839      	ldr	r1, [r7, #0]
 801d012:	6878      	ldr	r0, [r7, #4]
 801d014:	f000 f8c2 	bl	801d19c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801d018:	4b10      	ldr	r3, [pc, #64]	; (801d05c <ip_reass_free_complete_datagram+0x140>)
 801d01a:	881b      	ldrh	r3, [r3, #0]
 801d01c:	8bfa      	ldrh	r2, [r7, #30]
 801d01e:	429a      	cmp	r2, r3
 801d020:	d905      	bls.n	801d02e <ip_reass_free_complete_datagram+0x112>
 801d022:	4b09      	ldr	r3, [pc, #36]	; (801d048 <ip_reass_free_complete_datagram+0x12c>)
 801d024:	22d2      	movs	r2, #210	; 0xd2
 801d026:	490e      	ldr	r1, [pc, #56]	; (801d060 <ip_reass_free_complete_datagram+0x144>)
 801d028:	4809      	ldr	r0, [pc, #36]	; (801d050 <ip_reass_free_complete_datagram+0x134>)
 801d02a:	f002 f8bf 	bl	801f1ac <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801d02e:	4b0b      	ldr	r3, [pc, #44]	; (801d05c <ip_reass_free_complete_datagram+0x140>)
 801d030:	881a      	ldrh	r2, [r3, #0]
 801d032:	8bfb      	ldrh	r3, [r7, #30]
 801d034:	1ad3      	subs	r3, r2, r3
 801d036:	b29a      	uxth	r2, r3
 801d038:	4b08      	ldr	r3, [pc, #32]	; (801d05c <ip_reass_free_complete_datagram+0x140>)
 801d03a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801d03c:	8bfb      	ldrh	r3, [r7, #30]
}
 801d03e:	4618      	mov	r0, r3
 801d040:	3720      	adds	r7, #32
 801d042:	46bd      	mov	sp, r7
 801d044:	bd80      	pop	{r7, pc}
 801d046:	bf00      	nop
 801d048:	0802696c 	.word	0x0802696c
 801d04c:	080269a8 	.word	0x080269a8
 801d050:	080269b4 	.word	0x080269b4
 801d054:	080269dc 	.word	0x080269dc
 801d058:	080269f0 	.word	0x080269f0
 801d05c:	20006f4c 	.word	0x20006f4c
 801d060:	08026a10 	.word	0x08026a10

0801d064 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801d064:	b580      	push	{r7, lr}
 801d066:	b08a      	sub	sp, #40	; 0x28
 801d068:	af00      	add	r7, sp, #0
 801d06a:	6078      	str	r0, [r7, #4]
 801d06c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801d06e:	2300      	movs	r3, #0
 801d070:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801d072:	2300      	movs	r3, #0
 801d074:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801d076:	2300      	movs	r3, #0
 801d078:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801d07a:	2300      	movs	r3, #0
 801d07c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801d07e:	2300      	movs	r3, #0
 801d080:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801d082:	4b28      	ldr	r3, [pc, #160]	; (801d124 <ip_reass_remove_oldest_datagram+0xc0>)
 801d084:	681b      	ldr	r3, [r3, #0]
 801d086:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801d088:	e030      	b.n	801d0ec <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801d08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d08c:	695a      	ldr	r2, [r3, #20]
 801d08e:	687b      	ldr	r3, [r7, #4]
 801d090:	68db      	ldr	r3, [r3, #12]
 801d092:	429a      	cmp	r2, r3
 801d094:	d10c      	bne.n	801d0b0 <ip_reass_remove_oldest_datagram+0x4c>
 801d096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d098:	699a      	ldr	r2, [r3, #24]
 801d09a:	687b      	ldr	r3, [r7, #4]
 801d09c:	691b      	ldr	r3, [r3, #16]
 801d09e:	429a      	cmp	r2, r3
 801d0a0:	d106      	bne.n	801d0b0 <ip_reass_remove_oldest_datagram+0x4c>
 801d0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0a4:	899a      	ldrh	r2, [r3, #12]
 801d0a6:	687b      	ldr	r3, [r7, #4]
 801d0a8:	889b      	ldrh	r3, [r3, #4]
 801d0aa:	b29b      	uxth	r3, r3
 801d0ac:	429a      	cmp	r2, r3
 801d0ae:	d014      	beq.n	801d0da <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801d0b0:	693b      	ldr	r3, [r7, #16]
 801d0b2:	3301      	adds	r3, #1
 801d0b4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801d0b6:	6a3b      	ldr	r3, [r7, #32]
 801d0b8:	2b00      	cmp	r3, #0
 801d0ba:	d104      	bne.n	801d0c6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801d0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0be:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801d0c0:	69fb      	ldr	r3, [r7, #28]
 801d0c2:	61bb      	str	r3, [r7, #24]
 801d0c4:	e009      	b.n	801d0da <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801d0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0c8:	7fda      	ldrb	r2, [r3, #31]
 801d0ca:	6a3b      	ldr	r3, [r7, #32]
 801d0cc:	7fdb      	ldrb	r3, [r3, #31]
 801d0ce:	429a      	cmp	r2, r3
 801d0d0:	d803      	bhi.n	801d0da <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801d0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0d4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801d0d6:	69fb      	ldr	r3, [r7, #28]
 801d0d8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801d0da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0dc:	681b      	ldr	r3, [r3, #0]
 801d0de:	2b00      	cmp	r3, #0
 801d0e0:	d001      	beq.n	801d0e6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801d0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0e4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801d0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0e8:	681b      	ldr	r3, [r3, #0]
 801d0ea:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801d0ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d0ee:	2b00      	cmp	r3, #0
 801d0f0:	d1cb      	bne.n	801d08a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801d0f2:	6a3b      	ldr	r3, [r7, #32]
 801d0f4:	2b00      	cmp	r3, #0
 801d0f6:	d008      	beq.n	801d10a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801d0f8:	69b9      	ldr	r1, [r7, #24]
 801d0fa:	6a38      	ldr	r0, [r7, #32]
 801d0fc:	f7ff ff0e 	bl	801cf1c <ip_reass_free_complete_datagram>
 801d100:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801d102:	697a      	ldr	r2, [r7, #20]
 801d104:	68fb      	ldr	r3, [r7, #12]
 801d106:	4413      	add	r3, r2
 801d108:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801d10a:	697a      	ldr	r2, [r7, #20]
 801d10c:	683b      	ldr	r3, [r7, #0]
 801d10e:	429a      	cmp	r2, r3
 801d110:	da02      	bge.n	801d118 <ip_reass_remove_oldest_datagram+0xb4>
 801d112:	693b      	ldr	r3, [r7, #16]
 801d114:	2b01      	cmp	r3, #1
 801d116:	dcac      	bgt.n	801d072 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801d118:	697b      	ldr	r3, [r7, #20]
}
 801d11a:	4618      	mov	r0, r3
 801d11c:	3728      	adds	r7, #40	; 0x28
 801d11e:	46bd      	mov	sp, r7
 801d120:	bd80      	pop	{r7, pc}
 801d122:	bf00      	nop
 801d124:	20006f48 	.word	0x20006f48

0801d128 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801d128:	b580      	push	{r7, lr}
 801d12a:	b084      	sub	sp, #16
 801d12c:	af00      	add	r7, sp, #0
 801d12e:	6078      	str	r0, [r7, #4]
 801d130:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801d132:	2004      	movs	r0, #4
 801d134:	f7f6 fbbc 	bl	80138b0 <memp_malloc>
 801d138:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801d13a:	68fb      	ldr	r3, [r7, #12]
 801d13c:	2b00      	cmp	r3, #0
 801d13e:	d110      	bne.n	801d162 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801d140:	6839      	ldr	r1, [r7, #0]
 801d142:	6878      	ldr	r0, [r7, #4]
 801d144:	f7ff ff8e 	bl	801d064 <ip_reass_remove_oldest_datagram>
 801d148:	4602      	mov	r2, r0
 801d14a:	683b      	ldr	r3, [r7, #0]
 801d14c:	4293      	cmp	r3, r2
 801d14e:	dc03      	bgt.n	801d158 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801d150:	2004      	movs	r0, #4
 801d152:	f7f6 fbad 	bl	80138b0 <memp_malloc>
 801d156:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801d158:	68fb      	ldr	r3, [r7, #12]
 801d15a:	2b00      	cmp	r3, #0
 801d15c:	d101      	bne.n	801d162 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801d15e:	2300      	movs	r3, #0
 801d160:	e016      	b.n	801d190 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801d162:	2220      	movs	r2, #32
 801d164:	2100      	movs	r1, #0
 801d166:	68f8      	ldr	r0, [r7, #12]
 801d168:	f001 f8f4 	bl	801e354 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801d16c:	68fb      	ldr	r3, [r7, #12]
 801d16e:	220f      	movs	r2, #15
 801d170:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801d172:	4b09      	ldr	r3, [pc, #36]	; (801d198 <ip_reass_enqueue_new_datagram+0x70>)
 801d174:	681a      	ldr	r2, [r3, #0]
 801d176:	68fb      	ldr	r3, [r7, #12]
 801d178:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801d17a:	4a07      	ldr	r2, [pc, #28]	; (801d198 <ip_reass_enqueue_new_datagram+0x70>)
 801d17c:	68fb      	ldr	r3, [r7, #12]
 801d17e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801d180:	68fb      	ldr	r3, [r7, #12]
 801d182:	3308      	adds	r3, #8
 801d184:	2214      	movs	r2, #20
 801d186:	6879      	ldr	r1, [r7, #4]
 801d188:	4618      	mov	r0, r3
 801d18a:	f001 f8bb 	bl	801e304 <memcpy>
  return ipr;
 801d18e:	68fb      	ldr	r3, [r7, #12]
}
 801d190:	4618      	mov	r0, r3
 801d192:	3710      	adds	r7, #16
 801d194:	46bd      	mov	sp, r7
 801d196:	bd80      	pop	{r7, pc}
 801d198:	20006f48 	.word	0x20006f48

0801d19c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801d19c:	b580      	push	{r7, lr}
 801d19e:	b082      	sub	sp, #8
 801d1a0:	af00      	add	r7, sp, #0
 801d1a2:	6078      	str	r0, [r7, #4]
 801d1a4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801d1a6:	4b10      	ldr	r3, [pc, #64]	; (801d1e8 <ip_reass_dequeue_datagram+0x4c>)
 801d1a8:	681b      	ldr	r3, [r3, #0]
 801d1aa:	687a      	ldr	r2, [r7, #4]
 801d1ac:	429a      	cmp	r2, r3
 801d1ae:	d104      	bne.n	801d1ba <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801d1b0:	687b      	ldr	r3, [r7, #4]
 801d1b2:	681b      	ldr	r3, [r3, #0]
 801d1b4:	4a0c      	ldr	r2, [pc, #48]	; (801d1e8 <ip_reass_dequeue_datagram+0x4c>)
 801d1b6:	6013      	str	r3, [r2, #0]
 801d1b8:	e00d      	b.n	801d1d6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801d1ba:	683b      	ldr	r3, [r7, #0]
 801d1bc:	2b00      	cmp	r3, #0
 801d1be:	d106      	bne.n	801d1ce <ip_reass_dequeue_datagram+0x32>
 801d1c0:	4b0a      	ldr	r3, [pc, #40]	; (801d1ec <ip_reass_dequeue_datagram+0x50>)
 801d1c2:	f240 1245 	movw	r2, #325	; 0x145
 801d1c6:	490a      	ldr	r1, [pc, #40]	; (801d1f0 <ip_reass_dequeue_datagram+0x54>)
 801d1c8:	480a      	ldr	r0, [pc, #40]	; (801d1f4 <ip_reass_dequeue_datagram+0x58>)
 801d1ca:	f001 ffef 	bl	801f1ac <iprintf>
    prev->next = ipr->next;
 801d1ce:	687b      	ldr	r3, [r7, #4]
 801d1d0:	681a      	ldr	r2, [r3, #0]
 801d1d2:	683b      	ldr	r3, [r7, #0]
 801d1d4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801d1d6:	6879      	ldr	r1, [r7, #4]
 801d1d8:	2004      	movs	r0, #4
 801d1da:	f7f6 fbbb 	bl	8013954 <memp_free>
}
 801d1de:	bf00      	nop
 801d1e0:	3708      	adds	r7, #8
 801d1e2:	46bd      	mov	sp, r7
 801d1e4:	bd80      	pop	{r7, pc}
 801d1e6:	bf00      	nop
 801d1e8:	20006f48 	.word	0x20006f48
 801d1ec:	0802696c 	.word	0x0802696c
 801d1f0:	08026a34 	.word	0x08026a34
 801d1f4:	080269b4 	.word	0x080269b4

0801d1f8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801d1f8:	b580      	push	{r7, lr}
 801d1fa:	b08c      	sub	sp, #48	; 0x30
 801d1fc:	af00      	add	r7, sp, #0
 801d1fe:	60f8      	str	r0, [r7, #12]
 801d200:	60b9      	str	r1, [r7, #8]
 801d202:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801d204:	2300      	movs	r3, #0
 801d206:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801d208:	2301      	movs	r3, #1
 801d20a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801d20c:	68bb      	ldr	r3, [r7, #8]
 801d20e:	685b      	ldr	r3, [r3, #4]
 801d210:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801d212:	69fb      	ldr	r3, [r7, #28]
 801d214:	885b      	ldrh	r3, [r3, #2]
 801d216:	b29b      	uxth	r3, r3
 801d218:	4618      	mov	r0, r3
 801d21a:	f7f5 fe93 	bl	8012f44 <lwip_htons>
 801d21e:	4603      	mov	r3, r0
 801d220:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801d222:	69fb      	ldr	r3, [r7, #28]
 801d224:	781b      	ldrb	r3, [r3, #0]
 801d226:	f003 030f 	and.w	r3, r3, #15
 801d22a:	b2db      	uxtb	r3, r3
 801d22c:	009b      	lsls	r3, r3, #2
 801d22e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801d230:	7e7b      	ldrb	r3, [r7, #25]
 801d232:	b29b      	uxth	r3, r3
 801d234:	8b7a      	ldrh	r2, [r7, #26]
 801d236:	429a      	cmp	r2, r3
 801d238:	d202      	bcs.n	801d240 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d23a:	f04f 33ff 	mov.w	r3, #4294967295
 801d23e:	e135      	b.n	801d4ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801d240:	7e7b      	ldrb	r3, [r7, #25]
 801d242:	b29b      	uxth	r3, r3
 801d244:	8b7a      	ldrh	r2, [r7, #26]
 801d246:	1ad3      	subs	r3, r2, r3
 801d248:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801d24a:	69fb      	ldr	r3, [r7, #28]
 801d24c:	88db      	ldrh	r3, [r3, #6]
 801d24e:	b29b      	uxth	r3, r3
 801d250:	4618      	mov	r0, r3
 801d252:	f7f5 fe77 	bl	8012f44 <lwip_htons>
 801d256:	4603      	mov	r3, r0
 801d258:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d25c:	b29b      	uxth	r3, r3
 801d25e:	00db      	lsls	r3, r3, #3
 801d260:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801d262:	68bb      	ldr	r3, [r7, #8]
 801d264:	685b      	ldr	r3, [r3, #4]
 801d266:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801d268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d26a:	2200      	movs	r2, #0
 801d26c:	701a      	strb	r2, [r3, #0]
 801d26e:	2200      	movs	r2, #0
 801d270:	705a      	strb	r2, [r3, #1]
 801d272:	2200      	movs	r2, #0
 801d274:	709a      	strb	r2, [r3, #2]
 801d276:	2200      	movs	r2, #0
 801d278:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801d27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d27c:	8afa      	ldrh	r2, [r7, #22]
 801d27e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801d280:	8afa      	ldrh	r2, [r7, #22]
 801d282:	8b7b      	ldrh	r3, [r7, #26]
 801d284:	4413      	add	r3, r2
 801d286:	b29a      	uxth	r2, r3
 801d288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d28a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801d28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d28e:	88db      	ldrh	r3, [r3, #6]
 801d290:	b29b      	uxth	r3, r3
 801d292:	8afa      	ldrh	r2, [r7, #22]
 801d294:	429a      	cmp	r2, r3
 801d296:	d902      	bls.n	801d29e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d298:	f04f 33ff 	mov.w	r3, #4294967295
 801d29c:	e106      	b.n	801d4ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801d29e:	68fb      	ldr	r3, [r7, #12]
 801d2a0:	685b      	ldr	r3, [r3, #4]
 801d2a2:	627b      	str	r3, [r7, #36]	; 0x24
 801d2a4:	e068      	b.n	801d378 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801d2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d2a8:	685b      	ldr	r3, [r3, #4]
 801d2aa:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801d2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d2ae:	889b      	ldrh	r3, [r3, #4]
 801d2b0:	b29a      	uxth	r2, r3
 801d2b2:	693b      	ldr	r3, [r7, #16]
 801d2b4:	889b      	ldrh	r3, [r3, #4]
 801d2b6:	b29b      	uxth	r3, r3
 801d2b8:	429a      	cmp	r2, r3
 801d2ba:	d235      	bcs.n	801d328 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801d2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d2be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d2c0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801d2c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2c4:	2b00      	cmp	r3, #0
 801d2c6:	d020      	beq.n	801d30a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801d2c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d2ca:	889b      	ldrh	r3, [r3, #4]
 801d2cc:	b29a      	uxth	r2, r3
 801d2ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2d0:	88db      	ldrh	r3, [r3, #6]
 801d2d2:	b29b      	uxth	r3, r3
 801d2d4:	429a      	cmp	r2, r3
 801d2d6:	d307      	bcc.n	801d2e8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801d2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d2da:	88db      	ldrh	r3, [r3, #6]
 801d2dc:	b29a      	uxth	r2, r3
 801d2de:	693b      	ldr	r3, [r7, #16]
 801d2e0:	889b      	ldrh	r3, [r3, #4]
 801d2e2:	b29b      	uxth	r3, r3
 801d2e4:	429a      	cmp	r2, r3
 801d2e6:	d902      	bls.n	801d2ee <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d2e8:	f04f 33ff 	mov.w	r3, #4294967295
 801d2ec:	e0de      	b.n	801d4ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801d2ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2f0:	68ba      	ldr	r2, [r7, #8]
 801d2f2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801d2f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d2f6:	88db      	ldrh	r3, [r3, #6]
 801d2f8:	b29a      	uxth	r2, r3
 801d2fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d2fc:	889b      	ldrh	r3, [r3, #4]
 801d2fe:	b29b      	uxth	r3, r3
 801d300:	429a      	cmp	r2, r3
 801d302:	d03d      	beq.n	801d380 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801d304:	2300      	movs	r3, #0
 801d306:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801d308:	e03a      	b.n	801d380 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801d30a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d30c:	88db      	ldrh	r3, [r3, #6]
 801d30e:	b29a      	uxth	r2, r3
 801d310:	693b      	ldr	r3, [r7, #16]
 801d312:	889b      	ldrh	r3, [r3, #4]
 801d314:	b29b      	uxth	r3, r3
 801d316:	429a      	cmp	r2, r3
 801d318:	d902      	bls.n	801d320 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d31a:	f04f 33ff 	mov.w	r3, #4294967295
 801d31e:	e0c5      	b.n	801d4ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801d320:	68fb      	ldr	r3, [r7, #12]
 801d322:	68ba      	ldr	r2, [r7, #8]
 801d324:	605a      	str	r2, [r3, #4]
      break;
 801d326:	e02b      	b.n	801d380 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801d328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d32a:	889b      	ldrh	r3, [r3, #4]
 801d32c:	b29a      	uxth	r2, r3
 801d32e:	693b      	ldr	r3, [r7, #16]
 801d330:	889b      	ldrh	r3, [r3, #4]
 801d332:	b29b      	uxth	r3, r3
 801d334:	429a      	cmp	r2, r3
 801d336:	d102      	bne.n	801d33e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d338:	f04f 33ff 	mov.w	r3, #4294967295
 801d33c:	e0b6      	b.n	801d4ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801d33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d340:	889b      	ldrh	r3, [r3, #4]
 801d342:	b29a      	uxth	r2, r3
 801d344:	693b      	ldr	r3, [r7, #16]
 801d346:	88db      	ldrh	r3, [r3, #6]
 801d348:	b29b      	uxth	r3, r3
 801d34a:	429a      	cmp	r2, r3
 801d34c:	d202      	bcs.n	801d354 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801d34e:	f04f 33ff 	mov.w	r3, #4294967295
 801d352:	e0ab      	b.n	801d4ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801d354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d356:	2b00      	cmp	r3, #0
 801d358:	d009      	beq.n	801d36e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801d35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d35c:	88db      	ldrh	r3, [r3, #6]
 801d35e:	b29a      	uxth	r2, r3
 801d360:	693b      	ldr	r3, [r7, #16]
 801d362:	889b      	ldrh	r3, [r3, #4]
 801d364:	b29b      	uxth	r3, r3
 801d366:	429a      	cmp	r2, r3
 801d368:	d001      	beq.n	801d36e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801d36a:	2300      	movs	r3, #0
 801d36c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801d36e:	693b      	ldr	r3, [r7, #16]
 801d370:	681b      	ldr	r3, [r3, #0]
 801d372:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801d374:	693b      	ldr	r3, [r7, #16]
 801d376:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801d378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d37a:	2b00      	cmp	r3, #0
 801d37c:	d193      	bne.n	801d2a6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801d37e:	e000      	b.n	801d382 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801d380:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801d382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d384:	2b00      	cmp	r3, #0
 801d386:	d12d      	bne.n	801d3e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801d388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d38a:	2b00      	cmp	r3, #0
 801d38c:	d01c      	beq.n	801d3c8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801d38e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d390:	88db      	ldrh	r3, [r3, #6]
 801d392:	b29a      	uxth	r2, r3
 801d394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d396:	889b      	ldrh	r3, [r3, #4]
 801d398:	b29b      	uxth	r3, r3
 801d39a:	429a      	cmp	r2, r3
 801d39c:	d906      	bls.n	801d3ac <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801d39e:	4b45      	ldr	r3, [pc, #276]	; (801d4b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d3a0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801d3a4:	4944      	ldr	r1, [pc, #272]	; (801d4b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801d3a6:	4845      	ldr	r0, [pc, #276]	; (801d4bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d3a8:	f001 ff00 	bl	801f1ac <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801d3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d3ae:	68ba      	ldr	r2, [r7, #8]
 801d3b0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801d3b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d3b4:	88db      	ldrh	r3, [r3, #6]
 801d3b6:	b29a      	uxth	r2, r3
 801d3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d3ba:	889b      	ldrh	r3, [r3, #4]
 801d3bc:	b29b      	uxth	r3, r3
 801d3be:	429a      	cmp	r2, r3
 801d3c0:	d010      	beq.n	801d3e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801d3c2:	2300      	movs	r3, #0
 801d3c4:	623b      	str	r3, [r7, #32]
 801d3c6:	e00d      	b.n	801d3e4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801d3c8:	68fb      	ldr	r3, [r7, #12]
 801d3ca:	685b      	ldr	r3, [r3, #4]
 801d3cc:	2b00      	cmp	r3, #0
 801d3ce:	d006      	beq.n	801d3de <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801d3d0:	4b38      	ldr	r3, [pc, #224]	; (801d4b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d3d2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801d3d6:	493a      	ldr	r1, [pc, #232]	; (801d4c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801d3d8:	4838      	ldr	r0, [pc, #224]	; (801d4bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d3da:	f001 fee7 	bl	801f1ac <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801d3de:	68fb      	ldr	r3, [r7, #12]
 801d3e0:	68ba      	ldr	r2, [r7, #8]
 801d3e2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801d3e4:	687b      	ldr	r3, [r7, #4]
 801d3e6:	2b00      	cmp	r3, #0
 801d3e8:	d105      	bne.n	801d3f6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801d3ea:	68fb      	ldr	r3, [r7, #12]
 801d3ec:	7f9b      	ldrb	r3, [r3, #30]
 801d3ee:	f003 0301 	and.w	r3, r3, #1
 801d3f2:	2b00      	cmp	r3, #0
 801d3f4:	d059      	beq.n	801d4aa <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801d3f6:	6a3b      	ldr	r3, [r7, #32]
 801d3f8:	2b00      	cmp	r3, #0
 801d3fa:	d04f      	beq.n	801d49c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801d3fc:	68fb      	ldr	r3, [r7, #12]
 801d3fe:	685b      	ldr	r3, [r3, #4]
 801d400:	2b00      	cmp	r3, #0
 801d402:	d006      	beq.n	801d412 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801d404:	68fb      	ldr	r3, [r7, #12]
 801d406:	685b      	ldr	r3, [r3, #4]
 801d408:	685b      	ldr	r3, [r3, #4]
 801d40a:	889b      	ldrh	r3, [r3, #4]
 801d40c:	b29b      	uxth	r3, r3
 801d40e:	2b00      	cmp	r3, #0
 801d410:	d002      	beq.n	801d418 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801d412:	2300      	movs	r3, #0
 801d414:	623b      	str	r3, [r7, #32]
 801d416:	e041      	b.n	801d49c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801d418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d41a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801d41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d41e:	681b      	ldr	r3, [r3, #0]
 801d420:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801d422:	e012      	b.n	801d44a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801d424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d426:	685b      	ldr	r3, [r3, #4]
 801d428:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801d42a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d42c:	88db      	ldrh	r3, [r3, #6]
 801d42e:	b29a      	uxth	r2, r3
 801d430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d432:	889b      	ldrh	r3, [r3, #4]
 801d434:	b29b      	uxth	r3, r3
 801d436:	429a      	cmp	r2, r3
 801d438:	d002      	beq.n	801d440 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801d43a:	2300      	movs	r3, #0
 801d43c:	623b      	str	r3, [r7, #32]
            break;
 801d43e:	e007      	b.n	801d450 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801d440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d442:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801d444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d446:	681b      	ldr	r3, [r3, #0]
 801d448:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801d44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d44c:	2b00      	cmp	r3, #0
 801d44e:	d1e9      	bne.n	801d424 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801d450:	6a3b      	ldr	r3, [r7, #32]
 801d452:	2b00      	cmp	r3, #0
 801d454:	d022      	beq.n	801d49c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801d456:	68fb      	ldr	r3, [r7, #12]
 801d458:	685b      	ldr	r3, [r3, #4]
 801d45a:	2b00      	cmp	r3, #0
 801d45c:	d106      	bne.n	801d46c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801d45e:	4b15      	ldr	r3, [pc, #84]	; (801d4b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d460:	f240 12df 	movw	r2, #479	; 0x1df
 801d464:	4917      	ldr	r1, [pc, #92]	; (801d4c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801d466:	4815      	ldr	r0, [pc, #84]	; (801d4bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d468:	f001 fea0 	bl	801f1ac <iprintf>
          LWIP_ASSERT("sanity check",
 801d46c:	68fb      	ldr	r3, [r7, #12]
 801d46e:	685b      	ldr	r3, [r3, #4]
 801d470:	685b      	ldr	r3, [r3, #4]
 801d472:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d474:	429a      	cmp	r2, r3
 801d476:	d106      	bne.n	801d486 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801d478:	4b0e      	ldr	r3, [pc, #56]	; (801d4b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d47a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801d47e:	4911      	ldr	r1, [pc, #68]	; (801d4c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801d480:	480e      	ldr	r0, [pc, #56]	; (801d4bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d482:	f001 fe93 	bl	801f1ac <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801d486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d488:	681b      	ldr	r3, [r3, #0]
 801d48a:	2b00      	cmp	r3, #0
 801d48c:	d006      	beq.n	801d49c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801d48e:	4b09      	ldr	r3, [pc, #36]	; (801d4b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801d490:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801d494:	490c      	ldr	r1, [pc, #48]	; (801d4c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801d496:	4809      	ldr	r0, [pc, #36]	; (801d4bc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801d498:	f001 fe88 	bl	801f1ac <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801d49c:	6a3b      	ldr	r3, [r7, #32]
 801d49e:	2b00      	cmp	r3, #0
 801d4a0:	bf14      	ite	ne
 801d4a2:	2301      	movne	r3, #1
 801d4a4:	2300      	moveq	r3, #0
 801d4a6:	b2db      	uxtb	r3, r3
 801d4a8:	e000      	b.n	801d4ac <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801d4aa:	2300      	movs	r3, #0
}
 801d4ac:	4618      	mov	r0, r3
 801d4ae:	3730      	adds	r7, #48	; 0x30
 801d4b0:	46bd      	mov	sp, r7
 801d4b2:	bd80      	pop	{r7, pc}
 801d4b4:	0802696c 	.word	0x0802696c
 801d4b8:	08026a50 	.word	0x08026a50
 801d4bc:	080269b4 	.word	0x080269b4
 801d4c0:	08026a70 	.word	0x08026a70
 801d4c4:	08026aa8 	.word	0x08026aa8
 801d4c8:	08026ab8 	.word	0x08026ab8

0801d4cc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801d4cc:	b580      	push	{r7, lr}
 801d4ce:	b08e      	sub	sp, #56	; 0x38
 801d4d0:	af00      	add	r7, sp, #0
 801d4d2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801d4d4:	687b      	ldr	r3, [r7, #4]
 801d4d6:	685b      	ldr	r3, [r3, #4]
 801d4d8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801d4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d4dc:	781b      	ldrb	r3, [r3, #0]
 801d4de:	f003 030f 	and.w	r3, r3, #15
 801d4e2:	b2db      	uxtb	r3, r3
 801d4e4:	009b      	lsls	r3, r3, #2
 801d4e6:	b2db      	uxtb	r3, r3
 801d4e8:	2b14      	cmp	r3, #20
 801d4ea:	f040 8167 	bne.w	801d7bc <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801d4ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d4f0:	88db      	ldrh	r3, [r3, #6]
 801d4f2:	b29b      	uxth	r3, r3
 801d4f4:	4618      	mov	r0, r3
 801d4f6:	f7f5 fd25 	bl	8012f44 <lwip_htons>
 801d4fa:	4603      	mov	r3, r0
 801d4fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d500:	b29b      	uxth	r3, r3
 801d502:	00db      	lsls	r3, r3, #3
 801d504:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801d506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d508:	885b      	ldrh	r3, [r3, #2]
 801d50a:	b29b      	uxth	r3, r3
 801d50c:	4618      	mov	r0, r3
 801d50e:	f7f5 fd19 	bl	8012f44 <lwip_htons>
 801d512:	4603      	mov	r3, r0
 801d514:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801d516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d518:	781b      	ldrb	r3, [r3, #0]
 801d51a:	f003 030f 	and.w	r3, r3, #15
 801d51e:	b2db      	uxtb	r3, r3
 801d520:	009b      	lsls	r3, r3, #2
 801d522:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801d526:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801d52a:	b29b      	uxth	r3, r3
 801d52c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d52e:	429a      	cmp	r2, r3
 801d530:	f0c0 8146 	bcc.w	801d7c0 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801d534:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801d538:	b29b      	uxth	r3, r3
 801d53a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801d53c:	1ad3      	subs	r3, r2, r3
 801d53e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801d540:	6878      	ldr	r0, [r7, #4]
 801d542:	f7f7 f8d5 	bl	80146f0 <pbuf_clen>
 801d546:	4603      	mov	r3, r0
 801d548:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801d54a:	4b9f      	ldr	r3, [pc, #636]	; (801d7c8 <ip4_reass+0x2fc>)
 801d54c:	881b      	ldrh	r3, [r3, #0]
 801d54e:	461a      	mov	r2, r3
 801d550:	8c3b      	ldrh	r3, [r7, #32]
 801d552:	4413      	add	r3, r2
 801d554:	2b0a      	cmp	r3, #10
 801d556:	dd10      	ble.n	801d57a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801d558:	8c3b      	ldrh	r3, [r7, #32]
 801d55a:	4619      	mov	r1, r3
 801d55c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d55e:	f7ff fd81 	bl	801d064 <ip_reass_remove_oldest_datagram>
 801d562:	4603      	mov	r3, r0
 801d564:	2b00      	cmp	r3, #0
 801d566:	f000 812d 	beq.w	801d7c4 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801d56a:	4b97      	ldr	r3, [pc, #604]	; (801d7c8 <ip4_reass+0x2fc>)
 801d56c:	881b      	ldrh	r3, [r3, #0]
 801d56e:	461a      	mov	r2, r3
 801d570:	8c3b      	ldrh	r3, [r7, #32]
 801d572:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801d574:	2b0a      	cmp	r3, #10
 801d576:	f300 8125 	bgt.w	801d7c4 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801d57a:	4b94      	ldr	r3, [pc, #592]	; (801d7cc <ip4_reass+0x300>)
 801d57c:	681b      	ldr	r3, [r3, #0]
 801d57e:	633b      	str	r3, [r7, #48]	; 0x30
 801d580:	e015      	b.n	801d5ae <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801d582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d584:	695a      	ldr	r2, [r3, #20]
 801d586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d588:	68db      	ldr	r3, [r3, #12]
 801d58a:	429a      	cmp	r2, r3
 801d58c:	d10c      	bne.n	801d5a8 <ip4_reass+0xdc>
 801d58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d590:	699a      	ldr	r2, [r3, #24]
 801d592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d594:	691b      	ldr	r3, [r3, #16]
 801d596:	429a      	cmp	r2, r3
 801d598:	d106      	bne.n	801d5a8 <ip4_reass+0xdc>
 801d59a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d59c:	899a      	ldrh	r2, [r3, #12]
 801d59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d5a0:	889b      	ldrh	r3, [r3, #4]
 801d5a2:	b29b      	uxth	r3, r3
 801d5a4:	429a      	cmp	r2, r3
 801d5a6:	d006      	beq.n	801d5b6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801d5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5aa:	681b      	ldr	r3, [r3, #0]
 801d5ac:	633b      	str	r3, [r7, #48]	; 0x30
 801d5ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5b0:	2b00      	cmp	r3, #0
 801d5b2:	d1e6      	bne.n	801d582 <ip4_reass+0xb6>
 801d5b4:	e000      	b.n	801d5b8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801d5b6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801d5b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5ba:	2b00      	cmp	r3, #0
 801d5bc:	d109      	bne.n	801d5d2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801d5be:	8c3b      	ldrh	r3, [r7, #32]
 801d5c0:	4619      	mov	r1, r3
 801d5c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d5c4:	f7ff fdb0 	bl	801d128 <ip_reass_enqueue_new_datagram>
 801d5c8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801d5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5cc:	2b00      	cmp	r3, #0
 801d5ce:	d11c      	bne.n	801d60a <ip4_reass+0x13e>
      goto nullreturn;
 801d5d0:	e109      	b.n	801d7e6 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801d5d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d5d4:	88db      	ldrh	r3, [r3, #6]
 801d5d6:	b29b      	uxth	r3, r3
 801d5d8:	4618      	mov	r0, r3
 801d5da:	f7f5 fcb3 	bl	8012f44 <lwip_htons>
 801d5de:	4603      	mov	r3, r0
 801d5e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d5e4:	2b00      	cmp	r3, #0
 801d5e6:	d110      	bne.n	801d60a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801d5e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5ea:	89db      	ldrh	r3, [r3, #14]
 801d5ec:	4618      	mov	r0, r3
 801d5ee:	f7f5 fca9 	bl	8012f44 <lwip_htons>
 801d5f2:	4603      	mov	r3, r0
 801d5f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801d5f8:	2b00      	cmp	r3, #0
 801d5fa:	d006      	beq.n	801d60a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801d5fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5fe:	3308      	adds	r3, #8
 801d600:	2214      	movs	r2, #20
 801d602:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801d604:	4618      	mov	r0, r3
 801d606:	f000 fe7d 	bl	801e304 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801d60a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d60c:	88db      	ldrh	r3, [r3, #6]
 801d60e:	b29b      	uxth	r3, r3
 801d610:	f003 0320 	and.w	r3, r3, #32
 801d614:	2b00      	cmp	r3, #0
 801d616:	bf0c      	ite	eq
 801d618:	2301      	moveq	r3, #1
 801d61a:	2300      	movne	r3, #0
 801d61c:	b2db      	uxtb	r3, r3
 801d61e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801d620:	69fb      	ldr	r3, [r7, #28]
 801d622:	2b00      	cmp	r3, #0
 801d624:	d00e      	beq.n	801d644 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801d626:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801d628:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d62a:	4413      	add	r3, r2
 801d62c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801d62e:	8b7a      	ldrh	r2, [r7, #26]
 801d630:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801d632:	429a      	cmp	r2, r3
 801d634:	f0c0 80a0 	bcc.w	801d778 <ip4_reass+0x2ac>
 801d638:	8b7b      	ldrh	r3, [r7, #26]
 801d63a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801d63e:	4293      	cmp	r3, r2
 801d640:	f200 809a 	bhi.w	801d778 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801d644:	69fa      	ldr	r2, [r7, #28]
 801d646:	6879      	ldr	r1, [r7, #4]
 801d648:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d64a:	f7ff fdd5 	bl	801d1f8 <ip_reass_chain_frag_into_datagram_and_validate>
 801d64e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801d650:	697b      	ldr	r3, [r7, #20]
 801d652:	f1b3 3fff 	cmp.w	r3, #4294967295
 801d656:	f000 8091 	beq.w	801d77c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801d65a:	4b5b      	ldr	r3, [pc, #364]	; (801d7c8 <ip4_reass+0x2fc>)
 801d65c:	881a      	ldrh	r2, [r3, #0]
 801d65e:	8c3b      	ldrh	r3, [r7, #32]
 801d660:	4413      	add	r3, r2
 801d662:	b29a      	uxth	r2, r3
 801d664:	4b58      	ldr	r3, [pc, #352]	; (801d7c8 <ip4_reass+0x2fc>)
 801d666:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801d668:	69fb      	ldr	r3, [r7, #28]
 801d66a:	2b00      	cmp	r3, #0
 801d66c:	d00d      	beq.n	801d68a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801d66e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801d670:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801d672:	4413      	add	r3, r2
 801d674:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801d676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d678:	8a7a      	ldrh	r2, [r7, #18]
 801d67a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801d67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d67e:	7f9b      	ldrb	r3, [r3, #30]
 801d680:	f043 0301 	orr.w	r3, r3, #1
 801d684:	b2da      	uxtb	r2, r3
 801d686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d688:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801d68a:	697b      	ldr	r3, [r7, #20]
 801d68c:	2b01      	cmp	r3, #1
 801d68e:	d171      	bne.n	801d774 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801d690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d692:	8b9b      	ldrh	r3, [r3, #28]
 801d694:	3314      	adds	r3, #20
 801d696:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801d698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d69a:	685b      	ldr	r3, [r3, #4]
 801d69c:	685b      	ldr	r3, [r3, #4]
 801d69e:	681b      	ldr	r3, [r3, #0]
 801d6a0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801d6a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d6a4:	685b      	ldr	r3, [r3, #4]
 801d6a6:	685b      	ldr	r3, [r3, #4]
 801d6a8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801d6aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d6ac:	3308      	adds	r3, #8
 801d6ae:	2214      	movs	r2, #20
 801d6b0:	4619      	mov	r1, r3
 801d6b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801d6b4:	f000 fe26 	bl	801e304 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801d6b8:	8a3b      	ldrh	r3, [r7, #16]
 801d6ba:	4618      	mov	r0, r3
 801d6bc:	f7f5 fc42 	bl	8012f44 <lwip_htons>
 801d6c0:	4603      	mov	r3, r0
 801d6c2:	461a      	mov	r2, r3
 801d6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d6c6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801d6c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d6ca:	2200      	movs	r2, #0
 801d6cc:	719a      	strb	r2, [r3, #6]
 801d6ce:	2200      	movs	r2, #0
 801d6d0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801d6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d6d4:	2200      	movs	r2, #0
 801d6d6:	729a      	strb	r2, [r3, #10]
 801d6d8:	2200      	movs	r2, #0
 801d6da:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801d6dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d6de:	685b      	ldr	r3, [r3, #4]
 801d6e0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801d6e2:	e00d      	b.n	801d700 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801d6e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d6e6:	685b      	ldr	r3, [r3, #4]
 801d6e8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801d6ea:	2114      	movs	r1, #20
 801d6ec:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801d6ee:	f7f6 feeb 	bl	80144c8 <pbuf_remove_header>
      pbuf_cat(p, r);
 801d6f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d6f4:	6878      	ldr	r0, [r7, #4]
 801d6f6:	f7f7 f83b 	bl	8014770 <pbuf_cat>
      r = iprh->next_pbuf;
 801d6fa:	68fb      	ldr	r3, [r7, #12]
 801d6fc:	681b      	ldr	r3, [r3, #0]
 801d6fe:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801d700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d702:	2b00      	cmp	r3, #0
 801d704:	d1ee      	bne.n	801d6e4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801d706:	4b31      	ldr	r3, [pc, #196]	; (801d7cc <ip4_reass+0x300>)
 801d708:	681b      	ldr	r3, [r3, #0]
 801d70a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d70c:	429a      	cmp	r2, r3
 801d70e:	d102      	bne.n	801d716 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801d710:	2300      	movs	r3, #0
 801d712:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d714:	e010      	b.n	801d738 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801d716:	4b2d      	ldr	r3, [pc, #180]	; (801d7cc <ip4_reass+0x300>)
 801d718:	681b      	ldr	r3, [r3, #0]
 801d71a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d71c:	e007      	b.n	801d72e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801d71e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d720:	681b      	ldr	r3, [r3, #0]
 801d722:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d724:	429a      	cmp	r2, r3
 801d726:	d006      	beq.n	801d736 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801d728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d72a:	681b      	ldr	r3, [r3, #0]
 801d72c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d72e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d730:	2b00      	cmp	r3, #0
 801d732:	d1f4      	bne.n	801d71e <ip4_reass+0x252>
 801d734:	e000      	b.n	801d738 <ip4_reass+0x26c>
          break;
 801d736:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801d738:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d73a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d73c:	f7ff fd2e 	bl	801d19c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801d740:	6878      	ldr	r0, [r7, #4]
 801d742:	f7f6 ffd5 	bl	80146f0 <pbuf_clen>
 801d746:	4603      	mov	r3, r0
 801d748:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801d74a:	4b1f      	ldr	r3, [pc, #124]	; (801d7c8 <ip4_reass+0x2fc>)
 801d74c:	881b      	ldrh	r3, [r3, #0]
 801d74e:	8c3a      	ldrh	r2, [r7, #32]
 801d750:	429a      	cmp	r2, r3
 801d752:	d906      	bls.n	801d762 <ip4_reass+0x296>
 801d754:	4b1e      	ldr	r3, [pc, #120]	; (801d7d0 <ip4_reass+0x304>)
 801d756:	f240 229b 	movw	r2, #667	; 0x29b
 801d75a:	491e      	ldr	r1, [pc, #120]	; (801d7d4 <ip4_reass+0x308>)
 801d75c:	481e      	ldr	r0, [pc, #120]	; (801d7d8 <ip4_reass+0x30c>)
 801d75e:	f001 fd25 	bl	801f1ac <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801d762:	4b19      	ldr	r3, [pc, #100]	; (801d7c8 <ip4_reass+0x2fc>)
 801d764:	881a      	ldrh	r2, [r3, #0]
 801d766:	8c3b      	ldrh	r3, [r7, #32]
 801d768:	1ad3      	subs	r3, r2, r3
 801d76a:	b29a      	uxth	r2, r3
 801d76c:	4b16      	ldr	r3, [pc, #88]	; (801d7c8 <ip4_reass+0x2fc>)
 801d76e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801d770:	687b      	ldr	r3, [r7, #4]
 801d772:	e03c      	b.n	801d7ee <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801d774:	2300      	movs	r3, #0
 801d776:	e03a      	b.n	801d7ee <ip4_reass+0x322>
      goto nullreturn_ipr;
 801d778:	bf00      	nop
 801d77a:	e000      	b.n	801d77e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801d77c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801d77e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d780:	2b00      	cmp	r3, #0
 801d782:	d106      	bne.n	801d792 <ip4_reass+0x2c6>
 801d784:	4b12      	ldr	r3, [pc, #72]	; (801d7d0 <ip4_reass+0x304>)
 801d786:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801d78a:	4914      	ldr	r1, [pc, #80]	; (801d7dc <ip4_reass+0x310>)
 801d78c:	4812      	ldr	r0, [pc, #72]	; (801d7d8 <ip4_reass+0x30c>)
 801d78e:	f001 fd0d 	bl	801f1ac <iprintf>
  if (ipr->p == NULL) {
 801d792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d794:	685b      	ldr	r3, [r3, #4]
 801d796:	2b00      	cmp	r3, #0
 801d798:	d124      	bne.n	801d7e4 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801d79a:	4b0c      	ldr	r3, [pc, #48]	; (801d7cc <ip4_reass+0x300>)
 801d79c:	681b      	ldr	r3, [r3, #0]
 801d79e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d7a0:	429a      	cmp	r2, r3
 801d7a2:	d006      	beq.n	801d7b2 <ip4_reass+0x2e6>
 801d7a4:	4b0a      	ldr	r3, [pc, #40]	; (801d7d0 <ip4_reass+0x304>)
 801d7a6:	f240 22ab 	movw	r2, #683	; 0x2ab
 801d7aa:	490d      	ldr	r1, [pc, #52]	; (801d7e0 <ip4_reass+0x314>)
 801d7ac:	480a      	ldr	r0, [pc, #40]	; (801d7d8 <ip4_reass+0x30c>)
 801d7ae:	f001 fcfd 	bl	801f1ac <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801d7b2:	2100      	movs	r1, #0
 801d7b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801d7b6:	f7ff fcf1 	bl	801d19c <ip_reass_dequeue_datagram>
 801d7ba:	e014      	b.n	801d7e6 <ip4_reass+0x31a>
    goto nullreturn;
 801d7bc:	bf00      	nop
 801d7be:	e012      	b.n	801d7e6 <ip4_reass+0x31a>
    goto nullreturn;
 801d7c0:	bf00      	nop
 801d7c2:	e010      	b.n	801d7e6 <ip4_reass+0x31a>
      goto nullreturn;
 801d7c4:	bf00      	nop
 801d7c6:	e00e      	b.n	801d7e6 <ip4_reass+0x31a>
 801d7c8:	20006f4c 	.word	0x20006f4c
 801d7cc:	20006f48 	.word	0x20006f48
 801d7d0:	0802696c 	.word	0x0802696c
 801d7d4:	08026adc 	.word	0x08026adc
 801d7d8:	080269b4 	.word	0x080269b4
 801d7dc:	08026af8 	.word	0x08026af8
 801d7e0:	08026b04 	.word	0x08026b04
  }

nullreturn:
 801d7e4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801d7e6:	6878      	ldr	r0, [r7, #4]
 801d7e8:	f7f6 fef4 	bl	80145d4 <pbuf_free>
  return NULL;
 801d7ec:	2300      	movs	r3, #0
}
 801d7ee:	4618      	mov	r0, r3
 801d7f0:	3738      	adds	r7, #56	; 0x38
 801d7f2:	46bd      	mov	sp, r7
 801d7f4:	bd80      	pop	{r7, pc}
 801d7f6:	bf00      	nop

0801d7f8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801d7f8:	b580      	push	{r7, lr}
 801d7fa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801d7fc:	2005      	movs	r0, #5
 801d7fe:	f7f6 f857 	bl	80138b0 <memp_malloc>
 801d802:	4603      	mov	r3, r0
}
 801d804:	4618      	mov	r0, r3
 801d806:	bd80      	pop	{r7, pc}

0801d808 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801d808:	b580      	push	{r7, lr}
 801d80a:	b082      	sub	sp, #8
 801d80c:	af00      	add	r7, sp, #0
 801d80e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801d810:	687b      	ldr	r3, [r7, #4]
 801d812:	2b00      	cmp	r3, #0
 801d814:	d106      	bne.n	801d824 <ip_frag_free_pbuf_custom_ref+0x1c>
 801d816:	4b07      	ldr	r3, [pc, #28]	; (801d834 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801d818:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801d81c:	4906      	ldr	r1, [pc, #24]	; (801d838 <ip_frag_free_pbuf_custom_ref+0x30>)
 801d81e:	4807      	ldr	r0, [pc, #28]	; (801d83c <ip_frag_free_pbuf_custom_ref+0x34>)
 801d820:	f001 fcc4 	bl	801f1ac <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801d824:	6879      	ldr	r1, [r7, #4]
 801d826:	2005      	movs	r0, #5
 801d828:	f7f6 f894 	bl	8013954 <memp_free>
}
 801d82c:	bf00      	nop
 801d82e:	3708      	adds	r7, #8
 801d830:	46bd      	mov	sp, r7
 801d832:	bd80      	pop	{r7, pc}
 801d834:	0802696c 	.word	0x0802696c
 801d838:	08026b24 	.word	0x08026b24
 801d83c:	080269b4 	.word	0x080269b4

0801d840 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801d840:	b580      	push	{r7, lr}
 801d842:	b084      	sub	sp, #16
 801d844:	af00      	add	r7, sp, #0
 801d846:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801d848:	687b      	ldr	r3, [r7, #4]
 801d84a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801d84c:	68fb      	ldr	r3, [r7, #12]
 801d84e:	2b00      	cmp	r3, #0
 801d850:	d106      	bne.n	801d860 <ipfrag_free_pbuf_custom+0x20>
 801d852:	4b11      	ldr	r3, [pc, #68]	; (801d898 <ipfrag_free_pbuf_custom+0x58>)
 801d854:	f240 22ce 	movw	r2, #718	; 0x2ce
 801d858:	4910      	ldr	r1, [pc, #64]	; (801d89c <ipfrag_free_pbuf_custom+0x5c>)
 801d85a:	4811      	ldr	r0, [pc, #68]	; (801d8a0 <ipfrag_free_pbuf_custom+0x60>)
 801d85c:	f001 fca6 	bl	801f1ac <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801d860:	68fa      	ldr	r2, [r7, #12]
 801d862:	687b      	ldr	r3, [r7, #4]
 801d864:	429a      	cmp	r2, r3
 801d866:	d006      	beq.n	801d876 <ipfrag_free_pbuf_custom+0x36>
 801d868:	4b0b      	ldr	r3, [pc, #44]	; (801d898 <ipfrag_free_pbuf_custom+0x58>)
 801d86a:	f240 22cf 	movw	r2, #719	; 0x2cf
 801d86e:	490d      	ldr	r1, [pc, #52]	; (801d8a4 <ipfrag_free_pbuf_custom+0x64>)
 801d870:	480b      	ldr	r0, [pc, #44]	; (801d8a0 <ipfrag_free_pbuf_custom+0x60>)
 801d872:	f001 fc9b 	bl	801f1ac <iprintf>
  if (pcr->original != NULL) {
 801d876:	68fb      	ldr	r3, [r7, #12]
 801d878:	695b      	ldr	r3, [r3, #20]
 801d87a:	2b00      	cmp	r3, #0
 801d87c:	d004      	beq.n	801d888 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801d87e:	68fb      	ldr	r3, [r7, #12]
 801d880:	695b      	ldr	r3, [r3, #20]
 801d882:	4618      	mov	r0, r3
 801d884:	f7f6 fea6 	bl	80145d4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801d888:	68f8      	ldr	r0, [r7, #12]
 801d88a:	f7ff ffbd 	bl	801d808 <ip_frag_free_pbuf_custom_ref>
}
 801d88e:	bf00      	nop
 801d890:	3710      	adds	r7, #16
 801d892:	46bd      	mov	sp, r7
 801d894:	bd80      	pop	{r7, pc}
 801d896:	bf00      	nop
 801d898:	0802696c 	.word	0x0802696c
 801d89c:	08026b30 	.word	0x08026b30
 801d8a0:	080269b4 	.word	0x080269b4
 801d8a4:	08026b3c 	.word	0x08026b3c

0801d8a8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801d8a8:	b580      	push	{r7, lr}
 801d8aa:	b094      	sub	sp, #80	; 0x50
 801d8ac:	af02      	add	r7, sp, #8
 801d8ae:	60f8      	str	r0, [r7, #12]
 801d8b0:	60b9      	str	r1, [r7, #8]
 801d8b2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801d8b4:	2300      	movs	r3, #0
 801d8b6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801d8ba:	68bb      	ldr	r3, [r7, #8]
 801d8bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801d8be:	3b14      	subs	r3, #20
 801d8c0:	2b00      	cmp	r3, #0
 801d8c2:	da00      	bge.n	801d8c6 <ip4_frag+0x1e>
 801d8c4:	3307      	adds	r3, #7
 801d8c6:	10db      	asrs	r3, r3, #3
 801d8c8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801d8ca:	2314      	movs	r3, #20
 801d8cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801d8ce:	68fb      	ldr	r3, [r7, #12]
 801d8d0:	685b      	ldr	r3, [r3, #4]
 801d8d2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801d8d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d8d6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801d8d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d8da:	781b      	ldrb	r3, [r3, #0]
 801d8dc:	f003 030f 	and.w	r3, r3, #15
 801d8e0:	b2db      	uxtb	r3, r3
 801d8e2:	009b      	lsls	r3, r3, #2
 801d8e4:	b2db      	uxtb	r3, r3
 801d8e6:	2b14      	cmp	r3, #20
 801d8e8:	d002      	beq.n	801d8f0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801d8ea:	f06f 0305 	mvn.w	r3, #5
 801d8ee:	e110      	b.n	801db12 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801d8f0:	68fb      	ldr	r3, [r7, #12]
 801d8f2:	895b      	ldrh	r3, [r3, #10]
 801d8f4:	2b13      	cmp	r3, #19
 801d8f6:	d809      	bhi.n	801d90c <ip4_frag+0x64>
 801d8f8:	4b88      	ldr	r3, [pc, #544]	; (801db1c <ip4_frag+0x274>)
 801d8fa:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801d8fe:	4988      	ldr	r1, [pc, #544]	; (801db20 <ip4_frag+0x278>)
 801d900:	4888      	ldr	r0, [pc, #544]	; (801db24 <ip4_frag+0x27c>)
 801d902:	f001 fc53 	bl	801f1ac <iprintf>
 801d906:	f06f 0305 	mvn.w	r3, #5
 801d90a:	e102      	b.n	801db12 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801d90c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d90e:	88db      	ldrh	r3, [r3, #6]
 801d910:	b29b      	uxth	r3, r3
 801d912:	4618      	mov	r0, r3
 801d914:	f7f5 fb16 	bl	8012f44 <lwip_htons>
 801d918:	4603      	mov	r3, r0
 801d91a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801d91c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d91e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d922:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801d926:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801d928:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801d92c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801d92e:	68fb      	ldr	r3, [r7, #12]
 801d930:	891b      	ldrh	r3, [r3, #8]
 801d932:	3b14      	subs	r3, #20
 801d934:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801d938:	e0e1      	b.n	801dafe <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801d93a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801d93c:	00db      	lsls	r3, r3, #3
 801d93e:	b29b      	uxth	r3, r3
 801d940:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801d944:	4293      	cmp	r3, r2
 801d946:	bf28      	it	cs
 801d948:	4613      	movcs	r3, r2
 801d94a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801d94c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d950:	2114      	movs	r1, #20
 801d952:	200e      	movs	r0, #14
 801d954:	f7f6 fb5a 	bl	801400c <pbuf_alloc>
 801d958:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801d95a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d95c:	2b00      	cmp	r3, #0
 801d95e:	f000 80d5 	beq.w	801db0c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801d962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d964:	895b      	ldrh	r3, [r3, #10]
 801d966:	2b13      	cmp	r3, #19
 801d968:	d806      	bhi.n	801d978 <ip4_frag+0xd0>
 801d96a:	4b6c      	ldr	r3, [pc, #432]	; (801db1c <ip4_frag+0x274>)
 801d96c:	f44f 7249 	mov.w	r2, #804	; 0x324
 801d970:	496d      	ldr	r1, [pc, #436]	; (801db28 <ip4_frag+0x280>)
 801d972:	486c      	ldr	r0, [pc, #432]	; (801db24 <ip4_frag+0x27c>)
 801d974:	f001 fc1a 	bl	801f1ac <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801d978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d97a:	685b      	ldr	r3, [r3, #4]
 801d97c:	2214      	movs	r2, #20
 801d97e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d980:	4618      	mov	r0, r3
 801d982:	f000 fcbf 	bl	801e304 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801d986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d988:	685b      	ldr	r3, [r3, #4]
 801d98a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801d98c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801d98e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801d992:	e064      	b.n	801da5e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801d994:	68fb      	ldr	r3, [r7, #12]
 801d996:	895a      	ldrh	r2, [r3, #10]
 801d998:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d99a:	1ad3      	subs	r3, r2, r3
 801d99c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801d99e:	68fb      	ldr	r3, [r7, #12]
 801d9a0:	895b      	ldrh	r3, [r3, #10]
 801d9a2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801d9a4:	429a      	cmp	r2, r3
 801d9a6:	d906      	bls.n	801d9b6 <ip4_frag+0x10e>
 801d9a8:	4b5c      	ldr	r3, [pc, #368]	; (801db1c <ip4_frag+0x274>)
 801d9aa:	f240 322d 	movw	r2, #813	; 0x32d
 801d9ae:	495f      	ldr	r1, [pc, #380]	; (801db2c <ip4_frag+0x284>)
 801d9b0:	485c      	ldr	r0, [pc, #368]	; (801db24 <ip4_frag+0x27c>)
 801d9b2:	f001 fbfb 	bl	801f1ac <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801d9b6:	8bfa      	ldrh	r2, [r7, #30]
 801d9b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801d9bc:	4293      	cmp	r3, r2
 801d9be:	bf28      	it	cs
 801d9c0:	4613      	movcs	r3, r2
 801d9c2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801d9c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801d9ca:	2b00      	cmp	r3, #0
 801d9cc:	d105      	bne.n	801d9da <ip4_frag+0x132>
        poff = 0;
 801d9ce:	2300      	movs	r3, #0
 801d9d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801d9d2:	68fb      	ldr	r3, [r7, #12]
 801d9d4:	681b      	ldr	r3, [r3, #0]
 801d9d6:	60fb      	str	r3, [r7, #12]
        continue;
 801d9d8:	e041      	b.n	801da5e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801d9da:	f7ff ff0d 	bl	801d7f8 <ip_frag_alloc_pbuf_custom_ref>
 801d9de:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801d9e0:	69bb      	ldr	r3, [r7, #24]
 801d9e2:	2b00      	cmp	r3, #0
 801d9e4:	d103      	bne.n	801d9ee <ip4_frag+0x146>
        pbuf_free(rambuf);
 801d9e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801d9e8:	f7f6 fdf4 	bl	80145d4 <pbuf_free>
        goto memerr;
 801d9ec:	e08f      	b.n	801db0e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801d9ee:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801d9f0:	68fb      	ldr	r3, [r7, #12]
 801d9f2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801d9f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801d9f6:	4413      	add	r3, r2
 801d9f8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801d9fc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801da00:	9201      	str	r2, [sp, #4]
 801da02:	9300      	str	r3, [sp, #0]
 801da04:	4603      	mov	r3, r0
 801da06:	2241      	movs	r2, #65	; 0x41
 801da08:	2000      	movs	r0, #0
 801da0a:	f7f6 fc29 	bl	8014260 <pbuf_alloced_custom>
 801da0e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801da10:	697b      	ldr	r3, [r7, #20]
 801da12:	2b00      	cmp	r3, #0
 801da14:	d106      	bne.n	801da24 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801da16:	69b8      	ldr	r0, [r7, #24]
 801da18:	f7ff fef6 	bl	801d808 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801da1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801da1e:	f7f6 fdd9 	bl	80145d4 <pbuf_free>
        goto memerr;
 801da22:	e074      	b.n	801db0e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801da24:	68f8      	ldr	r0, [r7, #12]
 801da26:	f7f6 fe7b 	bl	8014720 <pbuf_ref>
      pcr->original = p;
 801da2a:	69bb      	ldr	r3, [r7, #24]
 801da2c:	68fa      	ldr	r2, [r7, #12]
 801da2e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801da30:	69bb      	ldr	r3, [r7, #24]
 801da32:	4a3f      	ldr	r2, [pc, #252]	; (801db30 <ip4_frag+0x288>)
 801da34:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801da36:	6979      	ldr	r1, [r7, #20]
 801da38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801da3a:	f7f6 fe99 	bl	8014770 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801da3e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801da42:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801da46:	1ad3      	subs	r3, r2, r3
 801da48:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801da4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801da50:	2b00      	cmp	r3, #0
 801da52:	d004      	beq.n	801da5e <ip4_frag+0x1b6>
        poff = 0;
 801da54:	2300      	movs	r3, #0
 801da56:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801da58:	68fb      	ldr	r3, [r7, #12]
 801da5a:	681b      	ldr	r3, [r3, #0]
 801da5c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801da5e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801da62:	2b00      	cmp	r3, #0
 801da64:	d196      	bne.n	801d994 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801da66:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801da68:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801da6c:	4413      	add	r3, r2
 801da6e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801da70:	68bb      	ldr	r3, [r7, #8]
 801da72:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801da74:	f1a3 0213 	sub.w	r2, r3, #19
 801da78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801da7c:	429a      	cmp	r2, r3
 801da7e:	bfcc      	ite	gt
 801da80:	2301      	movgt	r3, #1
 801da82:	2300      	movle	r3, #0
 801da84:	b2db      	uxtb	r3, r3
 801da86:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801da88:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801da8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801da90:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801da92:	6a3b      	ldr	r3, [r7, #32]
 801da94:	2b00      	cmp	r3, #0
 801da96:	d002      	beq.n	801da9e <ip4_frag+0x1f6>
 801da98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801da9a:	2b00      	cmp	r3, #0
 801da9c:	d003      	beq.n	801daa6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801da9e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801daa0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801daa4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801daa6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801daa8:	4618      	mov	r0, r3
 801daaa:	f7f5 fa4b 	bl	8012f44 <lwip_htons>
 801daae:	4603      	mov	r3, r0
 801dab0:	461a      	mov	r2, r3
 801dab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dab4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801dab6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801dab8:	3314      	adds	r3, #20
 801daba:	b29b      	uxth	r3, r3
 801dabc:	4618      	mov	r0, r3
 801dabe:	f7f5 fa41 	bl	8012f44 <lwip_htons>
 801dac2:	4603      	mov	r3, r0
 801dac4:	461a      	mov	r2, r3
 801dac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dac8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801daca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dacc:	2200      	movs	r2, #0
 801dace:	729a      	strb	r2, [r3, #10]
 801dad0:	2200      	movs	r2, #0
 801dad2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801dad4:	68bb      	ldr	r3, [r7, #8]
 801dad6:	695b      	ldr	r3, [r3, #20]
 801dad8:	687a      	ldr	r2, [r7, #4]
 801dada:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801dadc:	68b8      	ldr	r0, [r7, #8]
 801dade:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801dae0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801dae2:	f7f6 fd77 	bl	80145d4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801dae6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801daea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801daec:	1ad3      	subs	r3, r2, r3
 801daee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801daf2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801daf6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801daf8:	4413      	add	r3, r2
 801dafa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801dafe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801db02:	2b00      	cmp	r3, #0
 801db04:	f47f af19 	bne.w	801d93a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801db08:	2300      	movs	r3, #0
 801db0a:	e002      	b.n	801db12 <ip4_frag+0x26a>
      goto memerr;
 801db0c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801db0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801db12:	4618      	mov	r0, r3
 801db14:	3748      	adds	r7, #72	; 0x48
 801db16:	46bd      	mov	sp, r7
 801db18:	bd80      	pop	{r7, pc}
 801db1a:	bf00      	nop
 801db1c:	0802696c 	.word	0x0802696c
 801db20:	08026b48 	.word	0x08026b48
 801db24:	080269b4 	.word	0x080269b4
 801db28:	08026b64 	.word	0x08026b64
 801db2c:	08026b84 	.word	0x08026b84
 801db30:	0801d841 	.word	0x0801d841

0801db34 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801db34:	b580      	push	{r7, lr}
 801db36:	b086      	sub	sp, #24
 801db38:	af00      	add	r7, sp, #0
 801db3a:	6078      	str	r0, [r7, #4]
 801db3c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801db3e:	230e      	movs	r3, #14
 801db40:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801db42:	687b      	ldr	r3, [r7, #4]
 801db44:	895b      	ldrh	r3, [r3, #10]
 801db46:	2b0e      	cmp	r3, #14
 801db48:	d96e      	bls.n	801dc28 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801db4a:	687b      	ldr	r3, [r7, #4]
 801db4c:	7bdb      	ldrb	r3, [r3, #15]
 801db4e:	2b00      	cmp	r3, #0
 801db50:	d106      	bne.n	801db60 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801db52:	683b      	ldr	r3, [r7, #0]
 801db54:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801db58:	3301      	adds	r3, #1
 801db5a:	b2da      	uxtb	r2, r3
 801db5c:	687b      	ldr	r3, [r7, #4]
 801db5e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801db60:	687b      	ldr	r3, [r7, #4]
 801db62:	685b      	ldr	r3, [r3, #4]
 801db64:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801db66:	693b      	ldr	r3, [r7, #16]
 801db68:	7b1a      	ldrb	r2, [r3, #12]
 801db6a:	7b5b      	ldrb	r3, [r3, #13]
 801db6c:	021b      	lsls	r3, r3, #8
 801db6e:	4313      	orrs	r3, r2
 801db70:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801db72:	693b      	ldr	r3, [r7, #16]
 801db74:	781b      	ldrb	r3, [r3, #0]
 801db76:	f003 0301 	and.w	r3, r3, #1
 801db7a:	2b00      	cmp	r3, #0
 801db7c:	d023      	beq.n	801dbc6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801db7e:	693b      	ldr	r3, [r7, #16]
 801db80:	781b      	ldrb	r3, [r3, #0]
 801db82:	2b01      	cmp	r3, #1
 801db84:	d10f      	bne.n	801dba6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801db86:	693b      	ldr	r3, [r7, #16]
 801db88:	785b      	ldrb	r3, [r3, #1]
 801db8a:	2b00      	cmp	r3, #0
 801db8c:	d11b      	bne.n	801dbc6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801db8e:	693b      	ldr	r3, [r7, #16]
 801db90:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801db92:	2b5e      	cmp	r3, #94	; 0x5e
 801db94:	d117      	bne.n	801dbc6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801db96:	687b      	ldr	r3, [r7, #4]
 801db98:	7b5b      	ldrb	r3, [r3, #13]
 801db9a:	f043 0310 	orr.w	r3, r3, #16
 801db9e:	b2da      	uxtb	r2, r3
 801dba0:	687b      	ldr	r3, [r7, #4]
 801dba2:	735a      	strb	r2, [r3, #13]
 801dba4:	e00f      	b.n	801dbc6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801dba6:	693b      	ldr	r3, [r7, #16]
 801dba8:	2206      	movs	r2, #6
 801dbaa:	4928      	ldr	r1, [pc, #160]	; (801dc4c <ethernet_input+0x118>)
 801dbac:	4618      	mov	r0, r3
 801dbae:	f000 fb9b 	bl	801e2e8 <memcmp>
 801dbb2:	4603      	mov	r3, r0
 801dbb4:	2b00      	cmp	r3, #0
 801dbb6:	d106      	bne.n	801dbc6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801dbb8:	687b      	ldr	r3, [r7, #4]
 801dbba:	7b5b      	ldrb	r3, [r3, #13]
 801dbbc:	f043 0308 	orr.w	r3, r3, #8
 801dbc0:	b2da      	uxtb	r2, r3
 801dbc2:	687b      	ldr	r3, [r7, #4]
 801dbc4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801dbc6:	89fb      	ldrh	r3, [r7, #14]
 801dbc8:	2b08      	cmp	r3, #8
 801dbca:	d003      	beq.n	801dbd4 <ethernet_input+0xa0>
 801dbcc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801dbd0:	d014      	beq.n	801dbfc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801dbd2:	e032      	b.n	801dc3a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801dbd4:	683b      	ldr	r3, [r7, #0]
 801dbd6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801dbda:	f003 0308 	and.w	r3, r3, #8
 801dbde:	2b00      	cmp	r3, #0
 801dbe0:	d024      	beq.n	801dc2c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801dbe2:	8afb      	ldrh	r3, [r7, #22]
 801dbe4:	4619      	mov	r1, r3
 801dbe6:	6878      	ldr	r0, [r7, #4]
 801dbe8:	f7f6 fc6e 	bl	80144c8 <pbuf_remove_header>
 801dbec:	4603      	mov	r3, r0
 801dbee:	2b00      	cmp	r3, #0
 801dbf0:	d11e      	bne.n	801dc30 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801dbf2:	6839      	ldr	r1, [r7, #0]
 801dbf4:	6878      	ldr	r0, [r7, #4]
 801dbf6:	f7fe ff27 	bl	801ca48 <ip4_input>
      break;
 801dbfa:	e013      	b.n	801dc24 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801dbfc:	683b      	ldr	r3, [r7, #0]
 801dbfe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801dc02:	f003 0308 	and.w	r3, r3, #8
 801dc06:	2b00      	cmp	r3, #0
 801dc08:	d014      	beq.n	801dc34 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801dc0a:	8afb      	ldrh	r3, [r7, #22]
 801dc0c:	4619      	mov	r1, r3
 801dc0e:	6878      	ldr	r0, [r7, #4]
 801dc10:	f7f6 fc5a 	bl	80144c8 <pbuf_remove_header>
 801dc14:	4603      	mov	r3, r0
 801dc16:	2b00      	cmp	r3, #0
 801dc18:	d10e      	bne.n	801dc38 <ethernet_input+0x104>
        etharp_input(p, netif);
 801dc1a:	6839      	ldr	r1, [r7, #0]
 801dc1c:	6878      	ldr	r0, [r7, #4]
 801dc1e:	f7fe f8c7 	bl	801bdb0 <etharp_input>
      break;
 801dc22:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801dc24:	2300      	movs	r3, #0
 801dc26:	e00c      	b.n	801dc42 <ethernet_input+0x10e>
    goto free_and_return;
 801dc28:	bf00      	nop
 801dc2a:	e006      	b.n	801dc3a <ethernet_input+0x106>
        goto free_and_return;
 801dc2c:	bf00      	nop
 801dc2e:	e004      	b.n	801dc3a <ethernet_input+0x106>
        goto free_and_return;
 801dc30:	bf00      	nop
 801dc32:	e002      	b.n	801dc3a <ethernet_input+0x106>
        goto free_and_return;
 801dc34:	bf00      	nop
 801dc36:	e000      	b.n	801dc3a <ethernet_input+0x106>
        goto free_and_return;
 801dc38:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801dc3a:	6878      	ldr	r0, [r7, #4]
 801dc3c:	f7f6 fcca 	bl	80145d4 <pbuf_free>
  return ERR_OK;
 801dc40:	2300      	movs	r3, #0
}
 801dc42:	4618      	mov	r0, r3
 801dc44:	3718      	adds	r7, #24
 801dc46:	46bd      	mov	sp, r7
 801dc48:	bd80      	pop	{r7, pc}
 801dc4a:	bf00      	nop
 801dc4c:	08026f24 	.word	0x08026f24

0801dc50 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801dc50:	b580      	push	{r7, lr}
 801dc52:	b086      	sub	sp, #24
 801dc54:	af00      	add	r7, sp, #0
 801dc56:	60f8      	str	r0, [r7, #12]
 801dc58:	60b9      	str	r1, [r7, #8]
 801dc5a:	607a      	str	r2, [r7, #4]
 801dc5c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801dc5e:	8c3b      	ldrh	r3, [r7, #32]
 801dc60:	4618      	mov	r0, r3
 801dc62:	f7f5 f96f 	bl	8012f44 <lwip_htons>
 801dc66:	4603      	mov	r3, r0
 801dc68:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801dc6a:	210e      	movs	r1, #14
 801dc6c:	68b8      	ldr	r0, [r7, #8]
 801dc6e:	f7f6 fc1b 	bl	80144a8 <pbuf_add_header>
 801dc72:	4603      	mov	r3, r0
 801dc74:	2b00      	cmp	r3, #0
 801dc76:	d125      	bne.n	801dcc4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801dc78:	68bb      	ldr	r3, [r7, #8]
 801dc7a:	685b      	ldr	r3, [r3, #4]
 801dc7c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801dc7e:	693b      	ldr	r3, [r7, #16]
 801dc80:	8afa      	ldrh	r2, [r7, #22]
 801dc82:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801dc84:	693b      	ldr	r3, [r7, #16]
 801dc86:	2206      	movs	r2, #6
 801dc88:	6839      	ldr	r1, [r7, #0]
 801dc8a:	4618      	mov	r0, r3
 801dc8c:	f000 fb3a 	bl	801e304 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801dc90:	693b      	ldr	r3, [r7, #16]
 801dc92:	3306      	adds	r3, #6
 801dc94:	2206      	movs	r2, #6
 801dc96:	6879      	ldr	r1, [r7, #4]
 801dc98:	4618      	mov	r0, r3
 801dc9a:	f000 fb33 	bl	801e304 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801dc9e:	68fb      	ldr	r3, [r7, #12]
 801dca0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801dca4:	2b06      	cmp	r3, #6
 801dca6:	d006      	beq.n	801dcb6 <ethernet_output+0x66>
 801dca8:	4b0a      	ldr	r3, [pc, #40]	; (801dcd4 <ethernet_output+0x84>)
 801dcaa:	f44f 7299 	mov.w	r2, #306	; 0x132
 801dcae:	490a      	ldr	r1, [pc, #40]	; (801dcd8 <ethernet_output+0x88>)
 801dcb0:	480a      	ldr	r0, [pc, #40]	; (801dcdc <ethernet_output+0x8c>)
 801dcb2:	f001 fa7b 	bl	801f1ac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801dcb6:	68fb      	ldr	r3, [r7, #12]
 801dcb8:	699b      	ldr	r3, [r3, #24]
 801dcba:	68b9      	ldr	r1, [r7, #8]
 801dcbc:	68f8      	ldr	r0, [r7, #12]
 801dcbe:	4798      	blx	r3
 801dcc0:	4603      	mov	r3, r0
 801dcc2:	e002      	b.n	801dcca <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801dcc4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801dcc6:	f06f 0301 	mvn.w	r3, #1
}
 801dcca:	4618      	mov	r0, r3
 801dccc:	3718      	adds	r7, #24
 801dcce:	46bd      	mov	sp, r7
 801dcd0:	bd80      	pop	{r7, pc}
 801dcd2:	bf00      	nop
 801dcd4:	08026b94 	.word	0x08026b94
 801dcd8:	08026bcc 	.word	0x08026bcc
 801dcdc:	08026c00 	.word	0x08026c00

0801dce0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801dce0:	b580      	push	{r7, lr}
 801dce2:	b086      	sub	sp, #24
 801dce4:	af00      	add	r7, sp, #0
 801dce6:	6078      	str	r0, [r7, #4]
 801dce8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801dcea:	683b      	ldr	r3, [r7, #0]
 801dcec:	60bb      	str	r3, [r7, #8]
 801dcee:	2304      	movs	r3, #4
 801dcf0:	60fb      	str	r3, [r7, #12]
 801dcf2:	2300      	movs	r3, #0
 801dcf4:	613b      	str	r3, [r7, #16]
 801dcf6:	2300      	movs	r3, #0
 801dcf8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801dcfa:	f107 0308 	add.w	r3, r7, #8
 801dcfe:	2100      	movs	r1, #0
 801dd00:	4618      	mov	r0, r3
 801dd02:	f7f0 f990 	bl	800e026 <osMessageCreate>
 801dd06:	4602      	mov	r2, r0
 801dd08:	687b      	ldr	r3, [r7, #4]
 801dd0a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801dd0c:	687b      	ldr	r3, [r7, #4]
 801dd0e:	681b      	ldr	r3, [r3, #0]
 801dd10:	2b00      	cmp	r3, #0
 801dd12:	d102      	bne.n	801dd1a <sys_mbox_new+0x3a>
    return ERR_MEM;
 801dd14:	f04f 33ff 	mov.w	r3, #4294967295
 801dd18:	e000      	b.n	801dd1c <sys_mbox_new+0x3c>

  return ERR_OK;
 801dd1a:	2300      	movs	r3, #0
}
 801dd1c:	4618      	mov	r0, r3
 801dd1e:	3718      	adds	r7, #24
 801dd20:	46bd      	mov	sp, r7
 801dd22:	bd80      	pop	{r7, pc}

0801dd24 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 801dd24:	b580      	push	{r7, lr}
 801dd26:	b082      	sub	sp, #8
 801dd28:	af00      	add	r7, sp, #0
 801dd2a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 801dd2c:	687b      	ldr	r3, [r7, #4]
 801dd2e:	681b      	ldr	r3, [r3, #0]
 801dd30:	4618      	mov	r0, r3
 801dd32:	f7f0 fb8a 	bl	800e44a <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 801dd36:	687b      	ldr	r3, [r7, #4]
 801dd38:	681b      	ldr	r3, [r3, #0]
 801dd3a:	4618      	mov	r0, r3
 801dd3c:	f7f0 fb9b 	bl	800e476 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 801dd40:	bf00      	nop
 801dd42:	3708      	adds	r7, #8
 801dd44:	46bd      	mov	sp, r7
 801dd46:	bd80      	pop	{r7, pc}

0801dd48 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801dd48:	b580      	push	{r7, lr}
 801dd4a:	b084      	sub	sp, #16
 801dd4c:	af00      	add	r7, sp, #0
 801dd4e:	6078      	str	r0, [r7, #4]
 801dd50:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801dd52:	687b      	ldr	r3, [r7, #4]
 801dd54:	681b      	ldr	r3, [r3, #0]
 801dd56:	6839      	ldr	r1, [r7, #0]
 801dd58:	2200      	movs	r2, #0
 801dd5a:	4618      	mov	r0, r3
 801dd5c:	f7f0 f98c 	bl	800e078 <osMessagePut>
 801dd60:	4603      	mov	r3, r0
 801dd62:	2b00      	cmp	r3, #0
 801dd64:	d102      	bne.n	801dd6c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801dd66:	2300      	movs	r3, #0
 801dd68:	73fb      	strb	r3, [r7, #15]
 801dd6a:	e001      	b.n	801dd70 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801dd6c:	23ff      	movs	r3, #255	; 0xff
 801dd6e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801dd70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801dd74:	4618      	mov	r0, r3
 801dd76:	3710      	adds	r7, #16
 801dd78:	46bd      	mov	sp, r7
 801dd7a:	bd80      	pop	{r7, pc}

0801dd7c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801dd7c:	b580      	push	{r7, lr}
 801dd7e:	b08c      	sub	sp, #48	; 0x30
 801dd80:	af00      	add	r7, sp, #0
 801dd82:	61f8      	str	r0, [r7, #28]
 801dd84:	61b9      	str	r1, [r7, #24]
 801dd86:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801dd88:	f7ef fe77 	bl	800da7a <osKernelSysTick>
 801dd8c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801dd8e:	697b      	ldr	r3, [r7, #20]
 801dd90:	2b00      	cmp	r3, #0
 801dd92:	d017      	beq.n	801ddc4 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801dd94:	69fb      	ldr	r3, [r7, #28]
 801dd96:	6819      	ldr	r1, [r3, #0]
 801dd98:	f107 0320 	add.w	r3, r7, #32
 801dd9c:	697a      	ldr	r2, [r7, #20]
 801dd9e:	4618      	mov	r0, r3
 801dda0:	f7f0 f9aa 	bl	800e0f8 <osMessageGet>

    if(event.status == osEventMessage)
 801dda4:	6a3b      	ldr	r3, [r7, #32]
 801dda6:	2b10      	cmp	r3, #16
 801dda8:	d109      	bne.n	801ddbe <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801ddaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddac:	461a      	mov	r2, r3
 801ddae:	69bb      	ldr	r3, [r7, #24]
 801ddb0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801ddb2:	f7ef fe62 	bl	800da7a <osKernelSysTick>
 801ddb6:	4602      	mov	r2, r0
 801ddb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ddba:	1ad3      	subs	r3, r2, r3
 801ddbc:	e019      	b.n	801ddf2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801ddbe:	f04f 33ff 	mov.w	r3, #4294967295
 801ddc2:	e016      	b.n	801ddf2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801ddc4:	69fb      	ldr	r3, [r7, #28]
 801ddc6:	6819      	ldr	r1, [r3, #0]
 801ddc8:	463b      	mov	r3, r7
 801ddca:	f04f 32ff 	mov.w	r2, #4294967295
 801ddce:	4618      	mov	r0, r3
 801ddd0:	f7f0 f992 	bl	800e0f8 <osMessageGet>
 801ddd4:	f107 0320 	add.w	r3, r7, #32
 801ddd8:	463a      	mov	r2, r7
 801ddda:	ca07      	ldmia	r2, {r0, r1, r2}
 801dddc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801dde0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dde2:	461a      	mov	r2, r3
 801dde4:	69bb      	ldr	r3, [r7, #24]
 801dde6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801dde8:	f7ef fe47 	bl	800da7a <osKernelSysTick>
 801ddec:	4602      	mov	r2, r0
 801ddee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ddf0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801ddf2:	4618      	mov	r0, r3
 801ddf4:	3730      	adds	r7, #48	; 0x30
 801ddf6:	46bd      	mov	sp, r7
 801ddf8:	bd80      	pop	{r7, pc}

0801ddfa <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801ddfa:	b580      	push	{r7, lr}
 801ddfc:	b086      	sub	sp, #24
 801ddfe:	af00      	add	r7, sp, #0
 801de00:	6078      	str	r0, [r7, #4]
 801de02:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801de04:	687b      	ldr	r3, [r7, #4]
 801de06:	6819      	ldr	r1, [r3, #0]
 801de08:	f107 030c 	add.w	r3, r7, #12
 801de0c:	2200      	movs	r2, #0
 801de0e:	4618      	mov	r0, r3
 801de10:	f7f0 f972 	bl	800e0f8 <osMessageGet>

  if(event.status == osEventMessage)
 801de14:	68fb      	ldr	r3, [r7, #12]
 801de16:	2b10      	cmp	r3, #16
 801de18:	d105      	bne.n	801de26 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801de1a:	693b      	ldr	r3, [r7, #16]
 801de1c:	461a      	mov	r2, r3
 801de1e:	683b      	ldr	r3, [r7, #0]
 801de20:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801de22:	2300      	movs	r3, #0
 801de24:	e001      	b.n	801de2a <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801de26:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801de2a:	4618      	mov	r0, r3
 801de2c:	3718      	adds	r7, #24
 801de2e:	46bd      	mov	sp, r7
 801de30:	bd80      	pop	{r7, pc}

0801de32 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801de32:	b480      	push	{r7}
 801de34:	b083      	sub	sp, #12
 801de36:	af00      	add	r7, sp, #0
 801de38:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801de3a:	687b      	ldr	r3, [r7, #4]
 801de3c:	681b      	ldr	r3, [r3, #0]
 801de3e:	2b00      	cmp	r3, #0
 801de40:	d101      	bne.n	801de46 <sys_mbox_valid+0x14>
    return 0;
 801de42:	2300      	movs	r3, #0
 801de44:	e000      	b.n	801de48 <sys_mbox_valid+0x16>
  else
    return 1;
 801de46:	2301      	movs	r3, #1
}
 801de48:	4618      	mov	r0, r3
 801de4a:	370c      	adds	r7, #12
 801de4c:	46bd      	mov	sp, r7
 801de4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de52:	4770      	bx	lr

0801de54 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801de54:	b480      	push	{r7}
 801de56:	b083      	sub	sp, #12
 801de58:	af00      	add	r7, sp, #0
 801de5a:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801de5c:	687b      	ldr	r3, [r7, #4]
 801de5e:	2200      	movs	r2, #0
 801de60:	601a      	str	r2, [r3, #0]
}
 801de62:	bf00      	nop
 801de64:	370c      	adds	r7, #12
 801de66:	46bd      	mov	sp, r7
 801de68:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de6c:	4770      	bx	lr

0801de6e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801de6e:	b580      	push	{r7, lr}
 801de70:	b084      	sub	sp, #16
 801de72:	af00      	add	r7, sp, #0
 801de74:	6078      	str	r0, [r7, #4]
 801de76:	460b      	mov	r3, r1
 801de78:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801de7a:	2300      	movs	r3, #0
 801de7c:	60bb      	str	r3, [r7, #8]
 801de7e:	2300      	movs	r3, #0
 801de80:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801de82:	f107 0308 	add.w	r3, r7, #8
 801de86:	2101      	movs	r1, #1
 801de88:	4618      	mov	r0, r3
 801de8a:	f7ef ff03 	bl	800dc94 <osSemaphoreCreate>
 801de8e:	4602      	mov	r2, r0
 801de90:	687b      	ldr	r3, [r7, #4]
 801de92:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801de94:	687b      	ldr	r3, [r7, #4]
 801de96:	681b      	ldr	r3, [r3, #0]
 801de98:	2b00      	cmp	r3, #0
 801de9a:	d102      	bne.n	801dea2 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801de9c:	f04f 33ff 	mov.w	r3, #4294967295
 801dea0:	e009      	b.n	801deb6 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801dea2:	78fb      	ldrb	r3, [r7, #3]
 801dea4:	2b00      	cmp	r3, #0
 801dea6:	d105      	bne.n	801deb4 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801dea8:	687b      	ldr	r3, [r7, #4]
 801deaa:	681b      	ldr	r3, [r3, #0]
 801deac:	2100      	movs	r1, #0
 801deae:	4618      	mov	r0, r3
 801deb0:	f7ef ff22 	bl	800dcf8 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801deb4:	2300      	movs	r3, #0
}
 801deb6:	4618      	mov	r0, r3
 801deb8:	3710      	adds	r7, #16
 801deba:	46bd      	mov	sp, r7
 801debc:	bd80      	pop	{r7, pc}

0801debe <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801debe:	b580      	push	{r7, lr}
 801dec0:	b084      	sub	sp, #16
 801dec2:	af00      	add	r7, sp, #0
 801dec4:	6078      	str	r0, [r7, #4]
 801dec6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801dec8:	f7ef fdd7 	bl	800da7a <osKernelSysTick>
 801decc:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801dece:	683b      	ldr	r3, [r7, #0]
 801ded0:	2b00      	cmp	r3, #0
 801ded2:	d011      	beq.n	801def8 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801ded4:	687b      	ldr	r3, [r7, #4]
 801ded6:	681b      	ldr	r3, [r3, #0]
 801ded8:	6839      	ldr	r1, [r7, #0]
 801deda:	4618      	mov	r0, r3
 801dedc:	f7ef ff0c 	bl	800dcf8 <osSemaphoreWait>
 801dee0:	4603      	mov	r3, r0
 801dee2:	2b00      	cmp	r3, #0
 801dee4:	d105      	bne.n	801def2 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801dee6:	f7ef fdc8 	bl	800da7a <osKernelSysTick>
 801deea:	4602      	mov	r2, r0
 801deec:	68fb      	ldr	r3, [r7, #12]
 801deee:	1ad3      	subs	r3, r2, r3
 801def0:	e012      	b.n	801df18 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801def2:	f04f 33ff 	mov.w	r3, #4294967295
 801def6:	e00f      	b.n	801df18 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801def8:	bf00      	nop
 801defa:	687b      	ldr	r3, [r7, #4]
 801defc:	681b      	ldr	r3, [r3, #0]
 801defe:	f04f 31ff 	mov.w	r1, #4294967295
 801df02:	4618      	mov	r0, r3
 801df04:	f7ef fef8 	bl	800dcf8 <osSemaphoreWait>
 801df08:	4603      	mov	r3, r0
 801df0a:	2b00      	cmp	r3, #0
 801df0c:	d1f5      	bne.n	801defa <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801df0e:	f7ef fdb4 	bl	800da7a <osKernelSysTick>
 801df12:	4602      	mov	r2, r0
 801df14:	68fb      	ldr	r3, [r7, #12]
 801df16:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801df18:	4618      	mov	r0, r3
 801df1a:	3710      	adds	r7, #16
 801df1c:	46bd      	mov	sp, r7
 801df1e:	bd80      	pop	{r7, pc}

0801df20 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801df20:	b580      	push	{r7, lr}
 801df22:	b082      	sub	sp, #8
 801df24:	af00      	add	r7, sp, #0
 801df26:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801df28:	687b      	ldr	r3, [r7, #4]
 801df2a:	681b      	ldr	r3, [r3, #0]
 801df2c:	4618      	mov	r0, r3
 801df2e:	f7ef ff31 	bl	800dd94 <osSemaphoreRelease>
}
 801df32:	bf00      	nop
 801df34:	3708      	adds	r7, #8
 801df36:	46bd      	mov	sp, r7
 801df38:	bd80      	pop	{r7, pc}

0801df3a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801df3a:	b580      	push	{r7, lr}
 801df3c:	b082      	sub	sp, #8
 801df3e:	af00      	add	r7, sp, #0
 801df40:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801df42:	687b      	ldr	r3, [r7, #4]
 801df44:	681b      	ldr	r3, [r3, #0]
 801df46:	4618      	mov	r0, r3
 801df48:	f7ef ff5a 	bl	800de00 <osSemaphoreDelete>
}
 801df4c:	bf00      	nop
 801df4e:	3708      	adds	r7, #8
 801df50:	46bd      	mov	sp, r7
 801df52:	bd80      	pop	{r7, pc}

0801df54 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801df54:	b480      	push	{r7}
 801df56:	b083      	sub	sp, #12
 801df58:	af00      	add	r7, sp, #0
 801df5a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801df5c:	687b      	ldr	r3, [r7, #4]
 801df5e:	681b      	ldr	r3, [r3, #0]
 801df60:	2b00      	cmp	r3, #0
 801df62:	d101      	bne.n	801df68 <sys_sem_valid+0x14>
    return 0;
 801df64:	2300      	movs	r3, #0
 801df66:	e000      	b.n	801df6a <sys_sem_valid+0x16>
  else
    return 1;
 801df68:	2301      	movs	r3, #1
}
 801df6a:	4618      	mov	r0, r3
 801df6c:	370c      	adds	r7, #12
 801df6e:	46bd      	mov	sp, r7
 801df70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df74:	4770      	bx	lr

0801df76 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801df76:	b480      	push	{r7}
 801df78:	b083      	sub	sp, #12
 801df7a:	af00      	add	r7, sp, #0
 801df7c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801df7e:	687b      	ldr	r3, [r7, #4]
 801df80:	2200      	movs	r2, #0
 801df82:	601a      	str	r2, [r3, #0]
}
 801df84:	bf00      	nop
 801df86:	370c      	adds	r7, #12
 801df88:	46bd      	mov	sp, r7
 801df8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df8e:	4770      	bx	lr

0801df90 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801df90:	b580      	push	{r7, lr}
 801df92:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801df94:	4803      	ldr	r0, [pc, #12]	; (801dfa4 <sys_init+0x14>)
 801df96:	f7ef fde0 	bl	800db5a <osMutexCreate>
 801df9a:	4603      	mov	r3, r0
 801df9c:	4a02      	ldr	r2, [pc, #8]	; (801dfa8 <sys_init+0x18>)
 801df9e:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801dfa0:	bf00      	nop
 801dfa2:	bd80      	pop	{r7, pc}
 801dfa4:	08026f34 	.word	0x08026f34
 801dfa8:	2000e18c 	.word	0x2000e18c

0801dfac <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801dfac:	b580      	push	{r7, lr}
 801dfae:	b084      	sub	sp, #16
 801dfb0:	af00      	add	r7, sp, #0
 801dfb2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801dfb4:	2300      	movs	r3, #0
 801dfb6:	60bb      	str	r3, [r7, #8]
 801dfb8:	2300      	movs	r3, #0
 801dfba:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801dfbc:	f107 0308 	add.w	r3, r7, #8
 801dfc0:	4618      	mov	r0, r3
 801dfc2:	f7ef fdca 	bl	800db5a <osMutexCreate>
 801dfc6:	4602      	mov	r2, r0
 801dfc8:	687b      	ldr	r3, [r7, #4]
 801dfca:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801dfcc:	687b      	ldr	r3, [r7, #4]
 801dfce:	681b      	ldr	r3, [r3, #0]
 801dfd0:	2b00      	cmp	r3, #0
 801dfd2:	d102      	bne.n	801dfda <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801dfd4:	f04f 33ff 	mov.w	r3, #4294967295
 801dfd8:	e000      	b.n	801dfdc <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801dfda:	2300      	movs	r3, #0
}
 801dfdc:	4618      	mov	r0, r3
 801dfde:	3710      	adds	r7, #16
 801dfe0:	46bd      	mov	sp, r7
 801dfe2:	bd80      	pop	{r7, pc}

0801dfe4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801dfe4:	b580      	push	{r7, lr}
 801dfe6:	b082      	sub	sp, #8
 801dfe8:	af00      	add	r7, sp, #0
 801dfea:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801dfec:	687b      	ldr	r3, [r7, #4]
 801dfee:	681b      	ldr	r3, [r3, #0]
 801dff0:	f04f 31ff 	mov.w	r1, #4294967295
 801dff4:	4618      	mov	r0, r3
 801dff6:	f7ef fdc9 	bl	800db8c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801dffa:	bf00      	nop
 801dffc:	3708      	adds	r7, #8
 801dffe:	46bd      	mov	sp, r7
 801e000:	bd80      	pop	{r7, pc}

0801e002 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801e002:	b580      	push	{r7, lr}
 801e004:	b082      	sub	sp, #8
 801e006:	af00      	add	r7, sp, #0
 801e008:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801e00a:	687b      	ldr	r3, [r7, #4]
 801e00c:	681b      	ldr	r3, [r3, #0]
 801e00e:	4618      	mov	r0, r3
 801e010:	f7ef fe0a 	bl	800dc28 <osMutexRelease>
}
 801e014:	bf00      	nop
 801e016:	3708      	adds	r7, #8
 801e018:	46bd      	mov	sp, r7
 801e01a:	bd80      	pop	{r7, pc}

0801e01c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801e01c:	b580      	push	{r7, lr}
 801e01e:	b08c      	sub	sp, #48	; 0x30
 801e020:	af00      	add	r7, sp, #0
 801e022:	60f8      	str	r0, [r7, #12]
 801e024:	60b9      	str	r1, [r7, #8]
 801e026:	607a      	str	r2, [r7, #4]
 801e028:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801e02a:	f107 0314 	add.w	r3, r7, #20
 801e02e:	2200      	movs	r2, #0
 801e030:	601a      	str	r2, [r3, #0]
 801e032:	605a      	str	r2, [r3, #4]
 801e034:	609a      	str	r2, [r3, #8]
 801e036:	60da      	str	r2, [r3, #12]
 801e038:	611a      	str	r2, [r3, #16]
 801e03a:	615a      	str	r2, [r3, #20]
 801e03c:	619a      	str	r2, [r3, #24]
 801e03e:	68fb      	ldr	r3, [r7, #12]
 801e040:	617b      	str	r3, [r7, #20]
 801e042:	68bb      	ldr	r3, [r7, #8]
 801e044:	61bb      	str	r3, [r7, #24]
 801e046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e048:	b21b      	sxth	r3, r3
 801e04a:	83bb      	strh	r3, [r7, #28]
 801e04c:	683b      	ldr	r3, [r7, #0]
 801e04e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801e050:	f107 0314 	add.w	r3, r7, #20
 801e054:	6879      	ldr	r1, [r7, #4]
 801e056:	4618      	mov	r0, r3
 801e058:	f7ef fd1f 	bl	800da9a <osThreadCreate>
 801e05c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801e05e:	4618      	mov	r0, r3
 801e060:	3730      	adds	r7, #48	; 0x30
 801e062:	46bd      	mov	sp, r7
 801e064:	bd80      	pop	{r7, pc}
	...

0801e068 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801e068:	b580      	push	{r7, lr}
 801e06a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801e06c:	4b04      	ldr	r3, [pc, #16]	; (801e080 <sys_arch_protect+0x18>)
 801e06e:	681b      	ldr	r3, [r3, #0]
 801e070:	f04f 31ff 	mov.w	r1, #4294967295
 801e074:	4618      	mov	r0, r3
 801e076:	f7ef fd89 	bl	800db8c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801e07a:	2301      	movs	r3, #1
}
 801e07c:	4618      	mov	r0, r3
 801e07e:	bd80      	pop	{r7, pc}
 801e080:	2000e18c 	.word	0x2000e18c

0801e084 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801e084:	b580      	push	{r7, lr}
 801e086:	b082      	sub	sp, #8
 801e088:	af00      	add	r7, sp, #0
 801e08a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801e08c:	4b04      	ldr	r3, [pc, #16]	; (801e0a0 <sys_arch_unprotect+0x1c>)
 801e08e:	681b      	ldr	r3, [r3, #0]
 801e090:	4618      	mov	r0, r3
 801e092:	f7ef fdc9 	bl	800dc28 <osMutexRelease>
}
 801e096:	bf00      	nop
 801e098:	3708      	adds	r7, #8
 801e09a:	46bd      	mov	sp, r7
 801e09c:	bd80      	pop	{r7, pc}
 801e09e:	bf00      	nop
 801e0a0:	2000e18c 	.word	0x2000e18c

0801e0a4 <std>:
 801e0a4:	2300      	movs	r3, #0
 801e0a6:	b510      	push	{r4, lr}
 801e0a8:	4604      	mov	r4, r0
 801e0aa:	e9c0 3300 	strd	r3, r3, [r0]
 801e0ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801e0b2:	6083      	str	r3, [r0, #8]
 801e0b4:	8181      	strh	r1, [r0, #12]
 801e0b6:	6643      	str	r3, [r0, #100]	; 0x64
 801e0b8:	81c2      	strh	r2, [r0, #14]
 801e0ba:	6183      	str	r3, [r0, #24]
 801e0bc:	4619      	mov	r1, r3
 801e0be:	2208      	movs	r2, #8
 801e0c0:	305c      	adds	r0, #92	; 0x5c
 801e0c2:	f000 f947 	bl	801e354 <memset>
 801e0c6:	4b05      	ldr	r3, [pc, #20]	; (801e0dc <std+0x38>)
 801e0c8:	6263      	str	r3, [r4, #36]	; 0x24
 801e0ca:	4b05      	ldr	r3, [pc, #20]	; (801e0e0 <std+0x3c>)
 801e0cc:	62a3      	str	r3, [r4, #40]	; 0x28
 801e0ce:	4b05      	ldr	r3, [pc, #20]	; (801e0e4 <std+0x40>)
 801e0d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801e0d2:	4b05      	ldr	r3, [pc, #20]	; (801e0e8 <std+0x44>)
 801e0d4:	6224      	str	r4, [r4, #32]
 801e0d6:	6323      	str	r3, [r4, #48]	; 0x30
 801e0d8:	bd10      	pop	{r4, pc}
 801e0da:	bf00      	nop
 801e0dc:	0801f3f5 	.word	0x0801f3f5
 801e0e0:	0801f41b 	.word	0x0801f41b
 801e0e4:	0801f453 	.word	0x0801f453
 801e0e8:	0801f477 	.word	0x0801f477

0801e0ec <_cleanup_r>:
 801e0ec:	4901      	ldr	r1, [pc, #4]	; (801e0f4 <_cleanup_r+0x8>)
 801e0ee:	f000 b8af 	b.w	801e250 <_fwalk_reent>
 801e0f2:	bf00      	nop
 801e0f4:	080210d9 	.word	0x080210d9

0801e0f8 <__sfmoreglue>:
 801e0f8:	b570      	push	{r4, r5, r6, lr}
 801e0fa:	1e4a      	subs	r2, r1, #1
 801e0fc:	2568      	movs	r5, #104	; 0x68
 801e0fe:	4355      	muls	r5, r2
 801e100:	460e      	mov	r6, r1
 801e102:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801e106:	f000 f97d 	bl	801e404 <_malloc_r>
 801e10a:	4604      	mov	r4, r0
 801e10c:	b140      	cbz	r0, 801e120 <__sfmoreglue+0x28>
 801e10e:	2100      	movs	r1, #0
 801e110:	e9c0 1600 	strd	r1, r6, [r0]
 801e114:	300c      	adds	r0, #12
 801e116:	60a0      	str	r0, [r4, #8]
 801e118:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801e11c:	f000 f91a 	bl	801e354 <memset>
 801e120:	4620      	mov	r0, r4
 801e122:	bd70      	pop	{r4, r5, r6, pc}

0801e124 <__sfp_lock_acquire>:
 801e124:	4801      	ldr	r0, [pc, #4]	; (801e12c <__sfp_lock_acquire+0x8>)
 801e126:	f7e8 beef 	b.w	8006f08 <__retarget_lock_acquire_recursive>
 801e12a:	bf00      	nop
 801e12c:	2000093c 	.word	0x2000093c

0801e130 <__sfp_lock_release>:
 801e130:	4801      	ldr	r0, [pc, #4]	; (801e138 <__sfp_lock_release+0x8>)
 801e132:	f7e8 befd 	b.w	8006f30 <__retarget_lock_release_recursive>
 801e136:	bf00      	nop
 801e138:	2000093c 	.word	0x2000093c

0801e13c <__sinit_lock_acquire>:
 801e13c:	4801      	ldr	r0, [pc, #4]	; (801e144 <__sinit_lock_acquire+0x8>)
 801e13e:	f7e8 bee3 	b.w	8006f08 <__retarget_lock_acquire_recursive>
 801e142:	bf00      	nop
 801e144:	20000930 	.word	0x20000930

0801e148 <__sinit_lock_release>:
 801e148:	4801      	ldr	r0, [pc, #4]	; (801e150 <__sinit_lock_release+0x8>)
 801e14a:	f7e8 bef1 	b.w	8006f30 <__retarget_lock_release_recursive>
 801e14e:	bf00      	nop
 801e150:	20000930 	.word	0x20000930

0801e154 <__sinit>:
 801e154:	b510      	push	{r4, lr}
 801e156:	4604      	mov	r4, r0
 801e158:	f7ff fff0 	bl	801e13c <__sinit_lock_acquire>
 801e15c:	69a3      	ldr	r3, [r4, #24]
 801e15e:	b11b      	cbz	r3, 801e168 <__sinit+0x14>
 801e160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801e164:	f7ff bff0 	b.w	801e148 <__sinit_lock_release>
 801e168:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801e16c:	6523      	str	r3, [r4, #80]	; 0x50
 801e16e:	4b13      	ldr	r3, [pc, #76]	; (801e1bc <__sinit+0x68>)
 801e170:	4a13      	ldr	r2, [pc, #76]	; (801e1c0 <__sinit+0x6c>)
 801e172:	681b      	ldr	r3, [r3, #0]
 801e174:	62a2      	str	r2, [r4, #40]	; 0x28
 801e176:	42a3      	cmp	r3, r4
 801e178:	bf04      	itt	eq
 801e17a:	2301      	moveq	r3, #1
 801e17c:	61a3      	streq	r3, [r4, #24]
 801e17e:	4620      	mov	r0, r4
 801e180:	f000 f820 	bl	801e1c4 <__sfp>
 801e184:	6060      	str	r0, [r4, #4]
 801e186:	4620      	mov	r0, r4
 801e188:	f000 f81c 	bl	801e1c4 <__sfp>
 801e18c:	60a0      	str	r0, [r4, #8]
 801e18e:	4620      	mov	r0, r4
 801e190:	f000 f818 	bl	801e1c4 <__sfp>
 801e194:	2200      	movs	r2, #0
 801e196:	60e0      	str	r0, [r4, #12]
 801e198:	2104      	movs	r1, #4
 801e19a:	6860      	ldr	r0, [r4, #4]
 801e19c:	f7ff ff82 	bl	801e0a4 <std>
 801e1a0:	68a0      	ldr	r0, [r4, #8]
 801e1a2:	2201      	movs	r2, #1
 801e1a4:	2109      	movs	r1, #9
 801e1a6:	f7ff ff7d 	bl	801e0a4 <std>
 801e1aa:	68e0      	ldr	r0, [r4, #12]
 801e1ac:	2202      	movs	r2, #2
 801e1ae:	2112      	movs	r1, #18
 801e1b0:	f7ff ff78 	bl	801e0a4 <std>
 801e1b4:	2301      	movs	r3, #1
 801e1b6:	61a3      	str	r3, [r4, #24]
 801e1b8:	e7d2      	b.n	801e160 <__sinit+0xc>
 801e1ba:	bf00      	nop
 801e1bc:	080270a0 	.word	0x080270a0
 801e1c0:	0801e0ed 	.word	0x0801e0ed

0801e1c4 <__sfp>:
 801e1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e1c6:	4607      	mov	r7, r0
 801e1c8:	f7ff ffac 	bl	801e124 <__sfp_lock_acquire>
 801e1cc:	4b1e      	ldr	r3, [pc, #120]	; (801e248 <__sfp+0x84>)
 801e1ce:	681e      	ldr	r6, [r3, #0]
 801e1d0:	69b3      	ldr	r3, [r6, #24]
 801e1d2:	b913      	cbnz	r3, 801e1da <__sfp+0x16>
 801e1d4:	4630      	mov	r0, r6
 801e1d6:	f7ff ffbd 	bl	801e154 <__sinit>
 801e1da:	3648      	adds	r6, #72	; 0x48
 801e1dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801e1e0:	3b01      	subs	r3, #1
 801e1e2:	d503      	bpl.n	801e1ec <__sfp+0x28>
 801e1e4:	6833      	ldr	r3, [r6, #0]
 801e1e6:	b30b      	cbz	r3, 801e22c <__sfp+0x68>
 801e1e8:	6836      	ldr	r6, [r6, #0]
 801e1ea:	e7f7      	b.n	801e1dc <__sfp+0x18>
 801e1ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801e1f0:	b9d5      	cbnz	r5, 801e228 <__sfp+0x64>
 801e1f2:	4b16      	ldr	r3, [pc, #88]	; (801e24c <__sfp+0x88>)
 801e1f4:	60e3      	str	r3, [r4, #12]
 801e1f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801e1fa:	6665      	str	r5, [r4, #100]	; 0x64
 801e1fc:	f7e8 fe5e 	bl	8006ebc <__retarget_lock_init_recursive>
 801e200:	f7ff ff96 	bl	801e130 <__sfp_lock_release>
 801e204:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801e208:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801e20c:	6025      	str	r5, [r4, #0]
 801e20e:	61a5      	str	r5, [r4, #24]
 801e210:	2208      	movs	r2, #8
 801e212:	4629      	mov	r1, r5
 801e214:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801e218:	f000 f89c 	bl	801e354 <memset>
 801e21c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801e220:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801e224:	4620      	mov	r0, r4
 801e226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e228:	3468      	adds	r4, #104	; 0x68
 801e22a:	e7d9      	b.n	801e1e0 <__sfp+0x1c>
 801e22c:	2104      	movs	r1, #4
 801e22e:	4638      	mov	r0, r7
 801e230:	f7ff ff62 	bl	801e0f8 <__sfmoreglue>
 801e234:	4604      	mov	r4, r0
 801e236:	6030      	str	r0, [r6, #0]
 801e238:	2800      	cmp	r0, #0
 801e23a:	d1d5      	bne.n	801e1e8 <__sfp+0x24>
 801e23c:	f7ff ff78 	bl	801e130 <__sfp_lock_release>
 801e240:	230c      	movs	r3, #12
 801e242:	603b      	str	r3, [r7, #0]
 801e244:	e7ee      	b.n	801e224 <__sfp+0x60>
 801e246:	bf00      	nop
 801e248:	080270a0 	.word	0x080270a0
 801e24c:	ffff0001 	.word	0xffff0001

0801e250 <_fwalk_reent>:
 801e250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e254:	4606      	mov	r6, r0
 801e256:	4688      	mov	r8, r1
 801e258:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801e25c:	2700      	movs	r7, #0
 801e25e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801e262:	f1b9 0901 	subs.w	r9, r9, #1
 801e266:	d505      	bpl.n	801e274 <_fwalk_reent+0x24>
 801e268:	6824      	ldr	r4, [r4, #0]
 801e26a:	2c00      	cmp	r4, #0
 801e26c:	d1f7      	bne.n	801e25e <_fwalk_reent+0xe>
 801e26e:	4638      	mov	r0, r7
 801e270:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e274:	89ab      	ldrh	r3, [r5, #12]
 801e276:	2b01      	cmp	r3, #1
 801e278:	d907      	bls.n	801e28a <_fwalk_reent+0x3a>
 801e27a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801e27e:	3301      	adds	r3, #1
 801e280:	d003      	beq.n	801e28a <_fwalk_reent+0x3a>
 801e282:	4629      	mov	r1, r5
 801e284:	4630      	mov	r0, r6
 801e286:	47c0      	blx	r8
 801e288:	4307      	orrs	r7, r0
 801e28a:	3568      	adds	r5, #104	; 0x68
 801e28c:	e7e9      	b.n	801e262 <_fwalk_reent+0x12>
	...

0801e290 <__libc_init_array>:
 801e290:	b570      	push	{r4, r5, r6, lr}
 801e292:	4d0d      	ldr	r5, [pc, #52]	; (801e2c8 <__libc_init_array+0x38>)
 801e294:	4c0d      	ldr	r4, [pc, #52]	; (801e2cc <__libc_init_array+0x3c>)
 801e296:	1b64      	subs	r4, r4, r5
 801e298:	10a4      	asrs	r4, r4, #2
 801e29a:	2600      	movs	r6, #0
 801e29c:	42a6      	cmp	r6, r4
 801e29e:	d109      	bne.n	801e2b4 <__libc_init_array+0x24>
 801e2a0:	4d0b      	ldr	r5, [pc, #44]	; (801e2d0 <__libc_init_array+0x40>)
 801e2a2:	4c0c      	ldr	r4, [pc, #48]	; (801e2d4 <__libc_init_array+0x44>)
 801e2a4:	f005 f884 	bl	80233b0 <_init>
 801e2a8:	1b64      	subs	r4, r4, r5
 801e2aa:	10a4      	asrs	r4, r4, #2
 801e2ac:	2600      	movs	r6, #0
 801e2ae:	42a6      	cmp	r6, r4
 801e2b0:	d105      	bne.n	801e2be <__libc_init_array+0x2e>
 801e2b2:	bd70      	pop	{r4, r5, r6, pc}
 801e2b4:	f855 3b04 	ldr.w	r3, [r5], #4
 801e2b8:	4798      	blx	r3
 801e2ba:	3601      	adds	r6, #1
 801e2bc:	e7ee      	b.n	801e29c <__libc_init_array+0xc>
 801e2be:	f855 3b04 	ldr.w	r3, [r5], #4
 801e2c2:	4798      	blx	r3
 801e2c4:	3601      	adds	r6, #1
 801e2c6:	e7f2      	b.n	801e2ae <__libc_init_array+0x1e>
 801e2c8:	08027470 	.word	0x08027470
 801e2cc:	08027470 	.word	0x08027470
 801e2d0:	08027470 	.word	0x08027470
 801e2d4:	08027474 	.word	0x08027474

0801e2d8 <malloc>:
 801e2d8:	4b02      	ldr	r3, [pc, #8]	; (801e2e4 <malloc+0xc>)
 801e2da:	4601      	mov	r1, r0
 801e2dc:	6818      	ldr	r0, [r3, #0]
 801e2de:	f000 b891 	b.w	801e404 <_malloc_r>
 801e2e2:	bf00      	nop
 801e2e4:	200003b8 	.word	0x200003b8

0801e2e8 <memcmp>:
 801e2e8:	b530      	push	{r4, r5, lr}
 801e2ea:	3901      	subs	r1, #1
 801e2ec:	2400      	movs	r4, #0
 801e2ee:	42a2      	cmp	r2, r4
 801e2f0:	d101      	bne.n	801e2f6 <memcmp+0xe>
 801e2f2:	2000      	movs	r0, #0
 801e2f4:	e005      	b.n	801e302 <memcmp+0x1a>
 801e2f6:	5d03      	ldrb	r3, [r0, r4]
 801e2f8:	3401      	adds	r4, #1
 801e2fa:	5d0d      	ldrb	r5, [r1, r4]
 801e2fc:	42ab      	cmp	r3, r5
 801e2fe:	d0f6      	beq.n	801e2ee <memcmp+0x6>
 801e300:	1b58      	subs	r0, r3, r5
 801e302:	bd30      	pop	{r4, r5, pc}

0801e304 <memcpy>:
 801e304:	440a      	add	r2, r1
 801e306:	4291      	cmp	r1, r2
 801e308:	f100 33ff 	add.w	r3, r0, #4294967295
 801e30c:	d100      	bne.n	801e310 <memcpy+0xc>
 801e30e:	4770      	bx	lr
 801e310:	b510      	push	{r4, lr}
 801e312:	f811 4b01 	ldrb.w	r4, [r1], #1
 801e316:	f803 4f01 	strb.w	r4, [r3, #1]!
 801e31a:	4291      	cmp	r1, r2
 801e31c:	d1f9      	bne.n	801e312 <memcpy+0xe>
 801e31e:	bd10      	pop	{r4, pc}

0801e320 <memmove>:
 801e320:	4288      	cmp	r0, r1
 801e322:	b510      	push	{r4, lr}
 801e324:	eb01 0402 	add.w	r4, r1, r2
 801e328:	d902      	bls.n	801e330 <memmove+0x10>
 801e32a:	4284      	cmp	r4, r0
 801e32c:	4623      	mov	r3, r4
 801e32e:	d807      	bhi.n	801e340 <memmove+0x20>
 801e330:	1e43      	subs	r3, r0, #1
 801e332:	42a1      	cmp	r1, r4
 801e334:	d008      	beq.n	801e348 <memmove+0x28>
 801e336:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e33a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801e33e:	e7f8      	b.n	801e332 <memmove+0x12>
 801e340:	4402      	add	r2, r0
 801e342:	4601      	mov	r1, r0
 801e344:	428a      	cmp	r2, r1
 801e346:	d100      	bne.n	801e34a <memmove+0x2a>
 801e348:	bd10      	pop	{r4, pc}
 801e34a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801e34e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801e352:	e7f7      	b.n	801e344 <memmove+0x24>

0801e354 <memset>:
 801e354:	4402      	add	r2, r0
 801e356:	4603      	mov	r3, r0
 801e358:	4293      	cmp	r3, r2
 801e35a:	d100      	bne.n	801e35e <memset+0xa>
 801e35c:	4770      	bx	lr
 801e35e:	f803 1b01 	strb.w	r1, [r3], #1
 801e362:	e7f9      	b.n	801e358 <memset+0x4>

0801e364 <_free_r>:
 801e364:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e366:	2900      	cmp	r1, #0
 801e368:	d048      	beq.n	801e3fc <_free_r+0x98>
 801e36a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e36e:	9001      	str	r0, [sp, #4]
 801e370:	2b00      	cmp	r3, #0
 801e372:	f1a1 0404 	sub.w	r4, r1, #4
 801e376:	bfb8      	it	lt
 801e378:	18e4      	addlt	r4, r4, r3
 801e37a:	f003 fa93 	bl	80218a4 <__malloc_lock>
 801e37e:	4a20      	ldr	r2, [pc, #128]	; (801e400 <_free_r+0x9c>)
 801e380:	9801      	ldr	r0, [sp, #4]
 801e382:	6813      	ldr	r3, [r2, #0]
 801e384:	4615      	mov	r5, r2
 801e386:	b933      	cbnz	r3, 801e396 <_free_r+0x32>
 801e388:	6063      	str	r3, [r4, #4]
 801e38a:	6014      	str	r4, [r2, #0]
 801e38c:	b003      	add	sp, #12
 801e38e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e392:	f003 ba8d 	b.w	80218b0 <__malloc_unlock>
 801e396:	42a3      	cmp	r3, r4
 801e398:	d90b      	bls.n	801e3b2 <_free_r+0x4e>
 801e39a:	6821      	ldr	r1, [r4, #0]
 801e39c:	1862      	adds	r2, r4, r1
 801e39e:	4293      	cmp	r3, r2
 801e3a0:	bf04      	itt	eq
 801e3a2:	681a      	ldreq	r2, [r3, #0]
 801e3a4:	685b      	ldreq	r3, [r3, #4]
 801e3a6:	6063      	str	r3, [r4, #4]
 801e3a8:	bf04      	itt	eq
 801e3aa:	1852      	addeq	r2, r2, r1
 801e3ac:	6022      	streq	r2, [r4, #0]
 801e3ae:	602c      	str	r4, [r5, #0]
 801e3b0:	e7ec      	b.n	801e38c <_free_r+0x28>
 801e3b2:	461a      	mov	r2, r3
 801e3b4:	685b      	ldr	r3, [r3, #4]
 801e3b6:	b10b      	cbz	r3, 801e3bc <_free_r+0x58>
 801e3b8:	42a3      	cmp	r3, r4
 801e3ba:	d9fa      	bls.n	801e3b2 <_free_r+0x4e>
 801e3bc:	6811      	ldr	r1, [r2, #0]
 801e3be:	1855      	adds	r5, r2, r1
 801e3c0:	42a5      	cmp	r5, r4
 801e3c2:	d10b      	bne.n	801e3dc <_free_r+0x78>
 801e3c4:	6824      	ldr	r4, [r4, #0]
 801e3c6:	4421      	add	r1, r4
 801e3c8:	1854      	adds	r4, r2, r1
 801e3ca:	42a3      	cmp	r3, r4
 801e3cc:	6011      	str	r1, [r2, #0]
 801e3ce:	d1dd      	bne.n	801e38c <_free_r+0x28>
 801e3d0:	681c      	ldr	r4, [r3, #0]
 801e3d2:	685b      	ldr	r3, [r3, #4]
 801e3d4:	6053      	str	r3, [r2, #4]
 801e3d6:	4421      	add	r1, r4
 801e3d8:	6011      	str	r1, [r2, #0]
 801e3da:	e7d7      	b.n	801e38c <_free_r+0x28>
 801e3dc:	d902      	bls.n	801e3e4 <_free_r+0x80>
 801e3de:	230c      	movs	r3, #12
 801e3e0:	6003      	str	r3, [r0, #0]
 801e3e2:	e7d3      	b.n	801e38c <_free_r+0x28>
 801e3e4:	6825      	ldr	r5, [r4, #0]
 801e3e6:	1961      	adds	r1, r4, r5
 801e3e8:	428b      	cmp	r3, r1
 801e3ea:	bf04      	itt	eq
 801e3ec:	6819      	ldreq	r1, [r3, #0]
 801e3ee:	685b      	ldreq	r3, [r3, #4]
 801e3f0:	6063      	str	r3, [r4, #4]
 801e3f2:	bf04      	itt	eq
 801e3f4:	1949      	addeq	r1, r1, r5
 801e3f6:	6021      	streq	r1, [r4, #0]
 801e3f8:	6054      	str	r4, [r2, #4]
 801e3fa:	e7c7      	b.n	801e38c <_free_r+0x28>
 801e3fc:	b003      	add	sp, #12
 801e3fe:	bd30      	pop	{r4, r5, pc}
 801e400:	20006f50 	.word	0x20006f50

0801e404 <_malloc_r>:
 801e404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e406:	1ccd      	adds	r5, r1, #3
 801e408:	f025 0503 	bic.w	r5, r5, #3
 801e40c:	3508      	adds	r5, #8
 801e40e:	2d0c      	cmp	r5, #12
 801e410:	bf38      	it	cc
 801e412:	250c      	movcc	r5, #12
 801e414:	2d00      	cmp	r5, #0
 801e416:	4606      	mov	r6, r0
 801e418:	db01      	blt.n	801e41e <_malloc_r+0x1a>
 801e41a:	42a9      	cmp	r1, r5
 801e41c:	d903      	bls.n	801e426 <_malloc_r+0x22>
 801e41e:	230c      	movs	r3, #12
 801e420:	6033      	str	r3, [r6, #0]
 801e422:	2000      	movs	r0, #0
 801e424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e426:	f003 fa3d 	bl	80218a4 <__malloc_lock>
 801e42a:	4921      	ldr	r1, [pc, #132]	; (801e4b0 <_malloc_r+0xac>)
 801e42c:	680a      	ldr	r2, [r1, #0]
 801e42e:	4614      	mov	r4, r2
 801e430:	b99c      	cbnz	r4, 801e45a <_malloc_r+0x56>
 801e432:	4f20      	ldr	r7, [pc, #128]	; (801e4b4 <_malloc_r+0xb0>)
 801e434:	683b      	ldr	r3, [r7, #0]
 801e436:	b923      	cbnz	r3, 801e442 <_malloc_r+0x3e>
 801e438:	4621      	mov	r1, r4
 801e43a:	4630      	mov	r0, r6
 801e43c:	f000 ff78 	bl	801f330 <_sbrk_r>
 801e440:	6038      	str	r0, [r7, #0]
 801e442:	4629      	mov	r1, r5
 801e444:	4630      	mov	r0, r6
 801e446:	f000 ff73 	bl	801f330 <_sbrk_r>
 801e44a:	1c43      	adds	r3, r0, #1
 801e44c:	d123      	bne.n	801e496 <_malloc_r+0x92>
 801e44e:	230c      	movs	r3, #12
 801e450:	6033      	str	r3, [r6, #0]
 801e452:	4630      	mov	r0, r6
 801e454:	f003 fa2c 	bl	80218b0 <__malloc_unlock>
 801e458:	e7e3      	b.n	801e422 <_malloc_r+0x1e>
 801e45a:	6823      	ldr	r3, [r4, #0]
 801e45c:	1b5b      	subs	r3, r3, r5
 801e45e:	d417      	bmi.n	801e490 <_malloc_r+0x8c>
 801e460:	2b0b      	cmp	r3, #11
 801e462:	d903      	bls.n	801e46c <_malloc_r+0x68>
 801e464:	6023      	str	r3, [r4, #0]
 801e466:	441c      	add	r4, r3
 801e468:	6025      	str	r5, [r4, #0]
 801e46a:	e004      	b.n	801e476 <_malloc_r+0x72>
 801e46c:	6863      	ldr	r3, [r4, #4]
 801e46e:	42a2      	cmp	r2, r4
 801e470:	bf0c      	ite	eq
 801e472:	600b      	streq	r3, [r1, #0]
 801e474:	6053      	strne	r3, [r2, #4]
 801e476:	4630      	mov	r0, r6
 801e478:	f003 fa1a 	bl	80218b0 <__malloc_unlock>
 801e47c:	f104 000b 	add.w	r0, r4, #11
 801e480:	1d23      	adds	r3, r4, #4
 801e482:	f020 0007 	bic.w	r0, r0, #7
 801e486:	1ac2      	subs	r2, r0, r3
 801e488:	d0cc      	beq.n	801e424 <_malloc_r+0x20>
 801e48a:	1a1b      	subs	r3, r3, r0
 801e48c:	50a3      	str	r3, [r4, r2]
 801e48e:	e7c9      	b.n	801e424 <_malloc_r+0x20>
 801e490:	4622      	mov	r2, r4
 801e492:	6864      	ldr	r4, [r4, #4]
 801e494:	e7cc      	b.n	801e430 <_malloc_r+0x2c>
 801e496:	1cc4      	adds	r4, r0, #3
 801e498:	f024 0403 	bic.w	r4, r4, #3
 801e49c:	42a0      	cmp	r0, r4
 801e49e:	d0e3      	beq.n	801e468 <_malloc_r+0x64>
 801e4a0:	1a21      	subs	r1, r4, r0
 801e4a2:	4630      	mov	r0, r6
 801e4a4:	f000 ff44 	bl	801f330 <_sbrk_r>
 801e4a8:	3001      	adds	r0, #1
 801e4aa:	d1dd      	bne.n	801e468 <_malloc_r+0x64>
 801e4ac:	e7cf      	b.n	801e44e <_malloc_r+0x4a>
 801e4ae:	bf00      	nop
 801e4b0:	20006f50 	.word	0x20006f50
 801e4b4:	20006f54 	.word	0x20006f54

0801e4b8 <__cvt>:
 801e4b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e4bc:	ec55 4b10 	vmov	r4, r5, d0
 801e4c0:	2d00      	cmp	r5, #0
 801e4c2:	460e      	mov	r6, r1
 801e4c4:	4619      	mov	r1, r3
 801e4c6:	462b      	mov	r3, r5
 801e4c8:	bfbb      	ittet	lt
 801e4ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 801e4ce:	461d      	movlt	r5, r3
 801e4d0:	2300      	movge	r3, #0
 801e4d2:	232d      	movlt	r3, #45	; 0x2d
 801e4d4:	700b      	strb	r3, [r1, #0]
 801e4d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801e4d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801e4dc:	4691      	mov	r9, r2
 801e4de:	f023 0820 	bic.w	r8, r3, #32
 801e4e2:	bfbc      	itt	lt
 801e4e4:	4622      	movlt	r2, r4
 801e4e6:	4614      	movlt	r4, r2
 801e4e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801e4ec:	d005      	beq.n	801e4fa <__cvt+0x42>
 801e4ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 801e4f2:	d100      	bne.n	801e4f6 <__cvt+0x3e>
 801e4f4:	3601      	adds	r6, #1
 801e4f6:	2102      	movs	r1, #2
 801e4f8:	e000      	b.n	801e4fc <__cvt+0x44>
 801e4fa:	2103      	movs	r1, #3
 801e4fc:	ab03      	add	r3, sp, #12
 801e4fe:	9301      	str	r3, [sp, #4]
 801e500:	ab02      	add	r3, sp, #8
 801e502:	9300      	str	r3, [sp, #0]
 801e504:	ec45 4b10 	vmov	d0, r4, r5
 801e508:	4653      	mov	r3, sl
 801e50a:	4632      	mov	r2, r6
 801e50c:	f001 ff6c 	bl	80203e8 <_dtoa_r>
 801e510:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801e514:	4607      	mov	r7, r0
 801e516:	d102      	bne.n	801e51e <__cvt+0x66>
 801e518:	f019 0f01 	tst.w	r9, #1
 801e51c:	d022      	beq.n	801e564 <__cvt+0xac>
 801e51e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801e522:	eb07 0906 	add.w	r9, r7, r6
 801e526:	d110      	bne.n	801e54a <__cvt+0x92>
 801e528:	783b      	ldrb	r3, [r7, #0]
 801e52a:	2b30      	cmp	r3, #48	; 0x30
 801e52c:	d10a      	bne.n	801e544 <__cvt+0x8c>
 801e52e:	2200      	movs	r2, #0
 801e530:	2300      	movs	r3, #0
 801e532:	4620      	mov	r0, r4
 801e534:	4629      	mov	r1, r5
 801e536:	f7e2 fac7 	bl	8000ac8 <__aeabi_dcmpeq>
 801e53a:	b918      	cbnz	r0, 801e544 <__cvt+0x8c>
 801e53c:	f1c6 0601 	rsb	r6, r6, #1
 801e540:	f8ca 6000 	str.w	r6, [sl]
 801e544:	f8da 3000 	ldr.w	r3, [sl]
 801e548:	4499      	add	r9, r3
 801e54a:	2200      	movs	r2, #0
 801e54c:	2300      	movs	r3, #0
 801e54e:	4620      	mov	r0, r4
 801e550:	4629      	mov	r1, r5
 801e552:	f7e2 fab9 	bl	8000ac8 <__aeabi_dcmpeq>
 801e556:	b108      	cbz	r0, 801e55c <__cvt+0xa4>
 801e558:	f8cd 900c 	str.w	r9, [sp, #12]
 801e55c:	2230      	movs	r2, #48	; 0x30
 801e55e:	9b03      	ldr	r3, [sp, #12]
 801e560:	454b      	cmp	r3, r9
 801e562:	d307      	bcc.n	801e574 <__cvt+0xbc>
 801e564:	9b03      	ldr	r3, [sp, #12]
 801e566:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801e568:	1bdb      	subs	r3, r3, r7
 801e56a:	4638      	mov	r0, r7
 801e56c:	6013      	str	r3, [r2, #0]
 801e56e:	b004      	add	sp, #16
 801e570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e574:	1c59      	adds	r1, r3, #1
 801e576:	9103      	str	r1, [sp, #12]
 801e578:	701a      	strb	r2, [r3, #0]
 801e57a:	e7f0      	b.n	801e55e <__cvt+0xa6>

0801e57c <__exponent>:
 801e57c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e57e:	4603      	mov	r3, r0
 801e580:	2900      	cmp	r1, #0
 801e582:	bfb8      	it	lt
 801e584:	4249      	neglt	r1, r1
 801e586:	f803 2b02 	strb.w	r2, [r3], #2
 801e58a:	bfb4      	ite	lt
 801e58c:	222d      	movlt	r2, #45	; 0x2d
 801e58e:	222b      	movge	r2, #43	; 0x2b
 801e590:	2909      	cmp	r1, #9
 801e592:	7042      	strb	r2, [r0, #1]
 801e594:	dd2a      	ble.n	801e5ec <__exponent+0x70>
 801e596:	f10d 0407 	add.w	r4, sp, #7
 801e59a:	46a4      	mov	ip, r4
 801e59c:	270a      	movs	r7, #10
 801e59e:	46a6      	mov	lr, r4
 801e5a0:	460a      	mov	r2, r1
 801e5a2:	fb91 f6f7 	sdiv	r6, r1, r7
 801e5a6:	fb07 1516 	mls	r5, r7, r6, r1
 801e5aa:	3530      	adds	r5, #48	; 0x30
 801e5ac:	2a63      	cmp	r2, #99	; 0x63
 801e5ae:	f104 34ff 	add.w	r4, r4, #4294967295
 801e5b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801e5b6:	4631      	mov	r1, r6
 801e5b8:	dcf1      	bgt.n	801e59e <__exponent+0x22>
 801e5ba:	3130      	adds	r1, #48	; 0x30
 801e5bc:	f1ae 0502 	sub.w	r5, lr, #2
 801e5c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 801e5c4:	1c44      	adds	r4, r0, #1
 801e5c6:	4629      	mov	r1, r5
 801e5c8:	4561      	cmp	r1, ip
 801e5ca:	d30a      	bcc.n	801e5e2 <__exponent+0x66>
 801e5cc:	f10d 0209 	add.w	r2, sp, #9
 801e5d0:	eba2 020e 	sub.w	r2, r2, lr
 801e5d4:	4565      	cmp	r5, ip
 801e5d6:	bf88      	it	hi
 801e5d8:	2200      	movhi	r2, #0
 801e5da:	4413      	add	r3, r2
 801e5dc:	1a18      	subs	r0, r3, r0
 801e5de:	b003      	add	sp, #12
 801e5e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e5e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801e5e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 801e5ea:	e7ed      	b.n	801e5c8 <__exponent+0x4c>
 801e5ec:	2330      	movs	r3, #48	; 0x30
 801e5ee:	3130      	adds	r1, #48	; 0x30
 801e5f0:	7083      	strb	r3, [r0, #2]
 801e5f2:	70c1      	strb	r1, [r0, #3]
 801e5f4:	1d03      	adds	r3, r0, #4
 801e5f6:	e7f1      	b.n	801e5dc <__exponent+0x60>

0801e5f8 <_printf_float>:
 801e5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e5fc:	ed2d 8b02 	vpush	{d8}
 801e600:	b08d      	sub	sp, #52	; 0x34
 801e602:	460c      	mov	r4, r1
 801e604:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801e608:	4616      	mov	r6, r2
 801e60a:	461f      	mov	r7, r3
 801e60c:	4605      	mov	r5, r0
 801e60e:	f003 f921 	bl	8021854 <_localeconv_r>
 801e612:	f8d0 a000 	ldr.w	sl, [r0]
 801e616:	4650      	mov	r0, sl
 801e618:	f7e1 fdda 	bl	80001d0 <strlen>
 801e61c:	2300      	movs	r3, #0
 801e61e:	930a      	str	r3, [sp, #40]	; 0x28
 801e620:	6823      	ldr	r3, [r4, #0]
 801e622:	9305      	str	r3, [sp, #20]
 801e624:	f8d8 3000 	ldr.w	r3, [r8]
 801e628:	f894 b018 	ldrb.w	fp, [r4, #24]
 801e62c:	3307      	adds	r3, #7
 801e62e:	f023 0307 	bic.w	r3, r3, #7
 801e632:	f103 0208 	add.w	r2, r3, #8
 801e636:	f8c8 2000 	str.w	r2, [r8]
 801e63a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e63e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 801e642:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801e646:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801e64a:	9307      	str	r3, [sp, #28]
 801e64c:	f8cd 8018 	str.w	r8, [sp, #24]
 801e650:	ee08 0a10 	vmov	s16, r0
 801e654:	4b9f      	ldr	r3, [pc, #636]	; (801e8d4 <_printf_float+0x2dc>)
 801e656:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e65a:	f04f 32ff 	mov.w	r2, #4294967295
 801e65e:	f7e2 fa65 	bl	8000b2c <__aeabi_dcmpun>
 801e662:	bb88      	cbnz	r0, 801e6c8 <_printf_float+0xd0>
 801e664:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801e668:	4b9a      	ldr	r3, [pc, #616]	; (801e8d4 <_printf_float+0x2dc>)
 801e66a:	f04f 32ff 	mov.w	r2, #4294967295
 801e66e:	f7e2 fa3f 	bl	8000af0 <__aeabi_dcmple>
 801e672:	bb48      	cbnz	r0, 801e6c8 <_printf_float+0xd0>
 801e674:	2200      	movs	r2, #0
 801e676:	2300      	movs	r3, #0
 801e678:	4640      	mov	r0, r8
 801e67a:	4649      	mov	r1, r9
 801e67c:	f7e2 fa2e 	bl	8000adc <__aeabi_dcmplt>
 801e680:	b110      	cbz	r0, 801e688 <_printf_float+0x90>
 801e682:	232d      	movs	r3, #45	; 0x2d
 801e684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e688:	4b93      	ldr	r3, [pc, #588]	; (801e8d8 <_printf_float+0x2e0>)
 801e68a:	4894      	ldr	r0, [pc, #592]	; (801e8dc <_printf_float+0x2e4>)
 801e68c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 801e690:	bf94      	ite	ls
 801e692:	4698      	movls	r8, r3
 801e694:	4680      	movhi	r8, r0
 801e696:	2303      	movs	r3, #3
 801e698:	6123      	str	r3, [r4, #16]
 801e69a:	9b05      	ldr	r3, [sp, #20]
 801e69c:	f023 0204 	bic.w	r2, r3, #4
 801e6a0:	6022      	str	r2, [r4, #0]
 801e6a2:	f04f 0900 	mov.w	r9, #0
 801e6a6:	9700      	str	r7, [sp, #0]
 801e6a8:	4633      	mov	r3, r6
 801e6aa:	aa0b      	add	r2, sp, #44	; 0x2c
 801e6ac:	4621      	mov	r1, r4
 801e6ae:	4628      	mov	r0, r5
 801e6b0:	f000 f9d8 	bl	801ea64 <_printf_common>
 801e6b4:	3001      	adds	r0, #1
 801e6b6:	f040 8090 	bne.w	801e7da <_printf_float+0x1e2>
 801e6ba:	f04f 30ff 	mov.w	r0, #4294967295
 801e6be:	b00d      	add	sp, #52	; 0x34
 801e6c0:	ecbd 8b02 	vpop	{d8}
 801e6c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e6c8:	4642      	mov	r2, r8
 801e6ca:	464b      	mov	r3, r9
 801e6cc:	4640      	mov	r0, r8
 801e6ce:	4649      	mov	r1, r9
 801e6d0:	f7e2 fa2c 	bl	8000b2c <__aeabi_dcmpun>
 801e6d4:	b140      	cbz	r0, 801e6e8 <_printf_float+0xf0>
 801e6d6:	464b      	mov	r3, r9
 801e6d8:	2b00      	cmp	r3, #0
 801e6da:	bfbc      	itt	lt
 801e6dc:	232d      	movlt	r3, #45	; 0x2d
 801e6de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801e6e2:	487f      	ldr	r0, [pc, #508]	; (801e8e0 <_printf_float+0x2e8>)
 801e6e4:	4b7f      	ldr	r3, [pc, #508]	; (801e8e4 <_printf_float+0x2ec>)
 801e6e6:	e7d1      	b.n	801e68c <_printf_float+0x94>
 801e6e8:	6863      	ldr	r3, [r4, #4]
 801e6ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801e6ee:	9206      	str	r2, [sp, #24]
 801e6f0:	1c5a      	adds	r2, r3, #1
 801e6f2:	d13f      	bne.n	801e774 <_printf_float+0x17c>
 801e6f4:	2306      	movs	r3, #6
 801e6f6:	6063      	str	r3, [r4, #4]
 801e6f8:	9b05      	ldr	r3, [sp, #20]
 801e6fa:	6861      	ldr	r1, [r4, #4]
 801e6fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 801e700:	2300      	movs	r3, #0
 801e702:	9303      	str	r3, [sp, #12]
 801e704:	ab0a      	add	r3, sp, #40	; 0x28
 801e706:	e9cd b301 	strd	fp, r3, [sp, #4]
 801e70a:	ab09      	add	r3, sp, #36	; 0x24
 801e70c:	ec49 8b10 	vmov	d0, r8, r9
 801e710:	9300      	str	r3, [sp, #0]
 801e712:	6022      	str	r2, [r4, #0]
 801e714:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801e718:	4628      	mov	r0, r5
 801e71a:	f7ff fecd 	bl	801e4b8 <__cvt>
 801e71e:	9b06      	ldr	r3, [sp, #24]
 801e720:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e722:	2b47      	cmp	r3, #71	; 0x47
 801e724:	4680      	mov	r8, r0
 801e726:	d108      	bne.n	801e73a <_printf_float+0x142>
 801e728:	1cc8      	adds	r0, r1, #3
 801e72a:	db02      	blt.n	801e732 <_printf_float+0x13a>
 801e72c:	6863      	ldr	r3, [r4, #4]
 801e72e:	4299      	cmp	r1, r3
 801e730:	dd41      	ble.n	801e7b6 <_printf_float+0x1be>
 801e732:	f1ab 0b02 	sub.w	fp, fp, #2
 801e736:	fa5f fb8b 	uxtb.w	fp, fp
 801e73a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801e73e:	d820      	bhi.n	801e782 <_printf_float+0x18a>
 801e740:	3901      	subs	r1, #1
 801e742:	465a      	mov	r2, fp
 801e744:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801e748:	9109      	str	r1, [sp, #36]	; 0x24
 801e74a:	f7ff ff17 	bl	801e57c <__exponent>
 801e74e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e750:	1813      	adds	r3, r2, r0
 801e752:	2a01      	cmp	r2, #1
 801e754:	4681      	mov	r9, r0
 801e756:	6123      	str	r3, [r4, #16]
 801e758:	dc02      	bgt.n	801e760 <_printf_float+0x168>
 801e75a:	6822      	ldr	r2, [r4, #0]
 801e75c:	07d2      	lsls	r2, r2, #31
 801e75e:	d501      	bpl.n	801e764 <_printf_float+0x16c>
 801e760:	3301      	adds	r3, #1
 801e762:	6123      	str	r3, [r4, #16]
 801e764:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801e768:	2b00      	cmp	r3, #0
 801e76a:	d09c      	beq.n	801e6a6 <_printf_float+0xae>
 801e76c:	232d      	movs	r3, #45	; 0x2d
 801e76e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e772:	e798      	b.n	801e6a6 <_printf_float+0xae>
 801e774:	9a06      	ldr	r2, [sp, #24]
 801e776:	2a47      	cmp	r2, #71	; 0x47
 801e778:	d1be      	bne.n	801e6f8 <_printf_float+0x100>
 801e77a:	2b00      	cmp	r3, #0
 801e77c:	d1bc      	bne.n	801e6f8 <_printf_float+0x100>
 801e77e:	2301      	movs	r3, #1
 801e780:	e7b9      	b.n	801e6f6 <_printf_float+0xfe>
 801e782:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801e786:	d118      	bne.n	801e7ba <_printf_float+0x1c2>
 801e788:	2900      	cmp	r1, #0
 801e78a:	6863      	ldr	r3, [r4, #4]
 801e78c:	dd0b      	ble.n	801e7a6 <_printf_float+0x1ae>
 801e78e:	6121      	str	r1, [r4, #16]
 801e790:	b913      	cbnz	r3, 801e798 <_printf_float+0x1a0>
 801e792:	6822      	ldr	r2, [r4, #0]
 801e794:	07d0      	lsls	r0, r2, #31
 801e796:	d502      	bpl.n	801e79e <_printf_float+0x1a6>
 801e798:	3301      	adds	r3, #1
 801e79a:	440b      	add	r3, r1
 801e79c:	6123      	str	r3, [r4, #16]
 801e79e:	65a1      	str	r1, [r4, #88]	; 0x58
 801e7a0:	f04f 0900 	mov.w	r9, #0
 801e7a4:	e7de      	b.n	801e764 <_printf_float+0x16c>
 801e7a6:	b913      	cbnz	r3, 801e7ae <_printf_float+0x1b6>
 801e7a8:	6822      	ldr	r2, [r4, #0]
 801e7aa:	07d2      	lsls	r2, r2, #31
 801e7ac:	d501      	bpl.n	801e7b2 <_printf_float+0x1ba>
 801e7ae:	3302      	adds	r3, #2
 801e7b0:	e7f4      	b.n	801e79c <_printf_float+0x1a4>
 801e7b2:	2301      	movs	r3, #1
 801e7b4:	e7f2      	b.n	801e79c <_printf_float+0x1a4>
 801e7b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801e7ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e7bc:	4299      	cmp	r1, r3
 801e7be:	db05      	blt.n	801e7cc <_printf_float+0x1d4>
 801e7c0:	6823      	ldr	r3, [r4, #0]
 801e7c2:	6121      	str	r1, [r4, #16]
 801e7c4:	07d8      	lsls	r0, r3, #31
 801e7c6:	d5ea      	bpl.n	801e79e <_printf_float+0x1a6>
 801e7c8:	1c4b      	adds	r3, r1, #1
 801e7ca:	e7e7      	b.n	801e79c <_printf_float+0x1a4>
 801e7cc:	2900      	cmp	r1, #0
 801e7ce:	bfd4      	ite	le
 801e7d0:	f1c1 0202 	rsble	r2, r1, #2
 801e7d4:	2201      	movgt	r2, #1
 801e7d6:	4413      	add	r3, r2
 801e7d8:	e7e0      	b.n	801e79c <_printf_float+0x1a4>
 801e7da:	6823      	ldr	r3, [r4, #0]
 801e7dc:	055a      	lsls	r2, r3, #21
 801e7de:	d407      	bmi.n	801e7f0 <_printf_float+0x1f8>
 801e7e0:	6923      	ldr	r3, [r4, #16]
 801e7e2:	4642      	mov	r2, r8
 801e7e4:	4631      	mov	r1, r6
 801e7e6:	4628      	mov	r0, r5
 801e7e8:	47b8      	blx	r7
 801e7ea:	3001      	adds	r0, #1
 801e7ec:	d12c      	bne.n	801e848 <_printf_float+0x250>
 801e7ee:	e764      	b.n	801e6ba <_printf_float+0xc2>
 801e7f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801e7f4:	f240 80e0 	bls.w	801e9b8 <_printf_float+0x3c0>
 801e7f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801e7fc:	2200      	movs	r2, #0
 801e7fe:	2300      	movs	r3, #0
 801e800:	f7e2 f962 	bl	8000ac8 <__aeabi_dcmpeq>
 801e804:	2800      	cmp	r0, #0
 801e806:	d034      	beq.n	801e872 <_printf_float+0x27a>
 801e808:	4a37      	ldr	r2, [pc, #220]	; (801e8e8 <_printf_float+0x2f0>)
 801e80a:	2301      	movs	r3, #1
 801e80c:	4631      	mov	r1, r6
 801e80e:	4628      	mov	r0, r5
 801e810:	47b8      	blx	r7
 801e812:	3001      	adds	r0, #1
 801e814:	f43f af51 	beq.w	801e6ba <_printf_float+0xc2>
 801e818:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e81c:	429a      	cmp	r2, r3
 801e81e:	db02      	blt.n	801e826 <_printf_float+0x22e>
 801e820:	6823      	ldr	r3, [r4, #0]
 801e822:	07d8      	lsls	r0, r3, #31
 801e824:	d510      	bpl.n	801e848 <_printf_float+0x250>
 801e826:	ee18 3a10 	vmov	r3, s16
 801e82a:	4652      	mov	r2, sl
 801e82c:	4631      	mov	r1, r6
 801e82e:	4628      	mov	r0, r5
 801e830:	47b8      	blx	r7
 801e832:	3001      	adds	r0, #1
 801e834:	f43f af41 	beq.w	801e6ba <_printf_float+0xc2>
 801e838:	f04f 0800 	mov.w	r8, #0
 801e83c:	f104 091a 	add.w	r9, r4, #26
 801e840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e842:	3b01      	subs	r3, #1
 801e844:	4543      	cmp	r3, r8
 801e846:	dc09      	bgt.n	801e85c <_printf_float+0x264>
 801e848:	6823      	ldr	r3, [r4, #0]
 801e84a:	079b      	lsls	r3, r3, #30
 801e84c:	f100 8105 	bmi.w	801ea5a <_printf_float+0x462>
 801e850:	68e0      	ldr	r0, [r4, #12]
 801e852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801e854:	4298      	cmp	r0, r3
 801e856:	bfb8      	it	lt
 801e858:	4618      	movlt	r0, r3
 801e85a:	e730      	b.n	801e6be <_printf_float+0xc6>
 801e85c:	2301      	movs	r3, #1
 801e85e:	464a      	mov	r2, r9
 801e860:	4631      	mov	r1, r6
 801e862:	4628      	mov	r0, r5
 801e864:	47b8      	blx	r7
 801e866:	3001      	adds	r0, #1
 801e868:	f43f af27 	beq.w	801e6ba <_printf_float+0xc2>
 801e86c:	f108 0801 	add.w	r8, r8, #1
 801e870:	e7e6      	b.n	801e840 <_printf_float+0x248>
 801e872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e874:	2b00      	cmp	r3, #0
 801e876:	dc39      	bgt.n	801e8ec <_printf_float+0x2f4>
 801e878:	4a1b      	ldr	r2, [pc, #108]	; (801e8e8 <_printf_float+0x2f0>)
 801e87a:	2301      	movs	r3, #1
 801e87c:	4631      	mov	r1, r6
 801e87e:	4628      	mov	r0, r5
 801e880:	47b8      	blx	r7
 801e882:	3001      	adds	r0, #1
 801e884:	f43f af19 	beq.w	801e6ba <_printf_float+0xc2>
 801e888:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e88c:	4313      	orrs	r3, r2
 801e88e:	d102      	bne.n	801e896 <_printf_float+0x29e>
 801e890:	6823      	ldr	r3, [r4, #0]
 801e892:	07d9      	lsls	r1, r3, #31
 801e894:	d5d8      	bpl.n	801e848 <_printf_float+0x250>
 801e896:	ee18 3a10 	vmov	r3, s16
 801e89a:	4652      	mov	r2, sl
 801e89c:	4631      	mov	r1, r6
 801e89e:	4628      	mov	r0, r5
 801e8a0:	47b8      	blx	r7
 801e8a2:	3001      	adds	r0, #1
 801e8a4:	f43f af09 	beq.w	801e6ba <_printf_float+0xc2>
 801e8a8:	f04f 0900 	mov.w	r9, #0
 801e8ac:	f104 0a1a 	add.w	sl, r4, #26
 801e8b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e8b2:	425b      	negs	r3, r3
 801e8b4:	454b      	cmp	r3, r9
 801e8b6:	dc01      	bgt.n	801e8bc <_printf_float+0x2c4>
 801e8b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e8ba:	e792      	b.n	801e7e2 <_printf_float+0x1ea>
 801e8bc:	2301      	movs	r3, #1
 801e8be:	4652      	mov	r2, sl
 801e8c0:	4631      	mov	r1, r6
 801e8c2:	4628      	mov	r0, r5
 801e8c4:	47b8      	blx	r7
 801e8c6:	3001      	adds	r0, #1
 801e8c8:	f43f aef7 	beq.w	801e6ba <_printf_float+0xc2>
 801e8cc:	f109 0901 	add.w	r9, r9, #1
 801e8d0:	e7ee      	b.n	801e8b0 <_printf_float+0x2b8>
 801e8d2:	bf00      	nop
 801e8d4:	7fefffff 	.word	0x7fefffff
 801e8d8:	080270a4 	.word	0x080270a4
 801e8dc:	080270a8 	.word	0x080270a8
 801e8e0:	080270b0 	.word	0x080270b0
 801e8e4:	080270ac 	.word	0x080270ac
 801e8e8:	08027451 	.word	0x08027451
 801e8ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e8ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801e8f0:	429a      	cmp	r2, r3
 801e8f2:	bfa8      	it	ge
 801e8f4:	461a      	movge	r2, r3
 801e8f6:	2a00      	cmp	r2, #0
 801e8f8:	4691      	mov	r9, r2
 801e8fa:	dc37      	bgt.n	801e96c <_printf_float+0x374>
 801e8fc:	f04f 0b00 	mov.w	fp, #0
 801e900:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e904:	f104 021a 	add.w	r2, r4, #26
 801e908:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801e90a:	9305      	str	r3, [sp, #20]
 801e90c:	eba3 0309 	sub.w	r3, r3, r9
 801e910:	455b      	cmp	r3, fp
 801e912:	dc33      	bgt.n	801e97c <_printf_float+0x384>
 801e914:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e918:	429a      	cmp	r2, r3
 801e91a:	db3b      	blt.n	801e994 <_printf_float+0x39c>
 801e91c:	6823      	ldr	r3, [r4, #0]
 801e91e:	07da      	lsls	r2, r3, #31
 801e920:	d438      	bmi.n	801e994 <_printf_float+0x39c>
 801e922:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e924:	9b05      	ldr	r3, [sp, #20]
 801e926:	9909      	ldr	r1, [sp, #36]	; 0x24
 801e928:	1ad3      	subs	r3, r2, r3
 801e92a:	eba2 0901 	sub.w	r9, r2, r1
 801e92e:	4599      	cmp	r9, r3
 801e930:	bfa8      	it	ge
 801e932:	4699      	movge	r9, r3
 801e934:	f1b9 0f00 	cmp.w	r9, #0
 801e938:	dc35      	bgt.n	801e9a6 <_printf_float+0x3ae>
 801e93a:	f04f 0800 	mov.w	r8, #0
 801e93e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801e942:	f104 0a1a 	add.w	sl, r4, #26
 801e946:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801e94a:	1a9b      	subs	r3, r3, r2
 801e94c:	eba3 0309 	sub.w	r3, r3, r9
 801e950:	4543      	cmp	r3, r8
 801e952:	f77f af79 	ble.w	801e848 <_printf_float+0x250>
 801e956:	2301      	movs	r3, #1
 801e958:	4652      	mov	r2, sl
 801e95a:	4631      	mov	r1, r6
 801e95c:	4628      	mov	r0, r5
 801e95e:	47b8      	blx	r7
 801e960:	3001      	adds	r0, #1
 801e962:	f43f aeaa 	beq.w	801e6ba <_printf_float+0xc2>
 801e966:	f108 0801 	add.w	r8, r8, #1
 801e96a:	e7ec      	b.n	801e946 <_printf_float+0x34e>
 801e96c:	4613      	mov	r3, r2
 801e96e:	4631      	mov	r1, r6
 801e970:	4642      	mov	r2, r8
 801e972:	4628      	mov	r0, r5
 801e974:	47b8      	blx	r7
 801e976:	3001      	adds	r0, #1
 801e978:	d1c0      	bne.n	801e8fc <_printf_float+0x304>
 801e97a:	e69e      	b.n	801e6ba <_printf_float+0xc2>
 801e97c:	2301      	movs	r3, #1
 801e97e:	4631      	mov	r1, r6
 801e980:	4628      	mov	r0, r5
 801e982:	9205      	str	r2, [sp, #20]
 801e984:	47b8      	blx	r7
 801e986:	3001      	adds	r0, #1
 801e988:	f43f ae97 	beq.w	801e6ba <_printf_float+0xc2>
 801e98c:	9a05      	ldr	r2, [sp, #20]
 801e98e:	f10b 0b01 	add.w	fp, fp, #1
 801e992:	e7b9      	b.n	801e908 <_printf_float+0x310>
 801e994:	ee18 3a10 	vmov	r3, s16
 801e998:	4652      	mov	r2, sl
 801e99a:	4631      	mov	r1, r6
 801e99c:	4628      	mov	r0, r5
 801e99e:	47b8      	blx	r7
 801e9a0:	3001      	adds	r0, #1
 801e9a2:	d1be      	bne.n	801e922 <_printf_float+0x32a>
 801e9a4:	e689      	b.n	801e6ba <_printf_float+0xc2>
 801e9a6:	9a05      	ldr	r2, [sp, #20]
 801e9a8:	464b      	mov	r3, r9
 801e9aa:	4442      	add	r2, r8
 801e9ac:	4631      	mov	r1, r6
 801e9ae:	4628      	mov	r0, r5
 801e9b0:	47b8      	blx	r7
 801e9b2:	3001      	adds	r0, #1
 801e9b4:	d1c1      	bne.n	801e93a <_printf_float+0x342>
 801e9b6:	e680      	b.n	801e6ba <_printf_float+0xc2>
 801e9b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801e9ba:	2a01      	cmp	r2, #1
 801e9bc:	dc01      	bgt.n	801e9c2 <_printf_float+0x3ca>
 801e9be:	07db      	lsls	r3, r3, #31
 801e9c0:	d538      	bpl.n	801ea34 <_printf_float+0x43c>
 801e9c2:	2301      	movs	r3, #1
 801e9c4:	4642      	mov	r2, r8
 801e9c6:	4631      	mov	r1, r6
 801e9c8:	4628      	mov	r0, r5
 801e9ca:	47b8      	blx	r7
 801e9cc:	3001      	adds	r0, #1
 801e9ce:	f43f ae74 	beq.w	801e6ba <_printf_float+0xc2>
 801e9d2:	ee18 3a10 	vmov	r3, s16
 801e9d6:	4652      	mov	r2, sl
 801e9d8:	4631      	mov	r1, r6
 801e9da:	4628      	mov	r0, r5
 801e9dc:	47b8      	blx	r7
 801e9de:	3001      	adds	r0, #1
 801e9e0:	f43f ae6b 	beq.w	801e6ba <_printf_float+0xc2>
 801e9e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801e9e8:	2200      	movs	r2, #0
 801e9ea:	2300      	movs	r3, #0
 801e9ec:	f7e2 f86c 	bl	8000ac8 <__aeabi_dcmpeq>
 801e9f0:	b9d8      	cbnz	r0, 801ea2a <_printf_float+0x432>
 801e9f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801e9f4:	f108 0201 	add.w	r2, r8, #1
 801e9f8:	3b01      	subs	r3, #1
 801e9fa:	4631      	mov	r1, r6
 801e9fc:	4628      	mov	r0, r5
 801e9fe:	47b8      	blx	r7
 801ea00:	3001      	adds	r0, #1
 801ea02:	d10e      	bne.n	801ea22 <_printf_float+0x42a>
 801ea04:	e659      	b.n	801e6ba <_printf_float+0xc2>
 801ea06:	2301      	movs	r3, #1
 801ea08:	4652      	mov	r2, sl
 801ea0a:	4631      	mov	r1, r6
 801ea0c:	4628      	mov	r0, r5
 801ea0e:	47b8      	blx	r7
 801ea10:	3001      	adds	r0, #1
 801ea12:	f43f ae52 	beq.w	801e6ba <_printf_float+0xc2>
 801ea16:	f108 0801 	add.w	r8, r8, #1
 801ea1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ea1c:	3b01      	subs	r3, #1
 801ea1e:	4543      	cmp	r3, r8
 801ea20:	dcf1      	bgt.n	801ea06 <_printf_float+0x40e>
 801ea22:	464b      	mov	r3, r9
 801ea24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801ea28:	e6dc      	b.n	801e7e4 <_printf_float+0x1ec>
 801ea2a:	f04f 0800 	mov.w	r8, #0
 801ea2e:	f104 0a1a 	add.w	sl, r4, #26
 801ea32:	e7f2      	b.n	801ea1a <_printf_float+0x422>
 801ea34:	2301      	movs	r3, #1
 801ea36:	4642      	mov	r2, r8
 801ea38:	e7df      	b.n	801e9fa <_printf_float+0x402>
 801ea3a:	2301      	movs	r3, #1
 801ea3c:	464a      	mov	r2, r9
 801ea3e:	4631      	mov	r1, r6
 801ea40:	4628      	mov	r0, r5
 801ea42:	47b8      	blx	r7
 801ea44:	3001      	adds	r0, #1
 801ea46:	f43f ae38 	beq.w	801e6ba <_printf_float+0xc2>
 801ea4a:	f108 0801 	add.w	r8, r8, #1
 801ea4e:	68e3      	ldr	r3, [r4, #12]
 801ea50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801ea52:	1a5b      	subs	r3, r3, r1
 801ea54:	4543      	cmp	r3, r8
 801ea56:	dcf0      	bgt.n	801ea3a <_printf_float+0x442>
 801ea58:	e6fa      	b.n	801e850 <_printf_float+0x258>
 801ea5a:	f04f 0800 	mov.w	r8, #0
 801ea5e:	f104 0919 	add.w	r9, r4, #25
 801ea62:	e7f4      	b.n	801ea4e <_printf_float+0x456>

0801ea64 <_printf_common>:
 801ea64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ea68:	4616      	mov	r6, r2
 801ea6a:	4699      	mov	r9, r3
 801ea6c:	688a      	ldr	r2, [r1, #8]
 801ea6e:	690b      	ldr	r3, [r1, #16]
 801ea70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ea74:	4293      	cmp	r3, r2
 801ea76:	bfb8      	it	lt
 801ea78:	4613      	movlt	r3, r2
 801ea7a:	6033      	str	r3, [r6, #0]
 801ea7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ea80:	4607      	mov	r7, r0
 801ea82:	460c      	mov	r4, r1
 801ea84:	b10a      	cbz	r2, 801ea8a <_printf_common+0x26>
 801ea86:	3301      	adds	r3, #1
 801ea88:	6033      	str	r3, [r6, #0]
 801ea8a:	6823      	ldr	r3, [r4, #0]
 801ea8c:	0699      	lsls	r1, r3, #26
 801ea8e:	bf42      	ittt	mi
 801ea90:	6833      	ldrmi	r3, [r6, #0]
 801ea92:	3302      	addmi	r3, #2
 801ea94:	6033      	strmi	r3, [r6, #0]
 801ea96:	6825      	ldr	r5, [r4, #0]
 801ea98:	f015 0506 	ands.w	r5, r5, #6
 801ea9c:	d106      	bne.n	801eaac <_printf_common+0x48>
 801ea9e:	f104 0a19 	add.w	sl, r4, #25
 801eaa2:	68e3      	ldr	r3, [r4, #12]
 801eaa4:	6832      	ldr	r2, [r6, #0]
 801eaa6:	1a9b      	subs	r3, r3, r2
 801eaa8:	42ab      	cmp	r3, r5
 801eaaa:	dc26      	bgt.n	801eafa <_printf_common+0x96>
 801eaac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801eab0:	1e13      	subs	r3, r2, #0
 801eab2:	6822      	ldr	r2, [r4, #0]
 801eab4:	bf18      	it	ne
 801eab6:	2301      	movne	r3, #1
 801eab8:	0692      	lsls	r2, r2, #26
 801eaba:	d42b      	bmi.n	801eb14 <_printf_common+0xb0>
 801eabc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801eac0:	4649      	mov	r1, r9
 801eac2:	4638      	mov	r0, r7
 801eac4:	47c0      	blx	r8
 801eac6:	3001      	adds	r0, #1
 801eac8:	d01e      	beq.n	801eb08 <_printf_common+0xa4>
 801eaca:	6823      	ldr	r3, [r4, #0]
 801eacc:	68e5      	ldr	r5, [r4, #12]
 801eace:	6832      	ldr	r2, [r6, #0]
 801ead0:	f003 0306 	and.w	r3, r3, #6
 801ead4:	2b04      	cmp	r3, #4
 801ead6:	bf08      	it	eq
 801ead8:	1aad      	subeq	r5, r5, r2
 801eada:	68a3      	ldr	r3, [r4, #8]
 801eadc:	6922      	ldr	r2, [r4, #16]
 801eade:	bf0c      	ite	eq
 801eae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801eae4:	2500      	movne	r5, #0
 801eae6:	4293      	cmp	r3, r2
 801eae8:	bfc4      	itt	gt
 801eaea:	1a9b      	subgt	r3, r3, r2
 801eaec:	18ed      	addgt	r5, r5, r3
 801eaee:	2600      	movs	r6, #0
 801eaf0:	341a      	adds	r4, #26
 801eaf2:	42b5      	cmp	r5, r6
 801eaf4:	d11a      	bne.n	801eb2c <_printf_common+0xc8>
 801eaf6:	2000      	movs	r0, #0
 801eaf8:	e008      	b.n	801eb0c <_printf_common+0xa8>
 801eafa:	2301      	movs	r3, #1
 801eafc:	4652      	mov	r2, sl
 801eafe:	4649      	mov	r1, r9
 801eb00:	4638      	mov	r0, r7
 801eb02:	47c0      	blx	r8
 801eb04:	3001      	adds	r0, #1
 801eb06:	d103      	bne.n	801eb10 <_printf_common+0xac>
 801eb08:	f04f 30ff 	mov.w	r0, #4294967295
 801eb0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eb10:	3501      	adds	r5, #1
 801eb12:	e7c6      	b.n	801eaa2 <_printf_common+0x3e>
 801eb14:	18e1      	adds	r1, r4, r3
 801eb16:	1c5a      	adds	r2, r3, #1
 801eb18:	2030      	movs	r0, #48	; 0x30
 801eb1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801eb1e:	4422      	add	r2, r4
 801eb20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801eb24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801eb28:	3302      	adds	r3, #2
 801eb2a:	e7c7      	b.n	801eabc <_printf_common+0x58>
 801eb2c:	2301      	movs	r3, #1
 801eb2e:	4622      	mov	r2, r4
 801eb30:	4649      	mov	r1, r9
 801eb32:	4638      	mov	r0, r7
 801eb34:	47c0      	blx	r8
 801eb36:	3001      	adds	r0, #1
 801eb38:	d0e6      	beq.n	801eb08 <_printf_common+0xa4>
 801eb3a:	3601      	adds	r6, #1
 801eb3c:	e7d9      	b.n	801eaf2 <_printf_common+0x8e>
	...

0801eb40 <_printf_i>:
 801eb40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801eb44:	460c      	mov	r4, r1
 801eb46:	4691      	mov	r9, r2
 801eb48:	7e27      	ldrb	r7, [r4, #24]
 801eb4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801eb4c:	2f78      	cmp	r7, #120	; 0x78
 801eb4e:	4680      	mov	r8, r0
 801eb50:	469a      	mov	sl, r3
 801eb52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801eb56:	d807      	bhi.n	801eb68 <_printf_i+0x28>
 801eb58:	2f62      	cmp	r7, #98	; 0x62
 801eb5a:	d80a      	bhi.n	801eb72 <_printf_i+0x32>
 801eb5c:	2f00      	cmp	r7, #0
 801eb5e:	f000 80d8 	beq.w	801ed12 <_printf_i+0x1d2>
 801eb62:	2f58      	cmp	r7, #88	; 0x58
 801eb64:	f000 80a3 	beq.w	801ecae <_printf_i+0x16e>
 801eb68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801eb6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801eb70:	e03a      	b.n	801ebe8 <_printf_i+0xa8>
 801eb72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801eb76:	2b15      	cmp	r3, #21
 801eb78:	d8f6      	bhi.n	801eb68 <_printf_i+0x28>
 801eb7a:	a001      	add	r0, pc, #4	; (adr r0, 801eb80 <_printf_i+0x40>)
 801eb7c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801eb80:	0801ebd9 	.word	0x0801ebd9
 801eb84:	0801ebed 	.word	0x0801ebed
 801eb88:	0801eb69 	.word	0x0801eb69
 801eb8c:	0801eb69 	.word	0x0801eb69
 801eb90:	0801eb69 	.word	0x0801eb69
 801eb94:	0801eb69 	.word	0x0801eb69
 801eb98:	0801ebed 	.word	0x0801ebed
 801eb9c:	0801eb69 	.word	0x0801eb69
 801eba0:	0801eb69 	.word	0x0801eb69
 801eba4:	0801eb69 	.word	0x0801eb69
 801eba8:	0801eb69 	.word	0x0801eb69
 801ebac:	0801ecf9 	.word	0x0801ecf9
 801ebb0:	0801ec1d 	.word	0x0801ec1d
 801ebb4:	0801ecdb 	.word	0x0801ecdb
 801ebb8:	0801eb69 	.word	0x0801eb69
 801ebbc:	0801eb69 	.word	0x0801eb69
 801ebc0:	0801ed1b 	.word	0x0801ed1b
 801ebc4:	0801eb69 	.word	0x0801eb69
 801ebc8:	0801ec1d 	.word	0x0801ec1d
 801ebcc:	0801eb69 	.word	0x0801eb69
 801ebd0:	0801eb69 	.word	0x0801eb69
 801ebd4:	0801ece3 	.word	0x0801ece3
 801ebd8:	680b      	ldr	r3, [r1, #0]
 801ebda:	1d1a      	adds	r2, r3, #4
 801ebdc:	681b      	ldr	r3, [r3, #0]
 801ebde:	600a      	str	r2, [r1, #0]
 801ebe0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801ebe4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801ebe8:	2301      	movs	r3, #1
 801ebea:	e0a3      	b.n	801ed34 <_printf_i+0x1f4>
 801ebec:	6825      	ldr	r5, [r4, #0]
 801ebee:	6808      	ldr	r0, [r1, #0]
 801ebf0:	062e      	lsls	r6, r5, #24
 801ebf2:	f100 0304 	add.w	r3, r0, #4
 801ebf6:	d50a      	bpl.n	801ec0e <_printf_i+0xce>
 801ebf8:	6805      	ldr	r5, [r0, #0]
 801ebfa:	600b      	str	r3, [r1, #0]
 801ebfc:	2d00      	cmp	r5, #0
 801ebfe:	da03      	bge.n	801ec08 <_printf_i+0xc8>
 801ec00:	232d      	movs	r3, #45	; 0x2d
 801ec02:	426d      	negs	r5, r5
 801ec04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ec08:	485e      	ldr	r0, [pc, #376]	; (801ed84 <_printf_i+0x244>)
 801ec0a:	230a      	movs	r3, #10
 801ec0c:	e019      	b.n	801ec42 <_printf_i+0x102>
 801ec0e:	f015 0f40 	tst.w	r5, #64	; 0x40
 801ec12:	6805      	ldr	r5, [r0, #0]
 801ec14:	600b      	str	r3, [r1, #0]
 801ec16:	bf18      	it	ne
 801ec18:	b22d      	sxthne	r5, r5
 801ec1a:	e7ef      	b.n	801ebfc <_printf_i+0xbc>
 801ec1c:	680b      	ldr	r3, [r1, #0]
 801ec1e:	6825      	ldr	r5, [r4, #0]
 801ec20:	1d18      	adds	r0, r3, #4
 801ec22:	6008      	str	r0, [r1, #0]
 801ec24:	0628      	lsls	r0, r5, #24
 801ec26:	d501      	bpl.n	801ec2c <_printf_i+0xec>
 801ec28:	681d      	ldr	r5, [r3, #0]
 801ec2a:	e002      	b.n	801ec32 <_printf_i+0xf2>
 801ec2c:	0669      	lsls	r1, r5, #25
 801ec2e:	d5fb      	bpl.n	801ec28 <_printf_i+0xe8>
 801ec30:	881d      	ldrh	r5, [r3, #0]
 801ec32:	4854      	ldr	r0, [pc, #336]	; (801ed84 <_printf_i+0x244>)
 801ec34:	2f6f      	cmp	r7, #111	; 0x6f
 801ec36:	bf0c      	ite	eq
 801ec38:	2308      	moveq	r3, #8
 801ec3a:	230a      	movne	r3, #10
 801ec3c:	2100      	movs	r1, #0
 801ec3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ec42:	6866      	ldr	r6, [r4, #4]
 801ec44:	60a6      	str	r6, [r4, #8]
 801ec46:	2e00      	cmp	r6, #0
 801ec48:	bfa2      	ittt	ge
 801ec4a:	6821      	ldrge	r1, [r4, #0]
 801ec4c:	f021 0104 	bicge.w	r1, r1, #4
 801ec50:	6021      	strge	r1, [r4, #0]
 801ec52:	b90d      	cbnz	r5, 801ec58 <_printf_i+0x118>
 801ec54:	2e00      	cmp	r6, #0
 801ec56:	d04d      	beq.n	801ecf4 <_printf_i+0x1b4>
 801ec58:	4616      	mov	r6, r2
 801ec5a:	fbb5 f1f3 	udiv	r1, r5, r3
 801ec5e:	fb03 5711 	mls	r7, r3, r1, r5
 801ec62:	5dc7      	ldrb	r7, [r0, r7]
 801ec64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801ec68:	462f      	mov	r7, r5
 801ec6a:	42bb      	cmp	r3, r7
 801ec6c:	460d      	mov	r5, r1
 801ec6e:	d9f4      	bls.n	801ec5a <_printf_i+0x11a>
 801ec70:	2b08      	cmp	r3, #8
 801ec72:	d10b      	bne.n	801ec8c <_printf_i+0x14c>
 801ec74:	6823      	ldr	r3, [r4, #0]
 801ec76:	07df      	lsls	r7, r3, #31
 801ec78:	d508      	bpl.n	801ec8c <_printf_i+0x14c>
 801ec7a:	6923      	ldr	r3, [r4, #16]
 801ec7c:	6861      	ldr	r1, [r4, #4]
 801ec7e:	4299      	cmp	r1, r3
 801ec80:	bfde      	ittt	le
 801ec82:	2330      	movle	r3, #48	; 0x30
 801ec84:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ec88:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ec8c:	1b92      	subs	r2, r2, r6
 801ec8e:	6122      	str	r2, [r4, #16]
 801ec90:	f8cd a000 	str.w	sl, [sp]
 801ec94:	464b      	mov	r3, r9
 801ec96:	aa03      	add	r2, sp, #12
 801ec98:	4621      	mov	r1, r4
 801ec9a:	4640      	mov	r0, r8
 801ec9c:	f7ff fee2 	bl	801ea64 <_printf_common>
 801eca0:	3001      	adds	r0, #1
 801eca2:	d14c      	bne.n	801ed3e <_printf_i+0x1fe>
 801eca4:	f04f 30ff 	mov.w	r0, #4294967295
 801eca8:	b004      	add	sp, #16
 801ecaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ecae:	4835      	ldr	r0, [pc, #212]	; (801ed84 <_printf_i+0x244>)
 801ecb0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801ecb4:	6823      	ldr	r3, [r4, #0]
 801ecb6:	680e      	ldr	r6, [r1, #0]
 801ecb8:	061f      	lsls	r7, r3, #24
 801ecba:	f856 5b04 	ldr.w	r5, [r6], #4
 801ecbe:	600e      	str	r6, [r1, #0]
 801ecc0:	d514      	bpl.n	801ecec <_printf_i+0x1ac>
 801ecc2:	07d9      	lsls	r1, r3, #31
 801ecc4:	bf44      	itt	mi
 801ecc6:	f043 0320 	orrmi.w	r3, r3, #32
 801ecca:	6023      	strmi	r3, [r4, #0]
 801eccc:	b91d      	cbnz	r5, 801ecd6 <_printf_i+0x196>
 801ecce:	6823      	ldr	r3, [r4, #0]
 801ecd0:	f023 0320 	bic.w	r3, r3, #32
 801ecd4:	6023      	str	r3, [r4, #0]
 801ecd6:	2310      	movs	r3, #16
 801ecd8:	e7b0      	b.n	801ec3c <_printf_i+0xfc>
 801ecda:	6823      	ldr	r3, [r4, #0]
 801ecdc:	f043 0320 	orr.w	r3, r3, #32
 801ece0:	6023      	str	r3, [r4, #0]
 801ece2:	2378      	movs	r3, #120	; 0x78
 801ece4:	4828      	ldr	r0, [pc, #160]	; (801ed88 <_printf_i+0x248>)
 801ece6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801ecea:	e7e3      	b.n	801ecb4 <_printf_i+0x174>
 801ecec:	065e      	lsls	r6, r3, #25
 801ecee:	bf48      	it	mi
 801ecf0:	b2ad      	uxthmi	r5, r5
 801ecf2:	e7e6      	b.n	801ecc2 <_printf_i+0x182>
 801ecf4:	4616      	mov	r6, r2
 801ecf6:	e7bb      	b.n	801ec70 <_printf_i+0x130>
 801ecf8:	680b      	ldr	r3, [r1, #0]
 801ecfa:	6826      	ldr	r6, [r4, #0]
 801ecfc:	6960      	ldr	r0, [r4, #20]
 801ecfe:	1d1d      	adds	r5, r3, #4
 801ed00:	600d      	str	r5, [r1, #0]
 801ed02:	0635      	lsls	r5, r6, #24
 801ed04:	681b      	ldr	r3, [r3, #0]
 801ed06:	d501      	bpl.n	801ed0c <_printf_i+0x1cc>
 801ed08:	6018      	str	r0, [r3, #0]
 801ed0a:	e002      	b.n	801ed12 <_printf_i+0x1d2>
 801ed0c:	0671      	lsls	r1, r6, #25
 801ed0e:	d5fb      	bpl.n	801ed08 <_printf_i+0x1c8>
 801ed10:	8018      	strh	r0, [r3, #0]
 801ed12:	2300      	movs	r3, #0
 801ed14:	6123      	str	r3, [r4, #16]
 801ed16:	4616      	mov	r6, r2
 801ed18:	e7ba      	b.n	801ec90 <_printf_i+0x150>
 801ed1a:	680b      	ldr	r3, [r1, #0]
 801ed1c:	1d1a      	adds	r2, r3, #4
 801ed1e:	600a      	str	r2, [r1, #0]
 801ed20:	681e      	ldr	r6, [r3, #0]
 801ed22:	6862      	ldr	r2, [r4, #4]
 801ed24:	2100      	movs	r1, #0
 801ed26:	4630      	mov	r0, r6
 801ed28:	f7e1 fa5a 	bl	80001e0 <memchr>
 801ed2c:	b108      	cbz	r0, 801ed32 <_printf_i+0x1f2>
 801ed2e:	1b80      	subs	r0, r0, r6
 801ed30:	6060      	str	r0, [r4, #4]
 801ed32:	6863      	ldr	r3, [r4, #4]
 801ed34:	6123      	str	r3, [r4, #16]
 801ed36:	2300      	movs	r3, #0
 801ed38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ed3c:	e7a8      	b.n	801ec90 <_printf_i+0x150>
 801ed3e:	6923      	ldr	r3, [r4, #16]
 801ed40:	4632      	mov	r2, r6
 801ed42:	4649      	mov	r1, r9
 801ed44:	4640      	mov	r0, r8
 801ed46:	47d0      	blx	sl
 801ed48:	3001      	adds	r0, #1
 801ed4a:	d0ab      	beq.n	801eca4 <_printf_i+0x164>
 801ed4c:	6823      	ldr	r3, [r4, #0]
 801ed4e:	079b      	lsls	r3, r3, #30
 801ed50:	d413      	bmi.n	801ed7a <_printf_i+0x23a>
 801ed52:	68e0      	ldr	r0, [r4, #12]
 801ed54:	9b03      	ldr	r3, [sp, #12]
 801ed56:	4298      	cmp	r0, r3
 801ed58:	bfb8      	it	lt
 801ed5a:	4618      	movlt	r0, r3
 801ed5c:	e7a4      	b.n	801eca8 <_printf_i+0x168>
 801ed5e:	2301      	movs	r3, #1
 801ed60:	4632      	mov	r2, r6
 801ed62:	4649      	mov	r1, r9
 801ed64:	4640      	mov	r0, r8
 801ed66:	47d0      	blx	sl
 801ed68:	3001      	adds	r0, #1
 801ed6a:	d09b      	beq.n	801eca4 <_printf_i+0x164>
 801ed6c:	3501      	adds	r5, #1
 801ed6e:	68e3      	ldr	r3, [r4, #12]
 801ed70:	9903      	ldr	r1, [sp, #12]
 801ed72:	1a5b      	subs	r3, r3, r1
 801ed74:	42ab      	cmp	r3, r5
 801ed76:	dcf2      	bgt.n	801ed5e <_printf_i+0x21e>
 801ed78:	e7eb      	b.n	801ed52 <_printf_i+0x212>
 801ed7a:	2500      	movs	r5, #0
 801ed7c:	f104 0619 	add.w	r6, r4, #25
 801ed80:	e7f5      	b.n	801ed6e <_printf_i+0x22e>
 801ed82:	bf00      	nop
 801ed84:	080270b4 	.word	0x080270b4
 801ed88:	080270c5 	.word	0x080270c5

0801ed8c <_scanf_float>:
 801ed8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ed90:	b087      	sub	sp, #28
 801ed92:	4617      	mov	r7, r2
 801ed94:	9303      	str	r3, [sp, #12]
 801ed96:	688b      	ldr	r3, [r1, #8]
 801ed98:	1e5a      	subs	r2, r3, #1
 801ed9a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 801ed9e:	bf83      	ittte	hi
 801eda0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 801eda4:	195b      	addhi	r3, r3, r5
 801eda6:	9302      	strhi	r3, [sp, #8]
 801eda8:	2300      	movls	r3, #0
 801edaa:	bf86      	itte	hi
 801edac:	f240 135d 	movwhi	r3, #349	; 0x15d
 801edb0:	608b      	strhi	r3, [r1, #8]
 801edb2:	9302      	strls	r3, [sp, #8]
 801edb4:	680b      	ldr	r3, [r1, #0]
 801edb6:	468b      	mov	fp, r1
 801edb8:	2500      	movs	r5, #0
 801edba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 801edbe:	f84b 3b1c 	str.w	r3, [fp], #28
 801edc2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801edc6:	4680      	mov	r8, r0
 801edc8:	460c      	mov	r4, r1
 801edca:	465e      	mov	r6, fp
 801edcc:	46aa      	mov	sl, r5
 801edce:	46a9      	mov	r9, r5
 801edd0:	9501      	str	r5, [sp, #4]
 801edd2:	68a2      	ldr	r2, [r4, #8]
 801edd4:	b152      	cbz	r2, 801edec <_scanf_float+0x60>
 801edd6:	683b      	ldr	r3, [r7, #0]
 801edd8:	781b      	ldrb	r3, [r3, #0]
 801edda:	2b4e      	cmp	r3, #78	; 0x4e
 801eddc:	d864      	bhi.n	801eea8 <_scanf_float+0x11c>
 801edde:	2b40      	cmp	r3, #64	; 0x40
 801ede0:	d83c      	bhi.n	801ee5c <_scanf_float+0xd0>
 801ede2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 801ede6:	b2c8      	uxtb	r0, r1
 801ede8:	280e      	cmp	r0, #14
 801edea:	d93a      	bls.n	801ee62 <_scanf_float+0xd6>
 801edec:	f1b9 0f00 	cmp.w	r9, #0
 801edf0:	d003      	beq.n	801edfa <_scanf_float+0x6e>
 801edf2:	6823      	ldr	r3, [r4, #0]
 801edf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801edf8:	6023      	str	r3, [r4, #0]
 801edfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 801edfe:	f1ba 0f01 	cmp.w	sl, #1
 801ee02:	f200 8113 	bhi.w	801f02c <_scanf_float+0x2a0>
 801ee06:	455e      	cmp	r6, fp
 801ee08:	f200 8105 	bhi.w	801f016 <_scanf_float+0x28a>
 801ee0c:	2501      	movs	r5, #1
 801ee0e:	4628      	mov	r0, r5
 801ee10:	b007      	add	sp, #28
 801ee12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ee16:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 801ee1a:	2a0d      	cmp	r2, #13
 801ee1c:	d8e6      	bhi.n	801edec <_scanf_float+0x60>
 801ee1e:	a101      	add	r1, pc, #4	; (adr r1, 801ee24 <_scanf_float+0x98>)
 801ee20:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 801ee24:	0801ef63 	.word	0x0801ef63
 801ee28:	0801eded 	.word	0x0801eded
 801ee2c:	0801eded 	.word	0x0801eded
 801ee30:	0801eded 	.word	0x0801eded
 801ee34:	0801efc3 	.word	0x0801efc3
 801ee38:	0801ef9b 	.word	0x0801ef9b
 801ee3c:	0801eded 	.word	0x0801eded
 801ee40:	0801eded 	.word	0x0801eded
 801ee44:	0801ef71 	.word	0x0801ef71
 801ee48:	0801eded 	.word	0x0801eded
 801ee4c:	0801eded 	.word	0x0801eded
 801ee50:	0801eded 	.word	0x0801eded
 801ee54:	0801eded 	.word	0x0801eded
 801ee58:	0801ef29 	.word	0x0801ef29
 801ee5c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 801ee60:	e7db      	b.n	801ee1a <_scanf_float+0x8e>
 801ee62:	290e      	cmp	r1, #14
 801ee64:	d8c2      	bhi.n	801edec <_scanf_float+0x60>
 801ee66:	a001      	add	r0, pc, #4	; (adr r0, 801ee6c <_scanf_float+0xe0>)
 801ee68:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 801ee6c:	0801ef1b 	.word	0x0801ef1b
 801ee70:	0801eded 	.word	0x0801eded
 801ee74:	0801ef1b 	.word	0x0801ef1b
 801ee78:	0801efaf 	.word	0x0801efaf
 801ee7c:	0801eded 	.word	0x0801eded
 801ee80:	0801eec9 	.word	0x0801eec9
 801ee84:	0801ef05 	.word	0x0801ef05
 801ee88:	0801ef05 	.word	0x0801ef05
 801ee8c:	0801ef05 	.word	0x0801ef05
 801ee90:	0801ef05 	.word	0x0801ef05
 801ee94:	0801ef05 	.word	0x0801ef05
 801ee98:	0801ef05 	.word	0x0801ef05
 801ee9c:	0801ef05 	.word	0x0801ef05
 801eea0:	0801ef05 	.word	0x0801ef05
 801eea4:	0801ef05 	.word	0x0801ef05
 801eea8:	2b6e      	cmp	r3, #110	; 0x6e
 801eeaa:	d809      	bhi.n	801eec0 <_scanf_float+0x134>
 801eeac:	2b60      	cmp	r3, #96	; 0x60
 801eeae:	d8b2      	bhi.n	801ee16 <_scanf_float+0x8a>
 801eeb0:	2b54      	cmp	r3, #84	; 0x54
 801eeb2:	d077      	beq.n	801efa4 <_scanf_float+0x218>
 801eeb4:	2b59      	cmp	r3, #89	; 0x59
 801eeb6:	d199      	bne.n	801edec <_scanf_float+0x60>
 801eeb8:	2d07      	cmp	r5, #7
 801eeba:	d197      	bne.n	801edec <_scanf_float+0x60>
 801eebc:	2508      	movs	r5, #8
 801eebe:	e029      	b.n	801ef14 <_scanf_float+0x188>
 801eec0:	2b74      	cmp	r3, #116	; 0x74
 801eec2:	d06f      	beq.n	801efa4 <_scanf_float+0x218>
 801eec4:	2b79      	cmp	r3, #121	; 0x79
 801eec6:	e7f6      	b.n	801eeb6 <_scanf_float+0x12a>
 801eec8:	6821      	ldr	r1, [r4, #0]
 801eeca:	05c8      	lsls	r0, r1, #23
 801eecc:	d51a      	bpl.n	801ef04 <_scanf_float+0x178>
 801eece:	9b02      	ldr	r3, [sp, #8]
 801eed0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 801eed4:	6021      	str	r1, [r4, #0]
 801eed6:	f109 0901 	add.w	r9, r9, #1
 801eeda:	b11b      	cbz	r3, 801eee4 <_scanf_float+0x158>
 801eedc:	3b01      	subs	r3, #1
 801eede:	3201      	adds	r2, #1
 801eee0:	9302      	str	r3, [sp, #8]
 801eee2:	60a2      	str	r2, [r4, #8]
 801eee4:	68a3      	ldr	r3, [r4, #8]
 801eee6:	3b01      	subs	r3, #1
 801eee8:	60a3      	str	r3, [r4, #8]
 801eeea:	6923      	ldr	r3, [r4, #16]
 801eeec:	3301      	adds	r3, #1
 801eeee:	6123      	str	r3, [r4, #16]
 801eef0:	687b      	ldr	r3, [r7, #4]
 801eef2:	3b01      	subs	r3, #1
 801eef4:	2b00      	cmp	r3, #0
 801eef6:	607b      	str	r3, [r7, #4]
 801eef8:	f340 8084 	ble.w	801f004 <_scanf_float+0x278>
 801eefc:	683b      	ldr	r3, [r7, #0]
 801eefe:	3301      	adds	r3, #1
 801ef00:	603b      	str	r3, [r7, #0]
 801ef02:	e766      	b.n	801edd2 <_scanf_float+0x46>
 801ef04:	eb1a 0f05 	cmn.w	sl, r5
 801ef08:	f47f af70 	bne.w	801edec <_scanf_float+0x60>
 801ef0c:	6822      	ldr	r2, [r4, #0]
 801ef0e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 801ef12:	6022      	str	r2, [r4, #0]
 801ef14:	f806 3b01 	strb.w	r3, [r6], #1
 801ef18:	e7e4      	b.n	801eee4 <_scanf_float+0x158>
 801ef1a:	6822      	ldr	r2, [r4, #0]
 801ef1c:	0610      	lsls	r0, r2, #24
 801ef1e:	f57f af65 	bpl.w	801edec <_scanf_float+0x60>
 801ef22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801ef26:	e7f4      	b.n	801ef12 <_scanf_float+0x186>
 801ef28:	f1ba 0f00 	cmp.w	sl, #0
 801ef2c:	d10e      	bne.n	801ef4c <_scanf_float+0x1c0>
 801ef2e:	f1b9 0f00 	cmp.w	r9, #0
 801ef32:	d10e      	bne.n	801ef52 <_scanf_float+0x1c6>
 801ef34:	6822      	ldr	r2, [r4, #0]
 801ef36:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801ef3a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801ef3e:	d108      	bne.n	801ef52 <_scanf_float+0x1c6>
 801ef40:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801ef44:	6022      	str	r2, [r4, #0]
 801ef46:	f04f 0a01 	mov.w	sl, #1
 801ef4a:	e7e3      	b.n	801ef14 <_scanf_float+0x188>
 801ef4c:	f1ba 0f02 	cmp.w	sl, #2
 801ef50:	d055      	beq.n	801effe <_scanf_float+0x272>
 801ef52:	2d01      	cmp	r5, #1
 801ef54:	d002      	beq.n	801ef5c <_scanf_float+0x1d0>
 801ef56:	2d04      	cmp	r5, #4
 801ef58:	f47f af48 	bne.w	801edec <_scanf_float+0x60>
 801ef5c:	3501      	adds	r5, #1
 801ef5e:	b2ed      	uxtb	r5, r5
 801ef60:	e7d8      	b.n	801ef14 <_scanf_float+0x188>
 801ef62:	f1ba 0f01 	cmp.w	sl, #1
 801ef66:	f47f af41 	bne.w	801edec <_scanf_float+0x60>
 801ef6a:	f04f 0a02 	mov.w	sl, #2
 801ef6e:	e7d1      	b.n	801ef14 <_scanf_float+0x188>
 801ef70:	b97d      	cbnz	r5, 801ef92 <_scanf_float+0x206>
 801ef72:	f1b9 0f00 	cmp.w	r9, #0
 801ef76:	f47f af3c 	bne.w	801edf2 <_scanf_float+0x66>
 801ef7a:	6822      	ldr	r2, [r4, #0]
 801ef7c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 801ef80:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 801ef84:	f47f af39 	bne.w	801edfa <_scanf_float+0x6e>
 801ef88:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801ef8c:	6022      	str	r2, [r4, #0]
 801ef8e:	2501      	movs	r5, #1
 801ef90:	e7c0      	b.n	801ef14 <_scanf_float+0x188>
 801ef92:	2d03      	cmp	r5, #3
 801ef94:	d0e2      	beq.n	801ef5c <_scanf_float+0x1d0>
 801ef96:	2d05      	cmp	r5, #5
 801ef98:	e7de      	b.n	801ef58 <_scanf_float+0x1cc>
 801ef9a:	2d02      	cmp	r5, #2
 801ef9c:	f47f af26 	bne.w	801edec <_scanf_float+0x60>
 801efa0:	2503      	movs	r5, #3
 801efa2:	e7b7      	b.n	801ef14 <_scanf_float+0x188>
 801efa4:	2d06      	cmp	r5, #6
 801efa6:	f47f af21 	bne.w	801edec <_scanf_float+0x60>
 801efaa:	2507      	movs	r5, #7
 801efac:	e7b2      	b.n	801ef14 <_scanf_float+0x188>
 801efae:	6822      	ldr	r2, [r4, #0]
 801efb0:	0591      	lsls	r1, r2, #22
 801efb2:	f57f af1b 	bpl.w	801edec <_scanf_float+0x60>
 801efb6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 801efba:	6022      	str	r2, [r4, #0]
 801efbc:	f8cd 9004 	str.w	r9, [sp, #4]
 801efc0:	e7a8      	b.n	801ef14 <_scanf_float+0x188>
 801efc2:	6822      	ldr	r2, [r4, #0]
 801efc4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 801efc8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 801efcc:	d006      	beq.n	801efdc <_scanf_float+0x250>
 801efce:	0550      	lsls	r0, r2, #21
 801efd0:	f57f af0c 	bpl.w	801edec <_scanf_float+0x60>
 801efd4:	f1b9 0f00 	cmp.w	r9, #0
 801efd8:	f43f af0f 	beq.w	801edfa <_scanf_float+0x6e>
 801efdc:	0591      	lsls	r1, r2, #22
 801efde:	bf58      	it	pl
 801efe0:	9901      	ldrpl	r1, [sp, #4]
 801efe2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 801efe6:	bf58      	it	pl
 801efe8:	eba9 0101 	subpl.w	r1, r9, r1
 801efec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 801eff0:	bf58      	it	pl
 801eff2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 801eff6:	6022      	str	r2, [r4, #0]
 801eff8:	f04f 0900 	mov.w	r9, #0
 801effc:	e78a      	b.n	801ef14 <_scanf_float+0x188>
 801effe:	f04f 0a03 	mov.w	sl, #3
 801f002:	e787      	b.n	801ef14 <_scanf_float+0x188>
 801f004:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 801f008:	4639      	mov	r1, r7
 801f00a:	4640      	mov	r0, r8
 801f00c:	4798      	blx	r3
 801f00e:	2800      	cmp	r0, #0
 801f010:	f43f aedf 	beq.w	801edd2 <_scanf_float+0x46>
 801f014:	e6ea      	b.n	801edec <_scanf_float+0x60>
 801f016:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f01a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801f01e:	463a      	mov	r2, r7
 801f020:	4640      	mov	r0, r8
 801f022:	4798      	blx	r3
 801f024:	6923      	ldr	r3, [r4, #16]
 801f026:	3b01      	subs	r3, #1
 801f028:	6123      	str	r3, [r4, #16]
 801f02a:	e6ec      	b.n	801ee06 <_scanf_float+0x7a>
 801f02c:	1e6b      	subs	r3, r5, #1
 801f02e:	2b06      	cmp	r3, #6
 801f030:	d825      	bhi.n	801f07e <_scanf_float+0x2f2>
 801f032:	2d02      	cmp	r5, #2
 801f034:	d836      	bhi.n	801f0a4 <_scanf_float+0x318>
 801f036:	455e      	cmp	r6, fp
 801f038:	f67f aee8 	bls.w	801ee0c <_scanf_float+0x80>
 801f03c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f040:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801f044:	463a      	mov	r2, r7
 801f046:	4640      	mov	r0, r8
 801f048:	4798      	blx	r3
 801f04a:	6923      	ldr	r3, [r4, #16]
 801f04c:	3b01      	subs	r3, #1
 801f04e:	6123      	str	r3, [r4, #16]
 801f050:	e7f1      	b.n	801f036 <_scanf_float+0x2aa>
 801f052:	9802      	ldr	r0, [sp, #8]
 801f054:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f058:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 801f05c:	9002      	str	r0, [sp, #8]
 801f05e:	463a      	mov	r2, r7
 801f060:	4640      	mov	r0, r8
 801f062:	4798      	blx	r3
 801f064:	6923      	ldr	r3, [r4, #16]
 801f066:	3b01      	subs	r3, #1
 801f068:	6123      	str	r3, [r4, #16]
 801f06a:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f06e:	fa5f fa8a 	uxtb.w	sl, sl
 801f072:	f1ba 0f02 	cmp.w	sl, #2
 801f076:	d1ec      	bne.n	801f052 <_scanf_float+0x2c6>
 801f078:	3d03      	subs	r5, #3
 801f07a:	b2ed      	uxtb	r5, r5
 801f07c:	1b76      	subs	r6, r6, r5
 801f07e:	6823      	ldr	r3, [r4, #0]
 801f080:	05da      	lsls	r2, r3, #23
 801f082:	d52f      	bpl.n	801f0e4 <_scanf_float+0x358>
 801f084:	055b      	lsls	r3, r3, #21
 801f086:	d510      	bpl.n	801f0aa <_scanf_float+0x31e>
 801f088:	455e      	cmp	r6, fp
 801f08a:	f67f aebf 	bls.w	801ee0c <_scanf_float+0x80>
 801f08e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f092:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 801f096:	463a      	mov	r2, r7
 801f098:	4640      	mov	r0, r8
 801f09a:	4798      	blx	r3
 801f09c:	6923      	ldr	r3, [r4, #16]
 801f09e:	3b01      	subs	r3, #1
 801f0a0:	6123      	str	r3, [r4, #16]
 801f0a2:	e7f1      	b.n	801f088 <_scanf_float+0x2fc>
 801f0a4:	46aa      	mov	sl, r5
 801f0a6:	9602      	str	r6, [sp, #8]
 801f0a8:	e7df      	b.n	801f06a <_scanf_float+0x2de>
 801f0aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 801f0ae:	6923      	ldr	r3, [r4, #16]
 801f0b0:	2965      	cmp	r1, #101	; 0x65
 801f0b2:	f103 33ff 	add.w	r3, r3, #4294967295
 801f0b6:	f106 35ff 	add.w	r5, r6, #4294967295
 801f0ba:	6123      	str	r3, [r4, #16]
 801f0bc:	d00c      	beq.n	801f0d8 <_scanf_float+0x34c>
 801f0be:	2945      	cmp	r1, #69	; 0x45
 801f0c0:	d00a      	beq.n	801f0d8 <_scanf_float+0x34c>
 801f0c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f0c6:	463a      	mov	r2, r7
 801f0c8:	4640      	mov	r0, r8
 801f0ca:	4798      	blx	r3
 801f0cc:	6923      	ldr	r3, [r4, #16]
 801f0ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 801f0d2:	3b01      	subs	r3, #1
 801f0d4:	1eb5      	subs	r5, r6, #2
 801f0d6:	6123      	str	r3, [r4, #16]
 801f0d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 801f0dc:	463a      	mov	r2, r7
 801f0de:	4640      	mov	r0, r8
 801f0e0:	4798      	blx	r3
 801f0e2:	462e      	mov	r6, r5
 801f0e4:	6825      	ldr	r5, [r4, #0]
 801f0e6:	f015 0510 	ands.w	r5, r5, #16
 801f0ea:	d158      	bne.n	801f19e <_scanf_float+0x412>
 801f0ec:	7035      	strb	r5, [r6, #0]
 801f0ee:	6823      	ldr	r3, [r4, #0]
 801f0f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 801f0f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801f0f8:	d11c      	bne.n	801f134 <_scanf_float+0x3a8>
 801f0fa:	9b01      	ldr	r3, [sp, #4]
 801f0fc:	454b      	cmp	r3, r9
 801f0fe:	eba3 0209 	sub.w	r2, r3, r9
 801f102:	d124      	bne.n	801f14e <_scanf_float+0x3c2>
 801f104:	2200      	movs	r2, #0
 801f106:	4659      	mov	r1, fp
 801f108:	4640      	mov	r0, r8
 801f10a:	f001 f813 	bl	8020134 <_strtod_r>
 801f10e:	9b03      	ldr	r3, [sp, #12]
 801f110:	6821      	ldr	r1, [r4, #0]
 801f112:	681b      	ldr	r3, [r3, #0]
 801f114:	f011 0f02 	tst.w	r1, #2
 801f118:	ec57 6b10 	vmov	r6, r7, d0
 801f11c:	f103 0204 	add.w	r2, r3, #4
 801f120:	d020      	beq.n	801f164 <_scanf_float+0x3d8>
 801f122:	9903      	ldr	r1, [sp, #12]
 801f124:	600a      	str	r2, [r1, #0]
 801f126:	681b      	ldr	r3, [r3, #0]
 801f128:	e9c3 6700 	strd	r6, r7, [r3]
 801f12c:	68e3      	ldr	r3, [r4, #12]
 801f12e:	3301      	adds	r3, #1
 801f130:	60e3      	str	r3, [r4, #12]
 801f132:	e66c      	b.n	801ee0e <_scanf_float+0x82>
 801f134:	9b04      	ldr	r3, [sp, #16]
 801f136:	2b00      	cmp	r3, #0
 801f138:	d0e4      	beq.n	801f104 <_scanf_float+0x378>
 801f13a:	9905      	ldr	r1, [sp, #20]
 801f13c:	230a      	movs	r3, #10
 801f13e:	462a      	mov	r2, r5
 801f140:	3101      	adds	r1, #1
 801f142:	4640      	mov	r0, r8
 801f144:	f001 f880 	bl	8020248 <_strtol_r>
 801f148:	9b04      	ldr	r3, [sp, #16]
 801f14a:	9e05      	ldr	r6, [sp, #20]
 801f14c:	1ac2      	subs	r2, r0, r3
 801f14e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 801f152:	429e      	cmp	r6, r3
 801f154:	bf28      	it	cs
 801f156:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 801f15a:	4912      	ldr	r1, [pc, #72]	; (801f1a4 <_scanf_float+0x418>)
 801f15c:	4630      	mov	r0, r6
 801f15e:	f000 f8fd 	bl	801f35c <siprintf>
 801f162:	e7cf      	b.n	801f104 <_scanf_float+0x378>
 801f164:	f011 0f04 	tst.w	r1, #4
 801f168:	9903      	ldr	r1, [sp, #12]
 801f16a:	600a      	str	r2, [r1, #0]
 801f16c:	d1db      	bne.n	801f126 <_scanf_float+0x39a>
 801f16e:	f8d3 8000 	ldr.w	r8, [r3]
 801f172:	ee10 2a10 	vmov	r2, s0
 801f176:	ee10 0a10 	vmov	r0, s0
 801f17a:	463b      	mov	r3, r7
 801f17c:	4639      	mov	r1, r7
 801f17e:	f7e1 fcd5 	bl	8000b2c <__aeabi_dcmpun>
 801f182:	b128      	cbz	r0, 801f190 <_scanf_float+0x404>
 801f184:	4808      	ldr	r0, [pc, #32]	; (801f1a8 <_scanf_float+0x41c>)
 801f186:	f000 f8e3 	bl	801f350 <nanf>
 801f18a:	ed88 0a00 	vstr	s0, [r8]
 801f18e:	e7cd      	b.n	801f12c <_scanf_float+0x3a0>
 801f190:	4630      	mov	r0, r6
 801f192:	4639      	mov	r1, r7
 801f194:	f7e1 fd28 	bl	8000be8 <__aeabi_d2f>
 801f198:	f8c8 0000 	str.w	r0, [r8]
 801f19c:	e7c6      	b.n	801f12c <_scanf_float+0x3a0>
 801f19e:	2500      	movs	r5, #0
 801f1a0:	e635      	b.n	801ee0e <_scanf_float+0x82>
 801f1a2:	bf00      	nop
 801f1a4:	080270d6 	.word	0x080270d6
 801f1a8:	080271e3 	.word	0x080271e3

0801f1ac <iprintf>:
 801f1ac:	b40f      	push	{r0, r1, r2, r3}
 801f1ae:	4b0a      	ldr	r3, [pc, #40]	; (801f1d8 <iprintf+0x2c>)
 801f1b0:	b513      	push	{r0, r1, r4, lr}
 801f1b2:	681c      	ldr	r4, [r3, #0]
 801f1b4:	b124      	cbz	r4, 801f1c0 <iprintf+0x14>
 801f1b6:	69a3      	ldr	r3, [r4, #24]
 801f1b8:	b913      	cbnz	r3, 801f1c0 <iprintf+0x14>
 801f1ba:	4620      	mov	r0, r4
 801f1bc:	f7fe ffca 	bl	801e154 <__sinit>
 801f1c0:	ab05      	add	r3, sp, #20
 801f1c2:	9a04      	ldr	r2, [sp, #16]
 801f1c4:	68a1      	ldr	r1, [r4, #8]
 801f1c6:	9301      	str	r3, [sp, #4]
 801f1c8:	4620      	mov	r0, r4
 801f1ca:	f003 fb99 	bl	8022900 <_vfiprintf_r>
 801f1ce:	b002      	add	sp, #8
 801f1d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f1d4:	b004      	add	sp, #16
 801f1d6:	4770      	bx	lr
 801f1d8:	200003b8 	.word	0x200003b8

0801f1dc <rand>:
 801f1dc:	4b17      	ldr	r3, [pc, #92]	; (801f23c <rand+0x60>)
 801f1de:	b510      	push	{r4, lr}
 801f1e0:	681c      	ldr	r4, [r3, #0]
 801f1e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801f1e4:	b9b3      	cbnz	r3, 801f214 <rand+0x38>
 801f1e6:	2018      	movs	r0, #24
 801f1e8:	f7ff f876 	bl	801e2d8 <malloc>
 801f1ec:	63a0      	str	r0, [r4, #56]	; 0x38
 801f1ee:	b928      	cbnz	r0, 801f1fc <rand+0x20>
 801f1f0:	4602      	mov	r2, r0
 801f1f2:	4b13      	ldr	r3, [pc, #76]	; (801f240 <rand+0x64>)
 801f1f4:	4813      	ldr	r0, [pc, #76]	; (801f244 <rand+0x68>)
 801f1f6:	214e      	movs	r1, #78	; 0x4e
 801f1f8:	f001 f83a 	bl	8020270 <__assert_func>
 801f1fc:	4a12      	ldr	r2, [pc, #72]	; (801f248 <rand+0x6c>)
 801f1fe:	4b13      	ldr	r3, [pc, #76]	; (801f24c <rand+0x70>)
 801f200:	e9c0 2300 	strd	r2, r3, [r0]
 801f204:	4b12      	ldr	r3, [pc, #72]	; (801f250 <rand+0x74>)
 801f206:	6083      	str	r3, [r0, #8]
 801f208:	230b      	movs	r3, #11
 801f20a:	8183      	strh	r3, [r0, #12]
 801f20c:	2201      	movs	r2, #1
 801f20e:	2300      	movs	r3, #0
 801f210:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801f214:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801f216:	480f      	ldr	r0, [pc, #60]	; (801f254 <rand+0x78>)
 801f218:	690a      	ldr	r2, [r1, #16]
 801f21a:	694b      	ldr	r3, [r1, #20]
 801f21c:	4c0e      	ldr	r4, [pc, #56]	; (801f258 <rand+0x7c>)
 801f21e:	4350      	muls	r0, r2
 801f220:	fb04 0003 	mla	r0, r4, r3, r0
 801f224:	fba2 3404 	umull	r3, r4, r2, r4
 801f228:	1c5a      	adds	r2, r3, #1
 801f22a:	4404      	add	r4, r0
 801f22c:	f144 0000 	adc.w	r0, r4, #0
 801f230:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801f234:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801f238:	bd10      	pop	{r4, pc}
 801f23a:	bf00      	nop
 801f23c:	200003b8 	.word	0x200003b8
 801f240:	080270db 	.word	0x080270db
 801f244:	080270f2 	.word	0x080270f2
 801f248:	abcd330e 	.word	0xabcd330e
 801f24c:	e66d1234 	.word	0xe66d1234
 801f250:	0005deec 	.word	0x0005deec
 801f254:	5851f42d 	.word	0x5851f42d
 801f258:	4c957f2d 	.word	0x4c957f2d

0801f25c <cleanup_glue>:
 801f25c:	b538      	push	{r3, r4, r5, lr}
 801f25e:	460c      	mov	r4, r1
 801f260:	6809      	ldr	r1, [r1, #0]
 801f262:	4605      	mov	r5, r0
 801f264:	b109      	cbz	r1, 801f26a <cleanup_glue+0xe>
 801f266:	f7ff fff9 	bl	801f25c <cleanup_glue>
 801f26a:	4621      	mov	r1, r4
 801f26c:	4628      	mov	r0, r5
 801f26e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801f272:	f7ff b877 	b.w	801e364 <_free_r>
	...

0801f278 <_reclaim_reent>:
 801f278:	4b2c      	ldr	r3, [pc, #176]	; (801f32c <_reclaim_reent+0xb4>)
 801f27a:	681b      	ldr	r3, [r3, #0]
 801f27c:	4283      	cmp	r3, r0
 801f27e:	b570      	push	{r4, r5, r6, lr}
 801f280:	4604      	mov	r4, r0
 801f282:	d051      	beq.n	801f328 <_reclaim_reent+0xb0>
 801f284:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801f286:	b143      	cbz	r3, 801f29a <_reclaim_reent+0x22>
 801f288:	68db      	ldr	r3, [r3, #12]
 801f28a:	2b00      	cmp	r3, #0
 801f28c:	d14a      	bne.n	801f324 <_reclaim_reent+0xac>
 801f28e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f290:	6819      	ldr	r1, [r3, #0]
 801f292:	b111      	cbz	r1, 801f29a <_reclaim_reent+0x22>
 801f294:	4620      	mov	r0, r4
 801f296:	f7ff f865 	bl	801e364 <_free_r>
 801f29a:	6961      	ldr	r1, [r4, #20]
 801f29c:	b111      	cbz	r1, 801f2a4 <_reclaim_reent+0x2c>
 801f29e:	4620      	mov	r0, r4
 801f2a0:	f7ff f860 	bl	801e364 <_free_r>
 801f2a4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801f2a6:	b111      	cbz	r1, 801f2ae <_reclaim_reent+0x36>
 801f2a8:	4620      	mov	r0, r4
 801f2aa:	f7ff f85b 	bl	801e364 <_free_r>
 801f2ae:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801f2b0:	b111      	cbz	r1, 801f2b8 <_reclaim_reent+0x40>
 801f2b2:	4620      	mov	r0, r4
 801f2b4:	f7ff f856 	bl	801e364 <_free_r>
 801f2b8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801f2ba:	b111      	cbz	r1, 801f2c2 <_reclaim_reent+0x4a>
 801f2bc:	4620      	mov	r0, r4
 801f2be:	f7ff f851 	bl	801e364 <_free_r>
 801f2c2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801f2c4:	b111      	cbz	r1, 801f2cc <_reclaim_reent+0x54>
 801f2c6:	4620      	mov	r0, r4
 801f2c8:	f7ff f84c 	bl	801e364 <_free_r>
 801f2cc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801f2ce:	b111      	cbz	r1, 801f2d6 <_reclaim_reent+0x5e>
 801f2d0:	4620      	mov	r0, r4
 801f2d2:	f7ff f847 	bl	801e364 <_free_r>
 801f2d6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801f2d8:	b111      	cbz	r1, 801f2e0 <_reclaim_reent+0x68>
 801f2da:	4620      	mov	r0, r4
 801f2dc:	f7ff f842 	bl	801e364 <_free_r>
 801f2e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801f2e2:	b111      	cbz	r1, 801f2ea <_reclaim_reent+0x72>
 801f2e4:	4620      	mov	r0, r4
 801f2e6:	f7ff f83d 	bl	801e364 <_free_r>
 801f2ea:	69a3      	ldr	r3, [r4, #24]
 801f2ec:	b1e3      	cbz	r3, 801f328 <_reclaim_reent+0xb0>
 801f2ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801f2f0:	4620      	mov	r0, r4
 801f2f2:	4798      	blx	r3
 801f2f4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801f2f6:	b1b9      	cbz	r1, 801f328 <_reclaim_reent+0xb0>
 801f2f8:	4620      	mov	r0, r4
 801f2fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f2fe:	f7ff bfad 	b.w	801f25c <cleanup_glue>
 801f302:	5949      	ldr	r1, [r1, r5]
 801f304:	b941      	cbnz	r1, 801f318 <_reclaim_reent+0xa0>
 801f306:	3504      	adds	r5, #4
 801f308:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801f30a:	2d80      	cmp	r5, #128	; 0x80
 801f30c:	68d9      	ldr	r1, [r3, #12]
 801f30e:	d1f8      	bne.n	801f302 <_reclaim_reent+0x8a>
 801f310:	4620      	mov	r0, r4
 801f312:	f7ff f827 	bl	801e364 <_free_r>
 801f316:	e7ba      	b.n	801f28e <_reclaim_reent+0x16>
 801f318:	680e      	ldr	r6, [r1, #0]
 801f31a:	4620      	mov	r0, r4
 801f31c:	f7ff f822 	bl	801e364 <_free_r>
 801f320:	4631      	mov	r1, r6
 801f322:	e7ef      	b.n	801f304 <_reclaim_reent+0x8c>
 801f324:	2500      	movs	r5, #0
 801f326:	e7ef      	b.n	801f308 <_reclaim_reent+0x90>
 801f328:	bd70      	pop	{r4, r5, r6, pc}
 801f32a:	bf00      	nop
 801f32c:	200003b8 	.word	0x200003b8

0801f330 <_sbrk_r>:
 801f330:	b538      	push	{r3, r4, r5, lr}
 801f332:	4d06      	ldr	r5, [pc, #24]	; (801f34c <_sbrk_r+0x1c>)
 801f334:	2300      	movs	r3, #0
 801f336:	4604      	mov	r4, r0
 801f338:	4608      	mov	r0, r1
 801f33a:	602b      	str	r3, [r5, #0]
 801f33c:	f7e7 fa90 	bl	8006860 <_sbrk>
 801f340:	1c43      	adds	r3, r0, #1
 801f342:	d102      	bne.n	801f34a <_sbrk_r+0x1a>
 801f344:	682b      	ldr	r3, [r5, #0]
 801f346:	b103      	cbz	r3, 801f34a <_sbrk_r+0x1a>
 801f348:	6023      	str	r3, [r4, #0]
 801f34a:	bd38      	pop	{r3, r4, r5, pc}
 801f34c:	2000e190 	.word	0x2000e190

0801f350 <nanf>:
 801f350:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801f358 <nanf+0x8>
 801f354:	4770      	bx	lr
 801f356:	bf00      	nop
 801f358:	7fc00000 	.word	0x7fc00000

0801f35c <siprintf>:
 801f35c:	b40e      	push	{r1, r2, r3}
 801f35e:	b500      	push	{lr}
 801f360:	b09c      	sub	sp, #112	; 0x70
 801f362:	ab1d      	add	r3, sp, #116	; 0x74
 801f364:	9002      	str	r0, [sp, #8]
 801f366:	9006      	str	r0, [sp, #24]
 801f368:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801f36c:	4809      	ldr	r0, [pc, #36]	; (801f394 <siprintf+0x38>)
 801f36e:	9107      	str	r1, [sp, #28]
 801f370:	9104      	str	r1, [sp, #16]
 801f372:	4909      	ldr	r1, [pc, #36]	; (801f398 <siprintf+0x3c>)
 801f374:	f853 2b04 	ldr.w	r2, [r3], #4
 801f378:	9105      	str	r1, [sp, #20]
 801f37a:	6800      	ldr	r0, [r0, #0]
 801f37c:	9301      	str	r3, [sp, #4]
 801f37e:	a902      	add	r1, sp, #8
 801f380:	f002 ffc2 	bl	8022308 <_svfiprintf_r>
 801f384:	9b02      	ldr	r3, [sp, #8]
 801f386:	2200      	movs	r2, #0
 801f388:	701a      	strb	r2, [r3, #0]
 801f38a:	b01c      	add	sp, #112	; 0x70
 801f38c:	f85d eb04 	ldr.w	lr, [sp], #4
 801f390:	b003      	add	sp, #12
 801f392:	4770      	bx	lr
 801f394:	200003b8 	.word	0x200003b8
 801f398:	ffff0208 	.word	0xffff0208

0801f39c <siscanf>:
 801f39c:	b40e      	push	{r1, r2, r3}
 801f39e:	b510      	push	{r4, lr}
 801f3a0:	b09f      	sub	sp, #124	; 0x7c
 801f3a2:	ac21      	add	r4, sp, #132	; 0x84
 801f3a4:	f44f 7101 	mov.w	r1, #516	; 0x204
 801f3a8:	f854 2b04 	ldr.w	r2, [r4], #4
 801f3ac:	9201      	str	r2, [sp, #4]
 801f3ae:	f8ad 101c 	strh.w	r1, [sp, #28]
 801f3b2:	9004      	str	r0, [sp, #16]
 801f3b4:	9008      	str	r0, [sp, #32]
 801f3b6:	f7e0 ff0b 	bl	80001d0 <strlen>
 801f3ba:	4b0c      	ldr	r3, [pc, #48]	; (801f3ec <siscanf+0x50>)
 801f3bc:	9005      	str	r0, [sp, #20]
 801f3be:	9009      	str	r0, [sp, #36]	; 0x24
 801f3c0:	930d      	str	r3, [sp, #52]	; 0x34
 801f3c2:	480b      	ldr	r0, [pc, #44]	; (801f3f0 <siscanf+0x54>)
 801f3c4:	9a01      	ldr	r2, [sp, #4]
 801f3c6:	6800      	ldr	r0, [r0, #0]
 801f3c8:	9403      	str	r4, [sp, #12]
 801f3ca:	2300      	movs	r3, #0
 801f3cc:	9311      	str	r3, [sp, #68]	; 0x44
 801f3ce:	9316      	str	r3, [sp, #88]	; 0x58
 801f3d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801f3d4:	f8ad 301e 	strh.w	r3, [sp, #30]
 801f3d8:	a904      	add	r1, sp, #16
 801f3da:	4623      	mov	r3, r4
 801f3dc:	f003 f8ee 	bl	80225bc <__ssvfiscanf_r>
 801f3e0:	b01f      	add	sp, #124	; 0x7c
 801f3e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f3e6:	b003      	add	sp, #12
 801f3e8:	4770      	bx	lr
 801f3ea:	bf00      	nop
 801f3ec:	0801f417 	.word	0x0801f417
 801f3f0:	200003b8 	.word	0x200003b8

0801f3f4 <__sread>:
 801f3f4:	b510      	push	{r4, lr}
 801f3f6:	460c      	mov	r4, r1
 801f3f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f3fc:	f003 fcfc 	bl	8022df8 <_read_r>
 801f400:	2800      	cmp	r0, #0
 801f402:	bfab      	itete	ge
 801f404:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801f406:	89a3      	ldrhlt	r3, [r4, #12]
 801f408:	181b      	addge	r3, r3, r0
 801f40a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801f40e:	bfac      	ite	ge
 801f410:	6563      	strge	r3, [r4, #84]	; 0x54
 801f412:	81a3      	strhlt	r3, [r4, #12]
 801f414:	bd10      	pop	{r4, pc}

0801f416 <__seofread>:
 801f416:	2000      	movs	r0, #0
 801f418:	4770      	bx	lr

0801f41a <__swrite>:
 801f41a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801f41e:	461f      	mov	r7, r3
 801f420:	898b      	ldrh	r3, [r1, #12]
 801f422:	05db      	lsls	r3, r3, #23
 801f424:	4605      	mov	r5, r0
 801f426:	460c      	mov	r4, r1
 801f428:	4616      	mov	r6, r2
 801f42a:	d505      	bpl.n	801f438 <__swrite+0x1e>
 801f42c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f430:	2302      	movs	r3, #2
 801f432:	2200      	movs	r2, #0
 801f434:	f002 fa12 	bl	802185c <_lseek_r>
 801f438:	89a3      	ldrh	r3, [r4, #12]
 801f43a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801f43e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801f442:	81a3      	strh	r3, [r4, #12]
 801f444:	4632      	mov	r2, r6
 801f446:	463b      	mov	r3, r7
 801f448:	4628      	mov	r0, r5
 801f44a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801f44e:	f000 befd 	b.w	802024c <_write_r>

0801f452 <__sseek>:
 801f452:	b510      	push	{r4, lr}
 801f454:	460c      	mov	r4, r1
 801f456:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f45a:	f002 f9ff 	bl	802185c <_lseek_r>
 801f45e:	1c43      	adds	r3, r0, #1
 801f460:	89a3      	ldrh	r3, [r4, #12]
 801f462:	bf15      	itete	ne
 801f464:	6560      	strne	r0, [r4, #84]	; 0x54
 801f466:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801f46a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801f46e:	81a3      	strheq	r3, [r4, #12]
 801f470:	bf18      	it	ne
 801f472:	81a3      	strhne	r3, [r4, #12]
 801f474:	bd10      	pop	{r4, pc}

0801f476 <__sclose>:
 801f476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801f47a:	f000 bf17 	b.w	80202ac <_close_r>

0801f47e <strchr>:
 801f47e:	b2c9      	uxtb	r1, r1
 801f480:	4603      	mov	r3, r0
 801f482:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f486:	b11a      	cbz	r2, 801f490 <strchr+0x12>
 801f488:	428a      	cmp	r2, r1
 801f48a:	d1f9      	bne.n	801f480 <strchr+0x2>
 801f48c:	4618      	mov	r0, r3
 801f48e:	4770      	bx	lr
 801f490:	2900      	cmp	r1, #0
 801f492:	bf18      	it	ne
 801f494:	2300      	movne	r3, #0
 801f496:	e7f9      	b.n	801f48c <strchr+0xe>

0801f498 <strncmp>:
 801f498:	b510      	push	{r4, lr}
 801f49a:	b16a      	cbz	r2, 801f4b8 <strncmp+0x20>
 801f49c:	3901      	subs	r1, #1
 801f49e:	1884      	adds	r4, r0, r2
 801f4a0:	f810 3b01 	ldrb.w	r3, [r0], #1
 801f4a4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801f4a8:	4293      	cmp	r3, r2
 801f4aa:	d103      	bne.n	801f4b4 <strncmp+0x1c>
 801f4ac:	42a0      	cmp	r0, r4
 801f4ae:	d001      	beq.n	801f4b4 <strncmp+0x1c>
 801f4b0:	2b00      	cmp	r3, #0
 801f4b2:	d1f5      	bne.n	801f4a0 <strncmp+0x8>
 801f4b4:	1a98      	subs	r0, r3, r2
 801f4b6:	bd10      	pop	{r4, pc}
 801f4b8:	4610      	mov	r0, r2
 801f4ba:	e7fc      	b.n	801f4b6 <strncmp+0x1e>

0801f4bc <strncpy>:
 801f4bc:	b510      	push	{r4, lr}
 801f4be:	3901      	subs	r1, #1
 801f4c0:	4603      	mov	r3, r0
 801f4c2:	b132      	cbz	r2, 801f4d2 <strncpy+0x16>
 801f4c4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801f4c8:	f803 4b01 	strb.w	r4, [r3], #1
 801f4cc:	3a01      	subs	r2, #1
 801f4ce:	2c00      	cmp	r4, #0
 801f4d0:	d1f7      	bne.n	801f4c2 <strncpy+0x6>
 801f4d2:	441a      	add	r2, r3
 801f4d4:	2100      	movs	r1, #0
 801f4d6:	4293      	cmp	r3, r2
 801f4d8:	d100      	bne.n	801f4dc <strncpy+0x20>
 801f4da:	bd10      	pop	{r4, pc}
 801f4dc:	f803 1b01 	strb.w	r1, [r3], #1
 801f4e0:	e7f9      	b.n	801f4d6 <strncpy+0x1a>

0801f4e2 <sulp>:
 801f4e2:	b570      	push	{r4, r5, r6, lr}
 801f4e4:	4604      	mov	r4, r0
 801f4e6:	460d      	mov	r5, r1
 801f4e8:	ec45 4b10 	vmov	d0, r4, r5
 801f4ec:	4616      	mov	r6, r2
 801f4ee:	f002 fd51 	bl	8021f94 <__ulp>
 801f4f2:	ec51 0b10 	vmov	r0, r1, d0
 801f4f6:	b17e      	cbz	r6, 801f518 <sulp+0x36>
 801f4f8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 801f4fc:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801f500:	2b00      	cmp	r3, #0
 801f502:	dd09      	ble.n	801f518 <sulp+0x36>
 801f504:	051b      	lsls	r3, r3, #20
 801f506:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 801f50a:	2400      	movs	r4, #0
 801f50c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 801f510:	4622      	mov	r2, r4
 801f512:	462b      	mov	r3, r5
 801f514:	f7e1 f870 	bl	80005f8 <__aeabi_dmul>
 801f518:	bd70      	pop	{r4, r5, r6, pc}
 801f51a:	0000      	movs	r0, r0
 801f51c:	0000      	movs	r0, r0
	...

0801f520 <_strtod_l>:
 801f520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f524:	b0a3      	sub	sp, #140	; 0x8c
 801f526:	461f      	mov	r7, r3
 801f528:	2300      	movs	r3, #0
 801f52a:	931e      	str	r3, [sp, #120]	; 0x78
 801f52c:	4ba4      	ldr	r3, [pc, #656]	; (801f7c0 <_strtod_l+0x2a0>)
 801f52e:	9219      	str	r2, [sp, #100]	; 0x64
 801f530:	681b      	ldr	r3, [r3, #0]
 801f532:	9307      	str	r3, [sp, #28]
 801f534:	4604      	mov	r4, r0
 801f536:	4618      	mov	r0, r3
 801f538:	4688      	mov	r8, r1
 801f53a:	f7e0 fe49 	bl	80001d0 <strlen>
 801f53e:	f04f 0a00 	mov.w	sl, #0
 801f542:	4605      	mov	r5, r0
 801f544:	f04f 0b00 	mov.w	fp, #0
 801f548:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801f54c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f54e:	781a      	ldrb	r2, [r3, #0]
 801f550:	2a2b      	cmp	r2, #43	; 0x2b
 801f552:	d04c      	beq.n	801f5ee <_strtod_l+0xce>
 801f554:	d839      	bhi.n	801f5ca <_strtod_l+0xaa>
 801f556:	2a0d      	cmp	r2, #13
 801f558:	d832      	bhi.n	801f5c0 <_strtod_l+0xa0>
 801f55a:	2a08      	cmp	r2, #8
 801f55c:	d832      	bhi.n	801f5c4 <_strtod_l+0xa4>
 801f55e:	2a00      	cmp	r2, #0
 801f560:	d03c      	beq.n	801f5dc <_strtod_l+0xbc>
 801f562:	2300      	movs	r3, #0
 801f564:	930e      	str	r3, [sp, #56]	; 0x38
 801f566:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801f568:	7833      	ldrb	r3, [r6, #0]
 801f56a:	2b30      	cmp	r3, #48	; 0x30
 801f56c:	f040 80b4 	bne.w	801f6d8 <_strtod_l+0x1b8>
 801f570:	7873      	ldrb	r3, [r6, #1]
 801f572:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801f576:	2b58      	cmp	r3, #88	; 0x58
 801f578:	d16c      	bne.n	801f654 <_strtod_l+0x134>
 801f57a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f57c:	9301      	str	r3, [sp, #4]
 801f57e:	ab1e      	add	r3, sp, #120	; 0x78
 801f580:	9702      	str	r7, [sp, #8]
 801f582:	9300      	str	r3, [sp, #0]
 801f584:	4a8f      	ldr	r2, [pc, #572]	; (801f7c4 <_strtod_l+0x2a4>)
 801f586:	ab1f      	add	r3, sp, #124	; 0x7c
 801f588:	a91d      	add	r1, sp, #116	; 0x74
 801f58a:	4620      	mov	r0, r4
 801f58c:	f001 fe5a 	bl	8021244 <__gethex>
 801f590:	f010 0707 	ands.w	r7, r0, #7
 801f594:	4605      	mov	r5, r0
 801f596:	d005      	beq.n	801f5a4 <_strtod_l+0x84>
 801f598:	2f06      	cmp	r7, #6
 801f59a:	d12a      	bne.n	801f5f2 <_strtod_l+0xd2>
 801f59c:	3601      	adds	r6, #1
 801f59e:	2300      	movs	r3, #0
 801f5a0:	961d      	str	r6, [sp, #116]	; 0x74
 801f5a2:	930e      	str	r3, [sp, #56]	; 0x38
 801f5a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f5a6:	2b00      	cmp	r3, #0
 801f5a8:	f040 8596 	bne.w	80200d8 <_strtod_l+0xbb8>
 801f5ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f5ae:	b1db      	cbz	r3, 801f5e8 <_strtod_l+0xc8>
 801f5b0:	4652      	mov	r2, sl
 801f5b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801f5b6:	ec43 2b10 	vmov	d0, r2, r3
 801f5ba:	b023      	add	sp, #140	; 0x8c
 801f5bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f5c0:	2a20      	cmp	r2, #32
 801f5c2:	d1ce      	bne.n	801f562 <_strtod_l+0x42>
 801f5c4:	3301      	adds	r3, #1
 801f5c6:	931d      	str	r3, [sp, #116]	; 0x74
 801f5c8:	e7c0      	b.n	801f54c <_strtod_l+0x2c>
 801f5ca:	2a2d      	cmp	r2, #45	; 0x2d
 801f5cc:	d1c9      	bne.n	801f562 <_strtod_l+0x42>
 801f5ce:	2201      	movs	r2, #1
 801f5d0:	920e      	str	r2, [sp, #56]	; 0x38
 801f5d2:	1c5a      	adds	r2, r3, #1
 801f5d4:	921d      	str	r2, [sp, #116]	; 0x74
 801f5d6:	785b      	ldrb	r3, [r3, #1]
 801f5d8:	2b00      	cmp	r3, #0
 801f5da:	d1c4      	bne.n	801f566 <_strtod_l+0x46>
 801f5dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801f5de:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801f5e2:	2b00      	cmp	r3, #0
 801f5e4:	f040 8576 	bne.w	80200d4 <_strtod_l+0xbb4>
 801f5e8:	4652      	mov	r2, sl
 801f5ea:	465b      	mov	r3, fp
 801f5ec:	e7e3      	b.n	801f5b6 <_strtod_l+0x96>
 801f5ee:	2200      	movs	r2, #0
 801f5f0:	e7ee      	b.n	801f5d0 <_strtod_l+0xb0>
 801f5f2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801f5f4:	b13a      	cbz	r2, 801f606 <_strtod_l+0xe6>
 801f5f6:	2135      	movs	r1, #53	; 0x35
 801f5f8:	a820      	add	r0, sp, #128	; 0x80
 801f5fa:	f002 fdd6 	bl	80221aa <__copybits>
 801f5fe:	991e      	ldr	r1, [sp, #120]	; 0x78
 801f600:	4620      	mov	r0, r4
 801f602:	f002 f99b 	bl	802193c <_Bfree>
 801f606:	3f01      	subs	r7, #1
 801f608:	2f05      	cmp	r7, #5
 801f60a:	d807      	bhi.n	801f61c <_strtod_l+0xfc>
 801f60c:	e8df f007 	tbb	[pc, r7]
 801f610:	1d180b0e 	.word	0x1d180b0e
 801f614:	030e      	.short	0x030e
 801f616:	f04f 0b00 	mov.w	fp, #0
 801f61a:	46da      	mov	sl, fp
 801f61c:	0728      	lsls	r0, r5, #28
 801f61e:	d5c1      	bpl.n	801f5a4 <_strtod_l+0x84>
 801f620:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 801f624:	e7be      	b.n	801f5a4 <_strtod_l+0x84>
 801f626:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 801f62a:	e7f7      	b.n	801f61c <_strtod_l+0xfc>
 801f62c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 801f630:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801f632:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 801f636:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801f63a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 801f63e:	e7ed      	b.n	801f61c <_strtod_l+0xfc>
 801f640:	f8df b184 	ldr.w	fp, [pc, #388]	; 801f7c8 <_strtod_l+0x2a8>
 801f644:	f04f 0a00 	mov.w	sl, #0
 801f648:	e7e8      	b.n	801f61c <_strtod_l+0xfc>
 801f64a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 801f64e:	f04f 3aff 	mov.w	sl, #4294967295
 801f652:	e7e3      	b.n	801f61c <_strtod_l+0xfc>
 801f654:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f656:	1c5a      	adds	r2, r3, #1
 801f658:	921d      	str	r2, [sp, #116]	; 0x74
 801f65a:	785b      	ldrb	r3, [r3, #1]
 801f65c:	2b30      	cmp	r3, #48	; 0x30
 801f65e:	d0f9      	beq.n	801f654 <_strtod_l+0x134>
 801f660:	2b00      	cmp	r3, #0
 801f662:	d09f      	beq.n	801f5a4 <_strtod_l+0x84>
 801f664:	2301      	movs	r3, #1
 801f666:	f04f 0900 	mov.w	r9, #0
 801f66a:	9304      	str	r3, [sp, #16]
 801f66c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f66e:	930a      	str	r3, [sp, #40]	; 0x28
 801f670:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 801f674:	464f      	mov	r7, r9
 801f676:	220a      	movs	r2, #10
 801f678:	981d      	ldr	r0, [sp, #116]	; 0x74
 801f67a:	7806      	ldrb	r6, [r0, #0]
 801f67c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 801f680:	b2d9      	uxtb	r1, r3
 801f682:	2909      	cmp	r1, #9
 801f684:	d92a      	bls.n	801f6dc <_strtod_l+0x1bc>
 801f686:	9907      	ldr	r1, [sp, #28]
 801f688:	462a      	mov	r2, r5
 801f68a:	f7ff ff05 	bl	801f498 <strncmp>
 801f68e:	b398      	cbz	r0, 801f6f8 <_strtod_l+0x1d8>
 801f690:	2000      	movs	r0, #0
 801f692:	4633      	mov	r3, r6
 801f694:	463d      	mov	r5, r7
 801f696:	9007      	str	r0, [sp, #28]
 801f698:	4602      	mov	r2, r0
 801f69a:	2b65      	cmp	r3, #101	; 0x65
 801f69c:	d001      	beq.n	801f6a2 <_strtod_l+0x182>
 801f69e:	2b45      	cmp	r3, #69	; 0x45
 801f6a0:	d118      	bne.n	801f6d4 <_strtod_l+0x1b4>
 801f6a2:	b91d      	cbnz	r5, 801f6ac <_strtod_l+0x18c>
 801f6a4:	9b04      	ldr	r3, [sp, #16]
 801f6a6:	4303      	orrs	r3, r0
 801f6a8:	d098      	beq.n	801f5dc <_strtod_l+0xbc>
 801f6aa:	2500      	movs	r5, #0
 801f6ac:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 801f6b0:	f108 0301 	add.w	r3, r8, #1
 801f6b4:	931d      	str	r3, [sp, #116]	; 0x74
 801f6b6:	f898 3001 	ldrb.w	r3, [r8, #1]
 801f6ba:	2b2b      	cmp	r3, #43	; 0x2b
 801f6bc:	d075      	beq.n	801f7aa <_strtod_l+0x28a>
 801f6be:	2b2d      	cmp	r3, #45	; 0x2d
 801f6c0:	d07b      	beq.n	801f7ba <_strtod_l+0x29a>
 801f6c2:	f04f 0c00 	mov.w	ip, #0
 801f6c6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 801f6ca:	2909      	cmp	r1, #9
 801f6cc:	f240 8082 	bls.w	801f7d4 <_strtod_l+0x2b4>
 801f6d0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 801f6d4:	2600      	movs	r6, #0
 801f6d6:	e09d      	b.n	801f814 <_strtod_l+0x2f4>
 801f6d8:	2300      	movs	r3, #0
 801f6da:	e7c4      	b.n	801f666 <_strtod_l+0x146>
 801f6dc:	2f08      	cmp	r7, #8
 801f6de:	bfd8      	it	le
 801f6e0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 801f6e2:	f100 0001 	add.w	r0, r0, #1
 801f6e6:	bfda      	itte	le
 801f6e8:	fb02 3301 	mlale	r3, r2, r1, r3
 801f6ec:	9309      	strle	r3, [sp, #36]	; 0x24
 801f6ee:	fb02 3909 	mlagt	r9, r2, r9, r3
 801f6f2:	3701      	adds	r7, #1
 801f6f4:	901d      	str	r0, [sp, #116]	; 0x74
 801f6f6:	e7bf      	b.n	801f678 <_strtod_l+0x158>
 801f6f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f6fa:	195a      	adds	r2, r3, r5
 801f6fc:	921d      	str	r2, [sp, #116]	; 0x74
 801f6fe:	5d5b      	ldrb	r3, [r3, r5]
 801f700:	2f00      	cmp	r7, #0
 801f702:	d037      	beq.n	801f774 <_strtod_l+0x254>
 801f704:	9007      	str	r0, [sp, #28]
 801f706:	463d      	mov	r5, r7
 801f708:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 801f70c:	2a09      	cmp	r2, #9
 801f70e:	d912      	bls.n	801f736 <_strtod_l+0x216>
 801f710:	2201      	movs	r2, #1
 801f712:	e7c2      	b.n	801f69a <_strtod_l+0x17a>
 801f714:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f716:	1c5a      	adds	r2, r3, #1
 801f718:	921d      	str	r2, [sp, #116]	; 0x74
 801f71a:	785b      	ldrb	r3, [r3, #1]
 801f71c:	3001      	adds	r0, #1
 801f71e:	2b30      	cmp	r3, #48	; 0x30
 801f720:	d0f8      	beq.n	801f714 <_strtod_l+0x1f4>
 801f722:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 801f726:	2a08      	cmp	r2, #8
 801f728:	f200 84db 	bhi.w	80200e2 <_strtod_l+0xbc2>
 801f72c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801f72e:	9007      	str	r0, [sp, #28]
 801f730:	2000      	movs	r0, #0
 801f732:	920a      	str	r2, [sp, #40]	; 0x28
 801f734:	4605      	mov	r5, r0
 801f736:	3b30      	subs	r3, #48	; 0x30
 801f738:	f100 0201 	add.w	r2, r0, #1
 801f73c:	d014      	beq.n	801f768 <_strtod_l+0x248>
 801f73e:	9907      	ldr	r1, [sp, #28]
 801f740:	4411      	add	r1, r2
 801f742:	9107      	str	r1, [sp, #28]
 801f744:	462a      	mov	r2, r5
 801f746:	eb00 0e05 	add.w	lr, r0, r5
 801f74a:	210a      	movs	r1, #10
 801f74c:	4572      	cmp	r2, lr
 801f74e:	d113      	bne.n	801f778 <_strtod_l+0x258>
 801f750:	182a      	adds	r2, r5, r0
 801f752:	2a08      	cmp	r2, #8
 801f754:	f105 0501 	add.w	r5, r5, #1
 801f758:	4405      	add	r5, r0
 801f75a:	dc1c      	bgt.n	801f796 <_strtod_l+0x276>
 801f75c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f75e:	220a      	movs	r2, #10
 801f760:	fb02 3301 	mla	r3, r2, r1, r3
 801f764:	9309      	str	r3, [sp, #36]	; 0x24
 801f766:	2200      	movs	r2, #0
 801f768:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f76a:	1c59      	adds	r1, r3, #1
 801f76c:	911d      	str	r1, [sp, #116]	; 0x74
 801f76e:	785b      	ldrb	r3, [r3, #1]
 801f770:	4610      	mov	r0, r2
 801f772:	e7c9      	b.n	801f708 <_strtod_l+0x1e8>
 801f774:	4638      	mov	r0, r7
 801f776:	e7d2      	b.n	801f71e <_strtod_l+0x1fe>
 801f778:	2a08      	cmp	r2, #8
 801f77a:	dc04      	bgt.n	801f786 <_strtod_l+0x266>
 801f77c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801f77e:	434e      	muls	r6, r1
 801f780:	9609      	str	r6, [sp, #36]	; 0x24
 801f782:	3201      	adds	r2, #1
 801f784:	e7e2      	b.n	801f74c <_strtod_l+0x22c>
 801f786:	f102 0c01 	add.w	ip, r2, #1
 801f78a:	f1bc 0f10 	cmp.w	ip, #16
 801f78e:	bfd8      	it	le
 801f790:	fb01 f909 	mulle.w	r9, r1, r9
 801f794:	e7f5      	b.n	801f782 <_strtod_l+0x262>
 801f796:	2d10      	cmp	r5, #16
 801f798:	bfdc      	itt	le
 801f79a:	220a      	movle	r2, #10
 801f79c:	fb02 3909 	mlale	r9, r2, r9, r3
 801f7a0:	e7e1      	b.n	801f766 <_strtod_l+0x246>
 801f7a2:	2300      	movs	r3, #0
 801f7a4:	9307      	str	r3, [sp, #28]
 801f7a6:	2201      	movs	r2, #1
 801f7a8:	e77c      	b.n	801f6a4 <_strtod_l+0x184>
 801f7aa:	f04f 0c00 	mov.w	ip, #0
 801f7ae:	f108 0302 	add.w	r3, r8, #2
 801f7b2:	931d      	str	r3, [sp, #116]	; 0x74
 801f7b4:	f898 3002 	ldrb.w	r3, [r8, #2]
 801f7b8:	e785      	b.n	801f6c6 <_strtod_l+0x1a6>
 801f7ba:	f04f 0c01 	mov.w	ip, #1
 801f7be:	e7f6      	b.n	801f7ae <_strtod_l+0x28e>
 801f7c0:	080272cc 	.word	0x080272cc
 801f7c4:	08027154 	.word	0x08027154
 801f7c8:	7ff00000 	.word	0x7ff00000
 801f7cc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f7ce:	1c59      	adds	r1, r3, #1
 801f7d0:	911d      	str	r1, [sp, #116]	; 0x74
 801f7d2:	785b      	ldrb	r3, [r3, #1]
 801f7d4:	2b30      	cmp	r3, #48	; 0x30
 801f7d6:	d0f9      	beq.n	801f7cc <_strtod_l+0x2ac>
 801f7d8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 801f7dc:	2908      	cmp	r1, #8
 801f7de:	f63f af79 	bhi.w	801f6d4 <_strtod_l+0x1b4>
 801f7e2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 801f7e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f7e8:	9308      	str	r3, [sp, #32]
 801f7ea:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f7ec:	1c59      	adds	r1, r3, #1
 801f7ee:	911d      	str	r1, [sp, #116]	; 0x74
 801f7f0:	785b      	ldrb	r3, [r3, #1]
 801f7f2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 801f7f6:	2e09      	cmp	r6, #9
 801f7f8:	d937      	bls.n	801f86a <_strtod_l+0x34a>
 801f7fa:	9e08      	ldr	r6, [sp, #32]
 801f7fc:	1b89      	subs	r1, r1, r6
 801f7fe:	2908      	cmp	r1, #8
 801f800:	f644 661f 	movw	r6, #19999	; 0x4e1f
 801f804:	dc02      	bgt.n	801f80c <_strtod_l+0x2ec>
 801f806:	4576      	cmp	r6, lr
 801f808:	bfa8      	it	ge
 801f80a:	4676      	movge	r6, lr
 801f80c:	f1bc 0f00 	cmp.w	ip, #0
 801f810:	d000      	beq.n	801f814 <_strtod_l+0x2f4>
 801f812:	4276      	negs	r6, r6
 801f814:	2d00      	cmp	r5, #0
 801f816:	d14f      	bne.n	801f8b8 <_strtod_l+0x398>
 801f818:	9904      	ldr	r1, [sp, #16]
 801f81a:	4301      	orrs	r1, r0
 801f81c:	f47f aec2 	bne.w	801f5a4 <_strtod_l+0x84>
 801f820:	2a00      	cmp	r2, #0
 801f822:	f47f aedb 	bne.w	801f5dc <_strtod_l+0xbc>
 801f826:	2b69      	cmp	r3, #105	; 0x69
 801f828:	d027      	beq.n	801f87a <_strtod_l+0x35a>
 801f82a:	dc24      	bgt.n	801f876 <_strtod_l+0x356>
 801f82c:	2b49      	cmp	r3, #73	; 0x49
 801f82e:	d024      	beq.n	801f87a <_strtod_l+0x35a>
 801f830:	2b4e      	cmp	r3, #78	; 0x4e
 801f832:	f47f aed3 	bne.w	801f5dc <_strtod_l+0xbc>
 801f836:	499e      	ldr	r1, [pc, #632]	; (801fab0 <_strtod_l+0x590>)
 801f838:	a81d      	add	r0, sp, #116	; 0x74
 801f83a:	f001 ff5b 	bl	80216f4 <__match>
 801f83e:	2800      	cmp	r0, #0
 801f840:	f43f aecc 	beq.w	801f5dc <_strtod_l+0xbc>
 801f844:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f846:	781b      	ldrb	r3, [r3, #0]
 801f848:	2b28      	cmp	r3, #40	; 0x28
 801f84a:	d12d      	bne.n	801f8a8 <_strtod_l+0x388>
 801f84c:	4999      	ldr	r1, [pc, #612]	; (801fab4 <_strtod_l+0x594>)
 801f84e:	aa20      	add	r2, sp, #128	; 0x80
 801f850:	a81d      	add	r0, sp, #116	; 0x74
 801f852:	f001 ff63 	bl	802171c <__hexnan>
 801f856:	2805      	cmp	r0, #5
 801f858:	d126      	bne.n	801f8a8 <_strtod_l+0x388>
 801f85a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801f85c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 801f860:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 801f864:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 801f868:	e69c      	b.n	801f5a4 <_strtod_l+0x84>
 801f86a:	210a      	movs	r1, #10
 801f86c:	fb01 3e0e 	mla	lr, r1, lr, r3
 801f870:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 801f874:	e7b9      	b.n	801f7ea <_strtod_l+0x2ca>
 801f876:	2b6e      	cmp	r3, #110	; 0x6e
 801f878:	e7db      	b.n	801f832 <_strtod_l+0x312>
 801f87a:	498f      	ldr	r1, [pc, #572]	; (801fab8 <_strtod_l+0x598>)
 801f87c:	a81d      	add	r0, sp, #116	; 0x74
 801f87e:	f001 ff39 	bl	80216f4 <__match>
 801f882:	2800      	cmp	r0, #0
 801f884:	f43f aeaa 	beq.w	801f5dc <_strtod_l+0xbc>
 801f888:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f88a:	498c      	ldr	r1, [pc, #560]	; (801fabc <_strtod_l+0x59c>)
 801f88c:	3b01      	subs	r3, #1
 801f88e:	a81d      	add	r0, sp, #116	; 0x74
 801f890:	931d      	str	r3, [sp, #116]	; 0x74
 801f892:	f001 ff2f 	bl	80216f4 <__match>
 801f896:	b910      	cbnz	r0, 801f89e <_strtod_l+0x37e>
 801f898:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f89a:	3301      	adds	r3, #1
 801f89c:	931d      	str	r3, [sp, #116]	; 0x74
 801f89e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 801facc <_strtod_l+0x5ac>
 801f8a2:	f04f 0a00 	mov.w	sl, #0
 801f8a6:	e67d      	b.n	801f5a4 <_strtod_l+0x84>
 801f8a8:	4885      	ldr	r0, [pc, #532]	; (801fac0 <_strtod_l+0x5a0>)
 801f8aa:	f003 fab9 	bl	8022e20 <nan>
 801f8ae:	ed8d 0b04 	vstr	d0, [sp, #16]
 801f8b2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 801f8b6:	e675      	b.n	801f5a4 <_strtod_l+0x84>
 801f8b8:	9b07      	ldr	r3, [sp, #28]
 801f8ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f8bc:	1af3      	subs	r3, r6, r3
 801f8be:	2f00      	cmp	r7, #0
 801f8c0:	bf08      	it	eq
 801f8c2:	462f      	moveq	r7, r5
 801f8c4:	2d10      	cmp	r5, #16
 801f8c6:	9308      	str	r3, [sp, #32]
 801f8c8:	46a8      	mov	r8, r5
 801f8ca:	bfa8      	it	ge
 801f8cc:	f04f 0810 	movge.w	r8, #16
 801f8d0:	f7e0 fe18 	bl	8000504 <__aeabi_ui2d>
 801f8d4:	2d09      	cmp	r5, #9
 801f8d6:	4682      	mov	sl, r0
 801f8d8:	468b      	mov	fp, r1
 801f8da:	dd13      	ble.n	801f904 <_strtod_l+0x3e4>
 801f8dc:	4b79      	ldr	r3, [pc, #484]	; (801fac4 <_strtod_l+0x5a4>)
 801f8de:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801f8e2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 801f8e6:	f7e0 fe87 	bl	80005f8 <__aeabi_dmul>
 801f8ea:	4682      	mov	sl, r0
 801f8ec:	4648      	mov	r0, r9
 801f8ee:	468b      	mov	fp, r1
 801f8f0:	f7e0 fe08 	bl	8000504 <__aeabi_ui2d>
 801f8f4:	4602      	mov	r2, r0
 801f8f6:	460b      	mov	r3, r1
 801f8f8:	4650      	mov	r0, sl
 801f8fa:	4659      	mov	r1, fp
 801f8fc:	f7e0 fcc6 	bl	800028c <__adddf3>
 801f900:	4682      	mov	sl, r0
 801f902:	468b      	mov	fp, r1
 801f904:	2d0f      	cmp	r5, #15
 801f906:	dc38      	bgt.n	801f97a <_strtod_l+0x45a>
 801f908:	9b08      	ldr	r3, [sp, #32]
 801f90a:	2b00      	cmp	r3, #0
 801f90c:	f43f ae4a 	beq.w	801f5a4 <_strtod_l+0x84>
 801f910:	dd24      	ble.n	801f95c <_strtod_l+0x43c>
 801f912:	2b16      	cmp	r3, #22
 801f914:	dc0b      	bgt.n	801f92e <_strtod_l+0x40e>
 801f916:	4d6b      	ldr	r5, [pc, #428]	; (801fac4 <_strtod_l+0x5a4>)
 801f918:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801f91c:	e9d5 0100 	ldrd	r0, r1, [r5]
 801f920:	4652      	mov	r2, sl
 801f922:	465b      	mov	r3, fp
 801f924:	f7e0 fe68 	bl	80005f8 <__aeabi_dmul>
 801f928:	4682      	mov	sl, r0
 801f92a:	468b      	mov	fp, r1
 801f92c:	e63a      	b.n	801f5a4 <_strtod_l+0x84>
 801f92e:	9a08      	ldr	r2, [sp, #32]
 801f930:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 801f934:	4293      	cmp	r3, r2
 801f936:	db20      	blt.n	801f97a <_strtod_l+0x45a>
 801f938:	4c62      	ldr	r4, [pc, #392]	; (801fac4 <_strtod_l+0x5a4>)
 801f93a:	f1c5 050f 	rsb	r5, r5, #15
 801f93e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 801f942:	4652      	mov	r2, sl
 801f944:	465b      	mov	r3, fp
 801f946:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f94a:	f7e0 fe55 	bl	80005f8 <__aeabi_dmul>
 801f94e:	9b08      	ldr	r3, [sp, #32]
 801f950:	1b5d      	subs	r5, r3, r5
 801f952:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 801f956:	e9d4 2300 	ldrd	r2, r3, [r4]
 801f95a:	e7e3      	b.n	801f924 <_strtod_l+0x404>
 801f95c:	9b08      	ldr	r3, [sp, #32]
 801f95e:	3316      	adds	r3, #22
 801f960:	db0b      	blt.n	801f97a <_strtod_l+0x45a>
 801f962:	9b07      	ldr	r3, [sp, #28]
 801f964:	4a57      	ldr	r2, [pc, #348]	; (801fac4 <_strtod_l+0x5a4>)
 801f966:	1b9e      	subs	r6, r3, r6
 801f968:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801f96c:	e9d6 2300 	ldrd	r2, r3, [r6]
 801f970:	4650      	mov	r0, sl
 801f972:	4659      	mov	r1, fp
 801f974:	f7e0 ff6a 	bl	800084c <__aeabi_ddiv>
 801f978:	e7d6      	b.n	801f928 <_strtod_l+0x408>
 801f97a:	9b08      	ldr	r3, [sp, #32]
 801f97c:	eba5 0808 	sub.w	r8, r5, r8
 801f980:	4498      	add	r8, r3
 801f982:	f1b8 0f00 	cmp.w	r8, #0
 801f986:	dd71      	ble.n	801fa6c <_strtod_l+0x54c>
 801f988:	f018 030f 	ands.w	r3, r8, #15
 801f98c:	d00a      	beq.n	801f9a4 <_strtod_l+0x484>
 801f98e:	494d      	ldr	r1, [pc, #308]	; (801fac4 <_strtod_l+0x5a4>)
 801f990:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801f994:	4652      	mov	r2, sl
 801f996:	465b      	mov	r3, fp
 801f998:	e9d1 0100 	ldrd	r0, r1, [r1]
 801f99c:	f7e0 fe2c 	bl	80005f8 <__aeabi_dmul>
 801f9a0:	4682      	mov	sl, r0
 801f9a2:	468b      	mov	fp, r1
 801f9a4:	f038 080f 	bics.w	r8, r8, #15
 801f9a8:	d04d      	beq.n	801fa46 <_strtod_l+0x526>
 801f9aa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 801f9ae:	dd22      	ble.n	801f9f6 <_strtod_l+0x4d6>
 801f9b0:	2500      	movs	r5, #0
 801f9b2:	462e      	mov	r6, r5
 801f9b4:	9509      	str	r5, [sp, #36]	; 0x24
 801f9b6:	9507      	str	r5, [sp, #28]
 801f9b8:	2322      	movs	r3, #34	; 0x22
 801f9ba:	f8df b110 	ldr.w	fp, [pc, #272]	; 801facc <_strtod_l+0x5ac>
 801f9be:	6023      	str	r3, [r4, #0]
 801f9c0:	f04f 0a00 	mov.w	sl, #0
 801f9c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f9c6:	2b00      	cmp	r3, #0
 801f9c8:	f43f adec 	beq.w	801f5a4 <_strtod_l+0x84>
 801f9cc:	991e      	ldr	r1, [sp, #120]	; 0x78
 801f9ce:	4620      	mov	r0, r4
 801f9d0:	f001 ffb4 	bl	802193c <_Bfree>
 801f9d4:	9907      	ldr	r1, [sp, #28]
 801f9d6:	4620      	mov	r0, r4
 801f9d8:	f001 ffb0 	bl	802193c <_Bfree>
 801f9dc:	4631      	mov	r1, r6
 801f9de:	4620      	mov	r0, r4
 801f9e0:	f001 ffac 	bl	802193c <_Bfree>
 801f9e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f9e6:	4620      	mov	r0, r4
 801f9e8:	f001 ffa8 	bl	802193c <_Bfree>
 801f9ec:	4629      	mov	r1, r5
 801f9ee:	4620      	mov	r0, r4
 801f9f0:	f001 ffa4 	bl	802193c <_Bfree>
 801f9f4:	e5d6      	b.n	801f5a4 <_strtod_l+0x84>
 801f9f6:	2300      	movs	r3, #0
 801f9f8:	ea4f 1828 	mov.w	r8, r8, asr #4
 801f9fc:	4650      	mov	r0, sl
 801f9fe:	4659      	mov	r1, fp
 801fa00:	4699      	mov	r9, r3
 801fa02:	f1b8 0f01 	cmp.w	r8, #1
 801fa06:	dc21      	bgt.n	801fa4c <_strtod_l+0x52c>
 801fa08:	b10b      	cbz	r3, 801fa0e <_strtod_l+0x4ee>
 801fa0a:	4682      	mov	sl, r0
 801fa0c:	468b      	mov	fp, r1
 801fa0e:	4b2e      	ldr	r3, [pc, #184]	; (801fac8 <_strtod_l+0x5a8>)
 801fa10:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 801fa14:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 801fa18:	4652      	mov	r2, sl
 801fa1a:	465b      	mov	r3, fp
 801fa1c:	e9d9 0100 	ldrd	r0, r1, [r9]
 801fa20:	f7e0 fdea 	bl	80005f8 <__aeabi_dmul>
 801fa24:	4b29      	ldr	r3, [pc, #164]	; (801facc <_strtod_l+0x5ac>)
 801fa26:	460a      	mov	r2, r1
 801fa28:	400b      	ands	r3, r1
 801fa2a:	4929      	ldr	r1, [pc, #164]	; (801fad0 <_strtod_l+0x5b0>)
 801fa2c:	428b      	cmp	r3, r1
 801fa2e:	4682      	mov	sl, r0
 801fa30:	d8be      	bhi.n	801f9b0 <_strtod_l+0x490>
 801fa32:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 801fa36:	428b      	cmp	r3, r1
 801fa38:	bf86      	itte	hi
 801fa3a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 801fad4 <_strtod_l+0x5b4>
 801fa3e:	f04f 3aff 	movhi.w	sl, #4294967295
 801fa42:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 801fa46:	2300      	movs	r3, #0
 801fa48:	9304      	str	r3, [sp, #16]
 801fa4a:	e081      	b.n	801fb50 <_strtod_l+0x630>
 801fa4c:	f018 0f01 	tst.w	r8, #1
 801fa50:	d007      	beq.n	801fa62 <_strtod_l+0x542>
 801fa52:	4b1d      	ldr	r3, [pc, #116]	; (801fac8 <_strtod_l+0x5a8>)
 801fa54:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 801fa58:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa5c:	f7e0 fdcc 	bl	80005f8 <__aeabi_dmul>
 801fa60:	2301      	movs	r3, #1
 801fa62:	f109 0901 	add.w	r9, r9, #1
 801fa66:	ea4f 0868 	mov.w	r8, r8, asr #1
 801fa6a:	e7ca      	b.n	801fa02 <_strtod_l+0x4e2>
 801fa6c:	d0eb      	beq.n	801fa46 <_strtod_l+0x526>
 801fa6e:	f1c8 0800 	rsb	r8, r8, #0
 801fa72:	f018 020f 	ands.w	r2, r8, #15
 801fa76:	d00a      	beq.n	801fa8e <_strtod_l+0x56e>
 801fa78:	4b12      	ldr	r3, [pc, #72]	; (801fac4 <_strtod_l+0x5a4>)
 801fa7a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801fa7e:	4650      	mov	r0, sl
 801fa80:	4659      	mov	r1, fp
 801fa82:	e9d3 2300 	ldrd	r2, r3, [r3]
 801fa86:	f7e0 fee1 	bl	800084c <__aeabi_ddiv>
 801fa8a:	4682      	mov	sl, r0
 801fa8c:	468b      	mov	fp, r1
 801fa8e:	ea5f 1828 	movs.w	r8, r8, asr #4
 801fa92:	d0d8      	beq.n	801fa46 <_strtod_l+0x526>
 801fa94:	f1b8 0f1f 	cmp.w	r8, #31
 801fa98:	dd1e      	ble.n	801fad8 <_strtod_l+0x5b8>
 801fa9a:	2500      	movs	r5, #0
 801fa9c:	462e      	mov	r6, r5
 801fa9e:	9509      	str	r5, [sp, #36]	; 0x24
 801faa0:	9507      	str	r5, [sp, #28]
 801faa2:	2322      	movs	r3, #34	; 0x22
 801faa4:	f04f 0a00 	mov.w	sl, #0
 801faa8:	f04f 0b00 	mov.w	fp, #0
 801faac:	6023      	str	r3, [r4, #0]
 801faae:	e789      	b.n	801f9c4 <_strtod_l+0x4a4>
 801fab0:	080270b1 	.word	0x080270b1
 801fab4:	08027168 	.word	0x08027168
 801fab8:	080270a9 	.word	0x080270a9
 801fabc:	080271e7 	.word	0x080271e7
 801fac0:	080271e3 	.word	0x080271e3
 801fac4:	08027368 	.word	0x08027368
 801fac8:	08027340 	.word	0x08027340
 801facc:	7ff00000 	.word	0x7ff00000
 801fad0:	7ca00000 	.word	0x7ca00000
 801fad4:	7fefffff 	.word	0x7fefffff
 801fad8:	f018 0310 	ands.w	r3, r8, #16
 801fadc:	bf18      	it	ne
 801fade:	236a      	movne	r3, #106	; 0x6a
 801fae0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 801fe98 <_strtod_l+0x978>
 801fae4:	9304      	str	r3, [sp, #16]
 801fae6:	4650      	mov	r0, sl
 801fae8:	4659      	mov	r1, fp
 801faea:	2300      	movs	r3, #0
 801faec:	f018 0f01 	tst.w	r8, #1
 801faf0:	d004      	beq.n	801fafc <_strtod_l+0x5dc>
 801faf2:	e9d9 2300 	ldrd	r2, r3, [r9]
 801faf6:	f7e0 fd7f 	bl	80005f8 <__aeabi_dmul>
 801fafa:	2301      	movs	r3, #1
 801fafc:	ea5f 0868 	movs.w	r8, r8, asr #1
 801fb00:	f109 0908 	add.w	r9, r9, #8
 801fb04:	d1f2      	bne.n	801faec <_strtod_l+0x5cc>
 801fb06:	b10b      	cbz	r3, 801fb0c <_strtod_l+0x5ec>
 801fb08:	4682      	mov	sl, r0
 801fb0a:	468b      	mov	fp, r1
 801fb0c:	9b04      	ldr	r3, [sp, #16]
 801fb0e:	b1bb      	cbz	r3, 801fb40 <_strtod_l+0x620>
 801fb10:	f3cb 530a 	ubfx	r3, fp, #20, #11
 801fb14:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 801fb18:	2b00      	cmp	r3, #0
 801fb1a:	4659      	mov	r1, fp
 801fb1c:	dd10      	ble.n	801fb40 <_strtod_l+0x620>
 801fb1e:	2b1f      	cmp	r3, #31
 801fb20:	f340 8128 	ble.w	801fd74 <_strtod_l+0x854>
 801fb24:	2b34      	cmp	r3, #52	; 0x34
 801fb26:	bfde      	ittt	le
 801fb28:	3b20      	suble	r3, #32
 801fb2a:	f04f 32ff 	movle.w	r2, #4294967295
 801fb2e:	fa02 f303 	lslle.w	r3, r2, r3
 801fb32:	f04f 0a00 	mov.w	sl, #0
 801fb36:	bfcc      	ite	gt
 801fb38:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 801fb3c:	ea03 0b01 	andle.w	fp, r3, r1
 801fb40:	2200      	movs	r2, #0
 801fb42:	2300      	movs	r3, #0
 801fb44:	4650      	mov	r0, sl
 801fb46:	4659      	mov	r1, fp
 801fb48:	f7e0 ffbe 	bl	8000ac8 <__aeabi_dcmpeq>
 801fb4c:	2800      	cmp	r0, #0
 801fb4e:	d1a4      	bne.n	801fa9a <_strtod_l+0x57a>
 801fb50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fb52:	9300      	str	r3, [sp, #0]
 801fb54:	990a      	ldr	r1, [sp, #40]	; 0x28
 801fb56:	462b      	mov	r3, r5
 801fb58:	463a      	mov	r2, r7
 801fb5a:	4620      	mov	r0, r4
 801fb5c:	f001 ff5a 	bl	8021a14 <__s2b>
 801fb60:	9009      	str	r0, [sp, #36]	; 0x24
 801fb62:	2800      	cmp	r0, #0
 801fb64:	f43f af24 	beq.w	801f9b0 <_strtod_l+0x490>
 801fb68:	9b07      	ldr	r3, [sp, #28]
 801fb6a:	1b9e      	subs	r6, r3, r6
 801fb6c:	9b08      	ldr	r3, [sp, #32]
 801fb6e:	2b00      	cmp	r3, #0
 801fb70:	bfb4      	ite	lt
 801fb72:	4633      	movlt	r3, r6
 801fb74:	2300      	movge	r3, #0
 801fb76:	9310      	str	r3, [sp, #64]	; 0x40
 801fb78:	9b08      	ldr	r3, [sp, #32]
 801fb7a:	2500      	movs	r5, #0
 801fb7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fb80:	9318      	str	r3, [sp, #96]	; 0x60
 801fb82:	462e      	mov	r6, r5
 801fb84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fb86:	4620      	mov	r0, r4
 801fb88:	6859      	ldr	r1, [r3, #4]
 801fb8a:	f001 fe97 	bl	80218bc <_Balloc>
 801fb8e:	9007      	str	r0, [sp, #28]
 801fb90:	2800      	cmp	r0, #0
 801fb92:	f43f af11 	beq.w	801f9b8 <_strtod_l+0x498>
 801fb96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fb98:	691a      	ldr	r2, [r3, #16]
 801fb9a:	3202      	adds	r2, #2
 801fb9c:	f103 010c 	add.w	r1, r3, #12
 801fba0:	0092      	lsls	r2, r2, #2
 801fba2:	300c      	adds	r0, #12
 801fba4:	f7fe fbae 	bl	801e304 <memcpy>
 801fba8:	ec4b ab10 	vmov	d0, sl, fp
 801fbac:	aa20      	add	r2, sp, #128	; 0x80
 801fbae:	a91f      	add	r1, sp, #124	; 0x7c
 801fbb0:	4620      	mov	r0, r4
 801fbb2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 801fbb6:	f002 fa69 	bl	802208c <__d2b>
 801fbba:	901e      	str	r0, [sp, #120]	; 0x78
 801fbbc:	2800      	cmp	r0, #0
 801fbbe:	f43f aefb 	beq.w	801f9b8 <_strtod_l+0x498>
 801fbc2:	2101      	movs	r1, #1
 801fbc4:	4620      	mov	r0, r4
 801fbc6:	f001 ffbf 	bl	8021b48 <__i2b>
 801fbca:	4606      	mov	r6, r0
 801fbcc:	2800      	cmp	r0, #0
 801fbce:	f43f aef3 	beq.w	801f9b8 <_strtod_l+0x498>
 801fbd2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801fbd4:	9904      	ldr	r1, [sp, #16]
 801fbd6:	2b00      	cmp	r3, #0
 801fbd8:	bfab      	itete	ge
 801fbda:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 801fbdc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 801fbde:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 801fbe0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 801fbe4:	bfac      	ite	ge
 801fbe6:	eb03 0902 	addge.w	r9, r3, r2
 801fbea:	1ad7      	sublt	r7, r2, r3
 801fbec:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801fbee:	eba3 0801 	sub.w	r8, r3, r1
 801fbf2:	4490      	add	r8, r2
 801fbf4:	4ba3      	ldr	r3, [pc, #652]	; (801fe84 <_strtod_l+0x964>)
 801fbf6:	f108 38ff 	add.w	r8, r8, #4294967295
 801fbfa:	4598      	cmp	r8, r3
 801fbfc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801fc00:	f280 80cc 	bge.w	801fd9c <_strtod_l+0x87c>
 801fc04:	eba3 0308 	sub.w	r3, r3, r8
 801fc08:	2b1f      	cmp	r3, #31
 801fc0a:	eba2 0203 	sub.w	r2, r2, r3
 801fc0e:	f04f 0101 	mov.w	r1, #1
 801fc12:	f300 80b6 	bgt.w	801fd82 <_strtod_l+0x862>
 801fc16:	fa01 f303 	lsl.w	r3, r1, r3
 801fc1a:	9311      	str	r3, [sp, #68]	; 0x44
 801fc1c:	2300      	movs	r3, #0
 801fc1e:	930c      	str	r3, [sp, #48]	; 0x30
 801fc20:	eb09 0802 	add.w	r8, r9, r2
 801fc24:	9b04      	ldr	r3, [sp, #16]
 801fc26:	45c1      	cmp	r9, r8
 801fc28:	4417      	add	r7, r2
 801fc2a:	441f      	add	r7, r3
 801fc2c:	464b      	mov	r3, r9
 801fc2e:	bfa8      	it	ge
 801fc30:	4643      	movge	r3, r8
 801fc32:	42bb      	cmp	r3, r7
 801fc34:	bfa8      	it	ge
 801fc36:	463b      	movge	r3, r7
 801fc38:	2b00      	cmp	r3, #0
 801fc3a:	bfc2      	ittt	gt
 801fc3c:	eba8 0803 	subgt.w	r8, r8, r3
 801fc40:	1aff      	subgt	r7, r7, r3
 801fc42:	eba9 0903 	subgt.w	r9, r9, r3
 801fc46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801fc48:	2b00      	cmp	r3, #0
 801fc4a:	dd17      	ble.n	801fc7c <_strtod_l+0x75c>
 801fc4c:	4631      	mov	r1, r6
 801fc4e:	461a      	mov	r2, r3
 801fc50:	4620      	mov	r0, r4
 801fc52:	f002 f835 	bl	8021cc0 <__pow5mult>
 801fc56:	4606      	mov	r6, r0
 801fc58:	2800      	cmp	r0, #0
 801fc5a:	f43f aead 	beq.w	801f9b8 <_strtod_l+0x498>
 801fc5e:	4601      	mov	r1, r0
 801fc60:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801fc62:	4620      	mov	r0, r4
 801fc64:	f001 ff86 	bl	8021b74 <__multiply>
 801fc68:	900f      	str	r0, [sp, #60]	; 0x3c
 801fc6a:	2800      	cmp	r0, #0
 801fc6c:	f43f aea4 	beq.w	801f9b8 <_strtod_l+0x498>
 801fc70:	991e      	ldr	r1, [sp, #120]	; 0x78
 801fc72:	4620      	mov	r0, r4
 801fc74:	f001 fe62 	bl	802193c <_Bfree>
 801fc78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fc7a:	931e      	str	r3, [sp, #120]	; 0x78
 801fc7c:	f1b8 0f00 	cmp.w	r8, #0
 801fc80:	f300 8091 	bgt.w	801fda6 <_strtod_l+0x886>
 801fc84:	9b08      	ldr	r3, [sp, #32]
 801fc86:	2b00      	cmp	r3, #0
 801fc88:	dd08      	ble.n	801fc9c <_strtod_l+0x77c>
 801fc8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801fc8c:	9907      	ldr	r1, [sp, #28]
 801fc8e:	4620      	mov	r0, r4
 801fc90:	f002 f816 	bl	8021cc0 <__pow5mult>
 801fc94:	9007      	str	r0, [sp, #28]
 801fc96:	2800      	cmp	r0, #0
 801fc98:	f43f ae8e 	beq.w	801f9b8 <_strtod_l+0x498>
 801fc9c:	2f00      	cmp	r7, #0
 801fc9e:	dd08      	ble.n	801fcb2 <_strtod_l+0x792>
 801fca0:	9907      	ldr	r1, [sp, #28]
 801fca2:	463a      	mov	r2, r7
 801fca4:	4620      	mov	r0, r4
 801fca6:	f002 f865 	bl	8021d74 <__lshift>
 801fcaa:	9007      	str	r0, [sp, #28]
 801fcac:	2800      	cmp	r0, #0
 801fcae:	f43f ae83 	beq.w	801f9b8 <_strtod_l+0x498>
 801fcb2:	f1b9 0f00 	cmp.w	r9, #0
 801fcb6:	dd08      	ble.n	801fcca <_strtod_l+0x7aa>
 801fcb8:	4631      	mov	r1, r6
 801fcba:	464a      	mov	r2, r9
 801fcbc:	4620      	mov	r0, r4
 801fcbe:	f002 f859 	bl	8021d74 <__lshift>
 801fcc2:	4606      	mov	r6, r0
 801fcc4:	2800      	cmp	r0, #0
 801fcc6:	f43f ae77 	beq.w	801f9b8 <_strtod_l+0x498>
 801fcca:	9a07      	ldr	r2, [sp, #28]
 801fccc:	991e      	ldr	r1, [sp, #120]	; 0x78
 801fcce:	4620      	mov	r0, r4
 801fcd0:	f002 f8d8 	bl	8021e84 <__mdiff>
 801fcd4:	4605      	mov	r5, r0
 801fcd6:	2800      	cmp	r0, #0
 801fcd8:	f43f ae6e 	beq.w	801f9b8 <_strtod_l+0x498>
 801fcdc:	68c3      	ldr	r3, [r0, #12]
 801fcde:	930f      	str	r3, [sp, #60]	; 0x3c
 801fce0:	2300      	movs	r3, #0
 801fce2:	60c3      	str	r3, [r0, #12]
 801fce4:	4631      	mov	r1, r6
 801fce6:	f002 f8b1 	bl	8021e4c <__mcmp>
 801fcea:	2800      	cmp	r0, #0
 801fcec:	da65      	bge.n	801fdba <_strtod_l+0x89a>
 801fcee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fcf0:	ea53 030a 	orrs.w	r3, r3, sl
 801fcf4:	f040 8087 	bne.w	801fe06 <_strtod_l+0x8e6>
 801fcf8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801fcfc:	2b00      	cmp	r3, #0
 801fcfe:	f040 8082 	bne.w	801fe06 <_strtod_l+0x8e6>
 801fd02:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801fd06:	0d1b      	lsrs	r3, r3, #20
 801fd08:	051b      	lsls	r3, r3, #20
 801fd0a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 801fd0e:	d97a      	bls.n	801fe06 <_strtod_l+0x8e6>
 801fd10:	696b      	ldr	r3, [r5, #20]
 801fd12:	b913      	cbnz	r3, 801fd1a <_strtod_l+0x7fa>
 801fd14:	692b      	ldr	r3, [r5, #16]
 801fd16:	2b01      	cmp	r3, #1
 801fd18:	dd75      	ble.n	801fe06 <_strtod_l+0x8e6>
 801fd1a:	4629      	mov	r1, r5
 801fd1c:	2201      	movs	r2, #1
 801fd1e:	4620      	mov	r0, r4
 801fd20:	f002 f828 	bl	8021d74 <__lshift>
 801fd24:	4631      	mov	r1, r6
 801fd26:	4605      	mov	r5, r0
 801fd28:	f002 f890 	bl	8021e4c <__mcmp>
 801fd2c:	2800      	cmp	r0, #0
 801fd2e:	dd6a      	ble.n	801fe06 <_strtod_l+0x8e6>
 801fd30:	9904      	ldr	r1, [sp, #16]
 801fd32:	4a55      	ldr	r2, [pc, #340]	; (801fe88 <_strtod_l+0x968>)
 801fd34:	465b      	mov	r3, fp
 801fd36:	2900      	cmp	r1, #0
 801fd38:	f000 8085 	beq.w	801fe46 <_strtod_l+0x926>
 801fd3c:	ea02 010b 	and.w	r1, r2, fp
 801fd40:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 801fd44:	dc7f      	bgt.n	801fe46 <_strtod_l+0x926>
 801fd46:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801fd4a:	f77f aeaa 	ble.w	801faa2 <_strtod_l+0x582>
 801fd4e:	4a4f      	ldr	r2, [pc, #316]	; (801fe8c <_strtod_l+0x96c>)
 801fd50:	2300      	movs	r3, #0
 801fd52:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 801fd56:	4650      	mov	r0, sl
 801fd58:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 801fd5c:	4659      	mov	r1, fp
 801fd5e:	f7e0 fc4b 	bl	80005f8 <__aeabi_dmul>
 801fd62:	460b      	mov	r3, r1
 801fd64:	4303      	orrs	r3, r0
 801fd66:	bf08      	it	eq
 801fd68:	2322      	moveq	r3, #34	; 0x22
 801fd6a:	4682      	mov	sl, r0
 801fd6c:	468b      	mov	fp, r1
 801fd6e:	bf08      	it	eq
 801fd70:	6023      	streq	r3, [r4, #0]
 801fd72:	e62b      	b.n	801f9cc <_strtod_l+0x4ac>
 801fd74:	f04f 32ff 	mov.w	r2, #4294967295
 801fd78:	fa02 f303 	lsl.w	r3, r2, r3
 801fd7c:	ea03 0a0a 	and.w	sl, r3, sl
 801fd80:	e6de      	b.n	801fb40 <_strtod_l+0x620>
 801fd82:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 801fd86:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 801fd8a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 801fd8e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 801fd92:	fa01 f308 	lsl.w	r3, r1, r8
 801fd96:	930c      	str	r3, [sp, #48]	; 0x30
 801fd98:	9111      	str	r1, [sp, #68]	; 0x44
 801fd9a:	e741      	b.n	801fc20 <_strtod_l+0x700>
 801fd9c:	2300      	movs	r3, #0
 801fd9e:	930c      	str	r3, [sp, #48]	; 0x30
 801fda0:	2301      	movs	r3, #1
 801fda2:	9311      	str	r3, [sp, #68]	; 0x44
 801fda4:	e73c      	b.n	801fc20 <_strtod_l+0x700>
 801fda6:	991e      	ldr	r1, [sp, #120]	; 0x78
 801fda8:	4642      	mov	r2, r8
 801fdaa:	4620      	mov	r0, r4
 801fdac:	f001 ffe2 	bl	8021d74 <__lshift>
 801fdb0:	901e      	str	r0, [sp, #120]	; 0x78
 801fdb2:	2800      	cmp	r0, #0
 801fdb4:	f47f af66 	bne.w	801fc84 <_strtod_l+0x764>
 801fdb8:	e5fe      	b.n	801f9b8 <_strtod_l+0x498>
 801fdba:	465f      	mov	r7, fp
 801fdbc:	d16e      	bne.n	801fe9c <_strtod_l+0x97c>
 801fdbe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fdc0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801fdc4:	b342      	cbz	r2, 801fe18 <_strtod_l+0x8f8>
 801fdc6:	4a32      	ldr	r2, [pc, #200]	; (801fe90 <_strtod_l+0x970>)
 801fdc8:	4293      	cmp	r3, r2
 801fdca:	d128      	bne.n	801fe1e <_strtod_l+0x8fe>
 801fdcc:	9b04      	ldr	r3, [sp, #16]
 801fdce:	4650      	mov	r0, sl
 801fdd0:	b1eb      	cbz	r3, 801fe0e <_strtod_l+0x8ee>
 801fdd2:	4a2d      	ldr	r2, [pc, #180]	; (801fe88 <_strtod_l+0x968>)
 801fdd4:	403a      	ands	r2, r7
 801fdd6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 801fdda:	f04f 31ff 	mov.w	r1, #4294967295
 801fdde:	d819      	bhi.n	801fe14 <_strtod_l+0x8f4>
 801fde0:	0d12      	lsrs	r2, r2, #20
 801fde2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 801fde6:	fa01 f303 	lsl.w	r3, r1, r3
 801fdea:	4298      	cmp	r0, r3
 801fdec:	d117      	bne.n	801fe1e <_strtod_l+0x8fe>
 801fdee:	4b29      	ldr	r3, [pc, #164]	; (801fe94 <_strtod_l+0x974>)
 801fdf0:	429f      	cmp	r7, r3
 801fdf2:	d102      	bne.n	801fdfa <_strtod_l+0x8da>
 801fdf4:	3001      	adds	r0, #1
 801fdf6:	f43f addf 	beq.w	801f9b8 <_strtod_l+0x498>
 801fdfa:	4b23      	ldr	r3, [pc, #140]	; (801fe88 <_strtod_l+0x968>)
 801fdfc:	403b      	ands	r3, r7
 801fdfe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 801fe02:	f04f 0a00 	mov.w	sl, #0
 801fe06:	9b04      	ldr	r3, [sp, #16]
 801fe08:	2b00      	cmp	r3, #0
 801fe0a:	d1a0      	bne.n	801fd4e <_strtod_l+0x82e>
 801fe0c:	e5de      	b.n	801f9cc <_strtod_l+0x4ac>
 801fe0e:	f04f 33ff 	mov.w	r3, #4294967295
 801fe12:	e7ea      	b.n	801fdea <_strtod_l+0x8ca>
 801fe14:	460b      	mov	r3, r1
 801fe16:	e7e8      	b.n	801fdea <_strtod_l+0x8ca>
 801fe18:	ea53 030a 	orrs.w	r3, r3, sl
 801fe1c:	d088      	beq.n	801fd30 <_strtod_l+0x810>
 801fe1e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801fe20:	b1db      	cbz	r3, 801fe5a <_strtod_l+0x93a>
 801fe22:	423b      	tst	r3, r7
 801fe24:	d0ef      	beq.n	801fe06 <_strtod_l+0x8e6>
 801fe26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fe28:	9a04      	ldr	r2, [sp, #16]
 801fe2a:	4650      	mov	r0, sl
 801fe2c:	4659      	mov	r1, fp
 801fe2e:	b1c3      	cbz	r3, 801fe62 <_strtod_l+0x942>
 801fe30:	f7ff fb57 	bl	801f4e2 <sulp>
 801fe34:	4602      	mov	r2, r0
 801fe36:	460b      	mov	r3, r1
 801fe38:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801fe3c:	f7e0 fa26 	bl	800028c <__adddf3>
 801fe40:	4682      	mov	sl, r0
 801fe42:	468b      	mov	fp, r1
 801fe44:	e7df      	b.n	801fe06 <_strtod_l+0x8e6>
 801fe46:	4013      	ands	r3, r2
 801fe48:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 801fe4c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 801fe50:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801fe54:	f04f 3aff 	mov.w	sl, #4294967295
 801fe58:	e7d5      	b.n	801fe06 <_strtod_l+0x8e6>
 801fe5a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801fe5c:	ea13 0f0a 	tst.w	r3, sl
 801fe60:	e7e0      	b.n	801fe24 <_strtod_l+0x904>
 801fe62:	f7ff fb3e 	bl	801f4e2 <sulp>
 801fe66:	4602      	mov	r2, r0
 801fe68:	460b      	mov	r3, r1
 801fe6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801fe6e:	f7e0 fa0b 	bl	8000288 <__aeabi_dsub>
 801fe72:	2200      	movs	r2, #0
 801fe74:	2300      	movs	r3, #0
 801fe76:	4682      	mov	sl, r0
 801fe78:	468b      	mov	fp, r1
 801fe7a:	f7e0 fe25 	bl	8000ac8 <__aeabi_dcmpeq>
 801fe7e:	2800      	cmp	r0, #0
 801fe80:	d0c1      	beq.n	801fe06 <_strtod_l+0x8e6>
 801fe82:	e60e      	b.n	801faa2 <_strtod_l+0x582>
 801fe84:	fffffc02 	.word	0xfffffc02
 801fe88:	7ff00000 	.word	0x7ff00000
 801fe8c:	39500000 	.word	0x39500000
 801fe90:	000fffff 	.word	0x000fffff
 801fe94:	7fefffff 	.word	0x7fefffff
 801fe98:	08027180 	.word	0x08027180
 801fe9c:	4631      	mov	r1, r6
 801fe9e:	4628      	mov	r0, r5
 801fea0:	f002 f950 	bl	8022144 <__ratio>
 801fea4:	ec59 8b10 	vmov	r8, r9, d0
 801fea8:	ee10 0a10 	vmov	r0, s0
 801feac:	2200      	movs	r2, #0
 801feae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801feb2:	4649      	mov	r1, r9
 801feb4:	f7e0 fe1c 	bl	8000af0 <__aeabi_dcmple>
 801feb8:	2800      	cmp	r0, #0
 801feba:	d07c      	beq.n	801ffb6 <_strtod_l+0xa96>
 801febc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801febe:	2b00      	cmp	r3, #0
 801fec0:	d04c      	beq.n	801ff5c <_strtod_l+0xa3c>
 801fec2:	4b95      	ldr	r3, [pc, #596]	; (8020118 <_strtod_l+0xbf8>)
 801fec4:	2200      	movs	r2, #0
 801fec6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801feca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8020118 <_strtod_l+0xbf8>
 801fece:	f04f 0800 	mov.w	r8, #0
 801fed2:	4b92      	ldr	r3, [pc, #584]	; (802011c <_strtod_l+0xbfc>)
 801fed4:	403b      	ands	r3, r7
 801fed6:	9311      	str	r3, [sp, #68]	; 0x44
 801fed8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801feda:	4b91      	ldr	r3, [pc, #580]	; (8020120 <_strtod_l+0xc00>)
 801fedc:	429a      	cmp	r2, r3
 801fede:	f040 80b2 	bne.w	8020046 <_strtod_l+0xb26>
 801fee2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801fee6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801feea:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 801feee:	ec4b ab10 	vmov	d0, sl, fp
 801fef2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 801fef6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801fefa:	f002 f84b 	bl	8021f94 <__ulp>
 801fefe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 801ff02:	ec53 2b10 	vmov	r2, r3, d0
 801ff06:	f7e0 fb77 	bl	80005f8 <__aeabi_dmul>
 801ff0a:	4652      	mov	r2, sl
 801ff0c:	465b      	mov	r3, fp
 801ff0e:	f7e0 f9bd 	bl	800028c <__adddf3>
 801ff12:	460b      	mov	r3, r1
 801ff14:	4981      	ldr	r1, [pc, #516]	; (802011c <_strtod_l+0xbfc>)
 801ff16:	4a83      	ldr	r2, [pc, #524]	; (8020124 <_strtod_l+0xc04>)
 801ff18:	4019      	ands	r1, r3
 801ff1a:	4291      	cmp	r1, r2
 801ff1c:	4682      	mov	sl, r0
 801ff1e:	d95e      	bls.n	801ffde <_strtod_l+0xabe>
 801ff20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ff22:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801ff26:	4293      	cmp	r3, r2
 801ff28:	d103      	bne.n	801ff32 <_strtod_l+0xa12>
 801ff2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ff2c:	3301      	adds	r3, #1
 801ff2e:	f43f ad43 	beq.w	801f9b8 <_strtod_l+0x498>
 801ff32:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8020130 <_strtod_l+0xc10>
 801ff36:	f04f 3aff 	mov.w	sl, #4294967295
 801ff3a:	991e      	ldr	r1, [sp, #120]	; 0x78
 801ff3c:	4620      	mov	r0, r4
 801ff3e:	f001 fcfd 	bl	802193c <_Bfree>
 801ff42:	9907      	ldr	r1, [sp, #28]
 801ff44:	4620      	mov	r0, r4
 801ff46:	f001 fcf9 	bl	802193c <_Bfree>
 801ff4a:	4631      	mov	r1, r6
 801ff4c:	4620      	mov	r0, r4
 801ff4e:	f001 fcf5 	bl	802193c <_Bfree>
 801ff52:	4629      	mov	r1, r5
 801ff54:	4620      	mov	r0, r4
 801ff56:	f001 fcf1 	bl	802193c <_Bfree>
 801ff5a:	e613      	b.n	801fb84 <_strtod_l+0x664>
 801ff5c:	f1ba 0f00 	cmp.w	sl, #0
 801ff60:	d11b      	bne.n	801ff9a <_strtod_l+0xa7a>
 801ff62:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801ff66:	b9f3      	cbnz	r3, 801ffa6 <_strtod_l+0xa86>
 801ff68:	4b6b      	ldr	r3, [pc, #428]	; (8020118 <_strtod_l+0xbf8>)
 801ff6a:	2200      	movs	r2, #0
 801ff6c:	4640      	mov	r0, r8
 801ff6e:	4649      	mov	r1, r9
 801ff70:	f7e0 fdb4 	bl	8000adc <__aeabi_dcmplt>
 801ff74:	b9d0      	cbnz	r0, 801ffac <_strtod_l+0xa8c>
 801ff76:	4640      	mov	r0, r8
 801ff78:	4649      	mov	r1, r9
 801ff7a:	4b6b      	ldr	r3, [pc, #428]	; (8020128 <_strtod_l+0xc08>)
 801ff7c:	2200      	movs	r2, #0
 801ff7e:	f7e0 fb3b 	bl	80005f8 <__aeabi_dmul>
 801ff82:	4680      	mov	r8, r0
 801ff84:	4689      	mov	r9, r1
 801ff86:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 801ff8a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 801ff8e:	931b      	str	r3, [sp, #108]	; 0x6c
 801ff90:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 801ff94:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 801ff98:	e79b      	b.n	801fed2 <_strtod_l+0x9b2>
 801ff9a:	f1ba 0f01 	cmp.w	sl, #1
 801ff9e:	d102      	bne.n	801ffa6 <_strtod_l+0xa86>
 801ffa0:	2f00      	cmp	r7, #0
 801ffa2:	f43f ad7e 	beq.w	801faa2 <_strtod_l+0x582>
 801ffa6:	4b61      	ldr	r3, [pc, #388]	; (802012c <_strtod_l+0xc0c>)
 801ffa8:	2200      	movs	r2, #0
 801ffaa:	e78c      	b.n	801fec6 <_strtod_l+0x9a6>
 801ffac:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8020128 <_strtod_l+0xc08>
 801ffb0:	f04f 0800 	mov.w	r8, #0
 801ffb4:	e7e7      	b.n	801ff86 <_strtod_l+0xa66>
 801ffb6:	4b5c      	ldr	r3, [pc, #368]	; (8020128 <_strtod_l+0xc08>)
 801ffb8:	4640      	mov	r0, r8
 801ffba:	4649      	mov	r1, r9
 801ffbc:	2200      	movs	r2, #0
 801ffbe:	f7e0 fb1b 	bl	80005f8 <__aeabi_dmul>
 801ffc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ffc4:	4680      	mov	r8, r0
 801ffc6:	4689      	mov	r9, r1
 801ffc8:	b933      	cbnz	r3, 801ffd8 <_strtod_l+0xab8>
 801ffca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801ffce:	9012      	str	r0, [sp, #72]	; 0x48
 801ffd0:	9313      	str	r3, [sp, #76]	; 0x4c
 801ffd2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 801ffd6:	e7dd      	b.n	801ff94 <_strtod_l+0xa74>
 801ffd8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 801ffdc:	e7f9      	b.n	801ffd2 <_strtod_l+0xab2>
 801ffde:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 801ffe2:	9b04      	ldr	r3, [sp, #16]
 801ffe4:	2b00      	cmp	r3, #0
 801ffe6:	d1a8      	bne.n	801ff3a <_strtod_l+0xa1a>
 801ffe8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801ffec:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ffee:	0d1b      	lsrs	r3, r3, #20
 801fff0:	051b      	lsls	r3, r3, #20
 801fff2:	429a      	cmp	r2, r3
 801fff4:	d1a1      	bne.n	801ff3a <_strtod_l+0xa1a>
 801fff6:	4640      	mov	r0, r8
 801fff8:	4649      	mov	r1, r9
 801fffa:	f7e0 fe5d 	bl	8000cb8 <__aeabi_d2lz>
 801fffe:	f7e0 facd 	bl	800059c <__aeabi_l2d>
 8020002:	4602      	mov	r2, r0
 8020004:	460b      	mov	r3, r1
 8020006:	4640      	mov	r0, r8
 8020008:	4649      	mov	r1, r9
 802000a:	f7e0 f93d 	bl	8000288 <__aeabi_dsub>
 802000e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020010:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8020014:	ea43 030a 	orr.w	r3, r3, sl
 8020018:	4313      	orrs	r3, r2
 802001a:	4680      	mov	r8, r0
 802001c:	4689      	mov	r9, r1
 802001e:	d053      	beq.n	80200c8 <_strtod_l+0xba8>
 8020020:	a335      	add	r3, pc, #212	; (adr r3, 80200f8 <_strtod_l+0xbd8>)
 8020022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020026:	f7e0 fd59 	bl	8000adc <__aeabi_dcmplt>
 802002a:	2800      	cmp	r0, #0
 802002c:	f47f acce 	bne.w	801f9cc <_strtod_l+0x4ac>
 8020030:	a333      	add	r3, pc, #204	; (adr r3, 8020100 <_strtod_l+0xbe0>)
 8020032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020036:	4640      	mov	r0, r8
 8020038:	4649      	mov	r1, r9
 802003a:	f7e0 fd6d 	bl	8000b18 <__aeabi_dcmpgt>
 802003e:	2800      	cmp	r0, #0
 8020040:	f43f af7b 	beq.w	801ff3a <_strtod_l+0xa1a>
 8020044:	e4c2      	b.n	801f9cc <_strtod_l+0x4ac>
 8020046:	9b04      	ldr	r3, [sp, #16]
 8020048:	b333      	cbz	r3, 8020098 <_strtod_l+0xb78>
 802004a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 802004c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8020050:	d822      	bhi.n	8020098 <_strtod_l+0xb78>
 8020052:	a32d      	add	r3, pc, #180	; (adr r3, 8020108 <_strtod_l+0xbe8>)
 8020054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020058:	4640      	mov	r0, r8
 802005a:	4649      	mov	r1, r9
 802005c:	f7e0 fd48 	bl	8000af0 <__aeabi_dcmple>
 8020060:	b1a0      	cbz	r0, 802008c <_strtod_l+0xb6c>
 8020062:	4649      	mov	r1, r9
 8020064:	4640      	mov	r0, r8
 8020066:	f7e0 fd9f 	bl	8000ba8 <__aeabi_d2uiz>
 802006a:	2801      	cmp	r0, #1
 802006c:	bf38      	it	cc
 802006e:	2001      	movcc	r0, #1
 8020070:	f7e0 fa48 	bl	8000504 <__aeabi_ui2d>
 8020074:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020076:	4680      	mov	r8, r0
 8020078:	4689      	mov	r9, r1
 802007a:	bb13      	cbnz	r3, 80200c2 <_strtod_l+0xba2>
 802007c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020080:	9014      	str	r0, [sp, #80]	; 0x50
 8020082:	9315      	str	r3, [sp, #84]	; 0x54
 8020084:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8020088:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 802008c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802008e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020090:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8020094:	1a9b      	subs	r3, r3, r2
 8020096:	930d      	str	r3, [sp, #52]	; 0x34
 8020098:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 802009c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80200a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80200a4:	f001 ff76 	bl	8021f94 <__ulp>
 80200a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80200ac:	ec53 2b10 	vmov	r2, r3, d0
 80200b0:	f7e0 faa2 	bl	80005f8 <__aeabi_dmul>
 80200b4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80200b8:	f7e0 f8e8 	bl	800028c <__adddf3>
 80200bc:	4682      	mov	sl, r0
 80200be:	468b      	mov	fp, r1
 80200c0:	e78f      	b.n	801ffe2 <_strtod_l+0xac2>
 80200c2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 80200c6:	e7dd      	b.n	8020084 <_strtod_l+0xb64>
 80200c8:	a311      	add	r3, pc, #68	; (adr r3, 8020110 <_strtod_l+0xbf0>)
 80200ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80200ce:	f7e0 fd05 	bl	8000adc <__aeabi_dcmplt>
 80200d2:	e7b4      	b.n	802003e <_strtod_l+0xb1e>
 80200d4:	2300      	movs	r3, #0
 80200d6:	930e      	str	r3, [sp, #56]	; 0x38
 80200d8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80200da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80200dc:	6013      	str	r3, [r2, #0]
 80200de:	f7ff ba65 	b.w	801f5ac <_strtod_l+0x8c>
 80200e2:	2b65      	cmp	r3, #101	; 0x65
 80200e4:	f43f ab5d 	beq.w	801f7a2 <_strtod_l+0x282>
 80200e8:	2b45      	cmp	r3, #69	; 0x45
 80200ea:	f43f ab5a 	beq.w	801f7a2 <_strtod_l+0x282>
 80200ee:	2201      	movs	r2, #1
 80200f0:	f7ff bb92 	b.w	801f818 <_strtod_l+0x2f8>
 80200f4:	f3af 8000 	nop.w
 80200f8:	94a03595 	.word	0x94a03595
 80200fc:	3fdfffff 	.word	0x3fdfffff
 8020100:	35afe535 	.word	0x35afe535
 8020104:	3fe00000 	.word	0x3fe00000
 8020108:	ffc00000 	.word	0xffc00000
 802010c:	41dfffff 	.word	0x41dfffff
 8020110:	94a03595 	.word	0x94a03595
 8020114:	3fcfffff 	.word	0x3fcfffff
 8020118:	3ff00000 	.word	0x3ff00000
 802011c:	7ff00000 	.word	0x7ff00000
 8020120:	7fe00000 	.word	0x7fe00000
 8020124:	7c9fffff 	.word	0x7c9fffff
 8020128:	3fe00000 	.word	0x3fe00000
 802012c:	bff00000 	.word	0xbff00000
 8020130:	7fefffff 	.word	0x7fefffff

08020134 <_strtod_r>:
 8020134:	4b01      	ldr	r3, [pc, #4]	; (802013c <_strtod_r+0x8>)
 8020136:	f7ff b9f3 	b.w	801f520 <_strtod_l>
 802013a:	bf00      	nop
 802013c:	20000420 	.word	0x20000420

08020140 <_strtol_l.isra.0>:
 8020140:	2b01      	cmp	r3, #1
 8020142:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020146:	d001      	beq.n	802014c <_strtol_l.isra.0+0xc>
 8020148:	2b24      	cmp	r3, #36	; 0x24
 802014a:	d906      	bls.n	802015a <_strtol_l.isra.0+0x1a>
 802014c:	f000 ff38 	bl	8020fc0 <__errno>
 8020150:	2316      	movs	r3, #22
 8020152:	6003      	str	r3, [r0, #0]
 8020154:	2000      	movs	r0, #0
 8020156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802015a:	4f3a      	ldr	r7, [pc, #232]	; (8020244 <_strtol_l.isra.0+0x104>)
 802015c:	468e      	mov	lr, r1
 802015e:	4676      	mov	r6, lr
 8020160:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8020164:	5de5      	ldrb	r5, [r4, r7]
 8020166:	f015 0508 	ands.w	r5, r5, #8
 802016a:	d1f8      	bne.n	802015e <_strtol_l.isra.0+0x1e>
 802016c:	2c2d      	cmp	r4, #45	; 0x2d
 802016e:	d134      	bne.n	80201da <_strtol_l.isra.0+0x9a>
 8020170:	f89e 4000 	ldrb.w	r4, [lr]
 8020174:	f04f 0801 	mov.w	r8, #1
 8020178:	f106 0e02 	add.w	lr, r6, #2
 802017c:	2b00      	cmp	r3, #0
 802017e:	d05c      	beq.n	802023a <_strtol_l.isra.0+0xfa>
 8020180:	2b10      	cmp	r3, #16
 8020182:	d10c      	bne.n	802019e <_strtol_l.isra.0+0x5e>
 8020184:	2c30      	cmp	r4, #48	; 0x30
 8020186:	d10a      	bne.n	802019e <_strtol_l.isra.0+0x5e>
 8020188:	f89e 4000 	ldrb.w	r4, [lr]
 802018c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8020190:	2c58      	cmp	r4, #88	; 0x58
 8020192:	d14d      	bne.n	8020230 <_strtol_l.isra.0+0xf0>
 8020194:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8020198:	2310      	movs	r3, #16
 802019a:	f10e 0e02 	add.w	lr, lr, #2
 802019e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80201a2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80201a6:	2600      	movs	r6, #0
 80201a8:	fbbc f9f3 	udiv	r9, ip, r3
 80201ac:	4635      	mov	r5, r6
 80201ae:	fb03 ca19 	mls	sl, r3, r9, ip
 80201b2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80201b6:	2f09      	cmp	r7, #9
 80201b8:	d818      	bhi.n	80201ec <_strtol_l.isra.0+0xac>
 80201ba:	463c      	mov	r4, r7
 80201bc:	42a3      	cmp	r3, r4
 80201be:	dd24      	ble.n	802020a <_strtol_l.isra.0+0xca>
 80201c0:	2e00      	cmp	r6, #0
 80201c2:	db1f      	blt.n	8020204 <_strtol_l.isra.0+0xc4>
 80201c4:	45a9      	cmp	r9, r5
 80201c6:	d31d      	bcc.n	8020204 <_strtol_l.isra.0+0xc4>
 80201c8:	d101      	bne.n	80201ce <_strtol_l.isra.0+0x8e>
 80201ca:	45a2      	cmp	sl, r4
 80201cc:	db1a      	blt.n	8020204 <_strtol_l.isra.0+0xc4>
 80201ce:	fb05 4503 	mla	r5, r5, r3, r4
 80201d2:	2601      	movs	r6, #1
 80201d4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80201d8:	e7eb      	b.n	80201b2 <_strtol_l.isra.0+0x72>
 80201da:	2c2b      	cmp	r4, #43	; 0x2b
 80201dc:	bf08      	it	eq
 80201de:	f89e 4000 	ldrbeq.w	r4, [lr]
 80201e2:	46a8      	mov	r8, r5
 80201e4:	bf08      	it	eq
 80201e6:	f106 0e02 	addeq.w	lr, r6, #2
 80201ea:	e7c7      	b.n	802017c <_strtol_l.isra.0+0x3c>
 80201ec:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80201f0:	2f19      	cmp	r7, #25
 80201f2:	d801      	bhi.n	80201f8 <_strtol_l.isra.0+0xb8>
 80201f4:	3c37      	subs	r4, #55	; 0x37
 80201f6:	e7e1      	b.n	80201bc <_strtol_l.isra.0+0x7c>
 80201f8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80201fc:	2f19      	cmp	r7, #25
 80201fe:	d804      	bhi.n	802020a <_strtol_l.isra.0+0xca>
 8020200:	3c57      	subs	r4, #87	; 0x57
 8020202:	e7db      	b.n	80201bc <_strtol_l.isra.0+0x7c>
 8020204:	f04f 36ff 	mov.w	r6, #4294967295
 8020208:	e7e4      	b.n	80201d4 <_strtol_l.isra.0+0x94>
 802020a:	2e00      	cmp	r6, #0
 802020c:	da05      	bge.n	802021a <_strtol_l.isra.0+0xda>
 802020e:	2322      	movs	r3, #34	; 0x22
 8020210:	6003      	str	r3, [r0, #0]
 8020212:	4665      	mov	r5, ip
 8020214:	b942      	cbnz	r2, 8020228 <_strtol_l.isra.0+0xe8>
 8020216:	4628      	mov	r0, r5
 8020218:	e79d      	b.n	8020156 <_strtol_l.isra.0+0x16>
 802021a:	f1b8 0f00 	cmp.w	r8, #0
 802021e:	d000      	beq.n	8020222 <_strtol_l.isra.0+0xe2>
 8020220:	426d      	negs	r5, r5
 8020222:	2a00      	cmp	r2, #0
 8020224:	d0f7      	beq.n	8020216 <_strtol_l.isra.0+0xd6>
 8020226:	b10e      	cbz	r6, 802022c <_strtol_l.isra.0+0xec>
 8020228:	f10e 31ff 	add.w	r1, lr, #4294967295
 802022c:	6011      	str	r1, [r2, #0]
 802022e:	e7f2      	b.n	8020216 <_strtol_l.isra.0+0xd6>
 8020230:	2430      	movs	r4, #48	; 0x30
 8020232:	2b00      	cmp	r3, #0
 8020234:	d1b3      	bne.n	802019e <_strtol_l.isra.0+0x5e>
 8020236:	2308      	movs	r3, #8
 8020238:	e7b1      	b.n	802019e <_strtol_l.isra.0+0x5e>
 802023a:	2c30      	cmp	r4, #48	; 0x30
 802023c:	d0a4      	beq.n	8020188 <_strtol_l.isra.0+0x48>
 802023e:	230a      	movs	r3, #10
 8020240:	e7ad      	b.n	802019e <_strtol_l.isra.0+0x5e>
 8020242:	bf00      	nop
 8020244:	08026f3d 	.word	0x08026f3d

08020248 <_strtol_r>:
 8020248:	f7ff bf7a 	b.w	8020140 <_strtol_l.isra.0>

0802024c <_write_r>:
 802024c:	b538      	push	{r3, r4, r5, lr}
 802024e:	4d07      	ldr	r5, [pc, #28]	; (802026c <_write_r+0x20>)
 8020250:	4604      	mov	r4, r0
 8020252:	4608      	mov	r0, r1
 8020254:	4611      	mov	r1, r2
 8020256:	2200      	movs	r2, #0
 8020258:	602a      	str	r2, [r5, #0]
 802025a:	461a      	mov	r2, r3
 802025c:	f7e6 faaf 	bl	80067be <_write>
 8020260:	1c43      	adds	r3, r0, #1
 8020262:	d102      	bne.n	802026a <_write_r+0x1e>
 8020264:	682b      	ldr	r3, [r5, #0]
 8020266:	b103      	cbz	r3, 802026a <_write_r+0x1e>
 8020268:	6023      	str	r3, [r4, #0]
 802026a:	bd38      	pop	{r3, r4, r5, pc}
 802026c:	2000e190 	.word	0x2000e190

08020270 <__assert_func>:
 8020270:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8020272:	4614      	mov	r4, r2
 8020274:	461a      	mov	r2, r3
 8020276:	4b09      	ldr	r3, [pc, #36]	; (802029c <__assert_func+0x2c>)
 8020278:	681b      	ldr	r3, [r3, #0]
 802027a:	4605      	mov	r5, r0
 802027c:	68d8      	ldr	r0, [r3, #12]
 802027e:	b14c      	cbz	r4, 8020294 <__assert_func+0x24>
 8020280:	4b07      	ldr	r3, [pc, #28]	; (80202a0 <__assert_func+0x30>)
 8020282:	9100      	str	r1, [sp, #0]
 8020284:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020288:	4906      	ldr	r1, [pc, #24]	; (80202a4 <__assert_func+0x34>)
 802028a:	462b      	mov	r3, r5
 802028c:	f000 ff60 	bl	8021150 <fiprintf>
 8020290:	f002 ff8e 	bl	80231b0 <abort>
 8020294:	4b04      	ldr	r3, [pc, #16]	; (80202a8 <__assert_func+0x38>)
 8020296:	461c      	mov	r4, r3
 8020298:	e7f3      	b.n	8020282 <__assert_func+0x12>
 802029a:	bf00      	nop
 802029c:	200003b8 	.word	0x200003b8
 80202a0:	080271a8 	.word	0x080271a8
 80202a4:	080271b5 	.word	0x080271b5
 80202a8:	080271e3 	.word	0x080271e3

080202ac <_close_r>:
 80202ac:	b538      	push	{r3, r4, r5, lr}
 80202ae:	4d06      	ldr	r5, [pc, #24]	; (80202c8 <_close_r+0x1c>)
 80202b0:	2300      	movs	r3, #0
 80202b2:	4604      	mov	r4, r0
 80202b4:	4608      	mov	r0, r1
 80202b6:	602b      	str	r3, [r5, #0]
 80202b8:	f7e6 fa9d 	bl	80067f6 <_close>
 80202bc:	1c43      	adds	r3, r0, #1
 80202be:	d102      	bne.n	80202c6 <_close_r+0x1a>
 80202c0:	682b      	ldr	r3, [r5, #0]
 80202c2:	b103      	cbz	r3, 80202c6 <_close_r+0x1a>
 80202c4:	6023      	str	r3, [r4, #0]
 80202c6:	bd38      	pop	{r3, r4, r5, pc}
 80202c8:	2000e190 	.word	0x2000e190

080202cc <quorem>:
 80202cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80202d0:	6903      	ldr	r3, [r0, #16]
 80202d2:	690c      	ldr	r4, [r1, #16]
 80202d4:	42a3      	cmp	r3, r4
 80202d6:	4607      	mov	r7, r0
 80202d8:	f2c0 8081 	blt.w	80203de <quorem+0x112>
 80202dc:	3c01      	subs	r4, #1
 80202de:	f101 0814 	add.w	r8, r1, #20
 80202e2:	f100 0514 	add.w	r5, r0, #20
 80202e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80202ea:	9301      	str	r3, [sp, #4]
 80202ec:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80202f0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80202f4:	3301      	adds	r3, #1
 80202f6:	429a      	cmp	r2, r3
 80202f8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80202fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8020300:	fbb2 f6f3 	udiv	r6, r2, r3
 8020304:	d331      	bcc.n	802036a <quorem+0x9e>
 8020306:	f04f 0e00 	mov.w	lr, #0
 802030a:	4640      	mov	r0, r8
 802030c:	46ac      	mov	ip, r5
 802030e:	46f2      	mov	sl, lr
 8020310:	f850 2b04 	ldr.w	r2, [r0], #4
 8020314:	b293      	uxth	r3, r2
 8020316:	fb06 e303 	mla	r3, r6, r3, lr
 802031a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 802031e:	b29b      	uxth	r3, r3
 8020320:	ebaa 0303 	sub.w	r3, sl, r3
 8020324:	0c12      	lsrs	r2, r2, #16
 8020326:	f8dc a000 	ldr.w	sl, [ip]
 802032a:	fb06 e202 	mla	r2, r6, r2, lr
 802032e:	fa13 f38a 	uxtah	r3, r3, sl
 8020332:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8020336:	fa1f fa82 	uxth.w	sl, r2
 802033a:	f8dc 2000 	ldr.w	r2, [ip]
 802033e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8020342:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020346:	b29b      	uxth	r3, r3
 8020348:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802034c:	4581      	cmp	r9, r0
 802034e:	f84c 3b04 	str.w	r3, [ip], #4
 8020352:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8020356:	d2db      	bcs.n	8020310 <quorem+0x44>
 8020358:	f855 300b 	ldr.w	r3, [r5, fp]
 802035c:	b92b      	cbnz	r3, 802036a <quorem+0x9e>
 802035e:	9b01      	ldr	r3, [sp, #4]
 8020360:	3b04      	subs	r3, #4
 8020362:	429d      	cmp	r5, r3
 8020364:	461a      	mov	r2, r3
 8020366:	d32e      	bcc.n	80203c6 <quorem+0xfa>
 8020368:	613c      	str	r4, [r7, #16]
 802036a:	4638      	mov	r0, r7
 802036c:	f001 fd6e 	bl	8021e4c <__mcmp>
 8020370:	2800      	cmp	r0, #0
 8020372:	db24      	blt.n	80203be <quorem+0xf2>
 8020374:	3601      	adds	r6, #1
 8020376:	4628      	mov	r0, r5
 8020378:	f04f 0c00 	mov.w	ip, #0
 802037c:	f858 2b04 	ldr.w	r2, [r8], #4
 8020380:	f8d0 e000 	ldr.w	lr, [r0]
 8020384:	b293      	uxth	r3, r2
 8020386:	ebac 0303 	sub.w	r3, ip, r3
 802038a:	0c12      	lsrs	r2, r2, #16
 802038c:	fa13 f38e 	uxtah	r3, r3, lr
 8020390:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8020394:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8020398:	b29b      	uxth	r3, r3
 802039a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 802039e:	45c1      	cmp	r9, r8
 80203a0:	f840 3b04 	str.w	r3, [r0], #4
 80203a4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80203a8:	d2e8      	bcs.n	802037c <quorem+0xb0>
 80203aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80203ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80203b2:	b922      	cbnz	r2, 80203be <quorem+0xf2>
 80203b4:	3b04      	subs	r3, #4
 80203b6:	429d      	cmp	r5, r3
 80203b8:	461a      	mov	r2, r3
 80203ba:	d30a      	bcc.n	80203d2 <quorem+0x106>
 80203bc:	613c      	str	r4, [r7, #16]
 80203be:	4630      	mov	r0, r6
 80203c0:	b003      	add	sp, #12
 80203c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80203c6:	6812      	ldr	r2, [r2, #0]
 80203c8:	3b04      	subs	r3, #4
 80203ca:	2a00      	cmp	r2, #0
 80203cc:	d1cc      	bne.n	8020368 <quorem+0x9c>
 80203ce:	3c01      	subs	r4, #1
 80203d0:	e7c7      	b.n	8020362 <quorem+0x96>
 80203d2:	6812      	ldr	r2, [r2, #0]
 80203d4:	3b04      	subs	r3, #4
 80203d6:	2a00      	cmp	r2, #0
 80203d8:	d1f0      	bne.n	80203bc <quorem+0xf0>
 80203da:	3c01      	subs	r4, #1
 80203dc:	e7eb      	b.n	80203b6 <quorem+0xea>
 80203de:	2000      	movs	r0, #0
 80203e0:	e7ee      	b.n	80203c0 <quorem+0xf4>
 80203e2:	0000      	movs	r0, r0
 80203e4:	0000      	movs	r0, r0
	...

080203e8 <_dtoa_r>:
 80203e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80203ec:	ed2d 8b02 	vpush	{d8}
 80203f0:	ec57 6b10 	vmov	r6, r7, d0
 80203f4:	b095      	sub	sp, #84	; 0x54
 80203f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80203f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80203fc:	9105      	str	r1, [sp, #20]
 80203fe:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8020402:	4604      	mov	r4, r0
 8020404:	9209      	str	r2, [sp, #36]	; 0x24
 8020406:	930f      	str	r3, [sp, #60]	; 0x3c
 8020408:	b975      	cbnz	r5, 8020428 <_dtoa_r+0x40>
 802040a:	2010      	movs	r0, #16
 802040c:	f7fd ff64 	bl	801e2d8 <malloc>
 8020410:	4602      	mov	r2, r0
 8020412:	6260      	str	r0, [r4, #36]	; 0x24
 8020414:	b920      	cbnz	r0, 8020420 <_dtoa_r+0x38>
 8020416:	4bb2      	ldr	r3, [pc, #712]	; (80206e0 <_dtoa_r+0x2f8>)
 8020418:	21ea      	movs	r1, #234	; 0xea
 802041a:	48b2      	ldr	r0, [pc, #712]	; (80206e4 <_dtoa_r+0x2fc>)
 802041c:	f7ff ff28 	bl	8020270 <__assert_func>
 8020420:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8020424:	6005      	str	r5, [r0, #0]
 8020426:	60c5      	str	r5, [r0, #12]
 8020428:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802042a:	6819      	ldr	r1, [r3, #0]
 802042c:	b151      	cbz	r1, 8020444 <_dtoa_r+0x5c>
 802042e:	685a      	ldr	r2, [r3, #4]
 8020430:	604a      	str	r2, [r1, #4]
 8020432:	2301      	movs	r3, #1
 8020434:	4093      	lsls	r3, r2
 8020436:	608b      	str	r3, [r1, #8]
 8020438:	4620      	mov	r0, r4
 802043a:	f001 fa7f 	bl	802193c <_Bfree>
 802043e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020440:	2200      	movs	r2, #0
 8020442:	601a      	str	r2, [r3, #0]
 8020444:	1e3b      	subs	r3, r7, #0
 8020446:	bfb9      	ittee	lt
 8020448:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 802044c:	9303      	strlt	r3, [sp, #12]
 802044e:	2300      	movge	r3, #0
 8020450:	f8c8 3000 	strge.w	r3, [r8]
 8020454:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8020458:	4ba3      	ldr	r3, [pc, #652]	; (80206e8 <_dtoa_r+0x300>)
 802045a:	bfbc      	itt	lt
 802045c:	2201      	movlt	r2, #1
 802045e:	f8c8 2000 	strlt.w	r2, [r8]
 8020462:	ea33 0309 	bics.w	r3, r3, r9
 8020466:	d11b      	bne.n	80204a0 <_dtoa_r+0xb8>
 8020468:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802046a:	f242 730f 	movw	r3, #9999	; 0x270f
 802046e:	6013      	str	r3, [r2, #0]
 8020470:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8020474:	4333      	orrs	r3, r6
 8020476:	f000 857a 	beq.w	8020f6e <_dtoa_r+0xb86>
 802047a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 802047c:	b963      	cbnz	r3, 8020498 <_dtoa_r+0xb0>
 802047e:	4b9b      	ldr	r3, [pc, #620]	; (80206ec <_dtoa_r+0x304>)
 8020480:	e024      	b.n	80204cc <_dtoa_r+0xe4>
 8020482:	4b9b      	ldr	r3, [pc, #620]	; (80206f0 <_dtoa_r+0x308>)
 8020484:	9300      	str	r3, [sp, #0]
 8020486:	3308      	adds	r3, #8
 8020488:	9a21      	ldr	r2, [sp, #132]	; 0x84
 802048a:	6013      	str	r3, [r2, #0]
 802048c:	9800      	ldr	r0, [sp, #0]
 802048e:	b015      	add	sp, #84	; 0x54
 8020490:	ecbd 8b02 	vpop	{d8}
 8020494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020498:	4b94      	ldr	r3, [pc, #592]	; (80206ec <_dtoa_r+0x304>)
 802049a:	9300      	str	r3, [sp, #0]
 802049c:	3303      	adds	r3, #3
 802049e:	e7f3      	b.n	8020488 <_dtoa_r+0xa0>
 80204a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80204a4:	2200      	movs	r2, #0
 80204a6:	ec51 0b17 	vmov	r0, r1, d7
 80204aa:	2300      	movs	r3, #0
 80204ac:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80204b0:	f7e0 fb0a 	bl	8000ac8 <__aeabi_dcmpeq>
 80204b4:	4680      	mov	r8, r0
 80204b6:	b158      	cbz	r0, 80204d0 <_dtoa_r+0xe8>
 80204b8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80204ba:	2301      	movs	r3, #1
 80204bc:	6013      	str	r3, [r2, #0]
 80204be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80204c0:	2b00      	cmp	r3, #0
 80204c2:	f000 8551 	beq.w	8020f68 <_dtoa_r+0xb80>
 80204c6:	488b      	ldr	r0, [pc, #556]	; (80206f4 <_dtoa_r+0x30c>)
 80204c8:	6018      	str	r0, [r3, #0]
 80204ca:	1e43      	subs	r3, r0, #1
 80204cc:	9300      	str	r3, [sp, #0]
 80204ce:	e7dd      	b.n	802048c <_dtoa_r+0xa4>
 80204d0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80204d4:	aa12      	add	r2, sp, #72	; 0x48
 80204d6:	a913      	add	r1, sp, #76	; 0x4c
 80204d8:	4620      	mov	r0, r4
 80204da:	f001 fdd7 	bl	802208c <__d2b>
 80204de:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80204e2:	4683      	mov	fp, r0
 80204e4:	2d00      	cmp	r5, #0
 80204e6:	d07c      	beq.n	80205e2 <_dtoa_r+0x1fa>
 80204e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80204ea:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80204ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80204f2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80204f6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80204fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80204fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8020502:	4b7d      	ldr	r3, [pc, #500]	; (80206f8 <_dtoa_r+0x310>)
 8020504:	2200      	movs	r2, #0
 8020506:	4630      	mov	r0, r6
 8020508:	4639      	mov	r1, r7
 802050a:	f7df febd 	bl	8000288 <__aeabi_dsub>
 802050e:	a36e      	add	r3, pc, #440	; (adr r3, 80206c8 <_dtoa_r+0x2e0>)
 8020510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020514:	f7e0 f870 	bl	80005f8 <__aeabi_dmul>
 8020518:	a36d      	add	r3, pc, #436	; (adr r3, 80206d0 <_dtoa_r+0x2e8>)
 802051a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802051e:	f7df feb5 	bl	800028c <__adddf3>
 8020522:	4606      	mov	r6, r0
 8020524:	4628      	mov	r0, r5
 8020526:	460f      	mov	r7, r1
 8020528:	f7df fffc 	bl	8000524 <__aeabi_i2d>
 802052c:	a36a      	add	r3, pc, #424	; (adr r3, 80206d8 <_dtoa_r+0x2f0>)
 802052e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8020532:	f7e0 f861 	bl	80005f8 <__aeabi_dmul>
 8020536:	4602      	mov	r2, r0
 8020538:	460b      	mov	r3, r1
 802053a:	4630      	mov	r0, r6
 802053c:	4639      	mov	r1, r7
 802053e:	f7df fea5 	bl	800028c <__adddf3>
 8020542:	4606      	mov	r6, r0
 8020544:	460f      	mov	r7, r1
 8020546:	f7e0 fb07 	bl	8000b58 <__aeabi_d2iz>
 802054a:	2200      	movs	r2, #0
 802054c:	4682      	mov	sl, r0
 802054e:	2300      	movs	r3, #0
 8020550:	4630      	mov	r0, r6
 8020552:	4639      	mov	r1, r7
 8020554:	f7e0 fac2 	bl	8000adc <__aeabi_dcmplt>
 8020558:	b148      	cbz	r0, 802056e <_dtoa_r+0x186>
 802055a:	4650      	mov	r0, sl
 802055c:	f7df ffe2 	bl	8000524 <__aeabi_i2d>
 8020560:	4632      	mov	r2, r6
 8020562:	463b      	mov	r3, r7
 8020564:	f7e0 fab0 	bl	8000ac8 <__aeabi_dcmpeq>
 8020568:	b908      	cbnz	r0, 802056e <_dtoa_r+0x186>
 802056a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802056e:	f1ba 0f16 	cmp.w	sl, #22
 8020572:	d854      	bhi.n	802061e <_dtoa_r+0x236>
 8020574:	4b61      	ldr	r3, [pc, #388]	; (80206fc <_dtoa_r+0x314>)
 8020576:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 802057a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802057e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8020582:	f7e0 faab 	bl	8000adc <__aeabi_dcmplt>
 8020586:	2800      	cmp	r0, #0
 8020588:	d04b      	beq.n	8020622 <_dtoa_r+0x23a>
 802058a:	f10a 3aff 	add.w	sl, sl, #4294967295
 802058e:	2300      	movs	r3, #0
 8020590:	930e      	str	r3, [sp, #56]	; 0x38
 8020592:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020594:	1b5d      	subs	r5, r3, r5
 8020596:	1e6b      	subs	r3, r5, #1
 8020598:	9304      	str	r3, [sp, #16]
 802059a:	bf43      	ittte	mi
 802059c:	2300      	movmi	r3, #0
 802059e:	f1c5 0801 	rsbmi	r8, r5, #1
 80205a2:	9304      	strmi	r3, [sp, #16]
 80205a4:	f04f 0800 	movpl.w	r8, #0
 80205a8:	f1ba 0f00 	cmp.w	sl, #0
 80205ac:	db3b      	blt.n	8020626 <_dtoa_r+0x23e>
 80205ae:	9b04      	ldr	r3, [sp, #16]
 80205b0:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 80205b4:	4453      	add	r3, sl
 80205b6:	9304      	str	r3, [sp, #16]
 80205b8:	2300      	movs	r3, #0
 80205ba:	9306      	str	r3, [sp, #24]
 80205bc:	9b05      	ldr	r3, [sp, #20]
 80205be:	2b09      	cmp	r3, #9
 80205c0:	d869      	bhi.n	8020696 <_dtoa_r+0x2ae>
 80205c2:	2b05      	cmp	r3, #5
 80205c4:	bfc4      	itt	gt
 80205c6:	3b04      	subgt	r3, #4
 80205c8:	9305      	strgt	r3, [sp, #20]
 80205ca:	9b05      	ldr	r3, [sp, #20]
 80205cc:	f1a3 0302 	sub.w	r3, r3, #2
 80205d0:	bfcc      	ite	gt
 80205d2:	2500      	movgt	r5, #0
 80205d4:	2501      	movle	r5, #1
 80205d6:	2b03      	cmp	r3, #3
 80205d8:	d869      	bhi.n	80206ae <_dtoa_r+0x2c6>
 80205da:	e8df f003 	tbb	[pc, r3]
 80205de:	4e2c      	.short	0x4e2c
 80205e0:	5a4c      	.short	0x5a4c
 80205e2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80205e6:	441d      	add	r5, r3
 80205e8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80205ec:	2b20      	cmp	r3, #32
 80205ee:	bfc1      	itttt	gt
 80205f0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80205f4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80205f8:	fa09 f303 	lslgt.w	r3, r9, r3
 80205fc:	fa26 f000 	lsrgt.w	r0, r6, r0
 8020600:	bfda      	itte	le
 8020602:	f1c3 0320 	rsble	r3, r3, #32
 8020606:	fa06 f003 	lslle.w	r0, r6, r3
 802060a:	4318      	orrgt	r0, r3
 802060c:	f7df ff7a 	bl	8000504 <__aeabi_ui2d>
 8020610:	2301      	movs	r3, #1
 8020612:	4606      	mov	r6, r0
 8020614:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8020618:	3d01      	subs	r5, #1
 802061a:	9310      	str	r3, [sp, #64]	; 0x40
 802061c:	e771      	b.n	8020502 <_dtoa_r+0x11a>
 802061e:	2301      	movs	r3, #1
 8020620:	e7b6      	b.n	8020590 <_dtoa_r+0x1a8>
 8020622:	900e      	str	r0, [sp, #56]	; 0x38
 8020624:	e7b5      	b.n	8020592 <_dtoa_r+0x1aa>
 8020626:	f1ca 0300 	rsb	r3, sl, #0
 802062a:	9306      	str	r3, [sp, #24]
 802062c:	2300      	movs	r3, #0
 802062e:	eba8 080a 	sub.w	r8, r8, sl
 8020632:	930d      	str	r3, [sp, #52]	; 0x34
 8020634:	e7c2      	b.n	80205bc <_dtoa_r+0x1d4>
 8020636:	2300      	movs	r3, #0
 8020638:	9308      	str	r3, [sp, #32]
 802063a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802063c:	2b00      	cmp	r3, #0
 802063e:	dc39      	bgt.n	80206b4 <_dtoa_r+0x2cc>
 8020640:	f04f 0901 	mov.w	r9, #1
 8020644:	f8cd 9004 	str.w	r9, [sp, #4]
 8020648:	464b      	mov	r3, r9
 802064a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 802064e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8020650:	2200      	movs	r2, #0
 8020652:	6042      	str	r2, [r0, #4]
 8020654:	2204      	movs	r2, #4
 8020656:	f102 0614 	add.w	r6, r2, #20
 802065a:	429e      	cmp	r6, r3
 802065c:	6841      	ldr	r1, [r0, #4]
 802065e:	d92f      	bls.n	80206c0 <_dtoa_r+0x2d8>
 8020660:	4620      	mov	r0, r4
 8020662:	f001 f92b 	bl	80218bc <_Balloc>
 8020666:	9000      	str	r0, [sp, #0]
 8020668:	2800      	cmp	r0, #0
 802066a:	d14b      	bne.n	8020704 <_dtoa_r+0x31c>
 802066c:	4b24      	ldr	r3, [pc, #144]	; (8020700 <_dtoa_r+0x318>)
 802066e:	4602      	mov	r2, r0
 8020670:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8020674:	e6d1      	b.n	802041a <_dtoa_r+0x32>
 8020676:	2301      	movs	r3, #1
 8020678:	e7de      	b.n	8020638 <_dtoa_r+0x250>
 802067a:	2300      	movs	r3, #0
 802067c:	9308      	str	r3, [sp, #32]
 802067e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020680:	eb0a 0903 	add.w	r9, sl, r3
 8020684:	f109 0301 	add.w	r3, r9, #1
 8020688:	2b01      	cmp	r3, #1
 802068a:	9301      	str	r3, [sp, #4]
 802068c:	bfb8      	it	lt
 802068e:	2301      	movlt	r3, #1
 8020690:	e7dd      	b.n	802064e <_dtoa_r+0x266>
 8020692:	2301      	movs	r3, #1
 8020694:	e7f2      	b.n	802067c <_dtoa_r+0x294>
 8020696:	2501      	movs	r5, #1
 8020698:	2300      	movs	r3, #0
 802069a:	9305      	str	r3, [sp, #20]
 802069c:	9508      	str	r5, [sp, #32]
 802069e:	f04f 39ff 	mov.w	r9, #4294967295
 80206a2:	2200      	movs	r2, #0
 80206a4:	f8cd 9004 	str.w	r9, [sp, #4]
 80206a8:	2312      	movs	r3, #18
 80206aa:	9209      	str	r2, [sp, #36]	; 0x24
 80206ac:	e7cf      	b.n	802064e <_dtoa_r+0x266>
 80206ae:	2301      	movs	r3, #1
 80206b0:	9308      	str	r3, [sp, #32]
 80206b2:	e7f4      	b.n	802069e <_dtoa_r+0x2b6>
 80206b4:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80206b8:	f8cd 9004 	str.w	r9, [sp, #4]
 80206bc:	464b      	mov	r3, r9
 80206be:	e7c6      	b.n	802064e <_dtoa_r+0x266>
 80206c0:	3101      	adds	r1, #1
 80206c2:	6041      	str	r1, [r0, #4]
 80206c4:	0052      	lsls	r2, r2, #1
 80206c6:	e7c6      	b.n	8020656 <_dtoa_r+0x26e>
 80206c8:	636f4361 	.word	0x636f4361
 80206cc:	3fd287a7 	.word	0x3fd287a7
 80206d0:	8b60c8b3 	.word	0x8b60c8b3
 80206d4:	3fc68a28 	.word	0x3fc68a28
 80206d8:	509f79fb 	.word	0x509f79fb
 80206dc:	3fd34413 	.word	0x3fd34413
 80206e0:	080270db 	.word	0x080270db
 80206e4:	080271f1 	.word	0x080271f1
 80206e8:	7ff00000 	.word	0x7ff00000
 80206ec:	080271ed 	.word	0x080271ed
 80206f0:	080271e4 	.word	0x080271e4
 80206f4:	08027452 	.word	0x08027452
 80206f8:	3ff80000 	.word	0x3ff80000
 80206fc:	08027368 	.word	0x08027368
 8020700:	08027250 	.word	0x08027250
 8020704:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8020706:	9a00      	ldr	r2, [sp, #0]
 8020708:	601a      	str	r2, [r3, #0]
 802070a:	9b01      	ldr	r3, [sp, #4]
 802070c:	2b0e      	cmp	r3, #14
 802070e:	f200 80ad 	bhi.w	802086c <_dtoa_r+0x484>
 8020712:	2d00      	cmp	r5, #0
 8020714:	f000 80aa 	beq.w	802086c <_dtoa_r+0x484>
 8020718:	f1ba 0f00 	cmp.w	sl, #0
 802071c:	dd36      	ble.n	802078c <_dtoa_r+0x3a4>
 802071e:	4ac3      	ldr	r2, [pc, #780]	; (8020a2c <_dtoa_r+0x644>)
 8020720:	f00a 030f 	and.w	r3, sl, #15
 8020724:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8020728:	ed93 7b00 	vldr	d7, [r3]
 802072c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8020730:	ea4f 172a 	mov.w	r7, sl, asr #4
 8020734:	eeb0 8a47 	vmov.f32	s16, s14
 8020738:	eef0 8a67 	vmov.f32	s17, s15
 802073c:	d016      	beq.n	802076c <_dtoa_r+0x384>
 802073e:	4bbc      	ldr	r3, [pc, #752]	; (8020a30 <_dtoa_r+0x648>)
 8020740:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8020744:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8020748:	f7e0 f880 	bl	800084c <__aeabi_ddiv>
 802074c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020750:	f007 070f 	and.w	r7, r7, #15
 8020754:	2503      	movs	r5, #3
 8020756:	4eb6      	ldr	r6, [pc, #728]	; (8020a30 <_dtoa_r+0x648>)
 8020758:	b957      	cbnz	r7, 8020770 <_dtoa_r+0x388>
 802075a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 802075e:	ec53 2b18 	vmov	r2, r3, d8
 8020762:	f7e0 f873 	bl	800084c <__aeabi_ddiv>
 8020766:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802076a:	e029      	b.n	80207c0 <_dtoa_r+0x3d8>
 802076c:	2502      	movs	r5, #2
 802076e:	e7f2      	b.n	8020756 <_dtoa_r+0x36e>
 8020770:	07f9      	lsls	r1, r7, #31
 8020772:	d508      	bpl.n	8020786 <_dtoa_r+0x39e>
 8020774:	ec51 0b18 	vmov	r0, r1, d8
 8020778:	e9d6 2300 	ldrd	r2, r3, [r6]
 802077c:	f7df ff3c 	bl	80005f8 <__aeabi_dmul>
 8020780:	ec41 0b18 	vmov	d8, r0, r1
 8020784:	3501      	adds	r5, #1
 8020786:	107f      	asrs	r7, r7, #1
 8020788:	3608      	adds	r6, #8
 802078a:	e7e5      	b.n	8020758 <_dtoa_r+0x370>
 802078c:	f000 80a6 	beq.w	80208dc <_dtoa_r+0x4f4>
 8020790:	f1ca 0600 	rsb	r6, sl, #0
 8020794:	4ba5      	ldr	r3, [pc, #660]	; (8020a2c <_dtoa_r+0x644>)
 8020796:	4fa6      	ldr	r7, [pc, #664]	; (8020a30 <_dtoa_r+0x648>)
 8020798:	f006 020f 	and.w	r2, r6, #15
 802079c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80207a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80207a4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80207a8:	f7df ff26 	bl	80005f8 <__aeabi_dmul>
 80207ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80207b0:	1136      	asrs	r6, r6, #4
 80207b2:	2300      	movs	r3, #0
 80207b4:	2502      	movs	r5, #2
 80207b6:	2e00      	cmp	r6, #0
 80207b8:	f040 8085 	bne.w	80208c6 <_dtoa_r+0x4de>
 80207bc:	2b00      	cmp	r3, #0
 80207be:	d1d2      	bne.n	8020766 <_dtoa_r+0x37e>
 80207c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80207c2:	2b00      	cmp	r3, #0
 80207c4:	f000 808c 	beq.w	80208e0 <_dtoa_r+0x4f8>
 80207c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80207cc:	4b99      	ldr	r3, [pc, #612]	; (8020a34 <_dtoa_r+0x64c>)
 80207ce:	2200      	movs	r2, #0
 80207d0:	4630      	mov	r0, r6
 80207d2:	4639      	mov	r1, r7
 80207d4:	f7e0 f982 	bl	8000adc <__aeabi_dcmplt>
 80207d8:	2800      	cmp	r0, #0
 80207da:	f000 8081 	beq.w	80208e0 <_dtoa_r+0x4f8>
 80207de:	9b01      	ldr	r3, [sp, #4]
 80207e0:	2b00      	cmp	r3, #0
 80207e2:	d07d      	beq.n	80208e0 <_dtoa_r+0x4f8>
 80207e4:	f1b9 0f00 	cmp.w	r9, #0
 80207e8:	dd3c      	ble.n	8020864 <_dtoa_r+0x47c>
 80207ea:	f10a 33ff 	add.w	r3, sl, #4294967295
 80207ee:	9307      	str	r3, [sp, #28]
 80207f0:	2200      	movs	r2, #0
 80207f2:	4b91      	ldr	r3, [pc, #580]	; (8020a38 <_dtoa_r+0x650>)
 80207f4:	4630      	mov	r0, r6
 80207f6:	4639      	mov	r1, r7
 80207f8:	f7df fefe 	bl	80005f8 <__aeabi_dmul>
 80207fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020800:	3501      	adds	r5, #1
 8020802:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 8020806:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 802080a:	4628      	mov	r0, r5
 802080c:	f7df fe8a 	bl	8000524 <__aeabi_i2d>
 8020810:	4632      	mov	r2, r6
 8020812:	463b      	mov	r3, r7
 8020814:	f7df fef0 	bl	80005f8 <__aeabi_dmul>
 8020818:	4b88      	ldr	r3, [pc, #544]	; (8020a3c <_dtoa_r+0x654>)
 802081a:	2200      	movs	r2, #0
 802081c:	f7df fd36 	bl	800028c <__adddf3>
 8020820:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8020824:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8020828:	9303      	str	r3, [sp, #12]
 802082a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 802082c:	2b00      	cmp	r3, #0
 802082e:	d15c      	bne.n	80208ea <_dtoa_r+0x502>
 8020830:	4b83      	ldr	r3, [pc, #524]	; (8020a40 <_dtoa_r+0x658>)
 8020832:	2200      	movs	r2, #0
 8020834:	4630      	mov	r0, r6
 8020836:	4639      	mov	r1, r7
 8020838:	f7df fd26 	bl	8000288 <__aeabi_dsub>
 802083c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8020840:	4606      	mov	r6, r0
 8020842:	460f      	mov	r7, r1
 8020844:	f7e0 f968 	bl	8000b18 <__aeabi_dcmpgt>
 8020848:	2800      	cmp	r0, #0
 802084a:	f040 8296 	bne.w	8020d7a <_dtoa_r+0x992>
 802084e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8020852:	4630      	mov	r0, r6
 8020854:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8020858:	4639      	mov	r1, r7
 802085a:	f7e0 f93f 	bl	8000adc <__aeabi_dcmplt>
 802085e:	2800      	cmp	r0, #0
 8020860:	f040 8288 	bne.w	8020d74 <_dtoa_r+0x98c>
 8020864:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8020868:	e9cd 2302 	strd	r2, r3, [sp, #8]
 802086c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 802086e:	2b00      	cmp	r3, #0
 8020870:	f2c0 8158 	blt.w	8020b24 <_dtoa_r+0x73c>
 8020874:	f1ba 0f0e 	cmp.w	sl, #14
 8020878:	f300 8154 	bgt.w	8020b24 <_dtoa_r+0x73c>
 802087c:	4b6b      	ldr	r3, [pc, #428]	; (8020a2c <_dtoa_r+0x644>)
 802087e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8020882:	e9d3 8900 	ldrd	r8, r9, [r3]
 8020886:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020888:	2b00      	cmp	r3, #0
 802088a:	f280 80e3 	bge.w	8020a54 <_dtoa_r+0x66c>
 802088e:	9b01      	ldr	r3, [sp, #4]
 8020890:	2b00      	cmp	r3, #0
 8020892:	f300 80df 	bgt.w	8020a54 <_dtoa_r+0x66c>
 8020896:	f040 826d 	bne.w	8020d74 <_dtoa_r+0x98c>
 802089a:	4b69      	ldr	r3, [pc, #420]	; (8020a40 <_dtoa_r+0x658>)
 802089c:	2200      	movs	r2, #0
 802089e:	4640      	mov	r0, r8
 80208a0:	4649      	mov	r1, r9
 80208a2:	f7df fea9 	bl	80005f8 <__aeabi_dmul>
 80208a6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80208aa:	f7e0 f92b 	bl	8000b04 <__aeabi_dcmpge>
 80208ae:	9e01      	ldr	r6, [sp, #4]
 80208b0:	4637      	mov	r7, r6
 80208b2:	2800      	cmp	r0, #0
 80208b4:	f040 8243 	bne.w	8020d3e <_dtoa_r+0x956>
 80208b8:	9d00      	ldr	r5, [sp, #0]
 80208ba:	2331      	movs	r3, #49	; 0x31
 80208bc:	f805 3b01 	strb.w	r3, [r5], #1
 80208c0:	f10a 0a01 	add.w	sl, sl, #1
 80208c4:	e23f      	b.n	8020d46 <_dtoa_r+0x95e>
 80208c6:	07f2      	lsls	r2, r6, #31
 80208c8:	d505      	bpl.n	80208d6 <_dtoa_r+0x4ee>
 80208ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80208ce:	f7df fe93 	bl	80005f8 <__aeabi_dmul>
 80208d2:	3501      	adds	r5, #1
 80208d4:	2301      	movs	r3, #1
 80208d6:	1076      	asrs	r6, r6, #1
 80208d8:	3708      	adds	r7, #8
 80208da:	e76c      	b.n	80207b6 <_dtoa_r+0x3ce>
 80208dc:	2502      	movs	r5, #2
 80208de:	e76f      	b.n	80207c0 <_dtoa_r+0x3d8>
 80208e0:	9b01      	ldr	r3, [sp, #4]
 80208e2:	f8cd a01c 	str.w	sl, [sp, #28]
 80208e6:	930c      	str	r3, [sp, #48]	; 0x30
 80208e8:	e78d      	b.n	8020806 <_dtoa_r+0x41e>
 80208ea:	9900      	ldr	r1, [sp, #0]
 80208ec:	980c      	ldr	r0, [sp, #48]	; 0x30
 80208ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80208f0:	4b4e      	ldr	r3, [pc, #312]	; (8020a2c <_dtoa_r+0x644>)
 80208f2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80208f6:	4401      	add	r1, r0
 80208f8:	9102      	str	r1, [sp, #8]
 80208fa:	9908      	ldr	r1, [sp, #32]
 80208fc:	eeb0 8a47 	vmov.f32	s16, s14
 8020900:	eef0 8a67 	vmov.f32	s17, s15
 8020904:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8020908:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 802090c:	2900      	cmp	r1, #0
 802090e:	d045      	beq.n	802099c <_dtoa_r+0x5b4>
 8020910:	494c      	ldr	r1, [pc, #304]	; (8020a44 <_dtoa_r+0x65c>)
 8020912:	2000      	movs	r0, #0
 8020914:	f7df ff9a 	bl	800084c <__aeabi_ddiv>
 8020918:	ec53 2b18 	vmov	r2, r3, d8
 802091c:	f7df fcb4 	bl	8000288 <__aeabi_dsub>
 8020920:	9d00      	ldr	r5, [sp, #0]
 8020922:	ec41 0b18 	vmov	d8, r0, r1
 8020926:	4639      	mov	r1, r7
 8020928:	4630      	mov	r0, r6
 802092a:	f7e0 f915 	bl	8000b58 <__aeabi_d2iz>
 802092e:	900c      	str	r0, [sp, #48]	; 0x30
 8020930:	f7df fdf8 	bl	8000524 <__aeabi_i2d>
 8020934:	4602      	mov	r2, r0
 8020936:	460b      	mov	r3, r1
 8020938:	4630      	mov	r0, r6
 802093a:	4639      	mov	r1, r7
 802093c:	f7df fca4 	bl	8000288 <__aeabi_dsub>
 8020940:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020942:	3330      	adds	r3, #48	; 0x30
 8020944:	f805 3b01 	strb.w	r3, [r5], #1
 8020948:	ec53 2b18 	vmov	r2, r3, d8
 802094c:	4606      	mov	r6, r0
 802094e:	460f      	mov	r7, r1
 8020950:	f7e0 f8c4 	bl	8000adc <__aeabi_dcmplt>
 8020954:	2800      	cmp	r0, #0
 8020956:	d165      	bne.n	8020a24 <_dtoa_r+0x63c>
 8020958:	4632      	mov	r2, r6
 802095a:	463b      	mov	r3, r7
 802095c:	4935      	ldr	r1, [pc, #212]	; (8020a34 <_dtoa_r+0x64c>)
 802095e:	2000      	movs	r0, #0
 8020960:	f7df fc92 	bl	8000288 <__aeabi_dsub>
 8020964:	ec53 2b18 	vmov	r2, r3, d8
 8020968:	f7e0 f8b8 	bl	8000adc <__aeabi_dcmplt>
 802096c:	2800      	cmp	r0, #0
 802096e:	f040 80b9 	bne.w	8020ae4 <_dtoa_r+0x6fc>
 8020972:	9b02      	ldr	r3, [sp, #8]
 8020974:	429d      	cmp	r5, r3
 8020976:	f43f af75 	beq.w	8020864 <_dtoa_r+0x47c>
 802097a:	4b2f      	ldr	r3, [pc, #188]	; (8020a38 <_dtoa_r+0x650>)
 802097c:	ec51 0b18 	vmov	r0, r1, d8
 8020980:	2200      	movs	r2, #0
 8020982:	f7df fe39 	bl	80005f8 <__aeabi_dmul>
 8020986:	4b2c      	ldr	r3, [pc, #176]	; (8020a38 <_dtoa_r+0x650>)
 8020988:	ec41 0b18 	vmov	d8, r0, r1
 802098c:	2200      	movs	r2, #0
 802098e:	4630      	mov	r0, r6
 8020990:	4639      	mov	r1, r7
 8020992:	f7df fe31 	bl	80005f8 <__aeabi_dmul>
 8020996:	4606      	mov	r6, r0
 8020998:	460f      	mov	r7, r1
 802099a:	e7c4      	b.n	8020926 <_dtoa_r+0x53e>
 802099c:	ec51 0b17 	vmov	r0, r1, d7
 80209a0:	f7df fe2a 	bl	80005f8 <__aeabi_dmul>
 80209a4:	9b02      	ldr	r3, [sp, #8]
 80209a6:	9d00      	ldr	r5, [sp, #0]
 80209a8:	930c      	str	r3, [sp, #48]	; 0x30
 80209aa:	ec41 0b18 	vmov	d8, r0, r1
 80209ae:	4639      	mov	r1, r7
 80209b0:	4630      	mov	r0, r6
 80209b2:	f7e0 f8d1 	bl	8000b58 <__aeabi_d2iz>
 80209b6:	9011      	str	r0, [sp, #68]	; 0x44
 80209b8:	f7df fdb4 	bl	8000524 <__aeabi_i2d>
 80209bc:	4602      	mov	r2, r0
 80209be:	460b      	mov	r3, r1
 80209c0:	4630      	mov	r0, r6
 80209c2:	4639      	mov	r1, r7
 80209c4:	f7df fc60 	bl	8000288 <__aeabi_dsub>
 80209c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80209ca:	3330      	adds	r3, #48	; 0x30
 80209cc:	f805 3b01 	strb.w	r3, [r5], #1
 80209d0:	9b02      	ldr	r3, [sp, #8]
 80209d2:	429d      	cmp	r5, r3
 80209d4:	4606      	mov	r6, r0
 80209d6:	460f      	mov	r7, r1
 80209d8:	f04f 0200 	mov.w	r2, #0
 80209dc:	d134      	bne.n	8020a48 <_dtoa_r+0x660>
 80209de:	4b19      	ldr	r3, [pc, #100]	; (8020a44 <_dtoa_r+0x65c>)
 80209e0:	ec51 0b18 	vmov	r0, r1, d8
 80209e4:	f7df fc52 	bl	800028c <__adddf3>
 80209e8:	4602      	mov	r2, r0
 80209ea:	460b      	mov	r3, r1
 80209ec:	4630      	mov	r0, r6
 80209ee:	4639      	mov	r1, r7
 80209f0:	f7e0 f892 	bl	8000b18 <__aeabi_dcmpgt>
 80209f4:	2800      	cmp	r0, #0
 80209f6:	d175      	bne.n	8020ae4 <_dtoa_r+0x6fc>
 80209f8:	ec53 2b18 	vmov	r2, r3, d8
 80209fc:	4911      	ldr	r1, [pc, #68]	; (8020a44 <_dtoa_r+0x65c>)
 80209fe:	2000      	movs	r0, #0
 8020a00:	f7df fc42 	bl	8000288 <__aeabi_dsub>
 8020a04:	4602      	mov	r2, r0
 8020a06:	460b      	mov	r3, r1
 8020a08:	4630      	mov	r0, r6
 8020a0a:	4639      	mov	r1, r7
 8020a0c:	f7e0 f866 	bl	8000adc <__aeabi_dcmplt>
 8020a10:	2800      	cmp	r0, #0
 8020a12:	f43f af27 	beq.w	8020864 <_dtoa_r+0x47c>
 8020a16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020a18:	1e6b      	subs	r3, r5, #1
 8020a1a:	930c      	str	r3, [sp, #48]	; 0x30
 8020a1c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8020a20:	2b30      	cmp	r3, #48	; 0x30
 8020a22:	d0f8      	beq.n	8020a16 <_dtoa_r+0x62e>
 8020a24:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8020a28:	e04a      	b.n	8020ac0 <_dtoa_r+0x6d8>
 8020a2a:	bf00      	nop
 8020a2c:	08027368 	.word	0x08027368
 8020a30:	08027340 	.word	0x08027340
 8020a34:	3ff00000 	.word	0x3ff00000
 8020a38:	40240000 	.word	0x40240000
 8020a3c:	401c0000 	.word	0x401c0000
 8020a40:	40140000 	.word	0x40140000
 8020a44:	3fe00000 	.word	0x3fe00000
 8020a48:	4baf      	ldr	r3, [pc, #700]	; (8020d08 <_dtoa_r+0x920>)
 8020a4a:	f7df fdd5 	bl	80005f8 <__aeabi_dmul>
 8020a4e:	4606      	mov	r6, r0
 8020a50:	460f      	mov	r7, r1
 8020a52:	e7ac      	b.n	80209ae <_dtoa_r+0x5c6>
 8020a54:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8020a58:	9d00      	ldr	r5, [sp, #0]
 8020a5a:	4642      	mov	r2, r8
 8020a5c:	464b      	mov	r3, r9
 8020a5e:	4630      	mov	r0, r6
 8020a60:	4639      	mov	r1, r7
 8020a62:	f7df fef3 	bl	800084c <__aeabi_ddiv>
 8020a66:	f7e0 f877 	bl	8000b58 <__aeabi_d2iz>
 8020a6a:	9002      	str	r0, [sp, #8]
 8020a6c:	f7df fd5a 	bl	8000524 <__aeabi_i2d>
 8020a70:	4642      	mov	r2, r8
 8020a72:	464b      	mov	r3, r9
 8020a74:	f7df fdc0 	bl	80005f8 <__aeabi_dmul>
 8020a78:	4602      	mov	r2, r0
 8020a7a:	460b      	mov	r3, r1
 8020a7c:	4630      	mov	r0, r6
 8020a7e:	4639      	mov	r1, r7
 8020a80:	f7df fc02 	bl	8000288 <__aeabi_dsub>
 8020a84:	9e02      	ldr	r6, [sp, #8]
 8020a86:	9f01      	ldr	r7, [sp, #4]
 8020a88:	3630      	adds	r6, #48	; 0x30
 8020a8a:	f805 6b01 	strb.w	r6, [r5], #1
 8020a8e:	9e00      	ldr	r6, [sp, #0]
 8020a90:	1bae      	subs	r6, r5, r6
 8020a92:	42b7      	cmp	r7, r6
 8020a94:	4602      	mov	r2, r0
 8020a96:	460b      	mov	r3, r1
 8020a98:	d137      	bne.n	8020b0a <_dtoa_r+0x722>
 8020a9a:	f7df fbf7 	bl	800028c <__adddf3>
 8020a9e:	4642      	mov	r2, r8
 8020aa0:	464b      	mov	r3, r9
 8020aa2:	4606      	mov	r6, r0
 8020aa4:	460f      	mov	r7, r1
 8020aa6:	f7e0 f837 	bl	8000b18 <__aeabi_dcmpgt>
 8020aaa:	b9c8      	cbnz	r0, 8020ae0 <_dtoa_r+0x6f8>
 8020aac:	4642      	mov	r2, r8
 8020aae:	464b      	mov	r3, r9
 8020ab0:	4630      	mov	r0, r6
 8020ab2:	4639      	mov	r1, r7
 8020ab4:	f7e0 f808 	bl	8000ac8 <__aeabi_dcmpeq>
 8020ab8:	b110      	cbz	r0, 8020ac0 <_dtoa_r+0x6d8>
 8020aba:	9b02      	ldr	r3, [sp, #8]
 8020abc:	07d9      	lsls	r1, r3, #31
 8020abe:	d40f      	bmi.n	8020ae0 <_dtoa_r+0x6f8>
 8020ac0:	4620      	mov	r0, r4
 8020ac2:	4659      	mov	r1, fp
 8020ac4:	f000 ff3a 	bl	802193c <_Bfree>
 8020ac8:	2300      	movs	r3, #0
 8020aca:	702b      	strb	r3, [r5, #0]
 8020acc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020ace:	f10a 0001 	add.w	r0, sl, #1
 8020ad2:	6018      	str	r0, [r3, #0]
 8020ad4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020ad6:	2b00      	cmp	r3, #0
 8020ad8:	f43f acd8 	beq.w	802048c <_dtoa_r+0xa4>
 8020adc:	601d      	str	r5, [r3, #0]
 8020ade:	e4d5      	b.n	802048c <_dtoa_r+0xa4>
 8020ae0:	f8cd a01c 	str.w	sl, [sp, #28]
 8020ae4:	462b      	mov	r3, r5
 8020ae6:	461d      	mov	r5, r3
 8020ae8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8020aec:	2a39      	cmp	r2, #57	; 0x39
 8020aee:	d108      	bne.n	8020b02 <_dtoa_r+0x71a>
 8020af0:	9a00      	ldr	r2, [sp, #0]
 8020af2:	429a      	cmp	r2, r3
 8020af4:	d1f7      	bne.n	8020ae6 <_dtoa_r+0x6fe>
 8020af6:	9a07      	ldr	r2, [sp, #28]
 8020af8:	9900      	ldr	r1, [sp, #0]
 8020afa:	3201      	adds	r2, #1
 8020afc:	9207      	str	r2, [sp, #28]
 8020afe:	2230      	movs	r2, #48	; 0x30
 8020b00:	700a      	strb	r2, [r1, #0]
 8020b02:	781a      	ldrb	r2, [r3, #0]
 8020b04:	3201      	adds	r2, #1
 8020b06:	701a      	strb	r2, [r3, #0]
 8020b08:	e78c      	b.n	8020a24 <_dtoa_r+0x63c>
 8020b0a:	4b7f      	ldr	r3, [pc, #508]	; (8020d08 <_dtoa_r+0x920>)
 8020b0c:	2200      	movs	r2, #0
 8020b0e:	f7df fd73 	bl	80005f8 <__aeabi_dmul>
 8020b12:	2200      	movs	r2, #0
 8020b14:	2300      	movs	r3, #0
 8020b16:	4606      	mov	r6, r0
 8020b18:	460f      	mov	r7, r1
 8020b1a:	f7df ffd5 	bl	8000ac8 <__aeabi_dcmpeq>
 8020b1e:	2800      	cmp	r0, #0
 8020b20:	d09b      	beq.n	8020a5a <_dtoa_r+0x672>
 8020b22:	e7cd      	b.n	8020ac0 <_dtoa_r+0x6d8>
 8020b24:	9a08      	ldr	r2, [sp, #32]
 8020b26:	2a00      	cmp	r2, #0
 8020b28:	f000 80c4 	beq.w	8020cb4 <_dtoa_r+0x8cc>
 8020b2c:	9a05      	ldr	r2, [sp, #20]
 8020b2e:	2a01      	cmp	r2, #1
 8020b30:	f300 80a8 	bgt.w	8020c84 <_dtoa_r+0x89c>
 8020b34:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8020b36:	2a00      	cmp	r2, #0
 8020b38:	f000 80a0 	beq.w	8020c7c <_dtoa_r+0x894>
 8020b3c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8020b40:	9e06      	ldr	r6, [sp, #24]
 8020b42:	4645      	mov	r5, r8
 8020b44:	9a04      	ldr	r2, [sp, #16]
 8020b46:	2101      	movs	r1, #1
 8020b48:	441a      	add	r2, r3
 8020b4a:	4620      	mov	r0, r4
 8020b4c:	4498      	add	r8, r3
 8020b4e:	9204      	str	r2, [sp, #16]
 8020b50:	f000 fffa 	bl	8021b48 <__i2b>
 8020b54:	4607      	mov	r7, r0
 8020b56:	2d00      	cmp	r5, #0
 8020b58:	dd0b      	ble.n	8020b72 <_dtoa_r+0x78a>
 8020b5a:	9b04      	ldr	r3, [sp, #16]
 8020b5c:	2b00      	cmp	r3, #0
 8020b5e:	dd08      	ble.n	8020b72 <_dtoa_r+0x78a>
 8020b60:	42ab      	cmp	r3, r5
 8020b62:	9a04      	ldr	r2, [sp, #16]
 8020b64:	bfa8      	it	ge
 8020b66:	462b      	movge	r3, r5
 8020b68:	eba8 0803 	sub.w	r8, r8, r3
 8020b6c:	1aed      	subs	r5, r5, r3
 8020b6e:	1ad3      	subs	r3, r2, r3
 8020b70:	9304      	str	r3, [sp, #16]
 8020b72:	9b06      	ldr	r3, [sp, #24]
 8020b74:	b1fb      	cbz	r3, 8020bb6 <_dtoa_r+0x7ce>
 8020b76:	9b08      	ldr	r3, [sp, #32]
 8020b78:	2b00      	cmp	r3, #0
 8020b7a:	f000 809f 	beq.w	8020cbc <_dtoa_r+0x8d4>
 8020b7e:	2e00      	cmp	r6, #0
 8020b80:	dd11      	ble.n	8020ba6 <_dtoa_r+0x7be>
 8020b82:	4639      	mov	r1, r7
 8020b84:	4632      	mov	r2, r6
 8020b86:	4620      	mov	r0, r4
 8020b88:	f001 f89a 	bl	8021cc0 <__pow5mult>
 8020b8c:	465a      	mov	r2, fp
 8020b8e:	4601      	mov	r1, r0
 8020b90:	4607      	mov	r7, r0
 8020b92:	4620      	mov	r0, r4
 8020b94:	f000 ffee 	bl	8021b74 <__multiply>
 8020b98:	4659      	mov	r1, fp
 8020b9a:	9007      	str	r0, [sp, #28]
 8020b9c:	4620      	mov	r0, r4
 8020b9e:	f000 fecd 	bl	802193c <_Bfree>
 8020ba2:	9b07      	ldr	r3, [sp, #28]
 8020ba4:	469b      	mov	fp, r3
 8020ba6:	9b06      	ldr	r3, [sp, #24]
 8020ba8:	1b9a      	subs	r2, r3, r6
 8020baa:	d004      	beq.n	8020bb6 <_dtoa_r+0x7ce>
 8020bac:	4659      	mov	r1, fp
 8020bae:	4620      	mov	r0, r4
 8020bb0:	f001 f886 	bl	8021cc0 <__pow5mult>
 8020bb4:	4683      	mov	fp, r0
 8020bb6:	2101      	movs	r1, #1
 8020bb8:	4620      	mov	r0, r4
 8020bba:	f000 ffc5 	bl	8021b48 <__i2b>
 8020bbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020bc0:	2b00      	cmp	r3, #0
 8020bc2:	4606      	mov	r6, r0
 8020bc4:	dd7c      	ble.n	8020cc0 <_dtoa_r+0x8d8>
 8020bc6:	461a      	mov	r2, r3
 8020bc8:	4601      	mov	r1, r0
 8020bca:	4620      	mov	r0, r4
 8020bcc:	f001 f878 	bl	8021cc0 <__pow5mult>
 8020bd0:	9b05      	ldr	r3, [sp, #20]
 8020bd2:	2b01      	cmp	r3, #1
 8020bd4:	4606      	mov	r6, r0
 8020bd6:	dd76      	ble.n	8020cc6 <_dtoa_r+0x8de>
 8020bd8:	2300      	movs	r3, #0
 8020bda:	9306      	str	r3, [sp, #24]
 8020bdc:	6933      	ldr	r3, [r6, #16]
 8020bde:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8020be2:	6918      	ldr	r0, [r3, #16]
 8020be4:	f000 ff60 	bl	8021aa8 <__hi0bits>
 8020be8:	f1c0 0020 	rsb	r0, r0, #32
 8020bec:	9b04      	ldr	r3, [sp, #16]
 8020bee:	4418      	add	r0, r3
 8020bf0:	f010 001f 	ands.w	r0, r0, #31
 8020bf4:	f000 8086 	beq.w	8020d04 <_dtoa_r+0x91c>
 8020bf8:	f1c0 0320 	rsb	r3, r0, #32
 8020bfc:	2b04      	cmp	r3, #4
 8020bfe:	dd7f      	ble.n	8020d00 <_dtoa_r+0x918>
 8020c00:	f1c0 001c 	rsb	r0, r0, #28
 8020c04:	9b04      	ldr	r3, [sp, #16]
 8020c06:	4403      	add	r3, r0
 8020c08:	4480      	add	r8, r0
 8020c0a:	4405      	add	r5, r0
 8020c0c:	9304      	str	r3, [sp, #16]
 8020c0e:	f1b8 0f00 	cmp.w	r8, #0
 8020c12:	dd05      	ble.n	8020c20 <_dtoa_r+0x838>
 8020c14:	4659      	mov	r1, fp
 8020c16:	4642      	mov	r2, r8
 8020c18:	4620      	mov	r0, r4
 8020c1a:	f001 f8ab 	bl	8021d74 <__lshift>
 8020c1e:	4683      	mov	fp, r0
 8020c20:	9b04      	ldr	r3, [sp, #16]
 8020c22:	2b00      	cmp	r3, #0
 8020c24:	dd05      	ble.n	8020c32 <_dtoa_r+0x84a>
 8020c26:	4631      	mov	r1, r6
 8020c28:	461a      	mov	r2, r3
 8020c2a:	4620      	mov	r0, r4
 8020c2c:	f001 f8a2 	bl	8021d74 <__lshift>
 8020c30:	4606      	mov	r6, r0
 8020c32:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020c34:	2b00      	cmp	r3, #0
 8020c36:	d069      	beq.n	8020d0c <_dtoa_r+0x924>
 8020c38:	4631      	mov	r1, r6
 8020c3a:	4658      	mov	r0, fp
 8020c3c:	f001 f906 	bl	8021e4c <__mcmp>
 8020c40:	2800      	cmp	r0, #0
 8020c42:	da63      	bge.n	8020d0c <_dtoa_r+0x924>
 8020c44:	2300      	movs	r3, #0
 8020c46:	4659      	mov	r1, fp
 8020c48:	220a      	movs	r2, #10
 8020c4a:	4620      	mov	r0, r4
 8020c4c:	f000 fe98 	bl	8021980 <__multadd>
 8020c50:	9b08      	ldr	r3, [sp, #32]
 8020c52:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020c56:	4683      	mov	fp, r0
 8020c58:	2b00      	cmp	r3, #0
 8020c5a:	f000 818f 	beq.w	8020f7c <_dtoa_r+0xb94>
 8020c5e:	4639      	mov	r1, r7
 8020c60:	2300      	movs	r3, #0
 8020c62:	220a      	movs	r2, #10
 8020c64:	4620      	mov	r0, r4
 8020c66:	f000 fe8b 	bl	8021980 <__multadd>
 8020c6a:	f1b9 0f00 	cmp.w	r9, #0
 8020c6e:	4607      	mov	r7, r0
 8020c70:	f300 808e 	bgt.w	8020d90 <_dtoa_r+0x9a8>
 8020c74:	9b05      	ldr	r3, [sp, #20]
 8020c76:	2b02      	cmp	r3, #2
 8020c78:	dc50      	bgt.n	8020d1c <_dtoa_r+0x934>
 8020c7a:	e089      	b.n	8020d90 <_dtoa_r+0x9a8>
 8020c7c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8020c7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8020c82:	e75d      	b.n	8020b40 <_dtoa_r+0x758>
 8020c84:	9b01      	ldr	r3, [sp, #4]
 8020c86:	1e5e      	subs	r6, r3, #1
 8020c88:	9b06      	ldr	r3, [sp, #24]
 8020c8a:	42b3      	cmp	r3, r6
 8020c8c:	bfbf      	itttt	lt
 8020c8e:	9b06      	ldrlt	r3, [sp, #24]
 8020c90:	9606      	strlt	r6, [sp, #24]
 8020c92:	1af2      	sublt	r2, r6, r3
 8020c94:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8020c96:	bfb6      	itet	lt
 8020c98:	189b      	addlt	r3, r3, r2
 8020c9a:	1b9e      	subge	r6, r3, r6
 8020c9c:	930d      	strlt	r3, [sp, #52]	; 0x34
 8020c9e:	9b01      	ldr	r3, [sp, #4]
 8020ca0:	bfb8      	it	lt
 8020ca2:	2600      	movlt	r6, #0
 8020ca4:	2b00      	cmp	r3, #0
 8020ca6:	bfb5      	itete	lt
 8020ca8:	eba8 0503 	sublt.w	r5, r8, r3
 8020cac:	9b01      	ldrge	r3, [sp, #4]
 8020cae:	2300      	movlt	r3, #0
 8020cb0:	4645      	movge	r5, r8
 8020cb2:	e747      	b.n	8020b44 <_dtoa_r+0x75c>
 8020cb4:	9e06      	ldr	r6, [sp, #24]
 8020cb6:	9f08      	ldr	r7, [sp, #32]
 8020cb8:	4645      	mov	r5, r8
 8020cba:	e74c      	b.n	8020b56 <_dtoa_r+0x76e>
 8020cbc:	9a06      	ldr	r2, [sp, #24]
 8020cbe:	e775      	b.n	8020bac <_dtoa_r+0x7c4>
 8020cc0:	9b05      	ldr	r3, [sp, #20]
 8020cc2:	2b01      	cmp	r3, #1
 8020cc4:	dc18      	bgt.n	8020cf8 <_dtoa_r+0x910>
 8020cc6:	9b02      	ldr	r3, [sp, #8]
 8020cc8:	b9b3      	cbnz	r3, 8020cf8 <_dtoa_r+0x910>
 8020cca:	9b03      	ldr	r3, [sp, #12]
 8020ccc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8020cd0:	b9a3      	cbnz	r3, 8020cfc <_dtoa_r+0x914>
 8020cd2:	9b03      	ldr	r3, [sp, #12]
 8020cd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8020cd8:	0d1b      	lsrs	r3, r3, #20
 8020cda:	051b      	lsls	r3, r3, #20
 8020cdc:	b12b      	cbz	r3, 8020cea <_dtoa_r+0x902>
 8020cde:	9b04      	ldr	r3, [sp, #16]
 8020ce0:	3301      	adds	r3, #1
 8020ce2:	9304      	str	r3, [sp, #16]
 8020ce4:	f108 0801 	add.w	r8, r8, #1
 8020ce8:	2301      	movs	r3, #1
 8020cea:	9306      	str	r3, [sp, #24]
 8020cec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020cee:	2b00      	cmp	r3, #0
 8020cf0:	f47f af74 	bne.w	8020bdc <_dtoa_r+0x7f4>
 8020cf4:	2001      	movs	r0, #1
 8020cf6:	e779      	b.n	8020bec <_dtoa_r+0x804>
 8020cf8:	2300      	movs	r3, #0
 8020cfa:	e7f6      	b.n	8020cea <_dtoa_r+0x902>
 8020cfc:	9b02      	ldr	r3, [sp, #8]
 8020cfe:	e7f4      	b.n	8020cea <_dtoa_r+0x902>
 8020d00:	d085      	beq.n	8020c0e <_dtoa_r+0x826>
 8020d02:	4618      	mov	r0, r3
 8020d04:	301c      	adds	r0, #28
 8020d06:	e77d      	b.n	8020c04 <_dtoa_r+0x81c>
 8020d08:	40240000 	.word	0x40240000
 8020d0c:	9b01      	ldr	r3, [sp, #4]
 8020d0e:	2b00      	cmp	r3, #0
 8020d10:	dc38      	bgt.n	8020d84 <_dtoa_r+0x99c>
 8020d12:	9b05      	ldr	r3, [sp, #20]
 8020d14:	2b02      	cmp	r3, #2
 8020d16:	dd35      	ble.n	8020d84 <_dtoa_r+0x99c>
 8020d18:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8020d1c:	f1b9 0f00 	cmp.w	r9, #0
 8020d20:	d10d      	bne.n	8020d3e <_dtoa_r+0x956>
 8020d22:	4631      	mov	r1, r6
 8020d24:	464b      	mov	r3, r9
 8020d26:	2205      	movs	r2, #5
 8020d28:	4620      	mov	r0, r4
 8020d2a:	f000 fe29 	bl	8021980 <__multadd>
 8020d2e:	4601      	mov	r1, r0
 8020d30:	4606      	mov	r6, r0
 8020d32:	4658      	mov	r0, fp
 8020d34:	f001 f88a 	bl	8021e4c <__mcmp>
 8020d38:	2800      	cmp	r0, #0
 8020d3a:	f73f adbd 	bgt.w	80208b8 <_dtoa_r+0x4d0>
 8020d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020d40:	9d00      	ldr	r5, [sp, #0]
 8020d42:	ea6f 0a03 	mvn.w	sl, r3
 8020d46:	f04f 0800 	mov.w	r8, #0
 8020d4a:	4631      	mov	r1, r6
 8020d4c:	4620      	mov	r0, r4
 8020d4e:	f000 fdf5 	bl	802193c <_Bfree>
 8020d52:	2f00      	cmp	r7, #0
 8020d54:	f43f aeb4 	beq.w	8020ac0 <_dtoa_r+0x6d8>
 8020d58:	f1b8 0f00 	cmp.w	r8, #0
 8020d5c:	d005      	beq.n	8020d6a <_dtoa_r+0x982>
 8020d5e:	45b8      	cmp	r8, r7
 8020d60:	d003      	beq.n	8020d6a <_dtoa_r+0x982>
 8020d62:	4641      	mov	r1, r8
 8020d64:	4620      	mov	r0, r4
 8020d66:	f000 fde9 	bl	802193c <_Bfree>
 8020d6a:	4639      	mov	r1, r7
 8020d6c:	4620      	mov	r0, r4
 8020d6e:	f000 fde5 	bl	802193c <_Bfree>
 8020d72:	e6a5      	b.n	8020ac0 <_dtoa_r+0x6d8>
 8020d74:	2600      	movs	r6, #0
 8020d76:	4637      	mov	r7, r6
 8020d78:	e7e1      	b.n	8020d3e <_dtoa_r+0x956>
 8020d7a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8020d7c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8020d80:	4637      	mov	r7, r6
 8020d82:	e599      	b.n	80208b8 <_dtoa_r+0x4d0>
 8020d84:	9b08      	ldr	r3, [sp, #32]
 8020d86:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8020d8a:	2b00      	cmp	r3, #0
 8020d8c:	f000 80fd 	beq.w	8020f8a <_dtoa_r+0xba2>
 8020d90:	2d00      	cmp	r5, #0
 8020d92:	dd05      	ble.n	8020da0 <_dtoa_r+0x9b8>
 8020d94:	4639      	mov	r1, r7
 8020d96:	462a      	mov	r2, r5
 8020d98:	4620      	mov	r0, r4
 8020d9a:	f000 ffeb 	bl	8021d74 <__lshift>
 8020d9e:	4607      	mov	r7, r0
 8020da0:	9b06      	ldr	r3, [sp, #24]
 8020da2:	2b00      	cmp	r3, #0
 8020da4:	d05c      	beq.n	8020e60 <_dtoa_r+0xa78>
 8020da6:	6879      	ldr	r1, [r7, #4]
 8020da8:	4620      	mov	r0, r4
 8020daa:	f000 fd87 	bl	80218bc <_Balloc>
 8020dae:	4605      	mov	r5, r0
 8020db0:	b928      	cbnz	r0, 8020dbe <_dtoa_r+0x9d6>
 8020db2:	4b80      	ldr	r3, [pc, #512]	; (8020fb4 <_dtoa_r+0xbcc>)
 8020db4:	4602      	mov	r2, r0
 8020db6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8020dba:	f7ff bb2e 	b.w	802041a <_dtoa_r+0x32>
 8020dbe:	693a      	ldr	r2, [r7, #16]
 8020dc0:	3202      	adds	r2, #2
 8020dc2:	0092      	lsls	r2, r2, #2
 8020dc4:	f107 010c 	add.w	r1, r7, #12
 8020dc8:	300c      	adds	r0, #12
 8020dca:	f7fd fa9b 	bl	801e304 <memcpy>
 8020dce:	2201      	movs	r2, #1
 8020dd0:	4629      	mov	r1, r5
 8020dd2:	4620      	mov	r0, r4
 8020dd4:	f000 ffce 	bl	8021d74 <__lshift>
 8020dd8:	9b00      	ldr	r3, [sp, #0]
 8020dda:	3301      	adds	r3, #1
 8020ddc:	9301      	str	r3, [sp, #4]
 8020dde:	9b00      	ldr	r3, [sp, #0]
 8020de0:	444b      	add	r3, r9
 8020de2:	9307      	str	r3, [sp, #28]
 8020de4:	9b02      	ldr	r3, [sp, #8]
 8020de6:	f003 0301 	and.w	r3, r3, #1
 8020dea:	46b8      	mov	r8, r7
 8020dec:	9306      	str	r3, [sp, #24]
 8020dee:	4607      	mov	r7, r0
 8020df0:	9b01      	ldr	r3, [sp, #4]
 8020df2:	4631      	mov	r1, r6
 8020df4:	3b01      	subs	r3, #1
 8020df6:	4658      	mov	r0, fp
 8020df8:	9302      	str	r3, [sp, #8]
 8020dfa:	f7ff fa67 	bl	80202cc <quorem>
 8020dfe:	4603      	mov	r3, r0
 8020e00:	3330      	adds	r3, #48	; 0x30
 8020e02:	9004      	str	r0, [sp, #16]
 8020e04:	4641      	mov	r1, r8
 8020e06:	4658      	mov	r0, fp
 8020e08:	9308      	str	r3, [sp, #32]
 8020e0a:	f001 f81f 	bl	8021e4c <__mcmp>
 8020e0e:	463a      	mov	r2, r7
 8020e10:	4681      	mov	r9, r0
 8020e12:	4631      	mov	r1, r6
 8020e14:	4620      	mov	r0, r4
 8020e16:	f001 f835 	bl	8021e84 <__mdiff>
 8020e1a:	68c2      	ldr	r2, [r0, #12]
 8020e1c:	9b08      	ldr	r3, [sp, #32]
 8020e1e:	4605      	mov	r5, r0
 8020e20:	bb02      	cbnz	r2, 8020e64 <_dtoa_r+0xa7c>
 8020e22:	4601      	mov	r1, r0
 8020e24:	4658      	mov	r0, fp
 8020e26:	f001 f811 	bl	8021e4c <__mcmp>
 8020e2a:	9b08      	ldr	r3, [sp, #32]
 8020e2c:	4602      	mov	r2, r0
 8020e2e:	4629      	mov	r1, r5
 8020e30:	4620      	mov	r0, r4
 8020e32:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8020e36:	f000 fd81 	bl	802193c <_Bfree>
 8020e3a:	9b05      	ldr	r3, [sp, #20]
 8020e3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020e3e:	9d01      	ldr	r5, [sp, #4]
 8020e40:	ea43 0102 	orr.w	r1, r3, r2
 8020e44:	9b06      	ldr	r3, [sp, #24]
 8020e46:	430b      	orrs	r3, r1
 8020e48:	9b08      	ldr	r3, [sp, #32]
 8020e4a:	d10d      	bne.n	8020e68 <_dtoa_r+0xa80>
 8020e4c:	2b39      	cmp	r3, #57	; 0x39
 8020e4e:	d029      	beq.n	8020ea4 <_dtoa_r+0xabc>
 8020e50:	f1b9 0f00 	cmp.w	r9, #0
 8020e54:	dd01      	ble.n	8020e5a <_dtoa_r+0xa72>
 8020e56:	9b04      	ldr	r3, [sp, #16]
 8020e58:	3331      	adds	r3, #49	; 0x31
 8020e5a:	9a02      	ldr	r2, [sp, #8]
 8020e5c:	7013      	strb	r3, [r2, #0]
 8020e5e:	e774      	b.n	8020d4a <_dtoa_r+0x962>
 8020e60:	4638      	mov	r0, r7
 8020e62:	e7b9      	b.n	8020dd8 <_dtoa_r+0x9f0>
 8020e64:	2201      	movs	r2, #1
 8020e66:	e7e2      	b.n	8020e2e <_dtoa_r+0xa46>
 8020e68:	f1b9 0f00 	cmp.w	r9, #0
 8020e6c:	db06      	blt.n	8020e7c <_dtoa_r+0xa94>
 8020e6e:	9905      	ldr	r1, [sp, #20]
 8020e70:	ea41 0909 	orr.w	r9, r1, r9
 8020e74:	9906      	ldr	r1, [sp, #24]
 8020e76:	ea59 0101 	orrs.w	r1, r9, r1
 8020e7a:	d120      	bne.n	8020ebe <_dtoa_r+0xad6>
 8020e7c:	2a00      	cmp	r2, #0
 8020e7e:	ddec      	ble.n	8020e5a <_dtoa_r+0xa72>
 8020e80:	4659      	mov	r1, fp
 8020e82:	2201      	movs	r2, #1
 8020e84:	4620      	mov	r0, r4
 8020e86:	9301      	str	r3, [sp, #4]
 8020e88:	f000 ff74 	bl	8021d74 <__lshift>
 8020e8c:	4631      	mov	r1, r6
 8020e8e:	4683      	mov	fp, r0
 8020e90:	f000 ffdc 	bl	8021e4c <__mcmp>
 8020e94:	2800      	cmp	r0, #0
 8020e96:	9b01      	ldr	r3, [sp, #4]
 8020e98:	dc02      	bgt.n	8020ea0 <_dtoa_r+0xab8>
 8020e9a:	d1de      	bne.n	8020e5a <_dtoa_r+0xa72>
 8020e9c:	07da      	lsls	r2, r3, #31
 8020e9e:	d5dc      	bpl.n	8020e5a <_dtoa_r+0xa72>
 8020ea0:	2b39      	cmp	r3, #57	; 0x39
 8020ea2:	d1d8      	bne.n	8020e56 <_dtoa_r+0xa6e>
 8020ea4:	9a02      	ldr	r2, [sp, #8]
 8020ea6:	2339      	movs	r3, #57	; 0x39
 8020ea8:	7013      	strb	r3, [r2, #0]
 8020eaa:	462b      	mov	r3, r5
 8020eac:	461d      	mov	r5, r3
 8020eae:	3b01      	subs	r3, #1
 8020eb0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8020eb4:	2a39      	cmp	r2, #57	; 0x39
 8020eb6:	d050      	beq.n	8020f5a <_dtoa_r+0xb72>
 8020eb8:	3201      	adds	r2, #1
 8020eba:	701a      	strb	r2, [r3, #0]
 8020ebc:	e745      	b.n	8020d4a <_dtoa_r+0x962>
 8020ebe:	2a00      	cmp	r2, #0
 8020ec0:	dd03      	ble.n	8020eca <_dtoa_r+0xae2>
 8020ec2:	2b39      	cmp	r3, #57	; 0x39
 8020ec4:	d0ee      	beq.n	8020ea4 <_dtoa_r+0xabc>
 8020ec6:	3301      	adds	r3, #1
 8020ec8:	e7c7      	b.n	8020e5a <_dtoa_r+0xa72>
 8020eca:	9a01      	ldr	r2, [sp, #4]
 8020ecc:	9907      	ldr	r1, [sp, #28]
 8020ece:	f802 3c01 	strb.w	r3, [r2, #-1]
 8020ed2:	428a      	cmp	r2, r1
 8020ed4:	d02a      	beq.n	8020f2c <_dtoa_r+0xb44>
 8020ed6:	4659      	mov	r1, fp
 8020ed8:	2300      	movs	r3, #0
 8020eda:	220a      	movs	r2, #10
 8020edc:	4620      	mov	r0, r4
 8020ede:	f000 fd4f 	bl	8021980 <__multadd>
 8020ee2:	45b8      	cmp	r8, r7
 8020ee4:	4683      	mov	fp, r0
 8020ee6:	f04f 0300 	mov.w	r3, #0
 8020eea:	f04f 020a 	mov.w	r2, #10
 8020eee:	4641      	mov	r1, r8
 8020ef0:	4620      	mov	r0, r4
 8020ef2:	d107      	bne.n	8020f04 <_dtoa_r+0xb1c>
 8020ef4:	f000 fd44 	bl	8021980 <__multadd>
 8020ef8:	4680      	mov	r8, r0
 8020efa:	4607      	mov	r7, r0
 8020efc:	9b01      	ldr	r3, [sp, #4]
 8020efe:	3301      	adds	r3, #1
 8020f00:	9301      	str	r3, [sp, #4]
 8020f02:	e775      	b.n	8020df0 <_dtoa_r+0xa08>
 8020f04:	f000 fd3c 	bl	8021980 <__multadd>
 8020f08:	4639      	mov	r1, r7
 8020f0a:	4680      	mov	r8, r0
 8020f0c:	2300      	movs	r3, #0
 8020f0e:	220a      	movs	r2, #10
 8020f10:	4620      	mov	r0, r4
 8020f12:	f000 fd35 	bl	8021980 <__multadd>
 8020f16:	4607      	mov	r7, r0
 8020f18:	e7f0      	b.n	8020efc <_dtoa_r+0xb14>
 8020f1a:	f1b9 0f00 	cmp.w	r9, #0
 8020f1e:	9a00      	ldr	r2, [sp, #0]
 8020f20:	bfcc      	ite	gt
 8020f22:	464d      	movgt	r5, r9
 8020f24:	2501      	movle	r5, #1
 8020f26:	4415      	add	r5, r2
 8020f28:	f04f 0800 	mov.w	r8, #0
 8020f2c:	4659      	mov	r1, fp
 8020f2e:	2201      	movs	r2, #1
 8020f30:	4620      	mov	r0, r4
 8020f32:	9301      	str	r3, [sp, #4]
 8020f34:	f000 ff1e 	bl	8021d74 <__lshift>
 8020f38:	4631      	mov	r1, r6
 8020f3a:	4683      	mov	fp, r0
 8020f3c:	f000 ff86 	bl	8021e4c <__mcmp>
 8020f40:	2800      	cmp	r0, #0
 8020f42:	dcb2      	bgt.n	8020eaa <_dtoa_r+0xac2>
 8020f44:	d102      	bne.n	8020f4c <_dtoa_r+0xb64>
 8020f46:	9b01      	ldr	r3, [sp, #4]
 8020f48:	07db      	lsls	r3, r3, #31
 8020f4a:	d4ae      	bmi.n	8020eaa <_dtoa_r+0xac2>
 8020f4c:	462b      	mov	r3, r5
 8020f4e:	461d      	mov	r5, r3
 8020f50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8020f54:	2a30      	cmp	r2, #48	; 0x30
 8020f56:	d0fa      	beq.n	8020f4e <_dtoa_r+0xb66>
 8020f58:	e6f7      	b.n	8020d4a <_dtoa_r+0x962>
 8020f5a:	9a00      	ldr	r2, [sp, #0]
 8020f5c:	429a      	cmp	r2, r3
 8020f5e:	d1a5      	bne.n	8020eac <_dtoa_r+0xac4>
 8020f60:	f10a 0a01 	add.w	sl, sl, #1
 8020f64:	2331      	movs	r3, #49	; 0x31
 8020f66:	e779      	b.n	8020e5c <_dtoa_r+0xa74>
 8020f68:	4b13      	ldr	r3, [pc, #76]	; (8020fb8 <_dtoa_r+0xbd0>)
 8020f6a:	f7ff baaf 	b.w	80204cc <_dtoa_r+0xe4>
 8020f6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8020f70:	2b00      	cmp	r3, #0
 8020f72:	f47f aa86 	bne.w	8020482 <_dtoa_r+0x9a>
 8020f76:	4b11      	ldr	r3, [pc, #68]	; (8020fbc <_dtoa_r+0xbd4>)
 8020f78:	f7ff baa8 	b.w	80204cc <_dtoa_r+0xe4>
 8020f7c:	f1b9 0f00 	cmp.w	r9, #0
 8020f80:	dc03      	bgt.n	8020f8a <_dtoa_r+0xba2>
 8020f82:	9b05      	ldr	r3, [sp, #20]
 8020f84:	2b02      	cmp	r3, #2
 8020f86:	f73f aec9 	bgt.w	8020d1c <_dtoa_r+0x934>
 8020f8a:	9d00      	ldr	r5, [sp, #0]
 8020f8c:	4631      	mov	r1, r6
 8020f8e:	4658      	mov	r0, fp
 8020f90:	f7ff f99c 	bl	80202cc <quorem>
 8020f94:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8020f98:	f805 3b01 	strb.w	r3, [r5], #1
 8020f9c:	9a00      	ldr	r2, [sp, #0]
 8020f9e:	1aaa      	subs	r2, r5, r2
 8020fa0:	4591      	cmp	r9, r2
 8020fa2:	ddba      	ble.n	8020f1a <_dtoa_r+0xb32>
 8020fa4:	4659      	mov	r1, fp
 8020fa6:	2300      	movs	r3, #0
 8020fa8:	220a      	movs	r2, #10
 8020faa:	4620      	mov	r0, r4
 8020fac:	f000 fce8 	bl	8021980 <__multadd>
 8020fb0:	4683      	mov	fp, r0
 8020fb2:	e7eb      	b.n	8020f8c <_dtoa_r+0xba4>
 8020fb4:	08027250 	.word	0x08027250
 8020fb8:	08027451 	.word	0x08027451
 8020fbc:	080271e4 	.word	0x080271e4

08020fc0 <__errno>:
 8020fc0:	4b01      	ldr	r3, [pc, #4]	; (8020fc8 <__errno+0x8>)
 8020fc2:	6818      	ldr	r0, [r3, #0]
 8020fc4:	4770      	bx	lr
 8020fc6:	bf00      	nop
 8020fc8:	200003b8 	.word	0x200003b8

08020fcc <__sflush_r>:
 8020fcc:	898a      	ldrh	r2, [r1, #12]
 8020fce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020fd2:	4605      	mov	r5, r0
 8020fd4:	0710      	lsls	r0, r2, #28
 8020fd6:	460c      	mov	r4, r1
 8020fd8:	d458      	bmi.n	802108c <__sflush_r+0xc0>
 8020fda:	684b      	ldr	r3, [r1, #4]
 8020fdc:	2b00      	cmp	r3, #0
 8020fde:	dc05      	bgt.n	8020fec <__sflush_r+0x20>
 8020fe0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8020fe2:	2b00      	cmp	r3, #0
 8020fe4:	dc02      	bgt.n	8020fec <__sflush_r+0x20>
 8020fe6:	2000      	movs	r0, #0
 8020fe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020fec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8020fee:	2e00      	cmp	r6, #0
 8020ff0:	d0f9      	beq.n	8020fe6 <__sflush_r+0x1a>
 8020ff2:	2300      	movs	r3, #0
 8020ff4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8020ff8:	682f      	ldr	r7, [r5, #0]
 8020ffa:	602b      	str	r3, [r5, #0]
 8020ffc:	d032      	beq.n	8021064 <__sflush_r+0x98>
 8020ffe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8021000:	89a3      	ldrh	r3, [r4, #12]
 8021002:	075a      	lsls	r2, r3, #29
 8021004:	d505      	bpl.n	8021012 <__sflush_r+0x46>
 8021006:	6863      	ldr	r3, [r4, #4]
 8021008:	1ac0      	subs	r0, r0, r3
 802100a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 802100c:	b10b      	cbz	r3, 8021012 <__sflush_r+0x46>
 802100e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8021010:	1ac0      	subs	r0, r0, r3
 8021012:	2300      	movs	r3, #0
 8021014:	4602      	mov	r2, r0
 8021016:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8021018:	6a21      	ldr	r1, [r4, #32]
 802101a:	4628      	mov	r0, r5
 802101c:	47b0      	blx	r6
 802101e:	1c43      	adds	r3, r0, #1
 8021020:	89a3      	ldrh	r3, [r4, #12]
 8021022:	d106      	bne.n	8021032 <__sflush_r+0x66>
 8021024:	6829      	ldr	r1, [r5, #0]
 8021026:	291d      	cmp	r1, #29
 8021028:	d82c      	bhi.n	8021084 <__sflush_r+0xb8>
 802102a:	4a2a      	ldr	r2, [pc, #168]	; (80210d4 <__sflush_r+0x108>)
 802102c:	40ca      	lsrs	r2, r1
 802102e:	07d6      	lsls	r6, r2, #31
 8021030:	d528      	bpl.n	8021084 <__sflush_r+0xb8>
 8021032:	2200      	movs	r2, #0
 8021034:	6062      	str	r2, [r4, #4]
 8021036:	04d9      	lsls	r1, r3, #19
 8021038:	6922      	ldr	r2, [r4, #16]
 802103a:	6022      	str	r2, [r4, #0]
 802103c:	d504      	bpl.n	8021048 <__sflush_r+0x7c>
 802103e:	1c42      	adds	r2, r0, #1
 8021040:	d101      	bne.n	8021046 <__sflush_r+0x7a>
 8021042:	682b      	ldr	r3, [r5, #0]
 8021044:	b903      	cbnz	r3, 8021048 <__sflush_r+0x7c>
 8021046:	6560      	str	r0, [r4, #84]	; 0x54
 8021048:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802104a:	602f      	str	r7, [r5, #0]
 802104c:	2900      	cmp	r1, #0
 802104e:	d0ca      	beq.n	8020fe6 <__sflush_r+0x1a>
 8021050:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8021054:	4299      	cmp	r1, r3
 8021056:	d002      	beq.n	802105e <__sflush_r+0x92>
 8021058:	4628      	mov	r0, r5
 802105a:	f7fd f983 	bl	801e364 <_free_r>
 802105e:	2000      	movs	r0, #0
 8021060:	6360      	str	r0, [r4, #52]	; 0x34
 8021062:	e7c1      	b.n	8020fe8 <__sflush_r+0x1c>
 8021064:	6a21      	ldr	r1, [r4, #32]
 8021066:	2301      	movs	r3, #1
 8021068:	4628      	mov	r0, r5
 802106a:	47b0      	blx	r6
 802106c:	1c41      	adds	r1, r0, #1
 802106e:	d1c7      	bne.n	8021000 <__sflush_r+0x34>
 8021070:	682b      	ldr	r3, [r5, #0]
 8021072:	2b00      	cmp	r3, #0
 8021074:	d0c4      	beq.n	8021000 <__sflush_r+0x34>
 8021076:	2b1d      	cmp	r3, #29
 8021078:	d001      	beq.n	802107e <__sflush_r+0xb2>
 802107a:	2b16      	cmp	r3, #22
 802107c:	d101      	bne.n	8021082 <__sflush_r+0xb6>
 802107e:	602f      	str	r7, [r5, #0]
 8021080:	e7b1      	b.n	8020fe6 <__sflush_r+0x1a>
 8021082:	89a3      	ldrh	r3, [r4, #12]
 8021084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021088:	81a3      	strh	r3, [r4, #12]
 802108a:	e7ad      	b.n	8020fe8 <__sflush_r+0x1c>
 802108c:	690f      	ldr	r7, [r1, #16]
 802108e:	2f00      	cmp	r7, #0
 8021090:	d0a9      	beq.n	8020fe6 <__sflush_r+0x1a>
 8021092:	0793      	lsls	r3, r2, #30
 8021094:	680e      	ldr	r6, [r1, #0]
 8021096:	bf08      	it	eq
 8021098:	694b      	ldreq	r3, [r1, #20]
 802109a:	600f      	str	r7, [r1, #0]
 802109c:	bf18      	it	ne
 802109e:	2300      	movne	r3, #0
 80210a0:	eba6 0807 	sub.w	r8, r6, r7
 80210a4:	608b      	str	r3, [r1, #8]
 80210a6:	f1b8 0f00 	cmp.w	r8, #0
 80210aa:	dd9c      	ble.n	8020fe6 <__sflush_r+0x1a>
 80210ac:	6a21      	ldr	r1, [r4, #32]
 80210ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80210b0:	4643      	mov	r3, r8
 80210b2:	463a      	mov	r2, r7
 80210b4:	4628      	mov	r0, r5
 80210b6:	47b0      	blx	r6
 80210b8:	2800      	cmp	r0, #0
 80210ba:	dc06      	bgt.n	80210ca <__sflush_r+0xfe>
 80210bc:	89a3      	ldrh	r3, [r4, #12]
 80210be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80210c2:	81a3      	strh	r3, [r4, #12]
 80210c4:	f04f 30ff 	mov.w	r0, #4294967295
 80210c8:	e78e      	b.n	8020fe8 <__sflush_r+0x1c>
 80210ca:	4407      	add	r7, r0
 80210cc:	eba8 0800 	sub.w	r8, r8, r0
 80210d0:	e7e9      	b.n	80210a6 <__sflush_r+0xda>
 80210d2:	bf00      	nop
 80210d4:	20400001 	.word	0x20400001

080210d8 <_fflush_r>:
 80210d8:	b538      	push	{r3, r4, r5, lr}
 80210da:	690b      	ldr	r3, [r1, #16]
 80210dc:	4605      	mov	r5, r0
 80210de:	460c      	mov	r4, r1
 80210e0:	b913      	cbnz	r3, 80210e8 <_fflush_r+0x10>
 80210e2:	2500      	movs	r5, #0
 80210e4:	4628      	mov	r0, r5
 80210e6:	bd38      	pop	{r3, r4, r5, pc}
 80210e8:	b118      	cbz	r0, 80210f2 <_fflush_r+0x1a>
 80210ea:	6983      	ldr	r3, [r0, #24]
 80210ec:	b90b      	cbnz	r3, 80210f2 <_fflush_r+0x1a>
 80210ee:	f7fd f831 	bl	801e154 <__sinit>
 80210f2:	4b14      	ldr	r3, [pc, #80]	; (8021144 <_fflush_r+0x6c>)
 80210f4:	429c      	cmp	r4, r3
 80210f6:	d11b      	bne.n	8021130 <_fflush_r+0x58>
 80210f8:	686c      	ldr	r4, [r5, #4]
 80210fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80210fe:	2b00      	cmp	r3, #0
 8021100:	d0ef      	beq.n	80210e2 <_fflush_r+0xa>
 8021102:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8021104:	07d0      	lsls	r0, r2, #31
 8021106:	d404      	bmi.n	8021112 <_fflush_r+0x3a>
 8021108:	0599      	lsls	r1, r3, #22
 802110a:	d402      	bmi.n	8021112 <_fflush_r+0x3a>
 802110c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802110e:	f7e5 fefb 	bl	8006f08 <__retarget_lock_acquire_recursive>
 8021112:	4628      	mov	r0, r5
 8021114:	4621      	mov	r1, r4
 8021116:	f7ff ff59 	bl	8020fcc <__sflush_r>
 802111a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802111c:	07da      	lsls	r2, r3, #31
 802111e:	4605      	mov	r5, r0
 8021120:	d4e0      	bmi.n	80210e4 <_fflush_r+0xc>
 8021122:	89a3      	ldrh	r3, [r4, #12]
 8021124:	059b      	lsls	r3, r3, #22
 8021126:	d4dd      	bmi.n	80210e4 <_fflush_r+0xc>
 8021128:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802112a:	f7e5 ff01 	bl	8006f30 <__retarget_lock_release_recursive>
 802112e:	e7d9      	b.n	80210e4 <_fflush_r+0xc>
 8021130:	4b05      	ldr	r3, [pc, #20]	; (8021148 <_fflush_r+0x70>)
 8021132:	429c      	cmp	r4, r3
 8021134:	d101      	bne.n	802113a <_fflush_r+0x62>
 8021136:	68ac      	ldr	r4, [r5, #8]
 8021138:	e7df      	b.n	80210fa <_fflush_r+0x22>
 802113a:	4b04      	ldr	r3, [pc, #16]	; (802114c <_fflush_r+0x74>)
 802113c:	429c      	cmp	r4, r3
 802113e:	bf08      	it	eq
 8021140:	68ec      	ldreq	r4, [r5, #12]
 8021142:	e7da      	b.n	80210fa <_fflush_r+0x22>
 8021144:	08027060 	.word	0x08027060
 8021148:	08027080 	.word	0x08027080
 802114c:	08027040 	.word	0x08027040

08021150 <fiprintf>:
 8021150:	b40e      	push	{r1, r2, r3}
 8021152:	b503      	push	{r0, r1, lr}
 8021154:	4601      	mov	r1, r0
 8021156:	ab03      	add	r3, sp, #12
 8021158:	4805      	ldr	r0, [pc, #20]	; (8021170 <fiprintf+0x20>)
 802115a:	f853 2b04 	ldr.w	r2, [r3], #4
 802115e:	6800      	ldr	r0, [r0, #0]
 8021160:	9301      	str	r3, [sp, #4]
 8021162:	f001 fbcd 	bl	8022900 <_vfiprintf_r>
 8021166:	b002      	add	sp, #8
 8021168:	f85d eb04 	ldr.w	lr, [sp], #4
 802116c:	b003      	add	sp, #12
 802116e:	4770      	bx	lr
 8021170:	200003b8 	.word	0x200003b8

08021174 <rshift>:
 8021174:	6903      	ldr	r3, [r0, #16]
 8021176:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 802117a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 802117e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8021182:	f100 0414 	add.w	r4, r0, #20
 8021186:	dd45      	ble.n	8021214 <rshift+0xa0>
 8021188:	f011 011f 	ands.w	r1, r1, #31
 802118c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8021190:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8021194:	d10c      	bne.n	80211b0 <rshift+0x3c>
 8021196:	f100 0710 	add.w	r7, r0, #16
 802119a:	4629      	mov	r1, r5
 802119c:	42b1      	cmp	r1, r6
 802119e:	d334      	bcc.n	802120a <rshift+0x96>
 80211a0:	1a9b      	subs	r3, r3, r2
 80211a2:	009b      	lsls	r3, r3, #2
 80211a4:	1eea      	subs	r2, r5, #3
 80211a6:	4296      	cmp	r6, r2
 80211a8:	bf38      	it	cc
 80211aa:	2300      	movcc	r3, #0
 80211ac:	4423      	add	r3, r4
 80211ae:	e015      	b.n	80211dc <rshift+0x68>
 80211b0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80211b4:	f1c1 0820 	rsb	r8, r1, #32
 80211b8:	40cf      	lsrs	r7, r1
 80211ba:	f105 0e04 	add.w	lr, r5, #4
 80211be:	46a1      	mov	r9, r4
 80211c0:	4576      	cmp	r6, lr
 80211c2:	46f4      	mov	ip, lr
 80211c4:	d815      	bhi.n	80211f2 <rshift+0x7e>
 80211c6:	1a9b      	subs	r3, r3, r2
 80211c8:	009a      	lsls	r2, r3, #2
 80211ca:	3a04      	subs	r2, #4
 80211cc:	3501      	adds	r5, #1
 80211ce:	42ae      	cmp	r6, r5
 80211d0:	bf38      	it	cc
 80211d2:	2200      	movcc	r2, #0
 80211d4:	18a3      	adds	r3, r4, r2
 80211d6:	50a7      	str	r7, [r4, r2]
 80211d8:	b107      	cbz	r7, 80211dc <rshift+0x68>
 80211da:	3304      	adds	r3, #4
 80211dc:	1b1a      	subs	r2, r3, r4
 80211de:	42a3      	cmp	r3, r4
 80211e0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80211e4:	bf08      	it	eq
 80211e6:	2300      	moveq	r3, #0
 80211e8:	6102      	str	r2, [r0, #16]
 80211ea:	bf08      	it	eq
 80211ec:	6143      	streq	r3, [r0, #20]
 80211ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80211f2:	f8dc c000 	ldr.w	ip, [ip]
 80211f6:	fa0c fc08 	lsl.w	ip, ip, r8
 80211fa:	ea4c 0707 	orr.w	r7, ip, r7
 80211fe:	f849 7b04 	str.w	r7, [r9], #4
 8021202:	f85e 7b04 	ldr.w	r7, [lr], #4
 8021206:	40cf      	lsrs	r7, r1
 8021208:	e7da      	b.n	80211c0 <rshift+0x4c>
 802120a:	f851 cb04 	ldr.w	ip, [r1], #4
 802120e:	f847 cf04 	str.w	ip, [r7, #4]!
 8021212:	e7c3      	b.n	802119c <rshift+0x28>
 8021214:	4623      	mov	r3, r4
 8021216:	e7e1      	b.n	80211dc <rshift+0x68>

08021218 <__hexdig_fun>:
 8021218:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 802121c:	2b09      	cmp	r3, #9
 802121e:	d802      	bhi.n	8021226 <__hexdig_fun+0xe>
 8021220:	3820      	subs	r0, #32
 8021222:	b2c0      	uxtb	r0, r0
 8021224:	4770      	bx	lr
 8021226:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 802122a:	2b05      	cmp	r3, #5
 802122c:	d801      	bhi.n	8021232 <__hexdig_fun+0x1a>
 802122e:	3847      	subs	r0, #71	; 0x47
 8021230:	e7f7      	b.n	8021222 <__hexdig_fun+0xa>
 8021232:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8021236:	2b05      	cmp	r3, #5
 8021238:	d801      	bhi.n	802123e <__hexdig_fun+0x26>
 802123a:	3827      	subs	r0, #39	; 0x27
 802123c:	e7f1      	b.n	8021222 <__hexdig_fun+0xa>
 802123e:	2000      	movs	r0, #0
 8021240:	4770      	bx	lr
	...

08021244 <__gethex>:
 8021244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021248:	ed2d 8b02 	vpush	{d8}
 802124c:	b089      	sub	sp, #36	; 0x24
 802124e:	ee08 0a10 	vmov	s16, r0
 8021252:	9304      	str	r3, [sp, #16]
 8021254:	4bbc      	ldr	r3, [pc, #752]	; (8021548 <__gethex+0x304>)
 8021256:	681b      	ldr	r3, [r3, #0]
 8021258:	9301      	str	r3, [sp, #4]
 802125a:	4618      	mov	r0, r3
 802125c:	468b      	mov	fp, r1
 802125e:	4690      	mov	r8, r2
 8021260:	f7de ffb6 	bl	80001d0 <strlen>
 8021264:	9b01      	ldr	r3, [sp, #4]
 8021266:	f8db 2000 	ldr.w	r2, [fp]
 802126a:	4403      	add	r3, r0
 802126c:	4682      	mov	sl, r0
 802126e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8021272:	9305      	str	r3, [sp, #20]
 8021274:	1c93      	adds	r3, r2, #2
 8021276:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 802127a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 802127e:	32fe      	adds	r2, #254	; 0xfe
 8021280:	18d1      	adds	r1, r2, r3
 8021282:	461f      	mov	r7, r3
 8021284:	f813 0b01 	ldrb.w	r0, [r3], #1
 8021288:	9100      	str	r1, [sp, #0]
 802128a:	2830      	cmp	r0, #48	; 0x30
 802128c:	d0f8      	beq.n	8021280 <__gethex+0x3c>
 802128e:	f7ff ffc3 	bl	8021218 <__hexdig_fun>
 8021292:	4604      	mov	r4, r0
 8021294:	2800      	cmp	r0, #0
 8021296:	d13a      	bne.n	802130e <__gethex+0xca>
 8021298:	9901      	ldr	r1, [sp, #4]
 802129a:	4652      	mov	r2, sl
 802129c:	4638      	mov	r0, r7
 802129e:	f7fe f8fb 	bl	801f498 <strncmp>
 80212a2:	4605      	mov	r5, r0
 80212a4:	2800      	cmp	r0, #0
 80212a6:	d168      	bne.n	802137a <__gethex+0x136>
 80212a8:	f817 000a 	ldrb.w	r0, [r7, sl]
 80212ac:	eb07 060a 	add.w	r6, r7, sl
 80212b0:	f7ff ffb2 	bl	8021218 <__hexdig_fun>
 80212b4:	2800      	cmp	r0, #0
 80212b6:	d062      	beq.n	802137e <__gethex+0x13a>
 80212b8:	4633      	mov	r3, r6
 80212ba:	7818      	ldrb	r0, [r3, #0]
 80212bc:	2830      	cmp	r0, #48	; 0x30
 80212be:	461f      	mov	r7, r3
 80212c0:	f103 0301 	add.w	r3, r3, #1
 80212c4:	d0f9      	beq.n	80212ba <__gethex+0x76>
 80212c6:	f7ff ffa7 	bl	8021218 <__hexdig_fun>
 80212ca:	2301      	movs	r3, #1
 80212cc:	fab0 f480 	clz	r4, r0
 80212d0:	0964      	lsrs	r4, r4, #5
 80212d2:	4635      	mov	r5, r6
 80212d4:	9300      	str	r3, [sp, #0]
 80212d6:	463a      	mov	r2, r7
 80212d8:	4616      	mov	r6, r2
 80212da:	3201      	adds	r2, #1
 80212dc:	7830      	ldrb	r0, [r6, #0]
 80212de:	f7ff ff9b 	bl	8021218 <__hexdig_fun>
 80212e2:	2800      	cmp	r0, #0
 80212e4:	d1f8      	bne.n	80212d8 <__gethex+0x94>
 80212e6:	9901      	ldr	r1, [sp, #4]
 80212e8:	4652      	mov	r2, sl
 80212ea:	4630      	mov	r0, r6
 80212ec:	f7fe f8d4 	bl	801f498 <strncmp>
 80212f0:	b980      	cbnz	r0, 8021314 <__gethex+0xd0>
 80212f2:	b94d      	cbnz	r5, 8021308 <__gethex+0xc4>
 80212f4:	eb06 050a 	add.w	r5, r6, sl
 80212f8:	462a      	mov	r2, r5
 80212fa:	4616      	mov	r6, r2
 80212fc:	3201      	adds	r2, #1
 80212fe:	7830      	ldrb	r0, [r6, #0]
 8021300:	f7ff ff8a 	bl	8021218 <__hexdig_fun>
 8021304:	2800      	cmp	r0, #0
 8021306:	d1f8      	bne.n	80212fa <__gethex+0xb6>
 8021308:	1bad      	subs	r5, r5, r6
 802130a:	00ad      	lsls	r5, r5, #2
 802130c:	e004      	b.n	8021318 <__gethex+0xd4>
 802130e:	2400      	movs	r4, #0
 8021310:	4625      	mov	r5, r4
 8021312:	e7e0      	b.n	80212d6 <__gethex+0x92>
 8021314:	2d00      	cmp	r5, #0
 8021316:	d1f7      	bne.n	8021308 <__gethex+0xc4>
 8021318:	7833      	ldrb	r3, [r6, #0]
 802131a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 802131e:	2b50      	cmp	r3, #80	; 0x50
 8021320:	d13b      	bne.n	802139a <__gethex+0x156>
 8021322:	7873      	ldrb	r3, [r6, #1]
 8021324:	2b2b      	cmp	r3, #43	; 0x2b
 8021326:	d02c      	beq.n	8021382 <__gethex+0x13e>
 8021328:	2b2d      	cmp	r3, #45	; 0x2d
 802132a:	d02e      	beq.n	802138a <__gethex+0x146>
 802132c:	1c71      	adds	r1, r6, #1
 802132e:	f04f 0900 	mov.w	r9, #0
 8021332:	7808      	ldrb	r0, [r1, #0]
 8021334:	f7ff ff70 	bl	8021218 <__hexdig_fun>
 8021338:	1e43      	subs	r3, r0, #1
 802133a:	b2db      	uxtb	r3, r3
 802133c:	2b18      	cmp	r3, #24
 802133e:	d82c      	bhi.n	802139a <__gethex+0x156>
 8021340:	f1a0 0210 	sub.w	r2, r0, #16
 8021344:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8021348:	f7ff ff66 	bl	8021218 <__hexdig_fun>
 802134c:	1e43      	subs	r3, r0, #1
 802134e:	b2db      	uxtb	r3, r3
 8021350:	2b18      	cmp	r3, #24
 8021352:	d91d      	bls.n	8021390 <__gethex+0x14c>
 8021354:	f1b9 0f00 	cmp.w	r9, #0
 8021358:	d000      	beq.n	802135c <__gethex+0x118>
 802135a:	4252      	negs	r2, r2
 802135c:	4415      	add	r5, r2
 802135e:	f8cb 1000 	str.w	r1, [fp]
 8021362:	b1e4      	cbz	r4, 802139e <__gethex+0x15a>
 8021364:	9b00      	ldr	r3, [sp, #0]
 8021366:	2b00      	cmp	r3, #0
 8021368:	bf14      	ite	ne
 802136a:	2700      	movne	r7, #0
 802136c:	2706      	moveq	r7, #6
 802136e:	4638      	mov	r0, r7
 8021370:	b009      	add	sp, #36	; 0x24
 8021372:	ecbd 8b02 	vpop	{d8}
 8021376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802137a:	463e      	mov	r6, r7
 802137c:	4625      	mov	r5, r4
 802137e:	2401      	movs	r4, #1
 8021380:	e7ca      	b.n	8021318 <__gethex+0xd4>
 8021382:	f04f 0900 	mov.w	r9, #0
 8021386:	1cb1      	adds	r1, r6, #2
 8021388:	e7d3      	b.n	8021332 <__gethex+0xee>
 802138a:	f04f 0901 	mov.w	r9, #1
 802138e:	e7fa      	b.n	8021386 <__gethex+0x142>
 8021390:	230a      	movs	r3, #10
 8021392:	fb03 0202 	mla	r2, r3, r2, r0
 8021396:	3a10      	subs	r2, #16
 8021398:	e7d4      	b.n	8021344 <__gethex+0x100>
 802139a:	4631      	mov	r1, r6
 802139c:	e7df      	b.n	802135e <__gethex+0x11a>
 802139e:	1bf3      	subs	r3, r6, r7
 80213a0:	3b01      	subs	r3, #1
 80213a2:	4621      	mov	r1, r4
 80213a4:	2b07      	cmp	r3, #7
 80213a6:	dc0b      	bgt.n	80213c0 <__gethex+0x17c>
 80213a8:	ee18 0a10 	vmov	r0, s16
 80213ac:	f000 fa86 	bl	80218bc <_Balloc>
 80213b0:	4604      	mov	r4, r0
 80213b2:	b940      	cbnz	r0, 80213c6 <__gethex+0x182>
 80213b4:	4b65      	ldr	r3, [pc, #404]	; (802154c <__gethex+0x308>)
 80213b6:	4602      	mov	r2, r0
 80213b8:	21de      	movs	r1, #222	; 0xde
 80213ba:	4865      	ldr	r0, [pc, #404]	; (8021550 <__gethex+0x30c>)
 80213bc:	f7fe ff58 	bl	8020270 <__assert_func>
 80213c0:	3101      	adds	r1, #1
 80213c2:	105b      	asrs	r3, r3, #1
 80213c4:	e7ee      	b.n	80213a4 <__gethex+0x160>
 80213c6:	f100 0914 	add.w	r9, r0, #20
 80213ca:	f04f 0b00 	mov.w	fp, #0
 80213ce:	f1ca 0301 	rsb	r3, sl, #1
 80213d2:	f8cd 9008 	str.w	r9, [sp, #8]
 80213d6:	f8cd b000 	str.w	fp, [sp]
 80213da:	9306      	str	r3, [sp, #24]
 80213dc:	42b7      	cmp	r7, r6
 80213de:	d340      	bcc.n	8021462 <__gethex+0x21e>
 80213e0:	9802      	ldr	r0, [sp, #8]
 80213e2:	9b00      	ldr	r3, [sp, #0]
 80213e4:	f840 3b04 	str.w	r3, [r0], #4
 80213e8:	eba0 0009 	sub.w	r0, r0, r9
 80213ec:	1080      	asrs	r0, r0, #2
 80213ee:	0146      	lsls	r6, r0, #5
 80213f0:	6120      	str	r0, [r4, #16]
 80213f2:	4618      	mov	r0, r3
 80213f4:	f000 fb58 	bl	8021aa8 <__hi0bits>
 80213f8:	1a30      	subs	r0, r6, r0
 80213fa:	f8d8 6000 	ldr.w	r6, [r8]
 80213fe:	42b0      	cmp	r0, r6
 8021400:	dd63      	ble.n	80214ca <__gethex+0x286>
 8021402:	1b87      	subs	r7, r0, r6
 8021404:	4639      	mov	r1, r7
 8021406:	4620      	mov	r0, r4
 8021408:	f000 fef2 	bl	80221f0 <__any_on>
 802140c:	4682      	mov	sl, r0
 802140e:	b1a8      	cbz	r0, 802143c <__gethex+0x1f8>
 8021410:	1e7b      	subs	r3, r7, #1
 8021412:	1159      	asrs	r1, r3, #5
 8021414:	f003 021f 	and.w	r2, r3, #31
 8021418:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 802141c:	f04f 0a01 	mov.w	sl, #1
 8021420:	fa0a f202 	lsl.w	r2, sl, r2
 8021424:	420a      	tst	r2, r1
 8021426:	d009      	beq.n	802143c <__gethex+0x1f8>
 8021428:	4553      	cmp	r3, sl
 802142a:	dd05      	ble.n	8021438 <__gethex+0x1f4>
 802142c:	1eb9      	subs	r1, r7, #2
 802142e:	4620      	mov	r0, r4
 8021430:	f000 fede 	bl	80221f0 <__any_on>
 8021434:	2800      	cmp	r0, #0
 8021436:	d145      	bne.n	80214c4 <__gethex+0x280>
 8021438:	f04f 0a02 	mov.w	sl, #2
 802143c:	4639      	mov	r1, r7
 802143e:	4620      	mov	r0, r4
 8021440:	f7ff fe98 	bl	8021174 <rshift>
 8021444:	443d      	add	r5, r7
 8021446:	f8d8 3008 	ldr.w	r3, [r8, #8]
 802144a:	42ab      	cmp	r3, r5
 802144c:	da4c      	bge.n	80214e8 <__gethex+0x2a4>
 802144e:	ee18 0a10 	vmov	r0, s16
 8021452:	4621      	mov	r1, r4
 8021454:	f000 fa72 	bl	802193c <_Bfree>
 8021458:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802145a:	2300      	movs	r3, #0
 802145c:	6013      	str	r3, [r2, #0]
 802145e:	27a3      	movs	r7, #163	; 0xa3
 8021460:	e785      	b.n	802136e <__gethex+0x12a>
 8021462:	1e73      	subs	r3, r6, #1
 8021464:	9a05      	ldr	r2, [sp, #20]
 8021466:	9303      	str	r3, [sp, #12]
 8021468:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 802146c:	4293      	cmp	r3, r2
 802146e:	d019      	beq.n	80214a4 <__gethex+0x260>
 8021470:	f1bb 0f20 	cmp.w	fp, #32
 8021474:	d107      	bne.n	8021486 <__gethex+0x242>
 8021476:	9b02      	ldr	r3, [sp, #8]
 8021478:	9a00      	ldr	r2, [sp, #0]
 802147a:	f843 2b04 	str.w	r2, [r3], #4
 802147e:	9302      	str	r3, [sp, #8]
 8021480:	2300      	movs	r3, #0
 8021482:	9300      	str	r3, [sp, #0]
 8021484:	469b      	mov	fp, r3
 8021486:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 802148a:	f7ff fec5 	bl	8021218 <__hexdig_fun>
 802148e:	9b00      	ldr	r3, [sp, #0]
 8021490:	f000 000f 	and.w	r0, r0, #15
 8021494:	fa00 f00b 	lsl.w	r0, r0, fp
 8021498:	4303      	orrs	r3, r0
 802149a:	9300      	str	r3, [sp, #0]
 802149c:	f10b 0b04 	add.w	fp, fp, #4
 80214a0:	9b03      	ldr	r3, [sp, #12]
 80214a2:	e00d      	b.n	80214c0 <__gethex+0x27c>
 80214a4:	9b03      	ldr	r3, [sp, #12]
 80214a6:	9a06      	ldr	r2, [sp, #24]
 80214a8:	4413      	add	r3, r2
 80214aa:	42bb      	cmp	r3, r7
 80214ac:	d3e0      	bcc.n	8021470 <__gethex+0x22c>
 80214ae:	4618      	mov	r0, r3
 80214b0:	9901      	ldr	r1, [sp, #4]
 80214b2:	9307      	str	r3, [sp, #28]
 80214b4:	4652      	mov	r2, sl
 80214b6:	f7fd ffef 	bl	801f498 <strncmp>
 80214ba:	9b07      	ldr	r3, [sp, #28]
 80214bc:	2800      	cmp	r0, #0
 80214be:	d1d7      	bne.n	8021470 <__gethex+0x22c>
 80214c0:	461e      	mov	r6, r3
 80214c2:	e78b      	b.n	80213dc <__gethex+0x198>
 80214c4:	f04f 0a03 	mov.w	sl, #3
 80214c8:	e7b8      	b.n	802143c <__gethex+0x1f8>
 80214ca:	da0a      	bge.n	80214e2 <__gethex+0x29e>
 80214cc:	1a37      	subs	r7, r6, r0
 80214ce:	4621      	mov	r1, r4
 80214d0:	ee18 0a10 	vmov	r0, s16
 80214d4:	463a      	mov	r2, r7
 80214d6:	f000 fc4d 	bl	8021d74 <__lshift>
 80214da:	1bed      	subs	r5, r5, r7
 80214dc:	4604      	mov	r4, r0
 80214de:	f100 0914 	add.w	r9, r0, #20
 80214e2:	f04f 0a00 	mov.w	sl, #0
 80214e6:	e7ae      	b.n	8021446 <__gethex+0x202>
 80214e8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80214ec:	42a8      	cmp	r0, r5
 80214ee:	dd72      	ble.n	80215d6 <__gethex+0x392>
 80214f0:	1b45      	subs	r5, r0, r5
 80214f2:	42ae      	cmp	r6, r5
 80214f4:	dc36      	bgt.n	8021564 <__gethex+0x320>
 80214f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80214fa:	2b02      	cmp	r3, #2
 80214fc:	d02a      	beq.n	8021554 <__gethex+0x310>
 80214fe:	2b03      	cmp	r3, #3
 8021500:	d02c      	beq.n	802155c <__gethex+0x318>
 8021502:	2b01      	cmp	r3, #1
 8021504:	d115      	bne.n	8021532 <__gethex+0x2ee>
 8021506:	42ae      	cmp	r6, r5
 8021508:	d113      	bne.n	8021532 <__gethex+0x2ee>
 802150a:	2e01      	cmp	r6, #1
 802150c:	d10b      	bne.n	8021526 <__gethex+0x2e2>
 802150e:	9a04      	ldr	r2, [sp, #16]
 8021510:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8021514:	6013      	str	r3, [r2, #0]
 8021516:	2301      	movs	r3, #1
 8021518:	6123      	str	r3, [r4, #16]
 802151a:	f8c9 3000 	str.w	r3, [r9]
 802151e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8021520:	2762      	movs	r7, #98	; 0x62
 8021522:	601c      	str	r4, [r3, #0]
 8021524:	e723      	b.n	802136e <__gethex+0x12a>
 8021526:	1e71      	subs	r1, r6, #1
 8021528:	4620      	mov	r0, r4
 802152a:	f000 fe61 	bl	80221f0 <__any_on>
 802152e:	2800      	cmp	r0, #0
 8021530:	d1ed      	bne.n	802150e <__gethex+0x2ca>
 8021532:	ee18 0a10 	vmov	r0, s16
 8021536:	4621      	mov	r1, r4
 8021538:	f000 fa00 	bl	802193c <_Bfree>
 802153c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 802153e:	2300      	movs	r3, #0
 8021540:	6013      	str	r3, [r2, #0]
 8021542:	2750      	movs	r7, #80	; 0x50
 8021544:	e713      	b.n	802136e <__gethex+0x12a>
 8021546:	bf00      	nop
 8021548:	080272cc 	.word	0x080272cc
 802154c:	08027250 	.word	0x08027250
 8021550:	08027261 	.word	0x08027261
 8021554:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8021556:	2b00      	cmp	r3, #0
 8021558:	d1eb      	bne.n	8021532 <__gethex+0x2ee>
 802155a:	e7d8      	b.n	802150e <__gethex+0x2ca>
 802155c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 802155e:	2b00      	cmp	r3, #0
 8021560:	d1d5      	bne.n	802150e <__gethex+0x2ca>
 8021562:	e7e6      	b.n	8021532 <__gethex+0x2ee>
 8021564:	1e6f      	subs	r7, r5, #1
 8021566:	f1ba 0f00 	cmp.w	sl, #0
 802156a:	d131      	bne.n	80215d0 <__gethex+0x38c>
 802156c:	b127      	cbz	r7, 8021578 <__gethex+0x334>
 802156e:	4639      	mov	r1, r7
 8021570:	4620      	mov	r0, r4
 8021572:	f000 fe3d 	bl	80221f0 <__any_on>
 8021576:	4682      	mov	sl, r0
 8021578:	117b      	asrs	r3, r7, #5
 802157a:	2101      	movs	r1, #1
 802157c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8021580:	f007 071f 	and.w	r7, r7, #31
 8021584:	fa01 f707 	lsl.w	r7, r1, r7
 8021588:	421f      	tst	r7, r3
 802158a:	4629      	mov	r1, r5
 802158c:	4620      	mov	r0, r4
 802158e:	bf18      	it	ne
 8021590:	f04a 0a02 	orrne.w	sl, sl, #2
 8021594:	1b76      	subs	r6, r6, r5
 8021596:	f7ff fded 	bl	8021174 <rshift>
 802159a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 802159e:	2702      	movs	r7, #2
 80215a0:	f1ba 0f00 	cmp.w	sl, #0
 80215a4:	d048      	beq.n	8021638 <__gethex+0x3f4>
 80215a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80215aa:	2b02      	cmp	r3, #2
 80215ac:	d015      	beq.n	80215da <__gethex+0x396>
 80215ae:	2b03      	cmp	r3, #3
 80215b0:	d017      	beq.n	80215e2 <__gethex+0x39e>
 80215b2:	2b01      	cmp	r3, #1
 80215b4:	d109      	bne.n	80215ca <__gethex+0x386>
 80215b6:	f01a 0f02 	tst.w	sl, #2
 80215ba:	d006      	beq.n	80215ca <__gethex+0x386>
 80215bc:	f8d9 0000 	ldr.w	r0, [r9]
 80215c0:	ea4a 0a00 	orr.w	sl, sl, r0
 80215c4:	f01a 0f01 	tst.w	sl, #1
 80215c8:	d10e      	bne.n	80215e8 <__gethex+0x3a4>
 80215ca:	f047 0710 	orr.w	r7, r7, #16
 80215ce:	e033      	b.n	8021638 <__gethex+0x3f4>
 80215d0:	f04f 0a01 	mov.w	sl, #1
 80215d4:	e7d0      	b.n	8021578 <__gethex+0x334>
 80215d6:	2701      	movs	r7, #1
 80215d8:	e7e2      	b.n	80215a0 <__gethex+0x35c>
 80215da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80215dc:	f1c3 0301 	rsb	r3, r3, #1
 80215e0:	9315      	str	r3, [sp, #84]	; 0x54
 80215e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80215e4:	2b00      	cmp	r3, #0
 80215e6:	d0f0      	beq.n	80215ca <__gethex+0x386>
 80215e8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80215ec:	f104 0314 	add.w	r3, r4, #20
 80215f0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80215f4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80215f8:	f04f 0c00 	mov.w	ip, #0
 80215fc:	4618      	mov	r0, r3
 80215fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8021602:	f1b2 3fff 	cmp.w	r2, #4294967295
 8021606:	d01c      	beq.n	8021642 <__gethex+0x3fe>
 8021608:	3201      	adds	r2, #1
 802160a:	6002      	str	r2, [r0, #0]
 802160c:	2f02      	cmp	r7, #2
 802160e:	f104 0314 	add.w	r3, r4, #20
 8021612:	d13f      	bne.n	8021694 <__gethex+0x450>
 8021614:	f8d8 2000 	ldr.w	r2, [r8]
 8021618:	3a01      	subs	r2, #1
 802161a:	42b2      	cmp	r2, r6
 802161c:	d10a      	bne.n	8021634 <__gethex+0x3f0>
 802161e:	1171      	asrs	r1, r6, #5
 8021620:	2201      	movs	r2, #1
 8021622:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8021626:	f006 061f 	and.w	r6, r6, #31
 802162a:	fa02 f606 	lsl.w	r6, r2, r6
 802162e:	421e      	tst	r6, r3
 8021630:	bf18      	it	ne
 8021632:	4617      	movne	r7, r2
 8021634:	f047 0720 	orr.w	r7, r7, #32
 8021638:	9b14      	ldr	r3, [sp, #80]	; 0x50
 802163a:	601c      	str	r4, [r3, #0]
 802163c:	9b04      	ldr	r3, [sp, #16]
 802163e:	601d      	str	r5, [r3, #0]
 8021640:	e695      	b.n	802136e <__gethex+0x12a>
 8021642:	4299      	cmp	r1, r3
 8021644:	f843 cc04 	str.w	ip, [r3, #-4]
 8021648:	d8d8      	bhi.n	80215fc <__gethex+0x3b8>
 802164a:	68a3      	ldr	r3, [r4, #8]
 802164c:	459b      	cmp	fp, r3
 802164e:	db19      	blt.n	8021684 <__gethex+0x440>
 8021650:	6861      	ldr	r1, [r4, #4]
 8021652:	ee18 0a10 	vmov	r0, s16
 8021656:	3101      	adds	r1, #1
 8021658:	f000 f930 	bl	80218bc <_Balloc>
 802165c:	4681      	mov	r9, r0
 802165e:	b918      	cbnz	r0, 8021668 <__gethex+0x424>
 8021660:	4b1a      	ldr	r3, [pc, #104]	; (80216cc <__gethex+0x488>)
 8021662:	4602      	mov	r2, r0
 8021664:	2184      	movs	r1, #132	; 0x84
 8021666:	e6a8      	b.n	80213ba <__gethex+0x176>
 8021668:	6922      	ldr	r2, [r4, #16]
 802166a:	3202      	adds	r2, #2
 802166c:	f104 010c 	add.w	r1, r4, #12
 8021670:	0092      	lsls	r2, r2, #2
 8021672:	300c      	adds	r0, #12
 8021674:	f7fc fe46 	bl	801e304 <memcpy>
 8021678:	4621      	mov	r1, r4
 802167a:	ee18 0a10 	vmov	r0, s16
 802167e:	f000 f95d 	bl	802193c <_Bfree>
 8021682:	464c      	mov	r4, r9
 8021684:	6923      	ldr	r3, [r4, #16]
 8021686:	1c5a      	adds	r2, r3, #1
 8021688:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 802168c:	6122      	str	r2, [r4, #16]
 802168e:	2201      	movs	r2, #1
 8021690:	615a      	str	r2, [r3, #20]
 8021692:	e7bb      	b.n	802160c <__gethex+0x3c8>
 8021694:	6922      	ldr	r2, [r4, #16]
 8021696:	455a      	cmp	r2, fp
 8021698:	dd0b      	ble.n	80216b2 <__gethex+0x46e>
 802169a:	2101      	movs	r1, #1
 802169c:	4620      	mov	r0, r4
 802169e:	f7ff fd69 	bl	8021174 <rshift>
 80216a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80216a6:	3501      	adds	r5, #1
 80216a8:	42ab      	cmp	r3, r5
 80216aa:	f6ff aed0 	blt.w	802144e <__gethex+0x20a>
 80216ae:	2701      	movs	r7, #1
 80216b0:	e7c0      	b.n	8021634 <__gethex+0x3f0>
 80216b2:	f016 061f 	ands.w	r6, r6, #31
 80216b6:	d0fa      	beq.n	80216ae <__gethex+0x46a>
 80216b8:	449a      	add	sl, r3
 80216ba:	f1c6 0620 	rsb	r6, r6, #32
 80216be:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80216c2:	f000 f9f1 	bl	8021aa8 <__hi0bits>
 80216c6:	42b0      	cmp	r0, r6
 80216c8:	dbe7      	blt.n	802169a <__gethex+0x456>
 80216ca:	e7f0      	b.n	80216ae <__gethex+0x46a>
 80216cc:	08027250 	.word	0x08027250

080216d0 <L_shift>:
 80216d0:	f1c2 0208 	rsb	r2, r2, #8
 80216d4:	0092      	lsls	r2, r2, #2
 80216d6:	b570      	push	{r4, r5, r6, lr}
 80216d8:	f1c2 0620 	rsb	r6, r2, #32
 80216dc:	6843      	ldr	r3, [r0, #4]
 80216de:	6804      	ldr	r4, [r0, #0]
 80216e0:	fa03 f506 	lsl.w	r5, r3, r6
 80216e4:	432c      	orrs	r4, r5
 80216e6:	40d3      	lsrs	r3, r2
 80216e8:	6004      	str	r4, [r0, #0]
 80216ea:	f840 3f04 	str.w	r3, [r0, #4]!
 80216ee:	4288      	cmp	r0, r1
 80216f0:	d3f4      	bcc.n	80216dc <L_shift+0xc>
 80216f2:	bd70      	pop	{r4, r5, r6, pc}

080216f4 <__match>:
 80216f4:	b530      	push	{r4, r5, lr}
 80216f6:	6803      	ldr	r3, [r0, #0]
 80216f8:	3301      	adds	r3, #1
 80216fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80216fe:	b914      	cbnz	r4, 8021706 <__match+0x12>
 8021700:	6003      	str	r3, [r0, #0]
 8021702:	2001      	movs	r0, #1
 8021704:	bd30      	pop	{r4, r5, pc}
 8021706:	f813 2b01 	ldrb.w	r2, [r3], #1
 802170a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 802170e:	2d19      	cmp	r5, #25
 8021710:	bf98      	it	ls
 8021712:	3220      	addls	r2, #32
 8021714:	42a2      	cmp	r2, r4
 8021716:	d0f0      	beq.n	80216fa <__match+0x6>
 8021718:	2000      	movs	r0, #0
 802171a:	e7f3      	b.n	8021704 <__match+0x10>

0802171c <__hexnan>:
 802171c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021720:	680b      	ldr	r3, [r1, #0]
 8021722:	6801      	ldr	r1, [r0, #0]
 8021724:	115e      	asrs	r6, r3, #5
 8021726:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 802172a:	f013 031f 	ands.w	r3, r3, #31
 802172e:	b087      	sub	sp, #28
 8021730:	bf18      	it	ne
 8021732:	3604      	addne	r6, #4
 8021734:	2500      	movs	r5, #0
 8021736:	1f37      	subs	r7, r6, #4
 8021738:	4682      	mov	sl, r0
 802173a:	4690      	mov	r8, r2
 802173c:	9301      	str	r3, [sp, #4]
 802173e:	f846 5c04 	str.w	r5, [r6, #-4]
 8021742:	46b9      	mov	r9, r7
 8021744:	463c      	mov	r4, r7
 8021746:	9502      	str	r5, [sp, #8]
 8021748:	46ab      	mov	fp, r5
 802174a:	784a      	ldrb	r2, [r1, #1]
 802174c:	1c4b      	adds	r3, r1, #1
 802174e:	9303      	str	r3, [sp, #12]
 8021750:	b342      	cbz	r2, 80217a4 <__hexnan+0x88>
 8021752:	4610      	mov	r0, r2
 8021754:	9105      	str	r1, [sp, #20]
 8021756:	9204      	str	r2, [sp, #16]
 8021758:	f7ff fd5e 	bl	8021218 <__hexdig_fun>
 802175c:	2800      	cmp	r0, #0
 802175e:	d14f      	bne.n	8021800 <__hexnan+0xe4>
 8021760:	9a04      	ldr	r2, [sp, #16]
 8021762:	9905      	ldr	r1, [sp, #20]
 8021764:	2a20      	cmp	r2, #32
 8021766:	d818      	bhi.n	802179a <__hexnan+0x7e>
 8021768:	9b02      	ldr	r3, [sp, #8]
 802176a:	459b      	cmp	fp, r3
 802176c:	dd13      	ble.n	8021796 <__hexnan+0x7a>
 802176e:	454c      	cmp	r4, r9
 8021770:	d206      	bcs.n	8021780 <__hexnan+0x64>
 8021772:	2d07      	cmp	r5, #7
 8021774:	dc04      	bgt.n	8021780 <__hexnan+0x64>
 8021776:	462a      	mov	r2, r5
 8021778:	4649      	mov	r1, r9
 802177a:	4620      	mov	r0, r4
 802177c:	f7ff ffa8 	bl	80216d0 <L_shift>
 8021780:	4544      	cmp	r4, r8
 8021782:	d950      	bls.n	8021826 <__hexnan+0x10a>
 8021784:	2300      	movs	r3, #0
 8021786:	f1a4 0904 	sub.w	r9, r4, #4
 802178a:	f844 3c04 	str.w	r3, [r4, #-4]
 802178e:	f8cd b008 	str.w	fp, [sp, #8]
 8021792:	464c      	mov	r4, r9
 8021794:	461d      	mov	r5, r3
 8021796:	9903      	ldr	r1, [sp, #12]
 8021798:	e7d7      	b.n	802174a <__hexnan+0x2e>
 802179a:	2a29      	cmp	r2, #41	; 0x29
 802179c:	d156      	bne.n	802184c <__hexnan+0x130>
 802179e:	3102      	adds	r1, #2
 80217a0:	f8ca 1000 	str.w	r1, [sl]
 80217a4:	f1bb 0f00 	cmp.w	fp, #0
 80217a8:	d050      	beq.n	802184c <__hexnan+0x130>
 80217aa:	454c      	cmp	r4, r9
 80217ac:	d206      	bcs.n	80217bc <__hexnan+0xa0>
 80217ae:	2d07      	cmp	r5, #7
 80217b0:	dc04      	bgt.n	80217bc <__hexnan+0xa0>
 80217b2:	462a      	mov	r2, r5
 80217b4:	4649      	mov	r1, r9
 80217b6:	4620      	mov	r0, r4
 80217b8:	f7ff ff8a 	bl	80216d0 <L_shift>
 80217bc:	4544      	cmp	r4, r8
 80217be:	d934      	bls.n	802182a <__hexnan+0x10e>
 80217c0:	f1a8 0204 	sub.w	r2, r8, #4
 80217c4:	4623      	mov	r3, r4
 80217c6:	f853 1b04 	ldr.w	r1, [r3], #4
 80217ca:	f842 1f04 	str.w	r1, [r2, #4]!
 80217ce:	429f      	cmp	r7, r3
 80217d0:	d2f9      	bcs.n	80217c6 <__hexnan+0xaa>
 80217d2:	1b3b      	subs	r3, r7, r4
 80217d4:	f023 0303 	bic.w	r3, r3, #3
 80217d8:	3304      	adds	r3, #4
 80217da:	3401      	adds	r4, #1
 80217dc:	3e03      	subs	r6, #3
 80217de:	42b4      	cmp	r4, r6
 80217e0:	bf88      	it	hi
 80217e2:	2304      	movhi	r3, #4
 80217e4:	4443      	add	r3, r8
 80217e6:	2200      	movs	r2, #0
 80217e8:	f843 2b04 	str.w	r2, [r3], #4
 80217ec:	429f      	cmp	r7, r3
 80217ee:	d2fb      	bcs.n	80217e8 <__hexnan+0xcc>
 80217f0:	683b      	ldr	r3, [r7, #0]
 80217f2:	b91b      	cbnz	r3, 80217fc <__hexnan+0xe0>
 80217f4:	4547      	cmp	r7, r8
 80217f6:	d127      	bne.n	8021848 <__hexnan+0x12c>
 80217f8:	2301      	movs	r3, #1
 80217fa:	603b      	str	r3, [r7, #0]
 80217fc:	2005      	movs	r0, #5
 80217fe:	e026      	b.n	802184e <__hexnan+0x132>
 8021800:	3501      	adds	r5, #1
 8021802:	2d08      	cmp	r5, #8
 8021804:	f10b 0b01 	add.w	fp, fp, #1
 8021808:	dd06      	ble.n	8021818 <__hexnan+0xfc>
 802180a:	4544      	cmp	r4, r8
 802180c:	d9c3      	bls.n	8021796 <__hexnan+0x7a>
 802180e:	2300      	movs	r3, #0
 8021810:	f844 3c04 	str.w	r3, [r4, #-4]
 8021814:	2501      	movs	r5, #1
 8021816:	3c04      	subs	r4, #4
 8021818:	6822      	ldr	r2, [r4, #0]
 802181a:	f000 000f 	and.w	r0, r0, #15
 802181e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8021822:	6022      	str	r2, [r4, #0]
 8021824:	e7b7      	b.n	8021796 <__hexnan+0x7a>
 8021826:	2508      	movs	r5, #8
 8021828:	e7b5      	b.n	8021796 <__hexnan+0x7a>
 802182a:	9b01      	ldr	r3, [sp, #4]
 802182c:	2b00      	cmp	r3, #0
 802182e:	d0df      	beq.n	80217f0 <__hexnan+0xd4>
 8021830:	f04f 32ff 	mov.w	r2, #4294967295
 8021834:	f1c3 0320 	rsb	r3, r3, #32
 8021838:	fa22 f303 	lsr.w	r3, r2, r3
 802183c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8021840:	401a      	ands	r2, r3
 8021842:	f846 2c04 	str.w	r2, [r6, #-4]
 8021846:	e7d3      	b.n	80217f0 <__hexnan+0xd4>
 8021848:	3f04      	subs	r7, #4
 802184a:	e7d1      	b.n	80217f0 <__hexnan+0xd4>
 802184c:	2004      	movs	r0, #4
 802184e:	b007      	add	sp, #28
 8021850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021854 <_localeconv_r>:
 8021854:	4800      	ldr	r0, [pc, #0]	; (8021858 <_localeconv_r+0x4>)
 8021856:	4770      	bx	lr
 8021858:	20000510 	.word	0x20000510

0802185c <_lseek_r>:
 802185c:	b538      	push	{r3, r4, r5, lr}
 802185e:	4d07      	ldr	r5, [pc, #28]	; (802187c <_lseek_r+0x20>)
 8021860:	4604      	mov	r4, r0
 8021862:	4608      	mov	r0, r1
 8021864:	4611      	mov	r1, r2
 8021866:	2200      	movs	r2, #0
 8021868:	602a      	str	r2, [r5, #0]
 802186a:	461a      	mov	r2, r3
 802186c:	f7e4 ffea 	bl	8006844 <_lseek>
 8021870:	1c43      	adds	r3, r0, #1
 8021872:	d102      	bne.n	802187a <_lseek_r+0x1e>
 8021874:	682b      	ldr	r3, [r5, #0]
 8021876:	b103      	cbz	r3, 802187a <_lseek_r+0x1e>
 8021878:	6023      	str	r3, [r4, #0]
 802187a:	bd38      	pop	{r3, r4, r5, pc}
 802187c:	2000e190 	.word	0x2000e190

08021880 <__ascii_mbtowc>:
 8021880:	b082      	sub	sp, #8
 8021882:	b901      	cbnz	r1, 8021886 <__ascii_mbtowc+0x6>
 8021884:	a901      	add	r1, sp, #4
 8021886:	b142      	cbz	r2, 802189a <__ascii_mbtowc+0x1a>
 8021888:	b14b      	cbz	r3, 802189e <__ascii_mbtowc+0x1e>
 802188a:	7813      	ldrb	r3, [r2, #0]
 802188c:	600b      	str	r3, [r1, #0]
 802188e:	7812      	ldrb	r2, [r2, #0]
 8021890:	1e10      	subs	r0, r2, #0
 8021892:	bf18      	it	ne
 8021894:	2001      	movne	r0, #1
 8021896:	b002      	add	sp, #8
 8021898:	4770      	bx	lr
 802189a:	4610      	mov	r0, r2
 802189c:	e7fb      	b.n	8021896 <__ascii_mbtowc+0x16>
 802189e:	f06f 0001 	mvn.w	r0, #1
 80218a2:	e7f8      	b.n	8021896 <__ascii_mbtowc+0x16>

080218a4 <__malloc_lock>:
 80218a4:	4801      	ldr	r0, [pc, #4]	; (80218ac <__malloc_lock+0x8>)
 80218a6:	f7e5 bb2f 	b.w	8006f08 <__retarget_lock_acquire_recursive>
 80218aa:	bf00      	nop
 80218ac:	20000948 	.word	0x20000948

080218b0 <__malloc_unlock>:
 80218b0:	4801      	ldr	r0, [pc, #4]	; (80218b8 <__malloc_unlock+0x8>)
 80218b2:	f7e5 bb3d 	b.w	8006f30 <__retarget_lock_release_recursive>
 80218b6:	bf00      	nop
 80218b8:	20000948 	.word	0x20000948

080218bc <_Balloc>:
 80218bc:	b570      	push	{r4, r5, r6, lr}
 80218be:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80218c0:	4604      	mov	r4, r0
 80218c2:	460d      	mov	r5, r1
 80218c4:	b976      	cbnz	r6, 80218e4 <_Balloc+0x28>
 80218c6:	2010      	movs	r0, #16
 80218c8:	f7fc fd06 	bl	801e2d8 <malloc>
 80218cc:	4602      	mov	r2, r0
 80218ce:	6260      	str	r0, [r4, #36]	; 0x24
 80218d0:	b920      	cbnz	r0, 80218dc <_Balloc+0x20>
 80218d2:	4b18      	ldr	r3, [pc, #96]	; (8021934 <_Balloc+0x78>)
 80218d4:	4818      	ldr	r0, [pc, #96]	; (8021938 <_Balloc+0x7c>)
 80218d6:	2166      	movs	r1, #102	; 0x66
 80218d8:	f7fe fcca 	bl	8020270 <__assert_func>
 80218dc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80218e0:	6006      	str	r6, [r0, #0]
 80218e2:	60c6      	str	r6, [r0, #12]
 80218e4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80218e6:	68f3      	ldr	r3, [r6, #12]
 80218e8:	b183      	cbz	r3, 802190c <_Balloc+0x50>
 80218ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80218ec:	68db      	ldr	r3, [r3, #12]
 80218ee:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80218f2:	b9b8      	cbnz	r0, 8021924 <_Balloc+0x68>
 80218f4:	2101      	movs	r1, #1
 80218f6:	fa01 f605 	lsl.w	r6, r1, r5
 80218fa:	1d72      	adds	r2, r6, #5
 80218fc:	0092      	lsls	r2, r2, #2
 80218fe:	4620      	mov	r0, r4
 8021900:	f000 fc97 	bl	8022232 <_calloc_r>
 8021904:	b160      	cbz	r0, 8021920 <_Balloc+0x64>
 8021906:	e9c0 5601 	strd	r5, r6, [r0, #4]
 802190a:	e00e      	b.n	802192a <_Balloc+0x6e>
 802190c:	2221      	movs	r2, #33	; 0x21
 802190e:	2104      	movs	r1, #4
 8021910:	4620      	mov	r0, r4
 8021912:	f000 fc8e 	bl	8022232 <_calloc_r>
 8021916:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8021918:	60f0      	str	r0, [r6, #12]
 802191a:	68db      	ldr	r3, [r3, #12]
 802191c:	2b00      	cmp	r3, #0
 802191e:	d1e4      	bne.n	80218ea <_Balloc+0x2e>
 8021920:	2000      	movs	r0, #0
 8021922:	bd70      	pop	{r4, r5, r6, pc}
 8021924:	6802      	ldr	r2, [r0, #0]
 8021926:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 802192a:	2300      	movs	r3, #0
 802192c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8021930:	e7f7      	b.n	8021922 <_Balloc+0x66>
 8021932:	bf00      	nop
 8021934:	080270db 	.word	0x080270db
 8021938:	080272e0 	.word	0x080272e0

0802193c <_Bfree>:
 802193c:	b570      	push	{r4, r5, r6, lr}
 802193e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8021940:	4605      	mov	r5, r0
 8021942:	460c      	mov	r4, r1
 8021944:	b976      	cbnz	r6, 8021964 <_Bfree+0x28>
 8021946:	2010      	movs	r0, #16
 8021948:	f7fc fcc6 	bl	801e2d8 <malloc>
 802194c:	4602      	mov	r2, r0
 802194e:	6268      	str	r0, [r5, #36]	; 0x24
 8021950:	b920      	cbnz	r0, 802195c <_Bfree+0x20>
 8021952:	4b09      	ldr	r3, [pc, #36]	; (8021978 <_Bfree+0x3c>)
 8021954:	4809      	ldr	r0, [pc, #36]	; (802197c <_Bfree+0x40>)
 8021956:	218a      	movs	r1, #138	; 0x8a
 8021958:	f7fe fc8a 	bl	8020270 <__assert_func>
 802195c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8021960:	6006      	str	r6, [r0, #0]
 8021962:	60c6      	str	r6, [r0, #12]
 8021964:	b13c      	cbz	r4, 8021976 <_Bfree+0x3a>
 8021966:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8021968:	6862      	ldr	r2, [r4, #4]
 802196a:	68db      	ldr	r3, [r3, #12]
 802196c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8021970:	6021      	str	r1, [r4, #0]
 8021972:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8021976:	bd70      	pop	{r4, r5, r6, pc}
 8021978:	080270db 	.word	0x080270db
 802197c:	080272e0 	.word	0x080272e0

08021980 <__multadd>:
 8021980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021984:	690e      	ldr	r6, [r1, #16]
 8021986:	4607      	mov	r7, r0
 8021988:	4698      	mov	r8, r3
 802198a:	460c      	mov	r4, r1
 802198c:	f101 0014 	add.w	r0, r1, #20
 8021990:	2300      	movs	r3, #0
 8021992:	6805      	ldr	r5, [r0, #0]
 8021994:	b2a9      	uxth	r1, r5
 8021996:	fb02 8101 	mla	r1, r2, r1, r8
 802199a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 802199e:	0c2d      	lsrs	r5, r5, #16
 80219a0:	fb02 c505 	mla	r5, r2, r5, ip
 80219a4:	b289      	uxth	r1, r1
 80219a6:	3301      	adds	r3, #1
 80219a8:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 80219ac:	429e      	cmp	r6, r3
 80219ae:	f840 1b04 	str.w	r1, [r0], #4
 80219b2:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80219b6:	dcec      	bgt.n	8021992 <__multadd+0x12>
 80219b8:	f1b8 0f00 	cmp.w	r8, #0
 80219bc:	d022      	beq.n	8021a04 <__multadd+0x84>
 80219be:	68a3      	ldr	r3, [r4, #8]
 80219c0:	42b3      	cmp	r3, r6
 80219c2:	dc19      	bgt.n	80219f8 <__multadd+0x78>
 80219c4:	6861      	ldr	r1, [r4, #4]
 80219c6:	4638      	mov	r0, r7
 80219c8:	3101      	adds	r1, #1
 80219ca:	f7ff ff77 	bl	80218bc <_Balloc>
 80219ce:	4605      	mov	r5, r0
 80219d0:	b928      	cbnz	r0, 80219de <__multadd+0x5e>
 80219d2:	4602      	mov	r2, r0
 80219d4:	4b0d      	ldr	r3, [pc, #52]	; (8021a0c <__multadd+0x8c>)
 80219d6:	480e      	ldr	r0, [pc, #56]	; (8021a10 <__multadd+0x90>)
 80219d8:	21b5      	movs	r1, #181	; 0xb5
 80219da:	f7fe fc49 	bl	8020270 <__assert_func>
 80219de:	6922      	ldr	r2, [r4, #16]
 80219e0:	3202      	adds	r2, #2
 80219e2:	f104 010c 	add.w	r1, r4, #12
 80219e6:	0092      	lsls	r2, r2, #2
 80219e8:	300c      	adds	r0, #12
 80219ea:	f7fc fc8b 	bl	801e304 <memcpy>
 80219ee:	4621      	mov	r1, r4
 80219f0:	4638      	mov	r0, r7
 80219f2:	f7ff ffa3 	bl	802193c <_Bfree>
 80219f6:	462c      	mov	r4, r5
 80219f8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80219fc:	3601      	adds	r6, #1
 80219fe:	f8c3 8014 	str.w	r8, [r3, #20]
 8021a02:	6126      	str	r6, [r4, #16]
 8021a04:	4620      	mov	r0, r4
 8021a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021a0a:	bf00      	nop
 8021a0c:	08027250 	.word	0x08027250
 8021a10:	080272e0 	.word	0x080272e0

08021a14 <__s2b>:
 8021a14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021a18:	460c      	mov	r4, r1
 8021a1a:	4615      	mov	r5, r2
 8021a1c:	461f      	mov	r7, r3
 8021a1e:	2209      	movs	r2, #9
 8021a20:	3308      	adds	r3, #8
 8021a22:	4606      	mov	r6, r0
 8021a24:	fb93 f3f2 	sdiv	r3, r3, r2
 8021a28:	2100      	movs	r1, #0
 8021a2a:	2201      	movs	r2, #1
 8021a2c:	429a      	cmp	r2, r3
 8021a2e:	db09      	blt.n	8021a44 <__s2b+0x30>
 8021a30:	4630      	mov	r0, r6
 8021a32:	f7ff ff43 	bl	80218bc <_Balloc>
 8021a36:	b940      	cbnz	r0, 8021a4a <__s2b+0x36>
 8021a38:	4602      	mov	r2, r0
 8021a3a:	4b19      	ldr	r3, [pc, #100]	; (8021aa0 <__s2b+0x8c>)
 8021a3c:	4819      	ldr	r0, [pc, #100]	; (8021aa4 <__s2b+0x90>)
 8021a3e:	21ce      	movs	r1, #206	; 0xce
 8021a40:	f7fe fc16 	bl	8020270 <__assert_func>
 8021a44:	0052      	lsls	r2, r2, #1
 8021a46:	3101      	adds	r1, #1
 8021a48:	e7f0      	b.n	8021a2c <__s2b+0x18>
 8021a4a:	9b08      	ldr	r3, [sp, #32]
 8021a4c:	6143      	str	r3, [r0, #20]
 8021a4e:	2d09      	cmp	r5, #9
 8021a50:	f04f 0301 	mov.w	r3, #1
 8021a54:	6103      	str	r3, [r0, #16]
 8021a56:	dd16      	ble.n	8021a86 <__s2b+0x72>
 8021a58:	f104 0909 	add.w	r9, r4, #9
 8021a5c:	46c8      	mov	r8, r9
 8021a5e:	442c      	add	r4, r5
 8021a60:	f818 3b01 	ldrb.w	r3, [r8], #1
 8021a64:	4601      	mov	r1, r0
 8021a66:	3b30      	subs	r3, #48	; 0x30
 8021a68:	220a      	movs	r2, #10
 8021a6a:	4630      	mov	r0, r6
 8021a6c:	f7ff ff88 	bl	8021980 <__multadd>
 8021a70:	45a0      	cmp	r8, r4
 8021a72:	d1f5      	bne.n	8021a60 <__s2b+0x4c>
 8021a74:	f1a5 0408 	sub.w	r4, r5, #8
 8021a78:	444c      	add	r4, r9
 8021a7a:	1b2d      	subs	r5, r5, r4
 8021a7c:	1963      	adds	r3, r4, r5
 8021a7e:	42bb      	cmp	r3, r7
 8021a80:	db04      	blt.n	8021a8c <__s2b+0x78>
 8021a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021a86:	340a      	adds	r4, #10
 8021a88:	2509      	movs	r5, #9
 8021a8a:	e7f6      	b.n	8021a7a <__s2b+0x66>
 8021a8c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8021a90:	4601      	mov	r1, r0
 8021a92:	3b30      	subs	r3, #48	; 0x30
 8021a94:	220a      	movs	r2, #10
 8021a96:	4630      	mov	r0, r6
 8021a98:	f7ff ff72 	bl	8021980 <__multadd>
 8021a9c:	e7ee      	b.n	8021a7c <__s2b+0x68>
 8021a9e:	bf00      	nop
 8021aa0:	08027250 	.word	0x08027250
 8021aa4:	080272e0 	.word	0x080272e0

08021aa8 <__hi0bits>:
 8021aa8:	0c03      	lsrs	r3, r0, #16
 8021aaa:	041b      	lsls	r3, r3, #16
 8021aac:	b9d3      	cbnz	r3, 8021ae4 <__hi0bits+0x3c>
 8021aae:	0400      	lsls	r0, r0, #16
 8021ab0:	2310      	movs	r3, #16
 8021ab2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8021ab6:	bf04      	itt	eq
 8021ab8:	0200      	lsleq	r0, r0, #8
 8021aba:	3308      	addeq	r3, #8
 8021abc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8021ac0:	bf04      	itt	eq
 8021ac2:	0100      	lsleq	r0, r0, #4
 8021ac4:	3304      	addeq	r3, #4
 8021ac6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8021aca:	bf04      	itt	eq
 8021acc:	0080      	lsleq	r0, r0, #2
 8021ace:	3302      	addeq	r3, #2
 8021ad0:	2800      	cmp	r0, #0
 8021ad2:	db05      	blt.n	8021ae0 <__hi0bits+0x38>
 8021ad4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8021ad8:	f103 0301 	add.w	r3, r3, #1
 8021adc:	bf08      	it	eq
 8021ade:	2320      	moveq	r3, #32
 8021ae0:	4618      	mov	r0, r3
 8021ae2:	4770      	bx	lr
 8021ae4:	2300      	movs	r3, #0
 8021ae6:	e7e4      	b.n	8021ab2 <__hi0bits+0xa>

08021ae8 <__lo0bits>:
 8021ae8:	6803      	ldr	r3, [r0, #0]
 8021aea:	f013 0207 	ands.w	r2, r3, #7
 8021aee:	4601      	mov	r1, r0
 8021af0:	d00b      	beq.n	8021b0a <__lo0bits+0x22>
 8021af2:	07da      	lsls	r2, r3, #31
 8021af4:	d424      	bmi.n	8021b40 <__lo0bits+0x58>
 8021af6:	0798      	lsls	r0, r3, #30
 8021af8:	bf49      	itett	mi
 8021afa:	085b      	lsrmi	r3, r3, #1
 8021afc:	089b      	lsrpl	r3, r3, #2
 8021afe:	2001      	movmi	r0, #1
 8021b00:	600b      	strmi	r3, [r1, #0]
 8021b02:	bf5c      	itt	pl
 8021b04:	600b      	strpl	r3, [r1, #0]
 8021b06:	2002      	movpl	r0, #2
 8021b08:	4770      	bx	lr
 8021b0a:	b298      	uxth	r0, r3
 8021b0c:	b9b0      	cbnz	r0, 8021b3c <__lo0bits+0x54>
 8021b0e:	0c1b      	lsrs	r3, r3, #16
 8021b10:	2010      	movs	r0, #16
 8021b12:	f013 0fff 	tst.w	r3, #255	; 0xff
 8021b16:	bf04      	itt	eq
 8021b18:	0a1b      	lsreq	r3, r3, #8
 8021b1a:	3008      	addeq	r0, #8
 8021b1c:	071a      	lsls	r2, r3, #28
 8021b1e:	bf04      	itt	eq
 8021b20:	091b      	lsreq	r3, r3, #4
 8021b22:	3004      	addeq	r0, #4
 8021b24:	079a      	lsls	r2, r3, #30
 8021b26:	bf04      	itt	eq
 8021b28:	089b      	lsreq	r3, r3, #2
 8021b2a:	3002      	addeq	r0, #2
 8021b2c:	07da      	lsls	r2, r3, #31
 8021b2e:	d403      	bmi.n	8021b38 <__lo0bits+0x50>
 8021b30:	085b      	lsrs	r3, r3, #1
 8021b32:	f100 0001 	add.w	r0, r0, #1
 8021b36:	d005      	beq.n	8021b44 <__lo0bits+0x5c>
 8021b38:	600b      	str	r3, [r1, #0]
 8021b3a:	4770      	bx	lr
 8021b3c:	4610      	mov	r0, r2
 8021b3e:	e7e8      	b.n	8021b12 <__lo0bits+0x2a>
 8021b40:	2000      	movs	r0, #0
 8021b42:	4770      	bx	lr
 8021b44:	2020      	movs	r0, #32
 8021b46:	4770      	bx	lr

08021b48 <__i2b>:
 8021b48:	b510      	push	{r4, lr}
 8021b4a:	460c      	mov	r4, r1
 8021b4c:	2101      	movs	r1, #1
 8021b4e:	f7ff feb5 	bl	80218bc <_Balloc>
 8021b52:	4602      	mov	r2, r0
 8021b54:	b928      	cbnz	r0, 8021b62 <__i2b+0x1a>
 8021b56:	4b05      	ldr	r3, [pc, #20]	; (8021b6c <__i2b+0x24>)
 8021b58:	4805      	ldr	r0, [pc, #20]	; (8021b70 <__i2b+0x28>)
 8021b5a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8021b5e:	f7fe fb87 	bl	8020270 <__assert_func>
 8021b62:	2301      	movs	r3, #1
 8021b64:	6144      	str	r4, [r0, #20]
 8021b66:	6103      	str	r3, [r0, #16]
 8021b68:	bd10      	pop	{r4, pc}
 8021b6a:	bf00      	nop
 8021b6c:	08027250 	.word	0x08027250
 8021b70:	080272e0 	.word	0x080272e0

08021b74 <__multiply>:
 8021b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021b78:	4614      	mov	r4, r2
 8021b7a:	690a      	ldr	r2, [r1, #16]
 8021b7c:	6923      	ldr	r3, [r4, #16]
 8021b7e:	429a      	cmp	r2, r3
 8021b80:	bfb8      	it	lt
 8021b82:	460b      	movlt	r3, r1
 8021b84:	460d      	mov	r5, r1
 8021b86:	bfbc      	itt	lt
 8021b88:	4625      	movlt	r5, r4
 8021b8a:	461c      	movlt	r4, r3
 8021b8c:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8021b90:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8021b94:	68ab      	ldr	r3, [r5, #8]
 8021b96:	6869      	ldr	r1, [r5, #4]
 8021b98:	eb0a 0709 	add.w	r7, sl, r9
 8021b9c:	42bb      	cmp	r3, r7
 8021b9e:	b085      	sub	sp, #20
 8021ba0:	bfb8      	it	lt
 8021ba2:	3101      	addlt	r1, #1
 8021ba4:	f7ff fe8a 	bl	80218bc <_Balloc>
 8021ba8:	b930      	cbnz	r0, 8021bb8 <__multiply+0x44>
 8021baa:	4602      	mov	r2, r0
 8021bac:	4b42      	ldr	r3, [pc, #264]	; (8021cb8 <__multiply+0x144>)
 8021bae:	4843      	ldr	r0, [pc, #268]	; (8021cbc <__multiply+0x148>)
 8021bb0:	f240 115d 	movw	r1, #349	; 0x15d
 8021bb4:	f7fe fb5c 	bl	8020270 <__assert_func>
 8021bb8:	f100 0614 	add.w	r6, r0, #20
 8021bbc:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8021bc0:	4633      	mov	r3, r6
 8021bc2:	2200      	movs	r2, #0
 8021bc4:	4543      	cmp	r3, r8
 8021bc6:	d31e      	bcc.n	8021c06 <__multiply+0x92>
 8021bc8:	f105 0c14 	add.w	ip, r5, #20
 8021bcc:	f104 0314 	add.w	r3, r4, #20
 8021bd0:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8021bd4:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8021bd8:	9202      	str	r2, [sp, #8]
 8021bda:	ebac 0205 	sub.w	r2, ip, r5
 8021bde:	3a15      	subs	r2, #21
 8021be0:	f022 0203 	bic.w	r2, r2, #3
 8021be4:	3204      	adds	r2, #4
 8021be6:	f105 0115 	add.w	r1, r5, #21
 8021bea:	458c      	cmp	ip, r1
 8021bec:	bf38      	it	cc
 8021bee:	2204      	movcc	r2, #4
 8021bf0:	9201      	str	r2, [sp, #4]
 8021bf2:	9a02      	ldr	r2, [sp, #8]
 8021bf4:	9303      	str	r3, [sp, #12]
 8021bf6:	429a      	cmp	r2, r3
 8021bf8:	d808      	bhi.n	8021c0c <__multiply+0x98>
 8021bfa:	2f00      	cmp	r7, #0
 8021bfc:	dc55      	bgt.n	8021caa <__multiply+0x136>
 8021bfe:	6107      	str	r7, [r0, #16]
 8021c00:	b005      	add	sp, #20
 8021c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c06:	f843 2b04 	str.w	r2, [r3], #4
 8021c0a:	e7db      	b.n	8021bc4 <__multiply+0x50>
 8021c0c:	f8b3 a000 	ldrh.w	sl, [r3]
 8021c10:	f1ba 0f00 	cmp.w	sl, #0
 8021c14:	d020      	beq.n	8021c58 <__multiply+0xe4>
 8021c16:	f105 0e14 	add.w	lr, r5, #20
 8021c1a:	46b1      	mov	r9, r6
 8021c1c:	2200      	movs	r2, #0
 8021c1e:	f85e 4b04 	ldr.w	r4, [lr], #4
 8021c22:	f8d9 b000 	ldr.w	fp, [r9]
 8021c26:	b2a1      	uxth	r1, r4
 8021c28:	fa1f fb8b 	uxth.w	fp, fp
 8021c2c:	fb0a b101 	mla	r1, sl, r1, fp
 8021c30:	4411      	add	r1, r2
 8021c32:	f8d9 2000 	ldr.w	r2, [r9]
 8021c36:	0c24      	lsrs	r4, r4, #16
 8021c38:	0c12      	lsrs	r2, r2, #16
 8021c3a:	fb0a 2404 	mla	r4, sl, r4, r2
 8021c3e:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8021c42:	b289      	uxth	r1, r1
 8021c44:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8021c48:	45f4      	cmp	ip, lr
 8021c4a:	f849 1b04 	str.w	r1, [r9], #4
 8021c4e:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8021c52:	d8e4      	bhi.n	8021c1e <__multiply+0xaa>
 8021c54:	9901      	ldr	r1, [sp, #4]
 8021c56:	5072      	str	r2, [r6, r1]
 8021c58:	9a03      	ldr	r2, [sp, #12]
 8021c5a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8021c5e:	3304      	adds	r3, #4
 8021c60:	f1b9 0f00 	cmp.w	r9, #0
 8021c64:	d01f      	beq.n	8021ca6 <__multiply+0x132>
 8021c66:	6834      	ldr	r4, [r6, #0]
 8021c68:	f105 0114 	add.w	r1, r5, #20
 8021c6c:	46b6      	mov	lr, r6
 8021c6e:	f04f 0a00 	mov.w	sl, #0
 8021c72:	880a      	ldrh	r2, [r1, #0]
 8021c74:	f8be b002 	ldrh.w	fp, [lr, #2]
 8021c78:	fb09 b202 	mla	r2, r9, r2, fp
 8021c7c:	4492      	add	sl, r2
 8021c7e:	b2a4      	uxth	r4, r4
 8021c80:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8021c84:	f84e 4b04 	str.w	r4, [lr], #4
 8021c88:	f851 4b04 	ldr.w	r4, [r1], #4
 8021c8c:	f8be 2000 	ldrh.w	r2, [lr]
 8021c90:	0c24      	lsrs	r4, r4, #16
 8021c92:	fb09 2404 	mla	r4, r9, r4, r2
 8021c96:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8021c9a:	458c      	cmp	ip, r1
 8021c9c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8021ca0:	d8e7      	bhi.n	8021c72 <__multiply+0xfe>
 8021ca2:	9a01      	ldr	r2, [sp, #4]
 8021ca4:	50b4      	str	r4, [r6, r2]
 8021ca6:	3604      	adds	r6, #4
 8021ca8:	e7a3      	b.n	8021bf2 <__multiply+0x7e>
 8021caa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8021cae:	2b00      	cmp	r3, #0
 8021cb0:	d1a5      	bne.n	8021bfe <__multiply+0x8a>
 8021cb2:	3f01      	subs	r7, #1
 8021cb4:	e7a1      	b.n	8021bfa <__multiply+0x86>
 8021cb6:	bf00      	nop
 8021cb8:	08027250 	.word	0x08027250
 8021cbc:	080272e0 	.word	0x080272e0

08021cc0 <__pow5mult>:
 8021cc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021cc4:	4615      	mov	r5, r2
 8021cc6:	f012 0203 	ands.w	r2, r2, #3
 8021cca:	4606      	mov	r6, r0
 8021ccc:	460f      	mov	r7, r1
 8021cce:	d007      	beq.n	8021ce0 <__pow5mult+0x20>
 8021cd0:	4c25      	ldr	r4, [pc, #148]	; (8021d68 <__pow5mult+0xa8>)
 8021cd2:	3a01      	subs	r2, #1
 8021cd4:	2300      	movs	r3, #0
 8021cd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8021cda:	f7ff fe51 	bl	8021980 <__multadd>
 8021cde:	4607      	mov	r7, r0
 8021ce0:	10ad      	asrs	r5, r5, #2
 8021ce2:	d03d      	beq.n	8021d60 <__pow5mult+0xa0>
 8021ce4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8021ce6:	b97c      	cbnz	r4, 8021d08 <__pow5mult+0x48>
 8021ce8:	2010      	movs	r0, #16
 8021cea:	f7fc faf5 	bl	801e2d8 <malloc>
 8021cee:	4602      	mov	r2, r0
 8021cf0:	6270      	str	r0, [r6, #36]	; 0x24
 8021cf2:	b928      	cbnz	r0, 8021d00 <__pow5mult+0x40>
 8021cf4:	4b1d      	ldr	r3, [pc, #116]	; (8021d6c <__pow5mult+0xac>)
 8021cf6:	481e      	ldr	r0, [pc, #120]	; (8021d70 <__pow5mult+0xb0>)
 8021cf8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8021cfc:	f7fe fab8 	bl	8020270 <__assert_func>
 8021d00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8021d04:	6004      	str	r4, [r0, #0]
 8021d06:	60c4      	str	r4, [r0, #12]
 8021d08:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8021d0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8021d10:	b94c      	cbnz	r4, 8021d26 <__pow5mult+0x66>
 8021d12:	f240 2171 	movw	r1, #625	; 0x271
 8021d16:	4630      	mov	r0, r6
 8021d18:	f7ff ff16 	bl	8021b48 <__i2b>
 8021d1c:	2300      	movs	r3, #0
 8021d1e:	f8c8 0008 	str.w	r0, [r8, #8]
 8021d22:	4604      	mov	r4, r0
 8021d24:	6003      	str	r3, [r0, #0]
 8021d26:	f04f 0900 	mov.w	r9, #0
 8021d2a:	07eb      	lsls	r3, r5, #31
 8021d2c:	d50a      	bpl.n	8021d44 <__pow5mult+0x84>
 8021d2e:	4639      	mov	r1, r7
 8021d30:	4622      	mov	r2, r4
 8021d32:	4630      	mov	r0, r6
 8021d34:	f7ff ff1e 	bl	8021b74 <__multiply>
 8021d38:	4639      	mov	r1, r7
 8021d3a:	4680      	mov	r8, r0
 8021d3c:	4630      	mov	r0, r6
 8021d3e:	f7ff fdfd 	bl	802193c <_Bfree>
 8021d42:	4647      	mov	r7, r8
 8021d44:	106d      	asrs	r5, r5, #1
 8021d46:	d00b      	beq.n	8021d60 <__pow5mult+0xa0>
 8021d48:	6820      	ldr	r0, [r4, #0]
 8021d4a:	b938      	cbnz	r0, 8021d5c <__pow5mult+0x9c>
 8021d4c:	4622      	mov	r2, r4
 8021d4e:	4621      	mov	r1, r4
 8021d50:	4630      	mov	r0, r6
 8021d52:	f7ff ff0f 	bl	8021b74 <__multiply>
 8021d56:	6020      	str	r0, [r4, #0]
 8021d58:	f8c0 9000 	str.w	r9, [r0]
 8021d5c:	4604      	mov	r4, r0
 8021d5e:	e7e4      	b.n	8021d2a <__pow5mult+0x6a>
 8021d60:	4638      	mov	r0, r7
 8021d62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021d66:	bf00      	nop
 8021d68:	08027430 	.word	0x08027430
 8021d6c:	080270db 	.word	0x080270db
 8021d70:	080272e0 	.word	0x080272e0

08021d74 <__lshift>:
 8021d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021d78:	460c      	mov	r4, r1
 8021d7a:	6849      	ldr	r1, [r1, #4]
 8021d7c:	6923      	ldr	r3, [r4, #16]
 8021d7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8021d82:	68a3      	ldr	r3, [r4, #8]
 8021d84:	4607      	mov	r7, r0
 8021d86:	4691      	mov	r9, r2
 8021d88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8021d8c:	f108 0601 	add.w	r6, r8, #1
 8021d90:	42b3      	cmp	r3, r6
 8021d92:	db0b      	blt.n	8021dac <__lshift+0x38>
 8021d94:	4638      	mov	r0, r7
 8021d96:	f7ff fd91 	bl	80218bc <_Balloc>
 8021d9a:	4605      	mov	r5, r0
 8021d9c:	b948      	cbnz	r0, 8021db2 <__lshift+0x3e>
 8021d9e:	4602      	mov	r2, r0
 8021da0:	4b28      	ldr	r3, [pc, #160]	; (8021e44 <__lshift+0xd0>)
 8021da2:	4829      	ldr	r0, [pc, #164]	; (8021e48 <__lshift+0xd4>)
 8021da4:	f240 11d9 	movw	r1, #473	; 0x1d9
 8021da8:	f7fe fa62 	bl	8020270 <__assert_func>
 8021dac:	3101      	adds	r1, #1
 8021dae:	005b      	lsls	r3, r3, #1
 8021db0:	e7ee      	b.n	8021d90 <__lshift+0x1c>
 8021db2:	2300      	movs	r3, #0
 8021db4:	f100 0114 	add.w	r1, r0, #20
 8021db8:	f100 0210 	add.w	r2, r0, #16
 8021dbc:	4618      	mov	r0, r3
 8021dbe:	4553      	cmp	r3, sl
 8021dc0:	db33      	blt.n	8021e2a <__lshift+0xb6>
 8021dc2:	6920      	ldr	r0, [r4, #16]
 8021dc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8021dc8:	f104 0314 	add.w	r3, r4, #20
 8021dcc:	f019 091f 	ands.w	r9, r9, #31
 8021dd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8021dd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8021dd8:	d02b      	beq.n	8021e32 <__lshift+0xbe>
 8021dda:	f1c9 0e20 	rsb	lr, r9, #32
 8021dde:	468a      	mov	sl, r1
 8021de0:	2200      	movs	r2, #0
 8021de2:	6818      	ldr	r0, [r3, #0]
 8021de4:	fa00 f009 	lsl.w	r0, r0, r9
 8021de8:	4302      	orrs	r2, r0
 8021dea:	f84a 2b04 	str.w	r2, [sl], #4
 8021dee:	f853 2b04 	ldr.w	r2, [r3], #4
 8021df2:	459c      	cmp	ip, r3
 8021df4:	fa22 f20e 	lsr.w	r2, r2, lr
 8021df8:	d8f3      	bhi.n	8021de2 <__lshift+0x6e>
 8021dfa:	ebac 0304 	sub.w	r3, ip, r4
 8021dfe:	3b15      	subs	r3, #21
 8021e00:	f023 0303 	bic.w	r3, r3, #3
 8021e04:	3304      	adds	r3, #4
 8021e06:	f104 0015 	add.w	r0, r4, #21
 8021e0a:	4584      	cmp	ip, r0
 8021e0c:	bf38      	it	cc
 8021e0e:	2304      	movcc	r3, #4
 8021e10:	50ca      	str	r2, [r1, r3]
 8021e12:	b10a      	cbz	r2, 8021e18 <__lshift+0xa4>
 8021e14:	f108 0602 	add.w	r6, r8, #2
 8021e18:	3e01      	subs	r6, #1
 8021e1a:	4638      	mov	r0, r7
 8021e1c:	612e      	str	r6, [r5, #16]
 8021e1e:	4621      	mov	r1, r4
 8021e20:	f7ff fd8c 	bl	802193c <_Bfree>
 8021e24:	4628      	mov	r0, r5
 8021e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021e2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8021e2e:	3301      	adds	r3, #1
 8021e30:	e7c5      	b.n	8021dbe <__lshift+0x4a>
 8021e32:	3904      	subs	r1, #4
 8021e34:	f853 2b04 	ldr.w	r2, [r3], #4
 8021e38:	f841 2f04 	str.w	r2, [r1, #4]!
 8021e3c:	459c      	cmp	ip, r3
 8021e3e:	d8f9      	bhi.n	8021e34 <__lshift+0xc0>
 8021e40:	e7ea      	b.n	8021e18 <__lshift+0xa4>
 8021e42:	bf00      	nop
 8021e44:	08027250 	.word	0x08027250
 8021e48:	080272e0 	.word	0x080272e0

08021e4c <__mcmp>:
 8021e4c:	b530      	push	{r4, r5, lr}
 8021e4e:	6902      	ldr	r2, [r0, #16]
 8021e50:	690c      	ldr	r4, [r1, #16]
 8021e52:	1b12      	subs	r2, r2, r4
 8021e54:	d10e      	bne.n	8021e74 <__mcmp+0x28>
 8021e56:	f100 0314 	add.w	r3, r0, #20
 8021e5a:	3114      	adds	r1, #20
 8021e5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8021e60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8021e64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8021e68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8021e6c:	42a5      	cmp	r5, r4
 8021e6e:	d003      	beq.n	8021e78 <__mcmp+0x2c>
 8021e70:	d305      	bcc.n	8021e7e <__mcmp+0x32>
 8021e72:	2201      	movs	r2, #1
 8021e74:	4610      	mov	r0, r2
 8021e76:	bd30      	pop	{r4, r5, pc}
 8021e78:	4283      	cmp	r3, r0
 8021e7a:	d3f3      	bcc.n	8021e64 <__mcmp+0x18>
 8021e7c:	e7fa      	b.n	8021e74 <__mcmp+0x28>
 8021e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8021e82:	e7f7      	b.n	8021e74 <__mcmp+0x28>

08021e84 <__mdiff>:
 8021e84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021e88:	460c      	mov	r4, r1
 8021e8a:	4606      	mov	r6, r0
 8021e8c:	4611      	mov	r1, r2
 8021e8e:	4620      	mov	r0, r4
 8021e90:	4617      	mov	r7, r2
 8021e92:	f7ff ffdb 	bl	8021e4c <__mcmp>
 8021e96:	1e05      	subs	r5, r0, #0
 8021e98:	d110      	bne.n	8021ebc <__mdiff+0x38>
 8021e9a:	4629      	mov	r1, r5
 8021e9c:	4630      	mov	r0, r6
 8021e9e:	f7ff fd0d 	bl	80218bc <_Balloc>
 8021ea2:	b930      	cbnz	r0, 8021eb2 <__mdiff+0x2e>
 8021ea4:	4b39      	ldr	r3, [pc, #228]	; (8021f8c <__mdiff+0x108>)
 8021ea6:	4602      	mov	r2, r0
 8021ea8:	f240 2132 	movw	r1, #562	; 0x232
 8021eac:	4838      	ldr	r0, [pc, #224]	; (8021f90 <__mdiff+0x10c>)
 8021eae:	f7fe f9df 	bl	8020270 <__assert_func>
 8021eb2:	2301      	movs	r3, #1
 8021eb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8021eb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021ebc:	bfa4      	itt	ge
 8021ebe:	463b      	movge	r3, r7
 8021ec0:	4627      	movge	r7, r4
 8021ec2:	4630      	mov	r0, r6
 8021ec4:	6879      	ldr	r1, [r7, #4]
 8021ec6:	bfa6      	itte	ge
 8021ec8:	461c      	movge	r4, r3
 8021eca:	2500      	movge	r5, #0
 8021ecc:	2501      	movlt	r5, #1
 8021ece:	f7ff fcf5 	bl	80218bc <_Balloc>
 8021ed2:	b920      	cbnz	r0, 8021ede <__mdiff+0x5a>
 8021ed4:	4b2d      	ldr	r3, [pc, #180]	; (8021f8c <__mdiff+0x108>)
 8021ed6:	4602      	mov	r2, r0
 8021ed8:	f44f 7110 	mov.w	r1, #576	; 0x240
 8021edc:	e7e6      	b.n	8021eac <__mdiff+0x28>
 8021ede:	693e      	ldr	r6, [r7, #16]
 8021ee0:	60c5      	str	r5, [r0, #12]
 8021ee2:	6925      	ldr	r5, [r4, #16]
 8021ee4:	f107 0114 	add.w	r1, r7, #20
 8021ee8:	f104 0914 	add.w	r9, r4, #20
 8021eec:	f100 0e14 	add.w	lr, r0, #20
 8021ef0:	f107 0210 	add.w	r2, r7, #16
 8021ef4:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8021ef8:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8021efc:	46f2      	mov	sl, lr
 8021efe:	2700      	movs	r7, #0
 8021f00:	f859 3b04 	ldr.w	r3, [r9], #4
 8021f04:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8021f08:	fa1f f883 	uxth.w	r8, r3
 8021f0c:	fa17 f78b 	uxtah	r7, r7, fp
 8021f10:	0c1b      	lsrs	r3, r3, #16
 8021f12:	eba7 0808 	sub.w	r8, r7, r8
 8021f16:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8021f1a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8021f1e:	fa1f f888 	uxth.w	r8, r8
 8021f22:	141f      	asrs	r7, r3, #16
 8021f24:	454d      	cmp	r5, r9
 8021f26:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8021f2a:	f84a 3b04 	str.w	r3, [sl], #4
 8021f2e:	d8e7      	bhi.n	8021f00 <__mdiff+0x7c>
 8021f30:	1b2b      	subs	r3, r5, r4
 8021f32:	3b15      	subs	r3, #21
 8021f34:	f023 0303 	bic.w	r3, r3, #3
 8021f38:	3304      	adds	r3, #4
 8021f3a:	3415      	adds	r4, #21
 8021f3c:	42a5      	cmp	r5, r4
 8021f3e:	bf38      	it	cc
 8021f40:	2304      	movcc	r3, #4
 8021f42:	4419      	add	r1, r3
 8021f44:	4473      	add	r3, lr
 8021f46:	469e      	mov	lr, r3
 8021f48:	460d      	mov	r5, r1
 8021f4a:	4565      	cmp	r5, ip
 8021f4c:	d30e      	bcc.n	8021f6c <__mdiff+0xe8>
 8021f4e:	f10c 0203 	add.w	r2, ip, #3
 8021f52:	1a52      	subs	r2, r2, r1
 8021f54:	f022 0203 	bic.w	r2, r2, #3
 8021f58:	3903      	subs	r1, #3
 8021f5a:	458c      	cmp	ip, r1
 8021f5c:	bf38      	it	cc
 8021f5e:	2200      	movcc	r2, #0
 8021f60:	441a      	add	r2, r3
 8021f62:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8021f66:	b17b      	cbz	r3, 8021f88 <__mdiff+0x104>
 8021f68:	6106      	str	r6, [r0, #16]
 8021f6a:	e7a5      	b.n	8021eb8 <__mdiff+0x34>
 8021f6c:	f855 8b04 	ldr.w	r8, [r5], #4
 8021f70:	fa17 f488 	uxtah	r4, r7, r8
 8021f74:	1422      	asrs	r2, r4, #16
 8021f76:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8021f7a:	b2a4      	uxth	r4, r4
 8021f7c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8021f80:	f84e 4b04 	str.w	r4, [lr], #4
 8021f84:	1417      	asrs	r7, r2, #16
 8021f86:	e7e0      	b.n	8021f4a <__mdiff+0xc6>
 8021f88:	3e01      	subs	r6, #1
 8021f8a:	e7ea      	b.n	8021f62 <__mdiff+0xde>
 8021f8c:	08027250 	.word	0x08027250
 8021f90:	080272e0 	.word	0x080272e0

08021f94 <__ulp>:
 8021f94:	b082      	sub	sp, #8
 8021f96:	ed8d 0b00 	vstr	d0, [sp]
 8021f9a:	9b01      	ldr	r3, [sp, #4]
 8021f9c:	4912      	ldr	r1, [pc, #72]	; (8021fe8 <__ulp+0x54>)
 8021f9e:	4019      	ands	r1, r3
 8021fa0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8021fa4:	2900      	cmp	r1, #0
 8021fa6:	dd05      	ble.n	8021fb4 <__ulp+0x20>
 8021fa8:	2200      	movs	r2, #0
 8021faa:	460b      	mov	r3, r1
 8021fac:	ec43 2b10 	vmov	d0, r2, r3
 8021fb0:	b002      	add	sp, #8
 8021fb2:	4770      	bx	lr
 8021fb4:	4249      	negs	r1, r1
 8021fb6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8021fba:	ea4f 5021 	mov.w	r0, r1, asr #20
 8021fbe:	f04f 0200 	mov.w	r2, #0
 8021fc2:	f04f 0300 	mov.w	r3, #0
 8021fc6:	da04      	bge.n	8021fd2 <__ulp+0x3e>
 8021fc8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8021fcc:	fa41 f300 	asr.w	r3, r1, r0
 8021fd0:	e7ec      	b.n	8021fac <__ulp+0x18>
 8021fd2:	f1a0 0114 	sub.w	r1, r0, #20
 8021fd6:	291e      	cmp	r1, #30
 8021fd8:	bfda      	itte	le
 8021fda:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8021fde:	fa20 f101 	lsrle.w	r1, r0, r1
 8021fe2:	2101      	movgt	r1, #1
 8021fe4:	460a      	mov	r2, r1
 8021fe6:	e7e1      	b.n	8021fac <__ulp+0x18>
 8021fe8:	7ff00000 	.word	0x7ff00000

08021fec <__b2d>:
 8021fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021fee:	6905      	ldr	r5, [r0, #16]
 8021ff0:	f100 0714 	add.w	r7, r0, #20
 8021ff4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8021ff8:	1f2e      	subs	r6, r5, #4
 8021ffa:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8021ffe:	4620      	mov	r0, r4
 8022000:	f7ff fd52 	bl	8021aa8 <__hi0bits>
 8022004:	f1c0 0320 	rsb	r3, r0, #32
 8022008:	280a      	cmp	r0, #10
 802200a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8022088 <__b2d+0x9c>
 802200e:	600b      	str	r3, [r1, #0]
 8022010:	dc14      	bgt.n	802203c <__b2d+0x50>
 8022012:	f1c0 0e0b 	rsb	lr, r0, #11
 8022016:	fa24 f10e 	lsr.w	r1, r4, lr
 802201a:	42b7      	cmp	r7, r6
 802201c:	ea41 030c 	orr.w	r3, r1, ip
 8022020:	bf34      	ite	cc
 8022022:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8022026:	2100      	movcs	r1, #0
 8022028:	3015      	adds	r0, #21
 802202a:	fa04 f000 	lsl.w	r0, r4, r0
 802202e:	fa21 f10e 	lsr.w	r1, r1, lr
 8022032:	ea40 0201 	orr.w	r2, r0, r1
 8022036:	ec43 2b10 	vmov	d0, r2, r3
 802203a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802203c:	42b7      	cmp	r7, r6
 802203e:	bf3a      	itte	cc
 8022040:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8022044:	f1a5 0608 	subcc.w	r6, r5, #8
 8022048:	2100      	movcs	r1, #0
 802204a:	380b      	subs	r0, #11
 802204c:	d017      	beq.n	802207e <__b2d+0x92>
 802204e:	f1c0 0c20 	rsb	ip, r0, #32
 8022052:	fa04 f500 	lsl.w	r5, r4, r0
 8022056:	42be      	cmp	r6, r7
 8022058:	fa21 f40c 	lsr.w	r4, r1, ip
 802205c:	ea45 0504 	orr.w	r5, r5, r4
 8022060:	bf8c      	ite	hi
 8022062:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8022066:	2400      	movls	r4, #0
 8022068:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 802206c:	fa01 f000 	lsl.w	r0, r1, r0
 8022070:	fa24 f40c 	lsr.w	r4, r4, ip
 8022074:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8022078:	ea40 0204 	orr.w	r2, r0, r4
 802207c:	e7db      	b.n	8022036 <__b2d+0x4a>
 802207e:	ea44 030c 	orr.w	r3, r4, ip
 8022082:	460a      	mov	r2, r1
 8022084:	e7d7      	b.n	8022036 <__b2d+0x4a>
 8022086:	bf00      	nop
 8022088:	3ff00000 	.word	0x3ff00000

0802208c <__d2b>:
 802208c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8022090:	4689      	mov	r9, r1
 8022092:	2101      	movs	r1, #1
 8022094:	ec57 6b10 	vmov	r6, r7, d0
 8022098:	4690      	mov	r8, r2
 802209a:	f7ff fc0f 	bl	80218bc <_Balloc>
 802209e:	4604      	mov	r4, r0
 80220a0:	b930      	cbnz	r0, 80220b0 <__d2b+0x24>
 80220a2:	4602      	mov	r2, r0
 80220a4:	4b25      	ldr	r3, [pc, #148]	; (802213c <__d2b+0xb0>)
 80220a6:	4826      	ldr	r0, [pc, #152]	; (8022140 <__d2b+0xb4>)
 80220a8:	f240 310a 	movw	r1, #778	; 0x30a
 80220ac:	f7fe f8e0 	bl	8020270 <__assert_func>
 80220b0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80220b4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80220b8:	bb35      	cbnz	r5, 8022108 <__d2b+0x7c>
 80220ba:	2e00      	cmp	r6, #0
 80220bc:	9301      	str	r3, [sp, #4]
 80220be:	d028      	beq.n	8022112 <__d2b+0x86>
 80220c0:	4668      	mov	r0, sp
 80220c2:	9600      	str	r6, [sp, #0]
 80220c4:	f7ff fd10 	bl	8021ae8 <__lo0bits>
 80220c8:	9900      	ldr	r1, [sp, #0]
 80220ca:	b300      	cbz	r0, 802210e <__d2b+0x82>
 80220cc:	9a01      	ldr	r2, [sp, #4]
 80220ce:	f1c0 0320 	rsb	r3, r0, #32
 80220d2:	fa02 f303 	lsl.w	r3, r2, r3
 80220d6:	430b      	orrs	r3, r1
 80220d8:	40c2      	lsrs	r2, r0
 80220da:	6163      	str	r3, [r4, #20]
 80220dc:	9201      	str	r2, [sp, #4]
 80220de:	9b01      	ldr	r3, [sp, #4]
 80220e0:	61a3      	str	r3, [r4, #24]
 80220e2:	2b00      	cmp	r3, #0
 80220e4:	bf14      	ite	ne
 80220e6:	2202      	movne	r2, #2
 80220e8:	2201      	moveq	r2, #1
 80220ea:	6122      	str	r2, [r4, #16]
 80220ec:	b1d5      	cbz	r5, 8022124 <__d2b+0x98>
 80220ee:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80220f2:	4405      	add	r5, r0
 80220f4:	f8c9 5000 	str.w	r5, [r9]
 80220f8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80220fc:	f8c8 0000 	str.w	r0, [r8]
 8022100:	4620      	mov	r0, r4
 8022102:	b003      	add	sp, #12
 8022104:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022108:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 802210c:	e7d5      	b.n	80220ba <__d2b+0x2e>
 802210e:	6161      	str	r1, [r4, #20]
 8022110:	e7e5      	b.n	80220de <__d2b+0x52>
 8022112:	a801      	add	r0, sp, #4
 8022114:	f7ff fce8 	bl	8021ae8 <__lo0bits>
 8022118:	9b01      	ldr	r3, [sp, #4]
 802211a:	6163      	str	r3, [r4, #20]
 802211c:	2201      	movs	r2, #1
 802211e:	6122      	str	r2, [r4, #16]
 8022120:	3020      	adds	r0, #32
 8022122:	e7e3      	b.n	80220ec <__d2b+0x60>
 8022124:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8022128:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 802212c:	f8c9 0000 	str.w	r0, [r9]
 8022130:	6918      	ldr	r0, [r3, #16]
 8022132:	f7ff fcb9 	bl	8021aa8 <__hi0bits>
 8022136:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 802213a:	e7df      	b.n	80220fc <__d2b+0x70>
 802213c:	08027250 	.word	0x08027250
 8022140:	080272e0 	.word	0x080272e0

08022144 <__ratio>:
 8022144:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022148:	4688      	mov	r8, r1
 802214a:	4669      	mov	r1, sp
 802214c:	4681      	mov	r9, r0
 802214e:	f7ff ff4d 	bl	8021fec <__b2d>
 8022152:	a901      	add	r1, sp, #4
 8022154:	4640      	mov	r0, r8
 8022156:	ec55 4b10 	vmov	r4, r5, d0
 802215a:	f7ff ff47 	bl	8021fec <__b2d>
 802215e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8022162:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8022166:	eba3 0c02 	sub.w	ip, r3, r2
 802216a:	e9dd 3200 	ldrd	r3, r2, [sp]
 802216e:	1a9b      	subs	r3, r3, r2
 8022170:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8022174:	ec51 0b10 	vmov	r0, r1, d0
 8022178:	2b00      	cmp	r3, #0
 802217a:	bfd6      	itet	le
 802217c:	460a      	movle	r2, r1
 802217e:	462a      	movgt	r2, r5
 8022180:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8022184:	468b      	mov	fp, r1
 8022186:	462f      	mov	r7, r5
 8022188:	bfd4      	ite	le
 802218a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 802218e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8022192:	4620      	mov	r0, r4
 8022194:	ee10 2a10 	vmov	r2, s0
 8022198:	465b      	mov	r3, fp
 802219a:	4639      	mov	r1, r7
 802219c:	f7de fb56 	bl	800084c <__aeabi_ddiv>
 80221a0:	ec41 0b10 	vmov	d0, r0, r1
 80221a4:	b003      	add	sp, #12
 80221a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080221aa <__copybits>:
 80221aa:	3901      	subs	r1, #1
 80221ac:	b570      	push	{r4, r5, r6, lr}
 80221ae:	1149      	asrs	r1, r1, #5
 80221b0:	6914      	ldr	r4, [r2, #16]
 80221b2:	3101      	adds	r1, #1
 80221b4:	f102 0314 	add.w	r3, r2, #20
 80221b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80221bc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80221c0:	1f05      	subs	r5, r0, #4
 80221c2:	42a3      	cmp	r3, r4
 80221c4:	d30c      	bcc.n	80221e0 <__copybits+0x36>
 80221c6:	1aa3      	subs	r3, r4, r2
 80221c8:	3b11      	subs	r3, #17
 80221ca:	f023 0303 	bic.w	r3, r3, #3
 80221ce:	3211      	adds	r2, #17
 80221d0:	42a2      	cmp	r2, r4
 80221d2:	bf88      	it	hi
 80221d4:	2300      	movhi	r3, #0
 80221d6:	4418      	add	r0, r3
 80221d8:	2300      	movs	r3, #0
 80221da:	4288      	cmp	r0, r1
 80221dc:	d305      	bcc.n	80221ea <__copybits+0x40>
 80221de:	bd70      	pop	{r4, r5, r6, pc}
 80221e0:	f853 6b04 	ldr.w	r6, [r3], #4
 80221e4:	f845 6f04 	str.w	r6, [r5, #4]!
 80221e8:	e7eb      	b.n	80221c2 <__copybits+0x18>
 80221ea:	f840 3b04 	str.w	r3, [r0], #4
 80221ee:	e7f4      	b.n	80221da <__copybits+0x30>

080221f0 <__any_on>:
 80221f0:	f100 0214 	add.w	r2, r0, #20
 80221f4:	6900      	ldr	r0, [r0, #16]
 80221f6:	114b      	asrs	r3, r1, #5
 80221f8:	4298      	cmp	r0, r3
 80221fa:	b510      	push	{r4, lr}
 80221fc:	db11      	blt.n	8022222 <__any_on+0x32>
 80221fe:	dd0a      	ble.n	8022216 <__any_on+0x26>
 8022200:	f011 011f 	ands.w	r1, r1, #31
 8022204:	d007      	beq.n	8022216 <__any_on+0x26>
 8022206:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 802220a:	fa24 f001 	lsr.w	r0, r4, r1
 802220e:	fa00 f101 	lsl.w	r1, r0, r1
 8022212:	428c      	cmp	r4, r1
 8022214:	d10b      	bne.n	802222e <__any_on+0x3e>
 8022216:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 802221a:	4293      	cmp	r3, r2
 802221c:	d803      	bhi.n	8022226 <__any_on+0x36>
 802221e:	2000      	movs	r0, #0
 8022220:	bd10      	pop	{r4, pc}
 8022222:	4603      	mov	r3, r0
 8022224:	e7f7      	b.n	8022216 <__any_on+0x26>
 8022226:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 802222a:	2900      	cmp	r1, #0
 802222c:	d0f5      	beq.n	802221a <__any_on+0x2a>
 802222e:	2001      	movs	r0, #1
 8022230:	e7f6      	b.n	8022220 <__any_on+0x30>

08022232 <_calloc_r>:
 8022232:	b513      	push	{r0, r1, r4, lr}
 8022234:	434a      	muls	r2, r1
 8022236:	4611      	mov	r1, r2
 8022238:	9201      	str	r2, [sp, #4]
 802223a:	f7fc f8e3 	bl	801e404 <_malloc_r>
 802223e:	4604      	mov	r4, r0
 8022240:	b118      	cbz	r0, 802224a <_calloc_r+0x18>
 8022242:	9a01      	ldr	r2, [sp, #4]
 8022244:	2100      	movs	r1, #0
 8022246:	f7fc f885 	bl	801e354 <memset>
 802224a:	4620      	mov	r0, r4
 802224c:	b002      	add	sp, #8
 802224e:	bd10      	pop	{r4, pc}

08022250 <__ssputs_r>:
 8022250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022254:	688e      	ldr	r6, [r1, #8]
 8022256:	429e      	cmp	r6, r3
 8022258:	4682      	mov	sl, r0
 802225a:	460c      	mov	r4, r1
 802225c:	4690      	mov	r8, r2
 802225e:	461f      	mov	r7, r3
 8022260:	d838      	bhi.n	80222d4 <__ssputs_r+0x84>
 8022262:	898a      	ldrh	r2, [r1, #12]
 8022264:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8022268:	d032      	beq.n	80222d0 <__ssputs_r+0x80>
 802226a:	6825      	ldr	r5, [r4, #0]
 802226c:	6909      	ldr	r1, [r1, #16]
 802226e:	eba5 0901 	sub.w	r9, r5, r1
 8022272:	6965      	ldr	r5, [r4, #20]
 8022274:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022278:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802227c:	3301      	adds	r3, #1
 802227e:	444b      	add	r3, r9
 8022280:	106d      	asrs	r5, r5, #1
 8022282:	429d      	cmp	r5, r3
 8022284:	bf38      	it	cc
 8022286:	461d      	movcc	r5, r3
 8022288:	0553      	lsls	r3, r2, #21
 802228a:	d531      	bpl.n	80222f0 <__ssputs_r+0xa0>
 802228c:	4629      	mov	r1, r5
 802228e:	f7fc f8b9 	bl	801e404 <_malloc_r>
 8022292:	4606      	mov	r6, r0
 8022294:	b950      	cbnz	r0, 80222ac <__ssputs_r+0x5c>
 8022296:	230c      	movs	r3, #12
 8022298:	f8ca 3000 	str.w	r3, [sl]
 802229c:	89a3      	ldrh	r3, [r4, #12]
 802229e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80222a2:	81a3      	strh	r3, [r4, #12]
 80222a4:	f04f 30ff 	mov.w	r0, #4294967295
 80222a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80222ac:	6921      	ldr	r1, [r4, #16]
 80222ae:	464a      	mov	r2, r9
 80222b0:	f7fc f828 	bl	801e304 <memcpy>
 80222b4:	89a3      	ldrh	r3, [r4, #12]
 80222b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80222ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80222be:	81a3      	strh	r3, [r4, #12]
 80222c0:	6126      	str	r6, [r4, #16]
 80222c2:	6165      	str	r5, [r4, #20]
 80222c4:	444e      	add	r6, r9
 80222c6:	eba5 0509 	sub.w	r5, r5, r9
 80222ca:	6026      	str	r6, [r4, #0]
 80222cc:	60a5      	str	r5, [r4, #8]
 80222ce:	463e      	mov	r6, r7
 80222d0:	42be      	cmp	r6, r7
 80222d2:	d900      	bls.n	80222d6 <__ssputs_r+0x86>
 80222d4:	463e      	mov	r6, r7
 80222d6:	4632      	mov	r2, r6
 80222d8:	6820      	ldr	r0, [r4, #0]
 80222da:	4641      	mov	r1, r8
 80222dc:	f7fc f820 	bl	801e320 <memmove>
 80222e0:	68a3      	ldr	r3, [r4, #8]
 80222e2:	6822      	ldr	r2, [r4, #0]
 80222e4:	1b9b      	subs	r3, r3, r6
 80222e6:	4432      	add	r2, r6
 80222e8:	60a3      	str	r3, [r4, #8]
 80222ea:	6022      	str	r2, [r4, #0]
 80222ec:	2000      	movs	r0, #0
 80222ee:	e7db      	b.n	80222a8 <__ssputs_r+0x58>
 80222f0:	462a      	mov	r2, r5
 80222f2:	f000 ffc9 	bl	8023288 <_realloc_r>
 80222f6:	4606      	mov	r6, r0
 80222f8:	2800      	cmp	r0, #0
 80222fa:	d1e1      	bne.n	80222c0 <__ssputs_r+0x70>
 80222fc:	6921      	ldr	r1, [r4, #16]
 80222fe:	4650      	mov	r0, sl
 8022300:	f7fc f830 	bl	801e364 <_free_r>
 8022304:	e7c7      	b.n	8022296 <__ssputs_r+0x46>
	...

08022308 <_svfiprintf_r>:
 8022308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802230c:	4698      	mov	r8, r3
 802230e:	898b      	ldrh	r3, [r1, #12]
 8022310:	061b      	lsls	r3, r3, #24
 8022312:	b09d      	sub	sp, #116	; 0x74
 8022314:	4607      	mov	r7, r0
 8022316:	460d      	mov	r5, r1
 8022318:	4614      	mov	r4, r2
 802231a:	d50e      	bpl.n	802233a <_svfiprintf_r+0x32>
 802231c:	690b      	ldr	r3, [r1, #16]
 802231e:	b963      	cbnz	r3, 802233a <_svfiprintf_r+0x32>
 8022320:	2140      	movs	r1, #64	; 0x40
 8022322:	f7fc f86f 	bl	801e404 <_malloc_r>
 8022326:	6028      	str	r0, [r5, #0]
 8022328:	6128      	str	r0, [r5, #16]
 802232a:	b920      	cbnz	r0, 8022336 <_svfiprintf_r+0x2e>
 802232c:	230c      	movs	r3, #12
 802232e:	603b      	str	r3, [r7, #0]
 8022330:	f04f 30ff 	mov.w	r0, #4294967295
 8022334:	e0d1      	b.n	80224da <_svfiprintf_r+0x1d2>
 8022336:	2340      	movs	r3, #64	; 0x40
 8022338:	616b      	str	r3, [r5, #20]
 802233a:	2300      	movs	r3, #0
 802233c:	9309      	str	r3, [sp, #36]	; 0x24
 802233e:	2320      	movs	r3, #32
 8022340:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022344:	f8cd 800c 	str.w	r8, [sp, #12]
 8022348:	2330      	movs	r3, #48	; 0x30
 802234a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80224f4 <_svfiprintf_r+0x1ec>
 802234e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022352:	f04f 0901 	mov.w	r9, #1
 8022356:	4623      	mov	r3, r4
 8022358:	469a      	mov	sl, r3
 802235a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802235e:	b10a      	cbz	r2, 8022364 <_svfiprintf_r+0x5c>
 8022360:	2a25      	cmp	r2, #37	; 0x25
 8022362:	d1f9      	bne.n	8022358 <_svfiprintf_r+0x50>
 8022364:	ebba 0b04 	subs.w	fp, sl, r4
 8022368:	d00b      	beq.n	8022382 <_svfiprintf_r+0x7a>
 802236a:	465b      	mov	r3, fp
 802236c:	4622      	mov	r2, r4
 802236e:	4629      	mov	r1, r5
 8022370:	4638      	mov	r0, r7
 8022372:	f7ff ff6d 	bl	8022250 <__ssputs_r>
 8022376:	3001      	adds	r0, #1
 8022378:	f000 80aa 	beq.w	80224d0 <_svfiprintf_r+0x1c8>
 802237c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802237e:	445a      	add	r2, fp
 8022380:	9209      	str	r2, [sp, #36]	; 0x24
 8022382:	f89a 3000 	ldrb.w	r3, [sl]
 8022386:	2b00      	cmp	r3, #0
 8022388:	f000 80a2 	beq.w	80224d0 <_svfiprintf_r+0x1c8>
 802238c:	2300      	movs	r3, #0
 802238e:	f04f 32ff 	mov.w	r2, #4294967295
 8022392:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022396:	f10a 0a01 	add.w	sl, sl, #1
 802239a:	9304      	str	r3, [sp, #16]
 802239c:	9307      	str	r3, [sp, #28]
 802239e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80223a2:	931a      	str	r3, [sp, #104]	; 0x68
 80223a4:	4654      	mov	r4, sl
 80223a6:	2205      	movs	r2, #5
 80223a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80223ac:	4851      	ldr	r0, [pc, #324]	; (80224f4 <_svfiprintf_r+0x1ec>)
 80223ae:	f7dd ff17 	bl	80001e0 <memchr>
 80223b2:	9a04      	ldr	r2, [sp, #16]
 80223b4:	b9d8      	cbnz	r0, 80223ee <_svfiprintf_r+0xe6>
 80223b6:	06d0      	lsls	r0, r2, #27
 80223b8:	bf44      	itt	mi
 80223ba:	2320      	movmi	r3, #32
 80223bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80223c0:	0711      	lsls	r1, r2, #28
 80223c2:	bf44      	itt	mi
 80223c4:	232b      	movmi	r3, #43	; 0x2b
 80223c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80223ca:	f89a 3000 	ldrb.w	r3, [sl]
 80223ce:	2b2a      	cmp	r3, #42	; 0x2a
 80223d0:	d015      	beq.n	80223fe <_svfiprintf_r+0xf6>
 80223d2:	9a07      	ldr	r2, [sp, #28]
 80223d4:	4654      	mov	r4, sl
 80223d6:	2000      	movs	r0, #0
 80223d8:	f04f 0c0a 	mov.w	ip, #10
 80223dc:	4621      	mov	r1, r4
 80223de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80223e2:	3b30      	subs	r3, #48	; 0x30
 80223e4:	2b09      	cmp	r3, #9
 80223e6:	d94e      	bls.n	8022486 <_svfiprintf_r+0x17e>
 80223e8:	b1b0      	cbz	r0, 8022418 <_svfiprintf_r+0x110>
 80223ea:	9207      	str	r2, [sp, #28]
 80223ec:	e014      	b.n	8022418 <_svfiprintf_r+0x110>
 80223ee:	eba0 0308 	sub.w	r3, r0, r8
 80223f2:	fa09 f303 	lsl.w	r3, r9, r3
 80223f6:	4313      	orrs	r3, r2
 80223f8:	9304      	str	r3, [sp, #16]
 80223fa:	46a2      	mov	sl, r4
 80223fc:	e7d2      	b.n	80223a4 <_svfiprintf_r+0x9c>
 80223fe:	9b03      	ldr	r3, [sp, #12]
 8022400:	1d19      	adds	r1, r3, #4
 8022402:	681b      	ldr	r3, [r3, #0]
 8022404:	9103      	str	r1, [sp, #12]
 8022406:	2b00      	cmp	r3, #0
 8022408:	bfbb      	ittet	lt
 802240a:	425b      	neglt	r3, r3
 802240c:	f042 0202 	orrlt.w	r2, r2, #2
 8022410:	9307      	strge	r3, [sp, #28]
 8022412:	9307      	strlt	r3, [sp, #28]
 8022414:	bfb8      	it	lt
 8022416:	9204      	strlt	r2, [sp, #16]
 8022418:	7823      	ldrb	r3, [r4, #0]
 802241a:	2b2e      	cmp	r3, #46	; 0x2e
 802241c:	d10c      	bne.n	8022438 <_svfiprintf_r+0x130>
 802241e:	7863      	ldrb	r3, [r4, #1]
 8022420:	2b2a      	cmp	r3, #42	; 0x2a
 8022422:	d135      	bne.n	8022490 <_svfiprintf_r+0x188>
 8022424:	9b03      	ldr	r3, [sp, #12]
 8022426:	1d1a      	adds	r2, r3, #4
 8022428:	681b      	ldr	r3, [r3, #0]
 802242a:	9203      	str	r2, [sp, #12]
 802242c:	2b00      	cmp	r3, #0
 802242e:	bfb8      	it	lt
 8022430:	f04f 33ff 	movlt.w	r3, #4294967295
 8022434:	3402      	adds	r4, #2
 8022436:	9305      	str	r3, [sp, #20]
 8022438:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8022504 <_svfiprintf_r+0x1fc>
 802243c:	7821      	ldrb	r1, [r4, #0]
 802243e:	2203      	movs	r2, #3
 8022440:	4650      	mov	r0, sl
 8022442:	f7dd fecd 	bl	80001e0 <memchr>
 8022446:	b140      	cbz	r0, 802245a <_svfiprintf_r+0x152>
 8022448:	2340      	movs	r3, #64	; 0x40
 802244a:	eba0 000a 	sub.w	r0, r0, sl
 802244e:	fa03 f000 	lsl.w	r0, r3, r0
 8022452:	9b04      	ldr	r3, [sp, #16]
 8022454:	4303      	orrs	r3, r0
 8022456:	3401      	adds	r4, #1
 8022458:	9304      	str	r3, [sp, #16]
 802245a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802245e:	4826      	ldr	r0, [pc, #152]	; (80224f8 <_svfiprintf_r+0x1f0>)
 8022460:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022464:	2206      	movs	r2, #6
 8022466:	f7dd febb 	bl	80001e0 <memchr>
 802246a:	2800      	cmp	r0, #0
 802246c:	d038      	beq.n	80224e0 <_svfiprintf_r+0x1d8>
 802246e:	4b23      	ldr	r3, [pc, #140]	; (80224fc <_svfiprintf_r+0x1f4>)
 8022470:	bb1b      	cbnz	r3, 80224ba <_svfiprintf_r+0x1b2>
 8022472:	9b03      	ldr	r3, [sp, #12]
 8022474:	3307      	adds	r3, #7
 8022476:	f023 0307 	bic.w	r3, r3, #7
 802247a:	3308      	adds	r3, #8
 802247c:	9303      	str	r3, [sp, #12]
 802247e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022480:	4433      	add	r3, r6
 8022482:	9309      	str	r3, [sp, #36]	; 0x24
 8022484:	e767      	b.n	8022356 <_svfiprintf_r+0x4e>
 8022486:	fb0c 3202 	mla	r2, ip, r2, r3
 802248a:	460c      	mov	r4, r1
 802248c:	2001      	movs	r0, #1
 802248e:	e7a5      	b.n	80223dc <_svfiprintf_r+0xd4>
 8022490:	2300      	movs	r3, #0
 8022492:	3401      	adds	r4, #1
 8022494:	9305      	str	r3, [sp, #20]
 8022496:	4619      	mov	r1, r3
 8022498:	f04f 0c0a 	mov.w	ip, #10
 802249c:	4620      	mov	r0, r4
 802249e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80224a2:	3a30      	subs	r2, #48	; 0x30
 80224a4:	2a09      	cmp	r2, #9
 80224a6:	d903      	bls.n	80224b0 <_svfiprintf_r+0x1a8>
 80224a8:	2b00      	cmp	r3, #0
 80224aa:	d0c5      	beq.n	8022438 <_svfiprintf_r+0x130>
 80224ac:	9105      	str	r1, [sp, #20]
 80224ae:	e7c3      	b.n	8022438 <_svfiprintf_r+0x130>
 80224b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80224b4:	4604      	mov	r4, r0
 80224b6:	2301      	movs	r3, #1
 80224b8:	e7f0      	b.n	802249c <_svfiprintf_r+0x194>
 80224ba:	ab03      	add	r3, sp, #12
 80224bc:	9300      	str	r3, [sp, #0]
 80224be:	462a      	mov	r2, r5
 80224c0:	4b0f      	ldr	r3, [pc, #60]	; (8022500 <_svfiprintf_r+0x1f8>)
 80224c2:	a904      	add	r1, sp, #16
 80224c4:	4638      	mov	r0, r7
 80224c6:	f7fc f897 	bl	801e5f8 <_printf_float>
 80224ca:	1c42      	adds	r2, r0, #1
 80224cc:	4606      	mov	r6, r0
 80224ce:	d1d6      	bne.n	802247e <_svfiprintf_r+0x176>
 80224d0:	89ab      	ldrh	r3, [r5, #12]
 80224d2:	065b      	lsls	r3, r3, #25
 80224d4:	f53f af2c 	bmi.w	8022330 <_svfiprintf_r+0x28>
 80224d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80224da:	b01d      	add	sp, #116	; 0x74
 80224dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80224e0:	ab03      	add	r3, sp, #12
 80224e2:	9300      	str	r3, [sp, #0]
 80224e4:	462a      	mov	r2, r5
 80224e6:	4b06      	ldr	r3, [pc, #24]	; (8022500 <_svfiprintf_r+0x1f8>)
 80224e8:	a904      	add	r1, sp, #16
 80224ea:	4638      	mov	r0, r7
 80224ec:	f7fc fb28 	bl	801eb40 <_printf_i>
 80224f0:	e7eb      	b.n	80224ca <_svfiprintf_r+0x1c2>
 80224f2:	bf00      	nop
 80224f4:	0802743c 	.word	0x0802743c
 80224f8:	08027446 	.word	0x08027446
 80224fc:	0801e5f9 	.word	0x0801e5f9
 8022500:	08022251 	.word	0x08022251
 8022504:	08027442 	.word	0x08027442

08022508 <_sungetc_r>:
 8022508:	b538      	push	{r3, r4, r5, lr}
 802250a:	1c4b      	adds	r3, r1, #1
 802250c:	4614      	mov	r4, r2
 802250e:	d103      	bne.n	8022518 <_sungetc_r+0x10>
 8022510:	f04f 35ff 	mov.w	r5, #4294967295
 8022514:	4628      	mov	r0, r5
 8022516:	bd38      	pop	{r3, r4, r5, pc}
 8022518:	8993      	ldrh	r3, [r2, #12]
 802251a:	f023 0320 	bic.w	r3, r3, #32
 802251e:	8193      	strh	r3, [r2, #12]
 8022520:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022522:	6852      	ldr	r2, [r2, #4]
 8022524:	b2cd      	uxtb	r5, r1
 8022526:	b18b      	cbz	r3, 802254c <_sungetc_r+0x44>
 8022528:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 802252a:	4293      	cmp	r3, r2
 802252c:	dd08      	ble.n	8022540 <_sungetc_r+0x38>
 802252e:	6823      	ldr	r3, [r4, #0]
 8022530:	1e5a      	subs	r2, r3, #1
 8022532:	6022      	str	r2, [r4, #0]
 8022534:	f803 5c01 	strb.w	r5, [r3, #-1]
 8022538:	6863      	ldr	r3, [r4, #4]
 802253a:	3301      	adds	r3, #1
 802253c:	6063      	str	r3, [r4, #4]
 802253e:	e7e9      	b.n	8022514 <_sungetc_r+0xc>
 8022540:	4621      	mov	r1, r4
 8022542:	f000 fd2d 	bl	8022fa0 <__submore>
 8022546:	2800      	cmp	r0, #0
 8022548:	d0f1      	beq.n	802252e <_sungetc_r+0x26>
 802254a:	e7e1      	b.n	8022510 <_sungetc_r+0x8>
 802254c:	6921      	ldr	r1, [r4, #16]
 802254e:	6823      	ldr	r3, [r4, #0]
 8022550:	b151      	cbz	r1, 8022568 <_sungetc_r+0x60>
 8022552:	4299      	cmp	r1, r3
 8022554:	d208      	bcs.n	8022568 <_sungetc_r+0x60>
 8022556:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 802255a:	42a9      	cmp	r1, r5
 802255c:	d104      	bne.n	8022568 <_sungetc_r+0x60>
 802255e:	3b01      	subs	r3, #1
 8022560:	3201      	adds	r2, #1
 8022562:	6023      	str	r3, [r4, #0]
 8022564:	6062      	str	r2, [r4, #4]
 8022566:	e7d5      	b.n	8022514 <_sungetc_r+0xc>
 8022568:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 802256c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022570:	6363      	str	r3, [r4, #52]	; 0x34
 8022572:	2303      	movs	r3, #3
 8022574:	63a3      	str	r3, [r4, #56]	; 0x38
 8022576:	4623      	mov	r3, r4
 8022578:	f803 5f46 	strb.w	r5, [r3, #70]!
 802257c:	6023      	str	r3, [r4, #0]
 802257e:	2301      	movs	r3, #1
 8022580:	e7dc      	b.n	802253c <_sungetc_r+0x34>

08022582 <__ssrefill_r>:
 8022582:	b510      	push	{r4, lr}
 8022584:	460c      	mov	r4, r1
 8022586:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8022588:	b169      	cbz	r1, 80225a6 <__ssrefill_r+0x24>
 802258a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802258e:	4299      	cmp	r1, r3
 8022590:	d001      	beq.n	8022596 <__ssrefill_r+0x14>
 8022592:	f7fb fee7 	bl	801e364 <_free_r>
 8022596:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022598:	6063      	str	r3, [r4, #4]
 802259a:	2000      	movs	r0, #0
 802259c:	6360      	str	r0, [r4, #52]	; 0x34
 802259e:	b113      	cbz	r3, 80225a6 <__ssrefill_r+0x24>
 80225a0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80225a2:	6023      	str	r3, [r4, #0]
 80225a4:	bd10      	pop	{r4, pc}
 80225a6:	6923      	ldr	r3, [r4, #16]
 80225a8:	6023      	str	r3, [r4, #0]
 80225aa:	2300      	movs	r3, #0
 80225ac:	6063      	str	r3, [r4, #4]
 80225ae:	89a3      	ldrh	r3, [r4, #12]
 80225b0:	f043 0320 	orr.w	r3, r3, #32
 80225b4:	81a3      	strh	r3, [r4, #12]
 80225b6:	f04f 30ff 	mov.w	r0, #4294967295
 80225ba:	e7f3      	b.n	80225a4 <__ssrefill_r+0x22>

080225bc <__ssvfiscanf_r>:
 80225bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80225c0:	460c      	mov	r4, r1
 80225c2:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80225c6:	2100      	movs	r1, #0
 80225c8:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80225cc:	49b2      	ldr	r1, [pc, #712]	; (8022898 <__ssvfiscanf_r+0x2dc>)
 80225ce:	91a0      	str	r1, [sp, #640]	; 0x280
 80225d0:	f10d 0804 	add.w	r8, sp, #4
 80225d4:	49b1      	ldr	r1, [pc, #708]	; (802289c <__ssvfiscanf_r+0x2e0>)
 80225d6:	4fb2      	ldr	r7, [pc, #712]	; (80228a0 <__ssvfiscanf_r+0x2e4>)
 80225d8:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 80228a4 <__ssvfiscanf_r+0x2e8>
 80225dc:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80225e0:	4606      	mov	r6, r0
 80225e2:	91a1      	str	r1, [sp, #644]	; 0x284
 80225e4:	9300      	str	r3, [sp, #0]
 80225e6:	f892 a000 	ldrb.w	sl, [r2]
 80225ea:	f1ba 0f00 	cmp.w	sl, #0
 80225ee:	f000 8151 	beq.w	8022894 <__ssvfiscanf_r+0x2d8>
 80225f2:	f81a 3007 	ldrb.w	r3, [sl, r7]
 80225f6:	f013 0308 	ands.w	r3, r3, #8
 80225fa:	f102 0501 	add.w	r5, r2, #1
 80225fe:	d019      	beq.n	8022634 <__ssvfiscanf_r+0x78>
 8022600:	6863      	ldr	r3, [r4, #4]
 8022602:	2b00      	cmp	r3, #0
 8022604:	dd0f      	ble.n	8022626 <__ssvfiscanf_r+0x6a>
 8022606:	6823      	ldr	r3, [r4, #0]
 8022608:	781a      	ldrb	r2, [r3, #0]
 802260a:	5cba      	ldrb	r2, [r7, r2]
 802260c:	0712      	lsls	r2, r2, #28
 802260e:	d401      	bmi.n	8022614 <__ssvfiscanf_r+0x58>
 8022610:	462a      	mov	r2, r5
 8022612:	e7e8      	b.n	80225e6 <__ssvfiscanf_r+0x2a>
 8022614:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8022616:	3201      	adds	r2, #1
 8022618:	9245      	str	r2, [sp, #276]	; 0x114
 802261a:	6862      	ldr	r2, [r4, #4]
 802261c:	3301      	adds	r3, #1
 802261e:	3a01      	subs	r2, #1
 8022620:	6062      	str	r2, [r4, #4]
 8022622:	6023      	str	r3, [r4, #0]
 8022624:	e7ec      	b.n	8022600 <__ssvfiscanf_r+0x44>
 8022626:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8022628:	4621      	mov	r1, r4
 802262a:	4630      	mov	r0, r6
 802262c:	4798      	blx	r3
 802262e:	2800      	cmp	r0, #0
 8022630:	d0e9      	beq.n	8022606 <__ssvfiscanf_r+0x4a>
 8022632:	e7ed      	b.n	8022610 <__ssvfiscanf_r+0x54>
 8022634:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8022638:	f040 8083 	bne.w	8022742 <__ssvfiscanf_r+0x186>
 802263c:	9341      	str	r3, [sp, #260]	; 0x104
 802263e:	9343      	str	r3, [sp, #268]	; 0x10c
 8022640:	7853      	ldrb	r3, [r2, #1]
 8022642:	2b2a      	cmp	r3, #42	; 0x2a
 8022644:	bf02      	ittt	eq
 8022646:	2310      	moveq	r3, #16
 8022648:	1c95      	addeq	r5, r2, #2
 802264a:	9341      	streq	r3, [sp, #260]	; 0x104
 802264c:	220a      	movs	r2, #10
 802264e:	46ab      	mov	fp, r5
 8022650:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8022654:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8022658:	2b09      	cmp	r3, #9
 802265a:	d91d      	bls.n	8022698 <__ssvfiscanf_r+0xdc>
 802265c:	4891      	ldr	r0, [pc, #580]	; (80228a4 <__ssvfiscanf_r+0x2e8>)
 802265e:	2203      	movs	r2, #3
 8022660:	f7dd fdbe 	bl	80001e0 <memchr>
 8022664:	b140      	cbz	r0, 8022678 <__ssvfiscanf_r+0xbc>
 8022666:	2301      	movs	r3, #1
 8022668:	eba0 0009 	sub.w	r0, r0, r9
 802266c:	fa03 f000 	lsl.w	r0, r3, r0
 8022670:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8022672:	4318      	orrs	r0, r3
 8022674:	9041      	str	r0, [sp, #260]	; 0x104
 8022676:	465d      	mov	r5, fp
 8022678:	f815 3b01 	ldrb.w	r3, [r5], #1
 802267c:	2b78      	cmp	r3, #120	; 0x78
 802267e:	d806      	bhi.n	802268e <__ssvfiscanf_r+0xd2>
 8022680:	2b57      	cmp	r3, #87	; 0x57
 8022682:	d810      	bhi.n	80226a6 <__ssvfiscanf_r+0xea>
 8022684:	2b25      	cmp	r3, #37	; 0x25
 8022686:	d05c      	beq.n	8022742 <__ssvfiscanf_r+0x186>
 8022688:	d856      	bhi.n	8022738 <__ssvfiscanf_r+0x17c>
 802268a:	2b00      	cmp	r3, #0
 802268c:	d074      	beq.n	8022778 <__ssvfiscanf_r+0x1bc>
 802268e:	2303      	movs	r3, #3
 8022690:	9347      	str	r3, [sp, #284]	; 0x11c
 8022692:	230a      	movs	r3, #10
 8022694:	9342      	str	r3, [sp, #264]	; 0x108
 8022696:	e081      	b.n	802279c <__ssvfiscanf_r+0x1e0>
 8022698:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 802269a:	fb02 1303 	mla	r3, r2, r3, r1
 802269e:	3b30      	subs	r3, #48	; 0x30
 80226a0:	9343      	str	r3, [sp, #268]	; 0x10c
 80226a2:	465d      	mov	r5, fp
 80226a4:	e7d3      	b.n	802264e <__ssvfiscanf_r+0x92>
 80226a6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80226aa:	2a20      	cmp	r2, #32
 80226ac:	d8ef      	bhi.n	802268e <__ssvfiscanf_r+0xd2>
 80226ae:	a101      	add	r1, pc, #4	; (adr r1, 80226b4 <__ssvfiscanf_r+0xf8>)
 80226b0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80226b4:	08022787 	.word	0x08022787
 80226b8:	0802268f 	.word	0x0802268f
 80226bc:	0802268f 	.word	0x0802268f
 80226c0:	080227e5 	.word	0x080227e5
 80226c4:	0802268f 	.word	0x0802268f
 80226c8:	0802268f 	.word	0x0802268f
 80226cc:	0802268f 	.word	0x0802268f
 80226d0:	0802268f 	.word	0x0802268f
 80226d4:	0802268f 	.word	0x0802268f
 80226d8:	0802268f 	.word	0x0802268f
 80226dc:	0802268f 	.word	0x0802268f
 80226e0:	080227fb 	.word	0x080227fb
 80226e4:	080227d1 	.word	0x080227d1
 80226e8:	0802273f 	.word	0x0802273f
 80226ec:	0802273f 	.word	0x0802273f
 80226f0:	0802273f 	.word	0x0802273f
 80226f4:	0802268f 	.word	0x0802268f
 80226f8:	080227d5 	.word	0x080227d5
 80226fc:	0802268f 	.word	0x0802268f
 8022700:	0802268f 	.word	0x0802268f
 8022704:	0802268f 	.word	0x0802268f
 8022708:	0802268f 	.word	0x0802268f
 802270c:	0802280b 	.word	0x0802280b
 8022710:	080227dd 	.word	0x080227dd
 8022714:	0802277f 	.word	0x0802277f
 8022718:	0802268f 	.word	0x0802268f
 802271c:	0802268f 	.word	0x0802268f
 8022720:	08022807 	.word	0x08022807
 8022724:	0802268f 	.word	0x0802268f
 8022728:	080227d1 	.word	0x080227d1
 802272c:	0802268f 	.word	0x0802268f
 8022730:	0802268f 	.word	0x0802268f
 8022734:	08022787 	.word	0x08022787
 8022738:	3b45      	subs	r3, #69	; 0x45
 802273a:	2b02      	cmp	r3, #2
 802273c:	d8a7      	bhi.n	802268e <__ssvfiscanf_r+0xd2>
 802273e:	2305      	movs	r3, #5
 8022740:	e02b      	b.n	802279a <__ssvfiscanf_r+0x1de>
 8022742:	6863      	ldr	r3, [r4, #4]
 8022744:	2b00      	cmp	r3, #0
 8022746:	dd0d      	ble.n	8022764 <__ssvfiscanf_r+0x1a8>
 8022748:	6823      	ldr	r3, [r4, #0]
 802274a:	781a      	ldrb	r2, [r3, #0]
 802274c:	4552      	cmp	r2, sl
 802274e:	f040 80a1 	bne.w	8022894 <__ssvfiscanf_r+0x2d8>
 8022752:	3301      	adds	r3, #1
 8022754:	6862      	ldr	r2, [r4, #4]
 8022756:	6023      	str	r3, [r4, #0]
 8022758:	9b45      	ldr	r3, [sp, #276]	; 0x114
 802275a:	3a01      	subs	r2, #1
 802275c:	3301      	adds	r3, #1
 802275e:	6062      	str	r2, [r4, #4]
 8022760:	9345      	str	r3, [sp, #276]	; 0x114
 8022762:	e755      	b.n	8022610 <__ssvfiscanf_r+0x54>
 8022764:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8022766:	4621      	mov	r1, r4
 8022768:	4630      	mov	r0, r6
 802276a:	4798      	blx	r3
 802276c:	2800      	cmp	r0, #0
 802276e:	d0eb      	beq.n	8022748 <__ssvfiscanf_r+0x18c>
 8022770:	9844      	ldr	r0, [sp, #272]	; 0x110
 8022772:	2800      	cmp	r0, #0
 8022774:	f040 8084 	bne.w	8022880 <__ssvfiscanf_r+0x2c4>
 8022778:	f04f 30ff 	mov.w	r0, #4294967295
 802277c:	e086      	b.n	802288c <__ssvfiscanf_r+0x2d0>
 802277e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8022780:	f042 0220 	orr.w	r2, r2, #32
 8022784:	9241      	str	r2, [sp, #260]	; 0x104
 8022786:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8022788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 802278c:	9241      	str	r2, [sp, #260]	; 0x104
 802278e:	2210      	movs	r2, #16
 8022790:	2b6f      	cmp	r3, #111	; 0x6f
 8022792:	9242      	str	r2, [sp, #264]	; 0x108
 8022794:	bf34      	ite	cc
 8022796:	2303      	movcc	r3, #3
 8022798:	2304      	movcs	r3, #4
 802279a:	9347      	str	r3, [sp, #284]	; 0x11c
 802279c:	6863      	ldr	r3, [r4, #4]
 802279e:	2b00      	cmp	r3, #0
 80227a0:	dd41      	ble.n	8022826 <__ssvfiscanf_r+0x26a>
 80227a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80227a4:	0659      	lsls	r1, r3, #25
 80227a6:	d404      	bmi.n	80227b2 <__ssvfiscanf_r+0x1f6>
 80227a8:	6823      	ldr	r3, [r4, #0]
 80227aa:	781a      	ldrb	r2, [r3, #0]
 80227ac:	5cba      	ldrb	r2, [r7, r2]
 80227ae:	0712      	lsls	r2, r2, #28
 80227b0:	d440      	bmi.n	8022834 <__ssvfiscanf_r+0x278>
 80227b2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80227b4:	2b02      	cmp	r3, #2
 80227b6:	dc4f      	bgt.n	8022858 <__ssvfiscanf_r+0x29c>
 80227b8:	466b      	mov	r3, sp
 80227ba:	4622      	mov	r2, r4
 80227bc:	a941      	add	r1, sp, #260	; 0x104
 80227be:	4630      	mov	r0, r6
 80227c0:	f000 f9ce 	bl	8022b60 <_scanf_chars>
 80227c4:	2801      	cmp	r0, #1
 80227c6:	d065      	beq.n	8022894 <__ssvfiscanf_r+0x2d8>
 80227c8:	2802      	cmp	r0, #2
 80227ca:	f47f af21 	bne.w	8022610 <__ssvfiscanf_r+0x54>
 80227ce:	e7cf      	b.n	8022770 <__ssvfiscanf_r+0x1b4>
 80227d0:	220a      	movs	r2, #10
 80227d2:	e7dd      	b.n	8022790 <__ssvfiscanf_r+0x1d4>
 80227d4:	2300      	movs	r3, #0
 80227d6:	9342      	str	r3, [sp, #264]	; 0x108
 80227d8:	2303      	movs	r3, #3
 80227da:	e7de      	b.n	802279a <__ssvfiscanf_r+0x1de>
 80227dc:	2308      	movs	r3, #8
 80227de:	9342      	str	r3, [sp, #264]	; 0x108
 80227e0:	2304      	movs	r3, #4
 80227e2:	e7da      	b.n	802279a <__ssvfiscanf_r+0x1de>
 80227e4:	4629      	mov	r1, r5
 80227e6:	4640      	mov	r0, r8
 80227e8:	f000 fb22 	bl	8022e30 <__sccl>
 80227ec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80227ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80227f2:	9341      	str	r3, [sp, #260]	; 0x104
 80227f4:	4605      	mov	r5, r0
 80227f6:	2301      	movs	r3, #1
 80227f8:	e7cf      	b.n	802279a <__ssvfiscanf_r+0x1de>
 80227fa:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80227fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022800:	9341      	str	r3, [sp, #260]	; 0x104
 8022802:	2300      	movs	r3, #0
 8022804:	e7c9      	b.n	802279a <__ssvfiscanf_r+0x1de>
 8022806:	2302      	movs	r3, #2
 8022808:	e7c7      	b.n	802279a <__ssvfiscanf_r+0x1de>
 802280a:	9841      	ldr	r0, [sp, #260]	; 0x104
 802280c:	06c3      	lsls	r3, r0, #27
 802280e:	f53f aeff 	bmi.w	8022610 <__ssvfiscanf_r+0x54>
 8022812:	9b00      	ldr	r3, [sp, #0]
 8022814:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8022816:	1d19      	adds	r1, r3, #4
 8022818:	9100      	str	r1, [sp, #0]
 802281a:	681b      	ldr	r3, [r3, #0]
 802281c:	07c0      	lsls	r0, r0, #31
 802281e:	bf4c      	ite	mi
 8022820:	801a      	strhmi	r2, [r3, #0]
 8022822:	601a      	strpl	r2, [r3, #0]
 8022824:	e6f4      	b.n	8022610 <__ssvfiscanf_r+0x54>
 8022826:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8022828:	4621      	mov	r1, r4
 802282a:	4630      	mov	r0, r6
 802282c:	4798      	blx	r3
 802282e:	2800      	cmp	r0, #0
 8022830:	d0b7      	beq.n	80227a2 <__ssvfiscanf_r+0x1e6>
 8022832:	e79d      	b.n	8022770 <__ssvfiscanf_r+0x1b4>
 8022834:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8022836:	3201      	adds	r2, #1
 8022838:	9245      	str	r2, [sp, #276]	; 0x114
 802283a:	6862      	ldr	r2, [r4, #4]
 802283c:	3a01      	subs	r2, #1
 802283e:	2a00      	cmp	r2, #0
 8022840:	6062      	str	r2, [r4, #4]
 8022842:	dd02      	ble.n	802284a <__ssvfiscanf_r+0x28e>
 8022844:	3301      	adds	r3, #1
 8022846:	6023      	str	r3, [r4, #0]
 8022848:	e7ae      	b.n	80227a8 <__ssvfiscanf_r+0x1ec>
 802284a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 802284c:	4621      	mov	r1, r4
 802284e:	4630      	mov	r0, r6
 8022850:	4798      	blx	r3
 8022852:	2800      	cmp	r0, #0
 8022854:	d0a8      	beq.n	80227a8 <__ssvfiscanf_r+0x1ec>
 8022856:	e78b      	b.n	8022770 <__ssvfiscanf_r+0x1b4>
 8022858:	2b04      	cmp	r3, #4
 802285a:	dc06      	bgt.n	802286a <__ssvfiscanf_r+0x2ae>
 802285c:	466b      	mov	r3, sp
 802285e:	4622      	mov	r2, r4
 8022860:	a941      	add	r1, sp, #260	; 0x104
 8022862:	4630      	mov	r0, r6
 8022864:	f000 f9d4 	bl	8022c10 <_scanf_i>
 8022868:	e7ac      	b.n	80227c4 <__ssvfiscanf_r+0x208>
 802286a:	4b0f      	ldr	r3, [pc, #60]	; (80228a8 <__ssvfiscanf_r+0x2ec>)
 802286c:	2b00      	cmp	r3, #0
 802286e:	f43f aecf 	beq.w	8022610 <__ssvfiscanf_r+0x54>
 8022872:	466b      	mov	r3, sp
 8022874:	4622      	mov	r2, r4
 8022876:	a941      	add	r1, sp, #260	; 0x104
 8022878:	4630      	mov	r0, r6
 802287a:	f7fc fa87 	bl	801ed8c <_scanf_float>
 802287e:	e7a1      	b.n	80227c4 <__ssvfiscanf_r+0x208>
 8022880:	89a3      	ldrh	r3, [r4, #12]
 8022882:	f013 0f40 	tst.w	r3, #64	; 0x40
 8022886:	bf18      	it	ne
 8022888:	f04f 30ff 	movne.w	r0, #4294967295
 802288c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8022890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022894:	9844      	ldr	r0, [sp, #272]	; 0x110
 8022896:	e7f9      	b.n	802288c <__ssvfiscanf_r+0x2d0>
 8022898:	08022509 	.word	0x08022509
 802289c:	08022583 	.word	0x08022583
 80228a0:	08026f3d 	.word	0x08026f3d
 80228a4:	08027442 	.word	0x08027442
 80228a8:	0801ed8d 	.word	0x0801ed8d

080228ac <__sfputc_r>:
 80228ac:	6893      	ldr	r3, [r2, #8]
 80228ae:	3b01      	subs	r3, #1
 80228b0:	2b00      	cmp	r3, #0
 80228b2:	b410      	push	{r4}
 80228b4:	6093      	str	r3, [r2, #8]
 80228b6:	da08      	bge.n	80228ca <__sfputc_r+0x1e>
 80228b8:	6994      	ldr	r4, [r2, #24]
 80228ba:	42a3      	cmp	r3, r4
 80228bc:	db01      	blt.n	80228c2 <__sfputc_r+0x16>
 80228be:	290a      	cmp	r1, #10
 80228c0:	d103      	bne.n	80228ca <__sfputc_r+0x1e>
 80228c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80228c6:	f000 bba5 	b.w	8023014 <__swbuf_r>
 80228ca:	6813      	ldr	r3, [r2, #0]
 80228cc:	1c58      	adds	r0, r3, #1
 80228ce:	6010      	str	r0, [r2, #0]
 80228d0:	7019      	strb	r1, [r3, #0]
 80228d2:	4608      	mov	r0, r1
 80228d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80228d8:	4770      	bx	lr

080228da <__sfputs_r>:
 80228da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80228dc:	4606      	mov	r6, r0
 80228de:	460f      	mov	r7, r1
 80228e0:	4614      	mov	r4, r2
 80228e2:	18d5      	adds	r5, r2, r3
 80228e4:	42ac      	cmp	r4, r5
 80228e6:	d101      	bne.n	80228ec <__sfputs_r+0x12>
 80228e8:	2000      	movs	r0, #0
 80228ea:	e007      	b.n	80228fc <__sfputs_r+0x22>
 80228ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80228f0:	463a      	mov	r2, r7
 80228f2:	4630      	mov	r0, r6
 80228f4:	f7ff ffda 	bl	80228ac <__sfputc_r>
 80228f8:	1c43      	adds	r3, r0, #1
 80228fa:	d1f3      	bne.n	80228e4 <__sfputs_r+0xa>
 80228fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022900 <_vfiprintf_r>:
 8022900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022904:	460d      	mov	r5, r1
 8022906:	b09d      	sub	sp, #116	; 0x74
 8022908:	4614      	mov	r4, r2
 802290a:	4698      	mov	r8, r3
 802290c:	4606      	mov	r6, r0
 802290e:	b118      	cbz	r0, 8022918 <_vfiprintf_r+0x18>
 8022910:	6983      	ldr	r3, [r0, #24]
 8022912:	b90b      	cbnz	r3, 8022918 <_vfiprintf_r+0x18>
 8022914:	f7fb fc1e 	bl	801e154 <__sinit>
 8022918:	4b89      	ldr	r3, [pc, #548]	; (8022b40 <_vfiprintf_r+0x240>)
 802291a:	429d      	cmp	r5, r3
 802291c:	d11b      	bne.n	8022956 <_vfiprintf_r+0x56>
 802291e:	6875      	ldr	r5, [r6, #4]
 8022920:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022922:	07d9      	lsls	r1, r3, #31
 8022924:	d405      	bmi.n	8022932 <_vfiprintf_r+0x32>
 8022926:	89ab      	ldrh	r3, [r5, #12]
 8022928:	059a      	lsls	r2, r3, #22
 802292a:	d402      	bmi.n	8022932 <_vfiprintf_r+0x32>
 802292c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802292e:	f7e4 faeb 	bl	8006f08 <__retarget_lock_acquire_recursive>
 8022932:	89ab      	ldrh	r3, [r5, #12]
 8022934:	071b      	lsls	r3, r3, #28
 8022936:	d501      	bpl.n	802293c <_vfiprintf_r+0x3c>
 8022938:	692b      	ldr	r3, [r5, #16]
 802293a:	b9eb      	cbnz	r3, 8022978 <_vfiprintf_r+0x78>
 802293c:	4629      	mov	r1, r5
 802293e:	4630      	mov	r0, r6
 8022940:	f000 fbc8 	bl	80230d4 <__swsetup_r>
 8022944:	b1c0      	cbz	r0, 8022978 <_vfiprintf_r+0x78>
 8022946:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022948:	07dc      	lsls	r4, r3, #31
 802294a:	d50e      	bpl.n	802296a <_vfiprintf_r+0x6a>
 802294c:	f04f 30ff 	mov.w	r0, #4294967295
 8022950:	b01d      	add	sp, #116	; 0x74
 8022952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022956:	4b7b      	ldr	r3, [pc, #492]	; (8022b44 <_vfiprintf_r+0x244>)
 8022958:	429d      	cmp	r5, r3
 802295a:	d101      	bne.n	8022960 <_vfiprintf_r+0x60>
 802295c:	68b5      	ldr	r5, [r6, #8]
 802295e:	e7df      	b.n	8022920 <_vfiprintf_r+0x20>
 8022960:	4b79      	ldr	r3, [pc, #484]	; (8022b48 <_vfiprintf_r+0x248>)
 8022962:	429d      	cmp	r5, r3
 8022964:	bf08      	it	eq
 8022966:	68f5      	ldreq	r5, [r6, #12]
 8022968:	e7da      	b.n	8022920 <_vfiprintf_r+0x20>
 802296a:	89ab      	ldrh	r3, [r5, #12]
 802296c:	0598      	lsls	r0, r3, #22
 802296e:	d4ed      	bmi.n	802294c <_vfiprintf_r+0x4c>
 8022970:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022972:	f7e4 fadd 	bl	8006f30 <__retarget_lock_release_recursive>
 8022976:	e7e9      	b.n	802294c <_vfiprintf_r+0x4c>
 8022978:	2300      	movs	r3, #0
 802297a:	9309      	str	r3, [sp, #36]	; 0x24
 802297c:	2320      	movs	r3, #32
 802297e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022982:	f8cd 800c 	str.w	r8, [sp, #12]
 8022986:	2330      	movs	r3, #48	; 0x30
 8022988:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8022b4c <_vfiprintf_r+0x24c>
 802298c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022990:	f04f 0901 	mov.w	r9, #1
 8022994:	4623      	mov	r3, r4
 8022996:	469a      	mov	sl, r3
 8022998:	f813 2b01 	ldrb.w	r2, [r3], #1
 802299c:	b10a      	cbz	r2, 80229a2 <_vfiprintf_r+0xa2>
 802299e:	2a25      	cmp	r2, #37	; 0x25
 80229a0:	d1f9      	bne.n	8022996 <_vfiprintf_r+0x96>
 80229a2:	ebba 0b04 	subs.w	fp, sl, r4
 80229a6:	d00b      	beq.n	80229c0 <_vfiprintf_r+0xc0>
 80229a8:	465b      	mov	r3, fp
 80229aa:	4622      	mov	r2, r4
 80229ac:	4629      	mov	r1, r5
 80229ae:	4630      	mov	r0, r6
 80229b0:	f7ff ff93 	bl	80228da <__sfputs_r>
 80229b4:	3001      	adds	r0, #1
 80229b6:	f000 80aa 	beq.w	8022b0e <_vfiprintf_r+0x20e>
 80229ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80229bc:	445a      	add	r2, fp
 80229be:	9209      	str	r2, [sp, #36]	; 0x24
 80229c0:	f89a 3000 	ldrb.w	r3, [sl]
 80229c4:	2b00      	cmp	r3, #0
 80229c6:	f000 80a2 	beq.w	8022b0e <_vfiprintf_r+0x20e>
 80229ca:	2300      	movs	r3, #0
 80229cc:	f04f 32ff 	mov.w	r2, #4294967295
 80229d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80229d4:	f10a 0a01 	add.w	sl, sl, #1
 80229d8:	9304      	str	r3, [sp, #16]
 80229da:	9307      	str	r3, [sp, #28]
 80229dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80229e0:	931a      	str	r3, [sp, #104]	; 0x68
 80229e2:	4654      	mov	r4, sl
 80229e4:	2205      	movs	r2, #5
 80229e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80229ea:	4858      	ldr	r0, [pc, #352]	; (8022b4c <_vfiprintf_r+0x24c>)
 80229ec:	f7dd fbf8 	bl	80001e0 <memchr>
 80229f0:	9a04      	ldr	r2, [sp, #16]
 80229f2:	b9d8      	cbnz	r0, 8022a2c <_vfiprintf_r+0x12c>
 80229f4:	06d1      	lsls	r1, r2, #27
 80229f6:	bf44      	itt	mi
 80229f8:	2320      	movmi	r3, #32
 80229fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80229fe:	0713      	lsls	r3, r2, #28
 8022a00:	bf44      	itt	mi
 8022a02:	232b      	movmi	r3, #43	; 0x2b
 8022a04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022a08:	f89a 3000 	ldrb.w	r3, [sl]
 8022a0c:	2b2a      	cmp	r3, #42	; 0x2a
 8022a0e:	d015      	beq.n	8022a3c <_vfiprintf_r+0x13c>
 8022a10:	9a07      	ldr	r2, [sp, #28]
 8022a12:	4654      	mov	r4, sl
 8022a14:	2000      	movs	r0, #0
 8022a16:	f04f 0c0a 	mov.w	ip, #10
 8022a1a:	4621      	mov	r1, r4
 8022a1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022a20:	3b30      	subs	r3, #48	; 0x30
 8022a22:	2b09      	cmp	r3, #9
 8022a24:	d94e      	bls.n	8022ac4 <_vfiprintf_r+0x1c4>
 8022a26:	b1b0      	cbz	r0, 8022a56 <_vfiprintf_r+0x156>
 8022a28:	9207      	str	r2, [sp, #28]
 8022a2a:	e014      	b.n	8022a56 <_vfiprintf_r+0x156>
 8022a2c:	eba0 0308 	sub.w	r3, r0, r8
 8022a30:	fa09 f303 	lsl.w	r3, r9, r3
 8022a34:	4313      	orrs	r3, r2
 8022a36:	9304      	str	r3, [sp, #16]
 8022a38:	46a2      	mov	sl, r4
 8022a3a:	e7d2      	b.n	80229e2 <_vfiprintf_r+0xe2>
 8022a3c:	9b03      	ldr	r3, [sp, #12]
 8022a3e:	1d19      	adds	r1, r3, #4
 8022a40:	681b      	ldr	r3, [r3, #0]
 8022a42:	9103      	str	r1, [sp, #12]
 8022a44:	2b00      	cmp	r3, #0
 8022a46:	bfbb      	ittet	lt
 8022a48:	425b      	neglt	r3, r3
 8022a4a:	f042 0202 	orrlt.w	r2, r2, #2
 8022a4e:	9307      	strge	r3, [sp, #28]
 8022a50:	9307      	strlt	r3, [sp, #28]
 8022a52:	bfb8      	it	lt
 8022a54:	9204      	strlt	r2, [sp, #16]
 8022a56:	7823      	ldrb	r3, [r4, #0]
 8022a58:	2b2e      	cmp	r3, #46	; 0x2e
 8022a5a:	d10c      	bne.n	8022a76 <_vfiprintf_r+0x176>
 8022a5c:	7863      	ldrb	r3, [r4, #1]
 8022a5e:	2b2a      	cmp	r3, #42	; 0x2a
 8022a60:	d135      	bne.n	8022ace <_vfiprintf_r+0x1ce>
 8022a62:	9b03      	ldr	r3, [sp, #12]
 8022a64:	1d1a      	adds	r2, r3, #4
 8022a66:	681b      	ldr	r3, [r3, #0]
 8022a68:	9203      	str	r2, [sp, #12]
 8022a6a:	2b00      	cmp	r3, #0
 8022a6c:	bfb8      	it	lt
 8022a6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8022a72:	3402      	adds	r4, #2
 8022a74:	9305      	str	r3, [sp, #20]
 8022a76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8022b5c <_vfiprintf_r+0x25c>
 8022a7a:	7821      	ldrb	r1, [r4, #0]
 8022a7c:	2203      	movs	r2, #3
 8022a7e:	4650      	mov	r0, sl
 8022a80:	f7dd fbae 	bl	80001e0 <memchr>
 8022a84:	b140      	cbz	r0, 8022a98 <_vfiprintf_r+0x198>
 8022a86:	2340      	movs	r3, #64	; 0x40
 8022a88:	eba0 000a 	sub.w	r0, r0, sl
 8022a8c:	fa03 f000 	lsl.w	r0, r3, r0
 8022a90:	9b04      	ldr	r3, [sp, #16]
 8022a92:	4303      	orrs	r3, r0
 8022a94:	3401      	adds	r4, #1
 8022a96:	9304      	str	r3, [sp, #16]
 8022a98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022a9c:	482c      	ldr	r0, [pc, #176]	; (8022b50 <_vfiprintf_r+0x250>)
 8022a9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022aa2:	2206      	movs	r2, #6
 8022aa4:	f7dd fb9c 	bl	80001e0 <memchr>
 8022aa8:	2800      	cmp	r0, #0
 8022aaa:	d03f      	beq.n	8022b2c <_vfiprintf_r+0x22c>
 8022aac:	4b29      	ldr	r3, [pc, #164]	; (8022b54 <_vfiprintf_r+0x254>)
 8022aae:	bb1b      	cbnz	r3, 8022af8 <_vfiprintf_r+0x1f8>
 8022ab0:	9b03      	ldr	r3, [sp, #12]
 8022ab2:	3307      	adds	r3, #7
 8022ab4:	f023 0307 	bic.w	r3, r3, #7
 8022ab8:	3308      	adds	r3, #8
 8022aba:	9303      	str	r3, [sp, #12]
 8022abc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022abe:	443b      	add	r3, r7
 8022ac0:	9309      	str	r3, [sp, #36]	; 0x24
 8022ac2:	e767      	b.n	8022994 <_vfiprintf_r+0x94>
 8022ac4:	fb0c 3202 	mla	r2, ip, r2, r3
 8022ac8:	460c      	mov	r4, r1
 8022aca:	2001      	movs	r0, #1
 8022acc:	e7a5      	b.n	8022a1a <_vfiprintf_r+0x11a>
 8022ace:	2300      	movs	r3, #0
 8022ad0:	3401      	adds	r4, #1
 8022ad2:	9305      	str	r3, [sp, #20]
 8022ad4:	4619      	mov	r1, r3
 8022ad6:	f04f 0c0a 	mov.w	ip, #10
 8022ada:	4620      	mov	r0, r4
 8022adc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022ae0:	3a30      	subs	r2, #48	; 0x30
 8022ae2:	2a09      	cmp	r2, #9
 8022ae4:	d903      	bls.n	8022aee <_vfiprintf_r+0x1ee>
 8022ae6:	2b00      	cmp	r3, #0
 8022ae8:	d0c5      	beq.n	8022a76 <_vfiprintf_r+0x176>
 8022aea:	9105      	str	r1, [sp, #20]
 8022aec:	e7c3      	b.n	8022a76 <_vfiprintf_r+0x176>
 8022aee:	fb0c 2101 	mla	r1, ip, r1, r2
 8022af2:	4604      	mov	r4, r0
 8022af4:	2301      	movs	r3, #1
 8022af6:	e7f0      	b.n	8022ada <_vfiprintf_r+0x1da>
 8022af8:	ab03      	add	r3, sp, #12
 8022afa:	9300      	str	r3, [sp, #0]
 8022afc:	462a      	mov	r2, r5
 8022afe:	4b16      	ldr	r3, [pc, #88]	; (8022b58 <_vfiprintf_r+0x258>)
 8022b00:	a904      	add	r1, sp, #16
 8022b02:	4630      	mov	r0, r6
 8022b04:	f7fb fd78 	bl	801e5f8 <_printf_float>
 8022b08:	4607      	mov	r7, r0
 8022b0a:	1c78      	adds	r0, r7, #1
 8022b0c:	d1d6      	bne.n	8022abc <_vfiprintf_r+0x1bc>
 8022b0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022b10:	07d9      	lsls	r1, r3, #31
 8022b12:	d405      	bmi.n	8022b20 <_vfiprintf_r+0x220>
 8022b14:	89ab      	ldrh	r3, [r5, #12]
 8022b16:	059a      	lsls	r2, r3, #22
 8022b18:	d402      	bmi.n	8022b20 <_vfiprintf_r+0x220>
 8022b1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022b1c:	f7e4 fa08 	bl	8006f30 <__retarget_lock_release_recursive>
 8022b20:	89ab      	ldrh	r3, [r5, #12]
 8022b22:	065b      	lsls	r3, r3, #25
 8022b24:	f53f af12 	bmi.w	802294c <_vfiprintf_r+0x4c>
 8022b28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022b2a:	e711      	b.n	8022950 <_vfiprintf_r+0x50>
 8022b2c:	ab03      	add	r3, sp, #12
 8022b2e:	9300      	str	r3, [sp, #0]
 8022b30:	462a      	mov	r2, r5
 8022b32:	4b09      	ldr	r3, [pc, #36]	; (8022b58 <_vfiprintf_r+0x258>)
 8022b34:	a904      	add	r1, sp, #16
 8022b36:	4630      	mov	r0, r6
 8022b38:	f7fc f802 	bl	801eb40 <_printf_i>
 8022b3c:	e7e4      	b.n	8022b08 <_vfiprintf_r+0x208>
 8022b3e:	bf00      	nop
 8022b40:	08027060 	.word	0x08027060
 8022b44:	08027080 	.word	0x08027080
 8022b48:	08027040 	.word	0x08027040
 8022b4c:	0802743c 	.word	0x0802743c
 8022b50:	08027446 	.word	0x08027446
 8022b54:	0801e5f9 	.word	0x0801e5f9
 8022b58:	080228db 	.word	0x080228db
 8022b5c:	08027442 	.word	0x08027442

08022b60 <_scanf_chars>:
 8022b60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022b64:	4615      	mov	r5, r2
 8022b66:	688a      	ldr	r2, [r1, #8]
 8022b68:	4680      	mov	r8, r0
 8022b6a:	460c      	mov	r4, r1
 8022b6c:	b932      	cbnz	r2, 8022b7c <_scanf_chars+0x1c>
 8022b6e:	698a      	ldr	r2, [r1, #24]
 8022b70:	2a00      	cmp	r2, #0
 8022b72:	bf0c      	ite	eq
 8022b74:	2201      	moveq	r2, #1
 8022b76:	f04f 32ff 	movne.w	r2, #4294967295
 8022b7a:	608a      	str	r2, [r1, #8]
 8022b7c:	6822      	ldr	r2, [r4, #0]
 8022b7e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8022c0c <_scanf_chars+0xac>
 8022b82:	06d1      	lsls	r1, r2, #27
 8022b84:	bf5f      	itttt	pl
 8022b86:	681a      	ldrpl	r2, [r3, #0]
 8022b88:	1d11      	addpl	r1, r2, #4
 8022b8a:	6019      	strpl	r1, [r3, #0]
 8022b8c:	6816      	ldrpl	r6, [r2, #0]
 8022b8e:	2700      	movs	r7, #0
 8022b90:	69a0      	ldr	r0, [r4, #24]
 8022b92:	b188      	cbz	r0, 8022bb8 <_scanf_chars+0x58>
 8022b94:	2801      	cmp	r0, #1
 8022b96:	d107      	bne.n	8022ba8 <_scanf_chars+0x48>
 8022b98:	682b      	ldr	r3, [r5, #0]
 8022b9a:	781a      	ldrb	r2, [r3, #0]
 8022b9c:	6963      	ldr	r3, [r4, #20]
 8022b9e:	5c9b      	ldrb	r3, [r3, r2]
 8022ba0:	b953      	cbnz	r3, 8022bb8 <_scanf_chars+0x58>
 8022ba2:	bb27      	cbnz	r7, 8022bee <_scanf_chars+0x8e>
 8022ba4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022ba8:	2802      	cmp	r0, #2
 8022baa:	d120      	bne.n	8022bee <_scanf_chars+0x8e>
 8022bac:	682b      	ldr	r3, [r5, #0]
 8022bae:	781b      	ldrb	r3, [r3, #0]
 8022bb0:	f813 3009 	ldrb.w	r3, [r3, r9]
 8022bb4:	071b      	lsls	r3, r3, #28
 8022bb6:	d41a      	bmi.n	8022bee <_scanf_chars+0x8e>
 8022bb8:	6823      	ldr	r3, [r4, #0]
 8022bba:	06da      	lsls	r2, r3, #27
 8022bbc:	bf5e      	ittt	pl
 8022bbe:	682b      	ldrpl	r3, [r5, #0]
 8022bc0:	781b      	ldrbpl	r3, [r3, #0]
 8022bc2:	f806 3b01 	strbpl.w	r3, [r6], #1
 8022bc6:	682a      	ldr	r2, [r5, #0]
 8022bc8:	686b      	ldr	r3, [r5, #4]
 8022bca:	3201      	adds	r2, #1
 8022bcc:	602a      	str	r2, [r5, #0]
 8022bce:	68a2      	ldr	r2, [r4, #8]
 8022bd0:	3b01      	subs	r3, #1
 8022bd2:	3a01      	subs	r2, #1
 8022bd4:	606b      	str	r3, [r5, #4]
 8022bd6:	3701      	adds	r7, #1
 8022bd8:	60a2      	str	r2, [r4, #8]
 8022bda:	b142      	cbz	r2, 8022bee <_scanf_chars+0x8e>
 8022bdc:	2b00      	cmp	r3, #0
 8022bde:	dcd7      	bgt.n	8022b90 <_scanf_chars+0x30>
 8022be0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8022be4:	4629      	mov	r1, r5
 8022be6:	4640      	mov	r0, r8
 8022be8:	4798      	blx	r3
 8022bea:	2800      	cmp	r0, #0
 8022bec:	d0d0      	beq.n	8022b90 <_scanf_chars+0x30>
 8022bee:	6823      	ldr	r3, [r4, #0]
 8022bf0:	f013 0310 	ands.w	r3, r3, #16
 8022bf4:	d105      	bne.n	8022c02 <_scanf_chars+0xa2>
 8022bf6:	68e2      	ldr	r2, [r4, #12]
 8022bf8:	3201      	adds	r2, #1
 8022bfa:	60e2      	str	r2, [r4, #12]
 8022bfc:	69a2      	ldr	r2, [r4, #24]
 8022bfe:	b102      	cbz	r2, 8022c02 <_scanf_chars+0xa2>
 8022c00:	7033      	strb	r3, [r6, #0]
 8022c02:	6923      	ldr	r3, [r4, #16]
 8022c04:	441f      	add	r7, r3
 8022c06:	6127      	str	r7, [r4, #16]
 8022c08:	2000      	movs	r0, #0
 8022c0a:	e7cb      	b.n	8022ba4 <_scanf_chars+0x44>
 8022c0c:	08026f3d 	.word	0x08026f3d

08022c10 <_scanf_i>:
 8022c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022c14:	4698      	mov	r8, r3
 8022c16:	4b74      	ldr	r3, [pc, #464]	; (8022de8 <_scanf_i+0x1d8>)
 8022c18:	460c      	mov	r4, r1
 8022c1a:	4682      	mov	sl, r0
 8022c1c:	4616      	mov	r6, r2
 8022c1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8022c22:	b087      	sub	sp, #28
 8022c24:	ab03      	add	r3, sp, #12
 8022c26:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8022c2a:	4b70      	ldr	r3, [pc, #448]	; (8022dec <_scanf_i+0x1dc>)
 8022c2c:	69a1      	ldr	r1, [r4, #24]
 8022c2e:	4a70      	ldr	r2, [pc, #448]	; (8022df0 <_scanf_i+0x1e0>)
 8022c30:	2903      	cmp	r1, #3
 8022c32:	bf18      	it	ne
 8022c34:	461a      	movne	r2, r3
 8022c36:	68a3      	ldr	r3, [r4, #8]
 8022c38:	9201      	str	r2, [sp, #4]
 8022c3a:	1e5a      	subs	r2, r3, #1
 8022c3c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8022c40:	bf88      	it	hi
 8022c42:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8022c46:	4627      	mov	r7, r4
 8022c48:	bf82      	ittt	hi
 8022c4a:	eb03 0905 	addhi.w	r9, r3, r5
 8022c4e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8022c52:	60a3      	strhi	r3, [r4, #8]
 8022c54:	f857 3b1c 	ldr.w	r3, [r7], #28
 8022c58:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8022c5c:	bf98      	it	ls
 8022c5e:	f04f 0900 	movls.w	r9, #0
 8022c62:	6023      	str	r3, [r4, #0]
 8022c64:	463d      	mov	r5, r7
 8022c66:	f04f 0b00 	mov.w	fp, #0
 8022c6a:	6831      	ldr	r1, [r6, #0]
 8022c6c:	ab03      	add	r3, sp, #12
 8022c6e:	7809      	ldrb	r1, [r1, #0]
 8022c70:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8022c74:	2202      	movs	r2, #2
 8022c76:	f7dd fab3 	bl	80001e0 <memchr>
 8022c7a:	b328      	cbz	r0, 8022cc8 <_scanf_i+0xb8>
 8022c7c:	f1bb 0f01 	cmp.w	fp, #1
 8022c80:	d159      	bne.n	8022d36 <_scanf_i+0x126>
 8022c82:	6862      	ldr	r2, [r4, #4]
 8022c84:	b92a      	cbnz	r2, 8022c92 <_scanf_i+0x82>
 8022c86:	6822      	ldr	r2, [r4, #0]
 8022c88:	2308      	movs	r3, #8
 8022c8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8022c8e:	6063      	str	r3, [r4, #4]
 8022c90:	6022      	str	r2, [r4, #0]
 8022c92:	6822      	ldr	r2, [r4, #0]
 8022c94:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8022c98:	6022      	str	r2, [r4, #0]
 8022c9a:	68a2      	ldr	r2, [r4, #8]
 8022c9c:	1e51      	subs	r1, r2, #1
 8022c9e:	60a1      	str	r1, [r4, #8]
 8022ca0:	b192      	cbz	r2, 8022cc8 <_scanf_i+0xb8>
 8022ca2:	6832      	ldr	r2, [r6, #0]
 8022ca4:	1c51      	adds	r1, r2, #1
 8022ca6:	6031      	str	r1, [r6, #0]
 8022ca8:	7812      	ldrb	r2, [r2, #0]
 8022caa:	f805 2b01 	strb.w	r2, [r5], #1
 8022cae:	6872      	ldr	r2, [r6, #4]
 8022cb0:	3a01      	subs	r2, #1
 8022cb2:	2a00      	cmp	r2, #0
 8022cb4:	6072      	str	r2, [r6, #4]
 8022cb6:	dc07      	bgt.n	8022cc8 <_scanf_i+0xb8>
 8022cb8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8022cbc:	4631      	mov	r1, r6
 8022cbe:	4650      	mov	r0, sl
 8022cc0:	4790      	blx	r2
 8022cc2:	2800      	cmp	r0, #0
 8022cc4:	f040 8085 	bne.w	8022dd2 <_scanf_i+0x1c2>
 8022cc8:	f10b 0b01 	add.w	fp, fp, #1
 8022ccc:	f1bb 0f03 	cmp.w	fp, #3
 8022cd0:	d1cb      	bne.n	8022c6a <_scanf_i+0x5a>
 8022cd2:	6863      	ldr	r3, [r4, #4]
 8022cd4:	b90b      	cbnz	r3, 8022cda <_scanf_i+0xca>
 8022cd6:	230a      	movs	r3, #10
 8022cd8:	6063      	str	r3, [r4, #4]
 8022cda:	6863      	ldr	r3, [r4, #4]
 8022cdc:	4945      	ldr	r1, [pc, #276]	; (8022df4 <_scanf_i+0x1e4>)
 8022cde:	6960      	ldr	r0, [r4, #20]
 8022ce0:	1ac9      	subs	r1, r1, r3
 8022ce2:	f000 f8a5 	bl	8022e30 <__sccl>
 8022ce6:	f04f 0b00 	mov.w	fp, #0
 8022cea:	68a3      	ldr	r3, [r4, #8]
 8022cec:	6822      	ldr	r2, [r4, #0]
 8022cee:	2b00      	cmp	r3, #0
 8022cf0:	d03d      	beq.n	8022d6e <_scanf_i+0x15e>
 8022cf2:	6831      	ldr	r1, [r6, #0]
 8022cf4:	6960      	ldr	r0, [r4, #20]
 8022cf6:	f891 c000 	ldrb.w	ip, [r1]
 8022cfa:	f810 000c 	ldrb.w	r0, [r0, ip]
 8022cfe:	2800      	cmp	r0, #0
 8022d00:	d035      	beq.n	8022d6e <_scanf_i+0x15e>
 8022d02:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8022d06:	d124      	bne.n	8022d52 <_scanf_i+0x142>
 8022d08:	0510      	lsls	r0, r2, #20
 8022d0a:	d522      	bpl.n	8022d52 <_scanf_i+0x142>
 8022d0c:	f10b 0b01 	add.w	fp, fp, #1
 8022d10:	f1b9 0f00 	cmp.w	r9, #0
 8022d14:	d003      	beq.n	8022d1e <_scanf_i+0x10e>
 8022d16:	3301      	adds	r3, #1
 8022d18:	f109 39ff 	add.w	r9, r9, #4294967295
 8022d1c:	60a3      	str	r3, [r4, #8]
 8022d1e:	6873      	ldr	r3, [r6, #4]
 8022d20:	3b01      	subs	r3, #1
 8022d22:	2b00      	cmp	r3, #0
 8022d24:	6073      	str	r3, [r6, #4]
 8022d26:	dd1b      	ble.n	8022d60 <_scanf_i+0x150>
 8022d28:	6833      	ldr	r3, [r6, #0]
 8022d2a:	3301      	adds	r3, #1
 8022d2c:	6033      	str	r3, [r6, #0]
 8022d2e:	68a3      	ldr	r3, [r4, #8]
 8022d30:	3b01      	subs	r3, #1
 8022d32:	60a3      	str	r3, [r4, #8]
 8022d34:	e7d9      	b.n	8022cea <_scanf_i+0xda>
 8022d36:	f1bb 0f02 	cmp.w	fp, #2
 8022d3a:	d1ae      	bne.n	8022c9a <_scanf_i+0x8a>
 8022d3c:	6822      	ldr	r2, [r4, #0]
 8022d3e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8022d42:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8022d46:	d1bf      	bne.n	8022cc8 <_scanf_i+0xb8>
 8022d48:	2310      	movs	r3, #16
 8022d4a:	6063      	str	r3, [r4, #4]
 8022d4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8022d50:	e7a2      	b.n	8022c98 <_scanf_i+0x88>
 8022d52:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8022d56:	6022      	str	r2, [r4, #0]
 8022d58:	780b      	ldrb	r3, [r1, #0]
 8022d5a:	f805 3b01 	strb.w	r3, [r5], #1
 8022d5e:	e7de      	b.n	8022d1e <_scanf_i+0x10e>
 8022d60:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8022d64:	4631      	mov	r1, r6
 8022d66:	4650      	mov	r0, sl
 8022d68:	4798      	blx	r3
 8022d6a:	2800      	cmp	r0, #0
 8022d6c:	d0df      	beq.n	8022d2e <_scanf_i+0x11e>
 8022d6e:	6823      	ldr	r3, [r4, #0]
 8022d70:	05d9      	lsls	r1, r3, #23
 8022d72:	d50d      	bpl.n	8022d90 <_scanf_i+0x180>
 8022d74:	42bd      	cmp	r5, r7
 8022d76:	d909      	bls.n	8022d8c <_scanf_i+0x17c>
 8022d78:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8022d7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8022d80:	4632      	mov	r2, r6
 8022d82:	4650      	mov	r0, sl
 8022d84:	4798      	blx	r3
 8022d86:	f105 39ff 	add.w	r9, r5, #4294967295
 8022d8a:	464d      	mov	r5, r9
 8022d8c:	42bd      	cmp	r5, r7
 8022d8e:	d028      	beq.n	8022de2 <_scanf_i+0x1d2>
 8022d90:	6822      	ldr	r2, [r4, #0]
 8022d92:	f012 0210 	ands.w	r2, r2, #16
 8022d96:	d113      	bne.n	8022dc0 <_scanf_i+0x1b0>
 8022d98:	702a      	strb	r2, [r5, #0]
 8022d9a:	6863      	ldr	r3, [r4, #4]
 8022d9c:	9e01      	ldr	r6, [sp, #4]
 8022d9e:	4639      	mov	r1, r7
 8022da0:	4650      	mov	r0, sl
 8022da2:	47b0      	blx	r6
 8022da4:	f8d8 3000 	ldr.w	r3, [r8]
 8022da8:	6821      	ldr	r1, [r4, #0]
 8022daa:	1d1a      	adds	r2, r3, #4
 8022dac:	f8c8 2000 	str.w	r2, [r8]
 8022db0:	f011 0f20 	tst.w	r1, #32
 8022db4:	681b      	ldr	r3, [r3, #0]
 8022db6:	d00f      	beq.n	8022dd8 <_scanf_i+0x1c8>
 8022db8:	6018      	str	r0, [r3, #0]
 8022dba:	68e3      	ldr	r3, [r4, #12]
 8022dbc:	3301      	adds	r3, #1
 8022dbe:	60e3      	str	r3, [r4, #12]
 8022dc0:	1bed      	subs	r5, r5, r7
 8022dc2:	44ab      	add	fp, r5
 8022dc4:	6925      	ldr	r5, [r4, #16]
 8022dc6:	445d      	add	r5, fp
 8022dc8:	6125      	str	r5, [r4, #16]
 8022dca:	2000      	movs	r0, #0
 8022dcc:	b007      	add	sp, #28
 8022dce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022dd2:	f04f 0b00 	mov.w	fp, #0
 8022dd6:	e7ca      	b.n	8022d6e <_scanf_i+0x15e>
 8022dd8:	07ca      	lsls	r2, r1, #31
 8022dda:	bf4c      	ite	mi
 8022ddc:	8018      	strhmi	r0, [r3, #0]
 8022dde:	6018      	strpl	r0, [r3, #0]
 8022de0:	e7eb      	b.n	8022dba <_scanf_i+0x1aa>
 8022de2:	2001      	movs	r0, #1
 8022de4:	e7f2      	b.n	8022dcc <_scanf_i+0x1bc>
 8022de6:	bf00      	nop
 8022de8:	08026c28 	.word	0x08026c28
 8022dec:	08022f9d 	.word	0x08022f9d
 8022df0:	08020249 	.word	0x08020249
 8022df4:	08027466 	.word	0x08027466

08022df8 <_read_r>:
 8022df8:	b538      	push	{r3, r4, r5, lr}
 8022dfa:	4d07      	ldr	r5, [pc, #28]	; (8022e18 <_read_r+0x20>)
 8022dfc:	4604      	mov	r4, r0
 8022dfe:	4608      	mov	r0, r1
 8022e00:	4611      	mov	r1, r2
 8022e02:	2200      	movs	r2, #0
 8022e04:	602a      	str	r2, [r5, #0]
 8022e06:	461a      	mov	r2, r3
 8022e08:	f7e3 fcbc 	bl	8006784 <_read>
 8022e0c:	1c43      	adds	r3, r0, #1
 8022e0e:	d102      	bne.n	8022e16 <_read_r+0x1e>
 8022e10:	682b      	ldr	r3, [r5, #0]
 8022e12:	b103      	cbz	r3, 8022e16 <_read_r+0x1e>
 8022e14:	6023      	str	r3, [r4, #0]
 8022e16:	bd38      	pop	{r3, r4, r5, pc}
 8022e18:	2000e190 	.word	0x2000e190
 8022e1c:	00000000 	.word	0x00000000

08022e20 <nan>:
 8022e20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8022e28 <nan+0x8>
 8022e24:	4770      	bx	lr
 8022e26:	bf00      	nop
 8022e28:	00000000 	.word	0x00000000
 8022e2c:	7ff80000 	.word	0x7ff80000

08022e30 <__sccl>:
 8022e30:	b570      	push	{r4, r5, r6, lr}
 8022e32:	780b      	ldrb	r3, [r1, #0]
 8022e34:	4604      	mov	r4, r0
 8022e36:	2b5e      	cmp	r3, #94	; 0x5e
 8022e38:	bf0b      	itete	eq
 8022e3a:	784b      	ldrbeq	r3, [r1, #1]
 8022e3c:	1c48      	addne	r0, r1, #1
 8022e3e:	1c88      	addeq	r0, r1, #2
 8022e40:	2200      	movne	r2, #0
 8022e42:	bf08      	it	eq
 8022e44:	2201      	moveq	r2, #1
 8022e46:	1e61      	subs	r1, r4, #1
 8022e48:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8022e4c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8022e50:	42a9      	cmp	r1, r5
 8022e52:	d1fb      	bne.n	8022e4c <__sccl+0x1c>
 8022e54:	b90b      	cbnz	r3, 8022e5a <__sccl+0x2a>
 8022e56:	3801      	subs	r0, #1
 8022e58:	bd70      	pop	{r4, r5, r6, pc}
 8022e5a:	f082 0101 	eor.w	r1, r2, #1
 8022e5e:	54e1      	strb	r1, [r4, r3]
 8022e60:	1c42      	adds	r2, r0, #1
 8022e62:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8022e66:	2d2d      	cmp	r5, #45	; 0x2d
 8022e68:	f102 36ff 	add.w	r6, r2, #4294967295
 8022e6c:	4610      	mov	r0, r2
 8022e6e:	d006      	beq.n	8022e7e <__sccl+0x4e>
 8022e70:	2d5d      	cmp	r5, #93	; 0x5d
 8022e72:	d0f1      	beq.n	8022e58 <__sccl+0x28>
 8022e74:	b90d      	cbnz	r5, 8022e7a <__sccl+0x4a>
 8022e76:	4630      	mov	r0, r6
 8022e78:	e7ee      	b.n	8022e58 <__sccl+0x28>
 8022e7a:	462b      	mov	r3, r5
 8022e7c:	e7ef      	b.n	8022e5e <__sccl+0x2e>
 8022e7e:	7816      	ldrb	r6, [r2, #0]
 8022e80:	2e5d      	cmp	r6, #93	; 0x5d
 8022e82:	d0fa      	beq.n	8022e7a <__sccl+0x4a>
 8022e84:	42b3      	cmp	r3, r6
 8022e86:	dcf8      	bgt.n	8022e7a <__sccl+0x4a>
 8022e88:	4618      	mov	r0, r3
 8022e8a:	3001      	adds	r0, #1
 8022e8c:	4286      	cmp	r6, r0
 8022e8e:	5421      	strb	r1, [r4, r0]
 8022e90:	dcfb      	bgt.n	8022e8a <__sccl+0x5a>
 8022e92:	43d8      	mvns	r0, r3
 8022e94:	4430      	add	r0, r6
 8022e96:	1c5d      	adds	r5, r3, #1
 8022e98:	42b3      	cmp	r3, r6
 8022e9a:	bfa8      	it	ge
 8022e9c:	2000      	movge	r0, #0
 8022e9e:	182b      	adds	r3, r5, r0
 8022ea0:	3202      	adds	r2, #2
 8022ea2:	e7de      	b.n	8022e62 <__sccl+0x32>

08022ea4 <_strtoul_l.isra.0>:
 8022ea4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022ea8:	4e3b      	ldr	r6, [pc, #236]	; (8022f98 <_strtoul_l.isra.0+0xf4>)
 8022eaa:	4686      	mov	lr, r0
 8022eac:	468c      	mov	ip, r1
 8022eae:	4660      	mov	r0, ip
 8022eb0:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8022eb4:	5da5      	ldrb	r5, [r4, r6]
 8022eb6:	f015 0508 	ands.w	r5, r5, #8
 8022eba:	d1f8      	bne.n	8022eae <_strtoul_l.isra.0+0xa>
 8022ebc:	2c2d      	cmp	r4, #45	; 0x2d
 8022ebe:	d134      	bne.n	8022f2a <_strtoul_l.isra.0+0x86>
 8022ec0:	f89c 4000 	ldrb.w	r4, [ip]
 8022ec4:	f04f 0801 	mov.w	r8, #1
 8022ec8:	f100 0c02 	add.w	ip, r0, #2
 8022ecc:	2b00      	cmp	r3, #0
 8022ece:	d05e      	beq.n	8022f8e <_strtoul_l.isra.0+0xea>
 8022ed0:	2b10      	cmp	r3, #16
 8022ed2:	d10c      	bne.n	8022eee <_strtoul_l.isra.0+0x4a>
 8022ed4:	2c30      	cmp	r4, #48	; 0x30
 8022ed6:	d10a      	bne.n	8022eee <_strtoul_l.isra.0+0x4a>
 8022ed8:	f89c 0000 	ldrb.w	r0, [ip]
 8022edc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8022ee0:	2858      	cmp	r0, #88	; 0x58
 8022ee2:	d14f      	bne.n	8022f84 <_strtoul_l.isra.0+0xe0>
 8022ee4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8022ee8:	2310      	movs	r3, #16
 8022eea:	f10c 0c02 	add.w	ip, ip, #2
 8022eee:	f04f 37ff 	mov.w	r7, #4294967295
 8022ef2:	2500      	movs	r5, #0
 8022ef4:	fbb7 f7f3 	udiv	r7, r7, r3
 8022ef8:	fb03 f907 	mul.w	r9, r3, r7
 8022efc:	ea6f 0909 	mvn.w	r9, r9
 8022f00:	4628      	mov	r0, r5
 8022f02:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8022f06:	2e09      	cmp	r6, #9
 8022f08:	d818      	bhi.n	8022f3c <_strtoul_l.isra.0+0x98>
 8022f0a:	4634      	mov	r4, r6
 8022f0c:	42a3      	cmp	r3, r4
 8022f0e:	dd24      	ble.n	8022f5a <_strtoul_l.isra.0+0xb6>
 8022f10:	2d00      	cmp	r5, #0
 8022f12:	db1f      	blt.n	8022f54 <_strtoul_l.isra.0+0xb0>
 8022f14:	4287      	cmp	r7, r0
 8022f16:	d31d      	bcc.n	8022f54 <_strtoul_l.isra.0+0xb0>
 8022f18:	d101      	bne.n	8022f1e <_strtoul_l.isra.0+0x7a>
 8022f1a:	45a1      	cmp	r9, r4
 8022f1c:	db1a      	blt.n	8022f54 <_strtoul_l.isra.0+0xb0>
 8022f1e:	fb00 4003 	mla	r0, r0, r3, r4
 8022f22:	2501      	movs	r5, #1
 8022f24:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8022f28:	e7eb      	b.n	8022f02 <_strtoul_l.isra.0+0x5e>
 8022f2a:	2c2b      	cmp	r4, #43	; 0x2b
 8022f2c:	bf08      	it	eq
 8022f2e:	f89c 4000 	ldrbeq.w	r4, [ip]
 8022f32:	46a8      	mov	r8, r5
 8022f34:	bf08      	it	eq
 8022f36:	f100 0c02 	addeq.w	ip, r0, #2
 8022f3a:	e7c7      	b.n	8022ecc <_strtoul_l.isra.0+0x28>
 8022f3c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8022f40:	2e19      	cmp	r6, #25
 8022f42:	d801      	bhi.n	8022f48 <_strtoul_l.isra.0+0xa4>
 8022f44:	3c37      	subs	r4, #55	; 0x37
 8022f46:	e7e1      	b.n	8022f0c <_strtoul_l.isra.0+0x68>
 8022f48:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8022f4c:	2e19      	cmp	r6, #25
 8022f4e:	d804      	bhi.n	8022f5a <_strtoul_l.isra.0+0xb6>
 8022f50:	3c57      	subs	r4, #87	; 0x57
 8022f52:	e7db      	b.n	8022f0c <_strtoul_l.isra.0+0x68>
 8022f54:	f04f 35ff 	mov.w	r5, #4294967295
 8022f58:	e7e4      	b.n	8022f24 <_strtoul_l.isra.0+0x80>
 8022f5a:	2d00      	cmp	r5, #0
 8022f5c:	da07      	bge.n	8022f6e <_strtoul_l.isra.0+0xca>
 8022f5e:	2322      	movs	r3, #34	; 0x22
 8022f60:	f8ce 3000 	str.w	r3, [lr]
 8022f64:	f04f 30ff 	mov.w	r0, #4294967295
 8022f68:	b942      	cbnz	r2, 8022f7c <_strtoul_l.isra.0+0xd8>
 8022f6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022f6e:	f1b8 0f00 	cmp.w	r8, #0
 8022f72:	d000      	beq.n	8022f76 <_strtoul_l.isra.0+0xd2>
 8022f74:	4240      	negs	r0, r0
 8022f76:	2a00      	cmp	r2, #0
 8022f78:	d0f7      	beq.n	8022f6a <_strtoul_l.isra.0+0xc6>
 8022f7a:	b10d      	cbz	r5, 8022f80 <_strtoul_l.isra.0+0xdc>
 8022f7c:	f10c 31ff 	add.w	r1, ip, #4294967295
 8022f80:	6011      	str	r1, [r2, #0]
 8022f82:	e7f2      	b.n	8022f6a <_strtoul_l.isra.0+0xc6>
 8022f84:	2430      	movs	r4, #48	; 0x30
 8022f86:	2b00      	cmp	r3, #0
 8022f88:	d1b1      	bne.n	8022eee <_strtoul_l.isra.0+0x4a>
 8022f8a:	2308      	movs	r3, #8
 8022f8c:	e7af      	b.n	8022eee <_strtoul_l.isra.0+0x4a>
 8022f8e:	2c30      	cmp	r4, #48	; 0x30
 8022f90:	d0a2      	beq.n	8022ed8 <_strtoul_l.isra.0+0x34>
 8022f92:	230a      	movs	r3, #10
 8022f94:	e7ab      	b.n	8022eee <_strtoul_l.isra.0+0x4a>
 8022f96:	bf00      	nop
 8022f98:	08026f3d 	.word	0x08026f3d

08022f9c <_strtoul_r>:
 8022f9c:	f7ff bf82 	b.w	8022ea4 <_strtoul_l.isra.0>

08022fa0 <__submore>:
 8022fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022fa4:	460c      	mov	r4, r1
 8022fa6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8022fa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022fac:	4299      	cmp	r1, r3
 8022fae:	d11d      	bne.n	8022fec <__submore+0x4c>
 8022fb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8022fb4:	f7fb fa26 	bl	801e404 <_malloc_r>
 8022fb8:	b918      	cbnz	r0, 8022fc2 <__submore+0x22>
 8022fba:	f04f 30ff 	mov.w	r0, #4294967295
 8022fbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022fc2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022fc6:	63a3      	str	r3, [r4, #56]	; 0x38
 8022fc8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8022fcc:	6360      	str	r0, [r4, #52]	; 0x34
 8022fce:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8022fd2:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8022fd6:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8022fda:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8022fde:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8022fe2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8022fe6:	6020      	str	r0, [r4, #0]
 8022fe8:	2000      	movs	r0, #0
 8022fea:	e7e8      	b.n	8022fbe <__submore+0x1e>
 8022fec:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8022fee:	0077      	lsls	r7, r6, #1
 8022ff0:	463a      	mov	r2, r7
 8022ff2:	f000 f949 	bl	8023288 <_realloc_r>
 8022ff6:	4605      	mov	r5, r0
 8022ff8:	2800      	cmp	r0, #0
 8022ffa:	d0de      	beq.n	8022fba <__submore+0x1a>
 8022ffc:	eb00 0806 	add.w	r8, r0, r6
 8023000:	4601      	mov	r1, r0
 8023002:	4632      	mov	r2, r6
 8023004:	4640      	mov	r0, r8
 8023006:	f7fb f97d 	bl	801e304 <memcpy>
 802300a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 802300e:	f8c4 8000 	str.w	r8, [r4]
 8023012:	e7e9      	b.n	8022fe8 <__submore+0x48>

08023014 <__swbuf_r>:
 8023014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023016:	460e      	mov	r6, r1
 8023018:	4614      	mov	r4, r2
 802301a:	4605      	mov	r5, r0
 802301c:	b118      	cbz	r0, 8023026 <__swbuf_r+0x12>
 802301e:	6983      	ldr	r3, [r0, #24]
 8023020:	b90b      	cbnz	r3, 8023026 <__swbuf_r+0x12>
 8023022:	f7fb f897 	bl	801e154 <__sinit>
 8023026:	4b21      	ldr	r3, [pc, #132]	; (80230ac <__swbuf_r+0x98>)
 8023028:	429c      	cmp	r4, r3
 802302a:	d12b      	bne.n	8023084 <__swbuf_r+0x70>
 802302c:	686c      	ldr	r4, [r5, #4]
 802302e:	69a3      	ldr	r3, [r4, #24]
 8023030:	60a3      	str	r3, [r4, #8]
 8023032:	89a3      	ldrh	r3, [r4, #12]
 8023034:	071a      	lsls	r2, r3, #28
 8023036:	d52f      	bpl.n	8023098 <__swbuf_r+0x84>
 8023038:	6923      	ldr	r3, [r4, #16]
 802303a:	b36b      	cbz	r3, 8023098 <__swbuf_r+0x84>
 802303c:	6923      	ldr	r3, [r4, #16]
 802303e:	6820      	ldr	r0, [r4, #0]
 8023040:	1ac0      	subs	r0, r0, r3
 8023042:	6963      	ldr	r3, [r4, #20]
 8023044:	b2f6      	uxtb	r6, r6
 8023046:	4283      	cmp	r3, r0
 8023048:	4637      	mov	r7, r6
 802304a:	dc04      	bgt.n	8023056 <__swbuf_r+0x42>
 802304c:	4621      	mov	r1, r4
 802304e:	4628      	mov	r0, r5
 8023050:	f7fe f842 	bl	80210d8 <_fflush_r>
 8023054:	bb30      	cbnz	r0, 80230a4 <__swbuf_r+0x90>
 8023056:	68a3      	ldr	r3, [r4, #8]
 8023058:	3b01      	subs	r3, #1
 802305a:	60a3      	str	r3, [r4, #8]
 802305c:	6823      	ldr	r3, [r4, #0]
 802305e:	1c5a      	adds	r2, r3, #1
 8023060:	6022      	str	r2, [r4, #0]
 8023062:	701e      	strb	r6, [r3, #0]
 8023064:	6963      	ldr	r3, [r4, #20]
 8023066:	3001      	adds	r0, #1
 8023068:	4283      	cmp	r3, r0
 802306a:	d004      	beq.n	8023076 <__swbuf_r+0x62>
 802306c:	89a3      	ldrh	r3, [r4, #12]
 802306e:	07db      	lsls	r3, r3, #31
 8023070:	d506      	bpl.n	8023080 <__swbuf_r+0x6c>
 8023072:	2e0a      	cmp	r6, #10
 8023074:	d104      	bne.n	8023080 <__swbuf_r+0x6c>
 8023076:	4621      	mov	r1, r4
 8023078:	4628      	mov	r0, r5
 802307a:	f7fe f82d 	bl	80210d8 <_fflush_r>
 802307e:	b988      	cbnz	r0, 80230a4 <__swbuf_r+0x90>
 8023080:	4638      	mov	r0, r7
 8023082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023084:	4b0a      	ldr	r3, [pc, #40]	; (80230b0 <__swbuf_r+0x9c>)
 8023086:	429c      	cmp	r4, r3
 8023088:	d101      	bne.n	802308e <__swbuf_r+0x7a>
 802308a:	68ac      	ldr	r4, [r5, #8]
 802308c:	e7cf      	b.n	802302e <__swbuf_r+0x1a>
 802308e:	4b09      	ldr	r3, [pc, #36]	; (80230b4 <__swbuf_r+0xa0>)
 8023090:	429c      	cmp	r4, r3
 8023092:	bf08      	it	eq
 8023094:	68ec      	ldreq	r4, [r5, #12]
 8023096:	e7ca      	b.n	802302e <__swbuf_r+0x1a>
 8023098:	4621      	mov	r1, r4
 802309a:	4628      	mov	r0, r5
 802309c:	f000 f81a 	bl	80230d4 <__swsetup_r>
 80230a0:	2800      	cmp	r0, #0
 80230a2:	d0cb      	beq.n	802303c <__swbuf_r+0x28>
 80230a4:	f04f 37ff 	mov.w	r7, #4294967295
 80230a8:	e7ea      	b.n	8023080 <__swbuf_r+0x6c>
 80230aa:	bf00      	nop
 80230ac:	08027060 	.word	0x08027060
 80230b0:	08027080 	.word	0x08027080
 80230b4:	08027040 	.word	0x08027040

080230b8 <__ascii_wctomb>:
 80230b8:	b149      	cbz	r1, 80230ce <__ascii_wctomb+0x16>
 80230ba:	2aff      	cmp	r2, #255	; 0xff
 80230bc:	bf85      	ittet	hi
 80230be:	238a      	movhi	r3, #138	; 0x8a
 80230c0:	6003      	strhi	r3, [r0, #0]
 80230c2:	700a      	strbls	r2, [r1, #0]
 80230c4:	f04f 30ff 	movhi.w	r0, #4294967295
 80230c8:	bf98      	it	ls
 80230ca:	2001      	movls	r0, #1
 80230cc:	4770      	bx	lr
 80230ce:	4608      	mov	r0, r1
 80230d0:	4770      	bx	lr
	...

080230d4 <__swsetup_r>:
 80230d4:	4b32      	ldr	r3, [pc, #200]	; (80231a0 <__swsetup_r+0xcc>)
 80230d6:	b570      	push	{r4, r5, r6, lr}
 80230d8:	681d      	ldr	r5, [r3, #0]
 80230da:	4606      	mov	r6, r0
 80230dc:	460c      	mov	r4, r1
 80230de:	b125      	cbz	r5, 80230ea <__swsetup_r+0x16>
 80230e0:	69ab      	ldr	r3, [r5, #24]
 80230e2:	b913      	cbnz	r3, 80230ea <__swsetup_r+0x16>
 80230e4:	4628      	mov	r0, r5
 80230e6:	f7fb f835 	bl	801e154 <__sinit>
 80230ea:	4b2e      	ldr	r3, [pc, #184]	; (80231a4 <__swsetup_r+0xd0>)
 80230ec:	429c      	cmp	r4, r3
 80230ee:	d10f      	bne.n	8023110 <__swsetup_r+0x3c>
 80230f0:	686c      	ldr	r4, [r5, #4]
 80230f2:	89a3      	ldrh	r3, [r4, #12]
 80230f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80230f8:	0719      	lsls	r1, r3, #28
 80230fa:	d42c      	bmi.n	8023156 <__swsetup_r+0x82>
 80230fc:	06dd      	lsls	r5, r3, #27
 80230fe:	d411      	bmi.n	8023124 <__swsetup_r+0x50>
 8023100:	2309      	movs	r3, #9
 8023102:	6033      	str	r3, [r6, #0]
 8023104:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8023108:	81a3      	strh	r3, [r4, #12]
 802310a:	f04f 30ff 	mov.w	r0, #4294967295
 802310e:	e03e      	b.n	802318e <__swsetup_r+0xba>
 8023110:	4b25      	ldr	r3, [pc, #148]	; (80231a8 <__swsetup_r+0xd4>)
 8023112:	429c      	cmp	r4, r3
 8023114:	d101      	bne.n	802311a <__swsetup_r+0x46>
 8023116:	68ac      	ldr	r4, [r5, #8]
 8023118:	e7eb      	b.n	80230f2 <__swsetup_r+0x1e>
 802311a:	4b24      	ldr	r3, [pc, #144]	; (80231ac <__swsetup_r+0xd8>)
 802311c:	429c      	cmp	r4, r3
 802311e:	bf08      	it	eq
 8023120:	68ec      	ldreq	r4, [r5, #12]
 8023122:	e7e6      	b.n	80230f2 <__swsetup_r+0x1e>
 8023124:	0758      	lsls	r0, r3, #29
 8023126:	d512      	bpl.n	802314e <__swsetup_r+0x7a>
 8023128:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802312a:	b141      	cbz	r1, 802313e <__swsetup_r+0x6a>
 802312c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023130:	4299      	cmp	r1, r3
 8023132:	d002      	beq.n	802313a <__swsetup_r+0x66>
 8023134:	4630      	mov	r0, r6
 8023136:	f7fb f915 	bl	801e364 <_free_r>
 802313a:	2300      	movs	r3, #0
 802313c:	6363      	str	r3, [r4, #52]	; 0x34
 802313e:	89a3      	ldrh	r3, [r4, #12]
 8023140:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8023144:	81a3      	strh	r3, [r4, #12]
 8023146:	2300      	movs	r3, #0
 8023148:	6063      	str	r3, [r4, #4]
 802314a:	6923      	ldr	r3, [r4, #16]
 802314c:	6023      	str	r3, [r4, #0]
 802314e:	89a3      	ldrh	r3, [r4, #12]
 8023150:	f043 0308 	orr.w	r3, r3, #8
 8023154:	81a3      	strh	r3, [r4, #12]
 8023156:	6923      	ldr	r3, [r4, #16]
 8023158:	b94b      	cbnz	r3, 802316e <__swsetup_r+0x9a>
 802315a:	89a3      	ldrh	r3, [r4, #12]
 802315c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8023160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023164:	d003      	beq.n	802316e <__swsetup_r+0x9a>
 8023166:	4621      	mov	r1, r4
 8023168:	4630      	mov	r0, r6
 802316a:	f000 f84d 	bl	8023208 <__smakebuf_r>
 802316e:	89a0      	ldrh	r0, [r4, #12]
 8023170:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023174:	f010 0301 	ands.w	r3, r0, #1
 8023178:	d00a      	beq.n	8023190 <__swsetup_r+0xbc>
 802317a:	2300      	movs	r3, #0
 802317c:	60a3      	str	r3, [r4, #8]
 802317e:	6963      	ldr	r3, [r4, #20]
 8023180:	425b      	negs	r3, r3
 8023182:	61a3      	str	r3, [r4, #24]
 8023184:	6923      	ldr	r3, [r4, #16]
 8023186:	b943      	cbnz	r3, 802319a <__swsetup_r+0xc6>
 8023188:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802318c:	d1ba      	bne.n	8023104 <__swsetup_r+0x30>
 802318e:	bd70      	pop	{r4, r5, r6, pc}
 8023190:	0781      	lsls	r1, r0, #30
 8023192:	bf58      	it	pl
 8023194:	6963      	ldrpl	r3, [r4, #20]
 8023196:	60a3      	str	r3, [r4, #8]
 8023198:	e7f4      	b.n	8023184 <__swsetup_r+0xb0>
 802319a:	2000      	movs	r0, #0
 802319c:	e7f7      	b.n	802318e <__swsetup_r+0xba>
 802319e:	bf00      	nop
 80231a0:	200003b8 	.word	0x200003b8
 80231a4:	08027060 	.word	0x08027060
 80231a8:	08027080 	.word	0x08027080
 80231ac:	08027040 	.word	0x08027040

080231b0 <abort>:
 80231b0:	b508      	push	{r3, lr}
 80231b2:	2006      	movs	r0, #6
 80231b4:	f000 f8b6 	bl	8023324 <raise>
 80231b8:	2001      	movs	r0, #1
 80231ba:	f7e3 fad9 	bl	8006770 <_exit>

080231be <__swhatbuf_r>:
 80231be:	b570      	push	{r4, r5, r6, lr}
 80231c0:	460e      	mov	r6, r1
 80231c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80231c6:	2900      	cmp	r1, #0
 80231c8:	b096      	sub	sp, #88	; 0x58
 80231ca:	4614      	mov	r4, r2
 80231cc:	461d      	mov	r5, r3
 80231ce:	da07      	bge.n	80231e0 <__swhatbuf_r+0x22>
 80231d0:	2300      	movs	r3, #0
 80231d2:	602b      	str	r3, [r5, #0]
 80231d4:	89b3      	ldrh	r3, [r6, #12]
 80231d6:	061a      	lsls	r2, r3, #24
 80231d8:	d410      	bmi.n	80231fc <__swhatbuf_r+0x3e>
 80231da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80231de:	e00e      	b.n	80231fe <__swhatbuf_r+0x40>
 80231e0:	466a      	mov	r2, sp
 80231e2:	f000 f8bb 	bl	802335c <_fstat_r>
 80231e6:	2800      	cmp	r0, #0
 80231e8:	dbf2      	blt.n	80231d0 <__swhatbuf_r+0x12>
 80231ea:	9a01      	ldr	r2, [sp, #4]
 80231ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80231f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80231f4:	425a      	negs	r2, r3
 80231f6:	415a      	adcs	r2, r3
 80231f8:	602a      	str	r2, [r5, #0]
 80231fa:	e7ee      	b.n	80231da <__swhatbuf_r+0x1c>
 80231fc:	2340      	movs	r3, #64	; 0x40
 80231fe:	2000      	movs	r0, #0
 8023200:	6023      	str	r3, [r4, #0]
 8023202:	b016      	add	sp, #88	; 0x58
 8023204:	bd70      	pop	{r4, r5, r6, pc}
	...

08023208 <__smakebuf_r>:
 8023208:	898b      	ldrh	r3, [r1, #12]
 802320a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802320c:	079d      	lsls	r5, r3, #30
 802320e:	4606      	mov	r6, r0
 8023210:	460c      	mov	r4, r1
 8023212:	d507      	bpl.n	8023224 <__smakebuf_r+0x1c>
 8023214:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8023218:	6023      	str	r3, [r4, #0]
 802321a:	6123      	str	r3, [r4, #16]
 802321c:	2301      	movs	r3, #1
 802321e:	6163      	str	r3, [r4, #20]
 8023220:	b002      	add	sp, #8
 8023222:	bd70      	pop	{r4, r5, r6, pc}
 8023224:	ab01      	add	r3, sp, #4
 8023226:	466a      	mov	r2, sp
 8023228:	f7ff ffc9 	bl	80231be <__swhatbuf_r>
 802322c:	9900      	ldr	r1, [sp, #0]
 802322e:	4605      	mov	r5, r0
 8023230:	4630      	mov	r0, r6
 8023232:	f7fb f8e7 	bl	801e404 <_malloc_r>
 8023236:	b948      	cbnz	r0, 802324c <__smakebuf_r+0x44>
 8023238:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802323c:	059a      	lsls	r2, r3, #22
 802323e:	d4ef      	bmi.n	8023220 <__smakebuf_r+0x18>
 8023240:	f023 0303 	bic.w	r3, r3, #3
 8023244:	f043 0302 	orr.w	r3, r3, #2
 8023248:	81a3      	strh	r3, [r4, #12]
 802324a:	e7e3      	b.n	8023214 <__smakebuf_r+0xc>
 802324c:	4b0d      	ldr	r3, [pc, #52]	; (8023284 <__smakebuf_r+0x7c>)
 802324e:	62b3      	str	r3, [r6, #40]	; 0x28
 8023250:	89a3      	ldrh	r3, [r4, #12]
 8023252:	6020      	str	r0, [r4, #0]
 8023254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023258:	81a3      	strh	r3, [r4, #12]
 802325a:	9b00      	ldr	r3, [sp, #0]
 802325c:	6163      	str	r3, [r4, #20]
 802325e:	9b01      	ldr	r3, [sp, #4]
 8023260:	6120      	str	r0, [r4, #16]
 8023262:	b15b      	cbz	r3, 802327c <__smakebuf_r+0x74>
 8023264:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023268:	4630      	mov	r0, r6
 802326a:	f000 f889 	bl	8023380 <_isatty_r>
 802326e:	b128      	cbz	r0, 802327c <__smakebuf_r+0x74>
 8023270:	89a3      	ldrh	r3, [r4, #12]
 8023272:	f023 0303 	bic.w	r3, r3, #3
 8023276:	f043 0301 	orr.w	r3, r3, #1
 802327a:	81a3      	strh	r3, [r4, #12]
 802327c:	89a0      	ldrh	r0, [r4, #12]
 802327e:	4305      	orrs	r5, r0
 8023280:	81a5      	strh	r5, [r4, #12]
 8023282:	e7cd      	b.n	8023220 <__smakebuf_r+0x18>
 8023284:	0801e0ed 	.word	0x0801e0ed

08023288 <_realloc_r>:
 8023288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802328a:	4607      	mov	r7, r0
 802328c:	4614      	mov	r4, r2
 802328e:	460e      	mov	r6, r1
 8023290:	b921      	cbnz	r1, 802329c <_realloc_r+0x14>
 8023292:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8023296:	4611      	mov	r1, r2
 8023298:	f7fb b8b4 	b.w	801e404 <_malloc_r>
 802329c:	b922      	cbnz	r2, 80232a8 <_realloc_r+0x20>
 802329e:	f7fb f861 	bl	801e364 <_free_r>
 80232a2:	4625      	mov	r5, r4
 80232a4:	4628      	mov	r0, r5
 80232a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80232a8:	f000 f87a 	bl	80233a0 <_malloc_usable_size_r>
 80232ac:	42a0      	cmp	r0, r4
 80232ae:	d20f      	bcs.n	80232d0 <_realloc_r+0x48>
 80232b0:	4621      	mov	r1, r4
 80232b2:	4638      	mov	r0, r7
 80232b4:	f7fb f8a6 	bl	801e404 <_malloc_r>
 80232b8:	4605      	mov	r5, r0
 80232ba:	2800      	cmp	r0, #0
 80232bc:	d0f2      	beq.n	80232a4 <_realloc_r+0x1c>
 80232be:	4631      	mov	r1, r6
 80232c0:	4622      	mov	r2, r4
 80232c2:	f7fb f81f 	bl	801e304 <memcpy>
 80232c6:	4631      	mov	r1, r6
 80232c8:	4638      	mov	r0, r7
 80232ca:	f7fb f84b 	bl	801e364 <_free_r>
 80232ce:	e7e9      	b.n	80232a4 <_realloc_r+0x1c>
 80232d0:	4635      	mov	r5, r6
 80232d2:	e7e7      	b.n	80232a4 <_realloc_r+0x1c>

080232d4 <_raise_r>:
 80232d4:	291f      	cmp	r1, #31
 80232d6:	b538      	push	{r3, r4, r5, lr}
 80232d8:	4604      	mov	r4, r0
 80232da:	460d      	mov	r5, r1
 80232dc:	d904      	bls.n	80232e8 <_raise_r+0x14>
 80232de:	2316      	movs	r3, #22
 80232e0:	6003      	str	r3, [r0, #0]
 80232e2:	f04f 30ff 	mov.w	r0, #4294967295
 80232e6:	bd38      	pop	{r3, r4, r5, pc}
 80232e8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80232ea:	b112      	cbz	r2, 80232f2 <_raise_r+0x1e>
 80232ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80232f0:	b94b      	cbnz	r3, 8023306 <_raise_r+0x32>
 80232f2:	4620      	mov	r0, r4
 80232f4:	f000 f830 	bl	8023358 <_getpid_r>
 80232f8:	462a      	mov	r2, r5
 80232fa:	4601      	mov	r1, r0
 80232fc:	4620      	mov	r0, r4
 80232fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023302:	f000 b817 	b.w	8023334 <_kill_r>
 8023306:	2b01      	cmp	r3, #1
 8023308:	d00a      	beq.n	8023320 <_raise_r+0x4c>
 802330a:	1c59      	adds	r1, r3, #1
 802330c:	d103      	bne.n	8023316 <_raise_r+0x42>
 802330e:	2316      	movs	r3, #22
 8023310:	6003      	str	r3, [r0, #0]
 8023312:	2001      	movs	r0, #1
 8023314:	e7e7      	b.n	80232e6 <_raise_r+0x12>
 8023316:	2400      	movs	r4, #0
 8023318:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 802331c:	4628      	mov	r0, r5
 802331e:	4798      	blx	r3
 8023320:	2000      	movs	r0, #0
 8023322:	e7e0      	b.n	80232e6 <_raise_r+0x12>

08023324 <raise>:
 8023324:	4b02      	ldr	r3, [pc, #8]	; (8023330 <raise+0xc>)
 8023326:	4601      	mov	r1, r0
 8023328:	6818      	ldr	r0, [r3, #0]
 802332a:	f7ff bfd3 	b.w	80232d4 <_raise_r>
 802332e:	bf00      	nop
 8023330:	200003b8 	.word	0x200003b8

08023334 <_kill_r>:
 8023334:	b538      	push	{r3, r4, r5, lr}
 8023336:	4d07      	ldr	r5, [pc, #28]	; (8023354 <_kill_r+0x20>)
 8023338:	2300      	movs	r3, #0
 802333a:	4604      	mov	r4, r0
 802333c:	4608      	mov	r0, r1
 802333e:	4611      	mov	r1, r2
 8023340:	602b      	str	r3, [r5, #0]
 8023342:	f7e3 fa03 	bl	800674c <_kill>
 8023346:	1c43      	adds	r3, r0, #1
 8023348:	d102      	bne.n	8023350 <_kill_r+0x1c>
 802334a:	682b      	ldr	r3, [r5, #0]
 802334c:	b103      	cbz	r3, 8023350 <_kill_r+0x1c>
 802334e:	6023      	str	r3, [r4, #0]
 8023350:	bd38      	pop	{r3, r4, r5, pc}
 8023352:	bf00      	nop
 8023354:	2000e190 	.word	0x2000e190

08023358 <_getpid_r>:
 8023358:	f7e3 b9f0 	b.w	800673c <_getpid>

0802335c <_fstat_r>:
 802335c:	b538      	push	{r3, r4, r5, lr}
 802335e:	4d07      	ldr	r5, [pc, #28]	; (802337c <_fstat_r+0x20>)
 8023360:	2300      	movs	r3, #0
 8023362:	4604      	mov	r4, r0
 8023364:	4608      	mov	r0, r1
 8023366:	4611      	mov	r1, r2
 8023368:	602b      	str	r3, [r5, #0]
 802336a:	f7e3 fa50 	bl	800680e <_fstat>
 802336e:	1c43      	adds	r3, r0, #1
 8023370:	d102      	bne.n	8023378 <_fstat_r+0x1c>
 8023372:	682b      	ldr	r3, [r5, #0]
 8023374:	b103      	cbz	r3, 8023378 <_fstat_r+0x1c>
 8023376:	6023      	str	r3, [r4, #0]
 8023378:	bd38      	pop	{r3, r4, r5, pc}
 802337a:	bf00      	nop
 802337c:	2000e190 	.word	0x2000e190

08023380 <_isatty_r>:
 8023380:	b538      	push	{r3, r4, r5, lr}
 8023382:	4d06      	ldr	r5, [pc, #24]	; (802339c <_isatty_r+0x1c>)
 8023384:	2300      	movs	r3, #0
 8023386:	4604      	mov	r4, r0
 8023388:	4608      	mov	r0, r1
 802338a:	602b      	str	r3, [r5, #0]
 802338c:	f7e3 fa4f 	bl	800682e <_isatty>
 8023390:	1c43      	adds	r3, r0, #1
 8023392:	d102      	bne.n	802339a <_isatty_r+0x1a>
 8023394:	682b      	ldr	r3, [r5, #0]
 8023396:	b103      	cbz	r3, 802339a <_isatty_r+0x1a>
 8023398:	6023      	str	r3, [r4, #0]
 802339a:	bd38      	pop	{r3, r4, r5, pc}
 802339c:	2000e190 	.word	0x2000e190

080233a0 <_malloc_usable_size_r>:
 80233a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80233a4:	1f18      	subs	r0, r3, #4
 80233a6:	2b00      	cmp	r3, #0
 80233a8:	bfbc      	itt	lt
 80233aa:	580b      	ldrlt	r3, [r1, r0]
 80233ac:	18c0      	addlt	r0, r0, r3
 80233ae:	4770      	bx	lr

080233b0 <_init>:
 80233b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80233b2:	bf00      	nop
 80233b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80233b6:	bc08      	pop	{r3}
 80233b8:	469e      	mov	lr, r3
 80233ba:	4770      	bx	lr

080233bc <_fini>:
 80233bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80233be:	bf00      	nop
 80233c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80233c2:	bc08      	pop	{r3}
 80233c4:	469e      	mov	lr, r3
 80233c6:	4770      	bx	lr
