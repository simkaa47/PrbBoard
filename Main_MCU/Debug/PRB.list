
PRB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b658  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000038b8  0801b7e8  0801b7e8  0002b7e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f0a0  0801f0a0  00030114  2**0
                  CONTENTS
  4 .ARM          00000008  0801f0a0  0801f0a0  0002f0a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801f0a8  0801f0a8  00030114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f0a8  0801f0a8  0002f0a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f0ac  0801f0ac  0002f0ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  0801f0b0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030114  2**0
                  CONTENTS
 10 .bss          0000dc54  20000114  20000114  00030114  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000dd68  2000dd68  00030114  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030114  2**0
                  CONTENTS, READONLY
 13 .debug_info   00054921  00000000  00000000  00030144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000a28e  00000000  00000000  00084a65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000027d0  00000000  00000000  0008ecf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000025b0  00000000  00000000  000914c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000373b9  00000000  00000000  00093a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000419ff  00000000  00000000  000cae31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00101e12  00000000  00000000  0010c830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0020e642  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000ab04  00000000  00000000  0020e698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000114 	.word	0x20000114
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801b7d0 	.word	0x0801b7d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000118 	.word	0x20000118
 80001cc:	0801b7d0 	.word	0x0801b7d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <Analog_Start>:
extern ADC_HandleTypeDef hadc1;
extern DMA_HandleTypeDef hdma_adc1;
extern TIM_HandleTypeDef htim3;

void Analog_Start(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0

	HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&pt100_input_buffer, sizeof(pt100_input_buffer)/2);
 800056c:	22f0      	movs	r2, #240	; 0xf0
 800056e:	4904      	ldr	r1, [pc, #16]	; (8000580 <Analog_Start+0x18>)
 8000570:	4804      	ldr	r0, [pc, #16]	; (8000584 <Analog_Start+0x1c>)
 8000572:	f003 f923 	bl	80037bc <HAL_ADC_Start_DMA>
	HAL_TIM_Base_Start(&htim3);
 8000576:	4804      	ldr	r0, [pc, #16]	; (8000588 <Analog_Start+0x20>)
 8000578:	f007 f816 	bl	80075a8 <HAL_TIM_Base_Start>

}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}
 8000580:	20006adc 	.word	0x20006adc
 8000584:	20006f08 	.word	0x20006f08
 8000588:	20006e68 	.word	0x20006e68

0800058c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800058c:	b480      	push	{r7}
 800058e:	b08b      	sub	sp, #44	; 0x2c
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	float pt100_0, pt100_1, pt100_2, pt100_3, pt100_4, vRef;
	for (int i = 0; i < PT100_INPUT_BUFFER_SIZE; ++i) {
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	e073      	b.n	8000682 <HAL_ADC_ConvCpltCallback+0xf6>
		pt100_0 += pt100_input_buffer[i].Pt100_0;
 800059a:	4959      	ldr	r1, [pc, #356]	; (8000700 <HAL_ADC_ConvCpltCallback+0x174>)
 800059c:	68fa      	ldr	r2, [r7, #12]
 800059e:	4613      	mov	r3, r2
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	4413      	add	r3, r2
 80005a4:	009b      	lsls	r3, r3, #2
 80005a6:	440b      	add	r3, r1
 80005a8:	881b      	ldrh	r3, [r3, #0]
 80005aa:	ee07 3a90 	vmov	s15, r3
 80005ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005b2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80005b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005ba:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
		pt100_1 += pt100_input_buffer[i].Pt100_1;
 80005be:	4950      	ldr	r1, [pc, #320]	; (8000700 <HAL_ADC_ConvCpltCallback+0x174>)
 80005c0:	68fa      	ldr	r2, [r7, #12]
 80005c2:	4613      	mov	r3, r2
 80005c4:	005b      	lsls	r3, r3, #1
 80005c6:	4413      	add	r3, r2
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	440b      	add	r3, r1
 80005cc:	3302      	adds	r3, #2
 80005ce:	881b      	ldrh	r3, [r3, #0]
 80005d0:	ee07 3a90 	vmov	s15, r3
 80005d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005d8:	ed97 7a08 	vldr	s14, [r7, #32]
 80005dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005e0:	edc7 7a08 	vstr	s15, [r7, #32]
		pt100_2 += pt100_input_buffer[i].Pt100_2;
 80005e4:	4946      	ldr	r1, [pc, #280]	; (8000700 <HAL_ADC_ConvCpltCallback+0x174>)
 80005e6:	68fa      	ldr	r2, [r7, #12]
 80005e8:	4613      	mov	r3, r2
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	4413      	add	r3, r2
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	440b      	add	r3, r1
 80005f2:	3304      	adds	r3, #4
 80005f4:	881b      	ldrh	r3, [r3, #0]
 80005f6:	ee07 3a90 	vmov	s15, r3
 80005fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005fe:	ed97 7a07 	vldr	s14, [r7, #28]
 8000602:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000606:	edc7 7a07 	vstr	s15, [r7, #28]
		pt100_3 += pt100_input_buffer[i].Pt100_3;
 800060a:	493d      	ldr	r1, [pc, #244]	; (8000700 <HAL_ADC_ConvCpltCallback+0x174>)
 800060c:	68fa      	ldr	r2, [r7, #12]
 800060e:	4613      	mov	r3, r2
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	4413      	add	r3, r2
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	440b      	add	r3, r1
 8000618:	3306      	adds	r3, #6
 800061a:	881b      	ldrh	r3, [r3, #0]
 800061c:	ee07 3a90 	vmov	s15, r3
 8000620:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000624:	ed97 7a06 	vldr	s14, [r7, #24]
 8000628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800062c:	edc7 7a06 	vstr	s15, [r7, #24]
		pt100_4 += pt100_input_buffer[i].Pt100_4;
 8000630:	4933      	ldr	r1, [pc, #204]	; (8000700 <HAL_ADC_ConvCpltCallback+0x174>)
 8000632:	68fa      	ldr	r2, [r7, #12]
 8000634:	4613      	mov	r3, r2
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	4413      	add	r3, r2
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	440b      	add	r3, r1
 800063e:	3308      	adds	r3, #8
 8000640:	881b      	ldrh	r3, [r3, #0]
 8000642:	ee07 3a90 	vmov	s15, r3
 8000646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800064a:	ed97 7a05 	vldr	s14, [r7, #20]
 800064e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000652:	edc7 7a05 	vstr	s15, [r7, #20]
		vRef += pt100_input_buffer[i].V_ref;
 8000656:	492a      	ldr	r1, [pc, #168]	; (8000700 <HAL_ADC_ConvCpltCallback+0x174>)
 8000658:	68fa      	ldr	r2, [r7, #12]
 800065a:	4613      	mov	r3, r2
 800065c:	005b      	lsls	r3, r3, #1
 800065e:	4413      	add	r3, r2
 8000660:	009b      	lsls	r3, r3, #2
 8000662:	440b      	add	r3, r1
 8000664:	330a      	adds	r3, #10
 8000666:	881b      	ldrh	r3, [r3, #0]
 8000668:	ee07 3a90 	vmov	s15, r3
 800066c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000670:	ed97 7a04 	vldr	s14, [r7, #16]
 8000674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000678:	edc7 7a04 	vstr	s15, [r7, #16]
	for (int i = 0; i < PT100_INPUT_BUFFER_SIZE; ++i) {
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	3301      	adds	r3, #1
 8000680:	60fb      	str	r3, [r7, #12]
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	2b27      	cmp	r3, #39	; 0x27
 8000686:	dd88      	ble.n	800059a <HAL_ADC_ConvCpltCallback+0xe>
	}
	pt100_0 = pt100_0/PT100_INPUT_BUFFER_SIZE;
 8000688:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800068c:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8000704 <HAL_ADC_ConvCpltCallback+0x178>
 8000690:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000694:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	pt100_1 = pt100_1/PT100_INPUT_BUFFER_SIZE;
 8000698:	ed97 7a08 	vldr	s14, [r7, #32]
 800069c:	eddf 6a19 	vldr	s13, [pc, #100]	; 8000704 <HAL_ADC_ConvCpltCallback+0x178>
 80006a0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006a4:	edc7 7a08 	vstr	s15, [r7, #32]
	pt100_2 = pt100_2/PT100_INPUT_BUFFER_SIZE;
 80006a8:	ed97 7a07 	vldr	s14, [r7, #28]
 80006ac:	eddf 6a15 	vldr	s13, [pc, #84]	; 8000704 <HAL_ADC_ConvCpltCallback+0x178>
 80006b0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006b4:	edc7 7a07 	vstr	s15, [r7, #28]
	pt100_3 = pt100_3/PT100_INPUT_BUFFER_SIZE;
 80006b8:	ed97 7a06 	vldr	s14, [r7, #24]
 80006bc:	eddf 6a11 	vldr	s13, [pc, #68]	; 8000704 <HAL_ADC_ConvCpltCallback+0x178>
 80006c0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006c4:	edc7 7a06 	vstr	s15, [r7, #24]
	pt100_4 = pt100_4/PT100_INPUT_BUFFER_SIZE;
 80006c8:	ed97 7a05 	vldr	s14, [r7, #20]
 80006cc:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8000704 <HAL_ADC_ConvCpltCallback+0x178>
 80006d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006d4:	edc7 7a05 	vstr	s15, [r7, #20]
	vRef = vRef/PT100_INPUT_BUFFER_SIZE;
 80006d8:	ed97 7a04 	vldr	s14, [r7, #16]
 80006dc:	eddf 6a09 	vldr	s13, [pc, #36]	; 8000704 <HAL_ADC_ConvCpltCallback+0x178>
 80006e0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80006e4:	edc7 7a04 	vstr	s15, [r7, #16]
	temp+=1;
 80006e8:	4b07      	ldr	r3, [pc, #28]	; (8000708 <HAL_ADC_ConvCpltCallback+0x17c>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	3301      	adds	r3, #1
 80006ee:	4a06      	ldr	r2, [pc, #24]	; (8000708 <HAL_ADC_ConvCpltCallback+0x17c>)
 80006f0:	6013      	str	r3, [r2, #0]
	//HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&pt100_input_buffer, sizeof(pt100_input_buffer)/2);
}
 80006f2:	bf00      	nop
 80006f4:	372c      	adds	r7, #44	; 0x2c
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	20006adc 	.word	0x20006adc
 8000704:	42200000 	.word	0x42200000
 8000708:	20006ad8 	.word	0x20006ad8

0800070c <set_bit>:
 */

#include <control_bit.h>

uint16_t set_bit(uint16_t value, uint8_t num)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	4603      	mov	r3, r0
 8000714:	460a      	mov	r2, r1
 8000716:	80fb      	strh	r3, [r7, #6]
 8000718:	4613      	mov	r3, r2
 800071a:	717b      	strb	r3, [r7, #5]
     return value | (1 << num);
 800071c:	797b      	ldrb	r3, [r7, #5]
 800071e:	2201      	movs	r2, #1
 8000720:	fa02 f303 	lsl.w	r3, r2, r3
 8000724:	b21a      	sxth	r2, r3
 8000726:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800072a:	4313      	orrs	r3, r2
 800072c:	b21b      	sxth	r3, r3
 800072e:	b29b      	uxth	r3, r3
}
 8000730:	4618      	mov	r0, r3
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr

0800073c <Read_Inputs>:

extern Settings_Struct settings;
extern Meas_Data meas_data;

void Read_Inputs()
{
 800073c:	b580      	push	{r7, lr}
 800073e:	af00      	add	r7, sp, #0
	meas_data.d_inputs.in0 	= settings.retain.input_emulation_switches.in0  ? settings.retain.input_emulation_values.in0 :  HAL_GPIO_ReadPin(DIN_0_GPIO_Port, DIN_0_Pin);
 8000740:	4b9f      	ldr	r3, [pc, #636]	; (80009c0 <Read_Inputs+0x284>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	f003 0301 	and.w	r3, r3, #1
 8000748:	b2db      	uxtb	r3, r3
 800074a:	2b00      	cmp	r3, #0
 800074c:	d005      	beq.n	800075a <Read_Inputs+0x1e>
 800074e:	4b9c      	ldr	r3, [pc, #624]	; (80009c0 <Read_Inputs+0x284>)
 8000750:	789b      	ldrb	r3, [r3, #2]
 8000752:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000756:	b2da      	uxtb	r2, r3
 8000758:	e008      	b.n	800076c <Read_Inputs+0x30>
 800075a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800075e:	4899      	ldr	r0, [pc, #612]	; (80009c4 <Read_Inputs+0x288>)
 8000760:	f005 fc16 	bl	8005f90 <HAL_GPIO_ReadPin>
 8000764:	4603      	mov	r3, r0
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	b2da      	uxtb	r2, r3
 800076c:	4996      	ldr	r1, [pc, #600]	; (80009c8 <Read_Inputs+0x28c>)
 800076e:	780b      	ldrb	r3, [r1, #0]
 8000770:	f362 0300 	bfi	r3, r2, #0, #1
 8000774:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in1 	= settings.retain.input_emulation_switches.in1  ? settings.retain.input_emulation_values.in1 :  HAL_GPIO_ReadPin(DIN_1_GPIO_Port, DIN_1_Pin);
 8000776:	4b92      	ldr	r3, [pc, #584]	; (80009c0 <Read_Inputs+0x284>)
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	f003 0302 	and.w	r3, r3, #2
 800077e:	b2db      	uxtb	r3, r3
 8000780:	2b00      	cmp	r3, #0
 8000782:	d005      	beq.n	8000790 <Read_Inputs+0x54>
 8000784:	4b8e      	ldr	r3, [pc, #568]	; (80009c0 <Read_Inputs+0x284>)
 8000786:	789b      	ldrb	r3, [r3, #2]
 8000788:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800078c:	b2da      	uxtb	r2, r3
 800078e:	e008      	b.n	80007a2 <Read_Inputs+0x66>
 8000790:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000794:	488b      	ldr	r0, [pc, #556]	; (80009c4 <Read_Inputs+0x288>)
 8000796:	f005 fbfb 	bl	8005f90 <HAL_GPIO_ReadPin>
 800079a:	4603      	mov	r3, r0
 800079c:	f003 0301 	and.w	r3, r3, #1
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4989      	ldr	r1, [pc, #548]	; (80009c8 <Read_Inputs+0x28c>)
 80007a4:	780b      	ldrb	r3, [r1, #0]
 80007a6:	f362 0341 	bfi	r3, r2, #1, #1
 80007aa:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in2 	= settings.retain.input_emulation_switches.in2  ? settings.retain.input_emulation_values.in2 :  HAL_GPIO_ReadPin(DIN_2_GPIO_Port, DIN_2_Pin);
 80007ac:	4b84      	ldr	r3, [pc, #528]	; (80009c0 <Read_Inputs+0x284>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	f003 0304 	and.w	r3, r3, #4
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d005      	beq.n	80007c6 <Read_Inputs+0x8a>
 80007ba:	4b81      	ldr	r3, [pc, #516]	; (80009c0 <Read_Inputs+0x284>)
 80007bc:	789b      	ldrb	r3, [r3, #2]
 80007be:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	e007      	b.n	80007d6 <Read_Inputs+0x9a>
 80007c6:	2101      	movs	r1, #1
 80007c8:	4880      	ldr	r0, [pc, #512]	; (80009cc <Read_Inputs+0x290>)
 80007ca:	f005 fbe1 	bl	8005f90 <HAL_GPIO_ReadPin>
 80007ce:	4603      	mov	r3, r0
 80007d0:	f003 0301 	and.w	r3, r3, #1
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	497c      	ldr	r1, [pc, #496]	; (80009c8 <Read_Inputs+0x28c>)
 80007d8:	780b      	ldrb	r3, [r1, #0]
 80007da:	f362 0382 	bfi	r3, r2, #2, #1
 80007de:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in3 	= settings.retain.input_emulation_switches.in3  ? settings.retain.input_emulation_values.in3 :  HAL_GPIO_ReadPin(DIN_3_GPIO_Port, DIN_3_Pin);
 80007e0:	4b77      	ldr	r3, [pc, #476]	; (80009c0 <Read_Inputs+0x284>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	f003 0308 	and.w	r3, r3, #8
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d005      	beq.n	80007fa <Read_Inputs+0xbe>
 80007ee:	4b74      	ldr	r3, [pc, #464]	; (80009c0 <Read_Inputs+0x284>)
 80007f0:	789b      	ldrb	r3, [r3, #2]
 80007f2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	e007      	b.n	800080a <Read_Inputs+0xce>
 80007fa:	2102      	movs	r1, #2
 80007fc:	4873      	ldr	r0, [pc, #460]	; (80009cc <Read_Inputs+0x290>)
 80007fe:	f005 fbc7 	bl	8005f90 <HAL_GPIO_ReadPin>
 8000802:	4603      	mov	r3, r0
 8000804:	f003 0301 	and.w	r3, r3, #1
 8000808:	b2da      	uxtb	r2, r3
 800080a:	496f      	ldr	r1, [pc, #444]	; (80009c8 <Read_Inputs+0x28c>)
 800080c:	780b      	ldrb	r3, [r1, #0]
 800080e:	f362 03c3 	bfi	r3, r2, #3, #1
 8000812:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in4 	= settings.retain.input_emulation_switches.in4  ? settings.retain.input_emulation_values.in4 :  HAL_GPIO_ReadPin(DIN_4_GPIO_Port, DIN_4_Pin);
 8000814:	4b6a      	ldr	r3, [pc, #424]	; (80009c0 <Read_Inputs+0x284>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	f003 0310 	and.w	r3, r3, #16
 800081c:	b2db      	uxtb	r3, r3
 800081e:	2b00      	cmp	r3, #0
 8000820:	d005      	beq.n	800082e <Read_Inputs+0xf2>
 8000822:	4b67      	ldr	r3, [pc, #412]	; (80009c0 <Read_Inputs+0x284>)
 8000824:	789b      	ldrb	r3, [r3, #2]
 8000826:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800082a:	b2da      	uxtb	r2, r3
 800082c:	e007      	b.n	800083e <Read_Inputs+0x102>
 800082e:	2104      	movs	r1, #4
 8000830:	4866      	ldr	r0, [pc, #408]	; (80009cc <Read_Inputs+0x290>)
 8000832:	f005 fbad 	bl	8005f90 <HAL_GPIO_ReadPin>
 8000836:	4603      	mov	r3, r0
 8000838:	f003 0301 	and.w	r3, r3, #1
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4962      	ldr	r1, [pc, #392]	; (80009c8 <Read_Inputs+0x28c>)
 8000840:	780b      	ldrb	r3, [r1, #0]
 8000842:	f362 1304 	bfi	r3, r2, #4, #1
 8000846:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in5 	= settings.retain.input_emulation_switches.in5  ? settings.retain.input_emulation_values.in5 :  HAL_GPIO_ReadPin(DIN_5_GPIO_Port, DIN_5_Pin);
 8000848:	4b5d      	ldr	r3, [pc, #372]	; (80009c0 <Read_Inputs+0x284>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	f003 0320 	and.w	r3, r3, #32
 8000850:	b2db      	uxtb	r3, r3
 8000852:	2b00      	cmp	r3, #0
 8000854:	d005      	beq.n	8000862 <Read_Inputs+0x126>
 8000856:	4b5a      	ldr	r3, [pc, #360]	; (80009c0 <Read_Inputs+0x284>)
 8000858:	789b      	ldrb	r3, [r3, #2]
 800085a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800085e:	b2da      	uxtb	r2, r3
 8000860:	e007      	b.n	8000872 <Read_Inputs+0x136>
 8000862:	2108      	movs	r1, #8
 8000864:	4859      	ldr	r0, [pc, #356]	; (80009cc <Read_Inputs+0x290>)
 8000866:	f005 fb93 	bl	8005f90 <HAL_GPIO_ReadPin>
 800086a:	4603      	mov	r3, r0
 800086c:	f003 0301 	and.w	r3, r3, #1
 8000870:	b2da      	uxtb	r2, r3
 8000872:	4955      	ldr	r1, [pc, #340]	; (80009c8 <Read_Inputs+0x28c>)
 8000874:	780b      	ldrb	r3, [r1, #0]
 8000876:	f362 1345 	bfi	r3, r2, #5, #1
 800087a:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in6 	= settings.retain.input_emulation_switches.in6  ? settings.retain.input_emulation_values.in6 :  HAL_GPIO_ReadPin(DIN_6_GPIO_Port, DIN_6_Pin);
 800087c:	4b50      	ldr	r3, [pc, #320]	; (80009c0 <Read_Inputs+0x284>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b00      	cmp	r3, #0
 8000888:	d005      	beq.n	8000896 <Read_Inputs+0x15a>
 800088a:	4b4d      	ldr	r3, [pc, #308]	; (80009c0 <Read_Inputs+0x284>)
 800088c:	789b      	ldrb	r3, [r3, #2]
 800088e:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000892:	b2da      	uxtb	r2, r3
 8000894:	e007      	b.n	80008a6 <Read_Inputs+0x16a>
 8000896:	2110      	movs	r1, #16
 8000898:	484c      	ldr	r0, [pc, #304]	; (80009cc <Read_Inputs+0x290>)
 800089a:	f005 fb79 	bl	8005f90 <HAL_GPIO_ReadPin>
 800089e:	4603      	mov	r3, r0
 80008a0:	f003 0301 	and.w	r3, r3, #1
 80008a4:	b2da      	uxtb	r2, r3
 80008a6:	4948      	ldr	r1, [pc, #288]	; (80009c8 <Read_Inputs+0x28c>)
 80008a8:	780b      	ldrb	r3, [r1, #0]
 80008aa:	f362 1386 	bfi	r3, r2, #6, #1
 80008ae:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in7 	= settings.retain.input_emulation_switches.in7  ? settings.retain.input_emulation_values.in7 :  HAL_GPIO_ReadPin(DIN_7_GPIO_Port, DIN_7_Pin);
 80008b0:	4b43      	ldr	r3, [pc, #268]	; (80009c0 <Read_Inputs+0x284>)
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d005      	beq.n	80008ca <Read_Inputs+0x18e>
 80008be:	4b40      	ldr	r3, [pc, #256]	; (80009c0 <Read_Inputs+0x284>)
 80008c0:	789b      	ldrb	r3, [r3, #2]
 80008c2:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80008c6:	b2da      	uxtb	r2, r3
 80008c8:	e007      	b.n	80008da <Read_Inputs+0x19e>
 80008ca:	2120      	movs	r1, #32
 80008cc:	483f      	ldr	r0, [pc, #252]	; (80009cc <Read_Inputs+0x290>)
 80008ce:	f005 fb5f 	bl	8005f90 <HAL_GPIO_ReadPin>
 80008d2:	4603      	mov	r3, r0
 80008d4:	f003 0301 	and.w	r3, r3, #1
 80008d8:	b2da      	uxtb	r2, r3
 80008da:	493b      	ldr	r1, [pc, #236]	; (80009c8 <Read_Inputs+0x28c>)
 80008dc:	780b      	ldrb	r3, [r1, #0]
 80008de:	f362 13c7 	bfi	r3, r2, #7, #1
 80008e2:	700b      	strb	r3, [r1, #0]
	meas_data.d_inputs.in8 	= settings.retain.input_emulation_switches.in8  ? settings.retain.input_emulation_values.in8 :  HAL_GPIO_ReadPin(DIN_8_GPIO_Port, DIN_8_Pin);
 80008e4:	4b36      	ldr	r3, [pc, #216]	; (80009c0 <Read_Inputs+0x284>)
 80008e6:	785b      	ldrb	r3, [r3, #1]
 80008e8:	f003 0301 	and.w	r3, r3, #1
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d005      	beq.n	80008fe <Read_Inputs+0x1c2>
 80008f2:	4b33      	ldr	r3, [pc, #204]	; (80009c0 <Read_Inputs+0x284>)
 80008f4:	78db      	ldrb	r3, [r3, #3]
 80008f6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80008fa:	b2da      	uxtb	r2, r3
 80008fc:	e007      	b.n	800090e <Read_Inputs+0x1d2>
 80008fe:	2140      	movs	r1, #64	; 0x40
 8000900:	4832      	ldr	r0, [pc, #200]	; (80009cc <Read_Inputs+0x290>)
 8000902:	f005 fb45 	bl	8005f90 <HAL_GPIO_ReadPin>
 8000906:	4603      	mov	r3, r0
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	b2da      	uxtb	r2, r3
 800090e:	492e      	ldr	r1, [pc, #184]	; (80009c8 <Read_Inputs+0x28c>)
 8000910:	784b      	ldrb	r3, [r1, #1]
 8000912:	f362 0300 	bfi	r3, r2, #0, #1
 8000916:	704b      	strb	r3, [r1, #1]
	meas_data.d_inputs.in9 	= settings.retain.input_emulation_switches.in9  ? settings.retain.input_emulation_values.in9 :  HAL_GPIO_ReadPin(DIN_9_GPIO_Port, DIN_9_Pin);
 8000918:	4b29      	ldr	r3, [pc, #164]	; (80009c0 <Read_Inputs+0x284>)
 800091a:	785b      	ldrb	r3, [r3, #1]
 800091c:	f003 0302 	and.w	r3, r3, #2
 8000920:	b2db      	uxtb	r3, r3
 8000922:	2b00      	cmp	r3, #0
 8000924:	d005      	beq.n	8000932 <Read_Inputs+0x1f6>
 8000926:	4b26      	ldr	r3, [pc, #152]	; (80009c0 <Read_Inputs+0x284>)
 8000928:	78db      	ldrb	r3, [r3, #3]
 800092a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800092e:	b2da      	uxtb	r2, r3
 8000930:	e008      	b.n	8000944 <Read_Inputs+0x208>
 8000932:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000936:	4826      	ldr	r0, [pc, #152]	; (80009d0 <Read_Inputs+0x294>)
 8000938:	f005 fb2a 	bl	8005f90 <HAL_GPIO_ReadPin>
 800093c:	4603      	mov	r3, r0
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	b2da      	uxtb	r2, r3
 8000944:	4920      	ldr	r1, [pc, #128]	; (80009c8 <Read_Inputs+0x28c>)
 8000946:	784b      	ldrb	r3, [r1, #1]
 8000948:	f362 0341 	bfi	r3, r2, #1, #1
 800094c:	704b      	strb	r3, [r1, #1]
	meas_data.d_inputs.in10 = settings.retain.input_emulation_switches.in10 ? settings.retain.input_emulation_values.in10 : HAL_GPIO_ReadPin(DIN_10_GPIO_Port, DIN_10_Pin);
 800094e:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <Read_Inputs+0x284>)
 8000950:	785b      	ldrb	r3, [r3, #1]
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	b2db      	uxtb	r3, r3
 8000958:	2b00      	cmp	r3, #0
 800095a:	d005      	beq.n	8000968 <Read_Inputs+0x22c>
 800095c:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <Read_Inputs+0x284>)
 800095e:	78db      	ldrb	r3, [r3, #3]
 8000960:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000964:	b2da      	uxtb	r2, r3
 8000966:	e008      	b.n	800097a <Read_Inputs+0x23e>
 8000968:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800096c:	4818      	ldr	r0, [pc, #96]	; (80009d0 <Read_Inputs+0x294>)
 800096e:	f005 fb0f 	bl	8005f90 <HAL_GPIO_ReadPin>
 8000972:	4603      	mov	r3, r0
 8000974:	f003 0301 	and.w	r3, r3, #1
 8000978:	b2da      	uxtb	r2, r3
 800097a:	4913      	ldr	r1, [pc, #76]	; (80009c8 <Read_Inputs+0x28c>)
 800097c:	784b      	ldrb	r3, [r1, #1]
 800097e:	f362 0382 	bfi	r3, r2, #2, #1
 8000982:	704b      	strb	r3, [r1, #1]
	meas_data.d_inputs.in11 = settings.retain.input_emulation_switches.in11 ? settings.retain.input_emulation_values.in11 : HAL_GPIO_ReadPin(DIN_11_GPIO_Port, DIN_11_Pin);
 8000984:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <Read_Inputs+0x284>)
 8000986:	785b      	ldrb	r3, [r3, #1]
 8000988:	f003 0308 	and.w	r3, r3, #8
 800098c:	b2db      	uxtb	r3, r3
 800098e:	2b00      	cmp	r3, #0
 8000990:	d005      	beq.n	800099e <Read_Inputs+0x262>
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <Read_Inputs+0x284>)
 8000994:	78db      	ldrb	r3, [r3, #3]
 8000996:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800099a:	b2da      	uxtb	r2, r3
 800099c:	e008      	b.n	80009b0 <Read_Inputs+0x274>
 800099e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009a2:	480b      	ldr	r0, [pc, #44]	; (80009d0 <Read_Inputs+0x294>)
 80009a4:	f005 faf4 	bl	8005f90 <HAL_GPIO_ReadPin>
 80009a8:	4603      	mov	r3, r0
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	b2da      	uxtb	r2, r3
 80009b0:	4905      	ldr	r1, [pc, #20]	; (80009c8 <Read_Inputs+0x28c>)
 80009b2:	784b      	ldrb	r3, [r1, #1]
 80009b4:	f362 03c3 	bfi	r3, r2, #3, #1
 80009b8:	704b      	strb	r3, [r1, #1]
}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	2000709c 	.word	0x2000709c
 80009c4:	40020400 	.word	0x40020400
 80009c8:	2000710c 	.word	0x2000710c
 80009cc:	40021000 	.word	0x40021000
 80009d0:	40020800 	.word	0x40020800

080009d4 <Write_Outputs>:

void Write_Outputs()
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
	meas_data.d_outputs.out0  = settings.retain.output_emulation_switches.out0  ? settings.retain.output_emulation_values.out0  :  0;
 80009d8:	4bb4      	ldr	r3, [pc, #720]	; (8000cac <Write_Outputs+0x2d8>)
 80009da:	791b      	ldrb	r3, [r3, #4]
 80009dc:	f003 0301 	and.w	r3, r3, #1
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d005      	beq.n	80009f2 <Write_Outputs+0x1e>
 80009e6:	4bb1      	ldr	r3, [pc, #708]	; (8000cac <Write_Outputs+0x2d8>)
 80009e8:	799b      	ldrb	r3, [r3, #6]
 80009ea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80009ee:	b2d9      	uxtb	r1, r3
 80009f0:	e000      	b.n	80009f4 <Write_Outputs+0x20>
 80009f2:	2100      	movs	r1, #0
 80009f4:	4aae      	ldr	r2, [pc, #696]	; (8000cb0 <Write_Outputs+0x2dc>)
 80009f6:	7893      	ldrb	r3, [r2, #2]
 80009f8:	f361 0300 	bfi	r3, r1, #0, #1
 80009fc:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out1  = settings.retain.output_emulation_switches.out1  ? settings.retain.output_emulation_values.out1  :  0;
 80009fe:	4bab      	ldr	r3, [pc, #684]	; (8000cac <Write_Outputs+0x2d8>)
 8000a00:	791b      	ldrb	r3, [r3, #4]
 8000a02:	f003 0302 	and.w	r3, r3, #2
 8000a06:	b2db      	uxtb	r3, r3
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d005      	beq.n	8000a18 <Write_Outputs+0x44>
 8000a0c:	4ba7      	ldr	r3, [pc, #668]	; (8000cac <Write_Outputs+0x2d8>)
 8000a0e:	799b      	ldrb	r3, [r3, #6]
 8000a10:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000a14:	b2d9      	uxtb	r1, r3
 8000a16:	e000      	b.n	8000a1a <Write_Outputs+0x46>
 8000a18:	2100      	movs	r1, #0
 8000a1a:	4aa5      	ldr	r2, [pc, #660]	; (8000cb0 <Write_Outputs+0x2dc>)
 8000a1c:	7893      	ldrb	r3, [r2, #2]
 8000a1e:	f361 0341 	bfi	r3, r1, #1, #1
 8000a22:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out2  = settings.retain.output_emulation_switches.out2  ? settings.retain.output_emulation_values.out2  :  0;
 8000a24:	4ba1      	ldr	r3, [pc, #644]	; (8000cac <Write_Outputs+0x2d8>)
 8000a26:	791b      	ldrb	r3, [r3, #4]
 8000a28:	f003 0304 	and.w	r3, r3, #4
 8000a2c:	b2db      	uxtb	r3, r3
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d005      	beq.n	8000a3e <Write_Outputs+0x6a>
 8000a32:	4b9e      	ldr	r3, [pc, #632]	; (8000cac <Write_Outputs+0x2d8>)
 8000a34:	799b      	ldrb	r3, [r3, #6]
 8000a36:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000a3a:	b2d9      	uxtb	r1, r3
 8000a3c:	e000      	b.n	8000a40 <Write_Outputs+0x6c>
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4a9b      	ldr	r2, [pc, #620]	; (8000cb0 <Write_Outputs+0x2dc>)
 8000a42:	7893      	ldrb	r3, [r2, #2]
 8000a44:	f361 0382 	bfi	r3, r1, #2, #1
 8000a48:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out3  = settings.retain.output_emulation_switches.out3  ? settings.retain.output_emulation_values.out3  :  0;
 8000a4a:	4b98      	ldr	r3, [pc, #608]	; (8000cac <Write_Outputs+0x2d8>)
 8000a4c:	791b      	ldrb	r3, [r3, #4]
 8000a4e:	f003 0308 	and.w	r3, r3, #8
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d005      	beq.n	8000a64 <Write_Outputs+0x90>
 8000a58:	4b94      	ldr	r3, [pc, #592]	; (8000cac <Write_Outputs+0x2d8>)
 8000a5a:	799b      	ldrb	r3, [r3, #6]
 8000a5c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000a60:	b2d9      	uxtb	r1, r3
 8000a62:	e000      	b.n	8000a66 <Write_Outputs+0x92>
 8000a64:	2100      	movs	r1, #0
 8000a66:	4a92      	ldr	r2, [pc, #584]	; (8000cb0 <Write_Outputs+0x2dc>)
 8000a68:	7893      	ldrb	r3, [r2, #2]
 8000a6a:	f361 03c3 	bfi	r3, r1, #3, #1
 8000a6e:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out4  = settings.retain.output_emulation_switches.out4  ? settings.retain.output_emulation_values.out4  :  0;
 8000a70:	4b8e      	ldr	r3, [pc, #568]	; (8000cac <Write_Outputs+0x2d8>)
 8000a72:	791b      	ldrb	r3, [r3, #4]
 8000a74:	f003 0310 	and.w	r3, r3, #16
 8000a78:	b2db      	uxtb	r3, r3
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d005      	beq.n	8000a8a <Write_Outputs+0xb6>
 8000a7e:	4b8b      	ldr	r3, [pc, #556]	; (8000cac <Write_Outputs+0x2d8>)
 8000a80:	799b      	ldrb	r3, [r3, #6]
 8000a82:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000a86:	b2d9      	uxtb	r1, r3
 8000a88:	e000      	b.n	8000a8c <Write_Outputs+0xb8>
 8000a8a:	2100      	movs	r1, #0
 8000a8c:	4a88      	ldr	r2, [pc, #544]	; (8000cb0 <Write_Outputs+0x2dc>)
 8000a8e:	7893      	ldrb	r3, [r2, #2]
 8000a90:	f361 1304 	bfi	r3, r1, #4, #1
 8000a94:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out5  = settings.retain.output_emulation_switches.out5  ? settings.retain.output_emulation_values.out5  :  0;
 8000a96:	4b85      	ldr	r3, [pc, #532]	; (8000cac <Write_Outputs+0x2d8>)
 8000a98:	791b      	ldrb	r3, [r3, #4]
 8000a9a:	f003 0320 	and.w	r3, r3, #32
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d005      	beq.n	8000ab0 <Write_Outputs+0xdc>
 8000aa4:	4b81      	ldr	r3, [pc, #516]	; (8000cac <Write_Outputs+0x2d8>)
 8000aa6:	799b      	ldrb	r3, [r3, #6]
 8000aa8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000aac:	b2d9      	uxtb	r1, r3
 8000aae:	e000      	b.n	8000ab2 <Write_Outputs+0xde>
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4a7f      	ldr	r2, [pc, #508]	; (8000cb0 <Write_Outputs+0x2dc>)
 8000ab4:	7893      	ldrb	r3, [r2, #2]
 8000ab6:	f361 1345 	bfi	r3, r1, #5, #1
 8000aba:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out6  = settings.retain.output_emulation_switches.out6  ? settings.retain.output_emulation_values.out6  :  0;
 8000abc:	4b7b      	ldr	r3, [pc, #492]	; (8000cac <Write_Outputs+0x2d8>)
 8000abe:	791b      	ldrb	r3, [r3, #4]
 8000ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d005      	beq.n	8000ad6 <Write_Outputs+0x102>
 8000aca:	4b78      	ldr	r3, [pc, #480]	; (8000cac <Write_Outputs+0x2d8>)
 8000acc:	799b      	ldrb	r3, [r3, #6]
 8000ace:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000ad2:	b2d9      	uxtb	r1, r3
 8000ad4:	e000      	b.n	8000ad8 <Write_Outputs+0x104>
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	4a75      	ldr	r2, [pc, #468]	; (8000cb0 <Write_Outputs+0x2dc>)
 8000ada:	7893      	ldrb	r3, [r2, #2]
 8000adc:	f361 1386 	bfi	r3, r1, #6, #1
 8000ae0:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out7  = settings.retain.output_emulation_switches.out7  ? settings.retain.output_emulation_values.out7  :  0;
 8000ae2:	4b72      	ldr	r3, [pc, #456]	; (8000cac <Write_Outputs+0x2d8>)
 8000ae4:	791b      	ldrb	r3, [r3, #4]
 8000ae6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8000aea:	b2db      	uxtb	r3, r3
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d005      	beq.n	8000afc <Write_Outputs+0x128>
 8000af0:	4b6e      	ldr	r3, [pc, #440]	; (8000cac <Write_Outputs+0x2d8>)
 8000af2:	799b      	ldrb	r3, [r3, #6]
 8000af4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000af8:	b2d9      	uxtb	r1, r3
 8000afa:	e000      	b.n	8000afe <Write_Outputs+0x12a>
 8000afc:	2100      	movs	r1, #0
 8000afe:	4a6c      	ldr	r2, [pc, #432]	; (8000cb0 <Write_Outputs+0x2dc>)
 8000b00:	7893      	ldrb	r3, [r2, #2]
 8000b02:	f361 13c7 	bfi	r3, r1, #7, #1
 8000b06:	7093      	strb	r3, [r2, #2]
	meas_data.d_outputs.out8  = settings.retain.output_emulation_switches.out8  ? settings.retain.output_emulation_values.out8  :  0;
 8000b08:	4b68      	ldr	r3, [pc, #416]	; (8000cac <Write_Outputs+0x2d8>)
 8000b0a:	795b      	ldrb	r3, [r3, #5]
 8000b0c:	f003 0301 	and.w	r3, r3, #1
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d005      	beq.n	8000b22 <Write_Outputs+0x14e>
 8000b16:	4b65      	ldr	r3, [pc, #404]	; (8000cac <Write_Outputs+0x2d8>)
 8000b18:	79db      	ldrb	r3, [r3, #7]
 8000b1a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000b1e:	b2d9      	uxtb	r1, r3
 8000b20:	e000      	b.n	8000b24 <Write_Outputs+0x150>
 8000b22:	2100      	movs	r1, #0
 8000b24:	4a62      	ldr	r2, [pc, #392]	; (8000cb0 <Write_Outputs+0x2dc>)
 8000b26:	78d3      	ldrb	r3, [r2, #3]
 8000b28:	f361 0300 	bfi	r3, r1, #0, #1
 8000b2c:	70d3      	strb	r3, [r2, #3]
	meas_data.d_outputs.out9  = settings.retain.output_emulation_switches.out9  ? settings.retain.output_emulation_values.out9  :  0;
 8000b2e:	4b5f      	ldr	r3, [pc, #380]	; (8000cac <Write_Outputs+0x2d8>)
 8000b30:	795b      	ldrb	r3, [r3, #5]
 8000b32:	f003 0302 	and.w	r3, r3, #2
 8000b36:	b2db      	uxtb	r3, r3
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d005      	beq.n	8000b48 <Write_Outputs+0x174>
 8000b3c:	4b5b      	ldr	r3, [pc, #364]	; (8000cac <Write_Outputs+0x2d8>)
 8000b3e:	79db      	ldrb	r3, [r3, #7]
 8000b40:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000b44:	b2d9      	uxtb	r1, r3
 8000b46:	e000      	b.n	8000b4a <Write_Outputs+0x176>
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4a59      	ldr	r2, [pc, #356]	; (8000cb0 <Write_Outputs+0x2dc>)
 8000b4c:	78d3      	ldrb	r3, [r2, #3]
 8000b4e:	f361 0341 	bfi	r3, r1, #1, #1
 8000b52:	70d3      	strb	r3, [r2, #3]
	meas_data.d_outputs.out10 = settings.retain.output_emulation_switches.out10 ? settings.retain.output_emulation_values.out10 :  0;
 8000b54:	4b55      	ldr	r3, [pc, #340]	; (8000cac <Write_Outputs+0x2d8>)
 8000b56:	795b      	ldrb	r3, [r3, #5]
 8000b58:	f003 0304 	and.w	r3, r3, #4
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d005      	beq.n	8000b6e <Write_Outputs+0x19a>
 8000b62:	4b52      	ldr	r3, [pc, #328]	; (8000cac <Write_Outputs+0x2d8>)
 8000b64:	79db      	ldrb	r3, [r3, #7]
 8000b66:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000b6a:	b2d9      	uxtb	r1, r3
 8000b6c:	e000      	b.n	8000b70 <Write_Outputs+0x19c>
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4a4f      	ldr	r2, [pc, #316]	; (8000cb0 <Write_Outputs+0x2dc>)
 8000b72:	78d3      	ldrb	r3, [r2, #3]
 8000b74:	f361 0382 	bfi	r3, r1, #2, #1
 8000b78:	70d3      	strb	r3, [r2, #3]
	meas_data.d_outputs.out11 = settings.retain.output_emulation_switches.out11 ? settings.retain.output_emulation_values.out11 :  0;
 8000b7a:	4b4c      	ldr	r3, [pc, #304]	; (8000cac <Write_Outputs+0x2d8>)
 8000b7c:	795b      	ldrb	r3, [r3, #5]
 8000b7e:	f003 0308 	and.w	r3, r3, #8
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d005      	beq.n	8000b94 <Write_Outputs+0x1c0>
 8000b88:	4b48      	ldr	r3, [pc, #288]	; (8000cac <Write_Outputs+0x2d8>)
 8000b8a:	79db      	ldrb	r3, [r3, #7]
 8000b8c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000b90:	b2d9      	uxtb	r1, r3
 8000b92:	e000      	b.n	8000b96 <Write_Outputs+0x1c2>
 8000b94:	2100      	movs	r1, #0
 8000b96:	4a46      	ldr	r2, [pc, #280]	; (8000cb0 <Write_Outputs+0x2dc>)
 8000b98:	78d3      	ldrb	r3, [r2, #3]
 8000b9a:	f361 03c3 	bfi	r3, r1, #3, #1
 8000b9e:	70d3      	strb	r3, [r2, #3]
	HAL_GPIO_WritePin(DOUT_0_GPIO_Port, DOUT_0_Pin, meas_data.d_outputs.out0);
 8000ba0:	4b43      	ldr	r3, [pc, #268]	; (8000cb0 <Write_Outputs+0x2dc>)
 8000ba2:	789b      	ldrb	r3, [r3, #2]
 8000ba4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000ba8:	b2db      	uxtb	r3, r3
 8000baa:	461a      	mov	r2, r3
 8000bac:	2180      	movs	r1, #128	; 0x80
 8000bae:	4841      	ldr	r0, [pc, #260]	; (8000cb4 <Write_Outputs+0x2e0>)
 8000bb0:	f005 fa06 	bl	8005fc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_1_GPIO_Port, DOUT_1_Pin, meas_data.d_outputs.out1);
 8000bb4:	4b3e      	ldr	r3, [pc, #248]	; (8000cb0 <Write_Outputs+0x2dc>)
 8000bb6:	789b      	ldrb	r3, [r3, #2]
 8000bb8:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000bbc:	b2db      	uxtb	r3, r3
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bc4:	483b      	ldr	r0, [pc, #236]	; (8000cb4 <Write_Outputs+0x2e0>)
 8000bc6:	f005 f9fb 	bl	8005fc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_2_GPIO_Port, DOUT_2_Pin, meas_data.d_outputs.out2);
 8000bca:	4b39      	ldr	r3, [pc, #228]	; (8000cb0 <Write_Outputs+0x2dc>)
 8000bcc:	789b      	ldrb	r3, [r3, #2]
 8000bce:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000bd2:	b2db      	uxtb	r3, r3
 8000bd4:	461a      	mov	r2, r3
 8000bd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bda:	4836      	ldr	r0, [pc, #216]	; (8000cb4 <Write_Outputs+0x2e0>)
 8000bdc:	f005 f9f0 	bl	8005fc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_3_GPIO_Port, DOUT_3_Pin, meas_data.d_outputs.out3);
 8000be0:	4b33      	ldr	r3, [pc, #204]	; (8000cb0 <Write_Outputs+0x2dc>)
 8000be2:	789b      	ldrb	r3, [r3, #2]
 8000be4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	461a      	mov	r2, r3
 8000bec:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bf0:	4830      	ldr	r0, [pc, #192]	; (8000cb4 <Write_Outputs+0x2e0>)
 8000bf2:	f005 f9e5 	bl	8005fc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_4_GPIO_Port, DOUT_4_Pin, meas_data.d_outputs.out4);
 8000bf6:	4b2e      	ldr	r3, [pc, #184]	; (8000cb0 <Write_Outputs+0x2dc>)
 8000bf8:	789b      	ldrb	r3, [r3, #2]
 8000bfa:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	461a      	mov	r2, r3
 8000c02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c06:	482b      	ldr	r0, [pc, #172]	; (8000cb4 <Write_Outputs+0x2e0>)
 8000c08:	f005 f9da 	bl	8005fc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_5_GPIO_Port, DOUT_5_Pin, meas_data.d_outputs.out5);
 8000c0c:	4b28      	ldr	r3, [pc, #160]	; (8000cb0 <Write_Outputs+0x2dc>)
 8000c0e:	789b      	ldrb	r3, [r3, #2]
 8000c10:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8000c14:	b2db      	uxtb	r3, r3
 8000c16:	461a      	mov	r2, r3
 8000c18:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c1c:	4825      	ldr	r0, [pc, #148]	; (8000cb4 <Write_Outputs+0x2e0>)
 8000c1e:	f005 f9cf 	bl	8005fc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_6_GPIO_Port, DOUT_6_Pin, meas_data.d_outputs.out6);
 8000c22:	4b23      	ldr	r3, [pc, #140]	; (8000cb0 <Write_Outputs+0x2dc>)
 8000c24:	789b      	ldrb	r3, [r3, #2]
 8000c26:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c32:	4820      	ldr	r0, [pc, #128]	; (8000cb4 <Write_Outputs+0x2e0>)
 8000c34:	f005 f9c4 	bl	8005fc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_7_GPIO_Port, DOUT_7_Pin, meas_data.d_outputs.out7);
 8000c38:	4b1d      	ldr	r3, [pc, #116]	; (8000cb0 <Write_Outputs+0x2dc>)
 8000c3a:	789b      	ldrb	r3, [r3, #2]
 8000c3c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	461a      	mov	r2, r3
 8000c44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c48:	481a      	ldr	r0, [pc, #104]	; (8000cb4 <Write_Outputs+0x2e0>)
 8000c4a:	f005 f9b9 	bl	8005fc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_8_GPIO_Port, DOUT_8_Pin, meas_data.d_outputs.out8);
 8000c4e:	4b18      	ldr	r3, [pc, #96]	; (8000cb0 <Write_Outputs+0x2dc>)
 8000c50:	78db      	ldrb	r3, [r3, #3]
 8000c52:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	461a      	mov	r2, r3
 8000c5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c5e:	4815      	ldr	r0, [pc, #84]	; (8000cb4 <Write_Outputs+0x2e0>)
 8000c60:	f005 f9ae 	bl	8005fc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_9_GPIO_Port, DOUT_9_Pin, meas_data.d_outputs.out9);
 8000c64:	4b12      	ldr	r3, [pc, #72]	; (8000cb0 <Write_Outputs+0x2dc>)
 8000c66:	78db      	ldrb	r3, [r3, #3]
 8000c68:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8000c6c:	b2db      	uxtb	r3, r3
 8000c6e:	461a      	mov	r2, r3
 8000c70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c74:	4810      	ldr	r0, [pc, #64]	; (8000cb8 <Write_Outputs+0x2e4>)
 8000c76:	f005 f9a3 	bl	8005fc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_10_GPIO_Port, DOUT_10_Pin, meas_data.d_outputs.out10);
 8000c7a:	4b0d      	ldr	r3, [pc, #52]	; (8000cb0 <Write_Outputs+0x2dc>)
 8000c7c:	78db      	ldrb	r3, [r3, #3]
 8000c7e:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	461a      	mov	r2, r3
 8000c86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c8a:	480c      	ldr	r0, [pc, #48]	; (8000cbc <Write_Outputs+0x2e8>)
 8000c8c:	f005 f998 	bl	8005fc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DOUT_11_GPIO_Port, DOUT_11_Pin, meas_data.d_outputs.out11);
 8000c90:	4b07      	ldr	r3, [pc, #28]	; (8000cb0 <Write_Outputs+0x2dc>)
 8000c92:	78db      	ldrb	r3, [r3, #3]
 8000c94:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ca0:	4806      	ldr	r0, [pc, #24]	; (8000cbc <Write_Outputs+0x2e8>)
 8000ca2:	f005 f98d 	bl	8005fc0 <HAL_GPIO_WritePin>
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	2000709c 	.word	0x2000709c
 8000cb0:	2000710c 	.word	0x2000710c
 8000cb4:	40021000 	.word	0x40021000
 8000cb8:	40020400 	.word	0x40020400
 8000cbc:	40020c00 	.word	0x40020c00

08000cc0 <ethernet_reset>:

static int ethernet_answer(uint8_t *data, uint16_t data_length, uint8_t *answer);
static void Send(struct netconn *conn, uint8_t* pointer, uint16_t size, ip_addr_t *addr, uint16_t port, struct netbuf *buf);

void ethernet_reset()
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ERESET_GPIO_Port, ERESET_Pin, RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	4806      	ldr	r0, [pc, #24]	; (8000ce4 <ethernet_reset+0x24>)
 8000cca:	f005 f979 	bl	8005fc0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000cce:	2064      	movs	r0, #100	; 0x64
 8000cd0:	f002 fd0c 	bl	80036ec <HAL_Delay>
	HAL_GPIO_WritePin(ERESET_GPIO_Port, ERESET_Pin, SET);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	4802      	ldr	r0, [pc, #8]	; (8000ce4 <ethernet_reset+0x24>)
 8000cda:	f005 f971 	bl	8005fc0 <HAL_GPIO_WritePin>
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40020000 	.word	0x40020000

08000ce8 <ethernet_thread>:

void ethernet_thread(void *arg)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b0cc      	sub	sp, #304	; 0x130
 8000cec:	af02      	add	r7, sp, #8
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	6018      	str	r0, [r3, #0]
	struct netconn *conn;
	struct netbuf *buf;
	ip_addr_t *client_addr;
	unsigned short local_port;
	unsigned short client_port;
	local_port = *((unsigned short*)arg);
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	881b      	ldrh	r3, [r3, #0]
 8000cf8:	f8a7 3126 	strh.w	r3, [r7, #294]	; 0x126
	void* data;
	uint8_t answer[256];
	u16_t len;
	uint16_t answer_len;
	conn = netconn_new(NETCONN_UDP);
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	2100      	movs	r1, #0
 8000d00:	2020      	movs	r0, #32
 8000d02:	f00c f9e5 	bl	800d0d0 <netconn_new_with_proto_and_callback>
 8000d06:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120
	if (conn!= NULL)
 8000d0a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d05b      	beq.n	8000dca <ethernet_thread+0xe2>
	{
	  err = netconn_bind(conn, IP_ADDR_ANY, local_port);
 8000d12:	f8b7 3126 	ldrh.w	r3, [r7, #294]	; 0x126
 8000d16:	461a      	mov	r2, r3
 8000d18:	492e      	ldr	r1, [pc, #184]	; (8000dd4 <ethernet_thread+0xec>)
 8000d1a:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8000d1e:	f00c fa91 	bl	800d244 <netconn_bind>
 8000d22:	4603      	mov	r3, r0
 8000d24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	  if (err == ERR_OK)
 8000d28:	f997 311f 	ldrsb.w	r3, [r7, #287]	; 0x11f
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d148      	bne.n	8000dc2 <ethernet_thread+0xda>
	  {
		  for(;;)
		  {
			  recv_err = netconn_recv(conn, &buf);
 8000d30:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000d34:	4619      	mov	r1, r3
 8000d36:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8000d3a:	f00c fc37 	bl	800d5ac <netconn_recv>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
			  if (recv_err == ERR_OK)
 8000d44:	f997 311e 	ldrsb.w	r3, [r7, #286]	; 0x11e
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d1f1      	bne.n	8000d30 <ethernet_thread+0x48>
			  {
				  client_addr = netbuf_fromaddr(buf);
 8000d4c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000d50:	3308      	adds	r3, #8
 8000d52:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
				  client_port = netbuf_fromport(buf);
 8000d56:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000d5a:	899b      	ldrh	r3, [r3, #12]
 8000d5c:	f8a7 3116 	strh.w	r3, [r7, #278]	; 0x116

				  netbuf_data(buf, &data, &len);
 8000d60:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000d64:	f107 020a 	add.w	r2, r7, #10
 8000d68:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f00d ffef 	bl	800ed50 <netbuf_data>
				  answer_len = ethernet_answer(data, len, answer);
 8000d72:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8000d76:	f107 030a 	add.w	r3, r7, #10
 8000d7a:	881b      	ldrh	r3, [r3, #0]
 8000d7c:	f107 020c 	add.w	r2, r7, #12
 8000d80:	4619      	mov	r1, r3
 8000d82:	f000 f859 	bl	8000e38 <ethernet_answer>
 8000d86:	4603      	mov	r3, r0
 8000d88:	f8a7 3114 	strh.w	r3, [r7, #276]	; 0x114
				  if(answer_len)
 8000d8c:	f8b7 3114 	ldrh.w	r3, [r7, #276]	; 0x114
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d010      	beq.n	8000db6 <ethernet_thread+0xce>
				  {
					  Send(conn, answer, answer_len, client_addr, client_port, buf);
 8000d94:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000d98:	f8b7 2114 	ldrh.w	r2, [r7, #276]	; 0x114
 8000d9c:	f107 010c 	add.w	r1, r7, #12
 8000da0:	9301      	str	r3, [sp, #4]
 8000da2:	f8b7 3116 	ldrh.w	r3, [r7, #278]	; 0x116
 8000da6:	9300      	str	r3, [sp, #0]
 8000da8:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000dac:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8000db0:	f000 f812 	bl	8000dd8 <Send>
 8000db4:	e7bc      	b.n	8000d30 <ethernet_thread+0x48>
				  }
				  else netbuf_delete(buf);
 8000db6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f00d ff5e 	bl	800ec7c <netbuf_delete>
			  recv_err = netconn_recv(conn, &buf);
 8000dc0:	e7b6      	b.n	8000d30 <ethernet_thread+0x48>

		  }
	  }
	  else
	  {
	    netconn_delete(conn);
 8000dc2:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8000dc6:	f00c fa21 	bl	800d20c <netconn_delete>
	  }
	}
}
 8000dca:	bf00      	nop
 8000dcc:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	0801ef38 	.word	0x0801ef38

08000dd8 <Send>:

static void Send(struct netconn *conn, uint8_t* pointer, uint16_t size, ip_addr_t *addr, uint16_t port, struct netbuf *buf)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b086      	sub	sp, #24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	603b      	str	r3, [r7, #0]
 8000de4:	4613      	mov	r3, r2
 8000de6:	80fb      	strh	r3, [r7, #6]
	u32_t address = addr->addr;
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	617b      	str	r3, [r7, #20]
	netbuf_delete(buf);
 8000dee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000df0:	f00d ff44 	bl	800ec7c <netbuf_delete>
	buf = netbuf_new();
 8000df4:	f00d ff2e 	bl	800ec54 <netbuf_new>
 8000df8:	6278      	str	r0, [r7, #36]	; 0x24
	buf->port = port;
 8000dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dfc:	8c3a      	ldrh	r2, [r7, #32]
 8000dfe:	819a      	strh	r2, [r3, #12]
	addr->addr = address;
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	601a      	str	r2, [r3, #0]
	err_t err;
	err  = netbuf_ref(buf, pointer, size);
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	68b9      	ldr	r1, [r7, #8]
 8000e0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000e0e:	f00d ff55 	bl	800ecbc <netbuf_ref>
 8000e12:	4603      	mov	r3, r0
 8000e14:	74fb      	strb	r3, [r7, #19]
	if(err==ERR_OK)
 8000e16:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d108      	bne.n	8000e30 <Send+0x58>
	{
		netconn_sendto(conn, buf, addr, port);
 8000e1e:	8c3b      	ldrh	r3, [r7, #32]
 8000e20:	683a      	ldr	r2, [r7, #0]
 8000e22:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000e24:	68f8      	ldr	r0, [r7, #12]
 8000e26:	f00c fc3b 	bl	800d6a0 <netconn_sendto>
		netbuf_delete(buf);
 8000e2a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000e2c:	f00d ff26 	bl	800ec7c <netbuf_delete>
	}
}
 8000e30:	bf00      	nop
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <ethernet_answer>:

//Возвращает кол-во байт для отправки клиенту
static int ethernet_answer(uint8_t *data, uint16_t data_length, uint8_t *answer)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b086      	sub	sp, #24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	460b      	mov	r3, r1
 8000e42:	607a      	str	r2, [r7, #4]
 8000e44:	817b      	strh	r3, [r7, #10]
	int result = ModbusParse(data, data_length, answer, ETHERNET);
 8000e46:	8979      	ldrh	r1, [r7, #10]
 8000e48:	2301      	movs	r3, #1
 8000e4a:	687a      	ldr	r2, [r7, #4]
 8000e4c:	68f8      	ldr	r0, [r7, #12]
 8000e4e:	f001 f961 	bl	8002114 <ModbusParse>
 8000e52:	6178      	str	r0, [r7, #20]
	if(result)return result;
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <ethernet_answer+0x26>
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	e000      	b.n	8000e60 <ethernet_answer+0x28>
	return 0;
 8000e5e:	2300      	movs	r3, #0
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <framDataRead>:
#include <fram.h>

extern SPI_HandleTypeDef hspi3;

int framDataRead (uint16_t address, uint8_t * data, uint16_t size)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	6039      	str	r1, [r7, #0]
 8000e72:	80fb      	strh	r3, [r7, #6]
 8000e74:	4613      	mov	r3, r2
 8000e76:	80bb      	strh	r3, [r7, #4]
	int result = 0;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
	uint8_t buff[3];

	buff[0] = FRAM_CMD_READ;
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	723b      	strb	r3, [r7, #8]
	buff[1] = address >> 8;
 8000e80:	88fb      	ldrh	r3, [r7, #6]
 8000e82:	0a1b      	lsrs	r3, r3, #8
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	727b      	strb	r3, [r7, #9]
	buff[2] = address & 0xFF;
 8000e8a:	88fb      	ldrh	r3, [r7, #6]
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	72bb      	strb	r3, [r7, #10]
	HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e96:	4811      	ldr	r0, [pc, #68]	; (8000edc <framDataRead+0x74>)
 8000e98:	f005 f892 	bl	8005fc0 <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(&hspi3, buff, 3, 200);
 8000e9c:	f107 0108 	add.w	r1, r7, #8
 8000ea0:	23c8      	movs	r3, #200	; 0xc8
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	480e      	ldr	r0, [pc, #56]	; (8000ee0 <framDataRead+0x78>)
 8000ea6:	f005 fe10 	bl	8006aca <HAL_SPI_Transmit>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	60fb      	str	r3, [r7, #12]
	result |= HAL_SPI_Receive(&hspi3, data, size, 200);
 8000eae:	88ba      	ldrh	r2, [r7, #4]
 8000eb0:	23c8      	movs	r3, #200	; 0xc8
 8000eb2:	6839      	ldr	r1, [r7, #0]
 8000eb4:	480a      	ldr	r0, [pc, #40]	; (8000ee0 <framDataRead+0x78>)
 8000eb6:	f005 ff44 	bl	8006d42 <HAL_SPI_Receive>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_SET);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000eca:	4804      	ldr	r0, [pc, #16]	; (8000edc <framDataRead+0x74>)
 8000ecc:	f005 f878 	bl	8005fc0 <HAL_GPIO_WritePin>

	return result;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40020000 	.word	0x40020000
 8000ee0:	20006eb0 	.word	0x20006eb0

08000ee4 <framDataWrite>:

int framDataWrite (uint16_t address, uint8_t * data, uint16_t size)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b086      	sub	sp, #24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	4603      	mov	r3, r0
 8000eec:	6039      	str	r1, [r7, #0]
 8000eee:	80fb      	strh	r3, [r7, #6]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	80bb      	strh	r3, [r7, #4]
	int result = 0, status = 0, cntr = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	2300      	movs	r3, #0
 8000efa:	613b      	str	r3, [r7, #16]
 8000efc:	2300      	movs	r3, #0
 8000efe:	60fb      	str	r3, [r7, #12]
	uint8_t buff[3];

	buff[0] = FRAM_CMD_WREN;
 8000f00:	2306      	movs	r3, #6
 8000f02:	723b      	strb	r3, [r7, #8]
	HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f0a:	483f      	ldr	r0, [pc, #252]	; (8001008 <framDataWrite+0x124>)
 8000f0c:	f005 f858 	bl	8005fc0 <HAL_GPIO_WritePin>
	result = HAL_SPI_Transmit(&hspi3, buff, 1, 200);
 8000f10:	f107 0108 	add.w	r1, r7, #8
 8000f14:	23c8      	movs	r3, #200	; 0xc8
 8000f16:	2201      	movs	r2, #1
 8000f18:	483c      	ldr	r0, [pc, #240]	; (800100c <framDataWrite+0x128>)
 8000f1a:	f005 fdd6 	bl	8006aca <HAL_SPI_Transmit>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	617b      	str	r3, [r7, #20]
	HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_SET);
 8000f22:	2201      	movs	r2, #1
 8000f24:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f28:	4837      	ldr	r0, [pc, #220]	; (8001008 <framDataWrite+0x124>)
 8000f2a:	f005 f849 	bl	8005fc0 <HAL_GPIO_WritePin>
	buff[0] = FRAM_CMD_RDSR;
 8000f2e:	2305      	movs	r3, #5
 8000f30:	723b      	strb	r3, [r7, #8]
	while ((status == 0) && (cntr++ < 100))
 8000f32:	e027      	b.n	8000f84 <framDataWrite+0xa0>
	{
		HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f3a:	4833      	ldr	r0, [pc, #204]	; (8001008 <framDataWrite+0x124>)
 8000f3c:	f005 f840 	bl	8005fc0 <HAL_GPIO_WritePin>
		result |= HAL_SPI_Transmit(&hspi3, buff, 1, 200);
 8000f40:	f107 0108 	add.w	r1, r7, #8
 8000f44:	23c8      	movs	r3, #200	; 0xc8
 8000f46:	2201      	movs	r2, #1
 8000f48:	4830      	ldr	r0, [pc, #192]	; (800100c <framDataWrite+0x128>)
 8000f4a:	f005 fdbe 	bl	8006aca <HAL_SPI_Transmit>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	461a      	mov	r2, r3
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	617b      	str	r3, [r7, #20]
		result |= HAL_SPI_Receive(&hspi3, buff, 1, 200);
 8000f58:	f107 0108 	add.w	r1, r7, #8
 8000f5c:	23c8      	movs	r3, #200	; 0xc8
 8000f5e:	2201      	movs	r2, #1
 8000f60:	482a      	ldr	r0, [pc, #168]	; (800100c <framDataWrite+0x128>)
 8000f62:	f005 feee 	bl	8006d42 <HAL_SPI_Receive>
 8000f66:	4603      	mov	r3, r0
 8000f68:	461a      	mov	r2, r3
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f76:	4824      	ldr	r0, [pc, #144]	; (8001008 <framDataWrite+0x124>)
 8000f78:	f005 f822 	bl	8005fc0 <HAL_GPIO_WritePin>
		status = buff[0] & 0x02;
 8000f7c:	7a3b      	ldrb	r3, [r7, #8]
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	613b      	str	r3, [r7, #16]
	while ((status == 0) && (cntr++ < 100))
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d104      	bne.n	8000f94 <framDataWrite+0xb0>
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	1c5a      	adds	r2, r3, #1
 8000f8e:	60fa      	str	r2, [r7, #12]
 8000f90:	2b63      	cmp	r3, #99	; 0x63
 8000f92:	ddcf      	ble.n	8000f34 <framDataWrite+0x50>
	}
	if (!status)
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d103      	bne.n	8000fa2 <framDataWrite+0xbe>
		result = -2;
 8000f9a:	f06f 0301 	mvn.w	r3, #1
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	e02c      	b.n	8000ffc <framDataWrite+0x118>
	else
	{
		buff[0] = FRAM_CMD_WRITE;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	723b      	strb	r3, [r7, #8]
		buff[1] = address >> 8;
 8000fa6:	88fb      	ldrh	r3, [r7, #6]
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	b29b      	uxth	r3, r3
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	727b      	strb	r3, [r7, #9]
		buff[2] = address & 0xFF;
 8000fb0:	88fb      	ldrh	r3, [r7, #6]
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	72bb      	strb	r3, [r7, #10]
		HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_RESET);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fbc:	4812      	ldr	r0, [pc, #72]	; (8001008 <framDataWrite+0x124>)
 8000fbe:	f004 ffff 	bl	8005fc0 <HAL_GPIO_WritePin>
		result |= HAL_SPI_Transmit(&hspi3, buff, 3, 200);
 8000fc2:	f107 0108 	add.w	r1, r7, #8
 8000fc6:	23c8      	movs	r3, #200	; 0xc8
 8000fc8:	2203      	movs	r2, #3
 8000fca:	4810      	ldr	r0, [pc, #64]	; (800100c <framDataWrite+0x128>)
 8000fcc:	f005 fd7d 	bl	8006aca <HAL_SPI_Transmit>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	461a      	mov	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	617b      	str	r3, [r7, #20]
		result |= HAL_SPI_Transmit(&hspi3, data, size, 200);
 8000fda:	88ba      	ldrh	r2, [r7, #4]
 8000fdc:	23c8      	movs	r3, #200	; 0xc8
 8000fde:	6839      	ldr	r1, [r7, #0]
 8000fe0:	480a      	ldr	r0, [pc, #40]	; (800100c <framDataWrite+0x128>)
 8000fe2:	f005 fd72 	bl	8006aca <HAL_SPI_Transmit>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	461a      	mov	r2, r3
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_SET);
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ff6:	4804      	ldr	r0, [pc, #16]	; (8001008 <framDataWrite+0x124>)
 8000ff8:	f004 ffe2 	bl	8005fc0 <HAL_GPIO_WritePin>
	}

	return result;
 8000ffc:	697b      	ldr	r3, [r7, #20]
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3718      	adds	r7, #24
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40020000 	.word	0x40020000
 800100c:	20006eb0 	.word	0x20006eb0

08001010 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	60f8      	str	r0, [r7, #12]
 8001018:	60b9      	str	r1, [r7, #8]
 800101a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4a07      	ldr	r2, [pc, #28]	; (800103c <vApplicationGetIdleTaskMemory+0x2c>)
 8001020:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	4a06      	ldr	r2, [pc, #24]	; (8001040 <vApplicationGetIdleTaskMemory+0x30>)
 8001026:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2280      	movs	r2, #128	; 0x80
 800102c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800102e:	bf00      	nop
 8001030:	3714      	adds	r7, #20
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000130 	.word	0x20000130
 8001040:	200001e4 	.word	0x200001e4

08001044 <task_init>:
/* USER CODE END GET_IDLE_TASK_MEMORY */

/* Private application code --------------------------------------------------*/
/* USER CODE BEGIN Application */
void task_init()
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b088      	sub	sp, #32
 8001048:	af02      	add	r7, sp, #8
	size_t fre = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
	fre=xPortGetFreeHeapSize();
 800104e:	f00b ff59 	bl	800cf04 <xPortGetFreeHeapSize>
 8001052:	6178      	str	r0, [r7, #20]
	sys_thread_new("eth_thread1", ethernet_thread, (void*)&port1, DEFAULT_THREAD_STACKSIZE, osPriorityNormal );
 8001054:	2300      	movs	r3, #0
 8001056:	9300      	str	r3, [sp, #0]
 8001058:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800105c:	4a1d      	ldr	r2, [pc, #116]	; (80010d4 <task_init+0x90>)
 800105e:	491e      	ldr	r1, [pc, #120]	; (80010d8 <task_init+0x94>)
 8001060:	481e      	ldr	r0, [pc, #120]	; (80010dc <task_init+0x98>)
 8001062:	f019 f8e3 	bl	801a22c <sys_thread_new>
	fre=xPortGetFreeHeapSize();
 8001066:	f00b ff4d 	bl	800cf04 <xPortGetFreeHeapSize>
 800106a:	6178      	str	r0, [r7, #20]
	sys_thread_new("eth_thread2", ethernet_thread, (void*)&port2, DEFAULT_THREAD_STACKSIZE, osPriorityNormal );
 800106c:	2300      	movs	r3, #0
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001074:	4a1a      	ldr	r2, [pc, #104]	; (80010e0 <task_init+0x9c>)
 8001076:	4918      	ldr	r1, [pc, #96]	; (80010d8 <task_init+0x94>)
 8001078:	481a      	ldr	r0, [pc, #104]	; (80010e4 <task_init+0xa0>)
 800107a:	f019 f8d7 	bl	801a22c <sys_thread_new>
	fre=xPortGetFreeHeapSize();
 800107e:	f00b ff41 	bl	800cf04 <xPortGetFreeHeapSize>
 8001082:	6178      	str	r0, [r7, #20]
	sys_thread_new("uart_thread", uart_thread, (void*)NULL, 512, osPriorityNormal );
 8001084:	2300      	movs	r3, #0
 8001086:	9300      	str	r3, [sp, #0]
 8001088:	f44f 7300 	mov.w	r3, #512	; 0x200
 800108c:	2200      	movs	r2, #0
 800108e:	4916      	ldr	r1, [pc, #88]	; (80010e8 <task_init+0xa4>)
 8001090:	4816      	ldr	r0, [pc, #88]	; (80010ec <task_init+0xa8>)
 8001092:	f019 f8cb 	bl	801a22c <sys_thread_new>
	fre=xPortGetFreeHeapSize();
 8001096:	f00b ff35 	bl	800cf04 <xPortGetFreeHeapSize>
 800109a:	6178      	str	r0, [r7, #20]
	osMailQDef(uart_queue, UART_QUEUE_SIZE, Uart_Queue_Struct);
 800109c:	2303      	movs	r3, #3
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	2310      	movs	r3, #16
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	f107 0310 	add.w	r3, r7, #16
 80010a8:	60fb      	str	r3, [r7, #12]
	uart_queue = osMailCreate(osMailQ(uart_queue), NULL);
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f009 f99a 	bl	800a3e8 <osMailCreate>
 80010b4:	4603      	mov	r3, r0
 80010b6:	4a0e      	ldr	r2, [pc, #56]	; (80010f0 <task_init+0xac>)
 80010b8:	6013      	str	r3, [r2, #0]
	sys_thread_new("keyboard_thread", keyscan_thread, (void*)NULL, 128, osPriorityNormal );
 80010ba:	2300      	movs	r3, #0
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	2380      	movs	r3, #128	; 0x80
 80010c0:	2200      	movs	r2, #0
 80010c2:	490c      	ldr	r1, [pc, #48]	; (80010f4 <task_init+0xb0>)
 80010c4:	480c      	ldr	r0, [pc, #48]	; (80010f8 <task_init+0xb4>)
 80010c6:	f019 f8b1 	bl	801a22c <sys_thread_new>
}
 80010ca:	bf00      	nop
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000000 	.word	0x20000000
 80010d8:	08000ce9 	.word	0x08000ce9
 80010dc:	0801b7e8 	.word	0x0801b7e8
 80010e0:	20000002 	.word	0x20000002
 80010e4:	0801b7f4 	.word	0x0801b7f4
 80010e8:	080031e1 	.word	0x080031e1
 80010ec:	0801b800 	.word	0x0801b800
 80010f0:	20006cbc 	.word	0x20006cbc
 80010f4:	080010fd 	.word	0x080010fd
 80010f8:	0801b80c 	.word	0x0801b80c

080010fc <keyscan_thread>:
static void key_filter_all();
static void PrintSymbol(const char *str);


void keyscan_thread(void *argument)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

	while(1)
	{
		Tact_pins();
 8001104:	f000 f846 	bl	8001194 <Tact_pins>
		Key_Read();
 8001108:	f000 f950 	bl	80013ac <Key_Read>
		key_filter_all();
 800110c:	f000 f9c4 	bl	8001498 <key_filter_all>
		GetPositiveFront();
 8001110:	f000 fa72 	bl	80015f8 <GetPositiveFront>
		for (int i = 0; i < 6; ++i) {
 8001114:	2300      	movs	r3, #0
 8001116:	60fb      	str	r3, [r7, #12]
 8001118:	e030      	b.n	800117c <keyscan_thread+0x80>
			for (int j = 0; j < 6; ++j) {
 800111a:	2300      	movs	r3, #0
 800111c:	60bb      	str	r3, [r7, #8]
 800111e:	e027      	b.n	8001170 <keyscan_thread+0x74>
				if(positive_fronts[i][j])
 8001120:	491a      	ldr	r1, [pc, #104]	; (800118c <keyscan_thread+0x90>)
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	4613      	mov	r3, r2
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	4413      	add	r3, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	18ca      	adds	r2, r1, r3
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	4413      	add	r3, r2
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d018      	beq.n	800116a <keyscan_thread+0x6e>
				{
					if(keys[i][j]!=NULL)
 8001138:	4915      	ldr	r1, [pc, #84]	; (8001190 <keyscan_thread+0x94>)
 800113a:	68fa      	ldr	r2, [r7, #12]
 800113c:	4613      	mov	r3, r2
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	4413      	add	r3, r2
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	4413      	add	r3, r2
 8001148:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d00c      	beq.n	800116a <keyscan_thread+0x6e>
					{
						PrintSymbol(keys[i][j]);
 8001150:	490f      	ldr	r1, [pc, #60]	; (8001190 <keyscan_thread+0x94>)
 8001152:	68fa      	ldr	r2, [r7, #12]
 8001154:	4613      	mov	r3, r2
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	4413      	add	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	68ba      	ldr	r2, [r7, #8]
 800115e:	4413      	add	r3, r2
 8001160:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001164:	4618      	mov	r0, r3
 8001166:	f000 faa5 	bl	80016b4 <PrintSymbol>
			for (int j = 0; j < 6; ++j) {
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	3301      	adds	r3, #1
 800116e:	60bb      	str	r3, [r7, #8]
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	2b05      	cmp	r3, #5
 8001174:	ddd4      	ble.n	8001120 <keyscan_thread+0x24>
		for (int i = 0; i < 6; ++i) {
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	3301      	adds	r3, #1
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	2b05      	cmp	r3, #5
 8001180:	ddcb      	ble.n	800111a <keyscan_thread+0x1e>
				}
			}
		}


		osDelay(2);
 8001182:	2002      	movs	r0, #2
 8001184:	f008 fdd9 	bl	8009d3a <osDelay>
		Tact_pins();
 8001188:	e7bc      	b.n	8001104 <keyscan_thread+0x8>
 800118a:	bf00      	nop
 800118c:	20000474 	.word	0x20000474
 8001190:	20000004 	.word	0x20000004

08001194 <Tact_pins>:
	}
}

static void Tact_pins(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
	out_key_pin = (out_key_pin+1)%COLUMNS_COUNT;
 8001198:	4b81      	ldr	r3, [pc, #516]	; (80013a0 <Tact_pins+0x20c>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	1c5a      	adds	r2, r3, #1
 800119e:	4b81      	ldr	r3, [pc, #516]	; (80013a4 <Tact_pins+0x210>)
 80011a0:	fb83 3102 	smull	r3, r1, r3, r2
 80011a4:	17d3      	asrs	r3, r2, #31
 80011a6:	1ac9      	subs	r1, r1, r3
 80011a8:	460b      	mov	r3, r1
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	440b      	add	r3, r1
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	1ad1      	subs	r1, r2, r3
 80011b2:	b2ca      	uxtb	r2, r1
 80011b4:	4b7a      	ldr	r3, [pc, #488]	; (80013a0 <Tact_pins+0x20c>)
 80011b6:	701a      	strb	r2, [r3, #0]
	switch(out_key_pin)
 80011b8:	4b79      	ldr	r3, [pc, #484]	; (80013a0 <Tact_pins+0x20c>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b05      	cmp	r3, #5
 80011be:	f200 80ed 	bhi.w	800139c <Tact_pins+0x208>
 80011c2:	a201      	add	r2, pc, #4	; (adr r2, 80011c8 <Tact_pins+0x34>)
 80011c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c8:	080011e1 	.word	0x080011e1
 80011cc:	0800122b 	.word	0x0800122b
 80011d0:	08001275 	.word	0x08001275
 80011d4:	080012bf 	.word	0x080012bf
 80011d8:	08001309 	.word	0x08001309
 80011dc:	08001353 	.word	0x08001353
	{
		case 0:
			C0_HIGH;
 80011e0:	2201      	movs	r2, #1
 80011e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011e6:	4870      	ldr	r0, [pc, #448]	; (80013a8 <Tact_pins+0x214>)
 80011e8:	f004 feea 	bl	8005fc0 <HAL_GPIO_WritePin>
			C1_LOW;
 80011ec:	2200      	movs	r2, #0
 80011ee:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011f2:	486d      	ldr	r0, [pc, #436]	; (80013a8 <Tact_pins+0x214>)
 80011f4:	f004 fee4 	bl	8005fc0 <HAL_GPIO_WritePin>
			C2_LOW;
 80011f8:	2200      	movs	r2, #0
 80011fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80011fe:	486a      	ldr	r0, [pc, #424]	; (80013a8 <Tact_pins+0x214>)
 8001200:	f004 fede 	bl	8005fc0 <HAL_GPIO_WritePin>
			C3_LOW;
 8001204:	2200      	movs	r2, #0
 8001206:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800120a:	4867      	ldr	r0, [pc, #412]	; (80013a8 <Tact_pins+0x214>)
 800120c:	f004 fed8 	bl	8005fc0 <HAL_GPIO_WritePin>
			C4_LOW;
 8001210:	2200      	movs	r2, #0
 8001212:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001216:	4864      	ldr	r0, [pc, #400]	; (80013a8 <Tact_pins+0x214>)
 8001218:	f004 fed2 	bl	8005fc0 <HAL_GPIO_WritePin>
			C5_LOW;
 800121c:	2200      	movs	r2, #0
 800121e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001222:	4861      	ldr	r0, [pc, #388]	; (80013a8 <Tact_pins+0x214>)
 8001224:	f004 fecc 	bl	8005fc0 <HAL_GPIO_WritePin>
			break;
 8001228:	e0b8      	b.n	800139c <Tact_pins+0x208>
		case 1:
			C0_LOW;
 800122a:	2200      	movs	r2, #0
 800122c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001230:	485d      	ldr	r0, [pc, #372]	; (80013a8 <Tact_pins+0x214>)
 8001232:	f004 fec5 	bl	8005fc0 <HAL_GPIO_WritePin>
			C1_HIGH;
 8001236:	2201      	movs	r2, #1
 8001238:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800123c:	485a      	ldr	r0, [pc, #360]	; (80013a8 <Tact_pins+0x214>)
 800123e:	f004 febf 	bl	8005fc0 <HAL_GPIO_WritePin>
			C2_LOW;
 8001242:	2200      	movs	r2, #0
 8001244:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001248:	4857      	ldr	r0, [pc, #348]	; (80013a8 <Tact_pins+0x214>)
 800124a:	f004 feb9 	bl	8005fc0 <HAL_GPIO_WritePin>
			C3_LOW;
 800124e:	2200      	movs	r2, #0
 8001250:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001254:	4854      	ldr	r0, [pc, #336]	; (80013a8 <Tact_pins+0x214>)
 8001256:	f004 feb3 	bl	8005fc0 <HAL_GPIO_WritePin>
			C4_LOW;
 800125a:	2200      	movs	r2, #0
 800125c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001260:	4851      	ldr	r0, [pc, #324]	; (80013a8 <Tact_pins+0x214>)
 8001262:	f004 fead 	bl	8005fc0 <HAL_GPIO_WritePin>
			C5_LOW;
 8001266:	2200      	movs	r2, #0
 8001268:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800126c:	484e      	ldr	r0, [pc, #312]	; (80013a8 <Tact_pins+0x214>)
 800126e:	f004 fea7 	bl	8005fc0 <HAL_GPIO_WritePin>
			break;
 8001272:	e093      	b.n	800139c <Tact_pins+0x208>
		case 2:
			C0_LOW;
 8001274:	2200      	movs	r2, #0
 8001276:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800127a:	484b      	ldr	r0, [pc, #300]	; (80013a8 <Tact_pins+0x214>)
 800127c:	f004 fea0 	bl	8005fc0 <HAL_GPIO_WritePin>
			C1_LOW;
 8001280:	2200      	movs	r2, #0
 8001282:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001286:	4848      	ldr	r0, [pc, #288]	; (80013a8 <Tact_pins+0x214>)
 8001288:	f004 fe9a 	bl	8005fc0 <HAL_GPIO_WritePin>
			C2_HIGH;
 800128c:	2201      	movs	r2, #1
 800128e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001292:	4845      	ldr	r0, [pc, #276]	; (80013a8 <Tact_pins+0x214>)
 8001294:	f004 fe94 	bl	8005fc0 <HAL_GPIO_WritePin>
			C3_LOW;
 8001298:	2200      	movs	r2, #0
 800129a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800129e:	4842      	ldr	r0, [pc, #264]	; (80013a8 <Tact_pins+0x214>)
 80012a0:	f004 fe8e 	bl	8005fc0 <HAL_GPIO_WritePin>
			C4_LOW;
 80012a4:	2200      	movs	r2, #0
 80012a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012aa:	483f      	ldr	r0, [pc, #252]	; (80013a8 <Tact_pins+0x214>)
 80012ac:	f004 fe88 	bl	8005fc0 <HAL_GPIO_WritePin>
			C5_LOW;
 80012b0:	2200      	movs	r2, #0
 80012b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012b6:	483c      	ldr	r0, [pc, #240]	; (80013a8 <Tact_pins+0x214>)
 80012b8:	f004 fe82 	bl	8005fc0 <HAL_GPIO_WritePin>
			break;
 80012bc:	e06e      	b.n	800139c <Tact_pins+0x208>
		case 3:
			C0_LOW;
 80012be:	2200      	movs	r2, #0
 80012c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012c4:	4838      	ldr	r0, [pc, #224]	; (80013a8 <Tact_pins+0x214>)
 80012c6:	f004 fe7b 	bl	8005fc0 <HAL_GPIO_WritePin>
			C1_LOW;
 80012ca:	2200      	movs	r2, #0
 80012cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012d0:	4835      	ldr	r0, [pc, #212]	; (80013a8 <Tact_pins+0x214>)
 80012d2:	f004 fe75 	bl	8005fc0 <HAL_GPIO_WritePin>
			C2_LOW;
 80012d6:	2200      	movs	r2, #0
 80012d8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012dc:	4832      	ldr	r0, [pc, #200]	; (80013a8 <Tact_pins+0x214>)
 80012de:	f004 fe6f 	bl	8005fc0 <HAL_GPIO_WritePin>
			C3_HIGH;
 80012e2:	2201      	movs	r2, #1
 80012e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012e8:	482f      	ldr	r0, [pc, #188]	; (80013a8 <Tact_pins+0x214>)
 80012ea:	f004 fe69 	bl	8005fc0 <HAL_GPIO_WritePin>
			C4_LOW;
 80012ee:	2200      	movs	r2, #0
 80012f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80012f4:	482c      	ldr	r0, [pc, #176]	; (80013a8 <Tact_pins+0x214>)
 80012f6:	f004 fe63 	bl	8005fc0 <HAL_GPIO_WritePin>
			C5_LOW;
 80012fa:	2200      	movs	r2, #0
 80012fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001300:	4829      	ldr	r0, [pc, #164]	; (80013a8 <Tact_pins+0x214>)
 8001302:	f004 fe5d 	bl	8005fc0 <HAL_GPIO_WritePin>
			break;
 8001306:	e049      	b.n	800139c <Tact_pins+0x208>
		case 4:
			C0_LOW;
 8001308:	2200      	movs	r2, #0
 800130a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800130e:	4826      	ldr	r0, [pc, #152]	; (80013a8 <Tact_pins+0x214>)
 8001310:	f004 fe56 	bl	8005fc0 <HAL_GPIO_WritePin>
			C1_LOW;
 8001314:	2200      	movs	r2, #0
 8001316:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800131a:	4823      	ldr	r0, [pc, #140]	; (80013a8 <Tact_pins+0x214>)
 800131c:	f004 fe50 	bl	8005fc0 <HAL_GPIO_WritePin>
			C2_LOW;
 8001320:	2200      	movs	r2, #0
 8001322:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001326:	4820      	ldr	r0, [pc, #128]	; (80013a8 <Tact_pins+0x214>)
 8001328:	f004 fe4a 	bl	8005fc0 <HAL_GPIO_WritePin>
			C3_LOW;
 800132c:	2200      	movs	r2, #0
 800132e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001332:	481d      	ldr	r0, [pc, #116]	; (80013a8 <Tact_pins+0x214>)
 8001334:	f004 fe44 	bl	8005fc0 <HAL_GPIO_WritePin>
			C4_HIGH;
 8001338:	2201      	movs	r2, #1
 800133a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800133e:	481a      	ldr	r0, [pc, #104]	; (80013a8 <Tact_pins+0x214>)
 8001340:	f004 fe3e 	bl	8005fc0 <HAL_GPIO_WritePin>
			C5_LOW;
 8001344:	2200      	movs	r2, #0
 8001346:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800134a:	4817      	ldr	r0, [pc, #92]	; (80013a8 <Tact_pins+0x214>)
 800134c:	f004 fe38 	bl	8005fc0 <HAL_GPIO_WritePin>
			break;
 8001350:	e024      	b.n	800139c <Tact_pins+0x208>
		case 5:
			C0_LOW;
 8001352:	2200      	movs	r2, #0
 8001354:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001358:	4813      	ldr	r0, [pc, #76]	; (80013a8 <Tact_pins+0x214>)
 800135a:	f004 fe31 	bl	8005fc0 <HAL_GPIO_WritePin>
			C1_LOW;
 800135e:	2200      	movs	r2, #0
 8001360:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001364:	4810      	ldr	r0, [pc, #64]	; (80013a8 <Tact_pins+0x214>)
 8001366:	f004 fe2b 	bl	8005fc0 <HAL_GPIO_WritePin>
			C2_LOW;
 800136a:	2200      	movs	r2, #0
 800136c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001370:	480d      	ldr	r0, [pc, #52]	; (80013a8 <Tact_pins+0x214>)
 8001372:	f004 fe25 	bl	8005fc0 <HAL_GPIO_WritePin>
			C3_LOW;
 8001376:	2200      	movs	r2, #0
 8001378:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800137c:	480a      	ldr	r0, [pc, #40]	; (80013a8 <Tact_pins+0x214>)
 800137e:	f004 fe1f 	bl	8005fc0 <HAL_GPIO_WritePin>
			C4_LOW;
 8001382:	2200      	movs	r2, #0
 8001384:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001388:	4807      	ldr	r0, [pc, #28]	; (80013a8 <Tact_pins+0x214>)
 800138a:	f004 fe19 	bl	8005fc0 <HAL_GPIO_WritePin>
			C5_HIGH;
 800138e:	2201      	movs	r2, #1
 8001390:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001394:	4804      	ldr	r0, [pc, #16]	; (80013a8 <Tact_pins+0x214>)
 8001396:	f004 fe13 	bl	8005fc0 <HAL_GPIO_WritePin>
			break;
 800139a:	bf00      	nop
	}
}
 800139c:	bf00      	nop
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20006e00 	.word	0x20006e00
 80013a4:	2aaaaaab 	.word	0x2aaaaaab
 80013a8:	40020c00 	.word	0x40020c00

080013ac <Key_Read>:


static void Key_Read(void)
{
 80013ac:	b598      	push	{r3, r4, r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	key_input_mask[out_key_pin][0] = R0_IN;
 80013b0:	4b36      	ldr	r3, [pc, #216]	; (800148c <Key_Read+0xe0>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	461c      	mov	r4, r3
 80013b6:	2101      	movs	r1, #1
 80013b8:	4835      	ldr	r0, [pc, #212]	; (8001490 <Key_Read+0xe4>)
 80013ba:	f004 fde9 	bl	8005f90 <HAL_GPIO_ReadPin>
 80013be:	4603      	mov	r3, r0
 80013c0:	4619      	mov	r1, r3
 80013c2:	4a34      	ldr	r2, [pc, #208]	; (8001494 <Key_Read+0xe8>)
 80013c4:	4623      	mov	r3, r4
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	4423      	add	r3, r4
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	4413      	add	r3, r2
 80013ce:	460a      	mov	r2, r1
 80013d0:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][1] = R1_IN;
 80013d2:	4b2e      	ldr	r3, [pc, #184]	; (800148c <Key_Read+0xe0>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	461c      	mov	r4, r3
 80013d8:	2102      	movs	r1, #2
 80013da:	482d      	ldr	r0, [pc, #180]	; (8001490 <Key_Read+0xe4>)
 80013dc:	f004 fdd8 	bl	8005f90 <HAL_GPIO_ReadPin>
 80013e0:	4603      	mov	r3, r0
 80013e2:	4619      	mov	r1, r3
 80013e4:	4a2b      	ldr	r2, [pc, #172]	; (8001494 <Key_Read+0xe8>)
 80013e6:	4623      	mov	r3, r4
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	4423      	add	r3, r4
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	4413      	add	r3, r2
 80013f0:	3301      	adds	r3, #1
 80013f2:	460a      	mov	r2, r1
 80013f4:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][2] = R2_IN;
 80013f6:	4b25      	ldr	r3, [pc, #148]	; (800148c <Key_Read+0xe0>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	461c      	mov	r4, r3
 80013fc:	2104      	movs	r1, #4
 80013fe:	4824      	ldr	r0, [pc, #144]	; (8001490 <Key_Read+0xe4>)
 8001400:	f004 fdc6 	bl	8005f90 <HAL_GPIO_ReadPin>
 8001404:	4603      	mov	r3, r0
 8001406:	4619      	mov	r1, r3
 8001408:	4a22      	ldr	r2, [pc, #136]	; (8001494 <Key_Read+0xe8>)
 800140a:	4623      	mov	r3, r4
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	4423      	add	r3, r4
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	4413      	add	r3, r2
 8001414:	3302      	adds	r3, #2
 8001416:	460a      	mov	r2, r1
 8001418:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][3] = R3_IN;
 800141a:	4b1c      	ldr	r3, [pc, #112]	; (800148c <Key_Read+0xe0>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	461c      	mov	r4, r3
 8001420:	2108      	movs	r1, #8
 8001422:	481b      	ldr	r0, [pc, #108]	; (8001490 <Key_Read+0xe4>)
 8001424:	f004 fdb4 	bl	8005f90 <HAL_GPIO_ReadPin>
 8001428:	4603      	mov	r3, r0
 800142a:	4619      	mov	r1, r3
 800142c:	4a19      	ldr	r2, [pc, #100]	; (8001494 <Key_Read+0xe8>)
 800142e:	4623      	mov	r3, r4
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	4423      	add	r3, r4
 8001434:	005b      	lsls	r3, r3, #1
 8001436:	4413      	add	r3, r2
 8001438:	3303      	adds	r3, #3
 800143a:	460a      	mov	r2, r1
 800143c:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][4] = R4_IN;
 800143e:	4b13      	ldr	r3, [pc, #76]	; (800148c <Key_Read+0xe0>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	461c      	mov	r4, r3
 8001444:	2110      	movs	r1, #16
 8001446:	4812      	ldr	r0, [pc, #72]	; (8001490 <Key_Read+0xe4>)
 8001448:	f004 fda2 	bl	8005f90 <HAL_GPIO_ReadPin>
 800144c:	4603      	mov	r3, r0
 800144e:	4619      	mov	r1, r3
 8001450:	4a10      	ldr	r2, [pc, #64]	; (8001494 <Key_Read+0xe8>)
 8001452:	4623      	mov	r3, r4
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	4423      	add	r3, r4
 8001458:	005b      	lsls	r3, r3, #1
 800145a:	4413      	add	r3, r2
 800145c:	3304      	adds	r3, #4
 800145e:	460a      	mov	r2, r1
 8001460:	701a      	strb	r2, [r3, #0]
	key_input_mask[out_key_pin][5] = R5_IN;
 8001462:	4b0a      	ldr	r3, [pc, #40]	; (800148c <Key_Read+0xe0>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	461c      	mov	r4, r3
 8001468:	2120      	movs	r1, #32
 800146a:	4809      	ldr	r0, [pc, #36]	; (8001490 <Key_Read+0xe4>)
 800146c:	f004 fd90 	bl	8005f90 <HAL_GPIO_ReadPin>
 8001470:	4603      	mov	r3, r0
 8001472:	4619      	mov	r1, r3
 8001474:	4a07      	ldr	r2, [pc, #28]	; (8001494 <Key_Read+0xe8>)
 8001476:	4623      	mov	r3, r4
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4423      	add	r3, r4
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4413      	add	r3, r2
 8001480:	3305      	adds	r3, #5
 8001482:	460a      	mov	r2, r1
 8001484:	701a      	strb	r2, [r3, #0]
}
 8001486:	bf00      	nop
 8001488:	bd98      	pop	{r3, r4, r7, pc}
 800148a:	bf00      	nop
 800148c:	20006e00 	.word	0x20006e00
 8001490:	40020c00 	.word	0x40020c00
 8001494:	200003e4 	.word	0x200003e4

08001498 <key_filter_all>:

static void key_filter_all()
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
	for (int x = 0; x < COLUMNS_COUNT; ++x) {
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	e013      	b.n	80014cc <key_filter_all+0x34>
		for (int y = 0; y < ROWS_COUNT; ++y) {
 80014a4:	2300      	movs	r3, #0
 80014a6:	603b      	str	r3, [r7, #0]
 80014a8:	e00a      	b.n	80014c0 <key_filter_all+0x28>
			key_filter(x, y);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	683a      	ldr	r2, [r7, #0]
 80014b0:	b2d2      	uxtb	r2, r2
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f000 f811 	bl	80014dc <key_filter>
		for (int y = 0; y < ROWS_COUNT; ++y) {
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	3301      	adds	r3, #1
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	2b05      	cmp	r3, #5
 80014c4:	ddf1      	ble.n	80014aa <key_filter_all+0x12>
	for (int x = 0; x < COLUMNS_COUNT; ++x) {
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3301      	adds	r3, #1
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b05      	cmp	r3, #5
 80014d0:	dde8      	ble.n	80014a4 <key_filter_all+0xc>
		}
	}
}
 80014d2:	bf00      	nop
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}

080014dc <key_filter>:

static void key_filter(uint8_t x, uint8_t y)
{
 80014dc:	b490      	push	{r4, r7}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	460a      	mov	r2, r1
 80014e6:	71fb      	strb	r3, [r7, #7]
 80014e8:	4613      	mov	r3, r2
 80014ea:	71bb      	strb	r3, [r7, #6]
	if(key_input_mask[x][y])
 80014ec:	79fa      	ldrb	r2, [r7, #7]
 80014ee:	79b9      	ldrb	r1, [r7, #6]
 80014f0:	483e      	ldr	r0, [pc, #248]	; (80015ec <key_filter+0x110>)
 80014f2:	4613      	mov	r3, r2
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	4413      	add	r3, r2
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	4403      	add	r3, r0
 80014fc:	440b      	add	r3, r1
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b00      	cmp	r3, #0
 8001502:	d01b      	beq.n	800153c <key_filter+0x60>
	{
		key_sence_count[x][y]= key_sence_count[x][y]>=KEY_SENCE ? KEY_SENCE : key_sence_count[x][y]+1;
 8001504:	79fa      	ldrb	r2, [r7, #7]
 8001506:	79b9      	ldrb	r1, [r7, #6]
 8001508:	4839      	ldr	r0, [pc, #228]	; (80015f0 <key_filter+0x114>)
 800150a:	4613      	mov	r3, r2
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	4413      	add	r3, r2
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4403      	add	r3, r0
 8001514:	440b      	add	r3, r1
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b04      	cmp	r3, #4
 800151a:	bf28      	it	cs
 800151c:	2304      	movcs	r3, #4
 800151e:	b2db      	uxtb	r3, r3
 8001520:	79fa      	ldrb	r2, [r7, #7]
 8001522:	79b9      	ldrb	r1, [r7, #6]
 8001524:	3301      	adds	r3, #1
 8001526:	b2dc      	uxtb	r4, r3
 8001528:	4831      	ldr	r0, [pc, #196]	; (80015f0 <key_filter+0x114>)
 800152a:	4613      	mov	r3, r2
 800152c:	005b      	lsls	r3, r3, #1
 800152e:	4413      	add	r3, r2
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	4403      	add	r3, r0
 8001534:	440b      	add	r3, r1
 8001536:	4622      	mov	r2, r4
 8001538:	701a      	strb	r2, [r3, #0]
 800153a:	e024      	b.n	8001586 <key_filter+0xaa>
	}
	else{
		key_sence_count[x][y]= key_sence_count[x][y]<=0 ? 0 : key_sence_count[x][y]-1;
 800153c:	79fa      	ldrb	r2, [r7, #7]
 800153e:	79b9      	ldrb	r1, [r7, #6]
 8001540:	482b      	ldr	r0, [pc, #172]	; (80015f0 <key_filter+0x114>)
 8001542:	4613      	mov	r3, r2
 8001544:	005b      	lsls	r3, r3, #1
 8001546:	4413      	add	r3, r2
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	4403      	add	r3, r0
 800154c:	440b      	add	r3, r1
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d00c      	beq.n	800156e <key_filter+0x92>
 8001554:	79fa      	ldrb	r2, [r7, #7]
 8001556:	79b9      	ldrb	r1, [r7, #6]
 8001558:	4825      	ldr	r0, [pc, #148]	; (80015f0 <key_filter+0x114>)
 800155a:	4613      	mov	r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	4413      	add	r3, r2
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	4403      	add	r3, r0
 8001564:	440b      	add	r3, r1
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	3b01      	subs	r3, #1
 800156a:	b2d8      	uxtb	r0, r3
 800156c:	e000      	b.n	8001570 <key_filter+0x94>
 800156e:	2000      	movs	r0, #0
 8001570:	79fa      	ldrb	r2, [r7, #7]
 8001572:	79b9      	ldrb	r1, [r7, #6]
 8001574:	4c1e      	ldr	r4, [pc, #120]	; (80015f0 <key_filter+0x114>)
 8001576:	4613      	mov	r3, r2
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	4413      	add	r3, r2
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	4423      	add	r3, r4
 8001580:	440b      	add	r3, r1
 8001582:	4602      	mov	r2, r0
 8001584:	701a      	strb	r2, [r3, #0]
	}
	if(key_sence_count[x][y]==KEY_SENCE)key_input_filtered_mask[x][y] = 1;
 8001586:	79fa      	ldrb	r2, [r7, #7]
 8001588:	79b9      	ldrb	r1, [r7, #6]
 800158a:	4819      	ldr	r0, [pc, #100]	; (80015f0 <key_filter+0x114>)
 800158c:	4613      	mov	r3, r2
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	4413      	add	r3, r2
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	4403      	add	r3, r0
 8001596:	440b      	add	r3, r1
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b05      	cmp	r3, #5
 800159c:	d10a      	bne.n	80015b4 <key_filter+0xd8>
 800159e:	79fa      	ldrb	r2, [r7, #7]
 80015a0:	79b9      	ldrb	r1, [r7, #6]
 80015a2:	4814      	ldr	r0, [pc, #80]	; (80015f4 <key_filter+0x118>)
 80015a4:	4613      	mov	r3, r2
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	4413      	add	r3, r2
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	4403      	add	r3, r0
 80015ae:	440b      	add	r3, r1
 80015b0:	2201      	movs	r2, #1
 80015b2:	701a      	strb	r2, [r3, #0]
	if(key_sence_count[x][y]==0)key_input_filtered_mask[x][y] = 0;
 80015b4:	79fa      	ldrb	r2, [r7, #7]
 80015b6:	79b9      	ldrb	r1, [r7, #6]
 80015b8:	480d      	ldr	r0, [pc, #52]	; (80015f0 <key_filter+0x114>)
 80015ba:	4613      	mov	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4413      	add	r3, r2
 80015c0:	005b      	lsls	r3, r3, #1
 80015c2:	4403      	add	r3, r0
 80015c4:	440b      	add	r3, r1
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d10a      	bne.n	80015e2 <key_filter+0x106>
 80015cc:	79fa      	ldrb	r2, [r7, #7]
 80015ce:	79b9      	ldrb	r1, [r7, #6]
 80015d0:	4808      	ldr	r0, [pc, #32]	; (80015f4 <key_filter+0x118>)
 80015d2:	4613      	mov	r3, r2
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	4413      	add	r3, r2
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	4403      	add	r3, r0
 80015dc:	440b      	add	r3, r1
 80015de:	2200      	movs	r2, #0
 80015e0:	701a      	strb	r2, [r3, #0]
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc90      	pop	{r4, r7}
 80015ea:	4770      	bx	lr
 80015ec:	200003e4 	.word	0x200003e4
 80015f0:	20000450 	.word	0x20000450
 80015f4:	20000408 	.word	0x20000408

080015f8 <GetPositiveFront>:

static void GetPositiveFront()
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
	for (int col = 0; col < COLUMNS_COUNT; ++col) {
 80015fe:	2300      	movs	r3, #0
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	e047      	b.n	8001694 <GetPositiveFront+0x9c>
		for (int row = 0; row < ROWS_COUNT; ++row) {
 8001604:	2300      	movs	r3, #0
 8001606:	603b      	str	r3, [r7, #0]
 8001608:	e03e      	b.n	8001688 <GetPositiveFront+0x90>
			positive_fronts[col][row] = key_input_filtered_mask[col][row]==1 && key_input_old_mask[col][row]==0 ? 1:0;
 800160a:	4927      	ldr	r1, [pc, #156]	; (80016a8 <GetPositiveFront+0xb0>)
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	4613      	mov	r3, r2
 8001610:	005b      	lsls	r3, r3, #1
 8001612:	4413      	add	r3, r2
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	18ca      	adds	r2, r1, r3
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	4413      	add	r3, r2
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d10d      	bne.n	800163e <GetPositiveFront+0x46>
 8001622:	4922      	ldr	r1, [pc, #136]	; (80016ac <GetPositiveFront+0xb4>)
 8001624:	687a      	ldr	r2, [r7, #4]
 8001626:	4613      	mov	r3, r2
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	4413      	add	r3, r2
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	18ca      	adds	r2, r1, r3
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	4413      	add	r3, r2
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <GetPositiveFront+0x46>
 800163a:	2301      	movs	r3, #1
 800163c:	e000      	b.n	8001640 <GetPositiveFront+0x48>
 800163e:	2300      	movs	r3, #0
 8001640:	b2d8      	uxtb	r0, r3
 8001642:	491b      	ldr	r1, [pc, #108]	; (80016b0 <GetPositiveFront+0xb8>)
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	4613      	mov	r3, r2
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	4413      	add	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	18ca      	adds	r2, r1, r3
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	4413      	add	r3, r2
 8001654:	4602      	mov	r2, r0
 8001656:	701a      	strb	r2, [r3, #0]
			key_input_old_mask[col][row] = key_input_filtered_mask[col][row];
 8001658:	4913      	ldr	r1, [pc, #76]	; (80016a8 <GetPositiveFront+0xb0>)
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	4613      	mov	r3, r2
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	4413      	add	r3, r2
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	18ca      	adds	r2, r1, r3
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	4413      	add	r3, r2
 800166a:	7818      	ldrb	r0, [r3, #0]
 800166c:	490f      	ldr	r1, [pc, #60]	; (80016ac <GetPositiveFront+0xb4>)
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	4413      	add	r3, r2
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	18ca      	adds	r2, r1, r3
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	4413      	add	r3, r2
 800167e:	4602      	mov	r2, r0
 8001680:	701a      	strb	r2, [r3, #0]
		for (int row = 0; row < ROWS_COUNT; ++row) {
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	3301      	adds	r3, #1
 8001686:	603b      	str	r3, [r7, #0]
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	2b05      	cmp	r3, #5
 800168c:	ddbd      	ble.n	800160a <GetPositiveFront+0x12>
	for (int col = 0; col < COLUMNS_COUNT; ++col) {
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3301      	adds	r3, #1
 8001692:	607b      	str	r3, [r7, #4]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b05      	cmp	r3, #5
 8001698:	ddb4      	ble.n	8001604 <GetPositiveFront+0xc>
		}
	}
}
 800169a:	bf00      	nop
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	20000408 	.word	0x20000408
 80016ac:	2000042c 	.word	0x2000042c
 80016b0:	20000474 	.word	0x20000474

080016b4 <PrintSymbol>:

static void PrintSymbol(const char *str)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	counter++;
 80016bc:	4b1b      	ldr	r3, [pc, #108]	; (800172c <PrintSymbol+0x78>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	3301      	adds	r3, #1
 80016c2:	4a1a      	ldr	r2, [pc, #104]	; (800172c <PrintSymbol+0x78>)
 80016c4:	6013      	str	r3, [r2, #0]
	sprintf(lcd[row_pointer], "%s  %d",str,counter);
 80016c6:	4b1a      	ldr	r3, [pc, #104]	; (8001730 <PrintSymbol+0x7c>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	461a      	mov	r2, r3
 80016cc:	4613      	mov	r3, r2
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	4413      	add	r3, r2
 80016d2:	011b      	lsls	r3, r3, #4
 80016d4:	4a17      	ldr	r2, [pc, #92]	; (8001734 <PrintSymbol+0x80>)
 80016d6:	1898      	adds	r0, r3, r2
 80016d8:	4b14      	ldr	r3, [pc, #80]	; (800172c <PrintSymbol+0x78>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	4916      	ldr	r1, [pc, #88]	; (8001738 <PrintSymbol+0x84>)
 80016e0:	f019 f8c4 	bl	801a86c <siprintf>
	row_pointer = row_pointer>=3 ? 0 : row_pointer+1;
 80016e4:	4b12      	ldr	r3, [pc, #72]	; (8001730 <PrintSymbol+0x7c>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d804      	bhi.n	80016f6 <PrintSymbol+0x42>
 80016ec:	4b10      	ldr	r3, [pc, #64]	; (8001730 <PrintSymbol+0x7c>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	3301      	adds	r3, #1
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	e000      	b.n	80016f8 <PrintSymbol+0x44>
 80016f6:	2300      	movs	r3, #0
 80016f8:	4a0d      	ldr	r2, [pc, #52]	; (8001730 <PrintSymbol+0x7c>)
 80016fa:	7013      	strb	r3, [r2, #0]
	sendStr(lcd[0], 0, 0);
 80016fc:	2200      	movs	r2, #0
 80016fe:	2100      	movs	r1, #0
 8001700:	480c      	ldr	r0, [pc, #48]	; (8001734 <PrintSymbol+0x80>)
 8001702:	f000 f8f5 	bl	80018f0 <sendStr>
	sendStr(lcd[1], 1, 0);
 8001706:	2200      	movs	r2, #0
 8001708:	2101      	movs	r1, #1
 800170a:	480c      	ldr	r0, [pc, #48]	; (800173c <PrintSymbol+0x88>)
 800170c:	f000 f8f0 	bl	80018f0 <sendStr>
	sendStr(lcd[2], 2, 0);
 8001710:	2200      	movs	r2, #0
 8001712:	2102      	movs	r1, #2
 8001714:	480a      	ldr	r0, [pc, #40]	; (8001740 <PrintSymbol+0x8c>)
 8001716:	f000 f8eb 	bl	80018f0 <sendStr>
	sendStr(lcd[3], 3, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2103      	movs	r1, #3
 800171e:	4809      	ldr	r0, [pc, #36]	; (8001744 <PrintSymbol+0x90>)
 8001720:	f000 f8e6 	bl	80018f0 <sendStr>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	2000049c 	.word	0x2000049c
 8001730:	20000498 	.word	0x20000498
 8001734:	20006cc0 	.word	0x20006cc0
 8001738:	0801b884 	.word	0x0801b884
 800173c:	20006d10 	.word	0x20006d10
 8001740:	20006d60 	.word	0x20006d60
 8001744:	20006db0 	.word	0x20006db0

08001748 <lcd_init>:


static void sendByte(uint8_t byte, int isData);

void lcd_init()
{
 8001748:	b580      	push	{r7, lr}
 800174a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCDLED_GPIO_Port, LCDLED_Pin, SET);// Включаем подсветку
 800174c:	2201      	movs	r2, #1
 800174e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001752:	481f      	ldr	r0, [pc, #124]	; (80017d0 <lcd_init+0x88>)
 8001754:	f004 fc34 	bl	8005fc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCDR_GPIO_Port, LCDR_Pin, RESET);
 8001758:	2200      	movs	r2, #0
 800175a:	2110      	movs	r1, #16
 800175c:	481c      	ldr	r0, [pc, #112]	; (80017d0 <lcd_init+0x88>)
 800175e:	f004 fc2f 	bl	8005fc0 <HAL_GPIO_WritePin>
	HAL_Delay(15);
 8001762:	200f      	movs	r0, #15
 8001764:	f001 ffc2 	bl	80036ec <HAL_Delay>

	sendByte(0x33, 0); // шлем в одном байте два 0011
 8001768:	2100      	movs	r1, #0
 800176a:	2033      	movs	r0, #51	; 0x33
 800176c:	f000 f832 	bl	80017d4 <sendByte>
	HAL_Delay(1);
 8001770:	2001      	movs	r0, #1
 8001772:	f001 ffbb 	bl	80036ec <HAL_Delay>

	sendByte(0x32, 0); // шлем в одном байте  00110010
 8001776:	2100      	movs	r1, #0
 8001778:	2032      	movs	r0, #50	; 0x32
 800177a:	f000 f82b 	bl	80017d4 <sendByte>
	HAL_Delay(1);
 800177e:	2001      	movs	r0, #1
 8001780:	f001 ffb4 	bl	80036ec <HAL_Delay>

	sendByte(DATA_BUS_4BIT_PAGE0, 0); // включаем режим 4 бит
 8001784:	2100      	movs	r1, #0
 8001786:	2028      	movs	r0, #40	; 0x28
 8001788:	f000 f824 	bl	80017d4 <sendByte>
	HAL_Delay(1);
 800178c:	2001      	movs	r0, #1
 800178e:	f001 ffad 	bl	80036ec <HAL_Delay>
	sendByte(DISPLAY_OFF, 0); // выключаем дисплей
 8001792:	2100      	movs	r1, #0
 8001794:	2008      	movs	r0, #8
 8001796:	f000 f81d 	bl	80017d4 <sendByte>
	HAL_Delay(1);
 800179a:	2001      	movs	r0, #1
 800179c:	f001 ffa6 	bl	80036ec <HAL_Delay>
	sendByte(CLEAR_DISPLAY, 0); // очищаем дисплей
 80017a0:	2100      	movs	r1, #0
 80017a2:	2001      	movs	r0, #1
 80017a4:	f000 f816 	bl	80017d4 <sendByte>
	HAL_Delay(2);
 80017a8:	2002      	movs	r0, #2
 80017aa:	f001 ff9f 	bl	80036ec <HAL_Delay>
	sendByte(ENTRY_MODE_SET, 0); //ставим режим смещение курсора экран не смещается
 80017ae:	2100      	movs	r1, #0
 80017b0:	2006      	movs	r0, #6
 80017b2:	f000 f80f 	bl	80017d4 <sendByte>
	HAL_Delay(1);
 80017b6:	2001      	movs	r0, #1
 80017b8:	f001 ff98 	bl	80036ec <HAL_Delay>
	sendByte(DISPLAY_ON, 0);// включаем дисплей и убираем курсор
 80017bc:	2100      	movs	r1, #0
 80017be:	200c      	movs	r0, #12
 80017c0:	f000 f808 	bl	80017d4 <sendByte>
	HAL_Delay(1);
 80017c4:	2001      	movs	r0, #1
 80017c6:	f001 ff91 	bl	80036ec <HAL_Delay>



}
 80017ca:	bf00      	nop
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40020400 	.word	0x40020400

080017d4 <sendByte>:

static void sendByte(uint8_t byte, int isData)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	4603      	mov	r3, r0
 80017dc:	6039      	str	r1, [r7, #0]
 80017de:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCD0_GPIO_Port, LCD_PIN_MASK, RESET);
 80017e0:	2200      	movs	r2, #0
 80017e2:	216f      	movs	r1, #111	; 0x6f
 80017e4:	4841      	ldr	r0, [pc, #260]	; (80018ec <sendByte+0x118>)
 80017e6:	f004 fbeb 	bl	8005fc0 <HAL_GPIO_WritePin>

	if(isData == 1) HAL_GPIO_WritePin(LCDA_GPIO_Port, LCDA_Pin, SET); // если данные ставмим A
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d105      	bne.n	80017fc <sendByte+0x28>
 80017f0:	2201      	movs	r2, #1
 80017f2:	2140      	movs	r1, #64	; 0x40
 80017f4:	483d      	ldr	r0, [pc, #244]	; (80018ec <sendByte+0x118>)
 80017f6:	f004 fbe3 	bl	8005fc0 <HAL_GPIO_WritePin>
 80017fa:	e004      	b.n	8001806 <sendByte+0x32>
	else HAL_GPIO_WritePin(LCDA_GPIO_Port, LCDA_Pin, RESET);		   // иначе скидываем A
 80017fc:	2200      	movs	r2, #0
 80017fe:	2140      	movs	r1, #64	; 0x40
 8001800:	483a      	ldr	r0, [pc, #232]	; (80018ec <sendByte+0x118>)
 8001802:	f004 fbdd 	bl	8005fc0 <HAL_GPIO_WritePin>

	// ставим старшую тетраду на порт
	if(byte & 0x80) HAL_GPIO_WritePin(LCD3_GPIO_Port, LCD3_Pin, SET);
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	2b00      	cmp	r3, #0
 800180c:	da04      	bge.n	8001818 <sendByte+0x44>
 800180e:	2201      	movs	r2, #1
 8001810:	2108      	movs	r1, #8
 8001812:	4836      	ldr	r0, [pc, #216]	; (80018ec <sendByte+0x118>)
 8001814:	f004 fbd4 	bl	8005fc0 <HAL_GPIO_WritePin>
	if(byte & 0x40) HAL_GPIO_WritePin(LCD2_GPIO_Port, LCD2_Pin, SET);
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800181e:	2b00      	cmp	r3, #0
 8001820:	d004      	beq.n	800182c <sendByte+0x58>
 8001822:	2201      	movs	r2, #1
 8001824:	2104      	movs	r1, #4
 8001826:	4831      	ldr	r0, [pc, #196]	; (80018ec <sendByte+0x118>)
 8001828:	f004 fbca 	bl	8005fc0 <HAL_GPIO_WritePin>
	if(byte & 0x20) HAL_GPIO_WritePin(LCD1_GPIO_Port, LCD1_Pin, SET);
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	f003 0320 	and.w	r3, r3, #32
 8001832:	2b00      	cmp	r3, #0
 8001834:	d004      	beq.n	8001840 <sendByte+0x6c>
 8001836:	2201      	movs	r2, #1
 8001838:	2102      	movs	r1, #2
 800183a:	482c      	ldr	r0, [pc, #176]	; (80018ec <sendByte+0x118>)
 800183c:	f004 fbc0 	bl	8005fc0 <HAL_GPIO_WritePin>
	if(byte & 0x10) HAL_GPIO_WritePin(LCD0_GPIO_Port, LCD0_Pin, SET);
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	f003 0310 	and.w	r3, r3, #16
 8001846:	2b00      	cmp	r3, #0
 8001848:	d004      	beq.n	8001854 <sendByte+0x80>
 800184a:	2201      	movs	r2, #1
 800184c:	2101      	movs	r1, #1
 800184e:	4827      	ldr	r0, [pc, #156]	; (80018ec <sendByte+0x118>)
 8001850:	f004 fbb6 	bl	8005fc0 <HAL_GPIO_WritePin>

	// поднимаем пин E
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, SET);
 8001854:	2201      	movs	r2, #1
 8001856:	2120      	movs	r1, #32
 8001858:	4824      	ldr	r0, [pc, #144]	; (80018ec <sendByte+0x118>)
 800185a:	f004 fbb1 	bl	8005fc0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800185e:	2001      	movs	r0, #1
 8001860:	f001 ff44 	bl	80036ec <HAL_Delay>
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, RESET); // сбрасываем пин Е
 8001864:	2200      	movs	r2, #0
 8001866:	2120      	movs	r1, #32
 8001868:	4820      	ldr	r0, [pc, #128]	; (80018ec <sendByte+0x118>)
 800186a:	f004 fba9 	bl	8005fc0 <HAL_GPIO_WritePin>

	//обнуляем все пины дисплея кроме RS
	HAL_GPIO_WritePin(LCD0_GPIO_Port, (LCD_PIN_MASK & ~LCDA_Pin), RESET);
 800186e:	2200      	movs	r2, #0
 8001870:	212f      	movs	r1, #47	; 0x2f
 8001872:	481e      	ldr	r0, [pc, #120]	; (80018ec <sendByte+0x118>)
 8001874:	f004 fba4 	bl	8005fc0 <HAL_GPIO_WritePin>

	// поднимаем пин E
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, SET);
 8001878:	2201      	movs	r2, #1
 800187a:	2120      	movs	r1, #32
 800187c:	481b      	ldr	r0, [pc, #108]	; (80018ec <sendByte+0x118>)
 800187e:	f004 fb9f 	bl	8005fc0 <HAL_GPIO_WritePin>
	if(byte & 0x08) HAL_GPIO_WritePin(LCD3_GPIO_Port, LCD3_Pin, SET);
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	f003 0308 	and.w	r3, r3, #8
 8001888:	2b00      	cmp	r3, #0
 800188a:	d004      	beq.n	8001896 <sendByte+0xc2>
 800188c:	2201      	movs	r2, #1
 800188e:	2108      	movs	r1, #8
 8001890:	4816      	ldr	r0, [pc, #88]	; (80018ec <sendByte+0x118>)
 8001892:	f004 fb95 	bl	8005fc0 <HAL_GPIO_WritePin>
	if(byte & 0x04) HAL_GPIO_WritePin(LCD2_GPIO_Port, LCD2_Pin, SET);
 8001896:	79fb      	ldrb	r3, [r7, #7]
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	2b00      	cmp	r3, #0
 800189e:	d004      	beq.n	80018aa <sendByte+0xd6>
 80018a0:	2201      	movs	r2, #1
 80018a2:	2104      	movs	r1, #4
 80018a4:	4811      	ldr	r0, [pc, #68]	; (80018ec <sendByte+0x118>)
 80018a6:	f004 fb8b 	bl	8005fc0 <HAL_GPIO_WritePin>
	if(byte & 0x02) HAL_GPIO_WritePin(LCD1_GPIO_Port, LCD1_Pin, SET);
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d004      	beq.n	80018be <sendByte+0xea>
 80018b4:	2201      	movs	r2, #1
 80018b6:	2102      	movs	r1, #2
 80018b8:	480c      	ldr	r0, [pc, #48]	; (80018ec <sendByte+0x118>)
 80018ba:	f004 fb81 	bl	8005fc0 <HAL_GPIO_WritePin>
	if(byte & 0x01) HAL_GPIO_WritePin(LCD0_GPIO_Port, LCD0_Pin, SET);
 80018be:	79fb      	ldrb	r3, [r7, #7]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d004      	beq.n	80018d2 <sendByte+0xfe>
 80018c8:	2201      	movs	r2, #1
 80018ca:	2101      	movs	r1, #1
 80018cc:	4807      	ldr	r0, [pc, #28]	; (80018ec <sendByte+0x118>)
 80018ce:	f004 fb77 	bl	8005fc0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCDE_GPIO_Port, LCDE_Pin, RESET); // сбрасываем пин Е
 80018d2:	2200      	movs	r2, #0
 80018d4:	2120      	movs	r1, #32
 80018d6:	4805      	ldr	r0, [pc, #20]	; (80018ec <sendByte+0x118>)
 80018d8:	f004 fb72 	bl	8005fc0 <HAL_GPIO_WritePin>

	HAL_Delay(1);
 80018dc:	2001      	movs	r0, #1
 80018de:	f001 ff05 	bl	80036ec <HAL_Delay>
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40020400 	.word	0x40020400

080018f0 <sendStr>:


void sendStr( char *str, int row , int position )
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b086      	sub	sp, #24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	2b03      	cmp	r3, #3
 8001900:	d816      	bhi.n	8001930 <sendStr+0x40>
 8001902:	a201      	add	r2, pc, #4	; (adr r2, 8001908 <sendStr+0x18>)
 8001904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001908:	08001919 	.word	0x08001919
 800190c:	0800191f 	.word	0x0800191f
 8001910:	08001925 	.word	0x08001925
 8001914:	0800192b 	.word	0x0800192b

	switch (row)
	{

		case 0:
			start_address = 0x0; // 1 строка
 8001918:	2300      	movs	r3, #0
 800191a:	75fb      	strb	r3, [r7, #23]
			break;
 800191c:	e008      	b.n	8001930 <sendStr+0x40>

		case 1:
			start_address = 0x40; // 2 строка
 800191e:	2340      	movs	r3, #64	; 0x40
 8001920:	75fb      	strb	r3, [r7, #23]
			break;
 8001922:	e005      	b.n	8001930 <sendStr+0x40>

		case 2:
			start_address = 0x14; // 3 строка
 8001924:	2314      	movs	r3, #20
 8001926:	75fb      	strb	r3, [r7, #23]
			break;
 8001928:	e002      	b.n	8001930 <sendStr+0x40>

		case 3:
			start_address = 0x54; // 4 строка
 800192a:	2354      	movs	r3, #84	; 0x54
 800192c:	75fb      	strb	r3, [r7, #23]
			break;
 800192e:	bf00      	nop

	}

	start_address += position; // к началу строки прибавляем позицию в строке
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	b2da      	uxtb	r2, r3
 8001934:	7dfb      	ldrb	r3, [r7, #23]
 8001936:	4413      	add	r3, r2
 8001938:	75fb      	strb	r3, [r7, #23]

	sendByte((start_address |= SET_DDRAM_ADDRESS), 0); // ставим курсор на начало нужной строки  в DDRAM
 800193a:	7dfb      	ldrb	r3, [r7, #23]
 800193c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001940:	75fb      	strb	r3, [r7, #23]
 8001942:	7dfb      	ldrb	r3, [r7, #23]
 8001944:	2100      	movs	r1, #0
 8001946:	4618      	mov	r0, r3
 8001948:	f7ff ff44 	bl	80017d4 <sendByte>

	HAL_Delay(4);
 800194c:	2004      	movs	r0, #4
 800194e:	f001 fecd 	bl	80036ec <HAL_Delay>
	while(*str != '\0'){
 8001952:	e008      	b.n	8001966 <sendStr+0x76>

		sendByte(*str, 1);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2101      	movs	r1, #1
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff ff3a 	bl	80017d4 <sendByte>
		str++;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	3301      	adds	r3, #1
 8001964:	60fb      	str	r3, [r7, #12]
	while(*str != '\0'){
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f2      	bne.n	8001954 <sendStr+0x64>
	}
}
 800196e:	bf00      	nop
 8001970:	bf00      	nop
 8001972:	3718      	adds	r7, #24
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}

08001978 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001978:	b5b0      	push	{r4, r5, r7, lr}
 800197a:	b08a      	sub	sp, #40	; 0x28
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	ModbusInit();
 800197e:	f000 fba3 	bl	80020c8 <ModbusInit>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001982:	f001 fe71 	bl	8003668 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001986:	f000 f83b 	bl	8001a00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800198a:	f000 fa49 	bl	8001e20 <MX_GPIO_Init>
  MX_DMA_Init();
 800198e:	f000 fa17 	bl	8001dc0 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001992:	f000 f9c1 	bl	8001d18 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8001996:	f000 f9e9 	bl	8001d6c <MX_USART6_UART_Init>
  MX_SPI3_Init();
 800199a:	f000 f939 	bl	8001c10 <MX_SPI3_Init>
  MX_ADC1_Init();
 800199e:	f000 f89f 	bl	8001ae0 <MX_ADC1_Init>
  MX_TIM3_Init();
 80019a2:	f000 f96b 	bl	8001c7c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 80019a6:	f7ff fecf 	bl	8001748 <lcd_init>
  ethernet_reset();
 80019aa:	f7ff f989 	bl	8000cc0 <ethernet_reset>
  Analog_Start();
 80019ae:	f7fe fddb 	bl	8000568 <Analog_Start>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of writeMemorySemaphore */
  osSemaphoreDef(writeMemorySemaphore);
 80019b2:	2300      	movs	r3, #0
 80019b4:	623b      	str	r3, [r7, #32]
 80019b6:	2300      	movs	r3, #0
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
  writeMemorySemaphoreHandle = osSemaphoreCreate(osSemaphore(writeMemorySemaphore), 1);
 80019ba:	f107 0320 	add.w	r3, r7, #32
 80019be:	2101      	movs	r1, #1
 80019c0:	4618      	mov	r0, r3
 80019c2:	f008 fa6b 	bl	8009e9c <osSemaphoreCreate>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <main+0x7c>)
 80019ca:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80019cc:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <main+0x80>)
 80019ce:	1d3c      	adds	r4, r7, #4
 80019d0:	461d      	mov	r5, r3
 80019d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80019d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80019da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80019de:	1d3b      	adds	r3, r7, #4
 80019e0:	2100      	movs	r1, #0
 80019e2:	4618      	mov	r0, r3
 80019e4:	f008 f95d 	bl	8009ca2 <osThreadCreate>
 80019e8:	4603      	mov	r3, r0
 80019ea:	4a04      	ldr	r2, [pc, #16]	; (80019fc <main+0x84>)
 80019ec:	6013      	str	r3, [r2, #0]

  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80019ee:	f008 f941 	bl	8009c74 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <main+0x7a>
 80019f4:	20007054 	.word	0x20007054
 80019f8:	0801b898 	.word	0x0801b898
 80019fc:	20006e04 	.word	0x20006e04

08001a00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b094      	sub	sp, #80	; 0x50
 8001a04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a06:	f107 0320 	add.w	r3, r7, #32
 8001a0a:	2230      	movs	r2, #48	; 0x30
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f018 fda8 	bl	801a564 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a14:	f107 030c 	add.w	r3, r7, #12
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a24:	2300      	movs	r3, #0
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	4b2b      	ldr	r3, [pc, #172]	; (8001ad8 <SystemClock_Config+0xd8>)
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2c:	4a2a      	ldr	r2, [pc, #168]	; (8001ad8 <SystemClock_Config+0xd8>)
 8001a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a32:	6413      	str	r3, [r2, #64]	; 0x40
 8001a34:	4b28      	ldr	r3, [pc, #160]	; (8001ad8 <SystemClock_Config+0xd8>)
 8001a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3c:	60bb      	str	r3, [r7, #8]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a40:	2300      	movs	r3, #0
 8001a42:	607b      	str	r3, [r7, #4]
 8001a44:	4b25      	ldr	r3, [pc, #148]	; (8001adc <SystemClock_Config+0xdc>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a24      	ldr	r2, [pc, #144]	; (8001adc <SystemClock_Config+0xdc>)
 8001a4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	4b22      	ldr	r3, [pc, #136]	; (8001adc <SystemClock_Config+0xdc>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a58:	607b      	str	r3, [r7, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a66:	2302      	movs	r3, #2
 8001a68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001a70:	2319      	movs	r3, #25
 8001a72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001a74:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001a78:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a7e:	2304      	movs	r3, #4
 8001a80:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a82:	f107 0320 	add.w	r3, r7, #32
 8001a86:	4618      	mov	r0, r3
 8001a88:	f004 fab4 	bl	8005ff4 <HAL_RCC_OscConfig>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d001      	beq.n	8001a96 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001a92:	f000 fb0b 	bl	80020ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a96:	230f      	movs	r3, #15
 8001a98:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001aa2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001aa6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001aae:	f107 030c 	add.w	r3, r7, #12
 8001ab2:	2105      	movs	r1, #5
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f004 fd15 	bl	80064e4 <HAL_RCC_ClockConfig>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001ac0:	f000 faf4 	bl	80020ac <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSE, RCC_MCODIV_1);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001aca:	2000      	movs	r0, #0
 8001acc:	f004 fdf0 	bl	80066b0 <HAL_RCC_MCOConfig>
}
 8001ad0:	bf00      	nop
 8001ad2:	3750      	adds	r7, #80	; 0x50
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	40007000 	.word	0x40007000

08001ae0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001ae6:	463b      	mov	r3, r7
 8001ae8:	2200      	movs	r2, #0
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	605a      	str	r2, [r3, #4]
 8001aee:	609a      	str	r2, [r3, #8]
 8001af0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001af2:	4b45      	ldr	r3, [pc, #276]	; (8001c08 <MX_ADC1_Init+0x128>)
 8001af4:	4a45      	ldr	r2, [pc, #276]	; (8001c0c <MX_ADC1_Init+0x12c>)
 8001af6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001af8:	4b43      	ldr	r3, [pc, #268]	; (8001c08 <MX_ADC1_Init+0x128>)
 8001afa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001afe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001b00:	4b41      	ldr	r3, [pc, #260]	; (8001c08 <MX_ADC1_Init+0x128>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001b06:	4b40      	ldr	r3, [pc, #256]	; (8001c08 <MX_ADC1_Init+0x128>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001b0c:	4b3e      	ldr	r3, [pc, #248]	; (8001c08 <MX_ADC1_Init+0x128>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001b12:	4b3d      	ldr	r3, [pc, #244]	; (8001c08 <MX_ADC1_Init+0x128>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001b1a:	4b3b      	ldr	r3, [pc, #236]	; (8001c08 <MX_ADC1_Init+0x128>)
 8001b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b20:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001b22:	4b39      	ldr	r3, [pc, #228]	; (8001c08 <MX_ADC1_Init+0x128>)
 8001b24:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b28:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001b2a:	4b37      	ldr	r3, [pc, #220]	; (8001c08 <MX_ADC1_Init+0x128>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 6;
 8001b30:	4b35      	ldr	r3, [pc, #212]	; (8001c08 <MX_ADC1_Init+0x128>)
 8001b32:	2206      	movs	r2, #6
 8001b34:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001b36:	4b34      	ldr	r3, [pc, #208]	; (8001c08 <MX_ADC1_Init+0x128>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001b3e:	4b32      	ldr	r3, [pc, #200]	; (8001c08 <MX_ADC1_Init+0x128>)
 8001b40:	2201      	movs	r2, #1
 8001b42:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001b44:	4830      	ldr	r0, [pc, #192]	; (8001c08 <MX_ADC1_Init+0x128>)
 8001b46:	f001 fdf5 	bl	8003734 <HAL_ADC_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001b50:	f000 faac 	bl	80020ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001b54:	230a      	movs	r3, #10
 8001b56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8001b5c:	2307      	movs	r3, #7
 8001b5e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b60:	463b      	mov	r3, r7
 8001b62:	4619      	mov	r1, r3
 8001b64:	4828      	ldr	r0, [pc, #160]	; (8001c08 <MX_ADC1_Init+0x128>)
 8001b66:	f001 ff4d 	bl	8003a04 <HAL_ADC_ConfigChannel>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001b70:	f000 fa9c 	bl	80020ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8001b74:	230c      	movs	r3, #12
 8001b76:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001b78:	2302      	movs	r3, #2
 8001b7a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b7c:	463b      	mov	r3, r7
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4821      	ldr	r0, [pc, #132]	; (8001c08 <MX_ADC1_Init+0x128>)
 8001b82:	f001 ff3f 	bl	8003a04 <HAL_ADC_ConfigChannel>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001b8c:	f000 fa8e 	bl	80020ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8001b90:	230d      	movs	r3, #13
 8001b92:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001b94:	2303      	movs	r3, #3
 8001b96:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b98:	463b      	mov	r3, r7
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	481a      	ldr	r0, [pc, #104]	; (8001c08 <MX_ADC1_Init+0x128>)
 8001b9e:	f001 ff31 	bl	8003a04 <HAL_ADC_ConfigChannel>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001ba8:	f000 fa80 	bl	80020ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001bac:	2303      	movs	r3, #3
 8001bae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001bb0:	2304      	movs	r3, #4
 8001bb2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bb4:	463b      	mov	r3, r7
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4813      	ldr	r0, [pc, #76]	; (8001c08 <MX_ADC1_Init+0x128>)
 8001bba:	f001 ff23 	bl	8003a04 <HAL_ADC_ConfigChannel>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8001bc4:	f000 fa72 	bl	80020ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001bc8:	2304      	movs	r3, #4
 8001bca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001bcc:	2305      	movs	r3, #5
 8001bce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bd0:	463b      	mov	r3, r7
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	480c      	ldr	r0, [pc, #48]	; (8001c08 <MX_ADC1_Init+0x128>)
 8001bd6:	f001 ff15 	bl	8003a04 <HAL_ADC_ConfigChannel>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8001be0:	f000 fa64 	bl	80020ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001be4:	2311      	movs	r3, #17
 8001be6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001be8:	2306      	movs	r3, #6
 8001bea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001bec:	463b      	mov	r3, r7
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4805      	ldr	r0, [pc, #20]	; (8001c08 <MX_ADC1_Init+0x128>)
 8001bf2:	f001 ff07 	bl	8003a04 <HAL_ADC_ConfigChannel>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_ADC1_Init+0x120>
  {
    Error_Handler();
 8001bfc:	f000 fa56 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001c00:	bf00      	nop
 8001c02:	3710      	adds	r7, #16
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	20006f08 	.word	0x20006f08
 8001c0c:	40012000 	.word	0x40012000

08001c10 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001c14:	4b17      	ldr	r3, [pc, #92]	; (8001c74 <MX_SPI3_Init+0x64>)
 8001c16:	4a18      	ldr	r2, [pc, #96]	; (8001c78 <MX_SPI3_Init+0x68>)
 8001c18:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001c1a:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <MX_SPI3_Init+0x64>)
 8001c1c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001c20:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001c22:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <MX_SPI3_Init+0x64>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <MX_SPI3_Init+0x64>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c2e:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <MX_SPI3_Init+0x64>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c34:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <MX_SPI3_Init+0x64>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <MX_SPI3_Init+0x64>)
 8001c3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c40:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c42:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <MX_SPI3_Init+0x64>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c48:	4b0a      	ldr	r3, [pc, #40]	; (8001c74 <MX_SPI3_Init+0x64>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <MX_SPI3_Init+0x64>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c54:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <MX_SPI3_Init+0x64>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8001c5a:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <MX_SPI3_Init+0x64>)
 8001c5c:	220a      	movs	r2, #10
 8001c5e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001c60:	4804      	ldr	r0, [pc, #16]	; (8001c74 <MX_SPI3_Init+0x64>)
 8001c62:	f004 fea9 	bl	80069b8 <HAL_SPI_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8001c6c:	f000 fa1e 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20006eb0 	.word	0x20006eb0
 8001c78:	40003c00 	.word	0x40003c00

08001c7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c82:	f107 0308 	add.w	r3, r7, #8
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
 8001c8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c90:	463b      	mov	r3, r7
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c98:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <MX_TIM3_Init+0x94>)
 8001c9a:	4a1e      	ldr	r2, [pc, #120]	; (8001d14 <MX_TIM3_Init+0x98>)
 8001c9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 41;
 8001c9e:	4b1c      	ldr	r3, [pc, #112]	; (8001d10 <MX_TIM3_Init+0x94>)
 8001ca0:	2229      	movs	r2, #41	; 0x29
 8001ca2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca4:	4b1a      	ldr	r3, [pc, #104]	; (8001d10 <MX_TIM3_Init+0x94>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001caa:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <MX_TIM3_Init+0x94>)
 8001cac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cb0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb2:	4b17      	ldr	r3, [pc, #92]	; (8001d10 <MX_TIM3_Init+0x94>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb8:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <MX_TIM3_Init+0x94>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cbe:	4814      	ldr	r0, [pc, #80]	; (8001d10 <MX_TIM3_Init+0x94>)
 8001cc0:	f005 fc22 	bl	8007508 <HAL_TIM_Base_Init>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d001      	beq.n	8001cce <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001cca:	f000 f9ef 	bl	80020ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001cd4:	f107 0308 	add.w	r3, r7, #8
 8001cd8:	4619      	mov	r1, r3
 8001cda:	480d      	ldr	r0, [pc, #52]	; (8001d10 <MX_TIM3_Init+0x94>)
 8001cdc:	f005 fe44 	bl	8007968 <HAL_TIM_ConfigClockSource>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001ce6:	f000 f9e1 	bl	80020ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001cea:	2320      	movs	r3, #32
 8001cec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cf2:	463b      	mov	r3, r7
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	4806      	ldr	r0, [pc, #24]	; (8001d10 <MX_TIM3_Init+0x94>)
 8001cf8:	f006 f860 	bl	8007dbc <HAL_TIMEx_MasterConfigSynchronization>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d001      	beq.n	8001d06 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001d02:	f000 f9d3 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d06:	bf00      	nop
 8001d08:	3718      	adds	r7, #24
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}
 8001d0e:	bf00      	nop
 8001d10:	20006e68 	.word	0x20006e68
 8001d14:	40000400 	.word	0x40000400

08001d18 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d1c:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <MX_USART1_UART_Init+0x4c>)
 8001d1e:	4a12      	ldr	r2, [pc, #72]	; (8001d68 <MX_USART1_UART_Init+0x50>)
 8001d20:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001d22:	4b10      	ldr	r3, [pc, #64]	; (8001d64 <MX_USART1_UART_Init+0x4c>)
 8001d24:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d28:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d2a:	4b0e      	ldr	r3, [pc, #56]	; (8001d64 <MX_USART1_UART_Init+0x4c>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d30:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <MX_USART1_UART_Init+0x4c>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d36:	4b0b      	ldr	r3, [pc, #44]	; (8001d64 <MX_USART1_UART_Init+0x4c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <MX_USART1_UART_Init+0x4c>)
 8001d3e:	220c      	movs	r2, #12
 8001d40:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d42:	4b08      	ldr	r3, [pc, #32]	; (8001d64 <MX_USART1_UART_Init+0x4c>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <MX_USART1_UART_Init+0x4c>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d4e:	4805      	ldr	r0, [pc, #20]	; (8001d64 <MX_USART1_UART_Init+0x4c>)
 8001d50:	f006 f8c4 	bl	8007edc <HAL_UART_Init>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d001      	beq.n	8001d5e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d5a:	f000 f9a7 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d5e:	bf00      	nop
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	bf00      	nop
 8001d64:	20006fb0 	.word	0x20006fb0
 8001d68:	40011000 	.word	0x40011000

08001d6c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001d70:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <MX_USART6_UART_Init+0x4c>)
 8001d72:	4a12      	ldr	r2, [pc, #72]	; (8001dbc <MX_USART6_UART_Init+0x50>)
 8001d74:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001d76:	4b10      	ldr	r3, [pc, #64]	; (8001db8 <MX_USART6_UART_Init+0x4c>)
 8001d78:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d7c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <MX_USART6_UART_Init+0x4c>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <MX_USART6_UART_Init+0x4c>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <MX_USART6_UART_Init+0x4c>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001d90:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <MX_USART6_UART_Init+0x4c>)
 8001d92:	220c      	movs	r2, #12
 8001d94:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d96:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <MX_USART6_UART_Init+0x4c>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <MX_USART6_UART_Init+0x4c>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001da2:	4805      	ldr	r0, [pc, #20]	; (8001db8 <MX_USART6_UART_Init+0x4c>)
 8001da4:	f006 f89a 	bl	8007edc <HAL_UART_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001dae:	f000 f97d 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20007058 	.word	0x20007058
 8001dbc:	40011400 	.word	0x40011400

08001dc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	607b      	str	r3, [r7, #4]
 8001dca:	4b14      	ldr	r3, [pc, #80]	; (8001e1c <MX_DMA_Init+0x5c>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	4a13      	ldr	r2, [pc, #76]	; (8001e1c <MX_DMA_Init+0x5c>)
 8001dd0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001dd6:	4b11      	ldr	r3, [pc, #68]	; (8001e1c <MX_DMA_Init+0x5c>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dde:	607b      	str	r3, [r7, #4]
 8001de0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001de2:	2200      	movs	r2, #0
 8001de4:	2105      	movs	r1, #5
 8001de6:	2038      	movs	r0, #56	; 0x38
 8001de8:	f002 f964 	bl	80040b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001dec:	2038      	movs	r0, #56	; 0x38
 8001dee:	f002 f97d 	bl	80040ec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001df2:	2200      	movs	r2, #0
 8001df4:	2105      	movs	r1, #5
 8001df6:	2039      	movs	r0, #57	; 0x39
 8001df8:	f002 f95c 	bl	80040b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8001dfc:	2039      	movs	r0, #57	; 0x39
 8001dfe:	f002 f975 	bl	80040ec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001e02:	2200      	movs	r2, #0
 8001e04:	2105      	movs	r1, #5
 8001e06:	203a      	movs	r0, #58	; 0x3a
 8001e08:	f002 f954 	bl	80040b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001e0c:	203a      	movs	r0, #58	; 0x3a
 8001e0e:	f002 f96d 	bl	80040ec <HAL_NVIC_EnableIRQ>

}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800

08001e20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08c      	sub	sp, #48	; 0x30
 8001e24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e26:	f107 031c 	add.w	r3, r7, #28
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	60da      	str	r2, [r3, #12]
 8001e34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	61bb      	str	r3, [r7, #24]
 8001e3a:	4b83      	ldr	r3, [pc, #524]	; (8002048 <MX_GPIO_Init+0x228>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	4a82      	ldr	r2, [pc, #520]	; (8002048 <MX_GPIO_Init+0x228>)
 8001e40:	f043 0310 	orr.w	r3, r3, #16
 8001e44:	6313      	str	r3, [r2, #48]	; 0x30
 8001e46:	4b80      	ldr	r3, [pc, #512]	; (8002048 <MX_GPIO_Init+0x228>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	61bb      	str	r3, [r7, #24]
 8001e50:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
 8001e56:	4b7c      	ldr	r3, [pc, #496]	; (8002048 <MX_GPIO_Init+0x228>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	4a7b      	ldr	r2, [pc, #492]	; (8002048 <MX_GPIO_Init+0x228>)
 8001e5c:	f043 0304 	orr.w	r3, r3, #4
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4b79      	ldr	r3, [pc, #484]	; (8002048 <MX_GPIO_Init+0x228>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	4b75      	ldr	r3, [pc, #468]	; (8002048 <MX_GPIO_Init+0x228>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	4a74      	ldr	r2, [pc, #464]	; (8002048 <MX_GPIO_Init+0x228>)
 8001e78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7e:	4b72      	ldr	r3, [pc, #456]	; (8002048 <MX_GPIO_Init+0x228>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e86:	613b      	str	r3, [r7, #16]
 8001e88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	60fb      	str	r3, [r7, #12]
 8001e8e:	4b6e      	ldr	r3, [pc, #440]	; (8002048 <MX_GPIO_Init+0x228>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e92:	4a6d      	ldr	r2, [pc, #436]	; (8002048 <MX_GPIO_Init+0x228>)
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	6313      	str	r3, [r2, #48]	; 0x30
 8001e9a:	4b6b      	ldr	r3, [pc, #428]	; (8002048 <MX_GPIO_Init+0x228>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	60fb      	str	r3, [r7, #12]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	4b67      	ldr	r3, [pc, #412]	; (8002048 <MX_GPIO_Init+0x228>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	4a66      	ldr	r2, [pc, #408]	; (8002048 <MX_GPIO_Init+0x228>)
 8001eb0:	f043 0302 	orr.w	r3, r3, #2
 8001eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb6:	4b64      	ldr	r3, [pc, #400]	; (8002048 <MX_GPIO_Init+0x228>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	60bb      	str	r3, [r7, #8]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	607b      	str	r3, [r7, #4]
 8001ec6:	4b60      	ldr	r3, [pc, #384]	; (8002048 <MX_GPIO_Init+0x228>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eca:	4a5f      	ldr	r2, [pc, #380]	; (8002048 <MX_GPIO_Init+0x228>)
 8001ecc:	f043 0308 	orr.w	r3, r3, #8
 8001ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed2:	4b5d      	ldr	r3, [pc, #372]	; (8002048 <MX_GPIO_Init+0x228>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed6:	f003 0308 	and.w	r3, r3, #8
 8001eda:	607b      	str	r3, [r7, #4]
 8001edc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ERESET_GPIO_Port, ERESET_Pin, GPIO_PIN_RESET);
 8001ede:	2200      	movs	r2, #0
 8001ee0:	2101      	movs	r1, #1
 8001ee2:	485a      	ldr	r0, [pc, #360]	; (800204c <MX_GPIO_Init+0x22c>)
 8001ee4:	f004 f86c 	bl	8005fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD0_Pin|LCD1_Pin|LCD2_Pin|DOUT_9_Pin
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f24c 417f 	movw	r1, #50303	; 0xc47f
 8001eee:	4858      	ldr	r0, [pc, #352]	; (8002050 <MX_GPIO_Init+0x230>)
 8001ef0:	f004 f866 	bl	8005fc0 <HAL_GPIO_WritePin>
                          |LED_Pin|LCDLED_Pin|LCD3_Pin|LCDR_Pin
                          |LCDE_Pin|LCDA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DOUT_0_Pin|DOUT_1_Pin|DOUT_2_Pin|DOUT_3_Pin
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f64f 7180 	movw	r1, #65408	; 0xff80
 8001efa:	4856      	ldr	r0, [pc, #344]	; (8002054 <MX_GPIO_Init+0x234>)
 8001efc:	f004 f860 	bl	8005fc0 <HAL_GPIO_WritePin>
                          |DOUT_4_Pin|DOUT_5_Pin|DOUT_6_Pin|DOUT_7_Pin
                          |DOUT_8_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, DOUT_10_Pin|DOUT_11_Pin|KEYB_C0_Pin|KEYB_C1_Pin
 8001f00:	2200      	movs	r2, #0
 8001f02:	f44f 417f 	mov.w	r1, #65280	; 0xff00
 8001f06:	4854      	ldr	r0, [pc, #336]	; (8002058 <MX_GPIO_Init+0x238>)
 8001f08:	f004 f85a 	bl	8005fc0 <HAL_GPIO_WritePin>
                          |KEYB_C2_Pin|KEYB_C3_Pin|KEYB_C4_Pin|KEYB_C5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS485_TX_GPIO_Port, RS485_TX_Pin, GPIO_PIN_RESET);
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001f12:	4852      	ldr	r0, [pc, #328]	; (800205c <MX_GPIO_Init+0x23c>)
 8001f14:	f004 f854 	bl	8005fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S3CS0_GPIO_Port, S3CS0_Pin, GPIO_PIN_SET);
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f1e:	484b      	ldr	r0, [pc, #300]	; (800204c <MX_GPIO_Init+0x22c>)
 8001f20:	f004 f84e 	bl	8005fc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DIN_4_Pin DIN_5_Pin DIN_6_Pin DIN_7_Pin
                           DIN_8_Pin DIN_2_Pin DIN_3_Pin */
  GPIO_InitStruct.Pin = DIN_4_Pin|DIN_5_Pin|DIN_6_Pin|DIN_7_Pin
 8001f24:	237f      	movs	r3, #127	; 0x7f
 8001f26:	61fb      	str	r3, [r7, #28]
                          |DIN_8_Pin|DIN_2_Pin|DIN_3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f30:	f107 031c 	add.w	r3, r7, #28
 8001f34:	4619      	mov	r1, r3
 8001f36:	4847      	ldr	r0, [pc, #284]	; (8002054 <MX_GPIO_Init+0x234>)
 8001f38:	f003 fe8e 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIN_9_Pin DIN_10_Pin DIN_11_Pin */
  GPIO_InitStruct.Pin = DIN_9_Pin|DIN_10_Pin|DIN_11_Pin;
 8001f3c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001f40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f42:	2300      	movs	r3, #0
 8001f44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f46:	2301      	movs	r3, #1
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f4a:	f107 031c 	add.w	r3, r7, #28
 8001f4e:	4619      	mov	r1, r3
 8001f50:	4842      	ldr	r0, [pc, #264]	; (800205c <MX_GPIO_Init+0x23c>)
 8001f52:	f003 fe81 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : ERESET_Pin S3CS0_Pin */
  GPIO_InitStruct.Pin = ERESET_Pin|S3CS0_Pin;
 8001f56:	f248 0301 	movw	r3, #32769	; 0x8001
 8001f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f64:	2300      	movs	r3, #0
 8001f66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f68:	f107 031c 	add.w	r3, r7, #28
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	4837      	ldr	r0, [pc, #220]	; (800204c <MX_GPIO_Init+0x22c>)
 8001f70:	f003 fe72 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD0_Pin LCD1_Pin LCD2_Pin DOUT_9_Pin
                           LED_Pin LCDLED_Pin LCD3_Pin LCDR_Pin
                           LCDE_Pin LCDA_Pin */
  GPIO_InitStruct.Pin = LCD0_Pin|LCD1_Pin|LCD2_Pin|DOUT_9_Pin
 8001f74:	f24c 437f 	movw	r3, #50303	; 0xc47f
 8001f78:	61fb      	str	r3, [r7, #28]
                          |LED_Pin|LCDLED_Pin|LCD3_Pin|LCDR_Pin
                          |LCDE_Pin|LCDA_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f82:	2300      	movs	r3, #0
 8001f84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f86:	f107 031c 	add.w	r3, r7, #28
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4830      	ldr	r0, [pc, #192]	; (8002050 <MX_GPIO_Init+0x230>)
 8001f8e:	f003 fe63 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : DOUT_0_Pin DOUT_1_Pin DOUT_2_Pin DOUT_3_Pin
                           DOUT_4_Pin DOUT_5_Pin DOUT_6_Pin DOUT_7_Pin
                           DOUT_8_Pin */
  GPIO_InitStruct.Pin = DOUT_0_Pin|DOUT_1_Pin|DOUT_2_Pin|DOUT_3_Pin
 8001f92:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001f96:	61fb      	str	r3, [r7, #28]
                          |DOUT_4_Pin|DOUT_5_Pin|DOUT_6_Pin|DOUT_7_Pin
                          |DOUT_8_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001fa4:	f107 031c 	add.w	r3, r7, #28
 8001fa8:	4619      	mov	r1, r3
 8001faa:	482a      	ldr	r0, [pc, #168]	; (8002054 <MX_GPIO_Init+0x234>)
 8001fac:	f003 fe54 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : DOUT_10_Pin DOUT_11_Pin KEYB_C0_Pin KEYB_C1_Pin
                           KEYB_C2_Pin KEYB_C3_Pin KEYB_C4_Pin KEYB_C5_Pin */
  GPIO_InitStruct.Pin = DOUT_10_Pin|DOUT_11_Pin|KEYB_C0_Pin|KEYB_C1_Pin
 8001fb0:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8001fb4:	61fb      	str	r3, [r7, #28]
                          |KEYB_C2_Pin|KEYB_C3_Pin|KEYB_C4_Pin|KEYB_C5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fc2:	f107 031c 	add.w	r3, r7, #28
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	4823      	ldr	r0, [pc, #140]	; (8002058 <MX_GPIO_Init+0x238>)
 8001fca:	f003 fe45 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : RS485_TX_Pin */
  GPIO_InitStruct.Pin = RS485_TX_Pin;
 8001fce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(RS485_TX_GPIO_Port, &GPIO_InitStruct);
 8001fe0:	f107 031c 	add.w	r3, r7, #28
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	481d      	ldr	r0, [pc, #116]	; (800205c <MX_GPIO_Init+0x23c>)
 8001fe8:	f003 fe36 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001fec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ff0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001ffe:	2300      	movs	r3, #0
 8002000:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002002:	f107 031c 	add.w	r3, r7, #28
 8002006:	4619      	mov	r1, r3
 8002008:	4810      	ldr	r0, [pc, #64]	; (800204c <MX_GPIO_Init+0x22c>)
 800200a:	f003 fe25 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : KEYB_R0_Pin KEYB_R1_Pin KEYB_R2_Pin KEYB_R3_Pin
                           KEYB_R4_Pin KEYB_R5_Pin */
  GPIO_InitStruct.Pin = KEYB_R0_Pin|KEYB_R1_Pin|KEYB_R2_Pin|KEYB_R3_Pin
 800200e:	233f      	movs	r3, #63	; 0x3f
 8002010:	61fb      	str	r3, [r7, #28]
                          |KEYB_R4_Pin|KEYB_R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002012:	2300      	movs	r3, #0
 8002014:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002016:	2302      	movs	r3, #2
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800201a:	f107 031c 	add.w	r3, r7, #28
 800201e:	4619      	mov	r1, r3
 8002020:	480d      	ldr	r0, [pc, #52]	; (8002058 <MX_GPIO_Init+0x238>)
 8002022:	f003 fe19 	bl	8005c58 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIN_0_Pin DIN_1_Pin */
  GPIO_InitStruct.Pin = DIN_0_Pin|DIN_1_Pin;
 8002026:	f44f 7340 	mov.w	r3, #768	; 0x300
 800202a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800202c:	2300      	movs	r3, #0
 800202e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002030:	2301      	movs	r3, #1
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002034:	f107 031c 	add.w	r3, r7, #28
 8002038:	4619      	mov	r1, r3
 800203a:	4805      	ldr	r0, [pc, #20]	; (8002050 <MX_GPIO_Init+0x230>)
 800203c:	f003 fe0c 	bl	8005c58 <HAL_GPIO_Init>

}
 8002040:	bf00      	nop
 8002042:	3730      	adds	r7, #48	; 0x30
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	40023800 	.word	0x40023800
 800204c:	40020000 	.word	0x40020000
 8002050:	40020400 	.word	0x40020400
 8002054:	40021000 	.word	0x40021000
 8002058:	40020c00 	.word	0x40020c00
 800205c:	40020800 	.word	0x40020800

08002060 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8002068:	f007 f8bc 	bl	80091e4 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  int result = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	60fb      	str	r3, [r7, #12]
  task_init();
 8002070:	f7fe ffe8 	bl	8001044 <task_init>
  result = settingsLoadFRAM();
 8002074:	f000 fc60 	bl	8002938 <settingsLoadFRAM>
 8002078:	60f8      	str	r0, [r7, #12]

  /* Infinite loop */
  for(;;)
  {
	main_process();
 800207a:	f000 f81c 	bl	80020b6 <main_process>
    osDelay(1);
 800207e:	2001      	movs	r0, #1
 8002080:	f007 fe5b 	bl	8009d3a <osDelay>
	main_process();
 8002084:	e7f9      	b.n	800207a <StartDefaultTask+0x1a>
	...

08002088 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a04      	ldr	r2, [pc, #16]	; (80020a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d101      	bne.n	800209e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800209a:	f001 fb07 	bl	80036ac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800209e:	bf00      	nop
 80020a0:	3708      	adds	r7, #8
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	40010000 	.word	0x40010000

080020ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020b0:	b672      	cpsid	i
}
 80020b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020b4:	e7fe      	b.n	80020b4 <Error_Handler+0x8>

080020b6 <main_process>:
 */
#include <string.h>
#include <dio.h>

void main_process()
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	af00      	add	r7, sp, #0
	Read_Inputs();
 80020ba:	f7fe fb3f 	bl	800073c <Read_Inputs>
	Write_Outputs();
 80020be:	f7fe fc89 	bl	80009d4 <Write_Outputs>
}
 80020c2:	bf00      	nop
 80020c4:	bd80      	pop	{r7, pc}
	...

080020c8 <ModbusInit>:
static int WriteSingleRegister(uint8_t* request, uint8_t* answer, ModbusSource source);
static int WrieMultiplyRegisters(uint8_t* request, uint8_t* answer,ModbusSource source);
static int WriteToHoldings(uint8_t* request, uint8_t* answer,ModbusSource source, int (*write)(uint8_t*,uint8_t*,ModbusSource));

void ModbusInit()
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
	holding_pointer = (uint16_t*)&settings;
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <ModbusInit+0x34>)
 80020ce:	4a0c      	ldr	r2, [pc, #48]	; (8002100 <ModbusInit+0x38>)
 80020d0:	601a      	str	r2, [r3, #0]
	reading_pointer = (uint16_t*)&meas_data;
 80020d2:	4b0c      	ldr	r3, [pc, #48]	; (8002104 <ModbusInit+0x3c>)
 80020d4:	4a0c      	ldr	r2, [pc, #48]	; (8002108 <ModbusInit+0x40>)
 80020d6:	601a      	str	r2, [r3, #0]
	holding_size = sizeof(settings)/2;
 80020d8:	4b0c      	ldr	r3, [pc, #48]	; (800210c <ModbusInit+0x44>)
 80020da:	2237      	movs	r2, #55	; 0x37
 80020dc:	801a      	strh	r2, [r3, #0]
	reading_size = sizeof(meas_data)/2;
 80020de:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <ModbusInit+0x48>)
 80020e0:	222c      	movs	r2, #44	; 0x2c
 80020e2:	801a      	strh	r2, [r3, #0]
	if(settings.retain.mb_addr==0)settings.retain.mb_addr = 1;
 80020e4:	4b06      	ldr	r3, [pc, #24]	; (8002100 <ModbusInit+0x38>)
 80020e6:	891b      	ldrh	r3, [r3, #8]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d102      	bne.n	80020f2 <ModbusInit+0x2a>
 80020ec:	4b04      	ldr	r3, [pc, #16]	; (8002100 <ModbusInit+0x38>)
 80020ee:	2201      	movs	r2, #1
 80020f0:	811a      	strh	r2, [r3, #8]
}
 80020f2:	bf00      	nop
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	200004a0 	.word	0x200004a0
 8002100:	2000709c 	.word	0x2000709c
 8002104:	200004a4 	.word	0x200004a4
 8002108:	2000710c 	.word	0x2000710c
 800210c:	200004a8 	.word	0x200004a8
 8002110:	200004aa 	.word	0x200004aa

08002114 <ModbusParse>:


//Ф-я парсинга входящего буфера, если это Modbus, то возвращает кол-во байт
int ModbusParse(uint8_t *request, uint16_t req_length, uint8_t *answer, ModbusSource source)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	60f8      	str	r0, [r7, #12]
 800211c:	607a      	str	r2, [r7, #4]
 800211e:	461a      	mov	r2, r3
 8002120:	460b      	mov	r3, r1
 8002122:	817b      	strh	r3, [r7, #10]
 8002124:	4613      	mov	r3, r2
 8002126:	727b      	strb	r3, [r7, #9]
	settings.non_retain.data[37]++;
 8002128:	4b26      	ldr	r3, [pc, #152]	; (80021c4 <ModbusParse+0xb0>)
 800212a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800212e:	3301      	adds	r3, #1
 8002130:	b29a      	uxth	r2, r3
 8002132:	4b24      	ldr	r3, [pc, #144]	; (80021c4 <ModbusParse+0xb0>)
 8002134:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	if(answer==NULL)return 0; // Проверка, выделилась ли память под ответ
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d101      	bne.n	8002142 <ModbusParse+0x2e>
 800213e:	2300      	movs	r3, #0
 8002140:	e03c      	b.n	80021bc <ModbusParse+0xa8>
	if(!CheckRequestLength(request,req_length,source))return 0; // Проверка корректности длины пакета
 8002142:	897b      	ldrh	r3, [r7, #10]
 8002144:	7a7a      	ldrb	r2, [r7, #9]
 8002146:	4619      	mov	r1, r3
 8002148:	68f8      	ldr	r0, [r7, #12]
 800214a:	f000 f83d 	bl	80021c8 <CheckRequestLength>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <ModbusParse+0x44>
 8002154:	2300      	movs	r3, #0
 8002156:	e031      	b.n	80021bc <ModbusParse+0xa8>
	if(!CheckMbAddr(request, source))return 0; // Проверка корректности адреса
 8002158:	7a7b      	ldrb	r3, [r7, #9]
 800215a:	4619      	mov	r1, r3
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 f857 	bl	8002210 <CheckMbAddr>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d101      	bne.n	800216c <ModbusParse+0x58>
 8002168:	2300      	movs	r3, #0
 800216a:	e027      	b.n	80021bc <ModbusParse+0xa8>
	if(!IsCorrectMbCommand(request, source))// Проверка корректности функционального кода
 800216c:	7a7b      	ldrb	r3, [r7, #9]
 800216e:	4619      	mov	r1, r3
 8002170:	68f8      	ldr	r0, [r7, #12]
 8002172:	f000 f873 	bl	800225c <IsCorrectMbCommand>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d107      	bne.n	800218c <ModbusParse+0x78>
	{
		return SetInvalidCommand(request, answer, 1, source);
 800217c:	7a7b      	ldrb	r3, [r7, #9]
 800217e:	2201      	movs	r2, #1
 8002180:	6879      	ldr	r1, [r7, #4]
 8002182:	68f8      	ldr	r0, [r7, #12]
 8002184:	f000 f89e 	bl	80022c4 <SetInvalidCommand>
 8002188:	4603      	mov	r3, r0
 800218a:	e017      	b.n	80021bc <ModbusParse+0xa8>
	}
	if(!CheckCrc(request, req_length, source))
 800218c:	897b      	ldrh	r3, [r7, #10]
 800218e:	7a7a      	ldrb	r2, [r7, #9]
 8002190:	4619      	mov	r1, r3
 8002192:	68f8      	ldr	r0, [r7, #12]
 8002194:	f000 f93f 	bl	8002416 <CheckCrc>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d107      	bne.n	80021ae <ModbusParse+0x9a>
	{
		return SetInvalidCommand(request, answer, 3, source);
 800219e:	7a7b      	ldrb	r3, [r7, #9]
 80021a0:	2203      	movs	r2, #3
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 f88d 	bl	80022c4 <SetInvalidCommand>
 80021aa:	4603      	mov	r3, r0
 80021ac:	e006      	b.n	80021bc <ModbusParse+0xa8>
	}
	return GetModbusAnswer(request, answer, source);
 80021ae:	7a7b      	ldrb	r3, [r7, #9]
 80021b0:	461a      	mov	r2, r3
 80021b2:	6879      	ldr	r1, [r7, #4]
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f000 f963 	bl	8002480 <GetModbusAnswer>
 80021ba:	4603      	mov	r3, r0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3710      	adds	r7, #16
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	2000709c 	.word	0x2000709c

080021c8 <CheckRequestLength>:

//Проверка соответствия длины данных, передаваемых в буфере
static uint8_t CheckRequestLength(uint8_t* request_pointer,int request_length, ModbusSource source)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b087      	sub	sp, #28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	60b9      	str	r1, [r7, #8]
 80021d2:	4613      	mov	r3, r2
 80021d4:	71fb      	strb	r3, [r7, #7]
	if(source==RS485)return 1;
 80021d6:	79fb      	ldrb	r3, [r7, #7]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <CheckRequestLength+0x18>
 80021dc:	2301      	movs	r3, #1
 80021de:	e010      	b.n	8002202 <CheckRequestLength+0x3a>
    int len_from_packet = (*(request_pointer+4))*256 + *(request_pointer+5);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	3304      	adds	r3, #4
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	021b      	lsls	r3, r3, #8
 80021e8:	68fa      	ldr	r2, [r7, #12]
 80021ea:	3205      	adds	r2, #5
 80021ec:	7812      	ldrb	r2, [r2, #0]
 80021ee:	4413      	add	r3, r2
 80021f0:	617b      	str	r3, [r7, #20]
    return len_from_packet+6 == request_length;
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	3306      	adds	r3, #6
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	bf0c      	ite	eq
 80021fc:	2301      	moveq	r3, #1
 80021fe:	2300      	movne	r3, #0
 8002200:	b2db      	uxtb	r3, r3
}
 8002202:	4618      	mov	r0, r3
 8002204:	371c      	adds	r7, #28
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
	...

08002210 <CheckMbAddr>:

//Проверка соответсия адреса в сети Modbus сервера
static uint8_t CheckMbAddr(uint8_t *request,ModbusSource source)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	460b      	mov	r3, r1
 800221a:	70fb      	strb	r3, [r7, #3]
	uint8_t addr = 0;
 800221c:	2300      	movs	r3, #0
 800221e:	73fb      	strb	r3, [r7, #15]
	if(source==ETHERNET)
 8002220:	78fb      	ldrb	r3, [r7, #3]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d103      	bne.n	800222e <CheckMbAddr+0x1e>
	{
		addr =  *(request+6);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	799b      	ldrb	r3, [r3, #6]
 800222a:	73fb      	strb	r3, [r7, #15]
 800222c:	e005      	b.n	800223a <CheckMbAddr+0x2a>
	}
	else if(source==RS485)
 800222e:	78fb      	ldrb	r3, [r7, #3]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d102      	bne.n	800223a <CheckMbAddr+0x2a>
	{
		addr =  *(request);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	73fb      	strb	r3, [r7, #15]
	}
	return addr == settings.retain.mb_addr;
 800223a:	7bfb      	ldrb	r3, [r7, #15]
 800223c:	b29a      	uxth	r2, r3
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <CheckMbAddr+0x48>)
 8002240:	891b      	ldrh	r3, [r3, #8]
 8002242:	429a      	cmp	r2, r3
 8002244:	bf0c      	ite	eq
 8002246:	2301      	moveq	r3, #1
 8002248:	2300      	movne	r3, #0
 800224a:	b2db      	uxtb	r3, r3
}
 800224c:	4618      	mov	r0, r3
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	2000709c 	.word	0x2000709c

0800225c <IsCorrectMbCommand>:

//Проверка корректности функционального кода
static uint8_t IsCorrectMbCommand(uint8_t *request,ModbusSource source)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	460b      	mov	r3, r1
 8002266:	70fb      	strb	r3, [r7, #3]
	uint8_t cmd = 0;
 8002268:	2300      	movs	r3, #0
 800226a:	73fb      	strb	r3, [r7, #15]
	if(source==ETHERNET)
 800226c:	78fb      	ldrb	r3, [r7, #3]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d103      	bne.n	800227a <IsCorrectMbCommand+0x1e>
	{
		cmd = *(request+7);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	79db      	ldrb	r3, [r3, #7]
 8002276:	73fb      	strb	r3, [r7, #15]
 8002278:	e005      	b.n	8002286 <IsCorrectMbCommand+0x2a>
	}
	else if(source==RS485)
 800227a:	78fb      	ldrb	r3, [r7, #3]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d102      	bne.n	8002286 <IsCorrectMbCommand+0x2a>
	{
		cmd = *(request+1);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	785b      	ldrb	r3, [r3, #1]
 8002284:	73fb      	strb	r3, [r7, #15]
	}
	/*
	 * Функция возвращает 1, если номер команды корректен, 0 - если некорректен
	 * cmd - номер команды
	 * */
	switch (cmd) {
 8002286:	7bfb      	ldrb	r3, [r7, #15]
 8002288:	2b10      	cmp	r3, #16
 800228a:	bf8c      	ite	hi
 800228c:	2201      	movhi	r2, #1
 800228e:	2200      	movls	r2, #0
 8002290:	b2d2      	uxtb	r2, r2
 8002292:	2a00      	cmp	r2, #0
 8002294:	d10c      	bne.n	80022b0 <IsCorrectMbCommand+0x54>
 8002296:	2201      	movs	r2, #1
 8002298:	409a      	lsls	r2, r3
 800229a:	4b09      	ldr	r3, [pc, #36]	; (80022c0 <IsCorrectMbCommand+0x64>)
 800229c:	4013      	ands	r3, r2
 800229e:	2b00      	cmp	r3, #0
 80022a0:	bf14      	ite	ne
 80022a2:	2301      	movne	r3, #1
 80022a4:	2300      	moveq	r3, #0
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d001      	beq.n	80022b0 <IsCorrectMbCommand+0x54>
		case 3:
		case 4:
		case 6:
		//case 5:
        case 16:
            return 1;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e000      	b.n	80022b2 <IsCorrectMbCommand+0x56>
		default:
			return 0;
 80022b0:	2300      	movs	r3, #0
	}
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3714      	adds	r7, #20
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr
 80022be:	bf00      	nop
 80022c0:	00010058 	.word	0x00010058

080022c4 <SetInvalidCommand>:

//Формирует телеграмму ошиобного запроса
static int SetInvalidCommand(uint8_t *request, uint8_t *answer, uint8_t code, ModbusSource source)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	4611      	mov	r1, r2
 80022d0:	461a      	mov	r2, r3
 80022d2:	460b      	mov	r3, r1
 80022d4:	71fb      	strb	r3, [r7, #7]
 80022d6:	4613      	mov	r3, r2
 80022d8:	71bb      	strb	r3, [r7, #6]
	uint8_t func_code = source ? *(request+1) : *(request+1);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	785b      	ldrb	r3, [r3, #1]
 80022de:	75fb      	strb	r3, [r7, #23]
	func_code = set_bit(func_code, 7);
 80022e0:	7dfb      	ldrb	r3, [r7, #23]
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	2107      	movs	r1, #7
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe fa10 	bl	800070c <set_bit>
 80022ec:	4603      	mov	r3, r0
 80022ee:	75fb      	strb	r3, [r7, #23]
	if(source==RS485)
 80022f0:	79bb      	ldrb	r3, [r7, #6]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d11d      	bne.n	8002332 <SetInvalidCommand+0x6e>
	{
		uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 80022f6:	2300      	movs	r3, #0
 80022f8:	82bb      	strh	r3, [r7, #20]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	781a      	ldrb	r2, [r3, #0]
		memcpy(answer,request,1);
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	701a      	strb	r2, [r3, #0]
		*(answer+1) = func_code;//Функциональный код с измененным битом
 8002302:	68bb      	ldr	r3, [r7, #8]
 8002304:	3301      	adds	r3, #1
 8002306:	7dfa      	ldrb	r2, [r7, #23]
 8002308:	701a      	strb	r2, [r3, #0]
		*(answer+2) = code;//Функциональный код с измененным битом
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	3302      	adds	r3, #2
 800230e:	79fa      	ldrb	r2, [r7, #7]
 8002310:	701a      	strb	r2, [r3, #0]
		CRC16_CALC(answer,check_sum,3);
 8002312:	f107 0314 	add.w	r3, r7, #20
 8002316:	2203      	movs	r2, #3
 8002318:	4619      	mov	r1, r3
 800231a:	68b8      	ldr	r0, [r7, #8]
 800231c:	f000 f832 	bl	8002384 <CRC16_CALC>
		*(answer+3) = check_sum[0];
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	3303      	adds	r3, #3
 8002324:	7d3a      	ldrb	r2, [r7, #20]
 8002326:	701a      	strb	r2, [r3, #0]
		*(answer+4) = check_sum[1];
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	3304      	adds	r3, #4
 800232c:	7d7a      	ldrb	r2, [r7, #21]
 800232e:	701a      	strb	r2, [r3, #0]
 8002330:	e01c      	b.n	800236c <SetInvalidCommand+0xa8>
	}
	else if(source==ETHERNET)
 8002332:	79bb      	ldrb	r3, [r7, #6]
 8002334:	2b01      	cmp	r3, #1
 8002336:	d119      	bne.n	800236c <SetInvalidCommand+0xa8>
	{
		memcpy(answer,request,8);
 8002338:	2208      	movs	r2, #8
 800233a:	68f9      	ldr	r1, [r7, #12]
 800233c:	68b8      	ldr	r0, [r7, #8]
 800233e:	f018 f8e9 	bl	801a514 <memcpy>
		*(answer+4) = 0;
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	3304      	adds	r3, #4
 8002346:	2200      	movs	r2, #0
 8002348:	701a      	strb	r2, [r3, #0]
		*(answer+5) = 3;
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	3305      	adds	r3, #5
 800234e:	2203      	movs	r2, #3
 8002350:	701a      	strb	r2, [r3, #0]
		*(answer+7) |= 128;
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	3307      	adds	r3, #7
 8002356:	781a      	ldrb	r2, [r3, #0]
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	3307      	adds	r3, #7
 800235c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8002360:	b2d2      	uxtb	r2, r2
 8002362:	701a      	strb	r2, [r3, #0]
		*(answer+8) = code;
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	3308      	adds	r3, #8
 8002368:	79fa      	ldrb	r2, [r7, #7]
 800236a:	701a      	strb	r2, [r3, #0]
	}

	uint8_t len = source==RS485 ? 5 : 9;
 800236c:	79bb      	ldrb	r3, [r7, #6]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <SetInvalidCommand+0xb2>
 8002372:	2305      	movs	r3, #5
 8002374:	e000      	b.n	8002378 <SetInvalidCommand+0xb4>
 8002376:	2309      	movs	r3, #9
 8002378:	75bb      	strb	r3, [r7, #22]
	return len;
 800237a:	7dbb      	ldrb	r3, [r7, #22]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <CRC16_CALC>:

static void CRC16_CALC(uint8_t* arr, uint8_t* checkSum, uint8_t messageLength)
{
 8002384:	b480      	push	{r7}
 8002386:	b089      	sub	sp, #36	; 0x24
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	4613      	mov	r3, r2
 8002390:	71fb      	strb	r3, [r7, #7]
	/*Функция расчета контрольной суммы
		 * arr - указатель на массив байт, по которым нужно посчитать CRC
		 * checkSum - указатель на массив из 2 байт, куда нужно положить CRC
		 * messageLength - ко-во байт, по которым нужно считать CRC	 *
		 * */
		uint16_t reg = 0xFFFF;
 8002392:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002396:	83fb      	strh	r3, [r7, #30]
		uint16_t polinom = 0xA001;
 8002398:	f24a 0301 	movw	r3, #40961	; 0xa001
 800239c:	827b      	strh	r3, [r7, #18]
		for(int i=0;i < messageLength;i++)
 800239e:	2300      	movs	r3, #0
 80023a0:	61bb      	str	r3, [r7, #24]
 80023a2:	e023      	b.n	80023ec <CRC16_CALC+0x68>
		{
			reg^=*(arr+i);
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	68fa      	ldr	r2, [r7, #12]
 80023a8:	4413      	add	r3, r2
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	b29a      	uxth	r2, r3
 80023ae:	8bfb      	ldrh	r3, [r7, #30]
 80023b0:	4053      	eors	r3, r2
 80023b2:	83fb      	strh	r3, [r7, #30]
			for (int j = 0; j < 8; j++)
 80023b4:	2300      	movs	r3, #0
 80023b6:	617b      	str	r3, [r7, #20]
 80023b8:	e012      	b.n	80023e0 <CRC16_CALC+0x5c>
			{
				if ((reg&1)==1) {
 80023ba:	8bfb      	ldrh	r3, [r7, #30]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d007      	beq.n	80023d4 <CRC16_CALC+0x50>
					reg>>=1;
 80023c4:	8bfb      	ldrh	r3, [r7, #30]
 80023c6:	085b      	lsrs	r3, r3, #1
 80023c8:	83fb      	strh	r3, [r7, #30]
					reg^=polinom;
 80023ca:	8bfa      	ldrh	r2, [r7, #30]
 80023cc:	8a7b      	ldrh	r3, [r7, #18]
 80023ce:	4053      	eors	r3, r2
 80023d0:	83fb      	strh	r3, [r7, #30]
 80023d2:	e002      	b.n	80023da <CRC16_CALC+0x56>
				}
				else reg>>=1;
 80023d4:	8bfb      	ldrh	r3, [r7, #30]
 80023d6:	085b      	lsrs	r3, r3, #1
 80023d8:	83fb      	strh	r3, [r7, #30]
			for (int j = 0; j < 8; j++)
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	3301      	adds	r3, #1
 80023de:	617b      	str	r3, [r7, #20]
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	2b07      	cmp	r3, #7
 80023e4:	dde9      	ble.n	80023ba <CRC16_CALC+0x36>
		for(int i=0;i < messageLength;i++)
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	3301      	adds	r3, #1
 80023ea:	61bb      	str	r3, [r7, #24]
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	dbd7      	blt.n	80023a4 <CRC16_CALC+0x20>
			}
		}
		*(checkSum+1)=(uint8_t)(reg>>8);
 80023f4:	8bfb      	ldrh	r3, [r7, #30]
 80023f6:	0a1b      	lsrs	r3, r3, #8
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	3301      	adds	r3, #1
 80023fe:	b2d2      	uxtb	r2, r2
 8002400:	701a      	strb	r2, [r3, #0]
		*checkSum = (uint8_t)(reg & 0x00FF);
 8002402:	8bfb      	ldrh	r3, [r7, #30]
 8002404:	b2da      	uxtb	r2, r3
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	701a      	strb	r2, [r3, #0]
}
 800240a:	bf00      	nop
 800240c:	3724      	adds	r7, #36	; 0x24
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr

08002416 <CheckCrc>:

//Проверка контрольной суммы запроса
static uint8_t CheckCrc(uint8_t* request_pointer,int request_length, ModbusSource source)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b086      	sub	sp, #24
 800241a:	af00      	add	r7, sp, #0
 800241c:	60f8      	str	r0, [r7, #12]
 800241e:	60b9      	str	r1, [r7, #8]
 8002420:	4613      	mov	r3, r2
 8002422:	71fb      	strb	r3, [r7, #7]
	if(source==ETHERNET)return 1;
 8002424:	79fb      	ldrb	r3, [r7, #7]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d101      	bne.n	800242e <CheckCrc+0x18>
 800242a:	2301      	movs	r3, #1
 800242c:	e024      	b.n	8002478 <CheckCrc+0x62>
	uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 800242e:	2300      	movs	r3, #0
 8002430:	82bb      	strh	r3, [r7, #20]
	if(request_length<4)return 0;
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2b03      	cmp	r3, #3
 8002436:	dc01      	bgt.n	800243c <CheckCrc+0x26>
 8002438:	2300      	movs	r3, #0
 800243a:	e01d      	b.n	8002478 <CheckCrc+0x62>
	CRC16_CALC(request_pointer, check_sum, request_length-2);
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	b2db      	uxtb	r3, r3
 8002440:	3b02      	subs	r3, #2
 8002442:	b2da      	uxtb	r2, r3
 8002444:	f107 0314 	add.w	r3, r7, #20
 8002448:	4619      	mov	r1, r3
 800244a:	68f8      	ldr	r0, [r7, #12]
 800244c:	f7ff ff9a 	bl	8002384 <CRC16_CALC>
	return request_pointer[request_length-2]==check_sum[0] && request_pointer[request_length-1]==check_sum[1];
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	3b02      	subs	r3, #2
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	4413      	add	r3, r2
 8002458:	781a      	ldrb	r2, [r3, #0]
 800245a:	7d3b      	ldrb	r3, [r7, #20]
 800245c:	429a      	cmp	r2, r3
 800245e:	d109      	bne.n	8002474 <CheckCrc+0x5e>
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	3b01      	subs	r3, #1
 8002464:	68fa      	ldr	r2, [r7, #12]
 8002466:	4413      	add	r3, r2
 8002468:	781a      	ldrb	r2, [r3, #0]
 800246a:	7d7b      	ldrb	r3, [r7, #21]
 800246c:	429a      	cmp	r2, r3
 800246e:	d101      	bne.n	8002474 <CheckCrc+0x5e>
 8002470:	2301      	movs	r3, #1
 8002472:	e000      	b.n	8002476 <CheckCrc+0x60>
 8002474:	2300      	movs	r3, #0
 8002476:	b2db      	uxtb	r3, r3
}
 8002478:	4618      	mov	r0, r3
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <GetModbusAnswer>:

//Возвращает кол-во байт, котрые нужно передать обратно
static int GetModbusAnswer(uint8_t* request, uint8_t* answer, ModbusSource source)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af02      	add	r7, sp, #8
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	4613      	mov	r3, r2
 800248c:	71fb      	strb	r3, [r7, #7]
	uint8_t func_code = source==RS485 ? *(request+1) : *(request+7);
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d102      	bne.n	800249a <GetModbusAnswer+0x1a>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	785b      	ldrb	r3, [r3, #1]
 8002498:	e001      	b.n	800249e <GetModbusAnswer+0x1e>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	79db      	ldrb	r3, [r3, #7]
 800249e:	75fb      	strb	r3, [r7, #23]

	switch (func_code) {
 80024a0:	7dfb      	ldrb	r3, [r7, #23]
 80024a2:	3b03      	subs	r3, #3
 80024a4:	2b0d      	cmp	r3, #13
 80024a6:	d849      	bhi.n	800253c <GetModbusAnswer+0xbc>
 80024a8:	a201      	add	r2, pc, #4	; (adr r2, 80024b0 <GetModbusAnswer+0x30>)
 80024aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ae:	bf00      	nop
 80024b0:	080024e9 	.word	0x080024e9
 80024b4:	08002503 	.word	0x08002503
 80024b8:	0800253d 	.word	0x0800253d
 80024bc:	0800251d 	.word	0x0800251d
 80024c0:	0800253d 	.word	0x0800253d
 80024c4:	0800253d 	.word	0x0800253d
 80024c8:	0800253d 	.word	0x0800253d
 80024cc:	0800253d 	.word	0x0800253d
 80024d0:	0800253d 	.word	0x0800253d
 80024d4:	0800253d 	.word	0x0800253d
 80024d8:	0800253d 	.word	0x0800253d
 80024dc:	0800253d 	.word	0x0800253d
 80024e0:	0800253d 	.word	0x0800253d
 80024e4:	0800252d 	.word	0x0800252d
		case READ_HOLDING_REGS:
			return ReadRegisters(request, answer, holding_pointer, holding_size, source);
 80024e8:	4b17      	ldr	r3, [pc, #92]	; (8002548 <GetModbusAnswer+0xc8>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	4b17      	ldr	r3, [pc, #92]	; (800254c <GetModbusAnswer+0xcc>)
 80024ee:	8819      	ldrh	r1, [r3, #0]
 80024f0:	79fb      	ldrb	r3, [r7, #7]
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	460b      	mov	r3, r1
 80024f6:	68b9      	ldr	r1, [r7, #8]
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 f831 	bl	8002560 <ReadRegisters>
 80024fe:	4603      	mov	r3, r0
 8002500:	e01e      	b.n	8002540 <GetModbusAnswer+0xc0>
		case READ_INPUT_REGS:
			return ReadRegisters(request, answer, reading_pointer, reading_size, source);
 8002502:	4b13      	ldr	r3, [pc, #76]	; (8002550 <GetModbusAnswer+0xd0>)
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	4b13      	ldr	r3, [pc, #76]	; (8002554 <GetModbusAnswer+0xd4>)
 8002508:	8819      	ldrh	r1, [r3, #0]
 800250a:	79fb      	ldrb	r3, [r7, #7]
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	460b      	mov	r3, r1
 8002510:	68b9      	ldr	r1, [r7, #8]
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f000 f824 	bl	8002560 <ReadRegisters>
 8002518:	4603      	mov	r3, r0
 800251a:	e011      	b.n	8002540 <GetModbusAnswer+0xc0>
		case WRITE_SINGLE_REG:
			return WriteToHoldings(request, answer, source, &WriteSingleRegister);
 800251c:	79fa      	ldrb	r2, [r7, #7]
 800251e:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <GetModbusAnswer+0xd8>)
 8002520:	68b9      	ldr	r1, [r7, #8]
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f000 f9dc 	bl	80028e0 <WriteToHoldings>
 8002528:	4603      	mov	r3, r0
 800252a:	e009      	b.n	8002540 <GetModbusAnswer+0xc0>
		case WRITE_MULTIPLY_REGS:
			return WriteToHoldings(request, answer, source, &WrieMultiplyRegisters);
 800252c:	79fa      	ldrb	r2, [r7, #7]
 800252e:	4b0b      	ldr	r3, [pc, #44]	; (800255c <GetModbusAnswer+0xdc>)
 8002530:	68b9      	ldr	r1, [r7, #8]
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f000 f9d4 	bl	80028e0 <WriteToHoldings>
 8002538:	4603      	mov	r3, r0
 800253a:	e001      	b.n	8002540 <GetModbusAnswer+0xc0>
		default:
			break;
 800253c:	bf00      	nop
	}
	return 0;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	200004a0 	.word	0x200004a0
 800254c:	200004a8 	.word	0x200004a8
 8002550:	200004a4 	.word	0x200004a4
 8002554:	200004aa 	.word	0x200004aa
 8002558:	08002741 	.word	0x08002741
 800255c:	080027e5 	.word	0x080027e5

08002560 <ReadRegisters>:

//Ф-я чтения регистров из памяти memory_pointer размером memory_size
static int ReadRegisters(uint8_t *request, uint8_t *answer, uint16_t *memory_pointer, uint16_t memory_size, ModbusSource source)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b088      	sub	sp, #32
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
 800256c:	807b      	strh	r3, [r7, #2]
	uint16_t  maxAddr = memory_size-1;
 800256e:	887b      	ldrh	r3, [r7, #2]
 8002570:	3b01      	subs	r3, #1
 8002572:	83fb      	strh	r3, [r7, #30]
	uint16_t start_reg = GetWordFromBytes(request,source==RS485?2:8);
 8002574:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002578:	2b00      	cmp	r3, #0
 800257a:	d101      	bne.n	8002580 <ReadRegisters+0x20>
 800257c:	2302      	movs	r3, #2
 800257e:	e000      	b.n	8002582 <ReadRegisters+0x22>
 8002580:	2308      	movs	r3, #8
 8002582:	4619      	mov	r1, r3
 8002584:	68f8      	ldr	r0, [r7, #12]
 8002586:	f000 f882 	bl	800268e <GetWordFromBytes>
 800258a:	4603      	mov	r3, r0
 800258c:	83bb      	strh	r3, [r7, #28]
	uint16_t reg_count = GetWordFromBytes(request,source==RS485?4:10);
 800258e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <ReadRegisters+0x3a>
 8002596:	2304      	movs	r3, #4
 8002598:	e000      	b.n	800259c <ReadRegisters+0x3c>
 800259a:	230a      	movs	r3, #10
 800259c:	4619      	mov	r1, r3
 800259e:	68f8      	ldr	r0, [r7, #12]
 80025a0:	f000 f875 	bl	800268e <GetWordFromBytes>
 80025a4:	4603      	mov	r3, r0
 80025a6:	837b      	strh	r3, [r7, #26]
	if((start_reg+reg_count-1)>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 80025a8:	8bba      	ldrh	r2, [r7, #28]
 80025aa:	8b7b      	ldrh	r3, [r7, #26]
 80025ac:	4413      	add	r3, r2
 80025ae:	1e5a      	subs	r2, r3, #1
 80025b0:	8bfb      	ldrh	r3, [r7, #30]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	dd08      	ble.n	80025c8 <ReadRegisters+0x68>
 80025b6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80025ba:	2202      	movs	r2, #2
 80025bc:	68b9      	ldr	r1, [r7, #8]
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f7ff fe80 	bl	80022c4 <SetInvalidCommand>
 80025c4:	4603      	mov	r3, r0
 80025c6:	e05e      	b.n	8002686 <ReadRegisters+0x126>
	if(source==ETHERNET)
 80025c8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d124      	bne.n	800261a <ReadRegisters+0xba>
	{
		memcpy(answer,request,8);
 80025d0:	2208      	movs	r2, #8
 80025d2:	68f9      	ldr	r1, [r7, #12]
 80025d4:	68b8      	ldr	r0, [r7, #8]
 80025d6:	f017 ff9d 	bl	801a514 <memcpy>
		InsertWordToMemory(reg_count*2+3, answer+4);//Длина сообщения
 80025da:	8b7b      	ldrh	r3, [r7, #26]
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	b29b      	uxth	r3, r3
 80025e0:	3303      	adds	r3, #3
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	3304      	adds	r3, #4
 80025e8:	4619      	mov	r1, r3
 80025ea:	4610      	mov	r0, r2
 80025ec:	f000 f86a 	bl	80026c4 <InsertWordToMemory>
		*(answer+8) = reg_count*2;//количесво байт далее
 80025f0:	8b7b      	ldrh	r3, [r7, #26]
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	3308      	adds	r3, #8
 80025f8:	0052      	lsls	r2, r2, #1
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	701a      	strb	r2, [r3, #0]
		InsertWordsToMemory(memory_pointer+start_reg,answer+9,reg_count);
 80025fe:	8bbb      	ldrh	r3, [r7, #28]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	18d0      	adds	r0, r2, r3
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	3309      	adds	r3, #9
 800260a:	8b7a      	ldrh	r2, [r7, #26]
 800260c:	4619      	mov	r1, r3
 800260e:	f000 f869 	bl	80026e4 <InsertWordsToMemory>
		return 9+reg_count*2;
 8002612:	8b7b      	ldrh	r3, [r7, #26]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	3309      	adds	r3, #9
 8002618:	e035      	b.n	8002686 <ReadRegisters+0x126>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	881b      	ldrh	r3, [r3, #0]
 800261e:	b29a      	uxth	r2, r3
	}
	else
	{
		memcpy(answer,request,2);
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	801a      	strh	r2, [r3, #0]
		*(answer+2) = reg_count*2;//количесво байт далее
 8002624:	8b7b      	ldrh	r3, [r7, #26]
 8002626:	b2da      	uxtb	r2, r3
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	3302      	adds	r3, #2
 800262c:	0052      	lsls	r2, r2, #1
 800262e:	b2d2      	uxtb	r2, r2
 8002630:	701a      	strb	r2, [r3, #0]
		InsertWordsToMemory(memory_pointer+start_reg,answer+3,reg_count);//Данные
 8002632:	8bbb      	ldrh	r3, [r7, #28]
 8002634:	005b      	lsls	r3, r3, #1
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	18d0      	adds	r0, r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	3303      	adds	r3, #3
 800263e:	8b7a      	ldrh	r2, [r7, #26]
 8002640:	4619      	mov	r1, r3
 8002642:	f000 f84f 	bl	80026e4 <InsertWordsToMemory>
		uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 8002646:	2300      	movs	r3, #0
 8002648:	823b      	strh	r3, [r7, #16]
		CRC16_CALC(answer,check_sum,3+reg_count*2);
 800264a:	8b7b      	ldrh	r3, [r7, #26]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	b2db      	uxtb	r3, r3
 8002652:	3303      	adds	r3, #3
 8002654:	b2da      	uxtb	r2, r3
 8002656:	f107 0310 	add.w	r3, r7, #16
 800265a:	4619      	mov	r1, r3
 800265c:	68b8      	ldr	r0, [r7, #8]
 800265e:	f7ff fe91 	bl	8002384 <CRC16_CALC>
		int offset = 3+reg_count*2;
 8002662:	8b7b      	ldrh	r3, [r7, #26]
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	3303      	adds	r3, #3
 8002668:	617b      	str	r3, [r7, #20]
		*(answer+offset)=check_sum[0];
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	68ba      	ldr	r2, [r7, #8]
 800266e:	4413      	add	r3, r2
 8002670:	7c3a      	ldrb	r2, [r7, #16]
 8002672:	701a      	strb	r2, [r3, #0]
		*(answer+offset+1)=check_sum[1];
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	3301      	adds	r3, #1
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	4413      	add	r3, r2
 800267c:	7c7a      	ldrb	r2, [r7, #17]
 800267e:	701a      	strb	r2, [r3, #0]
		return 5+reg_count*2;
 8002680:	8b7b      	ldrh	r3, [r7, #26]
 8002682:	005b      	lsls	r3, r3, #1
 8002684:	3305      	adds	r3, #5

	}
	return 0;
}
 8002686:	4618      	mov	r0, r3
 8002688:	3720      	adds	r7, #32
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <GetWordFromBytes>:

static uint16_t GetWordFromBytes(uint8_t *arr, uint8_t pos)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	460b      	mov	r3, r1
 8002698:	70fb      	strb	r3, [r7, #3]
	/*Получает 16 битное число из 2x байт, и возвращает его
	 * arr -  указатель на массив байт, из которого нужно получить word
	 * pos - индекс первого байта в массиве
	 *
	 * */
	return (((uint16_t)(*(arr+pos)))<<8) + (uint16_t)(*(arr + pos+1));
 800269a:	78fb      	ldrb	r3, [r7, #3]
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	4413      	add	r3, r2
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	b29b      	uxth	r3, r3
 80026a4:	021b      	lsls	r3, r3, #8
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	78fb      	ldrb	r3, [r7, #3]
 80026aa:	3301      	adds	r3, #1
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	440b      	add	r3, r1
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	4413      	add	r3, r2
 80026b6:	b29b      	uxth	r3, r3
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <InsertWordToMemory>:

static void InsertWordToMemory(uint16_t value, uint8_t* memory)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4603      	mov	r3, r0
 80026cc:	6039      	str	r1, [r7, #0]
 80026ce:	80fb      	strh	r3, [r7, #6]
    InsertWordsToMemory(&value,memory,1);
 80026d0:	1dbb      	adds	r3, r7, #6
 80026d2:	2201      	movs	r2, #1
 80026d4:	6839      	ldr	r1, [r7, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 f804 	bl	80026e4 <InsertWordsToMemory>
}
 80026dc:	bf00      	nop
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}

080026e4 <InsertWordsToMemory>:

static void InsertWordsToMemory(uint16_t *source, uint8_t * destination, uint16_t count)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b087      	sub	sp, #28
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	60f8      	str	r0, [r7, #12]
 80026ec:	60b9      	str	r1, [r7, #8]
 80026ee:	4613      	mov	r3, r2
 80026f0:	80fb      	strh	r3, [r7, #6]
    int i = 0;
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]
    for(i=0;i<count*2;i+=2)
 80026f6:	2300      	movs	r3, #0
 80026f8:	617b      	str	r3, [r7, #20]
 80026fa:	e014      	b.n	8002726 <InsertWordsToMemory+0x42>
    {
        *(destination+i+1)=*((uint8_t*)source+i);
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	441a      	add	r2, r3
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	3301      	adds	r3, #1
 8002706:	68b9      	ldr	r1, [r7, #8]
 8002708:	440b      	add	r3, r1
 800270a:	7812      	ldrb	r2, [r2, #0]
 800270c:	701a      	strb	r2, [r3, #0]
        *(destination+i)=*((uint8_t*)source+i+1);
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	3301      	adds	r3, #1
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	441a      	add	r2, r3
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	68b9      	ldr	r1, [r7, #8]
 800271a:	440b      	add	r3, r1
 800271c:	7812      	ldrb	r2, [r2, #0]
 800271e:	701a      	strb	r2, [r3, #0]
    for(i=0;i<count*2;i+=2)
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	3302      	adds	r3, #2
 8002724:	617b      	str	r3, [r7, #20]
 8002726:	88fb      	ldrh	r3, [r7, #6]
 8002728:	005b      	lsls	r3, r3, #1
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	429a      	cmp	r2, r3
 800272e:	dbe5      	blt.n	80026fc <InsertWordsToMemory+0x18>
    }
}
 8002730:	bf00      	nop
 8002732:	bf00      	nop
 8002734:	371c      	adds	r7, #28
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
	...

08002740 <WriteSingleRegister>:


static int WriteSingleRegister(uint8_t* request, uint8_t* answer, ModbusSource source)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b086      	sub	sp, #24
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	4613      	mov	r3, r2
 800274c:	71fb      	strb	r3, [r7, #7]
    uint16_t  maxAddr = holding_size-1;
 800274e:	4b23      	ldr	r3, [pc, #140]	; (80027dc <WriteSingleRegister+0x9c>)
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	3b01      	subs	r3, #1
 8002754:	82fb      	strh	r3, [r7, #22]
    uint16_t addr = GetWordFromBytes(request,source==RS485?2:8);
 8002756:	79fb      	ldrb	r3, [r7, #7]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <WriteSingleRegister+0x20>
 800275c:	2302      	movs	r3, #2
 800275e:	e000      	b.n	8002762 <WriteSingleRegister+0x22>
 8002760:	2308      	movs	r3, #8
 8002762:	4619      	mov	r1, r3
 8002764:	68f8      	ldr	r0, [r7, #12]
 8002766:	f7ff ff92 	bl	800268e <GetWordFromBytes>
 800276a:	4603      	mov	r3, r0
 800276c:	82bb      	strh	r3, [r7, #20]
    if(addr>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 800276e:	8aba      	ldrh	r2, [r7, #20]
 8002770:	8afb      	ldrh	r3, [r7, #22]
 8002772:	429a      	cmp	r2, r3
 8002774:	d907      	bls.n	8002786 <WriteSingleRegister+0x46>
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	2202      	movs	r2, #2
 800277a:	68b9      	ldr	r1, [r7, #8]
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f7ff fda1 	bl	80022c4 <SetInvalidCommand>
 8002782:	4603      	mov	r3, r0
 8002784:	e026      	b.n	80027d4 <WriteSingleRegister+0x94>
    //если все нормально, то вставляем в пакет запрашиваемые данные
    if(source==ETHERNET)
 8002786:	79fb      	ldrb	r3, [r7, #7]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d112      	bne.n	80027b2 <WriteSingleRegister+0x72>
    {
    	InsertWordsToMemory((uint16_t*)(request+10), ((uint8_t*)holding_pointer)+addr*2,1);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f103 000a 	add.w	r0, r3, #10
 8002792:	4b13      	ldr	r3, [pc, #76]	; (80027e0 <WriteSingleRegister+0xa0>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	8aba      	ldrh	r2, [r7, #20]
 8002798:	0052      	lsls	r2, r2, #1
 800279a:	4413      	add	r3, r2
 800279c:	2201      	movs	r2, #1
 800279e:	4619      	mov	r1, r3
 80027a0:	f7ff ffa0 	bl	80026e4 <InsertWordsToMemory>
    	memcpy(answer, request,12);
 80027a4:	220c      	movs	r2, #12
 80027a6:	68f9      	ldr	r1, [r7, #12]
 80027a8:	68b8      	ldr	r0, [r7, #8]
 80027aa:	f017 feb3 	bl	801a514 <memcpy>
    	return 12;
 80027ae:	230c      	movs	r3, #12
 80027b0:	e010      	b.n	80027d4 <WriteSingleRegister+0x94>
    }
    else
    {
    	InsertWordsToMemory((uint16_t*)(request+4), ((uint8_t*)holding_pointer)+addr*2,1);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	1d18      	adds	r0, r3, #4
 80027b6:	4b0a      	ldr	r3, [pc, #40]	; (80027e0 <WriteSingleRegister+0xa0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	8aba      	ldrh	r2, [r7, #20]
 80027bc:	0052      	lsls	r2, r2, #1
 80027be:	4413      	add	r3, r2
 80027c0:	2201      	movs	r2, #1
 80027c2:	4619      	mov	r1, r3
 80027c4:	f7ff ff8e 	bl	80026e4 <InsertWordsToMemory>
    	memcpy(answer, request,8);
 80027c8:	2208      	movs	r2, #8
 80027ca:	68f9      	ldr	r1, [r7, #12]
 80027cc:	68b8      	ldr	r0, [r7, #8]
 80027ce:	f017 fea1 	bl	801a514 <memcpy>
    	return 8;
 80027d2:	2308      	movs	r3, #8
    }
    settingsSaveFRAM();
    return 0;
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	200004a8 	.word	0x200004a8
 80027e0:	200004a0 	.word	0x200004a0

080027e4 <WrieMultiplyRegisters>:

static int WrieMultiplyRegisters(uint8_t* request, uint8_t* answer,ModbusSource source)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	60f8      	str	r0, [r7, #12]
 80027ec:	60b9      	str	r1, [r7, #8]
 80027ee:	4613      	mov	r3, r2
 80027f0:	71fb      	strb	r3, [r7, #7]
	uint16_t  maxAddr = holding_size-1;
 80027f2:	4b39      	ldr	r3, [pc, #228]	; (80028d8 <WrieMultiplyRegisters+0xf4>)
 80027f4:	881b      	ldrh	r3, [r3, #0]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	82fb      	strh	r3, [r7, #22]
	uint16_t start_reg = GetWordFromBytes(request,source==RS485?2:8);
 80027fa:	79fb      	ldrb	r3, [r7, #7]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d101      	bne.n	8002804 <WrieMultiplyRegisters+0x20>
 8002800:	2302      	movs	r3, #2
 8002802:	e000      	b.n	8002806 <WrieMultiplyRegisters+0x22>
 8002804:	2308      	movs	r3, #8
 8002806:	4619      	mov	r1, r3
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f7ff ff40 	bl	800268e <GetWordFromBytes>
 800280e:	4603      	mov	r3, r0
 8002810:	82bb      	strh	r3, [r7, #20]
	uint16_t reg_count = GetWordFromBytes(request,source==RS485?4:10);
 8002812:	79fb      	ldrb	r3, [r7, #7]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d101      	bne.n	800281c <WrieMultiplyRegisters+0x38>
 8002818:	2304      	movs	r3, #4
 800281a:	e000      	b.n	800281e <WrieMultiplyRegisters+0x3a>
 800281c:	230a      	movs	r3, #10
 800281e:	4619      	mov	r1, r3
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f7ff ff34 	bl	800268e <GetWordFromBytes>
 8002826:	4603      	mov	r3, r0
 8002828:	827b      	strh	r3, [r7, #18]
    if((start_reg+reg_count-1)>maxAddr)return SetInvalidCommand(request, answer, 2, source); //проверка правильности адресации
 800282a:	8aba      	ldrh	r2, [r7, #20]
 800282c:	8a7b      	ldrh	r3, [r7, #18]
 800282e:	4413      	add	r3, r2
 8002830:	1e5a      	subs	r2, r3, #1
 8002832:	8afb      	ldrh	r3, [r7, #22]
 8002834:	429a      	cmp	r2, r3
 8002836:	dd07      	ble.n	8002848 <WrieMultiplyRegisters+0x64>
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	2202      	movs	r2, #2
 800283c:	68b9      	ldr	r1, [r7, #8]
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f7ff fd40 	bl	80022c4 <SetInvalidCommand>
 8002844:	4603      	mov	r3, r0
 8002846:	e042      	b.n	80028ce <WrieMultiplyRegisters+0xea>
    //если все нормально, то вставляем в пакет запрашиваемые данные
    if(source==ETHERNET)
 8002848:	79fb      	ldrb	r3, [r7, #7]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d11d      	bne.n	800288a <WrieMultiplyRegisters+0xa6>
    {
    	memcpy(answer, request,12);//сначала повторяющиеся с запросом данные
 800284e:	220c      	movs	r2, #12
 8002850:	68f9      	ldr	r1, [r7, #12]
 8002852:	68b8      	ldr	r0, [r7, #8]
 8002854:	f017 fe5e 	bl	801a514 <memcpy>
    	InsertWordToMemory(reg_count*2+4, answer+4);//Длина сообщения
 8002858:	8a7b      	ldrh	r3, [r7, #18]
 800285a:	3302      	adds	r3, #2
 800285c:	b29b      	uxth	r3, r3
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	b29a      	uxth	r2, r3
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	3304      	adds	r3, #4
 8002866:	4619      	mov	r1, r3
 8002868:	4610      	mov	r0, r2
 800286a:	f7ff ff2b 	bl	80026c4 <InsertWordToMemory>
    	InsertWordsToMemory((uint16_t*)(request+13), ((uint8_t*)holding_pointer)+start_reg*2,reg_count);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f103 000d 	add.w	r0, r3, #13
 8002874:	4b19      	ldr	r3, [pc, #100]	; (80028dc <WrieMultiplyRegisters+0xf8>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	8aba      	ldrh	r2, [r7, #20]
 800287a:	0052      	lsls	r2, r2, #1
 800287c:	4413      	add	r3, r2
 800287e:	8a7a      	ldrh	r2, [r7, #18]
 8002880:	4619      	mov	r1, r3
 8002882:	f7ff ff2f 	bl	80026e4 <InsertWordsToMemory>
        return 12;
 8002886:	230c      	movs	r3, #12
 8002888:	e021      	b.n	80028ce <WrieMultiplyRegisters+0xea>
    }
    else
    {
    	memcpy(answer, request,6);//сначала повторяющиеся с запросом данные
 800288a:	2206      	movs	r2, #6
 800288c:	68f9      	ldr	r1, [r7, #12]
 800288e:	68b8      	ldr	r0, [r7, #8]
 8002890:	f017 fe40 	bl	801a514 <memcpy>
    	uint8_t check_sum[2]={0};// временный массив для контрольной суммы
 8002894:	2300      	movs	r3, #0
 8002896:	823b      	strh	r3, [r7, #16]
    	CRC16_CALC(answer,check_sum,6);
 8002898:	f107 0310 	add.w	r3, r7, #16
 800289c:	2206      	movs	r2, #6
 800289e:	4619      	mov	r1, r3
 80028a0:	68b8      	ldr	r0, [r7, #8]
 80028a2:	f7ff fd6f 	bl	8002384 <CRC16_CALC>
		*(answer+6)=check_sum[0];
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	3306      	adds	r3, #6
 80028aa:	7c3a      	ldrb	r2, [r7, #16]
 80028ac:	701a      	strb	r2, [r3, #0]
		*(answer+7)=check_sum[1];
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	3307      	adds	r3, #7
 80028b2:	7c7a      	ldrb	r2, [r7, #17]
 80028b4:	701a      	strb	r2, [r3, #0]
		InsertWordsToMemory((uint16_t*)(request+7), ((uint8_t*)holding_pointer)+start_reg*2,reg_count);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	1dd8      	adds	r0, r3, #7
 80028ba:	4b08      	ldr	r3, [pc, #32]	; (80028dc <WrieMultiplyRegisters+0xf8>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	8aba      	ldrh	r2, [r7, #20]
 80028c0:	0052      	lsls	r2, r2, #1
 80028c2:	4413      	add	r3, r2
 80028c4:	8a7a      	ldrh	r2, [r7, #18]
 80028c6:	4619      	mov	r1, r3
 80028c8:	f7ff ff0c 	bl	80026e4 <InsertWordsToMemory>
		return 8;
 80028cc:	2308      	movs	r3, #8
    }

    return 0;
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	3718      	adds	r7, #24
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	200004a8 	.word	0x200004a8
 80028dc:	200004a0 	.word	0x200004a0

080028e0 <WriteToHoldings>:

static int WriteToHoldings(uint8_t* request, uint8_t* answer,ModbusSource source, int (*write)(uint8_t*,uint8_t*,ModbusSource))
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	603b      	str	r3, [r7, #0]
 80028ec:	4613      	mov	r3, r2
 80028ee:	71fb      	strb	r3, [r7, #7]
	int result = 0;
 80028f0:	2300      	movs	r3, #0
 80028f2:	617b      	str	r3, [r7, #20]
	if(writeMemorySemaphoreHandle!=NULL)
 80028f4:	4b0f      	ldr	r3, [pc, #60]	; (8002934 <WriteToHoldings+0x54>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d016      	beq.n	800292a <WriteToHoldings+0x4a>
	{
		if(osSemaphoreWait(writeMemorySemaphoreHandle, 1000)==osOK)
 80028fc:	4b0d      	ldr	r3, [pc, #52]	; (8002934 <WriteToHoldings+0x54>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002904:	4618      	mov	r0, r3
 8002906:	f007 fafb 	bl	8009f00 <osSemaphoreWait>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10c      	bne.n	800292a <WriteToHoldings+0x4a>
		{
			result =  (*write)(request,answer,source);
 8002910:	79fa      	ldrb	r2, [r7, #7]
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	68b9      	ldr	r1, [r7, #8]
 8002916:	68f8      	ldr	r0, [r7, #12]
 8002918:	4798      	blx	r3
 800291a:	6178      	str	r0, [r7, #20]
			settingsSaveFRAM();
 800291c:	f000 f854 	bl	80029c8 <settingsSaveFRAM>
			osSemaphoreRelease(writeMemorySemaphoreHandle);
 8002920:	4b04      	ldr	r3, [pc, #16]	; (8002934 <WriteToHoldings+0x54>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f007 fb39 	bl	8009f9c <osSemaphoreRelease>
		}
	}
	return result;
 800292a:	697b      	ldr	r3, [r7, #20]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3718      	adds	r7, #24
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	20007054 	.word	0x20007054

08002938 <settingsLoadFRAM>:
Meas_Data meas_data;

static uint8_t checksumCalc (uint8_t * data, uint16_t size);

int settingsLoadFRAM (void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
	int result = 0;
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
	uint16_t header;

	result = framDataRead(FRAM_SETTINGS_ADDR, (uint8_t *) &header, sizeof(header));
 8002942:	f107 0308 	add.w	r3, r7, #8
 8002946:	2202      	movs	r2, #2
 8002948:	4619      	mov	r1, r3
 800294a:	2000      	movs	r0, #0
 800294c:	f7fe fa8c 	bl	8000e68 <framDataRead>
 8002950:	60f8      	str	r0, [r7, #12]
	if (!result)
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d130      	bne.n	80029ba <settingsLoadFRAM+0x82>
	{
		if (header == FRAM_SETTINGS_HEADER)
 8002958:	893b      	ldrh	r3, [r7, #8]
 800295a:	f64a 32d8 	movw	r2, #43992	; 0xabd8
 800295e:	4293      	cmp	r3, r2
 8002960:	d128      	bne.n	80029b4 <settingsLoadFRAM+0x7c>
		{
			result = framDataRead(FRAM_SETTINGS_ADDR + sizeof(header), (uint8_t *) &(settings.retain), sizeof(Retain));
 8002962:	220a      	movs	r2, #10
 8002964:	4917      	ldr	r1, [pc, #92]	; (80029c4 <settingsLoadFRAM+0x8c>)
 8002966:	2002      	movs	r0, #2
 8002968:	f7fe fa7e 	bl	8000e68 <framDataRead>
 800296c:	60f8      	str	r0, [r7, #12]
			if (!result)
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d11b      	bne.n	80029ac <settingsLoadFRAM+0x74>
			{

				uint8_t xor = checksumCalc((uint8_t *) &(settings.retain), sizeof(Retain));
 8002974:	210a      	movs	r1, #10
 8002976:	4813      	ldr	r0, [pc, #76]	; (80029c4 <settingsLoadFRAM+0x8c>)
 8002978:	f000 f864 	bl	8002a44 <checksumCalc>
 800297c:	4603      	mov	r3, r0
 800297e:	72fb      	strb	r3, [r7, #11]
				uint8_t checksum;
				result = framDataRead(FRAM_SETTINGS_ADDR + sizeof(header) + sizeof(Retain), &checksum, sizeof(checksum));
 8002980:	1dfb      	adds	r3, r7, #7
 8002982:	2201      	movs	r2, #1
 8002984:	4619      	mov	r1, r3
 8002986:	200c      	movs	r0, #12
 8002988:	f7fe fa6e 	bl	8000e68 <framDataRead>
 800298c:	60f8      	str	r0, [r7, #12]
 				if (!result)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d107      	bne.n	80029a4 <settingsLoadFRAM+0x6c>
				{
					if (xor != checksum)
 8002994:	79fb      	ldrb	r3, [r7, #7]
 8002996:	7afa      	ldrb	r2, [r7, #11]
 8002998:	429a      	cmp	r2, r3
 800299a:	d00e      	beq.n	80029ba <settingsLoadFRAM+0x82>
						result = -2;
 800299c:	f06f 0301 	mvn.w	r3, #1
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	e00a      	b.n	80029ba <settingsLoadFRAM+0x82>
				}
				else
					result = -1;
 80029a4:	f04f 33ff 	mov.w	r3, #4294967295
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	e006      	b.n	80029ba <settingsLoadFRAM+0x82>
			}
			else
				result = -1;
 80029ac:	f04f 33ff 	mov.w	r3, #4294967295
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	e002      	b.n	80029ba <settingsLoadFRAM+0x82>
		}
		else
			result = -1;
 80029b4:	f04f 33ff 	mov.w	r3, #4294967295
 80029b8:	60fb      	str	r3, [r7, #12]
	}

	return result;
 80029ba:	68fb      	ldr	r3, [r7, #12]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	2000709c 	.word	0x2000709c

080029c8 <settingsSaveFRAM>:

int settingsSaveFRAM (void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
	int result = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	60fb      	str	r3, [r7, #12]
	uint16_t header = FRAM_SETTINGS_HEADER, address = FRAM_SETTINGS_ADDR;
 80029d2:	f64a 33d8 	movw	r3, #43992	; 0xabd8
 80029d6:	813b      	strh	r3, [r7, #8]
 80029d8:	2300      	movs	r3, #0
 80029da:	817b      	strh	r3, [r7, #10]

	result = framDataWrite(address, (uint8_t *) &header, sizeof(header));
 80029dc:	f107 0108 	add.w	r1, r7, #8
 80029e0:	897b      	ldrh	r3, [r7, #10]
 80029e2:	2202      	movs	r2, #2
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fe fa7d 	bl	8000ee4 <framDataWrite>
 80029ea:	60f8      	str	r0, [r7, #12]
	address += sizeof(header);
 80029ec:	897b      	ldrh	r3, [r7, #10]
 80029ee:	3302      	adds	r3, #2
 80029f0:	817b      	strh	r3, [r7, #10]
	vTaskSuspendAll();	// Останавливаем планировщик, чтобы предотвратить фоновое изменение структуры settings
 80029f2:	f009 f91d 	bl	800bc30 <vTaskSuspendAll>
	result |= framDataWrite(address, (uint8_t *) &(settings.retain), sizeof(Retain));
 80029f6:	897b      	ldrh	r3, [r7, #10]
 80029f8:	220a      	movs	r2, #10
 80029fa:	4911      	ldr	r1, [pc, #68]	; (8002a40 <settingsSaveFRAM+0x78>)
 80029fc:	4618      	mov	r0, r3
 80029fe:	f7fe fa71 	bl	8000ee4 <framDataWrite>
 8002a02:	4602      	mov	r2, r0
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]
	address += sizeof(Retain);
 8002a0a:	897b      	ldrh	r3, [r7, #10]
 8002a0c:	330a      	adds	r3, #10
 8002a0e:	817b      	strh	r3, [r7, #10]
	uint8_t xor = checksumCalc((uint8_t *) &(settings.retain), sizeof(Retain));
 8002a10:	210a      	movs	r1, #10
 8002a12:	480b      	ldr	r0, [pc, #44]	; (8002a40 <settingsSaveFRAM+0x78>)
 8002a14:	f000 f816 	bl	8002a44 <checksumCalc>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	71fb      	strb	r3, [r7, #7]
	xTaskResumeAll();	// Возобновляем работу планировщика
 8002a1c:	f009 f916 	bl	800bc4c <xTaskResumeAll>
	result |= framDataWrite(address, &xor, sizeof(xor));
 8002a20:	1df9      	adds	r1, r7, #7
 8002a22:	897b      	ldrh	r3, [r7, #10]
 8002a24:	2201      	movs	r2, #1
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7fe fa5c 	bl	8000ee4 <framDataWrite>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]

	return result;
 8002a34:	68fb      	ldr	r3, [r7, #12]
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	2000709c 	.word	0x2000709c

08002a44 <checksumCalc>:

static uint8_t checksumCalc (uint8_t * data, uint16_t size)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b085      	sub	sp, #20
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	807b      	strh	r3, [r7, #2]
	uint8_t xor = 0;
 8002a50:	2300      	movs	r3, #0
 8002a52:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < size; i++)
 8002a54:	2300      	movs	r3, #0
 8002a56:	60bb      	str	r3, [r7, #8]
 8002a58:	e009      	b.n	8002a6e <checksumCalc+0x2a>
		xor ^= data[i];
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	4413      	add	r3, r2
 8002a60:	781a      	ldrb	r2, [r3, #0]
 8002a62:	7bfb      	ldrb	r3, [r7, #15]
 8002a64:	4053      	eors	r3, r2
 8002a66:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < size; i++)
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	3301      	adds	r3, #1
 8002a6c:	60bb      	str	r3, [r7, #8]
 8002a6e:	887b      	ldrh	r3, [r7, #2]
 8002a70:	68ba      	ldr	r2, [r7, #8]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	dbf1      	blt.n	8002a5a <checksumCalc+0x16>
	return xor;
 8002a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b082      	sub	sp, #8
 8002a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	607b      	str	r3, [r7, #4]
 8002a8e:	4b12      	ldr	r3, [pc, #72]	; (8002ad8 <HAL_MspInit+0x54>)
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	4a11      	ldr	r2, [pc, #68]	; (8002ad8 <HAL_MspInit+0x54>)
 8002a94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a98:	6453      	str	r3, [r2, #68]	; 0x44
 8002a9a:	4b0f      	ldr	r3, [pc, #60]	; (8002ad8 <HAL_MspInit+0x54>)
 8002a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aa2:	607b      	str	r3, [r7, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	603b      	str	r3, [r7, #0]
 8002aaa:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_MspInit+0x54>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	4a0a      	ldr	r2, [pc, #40]	; (8002ad8 <HAL_MspInit+0x54>)
 8002ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ab6:	4b08      	ldr	r3, [pc, #32]	; (8002ad8 <HAL_MspInit+0x54>)
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002abe:	603b      	str	r3, [r7, #0]
 8002ac0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	210f      	movs	r1, #15
 8002ac6:	f06f 0001 	mvn.w	r0, #1
 8002aca:	f001 faf3 	bl	80040b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	3708      	adds	r7, #8
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40023800 	.word	0x40023800

08002adc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b08a      	sub	sp, #40	; 0x28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ae4:	f107 0314 	add.w	r3, r7, #20
 8002ae8:	2200      	movs	r2, #0
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	609a      	str	r2, [r3, #8]
 8002af0:	60da      	str	r2, [r3, #12]
 8002af2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a3c      	ldr	r2, [pc, #240]	; (8002bec <HAL_ADC_MspInit+0x110>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d171      	bne.n	8002be2 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	4b3b      	ldr	r3, [pc, #236]	; (8002bf0 <HAL_ADC_MspInit+0x114>)
 8002b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b06:	4a3a      	ldr	r2, [pc, #232]	; (8002bf0 <HAL_ADC_MspInit+0x114>)
 8002b08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b0e:	4b38      	ldr	r3, [pc, #224]	; (8002bf0 <HAL_ADC_MspInit+0x114>)
 8002b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b16:	613b      	str	r3, [r7, #16]
 8002b18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	60fb      	str	r3, [r7, #12]
 8002b1e:	4b34      	ldr	r3, [pc, #208]	; (8002bf0 <HAL_ADC_MspInit+0x114>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b22:	4a33      	ldr	r2, [pc, #204]	; (8002bf0 <HAL_ADC_MspInit+0x114>)
 8002b24:	f043 0304 	orr.w	r3, r3, #4
 8002b28:	6313      	str	r3, [r2, #48]	; 0x30
 8002b2a:	4b31      	ldr	r3, [pc, #196]	; (8002bf0 <HAL_ADC_MspInit+0x114>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	f003 0304 	and.w	r3, r3, #4
 8002b32:	60fb      	str	r3, [r7, #12]
 8002b34:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	60bb      	str	r3, [r7, #8]
 8002b3a:	4b2d      	ldr	r3, [pc, #180]	; (8002bf0 <HAL_ADC_MspInit+0x114>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3e:	4a2c      	ldr	r2, [pc, #176]	; (8002bf0 <HAL_ADC_MspInit+0x114>)
 8002b40:	f043 0301 	orr.w	r3, r3, #1
 8002b44:	6313      	str	r3, [r2, #48]	; 0x30
 8002b46:	4b2a      	ldr	r3, [pc, #168]	; (8002bf0 <HAL_ADC_MspInit+0x114>)
 8002b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	60bb      	str	r3, [r7, #8]
 8002b50:	68bb      	ldr	r3, [r7, #8]
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = ADC_T0_Pin|ADC_T1_Pin|ADC_T2_Pin;
 8002b52:	230d      	movs	r3, #13
 8002b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b56:	2303      	movs	r3, #3
 8002b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b5e:	f107 0314 	add.w	r3, r7, #20
 8002b62:	4619      	mov	r1, r3
 8002b64:	4823      	ldr	r0, [pc, #140]	; (8002bf4 <HAL_ADC_MspInit+0x118>)
 8002b66:	f003 f877 	bl	8005c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AD_T3_Pin|ADC_T4_Pin;
 8002b6a:	2318      	movs	r3, #24
 8002b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b76:	f107 0314 	add.w	r3, r7, #20
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	481e      	ldr	r0, [pc, #120]	; (8002bf8 <HAL_ADC_MspInit+0x11c>)
 8002b7e:	f003 f86b 	bl	8005c58 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002b82:	4b1e      	ldr	r3, [pc, #120]	; (8002bfc <HAL_ADC_MspInit+0x120>)
 8002b84:	4a1e      	ldr	r2, [pc, #120]	; (8002c00 <HAL_ADC_MspInit+0x124>)
 8002b86:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002b88:	4b1c      	ldr	r3, [pc, #112]	; (8002bfc <HAL_ADC_MspInit+0x120>)
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b8e:	4b1b      	ldr	r3, [pc, #108]	; (8002bfc <HAL_ADC_MspInit+0x120>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b94:	4b19      	ldr	r3, [pc, #100]	; (8002bfc <HAL_ADC_MspInit+0x120>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002b9a:	4b18      	ldr	r3, [pc, #96]	; (8002bfc <HAL_ADC_MspInit+0x120>)
 8002b9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ba0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ba2:	4b16      	ldr	r3, [pc, #88]	; (8002bfc <HAL_ADC_MspInit+0x120>)
 8002ba4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ba8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002baa:	4b14      	ldr	r3, [pc, #80]	; (8002bfc <HAL_ADC_MspInit+0x120>)
 8002bac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002bb0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002bb2:	4b12      	ldr	r3, [pc, #72]	; (8002bfc <HAL_ADC_MspInit+0x120>)
 8002bb4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bb8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002bba:	4b10      	ldr	r3, [pc, #64]	; (8002bfc <HAL_ADC_MspInit+0x120>)
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bc0:	4b0e      	ldr	r3, [pc, #56]	; (8002bfc <HAL_ADC_MspInit+0x120>)
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002bc6:	480d      	ldr	r0, [pc, #52]	; (8002bfc <HAL_ADC_MspInit+0x120>)
 8002bc8:	f001 fa9e 	bl	8004108 <HAL_DMA_Init>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d001      	beq.n	8002bd6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8002bd2:	f7ff fa6b 	bl	80020ac <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a08      	ldr	r2, [pc, #32]	; (8002bfc <HAL_ADC_MspInit+0x120>)
 8002bda:	639a      	str	r2, [r3, #56]	; 0x38
 8002bdc:	4a07      	ldr	r2, [pc, #28]	; (8002bfc <HAL_ADC_MspInit+0x120>)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002be2:	bf00      	nop
 8002be4:	3728      	adds	r7, #40	; 0x28
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40012000 	.word	0x40012000
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	40020800 	.word	0x40020800
 8002bf8:	40020000 	.word	0x40020000
 8002bfc:	20006ff4 	.word	0x20006ff4
 8002c00:	40026410 	.word	0x40026410

08002c04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b08a      	sub	sp, #40	; 0x28
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c0c:	f107 0314 	add.w	r3, r7, #20
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	605a      	str	r2, [r3, #4]
 8002c16:	609a      	str	r2, [r3, #8]
 8002c18:	60da      	str	r2, [r3, #12]
 8002c1a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a19      	ldr	r2, [pc, #100]	; (8002c88 <HAL_SPI_MspInit+0x84>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d12c      	bne.n	8002c80 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002c26:	2300      	movs	r3, #0
 8002c28:	613b      	str	r3, [r7, #16]
 8002c2a:	4b18      	ldr	r3, [pc, #96]	; (8002c8c <HAL_SPI_MspInit+0x88>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	4a17      	ldr	r2, [pc, #92]	; (8002c8c <HAL_SPI_MspInit+0x88>)
 8002c30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c34:	6413      	str	r3, [r2, #64]	; 0x40
 8002c36:	4b15      	ldr	r3, [pc, #84]	; (8002c8c <HAL_SPI_MspInit+0x88>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c3e:	613b      	str	r3, [r7, #16]
 8002c40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	4b11      	ldr	r3, [pc, #68]	; (8002c8c <HAL_SPI_MspInit+0x88>)
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	4a10      	ldr	r2, [pc, #64]	; (8002c8c <HAL_SPI_MspInit+0x88>)
 8002c4c:	f043 0304 	orr.w	r3, r3, #4
 8002c50:	6313      	str	r3, [r2, #48]	; 0x30
 8002c52:	4b0e      	ldr	r3, [pc, #56]	; (8002c8c <HAL_SPI_MspInit+0x88>)
 8002c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c56:	f003 0304 	and.w	r3, r3, #4
 8002c5a:	60fb      	str	r3, [r7, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = S3SCK_Pin|S3MISO_Pin|S3MOSI_Pin;
 8002c5e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002c62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c64:	2302      	movs	r3, #2
 8002c66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c6c:	2303      	movs	r3, #3
 8002c6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002c70:	2306      	movs	r3, #6
 8002c72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c74:	f107 0314 	add.w	r3, r7, #20
 8002c78:	4619      	mov	r1, r3
 8002c7a:	4805      	ldr	r0, [pc, #20]	; (8002c90 <HAL_SPI_MspInit+0x8c>)
 8002c7c:	f002 ffec 	bl	8005c58 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002c80:	bf00      	nop
 8002c82:	3728      	adds	r7, #40	; 0x28
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	40003c00 	.word	0x40003c00
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	40020800 	.word	0x40020800

08002c94 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a0b      	ldr	r2, [pc, #44]	; (8002cd0 <HAL_TIM_Base_MspInit+0x3c>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d10d      	bne.n	8002cc2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <HAL_TIM_Base_MspInit+0x40>)
 8002cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cae:	4a09      	ldr	r2, [pc, #36]	; (8002cd4 <HAL_TIM_Base_MspInit+0x40>)
 8002cb0:	f043 0302 	orr.w	r3, r3, #2
 8002cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb6:	4b07      	ldr	r3, [pc, #28]	; (8002cd4 <HAL_TIM_Base_MspInit+0x40>)
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	60fb      	str	r3, [r7, #12]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002cc2:	bf00      	nop
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	40000400 	.word	0x40000400
 8002cd4:	40023800 	.word	0x40023800

08002cd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b08c      	sub	sp, #48	; 0x30
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce0:	f107 031c 	add.w	r3, r7, #28
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	605a      	str	r2, [r3, #4]
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	60da      	str	r2, [r3, #12]
 8002cee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a68      	ldr	r2, [pc, #416]	; (8002e98 <HAL_UART_MspInit+0x1c0>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d163      	bne.n	8002dc2 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	61bb      	str	r3, [r7, #24]
 8002cfe:	4b67      	ldr	r3, [pc, #412]	; (8002e9c <HAL_UART_MspInit+0x1c4>)
 8002d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d02:	4a66      	ldr	r2, [pc, #408]	; (8002e9c <HAL_UART_MspInit+0x1c4>)
 8002d04:	f043 0310 	orr.w	r3, r3, #16
 8002d08:	6453      	str	r3, [r2, #68]	; 0x44
 8002d0a:	4b64      	ldr	r3, [pc, #400]	; (8002e9c <HAL_UART_MspInit+0x1c4>)
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0e:	f003 0310 	and.w	r3, r3, #16
 8002d12:	61bb      	str	r3, [r7, #24]
 8002d14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d16:	2300      	movs	r3, #0
 8002d18:	617b      	str	r3, [r7, #20]
 8002d1a:	4b60      	ldr	r3, [pc, #384]	; (8002e9c <HAL_UART_MspInit+0x1c4>)
 8002d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1e:	4a5f      	ldr	r2, [pc, #380]	; (8002e9c <HAL_UART_MspInit+0x1c4>)
 8002d20:	f043 0301 	orr.w	r3, r3, #1
 8002d24:	6313      	str	r3, [r2, #48]	; 0x30
 8002d26:	4b5d      	ldr	r3, [pc, #372]	; (8002e9c <HAL_UART_MspInit+0x1c4>)
 8002d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d2a:	f003 0301 	and.w	r3, r3, #1
 8002d2e:	617b      	str	r3, [r7, #20]
 8002d30:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d32:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d38:	2302      	movs	r3, #2
 8002d3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d40:	2303      	movs	r3, #3
 8002d42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d44:	2307      	movs	r3, #7
 8002d46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d48:	f107 031c 	add.w	r3, r7, #28
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	4854      	ldr	r0, [pc, #336]	; (8002ea0 <HAL_UART_MspInit+0x1c8>)
 8002d50:	f002 ff82 	bl	8005c58 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002d54:	4b53      	ldr	r3, [pc, #332]	; (8002ea4 <HAL_UART_MspInit+0x1cc>)
 8002d56:	4a54      	ldr	r2, [pc, #336]	; (8002ea8 <HAL_UART_MspInit+0x1d0>)
 8002d58:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002d5a:	4b52      	ldr	r3, [pc, #328]	; (8002ea4 <HAL_UART_MspInit+0x1cc>)
 8002d5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d60:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d62:	4b50      	ldr	r3, [pc, #320]	; (8002ea4 <HAL_UART_MspInit+0x1cc>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d68:	4b4e      	ldr	r3, [pc, #312]	; (8002ea4 <HAL_UART_MspInit+0x1cc>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d6e:	4b4d      	ldr	r3, [pc, #308]	; (8002ea4 <HAL_UART_MspInit+0x1cc>)
 8002d70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d74:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d76:	4b4b      	ldr	r3, [pc, #300]	; (8002ea4 <HAL_UART_MspInit+0x1cc>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d7c:	4b49      	ldr	r3, [pc, #292]	; (8002ea4 <HAL_UART_MspInit+0x1cc>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002d82:	4b48      	ldr	r3, [pc, #288]	; (8002ea4 <HAL_UART_MspInit+0x1cc>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d88:	4b46      	ldr	r3, [pc, #280]	; (8002ea4 <HAL_UART_MspInit+0x1cc>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d8e:	4b45      	ldr	r3, [pc, #276]	; (8002ea4 <HAL_UART_MspInit+0x1cc>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002d94:	4843      	ldr	r0, [pc, #268]	; (8002ea4 <HAL_UART_MspInit+0x1cc>)
 8002d96:	f001 f9b7 	bl	8004108 <HAL_DMA_Init>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8002da0:	f7ff f984 	bl	80020ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	4a3f      	ldr	r2, [pc, #252]	; (8002ea4 <HAL_UART_MspInit+0x1cc>)
 8002da8:	639a      	str	r2, [r3, #56]	; 0x38
 8002daa:	4a3e      	ldr	r2, [pc, #248]	; (8002ea4 <HAL_UART_MspInit+0x1cc>)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002db0:	2200      	movs	r2, #0
 8002db2:	2105      	movs	r1, #5
 8002db4:	2025      	movs	r0, #37	; 0x25
 8002db6:	f001 f97d 	bl	80040b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002dba:	2025      	movs	r0, #37	; 0x25
 8002dbc:	f001 f996 	bl	80040ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002dc0:	e066      	b.n	8002e90 <HAL_UART_MspInit+0x1b8>
  else if(huart->Instance==USART6)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a39      	ldr	r2, [pc, #228]	; (8002eac <HAL_UART_MspInit+0x1d4>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d161      	bne.n	8002e90 <HAL_UART_MspInit+0x1b8>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002dcc:	2300      	movs	r3, #0
 8002dce:	613b      	str	r3, [r7, #16]
 8002dd0:	4b32      	ldr	r3, [pc, #200]	; (8002e9c <HAL_UART_MspInit+0x1c4>)
 8002dd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd4:	4a31      	ldr	r2, [pc, #196]	; (8002e9c <HAL_UART_MspInit+0x1c4>)
 8002dd6:	f043 0320 	orr.w	r3, r3, #32
 8002dda:	6453      	str	r3, [r2, #68]	; 0x44
 8002ddc:	4b2f      	ldr	r3, [pc, #188]	; (8002e9c <HAL_UART_MspInit+0x1c4>)
 8002dde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002de0:	f003 0320 	and.w	r3, r3, #32
 8002de4:	613b      	str	r3, [r7, #16]
 8002de6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002de8:	2300      	movs	r3, #0
 8002dea:	60fb      	str	r3, [r7, #12]
 8002dec:	4b2b      	ldr	r3, [pc, #172]	; (8002e9c <HAL_UART_MspInit+0x1c4>)
 8002dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df0:	4a2a      	ldr	r2, [pc, #168]	; (8002e9c <HAL_UART_MspInit+0x1c4>)
 8002df2:	f043 0304 	orr.w	r3, r3, #4
 8002df6:	6313      	str	r3, [r2, #48]	; 0x30
 8002df8:	4b28      	ldr	r3, [pc, #160]	; (8002e9c <HAL_UART_MspInit+0x1c4>)
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e04:	23c0      	movs	r3, #192	; 0xc0
 8002e06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e08:	2302      	movs	r3, #2
 8002e0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e10:	2303      	movs	r3, #3
 8002e12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002e14:	2308      	movs	r3, #8
 8002e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e18:	f107 031c 	add.w	r3, r7, #28
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4824      	ldr	r0, [pc, #144]	; (8002eb0 <HAL_UART_MspInit+0x1d8>)
 8002e20:	f002 ff1a 	bl	8005c58 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002e24:	4b23      	ldr	r3, [pc, #140]	; (8002eb4 <HAL_UART_MspInit+0x1dc>)
 8002e26:	4a24      	ldr	r2, [pc, #144]	; (8002eb8 <HAL_UART_MspInit+0x1e0>)
 8002e28:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002e2a:	4b22      	ldr	r3, [pc, #136]	; (8002eb4 <HAL_UART_MspInit+0x1dc>)
 8002e2c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002e30:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e32:	4b20      	ldr	r3, [pc, #128]	; (8002eb4 <HAL_UART_MspInit+0x1dc>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e38:	4b1e      	ldr	r3, [pc, #120]	; (8002eb4 <HAL_UART_MspInit+0x1dc>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e3e:	4b1d      	ldr	r3, [pc, #116]	; (8002eb4 <HAL_UART_MspInit+0x1dc>)
 8002e40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e44:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e46:	4b1b      	ldr	r3, [pc, #108]	; (8002eb4 <HAL_UART_MspInit+0x1dc>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e4c:	4b19      	ldr	r3, [pc, #100]	; (8002eb4 <HAL_UART_MspInit+0x1dc>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002e52:	4b18      	ldr	r3, [pc, #96]	; (8002eb4 <HAL_UART_MspInit+0x1dc>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e58:	4b16      	ldr	r3, [pc, #88]	; (8002eb4 <HAL_UART_MspInit+0x1dc>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e5e:	4b15      	ldr	r3, [pc, #84]	; (8002eb4 <HAL_UART_MspInit+0x1dc>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002e64:	4813      	ldr	r0, [pc, #76]	; (8002eb4 <HAL_UART_MspInit+0x1dc>)
 8002e66:	f001 f94f 	bl	8004108 <HAL_DMA_Init>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <HAL_UART_MspInit+0x19c>
      Error_Handler();
 8002e70:	f7ff f91c 	bl	80020ac <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a0f      	ldr	r2, [pc, #60]	; (8002eb4 <HAL_UART_MspInit+0x1dc>)
 8002e78:	639a      	str	r2, [r3, #56]	; 0x38
 8002e7a:	4a0e      	ldr	r2, [pc, #56]	; (8002eb4 <HAL_UART_MspInit+0x1dc>)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002e80:	2200      	movs	r2, #0
 8002e82:	2105      	movs	r1, #5
 8002e84:	2047      	movs	r0, #71	; 0x47
 8002e86:	f001 f915 	bl	80040b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002e8a:	2047      	movs	r0, #71	; 0x47
 8002e8c:	f001 f92e 	bl	80040ec <HAL_NVIC_EnableIRQ>
}
 8002e90:	bf00      	nop
 8002e92:	3730      	adds	r7, #48	; 0x30
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40011000 	.word	0x40011000
 8002e9c:	40023800 	.word	0x40023800
 8002ea0:	40020000 	.word	0x40020000
 8002ea4:	20006f50 	.word	0x20006f50
 8002ea8:	40026440 	.word	0x40026440
 8002eac:	40011400 	.word	0x40011400
 8002eb0:	40020800 	.word	0x40020800
 8002eb4:	20006e08 	.word	0x20006e08
 8002eb8:	40026428 	.word	0x40026428

08002ebc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08c      	sub	sp, #48	; 0x30
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002ec8:	2300      	movs	r3, #0
 8002eca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0);
 8002ecc:	2200      	movs	r2, #0
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	2019      	movs	r0, #25
 8002ed2:	f001 f8ef 	bl	80040b4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002ed6:	2019      	movs	r0, #25
 8002ed8:	f001 f908 	bl	80040ec <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002edc:	2300      	movs	r3, #0
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	4b1f      	ldr	r3, [pc, #124]	; (8002f60 <HAL_InitTick+0xa4>)
 8002ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee4:	4a1e      	ldr	r2, [pc, #120]	; (8002f60 <HAL_InitTick+0xa4>)
 8002ee6:	f043 0301 	orr.w	r3, r3, #1
 8002eea:	6453      	str	r3, [r2, #68]	; 0x44
 8002eec:	4b1c      	ldr	r3, [pc, #112]	; (8002f60 <HAL_InitTick+0xa4>)
 8002eee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef0:	f003 0301 	and.w	r3, r3, #1
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ef8:	f107 0210 	add.w	r2, r7, #16
 8002efc:	f107 0314 	add.w	r3, r7, #20
 8002f00:	4611      	mov	r1, r2
 8002f02:	4618      	mov	r0, r3
 8002f04:	f003 fd26 	bl	8006954 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002f08:	f003 fd10 	bl	800692c <HAL_RCC_GetPCLK2Freq>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f14:	4a13      	ldr	r2, [pc, #76]	; (8002f64 <HAL_InitTick+0xa8>)
 8002f16:	fba2 2303 	umull	r2, r3, r2, r3
 8002f1a:	0c9b      	lsrs	r3, r3, #18
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002f20:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <HAL_InitTick+0xac>)
 8002f22:	4a12      	ldr	r2, [pc, #72]	; (8002f6c <HAL_InitTick+0xb0>)
 8002f24:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002f26:	4b10      	ldr	r3, [pc, #64]	; (8002f68 <HAL_InitTick+0xac>)
 8002f28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002f2c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002f2e:	4a0e      	ldr	r2, [pc, #56]	; (8002f68 <HAL_InitTick+0xac>)
 8002f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f32:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002f34:	4b0c      	ldr	r3, [pc, #48]	; (8002f68 <HAL_InitTick+0xac>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f3a:	4b0b      	ldr	r3, [pc, #44]	; (8002f68 <HAL_InitTick+0xac>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8002f40:	4809      	ldr	r0, [pc, #36]	; (8002f68 <HAL_InitTick+0xac>)
 8002f42:	f004 fae1 	bl	8007508 <HAL_TIM_Base_Init>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d104      	bne.n	8002f56 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8002f4c:	4806      	ldr	r0, [pc, #24]	; (8002f68 <HAL_InitTick+0xac>)
 8002f4e:	f004 fb93 	bl	8007678 <HAL_TIM_Base_Start_IT>
 8002f52:	4603      	mov	r3, r0
 8002f54:	e000      	b.n	8002f58 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002f56:	2301      	movs	r3, #1
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3730      	adds	r7, #48	; 0x30
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	40023800 	.word	0x40023800
 8002f64:	431bde83 	.word	0x431bde83
 8002f68:	20007164 	.word	0x20007164
 8002f6c:	40010000 	.word	0x40010000

08002f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f74:	e7fe      	b.n	8002f74 <NMI_Handler+0x4>

08002f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f76:	b480      	push	{r7}
 8002f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f7a:	e7fe      	b.n	8002f7a <HardFault_Handler+0x4>

08002f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f80:	e7fe      	b.n	8002f80 <MemManage_Handler+0x4>

08002f82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f82:	b480      	push	{r7}
 8002f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f86:	e7fe      	b.n	8002f86 <BusFault_Handler+0x4>

08002f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f8c:	e7fe      	b.n	8002f8c <UsageFault_Handler+0x4>

08002f8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f92:	bf00      	nop
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002fa0:	4802      	ldr	r0, [pc, #8]	; (8002fac <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002fa2:	f004 fbd9 	bl	8007758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002fa6:	bf00      	nop
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	20007164 	.word	0x20007164

08002fb0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002fb4:	4802      	ldr	r0, [pc, #8]	; (8002fc0 <USART1_IRQHandler+0x10>)
 8002fb6:	f005 f8d5 	bl	8008164 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002fba:	bf00      	nop
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	20006fb0 	.word	0x20006fb0

08002fc4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002fc8:	4802      	ldr	r0, [pc, #8]	; (8002fd4 <DMA2_Stream0_IRQHandler+0x10>)
 8002fca:	f001 fa35 	bl	8004438 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002fce:	bf00      	nop
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20006ff4 	.word	0x20006ff4

08002fd8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002fdc:	4802      	ldr	r0, [pc, #8]	; (8002fe8 <DMA2_Stream1_IRQHandler+0x10>)
 8002fde:	f001 fa2b 	bl	8004438 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002fe2:	bf00      	nop
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	20006e08 	.word	0x20006e08

08002fec <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002ff0:	4802      	ldr	r0, [pc, #8]	; (8002ffc <DMA2_Stream2_IRQHandler+0x10>)
 8002ff2:	f001 fa21 	bl	8004438 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002ff6:	bf00      	nop
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	20006f50 	.word	0x20006f50

08003000 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8003004:	4802      	ldr	r0, [pc, #8]	; (8003010 <ETH_IRQHandler+0x10>)
 8003006:	f002 f865 	bl	80050d4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800300a:	bf00      	nop
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	20008dd4 	.word	0x20008dd4

08003014 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003018:	4802      	ldr	r0, [pc, #8]	; (8003024 <USART6_IRQHandler+0x10>)
 800301a:	f005 f8a3 	bl	8008164 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800301e:	bf00      	nop
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	20007058 	.word	0x20007058

08003028 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
	return 1;
 800302c:	2301      	movs	r3, #1
}
 800302e:	4618      	mov	r0, r3
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <_kill>:

int _kill(int pid, int sig)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003042:	4b05      	ldr	r3, [pc, #20]	; (8003058 <_kill+0x20>)
 8003044:	2216      	movs	r2, #22
 8003046:	601a      	str	r2, [r3, #0]
	return -1;
 8003048:	f04f 33ff 	mov.w	r3, #4294967295
}
 800304c:	4618      	mov	r0, r3
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	2000dd60 	.word	0x2000dd60

0800305c <_exit>:

void _exit (int status)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003064:	f04f 31ff 	mov.w	r1, #4294967295
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f7ff ffe5 	bl	8003038 <_kill>
	while (1) {}		/* Make sure we hang here */
 800306e:	e7fe      	b.n	800306e <_exit+0x12>

08003070 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800307c:	2300      	movs	r3, #0
 800307e:	617b      	str	r3, [r7, #20]
 8003080:	e00a      	b.n	8003098 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003082:	f3af 8000 	nop.w
 8003086:	4601      	mov	r1, r0
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	1c5a      	adds	r2, r3, #1
 800308c:	60ba      	str	r2, [r7, #8]
 800308e:	b2ca      	uxtb	r2, r1
 8003090:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	3301      	adds	r3, #1
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	429a      	cmp	r2, r3
 800309e:	dbf0      	blt.n	8003082 <_read+0x12>
	}

return len;
 80030a0:	687b      	ldr	r3, [r7, #4]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b086      	sub	sp, #24
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	60f8      	str	r0, [r7, #12]
 80030b2:	60b9      	str	r1, [r7, #8]
 80030b4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030b6:	2300      	movs	r3, #0
 80030b8:	617b      	str	r3, [r7, #20]
 80030ba:	e009      	b.n	80030d0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	1c5a      	adds	r2, r3, #1
 80030c0:	60ba      	str	r2, [r7, #8]
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	3301      	adds	r3, #1
 80030ce:	617b      	str	r3, [r7, #20]
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	dbf1      	blt.n	80030bc <_write+0x12>
	}
	return len;
 80030d8:	687b      	ldr	r3, [r7, #4]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3718      	adds	r7, #24
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}

080030e2 <_close>:

int _close(int file)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
	return -1;
 80030ea:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	370c      	adds	r7, #12
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr

080030fa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030fa:	b480      	push	{r7}
 80030fc:	b083      	sub	sp, #12
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
 8003102:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800310a:	605a      	str	r2, [r3, #4]
	return 0;
 800310c:	2300      	movs	r3, #0
}
 800310e:	4618      	mov	r0, r3
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr

0800311a <_isatty>:

int _isatty(int file)
{
 800311a:	b480      	push	{r7}
 800311c:	b083      	sub	sp, #12
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
	return 1;
 8003122:	2301      	movs	r3, #1
}
 8003124:	4618      	mov	r0, r3
 8003126:	370c      	adds	r7, #12
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003130:	b480      	push	{r7}
 8003132:	b085      	sub	sp, #20
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
	return 0;
 800313c:	2300      	movs	r3, #0
}
 800313e:	4618      	mov	r0, r3
 8003140:	3714      	adds	r7, #20
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
	...

0800314c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800314c:	b480      	push	{r7}
 800314e:	b087      	sub	sp, #28
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003154:	4a14      	ldr	r2, [pc, #80]	; (80031a8 <_sbrk+0x5c>)
 8003156:	4b15      	ldr	r3, [pc, #84]	; (80031ac <_sbrk+0x60>)
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003160:	4b13      	ldr	r3, [pc, #76]	; (80031b0 <_sbrk+0x64>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d102      	bne.n	800316e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003168:	4b11      	ldr	r3, [pc, #68]	; (80031b0 <_sbrk+0x64>)
 800316a:	4a12      	ldr	r2, [pc, #72]	; (80031b4 <_sbrk+0x68>)
 800316c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800316e:	4b10      	ldr	r3, [pc, #64]	; (80031b0 <_sbrk+0x64>)
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	4413      	add	r3, r2
 8003176:	693a      	ldr	r2, [r7, #16]
 8003178:	429a      	cmp	r2, r3
 800317a:	d205      	bcs.n	8003188 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 800317c:	4b0e      	ldr	r3, [pc, #56]	; (80031b8 <_sbrk+0x6c>)
 800317e:	220c      	movs	r2, #12
 8003180:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003182:	f04f 33ff 	mov.w	r3, #4294967295
 8003186:	e009      	b.n	800319c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003188:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <_sbrk+0x64>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800318e:	4b08      	ldr	r3, [pc, #32]	; (80031b0 <_sbrk+0x64>)
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4413      	add	r3, r2
 8003196:	4a06      	ldr	r2, [pc, #24]	; (80031b0 <_sbrk+0x64>)
 8003198:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800319a:	68fb      	ldr	r3, [r7, #12]
}
 800319c:	4618      	mov	r0, r3
 800319e:	371c      	adds	r7, #28
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	20020000 	.word	0x20020000
 80031ac:	00000400 	.word	0x00000400
 80031b0:	200004ac 	.word	0x200004ac
 80031b4:	2000dd68 	.word	0x2000dd68
 80031b8:	2000dd60 	.word	0x2000dd60

080031bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031c0:	4b06      	ldr	r3, [pc, #24]	; (80031dc <SystemInit+0x20>)
 80031c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c6:	4a05      	ldr	r2, [pc, #20]	; (80031dc <SystemInit+0x20>)
 80031c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80031d0:	bf00      	nop
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	e000ed00 	.word	0xe000ed00

080031e0 <uart_thread>:
static void StartReciveUartAll();
static void Transmit(UART_HandleTypeDef *huart, uint8_t *p, uint16_t size);


void uart_thread(void *argument)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b088      	sub	sp, #32
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
	osEvent event;
	Uart_Queue_Struct *queue_arg;
	StartReciveUartAll();
 80031e8:	f000 f82c 	bl	8003244 <StartReciveUartAll>
	while(1)
	{
		event = osMailGet(uart_queue, osWaitForever);
 80031ec:	4b14      	ldr	r3, [pc, #80]	; (8003240 <uart_thread+0x60>)
 80031ee:	6819      	ldr	r1, [r3, #0]
 80031f0:	f107 030c 	add.w	r3, r7, #12
 80031f4:	f04f 32ff 	mov.w	r2, #4294967295
 80031f8:	4618      	mov	r0, r3
 80031fa:	f007 f9a1 	bl	800a540 <osMailGet>
		if(event.status == osEventMail)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2b20      	cmp	r3, #32
 8003202:	d1f3      	bne.n	80031ec <uart_thread+0xc>
		{
			int result = 0;
 8003204:	2300      	movs	r3, #0
 8003206:	61fb      	str	r3, [r7, #28]
			queue_arg = event.value.p;
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	61bb      	str	r3, [r7, #24]
			result = RecognizePacket(queue_arg);
 800320c:	69b8      	ldr	r0, [r7, #24]
 800320e:	f000 f8c5 	bl	800339c <RecognizePacket>
 8003212:	61f8      	str	r0, [r7, #28]
			if(result)Transmit(queue_arg->huart, queue_arg->output_pointer, result);
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d008      	beq.n	800322c <uart_thread+0x4c>
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	68d8      	ldr	r0, [r3, #12]
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	69fa      	ldr	r2, [r7, #28]
 8003224:	b292      	uxth	r2, r2
 8003226:	4619      	mov	r1, r3
 8003228:	f000 f904 	bl	8003434 <Transmit>
			StartReceive(1);
 800322c:	2001      	movs	r0, #1
 800322e:	f000 f81d 	bl	800326c <StartReceive>
			osMailFree(uart_queue, queue_arg);
 8003232:	4b03      	ldr	r3, [pc, #12]	; (8003240 <uart_thread+0x60>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	69b9      	ldr	r1, [r7, #24]
 8003238:	4618      	mov	r0, r3
 800323a:	f007 f9f5 	bl	800a628 <osMailFree>
		event = osMailGet(uart_queue, osWaitForever);
 800323e:	e7d5      	b.n	80031ec <uart_thread+0xc>
 8003240:	20006cbc 	.word	0x20006cbc

08003244 <StartReciveUartAll>:
	}
}


static void StartReciveUartAll()
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
	for (int i = 0; i < 2; ++i) {
 800324a:	2300      	movs	r3, #0
 800324c:	607b      	str	r3, [r7, #4]
 800324e:	e005      	b.n	800325c <StartReciveUartAll+0x18>
		StartReceive(i);
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f80b 	bl	800326c <StartReceive>
	for (int i = 0; i < 2; ++i) {
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	3301      	adds	r3, #1
 800325a:	607b      	str	r3, [r7, #4]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2b01      	cmp	r3, #1
 8003260:	ddf6      	ble.n	8003250 <StartReciveUartAll+0xc>
	}
}
 8003262:	bf00      	nop
 8003264:	bf00      	nop
 8003266:	3708      	adds	r7, #8
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <StartReceive>:


static void StartReceive(int index)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
	switch (index) {
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <StartReceive+0x16>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d016      	beq.n	80032ae <StartReceive+0x42>
				HAL_UARTEx_ReceiveToIdle_DMA(&huart6, uart_input_buffer[1], UART_INPUT_BUFFER_SZ);
				__HAL_DMA_DISABLE_IT(&hdma_usart6_rx,DMA_IT_HT);
			}
			break;
		default:
			break;
 8003280:	e02e      	b.n	80032e0 <StartReceive+0x74>
			if (huart1.hdmarx->State==HAL_DMA_STATE_READY) {
 8003282:	4b19      	ldr	r3, [pc, #100]	; (80032e8 <StartReceive+0x7c>)
 8003284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003286:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b01      	cmp	r3, #1
 800328e:	d124      	bne.n	80032da <StartReceive+0x6e>
				HAL_UARTEx_ReceiveToIdle_DMA(&huart1, uart_input_buffer[0], UART_INPUT_BUFFER_SZ);
 8003290:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003294:	4915      	ldr	r1, [pc, #84]	; (80032ec <StartReceive+0x80>)
 8003296:	4814      	ldr	r0, [pc, #80]	; (80032e8 <StartReceive+0x7c>)
 8003298:	f004 feff 	bl	800809a <HAL_UARTEx_ReceiveToIdle_DMA>
				__HAL_DMA_DISABLE_IT(&hdma_usart1_rx,DMA_IT_HT);
 800329c:	4b14      	ldr	r3, [pc, #80]	; (80032f0 <StartReceive+0x84>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	4b13      	ldr	r3, [pc, #76]	; (80032f0 <StartReceive+0x84>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0208 	bic.w	r2, r2, #8
 80032aa:	601a      	str	r2, [r3, #0]
			break;
 80032ac:	e015      	b.n	80032da <StartReceive+0x6e>
			if(huart6.hdmarx->State==HAL_DMA_STATE_READY){
 80032ae:	4b11      	ldr	r3, [pc, #68]	; (80032f4 <StartReceive+0x88>)
 80032b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d110      	bne.n	80032de <StartReceive+0x72>
				HAL_UARTEx_ReceiveToIdle_DMA(&huart6, uart_input_buffer[1], UART_INPUT_BUFFER_SZ);
 80032bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032c0:	490d      	ldr	r1, [pc, #52]	; (80032f8 <StartReceive+0x8c>)
 80032c2:	480c      	ldr	r0, [pc, #48]	; (80032f4 <StartReceive+0x88>)
 80032c4:	f004 fee9 	bl	800809a <HAL_UARTEx_ReceiveToIdle_DMA>
				__HAL_DMA_DISABLE_IT(&hdma_usart6_rx,DMA_IT_HT);
 80032c8:	4b0c      	ldr	r3, [pc, #48]	; (80032fc <StartReceive+0x90>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <StartReceive+0x90>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0208 	bic.w	r2, r2, #8
 80032d6:	601a      	str	r2, [r3, #0]
			break;
 80032d8:	e001      	b.n	80032de <StartReceive+0x72>
			break;
 80032da:	bf00      	nop
 80032dc:	e000      	b.n	80032e0 <StartReceive+0x74>
			break;
 80032de:	bf00      	nop
	}
}
 80032e0:	bf00      	nop
 80032e2:	3708      	adds	r7, #8
 80032e4:	46bd      	mov	sp, r7
 80032e6:	bd80      	pop	{r7, pc}
 80032e8:	20006fb0 	.word	0x20006fb0
 80032ec:	200071ac 	.word	0x200071ac
 80032f0:	20006f50 	.word	0x20006f50
 80032f4:	20007058 	.word	0x20007058
 80032f8:	200072ac 	.word	0x200072ac
 80032fc:	20006e08 	.word	0x20006e08

08003300 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	460b      	mov	r3, r1
 800330a:	807b      	strh	r3, [r7, #2]
	Uart_Queue_Struct *queue_arg;
	uint8_t *input_pointer = NULL;
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]
	uint8_t *output_pointer = NULL;
 8003310:	2300      	movs	r3, #0
 8003312:	613b      	str	r3, [r7, #16]
	if (huart->Instance==USART1) {
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a1a      	ldr	r2, [pc, #104]	; (8003384 <HAL_UARTEx_RxEventCallback+0x84>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d105      	bne.n	800332a <HAL_UARTEx_RxEventCallback+0x2a>
		input_pointer = uart_input_buffer[0];
 800331e:	4b1a      	ldr	r3, [pc, #104]	; (8003388 <HAL_UARTEx_RxEventCallback+0x88>)
 8003320:	617b      	str	r3, [r7, #20]
		StartReceive(0);
 8003322:	2000      	movs	r0, #0
 8003324:	f7ff ffa2 	bl	800326c <StartReceive>
 8003328:	e008      	b.n	800333c <HAL_UARTEx_RxEventCallback+0x3c>
	}
	else if(huart->Instance==USART6){
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a17      	ldr	r2, [pc, #92]	; (800338c <HAL_UARTEx_RxEventCallback+0x8c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d120      	bne.n	8003376 <HAL_UARTEx_RxEventCallback+0x76>
		input_pointer = uart_input_buffer[1];
 8003334:	4b16      	ldr	r3, [pc, #88]	; (8003390 <HAL_UARTEx_RxEventCallback+0x90>)
 8003336:	617b      	str	r3, [r7, #20]
		output_pointer = rs_answer;
 8003338:	4b16      	ldr	r3, [pc, #88]	; (8003394 <HAL_UARTEx_RxEventCallback+0x94>)
 800333a:	613b      	str	r3, [r7, #16]

	}
	else return;
	queue_arg = osMailAlloc(uart_queue, 0);
 800333c:	4b16      	ldr	r3, [pc, #88]	; (8003398 <HAL_UARTEx_RxEventCallback+0x98>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2100      	movs	r1, #0
 8003342:	4618      	mov	r0, r3
 8003344:	f007 f8a8 	bl	800a498 <osMailAlloc>
 8003348:	60f8      	str	r0, [r7, #12]
	if(queue_arg==NULL)return;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d014      	beq.n	800337a <HAL_UARTEx_RxEventCallback+0x7a>
	queue_arg->inpit_size = size;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	887a      	ldrh	r2, [r7, #2]
 8003354:	811a      	strh	r2, [r3, #8]
	queue_arg->input_pointer = input_pointer;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	601a      	str	r2, [r3, #0]
	queue_arg->output_pointer = output_pointer;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	605a      	str	r2, [r3, #4]
	queue_arg->huart = huart;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	60da      	str	r2, [r3, #12]
	osMailPut(uart_queue, queue_arg);
 8003368:	4b0b      	ldr	r3, [pc, #44]	; (8003398 <HAL_UARTEx_RxEventCallback+0x98>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68f9      	ldr	r1, [r7, #12]
 800336e:	4618      	mov	r0, r3
 8003370:	f007 f8a8 	bl	800a4c4 <osMailPut>
 8003374:	e002      	b.n	800337c <HAL_UARTEx_RxEventCallback+0x7c>
	else return;
 8003376:	bf00      	nop
 8003378:	e000      	b.n	800337c <HAL_UARTEx_RxEventCallback+0x7c>
	if(queue_arg==NULL)return;
 800337a:	bf00      	nop
}
 800337c:	3718      	adds	r7, #24
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40011000 	.word	0x40011000
 8003388:	200071ac 	.word	0x200071ac
 800338c:	40011400 	.word	0x40011400
 8003390:	200072ac 	.word	0x200072ac
 8003394:	200073ac 	.word	0x200073ac
 8003398:	20006cbc 	.word	0x20006cbc

0800339c <RecognizePacket>:

static int RecognizePacket(Uart_Queue_Struct *request)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
	int result = 0;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60fb      	str	r3, [r7, #12]
	if(request->input_pointer==NULL)return 0;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <RecognizePacket+0x18>
 80033b0:	2300      	movs	r3, #0
 80033b2:	e034      	b.n	800341e <RecognizePacket+0x82>
	if(request->huart->Instance==USART1)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a1b      	ldr	r2, [pc, #108]	; (8003428 <RecognizePacket+0x8c>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d117      	bne.n	80033f0 <RecognizePacket+0x54>
	{
		if(request->inpit_size==6 && *(request->input_pointer)==0x0A && *(request->input_pointer+5)==0x0D)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	891b      	ldrh	r3, [r3, #8]
 80033c4:	2b06      	cmp	r3, #6
 80033c6:	d111      	bne.n	80033ec <RecognizePacket+0x50>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	2b0a      	cmp	r3, #10
 80033d0:	d10c      	bne.n	80033ec <RecognizePacket+0x50>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3305      	adds	r3, #5
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	2b0d      	cmp	r3, #13
 80033dc:	d106      	bne.n	80033ec <RecognizePacket+0x50>
		{
			memcpy(&(meas_data.analog_input),(request->input_pointer)+1,sizeof(float));
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	3301      	adds	r3, #1
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	461a      	mov	r2, r3
 80033e8:	4b10      	ldr	r3, [pc, #64]	; (800342c <RecognizePacket+0x90>)
 80033ea:	605a      	str	r2, [r3, #4]
		}
		return 0;
 80033ec:	2300      	movs	r3, #0
 80033ee:	e016      	b.n	800341e <RecognizePacket+0x82>
	}
	else if (request->huart->Instance==USART6) {
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a0e      	ldr	r2, [pc, #56]	; (8003430 <RecognizePacket+0x94>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d10f      	bne.n	800341c <RecognizePacket+0x80>
		if(request->output_pointer == NULL)return 0;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <RecognizePacket+0x6c>
 8003404:	2300      	movs	r3, #0
 8003406:	e00a      	b.n	800341e <RecognizePacket+0x82>
		result = ModbusParse(request->input_pointer, request->inpit_size, request->output_pointer, RS485);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6818      	ldr	r0, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	8919      	ldrh	r1, [r3, #8]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	2300      	movs	r3, #0
 8003416:	f7fe fe7d 	bl	8002114 <ModbusParse>
 800341a:	60f8      	str	r0, [r7, #12]
	}
	return result;
 800341c:	68fb      	ldr	r3, [r7, #12]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3710      	adds	r7, #16
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	40011000 	.word	0x40011000
 800342c:	2000710c 	.word	0x2000710c
 8003430:	40011400 	.word	0x40011400

08003434 <Transmit>:

static void Transmit(UART_HandleTypeDef *huart, uint8_t *p, uint16_t size)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	4613      	mov	r3, r2
 8003440:	80fb      	strh	r3, [r7, #6]
	if(huart->Instance==USART6)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a0d      	ldr	r2, [pc, #52]	; (800347c <Transmit+0x48>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d112      	bne.n	8003472 <Transmit+0x3e>
	{
		HAL_GPIO_WritePin(RS485_TX_GPIO_Port, RS485_TX_Pin, SET);
 800344c:	2201      	movs	r2, #1
 800344e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003452:	480b      	ldr	r0, [pc, #44]	; (8003480 <Transmit+0x4c>)
 8003454:	f002 fdb4 	bl	8005fc0 <HAL_GPIO_WritePin>
		HAL_UART_Transmit(huart, p, size, 1000);
 8003458:	88fa      	ldrh	r2, [r7, #6]
 800345a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800345e:	68b9      	ldr	r1, [r7, #8]
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f004 fd88 	bl	8007f76 <HAL_UART_Transmit>
		HAL_GPIO_WritePin(RS485_TX_GPIO_Port, RS485_TX_Pin, RESET);
 8003466:	2200      	movs	r2, #0
 8003468:	f44f 7180 	mov.w	r1, #256	; 0x100
 800346c:	4804      	ldr	r0, [pc, #16]	; (8003480 <Transmit+0x4c>)
 800346e:	f002 fda7 	bl	8005fc0 <HAL_GPIO_WritePin>

	}
}
 8003472:	bf00      	nop
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	40011400 	.word	0x40011400
 8003480:	40020800 	.word	0x40020800

08003484 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003484:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003488:	480d      	ldr	r0, [pc, #52]	; (80034c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800348a:	490e      	ldr	r1, [pc, #56]	; (80034c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800348c:	4a0e      	ldr	r2, [pc, #56]	; (80034c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800348e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003490:	e002      	b.n	8003498 <LoopCopyDataInit>

08003492 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003492:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003494:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003496:	3304      	adds	r3, #4

08003498 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003498:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800349a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800349c:	d3f9      	bcc.n	8003492 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800349e:	4a0b      	ldr	r2, [pc, #44]	; (80034cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80034a0:	4c0b      	ldr	r4, [pc, #44]	; (80034d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80034a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034a4:	e001      	b.n	80034aa <LoopFillZerobss>

080034a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034a8:	3204      	adds	r2, #4

080034aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034ac:	d3fb      	bcc.n	80034a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80034ae:	f7ff fe85 	bl	80031bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034b2:	f016 fff5 	bl	801a4a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034b6:	f7fe fa5f 	bl	8001978 <main>
  bx  lr    
 80034ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80034bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80034c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034c4:	20000114 	.word	0x20000114
  ldr r2, =_sidata
 80034c8:	0801f0b0 	.word	0x0801f0b0
  ldr r2, =_sbss
 80034cc:	20000114 	.word	0x20000114
  ldr r4, =_ebss
 80034d0:	2000dd68 	.word	0x2000dd68

080034d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034d4:	e7fe      	b.n	80034d4 <ADC_IRQHandler>

080034d6 <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 80034d6:	b580      	push	{r7, lr}
 80034d8:	b084      	sub	sp, #16
 80034da:	af00      	add	r7, sp, #0
 80034dc:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d104      	bne.n	80034ee <stm32_lock_init+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 80034e4:	b672      	cpsid	i
}
 80034e6:	bf00      	nop
 80034e8:	f7fe fde0 	bl	80020ac <Error_Handler>
 80034ec:	e7fe      	b.n	80034ec <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 80034ee:	2300      	movs	r3, #0
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	e007      	b.n	8003504 <stm32_lock_init+0x2e>
  {
    lock->basepri[i] = 0;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	2100      	movs	r1, #0
 80034fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	3301      	adds	r3, #1
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d9f4      	bls.n	80034f4 <stm32_lock_init+0x1e>
  }
  lock->nesting_level = 0;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	721a      	strb	r2, [r3, #8]
}
 8003510:	bf00      	nop
 8003512:	3710      	adds	r7, #16
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}

08003518 <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b084      	sub	sp, #16
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d104      	bne.n	8003530 <stm32_lock_acquire+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003526:	b672      	cpsid	i
}
 8003528:	bf00      	nop
 800352a:	f7fe fdbf 	bl	80020ac <Error_Handler>
 800352e:	e7fe      	b.n	800352e <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	7a1b      	ldrb	r3, [r3, #8]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d904      	bls.n	8003542 <stm32_lock_acquire+0x2a>
  __ASM volatile ("cpsid i" : : : "memory");
 8003538:	b672      	cpsid	i
}
 800353a:	bf00      	nop
 800353c:	f7fe fdb6 	bl	80020ac <Error_Handler>
 8003540:	e7fe      	b.n	8003540 <stm32_lock_acquire+0x28>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	7a1b      	ldrb	r3, [r3, #8]
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	b2d1      	uxtb	r1, r2
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	7211      	strb	r1, [r2, #8]
 800354e:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003550:	f3ef 8211 	mrs	r2, BASEPRI
 8003554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003558:	f383 8811 	msr	BASEPRI, r3
 800355c:	f3bf 8f6f 	isb	sy
 8003560:	f3bf 8f4f 	dsb	sy
 8003564:	60fa      	str	r2, [r7, #12]
 8003566:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8003570:	bf00      	nop
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b084      	sub	sp, #16
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d104      	bne.n	8003590 <stm32_lock_release+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003586:	b672      	cpsid	i
}
 8003588:	bf00      	nop
 800358a:	f7fe fd8f 	bl	80020ac <Error_Handler>
 800358e:	e7fe      	b.n	800358e <stm32_lock_release+0x16>
  lock->nesting_level--;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	7a1b      	ldrb	r3, [r3, #8]
 8003594:	3b01      	subs	r3, #1
 8003596:	b2da      	uxtb	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	7a1b      	ldrb	r3, [r3, #8]
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d904      	bls.n	80035ae <stm32_lock_release+0x36>
  __ASM volatile ("cpsid i" : : : "memory");
 80035a4:	b672      	cpsid	i
}
 80035a6:	bf00      	nop
 80035a8:	f7fe fd80 	bl	80020ac <Error_Handler>
 80035ac:	e7fe      	b.n	80035ac <stm32_lock_release+0x34>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	7a1b      	ldrb	r3, [r3, #8]
 80035b2:	461a      	mov	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035ba:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80035c2:	bf00      	nop
}
 80035c4:	bf00      	nop
 80035c6:	3710      	adds	r7, #16
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d103      	bne.n	80035e2 <__retarget_lock_init_recursive+0x16>
  {
    errno = EINVAL;
 80035da:	4b0e      	ldr	r3, [pc, #56]	; (8003614 <__retarget_lock_init_recursive+0x48>)
 80035dc:	2216      	movs	r2, #22
 80035de:	601a      	str	r2, [r3, #0]
    return;
 80035e0:	e015      	b.n	800360e <__retarget_lock_init_recursive+0x42>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 80035e2:	200c      	movs	r0, #12
 80035e4:	f016 ff80 	bl	801a4e8 <malloc>
 80035e8:	4603      	mov	r3, r0
 80035ea:	461a      	mov	r2, r3
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <__retarget_lock_init_recursive+0x38>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7ff ff6a 	bl	80034d6 <stm32_lock_init>
    return;
 8003602:	e004      	b.n	800360e <__retarget_lock_init_recursive+0x42>
  __ASM volatile ("cpsid i" : : : "memory");
 8003604:	b672      	cpsid	i
}
 8003606:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8003608:	f7fe fd50 	bl	80020ac <Error_Handler>
 800360c:	e7fe      	b.n	800360c <__retarget_lock_init_recursive+0x40>
}
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	2000dd60 	.word	0x2000dd60

08003618 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d104      	bne.n	8003630 <__retarget_lock_acquire_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003626:	b672      	cpsid	i
}
 8003628:	bf00      	nop
 800362a:	f7fe fd3f 	bl	80020ac <Error_Handler>
 800362e:	e7fe      	b.n	800362e <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff ff70 	bl	8003518 <stm32_lock_acquire>
}
 8003638:	bf00      	nop
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b082      	sub	sp, #8
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d104      	bne.n	8003658 <__retarget_lock_release_recursive+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 800364e:	b672      	cpsid	i
}
 8003650:	bf00      	nop
 8003652:	f7fe fd2b 	bl	80020ac <Error_Handler>
 8003656:	e7fe      	b.n	8003656 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4618      	mov	r0, r3
 800365c:	f7ff ff8c 	bl	8003578 <stm32_lock_release>
}
 8003660:	bf00      	nop
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800366c:	4b0e      	ldr	r3, [pc, #56]	; (80036a8 <HAL_Init+0x40>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a0d      	ldr	r2, [pc, #52]	; (80036a8 <HAL_Init+0x40>)
 8003672:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003676:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003678:	4b0b      	ldr	r3, [pc, #44]	; (80036a8 <HAL_Init+0x40>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a0a      	ldr	r2, [pc, #40]	; (80036a8 <HAL_Init+0x40>)
 800367e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003682:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003684:	4b08      	ldr	r3, [pc, #32]	; (80036a8 <HAL_Init+0x40>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a07      	ldr	r2, [pc, #28]	; (80036a8 <HAL_Init+0x40>)
 800368a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800368e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003690:	2003      	movs	r0, #3
 8003692:	f000 fd04 	bl	800409e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003696:	200f      	movs	r0, #15
 8003698:	f7ff fc10 	bl	8002ebc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800369c:	f7ff f9f2 	bl	8002a84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	40023c00 	.word	0x40023c00

080036ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036ac:	b480      	push	{r7}
 80036ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036b0:	4b06      	ldr	r3, [pc, #24]	; (80036cc <HAL_IncTick+0x20>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	461a      	mov	r2, r3
 80036b6:	4b06      	ldr	r3, [pc, #24]	; (80036d0 <HAL_IncTick+0x24>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4413      	add	r3, r2
 80036bc:	4a04      	ldr	r2, [pc, #16]	; (80036d0 <HAL_IncTick+0x24>)
 80036be:	6013      	str	r3, [r2, #0]
}
 80036c0:	bf00      	nop
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	2000009c 	.word	0x2000009c
 80036d0:	200074ac 	.word	0x200074ac

080036d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  return uwTick;
 80036d8:	4b03      	ldr	r3, [pc, #12]	; (80036e8 <HAL_GetTick+0x14>)
 80036da:	681b      	ldr	r3, [r3, #0]
}
 80036dc:	4618      	mov	r0, r3
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
 80036e6:	bf00      	nop
 80036e8:	200074ac 	.word	0x200074ac

080036ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80036f4:	f7ff ffee 	bl	80036d4 <HAL_GetTick>
 80036f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003704:	d005      	beq.n	8003712 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003706:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <HAL_Delay+0x44>)
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	461a      	mov	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	4413      	add	r3, r2
 8003710:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003712:	bf00      	nop
 8003714:	f7ff ffde 	bl	80036d4 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	68fa      	ldr	r2, [r7, #12]
 8003720:	429a      	cmp	r2, r3
 8003722:	d8f7      	bhi.n	8003714 <HAL_Delay+0x28>
  {
  }
}
 8003724:	bf00      	nop
 8003726:	bf00      	nop
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	2000009c 	.word	0x2000009c

08003734 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800373c:	2300      	movs	r3, #0
 800373e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d101      	bne.n	800374a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	e033      	b.n	80037b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800374e:	2b00      	cmp	r3, #0
 8003750:	d109      	bne.n	8003766 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f7ff f9c2 	bl	8002adc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376a:	f003 0310 	and.w	r3, r3, #16
 800376e:	2b00      	cmp	r3, #0
 8003770:	d118      	bne.n	80037a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003776:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800377a:	f023 0302 	bic.w	r3, r3, #2
 800377e:	f043 0202 	orr.w	r2, r3, #2
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fa5e 	bl	8003c48 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	f023 0303 	bic.w	r3, r3, #3
 800379a:	f043 0201 	orr.w	r2, r3, #1
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	641a      	str	r2, [r3, #64]	; 0x40
 80037a2:	e001      	b.n	80037a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80037b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
	...

080037bc <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d101      	bne.n	80037da <HAL_ADC_Start_DMA+0x1e>
 80037d6:	2302      	movs	r3, #2
 80037d8:	e0e9      	b.n	80039ae <HAL_ADC_Start_DMA+0x1f2>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2201      	movs	r2, #1
 80037de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f003 0301 	and.w	r3, r3, #1
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d018      	beq.n	8003822 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f042 0201 	orr.w	r2, r2, #1
 80037fe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003800:	4b6d      	ldr	r3, [pc, #436]	; (80039b8 <HAL_ADC_Start_DMA+0x1fc>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a6d      	ldr	r2, [pc, #436]	; (80039bc <HAL_ADC_Start_DMA+0x200>)
 8003806:	fba2 2303 	umull	r2, r3, r2, r3
 800380a:	0c9a      	lsrs	r2, r3, #18
 800380c:	4613      	mov	r3, r2
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	4413      	add	r3, r2
 8003812:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003814:	e002      	b.n	800381c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	3b01      	subs	r3, #1
 800381a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1f9      	bne.n	8003816 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800382c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003830:	d107      	bne.n	8003842 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003840:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b01      	cmp	r3, #1
 800384e:	f040 80a1 	bne.w	8003994 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800385a:	f023 0301 	bic.w	r3, r3, #1
 800385e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003870:	2b00      	cmp	r3, #0
 8003872:	d007      	beq.n	8003884 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003878:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800387c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003888:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800388c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003890:	d106      	bne.n	80038a0 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003896:	f023 0206 	bic.w	r2, r3, #6
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	645a      	str	r2, [r3, #68]	; 0x44
 800389e:	e002      	b.n	80038a6 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2200      	movs	r2, #0
 80038a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038ae:	4b44      	ldr	r3, [pc, #272]	; (80039c0 <HAL_ADC_Start_DMA+0x204>)
 80038b0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038b6:	4a43      	ldr	r2, [pc, #268]	; (80039c4 <HAL_ADC_Start_DMA+0x208>)
 80038b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038be:	4a42      	ldr	r2, [pc, #264]	; (80039c8 <HAL_ADC_Start_DMA+0x20c>)
 80038c0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c6:	4a41      	ldr	r2, [pc, #260]	; (80039cc <HAL_ADC_Start_DMA+0x210>)
 80038c8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80038d2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	685a      	ldr	r2, [r3, #4]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80038e2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038f2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	334c      	adds	r3, #76	; 0x4c
 80038fe:	4619      	mov	r1, r3
 8003900:	68ba      	ldr	r2, [r7, #8]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	f000 fcae 	bl	8004264 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	f003 031f 	and.w	r3, r3, #31
 8003910:	2b00      	cmp	r3, #0
 8003912:	d12a      	bne.n	800396a <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a2d      	ldr	r2, [pc, #180]	; (80039d0 <HAL_ADC_Start_DMA+0x214>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d015      	beq.n	800394a <HAL_ADC_Start_DMA+0x18e>
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a2c      	ldr	r2, [pc, #176]	; (80039d4 <HAL_ADC_Start_DMA+0x218>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d105      	bne.n	8003934 <HAL_ADC_Start_DMA+0x178>
 8003928:	4b25      	ldr	r3, [pc, #148]	; (80039c0 <HAL_ADC_Start_DMA+0x204>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 031f 	and.w	r3, r3, #31
 8003930:	2b00      	cmp	r3, #0
 8003932:	d00a      	beq.n	800394a <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a27      	ldr	r2, [pc, #156]	; (80039d8 <HAL_ADC_Start_DMA+0x21c>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d136      	bne.n	80039ac <HAL_ADC_Start_DMA+0x1f0>
 800393e:	4b20      	ldr	r3, [pc, #128]	; (80039c0 <HAL_ADC_Start_DMA+0x204>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	f003 0310 	and.w	r3, r3, #16
 8003946:	2b00      	cmp	r3, #0
 8003948:	d130      	bne.n	80039ac <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d129      	bne.n	80039ac <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689a      	ldr	r2, [r3, #8]
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003966:	609a      	str	r2, [r3, #8]
 8003968:	e020      	b.n	80039ac <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a18      	ldr	r2, [pc, #96]	; (80039d0 <HAL_ADC_Start_DMA+0x214>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d11b      	bne.n	80039ac <HAL_ADC_Start_DMA+0x1f0>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d114      	bne.n	80039ac <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003990:	609a      	str	r2, [r3, #8]
 8003992:	e00b      	b.n	80039ac <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003998:	f043 0210 	orr.w	r2, r3, #16
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a4:	f043 0201 	orr.w	r2, r3, #1
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80039ac:	2300      	movs	r3, #0
}
 80039ae:	4618      	mov	r0, r3
 80039b0:	3718      	adds	r7, #24
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	20000094 	.word	0x20000094
 80039bc:	431bde83 	.word	0x431bde83
 80039c0:	40012300 	.word	0x40012300
 80039c4:	08003e41 	.word	0x08003e41
 80039c8:	08003efb 	.word	0x08003efb
 80039cc:	08003f17 	.word	0x08003f17
 80039d0:	40012000 	.word	0x40012000
 80039d4:	40012100 	.word	0x40012100
 80039d8:	40012200 	.word	0x40012200

080039dc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80039f8:	bf00      	nop
 80039fa:	370c      	adds	r7, #12
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr

08003a04 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d101      	bne.n	8003a20 <HAL_ADC_ConfigChannel+0x1c>
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	e105      	b.n	8003c2c <HAL_ADC_ConfigChannel+0x228>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b09      	cmp	r3, #9
 8003a2e:	d925      	bls.n	8003a7c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68d9      	ldr	r1, [r3, #12]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	461a      	mov	r2, r3
 8003a3e:	4613      	mov	r3, r2
 8003a40:	005b      	lsls	r3, r3, #1
 8003a42:	4413      	add	r3, r2
 8003a44:	3b1e      	subs	r3, #30
 8003a46:	2207      	movs	r2, #7
 8003a48:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4c:	43da      	mvns	r2, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	400a      	ands	r2, r1
 8003a54:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	68d9      	ldr	r1, [r3, #12]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	b29b      	uxth	r3, r3
 8003a66:	4618      	mov	r0, r3
 8003a68:	4603      	mov	r3, r0
 8003a6a:	005b      	lsls	r3, r3, #1
 8003a6c:	4403      	add	r3, r0
 8003a6e:	3b1e      	subs	r3, #30
 8003a70:	409a      	lsls	r2, r3
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	430a      	orrs	r2, r1
 8003a78:	60da      	str	r2, [r3, #12]
 8003a7a:	e022      	b.n	8003ac2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6919      	ldr	r1, [r3, #16]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	461a      	mov	r2, r3
 8003a8a:	4613      	mov	r3, r2
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	4413      	add	r3, r2
 8003a90:	2207      	movs	r2, #7
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	43da      	mvns	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	400a      	ands	r2, r1
 8003a9e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6919      	ldr	r1, [r3, #16]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	689a      	ldr	r2, [r3, #8]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	005b      	lsls	r3, r3, #1
 8003ab6:	4403      	add	r3, r0
 8003ab8:	409a      	lsls	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	2b06      	cmp	r3, #6
 8003ac8:	d824      	bhi.n	8003b14 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4413      	add	r3, r2
 8003ada:	3b05      	subs	r3, #5
 8003adc:	221f      	movs	r2, #31
 8003ade:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae2:	43da      	mvns	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	400a      	ands	r2, r1
 8003aea:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	4618      	mov	r0, r3
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685a      	ldr	r2, [r3, #4]
 8003afe:	4613      	mov	r3, r2
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	4413      	add	r3, r2
 8003b04:	3b05      	subs	r3, #5
 8003b06:	fa00 f203 	lsl.w	r2, r0, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	635a      	str	r2, [r3, #52]	; 0x34
 8003b12:	e04c      	b.n	8003bae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2b0c      	cmp	r3, #12
 8003b1a:	d824      	bhi.n	8003b66 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	4613      	mov	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	3b23      	subs	r3, #35	; 0x23
 8003b2e:	221f      	movs	r2, #31
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	43da      	mvns	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	400a      	ands	r2, r1
 8003b3c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	b29b      	uxth	r3, r3
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	4613      	mov	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	3b23      	subs	r3, #35	; 0x23
 8003b58:	fa00 f203 	lsl.w	r2, r0, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	631a      	str	r2, [r3, #48]	; 0x30
 8003b64:	e023      	b.n	8003bae <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	4613      	mov	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	3b41      	subs	r3, #65	; 0x41
 8003b78:	221f      	movs	r2, #31
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	43da      	mvns	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	400a      	ands	r2, r1
 8003b86:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	b29b      	uxth	r3, r3
 8003b94:	4618      	mov	r0, r3
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	4413      	add	r3, r2
 8003ba0:	3b41      	subs	r3, #65	; 0x41
 8003ba2:	fa00 f203 	lsl.w	r2, r0, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bae:	4b22      	ldr	r3, [pc, #136]	; (8003c38 <HAL_ADC_ConfigChannel+0x234>)
 8003bb0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a21      	ldr	r2, [pc, #132]	; (8003c3c <HAL_ADC_ConfigChannel+0x238>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d109      	bne.n	8003bd0 <HAL_ADC_ConfigChannel+0x1cc>
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2b12      	cmp	r3, #18
 8003bc2:	d105      	bne.n	8003bd0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a19      	ldr	r2, [pc, #100]	; (8003c3c <HAL_ADC_ConfigChannel+0x238>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d123      	bne.n	8003c22 <HAL_ADC_ConfigChannel+0x21e>
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2b10      	cmp	r3, #16
 8003be0:	d003      	beq.n	8003bea <HAL_ADC_ConfigChannel+0x1e6>
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	2b11      	cmp	r3, #17
 8003be8:	d11b      	bne.n	8003c22 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2b10      	cmp	r3, #16
 8003bfc:	d111      	bne.n	8003c22 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003bfe:	4b10      	ldr	r3, [pc, #64]	; (8003c40 <HAL_ADC_ConfigChannel+0x23c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a10      	ldr	r2, [pc, #64]	; (8003c44 <HAL_ADC_ConfigChannel+0x240>)
 8003c04:	fba2 2303 	umull	r2, r3, r2, r3
 8003c08:	0c9a      	lsrs	r2, r3, #18
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c14:	e002      	b.n	8003c1c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	3b01      	subs	r3, #1
 8003c1a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d1f9      	bne.n	8003c16 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	40012300 	.word	0x40012300
 8003c3c:	40012000 	.word	0x40012000
 8003c40:	20000094 	.word	0x20000094
 8003c44:	431bde83 	.word	0x431bde83

08003c48 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b085      	sub	sp, #20
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c50:	4b79      	ldr	r3, [pc, #484]	; (8003e38 <ADC_Init+0x1f0>)
 8003c52:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6859      	ldr	r1, [r3, #4]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	021a      	lsls	r2, r3, #8
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	430a      	orrs	r2, r1
 8003c90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003ca0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6859      	ldr	r1, [r3, #4]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	689a      	ldr	r2, [r3, #8]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6899      	ldr	r1, [r3, #8]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	68da      	ldr	r2, [r3, #12]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	430a      	orrs	r2, r1
 8003cd4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cda:	4a58      	ldr	r2, [pc, #352]	; (8003e3c <ADC_Init+0x1f4>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d022      	beq.n	8003d26 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	689a      	ldr	r2, [r3, #8]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003cee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	6899      	ldr	r1, [r3, #8]
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d10:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	6899      	ldr	r1, [r3, #8]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	430a      	orrs	r2, r1
 8003d22:	609a      	str	r2, [r3, #8]
 8003d24:	e00f      	b.n	8003d46 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d34:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d44:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	689a      	ldr	r2, [r3, #8]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 0202 	bic.w	r2, r2, #2
 8003d54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	6899      	ldr	r1, [r3, #8]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	7e1b      	ldrb	r3, [r3, #24]
 8003d60:	005a      	lsls	r2, r3, #1
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	430a      	orrs	r2, r1
 8003d68:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d01b      	beq.n	8003dac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	685a      	ldr	r2, [r3, #4]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d82:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003d92:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	6859      	ldr	r1, [r3, #4]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	035a      	lsls	r2, r3, #13
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	605a      	str	r2, [r3, #4]
 8003daa:	e007      	b.n	8003dbc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003dca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69db      	ldr	r3, [r3, #28]
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	051a      	lsls	r2, r3, #20
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003df0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	6899      	ldr	r1, [r3, #8]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003dfe:	025a      	lsls	r2, r3, #9
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689a      	ldr	r2, [r3, #8]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e16:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6899      	ldr	r1, [r3, #8]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	029a      	lsls	r2, r3, #10
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	609a      	str	r2, [r3, #8]
}
 8003e2c:	bf00      	nop
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr
 8003e38:	40012300 	.word	0x40012300
 8003e3c:	0f000001 	.word	0x0f000001

08003e40 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e4c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d13c      	bne.n	8003ed4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d12b      	bne.n	8003ecc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d127      	bne.n	8003ecc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e82:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d006      	beq.n	8003e98 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d119      	bne.n	8003ecc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f022 0220 	bic.w	r2, r2, #32
 8003ea6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d105      	bne.n	8003ecc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec4:	f043 0201 	orr.w	r2, r3, #1
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f7fc fb5d 	bl	800058c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003ed2:	e00e      	b.n	8003ef2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	f003 0310 	and.w	r3, r3, #16
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d003      	beq.n	8003ee8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f7ff fd85 	bl	80039f0 <HAL_ADC_ErrorCallback>
}
 8003ee6:	e004      	b.n	8003ef2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	4798      	blx	r3
}
 8003ef2:	bf00      	nop
 8003ef4:	3710      	adds	r7, #16
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd80      	pop	{r7, pc}

08003efa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003efa:	b580      	push	{r7, lr}
 8003efc:	b084      	sub	sp, #16
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f06:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003f08:	68f8      	ldr	r0, [r7, #12]
 8003f0a:	f7ff fd67 	bl	80039dc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f0e:	bf00      	nop
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b084      	sub	sp, #16
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f22:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	2240      	movs	r2, #64	; 0x40
 8003f28:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f2e:	f043 0204 	orr.w	r2, r3, #4
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f7ff fd5a 	bl	80039f0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f3c:	bf00      	nop
 8003f3e:	3710      	adds	r7, #16
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}

08003f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b085      	sub	sp, #20
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f54:	4b0c      	ldr	r3, [pc, #48]	; (8003f88 <__NVIC_SetPriorityGrouping+0x44>)
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f5a:	68ba      	ldr	r2, [r7, #8]
 8003f5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f60:	4013      	ands	r3, r2
 8003f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f76:	4a04      	ldr	r2, [pc, #16]	; (8003f88 <__NVIC_SetPriorityGrouping+0x44>)
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	60d3      	str	r3, [r2, #12]
}
 8003f7c:	bf00      	nop
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	e000ed00 	.word	0xe000ed00

08003f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f90:	4b04      	ldr	r3, [pc, #16]	; (8003fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	0a1b      	lsrs	r3, r3, #8
 8003f96:	f003 0307 	and.w	r3, r3, #7
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr
 8003fa4:	e000ed00 	.word	0xe000ed00

08003fa8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	4603      	mov	r3, r0
 8003fb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	db0b      	blt.n	8003fd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fba:	79fb      	ldrb	r3, [r7, #7]
 8003fbc:	f003 021f 	and.w	r2, r3, #31
 8003fc0:	4907      	ldr	r1, [pc, #28]	; (8003fe0 <__NVIC_EnableIRQ+0x38>)
 8003fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc6:	095b      	lsrs	r3, r3, #5
 8003fc8:	2001      	movs	r0, #1
 8003fca:	fa00 f202 	lsl.w	r2, r0, r2
 8003fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003fd2:	bf00      	nop
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr
 8003fde:	bf00      	nop
 8003fe0:	e000e100 	.word	0xe000e100

08003fe4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	4603      	mov	r3, r0
 8003fec:	6039      	str	r1, [r7, #0]
 8003fee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ff0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	db0a      	blt.n	800400e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	b2da      	uxtb	r2, r3
 8003ffc:	490c      	ldr	r1, [pc, #48]	; (8004030 <__NVIC_SetPriority+0x4c>)
 8003ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004002:	0112      	lsls	r2, r2, #4
 8004004:	b2d2      	uxtb	r2, r2
 8004006:	440b      	add	r3, r1
 8004008:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800400c:	e00a      	b.n	8004024 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	b2da      	uxtb	r2, r3
 8004012:	4908      	ldr	r1, [pc, #32]	; (8004034 <__NVIC_SetPriority+0x50>)
 8004014:	79fb      	ldrb	r3, [r7, #7]
 8004016:	f003 030f 	and.w	r3, r3, #15
 800401a:	3b04      	subs	r3, #4
 800401c:	0112      	lsls	r2, r2, #4
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	440b      	add	r3, r1
 8004022:	761a      	strb	r2, [r3, #24]
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr
 8004030:	e000e100 	.word	0xe000e100
 8004034:	e000ed00 	.word	0xe000ed00

08004038 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004038:	b480      	push	{r7}
 800403a:	b089      	sub	sp, #36	; 0x24
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f003 0307 	and.w	r3, r3, #7
 800404a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	f1c3 0307 	rsb	r3, r3, #7
 8004052:	2b04      	cmp	r3, #4
 8004054:	bf28      	it	cs
 8004056:	2304      	movcs	r3, #4
 8004058:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	3304      	adds	r3, #4
 800405e:	2b06      	cmp	r3, #6
 8004060:	d902      	bls.n	8004068 <NVIC_EncodePriority+0x30>
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	3b03      	subs	r3, #3
 8004066:	e000      	b.n	800406a <NVIC_EncodePriority+0x32>
 8004068:	2300      	movs	r3, #0
 800406a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800406c:	f04f 32ff 	mov.w	r2, #4294967295
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	fa02 f303 	lsl.w	r3, r2, r3
 8004076:	43da      	mvns	r2, r3
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	401a      	ands	r2, r3
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004080:	f04f 31ff 	mov.w	r1, #4294967295
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	fa01 f303 	lsl.w	r3, r1, r3
 800408a:	43d9      	mvns	r1, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004090:	4313      	orrs	r3, r2
         );
}
 8004092:	4618      	mov	r0, r3
 8004094:	3724      	adds	r7, #36	; 0x24
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b082      	sub	sp, #8
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7ff ff4c 	bl	8003f44 <__NVIC_SetPriorityGrouping>
}
 80040ac:	bf00      	nop
 80040ae:	3708      	adds	r7, #8
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	4603      	mov	r3, r0
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
 80040c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80040c2:	2300      	movs	r3, #0
 80040c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80040c6:	f7ff ff61 	bl	8003f8c <__NVIC_GetPriorityGrouping>
 80040ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	68b9      	ldr	r1, [r7, #8]
 80040d0:	6978      	ldr	r0, [r7, #20]
 80040d2:	f7ff ffb1 	bl	8004038 <NVIC_EncodePriority>
 80040d6:	4602      	mov	r2, r0
 80040d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040dc:	4611      	mov	r1, r2
 80040de:	4618      	mov	r0, r3
 80040e0:	f7ff ff80 	bl	8003fe4 <__NVIC_SetPriority>
}
 80040e4:	bf00      	nop
 80040e6:	3718      	adds	r7, #24
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	4603      	mov	r3, r0
 80040f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f7ff ff54 	bl	8003fa8 <__NVIC_EnableIRQ>
}
 8004100:	bf00      	nop
 8004102:	3708      	adds	r7, #8
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004110:	2300      	movs	r3, #0
 8004112:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004114:	f7ff fade 	bl	80036d4 <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d101      	bne.n	8004124 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e099      	b.n	8004258 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f022 0201 	bic.w	r2, r2, #1
 8004142:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004144:	e00f      	b.n	8004166 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004146:	f7ff fac5 	bl	80036d4 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b05      	cmp	r3, #5
 8004152:	d908      	bls.n	8004166 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2220      	movs	r2, #32
 8004158:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2203      	movs	r2, #3
 800415e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e078      	b.n	8004258 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0301 	and.w	r3, r3, #1
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1e8      	bne.n	8004146 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	4b38      	ldr	r3, [pc, #224]	; (8004260 <HAL_DMA_Init+0x158>)
 8004180:	4013      	ands	r3, r2
 8004182:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004192:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691b      	ldr	r3, [r3, #16]
 8004198:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800419e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80041aa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041bc:	2b04      	cmp	r3, #4
 80041be:	d107      	bne.n	80041d0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c8:	4313      	orrs	r3, r2
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	f023 0307 	bic.w	r3, r3, #7
 80041e6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	2b04      	cmp	r3, #4
 80041f8:	d117      	bne.n	800422a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	4313      	orrs	r3, r2
 8004202:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00e      	beq.n	800422a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f000 fb01 	bl	8004814 <DMA_CheckFifoParam>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d008      	beq.n	800422a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2240      	movs	r2, #64	; 0x40
 800421c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004226:	2301      	movs	r3, #1
 8004228:	e016      	b.n	8004258 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 fab8 	bl	80047a8 <DMA_CalcBaseAndBitshift>
 8004238:	4603      	mov	r3, r0
 800423a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004240:	223f      	movs	r2, #63	; 0x3f
 8004242:	409a      	lsls	r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2200      	movs	r2, #0
 800424c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2201      	movs	r2, #1
 8004252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004256:	2300      	movs	r3, #0
}
 8004258:	4618      	mov	r0, r3
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}
 8004260:	f010803f 	.word	0xf010803f

08004264 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
 8004270:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004272:	2300      	movs	r3, #0
 8004274:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004282:	2b01      	cmp	r3, #1
 8004284:	d101      	bne.n	800428a <HAL_DMA_Start_IT+0x26>
 8004286:	2302      	movs	r3, #2
 8004288:	e040      	b.n	800430c <HAL_DMA_Start_IT+0xa8>
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004298:	b2db      	uxtb	r3, r3
 800429a:	2b01      	cmp	r3, #1
 800429c:	d12f      	bne.n	80042fe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2202      	movs	r2, #2
 80042a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	68b9      	ldr	r1, [r7, #8]
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f000 fa4a 	bl	800474c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042bc:	223f      	movs	r2, #63	; 0x3f
 80042be:	409a      	lsls	r2, r3
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f042 0216 	orr.w	r2, r2, #22
 80042d2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d007      	beq.n	80042ec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f042 0208 	orr.w	r2, r2, #8
 80042ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f042 0201 	orr.w	r2, r2, #1
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	e005      	b.n	800430a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2200      	movs	r2, #0
 8004302:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004306:	2302      	movs	r3, #2
 8004308:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800430a:	7dfb      	ldrb	r3, [r7, #23]
}
 800430c:	4618      	mov	r0, r3
 800430e:	3718      	adds	r7, #24
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004320:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004322:	f7ff f9d7 	bl	80036d4 <HAL_GetTick>
 8004326:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800432e:	b2db      	uxtb	r3, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d008      	beq.n	8004346 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2280      	movs	r2, #128	; 0x80
 8004338:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e052      	b.n	80043ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0216 	bic.w	r2, r2, #22
 8004354:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	695a      	ldr	r2, [r3, #20]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004364:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	2b00      	cmp	r3, #0
 800436c:	d103      	bne.n	8004376 <HAL_DMA_Abort+0x62>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004372:	2b00      	cmp	r3, #0
 8004374:	d007      	beq.n	8004386 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f022 0208 	bic.w	r2, r2, #8
 8004384:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f022 0201 	bic.w	r2, r2, #1
 8004394:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004396:	e013      	b.n	80043c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004398:	f7ff f99c 	bl	80036d4 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b05      	cmp	r3, #5
 80043a4:	d90c      	bls.n	80043c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2220      	movs	r2, #32
 80043aa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2203      	movs	r2, #3
 80043b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e015      	b.n	80043ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d1e4      	bne.n	8004398 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d2:	223f      	movs	r2, #63	; 0x3f
 80043d4:	409a      	lsls	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2201      	movs	r2, #1
 80043de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b083      	sub	sp, #12
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004402:	b2db      	uxtb	r3, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d004      	beq.n	8004412 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2280      	movs	r2, #128	; 0x80
 800440c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e00c      	b.n	800442c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2205      	movs	r2, #5
 8004416:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 0201 	bic.w	r2, r2, #1
 8004428:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr

08004438 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004440:	2300      	movs	r3, #0
 8004442:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004444:	4b92      	ldr	r3, [pc, #584]	; (8004690 <HAL_DMA_IRQHandler+0x258>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a92      	ldr	r2, [pc, #584]	; (8004694 <HAL_DMA_IRQHandler+0x25c>)
 800444a:	fba2 2303 	umull	r2, r3, r2, r3
 800444e:	0a9b      	lsrs	r3, r3, #10
 8004450:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004456:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004462:	2208      	movs	r2, #8
 8004464:	409a      	lsls	r2, r3
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	4013      	ands	r3, r2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d01a      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b00      	cmp	r3, #0
 800447a:	d013      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f022 0204 	bic.w	r2, r2, #4
 800448a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004490:	2208      	movs	r2, #8
 8004492:	409a      	lsls	r2, r3
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449c:	f043 0201 	orr.w	r2, r3, #1
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a8:	2201      	movs	r2, #1
 80044aa:	409a      	lsls	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4013      	ands	r3, r2
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d012      	beq.n	80044da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d00b      	beq.n	80044da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044c6:	2201      	movs	r2, #1
 80044c8:	409a      	lsls	r2, r3
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d2:	f043 0202 	orr.w	r2, r3, #2
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044de:	2204      	movs	r2, #4
 80044e0:	409a      	lsls	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	4013      	ands	r3, r2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d012      	beq.n	8004510 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00b      	beq.n	8004510 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044fc:	2204      	movs	r2, #4
 80044fe:	409a      	lsls	r2, r3
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004508:	f043 0204 	orr.w	r2, r3, #4
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004514:	2210      	movs	r2, #16
 8004516:	409a      	lsls	r2, r3
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4013      	ands	r3, r2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d043      	beq.n	80045a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 0308 	and.w	r3, r3, #8
 800452a:	2b00      	cmp	r3, #0
 800452c:	d03c      	beq.n	80045a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004532:	2210      	movs	r2, #16
 8004534:	409a      	lsls	r2, r3
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004544:	2b00      	cmp	r3, #0
 8004546:	d018      	beq.n	800457a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004552:	2b00      	cmp	r3, #0
 8004554:	d108      	bne.n	8004568 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800455a:	2b00      	cmp	r3, #0
 800455c:	d024      	beq.n	80045a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	4798      	blx	r3
 8004566:	e01f      	b.n	80045a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800456c:	2b00      	cmp	r3, #0
 800456e:	d01b      	beq.n	80045a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004574:	6878      	ldr	r0, [r7, #4]
 8004576:	4798      	blx	r3
 8004578:	e016      	b.n	80045a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004584:	2b00      	cmp	r3, #0
 8004586:	d107      	bne.n	8004598 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 0208 	bic.w	r2, r2, #8
 8004596:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459c:	2b00      	cmp	r3, #0
 800459e:	d003      	beq.n	80045a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ac:	2220      	movs	r2, #32
 80045ae:	409a      	lsls	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4013      	ands	r3, r2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	f000 808e 	beq.w	80046d6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0310 	and.w	r3, r3, #16
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f000 8086 	beq.w	80046d6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ce:	2220      	movs	r2, #32
 80045d0:	409a      	lsls	r2, r3
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	2b05      	cmp	r3, #5
 80045e0:	d136      	bne.n	8004650 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0216 	bic.w	r2, r2, #22
 80045f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	695a      	ldr	r2, [r3, #20]
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004600:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004606:	2b00      	cmp	r3, #0
 8004608:	d103      	bne.n	8004612 <HAL_DMA_IRQHandler+0x1da>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800460e:	2b00      	cmp	r3, #0
 8004610:	d007      	beq.n	8004622 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 0208 	bic.w	r2, r2, #8
 8004620:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004626:	223f      	movs	r2, #63	; 0x3f
 8004628:	409a      	lsls	r2, r3
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004642:	2b00      	cmp	r3, #0
 8004644:	d07d      	beq.n	8004742 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	4798      	blx	r3
        }
        return;
 800464e:	e078      	b.n	8004742 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d01c      	beq.n	8004698 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d108      	bne.n	800467e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004670:	2b00      	cmp	r3, #0
 8004672:	d030      	beq.n	80046d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004678:	6878      	ldr	r0, [r7, #4]
 800467a:	4798      	blx	r3
 800467c:	e02b      	b.n	80046d6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004682:	2b00      	cmp	r3, #0
 8004684:	d027      	beq.n	80046d6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	4798      	blx	r3
 800468e:	e022      	b.n	80046d6 <HAL_DMA_IRQHandler+0x29e>
 8004690:	20000094 	.word	0x20000094
 8004694:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d10f      	bne.n	80046c6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 0210 	bic.w	r2, r2, #16
 80046b4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2201      	movs	r2, #1
 80046ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d2:	6878      	ldr	r0, [r7, #4]
 80046d4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d032      	beq.n	8004744 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d022      	beq.n	8004730 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2205      	movs	r2, #5
 80046ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f022 0201 	bic.w	r2, r2, #1
 8004700:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	3301      	adds	r3, #1
 8004706:	60bb      	str	r3, [r7, #8]
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	429a      	cmp	r2, r3
 800470c:	d307      	bcc.n	800471e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1f2      	bne.n	8004702 <HAL_DMA_IRQHandler+0x2ca>
 800471c:	e000      	b.n	8004720 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800471e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004734:	2b00      	cmp	r3, #0
 8004736:	d005      	beq.n	8004744 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	4798      	blx	r3
 8004740:	e000      	b.n	8004744 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004742:	bf00      	nop
    }
  }
}
 8004744:	3718      	adds	r7, #24
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop

0800474c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800474c:	b480      	push	{r7}
 800474e:	b085      	sub	sp, #20
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
 8004758:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681a      	ldr	r2, [r3, #0]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004768:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	2b40      	cmp	r3, #64	; 0x40
 8004778:	d108      	bne.n	800478c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800478a:	e007      	b.n	800479c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68ba      	ldr	r2, [r7, #8]
 8004792:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	687a      	ldr	r2, [r7, #4]
 800479a:	60da      	str	r2, [r3, #12]
}
 800479c:	bf00      	nop
 800479e:	3714      	adds	r7, #20
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b085      	sub	sp, #20
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	3b10      	subs	r3, #16
 80047b8:	4a14      	ldr	r2, [pc, #80]	; (800480c <DMA_CalcBaseAndBitshift+0x64>)
 80047ba:	fba2 2303 	umull	r2, r3, r2, r3
 80047be:	091b      	lsrs	r3, r3, #4
 80047c0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80047c2:	4a13      	ldr	r2, [pc, #76]	; (8004810 <DMA_CalcBaseAndBitshift+0x68>)
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	4413      	add	r3, r2
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	461a      	mov	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2b03      	cmp	r3, #3
 80047d4:	d909      	bls.n	80047ea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80047de:	f023 0303 	bic.w	r3, r3, #3
 80047e2:	1d1a      	adds	r2, r3, #4
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	659a      	str	r2, [r3, #88]	; 0x58
 80047e8:	e007      	b.n	80047fa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80047f2:	f023 0303 	bic.w	r3, r3, #3
 80047f6:	687a      	ldr	r2, [r7, #4]
 80047f8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3714      	adds	r7, #20
 8004802:	46bd      	mov	sp, r7
 8004804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	aaaaaaab 	.word	0xaaaaaaab
 8004810:	0801ee1c 	.word	0x0801ee1c

08004814 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800481c:	2300      	movs	r3, #0
 800481e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004824:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d11f      	bne.n	800486e <DMA_CheckFifoParam+0x5a>
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	2b03      	cmp	r3, #3
 8004832:	d856      	bhi.n	80048e2 <DMA_CheckFifoParam+0xce>
 8004834:	a201      	add	r2, pc, #4	; (adr r2, 800483c <DMA_CheckFifoParam+0x28>)
 8004836:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483a:	bf00      	nop
 800483c:	0800484d 	.word	0x0800484d
 8004840:	0800485f 	.word	0x0800485f
 8004844:	0800484d 	.word	0x0800484d
 8004848:	080048e3 	.word	0x080048e3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004850:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d046      	beq.n	80048e6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800485c:	e043      	b.n	80048e6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004862:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004866:	d140      	bne.n	80048ea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800486c:	e03d      	b.n	80048ea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004876:	d121      	bne.n	80048bc <DMA_CheckFifoParam+0xa8>
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	2b03      	cmp	r3, #3
 800487c:	d837      	bhi.n	80048ee <DMA_CheckFifoParam+0xda>
 800487e:	a201      	add	r2, pc, #4	; (adr r2, 8004884 <DMA_CheckFifoParam+0x70>)
 8004880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004884:	08004895 	.word	0x08004895
 8004888:	0800489b 	.word	0x0800489b
 800488c:	08004895 	.word	0x08004895
 8004890:	080048ad 	.word	0x080048ad
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	73fb      	strb	r3, [r7, #15]
      break;
 8004898:	e030      	b.n	80048fc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d025      	beq.n	80048f2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80048aa:	e022      	b.n	80048f2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80048b4:	d11f      	bne.n	80048f6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80048ba:	e01c      	b.n	80048f6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	2b02      	cmp	r3, #2
 80048c0:	d903      	bls.n	80048ca <DMA_CheckFifoParam+0xb6>
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	2b03      	cmp	r3, #3
 80048c6:	d003      	beq.n	80048d0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80048c8:	e018      	b.n	80048fc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	73fb      	strb	r3, [r7, #15]
      break;
 80048ce:	e015      	b.n	80048fc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d00e      	beq.n	80048fa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	73fb      	strb	r3, [r7, #15]
      break;
 80048e0:	e00b      	b.n	80048fa <DMA_CheckFifoParam+0xe6>
      break;
 80048e2:	bf00      	nop
 80048e4:	e00a      	b.n	80048fc <DMA_CheckFifoParam+0xe8>
      break;
 80048e6:	bf00      	nop
 80048e8:	e008      	b.n	80048fc <DMA_CheckFifoParam+0xe8>
      break;
 80048ea:	bf00      	nop
 80048ec:	e006      	b.n	80048fc <DMA_CheckFifoParam+0xe8>
      break;
 80048ee:	bf00      	nop
 80048f0:	e004      	b.n	80048fc <DMA_CheckFifoParam+0xe8>
      break;
 80048f2:	bf00      	nop
 80048f4:	e002      	b.n	80048fc <DMA_CheckFifoParam+0xe8>
      break;   
 80048f6:	bf00      	nop
 80048f8:	e000      	b.n	80048fc <DMA_CheckFifoParam+0xe8>
      break;
 80048fa:	bf00      	nop
    }
  } 
  
  return status; 
 80048fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3714      	adds	r7, #20
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop

0800490c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b088      	sub	sp, #32
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	61fb      	str	r3, [r7, #28]
 8004918:	2300      	movs	r3, #0
 800491a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 800491c:	4baa      	ldr	r3, [pc, #680]	; (8004bc8 <HAL_ETH_Init+0x2bc>)
 800491e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8004924:	2300      	movs	r3, #0
 8004926:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d101      	bne.n	8004932 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e183      	b.n	8004c3a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d106      	bne.n	800494c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2200      	movs	r2, #0
 8004942:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f004 fd98 	bl	800947c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800494c:	2300      	movs	r3, #0
 800494e:	60bb      	str	r3, [r7, #8]
 8004950:	4b9e      	ldr	r3, [pc, #632]	; (8004bcc <HAL_ETH_Init+0x2c0>)
 8004952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004954:	4a9d      	ldr	r2, [pc, #628]	; (8004bcc <HAL_ETH_Init+0x2c0>)
 8004956:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800495a:	6453      	str	r3, [r2, #68]	; 0x44
 800495c:	4b9b      	ldr	r3, [pc, #620]	; (8004bcc <HAL_ETH_Init+0x2c0>)
 800495e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004960:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004964:	60bb      	str	r3, [r7, #8]
 8004966:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004968:	4b99      	ldr	r3, [pc, #612]	; (8004bd0 <HAL_ETH_Init+0x2c4>)
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	4a98      	ldr	r2, [pc, #608]	; (8004bd0 <HAL_ETH_Init+0x2c4>)
 800496e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004972:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004974:	4b96      	ldr	r3, [pc, #600]	; (8004bd0 <HAL_ETH_Init+0x2c4>)
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	4994      	ldr	r1, [pc, #592]	; (8004bd0 <HAL_ETH_Init+0x2c4>)
 800497e:	4313      	orrs	r3, r2
 8004980:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f042 0201 	orr.w	r2, r2, #1
 8004994:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004998:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800499a:	f7fe fe9b 	bl	80036d4 <HAL_GetTick>
 800499e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80049a0:	e011      	b.n	80049c6 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80049a2:	f7fe fe97 	bl	80036d4 <HAL_GetTick>
 80049a6:	4602      	mov	r2, r0
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	1ad3      	subs	r3, r2, r3
 80049ac:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80049b0:	d909      	bls.n	80049c6 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2203      	movs	r2, #3
 80049b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e139      	b.n	8004c3a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1e4      	bne.n	80049a2 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	f023 031c 	bic.w	r3, r3, #28
 80049e6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80049e8:	f001 ff80 	bl	80068ec <HAL_RCC_GetHCLKFreq>
 80049ec:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	4a78      	ldr	r2, [pc, #480]	; (8004bd4 <HAL_ETH_Init+0x2c8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d908      	bls.n	8004a08 <HAL_ETH_Init+0xfc>
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	4a77      	ldr	r2, [pc, #476]	; (8004bd8 <HAL_ETH_Init+0x2cc>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d804      	bhi.n	8004a08 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	f043 0308 	orr.w	r3, r3, #8
 8004a04:	61fb      	str	r3, [r7, #28]
 8004a06:	e027      	b.n	8004a58 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	4a73      	ldr	r2, [pc, #460]	; (8004bd8 <HAL_ETH_Init+0x2cc>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d908      	bls.n	8004a22 <HAL_ETH_Init+0x116>
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	4a6d      	ldr	r2, [pc, #436]	; (8004bc8 <HAL_ETH_Init+0x2bc>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d204      	bcs.n	8004a22 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8004a18:	69fb      	ldr	r3, [r7, #28]
 8004a1a:	f043 030c 	orr.w	r3, r3, #12
 8004a1e:	61fb      	str	r3, [r7, #28]
 8004a20:	e01a      	b.n	8004a58 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	4a68      	ldr	r2, [pc, #416]	; (8004bc8 <HAL_ETH_Init+0x2bc>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d303      	bcc.n	8004a32 <HAL_ETH_Init+0x126>
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	4a6b      	ldr	r2, [pc, #428]	; (8004bdc <HAL_ETH_Init+0x2d0>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d911      	bls.n	8004a56 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	4a69      	ldr	r2, [pc, #420]	; (8004bdc <HAL_ETH_Init+0x2d0>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d908      	bls.n	8004a4c <HAL_ETH_Init+0x140>
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	4a68      	ldr	r2, [pc, #416]	; (8004be0 <HAL_ETH_Init+0x2d4>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d804      	bhi.n	8004a4c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	f043 0304 	orr.w	r3, r3, #4
 8004a48:	61fb      	str	r3, [r7, #28]
 8004a4a:	e005      	b.n	8004a58 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	f043 0310 	orr.w	r3, r3, #16
 8004a52:	61fb      	str	r3, [r7, #28]
 8004a54:	e000      	b.n	8004a58 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8004a56:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	69fa      	ldr	r2, [r7, #28]
 8004a5e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8004a60:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004a64:	2100      	movs	r1, #0
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fc17 	bl	800529a <HAL_ETH_WritePHYRegister>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00b      	beq.n	8004a8a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8004a76:	6939      	ldr	r1, [r7, #16]
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 fdcd 	bl	8005618 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	e0d7      	b.n	8004c3a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8004a8a:	20ff      	movs	r0, #255	; 0xff
 8004a8c:	f7fe fe2e 	bl	80036ec <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 80a5 	beq.w	8004be4 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8004a9a:	f7fe fe1b 	bl	80036d4 <HAL_GetTick>
 8004a9e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004aa0:	f107 030c 	add.w	r3, r7, #12
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	2101      	movs	r1, #1
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 fb8e 	bl	80051ca <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8004aae:	f7fe fe11 	bl	80036d4 <HAL_GetTick>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	1ad3      	subs	r3, r2, r3
 8004ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d90f      	bls.n	8004ae0 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004ac4:	6939      	ldr	r1, [r7, #16]
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 fda6 	bl	8005618 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e0ac      	b.n	8004c3a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f003 0304 	and.w	r3, r3, #4
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d0da      	beq.n	8004aa0 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8004aea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004aee:	2100      	movs	r1, #0
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f000 fbd2 	bl	800529a <HAL_ETH_WritePHYRegister>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00b      	beq.n	8004b14 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004b00:	6939      	ldr	r1, [r7, #16]
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 fd88 	bl	8005618 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004b10:	2301      	movs	r3, #1
 8004b12:	e092      	b.n	8004c3a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b14:	f7fe fdde 	bl	80036d4 <HAL_GetTick>
 8004b18:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8004b1a:	f107 030c 	add.w	r3, r7, #12
 8004b1e:	461a      	mov	r2, r3
 8004b20:	2101      	movs	r1, #1
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 fb51 	bl	80051ca <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8004b28:	f7fe fdd4 	bl	80036d4 <HAL_GetTick>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d90f      	bls.n	8004b5a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8004b3e:	6939      	ldr	r1, [r7, #16]
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 fd69 	bl	8005618 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e06f      	b.n	8004c3a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f003 0320 	and.w	r3, r3, #32
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d0da      	beq.n	8004b1a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8004b64:	f107 030c 	add.w	r3, r7, #12
 8004b68:	461a      	mov	r2, r3
 8004b6a:	2110      	movs	r1, #16
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f000 fb2c 	bl	80051ca <HAL_ETH_ReadPHYRegister>
 8004b72:	4603      	mov	r3, r0
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00b      	beq.n	8004b90 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004b7c:	6939      	ldr	r1, [r7, #16]
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 fd4a 	bl	8005618 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e054      	b.n	8004c3a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f003 0304 	and.w	r3, r3, #4
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d004      	beq.n	8004ba4 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ba0:	60da      	str	r2, [r3, #12]
 8004ba2:	e002      	b.n	8004baa <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d003      	beq.n	8004bbc <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	609a      	str	r2, [r3, #8]
 8004bba:	e035      	b.n	8004c28 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004bc2:	609a      	str	r2, [r3, #8]
 8004bc4:	e030      	b.n	8004c28 <HAL_ETH_Init+0x31c>
 8004bc6:	bf00      	nop
 8004bc8:	03938700 	.word	0x03938700
 8004bcc:	40023800 	.word	0x40023800
 8004bd0:	40013800 	.word	0x40013800
 8004bd4:	01312cff 	.word	0x01312cff
 8004bd8:	02160ebf 	.word	0x02160ebf
 8004bdc:	05f5e0ff 	.word	0x05f5e0ff
 8004be0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	08db      	lsrs	r3, r3, #3
 8004bea:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	085b      	lsrs	r3, r3, #1
 8004bf2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	461a      	mov	r2, r3
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f000 fb4c 	bl	800529a <HAL_ETH_WritePHYRegister>
 8004c02:	4603      	mov	r3, r0
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d00b      	beq.n	8004c20 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8004c0c:	6939      	ldr	r1, [r7, #16]
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 fd02 	bl	8005618 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	e00c      	b.n	8004c3a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8004c20:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004c24:	f7fe fd62 	bl	80036ec <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8004c28:	6939      	ldr	r1, [r7, #16]
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f000 fcf4 	bl	8005618 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3720      	adds	r7, #32
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop

08004c44 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b087      	sub	sp, #28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
 8004c50:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8004c52:	2300      	movs	r3, #0
 8004c54:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d101      	bne.n	8004c64 <HAL_ETH_DMATxDescListInit+0x20>
 8004c60:	2302      	movs	r3, #2
 8004c62:	e052      	b.n	8004d0a <HAL_ETH_DMATxDescListInit+0xc6>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	617b      	str	r3, [r7, #20]
 8004c7e:	e030      	b.n	8004ce2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	015b      	lsls	r3, r3, #5
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	4413      	add	r3, r2
 8004c88:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004c90:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004c98:	fb02 f303 	mul.w	r3, r2, r3
 8004c9c:	687a      	ldr	r2, [r7, #4]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	69db      	ldr	r3, [r3, #28]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d105      	bne.n	8004cba <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	3b01      	subs	r3, #1
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d208      	bcs.n	8004cd6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	015b      	lsls	r3, r3, #5
 8004cca:	68ba      	ldr	r2, [r7, #8]
 8004ccc:	4413      	add	r3, r2
 8004cce:	461a      	mov	r2, r3
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	60da      	str	r2, [r3, #12]
 8004cd4:	e002      	b.n	8004cdc <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	617b      	str	r3, [r7, #20]
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d3ca      	bcc.n	8004c80 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cf4:	3310      	adds	r3, #16
 8004cf6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2200      	movs	r2, #0
 8004d04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	371c      	adds	r7, #28
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr

08004d16 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8004d16:	b480      	push	{r7}
 8004d18:	b087      	sub	sp, #28
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	60f8      	str	r0, [r7, #12]
 8004d1e:	60b9      	str	r1, [r7, #8]
 8004d20:	607a      	str	r2, [r7, #4]
 8004d22:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d101      	bne.n	8004d36 <HAL_ETH_DMARxDescListInit+0x20>
 8004d32:	2302      	movs	r3, #2
 8004d34:	e056      	b.n	8004de4 <HAL_ETH_DMARxDescListInit+0xce>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2202      	movs	r2, #2
 8004d42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	68ba      	ldr	r2, [r7, #8]
 8004d4a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	617b      	str	r3, [r7, #20]
 8004d50:	e034      	b.n	8004dbc <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8004d52:	697b      	ldr	r3, [r7, #20]
 8004d54:	015b      	lsls	r3, r3, #5
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	4413      	add	r3, r2
 8004d5a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d62:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8004d6a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004d72:	fb02 f303 	mul.w	r3, r2, r3
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	4413      	add	r3, r2
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	699b      	ldr	r3, [r3, #24]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d105      	bne.n	8004d94 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	3b01      	subs	r3, #1
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d208      	bcs.n	8004db0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	3301      	adds	r3, #1
 8004da2:	015b      	lsls	r3, r3, #5
 8004da4:	68ba      	ldr	r2, [r7, #8]
 8004da6:	4413      	add	r3, r2
 8004da8:	461a      	mov	r2, r3
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	60da      	str	r2, [r3, #12]
 8004dae:	e002      	b.n	8004db6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8004db0:	68ba      	ldr	r2, [r7, #8]
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	3301      	adds	r3, #1
 8004dba:	617b      	str	r3, [r7, #20]
 8004dbc:	697a      	ldr	r2, [r7, #20]
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d3c6      	bcc.n	8004d52 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dce:	330c      	adds	r3, #12
 8004dd0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004de2:	2300      	movs	r3, #0
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	371c      	adds	r7, #28
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr

08004df0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	617b      	str	r3, [r7, #20]
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60fb      	str	r3, [r7, #12]
 8004e02:	2300      	movs	r3, #0
 8004e04:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d101      	bne.n	8004e14 <HAL_ETH_TransmitFrame+0x24>
 8004e10:	2302      	movs	r3, #2
 8004e12:	e0cd      	b.n	8004fb0 <HAL_ETH_TransmitFrame+0x1c0>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2202      	movs	r2, #2
 8004e20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d109      	bne.n	8004e3e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e0b8      	b.n	8004fb0 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	da09      	bge.n	8004e5c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2212      	movs	r2, #18
 8004e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e0a9      	b.n	8004fb0 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d915      	bls.n	8004e92 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	4a54      	ldr	r2, [pc, #336]	; (8004fbc <HAL_ETH_TransmitFrame+0x1cc>)
 8004e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e6e:	0a9b      	lsrs	r3, r3, #10
 8004e70:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	4b51      	ldr	r3, [pc, #324]	; (8004fbc <HAL_ETH_TransmitFrame+0x1cc>)
 8004e76:	fba3 1302 	umull	r1, r3, r3, r2
 8004e7a:	0a9b      	lsrs	r3, r3, #10
 8004e7c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8004e80:	fb01 f303 	mul.w	r3, r1, r3
 8004e84:	1ad3      	subs	r3, r2, r3
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d005      	beq.n	8004e96 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	3301      	adds	r3, #1
 8004e8e:	617b      	str	r3, [r7, #20]
 8004e90:	e001      	b.n	8004e96 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8004e92:	2301      	movs	r3, #1
 8004e94:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d11c      	bne.n	8004ed6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8004eaa:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb0:	683a      	ldr	r2, [r7, #0]
 8004eb2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8004eb6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004ec6:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ecc:	68db      	ldr	r3, [r3, #12]
 8004ece:	461a      	mov	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ed4:	e04b      	b.n	8004f6e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	613b      	str	r3, [r7, #16]
 8004eda:	e044      	b.n	8004f66 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee0:	681a      	ldr	r2, [r3, #0]
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ee6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004eea:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8004eec:	693b      	ldr	r3, [r7, #16]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d107      	bne.n	8004f02 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef6:	681a      	ldr	r2, [r3, #0]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004f00:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f06:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004f0a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d116      	bne.n	8004f44 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f20:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004f24:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	4a25      	ldr	r2, [pc, #148]	; (8004fc0 <HAL_ETH_TransmitFrame+0x1d0>)
 8004f2a:	fb02 f203 	mul.w	r2, r2, r3
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	4413      	add	r3, r2
 8004f32:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8004f36:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3c:	68fa      	ldr	r2, [r7, #12]
 8004f3e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8004f42:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f4e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004f52:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	3301      	adds	r3, #1
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d3b6      	bcc.n	8004edc <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f76:	3314      	adds	r3, #20
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0304 	and.w	r3, r3, #4
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00d      	beq.n	8004f9e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f8a:	3314      	adds	r3, #20
 8004f8c:	2204      	movs	r2, #4
 8004f8e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f98:	3304      	adds	r3, #4
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	371c      	adds	r7, #28
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr
 8004fbc:	ac02b00b 	.word	0xac02b00b
 8004fc0:	fffffa0c 	.word	0xfffffa0c

08004fc4 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d101      	bne.n	8004fde <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8004fda:	2302      	movs	r3, #2
 8004fdc:	e074      	b.n	80050c8 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2202      	movs	r2, #2
 8004fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8004fee:	e05a      	b.n	80050a6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005004:	d10d      	bne.n	8005022 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	461a      	mov	r2, r3
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	629a      	str	r2, [r3, #40]	; 0x28
 8005020:	e041      	b.n	80050a6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10b      	bne.n	8005048 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005034:	1c5a      	adds	r2, r3, #1
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503e:	68db      	ldr	r3, [r3, #12]
 8005040:	461a      	mov	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	629a      	str	r2, [r3, #40]	; 0x28
 8005046:	e02e      	b.n	80050a6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005054:	1c5a      	adds	r2, r3, #1
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505e:	2b01      	cmp	r3, #1
 8005060:	d103      	bne.n	800506a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	0c1b      	lsrs	r3, r3, #16
 8005072:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8005076:	1f1a      	subs	r2, r3, #4
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005080:	689a      	ldr	r2, [r3, #8]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	461a      	mov	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80050a2:	2300      	movs	r3, #0
 80050a4:	e010      	b.n	80050c8 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	db02      	blt.n	80050b6 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2b03      	cmp	r3, #3
 80050b4:	d99c      	bls.n	8004ff0 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3714      	adds	r7, #20
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050e4:	3314      	adds	r3, #20
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ec:	2b40      	cmp	r3, #64	; 0x40
 80050ee:	d112      	bne.n	8005116 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80050f0:	6878      	ldr	r0, [r7, #4]
 80050f2:	f004 fa71 	bl	80095d8 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050fe:	3314      	adds	r3, #20
 8005100:	2240      	movs	r2, #64	; 0x40
 8005102:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005114:	e01b      	b.n	800514e <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800511e:	3314      	adds	r3, #20
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	2b01      	cmp	r3, #1
 8005128:	d111      	bne.n	800514e <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f000 f839 	bl	80051a2 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005138:	3314      	adds	r3, #20
 800513a:	2201      	movs	r2, #1
 800513c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2201      	movs	r2, #1
 8005142:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005156:	3314      	adds	r3, #20
 8005158:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800515c:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005166:	3314      	adds	r3, #20
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800516e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005172:	d112      	bne.n	800519a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 f81e 	bl	80051b6 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005182:	3314      	adds	r3, #20
 8005184:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005188:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	2201      	movs	r2, #1
 800518e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800519a:	bf00      	nop
 800519c:	3708      	adds	r7, #8
 800519e:	46bd      	mov	sp, r7
 80051a0:	bd80      	pop	{r7, pc}

080051a2 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b083      	sub	sp, #12
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80051aa:	bf00      	nop
 80051ac:	370c      	adds	r7, #12
 80051ae:	46bd      	mov	sp, r7
 80051b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b4:	4770      	bx	lr

080051b6 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b083      	sub	sp, #12
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80051ca:	b580      	push	{r7, lr}
 80051cc:	b086      	sub	sp, #24
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	60f8      	str	r0, [r7, #12]
 80051d2:	460b      	mov	r3, r1
 80051d4:	607a      	str	r2, [r7, #4]
 80051d6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80051d8:	2300      	movs	r3, #0
 80051da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80051dc:	2300      	movs	r3, #0
 80051de:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b82      	cmp	r3, #130	; 0x82
 80051ea:	d101      	bne.n	80051f0 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80051ec:	2302      	movs	r3, #2
 80051ee:	e050      	b.n	8005292 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2282      	movs	r2, #130	; 0x82
 80051f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f003 031c 	and.w	r3, r3, #28
 8005206:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	8a1b      	ldrh	r3, [r3, #16]
 800520c:	02db      	lsls	r3, r3, #11
 800520e:	b29b      	uxth	r3, r3
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	4313      	orrs	r3, r2
 8005214:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8005216:	897b      	ldrh	r3, [r7, #10]
 8005218:	019b      	lsls	r3, r3, #6
 800521a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800521e:	697a      	ldr	r2, [r7, #20]
 8005220:	4313      	orrs	r3, r2
 8005222:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f023 0302 	bic.w	r3, r3, #2
 800522a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f043 0301 	orr.w	r3, r3, #1
 8005232:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800523c:	f7fe fa4a 	bl	80036d4 <HAL_GetTick>
 8005240:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005242:	e015      	b.n	8005270 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8005244:	f7fe fa46 	bl	80036d4 <HAL_GetTick>
 8005248:	4602      	mov	r2, r0
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	1ad3      	subs	r3, r2, r3
 800524e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005252:	d309      	bcc.n	8005268 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2201      	movs	r2, #1
 8005258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2200      	movs	r2, #0
 8005260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e014      	b.n	8005292 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1e4      	bne.n	8005244 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	695b      	ldr	r3, [r3, #20]
 8005280:	b29b      	uxth	r3, r3
 8005282:	461a      	mov	r2, r3
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3718      	adds	r7, #24
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800529a:	b580      	push	{r7, lr}
 800529c:	b086      	sub	sp, #24
 800529e:	af00      	add	r7, sp, #0
 80052a0:	60f8      	str	r0, [r7, #12]
 80052a2:	460b      	mov	r3, r1
 80052a4:	607a      	str	r2, [r7, #4]
 80052a6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80052a8:	2300      	movs	r3, #0
 80052aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80052ac:	2300      	movs	r3, #0
 80052ae:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	2b42      	cmp	r3, #66	; 0x42
 80052ba:	d101      	bne.n	80052c0 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80052bc:	2302      	movs	r3, #2
 80052be:	e04e      	b.n	800535e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2242      	movs	r2, #66	; 0x42
 80052c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	f003 031c 	and.w	r3, r3, #28
 80052d6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	8a1b      	ldrh	r3, [r3, #16]
 80052dc:	02db      	lsls	r3, r3, #11
 80052de:	b29b      	uxth	r3, r3
 80052e0:	697a      	ldr	r2, [r7, #20]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80052e6:	897b      	ldrh	r3, [r7, #10]
 80052e8:	019b      	lsls	r3, r3, #6
 80052ea:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80052ee:	697a      	ldr	r2, [r7, #20]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f043 0302 	orr.w	r3, r3, #2
 80052fa:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	f043 0301 	orr.w	r3, r3, #1
 8005302:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	b29a      	uxth	r2, r3
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8005316:	f7fe f9dd 	bl	80036d4 <HAL_GetTick>
 800531a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800531c:	e015      	b.n	800534a <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 800531e:	f7fe f9d9 	bl	80036d4 <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800532c:	d309      	bcc.n	8005342 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e00d      	b.n	800535e <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	2b00      	cmp	r3, #0
 8005352:	d1e4      	bne.n	800531e <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3718      	adds	r7, #24
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}

08005366 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8005366:	b580      	push	{r7, lr}
 8005368:	b082      	sub	sp, #8
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005374:	2b01      	cmp	r3, #1
 8005376:	d101      	bne.n	800537c <HAL_ETH_Start+0x16>
 8005378:	2302      	movs	r3, #2
 800537a:	e01f      	b.n	80053bc <HAL_ETH_Start+0x56>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 fb45 	bl	8005a1c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 fb7c 	bl	8005a90 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 fc13 	bl	8005bc4 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 fbb0 	bl	8005b04 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80053a4:	6878      	ldr	r0, [r7, #4]
 80053a6:	f000 fbdd 	bl	8005b64 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2201      	movs	r2, #1
 80053ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2200      	movs	r2, #0
 80053b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80053ba:	2300      	movs	r3, #0
}
 80053bc:	4618      	mov	r0, r3
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b082      	sub	sp, #8
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d101      	bne.n	80053da <HAL_ETH_Stop+0x16>
 80053d6:	2302      	movs	r3, #2
 80053d8:	e01f      	b.n	800541a <HAL_ETH_Stop+0x56>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2201      	movs	r2, #1
 80053de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2202      	movs	r2, #2
 80053e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fba2 	bl	8005b34 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 fbcf 	bl	8005b94 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 fb67 	bl	8005aca <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80053fc:	6878      	ldr	r0, [r7, #4]
 80053fe:	f000 fbe1 	bl	8005bc4 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8005402:	6878      	ldr	r0, [r7, #4]
 8005404:	f000 fb27 	bl	8005a56 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2200      	movs	r2, #0
 8005414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	3708      	adds	r7, #8
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
	...

08005424 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
 800542c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 800542e:	2300      	movs	r3, #0
 8005430:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005438:	2b01      	cmp	r3, #1
 800543a:	d101      	bne.n	8005440 <HAL_ETH_ConfigMAC+0x1c>
 800543c:	2302      	movs	r3, #2
 800543e:	e0e4      	b.n	800560a <HAL_ETH_ConfigMAC+0x1e6>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2202      	movs	r2, #2
 800544c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 80b1 	beq.w	80055ba <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	4b6c      	ldr	r3, [pc, #432]	; (8005614 <HAL_ETH_ConfigMAC+0x1f0>)
 8005464:	4013      	ands	r3, r2
 8005466:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8005470:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8005476:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 800547c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8005482:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8005488:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800548e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8005494:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800549a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 80054a0:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 80054a6:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 80054ac:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 80054b2:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80054b4:	68fa      	ldr	r2, [r7, #12]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80054ca:	2001      	movs	r0, #1
 80054cc:	f7fe f90e 	bl	80036ec <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68fa      	ldr	r2, [r7, #12]
 80054d6:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80054e0:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80054e6:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80054ec:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80054f2:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80054f8:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80054fe:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800550a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800550c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005516:	2001      	movs	r0, #1
 8005518:	f7fe f8e8 	bl	80036ec <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	683a      	ldr	r2, [r7, #0]
 800552a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800552c:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005536:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	f64f 7341 	movw	r3, #65345	; 0xff41
 8005546:	4013      	ands	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800554e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8005554:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 800555a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8005560:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8005566:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 800556c:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 800556e:	68fa      	ldr	r2, [r7, #12]
 8005570:	4313      	orrs	r3, r2
 8005572:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68fa      	ldr	r2, [r7, #12]
 800557a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	699b      	ldr	r3, [r3, #24]
 8005582:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005584:	2001      	movs	r0, #1
 8005586:	f7fe f8b1 	bl	80036ec <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	68fa      	ldr	r2, [r7, #12]
 8005590:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	430a      	orrs	r2, r1
 80055a0:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 80055aa:	2001      	movs	r0, #1
 80055ac:	f7fe f89e 	bl	80036ec <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	61da      	str	r2, [r3, #28]
 80055b8:	e01e      	b.n	80055f8 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80055c8:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	689a      	ldr	r2, [r3, #8]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80055ea:	2001      	movs	r0, #1
 80055ec:	f7fe f87e 	bl	80036ec <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2201      	movs	r2, #1
 80055fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8005608:	2300      	movs	r3, #0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3710      	adds	r7, #16
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	ff20810f 	.word	0xff20810f

08005618 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b0b0      	sub	sp, #192	; 0xc0
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8005622:	2300      	movs	r3, #0
 8005624:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d007      	beq.n	800563e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005634:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800563c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800563e:	2300      	movs	r3, #0
 8005640:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8005642:	2300      	movs	r3, #0
 8005644:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8005646:	2300      	movs	r3, #0
 8005648:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800564a:	2300      	movs	r3, #0
 800564c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800564e:	2300      	movs	r3, #0
 8005650:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8005652:	2300      	movs	r3, #0
 8005654:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d103      	bne.n	8005666 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800565e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005662:	663b      	str	r3, [r7, #96]	; 0x60
 8005664:	e001      	b.n	800566a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8005666:	2300      	movs	r3, #0
 8005668:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800566a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800566e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8005670:	2300      	movs	r3, #0
 8005672:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005674:	2300      	movs	r3, #0
 8005676:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8005678:	2300      	movs	r3, #0
 800567a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800567c:	2300      	movs	r3, #0
 800567e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8005680:	2300      	movs	r3, #0
 8005682:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8005684:	2340      	movs	r3, #64	; 0x40
 8005686:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8005688:	2300      	movs	r3, #0
 800568a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800568e:	2300      	movs	r3, #0
 8005690:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8005694:	2300      	movs	r3, #0
 8005696:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800569a:	2300      	movs	r3, #0
 800569c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80056a0:	2300      	movs	r3, #0
 80056a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80056a6:	2300      	movs	r3, #0
 80056a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80056ac:	2300      	movs	r3, #0
 80056ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80056b2:	2300      	movs	r3, #0
 80056b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80056b8:	2380      	movs	r3, #128	; 0x80
 80056ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80056be:	2300      	movs	r3, #0
 80056c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80056c4:	2300      	movs	r3, #0
 80056c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80056ca:	2300      	movs	r3, #0
 80056cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80056d0:	2300      	movs	r3, #0
 80056d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80056d6:	2300      	movs	r3, #0
 80056d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80056dc:	2300      	movs	r3, #0
 80056de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80056ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80056f0:	4bac      	ldr	r3, [pc, #688]	; (80059a4 <ETH_MACDMAConfig+0x38c>)
 80056f2:	4013      	ands	r3, r2
 80056f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80056f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80056fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80056fc:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80056fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8005700:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8005702:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8005704:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800570a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800570c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800570e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8005710:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8005712:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8005718:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800571a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800571c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800571e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8005720:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8005722:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8005724:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8005726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8005728:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800572a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800572c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 800572e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005732:	4313      	orrs	r3, r2
 8005734:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005740:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800574c:	2001      	movs	r0, #1
 800574e:	f7fd ffcd 	bl	80036ec <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800575a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800575c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800575e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005760:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8005762:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8005764:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8005766:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800576a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800576c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8005770:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8005772:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8005776:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8005778:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800577c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8005780:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8005788:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800578a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8005796:	2001      	movs	r0, #1
 8005798:	f7fd ffa8 	bl	80036ec <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80057a4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80057ae:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80057b8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80057c4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80057c8:	f64f 7341 	movw	r3, #65345	; 0xff41
 80057cc:	4013      	ands	r3, r2
 80057ce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80057d2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80057d6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 80057d8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80057dc:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 80057de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80057e2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80057e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80057e8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80057ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80057ee:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80057f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80057f4:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80057f6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80057fa:	4313      	orrs	r3, r2
 80057fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005808:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8005814:	2001      	movs	r0, #1
 8005816:	f7fd ff69 	bl	80036ec <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005822:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8005824:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8005828:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	430a      	orrs	r2, r1
 8005832:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	69db      	ldr	r3, [r3, #28]
 800583a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800583e:	2001      	movs	r0, #1
 8005840:	f7fd ff54 	bl	80036ec <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800584c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800584e:	2300      	movs	r3, #0
 8005850:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8005852:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005856:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8005858:	2300      	movs	r3, #0
 800585a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800585c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005860:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005862:	2300      	movs	r3, #0
 8005864:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8005866:	2300      	movs	r3, #0
 8005868:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800586a:	2300      	movs	r3, #0
 800586c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800586e:	2300      	movs	r3, #0
 8005870:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8005872:	2304      	movs	r3, #4
 8005874:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8005876:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800587a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800587c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005880:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005882:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005886:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005888:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800588c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800588e:	2380      	movs	r3, #128	; 0x80
 8005890:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8005892:	2300      	movs	r3, #0
 8005894:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005896:	2300      	movs	r3, #0
 8005898:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058a2:	3318      	adds	r3, #24
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80058aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80058ae:	4b3e      	ldr	r3, [pc, #248]	; (80059a8 <ETH_MACDMAConfig+0x390>)
 80058b0:	4013      	ands	r3, r2
 80058b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80058b6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80058b8:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80058ba:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80058bc:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80058be:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80058c0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80058c2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80058c4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80058c6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80058c8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80058ca:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80058cc:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80058ce:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80058d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80058d2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80058d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80058d6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80058d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80058dc:	4313      	orrs	r3, r2
 80058de:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058ea:	3318      	adds	r3, #24
 80058ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80058f0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058fa:	3318      	adds	r3, #24
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005902:	2001      	movs	r0, #1
 8005904:	f7fd fef2 	bl	80036ec <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005910:	3318      	adds	r3, #24
 8005912:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005916:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005918:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800591a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800591c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800591e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8005920:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8005922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8005924:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8005926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8005928:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800592a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800592c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800592e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8005930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8005932:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800593c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005940:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8005950:	2001      	movs	r0, #1
 8005952:	f7fd fecb 	bl	80036ec <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800595e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8005962:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d10f      	bne.n	800598c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005974:	331c      	adds	r3, #28
 8005976:	681a      	ldr	r2, [r3, #0]
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005980:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005984:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005988:	331c      	adds	r3, #28
 800598a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	461a      	mov	r2, r3
 8005992:	2100      	movs	r1, #0
 8005994:	6878      	ldr	r0, [r7, #4]
 8005996:	f000 f809 	bl	80059ac <ETH_MACAddressConfig>
}
 800599a:	bf00      	nop
 800599c:	37c0      	adds	r7, #192	; 0xc0
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	ff20810f 	.word	0xff20810f
 80059a8:	f8de3f23 	.word	0xf8de3f23

080059ac <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b087      	sub	sp, #28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	3305      	adds	r3, #5
 80059bc:	781b      	ldrb	r3, [r3, #0]
 80059be:	021b      	lsls	r3, r3, #8
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	3204      	adds	r2, #4
 80059c4:	7812      	ldrb	r2, [r2, #0]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	4b11      	ldr	r3, [pc, #68]	; (8005a14 <ETH_MACAddressConfig+0x68>)
 80059ce:	4413      	add	r3, r2
 80059d0:	461a      	mov	r2, r3
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	3303      	adds	r3, #3
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	061a      	lsls	r2, r3, #24
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	3302      	adds	r3, #2
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	041b      	lsls	r3, r3, #16
 80059e6:	431a      	orrs	r2, r3
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	3301      	adds	r3, #1
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	021b      	lsls	r3, r3, #8
 80059f0:	4313      	orrs	r3, r2
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	7812      	ldrb	r2, [r2, #0]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	4b06      	ldr	r3, [pc, #24]	; (8005a18 <ETH_MACAddressConfig+0x6c>)
 80059fe:	4413      	add	r3, r2
 8005a00:	461a      	mov	r2, r3
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	6013      	str	r3, [r2, #0]
}
 8005a06:	bf00      	nop
 8005a08:	371c      	adds	r7, #28
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop
 8005a14:	40028040 	.word	0x40028040
 8005a18:	40028044 	.word	0x40028044

08005a1c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005a24:	2300      	movs	r3, #0
 8005a26:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0208 	orr.w	r2, r2, #8
 8005a36:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005a40:	2001      	movs	r0, #1
 8005a42:	f000 f8e9 	bl	8005c18 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	601a      	str	r2, [r3, #0]
}
 8005a4e:	bf00      	nop
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b084      	sub	sp, #16
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f022 0208 	bic.w	r2, r2, #8
 8005a70:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005a7a:	2001      	movs	r0, #1
 8005a7c:	f000 f8cc 	bl	8005c18 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	601a      	str	r2, [r3, #0]
}
 8005a88:	bf00      	nop
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f042 0204 	orr.w	r2, r2, #4
 8005aaa:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005ab4:	2001      	movs	r0, #1
 8005ab6:	f000 f8af 	bl	8005c18 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68fa      	ldr	r2, [r7, #12]
 8005ac0:	601a      	str	r2, [r3, #0]
}
 8005ac2:	bf00      	nop
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b084      	sub	sp, #16
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f022 0204 	bic.w	r2, r2, #4
 8005ae4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005aee:	2001      	movs	r0, #1
 8005af0:	f000 f892 	bl	8005c18 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	601a      	str	r2, [r3, #0]
}
 8005afc:	bf00      	nop
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b14:	3318      	adds	r3, #24
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b24:	3318      	adds	r3, #24
 8005b26:	601a      	str	r2, [r3, #0]
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b44:	3318      	adds	r3, #24
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005b50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b54:	3318      	adds	r3, #24
 8005b56:	601a      	str	r2, [r3, #0]
}
 8005b58:	bf00      	nop
 8005b5a:	370c      	adds	r7, #12
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8005b64:	b480      	push	{r7}
 8005b66:	b083      	sub	sp, #12
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b74:	3318      	adds	r3, #24
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f042 0202 	orr.w	r2, r2, #2
 8005b80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b84:	3318      	adds	r3, #24
 8005b86:	601a      	str	r2, [r3, #0]
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ba4:	3318      	adds	r3, #24
 8005ba6:	681a      	ldr	r2, [r3, #0]
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f022 0202 	bic.w	r2, r2, #2
 8005bb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bb4:	3318      	adds	r3, #24
 8005bb6:	601a      	str	r2, [r3, #0]
}
 8005bb8:	bf00      	nop
 8005bba:	370c      	adds	r7, #12
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bd8:	3318      	adds	r3, #24
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005be4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005be8:	3318      	adds	r3, #24
 8005bea:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bf4:	3318      	adds	r3, #24
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8005bfa:	2001      	movs	r0, #1
 8005bfc:	f000 f80c 	bl	8005c18 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c0a:	3318      	adds	r3, #24
 8005c0c:	601a      	str	r2, [r3, #0]
}
 8005c0e:	bf00      	nop
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
	...

08005c18 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b085      	sub	sp, #20
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005c20:	4b0b      	ldr	r3, [pc, #44]	; (8005c50 <ETH_Delay+0x38>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4a0b      	ldr	r2, [pc, #44]	; (8005c54 <ETH_Delay+0x3c>)
 8005c26:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2a:	0a5b      	lsrs	r3, r3, #9
 8005c2c:	687a      	ldr	r2, [r7, #4]
 8005c2e:	fb02 f303 	mul.w	r3, r2, r3
 8005c32:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8005c34:	bf00      	nop
  } 
  while (Delay --);
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	1e5a      	subs	r2, r3, #1
 8005c3a:	60fa      	str	r2, [r7, #12]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d1f9      	bne.n	8005c34 <ETH_Delay+0x1c>
}
 8005c40:	bf00      	nop
 8005c42:	bf00      	nop
 8005c44:	3714      	adds	r7, #20
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	20000094 	.word	0x20000094
 8005c54:	10624dd3 	.word	0x10624dd3

08005c58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b089      	sub	sp, #36	; 0x24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005c62:	2300      	movs	r3, #0
 8005c64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005c66:	2300      	movs	r3, #0
 8005c68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005c6e:	2300      	movs	r3, #0
 8005c70:	61fb      	str	r3, [r7, #28]
 8005c72:	e16b      	b.n	8005f4c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005c74:	2201      	movs	r2, #1
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	697a      	ldr	r2, [r7, #20]
 8005c84:	4013      	ands	r3, r2
 8005c86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	f040 815a 	bne.w	8005f46 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	f003 0303 	and.w	r3, r3, #3
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d005      	beq.n	8005caa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ca6:	2b02      	cmp	r3, #2
 8005ca8:	d130      	bne.n	8005d0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	005b      	lsls	r3, r3, #1
 8005cb4:	2203      	movs	r2, #3
 8005cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cba:	43db      	mvns	r3, r3
 8005cbc:	69ba      	ldr	r2, [r7, #24]
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	68da      	ldr	r2, [r3, #12]
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	005b      	lsls	r3, r3, #1
 8005cca:	fa02 f303 	lsl.w	r3, r2, r3
 8005cce:	69ba      	ldr	r2, [r7, #24]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	69ba      	ldr	r2, [r7, #24]
 8005cd8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce8:	43db      	mvns	r3, r3
 8005cea:	69ba      	ldr	r2, [r7, #24]
 8005cec:	4013      	ands	r3, r2
 8005cee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	685b      	ldr	r3, [r3, #4]
 8005cf4:	091b      	lsrs	r3, r3, #4
 8005cf6:	f003 0201 	and.w	r2, r3, #1
 8005cfa:	69fb      	ldr	r3, [r7, #28]
 8005cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005d00:	69ba      	ldr	r2, [r7, #24]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	69ba      	ldr	r2, [r7, #24]
 8005d0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f003 0303 	and.w	r3, r3, #3
 8005d14:	2b03      	cmp	r3, #3
 8005d16:	d017      	beq.n	8005d48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005d1e:	69fb      	ldr	r3, [r7, #28]
 8005d20:	005b      	lsls	r3, r3, #1
 8005d22:	2203      	movs	r2, #3
 8005d24:	fa02 f303 	lsl.w	r3, r2, r3
 8005d28:	43db      	mvns	r3, r3
 8005d2a:	69ba      	ldr	r2, [r7, #24]
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	689a      	ldr	r2, [r3, #8]
 8005d34:	69fb      	ldr	r3, [r7, #28]
 8005d36:	005b      	lsls	r3, r3, #1
 8005d38:	fa02 f303 	lsl.w	r3, r2, r3
 8005d3c:	69ba      	ldr	r2, [r7, #24]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	69ba      	ldr	r2, [r7, #24]
 8005d46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f003 0303 	and.w	r3, r3, #3
 8005d50:	2b02      	cmp	r3, #2
 8005d52:	d123      	bne.n	8005d9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	08da      	lsrs	r2, r3, #3
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	3208      	adds	r2, #8
 8005d5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	f003 0307 	and.w	r3, r3, #7
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	220f      	movs	r2, #15
 8005d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8005d70:	43db      	mvns	r3, r3
 8005d72:	69ba      	ldr	r2, [r7, #24]
 8005d74:	4013      	ands	r3, r2
 8005d76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	691a      	ldr	r2, [r3, #16]
 8005d7c:	69fb      	ldr	r3, [r7, #28]
 8005d7e:	f003 0307 	and.w	r3, r3, #7
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	fa02 f303 	lsl.w	r3, r2, r3
 8005d88:	69ba      	ldr	r2, [r7, #24]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	08da      	lsrs	r2, r3, #3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	3208      	adds	r2, #8
 8005d96:	69b9      	ldr	r1, [r7, #24]
 8005d98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005da2:	69fb      	ldr	r3, [r7, #28]
 8005da4:	005b      	lsls	r3, r3, #1
 8005da6:	2203      	movs	r2, #3
 8005da8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dac:	43db      	mvns	r3, r3
 8005dae:	69ba      	ldr	r2, [r7, #24]
 8005db0:	4013      	ands	r3, r2
 8005db2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f003 0203 	and.w	r2, r3, #3
 8005dbc:	69fb      	ldr	r3, [r7, #28]
 8005dbe:	005b      	lsls	r3, r3, #1
 8005dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	69ba      	ldr	r2, [r7, #24]
 8005dce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 80b4 	beq.w	8005f46 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005dde:	2300      	movs	r3, #0
 8005de0:	60fb      	str	r3, [r7, #12]
 8005de2:	4b60      	ldr	r3, [pc, #384]	; (8005f64 <HAL_GPIO_Init+0x30c>)
 8005de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de6:	4a5f      	ldr	r2, [pc, #380]	; (8005f64 <HAL_GPIO_Init+0x30c>)
 8005de8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005dec:	6453      	str	r3, [r2, #68]	; 0x44
 8005dee:	4b5d      	ldr	r3, [pc, #372]	; (8005f64 <HAL_GPIO_Init+0x30c>)
 8005df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005df6:	60fb      	str	r3, [r7, #12]
 8005df8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005dfa:	4a5b      	ldr	r2, [pc, #364]	; (8005f68 <HAL_GPIO_Init+0x310>)
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	089b      	lsrs	r3, r3, #2
 8005e00:	3302      	adds	r3, #2
 8005e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	f003 0303 	and.w	r3, r3, #3
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	220f      	movs	r2, #15
 8005e12:	fa02 f303 	lsl.w	r3, r2, r3
 8005e16:	43db      	mvns	r3, r3
 8005e18:	69ba      	ldr	r2, [r7, #24]
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	4a52      	ldr	r2, [pc, #328]	; (8005f6c <HAL_GPIO_Init+0x314>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d02b      	beq.n	8005e7e <HAL_GPIO_Init+0x226>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	4a51      	ldr	r2, [pc, #324]	; (8005f70 <HAL_GPIO_Init+0x318>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d025      	beq.n	8005e7a <HAL_GPIO_Init+0x222>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a50      	ldr	r2, [pc, #320]	; (8005f74 <HAL_GPIO_Init+0x31c>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d01f      	beq.n	8005e76 <HAL_GPIO_Init+0x21e>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a4f      	ldr	r2, [pc, #316]	; (8005f78 <HAL_GPIO_Init+0x320>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d019      	beq.n	8005e72 <HAL_GPIO_Init+0x21a>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a4e      	ldr	r2, [pc, #312]	; (8005f7c <HAL_GPIO_Init+0x324>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d013      	beq.n	8005e6e <HAL_GPIO_Init+0x216>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	4a4d      	ldr	r2, [pc, #308]	; (8005f80 <HAL_GPIO_Init+0x328>)
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d00d      	beq.n	8005e6a <HAL_GPIO_Init+0x212>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	4a4c      	ldr	r2, [pc, #304]	; (8005f84 <HAL_GPIO_Init+0x32c>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d007      	beq.n	8005e66 <HAL_GPIO_Init+0x20e>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	4a4b      	ldr	r2, [pc, #300]	; (8005f88 <HAL_GPIO_Init+0x330>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d101      	bne.n	8005e62 <HAL_GPIO_Init+0x20a>
 8005e5e:	2307      	movs	r3, #7
 8005e60:	e00e      	b.n	8005e80 <HAL_GPIO_Init+0x228>
 8005e62:	2308      	movs	r3, #8
 8005e64:	e00c      	b.n	8005e80 <HAL_GPIO_Init+0x228>
 8005e66:	2306      	movs	r3, #6
 8005e68:	e00a      	b.n	8005e80 <HAL_GPIO_Init+0x228>
 8005e6a:	2305      	movs	r3, #5
 8005e6c:	e008      	b.n	8005e80 <HAL_GPIO_Init+0x228>
 8005e6e:	2304      	movs	r3, #4
 8005e70:	e006      	b.n	8005e80 <HAL_GPIO_Init+0x228>
 8005e72:	2303      	movs	r3, #3
 8005e74:	e004      	b.n	8005e80 <HAL_GPIO_Init+0x228>
 8005e76:	2302      	movs	r3, #2
 8005e78:	e002      	b.n	8005e80 <HAL_GPIO_Init+0x228>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e000      	b.n	8005e80 <HAL_GPIO_Init+0x228>
 8005e7e:	2300      	movs	r3, #0
 8005e80:	69fa      	ldr	r2, [r7, #28]
 8005e82:	f002 0203 	and.w	r2, r2, #3
 8005e86:	0092      	lsls	r2, r2, #2
 8005e88:	4093      	lsls	r3, r2
 8005e8a:	69ba      	ldr	r2, [r7, #24]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005e90:	4935      	ldr	r1, [pc, #212]	; (8005f68 <HAL_GPIO_Init+0x310>)
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	089b      	lsrs	r3, r3, #2
 8005e96:	3302      	adds	r3, #2
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005e9e:	4b3b      	ldr	r3, [pc, #236]	; (8005f8c <HAL_GPIO_Init+0x334>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	43db      	mvns	r3, r3
 8005ea8:	69ba      	ldr	r2, [r7, #24]
 8005eaa:	4013      	ands	r3, r2
 8005eac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005ec2:	4a32      	ldr	r2, [pc, #200]	; (8005f8c <HAL_GPIO_Init+0x334>)
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005ec8:	4b30      	ldr	r3, [pc, #192]	; (8005f8c <HAL_GPIO_Init+0x334>)
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	43db      	mvns	r3, r3
 8005ed2:	69ba      	ldr	r2, [r7, #24]
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	685b      	ldr	r3, [r3, #4]
 8005edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d003      	beq.n	8005eec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005ee4:	69ba      	ldr	r2, [r7, #24]
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005eec:	4a27      	ldr	r2, [pc, #156]	; (8005f8c <HAL_GPIO_Init+0x334>)
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ef2:	4b26      	ldr	r3, [pc, #152]	; (8005f8c <HAL_GPIO_Init+0x334>)
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	43db      	mvns	r3, r3
 8005efc:	69ba      	ldr	r2, [r7, #24]
 8005efe:	4013      	ands	r3, r2
 8005f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d003      	beq.n	8005f16 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005f0e:	69ba      	ldr	r2, [r7, #24]
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005f16:	4a1d      	ldr	r2, [pc, #116]	; (8005f8c <HAL_GPIO_Init+0x334>)
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005f1c:	4b1b      	ldr	r3, [pc, #108]	; (8005f8c <HAL_GPIO_Init+0x334>)
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	43db      	mvns	r3, r3
 8005f26:	69ba      	ldr	r2, [r7, #24]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d003      	beq.n	8005f40 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005f38:	69ba      	ldr	r2, [r7, #24]
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005f40:	4a12      	ldr	r2, [pc, #72]	; (8005f8c <HAL_GPIO_Init+0x334>)
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	61fb      	str	r3, [r7, #28]
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	2b0f      	cmp	r3, #15
 8005f50:	f67f ae90 	bls.w	8005c74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005f54:	bf00      	nop
 8005f56:	bf00      	nop
 8005f58:	3724      	adds	r7, #36	; 0x24
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	40023800 	.word	0x40023800
 8005f68:	40013800 	.word	0x40013800
 8005f6c:	40020000 	.word	0x40020000
 8005f70:	40020400 	.word	0x40020400
 8005f74:	40020800 	.word	0x40020800
 8005f78:	40020c00 	.word	0x40020c00
 8005f7c:	40021000 	.word	0x40021000
 8005f80:	40021400 	.word	0x40021400
 8005f84:	40021800 	.word	0x40021800
 8005f88:	40021c00 	.word	0x40021c00
 8005f8c:	40013c00 	.word	0x40013c00

08005f90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	460b      	mov	r3, r1
 8005f9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	691a      	ldr	r2, [r3, #16]
 8005fa0:	887b      	ldrh	r3, [r7, #2]
 8005fa2:	4013      	ands	r3, r2
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d002      	beq.n	8005fae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	73fb      	strb	r3, [r7, #15]
 8005fac:	e001      	b.n	8005fb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b083      	sub	sp, #12
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
 8005fc8:	460b      	mov	r3, r1
 8005fca:	807b      	strh	r3, [r7, #2]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005fd0:	787b      	ldrb	r3, [r7, #1]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d003      	beq.n	8005fde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005fd6:	887a      	ldrh	r2, [r7, #2]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005fdc:	e003      	b.n	8005fe6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005fde:	887b      	ldrh	r3, [r7, #2]
 8005fe0:	041a      	lsls	r2, r3, #16
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	619a      	str	r2, [r3, #24]
}
 8005fe6:	bf00      	nop
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
	...

08005ff4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b086      	sub	sp, #24
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e264      	b.n	80064d0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0301 	and.w	r3, r3, #1
 800600e:	2b00      	cmp	r3, #0
 8006010:	d075      	beq.n	80060fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006012:	4ba3      	ldr	r3, [pc, #652]	; (80062a0 <HAL_RCC_OscConfig+0x2ac>)
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	f003 030c 	and.w	r3, r3, #12
 800601a:	2b04      	cmp	r3, #4
 800601c:	d00c      	beq.n	8006038 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800601e:	4ba0      	ldr	r3, [pc, #640]	; (80062a0 <HAL_RCC_OscConfig+0x2ac>)
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006026:	2b08      	cmp	r3, #8
 8006028:	d112      	bne.n	8006050 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800602a:	4b9d      	ldr	r3, [pc, #628]	; (80062a0 <HAL_RCC_OscConfig+0x2ac>)
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006032:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006036:	d10b      	bne.n	8006050 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006038:	4b99      	ldr	r3, [pc, #612]	; (80062a0 <HAL_RCC_OscConfig+0x2ac>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006040:	2b00      	cmp	r3, #0
 8006042:	d05b      	beq.n	80060fc <HAL_RCC_OscConfig+0x108>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d157      	bne.n	80060fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	e23f      	b.n	80064d0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006058:	d106      	bne.n	8006068 <HAL_RCC_OscConfig+0x74>
 800605a:	4b91      	ldr	r3, [pc, #580]	; (80062a0 <HAL_RCC_OscConfig+0x2ac>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	4a90      	ldr	r2, [pc, #576]	; (80062a0 <HAL_RCC_OscConfig+0x2ac>)
 8006060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006064:	6013      	str	r3, [r2, #0]
 8006066:	e01d      	b.n	80060a4 <HAL_RCC_OscConfig+0xb0>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006070:	d10c      	bne.n	800608c <HAL_RCC_OscConfig+0x98>
 8006072:	4b8b      	ldr	r3, [pc, #556]	; (80062a0 <HAL_RCC_OscConfig+0x2ac>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a8a      	ldr	r2, [pc, #552]	; (80062a0 <HAL_RCC_OscConfig+0x2ac>)
 8006078:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800607c:	6013      	str	r3, [r2, #0]
 800607e:	4b88      	ldr	r3, [pc, #544]	; (80062a0 <HAL_RCC_OscConfig+0x2ac>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a87      	ldr	r2, [pc, #540]	; (80062a0 <HAL_RCC_OscConfig+0x2ac>)
 8006084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006088:	6013      	str	r3, [r2, #0]
 800608a:	e00b      	b.n	80060a4 <HAL_RCC_OscConfig+0xb0>
 800608c:	4b84      	ldr	r3, [pc, #528]	; (80062a0 <HAL_RCC_OscConfig+0x2ac>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a83      	ldr	r2, [pc, #524]	; (80062a0 <HAL_RCC_OscConfig+0x2ac>)
 8006092:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006096:	6013      	str	r3, [r2, #0]
 8006098:	4b81      	ldr	r3, [pc, #516]	; (80062a0 <HAL_RCC_OscConfig+0x2ac>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a80      	ldr	r2, [pc, #512]	; (80062a0 <HAL_RCC_OscConfig+0x2ac>)
 800609e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80060a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	685b      	ldr	r3, [r3, #4]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d013      	beq.n	80060d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060ac:	f7fd fb12 	bl	80036d4 <HAL_GetTick>
 80060b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060b2:	e008      	b.n	80060c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060b4:	f7fd fb0e 	bl	80036d4 <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	693b      	ldr	r3, [r7, #16]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	2b64      	cmp	r3, #100	; 0x64
 80060c0:	d901      	bls.n	80060c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	e204      	b.n	80064d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060c6:	4b76      	ldr	r3, [pc, #472]	; (80062a0 <HAL_RCC_OscConfig+0x2ac>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d0f0      	beq.n	80060b4 <HAL_RCC_OscConfig+0xc0>
 80060d2:	e014      	b.n	80060fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d4:	f7fd fafe 	bl	80036d4 <HAL_GetTick>
 80060d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060da:	e008      	b.n	80060ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80060dc:	f7fd fafa 	bl	80036d4 <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	2b64      	cmp	r3, #100	; 0x64
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e1f0      	b.n	80064d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80060ee:	4b6c      	ldr	r3, [pc, #432]	; (80062a0 <HAL_RCC_OscConfig+0x2ac>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1f0      	bne.n	80060dc <HAL_RCC_OscConfig+0xe8>
 80060fa:	e000      	b.n	80060fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 0302 	and.w	r3, r3, #2
 8006106:	2b00      	cmp	r3, #0
 8006108:	d063      	beq.n	80061d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800610a:	4b65      	ldr	r3, [pc, #404]	; (80062a0 <HAL_RCC_OscConfig+0x2ac>)
 800610c:	689b      	ldr	r3, [r3, #8]
 800610e:	f003 030c 	and.w	r3, r3, #12
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00b      	beq.n	800612e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006116:	4b62      	ldr	r3, [pc, #392]	; (80062a0 <HAL_RCC_OscConfig+0x2ac>)
 8006118:	689b      	ldr	r3, [r3, #8]
 800611a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800611e:	2b08      	cmp	r3, #8
 8006120:	d11c      	bne.n	800615c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006122:	4b5f      	ldr	r3, [pc, #380]	; (80062a0 <HAL_RCC_OscConfig+0x2ac>)
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d116      	bne.n	800615c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800612e:	4b5c      	ldr	r3, [pc, #368]	; (80062a0 <HAL_RCC_OscConfig+0x2ac>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f003 0302 	and.w	r3, r3, #2
 8006136:	2b00      	cmp	r3, #0
 8006138:	d005      	beq.n	8006146 <HAL_RCC_OscConfig+0x152>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d001      	beq.n	8006146 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e1c4      	b.n	80064d0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006146:	4b56      	ldr	r3, [pc, #344]	; (80062a0 <HAL_RCC_OscConfig+0x2ac>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	00db      	lsls	r3, r3, #3
 8006154:	4952      	ldr	r1, [pc, #328]	; (80062a0 <HAL_RCC_OscConfig+0x2ac>)
 8006156:	4313      	orrs	r3, r2
 8006158:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800615a:	e03a      	b.n	80061d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	68db      	ldr	r3, [r3, #12]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d020      	beq.n	80061a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006164:	4b4f      	ldr	r3, [pc, #316]	; (80062a4 <HAL_RCC_OscConfig+0x2b0>)
 8006166:	2201      	movs	r2, #1
 8006168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800616a:	f7fd fab3 	bl	80036d4 <HAL_GetTick>
 800616e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006170:	e008      	b.n	8006184 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006172:	f7fd faaf 	bl	80036d4 <HAL_GetTick>
 8006176:	4602      	mov	r2, r0
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	2b02      	cmp	r3, #2
 800617e:	d901      	bls.n	8006184 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e1a5      	b.n	80064d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006184:	4b46      	ldr	r3, [pc, #280]	; (80062a0 <HAL_RCC_OscConfig+0x2ac>)
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f003 0302 	and.w	r3, r3, #2
 800618c:	2b00      	cmp	r3, #0
 800618e:	d0f0      	beq.n	8006172 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006190:	4b43      	ldr	r3, [pc, #268]	; (80062a0 <HAL_RCC_OscConfig+0x2ac>)
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	00db      	lsls	r3, r3, #3
 800619e:	4940      	ldr	r1, [pc, #256]	; (80062a0 <HAL_RCC_OscConfig+0x2ac>)
 80061a0:	4313      	orrs	r3, r2
 80061a2:	600b      	str	r3, [r1, #0]
 80061a4:	e015      	b.n	80061d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80061a6:	4b3f      	ldr	r3, [pc, #252]	; (80062a4 <HAL_RCC_OscConfig+0x2b0>)
 80061a8:	2200      	movs	r2, #0
 80061aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ac:	f7fd fa92 	bl	80036d4 <HAL_GetTick>
 80061b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061b2:	e008      	b.n	80061c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80061b4:	f7fd fa8e 	bl	80036d4 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d901      	bls.n	80061c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e184      	b.n	80064d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80061c6:	4b36      	ldr	r3, [pc, #216]	; (80062a0 <HAL_RCC_OscConfig+0x2ac>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0302 	and.w	r3, r3, #2
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1f0      	bne.n	80061b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 0308 	and.w	r3, r3, #8
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d030      	beq.n	8006240 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	695b      	ldr	r3, [r3, #20]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d016      	beq.n	8006214 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80061e6:	4b30      	ldr	r3, [pc, #192]	; (80062a8 <HAL_RCC_OscConfig+0x2b4>)
 80061e8:	2201      	movs	r2, #1
 80061ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061ec:	f7fd fa72 	bl	80036d4 <HAL_GetTick>
 80061f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80061f2:	e008      	b.n	8006206 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80061f4:	f7fd fa6e 	bl	80036d4 <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d901      	bls.n	8006206 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e164      	b.n	80064d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006206:	4b26      	ldr	r3, [pc, #152]	; (80062a0 <HAL_RCC_OscConfig+0x2ac>)
 8006208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800620a:	f003 0302 	and.w	r3, r3, #2
 800620e:	2b00      	cmp	r3, #0
 8006210:	d0f0      	beq.n	80061f4 <HAL_RCC_OscConfig+0x200>
 8006212:	e015      	b.n	8006240 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006214:	4b24      	ldr	r3, [pc, #144]	; (80062a8 <HAL_RCC_OscConfig+0x2b4>)
 8006216:	2200      	movs	r2, #0
 8006218:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800621a:	f7fd fa5b 	bl	80036d4 <HAL_GetTick>
 800621e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006220:	e008      	b.n	8006234 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006222:	f7fd fa57 	bl	80036d4 <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	2b02      	cmp	r3, #2
 800622e:	d901      	bls.n	8006234 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006230:	2303      	movs	r3, #3
 8006232:	e14d      	b.n	80064d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006234:	4b1a      	ldr	r3, [pc, #104]	; (80062a0 <HAL_RCC_OscConfig+0x2ac>)
 8006236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006238:	f003 0302 	and.w	r3, r3, #2
 800623c:	2b00      	cmp	r3, #0
 800623e:	d1f0      	bne.n	8006222 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 0304 	and.w	r3, r3, #4
 8006248:	2b00      	cmp	r3, #0
 800624a:	f000 80a0 	beq.w	800638e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800624e:	2300      	movs	r3, #0
 8006250:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006252:	4b13      	ldr	r3, [pc, #76]	; (80062a0 <HAL_RCC_OscConfig+0x2ac>)
 8006254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10f      	bne.n	800627e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800625e:	2300      	movs	r3, #0
 8006260:	60bb      	str	r3, [r7, #8]
 8006262:	4b0f      	ldr	r3, [pc, #60]	; (80062a0 <HAL_RCC_OscConfig+0x2ac>)
 8006264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006266:	4a0e      	ldr	r2, [pc, #56]	; (80062a0 <HAL_RCC_OscConfig+0x2ac>)
 8006268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800626c:	6413      	str	r3, [r2, #64]	; 0x40
 800626e:	4b0c      	ldr	r3, [pc, #48]	; (80062a0 <HAL_RCC_OscConfig+0x2ac>)
 8006270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006276:	60bb      	str	r3, [r7, #8]
 8006278:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800627a:	2301      	movs	r3, #1
 800627c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800627e:	4b0b      	ldr	r3, [pc, #44]	; (80062ac <HAL_RCC_OscConfig+0x2b8>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006286:	2b00      	cmp	r3, #0
 8006288:	d121      	bne.n	80062ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800628a:	4b08      	ldr	r3, [pc, #32]	; (80062ac <HAL_RCC_OscConfig+0x2b8>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	4a07      	ldr	r2, [pc, #28]	; (80062ac <HAL_RCC_OscConfig+0x2b8>)
 8006290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006294:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006296:	f7fd fa1d 	bl	80036d4 <HAL_GetTick>
 800629a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800629c:	e011      	b.n	80062c2 <HAL_RCC_OscConfig+0x2ce>
 800629e:	bf00      	nop
 80062a0:	40023800 	.word	0x40023800
 80062a4:	42470000 	.word	0x42470000
 80062a8:	42470e80 	.word	0x42470e80
 80062ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80062b0:	f7fd fa10 	bl	80036d4 <HAL_GetTick>
 80062b4:	4602      	mov	r2, r0
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d901      	bls.n	80062c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80062be:	2303      	movs	r3, #3
 80062c0:	e106      	b.n	80064d0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80062c2:	4b85      	ldr	r3, [pc, #532]	; (80064d8 <HAL_RCC_OscConfig+0x4e4>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d0f0      	beq.n	80062b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	689b      	ldr	r3, [r3, #8]
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d106      	bne.n	80062e4 <HAL_RCC_OscConfig+0x2f0>
 80062d6:	4b81      	ldr	r3, [pc, #516]	; (80064dc <HAL_RCC_OscConfig+0x4e8>)
 80062d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062da:	4a80      	ldr	r2, [pc, #512]	; (80064dc <HAL_RCC_OscConfig+0x4e8>)
 80062dc:	f043 0301 	orr.w	r3, r3, #1
 80062e0:	6713      	str	r3, [r2, #112]	; 0x70
 80062e2:	e01c      	b.n	800631e <HAL_RCC_OscConfig+0x32a>
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	2b05      	cmp	r3, #5
 80062ea:	d10c      	bne.n	8006306 <HAL_RCC_OscConfig+0x312>
 80062ec:	4b7b      	ldr	r3, [pc, #492]	; (80064dc <HAL_RCC_OscConfig+0x4e8>)
 80062ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062f0:	4a7a      	ldr	r2, [pc, #488]	; (80064dc <HAL_RCC_OscConfig+0x4e8>)
 80062f2:	f043 0304 	orr.w	r3, r3, #4
 80062f6:	6713      	str	r3, [r2, #112]	; 0x70
 80062f8:	4b78      	ldr	r3, [pc, #480]	; (80064dc <HAL_RCC_OscConfig+0x4e8>)
 80062fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062fc:	4a77      	ldr	r2, [pc, #476]	; (80064dc <HAL_RCC_OscConfig+0x4e8>)
 80062fe:	f043 0301 	orr.w	r3, r3, #1
 8006302:	6713      	str	r3, [r2, #112]	; 0x70
 8006304:	e00b      	b.n	800631e <HAL_RCC_OscConfig+0x32a>
 8006306:	4b75      	ldr	r3, [pc, #468]	; (80064dc <HAL_RCC_OscConfig+0x4e8>)
 8006308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800630a:	4a74      	ldr	r2, [pc, #464]	; (80064dc <HAL_RCC_OscConfig+0x4e8>)
 800630c:	f023 0301 	bic.w	r3, r3, #1
 8006310:	6713      	str	r3, [r2, #112]	; 0x70
 8006312:	4b72      	ldr	r3, [pc, #456]	; (80064dc <HAL_RCC_OscConfig+0x4e8>)
 8006314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006316:	4a71      	ldr	r2, [pc, #452]	; (80064dc <HAL_RCC_OscConfig+0x4e8>)
 8006318:	f023 0304 	bic.w	r3, r3, #4
 800631c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d015      	beq.n	8006352 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006326:	f7fd f9d5 	bl	80036d4 <HAL_GetTick>
 800632a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800632c:	e00a      	b.n	8006344 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800632e:	f7fd f9d1 	bl	80036d4 <HAL_GetTick>
 8006332:	4602      	mov	r2, r0
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	1ad3      	subs	r3, r2, r3
 8006338:	f241 3288 	movw	r2, #5000	; 0x1388
 800633c:	4293      	cmp	r3, r2
 800633e:	d901      	bls.n	8006344 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006340:	2303      	movs	r3, #3
 8006342:	e0c5      	b.n	80064d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006344:	4b65      	ldr	r3, [pc, #404]	; (80064dc <HAL_RCC_OscConfig+0x4e8>)
 8006346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006348:	f003 0302 	and.w	r3, r3, #2
 800634c:	2b00      	cmp	r3, #0
 800634e:	d0ee      	beq.n	800632e <HAL_RCC_OscConfig+0x33a>
 8006350:	e014      	b.n	800637c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006352:	f7fd f9bf 	bl	80036d4 <HAL_GetTick>
 8006356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006358:	e00a      	b.n	8006370 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800635a:	f7fd f9bb 	bl	80036d4 <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	f241 3288 	movw	r2, #5000	; 0x1388
 8006368:	4293      	cmp	r3, r2
 800636a:	d901      	bls.n	8006370 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	e0af      	b.n	80064d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006370:	4b5a      	ldr	r3, [pc, #360]	; (80064dc <HAL_RCC_OscConfig+0x4e8>)
 8006372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006374:	f003 0302 	and.w	r3, r3, #2
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1ee      	bne.n	800635a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800637c:	7dfb      	ldrb	r3, [r7, #23]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d105      	bne.n	800638e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006382:	4b56      	ldr	r3, [pc, #344]	; (80064dc <HAL_RCC_OscConfig+0x4e8>)
 8006384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006386:	4a55      	ldr	r2, [pc, #340]	; (80064dc <HAL_RCC_OscConfig+0x4e8>)
 8006388:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800638c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	2b00      	cmp	r3, #0
 8006394:	f000 809b 	beq.w	80064ce <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006398:	4b50      	ldr	r3, [pc, #320]	; (80064dc <HAL_RCC_OscConfig+0x4e8>)
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	f003 030c 	and.w	r3, r3, #12
 80063a0:	2b08      	cmp	r3, #8
 80063a2:	d05c      	beq.n	800645e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	2b02      	cmp	r3, #2
 80063aa:	d141      	bne.n	8006430 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063ac:	4b4c      	ldr	r3, [pc, #304]	; (80064e0 <HAL_RCC_OscConfig+0x4ec>)
 80063ae:	2200      	movs	r2, #0
 80063b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063b2:	f7fd f98f 	bl	80036d4 <HAL_GetTick>
 80063b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063b8:	e008      	b.n	80063cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80063ba:	f7fd f98b 	bl	80036d4 <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d901      	bls.n	80063cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80063c8:	2303      	movs	r3, #3
 80063ca:	e081      	b.n	80064d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063cc:	4b43      	ldr	r3, [pc, #268]	; (80064dc <HAL_RCC_OscConfig+0x4e8>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1f0      	bne.n	80063ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	69da      	ldr	r2, [r3, #28]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6a1b      	ldr	r3, [r3, #32]
 80063e0:	431a      	orrs	r2, r3
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e6:	019b      	lsls	r3, r3, #6
 80063e8:	431a      	orrs	r2, r3
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ee:	085b      	lsrs	r3, r3, #1
 80063f0:	3b01      	subs	r3, #1
 80063f2:	041b      	lsls	r3, r3, #16
 80063f4:	431a      	orrs	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063fa:	061b      	lsls	r3, r3, #24
 80063fc:	4937      	ldr	r1, [pc, #220]	; (80064dc <HAL_RCC_OscConfig+0x4e8>)
 80063fe:	4313      	orrs	r3, r2
 8006400:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006402:	4b37      	ldr	r3, [pc, #220]	; (80064e0 <HAL_RCC_OscConfig+0x4ec>)
 8006404:	2201      	movs	r2, #1
 8006406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006408:	f7fd f964 	bl	80036d4 <HAL_GetTick>
 800640c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800640e:	e008      	b.n	8006422 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006410:	f7fd f960 	bl	80036d4 <HAL_GetTick>
 8006414:	4602      	mov	r2, r0
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	1ad3      	subs	r3, r2, r3
 800641a:	2b02      	cmp	r3, #2
 800641c:	d901      	bls.n	8006422 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800641e:	2303      	movs	r3, #3
 8006420:	e056      	b.n	80064d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006422:	4b2e      	ldr	r3, [pc, #184]	; (80064dc <HAL_RCC_OscConfig+0x4e8>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d0f0      	beq.n	8006410 <HAL_RCC_OscConfig+0x41c>
 800642e:	e04e      	b.n	80064ce <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006430:	4b2b      	ldr	r3, [pc, #172]	; (80064e0 <HAL_RCC_OscConfig+0x4ec>)
 8006432:	2200      	movs	r2, #0
 8006434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006436:	f7fd f94d 	bl	80036d4 <HAL_GetTick>
 800643a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800643c:	e008      	b.n	8006450 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800643e:	f7fd f949 	bl	80036d4 <HAL_GetTick>
 8006442:	4602      	mov	r2, r0
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	1ad3      	subs	r3, r2, r3
 8006448:	2b02      	cmp	r3, #2
 800644a:	d901      	bls.n	8006450 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e03f      	b.n	80064d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006450:	4b22      	ldr	r3, [pc, #136]	; (80064dc <HAL_RCC_OscConfig+0x4e8>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1f0      	bne.n	800643e <HAL_RCC_OscConfig+0x44a>
 800645c:	e037      	b.n	80064ce <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	699b      	ldr	r3, [r3, #24]
 8006462:	2b01      	cmp	r3, #1
 8006464:	d101      	bne.n	800646a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006466:	2301      	movs	r3, #1
 8006468:	e032      	b.n	80064d0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800646a:	4b1c      	ldr	r3, [pc, #112]	; (80064dc <HAL_RCC_OscConfig+0x4e8>)
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d028      	beq.n	80064ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006482:	429a      	cmp	r2, r3
 8006484:	d121      	bne.n	80064ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006490:	429a      	cmp	r2, r3
 8006492:	d11a      	bne.n	80064ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800649a:	4013      	ands	r3, r2
 800649c:	687a      	ldr	r2, [r7, #4]
 800649e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80064a0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d111      	bne.n	80064ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b0:	085b      	lsrs	r3, r3, #1
 80064b2:	3b01      	subs	r3, #1
 80064b4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d107      	bne.n	80064ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064c6:	429a      	cmp	r2, r3
 80064c8:	d001      	beq.n	80064ce <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80064ca:	2301      	movs	r3, #1
 80064cc:	e000      	b.n	80064d0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3718      	adds	r7, #24
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	40007000 	.word	0x40007000
 80064dc:	40023800 	.word	0x40023800
 80064e0:	42470060 	.word	0x42470060

080064e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d101      	bne.n	80064f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e0cc      	b.n	8006692 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80064f8:	4b68      	ldr	r3, [pc, #416]	; (800669c <HAL_RCC_ClockConfig+0x1b8>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0307 	and.w	r3, r3, #7
 8006500:	683a      	ldr	r2, [r7, #0]
 8006502:	429a      	cmp	r2, r3
 8006504:	d90c      	bls.n	8006520 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006506:	4b65      	ldr	r3, [pc, #404]	; (800669c <HAL_RCC_ClockConfig+0x1b8>)
 8006508:	683a      	ldr	r2, [r7, #0]
 800650a:	b2d2      	uxtb	r2, r2
 800650c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800650e:	4b63      	ldr	r3, [pc, #396]	; (800669c <HAL_RCC_ClockConfig+0x1b8>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0307 	and.w	r3, r3, #7
 8006516:	683a      	ldr	r2, [r7, #0]
 8006518:	429a      	cmp	r2, r3
 800651a:	d001      	beq.n	8006520 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e0b8      	b.n	8006692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f003 0302 	and.w	r3, r3, #2
 8006528:	2b00      	cmp	r3, #0
 800652a:	d020      	beq.n	800656e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f003 0304 	and.w	r3, r3, #4
 8006534:	2b00      	cmp	r3, #0
 8006536:	d005      	beq.n	8006544 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006538:	4b59      	ldr	r3, [pc, #356]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	4a58      	ldr	r2, [pc, #352]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 800653e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006542:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0308 	and.w	r3, r3, #8
 800654c:	2b00      	cmp	r3, #0
 800654e:	d005      	beq.n	800655c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006550:	4b53      	ldr	r3, [pc, #332]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006552:	689b      	ldr	r3, [r3, #8]
 8006554:	4a52      	ldr	r2, [pc, #328]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006556:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800655a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800655c:	4b50      	ldr	r3, [pc, #320]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	689b      	ldr	r3, [r3, #8]
 8006568:	494d      	ldr	r1, [pc, #308]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 800656a:	4313      	orrs	r3, r2
 800656c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f003 0301 	and.w	r3, r3, #1
 8006576:	2b00      	cmp	r3, #0
 8006578:	d044      	beq.n	8006604 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d107      	bne.n	8006592 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006582:	4b47      	ldr	r3, [pc, #284]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d119      	bne.n	80065c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	e07f      	b.n	8006692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	685b      	ldr	r3, [r3, #4]
 8006596:	2b02      	cmp	r3, #2
 8006598:	d003      	beq.n	80065a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800659e:	2b03      	cmp	r3, #3
 80065a0:	d107      	bne.n	80065b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80065a2:	4b3f      	ldr	r3, [pc, #252]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d109      	bne.n	80065c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065ae:	2301      	movs	r3, #1
 80065b0:	e06f      	b.n	8006692 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80065b2:	4b3b      	ldr	r3, [pc, #236]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0302 	and.w	r3, r3, #2
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e067      	b.n	8006692 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80065c2:	4b37      	ldr	r3, [pc, #220]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	f023 0203 	bic.w	r2, r3, #3
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	4934      	ldr	r1, [pc, #208]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 80065d0:	4313      	orrs	r3, r2
 80065d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80065d4:	f7fd f87e 	bl	80036d4 <HAL_GetTick>
 80065d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065da:	e00a      	b.n	80065f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065dc:	f7fd f87a 	bl	80036d4 <HAL_GetTick>
 80065e0:	4602      	mov	r2, r0
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	1ad3      	subs	r3, r2, r3
 80065e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d901      	bls.n	80065f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80065ee:	2303      	movs	r3, #3
 80065f0:	e04f      	b.n	8006692 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80065f2:	4b2b      	ldr	r3, [pc, #172]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f003 020c 	and.w	r2, r3, #12
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	429a      	cmp	r2, r3
 8006602:	d1eb      	bne.n	80065dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006604:	4b25      	ldr	r3, [pc, #148]	; (800669c <HAL_RCC_ClockConfig+0x1b8>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f003 0307 	and.w	r3, r3, #7
 800660c:	683a      	ldr	r2, [r7, #0]
 800660e:	429a      	cmp	r2, r3
 8006610:	d20c      	bcs.n	800662c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006612:	4b22      	ldr	r3, [pc, #136]	; (800669c <HAL_RCC_ClockConfig+0x1b8>)
 8006614:	683a      	ldr	r2, [r7, #0]
 8006616:	b2d2      	uxtb	r2, r2
 8006618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800661a:	4b20      	ldr	r3, [pc, #128]	; (800669c <HAL_RCC_ClockConfig+0x1b8>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f003 0307 	and.w	r3, r3, #7
 8006622:	683a      	ldr	r2, [r7, #0]
 8006624:	429a      	cmp	r2, r3
 8006626:	d001      	beq.n	800662c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e032      	b.n	8006692 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0304 	and.w	r3, r3, #4
 8006634:	2b00      	cmp	r3, #0
 8006636:	d008      	beq.n	800664a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006638:	4b19      	ldr	r3, [pc, #100]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	4916      	ldr	r1, [pc, #88]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006646:	4313      	orrs	r3, r2
 8006648:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f003 0308 	and.w	r3, r3, #8
 8006652:	2b00      	cmp	r3, #0
 8006654:	d009      	beq.n	800666a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006656:	4b12      	ldr	r3, [pc, #72]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	00db      	lsls	r3, r3, #3
 8006664:	490e      	ldr	r1, [pc, #56]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006666:	4313      	orrs	r3, r2
 8006668:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800666a:	f000 f889 	bl	8006780 <HAL_RCC_GetSysClockFreq>
 800666e:	4602      	mov	r2, r0
 8006670:	4b0b      	ldr	r3, [pc, #44]	; (80066a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	091b      	lsrs	r3, r3, #4
 8006676:	f003 030f 	and.w	r3, r3, #15
 800667a:	490a      	ldr	r1, [pc, #40]	; (80066a4 <HAL_RCC_ClockConfig+0x1c0>)
 800667c:	5ccb      	ldrb	r3, [r1, r3]
 800667e:	fa22 f303 	lsr.w	r3, r2, r3
 8006682:	4a09      	ldr	r2, [pc, #36]	; (80066a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006684:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006686:	4b09      	ldr	r3, [pc, #36]	; (80066ac <HAL_RCC_ClockConfig+0x1c8>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4618      	mov	r0, r3
 800668c:	f7fc fc16 	bl	8002ebc <HAL_InitTick>

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	40023c00 	.word	0x40023c00
 80066a0:	40023800 	.word	0x40023800
 80066a4:	0801ee04 	.word	0x0801ee04
 80066a8:	20000094 	.word	0x20000094
 80066ac:	20000098 	.word	0x20000098

080066b0 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b08c      	sub	sp, #48	; 0x30
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	60f8      	str	r0, [r7, #12]
 80066b8:	60b9      	str	r1, [r7, #8]
 80066ba:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d129      	bne.n	8006716 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80066c2:	2300      	movs	r3, #0
 80066c4:	61bb      	str	r3, [r7, #24]
 80066c6:	4b2b      	ldr	r3, [pc, #172]	; (8006774 <HAL_RCC_MCOConfig+0xc4>)
 80066c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ca:	4a2a      	ldr	r2, [pc, #168]	; (8006774 <HAL_RCC_MCOConfig+0xc4>)
 80066cc:	f043 0301 	orr.w	r3, r3, #1
 80066d0:	6313      	str	r3, [r2, #48]	; 0x30
 80066d2:	4b28      	ldr	r3, [pc, #160]	; (8006774 <HAL_RCC_MCOConfig+0xc4>)
 80066d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066d6:	f003 0301 	and.w	r3, r3, #1
 80066da:	61bb      	str	r3, [r7, #24]
 80066dc:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80066de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80066e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066e4:	2302      	movs	r3, #2
 80066e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066e8:	2303      	movs	r3, #3
 80066ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066ec:	2300      	movs	r3, #0
 80066ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80066f0:	2300      	movs	r3, #0
 80066f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80066f4:	f107 031c 	add.w	r3, r7, #28
 80066f8:	4619      	mov	r1, r3
 80066fa:	481f      	ldr	r0, [pc, #124]	; (8006778 <HAL_RCC_MCOConfig+0xc8>)
 80066fc:	f7ff faac 	bl	8005c58 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8006700:	4b1c      	ldr	r3, [pc, #112]	; (8006774 <HAL_RCC_MCOConfig+0xc4>)
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8006708:	68b9      	ldr	r1, [r7, #8]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	430b      	orrs	r3, r1
 800670e:	4919      	ldr	r1, [pc, #100]	; (8006774 <HAL_RCC_MCOConfig+0xc4>)
 8006710:	4313      	orrs	r3, r2
 8006712:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8006714:	e029      	b.n	800676a <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8006716:	2300      	movs	r3, #0
 8006718:	617b      	str	r3, [r7, #20]
 800671a:	4b16      	ldr	r3, [pc, #88]	; (8006774 <HAL_RCC_MCOConfig+0xc4>)
 800671c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800671e:	4a15      	ldr	r2, [pc, #84]	; (8006774 <HAL_RCC_MCOConfig+0xc4>)
 8006720:	f043 0304 	orr.w	r3, r3, #4
 8006724:	6313      	str	r3, [r2, #48]	; 0x30
 8006726:	4b13      	ldr	r3, [pc, #76]	; (8006774 <HAL_RCC_MCOConfig+0xc4>)
 8006728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800672a:	f003 0304 	and.w	r3, r3, #4
 800672e:	617b      	str	r3, [r7, #20]
 8006730:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8006732:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006738:	2302      	movs	r3, #2
 800673a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800673c:	2303      	movs	r3, #3
 800673e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006740:	2300      	movs	r3, #0
 8006742:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8006744:	2300      	movs	r3, #0
 8006746:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8006748:	f107 031c 	add.w	r3, r7, #28
 800674c:	4619      	mov	r1, r3
 800674e:	480b      	ldr	r0, [pc, #44]	; (800677c <HAL_RCC_MCOConfig+0xcc>)
 8006750:	f7ff fa82 	bl	8005c58 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8006754:	4b07      	ldr	r3, [pc, #28]	; (8006774 <HAL_RCC_MCOConfig+0xc4>)
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	00d9      	lsls	r1, r3, #3
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	430b      	orrs	r3, r1
 8006764:	4903      	ldr	r1, [pc, #12]	; (8006774 <HAL_RCC_MCOConfig+0xc4>)
 8006766:	4313      	orrs	r3, r2
 8006768:	608b      	str	r3, [r1, #8]
}
 800676a:	bf00      	nop
 800676c:	3730      	adds	r7, #48	; 0x30
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	40023800 	.word	0x40023800
 8006778:	40020000 	.word	0x40020000
 800677c:	40020800 	.word	0x40020800

08006780 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006780:	b5b0      	push	{r4, r5, r7, lr}
 8006782:	b084      	sub	sp, #16
 8006784:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006786:	2100      	movs	r1, #0
 8006788:	6079      	str	r1, [r7, #4]
 800678a:	2100      	movs	r1, #0
 800678c:	60f9      	str	r1, [r7, #12]
 800678e:	2100      	movs	r1, #0
 8006790:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006792:	2100      	movs	r1, #0
 8006794:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006796:	4952      	ldr	r1, [pc, #328]	; (80068e0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006798:	6889      	ldr	r1, [r1, #8]
 800679a:	f001 010c 	and.w	r1, r1, #12
 800679e:	2908      	cmp	r1, #8
 80067a0:	d00d      	beq.n	80067be <HAL_RCC_GetSysClockFreq+0x3e>
 80067a2:	2908      	cmp	r1, #8
 80067a4:	f200 8094 	bhi.w	80068d0 <HAL_RCC_GetSysClockFreq+0x150>
 80067a8:	2900      	cmp	r1, #0
 80067aa:	d002      	beq.n	80067b2 <HAL_RCC_GetSysClockFreq+0x32>
 80067ac:	2904      	cmp	r1, #4
 80067ae:	d003      	beq.n	80067b8 <HAL_RCC_GetSysClockFreq+0x38>
 80067b0:	e08e      	b.n	80068d0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80067b2:	4b4c      	ldr	r3, [pc, #304]	; (80068e4 <HAL_RCC_GetSysClockFreq+0x164>)
 80067b4:	60bb      	str	r3, [r7, #8]
       break;
 80067b6:	e08e      	b.n	80068d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80067b8:	4b4b      	ldr	r3, [pc, #300]	; (80068e8 <HAL_RCC_GetSysClockFreq+0x168>)
 80067ba:	60bb      	str	r3, [r7, #8]
      break;
 80067bc:	e08b      	b.n	80068d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80067be:	4948      	ldr	r1, [pc, #288]	; (80068e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80067c0:	6849      	ldr	r1, [r1, #4]
 80067c2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80067c6:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80067c8:	4945      	ldr	r1, [pc, #276]	; (80068e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80067ca:	6849      	ldr	r1, [r1, #4]
 80067cc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80067d0:	2900      	cmp	r1, #0
 80067d2:	d024      	beq.n	800681e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80067d4:	4942      	ldr	r1, [pc, #264]	; (80068e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80067d6:	6849      	ldr	r1, [r1, #4]
 80067d8:	0989      	lsrs	r1, r1, #6
 80067da:	4608      	mov	r0, r1
 80067dc:	f04f 0100 	mov.w	r1, #0
 80067e0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80067e4:	f04f 0500 	mov.w	r5, #0
 80067e8:	ea00 0204 	and.w	r2, r0, r4
 80067ec:	ea01 0305 	and.w	r3, r1, r5
 80067f0:	493d      	ldr	r1, [pc, #244]	; (80068e8 <HAL_RCC_GetSysClockFreq+0x168>)
 80067f2:	fb01 f003 	mul.w	r0, r1, r3
 80067f6:	2100      	movs	r1, #0
 80067f8:	fb01 f102 	mul.w	r1, r1, r2
 80067fc:	1844      	adds	r4, r0, r1
 80067fe:	493a      	ldr	r1, [pc, #232]	; (80068e8 <HAL_RCC_GetSysClockFreq+0x168>)
 8006800:	fba2 0101 	umull	r0, r1, r2, r1
 8006804:	1863      	adds	r3, r4, r1
 8006806:	4619      	mov	r1, r3
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	461a      	mov	r2, r3
 800680c:	f04f 0300 	mov.w	r3, #0
 8006810:	f7f9 fd2e 	bl	8000270 <__aeabi_uldivmod>
 8006814:	4602      	mov	r2, r0
 8006816:	460b      	mov	r3, r1
 8006818:	4613      	mov	r3, r2
 800681a:	60fb      	str	r3, [r7, #12]
 800681c:	e04a      	b.n	80068b4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800681e:	4b30      	ldr	r3, [pc, #192]	; (80068e0 <HAL_RCC_GetSysClockFreq+0x160>)
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	099b      	lsrs	r3, r3, #6
 8006824:	461a      	mov	r2, r3
 8006826:	f04f 0300 	mov.w	r3, #0
 800682a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800682e:	f04f 0100 	mov.w	r1, #0
 8006832:	ea02 0400 	and.w	r4, r2, r0
 8006836:	ea03 0501 	and.w	r5, r3, r1
 800683a:	4620      	mov	r0, r4
 800683c:	4629      	mov	r1, r5
 800683e:	f04f 0200 	mov.w	r2, #0
 8006842:	f04f 0300 	mov.w	r3, #0
 8006846:	014b      	lsls	r3, r1, #5
 8006848:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800684c:	0142      	lsls	r2, r0, #5
 800684e:	4610      	mov	r0, r2
 8006850:	4619      	mov	r1, r3
 8006852:	1b00      	subs	r0, r0, r4
 8006854:	eb61 0105 	sbc.w	r1, r1, r5
 8006858:	f04f 0200 	mov.w	r2, #0
 800685c:	f04f 0300 	mov.w	r3, #0
 8006860:	018b      	lsls	r3, r1, #6
 8006862:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006866:	0182      	lsls	r2, r0, #6
 8006868:	1a12      	subs	r2, r2, r0
 800686a:	eb63 0301 	sbc.w	r3, r3, r1
 800686e:	f04f 0000 	mov.w	r0, #0
 8006872:	f04f 0100 	mov.w	r1, #0
 8006876:	00d9      	lsls	r1, r3, #3
 8006878:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800687c:	00d0      	lsls	r0, r2, #3
 800687e:	4602      	mov	r2, r0
 8006880:	460b      	mov	r3, r1
 8006882:	1912      	adds	r2, r2, r4
 8006884:	eb45 0303 	adc.w	r3, r5, r3
 8006888:	f04f 0000 	mov.w	r0, #0
 800688c:	f04f 0100 	mov.w	r1, #0
 8006890:	0299      	lsls	r1, r3, #10
 8006892:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006896:	0290      	lsls	r0, r2, #10
 8006898:	4602      	mov	r2, r0
 800689a:	460b      	mov	r3, r1
 800689c:	4610      	mov	r0, r2
 800689e:	4619      	mov	r1, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	461a      	mov	r2, r3
 80068a4:	f04f 0300 	mov.w	r3, #0
 80068a8:	f7f9 fce2 	bl	8000270 <__aeabi_uldivmod>
 80068ac:	4602      	mov	r2, r0
 80068ae:	460b      	mov	r3, r1
 80068b0:	4613      	mov	r3, r2
 80068b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80068b4:	4b0a      	ldr	r3, [pc, #40]	; (80068e0 <HAL_RCC_GetSysClockFreq+0x160>)
 80068b6:	685b      	ldr	r3, [r3, #4]
 80068b8:	0c1b      	lsrs	r3, r3, #16
 80068ba:	f003 0303 	and.w	r3, r3, #3
 80068be:	3301      	adds	r3, #1
 80068c0:	005b      	lsls	r3, r3, #1
 80068c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80068c4:	68fa      	ldr	r2, [r7, #12]
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068cc:	60bb      	str	r3, [r7, #8]
      break;
 80068ce:	e002      	b.n	80068d6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80068d0:	4b04      	ldr	r3, [pc, #16]	; (80068e4 <HAL_RCC_GetSysClockFreq+0x164>)
 80068d2:	60bb      	str	r3, [r7, #8]
      break;
 80068d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068d6:	68bb      	ldr	r3, [r7, #8]
}
 80068d8:	4618      	mov	r0, r3
 80068da:	3710      	adds	r7, #16
 80068dc:	46bd      	mov	sp, r7
 80068de:	bdb0      	pop	{r4, r5, r7, pc}
 80068e0:	40023800 	.word	0x40023800
 80068e4:	00f42400 	.word	0x00f42400
 80068e8:	017d7840 	.word	0x017d7840

080068ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068ec:	b480      	push	{r7}
 80068ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80068f0:	4b03      	ldr	r3, [pc, #12]	; (8006900 <HAL_RCC_GetHCLKFreq+0x14>)
 80068f2:	681b      	ldr	r3, [r3, #0]
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	46bd      	mov	sp, r7
 80068f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fc:	4770      	bx	lr
 80068fe:	bf00      	nop
 8006900:	20000094 	.word	0x20000094

08006904 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006908:	f7ff fff0 	bl	80068ec <HAL_RCC_GetHCLKFreq>
 800690c:	4602      	mov	r2, r0
 800690e:	4b05      	ldr	r3, [pc, #20]	; (8006924 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	0a9b      	lsrs	r3, r3, #10
 8006914:	f003 0307 	and.w	r3, r3, #7
 8006918:	4903      	ldr	r1, [pc, #12]	; (8006928 <HAL_RCC_GetPCLK1Freq+0x24>)
 800691a:	5ccb      	ldrb	r3, [r1, r3]
 800691c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006920:	4618      	mov	r0, r3
 8006922:	bd80      	pop	{r7, pc}
 8006924:	40023800 	.word	0x40023800
 8006928:	0801ee14 	.word	0x0801ee14

0800692c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006930:	f7ff ffdc 	bl	80068ec <HAL_RCC_GetHCLKFreq>
 8006934:	4602      	mov	r2, r0
 8006936:	4b05      	ldr	r3, [pc, #20]	; (800694c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	0b5b      	lsrs	r3, r3, #13
 800693c:	f003 0307 	and.w	r3, r3, #7
 8006940:	4903      	ldr	r1, [pc, #12]	; (8006950 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006942:	5ccb      	ldrb	r3, [r1, r3]
 8006944:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006948:	4618      	mov	r0, r3
 800694a:	bd80      	pop	{r7, pc}
 800694c:	40023800 	.word	0x40023800
 8006950:	0801ee14 	.word	0x0801ee14

08006954 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	220f      	movs	r2, #15
 8006962:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006964:	4b12      	ldr	r3, [pc, #72]	; (80069b0 <HAL_RCC_GetClockConfig+0x5c>)
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	f003 0203 	and.w	r2, r3, #3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006970:	4b0f      	ldr	r3, [pc, #60]	; (80069b0 <HAL_RCC_GetClockConfig+0x5c>)
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800697c:	4b0c      	ldr	r3, [pc, #48]	; (80069b0 <HAL_RCC_GetClockConfig+0x5c>)
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006988:	4b09      	ldr	r3, [pc, #36]	; (80069b0 <HAL_RCC_GetClockConfig+0x5c>)
 800698a:	689b      	ldr	r3, [r3, #8]
 800698c:	08db      	lsrs	r3, r3, #3
 800698e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006996:	4b07      	ldr	r3, [pc, #28]	; (80069b4 <HAL_RCC_GetClockConfig+0x60>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 0207 	and.w	r2, r3, #7
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	601a      	str	r2, [r3, #0]
}
 80069a2:	bf00      	nop
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	40023800 	.word	0x40023800
 80069b4:	40023c00 	.word	0x40023c00

080069b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b082      	sub	sp, #8
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d101      	bne.n	80069ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e07b      	b.n	8006ac2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d108      	bne.n	80069e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069da:	d009      	beq.n	80069f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	61da      	str	r2, [r3, #28]
 80069e2:	e005      	b.n	80069f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2200      	movs	r2, #0
 80069f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d106      	bne.n	8006a10 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f7fc f8fa 	bl	8002c04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2202      	movs	r2, #2
 8006a14:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a26:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006a38:	431a      	orrs	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a42:	431a      	orrs	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	691b      	ldr	r3, [r3, #16]
 8006a48:	f003 0302 	and.w	r3, r3, #2
 8006a4c:	431a      	orrs	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	f003 0301 	and.w	r3, r3, #1
 8006a56:	431a      	orrs	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a60:	431a      	orrs	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	69db      	ldr	r3, [r3, #28]
 8006a66:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a6a:	431a      	orrs	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	6a1b      	ldr	r3, [r3, #32]
 8006a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a74:	ea42 0103 	orr.w	r1, r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a7c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	430a      	orrs	r2, r1
 8006a86:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	699b      	ldr	r3, [r3, #24]
 8006a8c:	0c1b      	lsrs	r3, r3, #16
 8006a8e:	f003 0104 	and.w	r1, r3, #4
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a96:	f003 0210 	and.w	r2, r3, #16
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	430a      	orrs	r2, r1
 8006aa0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	69da      	ldr	r2, [r3, #28]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ab0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3708      	adds	r7, #8
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b088      	sub	sp, #32
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	60f8      	str	r0, [r7, #12]
 8006ad2:	60b9      	str	r1, [r7, #8]
 8006ad4:	603b      	str	r3, [r7, #0]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006ada:	2300      	movs	r3, #0
 8006adc:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006ae4:	2b01      	cmp	r3, #1
 8006ae6:	d101      	bne.n	8006aec <HAL_SPI_Transmit+0x22>
 8006ae8:	2302      	movs	r3, #2
 8006aea:	e126      	b.n	8006d3a <HAL_SPI_Transmit+0x270>
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2201      	movs	r2, #1
 8006af0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006af4:	f7fc fdee 	bl	80036d4 <HAL_GetTick>
 8006af8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006afa:	88fb      	ldrh	r3, [r7, #6]
 8006afc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d002      	beq.n	8006b10 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b0e:	e10b      	b.n	8006d28 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d002      	beq.n	8006b1c <HAL_SPI_Transmit+0x52>
 8006b16:	88fb      	ldrh	r3, [r7, #6]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d102      	bne.n	8006b22 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b20:	e102      	b.n	8006d28 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	2203      	movs	r2, #3
 8006b26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	88fa      	ldrh	r2, [r7, #6]
 8006b3a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	88fa      	ldrh	r2, [r7, #6]
 8006b40:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	2200      	movs	r2, #0
 8006b46:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	2200      	movs	r2, #0
 8006b52:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2200      	movs	r2, #0
 8006b58:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b68:	d10f      	bne.n	8006b8a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b94:	2b40      	cmp	r3, #64	; 0x40
 8006b96:	d007      	beq.n	8006ba8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ba6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bb0:	d14b      	bne.n	8006c4a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d002      	beq.n	8006bc0 <HAL_SPI_Transmit+0xf6>
 8006bba:	8afb      	ldrh	r3, [r7, #22]
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d13e      	bne.n	8006c3e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc4:	881a      	ldrh	r2, [r3, #0]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bd0:	1c9a      	adds	r2, r3, #2
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006be4:	e02b      	b.n	8006c3e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f003 0302 	and.w	r3, r3, #2
 8006bf0:	2b02      	cmp	r3, #2
 8006bf2:	d112      	bne.n	8006c1a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf8:	881a      	ldrh	r2, [r3, #0]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c04:	1c9a      	adds	r2, r3, #2
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	3b01      	subs	r3, #1
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	86da      	strh	r2, [r3, #54]	; 0x36
 8006c18:	e011      	b.n	8006c3e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c1a:	f7fc fd5b 	bl	80036d4 <HAL_GetTick>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	683a      	ldr	r2, [r7, #0]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d803      	bhi.n	8006c32 <HAL_SPI_Transmit+0x168>
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c30:	d102      	bne.n	8006c38 <HAL_SPI_Transmit+0x16e>
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d102      	bne.n	8006c3e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006c3c:	e074      	b.n	8006d28 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1ce      	bne.n	8006be6 <HAL_SPI_Transmit+0x11c>
 8006c48:	e04c      	b.n	8006ce4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d002      	beq.n	8006c58 <HAL_SPI_Transmit+0x18e>
 8006c52:	8afb      	ldrh	r3, [r7, #22]
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d140      	bne.n	8006cda <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	330c      	adds	r3, #12
 8006c62:	7812      	ldrb	r2, [r2, #0]
 8006c64:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c6a:	1c5a      	adds	r2, r3, #1
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	3b01      	subs	r3, #1
 8006c78:	b29a      	uxth	r2, r3
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006c7e:	e02c      	b.n	8006cda <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f003 0302 	and.w	r3, r3, #2
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d113      	bne.n	8006cb6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	330c      	adds	r3, #12
 8006c98:	7812      	ldrb	r2, [r2, #0]
 8006c9a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca0:	1c5a      	adds	r2, r3, #1
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	3b01      	subs	r3, #1
 8006cae:	b29a      	uxth	r2, r3
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	86da      	strh	r2, [r3, #54]	; 0x36
 8006cb4:	e011      	b.n	8006cda <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cb6:	f7fc fd0d 	bl	80036d4 <HAL_GetTick>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	69bb      	ldr	r3, [r7, #24]
 8006cbe:	1ad3      	subs	r3, r2, r3
 8006cc0:	683a      	ldr	r2, [r7, #0]
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d803      	bhi.n	8006cce <HAL_SPI_Transmit+0x204>
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ccc:	d102      	bne.n	8006cd4 <HAL_SPI_Transmit+0x20a>
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d102      	bne.n	8006cda <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006cd8:	e026      	b.n	8006d28 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cde:	b29b      	uxth	r3, r3
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1cd      	bne.n	8006c80 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ce4:	69ba      	ldr	r2, [r7, #24]
 8006ce6:	6839      	ldr	r1, [r7, #0]
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f000 fbcb 	bl	8007484 <SPI_EndRxTxTransaction>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d002      	beq.n	8006cfa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2220      	movs	r2, #32
 8006cf8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	689b      	ldr	r3, [r3, #8]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d10a      	bne.n	8006d18 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d02:	2300      	movs	r3, #0
 8006d04:	613b      	str	r3, [r7, #16]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	613b      	str	r3, [r7, #16]
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	613b      	str	r3, [r7, #16]
 8006d16:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d002      	beq.n	8006d26 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006d20:	2301      	movs	r3, #1
 8006d22:	77fb      	strb	r3, [r7, #31]
 8006d24:	e000      	b.n	8006d28 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006d26:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006d38:	7ffb      	ldrb	r3, [r7, #31]
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3720      	adds	r7, #32
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}

08006d42 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d42:	b580      	push	{r7, lr}
 8006d44:	b088      	sub	sp, #32
 8006d46:	af02      	add	r7, sp, #8
 8006d48:	60f8      	str	r0, [r7, #12]
 8006d4a:	60b9      	str	r1, [r7, #8]
 8006d4c:	603b      	str	r3, [r7, #0]
 8006d4e:	4613      	mov	r3, r2
 8006d50:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d52:	2300      	movs	r3, #0
 8006d54:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d5e:	d112      	bne.n	8006d86 <HAL_SPI_Receive+0x44>
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	689b      	ldr	r3, [r3, #8]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d10e      	bne.n	8006d86 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2204      	movs	r2, #4
 8006d6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006d70:	88fa      	ldrh	r2, [r7, #6]
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	4613      	mov	r3, r2
 8006d78:	68ba      	ldr	r2, [r7, #8]
 8006d7a:	68b9      	ldr	r1, [r7, #8]
 8006d7c:	68f8      	ldr	r0, [r7, #12]
 8006d7e:	f000 f8f1 	bl	8006f64 <HAL_SPI_TransmitReceive>
 8006d82:	4603      	mov	r3, r0
 8006d84:	e0ea      	b.n	8006f5c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d101      	bne.n	8006d94 <HAL_SPI_Receive+0x52>
 8006d90:	2302      	movs	r3, #2
 8006d92:	e0e3      	b.n	8006f5c <HAL_SPI_Receive+0x21a>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2201      	movs	r2, #1
 8006d98:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d9c:	f7fc fc9a 	bl	80036d4 <HAL_GetTick>
 8006da0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b01      	cmp	r3, #1
 8006dac:	d002      	beq.n	8006db4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006dae:	2302      	movs	r3, #2
 8006db0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006db2:	e0ca      	b.n	8006f4a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006db4:	68bb      	ldr	r3, [r7, #8]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d002      	beq.n	8006dc0 <HAL_SPI_Receive+0x7e>
 8006dba:	88fb      	ldrh	r3, [r7, #6]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d102      	bne.n	8006dc6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006dc4:	e0c1      	b.n	8006f4a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2204      	movs	r2, #4
 8006dca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	68ba      	ldr	r2, [r7, #8]
 8006dd8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	88fa      	ldrh	r2, [r7, #6]
 8006dde:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	88fa      	ldrh	r2, [r7, #6]
 8006de4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2200      	movs	r2, #0
 8006dea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2200      	movs	r2, #0
 8006df0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	2200      	movs	r2, #0
 8006df6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2200      	movs	r2, #0
 8006e02:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e0c:	d10f      	bne.n	8006e2e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006e2c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e38:	2b40      	cmp	r3, #64	; 0x40
 8006e3a:	d007      	beq.n	8006e4c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006e4a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	68db      	ldr	r3, [r3, #12]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d162      	bne.n	8006f1a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006e54:	e02e      	b.n	8006eb4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	f003 0301 	and.w	r3, r3, #1
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d115      	bne.n	8006e90 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f103 020c 	add.w	r2, r3, #12
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e70:	7812      	ldrb	r2, [r2, #0]
 8006e72:	b2d2      	uxtb	r2, r2
 8006e74:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e7a:	1c5a      	adds	r2, r3, #1
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006e84:	b29b      	uxth	r3, r3
 8006e86:	3b01      	subs	r3, #1
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006e8e:	e011      	b.n	8006eb4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e90:	f7fc fc20 	bl	80036d4 <HAL_GetTick>
 8006e94:	4602      	mov	r2, r0
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	1ad3      	subs	r3, r2, r3
 8006e9a:	683a      	ldr	r2, [r7, #0]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d803      	bhi.n	8006ea8 <HAL_SPI_Receive+0x166>
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ea6:	d102      	bne.n	8006eae <HAL_SPI_Receive+0x16c>
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d102      	bne.n	8006eb4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8006eae:	2303      	movs	r3, #3
 8006eb0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006eb2:	e04a      	b.n	8006f4a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d1cb      	bne.n	8006e56 <HAL_SPI_Receive+0x114>
 8006ebe:	e031      	b.n	8006f24 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f003 0301 	and.w	r3, r3, #1
 8006eca:	2b01      	cmp	r3, #1
 8006ecc:	d113      	bne.n	8006ef6 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	68da      	ldr	r2, [r3, #12]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed8:	b292      	uxth	r2, r2
 8006eda:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ee0:	1c9a      	adds	r2, r3, #2
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	3b01      	subs	r3, #1
 8006eee:	b29a      	uxth	r2, r3
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006ef4:	e011      	b.n	8006f1a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ef6:	f7fc fbed 	bl	80036d4 <HAL_GetTick>
 8006efa:	4602      	mov	r2, r0
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	1ad3      	subs	r3, r2, r3
 8006f00:	683a      	ldr	r2, [r7, #0]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d803      	bhi.n	8006f0e <HAL_SPI_Receive+0x1cc>
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f0c:	d102      	bne.n	8006f14 <HAL_SPI_Receive+0x1d2>
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d102      	bne.n	8006f1a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8006f14:	2303      	movs	r3, #3
 8006f16:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006f18:	e017      	b.n	8006f4a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1cd      	bne.n	8006ec0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f24:	693a      	ldr	r2, [r7, #16]
 8006f26:	6839      	ldr	r1, [r7, #0]
 8006f28:	68f8      	ldr	r0, [r7, #12]
 8006f2a:	f000 fa45 	bl	80073b8 <SPI_EndRxTransaction>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d002      	beq.n	8006f3a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2220      	movs	r2, #32
 8006f38:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d002      	beq.n	8006f48 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8006f42:	2301      	movs	r3, #1
 8006f44:	75fb      	strb	r3, [r7, #23]
 8006f46:	e000      	b.n	8006f4a <HAL_SPI_Receive+0x208>
  }

error :
 8006f48:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006f5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	3718      	adds	r7, #24
 8006f60:	46bd      	mov	sp, r7
 8006f62:	bd80      	pop	{r7, pc}

08006f64 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b08c      	sub	sp, #48	; 0x30
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	60f8      	str	r0, [r7, #12]
 8006f6c:	60b9      	str	r1, [r7, #8]
 8006f6e:	607a      	str	r2, [r7, #4]
 8006f70:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006f72:	2301      	movs	r3, #1
 8006f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006f76:	2300      	movs	r3, #0
 8006f78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006f82:	2b01      	cmp	r3, #1
 8006f84:	d101      	bne.n	8006f8a <HAL_SPI_TransmitReceive+0x26>
 8006f86:	2302      	movs	r3, #2
 8006f88:	e18a      	b.n	80072a0 <HAL_SPI_TransmitReceive+0x33c>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f92:	f7fc fb9f 	bl	80036d4 <HAL_GetTick>
 8006f96:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006f9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8006fa8:	887b      	ldrh	r3, [r7, #2]
 8006faa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006fac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d00f      	beq.n	8006fd4 <HAL_SPI_TransmitReceive+0x70>
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fba:	d107      	bne.n	8006fcc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	689b      	ldr	r3, [r3, #8]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d103      	bne.n	8006fcc <HAL_SPI_TransmitReceive+0x68>
 8006fc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006fc8:	2b04      	cmp	r3, #4
 8006fca:	d003      	beq.n	8006fd4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8006fcc:	2302      	movs	r3, #2
 8006fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006fd2:	e15b      	b.n	800728c <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d005      	beq.n	8006fe6 <HAL_SPI_TransmitReceive+0x82>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d002      	beq.n	8006fe6 <HAL_SPI_TransmitReceive+0x82>
 8006fe0:	887b      	ldrh	r3, [r7, #2]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d103      	bne.n	8006fee <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8006fec:	e14e      	b.n	800728c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	2b04      	cmp	r3, #4
 8006ff8:	d003      	beq.n	8007002 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	2205      	movs	r2, #5
 8006ffe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2200      	movs	r2, #0
 8007006:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	887a      	ldrh	r2, [r7, #2]
 8007012:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	887a      	ldrh	r2, [r7, #2]
 8007018:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	68ba      	ldr	r2, [r7, #8]
 800701e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	887a      	ldrh	r2, [r7, #2]
 8007024:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	887a      	ldrh	r2, [r7, #2]
 800702a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	2200      	movs	r2, #0
 8007030:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2200      	movs	r2, #0
 8007036:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007042:	2b40      	cmp	r3, #64	; 0x40
 8007044:	d007      	beq.n	8007056 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007054:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800705e:	d178      	bne.n	8007152 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d002      	beq.n	800706e <HAL_SPI_TransmitReceive+0x10a>
 8007068:	8b7b      	ldrh	r3, [r7, #26]
 800706a:	2b01      	cmp	r3, #1
 800706c:	d166      	bne.n	800713c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007072:	881a      	ldrh	r2, [r3, #0]
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800707e:	1c9a      	adds	r2, r3, #2
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007088:	b29b      	uxth	r3, r3
 800708a:	3b01      	subs	r3, #1
 800708c:	b29a      	uxth	r2, r3
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007092:	e053      	b.n	800713c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f003 0302 	and.w	r3, r3, #2
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d11b      	bne.n	80070da <HAL_SPI_TransmitReceive+0x176>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d016      	beq.n	80070da <HAL_SPI_TransmitReceive+0x176>
 80070ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ae:	2b01      	cmp	r3, #1
 80070b0:	d113      	bne.n	80070da <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070b6:	881a      	ldrh	r2, [r3, #0]
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070c2:	1c9a      	adds	r2, r3, #2
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80070cc:	b29b      	uxth	r3, r3
 80070ce:	3b01      	subs	r3, #1
 80070d0:	b29a      	uxth	r2, r3
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80070d6:	2300      	movs	r3, #0
 80070d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	f003 0301 	and.w	r3, r3, #1
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d119      	bne.n	800711c <HAL_SPI_TransmitReceive+0x1b8>
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d014      	beq.n	800711c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68da      	ldr	r2, [r3, #12]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fc:	b292      	uxth	r2, r2
 80070fe:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007104:	1c9a      	adds	r2, r3, #2
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800710e:	b29b      	uxth	r3, r3
 8007110:	3b01      	subs	r3, #1
 8007112:	b29a      	uxth	r2, r3
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007118:	2301      	movs	r3, #1
 800711a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800711c:	f7fc fada 	bl	80036d4 <HAL_GetTick>
 8007120:	4602      	mov	r2, r0
 8007122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007128:	429a      	cmp	r2, r3
 800712a:	d807      	bhi.n	800713c <HAL_SPI_TransmitReceive+0x1d8>
 800712c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800712e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007132:	d003      	beq.n	800713c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007134:	2303      	movs	r3, #3
 8007136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800713a:	e0a7      	b.n	800728c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007140:	b29b      	uxth	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	d1a6      	bne.n	8007094 <HAL_SPI_TransmitReceive+0x130>
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800714a:	b29b      	uxth	r3, r3
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1a1      	bne.n	8007094 <HAL_SPI_TransmitReceive+0x130>
 8007150:	e07c      	b.n	800724c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	685b      	ldr	r3, [r3, #4]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d002      	beq.n	8007160 <HAL_SPI_TransmitReceive+0x1fc>
 800715a:	8b7b      	ldrh	r3, [r7, #26]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d16b      	bne.n	8007238 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	330c      	adds	r3, #12
 800716a:	7812      	ldrb	r2, [r2, #0]
 800716c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007172:	1c5a      	adds	r2, r3, #1
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800717c:	b29b      	uxth	r3, r3
 800717e:	3b01      	subs	r3, #1
 8007180:	b29a      	uxth	r2, r3
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007186:	e057      	b.n	8007238 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f003 0302 	and.w	r3, r3, #2
 8007192:	2b02      	cmp	r3, #2
 8007194:	d11c      	bne.n	80071d0 <HAL_SPI_TransmitReceive+0x26c>
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800719a:	b29b      	uxth	r3, r3
 800719c:	2b00      	cmp	r3, #0
 800719e:	d017      	beq.n	80071d0 <HAL_SPI_TransmitReceive+0x26c>
 80071a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d114      	bne.n	80071d0 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	330c      	adds	r3, #12
 80071b0:	7812      	ldrb	r2, [r2, #0]
 80071b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071b8:	1c5a      	adds	r2, r3, #1
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80071c2:	b29b      	uxth	r3, r3
 80071c4:	3b01      	subs	r3, #1
 80071c6:	b29a      	uxth	r2, r3
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80071cc:	2300      	movs	r3, #0
 80071ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	689b      	ldr	r3, [r3, #8]
 80071d6:	f003 0301 	and.w	r3, r3, #1
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d119      	bne.n	8007212 <HAL_SPI_TransmitReceive+0x2ae>
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071e2:	b29b      	uxth	r3, r3
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d014      	beq.n	8007212 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68da      	ldr	r2, [r3, #12]
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f2:	b2d2      	uxtb	r2, r2
 80071f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071fa:	1c5a      	adds	r2, r3, #1
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007204:	b29b      	uxth	r3, r3
 8007206:	3b01      	subs	r3, #1
 8007208:	b29a      	uxth	r2, r3
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800720e:	2301      	movs	r3, #1
 8007210:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007212:	f7fc fa5f 	bl	80036d4 <HAL_GetTick>
 8007216:	4602      	mov	r2, r0
 8007218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800721e:	429a      	cmp	r2, r3
 8007220:	d803      	bhi.n	800722a <HAL_SPI_TransmitReceive+0x2c6>
 8007222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007228:	d102      	bne.n	8007230 <HAL_SPI_TransmitReceive+0x2cc>
 800722a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800722c:	2b00      	cmp	r3, #0
 800722e:	d103      	bne.n	8007238 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007230:	2303      	movs	r3, #3
 8007232:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007236:	e029      	b.n	800728c <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800723c:	b29b      	uxth	r3, r3
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1a2      	bne.n	8007188 <HAL_SPI_TransmitReceive+0x224>
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007246:	b29b      	uxth	r3, r3
 8007248:	2b00      	cmp	r3, #0
 800724a:	d19d      	bne.n	8007188 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800724c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800724e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f000 f917 	bl	8007484 <SPI_EndRxTxTransaction>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d006      	beq.n	800726a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2220      	movs	r2, #32
 8007266:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8007268:	e010      	b.n	800728c <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10b      	bne.n	800728a <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007272:	2300      	movs	r3, #0
 8007274:	617b      	str	r3, [r7, #20]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	617b      	str	r3, [r7, #20]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	617b      	str	r3, [r7, #20]
 8007286:	697b      	ldr	r3, [r7, #20]
 8007288:	e000      	b.n	800728c <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800728a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2201      	movs	r2, #1
 8007290:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	2200      	movs	r2, #0
 8007298:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800729c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3730      	adds	r7, #48	; 0x30
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b088      	sub	sp, #32
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	603b      	str	r3, [r7, #0]
 80072b4:	4613      	mov	r3, r2
 80072b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80072b8:	f7fc fa0c 	bl	80036d4 <HAL_GetTick>
 80072bc:	4602      	mov	r2, r0
 80072be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c0:	1a9b      	subs	r3, r3, r2
 80072c2:	683a      	ldr	r2, [r7, #0]
 80072c4:	4413      	add	r3, r2
 80072c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80072c8:	f7fc fa04 	bl	80036d4 <HAL_GetTick>
 80072cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80072ce:	4b39      	ldr	r3, [pc, #228]	; (80073b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	015b      	lsls	r3, r3, #5
 80072d4:	0d1b      	lsrs	r3, r3, #20
 80072d6:	69fa      	ldr	r2, [r7, #28]
 80072d8:	fb02 f303 	mul.w	r3, r2, r3
 80072dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80072de:	e054      	b.n	800738a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072e6:	d050      	beq.n	800738a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80072e8:	f7fc f9f4 	bl	80036d4 <HAL_GetTick>
 80072ec:	4602      	mov	r2, r0
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	1ad3      	subs	r3, r2, r3
 80072f2:	69fa      	ldr	r2, [r7, #28]
 80072f4:	429a      	cmp	r2, r3
 80072f6:	d902      	bls.n	80072fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80072f8:	69fb      	ldr	r3, [r7, #28]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d13d      	bne.n	800737a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	685a      	ldr	r2, [r3, #4]
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800730c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007316:	d111      	bne.n	800733c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007320:	d004      	beq.n	800732c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	689b      	ldr	r3, [r3, #8]
 8007326:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800732a:	d107      	bne.n	800733c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800733a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007340:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007344:	d10f      	bne.n	8007366 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007354:	601a      	str	r2, [r3, #0]
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007364:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	2201      	movs	r2, #1
 800736a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	2200      	movs	r2, #0
 8007372:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007376:	2303      	movs	r3, #3
 8007378:	e017      	b.n	80073aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d101      	bne.n	8007384 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007380:	2300      	movs	r3, #0
 8007382:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	3b01      	subs	r3, #1
 8007388:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	689a      	ldr	r2, [r3, #8]
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	4013      	ands	r3, r2
 8007394:	68ba      	ldr	r2, [r7, #8]
 8007396:	429a      	cmp	r2, r3
 8007398:	bf0c      	ite	eq
 800739a:	2301      	moveq	r3, #1
 800739c:	2300      	movne	r3, #0
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	461a      	mov	r2, r3
 80073a2:	79fb      	ldrb	r3, [r7, #7]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d19b      	bne.n	80072e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80073a8:	2300      	movs	r3, #0
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3720      	adds	r7, #32
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	20000094 	.word	0x20000094

080073b8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b086      	sub	sp, #24
 80073bc:	af02      	add	r7, sp, #8
 80073be:	60f8      	str	r0, [r7, #12]
 80073c0:	60b9      	str	r1, [r7, #8]
 80073c2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	685b      	ldr	r3, [r3, #4]
 80073c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073cc:	d111      	bne.n	80073f2 <SPI_EndRxTransaction+0x3a>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073d6:	d004      	beq.n	80073e2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80073e0:	d107      	bne.n	80073f2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	681a      	ldr	r2, [r3, #0]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073f0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073fa:	d12a      	bne.n	8007452 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007404:	d012      	beq.n	800742c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	9300      	str	r3, [sp, #0]
 800740a:	68bb      	ldr	r3, [r7, #8]
 800740c:	2200      	movs	r2, #0
 800740e:	2180      	movs	r1, #128	; 0x80
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f7ff ff49 	bl	80072a8 <SPI_WaitFlagStateUntilTimeout>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d02d      	beq.n	8007478 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007420:	f043 0220 	orr.w	r2, r3, #32
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007428:	2303      	movs	r3, #3
 800742a:	e026      	b.n	800747a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	9300      	str	r3, [sp, #0]
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	2200      	movs	r2, #0
 8007434:	2101      	movs	r1, #1
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	f7ff ff36 	bl	80072a8 <SPI_WaitFlagStateUntilTimeout>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	d01a      	beq.n	8007478 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007446:	f043 0220 	orr.w	r2, r3, #32
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	e013      	b.n	800747a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	9300      	str	r3, [sp, #0]
 8007456:	68bb      	ldr	r3, [r7, #8]
 8007458:	2200      	movs	r2, #0
 800745a:	2101      	movs	r1, #1
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f7ff ff23 	bl	80072a8 <SPI_WaitFlagStateUntilTimeout>
 8007462:	4603      	mov	r3, r0
 8007464:	2b00      	cmp	r3, #0
 8007466:	d007      	beq.n	8007478 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800746c:	f043 0220 	orr.w	r2, r3, #32
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	e000      	b.n	800747a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
	...

08007484 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b088      	sub	sp, #32
 8007488:	af02      	add	r7, sp, #8
 800748a:	60f8      	str	r0, [r7, #12]
 800748c:	60b9      	str	r1, [r7, #8]
 800748e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007490:	4b1b      	ldr	r3, [pc, #108]	; (8007500 <SPI_EndRxTxTransaction+0x7c>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4a1b      	ldr	r2, [pc, #108]	; (8007504 <SPI_EndRxTxTransaction+0x80>)
 8007496:	fba2 2303 	umull	r2, r3, r2, r3
 800749a:	0d5b      	lsrs	r3, r3, #21
 800749c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80074a0:	fb02 f303 	mul.w	r3, r2, r3
 80074a4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074ae:	d112      	bne.n	80074d6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	9300      	str	r3, [sp, #0]
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	2200      	movs	r2, #0
 80074b8:	2180      	movs	r1, #128	; 0x80
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f7ff fef4 	bl	80072a8 <SPI_WaitFlagStateUntilTimeout>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d016      	beq.n	80074f4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ca:	f043 0220 	orr.w	r2, r3, #32
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e00f      	b.n	80074f6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d00a      	beq.n	80074f2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	3b01      	subs	r3, #1
 80074e0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074ec:	2b80      	cmp	r3, #128	; 0x80
 80074ee:	d0f2      	beq.n	80074d6 <SPI_EndRxTxTransaction+0x52>
 80074f0:	e000      	b.n	80074f4 <SPI_EndRxTxTransaction+0x70>
        break;
 80074f2:	bf00      	nop
  }

  return HAL_OK;
 80074f4:	2300      	movs	r3, #0
}
 80074f6:	4618      	mov	r0, r3
 80074f8:	3718      	adds	r7, #24
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}
 80074fe:	bf00      	nop
 8007500:	20000094 	.word	0x20000094
 8007504:	165e9f81 	.word	0x165e9f81

08007508 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b082      	sub	sp, #8
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d101      	bne.n	800751a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e041      	b.n	800759e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007520:	b2db      	uxtb	r3, r3
 8007522:	2b00      	cmp	r3, #0
 8007524:	d106      	bne.n	8007534 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f7fb fbb0 	bl	8002c94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2202      	movs	r2, #2
 8007538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681a      	ldr	r2, [r3, #0]
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	3304      	adds	r3, #4
 8007544:	4619      	mov	r1, r3
 8007546:	4610      	mov	r0, r2
 8007548:	f000 fafe 	bl	8007b48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2201      	movs	r2, #1
 8007550:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2201      	movs	r2, #1
 8007560:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2201      	movs	r2, #1
 8007568:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2201      	movs	r2, #1
 8007578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2201      	movs	r2, #1
 8007590:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2201      	movs	r2, #1
 8007598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3708      	adds	r7, #8
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
	...

080075a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d001      	beq.n	80075c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	e046      	b.n	800764e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2202      	movs	r2, #2
 80075c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	4a23      	ldr	r2, [pc, #140]	; (800765c <HAL_TIM_Base_Start+0xb4>)
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d022      	beq.n	8007618 <HAL_TIM_Base_Start+0x70>
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075da:	d01d      	beq.n	8007618 <HAL_TIM_Base_Start+0x70>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a1f      	ldr	r2, [pc, #124]	; (8007660 <HAL_TIM_Base_Start+0xb8>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d018      	beq.n	8007618 <HAL_TIM_Base_Start+0x70>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a1e      	ldr	r2, [pc, #120]	; (8007664 <HAL_TIM_Base_Start+0xbc>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d013      	beq.n	8007618 <HAL_TIM_Base_Start+0x70>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a1c      	ldr	r2, [pc, #112]	; (8007668 <HAL_TIM_Base_Start+0xc0>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d00e      	beq.n	8007618 <HAL_TIM_Base_Start+0x70>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a1b      	ldr	r2, [pc, #108]	; (800766c <HAL_TIM_Base_Start+0xc4>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d009      	beq.n	8007618 <HAL_TIM_Base_Start+0x70>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a19      	ldr	r2, [pc, #100]	; (8007670 <HAL_TIM_Base_Start+0xc8>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d004      	beq.n	8007618 <HAL_TIM_Base_Start+0x70>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a18      	ldr	r2, [pc, #96]	; (8007674 <HAL_TIM_Base_Start+0xcc>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d111      	bne.n	800763c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	689b      	ldr	r3, [r3, #8]
 800761e:	f003 0307 	and.w	r3, r3, #7
 8007622:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2b06      	cmp	r3, #6
 8007628:	d010      	beq.n	800764c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	f042 0201 	orr.w	r2, r2, #1
 8007638:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800763a:	e007      	b.n	800764c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f042 0201 	orr.w	r2, r2, #1
 800764a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800764c:	2300      	movs	r3, #0
}
 800764e:	4618      	mov	r0, r3
 8007650:	3714      	adds	r7, #20
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr
 800765a:	bf00      	nop
 800765c:	40010000 	.word	0x40010000
 8007660:	40000400 	.word	0x40000400
 8007664:	40000800 	.word	0x40000800
 8007668:	40000c00 	.word	0x40000c00
 800766c:	40010400 	.word	0x40010400
 8007670:	40014000 	.word	0x40014000
 8007674:	40001800 	.word	0x40001800

08007678 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007686:	b2db      	uxtb	r3, r3
 8007688:	2b01      	cmp	r3, #1
 800768a:	d001      	beq.n	8007690 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800768c:	2301      	movs	r3, #1
 800768e:	e04e      	b.n	800772e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2202      	movs	r2, #2
 8007694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68da      	ldr	r2, [r3, #12]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f042 0201 	orr.w	r2, r2, #1
 80076a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a23      	ldr	r2, [pc, #140]	; (800773c <HAL_TIM_Base_Start_IT+0xc4>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d022      	beq.n	80076f8 <HAL_TIM_Base_Start_IT+0x80>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076ba:	d01d      	beq.n	80076f8 <HAL_TIM_Base_Start_IT+0x80>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a1f      	ldr	r2, [pc, #124]	; (8007740 <HAL_TIM_Base_Start_IT+0xc8>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d018      	beq.n	80076f8 <HAL_TIM_Base_Start_IT+0x80>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a1e      	ldr	r2, [pc, #120]	; (8007744 <HAL_TIM_Base_Start_IT+0xcc>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d013      	beq.n	80076f8 <HAL_TIM_Base_Start_IT+0x80>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a1c      	ldr	r2, [pc, #112]	; (8007748 <HAL_TIM_Base_Start_IT+0xd0>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d00e      	beq.n	80076f8 <HAL_TIM_Base_Start_IT+0x80>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a1b      	ldr	r2, [pc, #108]	; (800774c <HAL_TIM_Base_Start_IT+0xd4>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d009      	beq.n	80076f8 <HAL_TIM_Base_Start_IT+0x80>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a19      	ldr	r2, [pc, #100]	; (8007750 <HAL_TIM_Base_Start_IT+0xd8>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d004      	beq.n	80076f8 <HAL_TIM_Base_Start_IT+0x80>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a18      	ldr	r2, [pc, #96]	; (8007754 <HAL_TIM_Base_Start_IT+0xdc>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d111      	bne.n	800771c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	f003 0307 	and.w	r3, r3, #7
 8007702:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2b06      	cmp	r3, #6
 8007708:	d010      	beq.n	800772c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	681a      	ldr	r2, [r3, #0]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f042 0201 	orr.w	r2, r2, #1
 8007718:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800771a:	e007      	b.n	800772c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	681a      	ldr	r2, [r3, #0]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	f042 0201 	orr.w	r2, r2, #1
 800772a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800772c:	2300      	movs	r3, #0
}
 800772e:	4618      	mov	r0, r3
 8007730:	3714      	adds	r7, #20
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	40010000 	.word	0x40010000
 8007740:	40000400 	.word	0x40000400
 8007744:	40000800 	.word	0x40000800
 8007748:	40000c00 	.word	0x40000c00
 800774c:	40010400 	.word	0x40010400
 8007750:	40014000 	.word	0x40014000
 8007754:	40001800 	.word	0x40001800

08007758 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	691b      	ldr	r3, [r3, #16]
 8007766:	f003 0302 	and.w	r3, r3, #2
 800776a:	2b02      	cmp	r3, #2
 800776c:	d122      	bne.n	80077b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68db      	ldr	r3, [r3, #12]
 8007774:	f003 0302 	and.w	r3, r3, #2
 8007778:	2b02      	cmp	r3, #2
 800777a:	d11b      	bne.n	80077b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f06f 0202 	mvn.w	r2, #2
 8007784:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	699b      	ldr	r3, [r3, #24]
 8007792:	f003 0303 	and.w	r3, r3, #3
 8007796:	2b00      	cmp	r3, #0
 8007798:	d003      	beq.n	80077a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f9b5 	bl	8007b0a <HAL_TIM_IC_CaptureCallback>
 80077a0:	e005      	b.n	80077ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 f9a7 	bl	8007af6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 f9b8 	bl	8007b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2200      	movs	r2, #0
 80077b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	f003 0304 	and.w	r3, r3, #4
 80077be:	2b04      	cmp	r3, #4
 80077c0:	d122      	bne.n	8007808 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	68db      	ldr	r3, [r3, #12]
 80077c8:	f003 0304 	and.w	r3, r3, #4
 80077cc:	2b04      	cmp	r3, #4
 80077ce:	d11b      	bne.n	8007808 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f06f 0204 	mvn.w	r2, #4
 80077d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2202      	movs	r2, #2
 80077de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d003      	beq.n	80077f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f000 f98b 	bl	8007b0a <HAL_TIM_IC_CaptureCallback>
 80077f4:	e005      	b.n	8007802 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f97d 	bl	8007af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 f98e 	bl	8007b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2200      	movs	r2, #0
 8007806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	f003 0308 	and.w	r3, r3, #8
 8007812:	2b08      	cmp	r3, #8
 8007814:	d122      	bne.n	800785c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	f003 0308 	and.w	r3, r3, #8
 8007820:	2b08      	cmp	r3, #8
 8007822:	d11b      	bne.n	800785c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f06f 0208 	mvn.w	r2, #8
 800782c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2204      	movs	r2, #4
 8007832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	69db      	ldr	r3, [r3, #28]
 800783a:	f003 0303 	and.w	r3, r3, #3
 800783e:	2b00      	cmp	r3, #0
 8007840:	d003      	beq.n	800784a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f000 f961 	bl	8007b0a <HAL_TIM_IC_CaptureCallback>
 8007848:	e005      	b.n	8007856 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 f953 	bl	8007af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	f000 f964 	bl	8007b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2200      	movs	r2, #0
 800785a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	f003 0310 	and.w	r3, r3, #16
 8007866:	2b10      	cmp	r3, #16
 8007868:	d122      	bne.n	80078b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	f003 0310 	and.w	r3, r3, #16
 8007874:	2b10      	cmp	r3, #16
 8007876:	d11b      	bne.n	80078b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f06f 0210 	mvn.w	r2, #16
 8007880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2208      	movs	r2, #8
 8007886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	69db      	ldr	r3, [r3, #28]
 800788e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007892:	2b00      	cmp	r3, #0
 8007894:	d003      	beq.n	800789e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f937 	bl	8007b0a <HAL_TIM_IC_CaptureCallback>
 800789c:	e005      	b.n	80078aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 f929 	bl	8007af6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 f93a 	bl	8007b1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2200      	movs	r2, #0
 80078ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	691b      	ldr	r3, [r3, #16]
 80078b6:	f003 0301 	and.w	r3, r3, #1
 80078ba:	2b01      	cmp	r3, #1
 80078bc:	d10e      	bne.n	80078dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68db      	ldr	r3, [r3, #12]
 80078c4:	f003 0301 	and.w	r3, r3, #1
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d107      	bne.n	80078dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f06f 0201 	mvn.w	r2, #1
 80078d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f7fa fbd6 	bl	8002088 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	691b      	ldr	r3, [r3, #16]
 80078e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078e6:	2b80      	cmp	r3, #128	; 0x80
 80078e8:	d10e      	bne.n	8007908 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078f4:	2b80      	cmp	r3, #128	; 0x80
 80078f6:	d107      	bne.n	8007908 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f000 fae0 	bl	8007ec8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	691b      	ldr	r3, [r3, #16]
 800790e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007912:	2b40      	cmp	r3, #64	; 0x40
 8007914:	d10e      	bne.n	8007934 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007920:	2b40      	cmp	r3, #64	; 0x40
 8007922:	d107      	bne.n	8007934 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800792c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 f8ff 	bl	8007b32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	f003 0320 	and.w	r3, r3, #32
 800793e:	2b20      	cmp	r3, #32
 8007940:	d10e      	bne.n	8007960 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	f003 0320 	and.w	r3, r3, #32
 800794c:	2b20      	cmp	r3, #32
 800794e:	d107      	bne.n	8007960 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f06f 0220 	mvn.w	r2, #32
 8007958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f000 faaa 	bl	8007eb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007960:	bf00      	nop
 8007962:	3708      	adds	r7, #8
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}

08007968 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007968:	b580      	push	{r7, lr}
 800796a:	b084      	sub	sp, #16
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007972:	2300      	movs	r3, #0
 8007974:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800797c:	2b01      	cmp	r3, #1
 800797e:	d101      	bne.n	8007984 <HAL_TIM_ConfigClockSource+0x1c>
 8007980:	2302      	movs	r3, #2
 8007982:	e0b4      	b.n	8007aee <HAL_TIM_ConfigClockSource+0x186>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2201      	movs	r2, #1
 8007988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2202      	movs	r2, #2
 8007990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80079a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80079aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079bc:	d03e      	beq.n	8007a3c <HAL_TIM_ConfigClockSource+0xd4>
 80079be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079c2:	f200 8087 	bhi.w	8007ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80079c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079ca:	f000 8086 	beq.w	8007ada <HAL_TIM_ConfigClockSource+0x172>
 80079ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079d2:	d87f      	bhi.n	8007ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80079d4:	2b70      	cmp	r3, #112	; 0x70
 80079d6:	d01a      	beq.n	8007a0e <HAL_TIM_ConfigClockSource+0xa6>
 80079d8:	2b70      	cmp	r3, #112	; 0x70
 80079da:	d87b      	bhi.n	8007ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80079dc:	2b60      	cmp	r3, #96	; 0x60
 80079de:	d050      	beq.n	8007a82 <HAL_TIM_ConfigClockSource+0x11a>
 80079e0:	2b60      	cmp	r3, #96	; 0x60
 80079e2:	d877      	bhi.n	8007ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80079e4:	2b50      	cmp	r3, #80	; 0x50
 80079e6:	d03c      	beq.n	8007a62 <HAL_TIM_ConfigClockSource+0xfa>
 80079e8:	2b50      	cmp	r3, #80	; 0x50
 80079ea:	d873      	bhi.n	8007ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80079ec:	2b40      	cmp	r3, #64	; 0x40
 80079ee:	d058      	beq.n	8007aa2 <HAL_TIM_ConfigClockSource+0x13a>
 80079f0:	2b40      	cmp	r3, #64	; 0x40
 80079f2:	d86f      	bhi.n	8007ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80079f4:	2b30      	cmp	r3, #48	; 0x30
 80079f6:	d064      	beq.n	8007ac2 <HAL_TIM_ConfigClockSource+0x15a>
 80079f8:	2b30      	cmp	r3, #48	; 0x30
 80079fa:	d86b      	bhi.n	8007ad4 <HAL_TIM_ConfigClockSource+0x16c>
 80079fc:	2b20      	cmp	r3, #32
 80079fe:	d060      	beq.n	8007ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8007a00:	2b20      	cmp	r3, #32
 8007a02:	d867      	bhi.n	8007ad4 <HAL_TIM_ConfigClockSource+0x16c>
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d05c      	beq.n	8007ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8007a08:	2b10      	cmp	r3, #16
 8007a0a:	d05a      	beq.n	8007ac2 <HAL_TIM_ConfigClockSource+0x15a>
 8007a0c:	e062      	b.n	8007ad4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6818      	ldr	r0, [r3, #0]
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	6899      	ldr	r1, [r3, #8]
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	685a      	ldr	r2, [r3, #4]
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	68db      	ldr	r3, [r3, #12]
 8007a1e:	f000 f9ad 	bl	8007d7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a30:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	68ba      	ldr	r2, [r7, #8]
 8007a38:	609a      	str	r2, [r3, #8]
      break;
 8007a3a:	e04f      	b.n	8007adc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6818      	ldr	r0, [r3, #0]
 8007a40:	683b      	ldr	r3, [r7, #0]
 8007a42:	6899      	ldr	r1, [r3, #8]
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	685a      	ldr	r2, [r3, #4]
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	68db      	ldr	r3, [r3, #12]
 8007a4c:	f000 f996 	bl	8007d7c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	689a      	ldr	r2, [r3, #8]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a5e:	609a      	str	r2, [r3, #8]
      break;
 8007a60:	e03c      	b.n	8007adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6818      	ldr	r0, [r3, #0]
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	6859      	ldr	r1, [r3, #4]
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	68db      	ldr	r3, [r3, #12]
 8007a6e:	461a      	mov	r2, r3
 8007a70:	f000 f90a 	bl	8007c88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	2150      	movs	r1, #80	; 0x50
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 f963 	bl	8007d46 <TIM_ITRx_SetConfig>
      break;
 8007a80:	e02c      	b.n	8007adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6818      	ldr	r0, [r3, #0]
 8007a86:	683b      	ldr	r3, [r7, #0]
 8007a88:	6859      	ldr	r1, [r3, #4]
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	f000 f929 	bl	8007ce6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2160      	movs	r1, #96	; 0x60
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f000 f953 	bl	8007d46 <TIM_ITRx_SetConfig>
      break;
 8007aa0:	e01c      	b.n	8007adc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6818      	ldr	r0, [r3, #0]
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	6859      	ldr	r1, [r3, #4]
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	461a      	mov	r2, r3
 8007ab0:	f000 f8ea 	bl	8007c88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	2140      	movs	r1, #64	; 0x40
 8007aba:	4618      	mov	r0, r3
 8007abc:	f000 f943 	bl	8007d46 <TIM_ITRx_SetConfig>
      break;
 8007ac0:	e00c      	b.n	8007adc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681a      	ldr	r2, [r3, #0]
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4619      	mov	r1, r3
 8007acc:	4610      	mov	r0, r2
 8007ace:	f000 f93a 	bl	8007d46 <TIM_ITRx_SetConfig>
      break;
 8007ad2:	e003      	b.n	8007adc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	73fb      	strb	r3, [r7, #15]
      break;
 8007ad8:	e000      	b.n	8007adc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007ada:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2201      	movs	r2, #1
 8007ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3710      	adds	r7, #16
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007af6:	b480      	push	{r7}
 8007af8:	b083      	sub	sp, #12
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007afe:	bf00      	nop
 8007b00:	370c      	adds	r7, #12
 8007b02:	46bd      	mov	sp, r7
 8007b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b08:	4770      	bx	lr

08007b0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b0a:	b480      	push	{r7}
 8007b0c:	b083      	sub	sp, #12
 8007b0e:	af00      	add	r7, sp, #0
 8007b10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b12:	bf00      	nop
 8007b14:	370c      	adds	r7, #12
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr

08007b1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b1e:	b480      	push	{r7}
 8007b20:	b083      	sub	sp, #12
 8007b22:	af00      	add	r7, sp, #0
 8007b24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b26:	bf00      	nop
 8007b28:	370c      	adds	r7, #12
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr

08007b32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b32:	b480      	push	{r7}
 8007b34:	b083      	sub	sp, #12
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b3a:	bf00      	nop
 8007b3c:	370c      	adds	r7, #12
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
	...

08007b48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	4a40      	ldr	r2, [pc, #256]	; (8007c5c <TIM_Base_SetConfig+0x114>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d013      	beq.n	8007b88 <TIM_Base_SetConfig+0x40>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b66:	d00f      	beq.n	8007b88 <TIM_Base_SetConfig+0x40>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	4a3d      	ldr	r2, [pc, #244]	; (8007c60 <TIM_Base_SetConfig+0x118>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d00b      	beq.n	8007b88 <TIM_Base_SetConfig+0x40>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a3c      	ldr	r2, [pc, #240]	; (8007c64 <TIM_Base_SetConfig+0x11c>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d007      	beq.n	8007b88 <TIM_Base_SetConfig+0x40>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a3b      	ldr	r2, [pc, #236]	; (8007c68 <TIM_Base_SetConfig+0x120>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d003      	beq.n	8007b88 <TIM_Base_SetConfig+0x40>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a3a      	ldr	r2, [pc, #232]	; (8007c6c <TIM_Base_SetConfig+0x124>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d108      	bne.n	8007b9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007b8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	4313      	orrs	r3, r2
 8007b98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	4a2f      	ldr	r2, [pc, #188]	; (8007c5c <TIM_Base_SetConfig+0x114>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d02b      	beq.n	8007bfa <TIM_Base_SetConfig+0xb2>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ba8:	d027      	beq.n	8007bfa <TIM_Base_SetConfig+0xb2>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	4a2c      	ldr	r2, [pc, #176]	; (8007c60 <TIM_Base_SetConfig+0x118>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	d023      	beq.n	8007bfa <TIM_Base_SetConfig+0xb2>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	4a2b      	ldr	r2, [pc, #172]	; (8007c64 <TIM_Base_SetConfig+0x11c>)
 8007bb6:	4293      	cmp	r3, r2
 8007bb8:	d01f      	beq.n	8007bfa <TIM_Base_SetConfig+0xb2>
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	4a2a      	ldr	r2, [pc, #168]	; (8007c68 <TIM_Base_SetConfig+0x120>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d01b      	beq.n	8007bfa <TIM_Base_SetConfig+0xb2>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	4a29      	ldr	r2, [pc, #164]	; (8007c6c <TIM_Base_SetConfig+0x124>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d017      	beq.n	8007bfa <TIM_Base_SetConfig+0xb2>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4a28      	ldr	r2, [pc, #160]	; (8007c70 <TIM_Base_SetConfig+0x128>)
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d013      	beq.n	8007bfa <TIM_Base_SetConfig+0xb2>
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	4a27      	ldr	r2, [pc, #156]	; (8007c74 <TIM_Base_SetConfig+0x12c>)
 8007bd6:	4293      	cmp	r3, r2
 8007bd8:	d00f      	beq.n	8007bfa <TIM_Base_SetConfig+0xb2>
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	4a26      	ldr	r2, [pc, #152]	; (8007c78 <TIM_Base_SetConfig+0x130>)
 8007bde:	4293      	cmp	r3, r2
 8007be0:	d00b      	beq.n	8007bfa <TIM_Base_SetConfig+0xb2>
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	4a25      	ldr	r2, [pc, #148]	; (8007c7c <TIM_Base_SetConfig+0x134>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d007      	beq.n	8007bfa <TIM_Base_SetConfig+0xb2>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	4a24      	ldr	r2, [pc, #144]	; (8007c80 <TIM_Base_SetConfig+0x138>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d003      	beq.n	8007bfa <TIM_Base_SetConfig+0xb2>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	4a23      	ldr	r2, [pc, #140]	; (8007c84 <TIM_Base_SetConfig+0x13c>)
 8007bf6:	4293      	cmp	r3, r2
 8007bf8:	d108      	bne.n	8007c0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	68fa      	ldr	r2, [r7, #12]
 8007c08:	4313      	orrs	r3, r2
 8007c0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c12:	683b      	ldr	r3, [r7, #0]
 8007c14:	695b      	ldr	r3, [r3, #20]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	68fa      	ldr	r2, [r7, #12]
 8007c1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	689a      	ldr	r2, [r3, #8]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	681a      	ldr	r2, [r3, #0]
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4a0a      	ldr	r2, [pc, #40]	; (8007c5c <TIM_Base_SetConfig+0x114>)
 8007c34:	4293      	cmp	r3, r2
 8007c36:	d003      	beq.n	8007c40 <TIM_Base_SetConfig+0xf8>
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4a0c      	ldr	r2, [pc, #48]	; (8007c6c <TIM_Base_SetConfig+0x124>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d103      	bne.n	8007c48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	691a      	ldr	r2, [r3, #16]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	615a      	str	r2, [r3, #20]
}
 8007c4e:	bf00      	nop
 8007c50:	3714      	adds	r7, #20
 8007c52:	46bd      	mov	sp, r7
 8007c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c58:	4770      	bx	lr
 8007c5a:	bf00      	nop
 8007c5c:	40010000 	.word	0x40010000
 8007c60:	40000400 	.word	0x40000400
 8007c64:	40000800 	.word	0x40000800
 8007c68:	40000c00 	.word	0x40000c00
 8007c6c:	40010400 	.word	0x40010400
 8007c70:	40014000 	.word	0x40014000
 8007c74:	40014400 	.word	0x40014400
 8007c78:	40014800 	.word	0x40014800
 8007c7c:	40001800 	.word	0x40001800
 8007c80:	40001c00 	.word	0x40001c00
 8007c84:	40002000 	.word	0x40002000

08007c88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b087      	sub	sp, #28
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	60f8      	str	r0, [r7, #12]
 8007c90:	60b9      	str	r1, [r7, #8]
 8007c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6a1b      	ldr	r3, [r3, #32]
 8007c98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6a1b      	ldr	r3, [r3, #32]
 8007c9e:	f023 0201 	bic.w	r2, r3, #1
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	699b      	ldr	r3, [r3, #24]
 8007caa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007cac:	693b      	ldr	r3, [r7, #16]
 8007cae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007cb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	011b      	lsls	r3, r3, #4
 8007cb8:	693a      	ldr	r2, [r7, #16]
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	f023 030a 	bic.w	r3, r3, #10
 8007cc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007cc6:	697a      	ldr	r2, [r7, #20]
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	693a      	ldr	r2, [r7, #16]
 8007cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	697a      	ldr	r2, [r7, #20]
 8007cd8:	621a      	str	r2, [r3, #32]
}
 8007cda:	bf00      	nop
 8007cdc:	371c      	adds	r7, #28
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce4:	4770      	bx	lr

08007ce6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ce6:	b480      	push	{r7}
 8007ce8:	b087      	sub	sp, #28
 8007cea:	af00      	add	r7, sp, #0
 8007cec:	60f8      	str	r0, [r7, #12]
 8007cee:	60b9      	str	r1, [r7, #8]
 8007cf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6a1b      	ldr	r3, [r3, #32]
 8007cf6:	f023 0210 	bic.w	r2, r3, #16
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	699b      	ldr	r3, [r3, #24]
 8007d02:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6a1b      	ldr	r3, [r3, #32]
 8007d08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007d10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	031b      	lsls	r3, r3, #12
 8007d16:	697a      	ldr	r2, [r7, #20]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007d22:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	011b      	lsls	r3, r3, #4
 8007d28:	693a      	ldr	r2, [r7, #16]
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	697a      	ldr	r2, [r7, #20]
 8007d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	693a      	ldr	r2, [r7, #16]
 8007d38:	621a      	str	r2, [r3, #32]
}
 8007d3a:	bf00      	nop
 8007d3c:	371c      	adds	r7, #28
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007d46:	b480      	push	{r7}
 8007d48:	b085      	sub	sp, #20
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
 8007d4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007d5e:	683a      	ldr	r2, [r7, #0]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	4313      	orrs	r3, r2
 8007d64:	f043 0307 	orr.w	r3, r3, #7
 8007d68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	609a      	str	r2, [r3, #8]
}
 8007d70:	bf00      	nop
 8007d72:	3714      	adds	r7, #20
 8007d74:	46bd      	mov	sp, r7
 8007d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7a:	4770      	bx	lr

08007d7c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b087      	sub	sp, #28
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	60f8      	str	r0, [r7, #12]
 8007d84:	60b9      	str	r1, [r7, #8]
 8007d86:	607a      	str	r2, [r7, #4]
 8007d88:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d96:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	021a      	lsls	r2, r3, #8
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	431a      	orrs	r2, r3
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	4313      	orrs	r3, r2
 8007da4:	697a      	ldr	r2, [r7, #20]
 8007da6:	4313      	orrs	r3, r2
 8007da8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	697a      	ldr	r2, [r7, #20]
 8007dae:	609a      	str	r2, [r3, #8]
}
 8007db0:	bf00      	nop
 8007db2:	371c      	adds	r7, #28
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dcc:	2b01      	cmp	r3, #1
 8007dce:	d101      	bne.n	8007dd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007dd0:	2302      	movs	r3, #2
 8007dd2:	e05a      	b.n	8007e8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2202      	movs	r2, #2
 8007de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	689b      	ldr	r3, [r3, #8]
 8007df2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68fa      	ldr	r2, [r7, #12]
 8007e02:	4313      	orrs	r3, r2
 8007e04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	68fa      	ldr	r2, [r7, #12]
 8007e0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a21      	ldr	r2, [pc, #132]	; (8007e98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d022      	beq.n	8007e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e20:	d01d      	beq.n	8007e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a1d      	ldr	r2, [pc, #116]	; (8007e9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d018      	beq.n	8007e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a1b      	ldr	r2, [pc, #108]	; (8007ea0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d013      	beq.n	8007e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4a1a      	ldr	r2, [pc, #104]	; (8007ea4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d00e      	beq.n	8007e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a18      	ldr	r2, [pc, #96]	; (8007ea8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007e46:	4293      	cmp	r3, r2
 8007e48:	d009      	beq.n	8007e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a17      	ldr	r2, [pc, #92]	; (8007eac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d004      	beq.n	8007e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4a15      	ldr	r2, [pc, #84]	; (8007eb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007e5a:	4293      	cmp	r3, r2
 8007e5c:	d10c      	bne.n	8007e78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	685b      	ldr	r3, [r3, #4]
 8007e6a:	68ba      	ldr	r2, [r7, #8]
 8007e6c:	4313      	orrs	r3, r2
 8007e6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	68ba      	ldr	r2, [r7, #8]
 8007e76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e88:	2300      	movs	r3, #0
}
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3714      	adds	r7, #20
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
 8007e96:	bf00      	nop
 8007e98:	40010000 	.word	0x40010000
 8007e9c:	40000400 	.word	0x40000400
 8007ea0:	40000800 	.word	0x40000800
 8007ea4:	40000c00 	.word	0x40000c00
 8007ea8:	40010400 	.word	0x40010400
 8007eac:	40014000 	.word	0x40014000
 8007eb0:	40001800 	.word	0x40001800

08007eb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b083      	sub	sp, #12
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007ebc:	bf00      	nop
 8007ebe:	370c      	adds	r7, #12
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007ed0:	bf00      	nop
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b082      	sub	sp, #8
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d101      	bne.n	8007eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e03f      	b.n	8007f6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d106      	bne.n	8007f08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f7fa fee8 	bl	8002cd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2224      	movs	r2, #36	; 0x24
 8007f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	68da      	ldr	r2, [r3, #12]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 ff97 	bl	8008e54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	691a      	ldr	r2, [r3, #16]
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007f34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	695a      	ldr	r2, [r3, #20]
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007f44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	68da      	ldr	r2, [r3, #12]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007f54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2220      	movs	r2, #32
 8007f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2220      	movs	r2, #32
 8007f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3708      	adds	r7, #8
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f76:	b580      	push	{r7, lr}
 8007f78:	b08a      	sub	sp, #40	; 0x28
 8007f7a:	af02      	add	r7, sp, #8
 8007f7c:	60f8      	str	r0, [r7, #12]
 8007f7e:	60b9      	str	r1, [r7, #8]
 8007f80:	603b      	str	r3, [r7, #0]
 8007f82:	4613      	mov	r3, r2
 8007f84:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007f86:	2300      	movs	r3, #0
 8007f88:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	2b20      	cmp	r3, #32
 8007f94:	d17c      	bne.n	8008090 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d002      	beq.n	8007fa2 <HAL_UART_Transmit+0x2c>
 8007f9c:	88fb      	ldrh	r3, [r7, #6]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d101      	bne.n	8007fa6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e075      	b.n	8008092 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d101      	bne.n	8007fb4 <HAL_UART_Transmit+0x3e>
 8007fb0:	2302      	movs	r3, #2
 8007fb2:	e06e      	b.n	8008092 <HAL_UART_Transmit+0x11c>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2221      	movs	r2, #33	; 0x21
 8007fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007fca:	f7fb fb83 	bl	80036d4 <HAL_GetTick>
 8007fce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	88fa      	ldrh	r2, [r7, #6]
 8007fd4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	88fa      	ldrh	r2, [r7, #6]
 8007fda:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fe4:	d108      	bne.n	8007ff8 <HAL_UART_Transmit+0x82>
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d104      	bne.n	8007ff8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	61bb      	str	r3, [r7, #24]
 8007ff6:	e003      	b.n	8008000 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007ff8:	68bb      	ldr	r3, [r7, #8]
 8007ffa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2200      	movs	r2, #0
 8008004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008008:	e02a      	b.n	8008060 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	9300      	str	r3, [sp, #0]
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	2200      	movs	r2, #0
 8008012:	2180      	movs	r1, #128	; 0x80
 8008014:	68f8      	ldr	r0, [r7, #12]
 8008016:	f000 fc53 	bl	80088c0 <UART_WaitOnFlagUntilTimeout>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d001      	beq.n	8008024 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008020:	2303      	movs	r3, #3
 8008022:	e036      	b.n	8008092 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008024:	69fb      	ldr	r3, [r7, #28]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d10b      	bne.n	8008042 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	881b      	ldrh	r3, [r3, #0]
 800802e:	461a      	mov	r2, r3
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008038:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	3302      	adds	r3, #2
 800803e:	61bb      	str	r3, [r7, #24]
 8008040:	e007      	b.n	8008052 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	781a      	ldrb	r2, [r3, #0]
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	3301      	adds	r3, #1
 8008050:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008056:	b29b      	uxth	r3, r3
 8008058:	3b01      	subs	r3, #1
 800805a:	b29a      	uxth	r2, r3
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008064:	b29b      	uxth	r3, r3
 8008066:	2b00      	cmp	r3, #0
 8008068:	d1cf      	bne.n	800800a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	9300      	str	r3, [sp, #0]
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	2200      	movs	r2, #0
 8008072:	2140      	movs	r1, #64	; 0x40
 8008074:	68f8      	ldr	r0, [r7, #12]
 8008076:	f000 fc23 	bl	80088c0 <UART_WaitOnFlagUntilTimeout>
 800807a:	4603      	mov	r3, r0
 800807c:	2b00      	cmp	r3, #0
 800807e:	d001      	beq.n	8008084 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008080:	2303      	movs	r3, #3
 8008082:	e006      	b.n	8008092 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	2220      	movs	r2, #32
 8008088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800808c:	2300      	movs	r3, #0
 800808e:	e000      	b.n	8008092 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008090:	2302      	movs	r3, #2
  }
}
 8008092:	4618      	mov	r0, r3
 8008094:	3720      	adds	r7, #32
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b08c      	sub	sp, #48	; 0x30
 800809e:	af00      	add	r7, sp, #0
 80080a0:	60f8      	str	r0, [r7, #12]
 80080a2:	60b9      	str	r1, [r7, #8]
 80080a4:	4613      	mov	r3, r2
 80080a6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80080ae:	b2db      	uxtb	r3, r3
 80080b0:	2b20      	cmp	r3, #32
 80080b2:	d152      	bne.n	800815a <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d002      	beq.n	80080c0 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80080ba:	88fb      	ldrh	r3, [r7, #6]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d101      	bne.n	80080c4 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80080c0:	2301      	movs	r3, #1
 80080c2:	e04b      	b.n	800815c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d101      	bne.n	80080d2 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80080ce:	2302      	movs	r3, #2
 80080d0:	e044      	b.n	800815c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	2201      	movs	r2, #1
 80080d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	2201      	movs	r2, #1
 80080de:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80080e0:	88fb      	ldrh	r3, [r7, #6]
 80080e2:	461a      	mov	r2, r3
 80080e4:	68b9      	ldr	r1, [r7, #8]
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f000 fc58 	bl	800899c <UART_Start_Receive_DMA>
 80080ec:	4603      	mov	r3, r0
 80080ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80080f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d12c      	bne.n	8008154 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d125      	bne.n	800814e <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008102:	2300      	movs	r3, #0
 8008104:	613b      	str	r3, [r7, #16]
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	613b      	str	r3, [r7, #16]
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	613b      	str	r3, [r7, #16]
 8008116:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	330c      	adds	r3, #12
 800811e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008120:	69bb      	ldr	r3, [r7, #24]
 8008122:	e853 3f00 	ldrex	r3, [r3]
 8008126:	617b      	str	r3, [r7, #20]
   return(result);
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	f043 0310 	orr.w	r3, r3, #16
 800812e:	62bb      	str	r3, [r7, #40]	; 0x28
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	330c      	adds	r3, #12
 8008136:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008138:	627a      	str	r2, [r7, #36]	; 0x24
 800813a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800813c:	6a39      	ldr	r1, [r7, #32]
 800813e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008140:	e841 2300 	strex	r3, r2, [r1]
 8008144:	61fb      	str	r3, [r7, #28]
   return(result);
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d1e5      	bne.n	8008118 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 800814c:	e002      	b.n	8008154 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800814e:	2301      	movs	r3, #1
 8008150:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8008154:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008158:	e000      	b.n	800815c <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800815a:	2302      	movs	r3, #2
  }
}
 800815c:	4618      	mov	r0, r3
 800815e:	3730      	adds	r7, #48	; 0x30
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}

08008164 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b0ba      	sub	sp, #232	; 0xe8
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	695b      	ldr	r3, [r3, #20]
 8008186:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800818a:	2300      	movs	r3, #0
 800818c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008190:	2300      	movs	r3, #0
 8008192:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800819a:	f003 030f 	and.w	r3, r3, #15
 800819e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80081a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d10f      	bne.n	80081ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80081aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081ae:	f003 0320 	and.w	r3, r3, #32
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d009      	beq.n	80081ca <HAL_UART_IRQHandler+0x66>
 80081b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081ba:	f003 0320 	and.w	r3, r3, #32
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d003      	beq.n	80081ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 fd8b 	bl	8008cde <UART_Receive_IT>
      return;
 80081c8:	e256      	b.n	8008678 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80081ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	f000 80de 	beq.w	8008390 <HAL_UART_IRQHandler+0x22c>
 80081d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80081d8:	f003 0301 	and.w	r3, r3, #1
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d106      	bne.n	80081ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80081e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081e4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f000 80d1 	beq.w	8008390 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80081ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081f2:	f003 0301 	and.w	r3, r3, #1
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00b      	beq.n	8008212 <HAL_UART_IRQHandler+0xae>
 80081fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008202:	2b00      	cmp	r3, #0
 8008204:	d005      	beq.n	8008212 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800820a:	f043 0201 	orr.w	r2, r3, #1
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008216:	f003 0304 	and.w	r3, r3, #4
 800821a:	2b00      	cmp	r3, #0
 800821c:	d00b      	beq.n	8008236 <HAL_UART_IRQHandler+0xd2>
 800821e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008222:	f003 0301 	and.w	r3, r3, #1
 8008226:	2b00      	cmp	r3, #0
 8008228:	d005      	beq.n	8008236 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822e:	f043 0202 	orr.w	r2, r3, #2
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008236:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800823a:	f003 0302 	and.w	r3, r3, #2
 800823e:	2b00      	cmp	r3, #0
 8008240:	d00b      	beq.n	800825a <HAL_UART_IRQHandler+0xf6>
 8008242:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008246:	f003 0301 	and.w	r3, r3, #1
 800824a:	2b00      	cmp	r3, #0
 800824c:	d005      	beq.n	800825a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008252:	f043 0204 	orr.w	r2, r3, #4
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800825a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800825e:	f003 0308 	and.w	r3, r3, #8
 8008262:	2b00      	cmp	r3, #0
 8008264:	d011      	beq.n	800828a <HAL_UART_IRQHandler+0x126>
 8008266:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800826a:	f003 0320 	and.w	r3, r3, #32
 800826e:	2b00      	cmp	r3, #0
 8008270:	d105      	bne.n	800827e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008272:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008276:	f003 0301 	and.w	r3, r3, #1
 800827a:	2b00      	cmp	r3, #0
 800827c:	d005      	beq.n	800828a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008282:	f043 0208 	orr.w	r2, r3, #8
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800828e:	2b00      	cmp	r3, #0
 8008290:	f000 81ed 	beq.w	800866e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008298:	f003 0320 	and.w	r3, r3, #32
 800829c:	2b00      	cmp	r3, #0
 800829e:	d008      	beq.n	80082b2 <HAL_UART_IRQHandler+0x14e>
 80082a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80082a4:	f003 0320 	and.w	r3, r3, #32
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d002      	beq.n	80082b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 fd16 	bl	8008cde <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	695b      	ldr	r3, [r3, #20]
 80082b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082bc:	2b40      	cmp	r3, #64	; 0x40
 80082be:	bf0c      	ite	eq
 80082c0:	2301      	moveq	r3, #1
 80082c2:	2300      	movne	r3, #0
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ce:	f003 0308 	and.w	r3, r3, #8
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d103      	bne.n	80082de <HAL_UART_IRQHandler+0x17a>
 80082d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d04f      	beq.n	800837e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 fc1e 	bl	8008b20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	695b      	ldr	r3, [r3, #20]
 80082ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ee:	2b40      	cmp	r3, #64	; 0x40
 80082f0:	d141      	bne.n	8008376 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	3314      	adds	r3, #20
 80082f8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008300:	e853 3f00 	ldrex	r3, [r3]
 8008304:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008308:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800830c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008310:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	3314      	adds	r3, #20
 800831a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800831e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008322:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008326:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800832a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800832e:	e841 2300 	strex	r3, r2, [r1]
 8008332:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008336:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1d9      	bne.n	80082f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008342:	2b00      	cmp	r3, #0
 8008344:	d013      	beq.n	800836e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800834a:	4a7d      	ldr	r2, [pc, #500]	; (8008540 <HAL_UART_IRQHandler+0x3dc>)
 800834c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008352:	4618      	mov	r0, r3
 8008354:	f7fc f84e 	bl	80043f4 <HAL_DMA_Abort_IT>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d016      	beq.n	800838c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008362:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008368:	4610      	mov	r0, r2
 800836a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800836c:	e00e      	b.n	800838c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f000 f9a4 	bl	80086bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008374:	e00a      	b.n	800838c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008376:	6878      	ldr	r0, [r7, #4]
 8008378:	f000 f9a0 	bl	80086bc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800837c:	e006      	b.n	800838c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f000 f99c 	bl	80086bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800838a:	e170      	b.n	800866e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800838c:	bf00      	nop
    return;
 800838e:	e16e      	b.n	800866e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008394:	2b01      	cmp	r3, #1
 8008396:	f040 814a 	bne.w	800862e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800839a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800839e:	f003 0310 	and.w	r3, r3, #16
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	f000 8143 	beq.w	800862e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80083a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083ac:	f003 0310 	and.w	r3, r3, #16
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	f000 813c 	beq.w	800862e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80083b6:	2300      	movs	r3, #0
 80083b8:	60bb      	str	r3, [r7, #8]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	60bb      	str	r3, [r7, #8]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	60bb      	str	r3, [r7, #8]
 80083ca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	695b      	ldr	r3, [r3, #20]
 80083d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083d6:	2b40      	cmp	r3, #64	; 0x40
 80083d8:	f040 80b4 	bne.w	8008544 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	685b      	ldr	r3, [r3, #4]
 80083e4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80083e8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f000 8140 	beq.w	8008672 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80083f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80083fa:	429a      	cmp	r2, r3
 80083fc:	f080 8139 	bcs.w	8008672 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008406:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800840c:	69db      	ldr	r3, [r3, #28]
 800840e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008412:	f000 8088 	beq.w	8008526 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	330c      	adds	r3, #12
 800841c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008420:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008424:	e853 3f00 	ldrex	r3, [r3]
 8008428:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800842c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008430:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008434:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	330c      	adds	r3, #12
 800843e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008442:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008446:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800844e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008452:	e841 2300 	strex	r3, r2, [r1]
 8008456:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800845a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800845e:	2b00      	cmp	r3, #0
 8008460:	d1d9      	bne.n	8008416 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	3314      	adds	r3, #20
 8008468:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800846a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800846c:	e853 3f00 	ldrex	r3, [r3]
 8008470:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008472:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008474:	f023 0301 	bic.w	r3, r3, #1
 8008478:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	3314      	adds	r3, #20
 8008482:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008486:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800848a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800848c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800848e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008492:	e841 2300 	strex	r3, r2, [r1]
 8008496:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008498:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800849a:	2b00      	cmp	r3, #0
 800849c:	d1e1      	bne.n	8008462 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	3314      	adds	r3, #20
 80084a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80084a8:	e853 3f00 	ldrex	r3, [r3]
 80084ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80084ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80084b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	3314      	adds	r3, #20
 80084be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80084c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80084c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80084c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80084ca:	e841 2300 	strex	r3, r2, [r1]
 80084ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80084d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d1e3      	bne.n	800849e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2220      	movs	r2, #32
 80084da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	330c      	adds	r3, #12
 80084ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084ee:	e853 3f00 	ldrex	r3, [r3]
 80084f2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80084f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80084f6:	f023 0310 	bic.w	r3, r3, #16
 80084fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	330c      	adds	r3, #12
 8008504:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008508:	65ba      	str	r2, [r7, #88]	; 0x58
 800850a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800850c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800850e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008510:	e841 2300 	strex	r3, r2, [r1]
 8008514:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008516:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008518:	2b00      	cmp	r3, #0
 800851a:	d1e3      	bne.n	80084e4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008520:	4618      	mov	r0, r3
 8008522:	f7fb fef7 	bl	8004314 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800852e:	b29b      	uxth	r3, r3
 8008530:	1ad3      	subs	r3, r2, r3
 8008532:	b29b      	uxth	r3, r3
 8008534:	4619      	mov	r1, r3
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f7fa fee2 	bl	8003300 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800853c:	e099      	b.n	8008672 <HAL_UART_IRQHandler+0x50e>
 800853e:	bf00      	nop
 8008540:	08008be7 	.word	0x08008be7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800854c:	b29b      	uxth	r3, r3
 800854e:	1ad3      	subs	r3, r2, r3
 8008550:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008558:	b29b      	uxth	r3, r3
 800855a:	2b00      	cmp	r3, #0
 800855c:	f000 808b 	beq.w	8008676 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008560:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008564:	2b00      	cmp	r3, #0
 8008566:	f000 8086 	beq.w	8008676 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	330c      	adds	r3, #12
 8008570:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008574:	e853 3f00 	ldrex	r3, [r3]
 8008578:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800857a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800857c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008580:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	330c      	adds	r3, #12
 800858a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800858e:	647a      	str	r2, [r7, #68]	; 0x44
 8008590:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008592:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008594:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008596:	e841 2300 	strex	r3, r2, [r1]
 800859a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800859c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d1e3      	bne.n	800856a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	3314      	adds	r3, #20
 80085a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ac:	e853 3f00 	ldrex	r3, [r3]
 80085b0:	623b      	str	r3, [r7, #32]
   return(result);
 80085b2:	6a3b      	ldr	r3, [r7, #32]
 80085b4:	f023 0301 	bic.w	r3, r3, #1
 80085b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	3314      	adds	r3, #20
 80085c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80085c6:	633a      	str	r2, [r7, #48]	; 0x30
 80085c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085ce:	e841 2300 	strex	r3, r2, [r1]
 80085d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d1e3      	bne.n	80085a2 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2220      	movs	r2, #32
 80085de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2200      	movs	r2, #0
 80085e6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	330c      	adds	r3, #12
 80085ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085f0:	693b      	ldr	r3, [r7, #16]
 80085f2:	e853 3f00 	ldrex	r3, [r3]
 80085f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	f023 0310 	bic.w	r3, r3, #16
 80085fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	330c      	adds	r3, #12
 8008608:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800860c:	61fa      	str	r2, [r7, #28]
 800860e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008610:	69b9      	ldr	r1, [r7, #24]
 8008612:	69fa      	ldr	r2, [r7, #28]
 8008614:	e841 2300 	strex	r3, r2, [r1]
 8008618:	617b      	str	r3, [r7, #20]
   return(result);
 800861a:	697b      	ldr	r3, [r7, #20]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d1e3      	bne.n	80085e8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008620:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008624:	4619      	mov	r1, r3
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f7fa fe6a 	bl	8003300 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800862c:	e023      	b.n	8008676 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800862e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008636:	2b00      	cmp	r3, #0
 8008638:	d009      	beq.n	800864e <HAL_UART_IRQHandler+0x4ea>
 800863a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800863e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008642:	2b00      	cmp	r3, #0
 8008644:	d003      	beq.n	800864e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f000 fae1 	bl	8008c0e <UART_Transmit_IT>
    return;
 800864c:	e014      	b.n	8008678 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800864e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00e      	beq.n	8008678 <HAL_UART_IRQHandler+0x514>
 800865a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800865e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008662:	2b00      	cmp	r3, #0
 8008664:	d008      	beq.n	8008678 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008666:	6878      	ldr	r0, [r7, #4]
 8008668:	f000 fb21 	bl	8008cae <UART_EndTransmit_IT>
    return;
 800866c:	e004      	b.n	8008678 <HAL_UART_IRQHandler+0x514>
    return;
 800866e:	bf00      	nop
 8008670:	e002      	b.n	8008678 <HAL_UART_IRQHandler+0x514>
      return;
 8008672:	bf00      	nop
 8008674:	e000      	b.n	8008678 <HAL_UART_IRQHandler+0x514>
      return;
 8008676:	bf00      	nop
  }
}
 8008678:	37e8      	adds	r7, #232	; 0xe8
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop

08008680 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008680:	b480      	push	{r7}
 8008682:	b083      	sub	sp, #12
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008688:	bf00      	nop
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008694:	b480      	push	{r7}
 8008696:	b083      	sub	sp, #12
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800869c:	bf00      	nop
 800869e:	370c      	adds	r7, #12
 80086a0:	46bd      	mov	sp, r7
 80086a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a6:	4770      	bx	lr

080086a8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80086a8:	b480      	push	{r7}
 80086aa:	b083      	sub	sp, #12
 80086ac:	af00      	add	r7, sp, #0
 80086ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80086b0:	bf00      	nop
 80086b2:	370c      	adds	r7, #12
 80086b4:	46bd      	mov	sp, r7
 80086b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ba:	4770      	bx	lr

080086bc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80086bc:	b480      	push	{r7}
 80086be:	b083      	sub	sp, #12
 80086c0:	af00      	add	r7, sp, #0
 80086c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80086c4:	bf00      	nop
 80086c6:	370c      	adds	r7, #12
 80086c8:	46bd      	mov	sp, r7
 80086ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ce:	4770      	bx	lr

080086d0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b09c      	sub	sp, #112	; 0x70
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d172      	bne.n	80087d2 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80086ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086ee:	2200      	movs	r2, #0
 80086f0:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	330c      	adds	r3, #12
 80086f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086fc:	e853 3f00 	ldrex	r3, [r3]
 8008700:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008702:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008708:	66bb      	str	r3, [r7, #104]	; 0x68
 800870a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	330c      	adds	r3, #12
 8008710:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008712:	65ba      	str	r2, [r7, #88]	; 0x58
 8008714:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008716:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008718:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800871a:	e841 2300 	strex	r3, r2, [r1]
 800871e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008720:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008722:	2b00      	cmp	r3, #0
 8008724:	d1e5      	bne.n	80086f2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	3314      	adds	r3, #20
 800872c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008730:	e853 3f00 	ldrex	r3, [r3]
 8008734:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008738:	f023 0301 	bic.w	r3, r3, #1
 800873c:	667b      	str	r3, [r7, #100]	; 0x64
 800873e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	3314      	adds	r3, #20
 8008744:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8008746:	647a      	str	r2, [r7, #68]	; 0x44
 8008748:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800874c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800874e:	e841 2300 	strex	r3, r2, [r1]
 8008752:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008756:	2b00      	cmp	r3, #0
 8008758:	d1e5      	bne.n	8008726 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800875a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	3314      	adds	r3, #20
 8008760:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008764:	e853 3f00 	ldrex	r3, [r3]
 8008768:	623b      	str	r3, [r7, #32]
   return(result);
 800876a:	6a3b      	ldr	r3, [r7, #32]
 800876c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008770:	663b      	str	r3, [r7, #96]	; 0x60
 8008772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	3314      	adds	r3, #20
 8008778:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800877a:	633a      	str	r2, [r7, #48]	; 0x30
 800877c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800877e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008780:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008782:	e841 2300 	strex	r3, r2, [r1]
 8008786:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008788:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800878a:	2b00      	cmp	r3, #0
 800878c:	d1e5      	bne.n	800875a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800878e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008790:	2220      	movs	r2, #32
 8008792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800879a:	2b01      	cmp	r3, #1
 800879c:	d119      	bne.n	80087d2 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800879e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	330c      	adds	r3, #12
 80087a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087a6:	693b      	ldr	r3, [r7, #16]
 80087a8:	e853 3f00 	ldrex	r3, [r3]
 80087ac:	60fb      	str	r3, [r7, #12]
   return(result);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	f023 0310 	bic.w	r3, r3, #16
 80087b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80087b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	330c      	adds	r3, #12
 80087bc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80087be:	61fa      	str	r2, [r7, #28]
 80087c0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087c2:	69b9      	ldr	r1, [r7, #24]
 80087c4:	69fa      	ldr	r2, [r7, #28]
 80087c6:	e841 2300 	strex	r3, r2, [r1]
 80087ca:	617b      	str	r3, [r7, #20]
   return(result);
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d1e5      	bne.n	800879e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d6:	2b01      	cmp	r3, #1
 80087d8:	d106      	bne.n	80087e8 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80087da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80087de:	4619      	mov	r1, r3
 80087e0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80087e2:	f7fa fd8d 	bl	8003300 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80087e6:	e002      	b.n	80087ee <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80087e8:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80087ea:	f7ff ff53 	bl	8008694 <HAL_UART_RxCpltCallback>
}
 80087ee:	bf00      	nop
 80087f0:	3770      	adds	r7, #112	; 0x70
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b084      	sub	sp, #16
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008802:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008808:	2b01      	cmp	r3, #1
 800880a:	d108      	bne.n	800881e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008810:	085b      	lsrs	r3, r3, #1
 8008812:	b29b      	uxth	r3, r3
 8008814:	4619      	mov	r1, r3
 8008816:	68f8      	ldr	r0, [r7, #12]
 8008818:	f7fa fd72 	bl	8003300 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800881c:	e002      	b.n	8008824 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800881e:	68f8      	ldr	r0, [r7, #12]
 8008820:	f7ff ff42 	bl	80086a8 <HAL_UART_RxHalfCpltCallback>
}
 8008824:	bf00      	nop
 8008826:	3710      	adds	r7, #16
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008834:	2300      	movs	r3, #0
 8008836:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800883c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	695b      	ldr	r3, [r3, #20]
 8008844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008848:	2b80      	cmp	r3, #128	; 0x80
 800884a:	bf0c      	ite	eq
 800884c:	2301      	moveq	r3, #1
 800884e:	2300      	movne	r3, #0
 8008850:	b2db      	uxtb	r3, r3
 8008852:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800885a:	b2db      	uxtb	r3, r3
 800885c:	2b21      	cmp	r3, #33	; 0x21
 800885e:	d108      	bne.n	8008872 <UART_DMAError+0x46>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d005      	beq.n	8008872 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	2200      	movs	r2, #0
 800886a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800886c:	68b8      	ldr	r0, [r7, #8]
 800886e:	f000 f92f 	bl	8008ad0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	695b      	ldr	r3, [r3, #20]
 8008878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800887c:	2b40      	cmp	r3, #64	; 0x40
 800887e:	bf0c      	ite	eq
 8008880:	2301      	moveq	r3, #1
 8008882:	2300      	movne	r3, #0
 8008884:	b2db      	uxtb	r3, r3
 8008886:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800888e:	b2db      	uxtb	r3, r3
 8008890:	2b22      	cmp	r3, #34	; 0x22
 8008892:	d108      	bne.n	80088a6 <UART_DMAError+0x7a>
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d005      	beq.n	80088a6 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	2200      	movs	r2, #0
 800889e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80088a0:	68b8      	ldr	r0, [r7, #8]
 80088a2:	f000 f93d 	bl	8008b20 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088aa:	f043 0210 	orr.w	r2, r3, #16
 80088ae:	68bb      	ldr	r3, [r7, #8]
 80088b0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088b2:	68b8      	ldr	r0, [r7, #8]
 80088b4:	f7ff ff02 	bl	80086bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088b8:	bf00      	nop
 80088ba:	3710      	adds	r7, #16
 80088bc:	46bd      	mov	sp, r7
 80088be:	bd80      	pop	{r7, pc}

080088c0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b090      	sub	sp, #64	; 0x40
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	603b      	str	r3, [r7, #0]
 80088cc:	4613      	mov	r3, r2
 80088ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088d0:	e050      	b.n	8008974 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088d8:	d04c      	beq.n	8008974 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80088da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d007      	beq.n	80088f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80088e0:	f7fa fef8 	bl	80036d4 <HAL_GetTick>
 80088e4:	4602      	mov	r2, r0
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	1ad3      	subs	r3, r2, r3
 80088ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80088ec:	429a      	cmp	r2, r3
 80088ee:	d241      	bcs.n	8008974 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	330c      	adds	r3, #12
 80088f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088fa:	e853 3f00 	ldrex	r3, [r3]
 80088fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008902:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008906:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	330c      	adds	r3, #12
 800890e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008910:	637a      	str	r2, [r7, #52]	; 0x34
 8008912:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008914:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008916:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008918:	e841 2300 	strex	r3, r2, [r1]
 800891c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800891e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008920:	2b00      	cmp	r3, #0
 8008922:	d1e5      	bne.n	80088f0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	3314      	adds	r3, #20
 800892a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	e853 3f00 	ldrex	r3, [r3]
 8008932:	613b      	str	r3, [r7, #16]
   return(result);
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	f023 0301 	bic.w	r3, r3, #1
 800893a:	63bb      	str	r3, [r7, #56]	; 0x38
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	3314      	adds	r3, #20
 8008942:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008944:	623a      	str	r2, [r7, #32]
 8008946:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008948:	69f9      	ldr	r1, [r7, #28]
 800894a:	6a3a      	ldr	r2, [r7, #32]
 800894c:	e841 2300 	strex	r3, r2, [r1]
 8008950:	61bb      	str	r3, [r7, #24]
   return(result);
 8008952:	69bb      	ldr	r3, [r7, #24]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d1e5      	bne.n	8008924 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2220      	movs	r2, #32
 800895c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2220      	movs	r2, #32
 8008964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	2200      	movs	r2, #0
 800896c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008970:	2303      	movs	r3, #3
 8008972:	e00f      	b.n	8008994 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	4013      	ands	r3, r2
 800897e:	68ba      	ldr	r2, [r7, #8]
 8008980:	429a      	cmp	r2, r3
 8008982:	bf0c      	ite	eq
 8008984:	2301      	moveq	r3, #1
 8008986:	2300      	movne	r3, #0
 8008988:	b2db      	uxtb	r3, r3
 800898a:	461a      	mov	r2, r3
 800898c:	79fb      	ldrb	r3, [r7, #7]
 800898e:	429a      	cmp	r2, r3
 8008990:	d09f      	beq.n	80088d2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008992:	2300      	movs	r3, #0
}
 8008994:	4618      	mov	r0, r3
 8008996:	3740      	adds	r7, #64	; 0x40
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b098      	sub	sp, #96	; 0x60
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	60f8      	str	r0, [r7, #12]
 80089a4:	60b9      	str	r1, [r7, #8]
 80089a6:	4613      	mov	r3, r2
 80089a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80089aa:	68ba      	ldr	r2, [r7, #8]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	88fa      	ldrh	r2, [r7, #6]
 80089b4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2200      	movs	r2, #0
 80089ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2222      	movs	r2, #34	; 0x22
 80089c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c8:	4a3e      	ldr	r2, [pc, #248]	; (8008ac4 <UART_Start_Receive_DMA+0x128>)
 80089ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d0:	4a3d      	ldr	r2, [pc, #244]	; (8008ac8 <UART_Start_Receive_DMA+0x12c>)
 80089d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089d8:	4a3c      	ldr	r2, [pc, #240]	; (8008acc <UART_Start_Receive_DMA+0x130>)
 80089da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e0:	2200      	movs	r2, #0
 80089e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80089e4:	f107 0308 	add.w	r3, r7, #8
 80089e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	3304      	adds	r3, #4
 80089f4:	4619      	mov	r1, r3
 80089f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80089f8:	681a      	ldr	r2, [r3, #0]
 80089fa:	88fb      	ldrh	r3, [r7, #6]
 80089fc:	f7fb fc32 	bl	8004264 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008a00:	2300      	movs	r3, #0
 8008a02:	613b      	str	r3, [r7, #16]
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	613b      	str	r3, [r7, #16]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	613b      	str	r3, [r7, #16]
 8008a14:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	330c      	adds	r3, #12
 8008a24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a28:	e853 3f00 	ldrex	r3, [r3]
 8008a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a34:	65bb      	str	r3, [r7, #88]	; 0x58
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	330c      	adds	r3, #12
 8008a3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008a3e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8008a40:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a42:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008a44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008a46:	e841 2300 	strex	r3, r2, [r1]
 8008a4a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008a4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d1e5      	bne.n	8008a1e <UART_Start_Receive_DMA+0x82>

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	3314      	adds	r3, #20
 8008a58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a5c:	e853 3f00 	ldrex	r3, [r3]
 8008a60:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a64:	f043 0301 	orr.w	r3, r3, #1
 8008a68:	657b      	str	r3, [r7, #84]	; 0x54
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	3314      	adds	r3, #20
 8008a70:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008a72:	63ba      	str	r2, [r7, #56]	; 0x38
 8008a74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a76:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008a78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a7a:	e841 2300 	strex	r3, r2, [r1]
 8008a7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d1e5      	bne.n	8008a52 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	3314      	adds	r3, #20
 8008a8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8e:	69bb      	ldr	r3, [r7, #24]
 8008a90:	e853 3f00 	ldrex	r3, [r3]
 8008a94:	617b      	str	r3, [r7, #20]
   return(result);
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a9c:	653b      	str	r3, [r7, #80]	; 0x50
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	3314      	adds	r3, #20
 8008aa4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008aa6:	627a      	str	r2, [r7, #36]	; 0x24
 8008aa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aaa:	6a39      	ldr	r1, [r7, #32]
 8008aac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aae:	e841 2300 	strex	r3, r2, [r1]
 8008ab2:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d1e5      	bne.n	8008a86 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8008aba:	2300      	movs	r3, #0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3760      	adds	r7, #96	; 0x60
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}
 8008ac4:	080086d1 	.word	0x080086d1
 8008ac8:	080087f7 	.word	0x080087f7
 8008acc:	0800882d 	.word	0x0800882d

08008ad0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b089      	sub	sp, #36	; 0x24
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	330c      	adds	r3, #12
 8008ade:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	e853 3f00 	ldrex	r3, [r3]
 8008ae6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8008aee:	61fb      	str	r3, [r7, #28]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	330c      	adds	r3, #12
 8008af6:	69fa      	ldr	r2, [r7, #28]
 8008af8:	61ba      	str	r2, [r7, #24]
 8008afa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008afc:	6979      	ldr	r1, [r7, #20]
 8008afe:	69ba      	ldr	r2, [r7, #24]
 8008b00:	e841 2300 	strex	r3, r2, [r1]
 8008b04:	613b      	str	r3, [r7, #16]
   return(result);
 8008b06:	693b      	ldr	r3, [r7, #16]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d1e5      	bne.n	8008ad8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2220      	movs	r2, #32
 8008b10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008b14:	bf00      	nop
 8008b16:	3724      	adds	r7, #36	; 0x24
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1e:	4770      	bx	lr

08008b20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b095      	sub	sp, #84	; 0x54
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	330c      	adds	r3, #12
 8008b2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b32:	e853 3f00 	ldrex	r3, [r3]
 8008b36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	330c      	adds	r3, #12
 8008b46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b48:	643a      	str	r2, [r7, #64]	; 0x40
 8008b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008b4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008b50:	e841 2300 	strex	r3, r2, [r1]
 8008b54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d1e5      	bne.n	8008b28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	3314      	adds	r3, #20
 8008b62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b64:	6a3b      	ldr	r3, [r7, #32]
 8008b66:	e853 3f00 	ldrex	r3, [r3]
 8008b6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b6c:	69fb      	ldr	r3, [r7, #28]
 8008b6e:	f023 0301 	bic.w	r3, r3, #1
 8008b72:	64bb      	str	r3, [r7, #72]	; 0x48
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	3314      	adds	r3, #20
 8008b7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008b7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008b84:	e841 2300 	strex	r3, r2, [r1]
 8008b88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d1e5      	bne.n	8008b5c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d119      	bne.n	8008bcc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	330c      	adds	r3, #12
 8008b9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	e853 3f00 	ldrex	r3, [r3]
 8008ba6:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	f023 0310 	bic.w	r3, r3, #16
 8008bae:	647b      	str	r3, [r7, #68]	; 0x44
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	330c      	adds	r3, #12
 8008bb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008bb8:	61ba      	str	r2, [r7, #24]
 8008bba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bbc:	6979      	ldr	r1, [r7, #20]
 8008bbe:	69ba      	ldr	r2, [r7, #24]
 8008bc0:	e841 2300 	strex	r3, r2, [r1]
 8008bc4:	613b      	str	r3, [r7, #16]
   return(result);
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d1e5      	bne.n	8008b98 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2220      	movs	r2, #32
 8008bd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008bda:	bf00      	nop
 8008bdc:	3754      	adds	r7, #84	; 0x54
 8008bde:	46bd      	mov	sp, r7
 8008be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be4:	4770      	bx	lr

08008be6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008be6:	b580      	push	{r7, lr}
 8008be8:	b084      	sub	sp, #16
 8008bea:	af00      	add	r7, sp, #0
 8008bec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	2200      	movs	r2, #0
 8008bf8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c00:	68f8      	ldr	r0, [r7, #12]
 8008c02:	f7ff fd5b 	bl	80086bc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c06:	bf00      	nop
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008c0e:	b480      	push	{r7}
 8008c10:	b085      	sub	sp, #20
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	2b21      	cmp	r3, #33	; 0x21
 8008c20:	d13e      	bne.n	8008ca0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	689b      	ldr	r3, [r3, #8]
 8008c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c2a:	d114      	bne.n	8008c56 <UART_Transmit_IT+0x48>
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	691b      	ldr	r3, [r3, #16]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d110      	bne.n	8008c56 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6a1b      	ldr	r3, [r3, #32]
 8008c38:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	881b      	ldrh	r3, [r3, #0]
 8008c3e:	461a      	mov	r2, r3
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c48:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6a1b      	ldr	r3, [r3, #32]
 8008c4e:	1c9a      	adds	r2, r3, #2
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	621a      	str	r2, [r3, #32]
 8008c54:	e008      	b.n	8008c68 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6a1b      	ldr	r3, [r3, #32]
 8008c5a:	1c59      	adds	r1, r3, #1
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	6211      	str	r1, [r2, #32]
 8008c60:	781a      	ldrb	r2, [r3, #0]
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	b29b      	uxth	r3, r3
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	4619      	mov	r1, r3
 8008c76:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d10f      	bne.n	8008c9c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	68da      	ldr	r2, [r3, #12]
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c8a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	68da      	ldr	r2, [r3, #12]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c9a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	e000      	b.n	8008ca2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008ca0:	2302      	movs	r3, #2
  }
}
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	3714      	adds	r7, #20
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr

08008cae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b082      	sub	sp, #8
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68da      	ldr	r2, [r3, #12]
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cc4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2220      	movs	r2, #32
 8008cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f7ff fcd6 	bl	8008680 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008cd4:	2300      	movs	r3, #0
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3708      	adds	r7, #8
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}

08008cde <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008cde:	b580      	push	{r7, lr}
 8008ce0:	b08c      	sub	sp, #48	; 0x30
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	2b22      	cmp	r3, #34	; 0x22
 8008cf0:	f040 80ab 	bne.w	8008e4a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008cfc:	d117      	bne.n	8008d2e <UART_Receive_IT+0x50>
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	691b      	ldr	r3, [r3, #16]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d113      	bne.n	8008d2e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008d06:	2300      	movs	r3, #0
 8008d08:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d0e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	685b      	ldr	r3, [r3, #4]
 8008d16:	b29b      	uxth	r3, r3
 8008d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d1c:	b29a      	uxth	r2, r3
 8008d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d26:	1c9a      	adds	r2, r3, #2
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	629a      	str	r2, [r3, #40]	; 0x28
 8008d2c:	e026      	b.n	8008d7c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d32:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008d34:	2300      	movs	r3, #0
 8008d36:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d40:	d007      	beq.n	8008d52 <UART_Receive_IT+0x74>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d10a      	bne.n	8008d60 <UART_Receive_IT+0x82>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d106      	bne.n	8008d60 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	b2da      	uxtb	r2, r3
 8008d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d5c:	701a      	strb	r2, [r3, #0]
 8008d5e:	e008      	b.n	8008d72 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d6c:	b2da      	uxtb	r2, r3
 8008d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d70:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d76:	1c5a      	adds	r2, r3, #1
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	3b01      	subs	r3, #1
 8008d84:	b29b      	uxth	r3, r3
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	4619      	mov	r1, r3
 8008d8a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d15a      	bne.n	8008e46 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	68da      	ldr	r2, [r3, #12]
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	f022 0220 	bic.w	r2, r2, #32
 8008d9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	68da      	ldr	r2, [r3, #12]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008dae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	695a      	ldr	r2, [r3, #20]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f022 0201 	bic.w	r2, r2, #1
 8008dbe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2220      	movs	r2, #32
 8008dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dcc:	2b01      	cmp	r3, #1
 8008dce:	d135      	bne.n	8008e3c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	330c      	adds	r3, #12
 8008ddc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	e853 3f00 	ldrex	r3, [r3]
 8008de4:	613b      	str	r3, [r7, #16]
   return(result);
 8008de6:	693b      	ldr	r3, [r7, #16]
 8008de8:	f023 0310 	bic.w	r3, r3, #16
 8008dec:	627b      	str	r3, [r7, #36]	; 0x24
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	330c      	adds	r3, #12
 8008df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008df6:	623a      	str	r2, [r7, #32]
 8008df8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfa:	69f9      	ldr	r1, [r7, #28]
 8008dfc:	6a3a      	ldr	r2, [r7, #32]
 8008dfe:	e841 2300 	strex	r3, r2, [r1]
 8008e02:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d1e5      	bne.n	8008dd6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f003 0310 	and.w	r3, r3, #16
 8008e14:	2b10      	cmp	r3, #16
 8008e16:	d10a      	bne.n	8008e2e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e18:	2300      	movs	r3, #0
 8008e1a:	60fb      	str	r3, [r7, #12]
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	60fb      	str	r3, [r7, #12]
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	685b      	ldr	r3, [r3, #4]
 8008e2a:	60fb      	str	r3, [r7, #12]
 8008e2c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008e32:	4619      	mov	r1, r3
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f7fa fa63 	bl	8003300 <HAL_UARTEx_RxEventCallback>
 8008e3a:	e002      	b.n	8008e42 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f7ff fc29 	bl	8008694 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008e42:	2300      	movs	r3, #0
 8008e44:	e002      	b.n	8008e4c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008e46:	2300      	movs	r3, #0
 8008e48:	e000      	b.n	8008e4c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008e4a:	2302      	movs	r3, #2
  }
}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3730      	adds	r7, #48	; 0x30
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e58:	b09f      	sub	sp, #124	; 0x7c
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	691b      	ldr	r3, [r3, #16]
 8008e64:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e6a:	68d9      	ldr	r1, [r3, #12]
 8008e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e6e:	681a      	ldr	r2, [r3, #0]
 8008e70:	ea40 0301 	orr.w	r3, r0, r1
 8008e74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e78:	689a      	ldr	r2, [r3, #8]
 8008e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e7c:	691b      	ldr	r3, [r3, #16]
 8008e7e:	431a      	orrs	r2, r3
 8008e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e82:	695b      	ldr	r3, [r3, #20]
 8008e84:	431a      	orrs	r2, r3
 8008e86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e88:	69db      	ldr	r3, [r3, #28]
 8008e8a:	4313      	orrs	r3, r2
 8008e8c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008e8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	68db      	ldr	r3, [r3, #12]
 8008e94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008e98:	f021 010c 	bic.w	r1, r1, #12
 8008e9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ea2:	430b      	orrs	r3, r1
 8008ea4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	695b      	ldr	r3, [r3, #20]
 8008eac:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eb2:	6999      	ldr	r1, [r3, #24]
 8008eb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	ea40 0301 	orr.w	r3, r0, r1
 8008ebc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008ebe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ec0:	681a      	ldr	r2, [r3, #0]
 8008ec2:	4bc5      	ldr	r3, [pc, #788]	; (80091d8 <UART_SetConfig+0x384>)
 8008ec4:	429a      	cmp	r2, r3
 8008ec6:	d004      	beq.n	8008ed2 <UART_SetConfig+0x7e>
 8008ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	4bc3      	ldr	r3, [pc, #780]	; (80091dc <UART_SetConfig+0x388>)
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	d103      	bne.n	8008eda <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008ed2:	f7fd fd2b 	bl	800692c <HAL_RCC_GetPCLK2Freq>
 8008ed6:	6778      	str	r0, [r7, #116]	; 0x74
 8008ed8:	e002      	b.n	8008ee0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008eda:	f7fd fd13 	bl	8006904 <HAL_RCC_GetPCLK1Freq>
 8008ede:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ee2:	69db      	ldr	r3, [r3, #28]
 8008ee4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008ee8:	f040 80b6 	bne.w	8009058 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008eec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008eee:	461c      	mov	r4, r3
 8008ef0:	f04f 0500 	mov.w	r5, #0
 8008ef4:	4622      	mov	r2, r4
 8008ef6:	462b      	mov	r3, r5
 8008ef8:	1891      	adds	r1, r2, r2
 8008efa:	6439      	str	r1, [r7, #64]	; 0x40
 8008efc:	415b      	adcs	r3, r3
 8008efe:	647b      	str	r3, [r7, #68]	; 0x44
 8008f00:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008f04:	1912      	adds	r2, r2, r4
 8008f06:	eb45 0303 	adc.w	r3, r5, r3
 8008f0a:	f04f 0000 	mov.w	r0, #0
 8008f0e:	f04f 0100 	mov.w	r1, #0
 8008f12:	00d9      	lsls	r1, r3, #3
 8008f14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008f18:	00d0      	lsls	r0, r2, #3
 8008f1a:	4602      	mov	r2, r0
 8008f1c:	460b      	mov	r3, r1
 8008f1e:	1911      	adds	r1, r2, r4
 8008f20:	6639      	str	r1, [r7, #96]	; 0x60
 8008f22:	416b      	adcs	r3, r5
 8008f24:	667b      	str	r3, [r7, #100]	; 0x64
 8008f26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f28:	685b      	ldr	r3, [r3, #4]
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	f04f 0300 	mov.w	r3, #0
 8008f30:	1891      	adds	r1, r2, r2
 8008f32:	63b9      	str	r1, [r7, #56]	; 0x38
 8008f34:	415b      	adcs	r3, r3
 8008f36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f38:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008f3c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008f40:	f7f7 f996 	bl	8000270 <__aeabi_uldivmod>
 8008f44:	4602      	mov	r2, r0
 8008f46:	460b      	mov	r3, r1
 8008f48:	4ba5      	ldr	r3, [pc, #660]	; (80091e0 <UART_SetConfig+0x38c>)
 8008f4a:	fba3 2302 	umull	r2, r3, r3, r2
 8008f4e:	095b      	lsrs	r3, r3, #5
 8008f50:	011e      	lsls	r6, r3, #4
 8008f52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f54:	461c      	mov	r4, r3
 8008f56:	f04f 0500 	mov.w	r5, #0
 8008f5a:	4622      	mov	r2, r4
 8008f5c:	462b      	mov	r3, r5
 8008f5e:	1891      	adds	r1, r2, r2
 8008f60:	6339      	str	r1, [r7, #48]	; 0x30
 8008f62:	415b      	adcs	r3, r3
 8008f64:	637b      	str	r3, [r7, #52]	; 0x34
 8008f66:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008f6a:	1912      	adds	r2, r2, r4
 8008f6c:	eb45 0303 	adc.w	r3, r5, r3
 8008f70:	f04f 0000 	mov.w	r0, #0
 8008f74:	f04f 0100 	mov.w	r1, #0
 8008f78:	00d9      	lsls	r1, r3, #3
 8008f7a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008f7e:	00d0      	lsls	r0, r2, #3
 8008f80:	4602      	mov	r2, r0
 8008f82:	460b      	mov	r3, r1
 8008f84:	1911      	adds	r1, r2, r4
 8008f86:	65b9      	str	r1, [r7, #88]	; 0x58
 8008f88:	416b      	adcs	r3, r5
 8008f8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	461a      	mov	r2, r3
 8008f92:	f04f 0300 	mov.w	r3, #0
 8008f96:	1891      	adds	r1, r2, r2
 8008f98:	62b9      	str	r1, [r7, #40]	; 0x28
 8008f9a:	415b      	adcs	r3, r3
 8008f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f9e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008fa2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008fa6:	f7f7 f963 	bl	8000270 <__aeabi_uldivmod>
 8008faa:	4602      	mov	r2, r0
 8008fac:	460b      	mov	r3, r1
 8008fae:	4b8c      	ldr	r3, [pc, #560]	; (80091e0 <UART_SetConfig+0x38c>)
 8008fb0:	fba3 1302 	umull	r1, r3, r3, r2
 8008fb4:	095b      	lsrs	r3, r3, #5
 8008fb6:	2164      	movs	r1, #100	; 0x64
 8008fb8:	fb01 f303 	mul.w	r3, r1, r3
 8008fbc:	1ad3      	subs	r3, r2, r3
 8008fbe:	00db      	lsls	r3, r3, #3
 8008fc0:	3332      	adds	r3, #50	; 0x32
 8008fc2:	4a87      	ldr	r2, [pc, #540]	; (80091e0 <UART_SetConfig+0x38c>)
 8008fc4:	fba2 2303 	umull	r2, r3, r2, r3
 8008fc8:	095b      	lsrs	r3, r3, #5
 8008fca:	005b      	lsls	r3, r3, #1
 8008fcc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008fd0:	441e      	add	r6, r3
 8008fd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	f04f 0100 	mov.w	r1, #0
 8008fda:	4602      	mov	r2, r0
 8008fdc:	460b      	mov	r3, r1
 8008fde:	1894      	adds	r4, r2, r2
 8008fe0:	623c      	str	r4, [r7, #32]
 8008fe2:	415b      	adcs	r3, r3
 8008fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8008fe6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008fea:	1812      	adds	r2, r2, r0
 8008fec:	eb41 0303 	adc.w	r3, r1, r3
 8008ff0:	f04f 0400 	mov.w	r4, #0
 8008ff4:	f04f 0500 	mov.w	r5, #0
 8008ff8:	00dd      	lsls	r5, r3, #3
 8008ffa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008ffe:	00d4      	lsls	r4, r2, #3
 8009000:	4622      	mov	r2, r4
 8009002:	462b      	mov	r3, r5
 8009004:	1814      	adds	r4, r2, r0
 8009006:	653c      	str	r4, [r7, #80]	; 0x50
 8009008:	414b      	adcs	r3, r1
 800900a:	657b      	str	r3, [r7, #84]	; 0x54
 800900c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800900e:	685b      	ldr	r3, [r3, #4]
 8009010:	461a      	mov	r2, r3
 8009012:	f04f 0300 	mov.w	r3, #0
 8009016:	1891      	adds	r1, r2, r2
 8009018:	61b9      	str	r1, [r7, #24]
 800901a:	415b      	adcs	r3, r3
 800901c:	61fb      	str	r3, [r7, #28]
 800901e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009022:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009026:	f7f7 f923 	bl	8000270 <__aeabi_uldivmod>
 800902a:	4602      	mov	r2, r0
 800902c:	460b      	mov	r3, r1
 800902e:	4b6c      	ldr	r3, [pc, #432]	; (80091e0 <UART_SetConfig+0x38c>)
 8009030:	fba3 1302 	umull	r1, r3, r3, r2
 8009034:	095b      	lsrs	r3, r3, #5
 8009036:	2164      	movs	r1, #100	; 0x64
 8009038:	fb01 f303 	mul.w	r3, r1, r3
 800903c:	1ad3      	subs	r3, r2, r3
 800903e:	00db      	lsls	r3, r3, #3
 8009040:	3332      	adds	r3, #50	; 0x32
 8009042:	4a67      	ldr	r2, [pc, #412]	; (80091e0 <UART_SetConfig+0x38c>)
 8009044:	fba2 2303 	umull	r2, r3, r2, r3
 8009048:	095b      	lsrs	r3, r3, #5
 800904a:	f003 0207 	and.w	r2, r3, #7
 800904e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	4432      	add	r2, r6
 8009054:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009056:	e0b9      	b.n	80091cc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009058:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800905a:	461c      	mov	r4, r3
 800905c:	f04f 0500 	mov.w	r5, #0
 8009060:	4622      	mov	r2, r4
 8009062:	462b      	mov	r3, r5
 8009064:	1891      	adds	r1, r2, r2
 8009066:	6139      	str	r1, [r7, #16]
 8009068:	415b      	adcs	r3, r3
 800906a:	617b      	str	r3, [r7, #20]
 800906c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009070:	1912      	adds	r2, r2, r4
 8009072:	eb45 0303 	adc.w	r3, r5, r3
 8009076:	f04f 0000 	mov.w	r0, #0
 800907a:	f04f 0100 	mov.w	r1, #0
 800907e:	00d9      	lsls	r1, r3, #3
 8009080:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009084:	00d0      	lsls	r0, r2, #3
 8009086:	4602      	mov	r2, r0
 8009088:	460b      	mov	r3, r1
 800908a:	eb12 0804 	adds.w	r8, r2, r4
 800908e:	eb43 0905 	adc.w	r9, r3, r5
 8009092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	4618      	mov	r0, r3
 8009098:	f04f 0100 	mov.w	r1, #0
 800909c:	f04f 0200 	mov.w	r2, #0
 80090a0:	f04f 0300 	mov.w	r3, #0
 80090a4:	008b      	lsls	r3, r1, #2
 80090a6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80090aa:	0082      	lsls	r2, r0, #2
 80090ac:	4640      	mov	r0, r8
 80090ae:	4649      	mov	r1, r9
 80090b0:	f7f7 f8de 	bl	8000270 <__aeabi_uldivmod>
 80090b4:	4602      	mov	r2, r0
 80090b6:	460b      	mov	r3, r1
 80090b8:	4b49      	ldr	r3, [pc, #292]	; (80091e0 <UART_SetConfig+0x38c>)
 80090ba:	fba3 2302 	umull	r2, r3, r3, r2
 80090be:	095b      	lsrs	r3, r3, #5
 80090c0:	011e      	lsls	r6, r3, #4
 80090c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090c4:	4618      	mov	r0, r3
 80090c6:	f04f 0100 	mov.w	r1, #0
 80090ca:	4602      	mov	r2, r0
 80090cc:	460b      	mov	r3, r1
 80090ce:	1894      	adds	r4, r2, r2
 80090d0:	60bc      	str	r4, [r7, #8]
 80090d2:	415b      	adcs	r3, r3
 80090d4:	60fb      	str	r3, [r7, #12]
 80090d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80090da:	1812      	adds	r2, r2, r0
 80090dc:	eb41 0303 	adc.w	r3, r1, r3
 80090e0:	f04f 0400 	mov.w	r4, #0
 80090e4:	f04f 0500 	mov.w	r5, #0
 80090e8:	00dd      	lsls	r5, r3, #3
 80090ea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80090ee:	00d4      	lsls	r4, r2, #3
 80090f0:	4622      	mov	r2, r4
 80090f2:	462b      	mov	r3, r5
 80090f4:	1814      	adds	r4, r2, r0
 80090f6:	64bc      	str	r4, [r7, #72]	; 0x48
 80090f8:	414b      	adcs	r3, r1
 80090fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80090fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090fe:	685b      	ldr	r3, [r3, #4]
 8009100:	4618      	mov	r0, r3
 8009102:	f04f 0100 	mov.w	r1, #0
 8009106:	f04f 0200 	mov.w	r2, #0
 800910a:	f04f 0300 	mov.w	r3, #0
 800910e:	008b      	lsls	r3, r1, #2
 8009110:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009114:	0082      	lsls	r2, r0, #2
 8009116:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800911a:	f7f7 f8a9 	bl	8000270 <__aeabi_uldivmod>
 800911e:	4602      	mov	r2, r0
 8009120:	460b      	mov	r3, r1
 8009122:	4b2f      	ldr	r3, [pc, #188]	; (80091e0 <UART_SetConfig+0x38c>)
 8009124:	fba3 1302 	umull	r1, r3, r3, r2
 8009128:	095b      	lsrs	r3, r3, #5
 800912a:	2164      	movs	r1, #100	; 0x64
 800912c:	fb01 f303 	mul.w	r3, r1, r3
 8009130:	1ad3      	subs	r3, r2, r3
 8009132:	011b      	lsls	r3, r3, #4
 8009134:	3332      	adds	r3, #50	; 0x32
 8009136:	4a2a      	ldr	r2, [pc, #168]	; (80091e0 <UART_SetConfig+0x38c>)
 8009138:	fba2 2303 	umull	r2, r3, r2, r3
 800913c:	095b      	lsrs	r3, r3, #5
 800913e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009142:	441e      	add	r6, r3
 8009144:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009146:	4618      	mov	r0, r3
 8009148:	f04f 0100 	mov.w	r1, #0
 800914c:	4602      	mov	r2, r0
 800914e:	460b      	mov	r3, r1
 8009150:	1894      	adds	r4, r2, r2
 8009152:	603c      	str	r4, [r7, #0]
 8009154:	415b      	adcs	r3, r3
 8009156:	607b      	str	r3, [r7, #4]
 8009158:	e9d7 2300 	ldrd	r2, r3, [r7]
 800915c:	1812      	adds	r2, r2, r0
 800915e:	eb41 0303 	adc.w	r3, r1, r3
 8009162:	f04f 0400 	mov.w	r4, #0
 8009166:	f04f 0500 	mov.w	r5, #0
 800916a:	00dd      	lsls	r5, r3, #3
 800916c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009170:	00d4      	lsls	r4, r2, #3
 8009172:	4622      	mov	r2, r4
 8009174:	462b      	mov	r3, r5
 8009176:	eb12 0a00 	adds.w	sl, r2, r0
 800917a:	eb43 0b01 	adc.w	fp, r3, r1
 800917e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	4618      	mov	r0, r3
 8009184:	f04f 0100 	mov.w	r1, #0
 8009188:	f04f 0200 	mov.w	r2, #0
 800918c:	f04f 0300 	mov.w	r3, #0
 8009190:	008b      	lsls	r3, r1, #2
 8009192:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009196:	0082      	lsls	r2, r0, #2
 8009198:	4650      	mov	r0, sl
 800919a:	4659      	mov	r1, fp
 800919c:	f7f7 f868 	bl	8000270 <__aeabi_uldivmod>
 80091a0:	4602      	mov	r2, r0
 80091a2:	460b      	mov	r3, r1
 80091a4:	4b0e      	ldr	r3, [pc, #56]	; (80091e0 <UART_SetConfig+0x38c>)
 80091a6:	fba3 1302 	umull	r1, r3, r3, r2
 80091aa:	095b      	lsrs	r3, r3, #5
 80091ac:	2164      	movs	r1, #100	; 0x64
 80091ae:	fb01 f303 	mul.w	r3, r1, r3
 80091b2:	1ad3      	subs	r3, r2, r3
 80091b4:	011b      	lsls	r3, r3, #4
 80091b6:	3332      	adds	r3, #50	; 0x32
 80091b8:	4a09      	ldr	r2, [pc, #36]	; (80091e0 <UART_SetConfig+0x38c>)
 80091ba:	fba2 2303 	umull	r2, r3, r2, r3
 80091be:	095b      	lsrs	r3, r3, #5
 80091c0:	f003 020f 	and.w	r2, r3, #15
 80091c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4432      	add	r2, r6
 80091ca:	609a      	str	r2, [r3, #8]
}
 80091cc:	bf00      	nop
 80091ce:	377c      	adds	r7, #124	; 0x7c
 80091d0:	46bd      	mov	sp, r7
 80091d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091d6:	bf00      	nop
 80091d8:	40011000 	.word	0x40011000
 80091dc:	40011400 	.word	0x40011400
 80091e0:	51eb851f 	.word	0x51eb851f

080091e4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b086      	sub	sp, #24
 80091e8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80091ea:	4b98      	ldr	r3, [pc, #608]	; (800944c <MX_LWIP_Init+0x268>)
 80091ec:	22c0      	movs	r2, #192	; 0xc0
 80091ee:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80091f0:	4b96      	ldr	r3, [pc, #600]	; (800944c <MX_LWIP_Init+0x268>)
 80091f2:	22a8      	movs	r2, #168	; 0xa8
 80091f4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80091f6:	4b95      	ldr	r3, [pc, #596]	; (800944c <MX_LWIP_Init+0x268>)
 80091f8:	2201      	movs	r2, #1
 80091fa:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 177;
 80091fc:	4b93      	ldr	r3, [pc, #588]	; (800944c <MX_LWIP_Init+0x268>)
 80091fe:	22b1      	movs	r2, #177	; 0xb1
 8009200:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8009202:	4b93      	ldr	r3, [pc, #588]	; (8009450 <MX_LWIP_Init+0x26c>)
 8009204:	22ff      	movs	r2, #255	; 0xff
 8009206:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8009208:	4b91      	ldr	r3, [pc, #580]	; (8009450 <MX_LWIP_Init+0x26c>)
 800920a:	22ff      	movs	r2, #255	; 0xff
 800920c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800920e:	4b90      	ldr	r3, [pc, #576]	; (8009450 <MX_LWIP_Init+0x26c>)
 8009210:	22ff      	movs	r2, #255	; 0xff
 8009212:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8009214:	4b8e      	ldr	r3, [pc, #568]	; (8009450 <MX_LWIP_Init+0x26c>)
 8009216:	2200      	movs	r2, #0
 8009218:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800921a:	4b8e      	ldr	r3, [pc, #568]	; (8009454 <MX_LWIP_Init+0x270>)
 800921c:	22c0      	movs	r2, #192	; 0xc0
 800921e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8009220:	4b8c      	ldr	r3, [pc, #560]	; (8009454 <MX_LWIP_Init+0x270>)
 8009222:	22a8      	movs	r2, #168	; 0xa8
 8009224:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8009226:	4b8b      	ldr	r3, [pc, #556]	; (8009454 <MX_LWIP_Init+0x270>)
 8009228:	2201      	movs	r2, #1
 800922a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800922c:	4b89      	ldr	r3, [pc, #548]	; (8009454 <MX_LWIP_Init+0x270>)
 800922e:	2201      	movs	r2, #1
 8009230:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8009232:	2100      	movs	r1, #0
 8009234:	2000      	movs	r0, #0
 8009236:	f005 ff43 	bl	800f0c0 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800923a:	4b84      	ldr	r3, [pc, #528]	; (800944c <MX_LWIP_Init+0x268>)
 800923c:	781b      	ldrb	r3, [r3, #0]
 800923e:	061a      	lsls	r2, r3, #24
 8009240:	4b82      	ldr	r3, [pc, #520]	; (800944c <MX_LWIP_Init+0x268>)
 8009242:	785b      	ldrb	r3, [r3, #1]
 8009244:	041b      	lsls	r3, r3, #16
 8009246:	431a      	orrs	r2, r3
 8009248:	4b80      	ldr	r3, [pc, #512]	; (800944c <MX_LWIP_Init+0x268>)
 800924a:	789b      	ldrb	r3, [r3, #2]
 800924c:	021b      	lsls	r3, r3, #8
 800924e:	4313      	orrs	r3, r2
 8009250:	4a7e      	ldr	r2, [pc, #504]	; (800944c <MX_LWIP_Init+0x268>)
 8009252:	78d2      	ldrb	r2, [r2, #3]
 8009254:	4313      	orrs	r3, r2
 8009256:	061a      	lsls	r2, r3, #24
 8009258:	4b7c      	ldr	r3, [pc, #496]	; (800944c <MX_LWIP_Init+0x268>)
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	0619      	lsls	r1, r3, #24
 800925e:	4b7b      	ldr	r3, [pc, #492]	; (800944c <MX_LWIP_Init+0x268>)
 8009260:	785b      	ldrb	r3, [r3, #1]
 8009262:	041b      	lsls	r3, r3, #16
 8009264:	4319      	orrs	r1, r3
 8009266:	4b79      	ldr	r3, [pc, #484]	; (800944c <MX_LWIP_Init+0x268>)
 8009268:	789b      	ldrb	r3, [r3, #2]
 800926a:	021b      	lsls	r3, r3, #8
 800926c:	430b      	orrs	r3, r1
 800926e:	4977      	ldr	r1, [pc, #476]	; (800944c <MX_LWIP_Init+0x268>)
 8009270:	78c9      	ldrb	r1, [r1, #3]
 8009272:	430b      	orrs	r3, r1
 8009274:	021b      	lsls	r3, r3, #8
 8009276:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800927a:	431a      	orrs	r2, r3
 800927c:	4b73      	ldr	r3, [pc, #460]	; (800944c <MX_LWIP_Init+0x268>)
 800927e:	781b      	ldrb	r3, [r3, #0]
 8009280:	0619      	lsls	r1, r3, #24
 8009282:	4b72      	ldr	r3, [pc, #456]	; (800944c <MX_LWIP_Init+0x268>)
 8009284:	785b      	ldrb	r3, [r3, #1]
 8009286:	041b      	lsls	r3, r3, #16
 8009288:	4319      	orrs	r1, r3
 800928a:	4b70      	ldr	r3, [pc, #448]	; (800944c <MX_LWIP_Init+0x268>)
 800928c:	789b      	ldrb	r3, [r3, #2]
 800928e:	021b      	lsls	r3, r3, #8
 8009290:	430b      	orrs	r3, r1
 8009292:	496e      	ldr	r1, [pc, #440]	; (800944c <MX_LWIP_Init+0x268>)
 8009294:	78c9      	ldrb	r1, [r1, #3]
 8009296:	430b      	orrs	r3, r1
 8009298:	0a1b      	lsrs	r3, r3, #8
 800929a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800929e:	431a      	orrs	r2, r3
 80092a0:	4b6a      	ldr	r3, [pc, #424]	; (800944c <MX_LWIP_Init+0x268>)
 80092a2:	781b      	ldrb	r3, [r3, #0]
 80092a4:	0619      	lsls	r1, r3, #24
 80092a6:	4b69      	ldr	r3, [pc, #420]	; (800944c <MX_LWIP_Init+0x268>)
 80092a8:	785b      	ldrb	r3, [r3, #1]
 80092aa:	041b      	lsls	r3, r3, #16
 80092ac:	4319      	orrs	r1, r3
 80092ae:	4b67      	ldr	r3, [pc, #412]	; (800944c <MX_LWIP_Init+0x268>)
 80092b0:	789b      	ldrb	r3, [r3, #2]
 80092b2:	021b      	lsls	r3, r3, #8
 80092b4:	430b      	orrs	r3, r1
 80092b6:	4965      	ldr	r1, [pc, #404]	; (800944c <MX_LWIP_Init+0x268>)
 80092b8:	78c9      	ldrb	r1, [r1, #3]
 80092ba:	430b      	orrs	r3, r1
 80092bc:	0e1b      	lsrs	r3, r3, #24
 80092be:	4313      	orrs	r3, r2
 80092c0:	4a65      	ldr	r2, [pc, #404]	; (8009458 <MX_LWIP_Init+0x274>)
 80092c2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80092c4:	4b62      	ldr	r3, [pc, #392]	; (8009450 <MX_LWIP_Init+0x26c>)
 80092c6:	781b      	ldrb	r3, [r3, #0]
 80092c8:	061a      	lsls	r2, r3, #24
 80092ca:	4b61      	ldr	r3, [pc, #388]	; (8009450 <MX_LWIP_Init+0x26c>)
 80092cc:	785b      	ldrb	r3, [r3, #1]
 80092ce:	041b      	lsls	r3, r3, #16
 80092d0:	431a      	orrs	r2, r3
 80092d2:	4b5f      	ldr	r3, [pc, #380]	; (8009450 <MX_LWIP_Init+0x26c>)
 80092d4:	789b      	ldrb	r3, [r3, #2]
 80092d6:	021b      	lsls	r3, r3, #8
 80092d8:	4313      	orrs	r3, r2
 80092da:	4a5d      	ldr	r2, [pc, #372]	; (8009450 <MX_LWIP_Init+0x26c>)
 80092dc:	78d2      	ldrb	r2, [r2, #3]
 80092de:	4313      	orrs	r3, r2
 80092e0:	061a      	lsls	r2, r3, #24
 80092e2:	4b5b      	ldr	r3, [pc, #364]	; (8009450 <MX_LWIP_Init+0x26c>)
 80092e4:	781b      	ldrb	r3, [r3, #0]
 80092e6:	0619      	lsls	r1, r3, #24
 80092e8:	4b59      	ldr	r3, [pc, #356]	; (8009450 <MX_LWIP_Init+0x26c>)
 80092ea:	785b      	ldrb	r3, [r3, #1]
 80092ec:	041b      	lsls	r3, r3, #16
 80092ee:	4319      	orrs	r1, r3
 80092f0:	4b57      	ldr	r3, [pc, #348]	; (8009450 <MX_LWIP_Init+0x26c>)
 80092f2:	789b      	ldrb	r3, [r3, #2]
 80092f4:	021b      	lsls	r3, r3, #8
 80092f6:	430b      	orrs	r3, r1
 80092f8:	4955      	ldr	r1, [pc, #340]	; (8009450 <MX_LWIP_Init+0x26c>)
 80092fa:	78c9      	ldrb	r1, [r1, #3]
 80092fc:	430b      	orrs	r3, r1
 80092fe:	021b      	lsls	r3, r3, #8
 8009300:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009304:	431a      	orrs	r2, r3
 8009306:	4b52      	ldr	r3, [pc, #328]	; (8009450 <MX_LWIP_Init+0x26c>)
 8009308:	781b      	ldrb	r3, [r3, #0]
 800930a:	0619      	lsls	r1, r3, #24
 800930c:	4b50      	ldr	r3, [pc, #320]	; (8009450 <MX_LWIP_Init+0x26c>)
 800930e:	785b      	ldrb	r3, [r3, #1]
 8009310:	041b      	lsls	r3, r3, #16
 8009312:	4319      	orrs	r1, r3
 8009314:	4b4e      	ldr	r3, [pc, #312]	; (8009450 <MX_LWIP_Init+0x26c>)
 8009316:	789b      	ldrb	r3, [r3, #2]
 8009318:	021b      	lsls	r3, r3, #8
 800931a:	430b      	orrs	r3, r1
 800931c:	494c      	ldr	r1, [pc, #304]	; (8009450 <MX_LWIP_Init+0x26c>)
 800931e:	78c9      	ldrb	r1, [r1, #3]
 8009320:	430b      	orrs	r3, r1
 8009322:	0a1b      	lsrs	r3, r3, #8
 8009324:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009328:	431a      	orrs	r2, r3
 800932a:	4b49      	ldr	r3, [pc, #292]	; (8009450 <MX_LWIP_Init+0x26c>)
 800932c:	781b      	ldrb	r3, [r3, #0]
 800932e:	0619      	lsls	r1, r3, #24
 8009330:	4b47      	ldr	r3, [pc, #284]	; (8009450 <MX_LWIP_Init+0x26c>)
 8009332:	785b      	ldrb	r3, [r3, #1]
 8009334:	041b      	lsls	r3, r3, #16
 8009336:	4319      	orrs	r1, r3
 8009338:	4b45      	ldr	r3, [pc, #276]	; (8009450 <MX_LWIP_Init+0x26c>)
 800933a:	789b      	ldrb	r3, [r3, #2]
 800933c:	021b      	lsls	r3, r3, #8
 800933e:	430b      	orrs	r3, r1
 8009340:	4943      	ldr	r1, [pc, #268]	; (8009450 <MX_LWIP_Init+0x26c>)
 8009342:	78c9      	ldrb	r1, [r1, #3]
 8009344:	430b      	orrs	r3, r1
 8009346:	0e1b      	lsrs	r3, r3, #24
 8009348:	4313      	orrs	r3, r2
 800934a:	4a44      	ldr	r2, [pc, #272]	; (800945c <MX_LWIP_Init+0x278>)
 800934c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800934e:	4b41      	ldr	r3, [pc, #260]	; (8009454 <MX_LWIP_Init+0x270>)
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	061a      	lsls	r2, r3, #24
 8009354:	4b3f      	ldr	r3, [pc, #252]	; (8009454 <MX_LWIP_Init+0x270>)
 8009356:	785b      	ldrb	r3, [r3, #1]
 8009358:	041b      	lsls	r3, r3, #16
 800935a:	431a      	orrs	r2, r3
 800935c:	4b3d      	ldr	r3, [pc, #244]	; (8009454 <MX_LWIP_Init+0x270>)
 800935e:	789b      	ldrb	r3, [r3, #2]
 8009360:	021b      	lsls	r3, r3, #8
 8009362:	4313      	orrs	r3, r2
 8009364:	4a3b      	ldr	r2, [pc, #236]	; (8009454 <MX_LWIP_Init+0x270>)
 8009366:	78d2      	ldrb	r2, [r2, #3]
 8009368:	4313      	orrs	r3, r2
 800936a:	061a      	lsls	r2, r3, #24
 800936c:	4b39      	ldr	r3, [pc, #228]	; (8009454 <MX_LWIP_Init+0x270>)
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	0619      	lsls	r1, r3, #24
 8009372:	4b38      	ldr	r3, [pc, #224]	; (8009454 <MX_LWIP_Init+0x270>)
 8009374:	785b      	ldrb	r3, [r3, #1]
 8009376:	041b      	lsls	r3, r3, #16
 8009378:	4319      	orrs	r1, r3
 800937a:	4b36      	ldr	r3, [pc, #216]	; (8009454 <MX_LWIP_Init+0x270>)
 800937c:	789b      	ldrb	r3, [r3, #2]
 800937e:	021b      	lsls	r3, r3, #8
 8009380:	430b      	orrs	r3, r1
 8009382:	4934      	ldr	r1, [pc, #208]	; (8009454 <MX_LWIP_Init+0x270>)
 8009384:	78c9      	ldrb	r1, [r1, #3]
 8009386:	430b      	orrs	r3, r1
 8009388:	021b      	lsls	r3, r3, #8
 800938a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800938e:	431a      	orrs	r2, r3
 8009390:	4b30      	ldr	r3, [pc, #192]	; (8009454 <MX_LWIP_Init+0x270>)
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	0619      	lsls	r1, r3, #24
 8009396:	4b2f      	ldr	r3, [pc, #188]	; (8009454 <MX_LWIP_Init+0x270>)
 8009398:	785b      	ldrb	r3, [r3, #1]
 800939a:	041b      	lsls	r3, r3, #16
 800939c:	4319      	orrs	r1, r3
 800939e:	4b2d      	ldr	r3, [pc, #180]	; (8009454 <MX_LWIP_Init+0x270>)
 80093a0:	789b      	ldrb	r3, [r3, #2]
 80093a2:	021b      	lsls	r3, r3, #8
 80093a4:	430b      	orrs	r3, r1
 80093a6:	492b      	ldr	r1, [pc, #172]	; (8009454 <MX_LWIP_Init+0x270>)
 80093a8:	78c9      	ldrb	r1, [r1, #3]
 80093aa:	430b      	orrs	r3, r1
 80093ac:	0a1b      	lsrs	r3, r3, #8
 80093ae:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80093b2:	431a      	orrs	r2, r3
 80093b4:	4b27      	ldr	r3, [pc, #156]	; (8009454 <MX_LWIP_Init+0x270>)
 80093b6:	781b      	ldrb	r3, [r3, #0]
 80093b8:	0619      	lsls	r1, r3, #24
 80093ba:	4b26      	ldr	r3, [pc, #152]	; (8009454 <MX_LWIP_Init+0x270>)
 80093bc:	785b      	ldrb	r3, [r3, #1]
 80093be:	041b      	lsls	r3, r3, #16
 80093c0:	4319      	orrs	r1, r3
 80093c2:	4b24      	ldr	r3, [pc, #144]	; (8009454 <MX_LWIP_Init+0x270>)
 80093c4:	789b      	ldrb	r3, [r3, #2]
 80093c6:	021b      	lsls	r3, r3, #8
 80093c8:	430b      	orrs	r3, r1
 80093ca:	4922      	ldr	r1, [pc, #136]	; (8009454 <MX_LWIP_Init+0x270>)
 80093cc:	78c9      	ldrb	r1, [r1, #3]
 80093ce:	430b      	orrs	r3, r1
 80093d0:	0e1b      	lsrs	r3, r3, #24
 80093d2:	4313      	orrs	r3, r2
 80093d4:	4a22      	ldr	r2, [pc, #136]	; (8009460 <MX_LWIP_Init+0x27c>)
 80093d6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80093d8:	4b22      	ldr	r3, [pc, #136]	; (8009464 <MX_LWIP_Init+0x280>)
 80093da:	9302      	str	r3, [sp, #8]
 80093dc:	4b22      	ldr	r3, [pc, #136]	; (8009468 <MX_LWIP_Init+0x284>)
 80093de:	9301      	str	r3, [sp, #4]
 80093e0:	2300      	movs	r3, #0
 80093e2:	9300      	str	r3, [sp, #0]
 80093e4:	4b1e      	ldr	r3, [pc, #120]	; (8009460 <MX_LWIP_Init+0x27c>)
 80093e6:	4a1d      	ldr	r2, [pc, #116]	; (800945c <MX_LWIP_Init+0x278>)
 80093e8:	491b      	ldr	r1, [pc, #108]	; (8009458 <MX_LWIP_Init+0x274>)
 80093ea:	4820      	ldr	r0, [pc, #128]	; (800946c <MX_LWIP_Init+0x288>)
 80093ec:	f006 fbec 	bl	800fbc8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80093f0:	481e      	ldr	r0, [pc, #120]	; (800946c <MX_LWIP_Init+0x288>)
 80093f2:	f006 fd9b 	bl	800ff2c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80093f6:	4b1d      	ldr	r3, [pc, #116]	; (800946c <MX_LWIP_Init+0x288>)
 80093f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80093fc:	089b      	lsrs	r3, r3, #2
 80093fe:	f003 0301 	and.w	r3, r3, #1
 8009402:	b2db      	uxtb	r3, r3
 8009404:	2b00      	cmp	r3, #0
 8009406:	d003      	beq.n	8009410 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8009408:	4818      	ldr	r0, [pc, #96]	; (800946c <MX_LWIP_Init+0x288>)
 800940a:	f006 fd9f 	bl	800ff4c <netif_set_up>
 800940e:	e002      	b.n	8009416 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8009410:	4816      	ldr	r0, [pc, #88]	; (800946c <MX_LWIP_Init+0x288>)
 8009412:	f006 fe07 	bl	8010024 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 8009416:	4916      	ldr	r1, [pc, #88]	; (8009470 <MX_LWIP_Init+0x28c>)
 8009418:	4814      	ldr	r0, [pc, #80]	; (800946c <MX_LWIP_Init+0x288>)
 800941a:	f006 fe35 	bl	8010088 <netif_set_link_callback>

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(Netif_SEM);
 800941e:	2300      	movs	r3, #0
 8009420:	603b      	str	r3, [r7, #0]
 8009422:	2300      	movs	r3, #0
 8009424:	607b      	str	r3, [r7, #4]
  Netif_LinkSemaphore = osSemaphoreCreate(osSemaphore(Netif_SEM) , 1 );
 8009426:	463b      	mov	r3, r7
 8009428:	2101      	movs	r1, #1
 800942a:	4618      	mov	r0, r3
 800942c:	f000 fd36 	bl	8009e9c <osSemaphoreCreate>
 8009430:	4603      	mov	r3, r0
 8009432:	4a10      	ldr	r2, [pc, #64]	; (8009474 <MX_LWIP_Init+0x290>)
 8009434:	6013      	str	r3, [r2, #0]

  link_arg.netif = &gnetif;
 8009436:	4b10      	ldr	r3, [pc, #64]	; (8009478 <MX_LWIP_Init+0x294>)
 8009438:	4a0c      	ldr	r2, [pc, #48]	; (800946c <MX_LWIP_Init+0x288>)
 800943a:	601a      	str	r2, [r3, #0]
  link_arg.semaphore = Netif_LinkSemaphore;
 800943c:	4b0d      	ldr	r3, [pc, #52]	; (8009474 <MX_LWIP_Init+0x290>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a0d      	ldr	r2, [pc, #52]	; (8009478 <MX_LWIP_Init+0x294>)
 8009442:	6053      	str	r3, [r2, #4]
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8009444:	bf00      	nop
 8009446:	3708      	adds	r7, #8
 8009448:	46bd      	mov	sp, r7
 800944a:	bd80      	pop	{r7, pc}
 800944c:	200074f8 	.word	0x200074f8
 8009450:	200074f4 	.word	0x200074f4
 8009454:	200074b8 	.word	0x200074b8
 8009458:	200074f0 	.word	0x200074f0
 800945c:	200074fc 	.word	0x200074fc
 8009460:	20007500 	.word	0x20007500
 8009464:	0800efd1 	.word	0x0800efd1
 8009468:	08009aa9 	.word	0x08009aa9
 800946c:	200074bc 	.word	0x200074bc
 8009470:	08009b15 	.word	0x08009b15
 8009474:	200004d4 	.word	0x200004d4
 8009478:	200074b0 	.word	0x200074b0

0800947c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b08e      	sub	sp, #56	; 0x38
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009484:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009488:	2200      	movs	r2, #0
 800948a:	601a      	str	r2, [r3, #0]
 800948c:	605a      	str	r2, [r3, #4]
 800948e:	609a      	str	r2, [r3, #8]
 8009490:	60da      	str	r2, [r3, #12]
 8009492:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a4a      	ldr	r2, [pc, #296]	; (80095c4 <HAL_ETH_MspInit+0x148>)
 800949a:	4293      	cmp	r3, r2
 800949c:	f040 808d 	bne.w	80095ba <HAL_ETH_MspInit+0x13e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80094a0:	2300      	movs	r3, #0
 80094a2:	623b      	str	r3, [r7, #32]
 80094a4:	4b48      	ldr	r3, [pc, #288]	; (80095c8 <HAL_ETH_MspInit+0x14c>)
 80094a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a8:	4a47      	ldr	r2, [pc, #284]	; (80095c8 <HAL_ETH_MspInit+0x14c>)
 80094aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80094ae:	6313      	str	r3, [r2, #48]	; 0x30
 80094b0:	4b45      	ldr	r3, [pc, #276]	; (80095c8 <HAL_ETH_MspInit+0x14c>)
 80094b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094b8:	623b      	str	r3, [r7, #32]
 80094ba:	6a3b      	ldr	r3, [r7, #32]
 80094bc:	2300      	movs	r3, #0
 80094be:	61fb      	str	r3, [r7, #28]
 80094c0:	4b41      	ldr	r3, [pc, #260]	; (80095c8 <HAL_ETH_MspInit+0x14c>)
 80094c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094c4:	4a40      	ldr	r2, [pc, #256]	; (80095c8 <HAL_ETH_MspInit+0x14c>)
 80094c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80094ca:	6313      	str	r3, [r2, #48]	; 0x30
 80094cc:	4b3e      	ldr	r3, [pc, #248]	; (80095c8 <HAL_ETH_MspInit+0x14c>)
 80094ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80094d4:	61fb      	str	r3, [r7, #28]
 80094d6:	69fb      	ldr	r3, [r7, #28]
 80094d8:	2300      	movs	r3, #0
 80094da:	61bb      	str	r3, [r7, #24]
 80094dc:	4b3a      	ldr	r3, [pc, #232]	; (80095c8 <HAL_ETH_MspInit+0x14c>)
 80094de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094e0:	4a39      	ldr	r2, [pc, #228]	; (80095c8 <HAL_ETH_MspInit+0x14c>)
 80094e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80094e6:	6313      	str	r3, [r2, #48]	; 0x30
 80094e8:	4b37      	ldr	r3, [pc, #220]	; (80095c8 <HAL_ETH_MspInit+0x14c>)
 80094ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094f0:	61bb      	str	r3, [r7, #24]
 80094f2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80094f4:	2300      	movs	r3, #0
 80094f6:	617b      	str	r3, [r7, #20]
 80094f8:	4b33      	ldr	r3, [pc, #204]	; (80095c8 <HAL_ETH_MspInit+0x14c>)
 80094fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094fc:	4a32      	ldr	r2, [pc, #200]	; (80095c8 <HAL_ETH_MspInit+0x14c>)
 80094fe:	f043 0304 	orr.w	r3, r3, #4
 8009502:	6313      	str	r3, [r2, #48]	; 0x30
 8009504:	4b30      	ldr	r3, [pc, #192]	; (80095c8 <HAL_ETH_MspInit+0x14c>)
 8009506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009508:	f003 0304 	and.w	r3, r3, #4
 800950c:	617b      	str	r3, [r7, #20]
 800950e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009510:	2300      	movs	r3, #0
 8009512:	613b      	str	r3, [r7, #16]
 8009514:	4b2c      	ldr	r3, [pc, #176]	; (80095c8 <HAL_ETH_MspInit+0x14c>)
 8009516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009518:	4a2b      	ldr	r2, [pc, #172]	; (80095c8 <HAL_ETH_MspInit+0x14c>)
 800951a:	f043 0301 	orr.w	r3, r3, #1
 800951e:	6313      	str	r3, [r2, #48]	; 0x30
 8009520:	4b29      	ldr	r3, [pc, #164]	; (80095c8 <HAL_ETH_MspInit+0x14c>)
 8009522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009524:	f003 0301 	and.w	r3, r3, #1
 8009528:	613b      	str	r3, [r7, #16]
 800952a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800952c:	2300      	movs	r3, #0
 800952e:	60fb      	str	r3, [r7, #12]
 8009530:	4b25      	ldr	r3, [pc, #148]	; (80095c8 <HAL_ETH_MspInit+0x14c>)
 8009532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009534:	4a24      	ldr	r2, [pc, #144]	; (80095c8 <HAL_ETH_MspInit+0x14c>)
 8009536:	f043 0302 	orr.w	r3, r3, #2
 800953a:	6313      	str	r3, [r2, #48]	; 0x30
 800953c:	4b22      	ldr	r3, [pc, #136]	; (80095c8 <HAL_ETH_MspInit+0x14c>)
 800953e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009540:	f003 0302 	and.w	r3, r3, #2
 8009544:	60fb      	str	r3, [r7, #12]
 8009546:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8009548:	2332      	movs	r3, #50	; 0x32
 800954a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800954c:	2302      	movs	r3, #2
 800954e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009550:	2300      	movs	r3, #0
 8009552:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009554:	2303      	movs	r3, #3
 8009556:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009558:	230b      	movs	r3, #11
 800955a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800955c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009560:	4619      	mov	r1, r3
 8009562:	481a      	ldr	r0, [pc, #104]	; (80095cc <HAL_ETH_MspInit+0x150>)
 8009564:	f7fc fb78 	bl	8005c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8009568:	2386      	movs	r3, #134	; 0x86
 800956a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800956c:	2302      	movs	r3, #2
 800956e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009570:	2300      	movs	r3, #0
 8009572:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009574:	2303      	movs	r3, #3
 8009576:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009578:	230b      	movs	r3, #11
 800957a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800957c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009580:	4619      	mov	r1, r3
 8009582:	4813      	ldr	r0, [pc, #76]	; (80095d0 <HAL_ETH_MspInit+0x154>)
 8009584:	f7fc fb68 	bl	8005c58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8009588:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800958c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800958e:	2302      	movs	r3, #2
 8009590:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009592:	2300      	movs	r3, #0
 8009594:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009596:	2303      	movs	r3, #3
 8009598:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800959a:	230b      	movs	r3, #11
 800959c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800959e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095a2:	4619      	mov	r1, r3
 80095a4:	480b      	ldr	r0, [pc, #44]	; (80095d4 <HAL_ETH_MspInit+0x158>)
 80095a6:	f7fc fb57 	bl	8005c58 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80095aa:	2200      	movs	r2, #0
 80095ac:	2105      	movs	r1, #5
 80095ae:	203d      	movs	r0, #61	; 0x3d
 80095b0:	f7fa fd80 	bl	80040b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80095b4:	203d      	movs	r0, #61	; 0x3d
 80095b6:	f7fa fd99 	bl	80040ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80095ba:	bf00      	nop
 80095bc:	3738      	adds	r7, #56	; 0x38
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	40028000 	.word	0x40028000
 80095c8:	40023800 	.word	0x40023800
 80095cc:	40020800 	.word	0x40020800
 80095d0:	40020000 	.word	0x40020000
 80095d4:	40020400 	.word	0x40020400

080095d8 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80095e0:	4b04      	ldr	r3, [pc, #16]	; (80095f4 <HAL_ETH_RxCpltCallback+0x1c>)
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	4618      	mov	r0, r3
 80095e6:	f000 fcd9 	bl	8009f9c <osSemaphoreRelease>
}
 80095ea:	bf00      	nop
 80095ec:	3708      	adds	r7, #8
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}
 80095f2:	bf00      	nop
 80095f4:	200004d8 	.word	0x200004d8

080095f8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80095f8:	b5b0      	push	{r4, r5, r7, lr}
 80095fa:	b090      	sub	sp, #64	; 0x40
 80095fc:	af00      	add	r7, sp, #0
 80095fe:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8009600:	2300      	movs	r3, #0
 8009602:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009604:	4b5f      	ldr	r3, [pc, #380]	; (8009784 <low_level_init+0x18c>)
 8009606:	4a60      	ldr	r2, [pc, #384]	; (8009788 <low_level_init+0x190>)
 8009608:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_DISABLE;
 800960a:	4b5e      	ldr	r3, [pc, #376]	; (8009784 <low_level_init+0x18c>)
 800960c:	2200      	movs	r2, #0
 800960e:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8009610:	4b5c      	ldr	r3, [pc, #368]	; (8009784 <low_level_init+0x18c>)
 8009612:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009616:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8009618:	4b5a      	ldr	r3, [pc, #360]	; (8009784 <low_level_init+0x18c>)
 800961a:	2200      	movs	r2, #0
 800961c:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 800961e:	4b59      	ldr	r3, [pc, #356]	; (8009784 <low_level_init+0x18c>)
 8009620:	2200      	movs	r2, #0
 8009622:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8009624:	2300      	movs	r3, #0
 8009626:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800962a:	2380      	movs	r3, #128	; 0x80
 800962c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8009630:	23e1      	movs	r3, #225	; 0xe1
 8009632:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8009636:	2300      	movs	r3, #0
 8009638:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800963c:	2300      	movs	r3, #0
 800963e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8009642:	2300      	movs	r3, #0
 8009644:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8009648:	4a4e      	ldr	r2, [pc, #312]	; (8009784 <low_level_init+0x18c>)
 800964a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800964e:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8009650:	4b4c      	ldr	r3, [pc, #304]	; (8009784 <low_level_init+0x18c>)
 8009652:	2201      	movs	r2, #1
 8009654:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8009656:	4b4b      	ldr	r3, [pc, #300]	; (8009784 <low_level_init+0x18c>)
 8009658:	2200      	movs	r2, #0
 800965a:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800965c:	4b49      	ldr	r3, [pc, #292]	; (8009784 <low_level_init+0x18c>)
 800965e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8009662:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8009664:	4847      	ldr	r0, [pc, #284]	; (8009784 <low_level_init+0x18c>)
 8009666:	f7fb f951 	bl	800490c <HAL_ETH_Init>
 800966a:	4603      	mov	r3, r0
 800966c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8009670:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009674:	2b00      	cmp	r3, #0
 8009676:	d108      	bne.n	800968a <low_level_init+0x92>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800967e:	f043 0304 	orr.w	r3, r3, #4
 8009682:	b2da      	uxtb	r2, r3
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800968a:	2304      	movs	r3, #4
 800968c:	4a3f      	ldr	r2, [pc, #252]	; (800978c <low_level_init+0x194>)
 800968e:	4940      	ldr	r1, [pc, #256]	; (8009790 <low_level_init+0x198>)
 8009690:	483c      	ldr	r0, [pc, #240]	; (8009784 <low_level_init+0x18c>)
 8009692:	f7fb fad7 	bl	8004c44 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8009696:	2304      	movs	r3, #4
 8009698:	4a3e      	ldr	r2, [pc, #248]	; (8009794 <low_level_init+0x19c>)
 800969a:	493f      	ldr	r1, [pc, #252]	; (8009798 <low_level_init+0x1a0>)
 800969c:	4839      	ldr	r0, [pc, #228]	; (8009784 <low_level_init+0x18c>)
 800969e:	f7fb fb3a 	bl	8004d16 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2206      	movs	r2, #6
 80096a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80096aa:	4b36      	ldr	r3, [pc, #216]	; (8009784 <low_level_init+0x18c>)
 80096ac:	695b      	ldr	r3, [r3, #20]
 80096ae:	781a      	ldrb	r2, [r3, #0]
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80096b6:	4b33      	ldr	r3, [pc, #204]	; (8009784 <low_level_init+0x18c>)
 80096b8:	695b      	ldr	r3, [r3, #20]
 80096ba:	785a      	ldrb	r2, [r3, #1]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80096c2:	4b30      	ldr	r3, [pc, #192]	; (8009784 <low_level_init+0x18c>)
 80096c4:	695b      	ldr	r3, [r3, #20]
 80096c6:	789a      	ldrb	r2, [r3, #2]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80096ce:	4b2d      	ldr	r3, [pc, #180]	; (8009784 <low_level_init+0x18c>)
 80096d0:	695b      	ldr	r3, [r3, #20]
 80096d2:	78da      	ldrb	r2, [r3, #3]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80096da:	4b2a      	ldr	r3, [pc, #168]	; (8009784 <low_level_init+0x18c>)
 80096dc:	695b      	ldr	r3, [r3, #20]
 80096de:	791a      	ldrb	r2, [r3, #4]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80096e6:	4b27      	ldr	r3, [pc, #156]	; (8009784 <low_level_init+0x18c>)
 80096e8:	695b      	ldr	r3, [r3, #20]
 80096ea:	795a      	ldrb	r2, [r3, #5]
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80096f8:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009700:	f043 030a 	orr.w	r3, r3, #10
 8009704:	b2da      	uxtb	r2, r3
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 800970c:	2300      	movs	r3, #0
 800970e:	62bb      	str	r3, [r7, #40]	; 0x28
 8009710:	2300      	movs	r3, #0
 8009712:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8009714:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8009718:	2101      	movs	r1, #1
 800971a:	4618      	mov	r0, r3
 800971c:	f000 fbbe 	bl	8009e9c <osSemaphoreCreate>
 8009720:	4603      	mov	r3, r0
 8009722:	4a1e      	ldr	r2, [pc, #120]	; (800979c <low_level_init+0x1a4>)
 8009724:	6013      	str	r3, [r2, #0]

/* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8009726:	4b1e      	ldr	r3, [pc, #120]	; (80097a0 <low_level_init+0x1a8>)
 8009728:	f107 040c 	add.w	r4, r7, #12
 800972c:	461d      	mov	r5, r3
 800972e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009730:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009732:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009736:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800973a:	f107 030c 	add.w	r3, r7, #12
 800973e:	6879      	ldr	r1, [r7, #4]
 8009740:	4618      	mov	r0, r3
 8009742:	f000 faae 	bl	8009ca2 <osThreadCreate>
/* USER CODE END OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8009746:	480f      	ldr	r0, [pc, #60]	; (8009784 <low_level_init+0x18c>)
 8009748:	f7fb fe0d 	bl	8005366 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800974c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009750:	461a      	mov	r2, r3
 8009752:	211d      	movs	r1, #29
 8009754:	480b      	ldr	r0, [pc, #44]	; (8009784 <low_level_init+0x18c>)
 8009756:	f7fb fd38 	bl	80051ca <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800975a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800975c:	f043 030b 	orr.w	r3, r3, #11
 8009760:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8009762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009764:	461a      	mov	r2, r3
 8009766:	211d      	movs	r1, #29
 8009768:	4806      	ldr	r0, [pc, #24]	; (8009784 <low_level_init+0x18c>)
 800976a:	f7fb fd96 	bl	800529a <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800976e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8009772:	461a      	mov	r2, r3
 8009774:	211d      	movs	r1, #29
 8009776:	4803      	ldr	r0, [pc, #12]	; (8009784 <low_level_init+0x18c>)
 8009778:	f7fb fd27 	bl	80051ca <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800977c:	bf00      	nop
 800977e:	3740      	adds	r7, #64	; 0x40
 8009780:	46bd      	mov	sp, r7
 8009782:	bdb0      	pop	{r4, r5, r7, pc}
 8009784:	20008dd4 	.word	0x20008dd4
 8009788:	40028000 	.word	0x40028000
 800978c:	20008e1c 	.word	0x20008e1c
 8009790:	20007504 	.word	0x20007504
 8009794:	20007584 	.word	0x20007584
 8009798:	20008d54 	.word	0x20008d54
 800979c:	200004d8 	.word	0x200004d8
 80097a0:	0801b8bc 	.word	0x0801b8bc

080097a4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b08a      	sub	sp, #40	; 0x28
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]
 80097ac:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80097ae:	4b4b      	ldr	r3, [pc, #300]	; (80098dc <low_level_output+0x138>)
 80097b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097b2:	689b      	ldr	r3, [r3, #8]
 80097b4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80097b6:	2300      	movs	r3, #0
 80097b8:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80097ba:	2300      	movs	r3, #0
 80097bc:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80097be:	2300      	movs	r3, #0
 80097c0:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80097c2:	2300      	movs	r3, #0
 80097c4:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80097c6:	4b45      	ldr	r3, [pc, #276]	; (80098dc <low_level_output+0x138>)
 80097c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097ca:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80097cc:	2300      	movs	r3, #0
 80097ce:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	623b      	str	r3, [r7, #32]
 80097d4:	e05a      	b.n	800988c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80097d6:	69bb      	ldr	r3, [r7, #24]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	da03      	bge.n	80097e6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80097de:	23f8      	movs	r3, #248	; 0xf8
 80097e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80097e4:	e05c      	b.n	80098a0 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80097e6:	6a3b      	ldr	r3, [r7, #32]
 80097e8:	895b      	ldrh	r3, [r3, #10]
 80097ea:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80097ec:	2300      	movs	r3, #0
 80097ee:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80097f0:	e02f      	b.n	8009852 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80097f2:	69fa      	ldr	r2, [r7, #28]
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	18d0      	adds	r0, r2, r3
 80097f8:	6a3b      	ldr	r3, [r7, #32]
 80097fa:	685a      	ldr	r2, [r3, #4]
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	18d1      	adds	r1, r2, r3
 8009800:	693b      	ldr	r3, [r7, #16]
 8009802:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8009806:	3304      	adds	r3, #4
 8009808:	461a      	mov	r2, r3
 800980a:	f010 fe83 	bl	801a514 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 800980e:	69bb      	ldr	r3, [r7, #24]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8009814:	69bb      	ldr	r3, [r7, #24]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	2b00      	cmp	r3, #0
 800981a:	da03      	bge.n	8009824 <low_level_output+0x80>
        {
          errval = ERR_USE;
 800981c:	23f8      	movs	r3, #248	; 0xf8
 800981e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8009822:	e03d      	b.n	80098a0 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8009824:	69bb      	ldr	r3, [r7, #24]
 8009826:	689b      	ldr	r3, [r3, #8]
 8009828:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800982a:	693a      	ldr	r2, [r7, #16]
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	4413      	add	r3, r2
 8009830:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8009834:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8009836:	68ba      	ldr	r2, [r7, #8]
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	1ad3      	subs	r3, r2, r3
 800983c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009840:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8009842:	697a      	ldr	r2, [r7, #20]
 8009844:	693b      	ldr	r3, [r7, #16]
 8009846:	1ad3      	subs	r3, r2, r3
 8009848:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800984c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 800984e:	2300      	movs	r3, #0
 8009850:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8009852:	68fa      	ldr	r2, [r7, #12]
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	4413      	add	r3, r2
 8009858:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800985c:	4293      	cmp	r3, r2
 800985e:	d8c8      	bhi.n	80097f2 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8009860:	69fa      	ldr	r2, [r7, #28]
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	18d0      	adds	r0, r2, r3
 8009866:	6a3b      	ldr	r3, [r7, #32]
 8009868:	685a      	ldr	r2, [r3, #4]
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	4413      	add	r3, r2
 800986e:	68fa      	ldr	r2, [r7, #12]
 8009870:	4619      	mov	r1, r3
 8009872:	f010 fe4f 	bl	801a514 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8009876:	693a      	ldr	r2, [r7, #16]
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	4413      	add	r3, r2
 800987c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 800987e:	697a      	ldr	r2, [r7, #20]
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	4413      	add	r3, r2
 8009884:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8009886:	6a3b      	ldr	r3, [r7, #32]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	623b      	str	r3, [r7, #32]
 800988c:	6a3b      	ldr	r3, [r7, #32]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d1a1      	bne.n	80097d6 <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8009892:	6979      	ldr	r1, [r7, #20]
 8009894:	4811      	ldr	r0, [pc, #68]	; (80098dc <low_level_output+0x138>)
 8009896:	f7fb faab 	bl	8004df0 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800989a:	2300      	movs	r3, #0
 800989c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80098a0:	4b0e      	ldr	r3, [pc, #56]	; (80098dc <low_level_output+0x138>)
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098a8:	3314      	adds	r3, #20
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	f003 0320 	and.w	r3, r3, #32
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d00d      	beq.n	80098d0 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80098b4:	4b09      	ldr	r3, [pc, #36]	; (80098dc <low_level_output+0x138>)
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098bc:	3314      	adds	r3, #20
 80098be:	2220      	movs	r2, #32
 80098c0:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80098c2:	4b06      	ldr	r3, [pc, #24]	; (80098dc <low_level_output+0x138>)
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80098ca:	3304      	adds	r3, #4
 80098cc:	2200      	movs	r2, #0
 80098ce:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80098d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80098d4:	4618      	mov	r0, r3
 80098d6:	3728      	adds	r7, #40	; 0x28
 80098d8:	46bd      	mov	sp, r7
 80098da:	bd80      	pop	{r7, pc}
 80098dc:	20008dd4 	.word	0x20008dd4

080098e0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b08c      	sub	sp, #48	; 0x30
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80098e8:	2300      	movs	r3, #0
 80098ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80098ec:	2300      	movs	r3, #0
 80098ee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80098f0:	2300      	movs	r3, #0
 80098f2:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80098f4:	2300      	movs	r3, #0
 80098f6:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80098f8:	2300      	movs	r3, #0
 80098fa:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80098fc:	2300      	movs	r3, #0
 80098fe:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8009900:	2300      	movs	r3, #0
 8009902:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8009904:	484f      	ldr	r0, [pc, #316]	; (8009a44 <low_level_input+0x164>)
 8009906:	f7fb fb5d 	bl	8004fc4 <HAL_ETH_GetReceivedFrame_IT>
 800990a:	4603      	mov	r3, r0
 800990c:	2b00      	cmp	r3, #0
 800990e:	d001      	beq.n	8009914 <low_level_input+0x34>

    return NULL;
 8009910:	2300      	movs	r3, #0
 8009912:	e092      	b.n	8009a3a <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8009914:	4b4b      	ldr	r3, [pc, #300]	; (8009a44 <low_level_input+0x164>)
 8009916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009918:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800991a:	4b4a      	ldr	r3, [pc, #296]	; (8009a44 <low_level_input+0x164>)
 800991c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800991e:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8009920:	89fb      	ldrh	r3, [r7, #14]
 8009922:	2b00      	cmp	r3, #0
 8009924:	d007      	beq.n	8009936 <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8009926:	89fb      	ldrh	r3, [r7, #14]
 8009928:	f44f 72c1 	mov.w	r2, #386	; 0x182
 800992c:	4619      	mov	r1, r3
 800992e:	2000      	movs	r0, #0
 8009930:	f006 fc74 	bl	801021c <pbuf_alloc>
 8009934:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8009936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009938:	2b00      	cmp	r3, #0
 800993a:	d04b      	beq.n	80099d4 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800993c:	4b41      	ldr	r3, [pc, #260]	; (8009a44 <low_level_input+0x164>)
 800993e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009940:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8009942:	2300      	movs	r3, #0
 8009944:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8009946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009948:	62bb      	str	r3, [r7, #40]	; 0x28
 800994a:	e040      	b.n	80099ce <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 800994c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994e:	895b      	ldrh	r3, [r3, #10]
 8009950:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8009952:	2300      	movs	r3, #0
 8009954:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8009956:	e021      	b.n	800999c <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8009958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800995a:	685a      	ldr	r2, [r3, #4]
 800995c:	69bb      	ldr	r3, [r7, #24]
 800995e:	18d0      	adds	r0, r2, r3
 8009960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009962:	69fb      	ldr	r3, [r7, #28]
 8009964:	18d1      	adds	r1, r2, r3
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800996c:	3304      	adds	r3, #4
 800996e:	461a      	mov	r2, r3
 8009970:	f010 fdd0 	bl	801a514 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8009974:	6a3b      	ldr	r3, [r7, #32]
 8009976:	68db      	ldr	r3, [r3, #12]
 8009978:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800997a:	6a3b      	ldr	r3, [r7, #32]
 800997c:	689b      	ldr	r3, [r3, #8]
 800997e:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8009980:	69fa      	ldr	r2, [r7, #28]
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	4413      	add	r3, r2
 8009986:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800998a:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800998c:	69ba      	ldr	r2, [r7, #24]
 800998e:	69fb      	ldr	r3, [r7, #28]
 8009990:	1ad3      	subs	r3, r2, r3
 8009992:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009996:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8009998:	2300      	movs	r3, #0
 800999a:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800999c:	697a      	ldr	r2, [r7, #20]
 800999e:	69fb      	ldr	r3, [r7, #28]
 80099a0:	4413      	add	r3, r2
 80099a2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d8d6      	bhi.n	8009958 <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80099aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ac:	685a      	ldr	r2, [r3, #4]
 80099ae:	69bb      	ldr	r3, [r7, #24]
 80099b0:	18d0      	adds	r0, r2, r3
 80099b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099b4:	69fb      	ldr	r3, [r7, #28]
 80099b6:	4413      	add	r3, r2
 80099b8:	697a      	ldr	r2, [r7, #20]
 80099ba:	4619      	mov	r1, r3
 80099bc:	f010 fdaa 	bl	801a514 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80099c0:	69fa      	ldr	r2, [r7, #28]
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	4413      	add	r3, r2
 80099c6:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80099c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80099ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1bb      	bne.n	800994c <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80099d4:	4b1b      	ldr	r3, [pc, #108]	; (8009a44 <low_level_input+0x164>)
 80099d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099d8:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80099da:	2300      	movs	r3, #0
 80099dc:	613b      	str	r3, [r7, #16]
 80099de:	e00b      	b.n	80099f8 <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80099e0:	6a3b      	ldr	r3, [r7, #32]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80099e8:	6a3b      	ldr	r3, [r7, #32]
 80099ea:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80099ec:	6a3b      	ldr	r3, [r7, #32]
 80099ee:	68db      	ldr	r3, [r3, #12]
 80099f0:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	3301      	adds	r3, #1
 80099f6:	613b      	str	r3, [r7, #16]
 80099f8:	4b12      	ldr	r3, [pc, #72]	; (8009a44 <low_level_input+0x164>)
 80099fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099fc:	693a      	ldr	r2, [r7, #16]
 80099fe:	429a      	cmp	r2, r3
 8009a00:	d3ee      	bcc.n	80099e0 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8009a02:	4b10      	ldr	r3, [pc, #64]	; (8009a44 <low_level_input+0x164>)
 8009a04:	2200      	movs	r2, #0
 8009a06:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8009a08:	4b0e      	ldr	r3, [pc, #56]	; (8009a44 <low_level_input+0x164>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a10:	3314      	adds	r3, #20
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d00d      	beq.n	8009a38 <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8009a1c:	4b09      	ldr	r3, [pc, #36]	; (8009a44 <low_level_input+0x164>)
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a24:	3314      	adds	r3, #20
 8009a26:	2280      	movs	r2, #128	; 0x80
 8009a28:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8009a2a:	4b06      	ldr	r3, [pc, #24]	; (8009a44 <low_level_input+0x164>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a32:	3308      	adds	r3, #8
 8009a34:	2200      	movs	r2, #0
 8009a36:	601a      	str	r2, [r3, #0]
  }
  return p;
 8009a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009a3a:	4618      	mov	r0, r3
 8009a3c:	3730      	adds	r7, #48	; 0x30
 8009a3e:	46bd      	mov	sp, r7
 8009a40:	bd80      	pop	{r7, pc}
 8009a42:	bf00      	nop
 8009a44:	20008dd4 	.word	0x20008dd4

08009a48 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b084      	sub	sp, #16
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	60fb      	str	r3, [r7, #12]

  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009a54:	4b12      	ldr	r3, [pc, #72]	; (8009aa0 <ethernetif_input+0x58>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	f04f 31ff 	mov.w	r1, #4294967295
 8009a5c:	4618      	mov	r0, r3
 8009a5e:	f000 fa4f 	bl	8009f00 <osSemaphoreWait>
 8009a62:	4603      	mov	r3, r0
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d1f5      	bne.n	8009a54 <ethernetif_input+0xc>
    {
      do
      {
        LOCK_TCPIP_CORE();
 8009a68:	480e      	ldr	r0, [pc, #56]	; (8009aa4 <ethernetif_input+0x5c>)
 8009a6a:	f010 fbc3 	bl	801a1f4 <sys_mutex_lock>
        p = low_level_input( netif );
 8009a6e:	68f8      	ldr	r0, [r7, #12]
 8009a70:	f7ff ff36 	bl	80098e0 <low_level_input>
 8009a74:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d00a      	beq.n	8009a92 <ethernetif_input+0x4a>
        {
          if (netif->input( p, netif) != ERR_OK )
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	691b      	ldr	r3, [r3, #16]
 8009a80:	68f9      	ldr	r1, [r7, #12]
 8009a82:	68b8      	ldr	r0, [r7, #8]
 8009a84:	4798      	blx	r3
 8009a86:	4603      	mov	r3, r0
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	d002      	beq.n	8009a92 <ethernetif_input+0x4a>
          {
            pbuf_free(p);
 8009a8c:	68b8      	ldr	r0, [r7, #8]
 8009a8e:	f006 fea9 	bl	80107e4 <pbuf_free>
          }
        }
        UNLOCK_TCPIP_CORE();
 8009a92:	4804      	ldr	r0, [pc, #16]	; (8009aa4 <ethernetif_input+0x5c>)
 8009a94:	f010 fbbd 	bl	801a212 <sys_mutex_unlock>
      } while(p!=NULL);
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d1e4      	bne.n	8009a68 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009a9e:	e7d9      	b.n	8009a54 <ethernetif_input+0xc>
 8009aa0:	200004d8 	.word	0x200004d8
 8009aa4:	2000a62c 	.word	0x2000a62c

08009aa8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d106      	bne.n	8009ac4 <ethernetif_init+0x1c>
 8009ab6:	4b0e      	ldr	r3, [pc, #56]	; (8009af0 <ethernetif_init+0x48>)
 8009ab8:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8009abc:	490d      	ldr	r1, [pc, #52]	; (8009af4 <ethernetif_init+0x4c>)
 8009abe:	480e      	ldr	r0, [pc, #56]	; (8009af8 <ethernetif_init+0x50>)
 8009ac0:	f010 fe02 	bl	801a6c8 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2273      	movs	r2, #115	; 0x73
 8009ac8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2274      	movs	r2, #116	; 0x74
 8009ad0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	4a09      	ldr	r2, [pc, #36]	; (8009afc <ethernetif_init+0x54>)
 8009ad8:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	4a08      	ldr	r2, [pc, #32]	; (8009b00 <ethernetif_init+0x58>)
 8009ade:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009ae0:	6878      	ldr	r0, [r7, #4]
 8009ae2:	f7ff fd89 	bl	80095f8 <low_level_init>

  return ERR_OK;
 8009ae6:	2300      	movs	r3, #0
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3708      	adds	r7, #8
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}
 8009af0:	0801b8d8 	.word	0x0801b8d8
 8009af4:	0801b8f4 	.word	0x0801b8f4
 8009af8:	0801b904 	.word	0x0801b904
 8009afc:	08018209 	.word	0x08018209
 8009b00:	080097a5 	.word	0x080097a5

08009b04 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009b08:	f7f9 fde4 	bl	80036d4 <HAL_GetTick>
 8009b0c:	4603      	mov	r3, r0
}
 8009b0e:	4618      	mov	r0, r3
 8009b10:	bd80      	pop	{r7, pc}
	...

08009b14 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b084      	sub	sp, #16
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8009b20:	2300      	movs	r3, #0
 8009b22:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009b2a:	089b      	lsrs	r3, r3, #2
 8009b2c:	f003 0301 	and.w	r3, r3, #1
 8009b30:	b2db      	uxtb	r3, r3
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d05d      	beq.n	8009bf2 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8009b36:	4b34      	ldr	r3, [pc, #208]	; (8009c08 <ethernetif_update_config+0xf4>)
 8009b38:	685b      	ldr	r3, [r3, #4]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d03f      	beq.n	8009bbe <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8009b3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009b42:	2100      	movs	r1, #0
 8009b44:	4830      	ldr	r0, [pc, #192]	; (8009c08 <ethernetif_update_config+0xf4>)
 8009b46:	f7fb fba8 	bl	800529a <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8009b4a:	f7f9 fdc3 	bl	80036d4 <HAL_GetTick>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8009b52:	f107 0308 	add.w	r3, r7, #8
 8009b56:	461a      	mov	r2, r3
 8009b58:	2101      	movs	r1, #1
 8009b5a:	482b      	ldr	r0, [pc, #172]	; (8009c08 <ethernetif_update_config+0xf4>)
 8009b5c:	f7fb fb35 	bl	80051ca <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8009b60:	f7f9 fdb8 	bl	80036d4 <HAL_GetTick>
 8009b64:	4602      	mov	r2, r0
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	1ad3      	subs	r3, r2, r3
 8009b6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009b6e:	d828      	bhi.n	8009bc2 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	f003 0320 	and.w	r3, r3, #32
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d0eb      	beq.n	8009b52 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8009b7a:	f107 0308 	add.w	r3, r7, #8
 8009b7e:	461a      	mov	r2, r3
 8009b80:	2110      	movs	r1, #16
 8009b82:	4821      	ldr	r0, [pc, #132]	; (8009c08 <ethernetif_update_config+0xf4>)
 8009b84:	f7fb fb21 	bl	80051ca <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	f003 0304 	and.w	r3, r3, #4
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d004      	beq.n	8009b9c <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8009b92:	4b1d      	ldr	r3, [pc, #116]	; (8009c08 <ethernetif_update_config+0xf4>)
 8009b94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009b98:	60da      	str	r2, [r3, #12]
 8009b9a:	e002      	b.n	8009ba2 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8009b9c:	4b1a      	ldr	r3, [pc, #104]	; (8009c08 <ethernetif_update_config+0xf4>)
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8009ba2:	68bb      	ldr	r3, [r7, #8]
 8009ba4:	f003 0302 	and.w	r3, r3, #2
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d003      	beq.n	8009bb4 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8009bac:	4b16      	ldr	r3, [pc, #88]	; (8009c08 <ethernetif_update_config+0xf4>)
 8009bae:	2200      	movs	r2, #0
 8009bb0:	609a      	str	r2, [r3, #8]
 8009bb2:	e016      	b.n	8009be2 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8009bb4:	4b14      	ldr	r3, [pc, #80]	; (8009c08 <ethernetif_update_config+0xf4>)
 8009bb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009bba:	609a      	str	r2, [r3, #8]
 8009bbc:	e011      	b.n	8009be2 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8009bbe:	bf00      	nop
 8009bc0:	e000      	b.n	8009bc4 <ethernetif_update_config+0xb0>
          goto error;
 8009bc2:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8009bc4:	4b10      	ldr	r3, [pc, #64]	; (8009c08 <ethernetif_update_config+0xf4>)
 8009bc6:	68db      	ldr	r3, [r3, #12]
 8009bc8:	08db      	lsrs	r3, r3, #3
 8009bca:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8009bcc:	4b0e      	ldr	r3, [pc, #56]	; (8009c08 <ethernetif_update_config+0xf4>)
 8009bce:	689b      	ldr	r3, [r3, #8]
 8009bd0:	085b      	lsrs	r3, r3, #1
 8009bd2:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8009bd4:	4313      	orrs	r3, r2
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	461a      	mov	r2, r3
 8009bda:	2100      	movs	r1, #0
 8009bdc:	480a      	ldr	r0, [pc, #40]	; (8009c08 <ethernetif_update_config+0xf4>)
 8009bde:	f7fb fb5c 	bl	800529a <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8009be2:	2100      	movs	r1, #0
 8009be4:	4808      	ldr	r0, [pc, #32]	; (8009c08 <ethernetif_update_config+0xf4>)
 8009be6:	f7fb fc1d 	bl	8005424 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8009bea:	4807      	ldr	r0, [pc, #28]	; (8009c08 <ethernetif_update_config+0xf4>)
 8009bec:	f7fb fbbb 	bl	8005366 <HAL_ETH_Start>
 8009bf0:	e002      	b.n	8009bf8 <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8009bf2:	4805      	ldr	r0, [pc, #20]	; (8009c08 <ethernetif_update_config+0xf4>)
 8009bf4:	f7fb fbe6 	bl	80053c4 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 f807 	bl	8009c0c <ethernetif_notify_conn_changed>
}
 8009bfe:	bf00      	nop
 8009c00:	3710      	adds	r7, #16
 8009c02:	46bd      	mov	sp, r7
 8009c04:	bd80      	pop	{r7, pc}
 8009c06:	bf00      	nop
 8009c08:	20008dd4 	.word	0x20008dd4

08009c0c <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b083      	sub	sp, #12
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8009c14:	bf00      	nop
 8009c16:	370c      	adds	r7, #12
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr

08009c20 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b085      	sub	sp, #20
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	4603      	mov	r3, r0
 8009c28:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009c2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009c32:	2b84      	cmp	r3, #132	; 0x84
 8009c34:	d005      	beq.n	8009c42 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009c36:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	4413      	add	r3, r2
 8009c3e:	3303      	adds	r3, #3
 8009c40:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009c42:	68fb      	ldr	r3, [r7, #12]
}
 8009c44:	4618      	mov	r0, r3
 8009c46:	3714      	adds	r7, #20
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c4e:	4770      	bx	lr

08009c50 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009c50:	b480      	push	{r7}
 8009c52:	b083      	sub	sp, #12
 8009c54:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c56:	f3ef 8305 	mrs	r3, IPSR
 8009c5a:	607b      	str	r3, [r7, #4]
  return(result);
 8009c5c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	bf14      	ite	ne
 8009c62:	2301      	movne	r3, #1
 8009c64:	2300      	moveq	r3, #0
 8009c66:	b2db      	uxtb	r3, r3
}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	370c      	adds	r7, #12
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr

08009c74 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009c78:	f001 ff70 	bl	800bb5c <vTaskStartScheduler>
  
  return osOK;
 8009c7c:	2300      	movs	r3, #0
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	bd80      	pop	{r7, pc}

08009c82 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8009c82:	b580      	push	{r7, lr}
 8009c84:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8009c86:	f7ff ffe3 	bl	8009c50 <inHandlerMode>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d003      	beq.n	8009c98 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8009c90:	f002 f888 	bl	800bda4 <xTaskGetTickCountFromISR>
 8009c94:	4603      	mov	r3, r0
 8009c96:	e002      	b.n	8009c9e <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8009c98:	f002 f874 	bl	800bd84 <xTaskGetTickCount>
 8009c9c:	4603      	mov	r3, r0
  }
}
 8009c9e:	4618      	mov	r0, r3
 8009ca0:	bd80      	pop	{r7, pc}

08009ca2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009ca2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ca4:	b089      	sub	sp, #36	; 0x24
 8009ca6:	af04      	add	r7, sp, #16
 8009ca8:	6078      	str	r0, [r7, #4]
 8009caa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	695b      	ldr	r3, [r3, #20]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d020      	beq.n	8009cf6 <osThreadCreate+0x54>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	699b      	ldr	r3, [r3, #24]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d01c      	beq.n	8009cf6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	685c      	ldr	r4, [r3, #4]
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681d      	ldr	r5, [r3, #0]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	691e      	ldr	r6, [r3, #16]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009cce:	4618      	mov	r0, r3
 8009cd0:	f7ff ffa6 	bl	8009c20 <makeFreeRtosPriority>
 8009cd4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	695b      	ldr	r3, [r3, #20]
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009cde:	9202      	str	r2, [sp, #8]
 8009ce0:	9301      	str	r3, [sp, #4]
 8009ce2:	9100      	str	r1, [sp, #0]
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	4632      	mov	r2, r6
 8009ce8:	4629      	mov	r1, r5
 8009cea:	4620      	mov	r0, r4
 8009cec:	f001 fd58 	bl	800b7a0 <xTaskCreateStatic>
 8009cf0:	4603      	mov	r3, r0
 8009cf2:	60fb      	str	r3, [r7, #12]
 8009cf4:	e01c      	b.n	8009d30 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	685c      	ldr	r4, [r3, #4]
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009d02:	b29e      	uxth	r6, r3
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8009d0a:	4618      	mov	r0, r3
 8009d0c:	f7ff ff88 	bl	8009c20 <makeFreeRtosPriority>
 8009d10:	4602      	mov	r2, r0
 8009d12:	f107 030c 	add.w	r3, r7, #12
 8009d16:	9301      	str	r3, [sp, #4]
 8009d18:	9200      	str	r2, [sp, #0]
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	4632      	mov	r2, r6
 8009d1e:	4629      	mov	r1, r5
 8009d20:	4620      	mov	r0, r4
 8009d22:	f001 fd9a 	bl	800b85a <xTaskCreate>
 8009d26:	4603      	mov	r3, r0
 8009d28:	2b01      	cmp	r3, #1
 8009d2a:	d001      	beq.n	8009d30 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009d2c:	2300      	movs	r3, #0
 8009d2e:	e000      	b.n	8009d32 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009d30:	68fb      	ldr	r3, [r7, #12]
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3714      	adds	r7, #20
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009d3a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b084      	sub	sp, #16
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d001      	beq.n	8009d50 <osDelay+0x16>
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	e000      	b.n	8009d52 <osDelay+0x18>
 8009d50:	2301      	movs	r3, #1
 8009d52:	4618      	mov	r0, r3
 8009d54:	f001 fece 	bl	800baf4 <vTaskDelay>
  
  return osOK;
 8009d58:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3710      	adds	r7, #16
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}

08009d62 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8009d62:	b580      	push	{r7, lr}
 8009d64:	b082      	sub	sp, #8
 8009d66:	af00      	add	r7, sp, #0
 8009d68:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d007      	beq.n	8009d82 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	685b      	ldr	r3, [r3, #4]
 8009d76:	4619      	mov	r1, r3
 8009d78:	2001      	movs	r0, #1
 8009d7a:	f000 feb2 	bl	800aae2 <xQueueCreateMutexStatic>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	e003      	b.n	8009d8a <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8009d82:	2001      	movs	r0, #1
 8009d84:	f000 fe95 	bl	800aab2 <xQueueCreateMutex>
 8009d88:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3708      	adds	r7, #8
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}
	...

08009d94 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b084      	sub	sp, #16
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009d9e:	2300      	movs	r3, #0
 8009da0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d101      	bne.n	8009dac <osMutexWait+0x18>
    return osErrorParameter;
 8009da8:	2380      	movs	r3, #128	; 0x80
 8009daa:	e03a      	b.n	8009e22 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8009dac:	2300      	movs	r3, #0
 8009dae:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009db0:	683b      	ldr	r3, [r7, #0]
 8009db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009db6:	d103      	bne.n	8009dc0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8009db8:	f04f 33ff 	mov.w	r3, #4294967295
 8009dbc:	60fb      	str	r3, [r7, #12]
 8009dbe:	e009      	b.n	8009dd4 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d006      	beq.n	8009dd4 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d101      	bne.n	8009dd4 <osMutexWait+0x40>
      ticks = 1;
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009dd4:	f7ff ff3c 	bl	8009c50 <inHandlerMode>
 8009dd8:	4603      	mov	r3, r0
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d017      	beq.n	8009e0e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009dde:	f107 0308 	add.w	r3, r7, #8
 8009de2:	461a      	mov	r2, r3
 8009de4:	2100      	movs	r1, #0
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f001 faa8 	bl	800b33c <xQueueReceiveFromISR>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b01      	cmp	r3, #1
 8009df0:	d001      	beq.n	8009df6 <osMutexWait+0x62>
      return osErrorOS;
 8009df2:	23ff      	movs	r3, #255	; 0xff
 8009df4:	e015      	b.n	8009e22 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d011      	beq.n	8009e20 <osMutexWait+0x8c>
 8009dfc:	4b0b      	ldr	r3, [pc, #44]	; (8009e2c <osMutexWait+0x98>)
 8009dfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e02:	601a      	str	r2, [r3, #0]
 8009e04:	f3bf 8f4f 	dsb	sy
 8009e08:	f3bf 8f6f 	isb	sy
 8009e0c:	e008      	b.n	8009e20 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8009e0e:	68f9      	ldr	r1, [r7, #12]
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f001 f987 	bl	800b124 <xQueueSemaphoreTake>
 8009e16:	4603      	mov	r3, r0
 8009e18:	2b01      	cmp	r3, #1
 8009e1a:	d001      	beq.n	8009e20 <osMutexWait+0x8c>
    return osErrorOS;
 8009e1c:	23ff      	movs	r3, #255	; 0xff
 8009e1e:	e000      	b.n	8009e22 <osMutexWait+0x8e>
  }
  
  return osOK;
 8009e20:	2300      	movs	r3, #0
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
 8009e2a:	bf00      	nop
 8009e2c:	e000ed04 	.word	0xe000ed04

08009e30 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8009e30:	b580      	push	{r7, lr}
 8009e32:	b084      	sub	sp, #16
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009e38:	2300      	movs	r3, #0
 8009e3a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8009e40:	f7ff ff06 	bl	8009c50 <inHandlerMode>
 8009e44:	4603      	mov	r3, r0
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d016      	beq.n	8009e78 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009e4a:	f107 0308 	add.w	r3, r7, #8
 8009e4e:	4619      	mov	r1, r3
 8009e50:	6878      	ldr	r0, [r7, #4]
 8009e52:	f000 fffa 	bl	800ae4a <xQueueGiveFromISR>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b01      	cmp	r3, #1
 8009e5a:	d001      	beq.n	8009e60 <osMutexRelease+0x30>
      return osErrorOS;
 8009e5c:	23ff      	movs	r3, #255	; 0xff
 8009e5e:	e017      	b.n	8009e90 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d013      	beq.n	8009e8e <osMutexRelease+0x5e>
 8009e66:	4b0c      	ldr	r3, [pc, #48]	; (8009e98 <osMutexRelease+0x68>)
 8009e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e6c:	601a      	str	r2, [r3, #0]
 8009e6e:	f3bf 8f4f 	dsb	sy
 8009e72:	f3bf 8f6f 	isb	sy
 8009e76:	e00a      	b.n	8009e8e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8009e78:	2300      	movs	r3, #0
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	2100      	movs	r1, #0
 8009e7e:	6878      	ldr	r0, [r7, #4]
 8009e80:	f000 fe4a 	bl	800ab18 <xQueueGenericSend>
 8009e84:	4603      	mov	r3, r0
 8009e86:	2b01      	cmp	r3, #1
 8009e88:	d001      	beq.n	8009e8e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8009e8a:	23ff      	movs	r3, #255	; 0xff
 8009e8c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8009e8e:	68fb      	ldr	r3, [r7, #12]
}
 8009e90:	4618      	mov	r0, r3
 8009e92:	3710      	adds	r7, #16
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}
 8009e98:	e000ed04 	.word	0xe000ed04

08009e9c <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009e9c:	b580      	push	{r7, lr}
 8009e9e:	b086      	sub	sp, #24
 8009ea0:	af02      	add	r7, sp, #8
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	685b      	ldr	r3, [r3, #4]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d00f      	beq.n	8009ece <osSemaphoreCreate+0x32>
    if (count == 1) {
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	2b01      	cmp	r3, #1
 8009eb2:	d10a      	bne.n	8009eca <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	685b      	ldr	r3, [r3, #4]
 8009eb8:	2203      	movs	r2, #3
 8009eba:	9200      	str	r2, [sp, #0]
 8009ebc:	2200      	movs	r2, #0
 8009ebe:	2100      	movs	r1, #0
 8009ec0:	2001      	movs	r0, #1
 8009ec2:	f000 fd0b 	bl	800a8dc <xQueueGenericCreateStatic>
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	e016      	b.n	8009ef8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	e014      	b.n	8009ef8 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	2b01      	cmp	r3, #1
 8009ed2:	d110      	bne.n	8009ef6 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8009ed4:	2203      	movs	r2, #3
 8009ed6:	2100      	movs	r1, #0
 8009ed8:	2001      	movs	r0, #1
 8009eda:	f000 fd77 	bl	800a9cc <xQueueGenericCreate>
 8009ede:	60f8      	str	r0, [r7, #12]
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d005      	beq.n	8009ef2 <osSemaphoreCreate+0x56>
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	2200      	movs	r2, #0
 8009eea:	2100      	movs	r1, #0
 8009eec:	68f8      	ldr	r0, [r7, #12]
 8009eee:	f000 fe13 	bl	800ab18 <xQueueGenericSend>
      return sema;
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	e000      	b.n	8009ef8 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8009ef6:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	3710      	adds	r7, #16
 8009efc:	46bd      	mov	sp, r7
 8009efe:	bd80      	pop	{r7, pc}

08009f00 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d101      	bne.n	8009f18 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8009f14:	2380      	movs	r3, #128	; 0x80
 8009f16:	e03a      	b.n	8009f8e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8009f18:	2300      	movs	r3, #0
 8009f1a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009f1c:	683b      	ldr	r3, [r7, #0]
 8009f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f22:	d103      	bne.n	8009f2c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8009f24:	f04f 33ff 	mov.w	r3, #4294967295
 8009f28:	60fb      	str	r3, [r7, #12]
 8009f2a:	e009      	b.n	8009f40 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8009f2c:	683b      	ldr	r3, [r7, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d006      	beq.n	8009f40 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8009f32:	683b      	ldr	r3, [r7, #0]
 8009f34:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d101      	bne.n	8009f40 <osSemaphoreWait+0x40>
      ticks = 1;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8009f40:	f7ff fe86 	bl	8009c50 <inHandlerMode>
 8009f44:	4603      	mov	r3, r0
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d017      	beq.n	8009f7a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009f4a:	f107 0308 	add.w	r3, r7, #8
 8009f4e:	461a      	mov	r2, r3
 8009f50:	2100      	movs	r1, #0
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f001 f9f2 	bl	800b33c <xQueueReceiveFromISR>
 8009f58:	4603      	mov	r3, r0
 8009f5a:	2b01      	cmp	r3, #1
 8009f5c:	d001      	beq.n	8009f62 <osSemaphoreWait+0x62>
      return osErrorOS;
 8009f5e:	23ff      	movs	r3, #255	; 0xff
 8009f60:	e015      	b.n	8009f8e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8009f62:	68bb      	ldr	r3, [r7, #8]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d011      	beq.n	8009f8c <osSemaphoreWait+0x8c>
 8009f68:	4b0b      	ldr	r3, [pc, #44]	; (8009f98 <osSemaphoreWait+0x98>)
 8009f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f6e:	601a      	str	r2, [r3, #0]
 8009f70:	f3bf 8f4f 	dsb	sy
 8009f74:	f3bf 8f6f 	isb	sy
 8009f78:	e008      	b.n	8009f8c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8009f7a:	68f9      	ldr	r1, [r7, #12]
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f001 f8d1 	bl	800b124 <xQueueSemaphoreTake>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d001      	beq.n	8009f8c <osSemaphoreWait+0x8c>
    return osErrorOS;
 8009f88:	23ff      	movs	r3, #255	; 0xff
 8009f8a:	e000      	b.n	8009f8e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8009f8c:	2300      	movs	r3, #0
}
 8009f8e:	4618      	mov	r0, r3
 8009f90:	3710      	adds	r7, #16
 8009f92:	46bd      	mov	sp, r7
 8009f94:	bd80      	pop	{r7, pc}
 8009f96:	bf00      	nop
 8009f98:	e000ed04 	.word	0xe000ed04

08009f9c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b084      	sub	sp, #16
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009fa4:	2300      	movs	r3, #0
 8009fa6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8009fac:	f7ff fe50 	bl	8009c50 <inHandlerMode>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d016      	beq.n	8009fe4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009fb6:	f107 0308 	add.w	r3, r7, #8
 8009fba:	4619      	mov	r1, r3
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f000 ff44 	bl	800ae4a <xQueueGiveFromISR>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2b01      	cmp	r3, #1
 8009fc6:	d001      	beq.n	8009fcc <osSemaphoreRelease+0x30>
      return osErrorOS;
 8009fc8:	23ff      	movs	r3, #255	; 0xff
 8009fca:	e017      	b.n	8009ffc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009fcc:	68bb      	ldr	r3, [r7, #8]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d013      	beq.n	8009ffa <osSemaphoreRelease+0x5e>
 8009fd2:	4b0c      	ldr	r3, [pc, #48]	; (800a004 <osSemaphoreRelease+0x68>)
 8009fd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fd8:	601a      	str	r2, [r3, #0]
 8009fda:	f3bf 8f4f 	dsb	sy
 8009fde:	f3bf 8f6f 	isb	sy
 8009fe2:	e00a      	b.n	8009ffa <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	2100      	movs	r1, #0
 8009fea:	6878      	ldr	r0, [r7, #4]
 8009fec:	f000 fd94 	bl	800ab18 <xQueueGenericSend>
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	2b01      	cmp	r3, #1
 8009ff4:	d001      	beq.n	8009ffa <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8009ff6:	23ff      	movs	r3, #255	; 0xff
 8009ff8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3710      	adds	r7, #16
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}
 800a004:	e000ed04 	.word	0xe000ed04

0800a008 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b082      	sub	sp, #8
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a010:	f7ff fe1e 	bl	8009c50 <inHandlerMode>
 800a014:	4603      	mov	r3, r0
 800a016:	2b00      	cmp	r3, #0
 800a018:	d001      	beq.n	800a01e <osSemaphoreDelete+0x16>
    return osErrorISR;
 800a01a:	2382      	movs	r3, #130	; 0x82
 800a01c:	e003      	b.n	800a026 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f001 fa48 	bl	800b4b4 <vQueueDelete>

  return osOK; 
 800a024:	2300      	movs	r3, #0
}
 800a026:	4618      	mov	r0, r3
 800a028:	3708      	adds	r7, #8
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}

0800a02e <osPoolCreate>:
* @param  pool_def      memory pool definition referenced with \ref osPool.
* @retval  memory pool ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osPoolCreate shall be consistent in every CMSIS-RTOS.
*/
osPoolId osPoolCreate (const osPoolDef_t *pool_def)
{
 800a02e:	b580      	push	{r7, lr}
 800a030:	b086      	sub	sp, #24
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  osPoolId thePool;
  int itemSize = 4 * ((pool_def->item_sz + 3) / 4);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	3303      	adds	r3, #3
 800a03c:	f023 0303 	bic.w	r3, r3, #3
 800a040:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  
  /* First have to allocate memory for the pool control block. */
 thePool = pvPortMalloc(sizeof(os_pool_cb_t));
 800a042:	2014      	movs	r0, #20
 800a044:	f002 fe30 	bl	800cca8 <pvPortMalloc>
 800a048:	6178      	str	r0, [r7, #20]

  
  if (thePool) {
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d046      	beq.n	800a0de <osPoolCreate+0xb0>
    thePool->pool_sz = pool_def->pool_sz;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681a      	ldr	r2, [r3, #0]
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	609a      	str	r2, [r3, #8]
    thePool->item_sz = itemSize;
 800a058:	68fa      	ldr	r2, [r7, #12]
 800a05a:	697b      	ldr	r3, [r7, #20]
 800a05c:	60da      	str	r2, [r3, #12]
    thePool->currentIndex = 0;
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	2200      	movs	r2, #0
 800a062:	611a      	str	r2, [r3, #16]
    
    /* Memory for markers */
    thePool->markers = pvPortMalloc(pool_def->pool_sz);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	4618      	mov	r0, r3
 800a06a:	f002 fe1d 	bl	800cca8 <pvPortMalloc>
 800a06e:	4602      	mov	r2, r0
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	605a      	str	r2, [r3, #4]
   
    if (thePool->markers) {
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d02b      	beq.n	800a0d4 <osPoolCreate+0xa6>
      /* Now allocate the pool itself. */
     thePool->pool = pvPortMalloc(pool_def->pool_sz * itemSize);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	68fa      	ldr	r2, [r7, #12]
 800a082:	fb02 f303 	mul.w	r3, r2, r3
 800a086:	4618      	mov	r0, r3
 800a088:	f002 fe0e 	bl	800cca8 <pvPortMalloc>
 800a08c:	4602      	mov	r2, r0
 800a08e:	697b      	ldr	r3, [r7, #20]
 800a090:	601a      	str	r2, [r3, #0]
      
      if (thePool->pool) {
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d011      	beq.n	800a0be <osPoolCreate+0x90>
        for (i = 0; i < pool_def->pool_sz; i++) {
 800a09a:	2300      	movs	r3, #0
 800a09c:	613b      	str	r3, [r7, #16]
 800a09e:	e008      	b.n	800a0b2 <osPoolCreate+0x84>
          thePool->markers[i] = 0;
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	685a      	ldr	r2, [r3, #4]
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	4413      	add	r3, r2
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < pool_def->pool_sz; i++) {
 800a0ac:	693b      	ldr	r3, [r7, #16]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	613b      	str	r3, [r7, #16]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	693a      	ldr	r2, [r7, #16]
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d3f1      	bcc.n	800a0a0 <osPoolCreate+0x72>
 800a0bc:	e00f      	b.n	800a0de <osPoolCreate+0xb0>
        }
      }
      else {
        vPortFree(thePool->markers);
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	685b      	ldr	r3, [r3, #4]
 800a0c2:	4618      	mov	r0, r3
 800a0c4:	f002 febc 	bl	800ce40 <vPortFree>
        vPortFree(thePool);
 800a0c8:	6978      	ldr	r0, [r7, #20]
 800a0ca:	f002 feb9 	bl	800ce40 <vPortFree>
        thePool = NULL;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	617b      	str	r3, [r7, #20]
 800a0d2:	e004      	b.n	800a0de <osPoolCreate+0xb0>
      }
    }
    else {
      vPortFree(thePool);
 800a0d4:	6978      	ldr	r0, [r7, #20]
 800a0d6:	f002 feb3 	bl	800ce40 <vPortFree>
      thePool = NULL;
 800a0da:	2300      	movs	r3, #0
 800a0dc:	617b      	str	r3, [r7, #20]
    }
  }

  return thePool;
 800a0de:	697b      	ldr	r3, [r7, #20]
 
#else
  return NULL;
#endif
}
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	3718      	adds	r7, #24
 800a0e4:	46bd      	mov	sp, r7
 800a0e6:	bd80      	pop	{r7, pc}

0800a0e8 <osPoolAlloc>:
* @param pool_id       memory pool ID obtain referenced with \ref osPoolCreate.
* @retval  address of the allocated memory block or NULL in case of no memory available.
* @note   MUST REMAIN UNCHANGED: \b osPoolAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osPoolAlloc (osPoolId pool_id)
{
 800a0e8:	b580      	push	{r7, lr}
 800a0ea:	b08a      	sub	sp, #40	; 0x28
 800a0ec:	af00      	add	r7, sp, #0
 800a0ee:	6078      	str	r0, [r7, #4]
  int dummy = 0;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	627b      	str	r3, [r7, #36]	; 0x24
  void *p = NULL;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	623b      	str	r3, [r7, #32]
  uint32_t i;
  uint32_t index;
  
  if (inHandlerMode()) {
 800a0f8:	f7ff fdaa 	bl	8009c50 <inHandlerMode>
 800a0fc:	4603      	mov	r3, r0
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d00e      	beq.n	800a120 <osPoolAlloc+0x38>
	__asm volatile
 800a102:	f3ef 8211 	mrs	r2, BASEPRI
 800a106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a10a:	f383 8811 	msr	BASEPRI, r3
 800a10e:	f3bf 8f6f 	isb	sy
 800a112:	f3bf 8f4f 	dsb	sy
 800a116:	617a      	str	r2, [r7, #20]
 800a118:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a11a:	697b      	ldr	r3, [r7, #20]
    dummy = portSET_INTERRUPT_MASK_FROM_ISR();
 800a11c:	627b      	str	r3, [r7, #36]	; 0x24
 800a11e:	e001      	b.n	800a124 <osPoolAlloc+0x3c>
  }
  else {
    vPortEnterCritical();
 800a120:	f002 fca0 	bl	800ca64 <vPortEnterCritical>
  }
  
  for (i = 0; i < pool_id->pool_sz; i++) {
 800a124:	2300      	movs	r3, #0
 800a126:	61fb      	str	r3, [r7, #28]
 800a128:	e029      	b.n	800a17e <osPoolAlloc+0x96>
    index = (pool_id->currentIndex + i) % pool_id->pool_sz;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	691a      	ldr	r2, [r3, #16]
 800a12e:	69fb      	ldr	r3, [r7, #28]
 800a130:	4413      	add	r3, r2
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	6892      	ldr	r2, [r2, #8]
 800a136:	fbb3 f1f2 	udiv	r1, r3, r2
 800a13a:	fb02 f201 	mul.w	r2, r2, r1
 800a13e:	1a9b      	subs	r3, r3, r2
 800a140:	61bb      	str	r3, [r7, #24]
    
    if (pool_id->markers[index] == 0) {
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	685a      	ldr	r2, [r3, #4]
 800a146:	69bb      	ldr	r3, [r7, #24]
 800a148:	4413      	add	r3, r2
 800a14a:	781b      	ldrb	r3, [r3, #0]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d113      	bne.n	800a178 <osPoolAlloc+0x90>
      pool_id->markers[index] = 1;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	685a      	ldr	r2, [r3, #4]
 800a154:	69bb      	ldr	r3, [r7, #24]
 800a156:	4413      	add	r3, r2
 800a158:	2201      	movs	r2, #1
 800a15a:	701a      	strb	r2, [r3, #0]
      p = (void *)((uint32_t)(pool_id->pool) + (index * pool_id->item_sz));
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	4619      	mov	r1, r3
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	69ba      	ldr	r2, [r7, #24]
 800a168:	fb02 f303 	mul.w	r3, r2, r3
 800a16c:	440b      	add	r3, r1
 800a16e:	623b      	str	r3, [r7, #32]
      pool_id->currentIndex = index;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	69ba      	ldr	r2, [r7, #24]
 800a174:	611a      	str	r2, [r3, #16]
      break;
 800a176:	e007      	b.n	800a188 <osPoolAlloc+0xa0>
  for (i = 0; i < pool_id->pool_sz; i++) {
 800a178:	69fb      	ldr	r3, [r7, #28]
 800a17a:	3301      	adds	r3, #1
 800a17c:	61fb      	str	r3, [r7, #28]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	689b      	ldr	r3, [r3, #8]
 800a182:	69fa      	ldr	r2, [r7, #28]
 800a184:	429a      	cmp	r2, r3
 800a186:	d3d0      	bcc.n	800a12a <osPoolAlloc+0x42>
    }
  }
  
  if (inHandlerMode()) {
 800a188:	f7ff fd62 	bl	8009c50 <inHandlerMode>
 800a18c:	4603      	mov	r3, r0
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d005      	beq.n	800a19e <osPoolAlloc+0xb6>
    portCLEAR_INTERRUPT_MASK_FROM_ISR(dummy);
 800a192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a194:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f383 8811 	msr	BASEPRI, r3
}
 800a19c:	e001      	b.n	800a1a2 <osPoolAlloc+0xba>
  }
  else {
    vPortExitCritical();
 800a19e:	f002 fc91 	bl	800cac4 <vPortExitCritical>
  }
  
  return p;
 800a1a2:	6a3b      	ldr	r3, [r7, #32]
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3728      	adds	r7, #40	; 0x28
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <osPoolFree>:
* @param  block         address of the allocated memory block that is returned to the memory pool.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osPoolFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osPoolFree (osPoolId pool_id, void *block)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b085      	sub	sp, #20
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
  uint32_t index;
  
  if (pool_id == NULL) {
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d101      	bne.n	800a1c0 <osPoolFree+0x14>
    return osErrorParameter;
 800a1bc:	2380      	movs	r3, #128	; 0x80
 800a1be:	e030      	b.n	800a222 <osPoolFree+0x76>
  }
  
  if (block == NULL) {
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d101      	bne.n	800a1ca <osPoolFree+0x1e>
    return osErrorParameter;
 800a1c6:	2380      	movs	r3, #128	; 0x80
 800a1c8:	e02b      	b.n	800a222 <osPoolFree+0x76>
  }
  
  if (block < pool_id->pool) {
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	683a      	ldr	r2, [r7, #0]
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d201      	bcs.n	800a1d8 <osPoolFree+0x2c>
    return osErrorParameter;
 800a1d4:	2380      	movs	r3, #128	; 0x80
 800a1d6:	e024      	b.n	800a222 <osPoolFree+0x76>
  }
  
  index = (uint32_t)block - (uint32_t)(pool_id->pool);
 800a1d8:	683b      	ldr	r3, [r7, #0]
 800a1da:	687a      	ldr	r2, [r7, #4]
 800a1dc:	6812      	ldr	r2, [r2, #0]
 800a1de:	1a9b      	subs	r3, r3, r2
 800a1e0:	60fb      	str	r3, [r7, #12]
  if (index % pool_id->item_sz) {
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	68da      	ldr	r2, [r3, #12]
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	fbb3 f1f2 	udiv	r1, r3, r2
 800a1ec:	fb02 f201 	mul.w	r2, r2, r1
 800a1f0:	1a9b      	subs	r3, r3, r2
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d001      	beq.n	800a1fa <osPoolFree+0x4e>
    return osErrorParameter;
 800a1f6:	2380      	movs	r3, #128	; 0x80
 800a1f8:	e013      	b.n	800a222 <osPoolFree+0x76>
  }
  index = index / pool_id->item_sz;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	68db      	ldr	r3, [r3, #12]
 800a1fe:	68fa      	ldr	r2, [r7, #12]
 800a200:	fbb2 f3f3 	udiv	r3, r2, r3
 800a204:	60fb      	str	r3, [r7, #12]
  if (index >= pool_id->pool_sz) {
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	689b      	ldr	r3, [r3, #8]
 800a20a:	68fa      	ldr	r2, [r7, #12]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d301      	bcc.n	800a214 <osPoolFree+0x68>
    return osErrorParameter;
 800a210:	2380      	movs	r3, #128	; 0x80
 800a212:	e006      	b.n	800a222 <osPoolFree+0x76>
  }
  
  pool_id->markers[index] = 0;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	685a      	ldr	r2, [r3, #4]
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	4413      	add	r3, r2
 800a21c:	2200      	movs	r2, #0
 800a21e:	701a      	strb	r2, [r3, #0]
  
  return osOK;
 800a220:	2300      	movs	r3, #0
}
 800a222:	4618      	mov	r0, r3
 800a224:	3714      	adds	r7, #20
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr

0800a22e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800a22e:	b590      	push	{r4, r7, lr}
 800a230:	b085      	sub	sp, #20
 800a232:	af02      	add	r7, sp, #8
 800a234:	6078      	str	r0, [r7, #4]
 800a236:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	689b      	ldr	r3, [r3, #8]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d011      	beq.n	800a264 <osMessageCreate+0x36>
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	68db      	ldr	r3, [r3, #12]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d00d      	beq.n	800a264 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6818      	ldr	r0, [r3, #0]
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6859      	ldr	r1, [r3, #4]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	689a      	ldr	r2, [r3, #8]
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	68db      	ldr	r3, [r3, #12]
 800a258:	2400      	movs	r4, #0
 800a25a:	9400      	str	r4, [sp, #0]
 800a25c:	f000 fb3e 	bl	800a8dc <xQueueGenericCreateStatic>
 800a260:	4603      	mov	r3, r0
 800a262:	e008      	b.n	800a276 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6818      	ldr	r0, [r3, #0]
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	2200      	movs	r2, #0
 800a26e:	4619      	mov	r1, r3
 800a270:	f000 fbac 	bl	800a9cc <xQueueGenericCreate>
 800a274:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800a276:	4618      	mov	r0, r3
 800a278:	370c      	adds	r7, #12
 800a27a:	46bd      	mov	sp, r7
 800a27c:	bd90      	pop	{r4, r7, pc}
	...

0800a280 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b086      	sub	sp, #24
 800a284:	af00      	add	r7, sp, #0
 800a286:	60f8      	str	r0, [r7, #12]
 800a288:	60b9      	str	r1, [r7, #8]
 800a28a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800a28c:	2300      	movs	r3, #0
 800a28e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800a294:	697b      	ldr	r3, [r7, #20]
 800a296:	2b00      	cmp	r3, #0
 800a298:	d101      	bne.n	800a29e <osMessagePut+0x1e>
    ticks = 1;
 800a29a:	2301      	movs	r3, #1
 800a29c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800a29e:	f7ff fcd7 	bl	8009c50 <inHandlerMode>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d018      	beq.n	800a2da <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800a2a8:	f107 0210 	add.w	r2, r7, #16
 800a2ac:	f107 0108 	add.w	r1, r7, #8
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	68f8      	ldr	r0, [r7, #12]
 800a2b4:	f000 fd2e 	bl	800ad14 <xQueueGenericSendFromISR>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	2b01      	cmp	r3, #1
 800a2bc:	d001      	beq.n	800a2c2 <osMessagePut+0x42>
      return osErrorOS;
 800a2be:	23ff      	movs	r3, #255	; 0xff
 800a2c0:	e018      	b.n	800a2f4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d014      	beq.n	800a2f2 <osMessagePut+0x72>
 800a2c8:	4b0c      	ldr	r3, [pc, #48]	; (800a2fc <osMessagePut+0x7c>)
 800a2ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2ce:	601a      	str	r2, [r3, #0]
 800a2d0:	f3bf 8f4f 	dsb	sy
 800a2d4:	f3bf 8f6f 	isb	sy
 800a2d8:	e00b      	b.n	800a2f2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800a2da:	f107 0108 	add.w	r1, r7, #8
 800a2de:	2300      	movs	r3, #0
 800a2e0:	697a      	ldr	r2, [r7, #20]
 800a2e2:	68f8      	ldr	r0, [r7, #12]
 800a2e4:	f000 fc18 	bl	800ab18 <xQueueGenericSend>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	d001      	beq.n	800a2f2 <osMessagePut+0x72>
      return osErrorOS;
 800a2ee:	23ff      	movs	r3, #255	; 0xff
 800a2f0:	e000      	b.n	800a2f4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800a2f2:	2300      	movs	r3, #0
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3718      	adds	r7, #24
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	bd80      	pop	{r7, pc}
 800a2fc:	e000ed04 	.word	0xe000ed04

0800a300 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800a300:	b590      	push	{r4, r7, lr}
 800a302:	b08b      	sub	sp, #44	; 0x2c
 800a304:	af00      	add	r7, sp, #0
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	60b9      	str	r1, [r7, #8]
 800a30a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800a310:	2300      	movs	r3, #0
 800a312:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d10a      	bne.n	800a330 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800a31a:	2380      	movs	r3, #128	; 0x80
 800a31c:	617b      	str	r3, [r7, #20]
    return event;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	461c      	mov	r4, r3
 800a322:	f107 0314 	add.w	r3, r7, #20
 800a326:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a32a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a32e:	e054      	b.n	800a3da <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a330:	2300      	movs	r3, #0
 800a332:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a334:	2300      	movs	r3, #0
 800a336:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a33e:	d103      	bne.n	800a348 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800a340:	f04f 33ff 	mov.w	r3, #4294967295
 800a344:	627b      	str	r3, [r7, #36]	; 0x24
 800a346:	e009      	b.n	800a35c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d006      	beq.n	800a35c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a354:	2b00      	cmp	r3, #0
 800a356:	d101      	bne.n	800a35c <osMessageGet+0x5c>
      ticks = 1;
 800a358:	2301      	movs	r3, #1
 800a35a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a35c:	f7ff fc78 	bl	8009c50 <inHandlerMode>
 800a360:	4603      	mov	r3, r0
 800a362:	2b00      	cmp	r3, #0
 800a364:	d01c      	beq.n	800a3a0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800a366:	f107 0220 	add.w	r2, r7, #32
 800a36a:	f107 0314 	add.w	r3, r7, #20
 800a36e:	3304      	adds	r3, #4
 800a370:	4619      	mov	r1, r3
 800a372:	68b8      	ldr	r0, [r7, #8]
 800a374:	f000 ffe2 	bl	800b33c <xQueueReceiveFromISR>
 800a378:	4603      	mov	r3, r0
 800a37a:	2b01      	cmp	r3, #1
 800a37c:	d102      	bne.n	800a384 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800a37e:	2310      	movs	r3, #16
 800a380:	617b      	str	r3, [r7, #20]
 800a382:	e001      	b.n	800a388 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800a384:	2300      	movs	r3, #0
 800a386:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a388:	6a3b      	ldr	r3, [r7, #32]
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d01d      	beq.n	800a3ca <osMessageGet+0xca>
 800a38e:	4b15      	ldr	r3, [pc, #84]	; (800a3e4 <osMessageGet+0xe4>)
 800a390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a394:	601a      	str	r2, [r3, #0]
 800a396:	f3bf 8f4f 	dsb	sy
 800a39a:	f3bf 8f6f 	isb	sy
 800a39e:	e014      	b.n	800a3ca <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800a3a0:	f107 0314 	add.w	r3, r7, #20
 800a3a4:	3304      	adds	r3, #4
 800a3a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3a8:	4619      	mov	r1, r3
 800a3aa:	68b8      	ldr	r0, [r7, #8]
 800a3ac:	f000 fdda 	bl	800af64 <xQueueReceive>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d102      	bne.n	800a3bc <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800a3b6:	2310      	movs	r3, #16
 800a3b8:	617b      	str	r3, [r7, #20]
 800a3ba:	e006      	b.n	800a3ca <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d101      	bne.n	800a3c6 <osMessageGet+0xc6>
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	e000      	b.n	800a3c8 <osMessageGet+0xc8>
 800a3c6:	2340      	movs	r3, #64	; 0x40
 800a3c8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	461c      	mov	r4, r3
 800a3ce:	f107 0314 	add.w	r3, r7, #20
 800a3d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a3d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a3da:	68f8      	ldr	r0, [r7, #12]
 800a3dc:	372c      	adds	r7, #44	; 0x2c
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd90      	pop	{r4, r7, pc}
 800a3e2:	bf00      	nop
 800a3e4:	e000ed04 	.word	0xe000ed04

0800a3e8 <osMailCreate>:
* @param   thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval mail queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMailCreate shall be consistent in every CMSIS-RTOS.
*/
osMailQId osMailCreate (const osMailQDef_t *queue_def, osThreadId thread_id)
{
 800a3e8:	b590      	push	{r4, r7, lr}
 800a3ea:	b087      	sub	sp, #28
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]
#if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
  (void) thread_id;
  
  osPoolDef_t pool_def = {queue_def->queue_sz, queue_def->item_sz, NULL};
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	60fb      	str	r3, [r7, #12]
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	613b      	str	r3, [r7, #16]
 800a3fe:	2300      	movs	r3, #0
 800a400:	617b      	str	r3, [r7, #20]
  
  /* Create a mail queue control block */

  *(queue_def->cb) = pvPortMalloc(sizeof(struct os_mailQ_cb));
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	689c      	ldr	r4, [r3, #8]
 800a406:	200c      	movs	r0, #12
 800a408:	f002 fc4e 	bl	800cca8 <pvPortMalloc>
 800a40c:	4603      	mov	r3, r0
 800a40e:	6023      	str	r3, [r4, #0]

  if (*(queue_def->cb) == NULL) {
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	689b      	ldr	r3, [r3, #8]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d101      	bne.n	800a41e <osMailCreate+0x36>
    return NULL;
 800a41a:	2300      	movs	r3, #0
 800a41c:	e038      	b.n	800a490 <osMailCreate+0xa8>
  }
  (*(queue_def->cb))->queue_def = queue_def;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	689b      	ldr	r3, [r3, #8]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	687a      	ldr	r2, [r7, #4]
 800a426:	601a      	str	r2, [r3, #0]
  
  /* Create a queue in FreeRTOS */
  (*(queue_def->cb))->handle = xQueueCreate(queue_def->queue_sz, sizeof(void *));
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6818      	ldr	r0, [r3, #0]
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	689b      	ldr	r3, [r3, #8]
 800a430:	681c      	ldr	r4, [r3, #0]
 800a432:	2200      	movs	r2, #0
 800a434:	2104      	movs	r1, #4
 800a436:	f000 fac9 	bl	800a9cc <xQueueGenericCreate>
 800a43a:	4603      	mov	r3, r0
 800a43c:	6063      	str	r3, [r4, #4]


  if ((*(queue_def->cb))->handle == NULL) {
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	689b      	ldr	r3, [r3, #8]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	685b      	ldr	r3, [r3, #4]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d107      	bne.n	800a45a <osMailCreate+0x72>
    vPortFree(*(queue_def->cb));
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	689b      	ldr	r3, [r3, #8]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4618      	mov	r0, r3
 800a452:	f002 fcf5 	bl	800ce40 <vPortFree>
    return NULL;
 800a456:	2300      	movs	r3, #0
 800a458:	e01a      	b.n	800a490 <osMailCreate+0xa8>
  }
  
  /* Create a mail pool */
  (*(queue_def->cb))->pool = osPoolCreate(&pool_def);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	689b      	ldr	r3, [r3, #8]
 800a45e:	681c      	ldr	r4, [r3, #0]
 800a460:	f107 030c 	add.w	r3, r7, #12
 800a464:	4618      	mov	r0, r3
 800a466:	f7ff fde2 	bl	800a02e <osPoolCreate>
 800a46a:	4603      	mov	r3, r0
 800a46c:	60a3      	str	r3, [r4, #8]
  if ((*(queue_def->cb))->pool == NULL) {
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	689b      	ldr	r3, [r3, #8]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	689b      	ldr	r3, [r3, #8]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d107      	bne.n	800a48a <osMailCreate+0xa2>
    //TODO: Delete queue. How to do it in FreeRTOS?
    vPortFree(*(queue_def->cb));
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4618      	mov	r0, r3
 800a482:	f002 fcdd 	bl	800ce40 <vPortFree>
    return NULL;
 800a486:	2300      	movs	r3, #0
 800a488:	e002      	b.n	800a490 <osMailCreate+0xa8>
  }
  
  return *(queue_def->cb);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	689b      	ldr	r3, [r3, #8]
 800a48e:	681b      	ldr	r3, [r3, #0]
#else
  return NULL;
#endif
}
 800a490:	4618      	mov	r0, r3
 800a492:	371c      	adds	r7, #28
 800a494:	46bd      	mov	sp, r7
 800a496:	bd90      	pop	{r4, r7, pc}

0800a498 <osMailAlloc>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval pointer to memory block that can be filled with mail or NULL in case error.
* @note   MUST REMAIN UNCHANGED: \b osMailAlloc shall be consistent in every CMSIS-RTOS.
*/
void *osMailAlloc (osMailQId queue_id, uint32_t millisec)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
 800a4a0:	6039      	str	r1, [r7, #0]
  (void) millisec;
  void *p;
  
  
  if (queue_id == NULL) {
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d101      	bne.n	800a4ac <osMailAlloc+0x14>
    return NULL;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	e006      	b.n	800a4ba <osMailAlloc+0x22>
  }
  
  p = osPoolAlloc(queue_id->pool);
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	689b      	ldr	r3, [r3, #8]
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	f7ff fe19 	bl	800a0e8 <osPoolAlloc>
 800a4b6:	60f8      	str	r0, [r7, #12]
  
  return p;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
	...

0800a4c4 <osMailPut>:
* @param  mail          memory block previously allocated with \ref osMailAlloc or \ref osMailCAlloc.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailPut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailPut (osMailQId queue_id, void *mail)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b084      	sub	sp, #16
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	6039      	str	r1, [r7, #0]
  portBASE_TYPE taskWoken;
  
  
  if (queue_id == NULL) {
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d101      	bne.n	800a4d8 <osMailPut+0x14>
    return osErrorParameter;
 800a4d4:	2380      	movs	r3, #128	; 0x80
 800a4d6:	e02c      	b.n	800a532 <osMailPut+0x6e>
  }
  
  taskWoken = pdFALSE;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	60fb      	str	r3, [r7, #12]
  
  if (inHandlerMode()) {
 800a4dc:	f7ff fbb8 	bl	8009c50 <inHandlerMode>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d018      	beq.n	800a518 <osMailPut+0x54>
    if (xQueueSendFromISR(queue_id->handle, &mail, &taskWoken) != pdTRUE) {
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	6858      	ldr	r0, [r3, #4]
 800a4ea:	f107 020c 	add.w	r2, r7, #12
 800a4ee:	4639      	mov	r1, r7
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	f000 fc0f 	bl	800ad14 <xQueueGenericSendFromISR>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	2b01      	cmp	r3, #1
 800a4fa:	d001      	beq.n	800a500 <osMailPut+0x3c>
      return osErrorOS;
 800a4fc:	23ff      	movs	r3, #255	; 0xff
 800a4fe:	e018      	b.n	800a532 <osMailPut+0x6e>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d014      	beq.n	800a530 <osMailPut+0x6c>
 800a506:	4b0d      	ldr	r3, [pc, #52]	; (800a53c <osMailPut+0x78>)
 800a508:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a50c:	601a      	str	r2, [r3, #0]
 800a50e:	f3bf 8f4f 	dsb	sy
 800a512:	f3bf 8f6f 	isb	sy
 800a516:	e00b      	b.n	800a530 <osMailPut+0x6c>
  }
  else {
    if (xQueueSend(queue_id->handle, &mail, 0) != pdTRUE) { 
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6858      	ldr	r0, [r3, #4]
 800a51c:	4639      	mov	r1, r7
 800a51e:	2300      	movs	r3, #0
 800a520:	2200      	movs	r2, #0
 800a522:	f000 faf9 	bl	800ab18 <xQueueGenericSend>
 800a526:	4603      	mov	r3, r0
 800a528:	2b01      	cmp	r3, #1
 800a52a:	d001      	beq.n	800a530 <osMailPut+0x6c>
      return osErrorOS;
 800a52c:	23ff      	movs	r3, #255	; 0xff
 800a52e:	e000      	b.n	800a532 <osMailPut+0x6e>
    }
  }
  
  return osOK;
 800a530:	2300      	movs	r3, #0
}
 800a532:	4618      	mov	r0, r3
 800a534:	3710      	adds	r7, #16
 800a536:	46bd      	mov	sp, r7
 800a538:	bd80      	pop	{r7, pc}
 800a53a:	bf00      	nop
 800a53c:	e000ed04 	.word	0xe000ed04

0800a540 <osMailGet>:
* @param millisec    timeout value or 0 in case of no time-out
* @retval event that contains mail information or error code.
* @note   MUST REMAIN UNCHANGED: \b osMailGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMailGet (osMailQId queue_id, uint32_t millisec)
{
 800a540:	b590      	push	{r4, r7, lr}
 800a542:	b08b      	sub	sp, #44	; 0x2c
 800a544:	af00      	add	r7, sp, #0
 800a546:	60f8      	str	r0, [r7, #12]
 800a548:	60b9      	str	r1, [r7, #8]
 800a54a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.mail_id = queue_id;
 800a54c:	68bb      	ldr	r3, [r7, #8]
 800a54e:	61fb      	str	r3, [r7, #28]
  
  if (queue_id == NULL) {
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	2b00      	cmp	r3, #0
 800a554:	d10a      	bne.n	800a56c <osMailGet+0x2c>
    event.status = osErrorParameter;
 800a556:	2380      	movs	r3, #128	; 0x80
 800a558:	617b      	str	r3, [r7, #20]
    return event;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	461c      	mov	r4, r3
 800a55e:	f107 0314 	add.w	r3, r7, #20
 800a562:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a566:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a56a:	e056      	b.n	800a61a <osMailGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800a56c:	2300      	movs	r3, #0
 800a56e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800a570:	2300      	movs	r3, #0
 800a572:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a57a:	d103      	bne.n	800a584 <osMailGet+0x44>
    ticks = portMAX_DELAY;
 800a57c:	f04f 33ff 	mov.w	r3, #4294967295
 800a580:	627b      	str	r3, [r7, #36]	; 0x24
 800a582:	e009      	b.n	800a598 <osMailGet+0x58>
  }
  else if (millisec != 0) {
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d006      	beq.n	800a598 <osMailGet+0x58>
    ticks = millisec / portTICK_PERIOD_MS;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800a58e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a590:	2b00      	cmp	r3, #0
 800a592:	d101      	bne.n	800a598 <osMailGet+0x58>
      ticks = 1;
 800a594:	2301      	movs	r3, #1
 800a596:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800a598:	f7ff fb5a 	bl	8009c50 <inHandlerMode>
 800a59c:	4603      	mov	r3, r0
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d01d      	beq.n	800a5de <osMailGet+0x9e>
    if (xQueueReceiveFromISR(queue_id->handle, &event.value.p, &taskWoken) == pdTRUE) {
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	6858      	ldr	r0, [r3, #4]
 800a5a6:	f107 0220 	add.w	r2, r7, #32
 800a5aa:	f107 0314 	add.w	r3, r7, #20
 800a5ae:	3304      	adds	r3, #4
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	f000 fec3 	bl	800b33c <xQueueReceiveFromISR>
 800a5b6:	4603      	mov	r3, r0
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d102      	bne.n	800a5c2 <osMailGet+0x82>
      /* We have mail */
      event.status = osEventMail;
 800a5bc:	2320      	movs	r3, #32
 800a5be:	617b      	str	r3, [r7, #20]
 800a5c0:	e001      	b.n	800a5c6 <osMailGet+0x86>
    }
    else {
      event.status = osOK;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800a5c6:	6a3b      	ldr	r3, [r7, #32]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d01e      	beq.n	800a60a <osMailGet+0xca>
 800a5cc:	4b15      	ldr	r3, [pc, #84]	; (800a624 <osMailGet+0xe4>)
 800a5ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5d2:	601a      	str	r2, [r3, #0]
 800a5d4:	f3bf 8f4f 	dsb	sy
 800a5d8:	f3bf 8f6f 	isb	sy
 800a5dc:	e015      	b.n	800a60a <osMailGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id->handle, &event.value.p, ticks) == pdTRUE) {
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	6858      	ldr	r0, [r3, #4]
 800a5e2:	f107 0314 	add.w	r3, r7, #20
 800a5e6:	3304      	adds	r3, #4
 800a5e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	f000 fcba 	bl	800af64 <xQueueReceive>
 800a5f0:	4603      	mov	r3, r0
 800a5f2:	2b01      	cmp	r3, #1
 800a5f4:	d102      	bne.n	800a5fc <osMailGet+0xbc>
      /* We have mail */
      event.status = osEventMail;
 800a5f6:	2320      	movs	r3, #32
 800a5f8:	617b      	str	r3, [r7, #20]
 800a5fa:	e006      	b.n	800a60a <osMailGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800a5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d101      	bne.n	800a606 <osMailGet+0xc6>
 800a602:	2300      	movs	r3, #0
 800a604:	e000      	b.n	800a608 <osMailGet+0xc8>
 800a606:	2340      	movs	r3, #64	; 0x40
 800a608:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	461c      	mov	r4, r3
 800a60e:	f107 0314 	add.w	r3, r7, #20
 800a612:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a616:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800a61a:	68f8      	ldr	r0, [r7, #12]
 800a61c:	372c      	adds	r7, #44	; 0x2c
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd90      	pop	{r4, r7, pc}
 800a622:	bf00      	nop
 800a624:	e000ed04 	.word	0xe000ed04

0800a628 <osMailFree>:
* @param  mail     pointer to the memory block that was obtained with \ref osMailGet.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMailFree shall be consistent in every CMSIS-RTOS.
*/
osStatus osMailFree (osMailQId queue_id, void *mail)
{
 800a628:	b580      	push	{r7, lr}
 800a62a:	b082      	sub	sp, #8
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
  if (queue_id == NULL) {
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d101      	bne.n	800a63c <osMailFree+0x14>
    return osErrorParameter;
 800a638:	2380      	movs	r3, #128	; 0x80
 800a63a:	e006      	b.n	800a64a <osMailFree+0x22>
  }
  
  return osPoolFree(queue_id->pool, mail);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	689b      	ldr	r3, [r3, #8]
 800a640:	6839      	ldr	r1, [r7, #0]
 800a642:	4618      	mov	r0, r3
 800a644:	f7ff fdb2 	bl	800a1ac <osPoolFree>
 800a648:	4603      	mov	r3, r0
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3708      	adds	r7, #8
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}

0800a652 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800a652:	b580      	push	{r7, lr}
 800a654:	b082      	sub	sp, #8
 800a656:	af00      	add	r7, sp, #0
 800a658:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a65a:	f7ff faf9 	bl	8009c50 <inHandlerMode>
 800a65e:	4603      	mov	r3, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d004      	beq.n	800a66e <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f000 ff07 	bl	800b478 <uxQueueMessagesWaitingFromISR>
 800a66a:	4603      	mov	r3, r0
 800a66c:	e003      	b.n	800a676 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800a66e:	6878      	ldr	r0, [r7, #4]
 800a670:	f000 fee4 	bl	800b43c <uxQueueMessagesWaiting>
 800a674:	4603      	mov	r3, r0
  }
}
 800a676:	4618      	mov	r0, r3
 800a678:	3708      	adds	r7, #8
 800a67a:	46bd      	mov	sp, r7
 800a67c:	bd80      	pop	{r7, pc}

0800a67e <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800a67e:	b580      	push	{r7, lr}
 800a680:	b082      	sub	sp, #8
 800a682:	af00      	add	r7, sp, #0
 800a684:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800a686:	f7ff fae3 	bl	8009c50 <inHandlerMode>
 800a68a:	4603      	mov	r3, r0
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d001      	beq.n	800a694 <osMessageDelete+0x16>
    return osErrorISR;
 800a690:	2382      	movs	r3, #130	; 0x82
 800a692:	e003      	b.n	800a69c <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800a694:	6878      	ldr	r0, [r7, #4]
 800a696:	f000 ff0d 	bl	800b4b4 <vQueueDelete>

  return osOK; 
 800a69a:	2300      	movs	r3, #0
}
 800a69c:	4618      	mov	r0, r3
 800a69e:	3708      	adds	r7, #8
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}

0800a6a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b083      	sub	sp, #12
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f103 0208 	add.w	r2, r3, #8
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	f04f 32ff 	mov.w	r2, #4294967295
 800a6bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f103 0208 	add.w	r2, r3, #8
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f103 0208 	add.w	r2, r3, #8
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2200      	movs	r2, #0
 800a6d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a6d8:	bf00      	nop
 800a6da:	370c      	adds	r7, #12
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e2:	4770      	bx	lr

0800a6e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a6e4:	b480      	push	{r7}
 800a6e6:	b083      	sub	sp, #12
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a6f2:	bf00      	nop
 800a6f4:	370c      	adds	r7, #12
 800a6f6:	46bd      	mov	sp, r7
 800a6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fc:	4770      	bx	lr

0800a6fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a6fe:	b480      	push	{r7}
 800a700:	b085      	sub	sp, #20
 800a702:	af00      	add	r7, sp, #0
 800a704:	6078      	str	r0, [r7, #4]
 800a706:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	685b      	ldr	r3, [r3, #4]
 800a70c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	68fa      	ldr	r2, [r7, #12]
 800a712:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	689a      	ldr	r2, [r3, #8]
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	689b      	ldr	r3, [r3, #8]
 800a720:	683a      	ldr	r2, [r7, #0]
 800a722:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	683a      	ldr	r2, [r7, #0]
 800a728:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	687a      	ldr	r2, [r7, #4]
 800a72e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	1c5a      	adds	r2, r3, #1
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	601a      	str	r2, [r3, #0]
}
 800a73a:	bf00      	nop
 800a73c:	3714      	adds	r7, #20
 800a73e:	46bd      	mov	sp, r7
 800a740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a744:	4770      	bx	lr

0800a746 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a746:	b480      	push	{r7}
 800a748:	b085      	sub	sp, #20
 800a74a:	af00      	add	r7, sp, #0
 800a74c:	6078      	str	r0, [r7, #4]
 800a74e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a750:	683b      	ldr	r3, [r7, #0]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a75c:	d103      	bne.n	800a766 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	691b      	ldr	r3, [r3, #16]
 800a762:	60fb      	str	r3, [r7, #12]
 800a764:	e00c      	b.n	800a780 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	3308      	adds	r3, #8
 800a76a:	60fb      	str	r3, [r7, #12]
 800a76c:	e002      	b.n	800a774 <vListInsert+0x2e>
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	685b      	ldr	r3, [r3, #4]
 800a772:	60fb      	str	r3, [r7, #12]
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	68ba      	ldr	r2, [r7, #8]
 800a77c:	429a      	cmp	r2, r3
 800a77e:	d2f6      	bcs.n	800a76e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	685a      	ldr	r2, [r3, #4]
 800a784:	683b      	ldr	r3, [r7, #0]
 800a786:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a788:	683b      	ldr	r3, [r7, #0]
 800a78a:	685b      	ldr	r3, [r3, #4]
 800a78c:	683a      	ldr	r2, [r7, #0]
 800a78e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	68fa      	ldr	r2, [r7, #12]
 800a794:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	683a      	ldr	r2, [r7, #0]
 800a79a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	687a      	ldr	r2, [r7, #4]
 800a7a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	1c5a      	adds	r2, r3, #1
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	601a      	str	r2, [r3, #0]
}
 800a7ac:	bf00      	nop
 800a7ae:	3714      	adds	r7, #20
 800a7b0:	46bd      	mov	sp, r7
 800a7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b6:	4770      	bx	lr

0800a7b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a7b8:	b480      	push	{r7}
 800a7ba:	b085      	sub	sp, #20
 800a7bc:	af00      	add	r7, sp, #0
 800a7be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	691b      	ldr	r3, [r3, #16]
 800a7c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	687a      	ldr	r2, [r7, #4]
 800a7cc:	6892      	ldr	r2, [r2, #8]
 800a7ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	689b      	ldr	r3, [r3, #8]
 800a7d4:	687a      	ldr	r2, [r7, #4]
 800a7d6:	6852      	ldr	r2, [r2, #4]
 800a7d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	685b      	ldr	r3, [r3, #4]
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	d103      	bne.n	800a7ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	689a      	ldr	r2, [r3, #8]
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	1e5a      	subs	r2, r3, #1
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
}
 800a800:	4618      	mov	r0, r3
 800a802:	3714      	adds	r7, #20
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr

0800a80c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b084      	sub	sp, #16
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d10a      	bne.n	800a836 <xQueueGenericReset+0x2a>
	__asm volatile
 800a820:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a824:	f383 8811 	msr	BASEPRI, r3
 800a828:	f3bf 8f6f 	isb	sy
 800a82c:	f3bf 8f4f 	dsb	sy
 800a830:	60bb      	str	r3, [r7, #8]
}
 800a832:	bf00      	nop
 800a834:	e7fe      	b.n	800a834 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a836:	f002 f915 	bl	800ca64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	681a      	ldr	r2, [r3, #0]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a842:	68f9      	ldr	r1, [r7, #12]
 800a844:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a846:	fb01 f303 	mul.w	r3, r1, r3
 800a84a:	441a      	add	r2, r3
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2200      	movs	r2, #0
 800a854:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681a      	ldr	r2, [r3, #0]
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681a      	ldr	r2, [r3, #0]
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a866:	3b01      	subs	r3, #1
 800a868:	68f9      	ldr	r1, [r7, #12]
 800a86a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a86c:	fb01 f303 	mul.w	r3, r1, r3
 800a870:	441a      	add	r2, r3
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	22ff      	movs	r2, #255	; 0xff
 800a87a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	22ff      	movs	r2, #255	; 0xff
 800a882:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a886:	683b      	ldr	r3, [r7, #0]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d114      	bne.n	800a8b6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	691b      	ldr	r3, [r3, #16]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d01a      	beq.n	800a8ca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	3310      	adds	r3, #16
 800a898:	4618      	mov	r0, r3
 800a89a:	f001 fbd3 	bl	800c044 <xTaskRemoveFromEventList>
 800a89e:	4603      	mov	r3, r0
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d012      	beq.n	800a8ca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a8a4:	4b0c      	ldr	r3, [pc, #48]	; (800a8d8 <xQueueGenericReset+0xcc>)
 800a8a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8aa:	601a      	str	r2, [r3, #0]
 800a8ac:	f3bf 8f4f 	dsb	sy
 800a8b0:	f3bf 8f6f 	isb	sy
 800a8b4:	e009      	b.n	800a8ca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	3310      	adds	r3, #16
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7ff fef2 	bl	800a6a4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	3324      	adds	r3, #36	; 0x24
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f7ff feed 	bl	800a6a4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a8ca:	f002 f8fb 	bl	800cac4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a8ce:	2301      	movs	r3, #1
}
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	3710      	adds	r7, #16
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}
 800a8d8:	e000ed04 	.word	0xe000ed04

0800a8dc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b08e      	sub	sp, #56	; 0x38
 800a8e0:	af02      	add	r7, sp, #8
 800a8e2:	60f8      	str	r0, [r7, #12]
 800a8e4:	60b9      	str	r1, [r7, #8]
 800a8e6:	607a      	str	r2, [r7, #4]
 800a8e8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d10a      	bne.n	800a906 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f4:	f383 8811 	msr	BASEPRI, r3
 800a8f8:	f3bf 8f6f 	isb	sy
 800a8fc:	f3bf 8f4f 	dsb	sy
 800a900:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a902:	bf00      	nop
 800a904:	e7fe      	b.n	800a904 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d10a      	bne.n	800a922 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a90c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a910:	f383 8811 	msr	BASEPRI, r3
 800a914:	f3bf 8f6f 	isb	sy
 800a918:	f3bf 8f4f 	dsb	sy
 800a91c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a91e:	bf00      	nop
 800a920:	e7fe      	b.n	800a920 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d002      	beq.n	800a92e <xQueueGenericCreateStatic+0x52>
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d001      	beq.n	800a932 <xQueueGenericCreateStatic+0x56>
 800a92e:	2301      	movs	r3, #1
 800a930:	e000      	b.n	800a934 <xQueueGenericCreateStatic+0x58>
 800a932:	2300      	movs	r3, #0
 800a934:	2b00      	cmp	r3, #0
 800a936:	d10a      	bne.n	800a94e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a93c:	f383 8811 	msr	BASEPRI, r3
 800a940:	f3bf 8f6f 	isb	sy
 800a944:	f3bf 8f4f 	dsb	sy
 800a948:	623b      	str	r3, [r7, #32]
}
 800a94a:	bf00      	nop
 800a94c:	e7fe      	b.n	800a94c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d102      	bne.n	800a95a <xQueueGenericCreateStatic+0x7e>
 800a954:	68bb      	ldr	r3, [r7, #8]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d101      	bne.n	800a95e <xQueueGenericCreateStatic+0x82>
 800a95a:	2301      	movs	r3, #1
 800a95c:	e000      	b.n	800a960 <xQueueGenericCreateStatic+0x84>
 800a95e:	2300      	movs	r3, #0
 800a960:	2b00      	cmp	r3, #0
 800a962:	d10a      	bne.n	800a97a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a968:	f383 8811 	msr	BASEPRI, r3
 800a96c:	f3bf 8f6f 	isb	sy
 800a970:	f3bf 8f4f 	dsb	sy
 800a974:	61fb      	str	r3, [r7, #28]
}
 800a976:	bf00      	nop
 800a978:	e7fe      	b.n	800a978 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a97a:	2348      	movs	r3, #72	; 0x48
 800a97c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	2b48      	cmp	r3, #72	; 0x48
 800a982:	d00a      	beq.n	800a99a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a984:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a988:	f383 8811 	msr	BASEPRI, r3
 800a98c:	f3bf 8f6f 	isb	sy
 800a990:	f3bf 8f4f 	dsb	sy
 800a994:	61bb      	str	r3, [r7, #24]
}
 800a996:	bf00      	nop
 800a998:	e7fe      	b.n	800a998 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a99a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d00d      	beq.n	800a9c2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a8:	2201      	movs	r2, #1
 800a9aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a9ae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a9b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9b4:	9300      	str	r3, [sp, #0]
 800a9b6:	4613      	mov	r3, r2
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	68b9      	ldr	r1, [r7, #8]
 800a9bc:	68f8      	ldr	r0, [r7, #12]
 800a9be:	f000 f83f 	bl	800aa40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a9c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3730      	adds	r7, #48	; 0x30
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}

0800a9cc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b08a      	sub	sp, #40	; 0x28
 800a9d0:	af02      	add	r7, sp, #8
 800a9d2:	60f8      	str	r0, [r7, #12]
 800a9d4:	60b9      	str	r1, [r7, #8]
 800a9d6:	4613      	mov	r3, r2
 800a9d8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d10a      	bne.n	800a9f6 <xQueueGenericCreate+0x2a>
	__asm volatile
 800a9e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9e4:	f383 8811 	msr	BASEPRI, r3
 800a9e8:	f3bf 8f6f 	isb	sy
 800a9ec:	f3bf 8f4f 	dsb	sy
 800a9f0:	613b      	str	r3, [r7, #16]
}
 800a9f2:	bf00      	nop
 800a9f4:	e7fe      	b.n	800a9f4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	68ba      	ldr	r2, [r7, #8]
 800a9fa:	fb02 f303 	mul.w	r3, r2, r3
 800a9fe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800aa00:	69fb      	ldr	r3, [r7, #28]
 800aa02:	3348      	adds	r3, #72	; 0x48
 800aa04:	4618      	mov	r0, r3
 800aa06:	f002 f94f 	bl	800cca8 <pvPortMalloc>
 800aa0a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800aa0c:	69bb      	ldr	r3, [r7, #24]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d011      	beq.n	800aa36 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800aa12:	69bb      	ldr	r3, [r7, #24]
 800aa14:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	3348      	adds	r3, #72	; 0x48
 800aa1a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	2200      	movs	r2, #0
 800aa20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800aa24:	79fa      	ldrb	r2, [r7, #7]
 800aa26:	69bb      	ldr	r3, [r7, #24]
 800aa28:	9300      	str	r3, [sp, #0]
 800aa2a:	4613      	mov	r3, r2
 800aa2c:	697a      	ldr	r2, [r7, #20]
 800aa2e:	68b9      	ldr	r1, [r7, #8]
 800aa30:	68f8      	ldr	r0, [r7, #12]
 800aa32:	f000 f805 	bl	800aa40 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800aa36:	69bb      	ldr	r3, [r7, #24]
	}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3720      	adds	r7, #32
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}

0800aa40 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800aa40:	b580      	push	{r7, lr}
 800aa42:	b084      	sub	sp, #16
 800aa44:	af00      	add	r7, sp, #0
 800aa46:	60f8      	str	r0, [r7, #12]
 800aa48:	60b9      	str	r1, [r7, #8]
 800aa4a:	607a      	str	r2, [r7, #4]
 800aa4c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d103      	bne.n	800aa5c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800aa54:	69bb      	ldr	r3, [r7, #24]
 800aa56:	69ba      	ldr	r2, [r7, #24]
 800aa58:	601a      	str	r2, [r3, #0]
 800aa5a:	e002      	b.n	800aa62 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aa5c:	69bb      	ldr	r3, [r7, #24]
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800aa62:	69bb      	ldr	r3, [r7, #24]
 800aa64:	68fa      	ldr	r2, [r7, #12]
 800aa66:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aa68:	69bb      	ldr	r3, [r7, #24]
 800aa6a:	68ba      	ldr	r2, [r7, #8]
 800aa6c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aa6e:	2101      	movs	r1, #1
 800aa70:	69b8      	ldr	r0, [r7, #24]
 800aa72:	f7ff fecb 	bl	800a80c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800aa76:	bf00      	nop
 800aa78:	3710      	adds	r7, #16
 800aa7a:	46bd      	mov	sp, r7
 800aa7c:	bd80      	pop	{r7, pc}

0800aa7e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800aa7e:	b580      	push	{r7, lr}
 800aa80:	b082      	sub	sp, #8
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d00e      	beq.n	800aaaa <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2200      	movs	r2, #0
 800aa96:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800aa9e:	2300      	movs	r3, #0
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	6878      	ldr	r0, [r7, #4]
 800aaa6:	f000 f837 	bl	800ab18 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800aaaa:	bf00      	nop
 800aaac:	3708      	adds	r7, #8
 800aaae:	46bd      	mov	sp, r7
 800aab0:	bd80      	pop	{r7, pc}

0800aab2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800aab2:	b580      	push	{r7, lr}
 800aab4:	b086      	sub	sp, #24
 800aab6:	af00      	add	r7, sp, #0
 800aab8:	4603      	mov	r3, r0
 800aaba:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800aabc:	2301      	movs	r3, #1
 800aabe:	617b      	str	r3, [r7, #20]
 800aac0:	2300      	movs	r3, #0
 800aac2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800aac4:	79fb      	ldrb	r3, [r7, #7]
 800aac6:	461a      	mov	r2, r3
 800aac8:	6939      	ldr	r1, [r7, #16]
 800aaca:	6978      	ldr	r0, [r7, #20]
 800aacc:	f7ff ff7e 	bl	800a9cc <xQueueGenericCreate>
 800aad0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800aad2:	68f8      	ldr	r0, [r7, #12]
 800aad4:	f7ff ffd3 	bl	800aa7e <prvInitialiseMutex>

		return xNewQueue;
 800aad8:	68fb      	ldr	r3, [r7, #12]
	}
 800aada:	4618      	mov	r0, r3
 800aadc:	3718      	adds	r7, #24
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}

0800aae2 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800aae2:	b580      	push	{r7, lr}
 800aae4:	b088      	sub	sp, #32
 800aae6:	af02      	add	r7, sp, #8
 800aae8:	4603      	mov	r3, r0
 800aaea:	6039      	str	r1, [r7, #0]
 800aaec:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800aaee:	2301      	movs	r3, #1
 800aaf0:	617b      	str	r3, [r7, #20]
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800aaf6:	79fb      	ldrb	r3, [r7, #7]
 800aaf8:	9300      	str	r3, [sp, #0]
 800aafa:	683b      	ldr	r3, [r7, #0]
 800aafc:	2200      	movs	r2, #0
 800aafe:	6939      	ldr	r1, [r7, #16]
 800ab00:	6978      	ldr	r0, [r7, #20]
 800ab02:	f7ff feeb 	bl	800a8dc <xQueueGenericCreateStatic>
 800ab06:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800ab08:	68f8      	ldr	r0, [r7, #12]
 800ab0a:	f7ff ffb8 	bl	800aa7e <prvInitialiseMutex>

		return xNewQueue;
 800ab0e:	68fb      	ldr	r3, [r7, #12]
	}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3718      	adds	r7, #24
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b08e      	sub	sp, #56	; 0x38
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	60f8      	str	r0, [r7, #12]
 800ab20:	60b9      	str	r1, [r7, #8]
 800ab22:	607a      	str	r2, [r7, #4]
 800ab24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ab26:	2300      	movs	r3, #0
 800ab28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ab2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d10a      	bne.n	800ab4a <xQueueGenericSend+0x32>
	__asm volatile
 800ab34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab38:	f383 8811 	msr	BASEPRI, r3
 800ab3c:	f3bf 8f6f 	isb	sy
 800ab40:	f3bf 8f4f 	dsb	sy
 800ab44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ab46:	bf00      	nop
 800ab48:	e7fe      	b.n	800ab48 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d103      	bne.n	800ab58 <xQueueGenericSend+0x40>
 800ab50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d101      	bne.n	800ab5c <xQueueGenericSend+0x44>
 800ab58:	2301      	movs	r3, #1
 800ab5a:	e000      	b.n	800ab5e <xQueueGenericSend+0x46>
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d10a      	bne.n	800ab78 <xQueueGenericSend+0x60>
	__asm volatile
 800ab62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab66:	f383 8811 	msr	BASEPRI, r3
 800ab6a:	f3bf 8f6f 	isb	sy
 800ab6e:	f3bf 8f4f 	dsb	sy
 800ab72:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ab74:	bf00      	nop
 800ab76:	e7fe      	b.n	800ab76 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ab78:	683b      	ldr	r3, [r7, #0]
 800ab7a:	2b02      	cmp	r3, #2
 800ab7c:	d103      	bne.n	800ab86 <xQueueGenericSend+0x6e>
 800ab7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab82:	2b01      	cmp	r3, #1
 800ab84:	d101      	bne.n	800ab8a <xQueueGenericSend+0x72>
 800ab86:	2301      	movs	r3, #1
 800ab88:	e000      	b.n	800ab8c <xQueueGenericSend+0x74>
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d10a      	bne.n	800aba6 <xQueueGenericSend+0x8e>
	__asm volatile
 800ab90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab94:	f383 8811 	msr	BASEPRI, r3
 800ab98:	f3bf 8f6f 	isb	sy
 800ab9c:	f3bf 8f4f 	dsb	sy
 800aba0:	623b      	str	r3, [r7, #32]
}
 800aba2:	bf00      	nop
 800aba4:	e7fe      	b.n	800aba4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aba6:	f001 fc0d 	bl	800c3c4 <xTaskGetSchedulerState>
 800abaa:	4603      	mov	r3, r0
 800abac:	2b00      	cmp	r3, #0
 800abae:	d102      	bne.n	800abb6 <xQueueGenericSend+0x9e>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d101      	bne.n	800abba <xQueueGenericSend+0xa2>
 800abb6:	2301      	movs	r3, #1
 800abb8:	e000      	b.n	800abbc <xQueueGenericSend+0xa4>
 800abba:	2300      	movs	r3, #0
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d10a      	bne.n	800abd6 <xQueueGenericSend+0xbe>
	__asm volatile
 800abc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abc4:	f383 8811 	msr	BASEPRI, r3
 800abc8:	f3bf 8f6f 	isb	sy
 800abcc:	f3bf 8f4f 	dsb	sy
 800abd0:	61fb      	str	r3, [r7, #28]
}
 800abd2:	bf00      	nop
 800abd4:	e7fe      	b.n	800abd4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800abd6:	f001 ff45 	bl	800ca64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800abda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800abde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d302      	bcc.n	800abec <xQueueGenericSend+0xd4>
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	2b02      	cmp	r3, #2
 800abea:	d129      	bne.n	800ac40 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800abec:	683a      	ldr	r2, [r7, #0]
 800abee:	68b9      	ldr	r1, [r7, #8]
 800abf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800abf2:	f000 fc9a 	bl	800b52a <prvCopyDataToQueue>
 800abf6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800abf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d010      	beq.n	800ac22 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac02:	3324      	adds	r3, #36	; 0x24
 800ac04:	4618      	mov	r0, r3
 800ac06:	f001 fa1d 	bl	800c044 <xTaskRemoveFromEventList>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d013      	beq.n	800ac38 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ac10:	4b3f      	ldr	r3, [pc, #252]	; (800ad10 <xQueueGenericSend+0x1f8>)
 800ac12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac16:	601a      	str	r2, [r3, #0]
 800ac18:	f3bf 8f4f 	dsb	sy
 800ac1c:	f3bf 8f6f 	isb	sy
 800ac20:	e00a      	b.n	800ac38 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ac22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d007      	beq.n	800ac38 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ac28:	4b39      	ldr	r3, [pc, #228]	; (800ad10 <xQueueGenericSend+0x1f8>)
 800ac2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac2e:	601a      	str	r2, [r3, #0]
 800ac30:	f3bf 8f4f 	dsb	sy
 800ac34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ac38:	f001 ff44 	bl	800cac4 <vPortExitCritical>
				return pdPASS;
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	e063      	b.n	800ad08 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d103      	bne.n	800ac4e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac46:	f001 ff3d 	bl	800cac4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	e05c      	b.n	800ad08 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d106      	bne.n	800ac62 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac54:	f107 0314 	add.w	r3, r7, #20
 800ac58:	4618      	mov	r0, r3
 800ac5a:	f001 fa55 	bl	800c108 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac5e:	2301      	movs	r3, #1
 800ac60:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac62:	f001 ff2f 	bl	800cac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac66:	f000 ffe3 	bl	800bc30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac6a:	f001 fefb 	bl	800ca64 <vPortEnterCritical>
 800ac6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac74:	b25b      	sxtb	r3, r3
 800ac76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac7a:	d103      	bne.n	800ac84 <xQueueGenericSend+0x16c>
 800ac7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac7e:	2200      	movs	r2, #0
 800ac80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ac84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ac8a:	b25b      	sxtb	r3, r3
 800ac8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac90:	d103      	bne.n	800ac9a <xQueueGenericSend+0x182>
 800ac92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac94:	2200      	movs	r2, #0
 800ac96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ac9a:	f001 ff13 	bl	800cac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ac9e:	1d3a      	adds	r2, r7, #4
 800aca0:	f107 0314 	add.w	r3, r7, #20
 800aca4:	4611      	mov	r1, r2
 800aca6:	4618      	mov	r0, r3
 800aca8:	f001 fa44 	bl	800c134 <xTaskCheckForTimeOut>
 800acac:	4603      	mov	r3, r0
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d124      	bne.n	800acfc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800acb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acb4:	f000 fd31 	bl	800b71a <prvIsQueueFull>
 800acb8:	4603      	mov	r3, r0
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d018      	beq.n	800acf0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800acbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc0:	3310      	adds	r3, #16
 800acc2:	687a      	ldr	r2, [r7, #4]
 800acc4:	4611      	mov	r1, r2
 800acc6:	4618      	mov	r0, r3
 800acc8:	f001 f998 	bl	800bffc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800accc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acce:	f000 fcbc 	bl	800b64a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800acd2:	f000 ffbb 	bl	800bc4c <xTaskResumeAll>
 800acd6:	4603      	mov	r3, r0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	f47f af7c 	bne.w	800abd6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800acde:	4b0c      	ldr	r3, [pc, #48]	; (800ad10 <xQueueGenericSend+0x1f8>)
 800ace0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ace4:	601a      	str	r2, [r3, #0]
 800ace6:	f3bf 8f4f 	dsb	sy
 800acea:	f3bf 8f6f 	isb	sy
 800acee:	e772      	b.n	800abd6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800acf0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acf2:	f000 fcaa 	bl	800b64a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800acf6:	f000 ffa9 	bl	800bc4c <xTaskResumeAll>
 800acfa:	e76c      	b.n	800abd6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800acfc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800acfe:	f000 fca4 	bl	800b64a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad02:	f000 ffa3 	bl	800bc4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ad06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ad08:	4618      	mov	r0, r3
 800ad0a:	3738      	adds	r7, #56	; 0x38
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	bd80      	pop	{r7, pc}
 800ad10:	e000ed04 	.word	0xe000ed04

0800ad14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b090      	sub	sp, #64	; 0x40
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	60f8      	str	r0, [r7, #12]
 800ad1c:	60b9      	str	r1, [r7, #8]
 800ad1e:	607a      	str	r2, [r7, #4]
 800ad20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ad26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d10a      	bne.n	800ad42 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ad2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad30:	f383 8811 	msr	BASEPRI, r3
 800ad34:	f3bf 8f6f 	isb	sy
 800ad38:	f3bf 8f4f 	dsb	sy
 800ad3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ad3e:	bf00      	nop
 800ad40:	e7fe      	b.n	800ad40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d103      	bne.n	800ad50 <xQueueGenericSendFromISR+0x3c>
 800ad48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d101      	bne.n	800ad54 <xQueueGenericSendFromISR+0x40>
 800ad50:	2301      	movs	r3, #1
 800ad52:	e000      	b.n	800ad56 <xQueueGenericSendFromISR+0x42>
 800ad54:	2300      	movs	r3, #0
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d10a      	bne.n	800ad70 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800ad5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad5e:	f383 8811 	msr	BASEPRI, r3
 800ad62:	f3bf 8f6f 	isb	sy
 800ad66:	f3bf 8f4f 	dsb	sy
 800ad6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ad6c:	bf00      	nop
 800ad6e:	e7fe      	b.n	800ad6e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad70:	683b      	ldr	r3, [r7, #0]
 800ad72:	2b02      	cmp	r3, #2
 800ad74:	d103      	bne.n	800ad7e <xQueueGenericSendFromISR+0x6a>
 800ad76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d101      	bne.n	800ad82 <xQueueGenericSendFromISR+0x6e>
 800ad7e:	2301      	movs	r3, #1
 800ad80:	e000      	b.n	800ad84 <xQueueGenericSendFromISR+0x70>
 800ad82:	2300      	movs	r3, #0
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d10a      	bne.n	800ad9e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ad88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad8c:	f383 8811 	msr	BASEPRI, r3
 800ad90:	f3bf 8f6f 	isb	sy
 800ad94:	f3bf 8f4f 	dsb	sy
 800ad98:	623b      	str	r3, [r7, #32]
}
 800ad9a:	bf00      	nop
 800ad9c:	e7fe      	b.n	800ad9c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ad9e:	f001 ff43 	bl	800cc28 <vPortValidateInterruptPriority>
	__asm volatile
 800ada2:	f3ef 8211 	mrs	r2, BASEPRI
 800ada6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adaa:	f383 8811 	msr	BASEPRI, r3
 800adae:	f3bf 8f6f 	isb	sy
 800adb2:	f3bf 8f4f 	dsb	sy
 800adb6:	61fa      	str	r2, [r7, #28]
 800adb8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800adba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800adbc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800adbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adc6:	429a      	cmp	r2, r3
 800adc8:	d302      	bcc.n	800add0 <xQueueGenericSendFromISR+0xbc>
 800adca:	683b      	ldr	r3, [r7, #0]
 800adcc:	2b02      	cmp	r3, #2
 800adce:	d12f      	bne.n	800ae30 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800add0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800add6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800adda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800addc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adde:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ade0:	683a      	ldr	r2, [r7, #0]
 800ade2:	68b9      	ldr	r1, [r7, #8]
 800ade4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ade6:	f000 fba0 	bl	800b52a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800adea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800adee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adf2:	d112      	bne.n	800ae1a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800adf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d016      	beq.n	800ae2a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800adfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adfe:	3324      	adds	r3, #36	; 0x24
 800ae00:	4618      	mov	r0, r3
 800ae02:	f001 f91f 	bl	800c044 <xTaskRemoveFromEventList>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d00e      	beq.n	800ae2a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d00b      	beq.n	800ae2a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	2201      	movs	r2, #1
 800ae16:	601a      	str	r2, [r3, #0]
 800ae18:	e007      	b.n	800ae2a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ae1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ae1e:	3301      	adds	r3, #1
 800ae20:	b2db      	uxtb	r3, r3
 800ae22:	b25a      	sxtb	r2, r3
 800ae24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ae2a:	2301      	movs	r3, #1
 800ae2c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ae2e:	e001      	b.n	800ae34 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ae30:	2300      	movs	r3, #0
 800ae32:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae36:	617b      	str	r3, [r7, #20]
	__asm volatile
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	f383 8811 	msr	BASEPRI, r3
}
 800ae3e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ae40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3740      	adds	r7, #64	; 0x40
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b08e      	sub	sp, #56	; 0x38
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
 800ae52:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800ae58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d10a      	bne.n	800ae74 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800ae5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae62:	f383 8811 	msr	BASEPRI, r3
 800ae66:	f3bf 8f6f 	isb	sy
 800ae6a:	f3bf 8f4f 	dsb	sy
 800ae6e:	623b      	str	r3, [r7, #32]
}
 800ae70:	bf00      	nop
 800ae72:	e7fe      	b.n	800ae72 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ae74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d00a      	beq.n	800ae92 <xQueueGiveFromISR+0x48>
	__asm volatile
 800ae7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae80:	f383 8811 	msr	BASEPRI, r3
 800ae84:	f3bf 8f6f 	isb	sy
 800ae88:	f3bf 8f4f 	dsb	sy
 800ae8c:	61fb      	str	r3, [r7, #28]
}
 800ae8e:	bf00      	nop
 800ae90:	e7fe      	b.n	800ae90 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ae92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d103      	bne.n	800aea2 <xQueueGiveFromISR+0x58>
 800ae9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae9c:	689b      	ldr	r3, [r3, #8]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d101      	bne.n	800aea6 <xQueueGiveFromISR+0x5c>
 800aea2:	2301      	movs	r3, #1
 800aea4:	e000      	b.n	800aea8 <xQueueGiveFromISR+0x5e>
 800aea6:	2300      	movs	r3, #0
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d10a      	bne.n	800aec2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800aeac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb0:	f383 8811 	msr	BASEPRI, r3
 800aeb4:	f3bf 8f6f 	isb	sy
 800aeb8:	f3bf 8f4f 	dsb	sy
 800aebc:	61bb      	str	r3, [r7, #24]
}
 800aebe:	bf00      	nop
 800aec0:	e7fe      	b.n	800aec0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aec2:	f001 feb1 	bl	800cc28 <vPortValidateInterruptPriority>
	__asm volatile
 800aec6:	f3ef 8211 	mrs	r2, BASEPRI
 800aeca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aece:	f383 8811 	msr	BASEPRI, r3
 800aed2:	f3bf 8f6f 	isb	sy
 800aed6:	f3bf 8f4f 	dsb	sy
 800aeda:	617a      	str	r2, [r7, #20]
 800aedc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800aede:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aee0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aee2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aee6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800aee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aeec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aeee:	429a      	cmp	r2, r3
 800aef0:	d22b      	bcs.n	800af4a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800aef2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aef8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aefc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aefe:	1c5a      	adds	r2, r3, #1
 800af00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af02:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800af04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800af08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af0c:	d112      	bne.n	800af34 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800af0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af12:	2b00      	cmp	r3, #0
 800af14:	d016      	beq.n	800af44 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800af16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af18:	3324      	adds	r3, #36	; 0x24
 800af1a:	4618      	mov	r0, r3
 800af1c:	f001 f892 	bl	800c044 <xTaskRemoveFromEventList>
 800af20:	4603      	mov	r3, r0
 800af22:	2b00      	cmp	r3, #0
 800af24:	d00e      	beq.n	800af44 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d00b      	beq.n	800af44 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	2201      	movs	r2, #1
 800af30:	601a      	str	r2, [r3, #0]
 800af32:	e007      	b.n	800af44 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800af34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800af38:	3301      	adds	r3, #1
 800af3a:	b2db      	uxtb	r3, r3
 800af3c:	b25a      	sxtb	r2, r3
 800af3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800af44:	2301      	movs	r3, #1
 800af46:	637b      	str	r3, [r7, #52]	; 0x34
 800af48:	e001      	b.n	800af4e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800af4a:	2300      	movs	r3, #0
 800af4c:	637b      	str	r3, [r7, #52]	; 0x34
 800af4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af50:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	f383 8811 	msr	BASEPRI, r3
}
 800af58:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800af5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800af5c:	4618      	mov	r0, r3
 800af5e:	3738      	adds	r7, #56	; 0x38
 800af60:	46bd      	mov	sp, r7
 800af62:	bd80      	pop	{r7, pc}

0800af64 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b08c      	sub	sp, #48	; 0x30
 800af68:	af00      	add	r7, sp, #0
 800af6a:	60f8      	str	r0, [r7, #12]
 800af6c:	60b9      	str	r1, [r7, #8]
 800af6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800af70:	2300      	movs	r3, #0
 800af72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800af78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d10a      	bne.n	800af94 <xQueueReceive+0x30>
	__asm volatile
 800af7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af82:	f383 8811 	msr	BASEPRI, r3
 800af86:	f3bf 8f6f 	isb	sy
 800af8a:	f3bf 8f4f 	dsb	sy
 800af8e:	623b      	str	r3, [r7, #32]
}
 800af90:	bf00      	nop
 800af92:	e7fe      	b.n	800af92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d103      	bne.n	800afa2 <xQueueReceive+0x3e>
 800af9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d101      	bne.n	800afa6 <xQueueReceive+0x42>
 800afa2:	2301      	movs	r3, #1
 800afa4:	e000      	b.n	800afa8 <xQueueReceive+0x44>
 800afa6:	2300      	movs	r3, #0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d10a      	bne.n	800afc2 <xQueueReceive+0x5e>
	__asm volatile
 800afac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afb0:	f383 8811 	msr	BASEPRI, r3
 800afb4:	f3bf 8f6f 	isb	sy
 800afb8:	f3bf 8f4f 	dsb	sy
 800afbc:	61fb      	str	r3, [r7, #28]
}
 800afbe:	bf00      	nop
 800afc0:	e7fe      	b.n	800afc0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800afc2:	f001 f9ff 	bl	800c3c4 <xTaskGetSchedulerState>
 800afc6:	4603      	mov	r3, r0
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d102      	bne.n	800afd2 <xQueueReceive+0x6e>
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d101      	bne.n	800afd6 <xQueueReceive+0x72>
 800afd2:	2301      	movs	r3, #1
 800afd4:	e000      	b.n	800afd8 <xQueueReceive+0x74>
 800afd6:	2300      	movs	r3, #0
 800afd8:	2b00      	cmp	r3, #0
 800afda:	d10a      	bne.n	800aff2 <xQueueReceive+0x8e>
	__asm volatile
 800afdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe0:	f383 8811 	msr	BASEPRI, r3
 800afe4:	f3bf 8f6f 	isb	sy
 800afe8:	f3bf 8f4f 	dsb	sy
 800afec:	61bb      	str	r3, [r7, #24]
}
 800afee:	bf00      	nop
 800aff0:	e7fe      	b.n	800aff0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aff2:	f001 fd37 	bl	800ca64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800affa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800affc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800affe:	2b00      	cmp	r3, #0
 800b000:	d01f      	beq.n	800b042 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b002:	68b9      	ldr	r1, [r7, #8]
 800b004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b006:	f000 fafa 	bl	800b5fe <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b00a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b00c:	1e5a      	subs	r2, r3, #1
 800b00e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b010:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b014:	691b      	ldr	r3, [r3, #16]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d00f      	beq.n	800b03a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b01c:	3310      	adds	r3, #16
 800b01e:	4618      	mov	r0, r3
 800b020:	f001 f810 	bl	800c044 <xTaskRemoveFromEventList>
 800b024:	4603      	mov	r3, r0
 800b026:	2b00      	cmp	r3, #0
 800b028:	d007      	beq.n	800b03a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b02a:	4b3d      	ldr	r3, [pc, #244]	; (800b120 <xQueueReceive+0x1bc>)
 800b02c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b030:	601a      	str	r2, [r3, #0]
 800b032:	f3bf 8f4f 	dsb	sy
 800b036:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b03a:	f001 fd43 	bl	800cac4 <vPortExitCritical>
				return pdPASS;
 800b03e:	2301      	movs	r3, #1
 800b040:	e069      	b.n	800b116 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d103      	bne.n	800b050 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b048:	f001 fd3c 	bl	800cac4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b04c:	2300      	movs	r3, #0
 800b04e:	e062      	b.n	800b116 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b052:	2b00      	cmp	r3, #0
 800b054:	d106      	bne.n	800b064 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b056:	f107 0310 	add.w	r3, r7, #16
 800b05a:	4618      	mov	r0, r3
 800b05c:	f001 f854 	bl	800c108 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b060:	2301      	movs	r3, #1
 800b062:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b064:	f001 fd2e 	bl	800cac4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b068:	f000 fde2 	bl	800bc30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b06c:	f001 fcfa 	bl	800ca64 <vPortEnterCritical>
 800b070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b072:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b076:	b25b      	sxtb	r3, r3
 800b078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b07c:	d103      	bne.n	800b086 <xQueueReceive+0x122>
 800b07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b080:	2200      	movs	r2, #0
 800b082:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b088:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b08c:	b25b      	sxtb	r3, r3
 800b08e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b092:	d103      	bne.n	800b09c <xQueueReceive+0x138>
 800b094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b096:	2200      	movs	r2, #0
 800b098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b09c:	f001 fd12 	bl	800cac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b0a0:	1d3a      	adds	r2, r7, #4
 800b0a2:	f107 0310 	add.w	r3, r7, #16
 800b0a6:	4611      	mov	r1, r2
 800b0a8:	4618      	mov	r0, r3
 800b0aa:	f001 f843 	bl	800c134 <xTaskCheckForTimeOut>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d123      	bne.n	800b0fc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b0b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0b6:	f000 fb1a 	bl	800b6ee <prvIsQueueEmpty>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d017      	beq.n	800b0f0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b0c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c2:	3324      	adds	r3, #36	; 0x24
 800b0c4:	687a      	ldr	r2, [r7, #4]
 800b0c6:	4611      	mov	r1, r2
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	f000 ff97 	bl	800bffc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b0ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0d0:	f000 fabb 	bl	800b64a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b0d4:	f000 fdba 	bl	800bc4c <xTaskResumeAll>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d189      	bne.n	800aff2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800b0de:	4b10      	ldr	r3, [pc, #64]	; (800b120 <xQueueReceive+0x1bc>)
 800b0e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0e4:	601a      	str	r2, [r3, #0]
 800b0e6:	f3bf 8f4f 	dsb	sy
 800b0ea:	f3bf 8f6f 	isb	sy
 800b0ee:	e780      	b.n	800aff2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b0f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0f2:	f000 faaa 	bl	800b64a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b0f6:	f000 fda9 	bl	800bc4c <xTaskResumeAll>
 800b0fa:	e77a      	b.n	800aff2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b0fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b0fe:	f000 faa4 	bl	800b64a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b102:	f000 fda3 	bl	800bc4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b108:	f000 faf1 	bl	800b6ee <prvIsQueueEmpty>
 800b10c:	4603      	mov	r3, r0
 800b10e:	2b00      	cmp	r3, #0
 800b110:	f43f af6f 	beq.w	800aff2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b114:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b116:	4618      	mov	r0, r3
 800b118:	3730      	adds	r7, #48	; 0x30
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop
 800b120:	e000ed04 	.word	0xe000ed04

0800b124 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b08e      	sub	sp, #56	; 0x38
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b12e:	2300      	movs	r3, #0
 800b130:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b136:	2300      	movs	r3, #0
 800b138:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d10a      	bne.n	800b156 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800b140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b144:	f383 8811 	msr	BASEPRI, r3
 800b148:	f3bf 8f6f 	isb	sy
 800b14c:	f3bf 8f4f 	dsb	sy
 800b150:	623b      	str	r3, [r7, #32]
}
 800b152:	bf00      	nop
 800b154:	e7fe      	b.n	800b154 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d00a      	beq.n	800b174 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800b15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b162:	f383 8811 	msr	BASEPRI, r3
 800b166:	f3bf 8f6f 	isb	sy
 800b16a:	f3bf 8f4f 	dsb	sy
 800b16e:	61fb      	str	r3, [r7, #28]
}
 800b170:	bf00      	nop
 800b172:	e7fe      	b.n	800b172 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b174:	f001 f926 	bl	800c3c4 <xTaskGetSchedulerState>
 800b178:	4603      	mov	r3, r0
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d102      	bne.n	800b184 <xQueueSemaphoreTake+0x60>
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d101      	bne.n	800b188 <xQueueSemaphoreTake+0x64>
 800b184:	2301      	movs	r3, #1
 800b186:	e000      	b.n	800b18a <xQueueSemaphoreTake+0x66>
 800b188:	2300      	movs	r3, #0
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d10a      	bne.n	800b1a4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800b18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b192:	f383 8811 	msr	BASEPRI, r3
 800b196:	f3bf 8f6f 	isb	sy
 800b19a:	f3bf 8f4f 	dsb	sy
 800b19e:	61bb      	str	r3, [r7, #24]
}
 800b1a0:	bf00      	nop
 800b1a2:	e7fe      	b.n	800b1a2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b1a4:	f001 fc5e 	bl	800ca64 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1ac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b1ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d024      	beq.n	800b1fe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b1b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b6:	1e5a      	subs	r2, r3, #1
 800b1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1ba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b1bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d104      	bne.n	800b1ce <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b1c4:	f001 faa6 	bl	800c714 <pvTaskIncrementMutexHeldCount>
 800b1c8:	4602      	mov	r2, r0
 800b1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1cc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b1ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1d0:	691b      	ldr	r3, [r3, #16]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d00f      	beq.n	800b1f6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b1d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1d8:	3310      	adds	r3, #16
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f000 ff32 	bl	800c044 <xTaskRemoveFromEventList>
 800b1e0:	4603      	mov	r3, r0
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d007      	beq.n	800b1f6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b1e6:	4b54      	ldr	r3, [pc, #336]	; (800b338 <xQueueSemaphoreTake+0x214>)
 800b1e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b1ec:	601a      	str	r2, [r3, #0]
 800b1ee:	f3bf 8f4f 	dsb	sy
 800b1f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b1f6:	f001 fc65 	bl	800cac4 <vPortExitCritical>
				return pdPASS;
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	e097      	b.n	800b32e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b1fe:	683b      	ldr	r3, [r7, #0]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d111      	bne.n	800b228 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b206:	2b00      	cmp	r3, #0
 800b208:	d00a      	beq.n	800b220 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800b20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b20e:	f383 8811 	msr	BASEPRI, r3
 800b212:	f3bf 8f6f 	isb	sy
 800b216:	f3bf 8f4f 	dsb	sy
 800b21a:	617b      	str	r3, [r7, #20]
}
 800b21c:	bf00      	nop
 800b21e:	e7fe      	b.n	800b21e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b220:	f001 fc50 	bl	800cac4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b224:	2300      	movs	r3, #0
 800b226:	e082      	b.n	800b32e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d106      	bne.n	800b23c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b22e:	f107 030c 	add.w	r3, r7, #12
 800b232:	4618      	mov	r0, r3
 800b234:	f000 ff68 	bl	800c108 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b238:	2301      	movs	r3, #1
 800b23a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b23c:	f001 fc42 	bl	800cac4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b240:	f000 fcf6 	bl	800bc30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b244:	f001 fc0e 	bl	800ca64 <vPortEnterCritical>
 800b248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b24a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b24e:	b25b      	sxtb	r3, r3
 800b250:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b254:	d103      	bne.n	800b25e <xQueueSemaphoreTake+0x13a>
 800b256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b258:	2200      	movs	r2, #0
 800b25a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b25e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b260:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b264:	b25b      	sxtb	r3, r3
 800b266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b26a:	d103      	bne.n	800b274 <xQueueSemaphoreTake+0x150>
 800b26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b26e:	2200      	movs	r2, #0
 800b270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b274:	f001 fc26 	bl	800cac4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b278:	463a      	mov	r2, r7
 800b27a:	f107 030c 	add.w	r3, r7, #12
 800b27e:	4611      	mov	r1, r2
 800b280:	4618      	mov	r0, r3
 800b282:	f000 ff57 	bl	800c134 <xTaskCheckForTimeOut>
 800b286:	4603      	mov	r3, r0
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d132      	bne.n	800b2f2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b28c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b28e:	f000 fa2e 	bl	800b6ee <prvIsQueueEmpty>
 800b292:	4603      	mov	r3, r0
 800b294:	2b00      	cmp	r3, #0
 800b296:	d026      	beq.n	800b2e6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d109      	bne.n	800b2b4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800b2a0:	f001 fbe0 	bl	800ca64 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2a6:	689b      	ldr	r3, [r3, #8]
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f001 f8a9 	bl	800c400 <xTaskPriorityInherit>
 800b2ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800b2b0:	f001 fc08 	bl	800cac4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b2b6:	3324      	adds	r3, #36	; 0x24
 800b2b8:	683a      	ldr	r2, [r7, #0]
 800b2ba:	4611      	mov	r1, r2
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f000 fe9d 	bl	800bffc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b2c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b2c4:	f000 f9c1 	bl	800b64a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b2c8:	f000 fcc0 	bl	800bc4c <xTaskResumeAll>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	f47f af68 	bne.w	800b1a4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800b2d4:	4b18      	ldr	r3, [pc, #96]	; (800b338 <xQueueSemaphoreTake+0x214>)
 800b2d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b2da:	601a      	str	r2, [r3, #0]
 800b2dc:	f3bf 8f4f 	dsb	sy
 800b2e0:	f3bf 8f6f 	isb	sy
 800b2e4:	e75e      	b.n	800b1a4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b2e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b2e8:	f000 f9af 	bl	800b64a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b2ec:	f000 fcae 	bl	800bc4c <xTaskResumeAll>
 800b2f0:	e758      	b.n	800b1a4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b2f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b2f4:	f000 f9a9 	bl	800b64a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b2f8:	f000 fca8 	bl	800bc4c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b2fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b2fe:	f000 f9f6 	bl	800b6ee <prvIsQueueEmpty>
 800b302:	4603      	mov	r3, r0
 800b304:	2b00      	cmp	r3, #0
 800b306:	f43f af4d 	beq.w	800b1a4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b30a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d00d      	beq.n	800b32c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800b310:	f001 fba8 	bl	800ca64 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b314:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800b316:	f000 f8f0 	bl	800b4fa <prvGetDisinheritPriorityAfterTimeout>
 800b31a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b31c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b31e:	689b      	ldr	r3, [r3, #8]
 800b320:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b322:	4618      	mov	r0, r3
 800b324:	f001 f968 	bl	800c5f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b328:	f001 fbcc 	bl	800cac4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b32c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3738      	adds	r7, #56	; 0x38
 800b332:	46bd      	mov	sp, r7
 800b334:	bd80      	pop	{r7, pc}
 800b336:	bf00      	nop
 800b338:	e000ed04 	.word	0xe000ed04

0800b33c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b33c:	b580      	push	{r7, lr}
 800b33e:	b08e      	sub	sp, #56	; 0x38
 800b340:	af00      	add	r7, sp, #0
 800b342:	60f8      	str	r0, [r7, #12]
 800b344:	60b9      	str	r1, [r7, #8]
 800b346:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800b34c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d10a      	bne.n	800b368 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800b352:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b356:	f383 8811 	msr	BASEPRI, r3
 800b35a:	f3bf 8f6f 	isb	sy
 800b35e:	f3bf 8f4f 	dsb	sy
 800b362:	623b      	str	r3, [r7, #32]
}
 800b364:	bf00      	nop
 800b366:	e7fe      	b.n	800b366 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b368:	68bb      	ldr	r3, [r7, #8]
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d103      	bne.n	800b376 <xQueueReceiveFromISR+0x3a>
 800b36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b372:	2b00      	cmp	r3, #0
 800b374:	d101      	bne.n	800b37a <xQueueReceiveFromISR+0x3e>
 800b376:	2301      	movs	r3, #1
 800b378:	e000      	b.n	800b37c <xQueueReceiveFromISR+0x40>
 800b37a:	2300      	movs	r3, #0
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d10a      	bne.n	800b396 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800b380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b384:	f383 8811 	msr	BASEPRI, r3
 800b388:	f3bf 8f6f 	isb	sy
 800b38c:	f3bf 8f4f 	dsb	sy
 800b390:	61fb      	str	r3, [r7, #28]
}
 800b392:	bf00      	nop
 800b394:	e7fe      	b.n	800b394 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800b396:	f001 fc47 	bl	800cc28 <vPortValidateInterruptPriority>
	__asm volatile
 800b39a:	f3ef 8211 	mrs	r2, BASEPRI
 800b39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a2:	f383 8811 	msr	BASEPRI, r3
 800b3a6:	f3bf 8f6f 	isb	sy
 800b3aa:	f3bf 8f4f 	dsb	sy
 800b3ae:	61ba      	str	r2, [r7, #24]
 800b3b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800b3b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b3b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d02f      	beq.n	800b422 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b3c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b3c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b3cc:	68b9      	ldr	r1, [r7, #8]
 800b3ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b3d0:	f000 f915 	bl	800b5fe <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3d6:	1e5a      	subs	r2, r3, #1
 800b3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3da:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b3dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800b3e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3e4:	d112      	bne.n	800b40c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e8:	691b      	ldr	r3, [r3, #16]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d016      	beq.n	800b41c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3f0:	3310      	adds	r3, #16
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f000 fe26 	bl	800c044 <xTaskRemoveFromEventList>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d00e      	beq.n	800b41c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d00b      	beq.n	800b41c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	2201      	movs	r2, #1
 800b408:	601a      	str	r2, [r3, #0]
 800b40a:	e007      	b.n	800b41c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b40c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b410:	3301      	adds	r3, #1
 800b412:	b2db      	uxtb	r3, r3
 800b414:	b25a      	sxtb	r2, r3
 800b416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b418:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b41c:	2301      	movs	r3, #1
 800b41e:	637b      	str	r3, [r7, #52]	; 0x34
 800b420:	e001      	b.n	800b426 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800b422:	2300      	movs	r3, #0
 800b424:	637b      	str	r3, [r7, #52]	; 0x34
 800b426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b428:	613b      	str	r3, [r7, #16]
	__asm volatile
 800b42a:	693b      	ldr	r3, [r7, #16]
 800b42c:	f383 8811 	msr	BASEPRI, r3
}
 800b430:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800b434:	4618      	mov	r0, r3
 800b436:	3738      	adds	r7, #56	; 0x38
 800b438:	46bd      	mov	sp, r7
 800b43a:	bd80      	pop	{r7, pc}

0800b43c <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800b43c:	b580      	push	{r7, lr}
 800b43e:	b084      	sub	sp, #16
 800b440:	af00      	add	r7, sp, #0
 800b442:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d10a      	bne.n	800b460 <uxQueueMessagesWaiting+0x24>
	__asm volatile
 800b44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b44e:	f383 8811 	msr	BASEPRI, r3
 800b452:	f3bf 8f6f 	isb	sy
 800b456:	f3bf 8f4f 	dsb	sy
 800b45a:	60bb      	str	r3, [r7, #8]
}
 800b45c:	bf00      	nop
 800b45e:	e7fe      	b.n	800b45e <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800b460:	f001 fb00 	bl	800ca64 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b468:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800b46a:	f001 fb2b 	bl	800cac4 <vPortExitCritical>

	return uxReturn;
 800b46e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b470:	4618      	mov	r0, r3
 800b472:	3710      	adds	r7, #16
 800b474:	46bd      	mov	sp, r7
 800b476:	bd80      	pop	{r7, pc}

0800b478 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800b478:	b480      	push	{r7}
 800b47a:	b087      	sub	sp, #28
 800b47c:	af00      	add	r7, sp, #0
 800b47e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d10a      	bne.n	800b4a0 <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 800b48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b48e:	f383 8811 	msr	BASEPRI, r3
 800b492:	f3bf 8f6f 	isb	sy
 800b496:	f3bf 8f4f 	dsb	sy
 800b49a:	60fb      	str	r3, [r7, #12]
}
 800b49c:	bf00      	nop
 800b49e:	e7fe      	b.n	800b49e <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800b4a0:	697b      	ldr	r3, [r7, #20]
 800b4a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a4:	613b      	str	r3, [r7, #16]

	return uxReturn;
 800b4a6:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800b4a8:	4618      	mov	r0, r3
 800b4aa:	371c      	adds	r7, #28
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr

0800b4b4 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d10a      	bne.n	800b4dc <vQueueDelete+0x28>
	__asm volatile
 800b4c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4ca:	f383 8811 	msr	BASEPRI, r3
 800b4ce:	f3bf 8f6f 	isb	sy
 800b4d2:	f3bf 8f4f 	dsb	sy
 800b4d6:	60bb      	str	r3, [r7, #8]
}
 800b4d8:	bf00      	nop
 800b4da:	e7fe      	b.n	800b4da <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b4dc:	68f8      	ldr	r0, [r7, #12]
 800b4de:	f000 f935 	bl	800b74c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d102      	bne.n	800b4f2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800b4ec:	68f8      	ldr	r0, [r7, #12]
 800b4ee:	f001 fca7 	bl	800ce40 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b4f2:	bf00      	nop
 800b4f4:	3710      	adds	r7, #16
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}

0800b4fa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b4fa:	b480      	push	{r7}
 800b4fc:	b085      	sub	sp, #20
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b506:	2b00      	cmp	r3, #0
 800b508:	d006      	beq.n	800b518 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f1c3 0307 	rsb	r3, r3, #7
 800b514:	60fb      	str	r3, [r7, #12]
 800b516:	e001      	b.n	800b51c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b518:	2300      	movs	r3, #0
 800b51a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b51c:	68fb      	ldr	r3, [r7, #12]
	}
 800b51e:	4618      	mov	r0, r3
 800b520:	3714      	adds	r7, #20
 800b522:	46bd      	mov	sp, r7
 800b524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b528:	4770      	bx	lr

0800b52a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b52a:	b580      	push	{r7, lr}
 800b52c:	b086      	sub	sp, #24
 800b52e:	af00      	add	r7, sp, #0
 800b530:	60f8      	str	r0, [r7, #12]
 800b532:	60b9      	str	r1, [r7, #8]
 800b534:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b536:	2300      	movs	r3, #0
 800b538:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b53e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b544:	2b00      	cmp	r3, #0
 800b546:	d10d      	bne.n	800b564 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d14d      	bne.n	800b5ec <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	689b      	ldr	r3, [r3, #8]
 800b554:	4618      	mov	r0, r3
 800b556:	f000 ffc9 	bl	800c4ec <xTaskPriorityDisinherit>
 800b55a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2200      	movs	r2, #0
 800b560:	609a      	str	r2, [r3, #8]
 800b562:	e043      	b.n	800b5ec <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d119      	bne.n	800b59e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	6858      	ldr	r0, [r3, #4]
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b572:	461a      	mov	r2, r3
 800b574:	68b9      	ldr	r1, [r7, #8]
 800b576:	f00e ffcd 	bl	801a514 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	685a      	ldr	r2, [r3, #4]
 800b57e:	68fb      	ldr	r3, [r7, #12]
 800b580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b582:	441a      	add	r2, r3
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	685a      	ldr	r2, [r3, #4]
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	689b      	ldr	r3, [r3, #8]
 800b590:	429a      	cmp	r2, r3
 800b592:	d32b      	bcc.n	800b5ec <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	681a      	ldr	r2, [r3, #0]
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	605a      	str	r2, [r3, #4]
 800b59c:	e026      	b.n	800b5ec <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	68d8      	ldr	r0, [r3, #12]
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5a6:	461a      	mov	r2, r3
 800b5a8:	68b9      	ldr	r1, [r7, #8]
 800b5aa:	f00e ffb3 	bl	801a514 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	68da      	ldr	r2, [r3, #12]
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5b6:	425b      	negs	r3, r3
 800b5b8:	441a      	add	r2, r3
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	68da      	ldr	r2, [r3, #12]
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	429a      	cmp	r2, r3
 800b5c8:	d207      	bcs.n	800b5da <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	689a      	ldr	r2, [r3, #8]
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5d2:	425b      	negs	r3, r3
 800b5d4:	441a      	add	r2, r3
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	2b02      	cmp	r3, #2
 800b5de:	d105      	bne.n	800b5ec <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b5e0:	693b      	ldr	r3, [r7, #16]
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d002      	beq.n	800b5ec <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b5e6:	693b      	ldr	r3, [r7, #16]
 800b5e8:	3b01      	subs	r3, #1
 800b5ea:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b5ec:	693b      	ldr	r3, [r7, #16]
 800b5ee:	1c5a      	adds	r2, r3, #1
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b5f4:	697b      	ldr	r3, [r7, #20]
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3718      	adds	r7, #24
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	bd80      	pop	{r7, pc}

0800b5fe <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b5fe:	b580      	push	{r7, lr}
 800b600:	b082      	sub	sp, #8
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
 800b606:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d018      	beq.n	800b642 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	68da      	ldr	r2, [r3, #12]
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b618:	441a      	add	r2, r3
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	68da      	ldr	r2, [r3, #12]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	689b      	ldr	r3, [r3, #8]
 800b626:	429a      	cmp	r2, r3
 800b628:	d303      	bcc.n	800b632 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681a      	ldr	r2, [r3, #0]
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	68d9      	ldr	r1, [r3, #12]
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b63a:	461a      	mov	r2, r3
 800b63c:	6838      	ldr	r0, [r7, #0]
 800b63e:	f00e ff69 	bl	801a514 <memcpy>
	}
}
 800b642:	bf00      	nop
 800b644:	3708      	adds	r7, #8
 800b646:	46bd      	mov	sp, r7
 800b648:	bd80      	pop	{r7, pc}

0800b64a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b64a:	b580      	push	{r7, lr}
 800b64c:	b084      	sub	sp, #16
 800b64e:	af00      	add	r7, sp, #0
 800b650:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b652:	f001 fa07 	bl	800ca64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b65c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b65e:	e011      	b.n	800b684 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b664:	2b00      	cmp	r3, #0
 800b666:	d012      	beq.n	800b68e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	3324      	adds	r3, #36	; 0x24
 800b66c:	4618      	mov	r0, r3
 800b66e:	f000 fce9 	bl	800c044 <xTaskRemoveFromEventList>
 800b672:	4603      	mov	r3, r0
 800b674:	2b00      	cmp	r3, #0
 800b676:	d001      	beq.n	800b67c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b678:	f000 fdbe 	bl	800c1f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b67c:	7bfb      	ldrb	r3, [r7, #15]
 800b67e:	3b01      	subs	r3, #1
 800b680:	b2db      	uxtb	r3, r3
 800b682:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b684:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b688:	2b00      	cmp	r3, #0
 800b68a:	dce9      	bgt.n	800b660 <prvUnlockQueue+0x16>
 800b68c:	e000      	b.n	800b690 <prvUnlockQueue+0x46>
					break;
 800b68e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	22ff      	movs	r2, #255	; 0xff
 800b694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b698:	f001 fa14 	bl	800cac4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b69c:	f001 f9e2 	bl	800ca64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b6a6:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b6a8:	e011      	b.n	800b6ce <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	691b      	ldr	r3, [r3, #16]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d012      	beq.n	800b6d8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	3310      	adds	r3, #16
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f000 fcc4 	bl	800c044 <xTaskRemoveFromEventList>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d001      	beq.n	800b6c6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b6c2:	f000 fd99 	bl	800c1f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b6c6:	7bbb      	ldrb	r3, [r7, #14]
 800b6c8:	3b01      	subs	r3, #1
 800b6ca:	b2db      	uxtb	r3, r3
 800b6cc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b6ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	dce9      	bgt.n	800b6aa <prvUnlockQueue+0x60>
 800b6d6:	e000      	b.n	800b6da <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b6d8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	22ff      	movs	r2, #255	; 0xff
 800b6de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b6e2:	f001 f9ef 	bl	800cac4 <vPortExitCritical>
}
 800b6e6:	bf00      	nop
 800b6e8:	3710      	adds	r7, #16
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}

0800b6ee <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b6ee:	b580      	push	{r7, lr}
 800b6f0:	b084      	sub	sp, #16
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b6f6:	f001 f9b5 	bl	800ca64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d102      	bne.n	800b708 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b702:	2301      	movs	r3, #1
 800b704:	60fb      	str	r3, [r7, #12]
 800b706:	e001      	b.n	800b70c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b708:	2300      	movs	r3, #0
 800b70a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b70c:	f001 f9da 	bl	800cac4 <vPortExitCritical>

	return xReturn;
 800b710:	68fb      	ldr	r3, [r7, #12]
}
 800b712:	4618      	mov	r0, r3
 800b714:	3710      	adds	r7, #16
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}

0800b71a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b71a:	b580      	push	{r7, lr}
 800b71c:	b084      	sub	sp, #16
 800b71e:	af00      	add	r7, sp, #0
 800b720:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b722:	f001 f99f 	bl	800ca64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b72e:	429a      	cmp	r2, r3
 800b730:	d102      	bne.n	800b738 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b732:	2301      	movs	r3, #1
 800b734:	60fb      	str	r3, [r7, #12]
 800b736:	e001      	b.n	800b73c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b738:	2300      	movs	r3, #0
 800b73a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b73c:	f001 f9c2 	bl	800cac4 <vPortExitCritical>

	return xReturn;
 800b740:	68fb      	ldr	r3, [r7, #12]
}
 800b742:	4618      	mov	r0, r3
 800b744:	3710      	adds	r7, #16
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
	...

0800b74c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800b74c:	b480      	push	{r7}
 800b74e:	b085      	sub	sp, #20
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b754:	2300      	movs	r3, #0
 800b756:	60fb      	str	r3, [r7, #12]
 800b758:	e016      	b.n	800b788 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800b75a:	4a10      	ldr	r2, [pc, #64]	; (800b79c <vQueueUnregisterQueue+0x50>)
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	00db      	lsls	r3, r3, #3
 800b760:	4413      	add	r3, r2
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	687a      	ldr	r2, [r7, #4]
 800b766:	429a      	cmp	r2, r3
 800b768:	d10b      	bne.n	800b782 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800b76a:	4a0c      	ldr	r2, [pc, #48]	; (800b79c <vQueueUnregisterQueue+0x50>)
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	2100      	movs	r1, #0
 800b770:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800b774:	4a09      	ldr	r2, [pc, #36]	; (800b79c <vQueueUnregisterQueue+0x50>)
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	00db      	lsls	r3, r3, #3
 800b77a:	4413      	add	r3, r2
 800b77c:	2200      	movs	r2, #0
 800b77e:	605a      	str	r2, [r3, #4]
				break;
 800b780:	e006      	b.n	800b790 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	3301      	adds	r3, #1
 800b786:	60fb      	str	r3, [r7, #12]
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	2b07      	cmp	r3, #7
 800b78c:	d9e5      	bls.n	800b75a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800b78e:	bf00      	nop
 800b790:	bf00      	nop
 800b792:	3714      	adds	r7, #20
 800b794:	46bd      	mov	sp, r7
 800b796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79a:	4770      	bx	lr
 800b79c:	2000a5ec 	.word	0x2000a5ec

0800b7a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b08e      	sub	sp, #56	; 0x38
 800b7a4:	af04      	add	r7, sp, #16
 800b7a6:	60f8      	str	r0, [r7, #12]
 800b7a8:	60b9      	str	r1, [r7, #8]
 800b7aa:	607a      	str	r2, [r7, #4]
 800b7ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b7ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d10a      	bne.n	800b7ca <xTaskCreateStatic+0x2a>
	__asm volatile
 800b7b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7b8:	f383 8811 	msr	BASEPRI, r3
 800b7bc:	f3bf 8f6f 	isb	sy
 800b7c0:	f3bf 8f4f 	dsb	sy
 800b7c4:	623b      	str	r3, [r7, #32]
}
 800b7c6:	bf00      	nop
 800b7c8:	e7fe      	b.n	800b7c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b7ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d10a      	bne.n	800b7e6 <xTaskCreateStatic+0x46>
	__asm volatile
 800b7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7d4:	f383 8811 	msr	BASEPRI, r3
 800b7d8:	f3bf 8f6f 	isb	sy
 800b7dc:	f3bf 8f4f 	dsb	sy
 800b7e0:	61fb      	str	r3, [r7, #28]
}
 800b7e2:	bf00      	nop
 800b7e4:	e7fe      	b.n	800b7e4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b7e6:	23b4      	movs	r3, #180	; 0xb4
 800b7e8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	2bb4      	cmp	r3, #180	; 0xb4
 800b7ee:	d00a      	beq.n	800b806 <xTaskCreateStatic+0x66>
	__asm volatile
 800b7f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7f4:	f383 8811 	msr	BASEPRI, r3
 800b7f8:	f3bf 8f6f 	isb	sy
 800b7fc:	f3bf 8f4f 	dsb	sy
 800b800:	61bb      	str	r3, [r7, #24]
}
 800b802:	bf00      	nop
 800b804:	e7fe      	b.n	800b804 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b806:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b808:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d01e      	beq.n	800b84c <xTaskCreateStatic+0xac>
 800b80e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b810:	2b00      	cmp	r3, #0
 800b812:	d01b      	beq.n	800b84c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b816:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b81a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b81c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b820:	2202      	movs	r2, #2
 800b822:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b826:	2300      	movs	r3, #0
 800b828:	9303      	str	r3, [sp, #12]
 800b82a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b82c:	9302      	str	r3, [sp, #8]
 800b82e:	f107 0314 	add.w	r3, r7, #20
 800b832:	9301      	str	r3, [sp, #4]
 800b834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b836:	9300      	str	r3, [sp, #0]
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	687a      	ldr	r2, [r7, #4]
 800b83c:	68b9      	ldr	r1, [r7, #8]
 800b83e:	68f8      	ldr	r0, [r7, #12]
 800b840:	f000 f850 	bl	800b8e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b844:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b846:	f000 f8eb 	bl	800ba20 <prvAddNewTaskToReadyList>
 800b84a:	e001      	b.n	800b850 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b84c:	2300      	movs	r3, #0
 800b84e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b850:	697b      	ldr	r3, [r7, #20]
	}
 800b852:	4618      	mov	r0, r3
 800b854:	3728      	adds	r7, #40	; 0x28
 800b856:	46bd      	mov	sp, r7
 800b858:	bd80      	pop	{r7, pc}

0800b85a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b85a:	b580      	push	{r7, lr}
 800b85c:	b08c      	sub	sp, #48	; 0x30
 800b85e:	af04      	add	r7, sp, #16
 800b860:	60f8      	str	r0, [r7, #12]
 800b862:	60b9      	str	r1, [r7, #8]
 800b864:	603b      	str	r3, [r7, #0]
 800b866:	4613      	mov	r3, r2
 800b868:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b86a:	88fb      	ldrh	r3, [r7, #6]
 800b86c:	009b      	lsls	r3, r3, #2
 800b86e:	4618      	mov	r0, r3
 800b870:	f001 fa1a 	bl	800cca8 <pvPortMalloc>
 800b874:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d00e      	beq.n	800b89a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b87c:	20b4      	movs	r0, #180	; 0xb4
 800b87e:	f001 fa13 	bl	800cca8 <pvPortMalloc>
 800b882:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b884:	69fb      	ldr	r3, [r7, #28]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d003      	beq.n	800b892 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b88a:	69fb      	ldr	r3, [r7, #28]
 800b88c:	697a      	ldr	r2, [r7, #20]
 800b88e:	631a      	str	r2, [r3, #48]	; 0x30
 800b890:	e005      	b.n	800b89e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b892:	6978      	ldr	r0, [r7, #20]
 800b894:	f001 fad4 	bl	800ce40 <vPortFree>
 800b898:	e001      	b.n	800b89e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b89a:	2300      	movs	r3, #0
 800b89c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b89e:	69fb      	ldr	r3, [r7, #28]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d017      	beq.n	800b8d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b8a4:	69fb      	ldr	r3, [r7, #28]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b8ac:	88fa      	ldrh	r2, [r7, #6]
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	9303      	str	r3, [sp, #12]
 800b8b2:	69fb      	ldr	r3, [r7, #28]
 800b8b4:	9302      	str	r3, [sp, #8]
 800b8b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8b8:	9301      	str	r3, [sp, #4]
 800b8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8bc:	9300      	str	r3, [sp, #0]
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	68b9      	ldr	r1, [r7, #8]
 800b8c2:	68f8      	ldr	r0, [r7, #12]
 800b8c4:	f000 f80e 	bl	800b8e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b8c8:	69f8      	ldr	r0, [r7, #28]
 800b8ca:	f000 f8a9 	bl	800ba20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	61bb      	str	r3, [r7, #24]
 800b8d2:	e002      	b.n	800b8da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b8d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b8d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b8da:	69bb      	ldr	r3, [r7, #24]
	}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3720      	adds	r7, #32
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}

0800b8e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b088      	sub	sp, #32
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	60f8      	str	r0, [r7, #12]
 800b8ec:	60b9      	str	r1, [r7, #8]
 800b8ee:	607a      	str	r2, [r7, #4]
 800b8f0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b8f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b8fc:	3b01      	subs	r3, #1
 800b8fe:	009b      	lsls	r3, r3, #2
 800b900:	4413      	add	r3, r2
 800b902:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b904:	69bb      	ldr	r3, [r7, #24]
 800b906:	f023 0307 	bic.w	r3, r3, #7
 800b90a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b90c:	69bb      	ldr	r3, [r7, #24]
 800b90e:	f003 0307 	and.w	r3, r3, #7
 800b912:	2b00      	cmp	r3, #0
 800b914:	d00a      	beq.n	800b92c <prvInitialiseNewTask+0x48>
	__asm volatile
 800b916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b91a:	f383 8811 	msr	BASEPRI, r3
 800b91e:	f3bf 8f6f 	isb	sy
 800b922:	f3bf 8f4f 	dsb	sy
 800b926:	617b      	str	r3, [r7, #20]
}
 800b928:	bf00      	nop
 800b92a:	e7fe      	b.n	800b92a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d01f      	beq.n	800b972 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b932:	2300      	movs	r3, #0
 800b934:	61fb      	str	r3, [r7, #28]
 800b936:	e012      	b.n	800b95e <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b938:	68ba      	ldr	r2, [r7, #8]
 800b93a:	69fb      	ldr	r3, [r7, #28]
 800b93c:	4413      	add	r3, r2
 800b93e:	7819      	ldrb	r1, [r3, #0]
 800b940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b942:	69fb      	ldr	r3, [r7, #28]
 800b944:	4413      	add	r3, r2
 800b946:	3334      	adds	r3, #52	; 0x34
 800b948:	460a      	mov	r2, r1
 800b94a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b94c:	68ba      	ldr	r2, [r7, #8]
 800b94e:	69fb      	ldr	r3, [r7, #28]
 800b950:	4413      	add	r3, r2
 800b952:	781b      	ldrb	r3, [r3, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d006      	beq.n	800b966 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b958:	69fb      	ldr	r3, [r7, #28]
 800b95a:	3301      	adds	r3, #1
 800b95c:	61fb      	str	r3, [r7, #28]
 800b95e:	69fb      	ldr	r3, [r7, #28]
 800b960:	2b0f      	cmp	r3, #15
 800b962:	d9e9      	bls.n	800b938 <prvInitialiseNewTask+0x54>
 800b964:	e000      	b.n	800b968 <prvInitialiseNewTask+0x84>
			{
				break;
 800b966:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b96a:	2200      	movs	r2, #0
 800b96c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b970:	e003      	b.n	800b97a <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b974:	2200      	movs	r2, #0
 800b976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b97c:	2b06      	cmp	r3, #6
 800b97e:	d901      	bls.n	800b984 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b980:	2306      	movs	r3, #6
 800b982:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b986:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b988:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b98a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b98c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b98e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800b990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b992:	2200      	movs	r2, #0
 800b994:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b998:	3304      	adds	r3, #4
 800b99a:	4618      	mov	r0, r3
 800b99c:	f7fe fea2 	bl	800a6e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b9a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9a2:	3318      	adds	r3, #24
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f7fe fe9d 	bl	800a6e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b9aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9ae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9b2:	f1c3 0207 	rsb	r2, r3, #7
 800b9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9b8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b9ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b9be:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b9c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b9d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9d2:	334c      	adds	r3, #76	; 0x4c
 800b9d4:	2260      	movs	r2, #96	; 0x60
 800b9d6:	2100      	movs	r1, #0
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f00e fdc3 	bl	801a564 <memset>
 800b9de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e0:	4a0c      	ldr	r2, [pc, #48]	; (800ba14 <prvInitialiseNewTask+0x130>)
 800b9e2:	651a      	str	r2, [r3, #80]	; 0x50
 800b9e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9e6:	4a0c      	ldr	r2, [pc, #48]	; (800ba18 <prvInitialiseNewTask+0x134>)
 800b9e8:	655a      	str	r2, [r3, #84]	; 0x54
 800b9ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9ec:	4a0b      	ldr	r2, [pc, #44]	; (800ba1c <prvInitialiseNewTask+0x138>)
 800b9ee:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b9f0:	683a      	ldr	r2, [r7, #0]
 800b9f2:	68f9      	ldr	r1, [r7, #12]
 800b9f4:	69b8      	ldr	r0, [r7, #24]
 800b9f6:	f000 ff07 	bl	800c808 <pxPortInitialiseStack>
 800b9fa:	4602      	mov	r2, r0
 800b9fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9fe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ba00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d002      	beq.n	800ba0c <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ba06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ba0a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ba0c:	bf00      	nop
 800ba0e:	3720      	adds	r7, #32
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}
 800ba14:	0801ef74 	.word	0x0801ef74
 800ba18:	0801ef94 	.word	0x0801ef94
 800ba1c:	0801ef54 	.word	0x0801ef54

0800ba20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b082      	sub	sp, #8
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ba28:	f001 f81c 	bl	800ca64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ba2c:	4b2a      	ldr	r3, [pc, #168]	; (800bad8 <prvAddNewTaskToReadyList+0xb8>)
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	3301      	adds	r3, #1
 800ba32:	4a29      	ldr	r2, [pc, #164]	; (800bad8 <prvAddNewTaskToReadyList+0xb8>)
 800ba34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ba36:	4b29      	ldr	r3, [pc, #164]	; (800badc <prvAddNewTaskToReadyList+0xbc>)
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d109      	bne.n	800ba52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ba3e:	4a27      	ldr	r2, [pc, #156]	; (800badc <prvAddNewTaskToReadyList+0xbc>)
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ba44:	4b24      	ldr	r3, [pc, #144]	; (800bad8 <prvAddNewTaskToReadyList+0xb8>)
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	2b01      	cmp	r3, #1
 800ba4a:	d110      	bne.n	800ba6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ba4c:	f000 fbf8 	bl	800c240 <prvInitialiseTaskLists>
 800ba50:	e00d      	b.n	800ba6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ba52:	4b23      	ldr	r3, [pc, #140]	; (800bae0 <prvAddNewTaskToReadyList+0xc0>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d109      	bne.n	800ba6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ba5a:	4b20      	ldr	r3, [pc, #128]	; (800badc <prvAddNewTaskToReadyList+0xbc>)
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba64:	429a      	cmp	r2, r3
 800ba66:	d802      	bhi.n	800ba6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ba68:	4a1c      	ldr	r2, [pc, #112]	; (800badc <prvAddNewTaskToReadyList+0xbc>)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ba6e:	4b1d      	ldr	r3, [pc, #116]	; (800bae4 <prvAddNewTaskToReadyList+0xc4>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	3301      	adds	r3, #1
 800ba74:	4a1b      	ldr	r2, [pc, #108]	; (800bae4 <prvAddNewTaskToReadyList+0xc4>)
 800ba76:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	409a      	lsls	r2, r3
 800ba80:	4b19      	ldr	r3, [pc, #100]	; (800bae8 <prvAddNewTaskToReadyList+0xc8>)
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	4313      	orrs	r3, r2
 800ba86:	4a18      	ldr	r2, [pc, #96]	; (800bae8 <prvAddNewTaskToReadyList+0xc8>)
 800ba88:	6013      	str	r3, [r2, #0]
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba8e:	4613      	mov	r3, r2
 800ba90:	009b      	lsls	r3, r3, #2
 800ba92:	4413      	add	r3, r2
 800ba94:	009b      	lsls	r3, r3, #2
 800ba96:	4a15      	ldr	r2, [pc, #84]	; (800baec <prvAddNewTaskToReadyList+0xcc>)
 800ba98:	441a      	add	r2, r3
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	3304      	adds	r3, #4
 800ba9e:	4619      	mov	r1, r3
 800baa0:	4610      	mov	r0, r2
 800baa2:	f7fe fe2c 	bl	800a6fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800baa6:	f001 f80d 	bl	800cac4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800baaa:	4b0d      	ldr	r3, [pc, #52]	; (800bae0 <prvAddNewTaskToReadyList+0xc0>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	2b00      	cmp	r3, #0
 800bab0:	d00e      	beq.n	800bad0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bab2:	4b0a      	ldr	r3, [pc, #40]	; (800badc <prvAddNewTaskToReadyList+0xbc>)
 800bab4:	681b      	ldr	r3, [r3, #0]
 800bab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800babc:	429a      	cmp	r2, r3
 800babe:	d207      	bcs.n	800bad0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bac0:	4b0b      	ldr	r3, [pc, #44]	; (800baf0 <prvAddNewTaskToReadyList+0xd0>)
 800bac2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bac6:	601a      	str	r2, [r3, #0]
 800bac8:	f3bf 8f4f 	dsb	sy
 800bacc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bad0:	bf00      	nop
 800bad2:	3708      	adds	r7, #8
 800bad4:	46bd      	mov	sp, r7
 800bad6:	bd80      	pop	{r7, pc}
 800bad8:	200005dc 	.word	0x200005dc
 800badc:	200004dc 	.word	0x200004dc
 800bae0:	200005e8 	.word	0x200005e8
 800bae4:	200005f8 	.word	0x200005f8
 800bae8:	200005e4 	.word	0x200005e4
 800baec:	200004e0 	.word	0x200004e0
 800baf0:	e000ed04 	.word	0xe000ed04

0800baf4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800baf4:	b580      	push	{r7, lr}
 800baf6:	b084      	sub	sp, #16
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bafc:	2300      	movs	r3, #0
 800bafe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d017      	beq.n	800bb36 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bb06:	4b13      	ldr	r3, [pc, #76]	; (800bb54 <vTaskDelay+0x60>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d00a      	beq.n	800bb24 <vTaskDelay+0x30>
	__asm volatile
 800bb0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb12:	f383 8811 	msr	BASEPRI, r3
 800bb16:	f3bf 8f6f 	isb	sy
 800bb1a:	f3bf 8f4f 	dsb	sy
 800bb1e:	60bb      	str	r3, [r7, #8]
}
 800bb20:	bf00      	nop
 800bb22:	e7fe      	b.n	800bb22 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800bb24:	f000 f884 	bl	800bc30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bb28:	2100      	movs	r1, #0
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f000 fe06 	bl	800c73c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bb30:	f000 f88c 	bl	800bc4c <xTaskResumeAll>
 800bb34:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d107      	bne.n	800bb4c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800bb3c:	4b06      	ldr	r3, [pc, #24]	; (800bb58 <vTaskDelay+0x64>)
 800bb3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb42:	601a      	str	r2, [r3, #0]
 800bb44:	f3bf 8f4f 	dsb	sy
 800bb48:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bb4c:	bf00      	nop
 800bb4e:	3710      	adds	r7, #16
 800bb50:	46bd      	mov	sp, r7
 800bb52:	bd80      	pop	{r7, pc}
 800bb54:	20000604 	.word	0x20000604
 800bb58:	e000ed04 	.word	0xe000ed04

0800bb5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b08a      	sub	sp, #40	; 0x28
 800bb60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bb62:	2300      	movs	r3, #0
 800bb64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bb66:	2300      	movs	r3, #0
 800bb68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bb6a:	463a      	mov	r2, r7
 800bb6c:	1d39      	adds	r1, r7, #4
 800bb6e:	f107 0308 	add.w	r3, r7, #8
 800bb72:	4618      	mov	r0, r3
 800bb74:	f7f5 fa4c 	bl	8001010 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bb78:	6839      	ldr	r1, [r7, #0]
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	68ba      	ldr	r2, [r7, #8]
 800bb7e:	9202      	str	r2, [sp, #8]
 800bb80:	9301      	str	r3, [sp, #4]
 800bb82:	2300      	movs	r3, #0
 800bb84:	9300      	str	r3, [sp, #0]
 800bb86:	2300      	movs	r3, #0
 800bb88:	460a      	mov	r2, r1
 800bb8a:	4921      	ldr	r1, [pc, #132]	; (800bc10 <vTaskStartScheduler+0xb4>)
 800bb8c:	4821      	ldr	r0, [pc, #132]	; (800bc14 <vTaskStartScheduler+0xb8>)
 800bb8e:	f7ff fe07 	bl	800b7a0 <xTaskCreateStatic>
 800bb92:	4603      	mov	r3, r0
 800bb94:	4a20      	ldr	r2, [pc, #128]	; (800bc18 <vTaskStartScheduler+0xbc>)
 800bb96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bb98:	4b1f      	ldr	r3, [pc, #124]	; (800bc18 <vTaskStartScheduler+0xbc>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d002      	beq.n	800bba6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bba0:	2301      	movs	r3, #1
 800bba2:	617b      	str	r3, [r7, #20]
 800bba4:	e001      	b.n	800bbaa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bba6:	2300      	movs	r3, #0
 800bba8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	2b01      	cmp	r3, #1
 800bbae:	d11b      	bne.n	800bbe8 <vTaskStartScheduler+0x8c>
	__asm volatile
 800bbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb4:	f383 8811 	msr	BASEPRI, r3
 800bbb8:	f3bf 8f6f 	isb	sy
 800bbbc:	f3bf 8f4f 	dsb	sy
 800bbc0:	613b      	str	r3, [r7, #16]
}
 800bbc2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bbc4:	4b15      	ldr	r3, [pc, #84]	; (800bc1c <vTaskStartScheduler+0xc0>)
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	334c      	adds	r3, #76	; 0x4c
 800bbca:	4a15      	ldr	r2, [pc, #84]	; (800bc20 <vTaskStartScheduler+0xc4>)
 800bbcc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800bbce:	4b15      	ldr	r3, [pc, #84]	; (800bc24 <vTaskStartScheduler+0xc8>)
 800bbd0:	f04f 32ff 	mov.w	r2, #4294967295
 800bbd4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800bbd6:	4b14      	ldr	r3, [pc, #80]	; (800bc28 <vTaskStartScheduler+0xcc>)
 800bbd8:	2201      	movs	r2, #1
 800bbda:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800bbdc:	4b13      	ldr	r3, [pc, #76]	; (800bc2c <vTaskStartScheduler+0xd0>)
 800bbde:	2200      	movs	r2, #0
 800bbe0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800bbe2:	f000 fe9d 	bl	800c920 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800bbe6:	e00e      	b.n	800bc06 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbee:	d10a      	bne.n	800bc06 <vTaskStartScheduler+0xaa>
	__asm volatile
 800bbf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf4:	f383 8811 	msr	BASEPRI, r3
 800bbf8:	f3bf 8f6f 	isb	sy
 800bbfc:	f3bf 8f4f 	dsb	sy
 800bc00:	60fb      	str	r3, [r7, #12]
}
 800bc02:	bf00      	nop
 800bc04:	e7fe      	b.n	800bc04 <vTaskStartScheduler+0xa8>
}
 800bc06:	bf00      	nop
 800bc08:	3718      	adds	r7, #24
 800bc0a:	46bd      	mov	sp, r7
 800bc0c:	bd80      	pop	{r7, pc}
 800bc0e:	bf00      	nop
 800bc10:	0801b92c 	.word	0x0801b92c
 800bc14:	0800c211 	.word	0x0800c211
 800bc18:	20000600 	.word	0x20000600
 800bc1c:	200004dc 	.word	0x200004dc
 800bc20:	200000b0 	.word	0x200000b0
 800bc24:	200005fc 	.word	0x200005fc
 800bc28:	200005e8 	.word	0x200005e8
 800bc2c:	200005e0 	.word	0x200005e0

0800bc30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800bc30:	b480      	push	{r7}
 800bc32:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800bc34:	4b04      	ldr	r3, [pc, #16]	; (800bc48 <vTaskSuspendAll+0x18>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	3301      	adds	r3, #1
 800bc3a:	4a03      	ldr	r2, [pc, #12]	; (800bc48 <vTaskSuspendAll+0x18>)
 800bc3c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800bc3e:	bf00      	nop
 800bc40:	46bd      	mov	sp, r7
 800bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc46:	4770      	bx	lr
 800bc48:	20000604 	.word	0x20000604

0800bc4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b084      	sub	sp, #16
 800bc50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800bc52:	2300      	movs	r3, #0
 800bc54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800bc56:	2300      	movs	r3, #0
 800bc58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800bc5a:	4b41      	ldr	r3, [pc, #260]	; (800bd60 <xTaskResumeAll+0x114>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d10a      	bne.n	800bc78 <xTaskResumeAll+0x2c>
	__asm volatile
 800bc62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc66:	f383 8811 	msr	BASEPRI, r3
 800bc6a:	f3bf 8f6f 	isb	sy
 800bc6e:	f3bf 8f4f 	dsb	sy
 800bc72:	603b      	str	r3, [r7, #0]
}
 800bc74:	bf00      	nop
 800bc76:	e7fe      	b.n	800bc76 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800bc78:	f000 fef4 	bl	800ca64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800bc7c:	4b38      	ldr	r3, [pc, #224]	; (800bd60 <xTaskResumeAll+0x114>)
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	3b01      	subs	r3, #1
 800bc82:	4a37      	ldr	r2, [pc, #220]	; (800bd60 <xTaskResumeAll+0x114>)
 800bc84:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bc86:	4b36      	ldr	r3, [pc, #216]	; (800bd60 <xTaskResumeAll+0x114>)
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	d161      	bne.n	800bd52 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800bc8e:	4b35      	ldr	r3, [pc, #212]	; (800bd64 <xTaskResumeAll+0x118>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d05d      	beq.n	800bd52 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bc96:	e02e      	b.n	800bcf6 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc98:	4b33      	ldr	r3, [pc, #204]	; (800bd68 <xTaskResumeAll+0x11c>)
 800bc9a:	68db      	ldr	r3, [r3, #12]
 800bc9c:	68db      	ldr	r3, [r3, #12]
 800bc9e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	3318      	adds	r3, #24
 800bca4:	4618      	mov	r0, r3
 800bca6:	f7fe fd87 	bl	800a7b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	3304      	adds	r3, #4
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f7fe fd82 	bl	800a7b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcb8:	2201      	movs	r2, #1
 800bcba:	409a      	lsls	r2, r3
 800bcbc:	4b2b      	ldr	r3, [pc, #172]	; (800bd6c <xTaskResumeAll+0x120>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	4313      	orrs	r3, r2
 800bcc2:	4a2a      	ldr	r2, [pc, #168]	; (800bd6c <xTaskResumeAll+0x120>)
 800bcc4:	6013      	str	r3, [r2, #0]
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcca:	4613      	mov	r3, r2
 800bccc:	009b      	lsls	r3, r3, #2
 800bcce:	4413      	add	r3, r2
 800bcd0:	009b      	lsls	r3, r3, #2
 800bcd2:	4a27      	ldr	r2, [pc, #156]	; (800bd70 <xTaskResumeAll+0x124>)
 800bcd4:	441a      	add	r2, r3
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	3304      	adds	r3, #4
 800bcda:	4619      	mov	r1, r3
 800bcdc:	4610      	mov	r0, r2
 800bcde:	f7fe fd0e 	bl	800a6fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bce6:	4b23      	ldr	r3, [pc, #140]	; (800bd74 <xTaskResumeAll+0x128>)
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d302      	bcc.n	800bcf6 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800bcf0:	4b21      	ldr	r3, [pc, #132]	; (800bd78 <xTaskResumeAll+0x12c>)
 800bcf2:	2201      	movs	r2, #1
 800bcf4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800bcf6:	4b1c      	ldr	r3, [pc, #112]	; (800bd68 <xTaskResumeAll+0x11c>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d1cc      	bne.n	800bc98 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2b00      	cmp	r3, #0
 800bd02:	d001      	beq.n	800bd08 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800bd04:	f000 fb3e 	bl	800c384 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800bd08:	4b1c      	ldr	r3, [pc, #112]	; (800bd7c <xTaskResumeAll+0x130>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d010      	beq.n	800bd36 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800bd14:	f000 f858 	bl	800bdc8 <xTaskIncrementTick>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d002      	beq.n	800bd24 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800bd1e:	4b16      	ldr	r3, [pc, #88]	; (800bd78 <xTaskResumeAll+0x12c>)
 800bd20:	2201      	movs	r2, #1
 800bd22:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	3b01      	subs	r3, #1
 800bd28:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d1f1      	bne.n	800bd14 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800bd30:	4b12      	ldr	r3, [pc, #72]	; (800bd7c <xTaskResumeAll+0x130>)
 800bd32:	2200      	movs	r2, #0
 800bd34:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800bd36:	4b10      	ldr	r3, [pc, #64]	; (800bd78 <xTaskResumeAll+0x12c>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d009      	beq.n	800bd52 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800bd3e:	2301      	movs	r3, #1
 800bd40:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800bd42:	4b0f      	ldr	r3, [pc, #60]	; (800bd80 <xTaskResumeAll+0x134>)
 800bd44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd48:	601a      	str	r2, [r3, #0]
 800bd4a:	f3bf 8f4f 	dsb	sy
 800bd4e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bd52:	f000 feb7 	bl	800cac4 <vPortExitCritical>

	return xAlreadyYielded;
 800bd56:	68bb      	ldr	r3, [r7, #8]
}
 800bd58:	4618      	mov	r0, r3
 800bd5a:	3710      	adds	r7, #16
 800bd5c:	46bd      	mov	sp, r7
 800bd5e:	bd80      	pop	{r7, pc}
 800bd60:	20000604 	.word	0x20000604
 800bd64:	200005dc 	.word	0x200005dc
 800bd68:	2000059c 	.word	0x2000059c
 800bd6c:	200005e4 	.word	0x200005e4
 800bd70:	200004e0 	.word	0x200004e0
 800bd74:	200004dc 	.word	0x200004dc
 800bd78:	200005f0 	.word	0x200005f0
 800bd7c:	200005ec 	.word	0x200005ec
 800bd80:	e000ed04 	.word	0xe000ed04

0800bd84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bd84:	b480      	push	{r7}
 800bd86:	b083      	sub	sp, #12
 800bd88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bd8a:	4b05      	ldr	r3, [pc, #20]	; (800bda0 <xTaskGetTickCount+0x1c>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800bd90:	687b      	ldr	r3, [r7, #4]
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	370c      	adds	r7, #12
 800bd96:	46bd      	mov	sp, r7
 800bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9c:	4770      	bx	lr
 800bd9e:	bf00      	nop
 800bda0:	200005e0 	.word	0x200005e0

0800bda4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b082      	sub	sp, #8
 800bda8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bdaa:	f000 ff3d 	bl	800cc28 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800bdae:	2300      	movs	r3, #0
 800bdb0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800bdb2:	4b04      	ldr	r3, [pc, #16]	; (800bdc4 <xTaskGetTickCountFromISR+0x20>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800bdb8:	683b      	ldr	r3, [r7, #0]
}
 800bdba:	4618      	mov	r0, r3
 800bdbc:	3708      	adds	r7, #8
 800bdbe:	46bd      	mov	sp, r7
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	bf00      	nop
 800bdc4:	200005e0 	.word	0x200005e0

0800bdc8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bdc8:	b580      	push	{r7, lr}
 800bdca:	b086      	sub	sp, #24
 800bdcc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bdce:	2300      	movs	r3, #0
 800bdd0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bdd2:	4b4e      	ldr	r3, [pc, #312]	; (800bf0c <xTaskIncrementTick+0x144>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	f040 808e 	bne.w	800bef8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bddc:	4b4c      	ldr	r3, [pc, #304]	; (800bf10 <xTaskIncrementTick+0x148>)
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	3301      	adds	r3, #1
 800bde2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bde4:	4a4a      	ldr	r2, [pc, #296]	; (800bf10 <xTaskIncrementTick+0x148>)
 800bde6:	693b      	ldr	r3, [r7, #16]
 800bde8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bdea:	693b      	ldr	r3, [r7, #16]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d120      	bne.n	800be32 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800bdf0:	4b48      	ldr	r3, [pc, #288]	; (800bf14 <xTaskIncrementTick+0x14c>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d00a      	beq.n	800be10 <xTaskIncrementTick+0x48>
	__asm volatile
 800bdfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdfe:	f383 8811 	msr	BASEPRI, r3
 800be02:	f3bf 8f6f 	isb	sy
 800be06:	f3bf 8f4f 	dsb	sy
 800be0a:	603b      	str	r3, [r7, #0]
}
 800be0c:	bf00      	nop
 800be0e:	e7fe      	b.n	800be0e <xTaskIncrementTick+0x46>
 800be10:	4b40      	ldr	r3, [pc, #256]	; (800bf14 <xTaskIncrementTick+0x14c>)
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	60fb      	str	r3, [r7, #12]
 800be16:	4b40      	ldr	r3, [pc, #256]	; (800bf18 <xTaskIncrementTick+0x150>)
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4a3e      	ldr	r2, [pc, #248]	; (800bf14 <xTaskIncrementTick+0x14c>)
 800be1c:	6013      	str	r3, [r2, #0]
 800be1e:	4a3e      	ldr	r2, [pc, #248]	; (800bf18 <xTaskIncrementTick+0x150>)
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	6013      	str	r3, [r2, #0]
 800be24:	4b3d      	ldr	r3, [pc, #244]	; (800bf1c <xTaskIncrementTick+0x154>)
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	3301      	adds	r3, #1
 800be2a:	4a3c      	ldr	r2, [pc, #240]	; (800bf1c <xTaskIncrementTick+0x154>)
 800be2c:	6013      	str	r3, [r2, #0]
 800be2e:	f000 faa9 	bl	800c384 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800be32:	4b3b      	ldr	r3, [pc, #236]	; (800bf20 <xTaskIncrementTick+0x158>)
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	693a      	ldr	r2, [r7, #16]
 800be38:	429a      	cmp	r2, r3
 800be3a:	d348      	bcc.n	800bece <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800be3c:	4b35      	ldr	r3, [pc, #212]	; (800bf14 <xTaskIncrementTick+0x14c>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d104      	bne.n	800be50 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be46:	4b36      	ldr	r3, [pc, #216]	; (800bf20 <xTaskIncrementTick+0x158>)
 800be48:	f04f 32ff 	mov.w	r2, #4294967295
 800be4c:	601a      	str	r2, [r3, #0]
					break;
 800be4e:	e03e      	b.n	800bece <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be50:	4b30      	ldr	r3, [pc, #192]	; (800bf14 <xTaskIncrementTick+0x14c>)
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	68db      	ldr	r3, [r3, #12]
 800be56:	68db      	ldr	r3, [r3, #12]
 800be58:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800be5a:	68bb      	ldr	r3, [r7, #8]
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800be60:	693a      	ldr	r2, [r7, #16]
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	429a      	cmp	r2, r3
 800be66:	d203      	bcs.n	800be70 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800be68:	4a2d      	ldr	r2, [pc, #180]	; (800bf20 <xTaskIncrementTick+0x158>)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800be6e:	e02e      	b.n	800bece <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800be70:	68bb      	ldr	r3, [r7, #8]
 800be72:	3304      	adds	r3, #4
 800be74:	4618      	mov	r0, r3
 800be76:	f7fe fc9f 	bl	800a7b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be7e:	2b00      	cmp	r3, #0
 800be80:	d004      	beq.n	800be8c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	3318      	adds	r3, #24
 800be86:	4618      	mov	r0, r3
 800be88:	f7fe fc96 	bl	800a7b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be90:	2201      	movs	r2, #1
 800be92:	409a      	lsls	r2, r3
 800be94:	4b23      	ldr	r3, [pc, #140]	; (800bf24 <xTaskIncrementTick+0x15c>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	4313      	orrs	r3, r2
 800be9a:	4a22      	ldr	r2, [pc, #136]	; (800bf24 <xTaskIncrementTick+0x15c>)
 800be9c:	6013      	str	r3, [r2, #0]
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bea2:	4613      	mov	r3, r2
 800bea4:	009b      	lsls	r3, r3, #2
 800bea6:	4413      	add	r3, r2
 800bea8:	009b      	lsls	r3, r3, #2
 800beaa:	4a1f      	ldr	r2, [pc, #124]	; (800bf28 <xTaskIncrementTick+0x160>)
 800beac:	441a      	add	r2, r3
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	3304      	adds	r3, #4
 800beb2:	4619      	mov	r1, r3
 800beb4:	4610      	mov	r0, r2
 800beb6:	f7fe fc22 	bl	800a6fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800beba:	68bb      	ldr	r3, [r7, #8]
 800bebc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bebe:	4b1b      	ldr	r3, [pc, #108]	; (800bf2c <xTaskIncrementTick+0x164>)
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bec4:	429a      	cmp	r2, r3
 800bec6:	d3b9      	bcc.n	800be3c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800bec8:	2301      	movs	r3, #1
 800beca:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800becc:	e7b6      	b.n	800be3c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bece:	4b17      	ldr	r3, [pc, #92]	; (800bf2c <xTaskIncrementTick+0x164>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bed4:	4914      	ldr	r1, [pc, #80]	; (800bf28 <xTaskIncrementTick+0x160>)
 800bed6:	4613      	mov	r3, r2
 800bed8:	009b      	lsls	r3, r3, #2
 800beda:	4413      	add	r3, r2
 800bedc:	009b      	lsls	r3, r3, #2
 800bede:	440b      	add	r3, r1
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	2b01      	cmp	r3, #1
 800bee4:	d901      	bls.n	800beea <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800bee6:	2301      	movs	r3, #1
 800bee8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800beea:	4b11      	ldr	r3, [pc, #68]	; (800bf30 <xTaskIncrementTick+0x168>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d007      	beq.n	800bf02 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800bef2:	2301      	movs	r3, #1
 800bef4:	617b      	str	r3, [r7, #20]
 800bef6:	e004      	b.n	800bf02 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bef8:	4b0e      	ldr	r3, [pc, #56]	; (800bf34 <xTaskIncrementTick+0x16c>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	3301      	adds	r3, #1
 800befe:	4a0d      	ldr	r2, [pc, #52]	; (800bf34 <xTaskIncrementTick+0x16c>)
 800bf00:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bf02:	697b      	ldr	r3, [r7, #20]
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	3718      	adds	r7, #24
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	bd80      	pop	{r7, pc}
 800bf0c:	20000604 	.word	0x20000604
 800bf10:	200005e0 	.word	0x200005e0
 800bf14:	20000594 	.word	0x20000594
 800bf18:	20000598 	.word	0x20000598
 800bf1c:	200005f4 	.word	0x200005f4
 800bf20:	200005fc 	.word	0x200005fc
 800bf24:	200005e4 	.word	0x200005e4
 800bf28:	200004e0 	.word	0x200004e0
 800bf2c:	200004dc 	.word	0x200004dc
 800bf30:	200005f0 	.word	0x200005f0
 800bf34:	200005ec 	.word	0x200005ec

0800bf38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b087      	sub	sp, #28
 800bf3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bf3e:	4b29      	ldr	r3, [pc, #164]	; (800bfe4 <vTaskSwitchContext+0xac>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d003      	beq.n	800bf4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bf46:	4b28      	ldr	r3, [pc, #160]	; (800bfe8 <vTaskSwitchContext+0xb0>)
 800bf48:	2201      	movs	r2, #1
 800bf4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bf4c:	e044      	b.n	800bfd8 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 800bf4e:	4b26      	ldr	r3, [pc, #152]	; (800bfe8 <vTaskSwitchContext+0xb0>)
 800bf50:	2200      	movs	r2, #0
 800bf52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf54:	4b25      	ldr	r3, [pc, #148]	; (800bfec <vTaskSwitchContext+0xb4>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	fab3 f383 	clz	r3, r3
 800bf60:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800bf62:	7afb      	ldrb	r3, [r7, #11]
 800bf64:	f1c3 031f 	rsb	r3, r3, #31
 800bf68:	617b      	str	r3, [r7, #20]
 800bf6a:	4921      	ldr	r1, [pc, #132]	; (800bff0 <vTaskSwitchContext+0xb8>)
 800bf6c:	697a      	ldr	r2, [r7, #20]
 800bf6e:	4613      	mov	r3, r2
 800bf70:	009b      	lsls	r3, r3, #2
 800bf72:	4413      	add	r3, r2
 800bf74:	009b      	lsls	r3, r3, #2
 800bf76:	440b      	add	r3, r1
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d10a      	bne.n	800bf94 <vTaskSwitchContext+0x5c>
	__asm volatile
 800bf7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf82:	f383 8811 	msr	BASEPRI, r3
 800bf86:	f3bf 8f6f 	isb	sy
 800bf8a:	f3bf 8f4f 	dsb	sy
 800bf8e:	607b      	str	r3, [r7, #4]
}
 800bf90:	bf00      	nop
 800bf92:	e7fe      	b.n	800bf92 <vTaskSwitchContext+0x5a>
 800bf94:	697a      	ldr	r2, [r7, #20]
 800bf96:	4613      	mov	r3, r2
 800bf98:	009b      	lsls	r3, r3, #2
 800bf9a:	4413      	add	r3, r2
 800bf9c:	009b      	lsls	r3, r3, #2
 800bf9e:	4a14      	ldr	r2, [pc, #80]	; (800bff0 <vTaskSwitchContext+0xb8>)
 800bfa0:	4413      	add	r3, r2
 800bfa2:	613b      	str	r3, [r7, #16]
 800bfa4:	693b      	ldr	r3, [r7, #16]
 800bfa6:	685b      	ldr	r3, [r3, #4]
 800bfa8:	685a      	ldr	r2, [r3, #4]
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	605a      	str	r2, [r3, #4]
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	685a      	ldr	r2, [r3, #4]
 800bfb2:	693b      	ldr	r3, [r7, #16]
 800bfb4:	3308      	adds	r3, #8
 800bfb6:	429a      	cmp	r2, r3
 800bfb8:	d104      	bne.n	800bfc4 <vTaskSwitchContext+0x8c>
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	685b      	ldr	r3, [r3, #4]
 800bfbe:	685a      	ldr	r2, [r3, #4]
 800bfc0:	693b      	ldr	r3, [r7, #16]
 800bfc2:	605a      	str	r2, [r3, #4]
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	685b      	ldr	r3, [r3, #4]
 800bfc8:	68db      	ldr	r3, [r3, #12]
 800bfca:	4a0a      	ldr	r2, [pc, #40]	; (800bff4 <vTaskSwitchContext+0xbc>)
 800bfcc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bfce:	4b09      	ldr	r3, [pc, #36]	; (800bff4 <vTaskSwitchContext+0xbc>)
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	334c      	adds	r3, #76	; 0x4c
 800bfd4:	4a08      	ldr	r2, [pc, #32]	; (800bff8 <vTaskSwitchContext+0xc0>)
 800bfd6:	6013      	str	r3, [r2, #0]
}
 800bfd8:	bf00      	nop
 800bfda:	371c      	adds	r7, #28
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe2:	4770      	bx	lr
 800bfe4:	20000604 	.word	0x20000604
 800bfe8:	200005f0 	.word	0x200005f0
 800bfec:	200005e4 	.word	0x200005e4
 800bff0:	200004e0 	.word	0x200004e0
 800bff4:	200004dc 	.word	0x200004dc
 800bff8:	200000b0 	.word	0x200000b0

0800bffc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b084      	sub	sp, #16
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
 800c004:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d10a      	bne.n	800c022 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800c00c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c010:	f383 8811 	msr	BASEPRI, r3
 800c014:	f3bf 8f6f 	isb	sy
 800c018:	f3bf 8f4f 	dsb	sy
 800c01c:	60fb      	str	r3, [r7, #12]
}
 800c01e:	bf00      	nop
 800c020:	e7fe      	b.n	800c020 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c022:	4b07      	ldr	r3, [pc, #28]	; (800c040 <vTaskPlaceOnEventList+0x44>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	3318      	adds	r3, #24
 800c028:	4619      	mov	r1, r3
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f7fe fb8b 	bl	800a746 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c030:	2101      	movs	r1, #1
 800c032:	6838      	ldr	r0, [r7, #0]
 800c034:	f000 fb82 	bl	800c73c <prvAddCurrentTaskToDelayedList>
}
 800c038:	bf00      	nop
 800c03a:	3710      	adds	r7, #16
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}
 800c040:	200004dc 	.word	0x200004dc

0800c044 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c044:	b580      	push	{r7, lr}
 800c046:	b086      	sub	sp, #24
 800c048:	af00      	add	r7, sp, #0
 800c04a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	68db      	ldr	r3, [r3, #12]
 800c050:	68db      	ldr	r3, [r3, #12]
 800c052:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	2b00      	cmp	r3, #0
 800c058:	d10a      	bne.n	800c070 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800c05a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c05e:	f383 8811 	msr	BASEPRI, r3
 800c062:	f3bf 8f6f 	isb	sy
 800c066:	f3bf 8f4f 	dsb	sy
 800c06a:	60fb      	str	r3, [r7, #12]
}
 800c06c:	bf00      	nop
 800c06e:	e7fe      	b.n	800c06e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	3318      	adds	r3, #24
 800c074:	4618      	mov	r0, r3
 800c076:	f7fe fb9f 	bl	800a7b8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c07a:	4b1d      	ldr	r3, [pc, #116]	; (800c0f0 <xTaskRemoveFromEventList+0xac>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d11c      	bne.n	800c0bc <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c082:	693b      	ldr	r3, [r7, #16]
 800c084:	3304      	adds	r3, #4
 800c086:	4618      	mov	r0, r3
 800c088:	f7fe fb96 	bl	800a7b8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c090:	2201      	movs	r2, #1
 800c092:	409a      	lsls	r2, r3
 800c094:	4b17      	ldr	r3, [pc, #92]	; (800c0f4 <xTaskRemoveFromEventList+0xb0>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	4313      	orrs	r3, r2
 800c09a:	4a16      	ldr	r2, [pc, #88]	; (800c0f4 <xTaskRemoveFromEventList+0xb0>)
 800c09c:	6013      	str	r3, [r2, #0]
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0a2:	4613      	mov	r3, r2
 800c0a4:	009b      	lsls	r3, r3, #2
 800c0a6:	4413      	add	r3, r2
 800c0a8:	009b      	lsls	r3, r3, #2
 800c0aa:	4a13      	ldr	r2, [pc, #76]	; (800c0f8 <xTaskRemoveFromEventList+0xb4>)
 800c0ac:	441a      	add	r2, r3
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	3304      	adds	r3, #4
 800c0b2:	4619      	mov	r1, r3
 800c0b4:	4610      	mov	r0, r2
 800c0b6:	f7fe fb22 	bl	800a6fe <vListInsertEnd>
 800c0ba:	e005      	b.n	800c0c8 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c0bc:	693b      	ldr	r3, [r7, #16]
 800c0be:	3318      	adds	r3, #24
 800c0c0:	4619      	mov	r1, r3
 800c0c2:	480e      	ldr	r0, [pc, #56]	; (800c0fc <xTaskRemoveFromEventList+0xb8>)
 800c0c4:	f7fe fb1b 	bl	800a6fe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0cc:	4b0c      	ldr	r3, [pc, #48]	; (800c100 <xTaskRemoveFromEventList+0xbc>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	d905      	bls.n	800c0e2 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c0d6:	2301      	movs	r3, #1
 800c0d8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c0da:	4b0a      	ldr	r3, [pc, #40]	; (800c104 <xTaskRemoveFromEventList+0xc0>)
 800c0dc:	2201      	movs	r2, #1
 800c0de:	601a      	str	r2, [r3, #0]
 800c0e0:	e001      	b.n	800c0e6 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c0e6:	697b      	ldr	r3, [r7, #20]
}
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	3718      	adds	r7, #24
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	bd80      	pop	{r7, pc}
 800c0f0:	20000604 	.word	0x20000604
 800c0f4:	200005e4 	.word	0x200005e4
 800c0f8:	200004e0 	.word	0x200004e0
 800c0fc:	2000059c 	.word	0x2000059c
 800c100:	200004dc 	.word	0x200004dc
 800c104:	200005f0 	.word	0x200005f0

0800c108 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c108:	b480      	push	{r7}
 800c10a:	b083      	sub	sp, #12
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c110:	4b06      	ldr	r3, [pc, #24]	; (800c12c <vTaskInternalSetTimeOutState+0x24>)
 800c112:	681a      	ldr	r2, [r3, #0]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c118:	4b05      	ldr	r3, [pc, #20]	; (800c130 <vTaskInternalSetTimeOutState+0x28>)
 800c11a:	681a      	ldr	r2, [r3, #0]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	605a      	str	r2, [r3, #4]
}
 800c120:	bf00      	nop
 800c122:	370c      	adds	r7, #12
 800c124:	46bd      	mov	sp, r7
 800c126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12a:	4770      	bx	lr
 800c12c:	200005f4 	.word	0x200005f4
 800c130:	200005e0 	.word	0x200005e0

0800c134 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b088      	sub	sp, #32
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	2b00      	cmp	r3, #0
 800c142:	d10a      	bne.n	800c15a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800c144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c148:	f383 8811 	msr	BASEPRI, r3
 800c14c:	f3bf 8f6f 	isb	sy
 800c150:	f3bf 8f4f 	dsb	sy
 800c154:	613b      	str	r3, [r7, #16]
}
 800c156:	bf00      	nop
 800c158:	e7fe      	b.n	800c158 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d10a      	bne.n	800c176 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800c160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c164:	f383 8811 	msr	BASEPRI, r3
 800c168:	f3bf 8f6f 	isb	sy
 800c16c:	f3bf 8f4f 	dsb	sy
 800c170:	60fb      	str	r3, [r7, #12]
}
 800c172:	bf00      	nop
 800c174:	e7fe      	b.n	800c174 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800c176:	f000 fc75 	bl	800ca64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c17a:	4b1d      	ldr	r3, [pc, #116]	; (800c1f0 <xTaskCheckForTimeOut+0xbc>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	69ba      	ldr	r2, [r7, #24]
 800c186:	1ad3      	subs	r3, r2, r3
 800c188:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c192:	d102      	bne.n	800c19a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c194:	2300      	movs	r3, #0
 800c196:	61fb      	str	r3, [r7, #28]
 800c198:	e023      	b.n	800c1e2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	681a      	ldr	r2, [r3, #0]
 800c19e:	4b15      	ldr	r3, [pc, #84]	; (800c1f4 <xTaskCheckForTimeOut+0xc0>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	429a      	cmp	r2, r3
 800c1a4:	d007      	beq.n	800c1b6 <xTaskCheckForTimeOut+0x82>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	685b      	ldr	r3, [r3, #4]
 800c1aa:	69ba      	ldr	r2, [r7, #24]
 800c1ac:	429a      	cmp	r2, r3
 800c1ae:	d302      	bcc.n	800c1b6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	61fb      	str	r3, [r7, #28]
 800c1b4:	e015      	b.n	800c1e2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	697a      	ldr	r2, [r7, #20]
 800c1bc:	429a      	cmp	r2, r3
 800c1be:	d20b      	bcs.n	800c1d8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c1c0:	683b      	ldr	r3, [r7, #0]
 800c1c2:	681a      	ldr	r2, [r3, #0]
 800c1c4:	697b      	ldr	r3, [r7, #20]
 800c1c6:	1ad2      	subs	r2, r2, r3
 800c1c8:	683b      	ldr	r3, [r7, #0]
 800c1ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c1cc:	6878      	ldr	r0, [r7, #4]
 800c1ce:	f7ff ff9b 	bl	800c108 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	61fb      	str	r3, [r7, #28]
 800c1d6:	e004      	b.n	800c1e2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800c1d8:	683b      	ldr	r3, [r7, #0]
 800c1da:	2200      	movs	r2, #0
 800c1dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c1de:	2301      	movs	r3, #1
 800c1e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c1e2:	f000 fc6f 	bl	800cac4 <vPortExitCritical>

	return xReturn;
 800c1e6:	69fb      	ldr	r3, [r7, #28]
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3720      	adds	r7, #32
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}
 800c1f0:	200005e0 	.word	0x200005e0
 800c1f4:	200005f4 	.word	0x200005f4

0800c1f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c1f8:	b480      	push	{r7}
 800c1fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c1fc:	4b03      	ldr	r3, [pc, #12]	; (800c20c <vTaskMissedYield+0x14>)
 800c1fe:	2201      	movs	r2, #1
 800c200:	601a      	str	r2, [r3, #0]
}
 800c202:	bf00      	nop
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr
 800c20c:	200005f0 	.word	0x200005f0

0800c210 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b082      	sub	sp, #8
 800c214:	af00      	add	r7, sp, #0
 800c216:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c218:	f000 f852 	bl	800c2c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c21c:	4b06      	ldr	r3, [pc, #24]	; (800c238 <prvIdleTask+0x28>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	2b01      	cmp	r3, #1
 800c222:	d9f9      	bls.n	800c218 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c224:	4b05      	ldr	r3, [pc, #20]	; (800c23c <prvIdleTask+0x2c>)
 800c226:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c22a:	601a      	str	r2, [r3, #0]
 800c22c:	f3bf 8f4f 	dsb	sy
 800c230:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c234:	e7f0      	b.n	800c218 <prvIdleTask+0x8>
 800c236:	bf00      	nop
 800c238:	200004e0 	.word	0x200004e0
 800c23c:	e000ed04 	.word	0xe000ed04

0800c240 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c240:	b580      	push	{r7, lr}
 800c242:	b082      	sub	sp, #8
 800c244:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c246:	2300      	movs	r3, #0
 800c248:	607b      	str	r3, [r7, #4]
 800c24a:	e00c      	b.n	800c266 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c24c:	687a      	ldr	r2, [r7, #4]
 800c24e:	4613      	mov	r3, r2
 800c250:	009b      	lsls	r3, r3, #2
 800c252:	4413      	add	r3, r2
 800c254:	009b      	lsls	r3, r3, #2
 800c256:	4a12      	ldr	r2, [pc, #72]	; (800c2a0 <prvInitialiseTaskLists+0x60>)
 800c258:	4413      	add	r3, r2
 800c25a:	4618      	mov	r0, r3
 800c25c:	f7fe fa22 	bl	800a6a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	3301      	adds	r3, #1
 800c264:	607b      	str	r3, [r7, #4]
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	2b06      	cmp	r3, #6
 800c26a:	d9ef      	bls.n	800c24c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c26c:	480d      	ldr	r0, [pc, #52]	; (800c2a4 <prvInitialiseTaskLists+0x64>)
 800c26e:	f7fe fa19 	bl	800a6a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c272:	480d      	ldr	r0, [pc, #52]	; (800c2a8 <prvInitialiseTaskLists+0x68>)
 800c274:	f7fe fa16 	bl	800a6a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c278:	480c      	ldr	r0, [pc, #48]	; (800c2ac <prvInitialiseTaskLists+0x6c>)
 800c27a:	f7fe fa13 	bl	800a6a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c27e:	480c      	ldr	r0, [pc, #48]	; (800c2b0 <prvInitialiseTaskLists+0x70>)
 800c280:	f7fe fa10 	bl	800a6a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c284:	480b      	ldr	r0, [pc, #44]	; (800c2b4 <prvInitialiseTaskLists+0x74>)
 800c286:	f7fe fa0d 	bl	800a6a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c28a:	4b0b      	ldr	r3, [pc, #44]	; (800c2b8 <prvInitialiseTaskLists+0x78>)
 800c28c:	4a05      	ldr	r2, [pc, #20]	; (800c2a4 <prvInitialiseTaskLists+0x64>)
 800c28e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c290:	4b0a      	ldr	r3, [pc, #40]	; (800c2bc <prvInitialiseTaskLists+0x7c>)
 800c292:	4a05      	ldr	r2, [pc, #20]	; (800c2a8 <prvInitialiseTaskLists+0x68>)
 800c294:	601a      	str	r2, [r3, #0]
}
 800c296:	bf00      	nop
 800c298:	3708      	adds	r7, #8
 800c29a:	46bd      	mov	sp, r7
 800c29c:	bd80      	pop	{r7, pc}
 800c29e:	bf00      	nop
 800c2a0:	200004e0 	.word	0x200004e0
 800c2a4:	2000056c 	.word	0x2000056c
 800c2a8:	20000580 	.word	0x20000580
 800c2ac:	2000059c 	.word	0x2000059c
 800c2b0:	200005b0 	.word	0x200005b0
 800c2b4:	200005c8 	.word	0x200005c8
 800c2b8:	20000594 	.word	0x20000594
 800c2bc:	20000598 	.word	0x20000598

0800c2c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b082      	sub	sp, #8
 800c2c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c2c6:	e019      	b.n	800c2fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c2c8:	f000 fbcc 	bl	800ca64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c2cc:	4b10      	ldr	r3, [pc, #64]	; (800c310 <prvCheckTasksWaitingTermination+0x50>)
 800c2ce:	68db      	ldr	r3, [r3, #12]
 800c2d0:	68db      	ldr	r3, [r3, #12]
 800c2d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	3304      	adds	r3, #4
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f7fe fa6d 	bl	800a7b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c2de:	4b0d      	ldr	r3, [pc, #52]	; (800c314 <prvCheckTasksWaitingTermination+0x54>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	3b01      	subs	r3, #1
 800c2e4:	4a0b      	ldr	r2, [pc, #44]	; (800c314 <prvCheckTasksWaitingTermination+0x54>)
 800c2e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c2e8:	4b0b      	ldr	r3, [pc, #44]	; (800c318 <prvCheckTasksWaitingTermination+0x58>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	3b01      	subs	r3, #1
 800c2ee:	4a0a      	ldr	r2, [pc, #40]	; (800c318 <prvCheckTasksWaitingTermination+0x58>)
 800c2f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c2f2:	f000 fbe7 	bl	800cac4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c2f6:	6878      	ldr	r0, [r7, #4]
 800c2f8:	f000 f810 	bl	800c31c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c2fc:	4b06      	ldr	r3, [pc, #24]	; (800c318 <prvCheckTasksWaitingTermination+0x58>)
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d1e1      	bne.n	800c2c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c304:	bf00      	nop
 800c306:	bf00      	nop
 800c308:	3708      	adds	r7, #8
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
 800c30e:	bf00      	nop
 800c310:	200005b0 	.word	0x200005b0
 800c314:	200005dc 	.word	0x200005dc
 800c318:	200005c4 	.word	0x200005c4

0800c31c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	b084      	sub	sp, #16
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	334c      	adds	r3, #76	; 0x4c
 800c328:	4618      	mov	r0, r3
 800c32a:	f00e fa33 	bl	801a794 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c334:	2b00      	cmp	r3, #0
 800c336:	d108      	bne.n	800c34a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c33c:	4618      	mov	r0, r3
 800c33e:	f000 fd7f 	bl	800ce40 <vPortFree>
				vPortFree( pxTCB );
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f000 fd7c 	bl	800ce40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c348:	e018      	b.n	800c37c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c350:	2b01      	cmp	r3, #1
 800c352:	d103      	bne.n	800c35c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f000 fd73 	bl	800ce40 <vPortFree>
	}
 800c35a:	e00f      	b.n	800c37c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 800c362:	2b02      	cmp	r3, #2
 800c364:	d00a      	beq.n	800c37c <prvDeleteTCB+0x60>
	__asm volatile
 800c366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c36a:	f383 8811 	msr	BASEPRI, r3
 800c36e:	f3bf 8f6f 	isb	sy
 800c372:	f3bf 8f4f 	dsb	sy
 800c376:	60fb      	str	r3, [r7, #12]
}
 800c378:	bf00      	nop
 800c37a:	e7fe      	b.n	800c37a <prvDeleteTCB+0x5e>
	}
 800c37c:	bf00      	nop
 800c37e:	3710      	adds	r7, #16
 800c380:	46bd      	mov	sp, r7
 800c382:	bd80      	pop	{r7, pc}

0800c384 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c384:	b480      	push	{r7}
 800c386:	b083      	sub	sp, #12
 800c388:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c38a:	4b0c      	ldr	r3, [pc, #48]	; (800c3bc <prvResetNextTaskUnblockTime+0x38>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	2b00      	cmp	r3, #0
 800c392:	d104      	bne.n	800c39e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c394:	4b0a      	ldr	r3, [pc, #40]	; (800c3c0 <prvResetNextTaskUnblockTime+0x3c>)
 800c396:	f04f 32ff 	mov.w	r2, #4294967295
 800c39a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c39c:	e008      	b.n	800c3b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c39e:	4b07      	ldr	r3, [pc, #28]	; (800c3bc <prvResetNextTaskUnblockTime+0x38>)
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	68db      	ldr	r3, [r3, #12]
 800c3a4:	68db      	ldr	r3, [r3, #12]
 800c3a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	685b      	ldr	r3, [r3, #4]
 800c3ac:	4a04      	ldr	r2, [pc, #16]	; (800c3c0 <prvResetNextTaskUnblockTime+0x3c>)
 800c3ae:	6013      	str	r3, [r2, #0]
}
 800c3b0:	bf00      	nop
 800c3b2:	370c      	adds	r7, #12
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr
 800c3bc:	20000594 	.word	0x20000594
 800c3c0:	200005fc 	.word	0x200005fc

0800c3c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b083      	sub	sp, #12
 800c3c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c3ca:	4b0b      	ldr	r3, [pc, #44]	; (800c3f8 <xTaskGetSchedulerState+0x34>)
 800c3cc:	681b      	ldr	r3, [r3, #0]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d102      	bne.n	800c3d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c3d2:	2301      	movs	r3, #1
 800c3d4:	607b      	str	r3, [r7, #4]
 800c3d6:	e008      	b.n	800c3ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c3d8:	4b08      	ldr	r3, [pc, #32]	; (800c3fc <xTaskGetSchedulerState+0x38>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d102      	bne.n	800c3e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c3e0:	2302      	movs	r3, #2
 800c3e2:	607b      	str	r3, [r7, #4]
 800c3e4:	e001      	b.n	800c3ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c3ea:	687b      	ldr	r3, [r7, #4]
	}
 800c3ec:	4618      	mov	r0, r3
 800c3ee:	370c      	adds	r7, #12
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f6:	4770      	bx	lr
 800c3f8:	200005e8 	.word	0x200005e8
 800c3fc:	20000604 	.word	0x20000604

0800c400 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c400:	b580      	push	{r7, lr}
 800c402:	b084      	sub	sp, #16
 800c404:	af00      	add	r7, sp, #0
 800c406:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c40c:	2300      	movs	r3, #0
 800c40e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d05e      	beq.n	800c4d4 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c416:	68bb      	ldr	r3, [r7, #8]
 800c418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c41a:	4b31      	ldr	r3, [pc, #196]	; (800c4e0 <xTaskPriorityInherit+0xe0>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c420:	429a      	cmp	r2, r3
 800c422:	d24e      	bcs.n	800c4c2 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c424:	68bb      	ldr	r3, [r7, #8]
 800c426:	699b      	ldr	r3, [r3, #24]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	db06      	blt.n	800c43a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c42c:	4b2c      	ldr	r3, [pc, #176]	; (800c4e0 <xTaskPriorityInherit+0xe0>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c432:	f1c3 0207 	rsb	r2, r3, #7
 800c436:	68bb      	ldr	r3, [r7, #8]
 800c438:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	6959      	ldr	r1, [r3, #20]
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c442:	4613      	mov	r3, r2
 800c444:	009b      	lsls	r3, r3, #2
 800c446:	4413      	add	r3, r2
 800c448:	009b      	lsls	r3, r3, #2
 800c44a:	4a26      	ldr	r2, [pc, #152]	; (800c4e4 <xTaskPriorityInherit+0xe4>)
 800c44c:	4413      	add	r3, r2
 800c44e:	4299      	cmp	r1, r3
 800c450:	d12f      	bne.n	800c4b2 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	3304      	adds	r3, #4
 800c456:	4618      	mov	r0, r3
 800c458:	f7fe f9ae 	bl	800a7b8 <uxListRemove>
 800c45c:	4603      	mov	r3, r0
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d10a      	bne.n	800c478 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c466:	2201      	movs	r2, #1
 800c468:	fa02 f303 	lsl.w	r3, r2, r3
 800c46c:	43da      	mvns	r2, r3
 800c46e:	4b1e      	ldr	r3, [pc, #120]	; (800c4e8 <xTaskPriorityInherit+0xe8>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	4013      	ands	r3, r2
 800c474:	4a1c      	ldr	r2, [pc, #112]	; (800c4e8 <xTaskPriorityInherit+0xe8>)
 800c476:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c478:	4b19      	ldr	r3, [pc, #100]	; (800c4e0 <xTaskPriorityInherit+0xe0>)
 800c47a:	681b      	ldr	r3, [r3, #0]
 800c47c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c482:	68bb      	ldr	r3, [r7, #8]
 800c484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c486:	2201      	movs	r2, #1
 800c488:	409a      	lsls	r2, r3
 800c48a:	4b17      	ldr	r3, [pc, #92]	; (800c4e8 <xTaskPriorityInherit+0xe8>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	4313      	orrs	r3, r2
 800c490:	4a15      	ldr	r2, [pc, #84]	; (800c4e8 <xTaskPriorityInherit+0xe8>)
 800c492:	6013      	str	r3, [r2, #0]
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c498:	4613      	mov	r3, r2
 800c49a:	009b      	lsls	r3, r3, #2
 800c49c:	4413      	add	r3, r2
 800c49e:	009b      	lsls	r3, r3, #2
 800c4a0:	4a10      	ldr	r2, [pc, #64]	; (800c4e4 <xTaskPriorityInherit+0xe4>)
 800c4a2:	441a      	add	r2, r3
 800c4a4:	68bb      	ldr	r3, [r7, #8]
 800c4a6:	3304      	adds	r3, #4
 800c4a8:	4619      	mov	r1, r3
 800c4aa:	4610      	mov	r0, r2
 800c4ac:	f7fe f927 	bl	800a6fe <vListInsertEnd>
 800c4b0:	e004      	b.n	800c4bc <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c4b2:	4b0b      	ldr	r3, [pc, #44]	; (800c4e0 <xTaskPriorityInherit+0xe0>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c4bc:	2301      	movs	r3, #1
 800c4be:	60fb      	str	r3, [r7, #12]
 800c4c0:	e008      	b.n	800c4d4 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c4c6:	4b06      	ldr	r3, [pc, #24]	; (800c4e0 <xTaskPriorityInherit+0xe0>)
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4cc:	429a      	cmp	r2, r3
 800c4ce:	d201      	bcs.n	800c4d4 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c4d0:	2301      	movs	r3, #1
 800c4d2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c4d4:	68fb      	ldr	r3, [r7, #12]
	}
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	3710      	adds	r7, #16
 800c4da:	46bd      	mov	sp, r7
 800c4dc:	bd80      	pop	{r7, pc}
 800c4de:	bf00      	nop
 800c4e0:	200004dc 	.word	0x200004dc
 800c4e4:	200004e0 	.word	0x200004e0
 800c4e8:	200005e4 	.word	0x200005e4

0800c4ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c4ec:	b580      	push	{r7, lr}
 800c4ee:	b086      	sub	sp, #24
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c4f8:	2300      	movs	r3, #0
 800c4fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d06e      	beq.n	800c5e0 <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c502:	4b3a      	ldr	r3, [pc, #232]	; (800c5ec <xTaskPriorityDisinherit+0x100>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	693a      	ldr	r2, [r7, #16]
 800c508:	429a      	cmp	r2, r3
 800c50a:	d00a      	beq.n	800c522 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c510:	f383 8811 	msr	BASEPRI, r3
 800c514:	f3bf 8f6f 	isb	sy
 800c518:	f3bf 8f4f 	dsb	sy
 800c51c:	60fb      	str	r3, [r7, #12]
}
 800c51e:	bf00      	nop
 800c520:	e7fe      	b.n	800c520 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c522:	693b      	ldr	r3, [r7, #16]
 800c524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c526:	2b00      	cmp	r3, #0
 800c528:	d10a      	bne.n	800c540 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c52a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c52e:	f383 8811 	msr	BASEPRI, r3
 800c532:	f3bf 8f6f 	isb	sy
 800c536:	f3bf 8f4f 	dsb	sy
 800c53a:	60bb      	str	r3, [r7, #8]
}
 800c53c:	bf00      	nop
 800c53e:	e7fe      	b.n	800c53e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c540:	693b      	ldr	r3, [r7, #16]
 800c542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c544:	1e5a      	subs	r2, r3, #1
 800c546:	693b      	ldr	r3, [r7, #16]
 800c548:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c54a:	693b      	ldr	r3, [r7, #16]
 800c54c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c552:	429a      	cmp	r2, r3
 800c554:	d044      	beq.n	800c5e0 <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c556:	693b      	ldr	r3, [r7, #16]
 800c558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d140      	bne.n	800c5e0 <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c55e:	693b      	ldr	r3, [r7, #16]
 800c560:	3304      	adds	r3, #4
 800c562:	4618      	mov	r0, r3
 800c564:	f7fe f928 	bl	800a7b8 <uxListRemove>
 800c568:	4603      	mov	r3, r0
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d115      	bne.n	800c59a <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c572:	491f      	ldr	r1, [pc, #124]	; (800c5f0 <xTaskPriorityDisinherit+0x104>)
 800c574:	4613      	mov	r3, r2
 800c576:	009b      	lsls	r3, r3, #2
 800c578:	4413      	add	r3, r2
 800c57a:	009b      	lsls	r3, r3, #2
 800c57c:	440b      	add	r3, r1
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d10a      	bne.n	800c59a <xTaskPriorityDisinherit+0xae>
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c588:	2201      	movs	r2, #1
 800c58a:	fa02 f303 	lsl.w	r3, r2, r3
 800c58e:	43da      	mvns	r2, r3
 800c590:	4b18      	ldr	r3, [pc, #96]	; (800c5f4 <xTaskPriorityDisinherit+0x108>)
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	4013      	ands	r3, r2
 800c596:	4a17      	ldr	r2, [pc, #92]	; (800c5f4 <xTaskPriorityDisinherit+0x108>)
 800c598:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c59a:	693b      	ldr	r3, [r7, #16]
 800c59c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5a2:	693b      	ldr	r3, [r7, #16]
 800c5a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5a6:	f1c3 0207 	rsb	r2, r3, #7
 800c5aa:	693b      	ldr	r3, [r7, #16]
 800c5ac:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c5ae:	693b      	ldr	r3, [r7, #16]
 800c5b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c5b2:	2201      	movs	r2, #1
 800c5b4:	409a      	lsls	r2, r3
 800c5b6:	4b0f      	ldr	r3, [pc, #60]	; (800c5f4 <xTaskPriorityDisinherit+0x108>)
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	4313      	orrs	r3, r2
 800c5bc:	4a0d      	ldr	r2, [pc, #52]	; (800c5f4 <xTaskPriorityDisinherit+0x108>)
 800c5be:	6013      	str	r3, [r2, #0]
 800c5c0:	693b      	ldr	r3, [r7, #16]
 800c5c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5c4:	4613      	mov	r3, r2
 800c5c6:	009b      	lsls	r3, r3, #2
 800c5c8:	4413      	add	r3, r2
 800c5ca:	009b      	lsls	r3, r3, #2
 800c5cc:	4a08      	ldr	r2, [pc, #32]	; (800c5f0 <xTaskPriorityDisinherit+0x104>)
 800c5ce:	441a      	add	r2, r3
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	3304      	adds	r3, #4
 800c5d4:	4619      	mov	r1, r3
 800c5d6:	4610      	mov	r0, r2
 800c5d8:	f7fe f891 	bl	800a6fe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c5dc:	2301      	movs	r3, #1
 800c5de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c5e0:	697b      	ldr	r3, [r7, #20]
	}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3718      	adds	r7, #24
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}
 800c5ea:	bf00      	nop
 800c5ec:	200004dc 	.word	0x200004dc
 800c5f0:	200004e0 	.word	0x200004e0
 800c5f4:	200005e4 	.word	0x200005e4

0800c5f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c5f8:	b580      	push	{r7, lr}
 800c5fa:	b088      	sub	sp, #32
 800c5fc:	af00      	add	r7, sp, #0
 800c5fe:	6078      	str	r0, [r7, #4]
 800c600:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c606:	2301      	movs	r3, #1
 800c608:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d077      	beq.n	800c700 <vTaskPriorityDisinheritAfterTimeout+0x108>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c610:	69bb      	ldr	r3, [r7, #24]
 800c612:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c614:	2b00      	cmp	r3, #0
 800c616:	d10a      	bne.n	800c62e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c61c:	f383 8811 	msr	BASEPRI, r3
 800c620:	f3bf 8f6f 	isb	sy
 800c624:	f3bf 8f4f 	dsb	sy
 800c628:	60fb      	str	r3, [r7, #12]
}
 800c62a:	bf00      	nop
 800c62c:	e7fe      	b.n	800c62c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c62e:	69bb      	ldr	r3, [r7, #24]
 800c630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c632:	683a      	ldr	r2, [r7, #0]
 800c634:	429a      	cmp	r2, r3
 800c636:	d902      	bls.n	800c63e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	61fb      	str	r3, [r7, #28]
 800c63c:	e002      	b.n	800c644 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c63e:	69bb      	ldr	r3, [r7, #24]
 800c640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c642:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c644:	69bb      	ldr	r3, [r7, #24]
 800c646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c648:	69fa      	ldr	r2, [r7, #28]
 800c64a:	429a      	cmp	r2, r3
 800c64c:	d058      	beq.n	800c700 <vTaskPriorityDisinheritAfterTimeout+0x108>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c64e:	69bb      	ldr	r3, [r7, #24]
 800c650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c652:	697a      	ldr	r2, [r7, #20]
 800c654:	429a      	cmp	r2, r3
 800c656:	d153      	bne.n	800c700 <vTaskPriorityDisinheritAfterTimeout+0x108>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c658:	4b2b      	ldr	r3, [pc, #172]	; (800c708 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	69ba      	ldr	r2, [r7, #24]
 800c65e:	429a      	cmp	r2, r3
 800c660:	d10a      	bne.n	800c678 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c662:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c666:	f383 8811 	msr	BASEPRI, r3
 800c66a:	f3bf 8f6f 	isb	sy
 800c66e:	f3bf 8f4f 	dsb	sy
 800c672:	60bb      	str	r3, [r7, #8]
}
 800c674:	bf00      	nop
 800c676:	e7fe      	b.n	800c676 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c678:	69bb      	ldr	r3, [r7, #24]
 800c67a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c67c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c67e:	69bb      	ldr	r3, [r7, #24]
 800c680:	69fa      	ldr	r2, [r7, #28]
 800c682:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c684:	69bb      	ldr	r3, [r7, #24]
 800c686:	699b      	ldr	r3, [r3, #24]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	db04      	blt.n	800c696 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c68c:	69fb      	ldr	r3, [r7, #28]
 800c68e:	f1c3 0207 	rsb	r2, r3, #7
 800c692:	69bb      	ldr	r3, [r7, #24]
 800c694:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c696:	69bb      	ldr	r3, [r7, #24]
 800c698:	6959      	ldr	r1, [r3, #20]
 800c69a:	693a      	ldr	r2, [r7, #16]
 800c69c:	4613      	mov	r3, r2
 800c69e:	009b      	lsls	r3, r3, #2
 800c6a0:	4413      	add	r3, r2
 800c6a2:	009b      	lsls	r3, r3, #2
 800c6a4:	4a19      	ldr	r2, [pc, #100]	; (800c70c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c6a6:	4413      	add	r3, r2
 800c6a8:	4299      	cmp	r1, r3
 800c6aa:	d129      	bne.n	800c700 <vTaskPriorityDisinheritAfterTimeout+0x108>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c6ac:	69bb      	ldr	r3, [r7, #24]
 800c6ae:	3304      	adds	r3, #4
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	f7fe f881 	bl	800a7b8 <uxListRemove>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d10a      	bne.n	800c6d2 <vTaskPriorityDisinheritAfterTimeout+0xda>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800c6bc:	69bb      	ldr	r3, [r7, #24]
 800c6be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	fa02 f303 	lsl.w	r3, r2, r3
 800c6c6:	43da      	mvns	r2, r3
 800c6c8:	4b11      	ldr	r3, [pc, #68]	; (800c710 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	4013      	ands	r3, r2
 800c6ce:	4a10      	ldr	r2, [pc, #64]	; (800c710 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c6d0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c6d2:	69bb      	ldr	r3, [r7, #24]
 800c6d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	409a      	lsls	r2, r3
 800c6da:	4b0d      	ldr	r3, [pc, #52]	; (800c710 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	4a0b      	ldr	r2, [pc, #44]	; (800c710 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800c6e2:	6013      	str	r3, [r2, #0]
 800c6e4:	69bb      	ldr	r3, [r7, #24]
 800c6e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6e8:	4613      	mov	r3, r2
 800c6ea:	009b      	lsls	r3, r3, #2
 800c6ec:	4413      	add	r3, r2
 800c6ee:	009b      	lsls	r3, r3, #2
 800c6f0:	4a06      	ldr	r2, [pc, #24]	; (800c70c <vTaskPriorityDisinheritAfterTimeout+0x114>)
 800c6f2:	441a      	add	r2, r3
 800c6f4:	69bb      	ldr	r3, [r7, #24]
 800c6f6:	3304      	adds	r3, #4
 800c6f8:	4619      	mov	r1, r3
 800c6fa:	4610      	mov	r0, r2
 800c6fc:	f7fd ffff 	bl	800a6fe <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c700:	bf00      	nop
 800c702:	3720      	adds	r7, #32
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}
 800c708:	200004dc 	.word	0x200004dc
 800c70c:	200004e0 	.word	0x200004e0
 800c710:	200005e4 	.word	0x200005e4

0800c714 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c714:	b480      	push	{r7}
 800c716:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c718:	4b07      	ldr	r3, [pc, #28]	; (800c738 <pvTaskIncrementMutexHeldCount+0x24>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d004      	beq.n	800c72a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c720:	4b05      	ldr	r3, [pc, #20]	; (800c738 <pvTaskIncrementMutexHeldCount+0x24>)
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c726:	3201      	adds	r2, #1
 800c728:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800c72a:	4b03      	ldr	r3, [pc, #12]	; (800c738 <pvTaskIncrementMutexHeldCount+0x24>)
 800c72c:	681b      	ldr	r3, [r3, #0]
	}
 800c72e:	4618      	mov	r0, r3
 800c730:	46bd      	mov	sp, r7
 800c732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c736:	4770      	bx	lr
 800c738:	200004dc 	.word	0x200004dc

0800c73c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c73c:	b580      	push	{r7, lr}
 800c73e:	b084      	sub	sp, #16
 800c740:	af00      	add	r7, sp, #0
 800c742:	6078      	str	r0, [r7, #4]
 800c744:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c746:	4b29      	ldr	r3, [pc, #164]	; (800c7ec <prvAddCurrentTaskToDelayedList+0xb0>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c74c:	4b28      	ldr	r3, [pc, #160]	; (800c7f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	3304      	adds	r3, #4
 800c752:	4618      	mov	r0, r3
 800c754:	f7fe f830 	bl	800a7b8 <uxListRemove>
 800c758:	4603      	mov	r3, r0
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d10b      	bne.n	800c776 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800c75e:	4b24      	ldr	r3, [pc, #144]	; (800c7f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c764:	2201      	movs	r2, #1
 800c766:	fa02 f303 	lsl.w	r3, r2, r3
 800c76a:	43da      	mvns	r2, r3
 800c76c:	4b21      	ldr	r3, [pc, #132]	; (800c7f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	4013      	ands	r3, r2
 800c772:	4a20      	ldr	r2, [pc, #128]	; (800c7f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800c774:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c77c:	d10a      	bne.n	800c794 <prvAddCurrentTaskToDelayedList+0x58>
 800c77e:	683b      	ldr	r3, [r7, #0]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d007      	beq.n	800c794 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c784:	4b1a      	ldr	r3, [pc, #104]	; (800c7f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	3304      	adds	r3, #4
 800c78a:	4619      	mov	r1, r3
 800c78c:	481a      	ldr	r0, [pc, #104]	; (800c7f8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800c78e:	f7fd ffb6 	bl	800a6fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c792:	e026      	b.n	800c7e2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c794:	68fa      	ldr	r2, [r7, #12]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	4413      	add	r3, r2
 800c79a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c79c:	4b14      	ldr	r3, [pc, #80]	; (800c7f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	68ba      	ldr	r2, [r7, #8]
 800c7a2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c7a4:	68ba      	ldr	r2, [r7, #8]
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d209      	bcs.n	800c7c0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c7ac:	4b13      	ldr	r3, [pc, #76]	; (800c7fc <prvAddCurrentTaskToDelayedList+0xc0>)
 800c7ae:	681a      	ldr	r2, [r3, #0]
 800c7b0:	4b0f      	ldr	r3, [pc, #60]	; (800c7f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	3304      	adds	r3, #4
 800c7b6:	4619      	mov	r1, r3
 800c7b8:	4610      	mov	r0, r2
 800c7ba:	f7fd ffc4 	bl	800a746 <vListInsert>
}
 800c7be:	e010      	b.n	800c7e2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c7c0:	4b0f      	ldr	r3, [pc, #60]	; (800c800 <prvAddCurrentTaskToDelayedList+0xc4>)
 800c7c2:	681a      	ldr	r2, [r3, #0]
 800c7c4:	4b0a      	ldr	r3, [pc, #40]	; (800c7f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	3304      	adds	r3, #4
 800c7ca:	4619      	mov	r1, r3
 800c7cc:	4610      	mov	r0, r2
 800c7ce:	f7fd ffba 	bl	800a746 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c7d2:	4b0c      	ldr	r3, [pc, #48]	; (800c804 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	68ba      	ldr	r2, [r7, #8]
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	d202      	bcs.n	800c7e2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800c7dc:	4a09      	ldr	r2, [pc, #36]	; (800c804 <prvAddCurrentTaskToDelayedList+0xc8>)
 800c7de:	68bb      	ldr	r3, [r7, #8]
 800c7e0:	6013      	str	r3, [r2, #0]
}
 800c7e2:	bf00      	nop
 800c7e4:	3710      	adds	r7, #16
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	200005e0 	.word	0x200005e0
 800c7f0:	200004dc 	.word	0x200004dc
 800c7f4:	200005e4 	.word	0x200005e4
 800c7f8:	200005c8 	.word	0x200005c8
 800c7fc:	20000598 	.word	0x20000598
 800c800:	20000594 	.word	0x20000594
 800c804:	200005fc 	.word	0x200005fc

0800c808 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c808:	b480      	push	{r7}
 800c80a:	b085      	sub	sp, #20
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	60f8      	str	r0, [r7, #12]
 800c810:	60b9      	str	r1, [r7, #8]
 800c812:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c814:	68fb      	ldr	r3, [r7, #12]
 800c816:	3b04      	subs	r3, #4
 800c818:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c820:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	3b04      	subs	r3, #4
 800c826:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c828:	68bb      	ldr	r3, [r7, #8]
 800c82a:	f023 0201 	bic.w	r2, r3, #1
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	3b04      	subs	r3, #4
 800c836:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c838:	4a0c      	ldr	r2, [pc, #48]	; (800c86c <pxPortInitialiseStack+0x64>)
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c83e:	68fb      	ldr	r3, [r7, #12]
 800c840:	3b14      	subs	r3, #20
 800c842:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c844:	687a      	ldr	r2, [r7, #4]
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	3b04      	subs	r3, #4
 800c84e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	f06f 0202 	mvn.w	r2, #2
 800c856:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c858:	68fb      	ldr	r3, [r7, #12]
 800c85a:	3b20      	subs	r3, #32
 800c85c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c85e:	68fb      	ldr	r3, [r7, #12]
}
 800c860:	4618      	mov	r0, r3
 800c862:	3714      	adds	r7, #20
 800c864:	46bd      	mov	sp, r7
 800c866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86a:	4770      	bx	lr
 800c86c:	0800c871 	.word	0x0800c871

0800c870 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c870:	b480      	push	{r7}
 800c872:	b085      	sub	sp, #20
 800c874:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c876:	2300      	movs	r3, #0
 800c878:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c87a:	4b12      	ldr	r3, [pc, #72]	; (800c8c4 <prvTaskExitError+0x54>)
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c882:	d00a      	beq.n	800c89a <prvTaskExitError+0x2a>
	__asm volatile
 800c884:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c888:	f383 8811 	msr	BASEPRI, r3
 800c88c:	f3bf 8f6f 	isb	sy
 800c890:	f3bf 8f4f 	dsb	sy
 800c894:	60fb      	str	r3, [r7, #12]
}
 800c896:	bf00      	nop
 800c898:	e7fe      	b.n	800c898 <prvTaskExitError+0x28>
	__asm volatile
 800c89a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c89e:	f383 8811 	msr	BASEPRI, r3
 800c8a2:	f3bf 8f6f 	isb	sy
 800c8a6:	f3bf 8f4f 	dsb	sy
 800c8aa:	60bb      	str	r3, [r7, #8]
}
 800c8ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c8ae:	bf00      	nop
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	d0fc      	beq.n	800c8b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c8b6:	bf00      	nop
 800c8b8:	bf00      	nop
 800c8ba:	3714      	adds	r7, #20
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c2:	4770      	bx	lr
 800c8c4:	200000a0 	.word	0x200000a0
	...

0800c8d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c8d0:	4b07      	ldr	r3, [pc, #28]	; (800c8f0 <pxCurrentTCBConst2>)
 800c8d2:	6819      	ldr	r1, [r3, #0]
 800c8d4:	6808      	ldr	r0, [r1, #0]
 800c8d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8da:	f380 8809 	msr	PSP, r0
 800c8de:	f3bf 8f6f 	isb	sy
 800c8e2:	f04f 0000 	mov.w	r0, #0
 800c8e6:	f380 8811 	msr	BASEPRI, r0
 800c8ea:	4770      	bx	lr
 800c8ec:	f3af 8000 	nop.w

0800c8f0 <pxCurrentTCBConst2>:
 800c8f0:	200004dc 	.word	0x200004dc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c8f4:	bf00      	nop
 800c8f6:	bf00      	nop

0800c8f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c8f8:	4808      	ldr	r0, [pc, #32]	; (800c91c <prvPortStartFirstTask+0x24>)
 800c8fa:	6800      	ldr	r0, [r0, #0]
 800c8fc:	6800      	ldr	r0, [r0, #0]
 800c8fe:	f380 8808 	msr	MSP, r0
 800c902:	f04f 0000 	mov.w	r0, #0
 800c906:	f380 8814 	msr	CONTROL, r0
 800c90a:	b662      	cpsie	i
 800c90c:	b661      	cpsie	f
 800c90e:	f3bf 8f4f 	dsb	sy
 800c912:	f3bf 8f6f 	isb	sy
 800c916:	df00      	svc	0
 800c918:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c91a:	bf00      	nop
 800c91c:	e000ed08 	.word	0xe000ed08

0800c920 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b086      	sub	sp, #24
 800c924:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c926:	4b46      	ldr	r3, [pc, #280]	; (800ca40 <xPortStartScheduler+0x120>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	4a46      	ldr	r2, [pc, #280]	; (800ca44 <xPortStartScheduler+0x124>)
 800c92c:	4293      	cmp	r3, r2
 800c92e:	d10a      	bne.n	800c946 <xPortStartScheduler+0x26>
	__asm volatile
 800c930:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c934:	f383 8811 	msr	BASEPRI, r3
 800c938:	f3bf 8f6f 	isb	sy
 800c93c:	f3bf 8f4f 	dsb	sy
 800c940:	613b      	str	r3, [r7, #16]
}
 800c942:	bf00      	nop
 800c944:	e7fe      	b.n	800c944 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c946:	4b3e      	ldr	r3, [pc, #248]	; (800ca40 <xPortStartScheduler+0x120>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	4a3f      	ldr	r2, [pc, #252]	; (800ca48 <xPortStartScheduler+0x128>)
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d10a      	bne.n	800c966 <xPortStartScheduler+0x46>
	__asm volatile
 800c950:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c954:	f383 8811 	msr	BASEPRI, r3
 800c958:	f3bf 8f6f 	isb	sy
 800c95c:	f3bf 8f4f 	dsb	sy
 800c960:	60fb      	str	r3, [r7, #12]
}
 800c962:	bf00      	nop
 800c964:	e7fe      	b.n	800c964 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c966:	4b39      	ldr	r3, [pc, #228]	; (800ca4c <xPortStartScheduler+0x12c>)
 800c968:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	781b      	ldrb	r3, [r3, #0]
 800c96e:	b2db      	uxtb	r3, r3
 800c970:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	22ff      	movs	r2, #255	; 0xff
 800c976:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c978:	697b      	ldr	r3, [r7, #20]
 800c97a:	781b      	ldrb	r3, [r3, #0]
 800c97c:	b2db      	uxtb	r3, r3
 800c97e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c980:	78fb      	ldrb	r3, [r7, #3]
 800c982:	b2db      	uxtb	r3, r3
 800c984:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c988:	b2da      	uxtb	r2, r3
 800c98a:	4b31      	ldr	r3, [pc, #196]	; (800ca50 <xPortStartScheduler+0x130>)
 800c98c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c98e:	4b31      	ldr	r3, [pc, #196]	; (800ca54 <xPortStartScheduler+0x134>)
 800c990:	2207      	movs	r2, #7
 800c992:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c994:	e009      	b.n	800c9aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c996:	4b2f      	ldr	r3, [pc, #188]	; (800ca54 <xPortStartScheduler+0x134>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	3b01      	subs	r3, #1
 800c99c:	4a2d      	ldr	r2, [pc, #180]	; (800ca54 <xPortStartScheduler+0x134>)
 800c99e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c9a0:	78fb      	ldrb	r3, [r7, #3]
 800c9a2:	b2db      	uxtb	r3, r3
 800c9a4:	005b      	lsls	r3, r3, #1
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c9aa:	78fb      	ldrb	r3, [r7, #3]
 800c9ac:	b2db      	uxtb	r3, r3
 800c9ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c9b2:	2b80      	cmp	r3, #128	; 0x80
 800c9b4:	d0ef      	beq.n	800c996 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c9b6:	4b27      	ldr	r3, [pc, #156]	; (800ca54 <xPortStartScheduler+0x134>)
 800c9b8:	681b      	ldr	r3, [r3, #0]
 800c9ba:	f1c3 0307 	rsb	r3, r3, #7
 800c9be:	2b04      	cmp	r3, #4
 800c9c0:	d00a      	beq.n	800c9d8 <xPortStartScheduler+0xb8>
	__asm volatile
 800c9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c6:	f383 8811 	msr	BASEPRI, r3
 800c9ca:	f3bf 8f6f 	isb	sy
 800c9ce:	f3bf 8f4f 	dsb	sy
 800c9d2:	60bb      	str	r3, [r7, #8]
}
 800c9d4:	bf00      	nop
 800c9d6:	e7fe      	b.n	800c9d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c9d8:	4b1e      	ldr	r3, [pc, #120]	; (800ca54 <xPortStartScheduler+0x134>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	021b      	lsls	r3, r3, #8
 800c9de:	4a1d      	ldr	r2, [pc, #116]	; (800ca54 <xPortStartScheduler+0x134>)
 800c9e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c9e2:	4b1c      	ldr	r3, [pc, #112]	; (800ca54 <xPortStartScheduler+0x134>)
 800c9e4:	681b      	ldr	r3, [r3, #0]
 800c9e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c9ea:	4a1a      	ldr	r2, [pc, #104]	; (800ca54 <xPortStartScheduler+0x134>)
 800c9ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	b2da      	uxtb	r2, r3
 800c9f2:	697b      	ldr	r3, [r7, #20]
 800c9f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c9f6:	4b18      	ldr	r3, [pc, #96]	; (800ca58 <xPortStartScheduler+0x138>)
 800c9f8:	681b      	ldr	r3, [r3, #0]
 800c9fa:	4a17      	ldr	r2, [pc, #92]	; (800ca58 <xPortStartScheduler+0x138>)
 800c9fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ca00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ca02:	4b15      	ldr	r3, [pc, #84]	; (800ca58 <xPortStartScheduler+0x138>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	4a14      	ldr	r2, [pc, #80]	; (800ca58 <xPortStartScheduler+0x138>)
 800ca08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ca0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ca0e:	f000 f8dd 	bl	800cbcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ca12:	4b12      	ldr	r3, [pc, #72]	; (800ca5c <xPortStartScheduler+0x13c>)
 800ca14:	2200      	movs	r2, #0
 800ca16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ca18:	f000 f8fc 	bl	800cc14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ca1c:	4b10      	ldr	r3, [pc, #64]	; (800ca60 <xPortStartScheduler+0x140>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	4a0f      	ldr	r2, [pc, #60]	; (800ca60 <xPortStartScheduler+0x140>)
 800ca22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ca26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ca28:	f7ff ff66 	bl	800c8f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ca2c:	f7ff fa84 	bl	800bf38 <vTaskSwitchContext>
	prvTaskExitError();
 800ca30:	f7ff ff1e 	bl	800c870 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ca34:	2300      	movs	r3, #0
}
 800ca36:	4618      	mov	r0, r3
 800ca38:	3718      	adds	r7, #24
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}
 800ca3e:	bf00      	nop
 800ca40:	e000ed00 	.word	0xe000ed00
 800ca44:	410fc271 	.word	0x410fc271
 800ca48:	410fc270 	.word	0x410fc270
 800ca4c:	e000e400 	.word	0xe000e400
 800ca50:	20000608 	.word	0x20000608
 800ca54:	2000060c 	.word	0x2000060c
 800ca58:	e000ed20 	.word	0xe000ed20
 800ca5c:	200000a0 	.word	0x200000a0
 800ca60:	e000ef34 	.word	0xe000ef34

0800ca64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ca64:	b480      	push	{r7}
 800ca66:	b083      	sub	sp, #12
 800ca68:	af00      	add	r7, sp, #0
	__asm volatile
 800ca6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca6e:	f383 8811 	msr	BASEPRI, r3
 800ca72:	f3bf 8f6f 	isb	sy
 800ca76:	f3bf 8f4f 	dsb	sy
 800ca7a:	607b      	str	r3, [r7, #4]
}
 800ca7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ca7e:	4b0f      	ldr	r3, [pc, #60]	; (800cabc <vPortEnterCritical+0x58>)
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	3301      	adds	r3, #1
 800ca84:	4a0d      	ldr	r2, [pc, #52]	; (800cabc <vPortEnterCritical+0x58>)
 800ca86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ca88:	4b0c      	ldr	r3, [pc, #48]	; (800cabc <vPortEnterCritical+0x58>)
 800ca8a:	681b      	ldr	r3, [r3, #0]
 800ca8c:	2b01      	cmp	r3, #1
 800ca8e:	d10f      	bne.n	800cab0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ca90:	4b0b      	ldr	r3, [pc, #44]	; (800cac0 <vPortEnterCritical+0x5c>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	b2db      	uxtb	r3, r3
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d00a      	beq.n	800cab0 <vPortEnterCritical+0x4c>
	__asm volatile
 800ca9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca9e:	f383 8811 	msr	BASEPRI, r3
 800caa2:	f3bf 8f6f 	isb	sy
 800caa6:	f3bf 8f4f 	dsb	sy
 800caaa:	603b      	str	r3, [r7, #0]
}
 800caac:	bf00      	nop
 800caae:	e7fe      	b.n	800caae <vPortEnterCritical+0x4a>
	}
}
 800cab0:	bf00      	nop
 800cab2:	370c      	adds	r7, #12
 800cab4:	46bd      	mov	sp, r7
 800cab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caba:	4770      	bx	lr
 800cabc:	200000a0 	.word	0x200000a0
 800cac0:	e000ed04 	.word	0xe000ed04

0800cac4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cac4:	b480      	push	{r7}
 800cac6:	b083      	sub	sp, #12
 800cac8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800caca:	4b12      	ldr	r3, [pc, #72]	; (800cb14 <vPortExitCritical+0x50>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d10a      	bne.n	800cae8 <vPortExitCritical+0x24>
	__asm volatile
 800cad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cad6:	f383 8811 	msr	BASEPRI, r3
 800cada:	f3bf 8f6f 	isb	sy
 800cade:	f3bf 8f4f 	dsb	sy
 800cae2:	607b      	str	r3, [r7, #4]
}
 800cae4:	bf00      	nop
 800cae6:	e7fe      	b.n	800cae6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cae8:	4b0a      	ldr	r3, [pc, #40]	; (800cb14 <vPortExitCritical+0x50>)
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	3b01      	subs	r3, #1
 800caee:	4a09      	ldr	r2, [pc, #36]	; (800cb14 <vPortExitCritical+0x50>)
 800caf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800caf2:	4b08      	ldr	r3, [pc, #32]	; (800cb14 <vPortExitCritical+0x50>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d105      	bne.n	800cb06 <vPortExitCritical+0x42>
 800cafa:	2300      	movs	r3, #0
 800cafc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cafe:	683b      	ldr	r3, [r7, #0]
 800cb00:	f383 8811 	msr	BASEPRI, r3
}
 800cb04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cb06:	bf00      	nop
 800cb08:	370c      	adds	r7, #12
 800cb0a:	46bd      	mov	sp, r7
 800cb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb10:	4770      	bx	lr
 800cb12:	bf00      	nop
 800cb14:	200000a0 	.word	0x200000a0
	...

0800cb20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cb20:	f3ef 8009 	mrs	r0, PSP
 800cb24:	f3bf 8f6f 	isb	sy
 800cb28:	4b15      	ldr	r3, [pc, #84]	; (800cb80 <pxCurrentTCBConst>)
 800cb2a:	681a      	ldr	r2, [r3, #0]
 800cb2c:	f01e 0f10 	tst.w	lr, #16
 800cb30:	bf08      	it	eq
 800cb32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cb36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb3a:	6010      	str	r0, [r2, #0]
 800cb3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cb40:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cb44:	f380 8811 	msr	BASEPRI, r0
 800cb48:	f3bf 8f4f 	dsb	sy
 800cb4c:	f3bf 8f6f 	isb	sy
 800cb50:	f7ff f9f2 	bl	800bf38 <vTaskSwitchContext>
 800cb54:	f04f 0000 	mov.w	r0, #0
 800cb58:	f380 8811 	msr	BASEPRI, r0
 800cb5c:	bc09      	pop	{r0, r3}
 800cb5e:	6819      	ldr	r1, [r3, #0]
 800cb60:	6808      	ldr	r0, [r1, #0]
 800cb62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb66:	f01e 0f10 	tst.w	lr, #16
 800cb6a:	bf08      	it	eq
 800cb6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cb70:	f380 8809 	msr	PSP, r0
 800cb74:	f3bf 8f6f 	isb	sy
 800cb78:	4770      	bx	lr
 800cb7a:	bf00      	nop
 800cb7c:	f3af 8000 	nop.w

0800cb80 <pxCurrentTCBConst>:
 800cb80:	200004dc 	.word	0x200004dc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cb84:	bf00      	nop
 800cb86:	bf00      	nop

0800cb88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cb88:	b580      	push	{r7, lr}
 800cb8a:	b082      	sub	sp, #8
 800cb8c:	af00      	add	r7, sp, #0
	__asm volatile
 800cb8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb92:	f383 8811 	msr	BASEPRI, r3
 800cb96:	f3bf 8f6f 	isb	sy
 800cb9a:	f3bf 8f4f 	dsb	sy
 800cb9e:	607b      	str	r3, [r7, #4]
}
 800cba0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cba2:	f7ff f911 	bl	800bdc8 <xTaskIncrementTick>
 800cba6:	4603      	mov	r3, r0
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d003      	beq.n	800cbb4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cbac:	4b06      	ldr	r3, [pc, #24]	; (800cbc8 <SysTick_Handler+0x40>)
 800cbae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbb2:	601a      	str	r2, [r3, #0]
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cbb8:	683b      	ldr	r3, [r7, #0]
 800cbba:	f383 8811 	msr	BASEPRI, r3
}
 800cbbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cbc0:	bf00      	nop
 800cbc2:	3708      	adds	r7, #8
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}
 800cbc8:	e000ed04 	.word	0xe000ed04

0800cbcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800cbcc:	b480      	push	{r7}
 800cbce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800cbd0:	4b0b      	ldr	r3, [pc, #44]	; (800cc00 <vPortSetupTimerInterrupt+0x34>)
 800cbd2:	2200      	movs	r2, #0
 800cbd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800cbd6:	4b0b      	ldr	r3, [pc, #44]	; (800cc04 <vPortSetupTimerInterrupt+0x38>)
 800cbd8:	2200      	movs	r2, #0
 800cbda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cbdc:	4b0a      	ldr	r3, [pc, #40]	; (800cc08 <vPortSetupTimerInterrupt+0x3c>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	4a0a      	ldr	r2, [pc, #40]	; (800cc0c <vPortSetupTimerInterrupt+0x40>)
 800cbe2:	fba2 2303 	umull	r2, r3, r2, r3
 800cbe6:	099b      	lsrs	r3, r3, #6
 800cbe8:	4a09      	ldr	r2, [pc, #36]	; (800cc10 <vPortSetupTimerInterrupt+0x44>)
 800cbea:	3b01      	subs	r3, #1
 800cbec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cbee:	4b04      	ldr	r3, [pc, #16]	; (800cc00 <vPortSetupTimerInterrupt+0x34>)
 800cbf0:	2207      	movs	r2, #7
 800cbf2:	601a      	str	r2, [r3, #0]
}
 800cbf4:	bf00      	nop
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbfc:	4770      	bx	lr
 800cbfe:	bf00      	nop
 800cc00:	e000e010 	.word	0xe000e010
 800cc04:	e000e018 	.word	0xe000e018
 800cc08:	20000094 	.word	0x20000094
 800cc0c:	10624dd3 	.word	0x10624dd3
 800cc10:	e000e014 	.word	0xe000e014

0800cc14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cc14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800cc24 <vPortEnableVFP+0x10>
 800cc18:	6801      	ldr	r1, [r0, #0]
 800cc1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800cc1e:	6001      	str	r1, [r0, #0]
 800cc20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cc22:	bf00      	nop
 800cc24:	e000ed88 	.word	0xe000ed88

0800cc28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cc28:	b480      	push	{r7}
 800cc2a:	b085      	sub	sp, #20
 800cc2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cc2e:	f3ef 8305 	mrs	r3, IPSR
 800cc32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	2b0f      	cmp	r3, #15
 800cc38:	d914      	bls.n	800cc64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cc3a:	4a17      	ldr	r2, [pc, #92]	; (800cc98 <vPortValidateInterruptPriority+0x70>)
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	4413      	add	r3, r2
 800cc40:	781b      	ldrb	r3, [r3, #0]
 800cc42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cc44:	4b15      	ldr	r3, [pc, #84]	; (800cc9c <vPortValidateInterruptPriority+0x74>)
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	7afa      	ldrb	r2, [r7, #11]
 800cc4a:	429a      	cmp	r2, r3
 800cc4c:	d20a      	bcs.n	800cc64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800cc4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc52:	f383 8811 	msr	BASEPRI, r3
 800cc56:	f3bf 8f6f 	isb	sy
 800cc5a:	f3bf 8f4f 	dsb	sy
 800cc5e:	607b      	str	r3, [r7, #4]
}
 800cc60:	bf00      	nop
 800cc62:	e7fe      	b.n	800cc62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cc64:	4b0e      	ldr	r3, [pc, #56]	; (800cca0 <vPortValidateInterruptPriority+0x78>)
 800cc66:	681b      	ldr	r3, [r3, #0]
 800cc68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cc6c:	4b0d      	ldr	r3, [pc, #52]	; (800cca4 <vPortValidateInterruptPriority+0x7c>)
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	429a      	cmp	r2, r3
 800cc72:	d90a      	bls.n	800cc8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800cc74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc78:	f383 8811 	msr	BASEPRI, r3
 800cc7c:	f3bf 8f6f 	isb	sy
 800cc80:	f3bf 8f4f 	dsb	sy
 800cc84:	603b      	str	r3, [r7, #0]
}
 800cc86:	bf00      	nop
 800cc88:	e7fe      	b.n	800cc88 <vPortValidateInterruptPriority+0x60>
	}
 800cc8a:	bf00      	nop
 800cc8c:	3714      	adds	r7, #20
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc94:	4770      	bx	lr
 800cc96:	bf00      	nop
 800cc98:	e000e3f0 	.word	0xe000e3f0
 800cc9c:	20000608 	.word	0x20000608
 800cca0:	e000ed0c 	.word	0xe000ed0c
 800cca4:	2000060c 	.word	0x2000060c

0800cca8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b08a      	sub	sp, #40	; 0x28
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ccb4:	f7fe ffbc 	bl	800bc30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ccb8:	4b5b      	ldr	r3, [pc, #364]	; (800ce28 <pvPortMalloc+0x180>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d101      	bne.n	800ccc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ccc0:	f000 f92c 	bl	800cf1c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ccc4:	4b59      	ldr	r3, [pc, #356]	; (800ce2c <pvPortMalloc+0x184>)
 800ccc6:	681a      	ldr	r2, [r3, #0]
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	4013      	ands	r3, r2
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	f040 8093 	bne.w	800cdf8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d01d      	beq.n	800cd14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ccd8:	2208      	movs	r2, #8
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	4413      	add	r3, r2
 800ccde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f003 0307 	and.w	r3, r3, #7
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d014      	beq.n	800cd14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f023 0307 	bic.w	r3, r3, #7
 800ccf0:	3308      	adds	r3, #8
 800ccf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f003 0307 	and.w	r3, r3, #7
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d00a      	beq.n	800cd14 <pvPortMalloc+0x6c>
	__asm volatile
 800ccfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd02:	f383 8811 	msr	BASEPRI, r3
 800cd06:	f3bf 8f6f 	isb	sy
 800cd0a:	f3bf 8f4f 	dsb	sy
 800cd0e:	617b      	str	r3, [r7, #20]
}
 800cd10:	bf00      	nop
 800cd12:	e7fe      	b.n	800cd12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d06e      	beq.n	800cdf8 <pvPortMalloc+0x150>
 800cd1a:	4b45      	ldr	r3, [pc, #276]	; (800ce30 <pvPortMalloc+0x188>)
 800cd1c:	681b      	ldr	r3, [r3, #0]
 800cd1e:	687a      	ldr	r2, [r7, #4]
 800cd20:	429a      	cmp	r2, r3
 800cd22:	d869      	bhi.n	800cdf8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cd24:	4b43      	ldr	r3, [pc, #268]	; (800ce34 <pvPortMalloc+0x18c>)
 800cd26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cd28:	4b42      	ldr	r3, [pc, #264]	; (800ce34 <pvPortMalloc+0x18c>)
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd2e:	e004      	b.n	800cd3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cd34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd3c:	685b      	ldr	r3, [r3, #4]
 800cd3e:	687a      	ldr	r2, [r7, #4]
 800cd40:	429a      	cmp	r2, r3
 800cd42:	d903      	bls.n	800cd4c <pvPortMalloc+0xa4>
 800cd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d1f1      	bne.n	800cd30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cd4c:	4b36      	ldr	r3, [pc, #216]	; (800ce28 <pvPortMalloc+0x180>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd52:	429a      	cmp	r2, r3
 800cd54:	d050      	beq.n	800cdf8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cd56:	6a3b      	ldr	r3, [r7, #32]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	2208      	movs	r2, #8
 800cd5c:	4413      	add	r3, r2
 800cd5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd62:	681a      	ldr	r2, [r3, #0]
 800cd64:	6a3b      	ldr	r3, [r7, #32]
 800cd66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cd68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd6a:	685a      	ldr	r2, [r3, #4]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	1ad2      	subs	r2, r2, r3
 800cd70:	2308      	movs	r3, #8
 800cd72:	005b      	lsls	r3, r3, #1
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d91f      	bls.n	800cdb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cd78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	4413      	add	r3, r2
 800cd7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd80:	69bb      	ldr	r3, [r7, #24]
 800cd82:	f003 0307 	and.w	r3, r3, #7
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d00a      	beq.n	800cda0 <pvPortMalloc+0xf8>
	__asm volatile
 800cd8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd8e:	f383 8811 	msr	BASEPRI, r3
 800cd92:	f3bf 8f6f 	isb	sy
 800cd96:	f3bf 8f4f 	dsb	sy
 800cd9a:	613b      	str	r3, [r7, #16]
}
 800cd9c:	bf00      	nop
 800cd9e:	e7fe      	b.n	800cd9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cda2:	685a      	ldr	r2, [r3, #4]
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	1ad2      	subs	r2, r2, r3
 800cda8:	69bb      	ldr	r3, [r7, #24]
 800cdaa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cdac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdae:	687a      	ldr	r2, [r7, #4]
 800cdb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cdb2:	69b8      	ldr	r0, [r7, #24]
 800cdb4:	f000 f914 	bl	800cfe0 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cdb8:	4b1d      	ldr	r3, [pc, #116]	; (800ce30 <pvPortMalloc+0x188>)
 800cdba:	681a      	ldr	r2, [r3, #0]
 800cdbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdbe:	685b      	ldr	r3, [r3, #4]
 800cdc0:	1ad3      	subs	r3, r2, r3
 800cdc2:	4a1b      	ldr	r2, [pc, #108]	; (800ce30 <pvPortMalloc+0x188>)
 800cdc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cdc6:	4b1a      	ldr	r3, [pc, #104]	; (800ce30 <pvPortMalloc+0x188>)
 800cdc8:	681a      	ldr	r2, [r3, #0]
 800cdca:	4b1b      	ldr	r3, [pc, #108]	; (800ce38 <pvPortMalloc+0x190>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	429a      	cmp	r2, r3
 800cdd0:	d203      	bcs.n	800cdda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cdd2:	4b17      	ldr	r3, [pc, #92]	; (800ce30 <pvPortMalloc+0x188>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	4a18      	ldr	r2, [pc, #96]	; (800ce38 <pvPortMalloc+0x190>)
 800cdd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cdda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cddc:	685a      	ldr	r2, [r3, #4]
 800cdde:	4b13      	ldr	r3, [pc, #76]	; (800ce2c <pvPortMalloc+0x184>)
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	431a      	orrs	r2, r3
 800cde4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cde6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdea:	2200      	movs	r2, #0
 800cdec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cdee:	4b13      	ldr	r3, [pc, #76]	; (800ce3c <pvPortMalloc+0x194>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	3301      	adds	r3, #1
 800cdf4:	4a11      	ldr	r2, [pc, #68]	; (800ce3c <pvPortMalloc+0x194>)
 800cdf6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cdf8:	f7fe ff28 	bl	800bc4c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cdfc:	69fb      	ldr	r3, [r7, #28]
 800cdfe:	f003 0307 	and.w	r3, r3, #7
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d00a      	beq.n	800ce1c <pvPortMalloc+0x174>
	__asm volatile
 800ce06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce0a:	f383 8811 	msr	BASEPRI, r3
 800ce0e:	f3bf 8f6f 	isb	sy
 800ce12:	f3bf 8f4f 	dsb	sy
 800ce16:	60fb      	str	r3, [r7, #12]
}
 800ce18:	bf00      	nop
 800ce1a:	e7fe      	b.n	800ce1a <pvPortMalloc+0x172>
	return pvReturn;
 800ce1c:	69fb      	ldr	r3, [r7, #28]
}
 800ce1e:	4618      	mov	r0, r3
 800ce20:	3728      	adds	r7, #40	; 0x28
 800ce22:	46bd      	mov	sp, r7
 800ce24:	bd80      	pop	{r7, pc}
 800ce26:	bf00      	nop
 800ce28:	20006928 	.word	0x20006928
 800ce2c:	2000693c 	.word	0x2000693c
 800ce30:	2000692c 	.word	0x2000692c
 800ce34:	20006920 	.word	0x20006920
 800ce38:	20006930 	.word	0x20006930
 800ce3c:	20006934 	.word	0x20006934

0800ce40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ce40:	b580      	push	{r7, lr}
 800ce42:	b086      	sub	sp, #24
 800ce44:	af00      	add	r7, sp, #0
 800ce46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d04d      	beq.n	800ceee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ce52:	2308      	movs	r3, #8
 800ce54:	425b      	negs	r3, r3
 800ce56:	697a      	ldr	r2, [r7, #20]
 800ce58:	4413      	add	r3, r2
 800ce5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ce60:	693b      	ldr	r3, [r7, #16]
 800ce62:	685a      	ldr	r2, [r3, #4]
 800ce64:	4b24      	ldr	r3, [pc, #144]	; (800cef8 <vPortFree+0xb8>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	4013      	ands	r3, r2
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d10a      	bne.n	800ce84 <vPortFree+0x44>
	__asm volatile
 800ce6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce72:	f383 8811 	msr	BASEPRI, r3
 800ce76:	f3bf 8f6f 	isb	sy
 800ce7a:	f3bf 8f4f 	dsb	sy
 800ce7e:	60fb      	str	r3, [r7, #12]
}
 800ce80:	bf00      	nop
 800ce82:	e7fe      	b.n	800ce82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ce84:	693b      	ldr	r3, [r7, #16]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d00a      	beq.n	800cea2 <vPortFree+0x62>
	__asm volatile
 800ce8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce90:	f383 8811 	msr	BASEPRI, r3
 800ce94:	f3bf 8f6f 	isb	sy
 800ce98:	f3bf 8f4f 	dsb	sy
 800ce9c:	60bb      	str	r3, [r7, #8]
}
 800ce9e:	bf00      	nop
 800cea0:	e7fe      	b.n	800cea0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	685a      	ldr	r2, [r3, #4]
 800cea6:	4b14      	ldr	r3, [pc, #80]	; (800cef8 <vPortFree+0xb8>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	4013      	ands	r3, r2
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d01e      	beq.n	800ceee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d11a      	bne.n	800ceee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ceb8:	693b      	ldr	r3, [r7, #16]
 800ceba:	685a      	ldr	r2, [r3, #4]
 800cebc:	4b0e      	ldr	r3, [pc, #56]	; (800cef8 <vPortFree+0xb8>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	43db      	mvns	r3, r3
 800cec2:	401a      	ands	r2, r3
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cec8:	f7fe feb2 	bl	800bc30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cecc:	693b      	ldr	r3, [r7, #16]
 800cece:	685a      	ldr	r2, [r3, #4]
 800ced0:	4b0a      	ldr	r3, [pc, #40]	; (800cefc <vPortFree+0xbc>)
 800ced2:	681b      	ldr	r3, [r3, #0]
 800ced4:	4413      	add	r3, r2
 800ced6:	4a09      	ldr	r2, [pc, #36]	; (800cefc <vPortFree+0xbc>)
 800ced8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ceda:	6938      	ldr	r0, [r7, #16]
 800cedc:	f000 f880 	bl	800cfe0 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cee0:	4b07      	ldr	r3, [pc, #28]	; (800cf00 <vPortFree+0xc0>)
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	3301      	adds	r3, #1
 800cee6:	4a06      	ldr	r2, [pc, #24]	; (800cf00 <vPortFree+0xc0>)
 800cee8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ceea:	f7fe feaf 	bl	800bc4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ceee:	bf00      	nop
 800cef0:	3718      	adds	r7, #24
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}
 800cef6:	bf00      	nop
 800cef8:	2000693c 	.word	0x2000693c
 800cefc:	2000692c 	.word	0x2000692c
 800cf00:	20006938 	.word	0x20006938

0800cf04 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 800cf04:	b480      	push	{r7}
 800cf06:	af00      	add	r7, sp, #0
	return xFreeBytesRemaining;
 800cf08:	4b03      	ldr	r3, [pc, #12]	; (800cf18 <xPortGetFreeHeapSize+0x14>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	46bd      	mov	sp, r7
 800cf10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf14:	4770      	bx	lr
 800cf16:	bf00      	nop
 800cf18:	2000692c 	.word	0x2000692c

0800cf1c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b085      	sub	sp, #20
 800cf20:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cf22:	f246 3310 	movw	r3, #25360	; 0x6310
 800cf26:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cf28:	4b27      	ldr	r3, [pc, #156]	; (800cfc8 <prvHeapInit+0xac>)
 800cf2a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	f003 0307 	and.w	r3, r3, #7
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d00c      	beq.n	800cf50 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	3307      	adds	r3, #7
 800cf3a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	f023 0307 	bic.w	r3, r3, #7
 800cf42:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cf44:	68ba      	ldr	r2, [r7, #8]
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	1ad3      	subs	r3, r2, r3
 800cf4a:	4a1f      	ldr	r2, [pc, #124]	; (800cfc8 <prvHeapInit+0xac>)
 800cf4c:	4413      	add	r3, r2
 800cf4e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cf54:	4a1d      	ldr	r2, [pc, #116]	; (800cfcc <prvHeapInit+0xb0>)
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cf5a:	4b1c      	ldr	r3, [pc, #112]	; (800cfcc <prvHeapInit+0xb0>)
 800cf5c:	2200      	movs	r2, #0
 800cf5e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	68ba      	ldr	r2, [r7, #8]
 800cf64:	4413      	add	r3, r2
 800cf66:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cf68:	2208      	movs	r2, #8
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	1a9b      	subs	r3, r3, r2
 800cf6e:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	f023 0307 	bic.w	r3, r3, #7
 800cf76:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	4a15      	ldr	r2, [pc, #84]	; (800cfd0 <prvHeapInit+0xb4>)
 800cf7c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cf7e:	4b14      	ldr	r3, [pc, #80]	; (800cfd0 <prvHeapInit+0xb4>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	2200      	movs	r2, #0
 800cf84:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cf86:	4b12      	ldr	r3, [pc, #72]	; (800cfd0 <prvHeapInit+0xb4>)
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	68fa      	ldr	r2, [r7, #12]
 800cf96:	1ad2      	subs	r2, r2, r3
 800cf98:	683b      	ldr	r3, [r7, #0]
 800cf9a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cf9c:	4b0c      	ldr	r3, [pc, #48]	; (800cfd0 <prvHeapInit+0xb4>)
 800cf9e:	681a      	ldr	r2, [r3, #0]
 800cfa0:	683b      	ldr	r3, [r7, #0]
 800cfa2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cfa4:	683b      	ldr	r3, [r7, #0]
 800cfa6:	685b      	ldr	r3, [r3, #4]
 800cfa8:	4a0a      	ldr	r2, [pc, #40]	; (800cfd4 <prvHeapInit+0xb8>)
 800cfaa:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cfac:	683b      	ldr	r3, [r7, #0]
 800cfae:	685b      	ldr	r3, [r3, #4]
 800cfb0:	4a09      	ldr	r2, [pc, #36]	; (800cfd8 <prvHeapInit+0xbc>)
 800cfb2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cfb4:	4b09      	ldr	r3, [pc, #36]	; (800cfdc <prvHeapInit+0xc0>)
 800cfb6:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cfba:	601a      	str	r2, [r3, #0]
}
 800cfbc:	bf00      	nop
 800cfbe:	3714      	adds	r7, #20
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc6:	4770      	bx	lr
 800cfc8:	20000610 	.word	0x20000610
 800cfcc:	20006920 	.word	0x20006920
 800cfd0:	20006928 	.word	0x20006928
 800cfd4:	20006930 	.word	0x20006930
 800cfd8:	2000692c 	.word	0x2000692c
 800cfdc:	2000693c 	.word	0x2000693c

0800cfe0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b085      	sub	sp, #20
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cfe8:	4b28      	ldr	r3, [pc, #160]	; (800d08c <prvInsertBlockIntoFreeList+0xac>)
 800cfea:	60fb      	str	r3, [r7, #12]
 800cfec:	e002      	b.n	800cff4 <prvInsertBlockIntoFreeList+0x14>
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	60fb      	str	r3, [r7, #12]
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	687a      	ldr	r2, [r7, #4]
 800cffa:	429a      	cmp	r2, r3
 800cffc:	d8f7      	bhi.n	800cfee <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d002:	68fb      	ldr	r3, [r7, #12]
 800d004:	685b      	ldr	r3, [r3, #4]
 800d006:	68ba      	ldr	r2, [r7, #8]
 800d008:	4413      	add	r3, r2
 800d00a:	687a      	ldr	r2, [r7, #4]
 800d00c:	429a      	cmp	r2, r3
 800d00e:	d108      	bne.n	800d022 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	685a      	ldr	r2, [r3, #4]
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	685b      	ldr	r3, [r3, #4]
 800d018:	441a      	add	r2, r3
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	685b      	ldr	r3, [r3, #4]
 800d02a:	68ba      	ldr	r2, [r7, #8]
 800d02c:	441a      	add	r2, r3
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	429a      	cmp	r2, r3
 800d034:	d118      	bne.n	800d068 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	681a      	ldr	r2, [r3, #0]
 800d03a:	4b15      	ldr	r3, [pc, #84]	; (800d090 <prvInsertBlockIntoFreeList+0xb0>)
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	429a      	cmp	r2, r3
 800d040:	d00d      	beq.n	800d05e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	685a      	ldr	r2, [r3, #4]
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	685b      	ldr	r3, [r3, #4]
 800d04c:	441a      	add	r2, r3
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	681a      	ldr	r2, [r3, #0]
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	601a      	str	r2, [r3, #0]
 800d05c:	e008      	b.n	800d070 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d05e:	4b0c      	ldr	r3, [pc, #48]	; (800d090 <prvInsertBlockIntoFreeList+0xb0>)
 800d060:	681a      	ldr	r2, [r3, #0]
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	601a      	str	r2, [r3, #0]
 800d066:	e003      	b.n	800d070 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	681a      	ldr	r2, [r3, #0]
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d070:	68fa      	ldr	r2, [r7, #12]
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	429a      	cmp	r2, r3
 800d076:	d002      	beq.n	800d07e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	687a      	ldr	r2, [r7, #4]
 800d07c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d07e:	bf00      	nop
 800d080:	3714      	adds	r7, #20
 800d082:	46bd      	mov	sp, r7
 800d084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d088:	4770      	bx	lr
 800d08a:	bf00      	nop
 800d08c:	20006920 	.word	0x20006920
 800d090:	20006928 	.word	0x20006928

0800d094 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b084      	sub	sp, #16
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	330c      	adds	r3, #12
 800d0a4:	461a      	mov	r2, r3
 800d0a6:	6839      	ldr	r1, [r7, #0]
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f001 fff3 	bl	800f094 <tcpip_send_msg_wait_sem>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800d0b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d103      	bne.n	800d0c2 <netconn_apimsg+0x2e>
    return apimsg->err;
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800d0c0:	e001      	b.n	800d0c6 <netconn_apimsg+0x32>
  }
  return err;
 800d0c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d0c6:	4618      	mov	r0, r3
 800d0c8:	3710      	adds	r7, #16
 800d0ca:	46bd      	mov	sp, r7
 800d0cc:	bd80      	pop	{r7, pc}
	...

0800d0d0 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800d0d0:	b580      	push	{r7, lr}
 800d0d2:	b08c      	sub	sp, #48	; 0x30
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	603a      	str	r2, [r7, #0]
 800d0da:	71fb      	strb	r3, [r7, #7]
 800d0dc:	460b      	mov	r3, r1
 800d0de:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800d0e0:	79fb      	ldrb	r3, [r7, #7]
 800d0e2:	6839      	ldr	r1, [r7, #0]
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f000 ff21 	bl	800df2c <netconn_alloc>
 800d0ea:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 800d0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d054      	beq.n	800d19c <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800d0f2:	79bb      	ldrb	r3, [r7, #6]
 800d0f4:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800d0f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f8:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800d0fa:	f107 0308 	add.w	r3, r7, #8
 800d0fe:	4619      	mov	r1, r3
 800d100:	4829      	ldr	r0, [pc, #164]	; (800d1a8 <netconn_new_with_proto_and_callback+0xd8>)
 800d102:	f7ff ffc7 	bl	800d094 <netconn_apimsg>
 800d106:	4603      	mov	r3, r0
 800d108:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 800d10c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d110:	2b00      	cmp	r3, #0
 800d112:	d043      	beq.n	800d19c <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800d114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d116:	685b      	ldr	r3, [r3, #4]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d005      	beq.n	800d128 <netconn_new_with_proto_and_callback+0x58>
 800d11c:	4b23      	ldr	r3, [pc, #140]	; (800d1ac <netconn_new_with_proto_and_callback+0xdc>)
 800d11e:	22a3      	movs	r2, #163	; 0xa3
 800d120:	4923      	ldr	r1, [pc, #140]	; (800d1b0 <netconn_new_with_proto_and_callback+0xe0>)
 800d122:	4824      	ldr	r0, [pc, #144]	; (800d1b4 <netconn_new_with_proto_and_callback+0xe4>)
 800d124:	f00d fad0 	bl	801a6c8 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800d128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d12a:	3310      	adds	r3, #16
 800d12c:	4618      	mov	r0, r3
 800d12e:	f00c ff88 	bl	801a042 <sys_mbox_valid>
 800d132:	4603      	mov	r3, r0
 800d134:	2b00      	cmp	r3, #0
 800d136:	d105      	bne.n	800d144 <netconn_new_with_proto_and_callback+0x74>
 800d138:	4b1c      	ldr	r3, [pc, #112]	; (800d1ac <netconn_new_with_proto_and_callback+0xdc>)
 800d13a:	22a4      	movs	r2, #164	; 0xa4
 800d13c:	491e      	ldr	r1, [pc, #120]	; (800d1b8 <netconn_new_with_proto_and_callback+0xe8>)
 800d13e:	481d      	ldr	r0, [pc, #116]	; (800d1b4 <netconn_new_with_proto_and_callback+0xe4>)
 800d140:	f00d fac2 	bl	801a6c8 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800d144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d146:	3314      	adds	r3, #20
 800d148:	4618      	mov	r0, r3
 800d14a:	f00c ff7a 	bl	801a042 <sys_mbox_valid>
 800d14e:	4603      	mov	r3, r0
 800d150:	2b00      	cmp	r3, #0
 800d152:	d005      	beq.n	800d160 <netconn_new_with_proto_and_callback+0x90>
 800d154:	4b15      	ldr	r3, [pc, #84]	; (800d1ac <netconn_new_with_proto_and_callback+0xdc>)
 800d156:	22a6      	movs	r2, #166	; 0xa6
 800d158:	4918      	ldr	r1, [pc, #96]	; (800d1bc <netconn_new_with_proto_and_callback+0xec>)
 800d15a:	4816      	ldr	r0, [pc, #88]	; (800d1b4 <netconn_new_with_proto_and_callback+0xe4>)
 800d15c:	f00d fab4 	bl	801a6c8 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800d160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d162:	330c      	adds	r3, #12
 800d164:	4618      	mov	r0, r3
 800d166:	f00c fffd 	bl	801a164 <sys_sem_valid>
 800d16a:	4603      	mov	r3, r0
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d105      	bne.n	800d17c <netconn_new_with_proto_and_callback+0xac>
 800d170:	4b0e      	ldr	r3, [pc, #56]	; (800d1ac <netconn_new_with_proto_and_callback+0xdc>)
 800d172:	22a9      	movs	r2, #169	; 0xa9
 800d174:	4912      	ldr	r1, [pc, #72]	; (800d1c0 <netconn_new_with_proto_and_callback+0xf0>)
 800d176:	480f      	ldr	r0, [pc, #60]	; (800d1b4 <netconn_new_with_proto_and_callback+0xe4>)
 800d178:	f00d faa6 	bl	801a6c8 <iprintf>
      sys_sem_free(&conn->op_completed);
 800d17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d17e:	330c      	adds	r3, #12
 800d180:	4618      	mov	r0, r3
 800d182:	f00c ffe2 	bl	801a14a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800d186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d188:	3310      	adds	r3, #16
 800d18a:	4618      	mov	r0, r3
 800d18c:	f00c fed2 	bl	8019f34 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800d190:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d192:	2007      	movs	r0, #7
 800d194:	f002 fce6 	bl	800fb64 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800d198:	2300      	movs	r3, #0
 800d19a:	e000      	b.n	800d19e <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800d19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800d19e:	4618      	mov	r0, r3
 800d1a0:	3730      	adds	r7, #48	; 0x30
 800d1a2:	46bd      	mov	sp, r7
 800d1a4:	bd80      	pop	{r7, pc}
 800d1a6:	bf00      	nop
 800d1a8:	0800df01 	.word	0x0800df01
 800d1ac:	0801b934 	.word	0x0801b934
 800d1b0:	0801b968 	.word	0x0801b968
 800d1b4:	0801b98c 	.word	0x0801b98c
 800d1b8:	0801b9b4 	.word	0x0801b9b4
 800d1bc:	0801b9cc 	.word	0x0801b9cc
 800d1c0:	0801b9f0 	.word	0x0801b9f0

0800d1c4 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b08c      	sub	sp, #48	; 0x30
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d101      	bne.n	800d1d6 <netconn_prepare_delete+0x12>
    return ERR_OK;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	e014      	b.n	800d200 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800d1da:	2329      	movs	r3, #41	; 0x29
 800d1dc:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800d1de:	f107 030c 	add.w	r3, r7, #12
 800d1e2:	4619      	mov	r1, r3
 800d1e4:	4808      	ldr	r0, [pc, #32]	; (800d208 <netconn_prepare_delete+0x44>)
 800d1e6:	f7ff ff55 	bl	800d094 <netconn_apimsg>
 800d1ea:	4603      	mov	r3, r0
 800d1ec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800d1f0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d002      	beq.n	800d1fe <netconn_prepare_delete+0x3a>
    return err;
 800d1f8:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800d1fc:	e000      	b.n	800d200 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 800d1fe:	2300      	movs	r3, #0
}
 800d200:	4618      	mov	r0, r3
 800d202:	3730      	adds	r7, #48	; 0x30
 800d204:	46bd      	mov	sp, r7
 800d206:	bd80      	pop	{r7, pc}
 800d208:	0800e465 	.word	0x0800e465

0800d20c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800d20c:	b580      	push	{r7, lr}
 800d20e:	b084      	sub	sp, #16
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d101      	bne.n	800d21e <netconn_delete+0x12>
    return ERR_OK;
 800d21a:	2300      	movs	r3, #0
 800d21c:	e00d      	b.n	800d23a <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f7ff ffd0 	bl	800d1c4 <netconn_prepare_delete>
 800d224:	4603      	mov	r3, r0
 800d226:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 800d228:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	d102      	bne.n	800d236 <netconn_delete+0x2a>
    netconn_free(conn);
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f000 fee9 	bl	800e008 <netconn_free>
  }
  return err;
 800d236:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800d23a:	4618      	mov	r0, r3
 800d23c:	3710      	adds	r7, #16
 800d23e:	46bd      	mov	sp, r7
 800d240:	bd80      	pop	{r7, pc}
	...

0800d244 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800d244:	b580      	push	{r7, lr}
 800d246:	b08e      	sub	sp, #56	; 0x38
 800d248:	af00      	add	r7, sp, #0
 800d24a:	60f8      	str	r0, [r7, #12]
 800d24c:	60b9      	str	r1, [r7, #8]
 800d24e:	4613      	mov	r3, r2
 800d250:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d109      	bne.n	800d26c <netconn_bind+0x28>
 800d258:	4b11      	ldr	r3, [pc, #68]	; (800d2a0 <netconn_bind+0x5c>)
 800d25a:	f44f 729c 	mov.w	r2, #312	; 0x138
 800d25e:	4911      	ldr	r1, [pc, #68]	; (800d2a4 <netconn_bind+0x60>)
 800d260:	4811      	ldr	r0, [pc, #68]	; (800d2a8 <netconn_bind+0x64>)
 800d262:	f00d fa31 	bl	801a6c8 <iprintf>
 800d266:	f06f 030f 	mvn.w	r3, #15
 800d26a:	e015      	b.n	800d298 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d101      	bne.n	800d276 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 800d272:	4b0e      	ldr	r3, [pc, #56]	; (800d2ac <netconn_bind+0x68>)
 800d274:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800d27a:	68bb      	ldr	r3, [r7, #8]
 800d27c:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800d27e:	88fb      	ldrh	r3, [r7, #6]
 800d280:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800d282:	f107 0314 	add.w	r3, r7, #20
 800d286:	4619      	mov	r1, r3
 800d288:	4809      	ldr	r0, [pc, #36]	; (800d2b0 <netconn_bind+0x6c>)
 800d28a:	f7ff ff03 	bl	800d094 <netconn_apimsg>
 800d28e:	4603      	mov	r3, r0
 800d290:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800d294:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 800d298:	4618      	mov	r0, r3
 800d29a:	3738      	adds	r7, #56	; 0x38
 800d29c:	46bd      	mov	sp, r7
 800d29e:	bd80      	pop	{r7, pc}
 800d2a0:	0801b934 	.word	0x0801b934
 800d2a4:	0801ba6c 	.word	0x0801ba6c
 800d2a8:	0801b98c 	.word	0x0801b98c
 800d2ac:	0801ef38 	.word	0x0801ef38
 800d2b0:	0800e62d 	.word	0x0800e62d

0800d2b4 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800d2b4:	b580      	push	{r7, lr}
 800d2b6:	b088      	sub	sp, #32
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	60f8      	str	r0, [r7, #12]
 800d2bc:	60b9      	str	r1, [r7, #8]
 800d2be:	4613      	mov	r3, r2
 800d2c0:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800d2c6:	68bb      	ldr	r3, [r7, #8]
 800d2c8:	2b00      	cmp	r3, #0
 800d2ca:	d109      	bne.n	800d2e0 <netconn_recv_data+0x2c>
 800d2cc:	4b58      	ldr	r3, [pc, #352]	; (800d430 <netconn_recv_data+0x17c>)
 800d2ce:	f44f 7212 	mov.w	r2, #584	; 0x248
 800d2d2:	4958      	ldr	r1, [pc, #352]	; (800d434 <netconn_recv_data+0x180>)
 800d2d4:	4858      	ldr	r0, [pc, #352]	; (800d438 <netconn_recv_data+0x184>)
 800d2d6:	f00d f9f7 	bl	801a6c8 <iprintf>
 800d2da:	f06f 030f 	mvn.w	r3, #15
 800d2de:	e0a2      	b.n	800d426 <netconn_recv_data+0x172>
  *new_buf = NULL;
 800d2e0:	68bb      	ldr	r3, [r7, #8]
 800d2e2:	2200      	movs	r2, #0
 800d2e4:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d109      	bne.n	800d300 <netconn_recv_data+0x4c>
 800d2ec:	4b50      	ldr	r3, [pc, #320]	; (800d430 <netconn_recv_data+0x17c>)
 800d2ee:	f240 224a 	movw	r2, #586	; 0x24a
 800d2f2:	4952      	ldr	r1, [pc, #328]	; (800d43c <netconn_recv_data+0x188>)
 800d2f4:	4850      	ldr	r0, [pc, #320]	; (800d438 <netconn_recv_data+0x184>)
 800d2f6:	f00d f9e7 	bl	801a6c8 <iprintf>
 800d2fa:	f06f 030f 	mvn.w	r3, #15
 800d2fe:	e092      	b.n	800d426 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	3310      	adds	r3, #16
 800d304:	4618      	mov	r0, r3
 800d306:	f00c fe9c 	bl	801a042 <sys_mbox_valid>
 800d30a:	4603      	mov	r3, r0
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d10e      	bne.n	800d32e <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 800d310:	68f8      	ldr	r0, [r7, #12]
 800d312:	f000 fa45 	bl	800d7a0 <netconn_err>
 800d316:	4603      	mov	r3, r0
 800d318:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 800d31a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d002      	beq.n	800d328 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800d322:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800d326:	e07e      	b.n	800d426 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 800d328:	f06f 030a 	mvn.w	r3, #10
 800d32c:	e07b      	b.n	800d426 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	7f1b      	ldrb	r3, [r3, #28]
 800d332:	f003 0302 	and.w	r3, r3, #2
 800d336:	2b00      	cmp	r3, #0
 800d338:	d10f      	bne.n	800d35a <netconn_recv_data+0xa6>
 800d33a:	79fb      	ldrb	r3, [r7, #7]
 800d33c:	f003 0304 	and.w	r3, r3, #4
 800d340:	2b00      	cmp	r3, #0
 800d342:	d10a      	bne.n	800d35a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	7f1b      	ldrb	r3, [r3, #28]
 800d348:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d104      	bne.n	800d35a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800d350:	68fb      	ldr	r3, [r7, #12]
 800d352:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d023      	beq.n	800d3a2 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	3310      	adds	r3, #16
 800d35e:	f107 0218 	add.w	r2, r7, #24
 800d362:	4611      	mov	r1, r2
 800d364:	4618      	mov	r0, r3
 800d366:	f00c fe50 	bl	801a00a <sys_arch_mbox_tryfetch>
 800d36a:	4603      	mov	r3, r0
 800d36c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d370:	d11f      	bne.n	800d3b2 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800d372:	68f8      	ldr	r0, [r7, #12]
 800d374:	f000 fa14 	bl	800d7a0 <netconn_err>
 800d378:	4603      	mov	r3, r0
 800d37a:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 800d37c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d002      	beq.n	800d38a <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800d384:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d388:	e04d      	b.n	800d426 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 800d38a:	68fb      	ldr	r3, [r7, #12]
 800d38c:	7f1b      	ldrb	r3, [r3, #28]
 800d38e:	f003 0301 	and.w	r3, r3, #1
 800d392:	2b00      	cmp	r3, #0
 800d394:	d002      	beq.n	800d39c <netconn_recv_data+0xe8>
        return ERR_CONN;
 800d396:	f06f 030a 	mvn.w	r3, #10
 800d39a:	e044      	b.n	800d426 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 800d39c:	f06f 0306 	mvn.w	r3, #6
 800d3a0:	e041      	b.n	800d426 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	3310      	adds	r3, #16
 800d3a6:	f107 0118 	add.w	r1, r7, #24
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	f00c fded 	bl	8019f8c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	781b      	ldrb	r3, [r3, #0]
 800d3b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d3ba:	2b10      	cmp	r3, #16
 800d3bc:	d117      	bne.n	800d3ee <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 800d3be:	69bb      	ldr	r3, [r7, #24]
 800d3c0:	f107 0217 	add.w	r2, r7, #23
 800d3c4:	4611      	mov	r1, r2
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f000 fa3c 	bl	800d844 <lwip_netconn_is_err_msg>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d009      	beq.n	800d3e6 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 800d3d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d3d6:	f113 0f0f 	cmn.w	r3, #15
 800d3da:	d101      	bne.n	800d3e0 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	e022      	b.n	800d426 <netconn_recv_data+0x172>
      }
      return err;
 800d3e0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d3e4:	e01f      	b.n	800d426 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800d3e6:	69bb      	ldr	r3, [r7, #24]
 800d3e8:	891b      	ldrh	r3, [r3, #8]
 800d3ea:	83fb      	strh	r3, [r7, #30]
 800d3ec:	e00d      	b.n	800d40a <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800d3ee:	69bb      	ldr	r3, [r7, #24]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d106      	bne.n	800d402 <netconn_recv_data+0x14e>
 800d3f4:	4b0e      	ldr	r3, [pc, #56]	; (800d430 <netconn_recv_data+0x17c>)
 800d3f6:	f240 2291 	movw	r2, #657	; 0x291
 800d3fa:	4911      	ldr	r1, [pc, #68]	; (800d440 <netconn_recv_data+0x18c>)
 800d3fc:	480e      	ldr	r0, [pc, #56]	; (800d438 <netconn_recv_data+0x184>)
 800d3fe:	f00d f963 	bl	801a6c8 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 800d402:	69bb      	ldr	r3, [r7, #24]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	891b      	ldrh	r3, [r3, #8]
 800d408:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d005      	beq.n	800d41e <netconn_recv_data+0x16a>
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d416:	8bfa      	ldrh	r2, [r7, #30]
 800d418:	2101      	movs	r1, #1
 800d41a:	68f8      	ldr	r0, [r7, #12]
 800d41c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800d41e:	69ba      	ldr	r2, [r7, #24]
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800d424:	2300      	movs	r3, #0
}
 800d426:	4618      	mov	r0, r3
 800d428:	3720      	adds	r7, #32
 800d42a:	46bd      	mov	sp, r7
 800d42c:	bd80      	pop	{r7, pc}
 800d42e:	bf00      	nop
 800d430:	0801b934 	.word	0x0801b934
 800d434:	0801bb4c 	.word	0x0801bb4c
 800d438:	0801b98c 	.word	0x0801b98c
 800d43c:	0801bb6c 	.word	0x0801bb6c
 800d440:	0801bb88 	.word	0x0801bb88

0800d444 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b084      	sub	sp, #16
 800d448:	af00      	add	r7, sp, #0
 800d44a:	60f8      	str	r0, [r7, #12]
 800d44c:	60b9      	str	r1, [r7, #8]
 800d44e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d005      	beq.n	800d462 <netconn_tcp_recvd_msg+0x1e>
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	781b      	ldrb	r3, [r3, #0]
 800d45a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d45e:	2b10      	cmp	r3, #16
 800d460:	d009      	beq.n	800d476 <netconn_tcp_recvd_msg+0x32>
 800d462:	4b0c      	ldr	r3, [pc, #48]	; (800d494 <netconn_tcp_recvd_msg+0x50>)
 800d464:	f240 22a7 	movw	r2, #679	; 0x2a7
 800d468:	490b      	ldr	r1, [pc, #44]	; (800d498 <netconn_tcp_recvd_msg+0x54>)
 800d46a:	480c      	ldr	r0, [pc, #48]	; (800d49c <netconn_tcp_recvd_msg+0x58>)
 800d46c:	f00d f92c 	bl	801a6c8 <iprintf>
 800d470:	f06f 030f 	mvn.w	r3, #15
 800d474:	e00a      	b.n	800d48c <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	68fa      	ldr	r2, [r7, #12]
 800d47a:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	68ba      	ldr	r2, [r7, #8]
 800d480:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 800d482:	6879      	ldr	r1, [r7, #4]
 800d484:	4806      	ldr	r0, [pc, #24]	; (800d4a0 <netconn_tcp_recvd_msg+0x5c>)
 800d486:	f7ff fe05 	bl	800d094 <netconn_apimsg>
 800d48a:	4603      	mov	r3, r0
}
 800d48c:	4618      	mov	r0, r3
 800d48e:	3710      	adds	r7, #16
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}
 800d494:	0801b934 	.word	0x0801b934
 800d498:	0801bb94 	.word	0x0801bb94
 800d49c:	0801b98c 	.word	0x0801b98c
 800d4a0:	0800e73b 	.word	0x0800e73b

0800d4a4 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 800d4a4:	b580      	push	{r7, lr}
 800d4a6:	b090      	sub	sp, #64	; 0x40
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	60f8      	str	r0, [r7, #12]
 800d4ac:	60b9      	str	r1, [r7, #8]
 800d4ae:	4613      	mov	r3, r2
 800d4b0:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	3310      	adds	r3, #16
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	f00c fdc3 	bl	801a042 <sys_mbox_valid>
 800d4bc:	4603      	mov	r3, r0
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d102      	bne.n	800d4c8 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 800d4c2:	f06f 030a 	mvn.w	r3, #10
 800d4c6:	e06d      	b.n	800d5a4 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	7f1b      	ldrb	r3, [r3, #28]
 800d4cc:	b25b      	sxtb	r3, r3
 800d4ce:	2b00      	cmp	r3, #0
 800d4d0:	da07      	bge.n	800d4e2 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	7f1b      	ldrb	r3, [r3, #28]
 800d4d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4da:	b2da      	uxtb	r2, r3
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 800d4e0:	e039      	b.n	800d556 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 800d4e2:	79fb      	ldrb	r3, [r7, #7]
 800d4e4:	461a      	mov	r2, r3
 800d4e6:	68b9      	ldr	r1, [r7, #8]
 800d4e8:	68f8      	ldr	r0, [r7, #12]
 800d4ea:	f7ff fee3 	bl	800d2b4 <netconn_recv_data>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 800d4f4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d002      	beq.n	800d502 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 800d4fc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d500:	e050      	b.n	800d5a4 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 800d502:	68bb      	ldr	r3, [r7, #8]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 800d508:	79fb      	ldrb	r3, [r7, #7]
 800d50a:	f003 0308 	and.w	r3, r3, #8
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d10e      	bne.n	800d530 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 800d512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d514:	2b00      	cmp	r3, #0
 800d516:	d002      	beq.n	800d51e <netconn_recv_data_tcp+0x7a>
 800d518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d51a:	891b      	ldrh	r3, [r3, #8]
 800d51c:	e000      	b.n	800d520 <netconn_recv_data_tcp+0x7c>
 800d51e:	2301      	movs	r3, #1
 800d520:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 800d522:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d524:	f107 0214 	add.w	r2, r7, #20
 800d528:	4619      	mov	r1, r3
 800d52a:	68f8      	ldr	r0, [r7, #12]
 800d52c:	f7ff ff8a 	bl	800d444 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 800d530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d532:	2b00      	cmp	r3, #0
 800d534:	d134      	bne.n	800d5a0 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 800d536:	79fb      	ldrb	r3, [r7, #7]
 800d538:	f003 0310 	and.w	r3, r3, #16
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d009      	beq.n	800d554 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	7f1b      	ldrb	r3, [r3, #28]
 800d544:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d548:	b2da      	uxtb	r2, r3
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 800d54e:	f06f 0306 	mvn.w	r3, #6
 800d552:	e027      	b.n	800d5a4 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 800d554:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d005      	beq.n	800d56a <netconn_recv_data_tcp+0xc6>
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d562:	2200      	movs	r2, #0
 800d564:	2101      	movs	r1, #1
 800d566:	68f8      	ldr	r0, [r7, #12]
 800d568:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	685b      	ldr	r3, [r3, #4]
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d10f      	bne.n	800d592 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 800d572:	68f8      	ldr	r0, [r7, #12]
 800d574:	f000 f914 	bl	800d7a0 <netconn_err>
 800d578:	4603      	mov	r3, r0
 800d57a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 800d57e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d582:	2b00      	cmp	r3, #0
 800d584:	d002      	beq.n	800d58c <netconn_recv_data_tcp+0xe8>
          return err;
 800d586:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800d58a:	e00b      	b.n	800d5a4 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 800d58c:	f06f 030d 	mvn.w	r3, #13
 800d590:	e008      	b.n	800d5a4 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800d592:	2101      	movs	r1, #1
 800d594:	68f8      	ldr	r0, [r7, #12]
 800d596:	f000 f8d3 	bl	800d740 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800d59a:	f06f 030e 	mvn.w	r3, #14
 800d59e:	e001      	b.n	800d5a4 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 800d5a0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	3740      	adds	r7, #64	; 0x40
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	bd80      	pop	{r7, pc}

0800d5ac <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800d5ac:	b580      	push	{r7, lr}
 800d5ae:	b086      	sub	sp, #24
 800d5b0:	af00      	add	r7, sp, #0
 800d5b2:	6078      	str	r0, [r7, #4]
 800d5b4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800d5b6:	2300      	movs	r3, #0
 800d5b8:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800d5ba:	683b      	ldr	r3, [r7, #0]
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d109      	bne.n	800d5d4 <netconn_recv+0x28>
 800d5c0:	4b32      	ldr	r3, [pc, #200]	; (800d68c <netconn_recv+0xe0>)
 800d5c2:	f240 3263 	movw	r2, #867	; 0x363
 800d5c6:	4932      	ldr	r1, [pc, #200]	; (800d690 <netconn_recv+0xe4>)
 800d5c8:	4832      	ldr	r0, [pc, #200]	; (800d694 <netconn_recv+0xe8>)
 800d5ca:	f00d f87d 	bl	801a6c8 <iprintf>
 800d5ce:	f06f 030f 	mvn.w	r3, #15
 800d5d2:	e056      	b.n	800d682 <netconn_recv+0xd6>
  *new_buf = NULL;
 800d5d4:	683b      	ldr	r3, [r7, #0]
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2b00      	cmp	r3, #0
 800d5de:	d109      	bne.n	800d5f4 <netconn_recv+0x48>
 800d5e0:	4b2a      	ldr	r3, [pc, #168]	; (800d68c <netconn_recv+0xe0>)
 800d5e2:	f240 3265 	movw	r2, #869	; 0x365
 800d5e6:	492c      	ldr	r1, [pc, #176]	; (800d698 <netconn_recv+0xec>)
 800d5e8:	482a      	ldr	r0, [pc, #168]	; (800d694 <netconn_recv+0xe8>)
 800d5ea:	f00d f86d 	bl	801a6c8 <iprintf>
 800d5ee:	f06f 030f 	mvn.w	r3, #15
 800d5f2:	e046      	b.n	800d682 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	781b      	ldrb	r3, [r3, #0]
 800d5f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800d5fc:	2b10      	cmp	r3, #16
 800d5fe:	d13a      	bne.n	800d676 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800d600:	2300      	movs	r3, #0
 800d602:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800d604:	2006      	movs	r0, #6
 800d606:	f002 fa5b 	bl	800fac0 <memp_malloc>
 800d60a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800d60c:	697b      	ldr	r3, [r7, #20]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d102      	bne.n	800d618 <netconn_recv+0x6c>
      return ERR_MEM;
 800d612:	f04f 33ff 	mov.w	r3, #4294967295
 800d616:	e034      	b.n	800d682 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 800d618:	f107 030c 	add.w	r3, r7, #12
 800d61c:	2200      	movs	r2, #0
 800d61e:	4619      	mov	r1, r3
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	f7ff ff3f 	bl	800d4a4 <netconn_recv_data_tcp>
 800d626:	4603      	mov	r3, r0
 800d628:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800d62a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d006      	beq.n	800d640 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 800d632:	6979      	ldr	r1, [r7, #20]
 800d634:	2006      	movs	r0, #6
 800d636:	f002 fa95 	bl	800fb64 <memp_free>
      return err;
 800d63a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d63e:	e020      	b.n	800d682 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d106      	bne.n	800d654 <netconn_recv+0xa8>
 800d646:	4b11      	ldr	r3, [pc, #68]	; (800d68c <netconn_recv+0xe0>)
 800d648:	f240 3279 	movw	r2, #889	; 0x379
 800d64c:	4913      	ldr	r1, [pc, #76]	; (800d69c <netconn_recv+0xf0>)
 800d64e:	4811      	ldr	r0, [pc, #68]	; (800d694 <netconn_recv+0xe8>)
 800d650:	f00d f83a 	bl	801a6c8 <iprintf>

    buf->p = p;
 800d654:	68fa      	ldr	r2, [r7, #12]
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800d65a:	68fa      	ldr	r2, [r7, #12]
 800d65c:	697b      	ldr	r3, [r7, #20]
 800d65e:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800d660:	697b      	ldr	r3, [r7, #20]
 800d662:	2200      	movs	r2, #0
 800d664:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800d666:	697b      	ldr	r3, [r7, #20]
 800d668:	2200      	movs	r2, #0
 800d66a:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800d66c:	683b      	ldr	r3, [r7, #0]
 800d66e:	697a      	ldr	r2, [r7, #20]
 800d670:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800d672:	2300      	movs	r3, #0
 800d674:	e005      	b.n	800d682 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 800d676:	2200      	movs	r2, #0
 800d678:	6839      	ldr	r1, [r7, #0]
 800d67a:	6878      	ldr	r0, [r7, #4]
 800d67c:	f7ff fe1a 	bl	800d2b4 <netconn_recv_data>
 800d680:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800d682:	4618      	mov	r0, r3
 800d684:	3718      	adds	r7, #24
 800d686:	46bd      	mov	sp, r7
 800d688:	bd80      	pop	{r7, pc}
 800d68a:	bf00      	nop
 800d68c:	0801b934 	.word	0x0801b934
 800d690:	0801bb4c 	.word	0x0801bb4c
 800d694:	0801b98c 	.word	0x0801b98c
 800d698:	0801bb6c 	.word	0x0801bb6c
 800d69c:	0801bbe4 	.word	0x0801bbe4

0800d6a0 <netconn_sendto>:
 * @param port the remote port to which to send the data
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_sendto(struct netconn *conn, struct netbuf *buf, const ip_addr_t *addr, u16_t port)
{
 800d6a0:	b580      	push	{r7, lr}
 800d6a2:	b084      	sub	sp, #16
 800d6a4:	af00      	add	r7, sp, #0
 800d6a6:	60f8      	str	r0, [r7, #12]
 800d6a8:	60b9      	str	r1, [r7, #8]
 800d6aa:	607a      	str	r2, [r7, #4]
 800d6ac:	807b      	strh	r3, [r7, #2]
  if (buf != NULL) {
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d011      	beq.n	800d6d8 <netconn_sendto+0x38>
    ip_addr_set(&buf->addr, addr);
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d002      	beq.n	800d6c0 <netconn_sendto+0x20>
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	e000      	b.n	800d6c2 <netconn_sendto+0x22>
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	68ba      	ldr	r2, [r7, #8]
 800d6c4:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	887a      	ldrh	r2, [r7, #2]
 800d6ca:	819a      	strh	r2, [r3, #12]
    return netconn_send(conn, buf);
 800d6cc:	68b9      	ldr	r1, [r7, #8]
 800d6ce:	68f8      	ldr	r0, [r7, #12]
 800d6d0:	f000 f808 	bl	800d6e4 <netconn_send>
 800d6d4:	4603      	mov	r3, r0
 800d6d6:	e001      	b.n	800d6dc <netconn_sendto+0x3c>
  }
  return ERR_VAL;
 800d6d8:	f06f 0305 	mvn.w	r3, #5
}
 800d6dc:	4618      	mov	r0, r3
 800d6de:	3710      	adds	r7, #16
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd80      	pop	{r7, pc}

0800d6e4 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b08c      	sub	sp, #48	; 0x30
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
 800d6ec:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d109      	bne.n	800d708 <netconn_send+0x24>
 800d6f4:	4b0e      	ldr	r3, [pc, #56]	; (800d730 <netconn_send+0x4c>)
 800d6f6:	f240 32b2 	movw	r2, #946	; 0x3b2
 800d6fa:	490e      	ldr	r1, [pc, #56]	; (800d734 <netconn_send+0x50>)
 800d6fc:	480e      	ldr	r0, [pc, #56]	; (800d738 <netconn_send+0x54>)
 800d6fe:	f00c ffe3 	bl	801a6c8 <iprintf>
 800d702:	f06f 030f 	mvn.w	r3, #15
 800d706:	e00e      	b.n	800d726 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 800d70c:	683b      	ldr	r3, [r7, #0]
 800d70e:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 800d710:	f107 030c 	add.w	r3, r7, #12
 800d714:	4619      	mov	r1, r3
 800d716:	4809      	ldr	r0, [pc, #36]	; (800d73c <netconn_send+0x58>)
 800d718:	f7ff fcbc 	bl	800d094 <netconn_apimsg>
 800d71c:	4603      	mov	r3, r0
 800d71e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800d722:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d726:	4618      	mov	r0, r3
 800d728:	3730      	adds	r7, #48	; 0x30
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}
 800d72e:	bf00      	nop
 800d730:	0801b934 	.word	0x0801b934
 800d734:	0801bbf0 	.word	0x0801bbf0
 800d738:	0801b98c 	.word	0x0801b98c
 800d73c:	0800e6a1 	.word	0x0800e6a1

0800d740 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b08c      	sub	sp, #48	; 0x30
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
 800d748:	460b      	mov	r3, r1
 800d74a:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d109      	bne.n	800d766 <netconn_close_shutdown+0x26>
 800d752:	4b0f      	ldr	r3, [pc, #60]	; (800d790 <netconn_close_shutdown+0x50>)
 800d754:	f240 4247 	movw	r2, #1095	; 0x447
 800d758:	490e      	ldr	r1, [pc, #56]	; (800d794 <netconn_close_shutdown+0x54>)
 800d75a:	480f      	ldr	r0, [pc, #60]	; (800d798 <netconn_close_shutdown+0x58>)
 800d75c:	f00c ffb4 	bl	801a6c8 <iprintf>
 800d760:	f06f 030f 	mvn.w	r3, #15
 800d764:	e010      	b.n	800d788 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800d76a:	78fb      	ldrb	r3, [r7, #3]
 800d76c:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800d76e:	2329      	movs	r3, #41	; 0x29
 800d770:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800d772:	f107 030c 	add.w	r3, r7, #12
 800d776:	4619      	mov	r1, r3
 800d778:	4808      	ldr	r0, [pc, #32]	; (800d79c <netconn_close_shutdown+0x5c>)
 800d77a:	f7ff fc8b 	bl	800d094 <netconn_apimsg>
 800d77e:	4603      	mov	r3, r0
 800d780:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 800d784:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 800d788:	4618      	mov	r0, r3
 800d78a:	3730      	adds	r7, #48	; 0x30
 800d78c:	46bd      	mov	sp, r7
 800d78e:	bd80      	pop	{r7, pc}
 800d790:	0801b934 	.word	0x0801b934
 800d794:	0801bc70 	.word	0x0801bc70
 800d798:	0801b98c 	.word	0x0801b98c
 800d79c:	0800eb3d 	.word	0x0800eb3d

0800d7a0 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b084      	sub	sp, #16
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d101      	bne.n	800d7b2 <netconn_err+0x12>
    return ERR_OK;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	e00d      	b.n	800d7ce <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 800d7b2:	f00c fd61 	bl	801a278 <sys_arch_protect>
 800d7b6:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	7a1b      	ldrb	r3, [r3, #8]
 800d7bc:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2200      	movs	r2, #0
 800d7c2:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 800d7c4:	68f8      	ldr	r0, [r7, #12]
 800d7c6:	f00c fd65 	bl	801a294 <sys_arch_unprotect>
  return err;
 800d7ca:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	3710      	adds	r7, #16
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd80      	pop	{r7, pc}
	...

0800d7d8 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 800d7d8:	b580      	push	{r7, lr}
 800d7da:	b082      	sub	sp, #8
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	4603      	mov	r3, r0
 800d7e0:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 800d7e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d7e6:	f113 0f0d 	cmn.w	r3, #13
 800d7ea:	d009      	beq.n	800d800 <lwip_netconn_err_to_msg+0x28>
 800d7ec:	f113 0f0d 	cmn.w	r3, #13
 800d7f0:	dc0c      	bgt.n	800d80c <lwip_netconn_err_to_msg+0x34>
 800d7f2:	f113 0f0f 	cmn.w	r3, #15
 800d7f6:	d007      	beq.n	800d808 <lwip_netconn_err_to_msg+0x30>
 800d7f8:	f113 0f0e 	cmn.w	r3, #14
 800d7fc:	d002      	beq.n	800d804 <lwip_netconn_err_to_msg+0x2c>
 800d7fe:	e005      	b.n	800d80c <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 800d800:	4b0a      	ldr	r3, [pc, #40]	; (800d82c <lwip_netconn_err_to_msg+0x54>)
 800d802:	e00e      	b.n	800d822 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 800d804:	4b0a      	ldr	r3, [pc, #40]	; (800d830 <lwip_netconn_err_to_msg+0x58>)
 800d806:	e00c      	b.n	800d822 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 800d808:	4b0a      	ldr	r3, [pc, #40]	; (800d834 <lwip_netconn_err_to_msg+0x5c>)
 800d80a:	e00a      	b.n	800d822 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 800d80c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d810:	2b00      	cmp	r3, #0
 800d812:	d005      	beq.n	800d820 <lwip_netconn_err_to_msg+0x48>
 800d814:	4b08      	ldr	r3, [pc, #32]	; (800d838 <lwip_netconn_err_to_msg+0x60>)
 800d816:	227d      	movs	r2, #125	; 0x7d
 800d818:	4908      	ldr	r1, [pc, #32]	; (800d83c <lwip_netconn_err_to_msg+0x64>)
 800d81a:	4809      	ldr	r0, [pc, #36]	; (800d840 <lwip_netconn_err_to_msg+0x68>)
 800d81c:	f00c ff54 	bl	801a6c8 <iprintf>
      return NULL;
 800d820:	2300      	movs	r3, #0
  }
}
 800d822:	4618      	mov	r0, r3
 800d824:	3708      	adds	r7, #8
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}
 800d82a:	bf00      	nop
 800d82c:	0801ee24 	.word	0x0801ee24
 800d830:	0801ee25 	.word	0x0801ee25
 800d834:	0801ee26 	.word	0x0801ee26
 800d838:	0801bc8c 	.word	0x0801bc8c
 800d83c:	0801bcc0 	.word	0x0801bcc0
 800d840:	0801bcd0 	.word	0x0801bcd0

0800d844 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b082      	sub	sp, #8
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	2b00      	cmp	r3, #0
 800d852:	d105      	bne.n	800d860 <lwip_netconn_is_err_msg+0x1c>
 800d854:	4b12      	ldr	r3, [pc, #72]	; (800d8a0 <lwip_netconn_is_err_msg+0x5c>)
 800d856:	2285      	movs	r2, #133	; 0x85
 800d858:	4912      	ldr	r1, [pc, #72]	; (800d8a4 <lwip_netconn_is_err_msg+0x60>)
 800d85a:	4813      	ldr	r0, [pc, #76]	; (800d8a8 <lwip_netconn_is_err_msg+0x64>)
 800d85c:	f00c ff34 	bl	801a6c8 <iprintf>

  if (msg == &netconn_aborted) {
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	4a12      	ldr	r2, [pc, #72]	; (800d8ac <lwip_netconn_is_err_msg+0x68>)
 800d864:	4293      	cmp	r3, r2
 800d866:	d104      	bne.n	800d872 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	22f3      	movs	r2, #243	; 0xf3
 800d86c:	701a      	strb	r2, [r3, #0]
    return 1;
 800d86e:	2301      	movs	r3, #1
 800d870:	e012      	b.n	800d898 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	4a0e      	ldr	r2, [pc, #56]	; (800d8b0 <lwip_netconn_is_err_msg+0x6c>)
 800d876:	4293      	cmp	r3, r2
 800d878:	d104      	bne.n	800d884 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 800d87a:	683b      	ldr	r3, [r7, #0]
 800d87c:	22f2      	movs	r2, #242	; 0xf2
 800d87e:	701a      	strb	r2, [r3, #0]
    return 1;
 800d880:	2301      	movs	r3, #1
 800d882:	e009      	b.n	800d898 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	4a0b      	ldr	r2, [pc, #44]	; (800d8b4 <lwip_netconn_is_err_msg+0x70>)
 800d888:	4293      	cmp	r3, r2
 800d88a:	d104      	bne.n	800d896 <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	22f1      	movs	r2, #241	; 0xf1
 800d890:	701a      	strb	r2, [r3, #0]
    return 1;
 800d892:	2301      	movs	r3, #1
 800d894:	e000      	b.n	800d898 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 800d896:	2300      	movs	r3, #0
}
 800d898:	4618      	mov	r0, r3
 800d89a:	3708      	adds	r7, #8
 800d89c:	46bd      	mov	sp, r7
 800d89e:	bd80      	pop	{r7, pc}
 800d8a0:	0801bc8c 	.word	0x0801bc8c
 800d8a4:	0801bcf8 	.word	0x0801bcf8
 800d8a8:	0801bcd0 	.word	0x0801bcd0
 800d8ac:	0801ee24 	.word	0x0801ee24
 800d8b0:	0801ee25 	.word	0x0801ee25
 800d8b4:	0801ee26 	.word	0x0801ee26

0800d8b8 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b088      	sub	sp, #32
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	60f8      	str	r0, [r7, #12]
 800d8c0:	60b9      	str	r1, [r7, #8]
 800d8c2:	607a      	str	r2, [r7, #4]
 800d8c4:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d105      	bne.n	800d8d8 <recv_udp+0x20>
 800d8cc:	4b34      	ldr	r3, [pc, #208]	; (800d9a0 <recv_udp+0xe8>)
 800d8ce:	22e5      	movs	r2, #229	; 0xe5
 800d8d0:	4934      	ldr	r1, [pc, #208]	; (800d9a4 <recv_udp+0xec>)
 800d8d2:	4835      	ldr	r0, [pc, #212]	; (800d9a8 <recv_udp+0xf0>)
 800d8d4:	f00c fef8 	bl	801a6c8 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d105      	bne.n	800d8ea <recv_udp+0x32>
 800d8de:	4b30      	ldr	r3, [pc, #192]	; (800d9a0 <recv_udp+0xe8>)
 800d8e0:	22e6      	movs	r2, #230	; 0xe6
 800d8e2:	4932      	ldr	r1, [pc, #200]	; (800d9ac <recv_udp+0xf4>)
 800d8e4:	4830      	ldr	r0, [pc, #192]	; (800d9a8 <recv_udp+0xf0>)
 800d8e6:	f00c feef 	bl	801a6c8 <iprintf>
  conn = (struct netconn *)arg;
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800d8ee:	69fb      	ldr	r3, [r7, #28]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d103      	bne.n	800d8fc <recv_udp+0x44>
    pbuf_free(p);
 800d8f4:	6878      	ldr	r0, [r7, #4]
 800d8f6:	f002 ff75 	bl	80107e4 <pbuf_free>
    return;
 800d8fa:	e04d      	b.n	800d998 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800d8fc:	69fb      	ldr	r3, [r7, #28]
 800d8fe:	685b      	ldr	r3, [r3, #4]
 800d900:	68ba      	ldr	r2, [r7, #8]
 800d902:	429a      	cmp	r2, r3
 800d904:	d005      	beq.n	800d912 <recv_udp+0x5a>
 800d906:	4b26      	ldr	r3, [pc, #152]	; (800d9a0 <recv_udp+0xe8>)
 800d908:	22ee      	movs	r2, #238	; 0xee
 800d90a:	4929      	ldr	r1, [pc, #164]	; (800d9b0 <recv_udp+0xf8>)
 800d90c:	4826      	ldr	r0, [pc, #152]	; (800d9a8 <recv_udp+0xf0>)
 800d90e:	f00c fedb 	bl	801a6c8 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800d912:	69fb      	ldr	r3, [r7, #28]
 800d914:	3310      	adds	r3, #16
 800d916:	4618      	mov	r0, r3
 800d918:	f00c fb93 	bl	801a042 <sys_mbox_valid>
 800d91c:	4603      	mov	r3, r0
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d103      	bne.n	800d92a <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800d922:	6878      	ldr	r0, [r7, #4]
 800d924:	f002 ff5e 	bl	80107e4 <pbuf_free>
    return;
 800d928:	e036      	b.n	800d998 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800d92a:	2006      	movs	r0, #6
 800d92c:	f002 f8c8 	bl	800fac0 <memp_malloc>
 800d930:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800d932:	69bb      	ldr	r3, [r7, #24]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d103      	bne.n	800d940 <recv_udp+0x88>
    pbuf_free(p);
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	f002 ff53 	bl	80107e4 <pbuf_free>
    return;
 800d93e:	e02b      	b.n	800d998 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800d940:	69bb      	ldr	r3, [r7, #24]
 800d942:	687a      	ldr	r2, [r7, #4]
 800d944:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800d946:	69bb      	ldr	r3, [r7, #24]
 800d948:	687a      	ldr	r2, [r7, #4]
 800d94a:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d002      	beq.n	800d958 <recv_udp+0xa0>
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	e000      	b.n	800d95a <recv_udp+0xa2>
 800d958:	2300      	movs	r3, #0
 800d95a:	69ba      	ldr	r2, [r7, #24]
 800d95c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800d95e:	69bb      	ldr	r3, [r7, #24]
 800d960:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d962:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	891b      	ldrh	r3, [r3, #8]
 800d968:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800d96a:	69fb      	ldr	r3, [r7, #28]
 800d96c:	3310      	adds	r3, #16
 800d96e:	69b9      	ldr	r1, [r7, #24]
 800d970:	4618      	mov	r0, r3
 800d972:	f00c faf1 	bl	8019f58 <sys_mbox_trypost>
 800d976:	4603      	mov	r3, r0
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d003      	beq.n	800d984 <recv_udp+0xcc>
    netbuf_delete(buf);
 800d97c:	69b8      	ldr	r0, [r7, #24]
 800d97e:	f001 f97d 	bl	800ec7c <netbuf_delete>
    return;
 800d982:	e009      	b.n	800d998 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800d984:	69fb      	ldr	r3, [r7, #28]
 800d986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d988:	2b00      	cmp	r3, #0
 800d98a:	d005      	beq.n	800d998 <recv_udp+0xe0>
 800d98c:	69fb      	ldr	r3, [r7, #28]
 800d98e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d990:	8afa      	ldrh	r2, [r7, #22]
 800d992:	2100      	movs	r1, #0
 800d994:	69f8      	ldr	r0, [r7, #28]
 800d996:	4798      	blx	r3
  }
}
 800d998:	3720      	adds	r7, #32
 800d99a:	46bd      	mov	sp, r7
 800d99c:	bd80      	pop	{r7, pc}
 800d99e:	bf00      	nop
 800d9a0:	0801bc8c 	.word	0x0801bc8c
 800d9a4:	0801bd04 	.word	0x0801bd04
 800d9a8:	0801bcd0 	.word	0x0801bcd0
 800d9ac:	0801bd28 	.word	0x0801bd28
 800d9b0:	0801bd48 	.word	0x0801bd48

0800d9b4 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d9b4:	b580      	push	{r7, lr}
 800d9b6:	b088      	sub	sp, #32
 800d9b8:	af00      	add	r7, sp, #0
 800d9ba:	60f8      	str	r0, [r7, #12]
 800d9bc:	60b9      	str	r1, [r7, #8]
 800d9be:	607a      	str	r2, [r7, #4]
 800d9c0:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d106      	bne.n	800d9d6 <recv_tcp+0x22>
 800d9c8:	4b36      	ldr	r3, [pc, #216]	; (800daa4 <recv_tcp+0xf0>)
 800d9ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800d9ce:	4936      	ldr	r1, [pc, #216]	; (800daa8 <recv_tcp+0xf4>)
 800d9d0:	4836      	ldr	r0, [pc, #216]	; (800daac <recv_tcp+0xf8>)
 800d9d2:	f00c fe79 	bl	801a6c8 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d106      	bne.n	800d9ea <recv_tcp+0x36>
 800d9dc:	4b31      	ldr	r3, [pc, #196]	; (800daa4 <recv_tcp+0xf0>)
 800d9de:	f240 122d 	movw	r2, #301	; 0x12d
 800d9e2:	4933      	ldr	r1, [pc, #204]	; (800dab0 <recv_tcp+0xfc>)
 800d9e4:	4831      	ldr	r0, [pc, #196]	; (800daac <recv_tcp+0xf8>)
 800d9e6:	f00c fe6f 	bl	801a6c8 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800d9ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d006      	beq.n	800da00 <recv_tcp+0x4c>
 800d9f2:	4b2c      	ldr	r3, [pc, #176]	; (800daa4 <recv_tcp+0xf0>)
 800d9f4:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800d9f8:	492e      	ldr	r1, [pc, #184]	; (800dab4 <recv_tcp+0x100>)
 800d9fa:	482c      	ldr	r0, [pc, #176]	; (800daac <recv_tcp+0xf8>)
 800d9fc:	f00c fe64 	bl	801a6c8 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800da04:	697b      	ldr	r3, [r7, #20]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d102      	bne.n	800da10 <recv_tcp+0x5c>
    return ERR_VAL;
 800da0a:	f06f 0305 	mvn.w	r3, #5
 800da0e:	e045      	b.n	800da9c <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800da10:	697b      	ldr	r3, [r7, #20]
 800da12:	685b      	ldr	r3, [r3, #4]
 800da14:	68ba      	ldr	r2, [r7, #8]
 800da16:	429a      	cmp	r2, r3
 800da18:	d006      	beq.n	800da28 <recv_tcp+0x74>
 800da1a:	4b22      	ldr	r3, [pc, #136]	; (800daa4 <recv_tcp+0xf0>)
 800da1c:	f240 1235 	movw	r2, #309	; 0x135
 800da20:	4925      	ldr	r1, [pc, #148]	; (800dab8 <recv_tcp+0x104>)
 800da22:	4822      	ldr	r0, [pc, #136]	; (800daac <recv_tcp+0xf8>)
 800da24:	f00c fe50 	bl	801a6c8 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800da28:	697b      	ldr	r3, [r7, #20]
 800da2a:	3310      	adds	r3, #16
 800da2c:	4618      	mov	r0, r3
 800da2e:	f00c fb08 	bl	801a042 <sys_mbox_valid>
 800da32:	4603      	mov	r3, r0
 800da34:	2b00      	cmp	r3, #0
 800da36:	d10d      	bne.n	800da54 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d008      	beq.n	800da50 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	891b      	ldrh	r3, [r3, #8]
 800da42:	4619      	mov	r1, r3
 800da44:	68b8      	ldr	r0, [r7, #8]
 800da46:	f003 fdcb 	bl	80115e0 <tcp_recved>
      pbuf_free(p);
 800da4a:	6878      	ldr	r0, [r7, #4]
 800da4c:	f002 feca 	bl	80107e4 <pbuf_free>
    }
    return ERR_OK;
 800da50:	2300      	movs	r3, #0
 800da52:	e023      	b.n	800da9c <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d005      	beq.n	800da66 <recv_tcp+0xb2>
    msg = p;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	891b      	ldrh	r3, [r3, #8]
 800da62:	83fb      	strh	r3, [r7, #30]
 800da64:	e003      	b.n	800da6e <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800da66:	4b15      	ldr	r3, [pc, #84]	; (800dabc <recv_tcp+0x108>)
 800da68:	61bb      	str	r3, [r7, #24]
    len = 0;
 800da6a:	2300      	movs	r3, #0
 800da6c:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	3310      	adds	r3, #16
 800da72:	69b9      	ldr	r1, [r7, #24]
 800da74:	4618      	mov	r0, r3
 800da76:	f00c fa6f 	bl	8019f58 <sys_mbox_trypost>
 800da7a:	4603      	mov	r3, r0
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d002      	beq.n	800da86 <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800da80:	f04f 33ff 	mov.w	r3, #4294967295
 800da84:	e00a      	b.n	800da9c <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800da86:	697b      	ldr	r3, [r7, #20]
 800da88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d005      	beq.n	800da9a <recv_tcp+0xe6>
 800da8e:	697b      	ldr	r3, [r7, #20]
 800da90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da92:	8bfa      	ldrh	r2, [r7, #30]
 800da94:	2100      	movs	r1, #0
 800da96:	6978      	ldr	r0, [r7, #20]
 800da98:	4798      	blx	r3
  }

  return ERR_OK;
 800da9a:	2300      	movs	r3, #0
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	3720      	adds	r7, #32
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}
 800daa4:	0801bc8c 	.word	0x0801bc8c
 800daa8:	0801bd68 	.word	0x0801bd68
 800daac:	0801bcd0 	.word	0x0801bcd0
 800dab0:	0801bd8c 	.word	0x0801bd8c
 800dab4:	0801bdac 	.word	0x0801bdac
 800dab8:	0801bdc4 	.word	0x0801bdc4
 800dabc:	0801ee26 	.word	0x0801ee26

0800dac0 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800dac0:	b580      	push	{r7, lr}
 800dac2:	b084      	sub	sp, #16
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
 800dac8:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d106      	bne.n	800dae2 <poll_tcp+0x22>
 800dad4:	4b29      	ldr	r3, [pc, #164]	; (800db7c <poll_tcp+0xbc>)
 800dad6:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800dada:	4929      	ldr	r1, [pc, #164]	; (800db80 <poll_tcp+0xc0>)
 800dadc:	4829      	ldr	r0, [pc, #164]	; (800db84 <poll_tcp+0xc4>)
 800dade:	f00c fdf3 	bl	801a6c8 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	785b      	ldrb	r3, [r3, #1]
 800dae6:	2b01      	cmp	r3, #1
 800dae8:	d104      	bne.n	800daf4 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800daea:	2101      	movs	r1, #1
 800daec:	68f8      	ldr	r0, [r7, #12]
 800daee:	f000 fe59 	bl	800e7a4 <lwip_netconn_do_writemore>
 800daf2:	e016      	b.n	800db22 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	785b      	ldrb	r3, [r3, #1]
 800daf8:	2b04      	cmp	r3, #4
 800dafa:	d112      	bne.n	800db22 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	6a1b      	ldr	r3, [r3, #32]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d00a      	beq.n	800db1a <poll_tcp+0x5a>
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	6a1b      	ldr	r3, [r3, #32]
 800db08:	7a5b      	ldrb	r3, [r3, #9]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d005      	beq.n	800db1a <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800db0e:	68fb      	ldr	r3, [r7, #12]
 800db10:	6a1b      	ldr	r3, [r3, #32]
 800db12:	7a5a      	ldrb	r2, [r3, #9]
 800db14:	3a01      	subs	r2, #1
 800db16:	b2d2      	uxtb	r2, r2
 800db18:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800db1a:	2101      	movs	r1, #1
 800db1c:	68f8      	ldr	r0, [r7, #12]
 800db1e:	f000 fb3b 	bl	800e198 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	7f1b      	ldrb	r3, [r3, #28]
 800db26:	f003 0310 	and.w	r3, r3, #16
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d021      	beq.n	800db72 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	685b      	ldr	r3, [r3, #4]
 800db32:	2b00      	cmp	r3, #0
 800db34:	d01d      	beq.n	800db72 <poll_tcp+0xb2>
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	685b      	ldr	r3, [r3, #4]
 800db3a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800db3e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800db42:	d316      	bcc.n	800db72 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	685b      	ldr	r3, [r3, #4]
 800db48:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800db4c:	2b04      	cmp	r3, #4
 800db4e:	d810      	bhi.n	800db72 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	7f1b      	ldrb	r3, [r3, #28]
 800db54:	f023 0310 	bic.w	r3, r3, #16
 800db58:	b2da      	uxtb	r2, r3
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db62:	2b00      	cmp	r3, #0
 800db64:	d005      	beq.n	800db72 <poll_tcp+0xb2>
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db6a:	2200      	movs	r2, #0
 800db6c:	2102      	movs	r1, #2
 800db6e:	68f8      	ldr	r0, [r7, #12]
 800db70:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800db72:	2300      	movs	r3, #0
}
 800db74:	4618      	mov	r0, r3
 800db76:	3710      	adds	r7, #16
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}
 800db7c:	0801bc8c 	.word	0x0801bc8c
 800db80:	0801bde4 	.word	0x0801bde4
 800db84:	0801bcd0 	.word	0x0801bcd0

0800db88 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b086      	sub	sp, #24
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	60f8      	str	r0, [r7, #12]
 800db90:	60b9      	str	r1, [r7, #8]
 800db92:	4613      	mov	r3, r2
 800db94:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800db9a:	697b      	ldr	r3, [r7, #20]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d106      	bne.n	800dbae <sent_tcp+0x26>
 800dba0:	4b20      	ldr	r3, [pc, #128]	; (800dc24 <sent_tcp+0x9c>)
 800dba2:	f240 1293 	movw	r2, #403	; 0x193
 800dba6:	4920      	ldr	r1, [pc, #128]	; (800dc28 <sent_tcp+0xa0>)
 800dba8:	4820      	ldr	r0, [pc, #128]	; (800dc2c <sent_tcp+0xa4>)
 800dbaa:	f00c fd8d 	bl	801a6c8 <iprintf>

  if (conn) {
 800dbae:	697b      	ldr	r3, [r7, #20]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d032      	beq.n	800dc1a <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800dbb4:	697b      	ldr	r3, [r7, #20]
 800dbb6:	785b      	ldrb	r3, [r3, #1]
 800dbb8:	2b01      	cmp	r3, #1
 800dbba:	d104      	bne.n	800dbc6 <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800dbbc:	2101      	movs	r1, #1
 800dbbe:	6978      	ldr	r0, [r7, #20]
 800dbc0:	f000 fdf0 	bl	800e7a4 <lwip_netconn_do_writemore>
 800dbc4:	e007      	b.n	800dbd6 <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800dbc6:	697b      	ldr	r3, [r7, #20]
 800dbc8:	785b      	ldrb	r3, [r3, #1]
 800dbca:	2b04      	cmp	r3, #4
 800dbcc:	d103      	bne.n	800dbd6 <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800dbce:	2101      	movs	r1, #1
 800dbd0:	6978      	ldr	r0, [r7, #20]
 800dbd2:	f000 fae1 	bl	800e198 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	685b      	ldr	r3, [r3, #4]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d01d      	beq.n	800dc1a <sent_tcp+0x92>
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	685b      	ldr	r3, [r3, #4]
 800dbe2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800dbe6:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800dbea:	d316      	bcc.n	800dc1a <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	685b      	ldr	r3, [r3, #4]
 800dbf0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800dbf4:	2b04      	cmp	r3, #4
 800dbf6:	d810      	bhi.n	800dc1a <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800dbf8:	697b      	ldr	r3, [r7, #20]
 800dbfa:	7f1b      	ldrb	r3, [r3, #28]
 800dbfc:	f023 0310 	bic.w	r3, r3, #16
 800dc00:	b2da      	uxtb	r2, r3
 800dc02:	697b      	ldr	r3, [r7, #20]
 800dc04:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800dc06:	697b      	ldr	r3, [r7, #20]
 800dc08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc0a:	2b00      	cmp	r3, #0
 800dc0c:	d005      	beq.n	800dc1a <sent_tcp+0x92>
 800dc0e:	697b      	ldr	r3, [r7, #20]
 800dc10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc12:	88fa      	ldrh	r2, [r7, #6]
 800dc14:	2102      	movs	r1, #2
 800dc16:	6978      	ldr	r0, [r7, #20]
 800dc18:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800dc1a:	2300      	movs	r3, #0
}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	3718      	adds	r7, #24
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}
 800dc24:	0801bc8c 	.word	0x0801bc8c
 800dc28:	0801bde4 	.word	0x0801bde4
 800dc2c:	0801bcd0 	.word	0x0801bcd0

0800dc30 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b088      	sub	sp, #32
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	6078      	str	r0, [r7, #4]
 800dc38:	460b      	mov	r3, r1
 800dc3a:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800dc40:	69fb      	ldr	r3, [r7, #28]
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	d106      	bne.n	800dc54 <err_tcp+0x24>
 800dc46:	4b5f      	ldr	r3, [pc, #380]	; (800ddc4 <err_tcp+0x194>)
 800dc48:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800dc4c:	495e      	ldr	r1, [pc, #376]	; (800ddc8 <err_tcp+0x198>)
 800dc4e:	485f      	ldr	r0, [pc, #380]	; (800ddcc <err_tcp+0x19c>)
 800dc50:	f00c fd3a 	bl	801a6c8 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800dc54:	f00c fb10 	bl	801a278 <sys_arch_protect>
 800dc58:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800dc5a:	69fb      	ldr	r3, [r7, #28]
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800dc60:	69fb      	ldr	r3, [r7, #28]
 800dc62:	78fa      	ldrb	r2, [r7, #3]
 800dc64:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800dc66:	69fb      	ldr	r3, [r7, #28]
 800dc68:	7f1b      	ldrb	r3, [r3, #28]
 800dc6a:	f043 0301 	orr.w	r3, r3, #1
 800dc6e:	b2da      	uxtb	r2, r3
 800dc70:	69fb      	ldr	r3, [r7, #28]
 800dc72:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800dc74:	69fb      	ldr	r3, [r7, #28]
 800dc76:	785b      	ldrb	r3, [r3, #1]
 800dc78:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800dc7a:	69fb      	ldr	r3, [r7, #28]
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800dc80:	69b8      	ldr	r0, [r7, #24]
 800dc82:	f00c fb07 	bl	801a294 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800dc86:	69fb      	ldr	r3, [r7, #28]
 800dc88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d005      	beq.n	800dc9a <err_tcp+0x6a>
 800dc8e:	69fb      	ldr	r3, [r7, #28]
 800dc90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc92:	2200      	movs	r2, #0
 800dc94:	2104      	movs	r1, #4
 800dc96:	69f8      	ldr	r0, [r7, #28]
 800dc98:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800dc9a:	69fb      	ldr	r3, [r7, #28]
 800dc9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d005      	beq.n	800dcae <err_tcp+0x7e>
 800dca2:	69fb      	ldr	r3, [r7, #28]
 800dca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dca6:	2200      	movs	r2, #0
 800dca8:	2100      	movs	r1, #0
 800dcaa:	69f8      	ldr	r0, [r7, #28]
 800dcac:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800dcae:	69fb      	ldr	r3, [r7, #28]
 800dcb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d005      	beq.n	800dcc2 <err_tcp+0x92>
 800dcb6:	69fb      	ldr	r3, [r7, #28]
 800dcb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcba:	2200      	movs	r2, #0
 800dcbc:	2102      	movs	r1, #2
 800dcbe:	69f8      	ldr	r0, [r7, #28]
 800dcc0:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800dcc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	f7ff fd86 	bl	800d7d8 <lwip_netconn_err_to_msg>
 800dccc:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800dcce:	69fb      	ldr	r3, [r7, #28]
 800dcd0:	3310      	adds	r3, #16
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f00c f9b5 	bl	801a042 <sys_mbox_valid>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d005      	beq.n	800dcea <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800dcde:	69fb      	ldr	r3, [r7, #28]
 800dce0:	3310      	adds	r3, #16
 800dce2:	6939      	ldr	r1, [r7, #16]
 800dce4:	4618      	mov	r0, r3
 800dce6:	f00c f937 	bl	8019f58 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800dcea:	69fb      	ldr	r3, [r7, #28]
 800dcec:	3314      	adds	r3, #20
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f00c f9a7 	bl	801a042 <sys_mbox_valid>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d005      	beq.n	800dd06 <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800dcfa:	69fb      	ldr	r3, [r7, #28]
 800dcfc:	3314      	adds	r3, #20
 800dcfe:	6939      	ldr	r1, [r7, #16]
 800dd00:	4618      	mov	r0, r3
 800dd02:	f00c f929 	bl	8019f58 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800dd06:	7dfb      	ldrb	r3, [r7, #23]
 800dd08:	2b01      	cmp	r3, #1
 800dd0a:	d005      	beq.n	800dd18 <err_tcp+0xe8>
 800dd0c:	7dfb      	ldrb	r3, [r7, #23]
 800dd0e:	2b04      	cmp	r3, #4
 800dd10:	d002      	beq.n	800dd18 <err_tcp+0xe8>
 800dd12:	7dfb      	ldrb	r3, [r7, #23]
 800dd14:	2b03      	cmp	r3, #3
 800dd16:	d143      	bne.n	800dda0 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800dd18:	69fb      	ldr	r3, [r7, #28]
 800dd1a:	7f1b      	ldrb	r3, [r3, #28]
 800dd1c:	f003 0304 	and.w	r3, r3, #4
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	bf14      	ite	ne
 800dd24:	2301      	movne	r3, #1
 800dd26:	2300      	moveq	r3, #0
 800dd28:	b2db      	uxtb	r3, r3
 800dd2a:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800dd2c:	69fb      	ldr	r3, [r7, #28]
 800dd2e:	7f1b      	ldrb	r3, [r3, #28]
 800dd30:	f023 0304 	bic.w	r3, r3, #4
 800dd34:	b2da      	uxtb	r2, r3
 800dd36:	69fb      	ldr	r3, [r7, #28]
 800dd38:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d13b      	bne.n	800ddb8 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800dd40:	69fb      	ldr	r3, [r7, #28]
 800dd42:	6a1b      	ldr	r3, [r3, #32]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	d106      	bne.n	800dd56 <err_tcp+0x126>
 800dd48:	4b1e      	ldr	r3, [pc, #120]	; (800ddc4 <err_tcp+0x194>)
 800dd4a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800dd4e:	4920      	ldr	r1, [pc, #128]	; (800ddd0 <err_tcp+0x1a0>)
 800dd50:	481e      	ldr	r0, [pc, #120]	; (800ddcc <err_tcp+0x19c>)
 800dd52:	f00c fcb9 	bl	801a6c8 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800dd56:	7dfb      	ldrb	r3, [r7, #23]
 800dd58:	2b04      	cmp	r3, #4
 800dd5a:	d104      	bne.n	800dd66 <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800dd5c:	69fb      	ldr	r3, [r7, #28]
 800dd5e:	6a1b      	ldr	r3, [r3, #32]
 800dd60:	2200      	movs	r2, #0
 800dd62:	711a      	strb	r2, [r3, #4]
 800dd64:	e003      	b.n	800dd6e <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800dd66:	69fb      	ldr	r3, [r7, #28]
 800dd68:	6a1b      	ldr	r3, [r3, #32]
 800dd6a:	78fa      	ldrb	r2, [r7, #3]
 800dd6c:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800dd6e:	69fb      	ldr	r3, [r7, #28]
 800dd70:	6a1b      	ldr	r3, [r3, #32]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	330c      	adds	r3, #12
 800dd76:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800dd78:	68b8      	ldr	r0, [r7, #8]
 800dd7a:	f00c f9f3 	bl	801a164 <sys_sem_valid>
 800dd7e:	4603      	mov	r3, r0
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d106      	bne.n	800dd92 <err_tcp+0x162>
 800dd84:	4b0f      	ldr	r3, [pc, #60]	; (800ddc4 <err_tcp+0x194>)
 800dd86:	f240 12ef 	movw	r2, #495	; 0x1ef
 800dd8a:	4912      	ldr	r1, [pc, #72]	; (800ddd4 <err_tcp+0x1a4>)
 800dd8c:	480f      	ldr	r0, [pc, #60]	; (800ddcc <err_tcp+0x19c>)
 800dd8e:	f00c fc9b 	bl	801a6c8 <iprintf>
      conn->current_msg = NULL;
 800dd92:	69fb      	ldr	r3, [r7, #28]
 800dd94:	2200      	movs	r2, #0
 800dd96:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800dd98:	68b8      	ldr	r0, [r7, #8]
 800dd9a:	f00c f9c9 	bl	801a130 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800dd9e:	e00b      	b.n	800ddb8 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800dda0:	69fb      	ldr	r3, [r7, #28]
 800dda2:	6a1b      	ldr	r3, [r3, #32]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d008      	beq.n	800ddba <err_tcp+0x18a>
 800dda8:	4b06      	ldr	r3, [pc, #24]	; (800ddc4 <err_tcp+0x194>)
 800ddaa:	f240 12f7 	movw	r2, #503	; 0x1f7
 800ddae:	490a      	ldr	r1, [pc, #40]	; (800ddd8 <err_tcp+0x1a8>)
 800ddb0:	4806      	ldr	r0, [pc, #24]	; (800ddcc <err_tcp+0x19c>)
 800ddb2:	f00c fc89 	bl	801a6c8 <iprintf>
  }
}
 800ddb6:	e000      	b.n	800ddba <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800ddb8:	bf00      	nop
}
 800ddba:	bf00      	nop
 800ddbc:	3720      	adds	r7, #32
 800ddbe:	46bd      	mov	sp, r7
 800ddc0:	bd80      	pop	{r7, pc}
 800ddc2:	bf00      	nop
 800ddc4:	0801bc8c 	.word	0x0801bc8c
 800ddc8:	0801bde4 	.word	0x0801bde4
 800ddcc:	0801bcd0 	.word	0x0801bcd0
 800ddd0:	0801bdf4 	.word	0x0801bdf4
 800ddd4:	0801be10 	.word	0x0801be10
 800ddd8:	0801be2c 	.word	0x0801be2c

0800dddc <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b084      	sub	sp, #16
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	685b      	ldr	r3, [r3, #4]
 800dde8:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800ddea:	6879      	ldr	r1, [r7, #4]
 800ddec:	68f8      	ldr	r0, [r7, #12]
 800ddee:	f004 fabd 	bl	801236c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800ddf2:	490a      	ldr	r1, [pc, #40]	; (800de1c <setup_tcp+0x40>)
 800ddf4:	68f8      	ldr	r0, [r7, #12]
 800ddf6:	f004 facb 	bl	8012390 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800ddfa:	4909      	ldr	r1, [pc, #36]	; (800de20 <setup_tcp+0x44>)
 800ddfc:	68f8      	ldr	r0, [r7, #12]
 800ddfe:	f004 fae9 	bl	80123d4 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800de02:	2202      	movs	r2, #2
 800de04:	4907      	ldr	r1, [pc, #28]	; (800de24 <setup_tcp+0x48>)
 800de06:	68f8      	ldr	r0, [r7, #12]
 800de08:	f004 fb40 	bl	801248c <tcp_poll>
  tcp_err(pcb, err_tcp);
 800de0c:	4906      	ldr	r1, [pc, #24]	; (800de28 <setup_tcp+0x4c>)
 800de0e:	68f8      	ldr	r0, [r7, #12]
 800de10:	f004 fb02 	bl	8012418 <tcp_err>
}
 800de14:	bf00      	nop
 800de16:	3710      	adds	r7, #16
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}
 800de1c:	0800d9b5 	.word	0x0800d9b5
 800de20:	0800db89 	.word	0x0800db89
 800de24:	0800dac1 	.word	0x0800dac1
 800de28:	0800dc31 	.word	0x0800dc31

0800de2c <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800de2c:	b590      	push	{r4, r7, lr}
 800de2e:	b085      	sub	sp, #20
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800de34:	2300      	movs	r3, #0
 800de36:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	685b      	ldr	r3, [r3, #4]
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d006      	beq.n	800de50 <pcb_new+0x24>
 800de42:	4b2b      	ldr	r3, [pc, #172]	; (800def0 <pcb_new+0xc4>)
 800de44:	f240 2265 	movw	r2, #613	; 0x265
 800de48:	492a      	ldr	r1, [pc, #168]	; (800def4 <pcb_new+0xc8>)
 800de4a:	482b      	ldr	r0, [pc, #172]	; (800def8 <pcb_new+0xcc>)
 800de4c:	f00c fc3c 	bl	801a6c8 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	781b      	ldrb	r3, [r3, #0]
 800de56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800de5a:	2b10      	cmp	r3, #16
 800de5c:	d022      	beq.n	800dea4 <pcb_new+0x78>
 800de5e:	2b20      	cmp	r3, #32
 800de60:	d133      	bne.n	800deca <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681c      	ldr	r4, [r3, #0]
 800de66:	7bfb      	ldrb	r3, [r7, #15]
 800de68:	4618      	mov	r0, r3
 800de6a:	f009 fd44 	bl	80178f6 <udp_new_ip_type>
 800de6e:	4603      	mov	r3, r0
 800de70:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	685b      	ldr	r3, [r3, #4]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d02a      	beq.n	800ded2 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	781b      	ldrb	r3, [r3, #0]
 800de82:	2b22      	cmp	r3, #34	; 0x22
 800de84:	d104      	bne.n	800de90 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	685b      	ldr	r3, [r3, #4]
 800de8c:	2201      	movs	r2, #1
 800de8e:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	6858      	ldr	r0, [r3, #4]
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	461a      	mov	r2, r3
 800de9c:	4917      	ldr	r1, [pc, #92]	; (800defc <pcb_new+0xd0>)
 800de9e:	f009 fcb1 	bl	8017804 <udp_recv>
      }
      break;
 800dea2:	e016      	b.n	800ded2 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681c      	ldr	r4, [r3, #0]
 800dea8:	7bfb      	ldrb	r3, [r7, #15]
 800deaa:	4618      	mov	r0, r3
 800deac:	f004 fa50 	bl	8012350 <tcp_new_ip_type>
 800deb0:	4603      	mov	r3, r0
 800deb2:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	685b      	ldr	r3, [r3, #4]
 800deba:	2b00      	cmp	r3, #0
 800debc:	d00b      	beq.n	800ded6 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	4618      	mov	r0, r3
 800dec4:	f7ff ff8a 	bl	800dddc <setup_tcp>
      }
      break;
 800dec8:	e005      	b.n	800ded6 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	22fa      	movs	r2, #250	; 0xfa
 800dece:	711a      	strb	r2, [r3, #4]
      return;
 800ded0:	e00a      	b.n	800dee8 <pcb_new+0xbc>
      break;
 800ded2:	bf00      	nop
 800ded4:	e000      	b.n	800ded8 <pcb_new+0xac>
      break;
 800ded6:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	685b      	ldr	r3, [r3, #4]
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d102      	bne.n	800dee8 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	22ff      	movs	r2, #255	; 0xff
 800dee6:	711a      	strb	r2, [r3, #4]
  }
}
 800dee8:	3714      	adds	r7, #20
 800deea:	46bd      	mov	sp, r7
 800deec:	bd90      	pop	{r4, r7, pc}
 800deee:	bf00      	nop
 800def0:	0801bc8c 	.word	0x0801bc8c
 800def4:	0801be70 	.word	0x0801be70
 800def8:	0801bcd0 	.word	0x0801bcd0
 800defc:	0800d8b9 	.word	0x0800d8b9

0800df00 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b084      	sub	sp, #16
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	2200      	movs	r2, #0
 800df10:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	685b      	ldr	r3, [r3, #4]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	d102      	bne.n	800df22 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800df1c:	68f8      	ldr	r0, [r7, #12]
 800df1e:	f7ff ff85 	bl	800de2c <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800df22:	bf00      	nop
 800df24:	3710      	adds	r7, #16
 800df26:	46bd      	mov	sp, r7
 800df28:	bd80      	pop	{r7, pc}
	...

0800df2c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b086      	sub	sp, #24
 800df30:	af00      	add	r7, sp, #0
 800df32:	4603      	mov	r3, r0
 800df34:	6039      	str	r1, [r7, #0]
 800df36:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800df38:	2300      	movs	r3, #0
 800df3a:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800df3c:	2007      	movs	r0, #7
 800df3e:	f001 fdbf 	bl	800fac0 <memp_malloc>
 800df42:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800df44:	68fb      	ldr	r3, [r7, #12]
 800df46:	2b00      	cmp	r3, #0
 800df48:	d101      	bne.n	800df4e <netconn_alloc+0x22>
    return NULL;
 800df4a:	2300      	movs	r3, #0
 800df4c:	e052      	b.n	800dff4 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	2200      	movs	r2, #0
 800df52:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	79fa      	ldrb	r2, [r7, #7]
 800df58:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	2200      	movs	r2, #0
 800df5e:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800df60:	79fb      	ldrb	r3, [r7, #7]
 800df62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800df66:	2b10      	cmp	r3, #16
 800df68:	d004      	beq.n	800df74 <netconn_alloc+0x48>
 800df6a:	2b20      	cmp	r3, #32
 800df6c:	d105      	bne.n	800df7a <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800df6e:	2306      	movs	r3, #6
 800df70:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800df72:	e00a      	b.n	800df8a <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800df74:	2306      	movs	r3, #6
 800df76:	617b      	str	r3, [r7, #20]
      break;
 800df78:	e007      	b.n	800df8a <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800df7a:	4b20      	ldr	r3, [pc, #128]	; (800dffc <netconn_alloc+0xd0>)
 800df7c:	f240 22e5 	movw	r2, #741	; 0x2e5
 800df80:	491f      	ldr	r1, [pc, #124]	; (800e000 <netconn_alloc+0xd4>)
 800df82:	4820      	ldr	r0, [pc, #128]	; (800e004 <netconn_alloc+0xd8>)
 800df84:	f00c fba0 	bl	801a6c8 <iprintf>
      goto free_and_return;
 800df88:	e02f      	b.n	800dfea <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800df8a:	68fb      	ldr	r3, [r7, #12]
 800df8c:	3310      	adds	r3, #16
 800df8e:	6979      	ldr	r1, [r7, #20]
 800df90:	4618      	mov	r0, r3
 800df92:	f00b ffad 	bl	8019ef0 <sys_mbox_new>
 800df96:	4603      	mov	r3, r0
 800df98:	2b00      	cmp	r3, #0
 800df9a:	d125      	bne.n	800dfe8 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	330c      	adds	r3, #12
 800dfa0:	2100      	movs	r1, #0
 800dfa2:	4618      	mov	r0, r3
 800dfa4:	f00c f86b 	bl	801a07e <sys_sem_new>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d005      	beq.n	800dfba <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	3310      	adds	r3, #16
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	f00b ffbe 	bl	8019f34 <sys_mbox_free>
    goto free_and_return;
 800dfb8:	e017      	b.n	800dfea <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	3314      	adds	r3, #20
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f00c f850 	bl	801a064 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	f04f 32ff 	mov.w	r2, #4294967295
 800dfd0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	683a      	ldr	r2, [r7, #0]
 800dfd6:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800dfd8:	68fb      	ldr	r3, [r7, #12]
 800dfda:	2200      	movs	r2, #0
 800dfdc:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	7cfa      	ldrb	r2, [r7, #19]
 800dfe2:	771a      	strb	r2, [r3, #28]
  return conn;
 800dfe4:	68fb      	ldr	r3, [r7, #12]
 800dfe6:	e005      	b.n	800dff4 <netconn_alloc+0xc8>
    goto free_and_return;
 800dfe8:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800dfea:	68f9      	ldr	r1, [r7, #12]
 800dfec:	2007      	movs	r0, #7
 800dfee:	f001 fdb9 	bl	800fb64 <memp_free>
  return NULL;
 800dff2:	2300      	movs	r3, #0
}
 800dff4:	4618      	mov	r0, r3
 800dff6:	3718      	adds	r7, #24
 800dff8:	46bd      	mov	sp, r7
 800dffa:	bd80      	pop	{r7, pc}
 800dffc:	0801bc8c 	.word	0x0801bc8c
 800e000:	0801be90 	.word	0x0801be90
 800e004:	0801bcd0 	.word	0x0801bcd0

0800e008 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800e008:	b580      	push	{r7, lr}
 800e00a:	b082      	sub	sp, #8
 800e00c:	af00      	add	r7, sp, #0
 800e00e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	685b      	ldr	r3, [r3, #4]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d006      	beq.n	800e026 <netconn_free+0x1e>
 800e018:	4b1b      	ldr	r3, [pc, #108]	; (800e088 <netconn_free+0x80>)
 800e01a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e01e:	491b      	ldr	r1, [pc, #108]	; (800e08c <netconn_free+0x84>)
 800e020:	481b      	ldr	r0, [pc, #108]	; (800e090 <netconn_free+0x88>)
 800e022:	f00c fb51 	bl	801a6c8 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	3310      	adds	r3, #16
 800e02a:	4618      	mov	r0, r3
 800e02c:	f00c f809 	bl	801a042 <sys_mbox_valid>
 800e030:	4603      	mov	r3, r0
 800e032:	2b00      	cmp	r3, #0
 800e034:	d006      	beq.n	800e044 <netconn_free+0x3c>
 800e036:	4b14      	ldr	r3, [pc, #80]	; (800e088 <netconn_free+0x80>)
 800e038:	f240 3223 	movw	r2, #803	; 0x323
 800e03c:	4915      	ldr	r1, [pc, #84]	; (800e094 <netconn_free+0x8c>)
 800e03e:	4814      	ldr	r0, [pc, #80]	; (800e090 <netconn_free+0x88>)
 800e040:	f00c fb42 	bl	801a6c8 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	3314      	adds	r3, #20
 800e048:	4618      	mov	r0, r3
 800e04a:	f00b fffa 	bl	801a042 <sys_mbox_valid>
 800e04e:	4603      	mov	r3, r0
 800e050:	2b00      	cmp	r3, #0
 800e052:	d006      	beq.n	800e062 <netconn_free+0x5a>
 800e054:	4b0c      	ldr	r3, [pc, #48]	; (800e088 <netconn_free+0x80>)
 800e056:	f240 3226 	movw	r2, #806	; 0x326
 800e05a:	490f      	ldr	r1, [pc, #60]	; (800e098 <netconn_free+0x90>)
 800e05c:	480c      	ldr	r0, [pc, #48]	; (800e090 <netconn_free+0x88>)
 800e05e:	f00c fb33 	bl	801a6c8 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	330c      	adds	r3, #12
 800e066:	4618      	mov	r0, r3
 800e068:	f00c f86f 	bl	801a14a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	330c      	adds	r3, #12
 800e070:	4618      	mov	r0, r3
 800e072:	f00c f888 	bl	801a186 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800e076:	6879      	ldr	r1, [r7, #4]
 800e078:	2007      	movs	r0, #7
 800e07a:	f001 fd73 	bl	800fb64 <memp_free>
}
 800e07e:	bf00      	nop
 800e080:	3708      	adds	r7, #8
 800e082:	46bd      	mov	sp, r7
 800e084:	bd80      	pop	{r7, pc}
 800e086:	bf00      	nop
 800e088:	0801bc8c 	.word	0x0801bc8c
 800e08c:	0801beb8 	.word	0x0801beb8
 800e090:	0801bcd0 	.word	0x0801bcd0
 800e094:	0801bee8 	.word	0x0801bee8
 800e098:	0801bf24 	.word	0x0801bf24

0800e09c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b086      	sub	sp, #24
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	3310      	adds	r3, #16
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	f00b ffca 	bl	801a042 <sys_mbox_valid>
 800e0ae:	4603      	mov	r3, r0
 800e0b0:	2b00      	cmp	r3, #0
 800e0b2:	d02f      	beq.n	800e114 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800e0b4:	e018      	b.n	800e0e8 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	781b      	ldrb	r3, [r3, #0]
 800e0ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e0be:	2b10      	cmp	r3, #16
 800e0c0:	d10e      	bne.n	800e0e0 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800e0c2:	693b      	ldr	r3, [r7, #16]
 800e0c4:	f107 020f 	add.w	r2, r7, #15
 800e0c8:	4611      	mov	r1, r2
 800e0ca:	4618      	mov	r0, r3
 800e0cc:	f7ff fbba 	bl	800d844 <lwip_netconn_is_err_msg>
 800e0d0:	4603      	mov	r3, r0
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d108      	bne.n	800e0e8 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800e0d6:	693b      	ldr	r3, [r7, #16]
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f002 fb83 	bl	80107e4 <pbuf_free>
 800e0de:	e003      	b.n	800e0e8 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800e0e0:	693b      	ldr	r3, [r7, #16]
 800e0e2:	4618      	mov	r0, r3
 800e0e4:	f000 fdca 	bl	800ec7c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	3310      	adds	r3, #16
 800e0ec:	f107 0210 	add.w	r2, r7, #16
 800e0f0:	4611      	mov	r1, r2
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f00b ff89 	bl	801a00a <sys_arch_mbox_tryfetch>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e0fe:	d1da      	bne.n	800e0b6 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	3310      	adds	r3, #16
 800e104:	4618      	mov	r0, r3
 800e106:	f00b ff15 	bl	8019f34 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	3310      	adds	r3, #16
 800e10e:	4618      	mov	r0, r3
 800e110:	f00b ffa8 	bl	801a064 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	3314      	adds	r3, #20
 800e118:	4618      	mov	r0, r3
 800e11a:	f00b ff92 	bl	801a042 <sys_mbox_valid>
 800e11e:	4603      	mov	r3, r0
 800e120:	2b00      	cmp	r3, #0
 800e122:	d034      	beq.n	800e18e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800e124:	e01d      	b.n	800e162 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	f107 020e 	add.w	r2, r7, #14
 800e12c:	4611      	mov	r1, r2
 800e12e:	4618      	mov	r0, r3
 800e130:	f7ff fb88 	bl	800d844 <lwip_netconn_is_err_msg>
 800e134:	4603      	mov	r3, r0
 800e136:	2b00      	cmp	r3, #0
 800e138:	d113      	bne.n	800e162 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800e13a:	693b      	ldr	r3, [r7, #16]
 800e13c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800e13e:	6978      	ldr	r0, [r7, #20]
 800e140:	f7ff ffac 	bl	800e09c <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800e144:	697b      	ldr	r3, [r7, #20]
 800e146:	685b      	ldr	r3, [r3, #4]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d007      	beq.n	800e15c <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	685b      	ldr	r3, [r3, #4]
 800e150:	4618      	mov	r0, r3
 800e152:	f003 f947 	bl	80113e4 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800e156:	697b      	ldr	r3, [r7, #20]
 800e158:	2200      	movs	r2, #0
 800e15a:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800e15c:	6978      	ldr	r0, [r7, #20]
 800e15e:	f7ff ff53 	bl	800e008 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	3314      	adds	r3, #20
 800e166:	f107 0210 	add.w	r2, r7, #16
 800e16a:	4611      	mov	r1, r2
 800e16c:	4618      	mov	r0, r3
 800e16e:	f00b ff4c 	bl	801a00a <sys_arch_mbox_tryfetch>
 800e172:	4603      	mov	r3, r0
 800e174:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e178:	d1d5      	bne.n	800e126 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	3314      	adds	r3, #20
 800e17e:	4618      	mov	r0, r3
 800e180:	f00b fed8 	bl	8019f34 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	3314      	adds	r3, #20
 800e188:	4618      	mov	r0, r3
 800e18a:	f00b ff6b 	bl	801a064 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800e18e:	bf00      	nop
 800e190:	3718      	adds	r7, #24
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}
	...

0800e198 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b086      	sub	sp, #24
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
 800e1a0:	460b      	mov	r3, r1
 800e1a2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d106      	bne.n	800e1bc <lwip_netconn_do_close_internal+0x24>
 800e1ae:	4ba1      	ldr	r3, [pc, #644]	; (800e434 <lwip_netconn_do_close_internal+0x29c>)
 800e1b0:	f240 32a2 	movw	r2, #930	; 0x3a2
 800e1b4:	49a0      	ldr	r1, [pc, #640]	; (800e438 <lwip_netconn_do_close_internal+0x2a0>)
 800e1b6:	48a1      	ldr	r0, [pc, #644]	; (800e43c <lwip_netconn_do_close_internal+0x2a4>)
 800e1b8:	f00c fa86 	bl	801a6c8 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	781b      	ldrb	r3, [r3, #0]
 800e1c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e1c4:	2b10      	cmp	r3, #16
 800e1c6:	d006      	beq.n	800e1d6 <lwip_netconn_do_close_internal+0x3e>
 800e1c8:	4b9a      	ldr	r3, [pc, #616]	; (800e434 <lwip_netconn_do_close_internal+0x29c>)
 800e1ca:	f240 32a3 	movw	r2, #931	; 0x3a3
 800e1ce:	499c      	ldr	r1, [pc, #624]	; (800e440 <lwip_netconn_do_close_internal+0x2a8>)
 800e1d0:	489a      	ldr	r0, [pc, #616]	; (800e43c <lwip_netconn_do_close_internal+0x2a4>)
 800e1d2:	f00c fa79 	bl	801a6c8 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	785b      	ldrb	r3, [r3, #1]
 800e1da:	2b04      	cmp	r3, #4
 800e1dc:	d006      	beq.n	800e1ec <lwip_netconn_do_close_internal+0x54>
 800e1de:	4b95      	ldr	r3, [pc, #596]	; (800e434 <lwip_netconn_do_close_internal+0x29c>)
 800e1e0:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800e1e4:	4997      	ldr	r1, [pc, #604]	; (800e444 <lwip_netconn_do_close_internal+0x2ac>)
 800e1e6:	4895      	ldr	r0, [pc, #596]	; (800e43c <lwip_netconn_do_close_internal+0x2a4>)
 800e1e8:	f00c fa6e 	bl	801a6c8 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	685b      	ldr	r3, [r3, #4]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d106      	bne.n	800e202 <lwip_netconn_do_close_internal+0x6a>
 800e1f4:	4b8f      	ldr	r3, [pc, #572]	; (800e434 <lwip_netconn_do_close_internal+0x29c>)
 800e1f6:	f240 32a5 	movw	r2, #933	; 0x3a5
 800e1fa:	4993      	ldr	r1, [pc, #588]	; (800e448 <lwip_netconn_do_close_internal+0x2b0>)
 800e1fc:	488f      	ldr	r0, [pc, #572]	; (800e43c <lwip_netconn_do_close_internal+0x2a4>)
 800e1fe:	f00c fa63 	bl	801a6c8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	6a1b      	ldr	r3, [r3, #32]
 800e206:	2b00      	cmp	r3, #0
 800e208:	d106      	bne.n	800e218 <lwip_netconn_do_close_internal+0x80>
 800e20a:	4b8a      	ldr	r3, [pc, #552]	; (800e434 <lwip_netconn_do_close_internal+0x29c>)
 800e20c:	f240 32a6 	movw	r2, #934	; 0x3a6
 800e210:	498e      	ldr	r1, [pc, #568]	; (800e44c <lwip_netconn_do_close_internal+0x2b4>)
 800e212:	488a      	ldr	r0, [pc, #552]	; (800e43c <lwip_netconn_do_close_internal+0x2a4>)
 800e214:	f00c fa58 	bl	801a6c8 <iprintf>

  tpcb = conn->pcb.tcp;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	685b      	ldr	r3, [r3, #4]
 800e21c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	6a1b      	ldr	r3, [r3, #32]
 800e222:	7a1b      	ldrb	r3, [r3, #8]
 800e224:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800e226:	7bfb      	ldrb	r3, [r7, #15]
 800e228:	f003 0301 	and.w	r3, r3, #1
 800e22c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800e22e:	7bfb      	ldrb	r3, [r7, #15]
 800e230:	f003 0302 	and.w	r3, r3, #2
 800e234:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800e236:	7bfb      	ldrb	r3, [r7, #15]
 800e238:	2b03      	cmp	r3, #3
 800e23a:	d102      	bne.n	800e242 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800e23c:	2301      	movs	r3, #1
 800e23e:	75bb      	strb	r3, [r7, #22]
 800e240:	e01f      	b.n	800e282 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800e242:	7bbb      	ldrb	r3, [r7, #14]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d00e      	beq.n	800e266 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800e248:	693b      	ldr	r3, [r7, #16]
 800e24a:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800e24c:	2b05      	cmp	r3, #5
 800e24e:	d007      	beq.n	800e260 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800e254:	2b06      	cmp	r3, #6
 800e256:	d003      	beq.n	800e260 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800e258:	693b      	ldr	r3, [r7, #16]
 800e25a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800e25c:	2b08      	cmp	r3, #8
 800e25e:	d102      	bne.n	800e266 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800e260:	2301      	movs	r3, #1
 800e262:	75bb      	strb	r3, [r7, #22]
 800e264:	e00d      	b.n	800e282 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800e266:	7b7b      	ldrb	r3, [r7, #13]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d008      	beq.n	800e27e <lwip_netconn_do_close_internal+0xe6>
 800e26c:	693b      	ldr	r3, [r7, #16]
 800e26e:	8b5b      	ldrh	r3, [r3, #26]
 800e270:	f003 0310 	and.w	r3, r3, #16
 800e274:	2b00      	cmp	r3, #0
 800e276:	d002      	beq.n	800e27e <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800e278:	2301      	movs	r3, #1
 800e27a:	75bb      	strb	r3, [r7, #22]
 800e27c:	e001      	b.n	800e282 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800e27e:	2300      	movs	r3, #0
 800e280:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800e282:	7dbb      	ldrb	r3, [r7, #22]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d003      	beq.n	800e290 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800e288:	2100      	movs	r1, #0
 800e28a:	6938      	ldr	r0, [r7, #16]
 800e28c:	f004 f86e 	bl	801236c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800e290:	693b      	ldr	r3, [r7, #16]
 800e292:	7d1b      	ldrb	r3, [r3, #20]
 800e294:	2b01      	cmp	r3, #1
 800e296:	d104      	bne.n	800e2a2 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800e298:	2100      	movs	r1, #0
 800e29a:	6938      	ldr	r0, [r7, #16]
 800e29c:	f004 f8de 	bl	801245c <tcp_accept>
 800e2a0:	e01d      	b.n	800e2de <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800e2a2:	7bbb      	ldrb	r3, [r7, #14]
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d007      	beq.n	800e2b8 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800e2a8:	2100      	movs	r1, #0
 800e2aa:	6938      	ldr	r0, [r7, #16]
 800e2ac:	f004 f870 	bl	8012390 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800e2b0:	2100      	movs	r1, #0
 800e2b2:	6938      	ldr	r0, [r7, #16]
 800e2b4:	f004 f8d2 	bl	801245c <tcp_accept>
    }
    if (shut_tx) {
 800e2b8:	7b7b      	ldrb	r3, [r7, #13]
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d003      	beq.n	800e2c6 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800e2be:	2100      	movs	r1, #0
 800e2c0:	6938      	ldr	r0, [r7, #16]
 800e2c2:	f004 f887 	bl	80123d4 <tcp_sent>
    }
    if (shut_close) {
 800e2c6:	7dbb      	ldrb	r3, [r7, #22]
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d008      	beq.n	800e2de <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	2100      	movs	r1, #0
 800e2d0:	6938      	ldr	r0, [r7, #16]
 800e2d2:	f004 f8db 	bl	801248c <tcp_poll>
      tcp_err(tpcb, NULL);
 800e2d6:	2100      	movs	r1, #0
 800e2d8:	6938      	ldr	r0, [r7, #16]
 800e2da:	f004 f89d 	bl	8012418 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800e2de:	7dbb      	ldrb	r3, [r7, #22]
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	d005      	beq.n	800e2f0 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800e2e4:	6938      	ldr	r0, [r7, #16]
 800e2e6:	f002 ff37 	bl	8011158 <tcp_close>
 800e2ea:	4603      	mov	r3, r0
 800e2ec:	75fb      	strb	r3, [r7, #23]
 800e2ee:	e007      	b.n	800e300 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800e2f0:	7bbb      	ldrb	r3, [r7, #14]
 800e2f2:	7b7a      	ldrb	r2, [r7, #13]
 800e2f4:	4619      	mov	r1, r3
 800e2f6:	6938      	ldr	r0, [r7, #16]
 800e2f8:	f002 ff5a 	bl	80111b0 <tcp_shutdown>
 800e2fc:	4603      	mov	r3, r0
 800e2fe:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800e300:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e304:	2b00      	cmp	r3, #0
 800e306:	d102      	bne.n	800e30e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800e308:	2301      	movs	r3, #1
 800e30a:	757b      	strb	r3, [r7, #21]
 800e30c:	e016      	b.n	800e33c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800e30e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e312:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e316:	d10f      	bne.n	800e338 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	6a1b      	ldr	r3, [r3, #32]
 800e31c:	7a5b      	ldrb	r3, [r3, #9]
 800e31e:	2b00      	cmp	r3, #0
 800e320:	d10c      	bne.n	800e33c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800e322:	2301      	movs	r3, #1
 800e324:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800e326:	7dbb      	ldrb	r3, [r7, #22]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d007      	beq.n	800e33c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800e32c:	6938      	ldr	r0, [r7, #16]
 800e32e:	f003 f859 	bl	80113e4 <tcp_abort>
          err = ERR_OK;
 800e332:	2300      	movs	r3, #0
 800e334:	75fb      	strb	r3, [r7, #23]
 800e336:	e001      	b.n	800e33c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800e338:	2301      	movs	r3, #1
 800e33a:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800e33c:	7d7b      	ldrb	r3, [r7, #21]
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d044      	beq.n	800e3cc <lwip_netconn_do_close_internal+0x234>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	6a1b      	ldr	r3, [r3, #32]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	330c      	adds	r3, #12
 800e34a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800e34c:	687b      	ldr	r3, [r7, #4]
 800e34e:	6a1b      	ldr	r3, [r3, #32]
 800e350:	7dfa      	ldrb	r2, [r7, #23]
 800e352:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	2200      	movs	r2, #0
 800e358:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	2200      	movs	r2, #0
 800e35e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800e360:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d129      	bne.n	800e3bc <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800e368:	7dbb      	ldrb	r3, [r7, #22]
 800e36a:	2b00      	cmp	r3, #0
 800e36c:	d00c      	beq.n	800e388 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	2200      	movs	r2, #0
 800e372:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d005      	beq.n	800e388 <lwip_netconn_do_close_internal+0x1f0>
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e380:	2200      	movs	r2, #0
 800e382:	2104      	movs	r1, #4
 800e384:	6878      	ldr	r0, [r7, #4]
 800e386:	4798      	blx	r3
      }
      if (shut_rx) {
 800e388:	7bbb      	ldrb	r3, [r7, #14]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d009      	beq.n	800e3a2 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e392:	2b00      	cmp	r3, #0
 800e394:	d005      	beq.n	800e3a2 <lwip_netconn_do_close_internal+0x20a>
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e39a:	2200      	movs	r2, #0
 800e39c:	2100      	movs	r1, #0
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	4798      	blx	r3
      }
      if (shut_tx) {
 800e3a2:	7b7b      	ldrb	r3, [r7, #13]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d009      	beq.n	800e3bc <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d005      	beq.n	800e3bc <lwip_netconn_do_close_internal+0x224>
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3b4:	2200      	movs	r2, #0
 800e3b6:	2102      	movs	r1, #2
 800e3b8:	6878      	ldr	r0, [r7, #4]
 800e3ba:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800e3bc:	78fb      	ldrb	r3, [r7, #3]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d002      	beq.n	800e3c8 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800e3c2:	68b8      	ldr	r0, [r7, #8]
 800e3c4:	f00b feb4 	bl	801a130 <sys_sem_signal>
    }
    return ERR_OK;
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	e02e      	b.n	800e42a <lwip_netconn_do_close_internal+0x292>
  }
  if (!close_finished) {
 800e3cc:	7d7b      	ldrb	r3, [r7, #21]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d11e      	bne.n	800e410 <lwip_netconn_do_close_internal+0x278>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800e3d2:	693b      	ldr	r3, [r7, #16]
 800e3d4:	7d1b      	ldrb	r3, [r3, #20]
 800e3d6:	2b01      	cmp	r3, #1
 800e3d8:	d106      	bne.n	800e3e8 <lwip_netconn_do_close_internal+0x250>
 800e3da:	4b16      	ldr	r3, [pc, #88]	; (800e434 <lwip_netconn_do_close_internal+0x29c>)
 800e3dc:	f240 4241 	movw	r2, #1089	; 0x441
 800e3e0:	491b      	ldr	r1, [pc, #108]	; (800e450 <lwip_netconn_do_close_internal+0x2b8>)
 800e3e2:	4816      	ldr	r0, [pc, #88]	; (800e43c <lwip_netconn_do_close_internal+0x2a4>)
 800e3e4:	f00c f970 	bl	801a6c8 <iprintf>
    if (shut_tx) {
 800e3e8:	7b7b      	ldrb	r3, [r7, #13]
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d003      	beq.n	800e3f6 <lwip_netconn_do_close_internal+0x25e>
      tcp_sent(tpcb, sent_tcp);
 800e3ee:	4919      	ldr	r1, [pc, #100]	; (800e454 <lwip_netconn_do_close_internal+0x2bc>)
 800e3f0:	6938      	ldr	r0, [r7, #16]
 800e3f2:	f003 ffef 	bl	80123d4 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800e3f6:	2201      	movs	r2, #1
 800e3f8:	4917      	ldr	r1, [pc, #92]	; (800e458 <lwip_netconn_do_close_internal+0x2c0>)
 800e3fa:	6938      	ldr	r0, [r7, #16]
 800e3fc:	f004 f846 	bl	801248c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800e400:	4916      	ldr	r1, [pc, #88]	; (800e45c <lwip_netconn_do_close_internal+0x2c4>)
 800e402:	6938      	ldr	r0, [r7, #16]
 800e404:	f004 f808 	bl	8012418 <tcp_err>
    tcp_arg(tpcb, conn);
 800e408:	6879      	ldr	r1, [r7, #4]
 800e40a:	6938      	ldr	r0, [r7, #16]
 800e40c:	f003 ffae 	bl	801236c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800e410:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e414:	2b00      	cmp	r3, #0
 800e416:	d106      	bne.n	800e426 <lwip_netconn_do_close_internal+0x28e>
 800e418:	4b06      	ldr	r3, [pc, #24]	; (800e434 <lwip_netconn_do_close_internal+0x29c>)
 800e41a:	f240 424d 	movw	r2, #1101	; 0x44d
 800e41e:	4910      	ldr	r1, [pc, #64]	; (800e460 <lwip_netconn_do_close_internal+0x2c8>)
 800e420:	4806      	ldr	r0, [pc, #24]	; (800e43c <lwip_netconn_do_close_internal+0x2a4>)
 800e422:	f00c f951 	bl	801a6c8 <iprintf>
  return err;
 800e426:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	3718      	adds	r7, #24
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}
 800e432:	bf00      	nop
 800e434:	0801bc8c 	.word	0x0801bc8c
 800e438:	0801bf60 	.word	0x0801bf60
 800e43c:	0801bcd0 	.word	0x0801bcd0
 800e440:	0801bf70 	.word	0x0801bf70
 800e444:	0801bf90 	.word	0x0801bf90
 800e448:	0801bfb4 	.word	0x0801bfb4
 800e44c:	0801bdf4 	.word	0x0801bdf4
 800e450:	0801bfc8 	.word	0x0801bfc8
 800e454:	0800db89 	.word	0x0800db89
 800e458:	0800dac1 	.word	0x0800dac1
 800e45c:	0800dc31 	.word	0x0800dc31
 800e460:	0801bfec 	.word	0x0801bfec

0800e464 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b084      	sub	sp, #16
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800e470:	68fb      	ldr	r3, [r7, #12]
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	785b      	ldrb	r3, [r3, #1]
 800e476:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800e478:	7afb      	ldrb	r3, [r7, #11]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d00d      	beq.n	800e49a <lwip_netconn_do_delconn+0x36>
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	781b      	ldrb	r3, [r3, #0]
 800e484:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e488:	2b10      	cmp	r3, #16
 800e48a:	d006      	beq.n	800e49a <lwip_netconn_do_delconn+0x36>
 800e48c:	4b60      	ldr	r3, [pc, #384]	; (800e610 <lwip_netconn_do_delconn+0x1ac>)
 800e48e:	f240 425e 	movw	r2, #1118	; 0x45e
 800e492:	4960      	ldr	r1, [pc, #384]	; (800e614 <lwip_netconn_do_delconn+0x1b0>)
 800e494:	4860      	ldr	r0, [pc, #384]	; (800e618 <lwip_netconn_do_delconn+0x1b4>)
 800e496:	f00c f917 	bl	801a6c8 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800e49a:	7afb      	ldrb	r3, [r7, #11]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d005      	beq.n	800e4ac <lwip_netconn_do_delconn+0x48>
 800e4a0:	7afb      	ldrb	r3, [r7, #11]
 800e4a2:	2b02      	cmp	r3, #2
 800e4a4:	d002      	beq.n	800e4ac <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800e4a6:	7afb      	ldrb	r3, [r7, #11]
 800e4a8:	2b03      	cmp	r3, #3
 800e4aa:	d109      	bne.n	800e4c0 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800e4ac:	7afb      	ldrb	r3, [r7, #11]
 800e4ae:	2b03      	cmp	r3, #3
 800e4b0:	d10a      	bne.n	800e4c8 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	7f1b      	ldrb	r3, [r3, #28]
 800e4b8:	f003 0304 	and.w	r3, r3, #4
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d103      	bne.n	800e4c8 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800e4c0:	68fb      	ldr	r3, [r7, #12]
 800e4c2:	22fb      	movs	r2, #251	; 0xfb
 800e4c4:	711a      	strb	r2, [r3, #4]
 800e4c6:	e097      	b.n	800e5f8 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800e4c8:	7afb      	ldrb	r3, [r7, #11]
 800e4ca:	2b03      	cmp	r3, #3
 800e4cc:	d10d      	bne.n	800e4ea <lwip_netconn_do_delconn+0x86>
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	7f1b      	ldrb	r3, [r3, #28]
 800e4d4:	f003 0304 	and.w	r3, r3, #4
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d106      	bne.n	800e4ea <lwip_netconn_do_delconn+0x86>
 800e4dc:	4b4c      	ldr	r3, [pc, #304]	; (800e610 <lwip_netconn_do_delconn+0x1ac>)
 800e4de:	f240 427a 	movw	r2, #1146	; 0x47a
 800e4e2:	494e      	ldr	r1, [pc, #312]	; (800e61c <lwip_netconn_do_delconn+0x1b8>)
 800e4e4:	484c      	ldr	r0, [pc, #304]	; (800e618 <lwip_netconn_do_delconn+0x1b4>)
 800e4e6:	f00c f8ef 	bl	801a6c8 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	4618      	mov	r0, r3
 800e4f6:	f7ff fdd1 	bl	800e09c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	685b      	ldr	r3, [r3, #4]
 800e500:	2b00      	cmp	r3, #0
 800e502:	d05f      	beq.n	800e5c4 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	781b      	ldrb	r3, [r3, #0]
 800e50a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e50e:	2b10      	cmp	r3, #16
 800e510:	d00d      	beq.n	800e52e <lwip_netconn_do_delconn+0xca>
 800e512:	2b20      	cmp	r3, #32
 800e514:	d151      	bne.n	800e5ba <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	685b      	ldr	r3, [r3, #4]
 800e51c:	2200      	movs	r2, #0
 800e51e:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	685b      	ldr	r3, [r3, #4]
 800e526:	4618      	mov	r0, r3
 800e528:	f009 f98c 	bl	8017844 <udp_remove>
          break;
 800e52c:	e046      	b.n	800e5bc <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	681b      	ldr	r3, [r3, #0]
 800e532:	6a1b      	ldr	r3, [r3, #32]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d006      	beq.n	800e546 <lwip_netconn_do_delconn+0xe2>
 800e538:	4b35      	ldr	r3, [pc, #212]	; (800e610 <lwip_netconn_do_delconn+0x1ac>)
 800e53a:	f240 4294 	movw	r2, #1172	; 0x494
 800e53e:	4938      	ldr	r1, [pc, #224]	; (800e620 <lwip_netconn_do_delconn+0x1bc>)
 800e540:	4835      	ldr	r0, [pc, #212]	; (800e618 <lwip_netconn_do_delconn+0x1b4>)
 800e542:	f00c f8c1 	bl	801a6c8 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	2204      	movs	r2, #4
 800e54c:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	2203      	movs	r2, #3
 800e552:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800e554:	68fb      	ldr	r3, [r7, #12]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	68fa      	ldr	r2, [r7, #12]
 800e55a:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	2100      	movs	r1, #0
 800e562:	4618      	mov	r0, r3
 800e564:	f7ff fe18 	bl	800e198 <lwip_netconn_do_close_internal>
 800e568:	4603      	mov	r3, r0
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d04b      	beq.n	800e606 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	785b      	ldrb	r3, [r3, #1]
 800e574:	2b04      	cmp	r3, #4
 800e576:	d006      	beq.n	800e586 <lwip_netconn_do_delconn+0x122>
 800e578:	4b25      	ldr	r3, [pc, #148]	; (800e610 <lwip_netconn_do_delconn+0x1ac>)
 800e57a:	f240 429a 	movw	r2, #1178	; 0x49a
 800e57e:	4929      	ldr	r1, [pc, #164]	; (800e624 <lwip_netconn_do_delconn+0x1c0>)
 800e580:	4825      	ldr	r0, [pc, #148]	; (800e618 <lwip_netconn_do_delconn+0x1b4>)
 800e582:	f00c f8a1 	bl	801a6c8 <iprintf>
            UNLOCK_TCPIP_CORE();
 800e586:	4828      	ldr	r0, [pc, #160]	; (800e628 <lwip_netconn_do_delconn+0x1c4>)
 800e588:	f00b fe43 	bl	801a212 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	330c      	adds	r3, #12
 800e592:	2100      	movs	r1, #0
 800e594:	4618      	mov	r0, r3
 800e596:	f00b fd9a 	bl	801a0ce <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800e59a:	4823      	ldr	r0, [pc, #140]	; (800e628 <lwip_netconn_do_delconn+0x1c4>)
 800e59c:	f00b fe2a 	bl	801a1f4 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	785b      	ldrb	r3, [r3, #1]
 800e5a6:	2b00      	cmp	r3, #0
 800e5a8:	d02d      	beq.n	800e606 <lwip_netconn_do_delconn+0x1a2>
 800e5aa:	4b19      	ldr	r3, [pc, #100]	; (800e610 <lwip_netconn_do_delconn+0x1ac>)
 800e5ac:	f240 429e 	movw	r2, #1182	; 0x49e
 800e5b0:	491c      	ldr	r1, [pc, #112]	; (800e624 <lwip_netconn_do_delconn+0x1c0>)
 800e5b2:	4819      	ldr	r0, [pc, #100]	; (800e618 <lwip_netconn_do_delconn+0x1b4>)
 800e5b4:	f00c f888 	bl	801a6c8 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800e5b8:	e025      	b.n	800e606 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800e5ba:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d007      	beq.n	800e5de <lwip_netconn_do_delconn+0x17a>
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5d4:	68fa      	ldr	r2, [r7, #12]
 800e5d6:	6810      	ldr	r0, [r2, #0]
 800e5d8:	2200      	movs	r2, #0
 800e5da:	2100      	movs	r1, #0
 800e5dc:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800e5de:	68fb      	ldr	r3, [r7, #12]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d007      	beq.n	800e5f8 <lwip_netconn_do_delconn+0x194>
 800e5e8:	68fb      	ldr	r3, [r7, #12]
 800e5ea:	681b      	ldr	r3, [r3, #0]
 800e5ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5ee:	68fa      	ldr	r2, [r7, #12]
 800e5f0:	6810      	ldr	r0, [r2, #0]
 800e5f2:	2200      	movs	r2, #0
 800e5f4:	2102      	movs	r1, #2
 800e5f6:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	330c      	adds	r3, #12
 800e5fe:	4618      	mov	r0, r3
 800e600:	f00b fdb0 	bl	801a164 <sys_sem_valid>
 800e604:	e000      	b.n	800e608 <lwip_netconn_do_delconn+0x1a4>
          return;
 800e606:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800e608:	3710      	adds	r7, #16
 800e60a:	46bd      	mov	sp, r7
 800e60c:	bd80      	pop	{r7, pc}
 800e60e:	bf00      	nop
 800e610:	0801bc8c 	.word	0x0801bc8c
 800e614:	0801bffc 	.word	0x0801bffc
 800e618:	0801bcd0 	.word	0x0801bcd0
 800e61c:	0801c010 	.word	0x0801c010
 800e620:	0801c030 	.word	0x0801c030
 800e624:	0801c04c 	.word	0x0801c04c
 800e628:	2000a62c 	.word	0x2000a62c

0800e62c <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b084      	sub	sp, #16
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800e638:	68bb      	ldr	r3, [r7, #8]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	685b      	ldr	r3, [r3, #4]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d025      	beq.n	800e68e <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e642:	68bb      	ldr	r3, [r7, #8]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	781b      	ldrb	r3, [r3, #0]
 800e648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e64c:	2b10      	cmp	r3, #16
 800e64e:	d00e      	beq.n	800e66e <lwip_netconn_do_bind+0x42>
 800e650:	2b20      	cmp	r3, #32
 800e652:	d119      	bne.n	800e688 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800e654:	68bb      	ldr	r3, [r7, #8]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	6858      	ldr	r0, [r3, #4]
 800e65a:	68bb      	ldr	r3, [r7, #8]
 800e65c:	6899      	ldr	r1, [r3, #8]
 800e65e:	68bb      	ldr	r3, [r7, #8]
 800e660:	899b      	ldrh	r3, [r3, #12]
 800e662:	461a      	mov	r2, r3
 800e664:	f009 f846 	bl	80176f4 <udp_bind>
 800e668:	4603      	mov	r3, r0
 800e66a:	73fb      	strb	r3, [r7, #15]
        break;
 800e66c:	e011      	b.n	800e692 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800e66e:	68bb      	ldr	r3, [r7, #8]
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	6858      	ldr	r0, [r3, #4]
 800e674:	68bb      	ldr	r3, [r7, #8]
 800e676:	6899      	ldr	r1, [r3, #8]
 800e678:	68bb      	ldr	r3, [r7, #8]
 800e67a:	899b      	ldrh	r3, [r3, #12]
 800e67c:	461a      	mov	r2, r3
 800e67e:	f002 febd 	bl	80113fc <tcp_bind>
 800e682:	4603      	mov	r3, r0
 800e684:	73fb      	strb	r3, [r7, #15]
        break;
 800e686:	e004      	b.n	800e692 <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800e688:	23fa      	movs	r3, #250	; 0xfa
 800e68a:	73fb      	strb	r3, [r7, #15]
        break;
 800e68c:	e001      	b.n	800e692 <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800e68e:	23fa      	movs	r3, #250	; 0xfa
 800e690:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	7bfa      	ldrb	r2, [r7, #15]
 800e696:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800e698:	bf00      	nop
 800e69a:	3710      	adds	r7, #16
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}

0800e6a0 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b084      	sub	sp, #16
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800e6ac:	68bb      	ldr	r3, [r7, #8]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	f7ff f875 	bl	800d7a0 <netconn_err>
 800e6b6:	4603      	mov	r3, r0
 800e6b8:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800e6ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d134      	bne.n	800e72c <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	685b      	ldr	r3, [r3, #4]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d02d      	beq.n	800e728 <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800e6cc:	68bb      	ldr	r3, [r7, #8]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	781b      	ldrb	r3, [r3, #0]
 800e6d2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e6d6:	2b20      	cmp	r3, #32
 800e6d8:	d123      	bne.n	800e722 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	689b      	ldr	r3, [r3, #8]
 800e6de:	689b      	ldr	r3, [r3, #8]
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	d10c      	bne.n	800e6fe <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 800e6e4:	68bb      	ldr	r3, [r7, #8]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	685a      	ldr	r2, [r3, #4]
 800e6ea:	68bb      	ldr	r3, [r7, #8]
 800e6ec:	689b      	ldr	r3, [r3, #8]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	4619      	mov	r1, r3
 800e6f2:	4610      	mov	r0, r2
 800e6f4:	f008 fe14 	bl	8017320 <udp_send>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 800e6fc:	e016      	b.n	800e72c <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 800e6fe:	68bb      	ldr	r3, [r7, #8]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	6858      	ldr	r0, [r3, #4]
 800e704:	68bb      	ldr	r3, [r7, #8]
 800e706:	689b      	ldr	r3, [r3, #8]
 800e708:	6819      	ldr	r1, [r3, #0]
 800e70a:	68bb      	ldr	r3, [r7, #8]
 800e70c:	689b      	ldr	r3, [r3, #8]
 800e70e:	f103 0208 	add.w	r2, r3, #8
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	689b      	ldr	r3, [r3, #8]
 800e716:	899b      	ldrh	r3, [r3, #12]
 800e718:	f008 fe36 	bl	8017388 <udp_sendto>
 800e71c:	4603      	mov	r3, r0
 800e71e:	73fb      	strb	r3, [r7, #15]
          break;
 800e720:	e004      	b.n	800e72c <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 800e722:	23f5      	movs	r3, #245	; 0xf5
 800e724:	73fb      	strb	r3, [r7, #15]
          break;
 800e726:	e001      	b.n	800e72c <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 800e728:	23f5      	movs	r3, #245	; 0xf5
 800e72a:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 800e72c:	68bb      	ldr	r3, [r7, #8]
 800e72e:	7bfa      	ldrb	r2, [r7, #15]
 800e730:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800e732:	bf00      	nop
 800e734:	3710      	adds	r7, #16
 800e736:	46bd      	mov	sp, r7
 800e738:	bd80      	pop	{r7, pc}

0800e73a <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800e73a:	b580      	push	{r7, lr}
 800e73c:	b086      	sub	sp, #24
 800e73e:	af00      	add	r7, sp, #0
 800e740:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800e746:	693b      	ldr	r3, [r7, #16]
 800e748:	2200      	movs	r2, #0
 800e74a:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800e74c:	693b      	ldr	r3, [r7, #16]
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	685b      	ldr	r3, [r3, #4]
 800e752:	2b00      	cmp	r3, #0
 800e754:	d022      	beq.n	800e79c <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800e756:	693b      	ldr	r3, [r7, #16]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	781b      	ldrb	r3, [r3, #0]
 800e75c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e760:	2b10      	cmp	r3, #16
 800e762:	d11b      	bne.n	800e79c <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800e764:	693b      	ldr	r3, [r7, #16]
 800e766:	689b      	ldr	r3, [r3, #8]
 800e768:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800e76a:	697b      	ldr	r3, [r7, #20]
 800e76c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e770:	d202      	bcs.n	800e778 <lwip_netconn_do_recv+0x3e>
 800e772:	697b      	ldr	r3, [r7, #20]
 800e774:	b29b      	uxth	r3, r3
 800e776:	e001      	b.n	800e77c <lwip_netconn_do_recv+0x42>
 800e778:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e77c:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800e77e:	693b      	ldr	r3, [r7, #16]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	685b      	ldr	r3, [r3, #4]
 800e784:	89fa      	ldrh	r2, [r7, #14]
 800e786:	4611      	mov	r1, r2
 800e788:	4618      	mov	r0, r3
 800e78a:	f002 ff29 	bl	80115e0 <tcp_recved>
        remaining -= recved;
 800e78e:	89fb      	ldrh	r3, [r7, #14]
 800e790:	697a      	ldr	r2, [r7, #20]
 800e792:	1ad3      	subs	r3, r2, r3
 800e794:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800e796:	697b      	ldr	r3, [r7, #20]
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d1e6      	bne.n	800e76a <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800e79c:	bf00      	nop
 800e79e:	3718      	adds	r7, #24
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}

0800e7a4 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b088      	sub	sp, #32
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
 800e7ac:	460b      	mov	r3, r1
 800e7ae:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d106      	bne.n	800e7c8 <lwip_netconn_do_writemore+0x24>
 800e7ba:	4b96      	ldr	r3, [pc, #600]	; (800ea14 <lwip_netconn_do_writemore+0x270>)
 800e7bc:	f240 6273 	movw	r2, #1651	; 0x673
 800e7c0:	4995      	ldr	r1, [pc, #596]	; (800ea18 <lwip_netconn_do_writemore+0x274>)
 800e7c2:	4896      	ldr	r0, [pc, #600]	; (800ea1c <lwip_netconn_do_writemore+0x278>)
 800e7c4:	f00b ff80 	bl	801a6c8 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	785b      	ldrb	r3, [r3, #1]
 800e7cc:	2b01      	cmp	r3, #1
 800e7ce:	d006      	beq.n	800e7de <lwip_netconn_do_writemore+0x3a>
 800e7d0:	4b90      	ldr	r3, [pc, #576]	; (800ea14 <lwip_netconn_do_writemore+0x270>)
 800e7d2:	f240 6274 	movw	r2, #1652	; 0x674
 800e7d6:	4992      	ldr	r1, [pc, #584]	; (800ea20 <lwip_netconn_do_writemore+0x27c>)
 800e7d8:	4890      	ldr	r0, [pc, #576]	; (800ea1c <lwip_netconn_do_writemore+0x278>)
 800e7da:	f00b ff75 	bl	801a6c8 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	6a1b      	ldr	r3, [r3, #32]
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d106      	bne.n	800e7f4 <lwip_netconn_do_writemore+0x50>
 800e7e6:	4b8b      	ldr	r3, [pc, #556]	; (800ea14 <lwip_netconn_do_writemore+0x270>)
 800e7e8:	f240 6275 	movw	r2, #1653	; 0x675
 800e7ec:	498d      	ldr	r1, [pc, #564]	; (800ea24 <lwip_netconn_do_writemore+0x280>)
 800e7ee:	488b      	ldr	r0, [pc, #556]	; (800ea1c <lwip_netconn_do_writemore+0x278>)
 800e7f0:	f00b ff6a 	bl	801a6c8 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	685b      	ldr	r3, [r3, #4]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d106      	bne.n	800e80a <lwip_netconn_do_writemore+0x66>
 800e7fc:	4b85      	ldr	r3, [pc, #532]	; (800ea14 <lwip_netconn_do_writemore+0x270>)
 800e7fe:	f240 6276 	movw	r2, #1654	; 0x676
 800e802:	4989      	ldr	r1, [pc, #548]	; (800ea28 <lwip_netconn_do_writemore+0x284>)
 800e804:	4885      	ldr	r0, [pc, #532]	; (800ea1c <lwip_netconn_do_writemore+0x278>)
 800e806:	f00b ff5f 	bl	801a6c8 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	6a1b      	ldr	r3, [r3, #32]
 800e80e:	699a      	ldr	r2, [r3, #24]
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	6a1b      	ldr	r3, [r3, #32]
 800e814:	695b      	ldr	r3, [r3, #20]
 800e816:	429a      	cmp	r2, r3
 800e818:	d306      	bcc.n	800e828 <lwip_netconn_do_writemore+0x84>
 800e81a:	4b7e      	ldr	r3, [pc, #504]	; (800ea14 <lwip_netconn_do_writemore+0x270>)
 800e81c:	f240 6277 	movw	r2, #1655	; 0x677
 800e820:	4982      	ldr	r1, [pc, #520]	; (800ea2c <lwip_netconn_do_writemore+0x288>)
 800e822:	487e      	ldr	r0, [pc, #504]	; (800ea1c <lwip_netconn_do_writemore+0x278>)
 800e824:	f00b ff50 	bl	801a6c8 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	6a1b      	ldr	r3, [r3, #32]
 800e82c:	899b      	ldrh	r3, [r3, #12]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d106      	bne.n	800e840 <lwip_netconn_do_writemore+0x9c>
 800e832:	4b78      	ldr	r3, [pc, #480]	; (800ea14 <lwip_netconn_do_writemore+0x270>)
 800e834:	f240 6279 	movw	r2, #1657	; 0x679
 800e838:	497d      	ldr	r1, [pc, #500]	; (800ea30 <lwip_netconn_do_writemore+0x28c>)
 800e83a:	4878      	ldr	r0, [pc, #480]	; (800ea1c <lwip_netconn_do_writemore+0x278>)
 800e83c:	f00b ff44 	bl	801a6c8 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	6a1b      	ldr	r3, [r3, #32]
 800e844:	7f1b      	ldrb	r3, [r3, #28]
 800e846:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	7f1b      	ldrb	r3, [r3, #28]
 800e84c:	f003 0302 	and.w	r3, r3, #2
 800e850:	2b00      	cmp	r3, #0
 800e852:	d104      	bne.n	800e85e <lwip_netconn_do_writemore+0xba>
 800e854:	7ebb      	ldrb	r3, [r7, #26]
 800e856:	f003 0304 	and.w	r3, r3, #4
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	d001      	beq.n	800e862 <lwip_netconn_do_writemore+0xbe>
 800e85e:	2301      	movs	r3, #1
 800e860:	e000      	b.n	800e864 <lwip_netconn_do_writemore+0xc0>
 800e862:	2300      	movs	r3, #0
 800e864:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	6a1b      	ldr	r3, [r3, #32]
 800e86a:	689b      	ldr	r3, [r3, #8]
 800e86c:	681a      	ldr	r2, [r3, #0]
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	6a1b      	ldr	r3, [r3, #32]
 800e872:	691b      	ldr	r3, [r3, #16]
 800e874:	4413      	add	r3, r2
 800e876:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	6a1b      	ldr	r3, [r3, #32]
 800e87c:	689b      	ldr	r3, [r3, #8]
 800e87e:	685a      	ldr	r2, [r3, #4]
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	6a1b      	ldr	r3, [r3, #32]
 800e884:	691b      	ldr	r3, [r3, #16]
 800e886:	1ad3      	subs	r3, r2, r3
 800e888:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800e88a:	693b      	ldr	r3, [r7, #16]
 800e88c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e890:	d307      	bcc.n	800e8a2 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800e892:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e896:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800e898:	7ebb      	ldrb	r3, [r7, #26]
 800e89a:	f043 0302 	orr.w	r3, r3, #2
 800e89e:	76bb      	strb	r3, [r7, #26]
 800e8a0:	e001      	b.n	800e8a6 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800e8a2:	693b      	ldr	r3, [r7, #16]
 800e8a4:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	685b      	ldr	r3, [r3, #4]
 800e8aa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800e8ae:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800e8b0:	89fa      	ldrh	r2, [r7, #14]
 800e8b2:	8bbb      	ldrh	r3, [r7, #28]
 800e8b4:	429a      	cmp	r2, r3
 800e8b6:	d216      	bcs.n	800e8e6 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800e8b8:	89fb      	ldrh	r3, [r7, #14]
 800e8ba:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800e8bc:	7e3b      	ldrb	r3, [r7, #24]
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d00d      	beq.n	800e8de <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800e8c2:	8bbb      	ldrh	r3, [r7, #28]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d10e      	bne.n	800e8e6 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	6a1b      	ldr	r3, [r3, #32]
 800e8cc:	699b      	ldr	r3, [r3, #24]
 800e8ce:	2b00      	cmp	r3, #0
 800e8d0:	d102      	bne.n	800e8d8 <lwip_netconn_do_writemore+0x134>
 800e8d2:	f06f 0306 	mvn.w	r3, #6
 800e8d6:	e000      	b.n	800e8da <lwip_netconn_do_writemore+0x136>
 800e8d8:	2300      	movs	r3, #0
 800e8da:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800e8dc:	e07d      	b.n	800e9da <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800e8de:	7ebb      	ldrb	r3, [r7, #26]
 800e8e0:	f043 0302 	orr.w	r3, r3, #2
 800e8e4:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	6a1b      	ldr	r3, [r3, #32]
 800e8ea:	691a      	ldr	r2, [r3, #16]
 800e8ec:	8bbb      	ldrh	r3, [r7, #28]
 800e8ee:	441a      	add	r2, r3
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	6a1b      	ldr	r3, [r3, #32]
 800e8f4:	689b      	ldr	r3, [r3, #8]
 800e8f6:	685b      	ldr	r3, [r3, #4]
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	d906      	bls.n	800e90a <lwip_netconn_do_writemore+0x166>
 800e8fc:	4b45      	ldr	r3, [pc, #276]	; (800ea14 <lwip_netconn_do_writemore+0x270>)
 800e8fe:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800e902:	494c      	ldr	r1, [pc, #304]	; (800ea34 <lwip_netconn_do_writemore+0x290>)
 800e904:	4845      	ldr	r0, [pc, #276]	; (800ea1c <lwip_netconn_do_writemore+0x278>)
 800e906:	f00b fedf 	bl	801a6c8 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800e90a:	8bbb      	ldrh	r3, [r7, #28]
 800e90c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e910:	4293      	cmp	r3, r2
 800e912:	d103      	bne.n	800e91c <lwip_netconn_do_writemore+0x178>
 800e914:	693b      	ldr	r3, [r7, #16]
 800e916:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e91a:	d209      	bcs.n	800e930 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800e91c:	693b      	ldr	r3, [r7, #16]
 800e91e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800e920:	8bba      	ldrh	r2, [r7, #28]
 800e922:	429a      	cmp	r2, r3
 800e924:	d10b      	bne.n	800e93e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	6a1b      	ldr	r3, [r3, #32]
 800e92a:	899b      	ldrh	r3, [r3, #12]
 800e92c:	2b01      	cmp	r3, #1
 800e92e:	d906      	bls.n	800e93e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800e930:	2301      	movs	r3, #1
 800e932:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800e934:	7ebb      	ldrb	r3, [r7, #26]
 800e936:	f043 0302 	orr.w	r3, r3, #2
 800e93a:	76bb      	strb	r3, [r7, #26]
 800e93c:	e001      	b.n	800e942 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800e93e:	2300      	movs	r3, #0
 800e940:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	6858      	ldr	r0, [r3, #4]
 800e946:	7ebb      	ldrb	r3, [r7, #26]
 800e948:	8bba      	ldrh	r2, [r7, #28]
 800e94a:	6979      	ldr	r1, [r7, #20]
 800e94c:	f006 fc4c 	bl	80151e8 <tcp_write>
 800e950:	4603      	mov	r3, r0
 800e952:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800e954:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d12c      	bne.n	800e9b6 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	6a1b      	ldr	r3, [r3, #32]
 800e960:	6999      	ldr	r1, [r3, #24]
 800e962:	8bba      	ldrh	r2, [r7, #28]
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	6a1b      	ldr	r3, [r3, #32]
 800e968:	440a      	add	r2, r1
 800e96a:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	6a1b      	ldr	r3, [r3, #32]
 800e970:	6919      	ldr	r1, [r3, #16]
 800e972:	8bba      	ldrh	r2, [r7, #28]
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	6a1b      	ldr	r3, [r3, #32]
 800e978:	440a      	add	r2, r1
 800e97a:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	6a1b      	ldr	r3, [r3, #32]
 800e980:	691a      	ldr	r2, [r3, #16]
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6a1b      	ldr	r3, [r3, #32]
 800e986:	689b      	ldr	r3, [r3, #8]
 800e988:	685b      	ldr	r3, [r3, #4]
 800e98a:	429a      	cmp	r2, r3
 800e98c:	d113      	bne.n	800e9b6 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	6a1b      	ldr	r3, [r3, #32]
 800e992:	899a      	ldrh	r2, [r3, #12]
 800e994:	3a01      	subs	r2, #1
 800e996:	b292      	uxth	r2, r2
 800e998:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	6a1b      	ldr	r3, [r3, #32]
 800e99e:	899b      	ldrh	r3, [r3, #12]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d008      	beq.n	800e9b6 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	6a1b      	ldr	r3, [r3, #32]
 800e9a8:	689a      	ldr	r2, [r3, #8]
 800e9aa:	3208      	adds	r2, #8
 800e9ac:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	6a1b      	ldr	r3, [r3, #32]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800e9b6:	7e7b      	ldrb	r3, [r7, #25]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d004      	beq.n	800e9c6 <lwip_netconn_do_writemore+0x222>
 800e9bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	f43f af50 	beq.w	800e866 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800e9c6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e9ca:	2b00      	cmp	r3, #0
 800e9cc:	d004      	beq.n	800e9d8 <lwip_netconn_do_writemore+0x234>
 800e9ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e9d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9d6:	d146      	bne.n	800ea66 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800e9d8:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800e9da:	7e3b      	ldrb	r3, [r7, #24]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d02b      	beq.n	800ea38 <lwip_netconn_do_writemore+0x294>
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6a1b      	ldr	r3, [r3, #32]
 800e9e4:	699a      	ldr	r2, [r3, #24]
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	6a1b      	ldr	r3, [r3, #32]
 800e9ea:	695b      	ldr	r3, [r3, #20]
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	d223      	bcs.n	800ea38 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d005      	beq.n	800ea04 <lwip_netconn_do_writemore+0x260>
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9fc:	2200      	movs	r2, #0
 800e9fe:	2103      	movs	r1, #3
 800ea00:	6878      	ldr	r0, [r7, #4]
 800ea02:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	7f1b      	ldrb	r3, [r3, #28]
 800ea08:	f043 0310 	orr.w	r3, r3, #16
 800ea0c:	b2da      	uxtb	r2, r3
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	771a      	strb	r2, [r3, #28]
 800ea12:	e028      	b.n	800ea66 <lwip_netconn_do_writemore+0x2c2>
 800ea14:	0801bc8c 	.word	0x0801bc8c
 800ea18:	0801bde4 	.word	0x0801bde4
 800ea1c:	0801bcd0 	.word	0x0801bcd0
 800ea20:	0801c0ec 	.word	0x0801c0ec
 800ea24:	0801bdf4 	.word	0x0801bdf4
 800ea28:	0801c10c 	.word	0x0801c10c
 800ea2c:	0801c124 	.word	0x0801c124
 800ea30:	0801c164 	.word	0x0801c164
 800ea34:	0801c18c 	.word	0x0801c18c
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	685b      	ldr	r3, [r3, #4]
 800ea3c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800ea40:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800ea44:	d305      	bcc.n	800ea52 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	685b      	ldr	r3, [r3, #4]
 800ea4a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800ea4e:	2b04      	cmp	r3, #4
 800ea50:	d909      	bls.n	800ea66 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d005      	beq.n	800ea66 <lwip_netconn_do_writemore+0x2c2>
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea5e:	2200      	movs	r2, #0
 800ea60:	2103      	movs	r1, #3
 800ea62:	6878      	ldr	r0, [r7, #4]
 800ea64:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800ea66:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d11d      	bne.n	800eaaa <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	6a1b      	ldr	r3, [r3, #32]
 800ea72:	699a      	ldr	r2, [r3, #24]
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	6a1b      	ldr	r3, [r3, #32]
 800ea78:	695b      	ldr	r3, [r3, #20]
 800ea7a:	429a      	cmp	r2, r3
 800ea7c:	d002      	beq.n	800ea84 <lwip_netconn_do_writemore+0x2e0>
 800ea7e:	7e3b      	ldrb	r3, [r7, #24]
 800ea80:	2b00      	cmp	r3, #0
 800ea82:	d001      	beq.n	800ea88 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800ea84:	2301      	movs	r3, #1
 800ea86:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	685b      	ldr	r3, [r3, #4]
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	f007 f995 	bl	8015dbc <tcp_output>
 800ea92:	4603      	mov	r3, r0
 800ea94:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800ea96:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800ea9a:	f113 0f04 	cmn.w	r3, #4
 800ea9e:	d12c      	bne.n	800eafa <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800eaa0:	7b3b      	ldrb	r3, [r7, #12]
 800eaa2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	76fb      	strb	r3, [r7, #27]
 800eaa8:	e027      	b.n	800eafa <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800eaaa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800eaae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eab2:	d120      	bne.n	800eaf6 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	685b      	ldr	r3, [r3, #4]
 800eab8:	4618      	mov	r0, r3
 800eaba:	f007 f97f 	bl	8015dbc <tcp_output>
 800eabe:	4603      	mov	r3, r0
 800eac0:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800eac2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800eac6:	f113 0f04 	cmn.w	r3, #4
 800eaca:	d104      	bne.n	800ead6 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800eacc:	7b7b      	ldrb	r3, [r7, #13]
 800eace:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800ead0:	2301      	movs	r3, #1
 800ead2:	76fb      	strb	r3, [r7, #27]
 800ead4:	e011      	b.n	800eafa <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800ead6:	7e3b      	ldrb	r3, [r7, #24]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d00e      	beq.n	800eafa <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	6a1b      	ldr	r3, [r3, #32]
 800eae0:	699b      	ldr	r3, [r3, #24]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d102      	bne.n	800eaec <lwip_netconn_do_writemore+0x348>
 800eae6:	f06f 0306 	mvn.w	r3, #6
 800eaea:	e000      	b.n	800eaee <lwip_netconn_do_writemore+0x34a>
 800eaec:	2300      	movs	r3, #0
 800eaee:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800eaf0:	2301      	movs	r3, #1
 800eaf2:	76fb      	strb	r3, [r7, #27]
 800eaf4:	e001      	b.n	800eafa <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800eaf6:	2301      	movs	r3, #1
 800eaf8:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800eafa:	7efb      	ldrb	r3, [r7, #27]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d015      	beq.n	800eb2c <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	6a1b      	ldr	r3, [r3, #32]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	330c      	adds	r3, #12
 800eb08:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6a1b      	ldr	r3, [r3, #32]
 800eb0e:	7ffa      	ldrb	r2, [r7, #31]
 800eb10:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	2200      	movs	r2, #0
 800eb16:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800eb1e:	78fb      	ldrb	r3, [r7, #3]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d006      	beq.n	800eb32 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800eb24:	68b8      	ldr	r0, [r7, #8]
 800eb26:	f00b fb03 	bl	801a130 <sys_sem_signal>
 800eb2a:	e002      	b.n	800eb32 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800eb2c:	f04f 33ff 	mov.w	r3, #4294967295
 800eb30:	e000      	b.n	800eb34 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800eb32:	2300      	movs	r3, #0
}
 800eb34:	4618      	mov	r0, r3
 800eb36:	3720      	adds	r7, #32
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd80      	pop	{r7, pc}

0800eb3c <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b084      	sub	sp, #16
 800eb40:	af00      	add	r7, sp, #0
 800eb42:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800eb48:	68fb      	ldr	r3, [r7, #12]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	785b      	ldrb	r3, [r3, #1]
 800eb4e:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	685b      	ldr	r3, [r3, #4]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d069      	beq.n	800ec2e <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	781b      	ldrb	r3, [r3, #0]
 800eb60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800eb64:	2b10      	cmp	r3, #16
 800eb66:	d162      	bne.n	800ec2e <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800eb6c:	2b03      	cmp	r3, #3
 800eb6e:	d002      	beq.n	800eb76 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800eb70:	7afb      	ldrb	r3, [r7, #11]
 800eb72:	2b02      	cmp	r3, #2
 800eb74:	d05b      	beq.n	800ec2e <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800eb76:	7afb      	ldrb	r3, [r7, #11]
 800eb78:	2b03      	cmp	r3, #3
 800eb7a:	d103      	bne.n	800eb84 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800eb7c:	68fb      	ldr	r3, [r7, #12]
 800eb7e:	22f5      	movs	r2, #245	; 0xf5
 800eb80:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800eb82:	e059      	b.n	800ec38 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800eb84:	7afb      	ldrb	r3, [r7, #11]
 800eb86:	2b01      	cmp	r3, #1
 800eb88:	d103      	bne.n	800eb92 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	22fb      	movs	r2, #251	; 0xfb
 800eb8e:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800eb90:	e052      	b.n	800ec38 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	7a1b      	ldrb	r3, [r3, #8]
 800eb96:	f003 0301 	and.w	r3, r3, #1
 800eb9a:	2b00      	cmp	r3, #0
 800eb9c:	d004      	beq.n	800eba8 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	681b      	ldr	r3, [r3, #0]
 800eba2:	4618      	mov	r0, r3
 800eba4:	f7ff fa7a 	bl	800e09c <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	6a1b      	ldr	r3, [r3, #32]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d006      	beq.n	800ebc0 <lwip_netconn_do_close+0x84>
 800ebb2:	4b23      	ldr	r3, [pc, #140]	; (800ec40 <lwip_netconn_do_close+0x104>)
 800ebb4:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800ebb8:	4922      	ldr	r1, [pc, #136]	; (800ec44 <lwip_netconn_do_close+0x108>)
 800ebba:	4823      	ldr	r0, [pc, #140]	; (800ec48 <lwip_netconn_do_close+0x10c>)
 800ebbc:	f00b fd84 	bl	801a6c8 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	2204      	movs	r2, #4
 800ebc6:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	68fa      	ldr	r2, [r7, #12]
 800ebce:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	2100      	movs	r1, #0
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	f7ff fade 	bl	800e198 <lwip_netconn_do_close_internal>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d029      	beq.n	800ec36 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	785b      	ldrb	r3, [r3, #1]
 800ebe8:	2b04      	cmp	r3, #4
 800ebea:	d006      	beq.n	800ebfa <lwip_netconn_do_close+0xbe>
 800ebec:	4b14      	ldr	r3, [pc, #80]	; (800ec40 <lwip_netconn_do_close+0x104>)
 800ebee:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800ebf2:	4916      	ldr	r1, [pc, #88]	; (800ec4c <lwip_netconn_do_close+0x110>)
 800ebf4:	4814      	ldr	r0, [pc, #80]	; (800ec48 <lwip_netconn_do_close+0x10c>)
 800ebf6:	f00b fd67 	bl	801a6c8 <iprintf>
        UNLOCK_TCPIP_CORE();
 800ebfa:	4815      	ldr	r0, [pc, #84]	; (800ec50 <lwip_netconn_do_close+0x114>)
 800ebfc:	f00b fb09 	bl	801a212 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	330c      	adds	r3, #12
 800ec06:	2100      	movs	r1, #0
 800ec08:	4618      	mov	r0, r3
 800ec0a:	f00b fa60 	bl	801a0ce <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800ec0e:	4810      	ldr	r0, [pc, #64]	; (800ec50 <lwip_netconn_do_close+0x114>)
 800ec10:	f00b faf0 	bl	801a1f4 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	785b      	ldrb	r3, [r3, #1]
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d00b      	beq.n	800ec36 <lwip_netconn_do_close+0xfa>
 800ec1e:	4b08      	ldr	r3, [pc, #32]	; (800ec40 <lwip_netconn_do_close+0x104>)
 800ec20:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800ec24:	4909      	ldr	r1, [pc, #36]	; (800ec4c <lwip_netconn_do_close+0x110>)
 800ec26:	4808      	ldr	r0, [pc, #32]	; (800ec48 <lwip_netconn_do_close+0x10c>)
 800ec28:	f00b fd4e 	bl	801a6c8 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800ec2c:	e003      	b.n	800ec36 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	22f5      	movs	r2, #245	; 0xf5
 800ec32:	711a      	strb	r2, [r3, #4]
 800ec34:	e000      	b.n	800ec38 <lwip_netconn_do_close+0xfc>
      return;
 800ec36:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800ec38:	3710      	adds	r7, #16
 800ec3a:	46bd      	mov	sp, r7
 800ec3c:	bd80      	pop	{r7, pc}
 800ec3e:	bf00      	nop
 800ec40:	0801bc8c 	.word	0x0801bc8c
 800ec44:	0801c030 	.word	0x0801c030
 800ec48:	0801bcd0 	.word	0x0801bcd0
 800ec4c:	0801c04c 	.word	0x0801c04c
 800ec50:	2000a62c 	.word	0x2000a62c

0800ec54 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b082      	sub	sp, #8
 800ec58:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800ec5a:	2006      	movs	r0, #6
 800ec5c:	f000 ff30 	bl	800fac0 <memp_malloc>
 800ec60:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d004      	beq.n	800ec72 <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 800ec68:	2210      	movs	r2, #16
 800ec6a:	2100      	movs	r1, #0
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f00b fc79 	bl	801a564 <memset>
  }
  return buf;
 800ec72:	687b      	ldr	r3, [r7, #4]
}
 800ec74:	4618      	mov	r0, r3
 800ec76:	3708      	adds	r7, #8
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	bd80      	pop	{r7, pc}

0800ec7c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	b082      	sub	sp, #8
 800ec80:	af00      	add	r7, sp, #0
 800ec82:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d013      	beq.n	800ecb2 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d00b      	beq.n	800ecaa <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	4618      	mov	r0, r3
 800ec98:	f001 fda4 	bl	80107e4 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2200      	movs	r2, #0
 800eca0:	605a      	str	r2, [r3, #4]
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	685a      	ldr	r2, [r3, #4]
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800ecaa:	6879      	ldr	r1, [r7, #4]
 800ecac:	2006      	movs	r0, #6
 800ecae:	f000 ff59 	bl	800fb64 <memp_free>
  }
}
 800ecb2:	bf00      	nop
 800ecb4:	3708      	adds	r7, #8
 800ecb6:	46bd      	mov	sp, r7
 800ecb8:	bd80      	pop	{r7, pc}
	...

0800ecbc <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b084      	sub	sp, #16
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	60f8      	str	r0, [r7, #12]
 800ecc4:	60b9      	str	r1, [r7, #8]
 800ecc6:	4613      	mov	r3, r2
 800ecc8:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d108      	bne.n	800ece2 <netbuf_ref+0x26>
 800ecd0:	4b1c      	ldr	r3, [pc, #112]	; (800ed44 <netbuf_ref+0x88>)
 800ecd2:	2299      	movs	r2, #153	; 0x99
 800ecd4:	491c      	ldr	r1, [pc, #112]	; (800ed48 <netbuf_ref+0x8c>)
 800ecd6:	481d      	ldr	r0, [pc, #116]	; (800ed4c <netbuf_ref+0x90>)
 800ecd8:	f00b fcf6 	bl	801a6c8 <iprintf>
 800ecdc:	f06f 030f 	mvn.w	r3, #15
 800ece0:	e02b      	b.n	800ed3a <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d004      	beq.n	800ecf4 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	681b      	ldr	r3, [r3, #0]
 800ecee:	4618      	mov	r0, r3
 800ecf0:	f001 fd78 	bl	80107e4 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 800ecf4:	2241      	movs	r2, #65	; 0x41
 800ecf6:	2100      	movs	r1, #0
 800ecf8:	2036      	movs	r0, #54	; 0x36
 800ecfa:	f001 fa8f 	bl	801021c <pbuf_alloc>
 800ecfe:	4602      	mov	r2, r0
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d105      	bne.n	800ed18 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	2200      	movs	r2, #0
 800ed10:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 800ed12:	f04f 33ff 	mov.w	r3, #4294967295
 800ed16:	e010      	b.n	800ed3a <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	68ba      	ldr	r2, [r7, #8]
 800ed1e:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	681b      	ldr	r3, [r3, #0]
 800ed24:	88fa      	ldrh	r2, [r7, #6]
 800ed26:	811a      	strh	r2, [r3, #8]
 800ed28:	68fa      	ldr	r2, [r7, #12]
 800ed2a:	6812      	ldr	r2, [r2, #0]
 800ed2c:	891b      	ldrh	r3, [r3, #8]
 800ed2e:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	681a      	ldr	r2, [r3, #0]
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 800ed38:	2300      	movs	r3, #0
}
 800ed3a:	4618      	mov	r0, r3
 800ed3c:	3710      	adds	r7, #16
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}
 800ed42:	bf00      	nop
 800ed44:	0801c1e4 	.word	0x0801c1e4
 800ed48:	0801c29c 	.word	0x0801c29c
 800ed4c:	0801c234 	.word	0x0801c234

0800ed50 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 800ed50:	b580      	push	{r7, lr}
 800ed52:	b084      	sub	sp, #16
 800ed54:	af00      	add	r7, sp, #0
 800ed56:	60f8      	str	r0, [r7, #12]
 800ed58:	60b9      	str	r1, [r7, #8]
 800ed5a:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d108      	bne.n	800ed74 <netbuf_data+0x24>
 800ed62:	4b1b      	ldr	r3, [pc, #108]	; (800edd0 <netbuf_data+0x80>)
 800ed64:	22c6      	movs	r2, #198	; 0xc6
 800ed66:	491b      	ldr	r1, [pc, #108]	; (800edd4 <netbuf_data+0x84>)
 800ed68:	481b      	ldr	r0, [pc, #108]	; (800edd8 <netbuf_data+0x88>)
 800ed6a:	f00b fcad 	bl	801a6c8 <iprintf>
 800ed6e:	f06f 030f 	mvn.w	r3, #15
 800ed72:	e029      	b.n	800edc8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800ed74:	68bb      	ldr	r3, [r7, #8]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	d108      	bne.n	800ed8c <netbuf_data+0x3c>
 800ed7a:	4b15      	ldr	r3, [pc, #84]	; (800edd0 <netbuf_data+0x80>)
 800ed7c:	22c7      	movs	r2, #199	; 0xc7
 800ed7e:	4917      	ldr	r1, [pc, #92]	; (800eddc <netbuf_data+0x8c>)
 800ed80:	4815      	ldr	r0, [pc, #84]	; (800edd8 <netbuf_data+0x88>)
 800ed82:	f00b fca1 	bl	801a6c8 <iprintf>
 800ed86:	f06f 030f 	mvn.w	r3, #15
 800ed8a:	e01d      	b.n	800edc8 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d108      	bne.n	800eda4 <netbuf_data+0x54>
 800ed92:	4b0f      	ldr	r3, [pc, #60]	; (800edd0 <netbuf_data+0x80>)
 800ed94:	22c8      	movs	r2, #200	; 0xc8
 800ed96:	4912      	ldr	r1, [pc, #72]	; (800ede0 <netbuf_data+0x90>)
 800ed98:	480f      	ldr	r0, [pc, #60]	; (800edd8 <netbuf_data+0x88>)
 800ed9a:	f00b fc95 	bl	801a6c8 <iprintf>
 800ed9e:	f06f 030f 	mvn.w	r3, #15
 800eda2:	e011      	b.n	800edc8 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 800eda4:	68fb      	ldr	r3, [r7, #12]
 800eda6:	685b      	ldr	r3, [r3, #4]
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d102      	bne.n	800edb2 <netbuf_data+0x62>
    return ERR_BUF;
 800edac:	f06f 0301 	mvn.w	r3, #1
 800edb0:	e00a      	b.n	800edc8 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 800edb2:	68fb      	ldr	r3, [r7, #12]
 800edb4:	685b      	ldr	r3, [r3, #4]
 800edb6:	685a      	ldr	r2, [r3, #4]
 800edb8:	68bb      	ldr	r3, [r7, #8]
 800edba:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	685b      	ldr	r3, [r3, #4]
 800edc0:	895a      	ldrh	r2, [r3, #10]
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 800edc6:	2300      	movs	r3, #0
}
 800edc8:	4618      	mov	r0, r3
 800edca:	3710      	adds	r7, #16
 800edcc:	46bd      	mov	sp, r7
 800edce:	bd80      	pop	{r7, pc}
 800edd0:	0801c1e4 	.word	0x0801c1e4
 800edd4:	0801c2ec 	.word	0x0801c2ec
 800edd8:	0801c234 	.word	0x0801c234
 800eddc:	0801c308 	.word	0x0801c308
 800ede0:	0801c328 	.word	0x0801c328

0800ede4 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b084      	sub	sp, #16
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
 800edec:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800edee:	f008 f89d 	bl	8016f2c <sys_timeouts_sleeptime>
 800edf2:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edfa:	d10b      	bne.n	800ee14 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800edfc:	4813      	ldr	r0, [pc, #76]	; (800ee4c <tcpip_timeouts_mbox_fetch+0x68>)
 800edfe:	f00b fa08 	bl	801a212 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800ee02:	2200      	movs	r2, #0
 800ee04:	6839      	ldr	r1, [r7, #0]
 800ee06:	6878      	ldr	r0, [r7, #4]
 800ee08:	f00b f8c0 	bl	8019f8c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800ee0c:	480f      	ldr	r0, [pc, #60]	; (800ee4c <tcpip_timeouts_mbox_fetch+0x68>)
 800ee0e:	f00b f9f1 	bl	801a1f4 <sys_mutex_lock>
    return;
 800ee12:	e018      	b.n	800ee46 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d102      	bne.n	800ee20 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800ee1a:	f008 f84d 	bl	8016eb8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ee1e:	e7e6      	b.n	800edee <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800ee20:	480a      	ldr	r0, [pc, #40]	; (800ee4c <tcpip_timeouts_mbox_fetch+0x68>)
 800ee22:	f00b f9f6 	bl	801a212 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800ee26:	68fa      	ldr	r2, [r7, #12]
 800ee28:	6839      	ldr	r1, [r7, #0]
 800ee2a:	6878      	ldr	r0, [r7, #4]
 800ee2c:	f00b f8ae 	bl	8019f8c <sys_arch_mbox_fetch>
 800ee30:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800ee32:	4806      	ldr	r0, [pc, #24]	; (800ee4c <tcpip_timeouts_mbox_fetch+0x68>)
 800ee34:	f00b f9de 	bl	801a1f4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800ee38:	68bb      	ldr	r3, [r7, #8]
 800ee3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee3e:	d102      	bne.n	800ee46 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800ee40:	f008 f83a 	bl	8016eb8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800ee44:	e7d3      	b.n	800edee <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800ee46:	3710      	adds	r7, #16
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	bd80      	pop	{r7, pc}
 800ee4c:	2000a62c 	.word	0x2000a62c

0800ee50 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b084      	sub	sp, #16
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800ee58:	4810      	ldr	r0, [pc, #64]	; (800ee9c <tcpip_thread+0x4c>)
 800ee5a:	f00b f9cb 	bl	801a1f4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800ee5e:	4b10      	ldr	r3, [pc, #64]	; (800eea0 <tcpip_thread+0x50>)
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d005      	beq.n	800ee72 <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800ee66:	4b0e      	ldr	r3, [pc, #56]	; (800eea0 <tcpip_thread+0x50>)
 800ee68:	681b      	ldr	r3, [r3, #0]
 800ee6a:	4a0e      	ldr	r2, [pc, #56]	; (800eea4 <tcpip_thread+0x54>)
 800ee6c:	6812      	ldr	r2, [r2, #0]
 800ee6e:	4610      	mov	r0, r2
 800ee70:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ee72:	f107 030c 	add.w	r3, r7, #12
 800ee76:	4619      	mov	r1, r3
 800ee78:	480b      	ldr	r0, [pc, #44]	; (800eea8 <tcpip_thread+0x58>)
 800ee7a:	f7ff ffb3 	bl	800ede4 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	2b00      	cmp	r3, #0
 800ee82:	d106      	bne.n	800ee92 <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ee84:	4b09      	ldr	r3, [pc, #36]	; (800eeac <tcpip_thread+0x5c>)
 800ee86:	2291      	movs	r2, #145	; 0x91
 800ee88:	4909      	ldr	r1, [pc, #36]	; (800eeb0 <tcpip_thread+0x60>)
 800ee8a:	480a      	ldr	r0, [pc, #40]	; (800eeb4 <tcpip_thread+0x64>)
 800ee8c:	f00b fc1c 	bl	801a6c8 <iprintf>
      continue;
 800ee90:	e003      	b.n	800ee9a <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	4618      	mov	r0, r3
 800ee96:	f000 f80f 	bl	800eeb8 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800ee9a:	e7ea      	b.n	800ee72 <tcpip_thread+0x22>
 800ee9c:	2000a62c 	.word	0x2000a62c
 800eea0:	20006940 	.word	0x20006940
 800eea4:	20006944 	.word	0x20006944
 800eea8:	20006948 	.word	0x20006948
 800eeac:	0801c37c 	.word	0x0801c37c
 800eeb0:	0801c3ac 	.word	0x0801c3ac
 800eeb4:	0801c3cc 	.word	0x0801c3cc

0800eeb8 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b082      	sub	sp, #8
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	781b      	ldrb	r3, [r3, #0]
 800eec4:	2b02      	cmp	r3, #2
 800eec6:	d026      	beq.n	800ef16 <tcpip_thread_handle_msg+0x5e>
 800eec8:	2b02      	cmp	r3, #2
 800eeca:	dc2b      	bgt.n	800ef24 <tcpip_thread_handle_msg+0x6c>
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d002      	beq.n	800eed6 <tcpip_thread_handle_msg+0x1e>
 800eed0:	2b01      	cmp	r3, #1
 800eed2:	d015      	beq.n	800ef00 <tcpip_thread_handle_msg+0x48>
 800eed4:	e026      	b.n	800ef24 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	68db      	ldr	r3, [r3, #12]
 800eeda:	687a      	ldr	r2, [r7, #4]
 800eedc:	6850      	ldr	r0, [r2, #4]
 800eede:	687a      	ldr	r2, [r7, #4]
 800eee0:	6892      	ldr	r2, [r2, #8]
 800eee2:	4611      	mov	r1, r2
 800eee4:	4798      	blx	r3
 800eee6:	4603      	mov	r3, r0
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d004      	beq.n	800eef6 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	685b      	ldr	r3, [r3, #4]
 800eef0:	4618      	mov	r0, r3
 800eef2:	f001 fc77 	bl	80107e4 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800eef6:	6879      	ldr	r1, [r7, #4]
 800eef8:	2009      	movs	r0, #9
 800eefa:	f000 fe33 	bl	800fb64 <memp_free>
      break;
 800eefe:	e018      	b.n	800ef32 <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	685b      	ldr	r3, [r3, #4]
 800ef04:	687a      	ldr	r2, [r7, #4]
 800ef06:	6892      	ldr	r2, [r2, #8]
 800ef08:	4610      	mov	r0, r2
 800ef0a:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800ef0c:	6879      	ldr	r1, [r7, #4]
 800ef0e:	2008      	movs	r0, #8
 800ef10:	f000 fe28 	bl	800fb64 <memp_free>
      break;
 800ef14:	e00d      	b.n	800ef32 <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	685b      	ldr	r3, [r3, #4]
 800ef1a:	687a      	ldr	r2, [r7, #4]
 800ef1c:	6892      	ldr	r2, [r2, #8]
 800ef1e:	4610      	mov	r0, r2
 800ef20:	4798      	blx	r3
      break;
 800ef22:	e006      	b.n	800ef32 <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800ef24:	4b05      	ldr	r3, [pc, #20]	; (800ef3c <tcpip_thread_handle_msg+0x84>)
 800ef26:	22cf      	movs	r2, #207	; 0xcf
 800ef28:	4905      	ldr	r1, [pc, #20]	; (800ef40 <tcpip_thread_handle_msg+0x88>)
 800ef2a:	4806      	ldr	r0, [pc, #24]	; (800ef44 <tcpip_thread_handle_msg+0x8c>)
 800ef2c:	f00b fbcc 	bl	801a6c8 <iprintf>
      break;
 800ef30:	bf00      	nop
  }
}
 800ef32:	bf00      	nop
 800ef34:	3708      	adds	r7, #8
 800ef36:	46bd      	mov	sp, r7
 800ef38:	bd80      	pop	{r7, pc}
 800ef3a:	bf00      	nop
 800ef3c:	0801c37c 	.word	0x0801c37c
 800ef40:	0801c3ac 	.word	0x0801c3ac
 800ef44:	0801c3cc 	.word	0x0801c3cc

0800ef48 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b086      	sub	sp, #24
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	60f8      	str	r0, [r7, #12]
 800ef50:	60b9      	str	r1, [r7, #8]
 800ef52:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800ef54:	481a      	ldr	r0, [pc, #104]	; (800efc0 <tcpip_inpkt+0x78>)
 800ef56:	f00b f874 	bl	801a042 <sys_mbox_valid>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d105      	bne.n	800ef6c <tcpip_inpkt+0x24>
 800ef60:	4b18      	ldr	r3, [pc, #96]	; (800efc4 <tcpip_inpkt+0x7c>)
 800ef62:	22fc      	movs	r2, #252	; 0xfc
 800ef64:	4918      	ldr	r1, [pc, #96]	; (800efc8 <tcpip_inpkt+0x80>)
 800ef66:	4819      	ldr	r0, [pc, #100]	; (800efcc <tcpip_inpkt+0x84>)
 800ef68:	f00b fbae 	bl	801a6c8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800ef6c:	2009      	movs	r0, #9
 800ef6e:	f000 fda7 	bl	800fac0 <memp_malloc>
 800ef72:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800ef74:	697b      	ldr	r3, [r7, #20]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	d102      	bne.n	800ef80 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800ef7a:	f04f 33ff 	mov.w	r3, #4294967295
 800ef7e:	e01a      	b.n	800efb6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800ef80:	697b      	ldr	r3, [r7, #20]
 800ef82:	2200      	movs	r2, #0
 800ef84:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800ef86:	697b      	ldr	r3, [r7, #20]
 800ef88:	68fa      	ldr	r2, [r7, #12]
 800ef8a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800ef8c:	697b      	ldr	r3, [r7, #20]
 800ef8e:	68ba      	ldr	r2, [r7, #8]
 800ef90:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800ef92:	697b      	ldr	r3, [r7, #20]
 800ef94:	687a      	ldr	r2, [r7, #4]
 800ef96:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800ef98:	6979      	ldr	r1, [r7, #20]
 800ef9a:	4809      	ldr	r0, [pc, #36]	; (800efc0 <tcpip_inpkt+0x78>)
 800ef9c:	f00a ffdc 	bl	8019f58 <sys_mbox_trypost>
 800efa0:	4603      	mov	r3, r0
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d006      	beq.n	800efb4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800efa6:	6979      	ldr	r1, [r7, #20]
 800efa8:	2009      	movs	r0, #9
 800efaa:	f000 fddb 	bl	800fb64 <memp_free>
    return ERR_MEM;
 800efae:	f04f 33ff 	mov.w	r3, #4294967295
 800efb2:	e000      	b.n	800efb6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800efb4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800efb6:	4618      	mov	r0, r3
 800efb8:	3718      	adds	r7, #24
 800efba:	46bd      	mov	sp, r7
 800efbc:	bd80      	pop	{r7, pc}
 800efbe:	bf00      	nop
 800efc0:	20006948 	.word	0x20006948
 800efc4:	0801c37c 	.word	0x0801c37c
 800efc8:	0801c3f4 	.word	0x0801c3f4
 800efcc:	0801c3cc 	.word	0x0801c3cc

0800efd0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800efd0:	b580      	push	{r7, lr}
 800efd2:	b082      	sub	sp, #8
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
 800efd8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800efda:	683b      	ldr	r3, [r7, #0]
 800efdc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800efe0:	f003 0318 	and.w	r3, r3, #24
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d006      	beq.n	800eff6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800efe8:	4a08      	ldr	r2, [pc, #32]	; (800f00c <tcpip_input+0x3c>)
 800efea:	6839      	ldr	r1, [r7, #0]
 800efec:	6878      	ldr	r0, [r7, #4]
 800efee:	f7ff ffab 	bl	800ef48 <tcpip_inpkt>
 800eff2:	4603      	mov	r3, r0
 800eff4:	e005      	b.n	800f002 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800eff6:	4a06      	ldr	r2, [pc, #24]	; (800f010 <tcpip_input+0x40>)
 800eff8:	6839      	ldr	r1, [r7, #0]
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f7ff ffa4 	bl	800ef48 <tcpip_inpkt>
 800f000:	4603      	mov	r3, r0
}
 800f002:	4618      	mov	r0, r3
 800f004:	3708      	adds	r7, #8
 800f006:	46bd      	mov	sp, r7
 800f008:	bd80      	pop	{r7, pc}
 800f00a:	bf00      	nop
 800f00c:	08019d45 	.word	0x08019d45
 800f010:	08018c59 	.word	0x08018c59

0800f014 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800f014:	b580      	push	{r7, lr}
 800f016:	b084      	sub	sp, #16
 800f018:	af00      	add	r7, sp, #0
 800f01a:	6078      	str	r0, [r7, #4]
 800f01c:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800f01e:	4819      	ldr	r0, [pc, #100]	; (800f084 <tcpip_try_callback+0x70>)
 800f020:	f00b f80f 	bl	801a042 <sys_mbox_valid>
 800f024:	4603      	mov	r3, r0
 800f026:	2b00      	cmp	r3, #0
 800f028:	d106      	bne.n	800f038 <tcpip_try_callback+0x24>
 800f02a:	4b17      	ldr	r3, [pc, #92]	; (800f088 <tcpip_try_callback+0x74>)
 800f02c:	f240 125d 	movw	r2, #349	; 0x15d
 800f030:	4916      	ldr	r1, [pc, #88]	; (800f08c <tcpip_try_callback+0x78>)
 800f032:	4817      	ldr	r0, [pc, #92]	; (800f090 <tcpip_try_callback+0x7c>)
 800f034:	f00b fb48 	bl	801a6c8 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800f038:	2008      	movs	r0, #8
 800f03a:	f000 fd41 	bl	800fac0 <memp_malloc>
 800f03e:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d102      	bne.n	800f04c <tcpip_try_callback+0x38>
    return ERR_MEM;
 800f046:	f04f 33ff 	mov.w	r3, #4294967295
 800f04a:	e017      	b.n	800f07c <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	2201      	movs	r2, #1
 800f050:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	687a      	ldr	r2, [r7, #4]
 800f056:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800f058:	68fb      	ldr	r3, [r7, #12]
 800f05a:	683a      	ldr	r2, [r7, #0]
 800f05c:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800f05e:	68f9      	ldr	r1, [r7, #12]
 800f060:	4808      	ldr	r0, [pc, #32]	; (800f084 <tcpip_try_callback+0x70>)
 800f062:	f00a ff79 	bl	8019f58 <sys_mbox_trypost>
 800f066:	4603      	mov	r3, r0
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d006      	beq.n	800f07a <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800f06c:	68f9      	ldr	r1, [r7, #12]
 800f06e:	2008      	movs	r0, #8
 800f070:	f000 fd78 	bl	800fb64 <memp_free>
    return ERR_MEM;
 800f074:	f04f 33ff 	mov.w	r3, #4294967295
 800f078:	e000      	b.n	800f07c <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800f07a:	2300      	movs	r3, #0
}
 800f07c:	4618      	mov	r0, r3
 800f07e:	3710      	adds	r7, #16
 800f080:	46bd      	mov	sp, r7
 800f082:	bd80      	pop	{r7, pc}
 800f084:	20006948 	.word	0x20006948
 800f088:	0801c37c 	.word	0x0801c37c
 800f08c:	0801c3f4 	.word	0x0801c3f4
 800f090:	0801c3cc 	.word	0x0801c3cc

0800f094 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b084      	sub	sp, #16
 800f098:	af00      	add	r7, sp, #0
 800f09a:	60f8      	str	r0, [r7, #12]
 800f09c:	60b9      	str	r1, [r7, #8]
 800f09e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800f0a0:	4806      	ldr	r0, [pc, #24]	; (800f0bc <tcpip_send_msg_wait_sem+0x28>)
 800f0a2:	f00b f8a7 	bl	801a1f4 <sys_mutex_lock>
  fn(apimsg);
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	68b8      	ldr	r0, [r7, #8]
 800f0aa:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800f0ac:	4803      	ldr	r0, [pc, #12]	; (800f0bc <tcpip_send_msg_wait_sem+0x28>)
 800f0ae:	f00b f8b0 	bl	801a212 <sys_mutex_unlock>
  return ERR_OK;
 800f0b2:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800f0b4:	4618      	mov	r0, r3
 800f0b6:	3710      	adds	r7, #16
 800f0b8:	46bd      	mov	sp, r7
 800f0ba:	bd80      	pop	{r7, pc}
 800f0bc:	2000a62c 	.word	0x2000a62c

0800f0c0 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b084      	sub	sp, #16
 800f0c4:	af02      	add	r7, sp, #8
 800f0c6:	6078      	str	r0, [r7, #4]
 800f0c8:	6039      	str	r1, [r7, #0]
  lwip_init();
 800f0ca:	f000 f871 	bl	800f1b0 <lwip_init>

  tcpip_init_done = initfunc;
 800f0ce:	4a17      	ldr	r2, [pc, #92]	; (800f12c <tcpip_init+0x6c>)
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800f0d4:	4a16      	ldr	r2, [pc, #88]	; (800f130 <tcpip_init+0x70>)
 800f0d6:	683b      	ldr	r3, [r7, #0]
 800f0d8:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800f0da:	2106      	movs	r1, #6
 800f0dc:	4815      	ldr	r0, [pc, #84]	; (800f134 <tcpip_init+0x74>)
 800f0de:	f00a ff07 	bl	8019ef0 <sys_mbox_new>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d006      	beq.n	800f0f6 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800f0e8:	4b13      	ldr	r3, [pc, #76]	; (800f138 <tcpip_init+0x78>)
 800f0ea:	f240 2261 	movw	r2, #609	; 0x261
 800f0ee:	4913      	ldr	r1, [pc, #76]	; (800f13c <tcpip_init+0x7c>)
 800f0f0:	4813      	ldr	r0, [pc, #76]	; (800f140 <tcpip_init+0x80>)
 800f0f2:	f00b fae9 	bl	801a6c8 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800f0f6:	4813      	ldr	r0, [pc, #76]	; (800f144 <tcpip_init+0x84>)
 800f0f8:	f00b f860 	bl	801a1bc <sys_mutex_new>
 800f0fc:	4603      	mov	r3, r0
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d006      	beq.n	800f110 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800f102:	4b0d      	ldr	r3, [pc, #52]	; (800f138 <tcpip_init+0x78>)
 800f104:	f240 2265 	movw	r2, #613	; 0x265
 800f108:	490f      	ldr	r1, [pc, #60]	; (800f148 <tcpip_init+0x88>)
 800f10a:	480d      	ldr	r0, [pc, #52]	; (800f140 <tcpip_init+0x80>)
 800f10c:	f00b fadc 	bl	801a6c8 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800f110:	2300      	movs	r3, #0
 800f112:	9300      	str	r3, [sp, #0]
 800f114:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f118:	2200      	movs	r2, #0
 800f11a:	490c      	ldr	r1, [pc, #48]	; (800f14c <tcpip_init+0x8c>)
 800f11c:	480c      	ldr	r0, [pc, #48]	; (800f150 <tcpip_init+0x90>)
 800f11e:	f00b f885 	bl	801a22c <sys_thread_new>
}
 800f122:	bf00      	nop
 800f124:	3708      	adds	r7, #8
 800f126:	46bd      	mov	sp, r7
 800f128:	bd80      	pop	{r7, pc}
 800f12a:	bf00      	nop
 800f12c:	20006940 	.word	0x20006940
 800f130:	20006944 	.word	0x20006944
 800f134:	20006948 	.word	0x20006948
 800f138:	0801c37c 	.word	0x0801c37c
 800f13c:	0801c404 	.word	0x0801c404
 800f140:	0801c3cc 	.word	0x0801c3cc
 800f144:	2000a62c 	.word	0x2000a62c
 800f148:	0801c428 	.word	0x0801c428
 800f14c:	0800ee51 	.word	0x0800ee51
 800f150:	0801c44c 	.word	0x0801c44c

0800f154 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800f154:	b480      	push	{r7}
 800f156:	b083      	sub	sp, #12
 800f158:	af00      	add	r7, sp, #0
 800f15a:	4603      	mov	r3, r0
 800f15c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800f15e:	88fb      	ldrh	r3, [r7, #6]
 800f160:	021b      	lsls	r3, r3, #8
 800f162:	b21a      	sxth	r2, r3
 800f164:	88fb      	ldrh	r3, [r7, #6]
 800f166:	0a1b      	lsrs	r3, r3, #8
 800f168:	b29b      	uxth	r3, r3
 800f16a:	b21b      	sxth	r3, r3
 800f16c:	4313      	orrs	r3, r2
 800f16e:	b21b      	sxth	r3, r3
 800f170:	b29b      	uxth	r3, r3
}
 800f172:	4618      	mov	r0, r3
 800f174:	370c      	adds	r7, #12
 800f176:	46bd      	mov	sp, r7
 800f178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f17c:	4770      	bx	lr

0800f17e <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800f17e:	b480      	push	{r7}
 800f180:	b083      	sub	sp, #12
 800f182:	af00      	add	r7, sp, #0
 800f184:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	061a      	lsls	r2, r3, #24
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	021b      	lsls	r3, r3, #8
 800f18e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f192:	431a      	orrs	r2, r3
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	0a1b      	lsrs	r3, r3, #8
 800f198:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f19c:	431a      	orrs	r2, r3
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	0e1b      	lsrs	r3, r3, #24
 800f1a2:	4313      	orrs	r3, r2
}
 800f1a4:	4618      	mov	r0, r3
 800f1a6:	370c      	adds	r7, #12
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ae:	4770      	bx	lr

0800f1b0 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800f1b0:	b580      	push	{r7, lr}
 800f1b2:	b082      	sub	sp, #8
 800f1b4:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800f1ba:	f00a fff1 	bl	801a1a0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800f1be:	f000 f8d5 	bl	800f36c <mem_init>
  memp_init();
 800f1c2:	f000 fc31 	bl	800fa28 <memp_init>
  pbuf_init();
  netif_init();
 800f1c6:	f000 fcf7 	bl	800fbb8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800f1ca:	f007 fee7 	bl	8016f9c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800f1ce:	f001 fdb3 	bl	8010d38 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800f1d2:	f007 fe29 	bl	8016e28 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800f1d6:	bf00      	nop
 800f1d8:	3708      	adds	r7, #8
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}
	...

0800f1e0 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800f1e0:	b480      	push	{r7}
 800f1e2:	b083      	sub	sp, #12
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	4603      	mov	r3, r0
 800f1e8:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800f1ea:	4b05      	ldr	r3, [pc, #20]	; (800f200 <ptr_to_mem+0x20>)
 800f1ec:	681a      	ldr	r2, [r3, #0]
 800f1ee:	88fb      	ldrh	r3, [r7, #6]
 800f1f0:	4413      	add	r3, r2
}
 800f1f2:	4618      	mov	r0, r3
 800f1f4:	370c      	adds	r7, #12
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fc:	4770      	bx	lr
 800f1fe:	bf00      	nop
 800f200:	2000694c 	.word	0x2000694c

0800f204 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800f204:	b480      	push	{r7}
 800f206:	b083      	sub	sp, #12
 800f208:	af00      	add	r7, sp, #0
 800f20a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800f20c:	4b05      	ldr	r3, [pc, #20]	; (800f224 <mem_to_ptr+0x20>)
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	687a      	ldr	r2, [r7, #4]
 800f212:	1ad3      	subs	r3, r2, r3
 800f214:	b29b      	uxth	r3, r3
}
 800f216:	4618      	mov	r0, r3
 800f218:	370c      	adds	r7, #12
 800f21a:	46bd      	mov	sp, r7
 800f21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f220:	4770      	bx	lr
 800f222:	bf00      	nop
 800f224:	2000694c 	.word	0x2000694c

0800f228 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800f228:	b590      	push	{r4, r7, lr}
 800f22a:	b085      	sub	sp, #20
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800f230:	4b45      	ldr	r3, [pc, #276]	; (800f348 <plug_holes+0x120>)
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	687a      	ldr	r2, [r7, #4]
 800f236:	429a      	cmp	r2, r3
 800f238:	d206      	bcs.n	800f248 <plug_holes+0x20>
 800f23a:	4b44      	ldr	r3, [pc, #272]	; (800f34c <plug_holes+0x124>)
 800f23c:	f240 12df 	movw	r2, #479	; 0x1df
 800f240:	4943      	ldr	r1, [pc, #268]	; (800f350 <plug_holes+0x128>)
 800f242:	4844      	ldr	r0, [pc, #272]	; (800f354 <plug_holes+0x12c>)
 800f244:	f00b fa40 	bl	801a6c8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800f248:	4b43      	ldr	r3, [pc, #268]	; (800f358 <plug_holes+0x130>)
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	687a      	ldr	r2, [r7, #4]
 800f24e:	429a      	cmp	r2, r3
 800f250:	d306      	bcc.n	800f260 <plug_holes+0x38>
 800f252:	4b3e      	ldr	r3, [pc, #248]	; (800f34c <plug_holes+0x124>)
 800f254:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800f258:	4940      	ldr	r1, [pc, #256]	; (800f35c <plug_holes+0x134>)
 800f25a:	483e      	ldr	r0, [pc, #248]	; (800f354 <plug_holes+0x12c>)
 800f25c:	f00b fa34 	bl	801a6c8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	791b      	ldrb	r3, [r3, #4]
 800f264:	2b00      	cmp	r3, #0
 800f266:	d006      	beq.n	800f276 <plug_holes+0x4e>
 800f268:	4b38      	ldr	r3, [pc, #224]	; (800f34c <plug_holes+0x124>)
 800f26a:	f240 12e1 	movw	r2, #481	; 0x1e1
 800f26e:	493c      	ldr	r1, [pc, #240]	; (800f360 <plug_holes+0x138>)
 800f270:	4838      	ldr	r0, [pc, #224]	; (800f354 <plug_holes+0x12c>)
 800f272:	f00b fa29 	bl	801a6c8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	881b      	ldrh	r3, [r3, #0]
 800f27a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f27e:	d906      	bls.n	800f28e <plug_holes+0x66>
 800f280:	4b32      	ldr	r3, [pc, #200]	; (800f34c <plug_holes+0x124>)
 800f282:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800f286:	4937      	ldr	r1, [pc, #220]	; (800f364 <plug_holes+0x13c>)
 800f288:	4832      	ldr	r0, [pc, #200]	; (800f354 <plug_holes+0x12c>)
 800f28a:	f00b fa1d 	bl	801a6c8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	881b      	ldrh	r3, [r3, #0]
 800f292:	4618      	mov	r0, r3
 800f294:	f7ff ffa4 	bl	800f1e0 <ptr_to_mem>
 800f298:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800f29a:	687a      	ldr	r2, [r7, #4]
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	429a      	cmp	r2, r3
 800f2a0:	d024      	beq.n	800f2ec <plug_holes+0xc4>
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	791b      	ldrb	r3, [r3, #4]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d120      	bne.n	800f2ec <plug_holes+0xc4>
 800f2aa:	4b2b      	ldr	r3, [pc, #172]	; (800f358 <plug_holes+0x130>)
 800f2ac:	681b      	ldr	r3, [r3, #0]
 800f2ae:	68fa      	ldr	r2, [r7, #12]
 800f2b0:	429a      	cmp	r2, r3
 800f2b2:	d01b      	beq.n	800f2ec <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800f2b4:	4b2c      	ldr	r3, [pc, #176]	; (800f368 <plug_holes+0x140>)
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	68fa      	ldr	r2, [r7, #12]
 800f2ba:	429a      	cmp	r2, r3
 800f2bc:	d102      	bne.n	800f2c4 <plug_holes+0x9c>
      lfree = mem;
 800f2be:	4a2a      	ldr	r2, [pc, #168]	; (800f368 <plug_holes+0x140>)
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800f2c4:	68fb      	ldr	r3, [r7, #12]
 800f2c6:	881a      	ldrh	r2, [r3, #0]
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800f2cc:	68fb      	ldr	r3, [r7, #12]
 800f2ce:	881b      	ldrh	r3, [r3, #0]
 800f2d0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f2d4:	d00a      	beq.n	800f2ec <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	881b      	ldrh	r3, [r3, #0]
 800f2da:	4618      	mov	r0, r3
 800f2dc:	f7ff ff80 	bl	800f1e0 <ptr_to_mem>
 800f2e0:	4604      	mov	r4, r0
 800f2e2:	6878      	ldr	r0, [r7, #4]
 800f2e4:	f7ff ff8e 	bl	800f204 <mem_to_ptr>
 800f2e8:	4603      	mov	r3, r0
 800f2ea:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	885b      	ldrh	r3, [r3, #2]
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f7ff ff75 	bl	800f1e0 <ptr_to_mem>
 800f2f6:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800f2f8:	68ba      	ldr	r2, [r7, #8]
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	429a      	cmp	r2, r3
 800f2fe:	d01f      	beq.n	800f340 <plug_holes+0x118>
 800f300:	68bb      	ldr	r3, [r7, #8]
 800f302:	791b      	ldrb	r3, [r3, #4]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d11b      	bne.n	800f340 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800f308:	4b17      	ldr	r3, [pc, #92]	; (800f368 <plug_holes+0x140>)
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	687a      	ldr	r2, [r7, #4]
 800f30e:	429a      	cmp	r2, r3
 800f310:	d102      	bne.n	800f318 <plug_holes+0xf0>
      lfree = pmem;
 800f312:	4a15      	ldr	r2, [pc, #84]	; (800f368 <plug_holes+0x140>)
 800f314:	68bb      	ldr	r3, [r7, #8]
 800f316:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	881a      	ldrh	r2, [r3, #0]
 800f31c:	68bb      	ldr	r3, [r7, #8]
 800f31e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	881b      	ldrh	r3, [r3, #0]
 800f324:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f328:	d00a      	beq.n	800f340 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	881b      	ldrh	r3, [r3, #0]
 800f32e:	4618      	mov	r0, r3
 800f330:	f7ff ff56 	bl	800f1e0 <ptr_to_mem>
 800f334:	4604      	mov	r4, r0
 800f336:	68b8      	ldr	r0, [r7, #8]
 800f338:	f7ff ff64 	bl	800f204 <mem_to_ptr>
 800f33c:	4603      	mov	r3, r0
 800f33e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800f340:	bf00      	nop
 800f342:	3714      	adds	r7, #20
 800f344:	46bd      	mov	sp, r7
 800f346:	bd90      	pop	{r4, r7, pc}
 800f348:	2000694c 	.word	0x2000694c
 800f34c:	0801c45c 	.word	0x0801c45c
 800f350:	0801c48c 	.word	0x0801c48c
 800f354:	0801c4a4 	.word	0x0801c4a4
 800f358:	20006950 	.word	0x20006950
 800f35c:	0801c4cc 	.word	0x0801c4cc
 800f360:	0801c4e8 	.word	0x0801c4e8
 800f364:	0801c504 	.word	0x0801c504
 800f368:	20006958 	.word	0x20006958

0800f36c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b082      	sub	sp, #8
 800f370:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800f372:	4b1f      	ldr	r3, [pc, #124]	; (800f3f0 <mem_init+0x84>)
 800f374:	3303      	adds	r3, #3
 800f376:	f023 0303 	bic.w	r3, r3, #3
 800f37a:	461a      	mov	r2, r3
 800f37c:	4b1d      	ldr	r3, [pc, #116]	; (800f3f4 <mem_init+0x88>)
 800f37e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800f380:	4b1c      	ldr	r3, [pc, #112]	; (800f3f4 <mem_init+0x88>)
 800f382:	681b      	ldr	r3, [r3, #0]
 800f384:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f38c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	2200      	movs	r2, #0
 800f392:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2200      	movs	r2, #0
 800f398:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800f39a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800f39e:	f7ff ff1f 	bl	800f1e0 <ptr_to_mem>
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	4a14      	ldr	r2, [pc, #80]	; (800f3f8 <mem_init+0x8c>)
 800f3a6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800f3a8:	4b13      	ldr	r3, [pc, #76]	; (800f3f8 <mem_init+0x8c>)
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	2201      	movs	r2, #1
 800f3ae:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800f3b0:	4b11      	ldr	r3, [pc, #68]	; (800f3f8 <mem_init+0x8c>)
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f3b8:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800f3ba:	4b0f      	ldr	r3, [pc, #60]	; (800f3f8 <mem_init+0x8c>)
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800f3c2:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800f3c4:	4b0b      	ldr	r3, [pc, #44]	; (800f3f4 <mem_init+0x88>)
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	4a0c      	ldr	r2, [pc, #48]	; (800f3fc <mem_init+0x90>)
 800f3ca:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800f3cc:	480c      	ldr	r0, [pc, #48]	; (800f400 <mem_init+0x94>)
 800f3ce:	f00a fef5 	bl	801a1bc <sys_mutex_new>
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	2b00      	cmp	r3, #0
 800f3d6:	d006      	beq.n	800f3e6 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800f3d8:	4b0a      	ldr	r3, [pc, #40]	; (800f404 <mem_init+0x98>)
 800f3da:	f240 221f 	movw	r2, #543	; 0x21f
 800f3de:	490a      	ldr	r1, [pc, #40]	; (800f408 <mem_init+0x9c>)
 800f3e0:	480a      	ldr	r0, [pc, #40]	; (800f40c <mem_init+0xa0>)
 800f3e2:	f00b f971 	bl	801a6c8 <iprintf>
  }
}
 800f3e6:	bf00      	nop
 800f3e8:	3708      	adds	r7, #8
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	bd80      	pop	{r7, pc}
 800f3ee:	bf00      	nop
 800f3f0:	2000a648 	.word	0x2000a648
 800f3f4:	2000694c 	.word	0x2000694c
 800f3f8:	20006950 	.word	0x20006950
 800f3fc:	20006958 	.word	0x20006958
 800f400:	20006954 	.word	0x20006954
 800f404:	0801c45c 	.word	0x0801c45c
 800f408:	0801c530 	.word	0x0801c530
 800f40c:	0801c4a4 	.word	0x0801c4a4

0800f410 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b086      	sub	sp, #24
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800f418:	6878      	ldr	r0, [r7, #4]
 800f41a:	f7ff fef3 	bl	800f204 <mem_to_ptr>
 800f41e:	4603      	mov	r3, r0
 800f420:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	881b      	ldrh	r3, [r3, #0]
 800f426:	4618      	mov	r0, r3
 800f428:	f7ff feda 	bl	800f1e0 <ptr_to_mem>
 800f42c:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	885b      	ldrh	r3, [r3, #2]
 800f432:	4618      	mov	r0, r3
 800f434:	f7ff fed4 	bl	800f1e0 <ptr_to_mem>
 800f438:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	881b      	ldrh	r3, [r3, #0]
 800f43e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f442:	d818      	bhi.n	800f476 <mem_link_valid+0x66>
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	885b      	ldrh	r3, [r3, #2]
 800f448:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f44c:	d813      	bhi.n	800f476 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800f452:	8afa      	ldrh	r2, [r7, #22]
 800f454:	429a      	cmp	r2, r3
 800f456:	d004      	beq.n	800f462 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	881b      	ldrh	r3, [r3, #0]
 800f45c:	8afa      	ldrh	r2, [r7, #22]
 800f45e:	429a      	cmp	r2, r3
 800f460:	d109      	bne.n	800f476 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f462:	4b08      	ldr	r3, [pc, #32]	; (800f484 <mem_link_valid+0x74>)
 800f464:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800f466:	693a      	ldr	r2, [r7, #16]
 800f468:	429a      	cmp	r2, r3
 800f46a:	d006      	beq.n	800f47a <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800f46c:	693b      	ldr	r3, [r7, #16]
 800f46e:	885b      	ldrh	r3, [r3, #2]
 800f470:	8afa      	ldrh	r2, [r7, #22]
 800f472:	429a      	cmp	r2, r3
 800f474:	d001      	beq.n	800f47a <mem_link_valid+0x6a>
    return 0;
 800f476:	2300      	movs	r3, #0
 800f478:	e000      	b.n	800f47c <mem_link_valid+0x6c>
  }
  return 1;
 800f47a:	2301      	movs	r3, #1
}
 800f47c:	4618      	mov	r0, r3
 800f47e:	3718      	adds	r7, #24
 800f480:	46bd      	mov	sp, r7
 800f482:	bd80      	pop	{r7, pc}
 800f484:	20006950 	.word	0x20006950

0800f488 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800f488:	b580      	push	{r7, lr}
 800f48a:	b088      	sub	sp, #32
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d070      	beq.n	800f578 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	f003 0303 	and.w	r3, r3, #3
 800f49c:	2b00      	cmp	r3, #0
 800f49e:	d00d      	beq.n	800f4bc <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800f4a0:	4b37      	ldr	r3, [pc, #220]	; (800f580 <mem_free+0xf8>)
 800f4a2:	f240 2273 	movw	r2, #627	; 0x273
 800f4a6:	4937      	ldr	r1, [pc, #220]	; (800f584 <mem_free+0xfc>)
 800f4a8:	4837      	ldr	r0, [pc, #220]	; (800f588 <mem_free+0x100>)
 800f4aa:	f00b f90d 	bl	801a6c8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f4ae:	f00a fee3 	bl	801a278 <sys_arch_protect>
 800f4b2:	60f8      	str	r0, [r7, #12]
 800f4b4:	68f8      	ldr	r0, [r7, #12]
 800f4b6:	f00a feed 	bl	801a294 <sys_arch_unprotect>
    return;
 800f4ba:	e05e      	b.n	800f57a <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	3b08      	subs	r3, #8
 800f4c0:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800f4c2:	4b32      	ldr	r3, [pc, #200]	; (800f58c <mem_free+0x104>)
 800f4c4:	681b      	ldr	r3, [r3, #0]
 800f4c6:	69fa      	ldr	r2, [r7, #28]
 800f4c8:	429a      	cmp	r2, r3
 800f4ca:	d306      	bcc.n	800f4da <mem_free+0x52>
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	f103 020c 	add.w	r2, r3, #12
 800f4d2:	4b2f      	ldr	r3, [pc, #188]	; (800f590 <mem_free+0x108>)
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	429a      	cmp	r2, r3
 800f4d8:	d90d      	bls.n	800f4f6 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800f4da:	4b29      	ldr	r3, [pc, #164]	; (800f580 <mem_free+0xf8>)
 800f4dc:	f240 227f 	movw	r2, #639	; 0x27f
 800f4e0:	492c      	ldr	r1, [pc, #176]	; (800f594 <mem_free+0x10c>)
 800f4e2:	4829      	ldr	r0, [pc, #164]	; (800f588 <mem_free+0x100>)
 800f4e4:	f00b f8f0 	bl	801a6c8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f4e8:	f00a fec6 	bl	801a278 <sys_arch_protect>
 800f4ec:	6138      	str	r0, [r7, #16]
 800f4ee:	6938      	ldr	r0, [r7, #16]
 800f4f0:	f00a fed0 	bl	801a294 <sys_arch_unprotect>
    return;
 800f4f4:	e041      	b.n	800f57a <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f4f6:	4828      	ldr	r0, [pc, #160]	; (800f598 <mem_free+0x110>)
 800f4f8:	f00a fe7c 	bl	801a1f4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800f4fc:	69fb      	ldr	r3, [r7, #28]
 800f4fe:	791b      	ldrb	r3, [r3, #4]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d110      	bne.n	800f526 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800f504:	4b1e      	ldr	r3, [pc, #120]	; (800f580 <mem_free+0xf8>)
 800f506:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800f50a:	4924      	ldr	r1, [pc, #144]	; (800f59c <mem_free+0x114>)
 800f50c:	481e      	ldr	r0, [pc, #120]	; (800f588 <mem_free+0x100>)
 800f50e:	f00b f8db 	bl	801a6c8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f512:	4821      	ldr	r0, [pc, #132]	; (800f598 <mem_free+0x110>)
 800f514:	f00a fe7d 	bl	801a212 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f518:	f00a feae 	bl	801a278 <sys_arch_protect>
 800f51c:	6178      	str	r0, [r7, #20]
 800f51e:	6978      	ldr	r0, [r7, #20]
 800f520:	f00a feb8 	bl	801a294 <sys_arch_unprotect>
    return;
 800f524:	e029      	b.n	800f57a <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800f526:	69f8      	ldr	r0, [r7, #28]
 800f528:	f7ff ff72 	bl	800f410 <mem_link_valid>
 800f52c:	4603      	mov	r3, r0
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d110      	bne.n	800f554 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800f532:	4b13      	ldr	r3, [pc, #76]	; (800f580 <mem_free+0xf8>)
 800f534:	f240 2295 	movw	r2, #661	; 0x295
 800f538:	4919      	ldr	r1, [pc, #100]	; (800f5a0 <mem_free+0x118>)
 800f53a:	4813      	ldr	r0, [pc, #76]	; (800f588 <mem_free+0x100>)
 800f53c:	f00b f8c4 	bl	801a6c8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800f540:	4815      	ldr	r0, [pc, #84]	; (800f598 <mem_free+0x110>)
 800f542:	f00a fe66 	bl	801a212 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f546:	f00a fe97 	bl	801a278 <sys_arch_protect>
 800f54a:	61b8      	str	r0, [r7, #24]
 800f54c:	69b8      	ldr	r0, [r7, #24]
 800f54e:	f00a fea1 	bl	801a294 <sys_arch_unprotect>
    return;
 800f552:	e012      	b.n	800f57a <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800f554:	69fb      	ldr	r3, [r7, #28]
 800f556:	2200      	movs	r2, #0
 800f558:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800f55a:	4b12      	ldr	r3, [pc, #72]	; (800f5a4 <mem_free+0x11c>)
 800f55c:	681b      	ldr	r3, [r3, #0]
 800f55e:	69fa      	ldr	r2, [r7, #28]
 800f560:	429a      	cmp	r2, r3
 800f562:	d202      	bcs.n	800f56a <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800f564:	4a0f      	ldr	r2, [pc, #60]	; (800f5a4 <mem_free+0x11c>)
 800f566:	69fb      	ldr	r3, [r7, #28]
 800f568:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800f56a:	69f8      	ldr	r0, [r7, #28]
 800f56c:	f7ff fe5c 	bl	800f228 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f570:	4809      	ldr	r0, [pc, #36]	; (800f598 <mem_free+0x110>)
 800f572:	f00a fe4e 	bl	801a212 <sys_mutex_unlock>
 800f576:	e000      	b.n	800f57a <mem_free+0xf2>
    return;
 800f578:	bf00      	nop
}
 800f57a:	3720      	adds	r7, #32
 800f57c:	46bd      	mov	sp, r7
 800f57e:	bd80      	pop	{r7, pc}
 800f580:	0801c45c 	.word	0x0801c45c
 800f584:	0801c54c 	.word	0x0801c54c
 800f588:	0801c4a4 	.word	0x0801c4a4
 800f58c:	2000694c 	.word	0x2000694c
 800f590:	20006950 	.word	0x20006950
 800f594:	0801c570 	.word	0x0801c570
 800f598:	20006954 	.word	0x20006954
 800f59c:	0801c58c 	.word	0x0801c58c
 800f5a0:	0801c5b4 	.word	0x0801c5b4
 800f5a4:	20006958 	.word	0x20006958

0800f5a8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b088      	sub	sp, #32
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
 800f5b0:	460b      	mov	r3, r1
 800f5b2:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800f5b4:	887b      	ldrh	r3, [r7, #2]
 800f5b6:	3303      	adds	r3, #3
 800f5b8:	b29b      	uxth	r3, r3
 800f5ba:	f023 0303 	bic.w	r3, r3, #3
 800f5be:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800f5c0:	8bfb      	ldrh	r3, [r7, #30]
 800f5c2:	2b0b      	cmp	r3, #11
 800f5c4:	d801      	bhi.n	800f5ca <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800f5c6:	230c      	movs	r3, #12
 800f5c8:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800f5ca:	8bfb      	ldrh	r3, [r7, #30]
 800f5cc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f5d0:	d803      	bhi.n	800f5da <mem_trim+0x32>
 800f5d2:	8bfa      	ldrh	r2, [r7, #30]
 800f5d4:	887b      	ldrh	r3, [r7, #2]
 800f5d6:	429a      	cmp	r2, r3
 800f5d8:	d201      	bcs.n	800f5de <mem_trim+0x36>
    return NULL;
 800f5da:	2300      	movs	r3, #0
 800f5dc:	e0d8      	b.n	800f790 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800f5de:	4b6e      	ldr	r3, [pc, #440]	; (800f798 <mem_trim+0x1f0>)
 800f5e0:	681b      	ldr	r3, [r3, #0]
 800f5e2:	687a      	ldr	r2, [r7, #4]
 800f5e4:	429a      	cmp	r2, r3
 800f5e6:	d304      	bcc.n	800f5f2 <mem_trim+0x4a>
 800f5e8:	4b6c      	ldr	r3, [pc, #432]	; (800f79c <mem_trim+0x1f4>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	687a      	ldr	r2, [r7, #4]
 800f5ee:	429a      	cmp	r2, r3
 800f5f0:	d306      	bcc.n	800f600 <mem_trim+0x58>
 800f5f2:	4b6b      	ldr	r3, [pc, #428]	; (800f7a0 <mem_trim+0x1f8>)
 800f5f4:	f240 22d1 	movw	r2, #721	; 0x2d1
 800f5f8:	496a      	ldr	r1, [pc, #424]	; (800f7a4 <mem_trim+0x1fc>)
 800f5fa:	486b      	ldr	r0, [pc, #428]	; (800f7a8 <mem_trim+0x200>)
 800f5fc:	f00b f864 	bl	801a6c8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800f600:	4b65      	ldr	r3, [pc, #404]	; (800f798 <mem_trim+0x1f0>)
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	687a      	ldr	r2, [r7, #4]
 800f606:	429a      	cmp	r2, r3
 800f608:	d304      	bcc.n	800f614 <mem_trim+0x6c>
 800f60a:	4b64      	ldr	r3, [pc, #400]	; (800f79c <mem_trim+0x1f4>)
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	687a      	ldr	r2, [r7, #4]
 800f610:	429a      	cmp	r2, r3
 800f612:	d307      	bcc.n	800f624 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800f614:	f00a fe30 	bl	801a278 <sys_arch_protect>
 800f618:	60b8      	str	r0, [r7, #8]
 800f61a:	68b8      	ldr	r0, [r7, #8]
 800f61c:	f00a fe3a 	bl	801a294 <sys_arch_unprotect>
    return rmem;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	e0b5      	b.n	800f790 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	3b08      	subs	r3, #8
 800f628:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800f62a:	69b8      	ldr	r0, [r7, #24]
 800f62c:	f7ff fdea 	bl	800f204 <mem_to_ptr>
 800f630:	4603      	mov	r3, r0
 800f632:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800f634:	69bb      	ldr	r3, [r7, #24]
 800f636:	881a      	ldrh	r2, [r3, #0]
 800f638:	8afb      	ldrh	r3, [r7, #22]
 800f63a:	1ad3      	subs	r3, r2, r3
 800f63c:	b29b      	uxth	r3, r3
 800f63e:	3b08      	subs	r3, #8
 800f640:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800f642:	8bfa      	ldrh	r2, [r7, #30]
 800f644:	8abb      	ldrh	r3, [r7, #20]
 800f646:	429a      	cmp	r2, r3
 800f648:	d906      	bls.n	800f658 <mem_trim+0xb0>
 800f64a:	4b55      	ldr	r3, [pc, #340]	; (800f7a0 <mem_trim+0x1f8>)
 800f64c:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800f650:	4956      	ldr	r1, [pc, #344]	; (800f7ac <mem_trim+0x204>)
 800f652:	4855      	ldr	r0, [pc, #340]	; (800f7a8 <mem_trim+0x200>)
 800f654:	f00b f838 	bl	801a6c8 <iprintf>
  if (newsize > size) {
 800f658:	8bfa      	ldrh	r2, [r7, #30]
 800f65a:	8abb      	ldrh	r3, [r7, #20]
 800f65c:	429a      	cmp	r2, r3
 800f65e:	d901      	bls.n	800f664 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800f660:	2300      	movs	r3, #0
 800f662:	e095      	b.n	800f790 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800f664:	8bfa      	ldrh	r2, [r7, #30]
 800f666:	8abb      	ldrh	r3, [r7, #20]
 800f668:	429a      	cmp	r2, r3
 800f66a:	d101      	bne.n	800f670 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	e08f      	b.n	800f790 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800f670:	484f      	ldr	r0, [pc, #316]	; (800f7b0 <mem_trim+0x208>)
 800f672:	f00a fdbf 	bl	801a1f4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800f676:	69bb      	ldr	r3, [r7, #24]
 800f678:	881b      	ldrh	r3, [r3, #0]
 800f67a:	4618      	mov	r0, r3
 800f67c:	f7ff fdb0 	bl	800f1e0 <ptr_to_mem>
 800f680:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800f682:	693b      	ldr	r3, [r7, #16]
 800f684:	791b      	ldrb	r3, [r3, #4]
 800f686:	2b00      	cmp	r3, #0
 800f688:	d13f      	bne.n	800f70a <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f68a:	69bb      	ldr	r3, [r7, #24]
 800f68c:	881b      	ldrh	r3, [r3, #0]
 800f68e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f692:	d106      	bne.n	800f6a2 <mem_trim+0xfa>
 800f694:	4b42      	ldr	r3, [pc, #264]	; (800f7a0 <mem_trim+0x1f8>)
 800f696:	f240 22f5 	movw	r2, #757	; 0x2f5
 800f69a:	4946      	ldr	r1, [pc, #280]	; (800f7b4 <mem_trim+0x20c>)
 800f69c:	4842      	ldr	r0, [pc, #264]	; (800f7a8 <mem_trim+0x200>)
 800f69e:	f00b f813 	bl	801a6c8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800f6a2:	693b      	ldr	r3, [r7, #16]
 800f6a4:	881b      	ldrh	r3, [r3, #0]
 800f6a6:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f6a8:	8afa      	ldrh	r2, [r7, #22]
 800f6aa:	8bfb      	ldrh	r3, [r7, #30]
 800f6ac:	4413      	add	r3, r2
 800f6ae:	b29b      	uxth	r3, r3
 800f6b0:	3308      	adds	r3, #8
 800f6b2:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800f6b4:	4b40      	ldr	r3, [pc, #256]	; (800f7b8 <mem_trim+0x210>)
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	693a      	ldr	r2, [r7, #16]
 800f6ba:	429a      	cmp	r2, r3
 800f6bc:	d106      	bne.n	800f6cc <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800f6be:	89fb      	ldrh	r3, [r7, #14]
 800f6c0:	4618      	mov	r0, r3
 800f6c2:	f7ff fd8d 	bl	800f1e0 <ptr_to_mem>
 800f6c6:	4603      	mov	r3, r0
 800f6c8:	4a3b      	ldr	r2, [pc, #236]	; (800f7b8 <mem_trim+0x210>)
 800f6ca:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800f6cc:	89fb      	ldrh	r3, [r7, #14]
 800f6ce:	4618      	mov	r0, r3
 800f6d0:	f7ff fd86 	bl	800f1e0 <ptr_to_mem>
 800f6d4:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800f6d6:	693b      	ldr	r3, [r7, #16]
 800f6d8:	2200      	movs	r2, #0
 800f6da:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800f6dc:	693b      	ldr	r3, [r7, #16]
 800f6de:	89ba      	ldrh	r2, [r7, #12]
 800f6e0:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800f6e2:	693b      	ldr	r3, [r7, #16]
 800f6e4:	8afa      	ldrh	r2, [r7, #22]
 800f6e6:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800f6e8:	69bb      	ldr	r3, [r7, #24]
 800f6ea:	89fa      	ldrh	r2, [r7, #14]
 800f6ec:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f6ee:	693b      	ldr	r3, [r7, #16]
 800f6f0:	881b      	ldrh	r3, [r3, #0]
 800f6f2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f6f6:	d047      	beq.n	800f788 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f6f8:	693b      	ldr	r3, [r7, #16]
 800f6fa:	881b      	ldrh	r3, [r3, #0]
 800f6fc:	4618      	mov	r0, r3
 800f6fe:	f7ff fd6f 	bl	800f1e0 <ptr_to_mem>
 800f702:	4602      	mov	r2, r0
 800f704:	89fb      	ldrh	r3, [r7, #14]
 800f706:	8053      	strh	r3, [r2, #2]
 800f708:	e03e      	b.n	800f788 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800f70a:	8bfb      	ldrh	r3, [r7, #30]
 800f70c:	f103 0214 	add.w	r2, r3, #20
 800f710:	8abb      	ldrh	r3, [r7, #20]
 800f712:	429a      	cmp	r2, r3
 800f714:	d838      	bhi.n	800f788 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800f716:	8afa      	ldrh	r2, [r7, #22]
 800f718:	8bfb      	ldrh	r3, [r7, #30]
 800f71a:	4413      	add	r3, r2
 800f71c:	b29b      	uxth	r3, r3
 800f71e:	3308      	adds	r3, #8
 800f720:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800f722:	69bb      	ldr	r3, [r7, #24]
 800f724:	881b      	ldrh	r3, [r3, #0]
 800f726:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f72a:	d106      	bne.n	800f73a <mem_trim+0x192>
 800f72c:	4b1c      	ldr	r3, [pc, #112]	; (800f7a0 <mem_trim+0x1f8>)
 800f72e:	f240 3216 	movw	r2, #790	; 0x316
 800f732:	4920      	ldr	r1, [pc, #128]	; (800f7b4 <mem_trim+0x20c>)
 800f734:	481c      	ldr	r0, [pc, #112]	; (800f7a8 <mem_trim+0x200>)
 800f736:	f00a ffc7 	bl	801a6c8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800f73a:	89fb      	ldrh	r3, [r7, #14]
 800f73c:	4618      	mov	r0, r3
 800f73e:	f7ff fd4f 	bl	800f1e0 <ptr_to_mem>
 800f742:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800f744:	4b1c      	ldr	r3, [pc, #112]	; (800f7b8 <mem_trim+0x210>)
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	693a      	ldr	r2, [r7, #16]
 800f74a:	429a      	cmp	r2, r3
 800f74c:	d202      	bcs.n	800f754 <mem_trim+0x1ac>
      lfree = mem2;
 800f74e:	4a1a      	ldr	r2, [pc, #104]	; (800f7b8 <mem_trim+0x210>)
 800f750:	693b      	ldr	r3, [r7, #16]
 800f752:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800f754:	693b      	ldr	r3, [r7, #16]
 800f756:	2200      	movs	r2, #0
 800f758:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800f75a:	69bb      	ldr	r3, [r7, #24]
 800f75c:	881a      	ldrh	r2, [r3, #0]
 800f75e:	693b      	ldr	r3, [r7, #16]
 800f760:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800f762:	693b      	ldr	r3, [r7, #16]
 800f764:	8afa      	ldrh	r2, [r7, #22]
 800f766:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800f768:	69bb      	ldr	r3, [r7, #24]
 800f76a:	89fa      	ldrh	r2, [r7, #14]
 800f76c:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800f76e:	693b      	ldr	r3, [r7, #16]
 800f770:	881b      	ldrh	r3, [r3, #0]
 800f772:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f776:	d007      	beq.n	800f788 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800f778:	693b      	ldr	r3, [r7, #16]
 800f77a:	881b      	ldrh	r3, [r3, #0]
 800f77c:	4618      	mov	r0, r3
 800f77e:	f7ff fd2f 	bl	800f1e0 <ptr_to_mem>
 800f782:	4602      	mov	r2, r0
 800f784:	89fb      	ldrh	r3, [r7, #14]
 800f786:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800f788:	4809      	ldr	r0, [pc, #36]	; (800f7b0 <mem_trim+0x208>)
 800f78a:	f00a fd42 	bl	801a212 <sys_mutex_unlock>
  return rmem;
 800f78e:	687b      	ldr	r3, [r7, #4]
}
 800f790:	4618      	mov	r0, r3
 800f792:	3720      	adds	r7, #32
 800f794:	46bd      	mov	sp, r7
 800f796:	bd80      	pop	{r7, pc}
 800f798:	2000694c 	.word	0x2000694c
 800f79c:	20006950 	.word	0x20006950
 800f7a0:	0801c45c 	.word	0x0801c45c
 800f7a4:	0801c5e8 	.word	0x0801c5e8
 800f7a8:	0801c4a4 	.word	0x0801c4a4
 800f7ac:	0801c600 	.word	0x0801c600
 800f7b0:	20006954 	.word	0x20006954
 800f7b4:	0801c620 	.word	0x0801c620
 800f7b8:	20006958 	.word	0x20006958

0800f7bc <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b088      	sub	sp, #32
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800f7c6:	88fb      	ldrh	r3, [r7, #6]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d101      	bne.n	800f7d0 <mem_malloc+0x14>
    return NULL;
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	e0e2      	b.n	800f996 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800f7d0:	88fb      	ldrh	r3, [r7, #6]
 800f7d2:	3303      	adds	r3, #3
 800f7d4:	b29b      	uxth	r3, r3
 800f7d6:	f023 0303 	bic.w	r3, r3, #3
 800f7da:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800f7dc:	8bbb      	ldrh	r3, [r7, #28]
 800f7de:	2b0b      	cmp	r3, #11
 800f7e0:	d801      	bhi.n	800f7e6 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800f7e2:	230c      	movs	r3, #12
 800f7e4:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800f7e6:	8bbb      	ldrh	r3, [r7, #28]
 800f7e8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f7ec:	d803      	bhi.n	800f7f6 <mem_malloc+0x3a>
 800f7ee:	8bba      	ldrh	r2, [r7, #28]
 800f7f0:	88fb      	ldrh	r3, [r7, #6]
 800f7f2:	429a      	cmp	r2, r3
 800f7f4:	d201      	bcs.n	800f7fa <mem_malloc+0x3e>
    return NULL;
 800f7f6:	2300      	movs	r3, #0
 800f7f8:	e0cd      	b.n	800f996 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800f7fa:	4869      	ldr	r0, [pc, #420]	; (800f9a0 <mem_malloc+0x1e4>)
 800f7fc:	f00a fcfa 	bl	801a1f4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f800:	4b68      	ldr	r3, [pc, #416]	; (800f9a4 <mem_malloc+0x1e8>)
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	4618      	mov	r0, r3
 800f806:	f7ff fcfd 	bl	800f204 <mem_to_ptr>
 800f80a:	4603      	mov	r3, r0
 800f80c:	83fb      	strh	r3, [r7, #30]
 800f80e:	e0b7      	b.n	800f980 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800f810:	8bfb      	ldrh	r3, [r7, #30]
 800f812:	4618      	mov	r0, r3
 800f814:	f7ff fce4 	bl	800f1e0 <ptr_to_mem>
 800f818:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800f81a:	697b      	ldr	r3, [r7, #20]
 800f81c:	791b      	ldrb	r3, [r3, #4]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	f040 80a7 	bne.w	800f972 <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800f824:	697b      	ldr	r3, [r7, #20]
 800f826:	881b      	ldrh	r3, [r3, #0]
 800f828:	461a      	mov	r2, r3
 800f82a:	8bfb      	ldrh	r3, [r7, #30]
 800f82c:	1ad3      	subs	r3, r2, r3
 800f82e:	f1a3 0208 	sub.w	r2, r3, #8
 800f832:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800f834:	429a      	cmp	r2, r3
 800f836:	f0c0 809c 	bcc.w	800f972 <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800f83a:	697b      	ldr	r3, [r7, #20]
 800f83c:	881b      	ldrh	r3, [r3, #0]
 800f83e:	461a      	mov	r2, r3
 800f840:	8bfb      	ldrh	r3, [r7, #30]
 800f842:	1ad3      	subs	r3, r2, r3
 800f844:	f1a3 0208 	sub.w	r2, r3, #8
 800f848:	8bbb      	ldrh	r3, [r7, #28]
 800f84a:	3314      	adds	r3, #20
 800f84c:	429a      	cmp	r2, r3
 800f84e:	d333      	bcc.n	800f8b8 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800f850:	8bfa      	ldrh	r2, [r7, #30]
 800f852:	8bbb      	ldrh	r3, [r7, #28]
 800f854:	4413      	add	r3, r2
 800f856:	b29b      	uxth	r3, r3
 800f858:	3308      	adds	r3, #8
 800f85a:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800f85c:	8a7b      	ldrh	r3, [r7, #18]
 800f85e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f862:	d106      	bne.n	800f872 <mem_malloc+0xb6>
 800f864:	4b50      	ldr	r3, [pc, #320]	; (800f9a8 <mem_malloc+0x1ec>)
 800f866:	f240 3287 	movw	r2, #903	; 0x387
 800f86a:	4950      	ldr	r1, [pc, #320]	; (800f9ac <mem_malloc+0x1f0>)
 800f86c:	4850      	ldr	r0, [pc, #320]	; (800f9b0 <mem_malloc+0x1f4>)
 800f86e:	f00a ff2b 	bl	801a6c8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800f872:	8a7b      	ldrh	r3, [r7, #18]
 800f874:	4618      	mov	r0, r3
 800f876:	f7ff fcb3 	bl	800f1e0 <ptr_to_mem>
 800f87a:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	2200      	movs	r2, #0
 800f880:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800f882:	697b      	ldr	r3, [r7, #20]
 800f884:	881a      	ldrh	r2, [r3, #0]
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	8bfa      	ldrh	r2, [r7, #30]
 800f88e:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800f890:	697b      	ldr	r3, [r7, #20]
 800f892:	8a7a      	ldrh	r2, [r7, #18]
 800f894:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800f896:	697b      	ldr	r3, [r7, #20]
 800f898:	2201      	movs	r2, #1
 800f89a:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	881b      	ldrh	r3, [r3, #0]
 800f8a0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800f8a4:	d00b      	beq.n	800f8be <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	881b      	ldrh	r3, [r3, #0]
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	f7ff fc98 	bl	800f1e0 <ptr_to_mem>
 800f8b0:	4602      	mov	r2, r0
 800f8b2:	8a7b      	ldrh	r3, [r7, #18]
 800f8b4:	8053      	strh	r3, [r2, #2]
 800f8b6:	e002      	b.n	800f8be <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800f8b8:	697b      	ldr	r3, [r7, #20]
 800f8ba:	2201      	movs	r2, #1
 800f8bc:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800f8be:	4b39      	ldr	r3, [pc, #228]	; (800f9a4 <mem_malloc+0x1e8>)
 800f8c0:	681b      	ldr	r3, [r3, #0]
 800f8c2:	697a      	ldr	r2, [r7, #20]
 800f8c4:	429a      	cmp	r2, r3
 800f8c6:	d127      	bne.n	800f918 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800f8c8:	4b36      	ldr	r3, [pc, #216]	; (800f9a4 <mem_malloc+0x1e8>)
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800f8ce:	e005      	b.n	800f8dc <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800f8d0:	69bb      	ldr	r3, [r7, #24]
 800f8d2:	881b      	ldrh	r3, [r3, #0]
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	f7ff fc83 	bl	800f1e0 <ptr_to_mem>
 800f8da:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800f8dc:	69bb      	ldr	r3, [r7, #24]
 800f8de:	791b      	ldrb	r3, [r3, #4]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d004      	beq.n	800f8ee <mem_malloc+0x132>
 800f8e4:	4b33      	ldr	r3, [pc, #204]	; (800f9b4 <mem_malloc+0x1f8>)
 800f8e6:	681b      	ldr	r3, [r3, #0]
 800f8e8:	69ba      	ldr	r2, [r7, #24]
 800f8ea:	429a      	cmp	r2, r3
 800f8ec:	d1f0      	bne.n	800f8d0 <mem_malloc+0x114>
          }
          lfree = cur;
 800f8ee:	4a2d      	ldr	r2, [pc, #180]	; (800f9a4 <mem_malloc+0x1e8>)
 800f8f0:	69bb      	ldr	r3, [r7, #24]
 800f8f2:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800f8f4:	4b2b      	ldr	r3, [pc, #172]	; (800f9a4 <mem_malloc+0x1e8>)
 800f8f6:	681a      	ldr	r2, [r3, #0]
 800f8f8:	4b2e      	ldr	r3, [pc, #184]	; (800f9b4 <mem_malloc+0x1f8>)
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	429a      	cmp	r2, r3
 800f8fe:	d00b      	beq.n	800f918 <mem_malloc+0x15c>
 800f900:	4b28      	ldr	r3, [pc, #160]	; (800f9a4 <mem_malloc+0x1e8>)
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	791b      	ldrb	r3, [r3, #4]
 800f906:	2b00      	cmp	r3, #0
 800f908:	d006      	beq.n	800f918 <mem_malloc+0x15c>
 800f90a:	4b27      	ldr	r3, [pc, #156]	; (800f9a8 <mem_malloc+0x1ec>)
 800f90c:	f240 32b5 	movw	r2, #949	; 0x3b5
 800f910:	4929      	ldr	r1, [pc, #164]	; (800f9b8 <mem_malloc+0x1fc>)
 800f912:	4827      	ldr	r0, [pc, #156]	; (800f9b0 <mem_malloc+0x1f4>)
 800f914:	f00a fed8 	bl	801a6c8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800f918:	4821      	ldr	r0, [pc, #132]	; (800f9a0 <mem_malloc+0x1e4>)
 800f91a:	f00a fc7a 	bl	801a212 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800f91e:	8bba      	ldrh	r2, [r7, #28]
 800f920:	697b      	ldr	r3, [r7, #20]
 800f922:	4413      	add	r3, r2
 800f924:	3308      	adds	r3, #8
 800f926:	4a23      	ldr	r2, [pc, #140]	; (800f9b4 <mem_malloc+0x1f8>)
 800f928:	6812      	ldr	r2, [r2, #0]
 800f92a:	4293      	cmp	r3, r2
 800f92c:	d906      	bls.n	800f93c <mem_malloc+0x180>
 800f92e:	4b1e      	ldr	r3, [pc, #120]	; (800f9a8 <mem_malloc+0x1ec>)
 800f930:	f240 32b9 	movw	r2, #953	; 0x3b9
 800f934:	4921      	ldr	r1, [pc, #132]	; (800f9bc <mem_malloc+0x200>)
 800f936:	481e      	ldr	r0, [pc, #120]	; (800f9b0 <mem_malloc+0x1f4>)
 800f938:	f00a fec6 	bl	801a6c8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800f93c:	697b      	ldr	r3, [r7, #20]
 800f93e:	f003 0303 	and.w	r3, r3, #3
 800f942:	2b00      	cmp	r3, #0
 800f944:	d006      	beq.n	800f954 <mem_malloc+0x198>
 800f946:	4b18      	ldr	r3, [pc, #96]	; (800f9a8 <mem_malloc+0x1ec>)
 800f948:	f240 32bb 	movw	r2, #955	; 0x3bb
 800f94c:	491c      	ldr	r1, [pc, #112]	; (800f9c0 <mem_malloc+0x204>)
 800f94e:	4818      	ldr	r0, [pc, #96]	; (800f9b0 <mem_malloc+0x1f4>)
 800f950:	f00a feba 	bl	801a6c8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800f954:	697b      	ldr	r3, [r7, #20]
 800f956:	f003 0303 	and.w	r3, r3, #3
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d006      	beq.n	800f96c <mem_malloc+0x1b0>
 800f95e:	4b12      	ldr	r3, [pc, #72]	; (800f9a8 <mem_malloc+0x1ec>)
 800f960:	f240 32bd 	movw	r2, #957	; 0x3bd
 800f964:	4917      	ldr	r1, [pc, #92]	; (800f9c4 <mem_malloc+0x208>)
 800f966:	4812      	ldr	r0, [pc, #72]	; (800f9b0 <mem_malloc+0x1f4>)
 800f968:	f00a feae 	bl	801a6c8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800f96c:	697b      	ldr	r3, [r7, #20]
 800f96e:	3308      	adds	r3, #8
 800f970:	e011      	b.n	800f996 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800f972:	8bfb      	ldrh	r3, [r7, #30]
 800f974:	4618      	mov	r0, r3
 800f976:	f7ff fc33 	bl	800f1e0 <ptr_to_mem>
 800f97a:	4603      	mov	r3, r0
 800f97c:	881b      	ldrh	r3, [r3, #0]
 800f97e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800f980:	8bfa      	ldrh	r2, [r7, #30]
 800f982:	8bbb      	ldrh	r3, [r7, #28]
 800f984:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800f988:	429a      	cmp	r2, r3
 800f98a:	f4ff af41 	bcc.w	800f810 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800f98e:	4804      	ldr	r0, [pc, #16]	; (800f9a0 <mem_malloc+0x1e4>)
 800f990:	f00a fc3f 	bl	801a212 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800f994:	2300      	movs	r3, #0
}
 800f996:	4618      	mov	r0, r3
 800f998:	3720      	adds	r7, #32
 800f99a:	46bd      	mov	sp, r7
 800f99c:	bd80      	pop	{r7, pc}
 800f99e:	bf00      	nop
 800f9a0:	20006954 	.word	0x20006954
 800f9a4:	20006958 	.word	0x20006958
 800f9a8:	0801c45c 	.word	0x0801c45c
 800f9ac:	0801c620 	.word	0x0801c620
 800f9b0:	0801c4a4 	.word	0x0801c4a4
 800f9b4:	20006950 	.word	0x20006950
 800f9b8:	0801c634 	.word	0x0801c634
 800f9bc:	0801c650 	.word	0x0801c650
 800f9c0:	0801c680 	.word	0x0801c680
 800f9c4:	0801c6b0 	.word	0x0801c6b0

0800f9c8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800f9c8:	b480      	push	{r7}
 800f9ca:	b085      	sub	sp, #20
 800f9cc:	af00      	add	r7, sp, #0
 800f9ce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	689b      	ldr	r3, [r3, #8]
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	685b      	ldr	r3, [r3, #4]
 800f9dc:	3303      	adds	r3, #3
 800f9de:	f023 0303 	bic.w	r3, r3, #3
 800f9e2:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800f9e4:	2300      	movs	r3, #0
 800f9e6:	60fb      	str	r3, [r7, #12]
 800f9e8:	e011      	b.n	800fa0e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	689b      	ldr	r3, [r3, #8]
 800f9ee:	681a      	ldr	r2, [r3, #0]
 800f9f0:	68bb      	ldr	r3, [r7, #8]
 800f9f2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	689b      	ldr	r3, [r3, #8]
 800f9f8:	68ba      	ldr	r2, [r7, #8]
 800f9fa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	881b      	ldrh	r3, [r3, #0]
 800fa00:	461a      	mov	r2, r3
 800fa02:	68bb      	ldr	r3, [r7, #8]
 800fa04:	4413      	add	r3, r2
 800fa06:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	3301      	adds	r3, #1
 800fa0c:	60fb      	str	r3, [r7, #12]
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	885b      	ldrh	r3, [r3, #2]
 800fa12:	461a      	mov	r2, r3
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	4293      	cmp	r3, r2
 800fa18:	dbe7      	blt.n	800f9ea <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800fa1a:	bf00      	nop
 800fa1c:	bf00      	nop
 800fa1e:	3714      	adds	r7, #20
 800fa20:	46bd      	mov	sp, r7
 800fa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa26:	4770      	bx	lr

0800fa28 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b082      	sub	sp, #8
 800fa2c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800fa2e:	2300      	movs	r3, #0
 800fa30:	80fb      	strh	r3, [r7, #6]
 800fa32:	e009      	b.n	800fa48 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800fa34:	88fb      	ldrh	r3, [r7, #6]
 800fa36:	4a08      	ldr	r2, [pc, #32]	; (800fa58 <memp_init+0x30>)
 800fa38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fa3c:	4618      	mov	r0, r3
 800fa3e:	f7ff ffc3 	bl	800f9c8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800fa42:	88fb      	ldrh	r3, [r7, #6]
 800fa44:	3301      	adds	r3, #1
 800fa46:	80fb      	strh	r3, [r7, #6]
 800fa48:	88fb      	ldrh	r3, [r7, #6]
 800fa4a:	2b0c      	cmp	r3, #12
 800fa4c:	d9f2      	bls.n	800fa34 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800fa4e:	bf00      	nop
 800fa50:	bf00      	nop
 800fa52:	3708      	adds	r7, #8
 800fa54:	46bd      	mov	sp, r7
 800fa56:	bd80      	pop	{r7, pc}
 800fa58:	0801eec4 	.word	0x0801eec4

0800fa5c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b084      	sub	sp, #16
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800fa64:	f00a fc08 	bl	801a278 <sys_arch_protect>
 800fa68:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	689b      	ldr	r3, [r3, #8]
 800fa6e:	681b      	ldr	r3, [r3, #0]
 800fa70:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800fa72:	68bb      	ldr	r3, [r7, #8]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d015      	beq.n	800faa4 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	689b      	ldr	r3, [r3, #8]
 800fa7c:	68ba      	ldr	r2, [r7, #8]
 800fa7e:	6812      	ldr	r2, [r2, #0]
 800fa80:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	f003 0303 	and.w	r3, r3, #3
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d006      	beq.n	800fa9a <do_memp_malloc_pool+0x3e>
 800fa8c:	4b09      	ldr	r3, [pc, #36]	; (800fab4 <do_memp_malloc_pool+0x58>)
 800fa8e:	f44f 728c 	mov.w	r2, #280	; 0x118
 800fa92:	4909      	ldr	r1, [pc, #36]	; (800fab8 <do_memp_malloc_pool+0x5c>)
 800fa94:	4809      	ldr	r0, [pc, #36]	; (800fabc <do_memp_malloc_pool+0x60>)
 800fa96:	f00a fe17 	bl	801a6c8 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800fa9a:	68f8      	ldr	r0, [r7, #12]
 800fa9c:	f00a fbfa 	bl	801a294 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800faa0:	68bb      	ldr	r3, [r7, #8]
 800faa2:	e003      	b.n	800faac <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800faa4:	68f8      	ldr	r0, [r7, #12]
 800faa6:	f00a fbf5 	bl	801a294 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800faaa:	2300      	movs	r3, #0
}
 800faac:	4618      	mov	r0, r3
 800faae:	3710      	adds	r7, #16
 800fab0:	46bd      	mov	sp, r7
 800fab2:	bd80      	pop	{r7, pc}
 800fab4:	0801c6d4 	.word	0x0801c6d4
 800fab8:	0801c704 	.word	0x0801c704
 800fabc:	0801c728 	.word	0x0801c728

0800fac0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b084      	sub	sp, #16
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	4603      	mov	r3, r0
 800fac8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800faca:	79fb      	ldrb	r3, [r7, #7]
 800facc:	2b0c      	cmp	r3, #12
 800face:	d908      	bls.n	800fae2 <memp_malloc+0x22>
 800fad0:	4b0a      	ldr	r3, [pc, #40]	; (800fafc <memp_malloc+0x3c>)
 800fad2:	f240 1257 	movw	r2, #343	; 0x157
 800fad6:	490a      	ldr	r1, [pc, #40]	; (800fb00 <memp_malloc+0x40>)
 800fad8:	480a      	ldr	r0, [pc, #40]	; (800fb04 <memp_malloc+0x44>)
 800fada:	f00a fdf5 	bl	801a6c8 <iprintf>
 800fade:	2300      	movs	r3, #0
 800fae0:	e008      	b.n	800faf4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800fae2:	79fb      	ldrb	r3, [r7, #7]
 800fae4:	4a08      	ldr	r2, [pc, #32]	; (800fb08 <memp_malloc+0x48>)
 800fae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800faea:	4618      	mov	r0, r3
 800faec:	f7ff ffb6 	bl	800fa5c <do_memp_malloc_pool>
 800faf0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800faf2:	68fb      	ldr	r3, [r7, #12]
}
 800faf4:	4618      	mov	r0, r3
 800faf6:	3710      	adds	r7, #16
 800faf8:	46bd      	mov	sp, r7
 800fafa:	bd80      	pop	{r7, pc}
 800fafc:	0801c6d4 	.word	0x0801c6d4
 800fb00:	0801c764 	.word	0x0801c764
 800fb04:	0801c728 	.word	0x0801c728
 800fb08:	0801eec4 	.word	0x0801eec4

0800fb0c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800fb0c:	b580      	push	{r7, lr}
 800fb0e:	b084      	sub	sp, #16
 800fb10:	af00      	add	r7, sp, #0
 800fb12:	6078      	str	r0, [r7, #4]
 800fb14:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800fb16:	683b      	ldr	r3, [r7, #0]
 800fb18:	f003 0303 	and.w	r3, r3, #3
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d006      	beq.n	800fb2e <do_memp_free_pool+0x22>
 800fb20:	4b0d      	ldr	r3, [pc, #52]	; (800fb58 <do_memp_free_pool+0x4c>)
 800fb22:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800fb26:	490d      	ldr	r1, [pc, #52]	; (800fb5c <do_memp_free_pool+0x50>)
 800fb28:	480d      	ldr	r0, [pc, #52]	; (800fb60 <do_memp_free_pool+0x54>)
 800fb2a:	f00a fdcd 	bl	801a6c8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800fb2e:	683b      	ldr	r3, [r7, #0]
 800fb30:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800fb32:	f00a fba1 	bl	801a278 <sys_arch_protect>
 800fb36:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800fb38:	687b      	ldr	r3, [r7, #4]
 800fb3a:	689b      	ldr	r3, [r3, #8]
 800fb3c:	681a      	ldr	r2, [r3, #0]
 800fb3e:	68fb      	ldr	r3, [r7, #12]
 800fb40:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	689b      	ldr	r3, [r3, #8]
 800fb46:	68fa      	ldr	r2, [r7, #12]
 800fb48:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800fb4a:	68b8      	ldr	r0, [r7, #8]
 800fb4c:	f00a fba2 	bl	801a294 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800fb50:	bf00      	nop
 800fb52:	3710      	adds	r7, #16
 800fb54:	46bd      	mov	sp, r7
 800fb56:	bd80      	pop	{r7, pc}
 800fb58:	0801c6d4 	.word	0x0801c6d4
 800fb5c:	0801c784 	.word	0x0801c784
 800fb60:	0801c728 	.word	0x0801c728

0800fb64 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800fb64:	b580      	push	{r7, lr}
 800fb66:	b082      	sub	sp, #8
 800fb68:	af00      	add	r7, sp, #0
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	6039      	str	r1, [r7, #0]
 800fb6e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800fb70:	79fb      	ldrb	r3, [r7, #7]
 800fb72:	2b0c      	cmp	r3, #12
 800fb74:	d907      	bls.n	800fb86 <memp_free+0x22>
 800fb76:	4b0c      	ldr	r3, [pc, #48]	; (800fba8 <memp_free+0x44>)
 800fb78:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800fb7c:	490b      	ldr	r1, [pc, #44]	; (800fbac <memp_free+0x48>)
 800fb7e:	480c      	ldr	r0, [pc, #48]	; (800fbb0 <memp_free+0x4c>)
 800fb80:	f00a fda2 	bl	801a6c8 <iprintf>
 800fb84:	e00c      	b.n	800fba0 <memp_free+0x3c>

  if (mem == NULL) {
 800fb86:	683b      	ldr	r3, [r7, #0]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d008      	beq.n	800fb9e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800fb8c:	79fb      	ldrb	r3, [r7, #7]
 800fb8e:	4a09      	ldr	r2, [pc, #36]	; (800fbb4 <memp_free+0x50>)
 800fb90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fb94:	6839      	ldr	r1, [r7, #0]
 800fb96:	4618      	mov	r0, r3
 800fb98:	f7ff ffb8 	bl	800fb0c <do_memp_free_pool>
 800fb9c:	e000      	b.n	800fba0 <memp_free+0x3c>
    return;
 800fb9e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800fba0:	3708      	adds	r7, #8
 800fba2:	46bd      	mov	sp, r7
 800fba4:	bd80      	pop	{r7, pc}
 800fba6:	bf00      	nop
 800fba8:	0801c6d4 	.word	0x0801c6d4
 800fbac:	0801c7a4 	.word	0x0801c7a4
 800fbb0:	0801c728 	.word	0x0801c728
 800fbb4:	0801eec4 	.word	0x0801eec4

0800fbb8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800fbb8:	b480      	push	{r7}
 800fbba:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800fbbc:	bf00      	nop
 800fbbe:	46bd      	mov	sp, r7
 800fbc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbc4:	4770      	bx	lr
	...

0800fbc8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800fbc8:	b580      	push	{r7, lr}
 800fbca:	b086      	sub	sp, #24
 800fbcc:	af00      	add	r7, sp, #0
 800fbce:	60f8      	str	r0, [r7, #12]
 800fbd0:	60b9      	str	r1, [r7, #8]
 800fbd2:	607a      	str	r2, [r7, #4]
 800fbd4:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800fbd6:	68fb      	ldr	r3, [r7, #12]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d108      	bne.n	800fbee <netif_add+0x26>
 800fbdc:	4b57      	ldr	r3, [pc, #348]	; (800fd3c <netif_add+0x174>)
 800fbde:	f240 1227 	movw	r2, #295	; 0x127
 800fbe2:	4957      	ldr	r1, [pc, #348]	; (800fd40 <netif_add+0x178>)
 800fbe4:	4857      	ldr	r0, [pc, #348]	; (800fd44 <netif_add+0x17c>)
 800fbe6:	f00a fd6f 	bl	801a6c8 <iprintf>
 800fbea:	2300      	movs	r3, #0
 800fbec:	e0a2      	b.n	800fd34 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800fbee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fbf0:	2b00      	cmp	r3, #0
 800fbf2:	d108      	bne.n	800fc06 <netif_add+0x3e>
 800fbf4:	4b51      	ldr	r3, [pc, #324]	; (800fd3c <netif_add+0x174>)
 800fbf6:	f44f 7294 	mov.w	r2, #296	; 0x128
 800fbfa:	4953      	ldr	r1, [pc, #332]	; (800fd48 <netif_add+0x180>)
 800fbfc:	4851      	ldr	r0, [pc, #324]	; (800fd44 <netif_add+0x17c>)
 800fbfe:	f00a fd63 	bl	801a6c8 <iprintf>
 800fc02:	2300      	movs	r3, #0
 800fc04:	e096      	b.n	800fd34 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800fc06:	68bb      	ldr	r3, [r7, #8]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d101      	bne.n	800fc10 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800fc0c:	4b4f      	ldr	r3, [pc, #316]	; (800fd4c <netif_add+0x184>)
 800fc0e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	d101      	bne.n	800fc1a <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800fc16:	4b4d      	ldr	r3, [pc, #308]	; (800fd4c <netif_add+0x184>)
 800fc18:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800fc1a:	683b      	ldr	r3, [r7, #0]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d101      	bne.n	800fc24 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800fc20:	4b4a      	ldr	r3, [pc, #296]	; (800fd4c <netif_add+0x184>)
 800fc22:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800fc24:	68fb      	ldr	r3, [r7, #12]
 800fc26:	2200      	movs	r2, #0
 800fc28:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800fc30:	68fb      	ldr	r3, [r7, #12]
 800fc32:	2200      	movs	r2, #0
 800fc34:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	4a45      	ldr	r2, [pc, #276]	; (800fd50 <netif_add+0x188>)
 800fc3a:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	2200      	movs	r2, #0
 800fc40:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	2200      	movs	r2, #0
 800fc46:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800fc50:	68fb      	ldr	r3, [r7, #12]
 800fc52:	6a3a      	ldr	r2, [r7, #32]
 800fc54:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800fc56:	4b3f      	ldr	r3, [pc, #252]	; (800fd54 <netif_add+0x18c>)
 800fc58:	781a      	ldrb	r2, [r3, #0]
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800fc64:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800fc66:	683b      	ldr	r3, [r7, #0]
 800fc68:	687a      	ldr	r2, [r7, #4]
 800fc6a:	68b9      	ldr	r1, [r7, #8]
 800fc6c:	68f8      	ldr	r0, [r7, #12]
 800fc6e:	f000 f913 	bl	800fe98 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800fc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc74:	68f8      	ldr	r0, [r7, #12]
 800fc76:	4798      	blx	r3
 800fc78:	4603      	mov	r3, r0
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d001      	beq.n	800fc82 <netif_add+0xba>
    return NULL;
 800fc7e:	2300      	movs	r3, #0
 800fc80:	e058      	b.n	800fd34 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fc88:	2bff      	cmp	r3, #255	; 0xff
 800fc8a:	d103      	bne.n	800fc94 <netif_add+0xcc>
        netif->num = 0;
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	2200      	movs	r2, #0
 800fc90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800fc94:	2300      	movs	r3, #0
 800fc96:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800fc98:	4b2f      	ldr	r3, [pc, #188]	; (800fd58 <netif_add+0x190>)
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	617b      	str	r3, [r7, #20]
 800fc9e:	e02b      	b.n	800fcf8 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800fca0:	697a      	ldr	r2, [r7, #20]
 800fca2:	68fb      	ldr	r3, [r7, #12]
 800fca4:	429a      	cmp	r2, r3
 800fca6:	d106      	bne.n	800fcb6 <netif_add+0xee>
 800fca8:	4b24      	ldr	r3, [pc, #144]	; (800fd3c <netif_add+0x174>)
 800fcaa:	f240 128b 	movw	r2, #395	; 0x18b
 800fcae:	492b      	ldr	r1, [pc, #172]	; (800fd5c <netif_add+0x194>)
 800fcb0:	4824      	ldr	r0, [pc, #144]	; (800fd44 <netif_add+0x17c>)
 800fcb2:	f00a fd09 	bl	801a6c8 <iprintf>
        num_netifs++;
 800fcb6:	693b      	ldr	r3, [r7, #16]
 800fcb8:	3301      	adds	r3, #1
 800fcba:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800fcbc:	693b      	ldr	r3, [r7, #16]
 800fcbe:	2bff      	cmp	r3, #255	; 0xff
 800fcc0:	dd06      	ble.n	800fcd0 <netif_add+0x108>
 800fcc2:	4b1e      	ldr	r3, [pc, #120]	; (800fd3c <netif_add+0x174>)
 800fcc4:	f240 128d 	movw	r2, #397	; 0x18d
 800fcc8:	4925      	ldr	r1, [pc, #148]	; (800fd60 <netif_add+0x198>)
 800fcca:	481e      	ldr	r0, [pc, #120]	; (800fd44 <netif_add+0x17c>)
 800fccc:	f00a fcfc 	bl	801a6c8 <iprintf>
        if (netif2->num == netif->num) {
 800fcd0:	697b      	ldr	r3, [r7, #20]
 800fcd2:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800fcd6:	68fb      	ldr	r3, [r7, #12]
 800fcd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fcdc:	429a      	cmp	r2, r3
 800fcde:	d108      	bne.n	800fcf2 <netif_add+0x12a>
          netif->num++;
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fce6:	3301      	adds	r3, #1
 800fce8:	b2da      	uxtb	r2, r3
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800fcf0:	e005      	b.n	800fcfe <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800fcf2:	697b      	ldr	r3, [r7, #20]
 800fcf4:	681b      	ldr	r3, [r3, #0]
 800fcf6:	617b      	str	r3, [r7, #20]
 800fcf8:	697b      	ldr	r3, [r7, #20]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d1d0      	bne.n	800fca0 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800fcfe:	697b      	ldr	r3, [r7, #20]
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d1be      	bne.n	800fc82 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fd0a:	2bfe      	cmp	r3, #254	; 0xfe
 800fd0c:	d103      	bne.n	800fd16 <netif_add+0x14e>
    netif_num = 0;
 800fd0e:	4b11      	ldr	r3, [pc, #68]	; (800fd54 <netif_add+0x18c>)
 800fd10:	2200      	movs	r2, #0
 800fd12:	701a      	strb	r2, [r3, #0]
 800fd14:	e006      	b.n	800fd24 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fd1c:	3301      	adds	r3, #1
 800fd1e:	b2da      	uxtb	r2, r3
 800fd20:	4b0c      	ldr	r3, [pc, #48]	; (800fd54 <netif_add+0x18c>)
 800fd22:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800fd24:	4b0c      	ldr	r3, [pc, #48]	; (800fd58 <netif_add+0x190>)
 800fd26:	681a      	ldr	r2, [r3, #0]
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800fd2c:	4a0a      	ldr	r2, [pc, #40]	; (800fd58 <netif_add+0x190>)
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800fd32:	68fb      	ldr	r3, [r7, #12]
}
 800fd34:	4618      	mov	r0, r3
 800fd36:	3718      	adds	r7, #24
 800fd38:	46bd      	mov	sp, r7
 800fd3a:	bd80      	pop	{r7, pc}
 800fd3c:	0801c7c0 	.word	0x0801c7c0
 800fd40:	0801c854 	.word	0x0801c854
 800fd44:	0801c810 	.word	0x0801c810
 800fd48:	0801c870 	.word	0x0801c870
 800fd4c:	0801ef38 	.word	0x0801ef38
 800fd50:	080100ab 	.word	0x080100ab
 800fd54:	20006990 	.word	0x20006990
 800fd58:	2000dd34 	.word	0x2000dd34
 800fd5c:	0801c894 	.word	0x0801c894
 800fd60:	0801c8a8 	.word	0x0801c8a8

0800fd64 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800fd64:	b580      	push	{r7, lr}
 800fd66:	b082      	sub	sp, #8
 800fd68:	af00      	add	r7, sp, #0
 800fd6a:	6078      	str	r0, [r7, #4]
 800fd6c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800fd6e:	6839      	ldr	r1, [r7, #0]
 800fd70:	6878      	ldr	r0, [r7, #4]
 800fd72:	f002 fd31 	bl	80127d8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800fd76:	6839      	ldr	r1, [r7, #0]
 800fd78:	6878      	ldr	r0, [r7, #4]
 800fd7a:	f007 fdc9 	bl	8017910 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800fd7e:	bf00      	nop
 800fd80:	3708      	adds	r7, #8
 800fd82:	46bd      	mov	sp, r7
 800fd84:	bd80      	pop	{r7, pc}
	...

0800fd88 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800fd88:	b580      	push	{r7, lr}
 800fd8a:	b086      	sub	sp, #24
 800fd8c:	af00      	add	r7, sp, #0
 800fd8e:	60f8      	str	r0, [r7, #12]
 800fd90:	60b9      	str	r1, [r7, #8]
 800fd92:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800fd94:	68bb      	ldr	r3, [r7, #8]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d106      	bne.n	800fda8 <netif_do_set_ipaddr+0x20>
 800fd9a:	4b1d      	ldr	r3, [pc, #116]	; (800fe10 <netif_do_set_ipaddr+0x88>)
 800fd9c:	f240 12cb 	movw	r2, #459	; 0x1cb
 800fda0:	491c      	ldr	r1, [pc, #112]	; (800fe14 <netif_do_set_ipaddr+0x8c>)
 800fda2:	481d      	ldr	r0, [pc, #116]	; (800fe18 <netif_do_set_ipaddr+0x90>)
 800fda4:	f00a fc90 	bl	801a6c8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	d106      	bne.n	800fdbc <netif_do_set_ipaddr+0x34>
 800fdae:	4b18      	ldr	r3, [pc, #96]	; (800fe10 <netif_do_set_ipaddr+0x88>)
 800fdb0:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800fdb4:	4917      	ldr	r1, [pc, #92]	; (800fe14 <netif_do_set_ipaddr+0x8c>)
 800fdb6:	4818      	ldr	r0, [pc, #96]	; (800fe18 <netif_do_set_ipaddr+0x90>)
 800fdb8:	f00a fc86 	bl	801a6c8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800fdbc:	68bb      	ldr	r3, [r7, #8]
 800fdbe:	681a      	ldr	r2, [r3, #0]
 800fdc0:	68fb      	ldr	r3, [r7, #12]
 800fdc2:	3304      	adds	r3, #4
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	429a      	cmp	r2, r3
 800fdc8:	d01c      	beq.n	800fe04 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800fdca:	68bb      	ldr	r3, [r7, #8]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800fdd0:	68fb      	ldr	r3, [r7, #12]
 800fdd2:	3304      	adds	r3, #4
 800fdd4:	681a      	ldr	r2, [r3, #0]
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800fdda:	f107 0314 	add.w	r3, r7, #20
 800fdde:	4619      	mov	r1, r3
 800fde0:	6878      	ldr	r0, [r7, #4]
 800fde2:	f7ff ffbf 	bl	800fd64 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800fde6:	68bb      	ldr	r3, [r7, #8]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d002      	beq.n	800fdf2 <netif_do_set_ipaddr+0x6a>
 800fdec:	68bb      	ldr	r3, [r7, #8]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	e000      	b.n	800fdf4 <netif_do_set_ipaddr+0x6c>
 800fdf2:	2300      	movs	r3, #0
 800fdf4:	68fa      	ldr	r2, [r7, #12]
 800fdf6:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800fdf8:	2101      	movs	r1, #1
 800fdfa:	68f8      	ldr	r0, [r7, #12]
 800fdfc:	f000 f8d2 	bl	800ffa4 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800fe00:	2301      	movs	r3, #1
 800fe02:	e000      	b.n	800fe06 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800fe04:	2300      	movs	r3, #0
}
 800fe06:	4618      	mov	r0, r3
 800fe08:	3718      	adds	r7, #24
 800fe0a:	46bd      	mov	sp, r7
 800fe0c:	bd80      	pop	{r7, pc}
 800fe0e:	bf00      	nop
 800fe10:	0801c7c0 	.word	0x0801c7c0
 800fe14:	0801c8d8 	.word	0x0801c8d8
 800fe18:	0801c810 	.word	0x0801c810

0800fe1c <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800fe1c:	b480      	push	{r7}
 800fe1e:	b085      	sub	sp, #20
 800fe20:	af00      	add	r7, sp, #0
 800fe22:	60f8      	str	r0, [r7, #12]
 800fe24:	60b9      	str	r1, [r7, #8]
 800fe26:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800fe28:	68bb      	ldr	r3, [r7, #8]
 800fe2a:	681a      	ldr	r2, [r3, #0]
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	3308      	adds	r3, #8
 800fe30:	681b      	ldr	r3, [r3, #0]
 800fe32:	429a      	cmp	r2, r3
 800fe34:	d00a      	beq.n	800fe4c <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800fe36:	68bb      	ldr	r3, [r7, #8]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d002      	beq.n	800fe42 <netif_do_set_netmask+0x26>
 800fe3c:	68bb      	ldr	r3, [r7, #8]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	e000      	b.n	800fe44 <netif_do_set_netmask+0x28>
 800fe42:	2300      	movs	r3, #0
 800fe44:	68fa      	ldr	r2, [r7, #12]
 800fe46:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800fe48:	2301      	movs	r3, #1
 800fe4a:	e000      	b.n	800fe4e <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800fe4c:	2300      	movs	r3, #0
}
 800fe4e:	4618      	mov	r0, r3
 800fe50:	3714      	adds	r7, #20
 800fe52:	46bd      	mov	sp, r7
 800fe54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe58:	4770      	bx	lr

0800fe5a <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800fe5a:	b480      	push	{r7}
 800fe5c:	b085      	sub	sp, #20
 800fe5e:	af00      	add	r7, sp, #0
 800fe60:	60f8      	str	r0, [r7, #12]
 800fe62:	60b9      	str	r1, [r7, #8]
 800fe64:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	681a      	ldr	r2, [r3, #0]
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	330c      	adds	r3, #12
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	429a      	cmp	r2, r3
 800fe72:	d00a      	beq.n	800fe8a <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	d002      	beq.n	800fe80 <netif_do_set_gw+0x26>
 800fe7a:	68bb      	ldr	r3, [r7, #8]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	e000      	b.n	800fe82 <netif_do_set_gw+0x28>
 800fe80:	2300      	movs	r3, #0
 800fe82:	68fa      	ldr	r2, [r7, #12]
 800fe84:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800fe86:	2301      	movs	r3, #1
 800fe88:	e000      	b.n	800fe8c <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800fe8a:	2300      	movs	r3, #0
}
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	3714      	adds	r7, #20
 800fe90:	46bd      	mov	sp, r7
 800fe92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe96:	4770      	bx	lr

0800fe98 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800fe98:	b580      	push	{r7, lr}
 800fe9a:	b088      	sub	sp, #32
 800fe9c:	af00      	add	r7, sp, #0
 800fe9e:	60f8      	str	r0, [r7, #12]
 800fea0:	60b9      	str	r1, [r7, #8]
 800fea2:	607a      	str	r2, [r7, #4]
 800fea4:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800fea6:	2300      	movs	r3, #0
 800fea8:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800feaa:	2300      	movs	r3, #0
 800feac:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800feae:	68bb      	ldr	r3, [r7, #8]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d101      	bne.n	800feb8 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800feb4:	4b1c      	ldr	r3, [pc, #112]	; (800ff28 <netif_set_addr+0x90>)
 800feb6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	2b00      	cmp	r3, #0
 800febc:	d101      	bne.n	800fec2 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800febe:	4b1a      	ldr	r3, [pc, #104]	; (800ff28 <netif_set_addr+0x90>)
 800fec0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800fec2:	683b      	ldr	r3, [r7, #0]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d101      	bne.n	800fecc <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800fec8:	4b17      	ldr	r3, [pc, #92]	; (800ff28 <netif_set_addr+0x90>)
 800feca:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800fecc:	68bb      	ldr	r3, [r7, #8]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d003      	beq.n	800feda <netif_set_addr+0x42>
 800fed2:	68bb      	ldr	r3, [r7, #8]
 800fed4:	681b      	ldr	r3, [r3, #0]
 800fed6:	2b00      	cmp	r3, #0
 800fed8:	d101      	bne.n	800fede <netif_set_addr+0x46>
 800feda:	2301      	movs	r3, #1
 800fedc:	e000      	b.n	800fee0 <netif_set_addr+0x48>
 800fede:	2300      	movs	r3, #0
 800fee0:	617b      	str	r3, [r7, #20]
  if (remove) {
 800fee2:	697b      	ldr	r3, [r7, #20]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d006      	beq.n	800fef6 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800fee8:	f107 0310 	add.w	r3, r7, #16
 800feec:	461a      	mov	r2, r3
 800feee:	68b9      	ldr	r1, [r7, #8]
 800fef0:	68f8      	ldr	r0, [r7, #12]
 800fef2:	f7ff ff49 	bl	800fd88 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800fef6:	69fa      	ldr	r2, [r7, #28]
 800fef8:	6879      	ldr	r1, [r7, #4]
 800fefa:	68f8      	ldr	r0, [r7, #12]
 800fefc:	f7ff ff8e 	bl	800fe1c <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800ff00:	69ba      	ldr	r2, [r7, #24]
 800ff02:	6839      	ldr	r1, [r7, #0]
 800ff04:	68f8      	ldr	r0, [r7, #12]
 800ff06:	f7ff ffa8 	bl	800fe5a <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800ff0a:	697b      	ldr	r3, [r7, #20]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	d106      	bne.n	800ff1e <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800ff10:	f107 0310 	add.w	r3, r7, #16
 800ff14:	461a      	mov	r2, r3
 800ff16:	68b9      	ldr	r1, [r7, #8]
 800ff18:	68f8      	ldr	r0, [r7, #12]
 800ff1a:	f7ff ff35 	bl	800fd88 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ff1e:	bf00      	nop
 800ff20:	3720      	adds	r7, #32
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bd80      	pop	{r7, pc}
 800ff26:	bf00      	nop
 800ff28:	0801ef38 	.word	0x0801ef38

0800ff2c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800ff2c:	b480      	push	{r7}
 800ff2e:	b083      	sub	sp, #12
 800ff30:	af00      	add	r7, sp, #0
 800ff32:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800ff34:	4a04      	ldr	r2, [pc, #16]	; (800ff48 <netif_set_default+0x1c>)
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ff3a:	bf00      	nop
 800ff3c:	370c      	adds	r7, #12
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff44:	4770      	bx	lr
 800ff46:	bf00      	nop
 800ff48:	2000dd38 	.word	0x2000dd38

0800ff4c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b082      	sub	sp, #8
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d107      	bne.n	800ff6a <netif_set_up+0x1e>
 800ff5a:	4b0f      	ldr	r3, [pc, #60]	; (800ff98 <netif_set_up+0x4c>)
 800ff5c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ff60:	490e      	ldr	r1, [pc, #56]	; (800ff9c <netif_set_up+0x50>)
 800ff62:	480f      	ldr	r0, [pc, #60]	; (800ffa0 <netif_set_up+0x54>)
 800ff64:	f00a fbb0 	bl	801a6c8 <iprintf>
 800ff68:	e013      	b.n	800ff92 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff70:	f003 0301 	and.w	r3, r3, #1
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d10c      	bne.n	800ff92 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ff7e:	f043 0301 	orr.w	r3, r3, #1
 800ff82:	b2da      	uxtb	r2, r3
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ff8a:	2103      	movs	r1, #3
 800ff8c:	6878      	ldr	r0, [r7, #4]
 800ff8e:	f000 f809 	bl	800ffa4 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ff92:	3708      	adds	r7, #8
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}
 800ff98:	0801c7c0 	.word	0x0801c7c0
 800ff9c:	0801c948 	.word	0x0801c948
 800ffa0:	0801c810 	.word	0x0801c810

0800ffa4 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ffa4:	b580      	push	{r7, lr}
 800ffa6:	b082      	sub	sp, #8
 800ffa8:	af00      	add	r7, sp, #0
 800ffaa:	6078      	str	r0, [r7, #4]
 800ffac:	460b      	mov	r3, r1
 800ffae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d106      	bne.n	800ffc4 <netif_issue_reports+0x20>
 800ffb6:	4b18      	ldr	r3, [pc, #96]	; (8010018 <netif_issue_reports+0x74>)
 800ffb8:	f240 326d 	movw	r2, #877	; 0x36d
 800ffbc:	4917      	ldr	r1, [pc, #92]	; (801001c <netif_issue_reports+0x78>)
 800ffbe:	4818      	ldr	r0, [pc, #96]	; (8010020 <netif_issue_reports+0x7c>)
 800ffc0:	f00a fb82 	bl	801a6c8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ffc4:	687b      	ldr	r3, [r7, #4]
 800ffc6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ffca:	f003 0304 	and.w	r3, r3, #4
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d01e      	beq.n	8010010 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ffd8:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d017      	beq.n	8010010 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ffe0:	78fb      	ldrb	r3, [r7, #3]
 800ffe2:	f003 0301 	and.w	r3, r3, #1
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d013      	beq.n	8010012 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	3304      	adds	r3, #4
 800ffee:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d00e      	beq.n	8010012 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fffa:	f003 0308 	and.w	r3, r3, #8
 800fffe:	2b00      	cmp	r3, #0
 8010000:	d007      	beq.n	8010012 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	3304      	adds	r3, #4
 8010006:	4619      	mov	r1, r3
 8010008:	6878      	ldr	r0, [r7, #4]
 801000a:	f008 fbeb 	bl	80187e4 <etharp_request>
 801000e:	e000      	b.n	8010012 <netif_issue_reports+0x6e>
    return;
 8010010:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8010012:	3708      	adds	r7, #8
 8010014:	46bd      	mov	sp, r7
 8010016:	bd80      	pop	{r7, pc}
 8010018:	0801c7c0 	.word	0x0801c7c0
 801001c:	0801c964 	.word	0x0801c964
 8010020:	0801c810 	.word	0x0801c810

08010024 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010024:	b580      	push	{r7, lr}
 8010026:	b082      	sub	sp, #8
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2b00      	cmp	r3, #0
 8010030:	d107      	bne.n	8010042 <netif_set_down+0x1e>
 8010032:	4b12      	ldr	r3, [pc, #72]	; (801007c <netif_set_down+0x58>)
 8010034:	f240 329b 	movw	r2, #923	; 0x39b
 8010038:	4911      	ldr	r1, [pc, #68]	; (8010080 <netif_set_down+0x5c>)
 801003a:	4812      	ldr	r0, [pc, #72]	; (8010084 <netif_set_down+0x60>)
 801003c:	f00a fb44 	bl	801a6c8 <iprintf>
 8010040:	e019      	b.n	8010076 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010048:	f003 0301 	and.w	r3, r3, #1
 801004c:	2b00      	cmp	r3, #0
 801004e:	d012      	beq.n	8010076 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010056:	f023 0301 	bic.w	r3, r3, #1
 801005a:	b2da      	uxtb	r2, r3
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010068:	f003 0308 	and.w	r3, r3, #8
 801006c:	2b00      	cmp	r3, #0
 801006e:	d002      	beq.n	8010076 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8010070:	6878      	ldr	r0, [r7, #4]
 8010072:	f007 ff75 	bl	8017f60 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8010076:	3708      	adds	r7, #8
 8010078:	46bd      	mov	sp, r7
 801007a:	bd80      	pop	{r7, pc}
 801007c:	0801c7c0 	.word	0x0801c7c0
 8010080:	0801c988 	.word	0x0801c988
 8010084:	0801c810 	.word	0x0801c810

08010088 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8010088:	b480      	push	{r7}
 801008a:	b083      	sub	sp, #12
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
 8010090:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	2b00      	cmp	r3, #0
 8010096:	d002      	beq.n	801009e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	683a      	ldr	r2, [r7, #0]
 801009c:	61da      	str	r2, [r3, #28]
  }
}
 801009e:	bf00      	nop
 80100a0:	370c      	adds	r7, #12
 80100a2:	46bd      	mov	sp, r7
 80100a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100a8:	4770      	bx	lr

080100aa <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80100aa:	b480      	push	{r7}
 80100ac:	b085      	sub	sp, #20
 80100ae:	af00      	add	r7, sp, #0
 80100b0:	60f8      	str	r0, [r7, #12]
 80100b2:	60b9      	str	r1, [r7, #8]
 80100b4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80100b6:	f06f 030b 	mvn.w	r3, #11
}
 80100ba:	4618      	mov	r0, r3
 80100bc:	3714      	adds	r7, #20
 80100be:	46bd      	mov	sp, r7
 80100c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100c4:	4770      	bx	lr
	...

080100c8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80100c8:	b480      	push	{r7}
 80100ca:	b085      	sub	sp, #20
 80100cc:	af00      	add	r7, sp, #0
 80100ce:	4603      	mov	r3, r0
 80100d0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80100d2:	79fb      	ldrb	r3, [r7, #7]
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d013      	beq.n	8010100 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80100d8:	4b0d      	ldr	r3, [pc, #52]	; (8010110 <netif_get_by_index+0x48>)
 80100da:	681b      	ldr	r3, [r3, #0]
 80100dc:	60fb      	str	r3, [r7, #12]
 80100de:	e00c      	b.n	80100fa <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80100e6:	3301      	adds	r3, #1
 80100e8:	b2db      	uxtb	r3, r3
 80100ea:	79fa      	ldrb	r2, [r7, #7]
 80100ec:	429a      	cmp	r2, r3
 80100ee:	d101      	bne.n	80100f4 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80100f0:	68fb      	ldr	r3, [r7, #12]
 80100f2:	e006      	b.n	8010102 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	60fb      	str	r3, [r7, #12]
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d1ef      	bne.n	80100e0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8010100:	2300      	movs	r3, #0
}
 8010102:	4618      	mov	r0, r3
 8010104:	3714      	adds	r7, #20
 8010106:	46bd      	mov	sp, r7
 8010108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801010c:	4770      	bx	lr
 801010e:	bf00      	nop
 8010110:	2000dd34 	.word	0x2000dd34

08010114 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8010114:	b580      	push	{r7, lr}
 8010116:	b082      	sub	sp, #8
 8010118:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801011a:	f00a f8ad 	bl	801a278 <sys_arch_protect>
 801011e:	6038      	str	r0, [r7, #0]
 8010120:	4b0d      	ldr	r3, [pc, #52]	; (8010158 <pbuf_free_ooseq+0x44>)
 8010122:	2200      	movs	r2, #0
 8010124:	701a      	strb	r2, [r3, #0]
 8010126:	6838      	ldr	r0, [r7, #0]
 8010128:	f00a f8b4 	bl	801a294 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801012c:	4b0b      	ldr	r3, [pc, #44]	; (801015c <pbuf_free_ooseq+0x48>)
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	607b      	str	r3, [r7, #4]
 8010132:	e00a      	b.n	801014a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010138:	2b00      	cmp	r3, #0
 801013a:	d003      	beq.n	8010144 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 801013c:	6878      	ldr	r0, [r7, #4]
 801013e:	f002 fb89 	bl	8012854 <tcp_free_ooseq>
      return;
 8010142:	e005      	b.n	8010150 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	68db      	ldr	r3, [r3, #12]
 8010148:	607b      	str	r3, [r7, #4]
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d1f1      	bne.n	8010134 <pbuf_free_ooseq+0x20>
    }
  }
}
 8010150:	3708      	adds	r7, #8
 8010152:	46bd      	mov	sp, r7
 8010154:	bd80      	pop	{r7, pc}
 8010156:	bf00      	nop
 8010158:	2000dd3c 	.word	0x2000dd3c
 801015c:	2000dd44 	.word	0x2000dd44

08010160 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8010160:	b580      	push	{r7, lr}
 8010162:	b082      	sub	sp, #8
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8010168:	f7ff ffd4 	bl	8010114 <pbuf_free_ooseq>
}
 801016c:	bf00      	nop
 801016e:	3708      	adds	r7, #8
 8010170:	46bd      	mov	sp, r7
 8010172:	bd80      	pop	{r7, pc}

08010174 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b082      	sub	sp, #8
 8010178:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801017a:	f00a f87d 	bl	801a278 <sys_arch_protect>
 801017e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8010180:	4b0f      	ldr	r3, [pc, #60]	; (80101c0 <pbuf_pool_is_empty+0x4c>)
 8010182:	781b      	ldrb	r3, [r3, #0]
 8010184:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8010186:	4b0e      	ldr	r3, [pc, #56]	; (80101c0 <pbuf_pool_is_empty+0x4c>)
 8010188:	2201      	movs	r2, #1
 801018a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 801018c:	6878      	ldr	r0, [r7, #4]
 801018e:	f00a f881 	bl	801a294 <sys_arch_unprotect>

  if (!queued) {
 8010192:	78fb      	ldrb	r3, [r7, #3]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d10f      	bne.n	80101b8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8010198:	2100      	movs	r1, #0
 801019a:	480a      	ldr	r0, [pc, #40]	; (80101c4 <pbuf_pool_is_empty+0x50>)
 801019c:	f7fe ff3a 	bl	800f014 <tcpip_try_callback>
 80101a0:	4603      	mov	r3, r0
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d008      	beq.n	80101b8 <pbuf_pool_is_empty+0x44>
 80101a6:	f00a f867 	bl	801a278 <sys_arch_protect>
 80101aa:	6078      	str	r0, [r7, #4]
 80101ac:	4b04      	ldr	r3, [pc, #16]	; (80101c0 <pbuf_pool_is_empty+0x4c>)
 80101ae:	2200      	movs	r2, #0
 80101b0:	701a      	strb	r2, [r3, #0]
 80101b2:	6878      	ldr	r0, [r7, #4]
 80101b4:	f00a f86e 	bl	801a294 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80101b8:	bf00      	nop
 80101ba:	3708      	adds	r7, #8
 80101bc:	46bd      	mov	sp, r7
 80101be:	bd80      	pop	{r7, pc}
 80101c0:	2000dd3c 	.word	0x2000dd3c
 80101c4:	08010161 	.word	0x08010161

080101c8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80101c8:	b480      	push	{r7}
 80101ca:	b085      	sub	sp, #20
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	60f8      	str	r0, [r7, #12]
 80101d0:	60b9      	str	r1, [r7, #8]
 80101d2:	4611      	mov	r1, r2
 80101d4:	461a      	mov	r2, r3
 80101d6:	460b      	mov	r3, r1
 80101d8:	80fb      	strh	r3, [r7, #6]
 80101da:	4613      	mov	r3, r2
 80101dc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	2200      	movs	r2, #0
 80101e2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80101e4:	68fb      	ldr	r3, [r7, #12]
 80101e6:	68ba      	ldr	r2, [r7, #8]
 80101e8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	88fa      	ldrh	r2, [r7, #6]
 80101ee:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80101f0:	68fb      	ldr	r3, [r7, #12]
 80101f2:	88ba      	ldrh	r2, [r7, #4]
 80101f4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80101f6:	8b3b      	ldrh	r3, [r7, #24]
 80101f8:	b2da      	uxtb	r2, r3
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	7f3a      	ldrb	r2, [r7, #28]
 8010202:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8010204:	68fb      	ldr	r3, [r7, #12]
 8010206:	2201      	movs	r2, #1
 8010208:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	2200      	movs	r2, #0
 801020e:	73da      	strb	r2, [r3, #15]
}
 8010210:	bf00      	nop
 8010212:	3714      	adds	r7, #20
 8010214:	46bd      	mov	sp, r7
 8010216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801021a:	4770      	bx	lr

0801021c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b08c      	sub	sp, #48	; 0x30
 8010220:	af02      	add	r7, sp, #8
 8010222:	4603      	mov	r3, r0
 8010224:	71fb      	strb	r3, [r7, #7]
 8010226:	460b      	mov	r3, r1
 8010228:	80bb      	strh	r3, [r7, #4]
 801022a:	4613      	mov	r3, r2
 801022c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801022e:	79fb      	ldrb	r3, [r7, #7]
 8010230:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8010232:	887b      	ldrh	r3, [r7, #2]
 8010234:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010238:	d07f      	beq.n	801033a <pbuf_alloc+0x11e>
 801023a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801023e:	f300 80c8 	bgt.w	80103d2 <pbuf_alloc+0x1b6>
 8010242:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010246:	d010      	beq.n	801026a <pbuf_alloc+0x4e>
 8010248:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801024c:	f300 80c1 	bgt.w	80103d2 <pbuf_alloc+0x1b6>
 8010250:	2b01      	cmp	r3, #1
 8010252:	d002      	beq.n	801025a <pbuf_alloc+0x3e>
 8010254:	2b41      	cmp	r3, #65	; 0x41
 8010256:	f040 80bc 	bne.w	80103d2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801025a:	887a      	ldrh	r2, [r7, #2]
 801025c:	88bb      	ldrh	r3, [r7, #4]
 801025e:	4619      	mov	r1, r3
 8010260:	2000      	movs	r0, #0
 8010262:	f000 f8d1 	bl	8010408 <pbuf_alloc_reference>
 8010266:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8010268:	e0bd      	b.n	80103e6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801026a:	2300      	movs	r3, #0
 801026c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 801026e:	2300      	movs	r3, #0
 8010270:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8010272:	88bb      	ldrh	r3, [r7, #4]
 8010274:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8010276:	200c      	movs	r0, #12
 8010278:	f7ff fc22 	bl	800fac0 <memp_malloc>
 801027c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801027e:	693b      	ldr	r3, [r7, #16]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d109      	bne.n	8010298 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8010284:	f7ff ff76 	bl	8010174 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8010288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801028a:	2b00      	cmp	r3, #0
 801028c:	d002      	beq.n	8010294 <pbuf_alloc+0x78>
            pbuf_free(p);
 801028e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010290:	f000 faa8 	bl	80107e4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8010294:	2300      	movs	r3, #0
 8010296:	e0a7      	b.n	80103e8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8010298:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801029a:	3303      	adds	r3, #3
 801029c:	b29b      	uxth	r3, r3
 801029e:	f023 0303 	bic.w	r3, r3, #3
 80102a2:	b29b      	uxth	r3, r3
 80102a4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80102a8:	b29b      	uxth	r3, r3
 80102aa:	8b7a      	ldrh	r2, [r7, #26]
 80102ac:	4293      	cmp	r3, r2
 80102ae:	bf28      	it	cs
 80102b0:	4613      	movcs	r3, r2
 80102b2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80102b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80102b6:	3310      	adds	r3, #16
 80102b8:	693a      	ldr	r2, [r7, #16]
 80102ba:	4413      	add	r3, r2
 80102bc:	3303      	adds	r3, #3
 80102be:	f023 0303 	bic.w	r3, r3, #3
 80102c2:	4618      	mov	r0, r3
 80102c4:	89f9      	ldrh	r1, [r7, #14]
 80102c6:	8b7a      	ldrh	r2, [r7, #26]
 80102c8:	2300      	movs	r3, #0
 80102ca:	9301      	str	r3, [sp, #4]
 80102cc:	887b      	ldrh	r3, [r7, #2]
 80102ce:	9300      	str	r3, [sp, #0]
 80102d0:	460b      	mov	r3, r1
 80102d2:	4601      	mov	r1, r0
 80102d4:	6938      	ldr	r0, [r7, #16]
 80102d6:	f7ff ff77 	bl	80101c8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80102da:	693b      	ldr	r3, [r7, #16]
 80102dc:	685b      	ldr	r3, [r3, #4]
 80102de:	f003 0303 	and.w	r3, r3, #3
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d006      	beq.n	80102f4 <pbuf_alloc+0xd8>
 80102e6:	4b42      	ldr	r3, [pc, #264]	; (80103f0 <pbuf_alloc+0x1d4>)
 80102e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80102ec:	4941      	ldr	r1, [pc, #260]	; (80103f4 <pbuf_alloc+0x1d8>)
 80102ee:	4842      	ldr	r0, [pc, #264]	; (80103f8 <pbuf_alloc+0x1dc>)
 80102f0:	f00a f9ea 	bl	801a6c8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80102f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80102f6:	3303      	adds	r3, #3
 80102f8:	f023 0303 	bic.w	r3, r3, #3
 80102fc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8010300:	d106      	bne.n	8010310 <pbuf_alloc+0xf4>
 8010302:	4b3b      	ldr	r3, [pc, #236]	; (80103f0 <pbuf_alloc+0x1d4>)
 8010304:	f44f 7281 	mov.w	r2, #258	; 0x102
 8010308:	493c      	ldr	r1, [pc, #240]	; (80103fc <pbuf_alloc+0x1e0>)
 801030a:	483b      	ldr	r0, [pc, #236]	; (80103f8 <pbuf_alloc+0x1dc>)
 801030c:	f00a f9dc 	bl	801a6c8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8010310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010312:	2b00      	cmp	r3, #0
 8010314:	d102      	bne.n	801031c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8010316:	693b      	ldr	r3, [r7, #16]
 8010318:	627b      	str	r3, [r7, #36]	; 0x24
 801031a:	e002      	b.n	8010322 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801031c:	69fb      	ldr	r3, [r7, #28]
 801031e:	693a      	ldr	r2, [r7, #16]
 8010320:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8010322:	693b      	ldr	r3, [r7, #16]
 8010324:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8010326:	8b7a      	ldrh	r2, [r7, #26]
 8010328:	89fb      	ldrh	r3, [r7, #14]
 801032a:	1ad3      	subs	r3, r2, r3
 801032c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801032e:	2300      	movs	r3, #0
 8010330:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8010332:	8b7b      	ldrh	r3, [r7, #26]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d19e      	bne.n	8010276 <pbuf_alloc+0x5a>
      break;
 8010338:	e055      	b.n	80103e6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801033a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801033c:	3303      	adds	r3, #3
 801033e:	b29b      	uxth	r3, r3
 8010340:	f023 0303 	bic.w	r3, r3, #3
 8010344:	b29a      	uxth	r2, r3
 8010346:	88bb      	ldrh	r3, [r7, #4]
 8010348:	3303      	adds	r3, #3
 801034a:	b29b      	uxth	r3, r3
 801034c:	f023 0303 	bic.w	r3, r3, #3
 8010350:	b29b      	uxth	r3, r3
 8010352:	4413      	add	r3, r2
 8010354:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8010356:	8b3b      	ldrh	r3, [r7, #24]
 8010358:	3310      	adds	r3, #16
 801035a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801035c:	8b3a      	ldrh	r2, [r7, #24]
 801035e:	88bb      	ldrh	r3, [r7, #4]
 8010360:	3303      	adds	r3, #3
 8010362:	f023 0303 	bic.w	r3, r3, #3
 8010366:	429a      	cmp	r2, r3
 8010368:	d306      	bcc.n	8010378 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801036a:	8afa      	ldrh	r2, [r7, #22]
 801036c:	88bb      	ldrh	r3, [r7, #4]
 801036e:	3303      	adds	r3, #3
 8010370:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010374:	429a      	cmp	r2, r3
 8010376:	d201      	bcs.n	801037c <pbuf_alloc+0x160>
        return NULL;
 8010378:	2300      	movs	r3, #0
 801037a:	e035      	b.n	80103e8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801037c:	8afb      	ldrh	r3, [r7, #22]
 801037e:	4618      	mov	r0, r3
 8010380:	f7ff fa1c 	bl	800f7bc <mem_malloc>
 8010384:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8010386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010388:	2b00      	cmp	r3, #0
 801038a:	d101      	bne.n	8010390 <pbuf_alloc+0x174>
        return NULL;
 801038c:	2300      	movs	r3, #0
 801038e:	e02b      	b.n	80103e8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8010390:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010392:	3310      	adds	r3, #16
 8010394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010396:	4413      	add	r3, r2
 8010398:	3303      	adds	r3, #3
 801039a:	f023 0303 	bic.w	r3, r3, #3
 801039e:	4618      	mov	r0, r3
 80103a0:	88b9      	ldrh	r1, [r7, #4]
 80103a2:	88ba      	ldrh	r2, [r7, #4]
 80103a4:	2300      	movs	r3, #0
 80103a6:	9301      	str	r3, [sp, #4]
 80103a8:	887b      	ldrh	r3, [r7, #2]
 80103aa:	9300      	str	r3, [sp, #0]
 80103ac:	460b      	mov	r3, r1
 80103ae:	4601      	mov	r1, r0
 80103b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80103b2:	f7ff ff09 	bl	80101c8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80103b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103b8:	685b      	ldr	r3, [r3, #4]
 80103ba:	f003 0303 	and.w	r3, r3, #3
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d010      	beq.n	80103e4 <pbuf_alloc+0x1c8>
 80103c2:	4b0b      	ldr	r3, [pc, #44]	; (80103f0 <pbuf_alloc+0x1d4>)
 80103c4:	f44f 7291 	mov.w	r2, #290	; 0x122
 80103c8:	490d      	ldr	r1, [pc, #52]	; (8010400 <pbuf_alloc+0x1e4>)
 80103ca:	480b      	ldr	r0, [pc, #44]	; (80103f8 <pbuf_alloc+0x1dc>)
 80103cc:	f00a f97c 	bl	801a6c8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80103d0:	e008      	b.n	80103e4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80103d2:	4b07      	ldr	r3, [pc, #28]	; (80103f0 <pbuf_alloc+0x1d4>)
 80103d4:	f240 1227 	movw	r2, #295	; 0x127
 80103d8:	490a      	ldr	r1, [pc, #40]	; (8010404 <pbuf_alloc+0x1e8>)
 80103da:	4807      	ldr	r0, [pc, #28]	; (80103f8 <pbuf_alloc+0x1dc>)
 80103dc:	f00a f974 	bl	801a6c8 <iprintf>
      return NULL;
 80103e0:	2300      	movs	r3, #0
 80103e2:	e001      	b.n	80103e8 <pbuf_alloc+0x1cc>
      break;
 80103e4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80103e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80103e8:	4618      	mov	r0, r3
 80103ea:	3728      	adds	r7, #40	; 0x28
 80103ec:	46bd      	mov	sp, r7
 80103ee:	bd80      	pop	{r7, pc}
 80103f0:	0801c9f0 	.word	0x0801c9f0
 80103f4:	0801ca20 	.word	0x0801ca20
 80103f8:	0801ca50 	.word	0x0801ca50
 80103fc:	0801ca78 	.word	0x0801ca78
 8010400:	0801caac 	.word	0x0801caac
 8010404:	0801cad8 	.word	0x0801cad8

08010408 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8010408:	b580      	push	{r7, lr}
 801040a:	b086      	sub	sp, #24
 801040c:	af02      	add	r7, sp, #8
 801040e:	6078      	str	r0, [r7, #4]
 8010410:	460b      	mov	r3, r1
 8010412:	807b      	strh	r3, [r7, #2]
 8010414:	4613      	mov	r3, r2
 8010416:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8010418:	883b      	ldrh	r3, [r7, #0]
 801041a:	2b41      	cmp	r3, #65	; 0x41
 801041c:	d009      	beq.n	8010432 <pbuf_alloc_reference+0x2a>
 801041e:	883b      	ldrh	r3, [r7, #0]
 8010420:	2b01      	cmp	r3, #1
 8010422:	d006      	beq.n	8010432 <pbuf_alloc_reference+0x2a>
 8010424:	4b0f      	ldr	r3, [pc, #60]	; (8010464 <pbuf_alloc_reference+0x5c>)
 8010426:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801042a:	490f      	ldr	r1, [pc, #60]	; (8010468 <pbuf_alloc_reference+0x60>)
 801042c:	480f      	ldr	r0, [pc, #60]	; (801046c <pbuf_alloc_reference+0x64>)
 801042e:	f00a f94b 	bl	801a6c8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8010432:	200b      	movs	r0, #11
 8010434:	f7ff fb44 	bl	800fac0 <memp_malloc>
 8010438:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801043a:	68fb      	ldr	r3, [r7, #12]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d101      	bne.n	8010444 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010440:	2300      	movs	r3, #0
 8010442:	e00b      	b.n	801045c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8010444:	8879      	ldrh	r1, [r7, #2]
 8010446:	887a      	ldrh	r2, [r7, #2]
 8010448:	2300      	movs	r3, #0
 801044a:	9301      	str	r3, [sp, #4]
 801044c:	883b      	ldrh	r3, [r7, #0]
 801044e:	9300      	str	r3, [sp, #0]
 8010450:	460b      	mov	r3, r1
 8010452:	6879      	ldr	r1, [r7, #4]
 8010454:	68f8      	ldr	r0, [r7, #12]
 8010456:	f7ff feb7 	bl	80101c8 <pbuf_init_alloced_pbuf>
  return p;
 801045a:	68fb      	ldr	r3, [r7, #12]
}
 801045c:	4618      	mov	r0, r3
 801045e:	3710      	adds	r7, #16
 8010460:	46bd      	mov	sp, r7
 8010462:	bd80      	pop	{r7, pc}
 8010464:	0801c9f0 	.word	0x0801c9f0
 8010468:	0801caf4 	.word	0x0801caf4
 801046c:	0801ca50 	.word	0x0801ca50

08010470 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010470:	b580      	push	{r7, lr}
 8010472:	b088      	sub	sp, #32
 8010474:	af02      	add	r7, sp, #8
 8010476:	607b      	str	r3, [r7, #4]
 8010478:	4603      	mov	r3, r0
 801047a:	73fb      	strb	r3, [r7, #15]
 801047c:	460b      	mov	r3, r1
 801047e:	81bb      	strh	r3, [r7, #12]
 8010480:	4613      	mov	r3, r2
 8010482:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8010484:	7bfb      	ldrb	r3, [r7, #15]
 8010486:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010488:	8a7b      	ldrh	r3, [r7, #18]
 801048a:	3303      	adds	r3, #3
 801048c:	f023 0203 	bic.w	r2, r3, #3
 8010490:	89bb      	ldrh	r3, [r7, #12]
 8010492:	441a      	add	r2, r3
 8010494:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010496:	429a      	cmp	r2, r3
 8010498:	d901      	bls.n	801049e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801049a:	2300      	movs	r3, #0
 801049c:	e018      	b.n	80104d0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801049e:	6a3b      	ldr	r3, [r7, #32]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d007      	beq.n	80104b4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80104a4:	8a7b      	ldrh	r3, [r7, #18]
 80104a6:	3303      	adds	r3, #3
 80104a8:	f023 0303 	bic.w	r3, r3, #3
 80104ac:	6a3a      	ldr	r2, [r7, #32]
 80104ae:	4413      	add	r3, r2
 80104b0:	617b      	str	r3, [r7, #20]
 80104b2:	e001      	b.n	80104b8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80104b4:	2300      	movs	r3, #0
 80104b6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80104b8:	6878      	ldr	r0, [r7, #4]
 80104ba:	89b9      	ldrh	r1, [r7, #12]
 80104bc:	89ba      	ldrh	r2, [r7, #12]
 80104be:	2302      	movs	r3, #2
 80104c0:	9301      	str	r3, [sp, #4]
 80104c2:	897b      	ldrh	r3, [r7, #10]
 80104c4:	9300      	str	r3, [sp, #0]
 80104c6:	460b      	mov	r3, r1
 80104c8:	6979      	ldr	r1, [r7, #20]
 80104ca:	f7ff fe7d 	bl	80101c8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80104ce:	687b      	ldr	r3, [r7, #4]
}
 80104d0:	4618      	mov	r0, r3
 80104d2:	3718      	adds	r7, #24
 80104d4:	46bd      	mov	sp, r7
 80104d6:	bd80      	pop	{r7, pc}

080104d8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80104d8:	b580      	push	{r7, lr}
 80104da:	b084      	sub	sp, #16
 80104dc:	af00      	add	r7, sp, #0
 80104de:	6078      	str	r0, [r7, #4]
 80104e0:	460b      	mov	r3, r1
 80104e2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d106      	bne.n	80104f8 <pbuf_realloc+0x20>
 80104ea:	4b3a      	ldr	r3, [pc, #232]	; (80105d4 <pbuf_realloc+0xfc>)
 80104ec:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80104f0:	4939      	ldr	r1, [pc, #228]	; (80105d8 <pbuf_realloc+0x100>)
 80104f2:	483a      	ldr	r0, [pc, #232]	; (80105dc <pbuf_realloc+0x104>)
 80104f4:	f00a f8e8 	bl	801a6c8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	891b      	ldrh	r3, [r3, #8]
 80104fc:	887a      	ldrh	r2, [r7, #2]
 80104fe:	429a      	cmp	r2, r3
 8010500:	d263      	bcs.n	80105ca <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	891a      	ldrh	r2, [r3, #8]
 8010506:	887b      	ldrh	r3, [r7, #2]
 8010508:	1ad3      	subs	r3, r2, r3
 801050a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801050c:	887b      	ldrh	r3, [r7, #2]
 801050e:	817b      	strh	r3, [r7, #10]
  q = p;
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8010514:	e018      	b.n	8010548 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8010516:	68fb      	ldr	r3, [r7, #12]
 8010518:	895b      	ldrh	r3, [r3, #10]
 801051a:	897a      	ldrh	r2, [r7, #10]
 801051c:	1ad3      	subs	r3, r2, r3
 801051e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8010520:	68fb      	ldr	r3, [r7, #12]
 8010522:	891a      	ldrh	r2, [r3, #8]
 8010524:	893b      	ldrh	r3, [r7, #8]
 8010526:	1ad3      	subs	r3, r2, r3
 8010528:	b29a      	uxth	r2, r3
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d106      	bne.n	8010548 <pbuf_realloc+0x70>
 801053a:	4b26      	ldr	r3, [pc, #152]	; (80105d4 <pbuf_realloc+0xfc>)
 801053c:	f240 12af 	movw	r2, #431	; 0x1af
 8010540:	4927      	ldr	r1, [pc, #156]	; (80105e0 <pbuf_realloc+0x108>)
 8010542:	4826      	ldr	r0, [pc, #152]	; (80105dc <pbuf_realloc+0x104>)
 8010544:	f00a f8c0 	bl	801a6c8 <iprintf>
  while (rem_len > q->len) {
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	895b      	ldrh	r3, [r3, #10]
 801054c:	897a      	ldrh	r2, [r7, #10]
 801054e:	429a      	cmp	r2, r3
 8010550:	d8e1      	bhi.n	8010516 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	7b1b      	ldrb	r3, [r3, #12]
 8010556:	f003 030f 	and.w	r3, r3, #15
 801055a:	2b00      	cmp	r3, #0
 801055c:	d121      	bne.n	80105a2 <pbuf_realloc+0xca>
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	895b      	ldrh	r3, [r3, #10]
 8010562:	897a      	ldrh	r2, [r7, #10]
 8010564:	429a      	cmp	r2, r3
 8010566:	d01c      	beq.n	80105a2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	7b5b      	ldrb	r3, [r3, #13]
 801056c:	f003 0302 	and.w	r3, r3, #2
 8010570:	2b00      	cmp	r3, #0
 8010572:	d116      	bne.n	80105a2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	685a      	ldr	r2, [r3, #4]
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	1ad3      	subs	r3, r2, r3
 801057c:	b29a      	uxth	r2, r3
 801057e:	897b      	ldrh	r3, [r7, #10]
 8010580:	4413      	add	r3, r2
 8010582:	b29b      	uxth	r3, r3
 8010584:	4619      	mov	r1, r3
 8010586:	68f8      	ldr	r0, [r7, #12]
 8010588:	f7ff f80e 	bl	800f5a8 <mem_trim>
 801058c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d106      	bne.n	80105a2 <pbuf_realloc+0xca>
 8010594:	4b0f      	ldr	r3, [pc, #60]	; (80105d4 <pbuf_realloc+0xfc>)
 8010596:	f240 12bd 	movw	r2, #445	; 0x1bd
 801059a:	4912      	ldr	r1, [pc, #72]	; (80105e4 <pbuf_realloc+0x10c>)
 801059c:	480f      	ldr	r0, [pc, #60]	; (80105dc <pbuf_realloc+0x104>)
 801059e:	f00a f893 	bl	801a6c8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	897a      	ldrh	r2, [r7, #10]
 80105a6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	895a      	ldrh	r2, [r3, #10]
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 80105b0:	68fb      	ldr	r3, [r7, #12]
 80105b2:	681b      	ldr	r3, [r3, #0]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d004      	beq.n	80105c2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	4618      	mov	r0, r3
 80105be:	f000 f911 	bl	80107e4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80105c2:	68fb      	ldr	r3, [r7, #12]
 80105c4:	2200      	movs	r2, #0
 80105c6:	601a      	str	r2, [r3, #0]
 80105c8:	e000      	b.n	80105cc <pbuf_realloc+0xf4>
    return;
 80105ca:	bf00      	nop

}
 80105cc:	3710      	adds	r7, #16
 80105ce:	46bd      	mov	sp, r7
 80105d0:	bd80      	pop	{r7, pc}
 80105d2:	bf00      	nop
 80105d4:	0801c9f0 	.word	0x0801c9f0
 80105d8:	0801cb08 	.word	0x0801cb08
 80105dc:	0801ca50 	.word	0x0801ca50
 80105e0:	0801cb20 	.word	0x0801cb20
 80105e4:	0801cb38 	.word	0x0801cb38

080105e8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b086      	sub	sp, #24
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	60f8      	str	r0, [r7, #12]
 80105f0:	60b9      	str	r1, [r7, #8]
 80105f2:	4613      	mov	r3, r2
 80105f4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d106      	bne.n	801060a <pbuf_add_header_impl+0x22>
 80105fc:	4b2b      	ldr	r3, [pc, #172]	; (80106ac <pbuf_add_header_impl+0xc4>)
 80105fe:	f240 12df 	movw	r2, #479	; 0x1df
 8010602:	492b      	ldr	r1, [pc, #172]	; (80106b0 <pbuf_add_header_impl+0xc8>)
 8010604:	482b      	ldr	r0, [pc, #172]	; (80106b4 <pbuf_add_header_impl+0xcc>)
 8010606:	f00a f85f 	bl	801a6c8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801060a:	68fb      	ldr	r3, [r7, #12]
 801060c:	2b00      	cmp	r3, #0
 801060e:	d003      	beq.n	8010618 <pbuf_add_header_impl+0x30>
 8010610:	68bb      	ldr	r3, [r7, #8]
 8010612:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010616:	d301      	bcc.n	801061c <pbuf_add_header_impl+0x34>
    return 1;
 8010618:	2301      	movs	r3, #1
 801061a:	e043      	b.n	80106a4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801061c:	68bb      	ldr	r3, [r7, #8]
 801061e:	2b00      	cmp	r3, #0
 8010620:	d101      	bne.n	8010626 <pbuf_add_header_impl+0x3e>
    return 0;
 8010622:	2300      	movs	r3, #0
 8010624:	e03e      	b.n	80106a4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8010626:	68bb      	ldr	r3, [r7, #8]
 8010628:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	891a      	ldrh	r2, [r3, #8]
 801062e:	8a7b      	ldrh	r3, [r7, #18]
 8010630:	4413      	add	r3, r2
 8010632:	b29b      	uxth	r3, r3
 8010634:	8a7a      	ldrh	r2, [r7, #18]
 8010636:	429a      	cmp	r2, r3
 8010638:	d901      	bls.n	801063e <pbuf_add_header_impl+0x56>
    return 1;
 801063a:	2301      	movs	r3, #1
 801063c:	e032      	b.n	80106a4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	7b1b      	ldrb	r3, [r3, #12]
 8010642:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8010644:	8a3b      	ldrh	r3, [r7, #16]
 8010646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801064a:	2b00      	cmp	r3, #0
 801064c:	d00c      	beq.n	8010668 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	685a      	ldr	r2, [r3, #4]
 8010652:	68bb      	ldr	r3, [r7, #8]
 8010654:	425b      	negs	r3, r3
 8010656:	4413      	add	r3, r2
 8010658:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801065a:	68fb      	ldr	r3, [r7, #12]
 801065c:	3310      	adds	r3, #16
 801065e:	697a      	ldr	r2, [r7, #20]
 8010660:	429a      	cmp	r2, r3
 8010662:	d20d      	bcs.n	8010680 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8010664:	2301      	movs	r3, #1
 8010666:	e01d      	b.n	80106a4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8010668:	79fb      	ldrb	r3, [r7, #7]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d006      	beq.n	801067c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	685a      	ldr	r2, [r3, #4]
 8010672:	68bb      	ldr	r3, [r7, #8]
 8010674:	425b      	negs	r3, r3
 8010676:	4413      	add	r3, r2
 8010678:	617b      	str	r3, [r7, #20]
 801067a:	e001      	b.n	8010680 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801067c:	2301      	movs	r3, #1
 801067e:	e011      	b.n	80106a4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	697a      	ldr	r2, [r7, #20]
 8010684:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8010686:	68fb      	ldr	r3, [r7, #12]
 8010688:	895a      	ldrh	r2, [r3, #10]
 801068a:	8a7b      	ldrh	r3, [r7, #18]
 801068c:	4413      	add	r3, r2
 801068e:	b29a      	uxth	r2, r3
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	891a      	ldrh	r2, [r3, #8]
 8010698:	8a7b      	ldrh	r3, [r7, #18]
 801069a:	4413      	add	r3, r2
 801069c:	b29a      	uxth	r2, r3
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	811a      	strh	r2, [r3, #8]


  return 0;
 80106a2:	2300      	movs	r3, #0
}
 80106a4:	4618      	mov	r0, r3
 80106a6:	3718      	adds	r7, #24
 80106a8:	46bd      	mov	sp, r7
 80106aa:	bd80      	pop	{r7, pc}
 80106ac:	0801c9f0 	.word	0x0801c9f0
 80106b0:	0801cb54 	.word	0x0801cb54
 80106b4:	0801ca50 	.word	0x0801ca50

080106b8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b082      	sub	sp, #8
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
 80106c0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80106c2:	2200      	movs	r2, #0
 80106c4:	6839      	ldr	r1, [r7, #0]
 80106c6:	6878      	ldr	r0, [r7, #4]
 80106c8:	f7ff ff8e 	bl	80105e8 <pbuf_add_header_impl>
 80106cc:	4603      	mov	r3, r0
}
 80106ce:	4618      	mov	r0, r3
 80106d0:	3708      	adds	r7, #8
 80106d2:	46bd      	mov	sp, r7
 80106d4:	bd80      	pop	{r7, pc}
	...

080106d8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b084      	sub	sp, #16
 80106dc:	af00      	add	r7, sp, #0
 80106de:	6078      	str	r0, [r7, #4]
 80106e0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d106      	bne.n	80106f6 <pbuf_remove_header+0x1e>
 80106e8:	4b20      	ldr	r3, [pc, #128]	; (801076c <pbuf_remove_header+0x94>)
 80106ea:	f240 224b 	movw	r2, #587	; 0x24b
 80106ee:	4920      	ldr	r1, [pc, #128]	; (8010770 <pbuf_remove_header+0x98>)
 80106f0:	4820      	ldr	r0, [pc, #128]	; (8010774 <pbuf_remove_header+0x9c>)
 80106f2:	f009 ffe9 	bl	801a6c8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d003      	beq.n	8010704 <pbuf_remove_header+0x2c>
 80106fc:	683b      	ldr	r3, [r7, #0]
 80106fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010702:	d301      	bcc.n	8010708 <pbuf_remove_header+0x30>
    return 1;
 8010704:	2301      	movs	r3, #1
 8010706:	e02c      	b.n	8010762 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8010708:	683b      	ldr	r3, [r7, #0]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d101      	bne.n	8010712 <pbuf_remove_header+0x3a>
    return 0;
 801070e:	2300      	movs	r3, #0
 8010710:	e027      	b.n	8010762 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8010712:	683b      	ldr	r3, [r7, #0]
 8010714:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	895b      	ldrh	r3, [r3, #10]
 801071a:	89fa      	ldrh	r2, [r7, #14]
 801071c:	429a      	cmp	r2, r3
 801071e:	d908      	bls.n	8010732 <pbuf_remove_header+0x5a>
 8010720:	4b12      	ldr	r3, [pc, #72]	; (801076c <pbuf_remove_header+0x94>)
 8010722:	f240 2255 	movw	r2, #597	; 0x255
 8010726:	4914      	ldr	r1, [pc, #80]	; (8010778 <pbuf_remove_header+0xa0>)
 8010728:	4812      	ldr	r0, [pc, #72]	; (8010774 <pbuf_remove_header+0x9c>)
 801072a:	f009 ffcd 	bl	801a6c8 <iprintf>
 801072e:	2301      	movs	r3, #1
 8010730:	e017      	b.n	8010762 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8010732:	687b      	ldr	r3, [r7, #4]
 8010734:	685b      	ldr	r3, [r3, #4]
 8010736:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	685a      	ldr	r2, [r3, #4]
 801073c:	683b      	ldr	r3, [r7, #0]
 801073e:	441a      	add	r2, r3
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	895a      	ldrh	r2, [r3, #10]
 8010748:	89fb      	ldrh	r3, [r7, #14]
 801074a:	1ad3      	subs	r3, r2, r3
 801074c:	b29a      	uxth	r2, r3
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	891a      	ldrh	r2, [r3, #8]
 8010756:	89fb      	ldrh	r3, [r7, #14]
 8010758:	1ad3      	subs	r3, r2, r3
 801075a:	b29a      	uxth	r2, r3
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8010760:	2300      	movs	r3, #0
}
 8010762:	4618      	mov	r0, r3
 8010764:	3710      	adds	r7, #16
 8010766:	46bd      	mov	sp, r7
 8010768:	bd80      	pop	{r7, pc}
 801076a:	bf00      	nop
 801076c:	0801c9f0 	.word	0x0801c9f0
 8010770:	0801cb54 	.word	0x0801cb54
 8010774:	0801ca50 	.word	0x0801ca50
 8010778:	0801cb60 	.word	0x0801cb60

0801077c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801077c:	b580      	push	{r7, lr}
 801077e:	b082      	sub	sp, #8
 8010780:	af00      	add	r7, sp, #0
 8010782:	6078      	str	r0, [r7, #4]
 8010784:	460b      	mov	r3, r1
 8010786:	807b      	strh	r3, [r7, #2]
 8010788:	4613      	mov	r3, r2
 801078a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801078c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010790:	2b00      	cmp	r3, #0
 8010792:	da08      	bge.n	80107a6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8010794:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010798:	425b      	negs	r3, r3
 801079a:	4619      	mov	r1, r3
 801079c:	6878      	ldr	r0, [r7, #4]
 801079e:	f7ff ff9b 	bl	80106d8 <pbuf_remove_header>
 80107a2:	4603      	mov	r3, r0
 80107a4:	e007      	b.n	80107b6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 80107a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80107aa:	787a      	ldrb	r2, [r7, #1]
 80107ac:	4619      	mov	r1, r3
 80107ae:	6878      	ldr	r0, [r7, #4]
 80107b0:	f7ff ff1a 	bl	80105e8 <pbuf_add_header_impl>
 80107b4:	4603      	mov	r3, r0
  }
}
 80107b6:	4618      	mov	r0, r3
 80107b8:	3708      	adds	r7, #8
 80107ba:	46bd      	mov	sp, r7
 80107bc:	bd80      	pop	{r7, pc}

080107be <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80107be:	b580      	push	{r7, lr}
 80107c0:	b082      	sub	sp, #8
 80107c2:	af00      	add	r7, sp, #0
 80107c4:	6078      	str	r0, [r7, #4]
 80107c6:	460b      	mov	r3, r1
 80107c8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80107ca:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80107ce:	2201      	movs	r2, #1
 80107d0:	4619      	mov	r1, r3
 80107d2:	6878      	ldr	r0, [r7, #4]
 80107d4:	f7ff ffd2 	bl	801077c <pbuf_header_impl>
 80107d8:	4603      	mov	r3, r0
}
 80107da:	4618      	mov	r0, r3
 80107dc:	3708      	adds	r7, #8
 80107de:	46bd      	mov	sp, r7
 80107e0:	bd80      	pop	{r7, pc}
	...

080107e4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b088      	sub	sp, #32
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d10b      	bne.n	801080a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d106      	bne.n	8010806 <pbuf_free+0x22>
 80107f8:	4b3b      	ldr	r3, [pc, #236]	; (80108e8 <pbuf_free+0x104>)
 80107fa:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80107fe:	493b      	ldr	r1, [pc, #236]	; (80108ec <pbuf_free+0x108>)
 8010800:	483b      	ldr	r0, [pc, #236]	; (80108f0 <pbuf_free+0x10c>)
 8010802:	f009 ff61 	bl	801a6c8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8010806:	2300      	movs	r3, #0
 8010808:	e069      	b.n	80108de <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801080a:	2300      	movs	r3, #0
 801080c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801080e:	e062      	b.n	80108d6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8010810:	f009 fd32 	bl	801a278 <sys_arch_protect>
 8010814:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	7b9b      	ldrb	r3, [r3, #14]
 801081a:	2b00      	cmp	r3, #0
 801081c:	d106      	bne.n	801082c <pbuf_free+0x48>
 801081e:	4b32      	ldr	r3, [pc, #200]	; (80108e8 <pbuf_free+0x104>)
 8010820:	f240 22f1 	movw	r2, #753	; 0x2f1
 8010824:	4933      	ldr	r1, [pc, #204]	; (80108f4 <pbuf_free+0x110>)
 8010826:	4832      	ldr	r0, [pc, #200]	; (80108f0 <pbuf_free+0x10c>)
 8010828:	f009 ff4e 	bl	801a6c8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	7b9b      	ldrb	r3, [r3, #14]
 8010830:	3b01      	subs	r3, #1
 8010832:	b2da      	uxtb	r2, r3
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	739a      	strb	r2, [r3, #14]
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	7b9b      	ldrb	r3, [r3, #14]
 801083c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 801083e:	69b8      	ldr	r0, [r7, #24]
 8010840:	f009 fd28 	bl	801a294 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8010844:	7dfb      	ldrb	r3, [r7, #23]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d143      	bne.n	80108d2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	681b      	ldr	r3, [r3, #0]
 801084e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	7b1b      	ldrb	r3, [r3, #12]
 8010854:	f003 030f 	and.w	r3, r3, #15
 8010858:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	7b5b      	ldrb	r3, [r3, #13]
 801085e:	f003 0302 	and.w	r3, r3, #2
 8010862:	2b00      	cmp	r3, #0
 8010864:	d011      	beq.n	801088a <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8010866:	687b      	ldr	r3, [r7, #4]
 8010868:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801086a:	68bb      	ldr	r3, [r7, #8]
 801086c:	691b      	ldr	r3, [r3, #16]
 801086e:	2b00      	cmp	r3, #0
 8010870:	d106      	bne.n	8010880 <pbuf_free+0x9c>
 8010872:	4b1d      	ldr	r3, [pc, #116]	; (80108e8 <pbuf_free+0x104>)
 8010874:	f240 22ff 	movw	r2, #767	; 0x2ff
 8010878:	491f      	ldr	r1, [pc, #124]	; (80108f8 <pbuf_free+0x114>)
 801087a:	481d      	ldr	r0, [pc, #116]	; (80108f0 <pbuf_free+0x10c>)
 801087c:	f009 ff24 	bl	801a6c8 <iprintf>
        pc->custom_free_function(p);
 8010880:	68bb      	ldr	r3, [r7, #8]
 8010882:	691b      	ldr	r3, [r3, #16]
 8010884:	6878      	ldr	r0, [r7, #4]
 8010886:	4798      	blx	r3
 8010888:	e01d      	b.n	80108c6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801088a:	7bfb      	ldrb	r3, [r7, #15]
 801088c:	2b02      	cmp	r3, #2
 801088e:	d104      	bne.n	801089a <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8010890:	6879      	ldr	r1, [r7, #4]
 8010892:	200c      	movs	r0, #12
 8010894:	f7ff f966 	bl	800fb64 <memp_free>
 8010898:	e015      	b.n	80108c6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801089a:	7bfb      	ldrb	r3, [r7, #15]
 801089c:	2b01      	cmp	r3, #1
 801089e:	d104      	bne.n	80108aa <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 80108a0:	6879      	ldr	r1, [r7, #4]
 80108a2:	200b      	movs	r0, #11
 80108a4:	f7ff f95e 	bl	800fb64 <memp_free>
 80108a8:	e00d      	b.n	80108c6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 80108aa:	7bfb      	ldrb	r3, [r7, #15]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d103      	bne.n	80108b8 <pbuf_free+0xd4>
          mem_free(p);
 80108b0:	6878      	ldr	r0, [r7, #4]
 80108b2:	f7fe fde9 	bl	800f488 <mem_free>
 80108b6:	e006      	b.n	80108c6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 80108b8:	4b0b      	ldr	r3, [pc, #44]	; (80108e8 <pbuf_free+0x104>)
 80108ba:	f240 320f 	movw	r2, #783	; 0x30f
 80108be:	490f      	ldr	r1, [pc, #60]	; (80108fc <pbuf_free+0x118>)
 80108c0:	480b      	ldr	r0, [pc, #44]	; (80108f0 <pbuf_free+0x10c>)
 80108c2:	f009 ff01 	bl	801a6c8 <iprintf>
        }
      }
      count++;
 80108c6:	7ffb      	ldrb	r3, [r7, #31]
 80108c8:	3301      	adds	r3, #1
 80108ca:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80108cc:	693b      	ldr	r3, [r7, #16]
 80108ce:	607b      	str	r3, [r7, #4]
 80108d0:	e001      	b.n	80108d6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80108d2:	2300      	movs	r3, #0
 80108d4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	2b00      	cmp	r3, #0
 80108da:	d199      	bne.n	8010810 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80108dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80108de:	4618      	mov	r0, r3
 80108e0:	3720      	adds	r7, #32
 80108e2:	46bd      	mov	sp, r7
 80108e4:	bd80      	pop	{r7, pc}
 80108e6:	bf00      	nop
 80108e8:	0801c9f0 	.word	0x0801c9f0
 80108ec:	0801cb54 	.word	0x0801cb54
 80108f0:	0801ca50 	.word	0x0801ca50
 80108f4:	0801cb80 	.word	0x0801cb80
 80108f8:	0801cb98 	.word	0x0801cb98
 80108fc:	0801cbbc 	.word	0x0801cbbc

08010900 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8010900:	b480      	push	{r7}
 8010902:	b085      	sub	sp, #20
 8010904:	af00      	add	r7, sp, #0
 8010906:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8010908:	2300      	movs	r3, #0
 801090a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801090c:	e005      	b.n	801091a <pbuf_clen+0x1a>
    ++len;
 801090e:	89fb      	ldrh	r3, [r7, #14]
 8010910:	3301      	adds	r3, #1
 8010912:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	681b      	ldr	r3, [r3, #0]
 8010918:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	2b00      	cmp	r3, #0
 801091e:	d1f6      	bne.n	801090e <pbuf_clen+0xe>
  }
  return len;
 8010920:	89fb      	ldrh	r3, [r7, #14]
}
 8010922:	4618      	mov	r0, r3
 8010924:	3714      	adds	r7, #20
 8010926:	46bd      	mov	sp, r7
 8010928:	f85d 7b04 	ldr.w	r7, [sp], #4
 801092c:	4770      	bx	lr
	...

08010930 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8010930:	b580      	push	{r7, lr}
 8010932:	b084      	sub	sp, #16
 8010934:	af00      	add	r7, sp, #0
 8010936:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	2b00      	cmp	r3, #0
 801093c:	d016      	beq.n	801096c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801093e:	f009 fc9b 	bl	801a278 <sys_arch_protect>
 8010942:	60f8      	str	r0, [r7, #12]
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	7b9b      	ldrb	r3, [r3, #14]
 8010948:	3301      	adds	r3, #1
 801094a:	b2da      	uxtb	r2, r3
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	739a      	strb	r2, [r3, #14]
 8010950:	68f8      	ldr	r0, [r7, #12]
 8010952:	f009 fc9f 	bl	801a294 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	7b9b      	ldrb	r3, [r3, #14]
 801095a:	2b00      	cmp	r3, #0
 801095c:	d106      	bne.n	801096c <pbuf_ref+0x3c>
 801095e:	4b05      	ldr	r3, [pc, #20]	; (8010974 <pbuf_ref+0x44>)
 8010960:	f240 3242 	movw	r2, #834	; 0x342
 8010964:	4904      	ldr	r1, [pc, #16]	; (8010978 <pbuf_ref+0x48>)
 8010966:	4805      	ldr	r0, [pc, #20]	; (801097c <pbuf_ref+0x4c>)
 8010968:	f009 feae 	bl	801a6c8 <iprintf>
  }
}
 801096c:	bf00      	nop
 801096e:	3710      	adds	r7, #16
 8010970:	46bd      	mov	sp, r7
 8010972:	bd80      	pop	{r7, pc}
 8010974:	0801c9f0 	.word	0x0801c9f0
 8010978:	0801cbd0 	.word	0x0801cbd0
 801097c:	0801ca50 	.word	0x0801ca50

08010980 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8010980:	b580      	push	{r7, lr}
 8010982:	b084      	sub	sp, #16
 8010984:	af00      	add	r7, sp, #0
 8010986:	6078      	str	r0, [r7, #4]
 8010988:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801098a:	687b      	ldr	r3, [r7, #4]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d002      	beq.n	8010996 <pbuf_cat+0x16>
 8010990:	683b      	ldr	r3, [r7, #0]
 8010992:	2b00      	cmp	r3, #0
 8010994:	d107      	bne.n	80109a6 <pbuf_cat+0x26>
 8010996:	4b20      	ldr	r3, [pc, #128]	; (8010a18 <pbuf_cat+0x98>)
 8010998:	f240 3259 	movw	r2, #857	; 0x359
 801099c:	491f      	ldr	r1, [pc, #124]	; (8010a1c <pbuf_cat+0x9c>)
 801099e:	4820      	ldr	r0, [pc, #128]	; (8010a20 <pbuf_cat+0xa0>)
 80109a0:	f009 fe92 	bl	801a6c8 <iprintf>
 80109a4:	e034      	b.n	8010a10 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	60fb      	str	r3, [r7, #12]
 80109aa:	e00a      	b.n	80109c2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80109ac:	68fb      	ldr	r3, [r7, #12]
 80109ae:	891a      	ldrh	r2, [r3, #8]
 80109b0:	683b      	ldr	r3, [r7, #0]
 80109b2:	891b      	ldrh	r3, [r3, #8]
 80109b4:	4413      	add	r3, r2
 80109b6:	b29a      	uxth	r2, r3
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	60fb      	str	r3, [r7, #12]
 80109c2:	68fb      	ldr	r3, [r7, #12]
 80109c4:	681b      	ldr	r3, [r3, #0]
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d1f0      	bne.n	80109ac <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80109ca:	68fb      	ldr	r3, [r7, #12]
 80109cc:	891a      	ldrh	r2, [r3, #8]
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	895b      	ldrh	r3, [r3, #10]
 80109d2:	429a      	cmp	r2, r3
 80109d4:	d006      	beq.n	80109e4 <pbuf_cat+0x64>
 80109d6:	4b10      	ldr	r3, [pc, #64]	; (8010a18 <pbuf_cat+0x98>)
 80109d8:	f240 3262 	movw	r2, #866	; 0x362
 80109dc:	4911      	ldr	r1, [pc, #68]	; (8010a24 <pbuf_cat+0xa4>)
 80109de:	4810      	ldr	r0, [pc, #64]	; (8010a20 <pbuf_cat+0xa0>)
 80109e0:	f009 fe72 	bl	801a6c8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80109e4:	68fb      	ldr	r3, [r7, #12]
 80109e6:	681b      	ldr	r3, [r3, #0]
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d006      	beq.n	80109fa <pbuf_cat+0x7a>
 80109ec:	4b0a      	ldr	r3, [pc, #40]	; (8010a18 <pbuf_cat+0x98>)
 80109ee:	f240 3263 	movw	r2, #867	; 0x363
 80109f2:	490d      	ldr	r1, [pc, #52]	; (8010a28 <pbuf_cat+0xa8>)
 80109f4:	480a      	ldr	r0, [pc, #40]	; (8010a20 <pbuf_cat+0xa0>)
 80109f6:	f009 fe67 	bl	801a6c8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	891a      	ldrh	r2, [r3, #8]
 80109fe:	683b      	ldr	r3, [r7, #0]
 8010a00:	891b      	ldrh	r3, [r3, #8]
 8010a02:	4413      	add	r3, r2
 8010a04:	b29a      	uxth	r2, r3
 8010a06:	68fb      	ldr	r3, [r7, #12]
 8010a08:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	683a      	ldr	r2, [r7, #0]
 8010a0e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8010a10:	3710      	adds	r7, #16
 8010a12:	46bd      	mov	sp, r7
 8010a14:	bd80      	pop	{r7, pc}
 8010a16:	bf00      	nop
 8010a18:	0801c9f0 	.word	0x0801c9f0
 8010a1c:	0801cbe4 	.word	0x0801cbe4
 8010a20:	0801ca50 	.word	0x0801ca50
 8010a24:	0801cc1c 	.word	0x0801cc1c
 8010a28:	0801cc4c 	.word	0x0801cc4c

08010a2c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b082      	sub	sp, #8
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
 8010a34:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8010a36:	6839      	ldr	r1, [r7, #0]
 8010a38:	6878      	ldr	r0, [r7, #4]
 8010a3a:	f7ff ffa1 	bl	8010980 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8010a3e:	6838      	ldr	r0, [r7, #0]
 8010a40:	f7ff ff76 	bl	8010930 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8010a44:	bf00      	nop
 8010a46:	3708      	adds	r7, #8
 8010a48:	46bd      	mov	sp, r7
 8010a4a:	bd80      	pop	{r7, pc}

08010a4c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8010a4c:	b580      	push	{r7, lr}
 8010a4e:	b086      	sub	sp, #24
 8010a50:	af00      	add	r7, sp, #0
 8010a52:	6078      	str	r0, [r7, #4]
 8010a54:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8010a56:	2300      	movs	r3, #0
 8010a58:	617b      	str	r3, [r7, #20]
 8010a5a:	2300      	movs	r3, #0
 8010a5c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d008      	beq.n	8010a76 <pbuf_copy+0x2a>
 8010a64:	683b      	ldr	r3, [r7, #0]
 8010a66:	2b00      	cmp	r3, #0
 8010a68:	d005      	beq.n	8010a76 <pbuf_copy+0x2a>
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	891a      	ldrh	r2, [r3, #8]
 8010a6e:	683b      	ldr	r3, [r7, #0]
 8010a70:	891b      	ldrh	r3, [r3, #8]
 8010a72:	429a      	cmp	r2, r3
 8010a74:	d209      	bcs.n	8010a8a <pbuf_copy+0x3e>
 8010a76:	4b57      	ldr	r3, [pc, #348]	; (8010bd4 <pbuf_copy+0x188>)
 8010a78:	f240 32c9 	movw	r2, #969	; 0x3c9
 8010a7c:	4956      	ldr	r1, [pc, #344]	; (8010bd8 <pbuf_copy+0x18c>)
 8010a7e:	4857      	ldr	r0, [pc, #348]	; (8010bdc <pbuf_copy+0x190>)
 8010a80:	f009 fe22 	bl	801a6c8 <iprintf>
 8010a84:	f06f 030f 	mvn.w	r3, #15
 8010a88:	e09f      	b.n	8010bca <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	895b      	ldrh	r3, [r3, #10]
 8010a8e:	461a      	mov	r2, r3
 8010a90:	697b      	ldr	r3, [r7, #20]
 8010a92:	1ad2      	subs	r2, r2, r3
 8010a94:	683b      	ldr	r3, [r7, #0]
 8010a96:	895b      	ldrh	r3, [r3, #10]
 8010a98:	4619      	mov	r1, r3
 8010a9a:	693b      	ldr	r3, [r7, #16]
 8010a9c:	1acb      	subs	r3, r1, r3
 8010a9e:	429a      	cmp	r2, r3
 8010aa0:	d306      	bcc.n	8010ab0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8010aa2:	683b      	ldr	r3, [r7, #0]
 8010aa4:	895b      	ldrh	r3, [r3, #10]
 8010aa6:	461a      	mov	r2, r3
 8010aa8:	693b      	ldr	r3, [r7, #16]
 8010aaa:	1ad3      	subs	r3, r2, r3
 8010aac:	60fb      	str	r3, [r7, #12]
 8010aae:	e005      	b.n	8010abc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	895b      	ldrh	r3, [r3, #10]
 8010ab4:	461a      	mov	r2, r3
 8010ab6:	697b      	ldr	r3, [r7, #20]
 8010ab8:	1ad3      	subs	r3, r2, r3
 8010aba:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	685a      	ldr	r2, [r3, #4]
 8010ac0:	697b      	ldr	r3, [r7, #20]
 8010ac2:	18d0      	adds	r0, r2, r3
 8010ac4:	683b      	ldr	r3, [r7, #0]
 8010ac6:	685a      	ldr	r2, [r3, #4]
 8010ac8:	693b      	ldr	r3, [r7, #16]
 8010aca:	4413      	add	r3, r2
 8010acc:	68fa      	ldr	r2, [r7, #12]
 8010ace:	4619      	mov	r1, r3
 8010ad0:	f009 fd20 	bl	801a514 <memcpy>
    offset_to += len;
 8010ad4:	697a      	ldr	r2, [r7, #20]
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	4413      	add	r3, r2
 8010ada:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8010adc:	693a      	ldr	r2, [r7, #16]
 8010ade:	68fb      	ldr	r3, [r7, #12]
 8010ae0:	4413      	add	r3, r2
 8010ae2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	895b      	ldrh	r3, [r3, #10]
 8010ae8:	461a      	mov	r2, r3
 8010aea:	697b      	ldr	r3, [r7, #20]
 8010aec:	4293      	cmp	r3, r2
 8010aee:	d906      	bls.n	8010afe <pbuf_copy+0xb2>
 8010af0:	4b38      	ldr	r3, [pc, #224]	; (8010bd4 <pbuf_copy+0x188>)
 8010af2:	f240 32d9 	movw	r2, #985	; 0x3d9
 8010af6:	493a      	ldr	r1, [pc, #232]	; (8010be0 <pbuf_copy+0x194>)
 8010af8:	4838      	ldr	r0, [pc, #224]	; (8010bdc <pbuf_copy+0x190>)
 8010afa:	f009 fde5 	bl	801a6c8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8010afe:	683b      	ldr	r3, [r7, #0]
 8010b00:	895b      	ldrh	r3, [r3, #10]
 8010b02:	461a      	mov	r2, r3
 8010b04:	693b      	ldr	r3, [r7, #16]
 8010b06:	4293      	cmp	r3, r2
 8010b08:	d906      	bls.n	8010b18 <pbuf_copy+0xcc>
 8010b0a:	4b32      	ldr	r3, [pc, #200]	; (8010bd4 <pbuf_copy+0x188>)
 8010b0c:	f240 32da 	movw	r2, #986	; 0x3da
 8010b10:	4934      	ldr	r1, [pc, #208]	; (8010be4 <pbuf_copy+0x198>)
 8010b12:	4832      	ldr	r0, [pc, #200]	; (8010bdc <pbuf_copy+0x190>)
 8010b14:	f009 fdd8 	bl	801a6c8 <iprintf>
    if (offset_from >= p_from->len) {
 8010b18:	683b      	ldr	r3, [r7, #0]
 8010b1a:	895b      	ldrh	r3, [r3, #10]
 8010b1c:	461a      	mov	r2, r3
 8010b1e:	693b      	ldr	r3, [r7, #16]
 8010b20:	4293      	cmp	r3, r2
 8010b22:	d304      	bcc.n	8010b2e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8010b24:	2300      	movs	r3, #0
 8010b26:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8010b28:	683b      	ldr	r3, [r7, #0]
 8010b2a:	681b      	ldr	r3, [r3, #0]
 8010b2c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	895b      	ldrh	r3, [r3, #10]
 8010b32:	461a      	mov	r2, r3
 8010b34:	697b      	ldr	r3, [r7, #20]
 8010b36:	4293      	cmp	r3, r2
 8010b38:	d114      	bne.n	8010b64 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	681b      	ldr	r3, [r3, #0]
 8010b42:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	2b00      	cmp	r3, #0
 8010b48:	d10c      	bne.n	8010b64 <pbuf_copy+0x118>
 8010b4a:	683b      	ldr	r3, [r7, #0]
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d009      	beq.n	8010b64 <pbuf_copy+0x118>
 8010b50:	4b20      	ldr	r3, [pc, #128]	; (8010bd4 <pbuf_copy+0x188>)
 8010b52:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8010b56:	4924      	ldr	r1, [pc, #144]	; (8010be8 <pbuf_copy+0x19c>)
 8010b58:	4820      	ldr	r0, [pc, #128]	; (8010bdc <pbuf_copy+0x190>)
 8010b5a:	f009 fdb5 	bl	801a6c8 <iprintf>
 8010b5e:	f06f 030f 	mvn.w	r3, #15
 8010b62:	e032      	b.n	8010bca <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8010b64:	683b      	ldr	r3, [r7, #0]
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	d013      	beq.n	8010b92 <pbuf_copy+0x146>
 8010b6a:	683b      	ldr	r3, [r7, #0]
 8010b6c:	895a      	ldrh	r2, [r3, #10]
 8010b6e:	683b      	ldr	r3, [r7, #0]
 8010b70:	891b      	ldrh	r3, [r3, #8]
 8010b72:	429a      	cmp	r2, r3
 8010b74:	d10d      	bne.n	8010b92 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010b76:	683b      	ldr	r3, [r7, #0]
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d009      	beq.n	8010b92 <pbuf_copy+0x146>
 8010b7e:	4b15      	ldr	r3, [pc, #84]	; (8010bd4 <pbuf_copy+0x188>)
 8010b80:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8010b84:	4919      	ldr	r1, [pc, #100]	; (8010bec <pbuf_copy+0x1a0>)
 8010b86:	4815      	ldr	r0, [pc, #84]	; (8010bdc <pbuf_copy+0x190>)
 8010b88:	f009 fd9e 	bl	801a6c8 <iprintf>
 8010b8c:	f06f 0305 	mvn.w	r3, #5
 8010b90:	e01b      	b.n	8010bca <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d013      	beq.n	8010bc0 <pbuf_copy+0x174>
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	895a      	ldrh	r2, [r3, #10]
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	891b      	ldrh	r3, [r3, #8]
 8010ba0:	429a      	cmp	r2, r3
 8010ba2:	d10d      	bne.n	8010bc0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	2b00      	cmp	r3, #0
 8010baa:	d009      	beq.n	8010bc0 <pbuf_copy+0x174>
 8010bac:	4b09      	ldr	r3, [pc, #36]	; (8010bd4 <pbuf_copy+0x188>)
 8010bae:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8010bb2:	490e      	ldr	r1, [pc, #56]	; (8010bec <pbuf_copy+0x1a0>)
 8010bb4:	4809      	ldr	r0, [pc, #36]	; (8010bdc <pbuf_copy+0x190>)
 8010bb6:	f009 fd87 	bl	801a6c8 <iprintf>
 8010bba:	f06f 0305 	mvn.w	r3, #5
 8010bbe:	e004      	b.n	8010bca <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010bc0:	683b      	ldr	r3, [r7, #0]
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	f47f af61 	bne.w	8010a8a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010bc8:	2300      	movs	r3, #0
}
 8010bca:	4618      	mov	r0, r3
 8010bcc:	3718      	adds	r7, #24
 8010bce:	46bd      	mov	sp, r7
 8010bd0:	bd80      	pop	{r7, pc}
 8010bd2:	bf00      	nop
 8010bd4:	0801c9f0 	.word	0x0801c9f0
 8010bd8:	0801cc98 	.word	0x0801cc98
 8010bdc:	0801ca50 	.word	0x0801ca50
 8010be0:	0801ccc8 	.word	0x0801ccc8
 8010be4:	0801cce0 	.word	0x0801cce0
 8010be8:	0801ccfc 	.word	0x0801ccfc
 8010bec:	0801cd0c 	.word	0x0801cd0c

08010bf0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010bf0:	b580      	push	{r7, lr}
 8010bf2:	b088      	sub	sp, #32
 8010bf4:	af00      	add	r7, sp, #0
 8010bf6:	60f8      	str	r0, [r7, #12]
 8010bf8:	60b9      	str	r1, [r7, #8]
 8010bfa:	4611      	mov	r1, r2
 8010bfc:	461a      	mov	r2, r3
 8010bfe:	460b      	mov	r3, r1
 8010c00:	80fb      	strh	r3, [r7, #6]
 8010c02:	4613      	mov	r3, r2
 8010c04:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8010c06:	2300      	movs	r3, #0
 8010c08:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8010c0a:	2300      	movs	r3, #0
 8010c0c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d108      	bne.n	8010c26 <pbuf_copy_partial+0x36>
 8010c14:	4b2b      	ldr	r3, [pc, #172]	; (8010cc4 <pbuf_copy_partial+0xd4>)
 8010c16:	f240 420a 	movw	r2, #1034	; 0x40a
 8010c1a:	492b      	ldr	r1, [pc, #172]	; (8010cc8 <pbuf_copy_partial+0xd8>)
 8010c1c:	482b      	ldr	r0, [pc, #172]	; (8010ccc <pbuf_copy_partial+0xdc>)
 8010c1e:	f009 fd53 	bl	801a6c8 <iprintf>
 8010c22:	2300      	movs	r3, #0
 8010c24:	e04a      	b.n	8010cbc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8010c26:	68bb      	ldr	r3, [r7, #8]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d108      	bne.n	8010c3e <pbuf_copy_partial+0x4e>
 8010c2c:	4b25      	ldr	r3, [pc, #148]	; (8010cc4 <pbuf_copy_partial+0xd4>)
 8010c2e:	f240 420b 	movw	r2, #1035	; 0x40b
 8010c32:	4927      	ldr	r1, [pc, #156]	; (8010cd0 <pbuf_copy_partial+0xe0>)
 8010c34:	4825      	ldr	r0, [pc, #148]	; (8010ccc <pbuf_copy_partial+0xdc>)
 8010c36:	f009 fd47 	bl	801a6c8 <iprintf>
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	e03e      	b.n	8010cbc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	61fb      	str	r3, [r7, #28]
 8010c42:	e034      	b.n	8010cae <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8010c44:	88bb      	ldrh	r3, [r7, #4]
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d00a      	beq.n	8010c60 <pbuf_copy_partial+0x70>
 8010c4a:	69fb      	ldr	r3, [r7, #28]
 8010c4c:	895b      	ldrh	r3, [r3, #10]
 8010c4e:	88ba      	ldrh	r2, [r7, #4]
 8010c50:	429a      	cmp	r2, r3
 8010c52:	d305      	bcc.n	8010c60 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8010c54:	69fb      	ldr	r3, [r7, #28]
 8010c56:	895b      	ldrh	r3, [r3, #10]
 8010c58:	88ba      	ldrh	r2, [r7, #4]
 8010c5a:	1ad3      	subs	r3, r2, r3
 8010c5c:	80bb      	strh	r3, [r7, #4]
 8010c5e:	e023      	b.n	8010ca8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8010c60:	69fb      	ldr	r3, [r7, #28]
 8010c62:	895a      	ldrh	r2, [r3, #10]
 8010c64:	88bb      	ldrh	r3, [r7, #4]
 8010c66:	1ad3      	subs	r3, r2, r3
 8010c68:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8010c6a:	8b3a      	ldrh	r2, [r7, #24]
 8010c6c:	88fb      	ldrh	r3, [r7, #6]
 8010c6e:	429a      	cmp	r2, r3
 8010c70:	d901      	bls.n	8010c76 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8010c72:	88fb      	ldrh	r3, [r7, #6]
 8010c74:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 8010c76:	8b7b      	ldrh	r3, [r7, #26]
 8010c78:	68ba      	ldr	r2, [r7, #8]
 8010c7a:	18d0      	adds	r0, r2, r3
 8010c7c:	69fb      	ldr	r3, [r7, #28]
 8010c7e:	685a      	ldr	r2, [r3, #4]
 8010c80:	88bb      	ldrh	r3, [r7, #4]
 8010c82:	4413      	add	r3, r2
 8010c84:	8b3a      	ldrh	r2, [r7, #24]
 8010c86:	4619      	mov	r1, r3
 8010c88:	f009 fc44 	bl	801a514 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8010c8c:	8afa      	ldrh	r2, [r7, #22]
 8010c8e:	8b3b      	ldrh	r3, [r7, #24]
 8010c90:	4413      	add	r3, r2
 8010c92:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8010c94:	8b7a      	ldrh	r2, [r7, #26]
 8010c96:	8b3b      	ldrh	r3, [r7, #24]
 8010c98:	4413      	add	r3, r2
 8010c9a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8010c9c:	88fa      	ldrh	r2, [r7, #6]
 8010c9e:	8b3b      	ldrh	r3, [r7, #24]
 8010ca0:	1ad3      	subs	r3, r2, r3
 8010ca2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8010ca4:	2300      	movs	r3, #0
 8010ca6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010ca8:	69fb      	ldr	r3, [r7, #28]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	61fb      	str	r3, [r7, #28]
 8010cae:	88fb      	ldrh	r3, [r7, #6]
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d002      	beq.n	8010cba <pbuf_copy_partial+0xca>
 8010cb4:	69fb      	ldr	r3, [r7, #28]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d1c4      	bne.n	8010c44 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8010cba:	8afb      	ldrh	r3, [r7, #22]
}
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	3720      	adds	r7, #32
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	bd80      	pop	{r7, pc}
 8010cc4:	0801c9f0 	.word	0x0801c9f0
 8010cc8:	0801cd38 	.word	0x0801cd38
 8010ccc:	0801ca50 	.word	0x0801ca50
 8010cd0:	0801cd58 	.word	0x0801cd58

08010cd4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8010cd4:	b580      	push	{r7, lr}
 8010cd6:	b084      	sub	sp, #16
 8010cd8:	af00      	add	r7, sp, #0
 8010cda:	4603      	mov	r3, r0
 8010cdc:	603a      	str	r2, [r7, #0]
 8010cde:	71fb      	strb	r3, [r7, #7]
 8010ce0:	460b      	mov	r3, r1
 8010ce2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8010ce4:	683b      	ldr	r3, [r7, #0]
 8010ce6:	8919      	ldrh	r1, [r3, #8]
 8010ce8:	88ba      	ldrh	r2, [r7, #4]
 8010cea:	79fb      	ldrb	r3, [r7, #7]
 8010cec:	4618      	mov	r0, r3
 8010cee:	f7ff fa95 	bl	801021c <pbuf_alloc>
 8010cf2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8010cf4:	68fb      	ldr	r3, [r7, #12]
 8010cf6:	2b00      	cmp	r3, #0
 8010cf8:	d101      	bne.n	8010cfe <pbuf_clone+0x2a>
    return NULL;
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	e011      	b.n	8010d22 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8010cfe:	6839      	ldr	r1, [r7, #0]
 8010d00:	68f8      	ldr	r0, [r7, #12]
 8010d02:	f7ff fea3 	bl	8010a4c <pbuf_copy>
 8010d06:	4603      	mov	r3, r0
 8010d08:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8010d0a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d006      	beq.n	8010d20 <pbuf_clone+0x4c>
 8010d12:	4b06      	ldr	r3, [pc, #24]	; (8010d2c <pbuf_clone+0x58>)
 8010d14:	f240 5224 	movw	r2, #1316	; 0x524
 8010d18:	4905      	ldr	r1, [pc, #20]	; (8010d30 <pbuf_clone+0x5c>)
 8010d1a:	4806      	ldr	r0, [pc, #24]	; (8010d34 <pbuf_clone+0x60>)
 8010d1c:	f009 fcd4 	bl	801a6c8 <iprintf>
  return q;
 8010d20:	68fb      	ldr	r3, [r7, #12]
}
 8010d22:	4618      	mov	r0, r3
 8010d24:	3710      	adds	r7, #16
 8010d26:	46bd      	mov	sp, r7
 8010d28:	bd80      	pop	{r7, pc}
 8010d2a:	bf00      	nop
 8010d2c:	0801c9f0 	.word	0x0801c9f0
 8010d30:	0801ce64 	.word	0x0801ce64
 8010d34:	0801ca50 	.word	0x0801ca50

08010d38 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8010d38:	b580      	push	{r7, lr}
 8010d3a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010d3c:	f009 fcdc 	bl	801a6f8 <rand>
 8010d40:	4603      	mov	r3, r0
 8010d42:	b29b      	uxth	r3, r3
 8010d44:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010d48:	b29b      	uxth	r3, r3
 8010d4a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8010d4e:	b29a      	uxth	r2, r3
 8010d50:	4b01      	ldr	r3, [pc, #4]	; (8010d58 <tcp_init+0x20>)
 8010d52:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010d54:	bf00      	nop
 8010d56:	bd80      	pop	{r7, pc}
 8010d58:	200000a4 	.word	0x200000a4

08010d5c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b082      	sub	sp, #8
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	7d1b      	ldrb	r3, [r3, #20]
 8010d68:	2b01      	cmp	r3, #1
 8010d6a:	d105      	bne.n	8010d78 <tcp_free+0x1c>
 8010d6c:	4b06      	ldr	r3, [pc, #24]	; (8010d88 <tcp_free+0x2c>)
 8010d6e:	22d4      	movs	r2, #212	; 0xd4
 8010d70:	4906      	ldr	r1, [pc, #24]	; (8010d8c <tcp_free+0x30>)
 8010d72:	4807      	ldr	r0, [pc, #28]	; (8010d90 <tcp_free+0x34>)
 8010d74:	f009 fca8 	bl	801a6c8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8010d78:	6879      	ldr	r1, [r7, #4]
 8010d7a:	2001      	movs	r0, #1
 8010d7c:	f7fe fef2 	bl	800fb64 <memp_free>
}
 8010d80:	bf00      	nop
 8010d82:	3708      	adds	r7, #8
 8010d84:	46bd      	mov	sp, r7
 8010d86:	bd80      	pop	{r7, pc}
 8010d88:	0801cef0 	.word	0x0801cef0
 8010d8c:	0801cf20 	.word	0x0801cf20
 8010d90:	0801cf34 	.word	0x0801cf34

08010d94 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b082      	sub	sp, #8
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	7d1b      	ldrb	r3, [r3, #20]
 8010da0:	2b01      	cmp	r3, #1
 8010da2:	d105      	bne.n	8010db0 <tcp_free_listen+0x1c>
 8010da4:	4b06      	ldr	r3, [pc, #24]	; (8010dc0 <tcp_free_listen+0x2c>)
 8010da6:	22df      	movs	r2, #223	; 0xdf
 8010da8:	4906      	ldr	r1, [pc, #24]	; (8010dc4 <tcp_free_listen+0x30>)
 8010daa:	4807      	ldr	r0, [pc, #28]	; (8010dc8 <tcp_free_listen+0x34>)
 8010dac:	f009 fc8c 	bl	801a6c8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8010db0:	6879      	ldr	r1, [r7, #4]
 8010db2:	2002      	movs	r0, #2
 8010db4:	f7fe fed6 	bl	800fb64 <memp_free>
}
 8010db8:	bf00      	nop
 8010dba:	3708      	adds	r7, #8
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	bd80      	pop	{r7, pc}
 8010dc0:	0801cef0 	.word	0x0801cef0
 8010dc4:	0801cf5c 	.word	0x0801cf5c
 8010dc8:	0801cf34 	.word	0x0801cf34

08010dcc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8010dcc:	b580      	push	{r7, lr}
 8010dce:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8010dd0:	f000 ffdc 	bl	8011d8c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8010dd4:	4b07      	ldr	r3, [pc, #28]	; (8010df4 <tcp_tmr+0x28>)
 8010dd6:	781b      	ldrb	r3, [r3, #0]
 8010dd8:	3301      	adds	r3, #1
 8010dda:	b2da      	uxtb	r2, r3
 8010ddc:	4b05      	ldr	r3, [pc, #20]	; (8010df4 <tcp_tmr+0x28>)
 8010dde:	701a      	strb	r2, [r3, #0]
 8010de0:	4b04      	ldr	r3, [pc, #16]	; (8010df4 <tcp_tmr+0x28>)
 8010de2:	781b      	ldrb	r3, [r3, #0]
 8010de4:	f003 0301 	and.w	r3, r3, #1
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	d001      	beq.n	8010df0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8010dec:	f000 fc8e 	bl	801170c <tcp_slowtmr>
  }
}
 8010df0:	bf00      	nop
 8010df2:	bd80      	pop	{r7, pc}
 8010df4:	20006991 	.word	0x20006991

08010df8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	b084      	sub	sp, #16
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
 8010e00:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8010e02:	683b      	ldr	r3, [r7, #0]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d105      	bne.n	8010e14 <tcp_remove_listener+0x1c>
 8010e08:	4b0d      	ldr	r3, [pc, #52]	; (8010e40 <tcp_remove_listener+0x48>)
 8010e0a:	22ff      	movs	r2, #255	; 0xff
 8010e0c:	490d      	ldr	r1, [pc, #52]	; (8010e44 <tcp_remove_listener+0x4c>)
 8010e0e:	480e      	ldr	r0, [pc, #56]	; (8010e48 <tcp_remove_listener+0x50>)
 8010e10:	f009 fc5a 	bl	801a6c8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	60fb      	str	r3, [r7, #12]
 8010e18:	e00a      	b.n	8010e30 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010e1e:	683a      	ldr	r2, [r7, #0]
 8010e20:	429a      	cmp	r2, r3
 8010e22:	d102      	bne.n	8010e2a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8010e24:	68fb      	ldr	r3, [r7, #12]
 8010e26:	2200      	movs	r2, #0
 8010e28:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	68db      	ldr	r3, [r3, #12]
 8010e2e:	60fb      	str	r3, [r7, #12]
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d1f1      	bne.n	8010e1a <tcp_remove_listener+0x22>
    }
  }
}
 8010e36:	bf00      	nop
 8010e38:	bf00      	nop
 8010e3a:	3710      	adds	r7, #16
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	bd80      	pop	{r7, pc}
 8010e40:	0801cef0 	.word	0x0801cef0
 8010e44:	0801cf78 	.word	0x0801cf78
 8010e48:	0801cf34 	.word	0x0801cf34

08010e4c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b084      	sub	sp, #16
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d106      	bne.n	8010e68 <tcp_listen_closed+0x1c>
 8010e5a:	4b14      	ldr	r3, [pc, #80]	; (8010eac <tcp_listen_closed+0x60>)
 8010e5c:	f240 1211 	movw	r2, #273	; 0x111
 8010e60:	4913      	ldr	r1, [pc, #76]	; (8010eb0 <tcp_listen_closed+0x64>)
 8010e62:	4814      	ldr	r0, [pc, #80]	; (8010eb4 <tcp_listen_closed+0x68>)
 8010e64:	f009 fc30 	bl	801a6c8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	7d1b      	ldrb	r3, [r3, #20]
 8010e6c:	2b01      	cmp	r3, #1
 8010e6e:	d006      	beq.n	8010e7e <tcp_listen_closed+0x32>
 8010e70:	4b0e      	ldr	r3, [pc, #56]	; (8010eac <tcp_listen_closed+0x60>)
 8010e72:	f44f 7289 	mov.w	r2, #274	; 0x112
 8010e76:	4910      	ldr	r1, [pc, #64]	; (8010eb8 <tcp_listen_closed+0x6c>)
 8010e78:	480e      	ldr	r0, [pc, #56]	; (8010eb4 <tcp_listen_closed+0x68>)
 8010e7a:	f009 fc25 	bl	801a6c8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010e7e:	2301      	movs	r3, #1
 8010e80:	60fb      	str	r3, [r7, #12]
 8010e82:	e00b      	b.n	8010e9c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8010e84:	4a0d      	ldr	r2, [pc, #52]	; (8010ebc <tcp_listen_closed+0x70>)
 8010e86:	68fb      	ldr	r3, [r7, #12]
 8010e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	6879      	ldr	r1, [r7, #4]
 8010e90:	4618      	mov	r0, r3
 8010e92:	f7ff ffb1 	bl	8010df8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	3301      	adds	r3, #1
 8010e9a:	60fb      	str	r3, [r7, #12]
 8010e9c:	68fb      	ldr	r3, [r7, #12]
 8010e9e:	2b03      	cmp	r3, #3
 8010ea0:	d9f0      	bls.n	8010e84 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8010ea2:	bf00      	nop
 8010ea4:	bf00      	nop
 8010ea6:	3710      	adds	r7, #16
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	bd80      	pop	{r7, pc}
 8010eac:	0801cef0 	.word	0x0801cef0
 8010eb0:	0801cfa0 	.word	0x0801cfa0
 8010eb4:	0801cf34 	.word	0x0801cf34
 8010eb8:	0801cfac 	.word	0x0801cfac
 8010ebc:	0801ef10 	.word	0x0801ef10

08010ec0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8010ec0:	b5b0      	push	{r4, r5, r7, lr}
 8010ec2:	b088      	sub	sp, #32
 8010ec4:	af04      	add	r7, sp, #16
 8010ec6:	6078      	str	r0, [r7, #4]
 8010ec8:	460b      	mov	r3, r1
 8010eca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d106      	bne.n	8010ee0 <tcp_close_shutdown+0x20>
 8010ed2:	4b63      	ldr	r3, [pc, #396]	; (8011060 <tcp_close_shutdown+0x1a0>)
 8010ed4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8010ed8:	4962      	ldr	r1, [pc, #392]	; (8011064 <tcp_close_shutdown+0x1a4>)
 8010eda:	4863      	ldr	r0, [pc, #396]	; (8011068 <tcp_close_shutdown+0x1a8>)
 8010edc:	f009 fbf4 	bl	801a6c8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8010ee0:	78fb      	ldrb	r3, [r7, #3]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d066      	beq.n	8010fb4 <tcp_close_shutdown+0xf4>
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	7d1b      	ldrb	r3, [r3, #20]
 8010eea:	2b04      	cmp	r3, #4
 8010eec:	d003      	beq.n	8010ef6 <tcp_close_shutdown+0x36>
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	7d1b      	ldrb	r3, [r3, #20]
 8010ef2:	2b07      	cmp	r3, #7
 8010ef4:	d15e      	bne.n	8010fb4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010efa:	2b00      	cmp	r3, #0
 8010efc:	d104      	bne.n	8010f08 <tcp_close_shutdown+0x48>
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010f02:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8010f06:	d055      	beq.n	8010fb4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	8b5b      	ldrh	r3, [r3, #26]
 8010f0c:	f003 0310 	and.w	r3, r3, #16
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d106      	bne.n	8010f22 <tcp_close_shutdown+0x62>
 8010f14:	4b52      	ldr	r3, [pc, #328]	; (8011060 <tcp_close_shutdown+0x1a0>)
 8010f16:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8010f1a:	4954      	ldr	r1, [pc, #336]	; (801106c <tcp_close_shutdown+0x1ac>)
 8010f1c:	4852      	ldr	r0, [pc, #328]	; (8011068 <tcp_close_shutdown+0x1a8>)
 8010f1e:	f009 fbd3 	bl	801a6c8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010f22:	687b      	ldr	r3, [r7, #4]
 8010f24:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8010f2a:	687d      	ldr	r5, [r7, #4]
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	3304      	adds	r3, #4
 8010f30:	687a      	ldr	r2, [r7, #4]
 8010f32:	8ad2      	ldrh	r2, [r2, #22]
 8010f34:	6879      	ldr	r1, [r7, #4]
 8010f36:	8b09      	ldrh	r1, [r1, #24]
 8010f38:	9102      	str	r1, [sp, #8]
 8010f3a:	9201      	str	r2, [sp, #4]
 8010f3c:	9300      	str	r3, [sp, #0]
 8010f3e:	462b      	mov	r3, r5
 8010f40:	4622      	mov	r2, r4
 8010f42:	4601      	mov	r1, r0
 8010f44:	6878      	ldr	r0, [r7, #4]
 8010f46:	f005 fced 	bl	8016924 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8010f4a:	6878      	ldr	r0, [r7, #4]
 8010f4c:	f001 face 	bl	80124ec <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010f50:	4b47      	ldr	r3, [pc, #284]	; (8011070 <tcp_close_shutdown+0x1b0>)
 8010f52:	681b      	ldr	r3, [r3, #0]
 8010f54:	687a      	ldr	r2, [r7, #4]
 8010f56:	429a      	cmp	r2, r3
 8010f58:	d105      	bne.n	8010f66 <tcp_close_shutdown+0xa6>
 8010f5a:	4b45      	ldr	r3, [pc, #276]	; (8011070 <tcp_close_shutdown+0x1b0>)
 8010f5c:	681b      	ldr	r3, [r3, #0]
 8010f5e:	68db      	ldr	r3, [r3, #12]
 8010f60:	4a43      	ldr	r2, [pc, #268]	; (8011070 <tcp_close_shutdown+0x1b0>)
 8010f62:	6013      	str	r3, [r2, #0]
 8010f64:	e013      	b.n	8010f8e <tcp_close_shutdown+0xce>
 8010f66:	4b42      	ldr	r3, [pc, #264]	; (8011070 <tcp_close_shutdown+0x1b0>)
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	60fb      	str	r3, [r7, #12]
 8010f6c:	e00c      	b.n	8010f88 <tcp_close_shutdown+0xc8>
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	68db      	ldr	r3, [r3, #12]
 8010f72:	687a      	ldr	r2, [r7, #4]
 8010f74:	429a      	cmp	r2, r3
 8010f76:	d104      	bne.n	8010f82 <tcp_close_shutdown+0xc2>
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	68da      	ldr	r2, [r3, #12]
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	60da      	str	r2, [r3, #12]
 8010f80:	e005      	b.n	8010f8e <tcp_close_shutdown+0xce>
 8010f82:	68fb      	ldr	r3, [r7, #12]
 8010f84:	68db      	ldr	r3, [r3, #12]
 8010f86:	60fb      	str	r3, [r7, #12]
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d1ef      	bne.n	8010f6e <tcp_close_shutdown+0xae>
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	2200      	movs	r2, #0
 8010f92:	60da      	str	r2, [r3, #12]
 8010f94:	4b37      	ldr	r3, [pc, #220]	; (8011074 <tcp_close_shutdown+0x1b4>)
 8010f96:	2201      	movs	r2, #1
 8010f98:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8010f9a:	4b37      	ldr	r3, [pc, #220]	; (8011078 <tcp_close_shutdown+0x1b8>)
 8010f9c:	681b      	ldr	r3, [r3, #0]
 8010f9e:	687a      	ldr	r2, [r7, #4]
 8010fa0:	429a      	cmp	r2, r3
 8010fa2:	d102      	bne.n	8010faa <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8010fa4:	f003 ff62 	bl	8014e6c <tcp_trigger_input_pcb_close>
 8010fa8:	e002      	b.n	8010fb0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8010faa:	6878      	ldr	r0, [r7, #4]
 8010fac:	f7ff fed6 	bl	8010d5c <tcp_free>
      }
      return ERR_OK;
 8010fb0:	2300      	movs	r3, #0
 8010fb2:	e050      	b.n	8011056 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	7d1b      	ldrb	r3, [r3, #20]
 8010fb8:	2b02      	cmp	r3, #2
 8010fba:	d03b      	beq.n	8011034 <tcp_close_shutdown+0x174>
 8010fbc:	2b02      	cmp	r3, #2
 8010fbe:	dc44      	bgt.n	801104a <tcp_close_shutdown+0x18a>
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d002      	beq.n	8010fca <tcp_close_shutdown+0x10a>
 8010fc4:	2b01      	cmp	r3, #1
 8010fc6:	d02a      	beq.n	801101e <tcp_close_shutdown+0x15e>
 8010fc8:	e03f      	b.n	801104a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	8adb      	ldrh	r3, [r3, #22]
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d021      	beq.n	8011016 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8010fd2:	4b2a      	ldr	r3, [pc, #168]	; (801107c <tcp_close_shutdown+0x1bc>)
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	687a      	ldr	r2, [r7, #4]
 8010fd8:	429a      	cmp	r2, r3
 8010fda:	d105      	bne.n	8010fe8 <tcp_close_shutdown+0x128>
 8010fdc:	4b27      	ldr	r3, [pc, #156]	; (801107c <tcp_close_shutdown+0x1bc>)
 8010fde:	681b      	ldr	r3, [r3, #0]
 8010fe0:	68db      	ldr	r3, [r3, #12]
 8010fe2:	4a26      	ldr	r2, [pc, #152]	; (801107c <tcp_close_shutdown+0x1bc>)
 8010fe4:	6013      	str	r3, [r2, #0]
 8010fe6:	e013      	b.n	8011010 <tcp_close_shutdown+0x150>
 8010fe8:	4b24      	ldr	r3, [pc, #144]	; (801107c <tcp_close_shutdown+0x1bc>)
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	60bb      	str	r3, [r7, #8]
 8010fee:	e00c      	b.n	801100a <tcp_close_shutdown+0x14a>
 8010ff0:	68bb      	ldr	r3, [r7, #8]
 8010ff2:	68db      	ldr	r3, [r3, #12]
 8010ff4:	687a      	ldr	r2, [r7, #4]
 8010ff6:	429a      	cmp	r2, r3
 8010ff8:	d104      	bne.n	8011004 <tcp_close_shutdown+0x144>
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	68da      	ldr	r2, [r3, #12]
 8010ffe:	68bb      	ldr	r3, [r7, #8]
 8011000:	60da      	str	r2, [r3, #12]
 8011002:	e005      	b.n	8011010 <tcp_close_shutdown+0x150>
 8011004:	68bb      	ldr	r3, [r7, #8]
 8011006:	68db      	ldr	r3, [r3, #12]
 8011008:	60bb      	str	r3, [r7, #8]
 801100a:	68bb      	ldr	r3, [r7, #8]
 801100c:	2b00      	cmp	r3, #0
 801100e:	d1ef      	bne.n	8010ff0 <tcp_close_shutdown+0x130>
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	2200      	movs	r2, #0
 8011014:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8011016:	6878      	ldr	r0, [r7, #4]
 8011018:	f7ff fea0 	bl	8010d5c <tcp_free>
      break;
 801101c:	e01a      	b.n	8011054 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 801101e:	6878      	ldr	r0, [r7, #4]
 8011020:	f7ff ff14 	bl	8010e4c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8011024:	6879      	ldr	r1, [r7, #4]
 8011026:	4816      	ldr	r0, [pc, #88]	; (8011080 <tcp_close_shutdown+0x1c0>)
 8011028:	f001 fab0 	bl	801258c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801102c:	6878      	ldr	r0, [r7, #4]
 801102e:	f7ff feb1 	bl	8010d94 <tcp_free_listen>
      break;
 8011032:	e00f      	b.n	8011054 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011034:	6879      	ldr	r1, [r7, #4]
 8011036:	480e      	ldr	r0, [pc, #56]	; (8011070 <tcp_close_shutdown+0x1b0>)
 8011038:	f001 faa8 	bl	801258c <tcp_pcb_remove>
 801103c:	4b0d      	ldr	r3, [pc, #52]	; (8011074 <tcp_close_shutdown+0x1b4>)
 801103e:	2201      	movs	r2, #1
 8011040:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8011042:	6878      	ldr	r0, [r7, #4]
 8011044:	f7ff fe8a 	bl	8010d5c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8011048:	e004      	b.n	8011054 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801104a:	6878      	ldr	r0, [r7, #4]
 801104c:	f000 f81a 	bl	8011084 <tcp_close_shutdown_fin>
 8011050:	4603      	mov	r3, r0
 8011052:	e000      	b.n	8011056 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8011054:	2300      	movs	r3, #0
}
 8011056:	4618      	mov	r0, r3
 8011058:	3710      	adds	r7, #16
 801105a:	46bd      	mov	sp, r7
 801105c:	bdb0      	pop	{r4, r5, r7, pc}
 801105e:	bf00      	nop
 8011060:	0801cef0 	.word	0x0801cef0
 8011064:	0801cfc4 	.word	0x0801cfc4
 8011068:	0801cf34 	.word	0x0801cf34
 801106c:	0801cfe4 	.word	0x0801cfe4
 8011070:	2000dd44 	.word	0x2000dd44
 8011074:	2000dd40 	.word	0x2000dd40
 8011078:	2000dd58 	.word	0x2000dd58
 801107c:	2000dd50 	.word	0x2000dd50
 8011080:	2000dd4c 	.word	0x2000dd4c

08011084 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8011084:	b580      	push	{r7, lr}
 8011086:	b084      	sub	sp, #16
 8011088:	af00      	add	r7, sp, #0
 801108a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	2b00      	cmp	r3, #0
 8011090:	d106      	bne.n	80110a0 <tcp_close_shutdown_fin+0x1c>
 8011092:	4b2e      	ldr	r3, [pc, #184]	; (801114c <tcp_close_shutdown_fin+0xc8>)
 8011094:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8011098:	492d      	ldr	r1, [pc, #180]	; (8011150 <tcp_close_shutdown_fin+0xcc>)
 801109a:	482e      	ldr	r0, [pc, #184]	; (8011154 <tcp_close_shutdown_fin+0xd0>)
 801109c:	f009 fb14 	bl	801a6c8 <iprintf>

  switch (pcb->state) {
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	7d1b      	ldrb	r3, [r3, #20]
 80110a4:	2b07      	cmp	r3, #7
 80110a6:	d020      	beq.n	80110ea <tcp_close_shutdown_fin+0x66>
 80110a8:	2b07      	cmp	r3, #7
 80110aa:	dc2b      	bgt.n	8011104 <tcp_close_shutdown_fin+0x80>
 80110ac:	2b03      	cmp	r3, #3
 80110ae:	d002      	beq.n	80110b6 <tcp_close_shutdown_fin+0x32>
 80110b0:	2b04      	cmp	r3, #4
 80110b2:	d00d      	beq.n	80110d0 <tcp_close_shutdown_fin+0x4c>
 80110b4:	e026      	b.n	8011104 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80110b6:	6878      	ldr	r0, [r7, #4]
 80110b8:	f004 fd42 	bl	8015b40 <tcp_send_fin>
 80110bc:	4603      	mov	r3, r0
 80110be:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80110c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d11f      	bne.n	8011108 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	2205      	movs	r2, #5
 80110cc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80110ce:	e01b      	b.n	8011108 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80110d0:	6878      	ldr	r0, [r7, #4]
 80110d2:	f004 fd35 	bl	8015b40 <tcp_send_fin>
 80110d6:	4603      	mov	r3, r0
 80110d8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80110da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d114      	bne.n	801110c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	2205      	movs	r2, #5
 80110e6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80110e8:	e010      	b.n	801110c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80110ea:	6878      	ldr	r0, [r7, #4]
 80110ec:	f004 fd28 	bl	8015b40 <tcp_send_fin>
 80110f0:	4603      	mov	r3, r0
 80110f2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80110f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d109      	bne.n	8011110 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80110fc:	687b      	ldr	r3, [r7, #4]
 80110fe:	2209      	movs	r2, #9
 8011100:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011102:	e005      	b.n	8011110 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8011104:	2300      	movs	r3, #0
 8011106:	e01c      	b.n	8011142 <tcp_close_shutdown_fin+0xbe>
      break;
 8011108:	bf00      	nop
 801110a:	e002      	b.n	8011112 <tcp_close_shutdown_fin+0x8e>
      break;
 801110c:	bf00      	nop
 801110e:	e000      	b.n	8011112 <tcp_close_shutdown_fin+0x8e>
      break;
 8011110:	bf00      	nop
  }

  if (err == ERR_OK) {
 8011112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d103      	bne.n	8011122 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801111a:	6878      	ldr	r0, [r7, #4]
 801111c:	f004 fe4e 	bl	8015dbc <tcp_output>
 8011120:	e00d      	b.n	801113e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8011122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011126:	f1b3 3fff 	cmp.w	r3, #4294967295
 801112a:	d108      	bne.n	801113e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 801112c:	687b      	ldr	r3, [r7, #4]
 801112e:	8b5b      	ldrh	r3, [r3, #26]
 8011130:	f043 0308 	orr.w	r3, r3, #8
 8011134:	b29a      	uxth	r2, r3
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801113a:	2300      	movs	r3, #0
 801113c:	e001      	b.n	8011142 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801113e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011142:	4618      	mov	r0, r3
 8011144:	3710      	adds	r7, #16
 8011146:	46bd      	mov	sp, r7
 8011148:	bd80      	pop	{r7, pc}
 801114a:	bf00      	nop
 801114c:	0801cef0 	.word	0x0801cef0
 8011150:	0801cfa0 	.word	0x0801cfa0
 8011154:	0801cf34 	.word	0x0801cf34

08011158 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011158:	b580      	push	{r7, lr}
 801115a:	b082      	sub	sp, #8
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	2b00      	cmp	r3, #0
 8011164:	d109      	bne.n	801117a <tcp_close+0x22>
 8011166:	4b0f      	ldr	r3, [pc, #60]	; (80111a4 <tcp_close+0x4c>)
 8011168:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 801116c:	490e      	ldr	r1, [pc, #56]	; (80111a8 <tcp_close+0x50>)
 801116e:	480f      	ldr	r0, [pc, #60]	; (80111ac <tcp_close+0x54>)
 8011170:	f009 faaa 	bl	801a6c8 <iprintf>
 8011174:	f06f 030f 	mvn.w	r3, #15
 8011178:	e00f      	b.n	801119a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	7d1b      	ldrb	r3, [r3, #20]
 801117e:	2b01      	cmp	r3, #1
 8011180:	d006      	beq.n	8011190 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	8b5b      	ldrh	r3, [r3, #26]
 8011186:	f043 0310 	orr.w	r3, r3, #16
 801118a:	b29a      	uxth	r2, r3
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8011190:	2101      	movs	r1, #1
 8011192:	6878      	ldr	r0, [r7, #4]
 8011194:	f7ff fe94 	bl	8010ec0 <tcp_close_shutdown>
 8011198:	4603      	mov	r3, r0
}
 801119a:	4618      	mov	r0, r3
 801119c:	3708      	adds	r7, #8
 801119e:	46bd      	mov	sp, r7
 80111a0:	bd80      	pop	{r7, pc}
 80111a2:	bf00      	nop
 80111a4:	0801cef0 	.word	0x0801cef0
 80111a8:	0801d000 	.word	0x0801d000
 80111ac:	0801cf34 	.word	0x0801cf34

080111b0 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 80111b0:	b580      	push	{r7, lr}
 80111b2:	b084      	sub	sp, #16
 80111b4:	af00      	add	r7, sp, #0
 80111b6:	60f8      	str	r0, [r7, #12]
 80111b8:	60b9      	str	r1, [r7, #8]
 80111ba:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 80111bc:	68fb      	ldr	r3, [r7, #12]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d109      	bne.n	80111d6 <tcp_shutdown+0x26>
 80111c2:	4b26      	ldr	r3, [pc, #152]	; (801125c <tcp_shutdown+0xac>)
 80111c4:	f240 2207 	movw	r2, #519	; 0x207
 80111c8:	4925      	ldr	r1, [pc, #148]	; (8011260 <tcp_shutdown+0xb0>)
 80111ca:	4826      	ldr	r0, [pc, #152]	; (8011264 <tcp_shutdown+0xb4>)
 80111cc:	f009 fa7c 	bl	801a6c8 <iprintf>
 80111d0:	f06f 030f 	mvn.w	r3, #15
 80111d4:	e03d      	b.n	8011252 <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	7d1b      	ldrb	r3, [r3, #20]
 80111da:	2b01      	cmp	r3, #1
 80111dc:	d102      	bne.n	80111e4 <tcp_shutdown+0x34>
    return ERR_CONN;
 80111de:	f06f 030a 	mvn.w	r3, #10
 80111e2:	e036      	b.n	8011252 <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 80111e4:	68bb      	ldr	r3, [r7, #8]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d01b      	beq.n	8011222 <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	8b5b      	ldrh	r3, [r3, #26]
 80111ee:	f043 0310 	orr.w	r3, r3, #16
 80111f2:	b29a      	uxth	r2, r3
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d005      	beq.n	801120a <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 80111fe:	2101      	movs	r1, #1
 8011200:	68f8      	ldr	r0, [r7, #12]
 8011202:	f7ff fe5d 	bl	8010ec0 <tcp_close_shutdown>
 8011206:	4603      	mov	r3, r0
 8011208:	e023      	b.n	8011252 <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 801120a:	68fb      	ldr	r3, [r7, #12]
 801120c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801120e:	2b00      	cmp	r3, #0
 8011210:	d007      	beq.n	8011222 <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011216:	4618      	mov	r0, r3
 8011218:	f7ff fae4 	bl	80107e4 <pbuf_free>
      pcb->refused_data = NULL;
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	2200      	movs	r2, #0
 8011220:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d013      	beq.n	8011250 <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8011228:	68fb      	ldr	r3, [r7, #12]
 801122a:	7d1b      	ldrb	r3, [r3, #20]
 801122c:	2b04      	cmp	r3, #4
 801122e:	dc02      	bgt.n	8011236 <tcp_shutdown+0x86>
 8011230:	2b03      	cmp	r3, #3
 8011232:	da02      	bge.n	801123a <tcp_shutdown+0x8a>
 8011234:	e009      	b.n	801124a <tcp_shutdown+0x9a>
 8011236:	2b07      	cmp	r3, #7
 8011238:	d107      	bne.n	801124a <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801123a:	68bb      	ldr	r3, [r7, #8]
 801123c:	b2db      	uxtb	r3, r3
 801123e:	4619      	mov	r1, r3
 8011240:	68f8      	ldr	r0, [r7, #12]
 8011242:	f7ff fe3d 	bl	8010ec0 <tcp_close_shutdown>
 8011246:	4603      	mov	r3, r0
 8011248:	e003      	b.n	8011252 <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 801124a:	f06f 030a 	mvn.w	r3, #10
 801124e:	e000      	b.n	8011252 <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 8011250:	2300      	movs	r3, #0
}
 8011252:	4618      	mov	r0, r3
 8011254:	3710      	adds	r7, #16
 8011256:	46bd      	mov	sp, r7
 8011258:	bd80      	pop	{r7, pc}
 801125a:	bf00      	nop
 801125c:	0801cef0 	.word	0x0801cef0
 8011260:	0801d018 	.word	0x0801d018
 8011264:	0801cf34 	.word	0x0801cf34

08011268 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b08e      	sub	sp, #56	; 0x38
 801126c:	af04      	add	r7, sp, #16
 801126e:	6078      	str	r0, [r7, #4]
 8011270:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	2b00      	cmp	r3, #0
 8011276:	d107      	bne.n	8011288 <tcp_abandon+0x20>
 8011278:	4b52      	ldr	r3, [pc, #328]	; (80113c4 <tcp_abandon+0x15c>)
 801127a:	f240 223d 	movw	r2, #573	; 0x23d
 801127e:	4952      	ldr	r1, [pc, #328]	; (80113c8 <tcp_abandon+0x160>)
 8011280:	4852      	ldr	r0, [pc, #328]	; (80113cc <tcp_abandon+0x164>)
 8011282:	f009 fa21 	bl	801a6c8 <iprintf>
 8011286:	e099      	b.n	80113bc <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	7d1b      	ldrb	r3, [r3, #20]
 801128c:	2b01      	cmp	r3, #1
 801128e:	d106      	bne.n	801129e <tcp_abandon+0x36>
 8011290:	4b4c      	ldr	r3, [pc, #304]	; (80113c4 <tcp_abandon+0x15c>)
 8011292:	f44f 7210 	mov.w	r2, #576	; 0x240
 8011296:	494e      	ldr	r1, [pc, #312]	; (80113d0 <tcp_abandon+0x168>)
 8011298:	484c      	ldr	r0, [pc, #304]	; (80113cc <tcp_abandon+0x164>)
 801129a:	f009 fa15 	bl	801a6c8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801129e:	687b      	ldr	r3, [r7, #4]
 80112a0:	7d1b      	ldrb	r3, [r3, #20]
 80112a2:	2b0a      	cmp	r3, #10
 80112a4:	d107      	bne.n	80112b6 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80112a6:	6879      	ldr	r1, [r7, #4]
 80112a8:	484a      	ldr	r0, [pc, #296]	; (80113d4 <tcp_abandon+0x16c>)
 80112aa:	f001 f96f 	bl	801258c <tcp_pcb_remove>
    tcp_free(pcb);
 80112ae:	6878      	ldr	r0, [r7, #4]
 80112b0:	f7ff fd54 	bl	8010d5c <tcp_free>
 80112b4:	e082      	b.n	80113bc <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80112b6:	2300      	movs	r3, #0
 80112b8:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80112ba:	2300      	movs	r3, #0
 80112bc:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80112be:	687b      	ldr	r3, [r7, #4]
 80112c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80112c2:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112c8:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80112d0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	691b      	ldr	r3, [r3, #16]
 80112d6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	7d1b      	ldrb	r3, [r3, #20]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d126      	bne.n	801132e <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	8adb      	ldrh	r3, [r3, #22]
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d02e      	beq.n	8011346 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80112e8:	4b3b      	ldr	r3, [pc, #236]	; (80113d8 <tcp_abandon+0x170>)
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	687a      	ldr	r2, [r7, #4]
 80112ee:	429a      	cmp	r2, r3
 80112f0:	d105      	bne.n	80112fe <tcp_abandon+0x96>
 80112f2:	4b39      	ldr	r3, [pc, #228]	; (80113d8 <tcp_abandon+0x170>)
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	68db      	ldr	r3, [r3, #12]
 80112f8:	4a37      	ldr	r2, [pc, #220]	; (80113d8 <tcp_abandon+0x170>)
 80112fa:	6013      	str	r3, [r2, #0]
 80112fc:	e013      	b.n	8011326 <tcp_abandon+0xbe>
 80112fe:	4b36      	ldr	r3, [pc, #216]	; (80113d8 <tcp_abandon+0x170>)
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	61fb      	str	r3, [r7, #28]
 8011304:	e00c      	b.n	8011320 <tcp_abandon+0xb8>
 8011306:	69fb      	ldr	r3, [r7, #28]
 8011308:	68db      	ldr	r3, [r3, #12]
 801130a:	687a      	ldr	r2, [r7, #4]
 801130c:	429a      	cmp	r2, r3
 801130e:	d104      	bne.n	801131a <tcp_abandon+0xb2>
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	68da      	ldr	r2, [r3, #12]
 8011314:	69fb      	ldr	r3, [r7, #28]
 8011316:	60da      	str	r2, [r3, #12]
 8011318:	e005      	b.n	8011326 <tcp_abandon+0xbe>
 801131a:	69fb      	ldr	r3, [r7, #28]
 801131c:	68db      	ldr	r3, [r3, #12]
 801131e:	61fb      	str	r3, [r7, #28]
 8011320:	69fb      	ldr	r3, [r7, #28]
 8011322:	2b00      	cmp	r3, #0
 8011324:	d1ef      	bne.n	8011306 <tcp_abandon+0x9e>
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	2200      	movs	r2, #0
 801132a:	60da      	str	r2, [r3, #12]
 801132c:	e00b      	b.n	8011346 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801132e:	683b      	ldr	r3, [r7, #0]
 8011330:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	8adb      	ldrh	r3, [r3, #22]
 8011336:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011338:	6879      	ldr	r1, [r7, #4]
 801133a:	4828      	ldr	r0, [pc, #160]	; (80113dc <tcp_abandon+0x174>)
 801133c:	f001 f926 	bl	801258c <tcp_pcb_remove>
 8011340:	4b27      	ldr	r3, [pc, #156]	; (80113e0 <tcp_abandon+0x178>)
 8011342:	2201      	movs	r2, #1
 8011344:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801134a:	2b00      	cmp	r3, #0
 801134c:	d004      	beq.n	8011358 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011352:	4618      	mov	r0, r3
 8011354:	f000 fdfa 	bl	8011f4c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8011358:	687b      	ldr	r3, [r7, #4]
 801135a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801135c:	2b00      	cmp	r3, #0
 801135e:	d004      	beq.n	801136a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011364:	4618      	mov	r0, r3
 8011366:	f000 fdf1 	bl	8011f4c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801136e:	2b00      	cmp	r3, #0
 8011370:	d004      	beq.n	801137c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011376:	4618      	mov	r0, r3
 8011378:	f000 fde8 	bl	8011f4c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801137c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801137e:	2b00      	cmp	r3, #0
 8011380:	d00e      	beq.n	80113a0 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8011382:	6879      	ldr	r1, [r7, #4]
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	3304      	adds	r3, #4
 8011388:	687a      	ldr	r2, [r7, #4]
 801138a:	8b12      	ldrh	r2, [r2, #24]
 801138c:	9202      	str	r2, [sp, #8]
 801138e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011390:	9201      	str	r2, [sp, #4]
 8011392:	9300      	str	r3, [sp, #0]
 8011394:	460b      	mov	r3, r1
 8011396:	697a      	ldr	r2, [r7, #20]
 8011398:	69b9      	ldr	r1, [r7, #24]
 801139a:	6878      	ldr	r0, [r7, #4]
 801139c:	f005 fac2 	bl	8016924 <tcp_rst>
    }
    last_state = pcb->state;
 80113a0:	687b      	ldr	r3, [r7, #4]
 80113a2:	7d1b      	ldrb	r3, [r3, #20]
 80113a4:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80113a6:	6878      	ldr	r0, [r7, #4]
 80113a8:	f7ff fcd8 	bl	8010d5c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80113ac:	693b      	ldr	r3, [r7, #16]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d004      	beq.n	80113bc <tcp_abandon+0x154>
 80113b2:	693b      	ldr	r3, [r7, #16]
 80113b4:	f06f 010c 	mvn.w	r1, #12
 80113b8:	68f8      	ldr	r0, [r7, #12]
 80113ba:	4798      	blx	r3
  }
}
 80113bc:	3728      	adds	r7, #40	; 0x28
 80113be:	46bd      	mov	sp, r7
 80113c0:	bd80      	pop	{r7, pc}
 80113c2:	bf00      	nop
 80113c4:	0801cef0 	.word	0x0801cef0
 80113c8:	0801d034 	.word	0x0801d034
 80113cc:	0801cf34 	.word	0x0801cf34
 80113d0:	0801d050 	.word	0x0801d050
 80113d4:	2000dd54 	.word	0x2000dd54
 80113d8:	2000dd50 	.word	0x2000dd50
 80113dc:	2000dd44 	.word	0x2000dd44
 80113e0:	2000dd40 	.word	0x2000dd40

080113e4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b082      	sub	sp, #8
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80113ec:	2101      	movs	r1, #1
 80113ee:	6878      	ldr	r0, [r7, #4]
 80113f0:	f7ff ff3a 	bl	8011268 <tcp_abandon>
}
 80113f4:	bf00      	nop
 80113f6:	3708      	adds	r7, #8
 80113f8:	46bd      	mov	sp, r7
 80113fa:	bd80      	pop	{r7, pc}

080113fc <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80113fc:	b580      	push	{r7, lr}
 80113fe:	b088      	sub	sp, #32
 8011400:	af00      	add	r7, sp, #0
 8011402:	60f8      	str	r0, [r7, #12]
 8011404:	60b9      	str	r1, [r7, #8]
 8011406:	4613      	mov	r3, r2
 8011408:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 801140a:	2304      	movs	r3, #4
 801140c:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801140e:	68bb      	ldr	r3, [r7, #8]
 8011410:	2b00      	cmp	r3, #0
 8011412:	d101      	bne.n	8011418 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8011414:	4b3e      	ldr	r3, [pc, #248]	; (8011510 <tcp_bind+0x114>)
 8011416:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d109      	bne.n	8011432 <tcp_bind+0x36>
 801141e:	4b3d      	ldr	r3, [pc, #244]	; (8011514 <tcp_bind+0x118>)
 8011420:	f240 22a9 	movw	r2, #681	; 0x2a9
 8011424:	493c      	ldr	r1, [pc, #240]	; (8011518 <tcp_bind+0x11c>)
 8011426:	483d      	ldr	r0, [pc, #244]	; (801151c <tcp_bind+0x120>)
 8011428:	f009 f94e 	bl	801a6c8 <iprintf>
 801142c:	f06f 030f 	mvn.w	r3, #15
 8011430:	e06a      	b.n	8011508 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8011432:	68fb      	ldr	r3, [r7, #12]
 8011434:	7d1b      	ldrb	r3, [r3, #20]
 8011436:	2b00      	cmp	r3, #0
 8011438:	d009      	beq.n	801144e <tcp_bind+0x52>
 801143a:	4b36      	ldr	r3, [pc, #216]	; (8011514 <tcp_bind+0x118>)
 801143c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8011440:	4937      	ldr	r1, [pc, #220]	; (8011520 <tcp_bind+0x124>)
 8011442:	4836      	ldr	r0, [pc, #216]	; (801151c <tcp_bind+0x120>)
 8011444:	f009 f940 	bl	801a6c8 <iprintf>
 8011448:	f06f 0305 	mvn.w	r3, #5
 801144c:	e05c      	b.n	8011508 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 801144e:	88fb      	ldrh	r3, [r7, #6]
 8011450:	2b00      	cmp	r3, #0
 8011452:	d109      	bne.n	8011468 <tcp_bind+0x6c>
    port = tcp_new_port();
 8011454:	f000 f914 	bl	8011680 <tcp_new_port>
 8011458:	4603      	mov	r3, r0
 801145a:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801145c:	88fb      	ldrh	r3, [r7, #6]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d135      	bne.n	80114ce <tcp_bind+0xd2>
      return ERR_BUF;
 8011462:	f06f 0301 	mvn.w	r3, #1
 8011466:	e04f      	b.n	8011508 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8011468:	2300      	movs	r3, #0
 801146a:	61fb      	str	r3, [r7, #28]
 801146c:	e02b      	b.n	80114c6 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801146e:	4a2d      	ldr	r2, [pc, #180]	; (8011524 <tcp_bind+0x128>)
 8011470:	69fb      	ldr	r3, [r7, #28]
 8011472:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011476:	681b      	ldr	r3, [r3, #0]
 8011478:	61bb      	str	r3, [r7, #24]
 801147a:	e01e      	b.n	80114ba <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 801147c:	69bb      	ldr	r3, [r7, #24]
 801147e:	8adb      	ldrh	r3, [r3, #22]
 8011480:	88fa      	ldrh	r2, [r7, #6]
 8011482:	429a      	cmp	r2, r3
 8011484:	d116      	bne.n	80114b4 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8011486:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8011488:	2b00      	cmp	r3, #0
 801148a:	d010      	beq.n	80114ae <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 801148c:	69bb      	ldr	r3, [r7, #24]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	2b00      	cmp	r3, #0
 8011492:	d00c      	beq.n	80114ae <tcp_bind+0xb2>
 8011494:	68bb      	ldr	r3, [r7, #8]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d009      	beq.n	80114ae <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 801149a:	68bb      	ldr	r3, [r7, #8]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d005      	beq.n	80114ae <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 80114a2:	69bb      	ldr	r3, [r7, #24]
 80114a4:	681a      	ldr	r2, [r3, #0]
 80114a6:	68bb      	ldr	r3, [r7, #8]
 80114a8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 80114aa:	429a      	cmp	r2, r3
 80114ac:	d102      	bne.n	80114b4 <tcp_bind+0xb8>
              return ERR_USE;
 80114ae:	f06f 0307 	mvn.w	r3, #7
 80114b2:	e029      	b.n	8011508 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 80114b4:	69bb      	ldr	r3, [r7, #24]
 80114b6:	68db      	ldr	r3, [r3, #12]
 80114b8:	61bb      	str	r3, [r7, #24]
 80114ba:	69bb      	ldr	r3, [r7, #24]
 80114bc:	2b00      	cmp	r3, #0
 80114be:	d1dd      	bne.n	801147c <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 80114c0:	69fb      	ldr	r3, [r7, #28]
 80114c2:	3301      	adds	r3, #1
 80114c4:	61fb      	str	r3, [r7, #28]
 80114c6:	69fa      	ldr	r2, [r7, #28]
 80114c8:	697b      	ldr	r3, [r7, #20]
 80114ca:	429a      	cmp	r2, r3
 80114cc:	dbcf      	blt.n	801146e <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 80114ce:	68bb      	ldr	r3, [r7, #8]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	d00c      	beq.n	80114ee <tcp_bind+0xf2>
 80114d4:	68bb      	ldr	r3, [r7, #8]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d008      	beq.n	80114ee <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 80114dc:	68bb      	ldr	r3, [r7, #8]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d002      	beq.n	80114e8 <tcp_bind+0xec>
 80114e2:	68bb      	ldr	r3, [r7, #8]
 80114e4:	681b      	ldr	r3, [r3, #0]
 80114e6:	e000      	b.n	80114ea <tcp_bind+0xee>
 80114e8:	2300      	movs	r3, #0
 80114ea:	68fa      	ldr	r2, [r7, #12]
 80114ec:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	88fa      	ldrh	r2, [r7, #6]
 80114f2:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80114f4:	4b0c      	ldr	r3, [pc, #48]	; (8011528 <tcp_bind+0x12c>)
 80114f6:	681a      	ldr	r2, [r3, #0]
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	60da      	str	r2, [r3, #12]
 80114fc:	4a0a      	ldr	r2, [pc, #40]	; (8011528 <tcp_bind+0x12c>)
 80114fe:	68fb      	ldr	r3, [r7, #12]
 8011500:	6013      	str	r3, [r2, #0]
 8011502:	f005 fbd1 	bl	8016ca8 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8011506:	2300      	movs	r3, #0
}
 8011508:	4618      	mov	r0, r3
 801150a:	3720      	adds	r7, #32
 801150c:	46bd      	mov	sp, r7
 801150e:	bd80      	pop	{r7, pc}
 8011510:	0801ef38 	.word	0x0801ef38
 8011514:	0801cef0 	.word	0x0801cef0
 8011518:	0801d084 	.word	0x0801d084
 801151c:	0801cf34 	.word	0x0801cf34
 8011520:	0801d09c 	.word	0x0801d09c
 8011524:	0801ef10 	.word	0x0801ef10
 8011528:	2000dd50 	.word	0x2000dd50

0801152c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 801152c:	b580      	push	{r7, lr}
 801152e:	b084      	sub	sp, #16
 8011530:	af00      	add	r7, sp, #0
 8011532:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	2b00      	cmp	r3, #0
 8011538:	d106      	bne.n	8011548 <tcp_update_rcv_ann_wnd+0x1c>
 801153a:	4b25      	ldr	r3, [pc, #148]	; (80115d0 <tcp_update_rcv_ann_wnd+0xa4>)
 801153c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8011540:	4924      	ldr	r1, [pc, #144]	; (80115d4 <tcp_update_rcv_ann_wnd+0xa8>)
 8011542:	4825      	ldr	r0, [pc, #148]	; (80115d8 <tcp_update_rcv_ann_wnd+0xac>)
 8011544:	f009 f8c0 	bl	801a6c8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801154c:	687a      	ldr	r2, [r7, #4]
 801154e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8011550:	4413      	add	r3, r2
 8011552:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011554:	687b      	ldr	r3, [r7, #4]
 8011556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011558:	687a      	ldr	r2, [r7, #4]
 801155a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801155c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8011560:	bf28      	it	cs
 8011562:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8011566:	b292      	uxth	r2, r2
 8011568:	4413      	add	r3, r2
 801156a:	68fa      	ldr	r2, [r7, #12]
 801156c:	1ad3      	subs	r3, r2, r3
 801156e:	2b00      	cmp	r3, #0
 8011570:	db08      	blt.n	8011584 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8011572:	687b      	ldr	r3, [r7, #4]
 8011574:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801157e:	68fa      	ldr	r2, [r7, #12]
 8011580:	1ad3      	subs	r3, r2, r3
 8011582:	e020      	b.n	80115c6 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801158c:	1ad3      	subs	r3, r2, r3
 801158e:	2b00      	cmp	r3, #0
 8011590:	dd03      	ble.n	801159a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	2200      	movs	r2, #0
 8011596:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011598:	e014      	b.n	80115c4 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115a2:	1ad3      	subs	r3, r2, r3
 80115a4:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80115a6:	68bb      	ldr	r3, [r7, #8]
 80115a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80115ac:	d306      	bcc.n	80115bc <tcp_update_rcv_ann_wnd+0x90>
 80115ae:	4b08      	ldr	r3, [pc, #32]	; (80115d0 <tcp_update_rcv_ann_wnd+0xa4>)
 80115b0:	f240 32b6 	movw	r2, #950	; 0x3b6
 80115b4:	4909      	ldr	r1, [pc, #36]	; (80115dc <tcp_update_rcv_ann_wnd+0xb0>)
 80115b6:	4808      	ldr	r0, [pc, #32]	; (80115d8 <tcp_update_rcv_ann_wnd+0xac>)
 80115b8:	f009 f886 	bl	801a6c8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80115bc:	68bb      	ldr	r3, [r7, #8]
 80115be:	b29a      	uxth	r2, r3
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80115c4:	2300      	movs	r3, #0
  }
}
 80115c6:	4618      	mov	r0, r3
 80115c8:	3710      	adds	r7, #16
 80115ca:	46bd      	mov	sp, r7
 80115cc:	bd80      	pop	{r7, pc}
 80115ce:	bf00      	nop
 80115d0:	0801cef0 	.word	0x0801cef0
 80115d4:	0801d14c 	.word	0x0801d14c
 80115d8:	0801cf34 	.word	0x0801cf34
 80115dc:	0801d170 	.word	0x0801d170

080115e0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b084      	sub	sp, #16
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	6078      	str	r0, [r7, #4]
 80115e8:	460b      	mov	r3, r1
 80115ea:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d107      	bne.n	8011602 <tcp_recved+0x22>
 80115f2:	4b1f      	ldr	r3, [pc, #124]	; (8011670 <tcp_recved+0x90>)
 80115f4:	f240 32cf 	movw	r2, #975	; 0x3cf
 80115f8:	491e      	ldr	r1, [pc, #120]	; (8011674 <tcp_recved+0x94>)
 80115fa:	481f      	ldr	r0, [pc, #124]	; (8011678 <tcp_recved+0x98>)
 80115fc:	f009 f864 	bl	801a6c8 <iprintf>
 8011600:	e032      	b.n	8011668 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	7d1b      	ldrb	r3, [r3, #20]
 8011606:	2b01      	cmp	r3, #1
 8011608:	d106      	bne.n	8011618 <tcp_recved+0x38>
 801160a:	4b19      	ldr	r3, [pc, #100]	; (8011670 <tcp_recved+0x90>)
 801160c:	f240 32d2 	movw	r2, #978	; 0x3d2
 8011610:	491a      	ldr	r1, [pc, #104]	; (801167c <tcp_recved+0x9c>)
 8011612:	4819      	ldr	r0, [pc, #100]	; (8011678 <tcp_recved+0x98>)
 8011614:	f009 f858 	bl	801a6c8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801161c:	887b      	ldrh	r3, [r7, #2]
 801161e:	4413      	add	r3, r2
 8011620:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8011622:	89fb      	ldrh	r3, [r7, #14]
 8011624:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011628:	d804      	bhi.n	8011634 <tcp_recved+0x54>
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801162e:	89fa      	ldrh	r2, [r7, #14]
 8011630:	429a      	cmp	r2, r3
 8011632:	d204      	bcs.n	801163e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801163a:	851a      	strh	r2, [r3, #40]	; 0x28
 801163c:	e002      	b.n	8011644 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	89fa      	ldrh	r2, [r7, #14]
 8011642:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8011644:	6878      	ldr	r0, [r7, #4]
 8011646:	f7ff ff71 	bl	801152c <tcp_update_rcv_ann_wnd>
 801164a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801164c:	68bb      	ldr	r3, [r7, #8]
 801164e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011652:	d309      	bcc.n	8011668 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	8b5b      	ldrh	r3, [r3, #26]
 8011658:	f043 0302 	orr.w	r3, r3, #2
 801165c:	b29a      	uxth	r2, r3
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011662:	6878      	ldr	r0, [r7, #4]
 8011664:	f004 fbaa 	bl	8015dbc <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8011668:	3710      	adds	r7, #16
 801166a:	46bd      	mov	sp, r7
 801166c:	bd80      	pop	{r7, pc}
 801166e:	bf00      	nop
 8011670:	0801cef0 	.word	0x0801cef0
 8011674:	0801d18c 	.word	0x0801d18c
 8011678:	0801cf34 	.word	0x0801cf34
 801167c:	0801d1a4 	.word	0x0801d1a4

08011680 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8011680:	b480      	push	{r7}
 8011682:	b083      	sub	sp, #12
 8011684:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8011686:	2300      	movs	r3, #0
 8011688:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 801168a:	4b1e      	ldr	r3, [pc, #120]	; (8011704 <tcp_new_port+0x84>)
 801168c:	881b      	ldrh	r3, [r3, #0]
 801168e:	3301      	adds	r3, #1
 8011690:	b29a      	uxth	r2, r3
 8011692:	4b1c      	ldr	r3, [pc, #112]	; (8011704 <tcp_new_port+0x84>)
 8011694:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8011696:	4b1b      	ldr	r3, [pc, #108]	; (8011704 <tcp_new_port+0x84>)
 8011698:	881b      	ldrh	r3, [r3, #0]
 801169a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801169e:	4293      	cmp	r3, r2
 80116a0:	d103      	bne.n	80116aa <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 80116a2:	4b18      	ldr	r3, [pc, #96]	; (8011704 <tcp_new_port+0x84>)
 80116a4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80116a8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80116aa:	2300      	movs	r3, #0
 80116ac:	71fb      	strb	r3, [r7, #7]
 80116ae:	e01e      	b.n	80116ee <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80116b0:	79fb      	ldrb	r3, [r7, #7]
 80116b2:	4a15      	ldr	r2, [pc, #84]	; (8011708 <tcp_new_port+0x88>)
 80116b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80116b8:	681b      	ldr	r3, [r3, #0]
 80116ba:	603b      	str	r3, [r7, #0]
 80116bc:	e011      	b.n	80116e2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 80116be:	683b      	ldr	r3, [r7, #0]
 80116c0:	8ada      	ldrh	r2, [r3, #22]
 80116c2:	4b10      	ldr	r3, [pc, #64]	; (8011704 <tcp_new_port+0x84>)
 80116c4:	881b      	ldrh	r3, [r3, #0]
 80116c6:	429a      	cmp	r2, r3
 80116c8:	d108      	bne.n	80116dc <tcp_new_port+0x5c>
        n++;
 80116ca:	88bb      	ldrh	r3, [r7, #4]
 80116cc:	3301      	adds	r3, #1
 80116ce:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80116d0:	88bb      	ldrh	r3, [r7, #4]
 80116d2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80116d6:	d3d8      	bcc.n	801168a <tcp_new_port+0xa>
          return 0;
 80116d8:	2300      	movs	r3, #0
 80116da:	e00d      	b.n	80116f8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80116dc:	683b      	ldr	r3, [r7, #0]
 80116de:	68db      	ldr	r3, [r3, #12]
 80116e0:	603b      	str	r3, [r7, #0]
 80116e2:	683b      	ldr	r3, [r7, #0]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d1ea      	bne.n	80116be <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80116e8:	79fb      	ldrb	r3, [r7, #7]
 80116ea:	3301      	adds	r3, #1
 80116ec:	71fb      	strb	r3, [r7, #7]
 80116ee:	79fb      	ldrb	r3, [r7, #7]
 80116f0:	2b03      	cmp	r3, #3
 80116f2:	d9dd      	bls.n	80116b0 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80116f4:	4b03      	ldr	r3, [pc, #12]	; (8011704 <tcp_new_port+0x84>)
 80116f6:	881b      	ldrh	r3, [r3, #0]
}
 80116f8:	4618      	mov	r0, r3
 80116fa:	370c      	adds	r7, #12
 80116fc:	46bd      	mov	sp, r7
 80116fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011702:	4770      	bx	lr
 8011704:	200000a4 	.word	0x200000a4
 8011708:	0801ef10 	.word	0x0801ef10

0801170c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801170c:	b5b0      	push	{r4, r5, r7, lr}
 801170e:	b090      	sub	sp, #64	; 0x40
 8011710:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8011712:	2300      	movs	r3, #0
 8011714:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8011718:	4b94      	ldr	r3, [pc, #592]	; (801196c <tcp_slowtmr+0x260>)
 801171a:	681b      	ldr	r3, [r3, #0]
 801171c:	3301      	adds	r3, #1
 801171e:	4a93      	ldr	r2, [pc, #588]	; (801196c <tcp_slowtmr+0x260>)
 8011720:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8011722:	4b93      	ldr	r3, [pc, #588]	; (8011970 <tcp_slowtmr+0x264>)
 8011724:	781b      	ldrb	r3, [r3, #0]
 8011726:	3301      	adds	r3, #1
 8011728:	b2da      	uxtb	r2, r3
 801172a:	4b91      	ldr	r3, [pc, #580]	; (8011970 <tcp_slowtmr+0x264>)
 801172c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801172e:	2300      	movs	r3, #0
 8011730:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8011732:	4b90      	ldr	r3, [pc, #576]	; (8011974 <tcp_slowtmr+0x268>)
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8011738:	e29f      	b.n	8011c7a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801173a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801173c:	7d1b      	ldrb	r3, [r3, #20]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d106      	bne.n	8011750 <tcp_slowtmr+0x44>
 8011742:	4b8d      	ldr	r3, [pc, #564]	; (8011978 <tcp_slowtmr+0x26c>)
 8011744:	f240 42be 	movw	r2, #1214	; 0x4be
 8011748:	498c      	ldr	r1, [pc, #560]	; (801197c <tcp_slowtmr+0x270>)
 801174a:	488d      	ldr	r0, [pc, #564]	; (8011980 <tcp_slowtmr+0x274>)
 801174c:	f008 ffbc 	bl	801a6c8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8011750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011752:	7d1b      	ldrb	r3, [r3, #20]
 8011754:	2b01      	cmp	r3, #1
 8011756:	d106      	bne.n	8011766 <tcp_slowtmr+0x5a>
 8011758:	4b87      	ldr	r3, [pc, #540]	; (8011978 <tcp_slowtmr+0x26c>)
 801175a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801175e:	4989      	ldr	r1, [pc, #548]	; (8011984 <tcp_slowtmr+0x278>)
 8011760:	4887      	ldr	r0, [pc, #540]	; (8011980 <tcp_slowtmr+0x274>)
 8011762:	f008 ffb1 	bl	801a6c8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8011766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011768:	7d1b      	ldrb	r3, [r3, #20]
 801176a:	2b0a      	cmp	r3, #10
 801176c:	d106      	bne.n	801177c <tcp_slowtmr+0x70>
 801176e:	4b82      	ldr	r3, [pc, #520]	; (8011978 <tcp_slowtmr+0x26c>)
 8011770:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8011774:	4984      	ldr	r1, [pc, #528]	; (8011988 <tcp_slowtmr+0x27c>)
 8011776:	4882      	ldr	r0, [pc, #520]	; (8011980 <tcp_slowtmr+0x274>)
 8011778:	f008 ffa6 	bl	801a6c8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801177c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801177e:	7f9a      	ldrb	r2, [r3, #30]
 8011780:	4b7b      	ldr	r3, [pc, #492]	; (8011970 <tcp_slowtmr+0x264>)
 8011782:	781b      	ldrb	r3, [r3, #0]
 8011784:	429a      	cmp	r2, r3
 8011786:	d105      	bne.n	8011794 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8011788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801178a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801178c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801178e:	68db      	ldr	r3, [r3, #12]
 8011790:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8011792:	e272      	b.n	8011c7a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 8011794:	4b76      	ldr	r3, [pc, #472]	; (8011970 <tcp_slowtmr+0x264>)
 8011796:	781a      	ldrb	r2, [r3, #0]
 8011798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801179a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 801179c:	2300      	movs	r3, #0
 801179e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80117a2:	2300      	movs	r3, #0
 80117a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80117a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117aa:	7d1b      	ldrb	r3, [r3, #20]
 80117ac:	2b02      	cmp	r3, #2
 80117ae:	d10a      	bne.n	80117c6 <tcp_slowtmr+0xba>
 80117b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80117b6:	2b05      	cmp	r3, #5
 80117b8:	d905      	bls.n	80117c6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 80117ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80117be:	3301      	adds	r3, #1
 80117c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80117c4:	e11e      	b.n	8011a04 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80117c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80117cc:	2b0b      	cmp	r3, #11
 80117ce:	d905      	bls.n	80117dc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80117d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80117d4:	3301      	adds	r3, #1
 80117d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80117da:	e113      	b.n	8011a04 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80117dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117de:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80117e2:	2b00      	cmp	r3, #0
 80117e4:	d075      	beq.n	80118d2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80117e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d006      	beq.n	80117fc <tcp_slowtmr+0xf0>
 80117ee:	4b62      	ldr	r3, [pc, #392]	; (8011978 <tcp_slowtmr+0x26c>)
 80117f0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80117f4:	4965      	ldr	r1, [pc, #404]	; (801198c <tcp_slowtmr+0x280>)
 80117f6:	4862      	ldr	r0, [pc, #392]	; (8011980 <tcp_slowtmr+0x274>)
 80117f8:	f008 ff66 	bl	801a6c8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80117fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011800:	2b00      	cmp	r3, #0
 8011802:	d106      	bne.n	8011812 <tcp_slowtmr+0x106>
 8011804:	4b5c      	ldr	r3, [pc, #368]	; (8011978 <tcp_slowtmr+0x26c>)
 8011806:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801180a:	4961      	ldr	r1, [pc, #388]	; (8011990 <tcp_slowtmr+0x284>)
 801180c:	485c      	ldr	r0, [pc, #368]	; (8011980 <tcp_slowtmr+0x274>)
 801180e:	f008 ff5b 	bl	801a6c8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8011812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011814:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011818:	2b0b      	cmp	r3, #11
 801181a:	d905      	bls.n	8011828 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 801181c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011820:	3301      	adds	r3, #1
 8011822:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011826:	e0ed      	b.n	8011a04 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8011828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801182a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801182e:	3b01      	subs	r3, #1
 8011830:	4a58      	ldr	r2, [pc, #352]	; (8011994 <tcp_slowtmr+0x288>)
 8011832:	5cd3      	ldrb	r3, [r2, r3]
 8011834:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8011836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011838:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801183c:	7c7a      	ldrb	r2, [r7, #17]
 801183e:	429a      	cmp	r2, r3
 8011840:	d907      	bls.n	8011852 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8011842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011844:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011848:	3301      	adds	r3, #1
 801184a:	b2da      	uxtb	r2, r3
 801184c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801184e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8011852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011854:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011858:	7c7a      	ldrb	r2, [r7, #17]
 801185a:	429a      	cmp	r2, r3
 801185c:	f200 80d2 	bhi.w	8011a04 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8011860:	2301      	movs	r3, #1
 8011862:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8011864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011866:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801186a:	2b00      	cmp	r3, #0
 801186c:	d108      	bne.n	8011880 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801186e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011870:	f005 f94c 	bl	8016b0c <tcp_zero_window_probe>
 8011874:	4603      	mov	r3, r0
 8011876:	2b00      	cmp	r3, #0
 8011878:	d014      	beq.n	80118a4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801187a:	2300      	movs	r3, #0
 801187c:	623b      	str	r3, [r7, #32]
 801187e:	e011      	b.n	80118a4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8011880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011882:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011886:	4619      	mov	r1, r3
 8011888:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801188a:	f004 f811 	bl	80158b0 <tcp_split_unsent_seg>
 801188e:	4603      	mov	r3, r0
 8011890:	2b00      	cmp	r3, #0
 8011892:	d107      	bne.n	80118a4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8011894:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011896:	f004 fa91 	bl	8015dbc <tcp_output>
 801189a:	4603      	mov	r3, r0
 801189c:	2b00      	cmp	r3, #0
 801189e:	d101      	bne.n	80118a4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 80118a0:	2300      	movs	r3, #0
 80118a2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 80118a4:	6a3b      	ldr	r3, [r7, #32]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	f000 80ac 	beq.w	8011a04 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 80118ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ae:	2200      	movs	r2, #0
 80118b0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 80118b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118b6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80118ba:	2b06      	cmp	r3, #6
 80118bc:	f200 80a2 	bhi.w	8011a04 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 80118c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118c2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80118c6:	3301      	adds	r3, #1
 80118c8:	b2da      	uxtb	r2, r3
 80118ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118cc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 80118d0:	e098      	b.n	8011a04 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 80118d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118d4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80118d8:	2b00      	cmp	r3, #0
 80118da:	db0f      	blt.n	80118fc <tcp_slowtmr+0x1f0>
 80118dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118de:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80118e2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80118e6:	4293      	cmp	r3, r2
 80118e8:	d008      	beq.n	80118fc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80118ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80118f0:	b29b      	uxth	r3, r3
 80118f2:	3301      	adds	r3, #1
 80118f4:	b29b      	uxth	r3, r3
 80118f6:	b21a      	sxth	r2, r3
 80118f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118fa:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80118fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80118fe:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8011902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011904:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011908:	429a      	cmp	r2, r3
 801190a:	db7b      	blt.n	8011a04 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801190c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801190e:	f004 fd47 	bl	80163a0 <tcp_rexmit_rto_prepare>
 8011912:	4603      	mov	r3, r0
 8011914:	2b00      	cmp	r3, #0
 8011916:	d007      	beq.n	8011928 <tcp_slowtmr+0x21c>
 8011918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801191a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801191c:	2b00      	cmp	r3, #0
 801191e:	d171      	bne.n	8011a04 <tcp_slowtmr+0x2f8>
 8011920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011924:	2b00      	cmp	r3, #0
 8011926:	d06d      	beq.n	8011a04 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8011928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801192a:	7d1b      	ldrb	r3, [r3, #20]
 801192c:	2b02      	cmp	r3, #2
 801192e:	d03a      	beq.n	80119a6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8011930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011932:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011936:	2b0c      	cmp	r3, #12
 8011938:	bf28      	it	cs
 801193a:	230c      	movcs	r3, #12
 801193c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801193e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011940:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8011944:	10db      	asrs	r3, r3, #3
 8011946:	b21b      	sxth	r3, r3
 8011948:	461a      	mov	r2, r3
 801194a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801194c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8011950:	4413      	add	r3, r2
 8011952:	7efa      	ldrb	r2, [r7, #27]
 8011954:	4910      	ldr	r1, [pc, #64]	; (8011998 <tcp_slowtmr+0x28c>)
 8011956:	5c8a      	ldrb	r2, [r1, r2]
 8011958:	4093      	lsls	r3, r2
 801195a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801195c:	697b      	ldr	r3, [r7, #20]
 801195e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8011962:	4293      	cmp	r3, r2
 8011964:	dc1a      	bgt.n	801199c <tcp_slowtmr+0x290>
 8011966:	697b      	ldr	r3, [r7, #20]
 8011968:	b21a      	sxth	r2, r3
 801196a:	e019      	b.n	80119a0 <tcp_slowtmr+0x294>
 801196c:	2000dd48 	.word	0x2000dd48
 8011970:	20006992 	.word	0x20006992
 8011974:	2000dd44 	.word	0x2000dd44
 8011978:	0801cef0 	.word	0x0801cef0
 801197c:	0801d234 	.word	0x0801d234
 8011980:	0801cf34 	.word	0x0801cf34
 8011984:	0801d260 	.word	0x0801d260
 8011988:	0801d28c 	.word	0x0801d28c
 801198c:	0801d2bc 	.word	0x0801d2bc
 8011990:	0801d2f0 	.word	0x0801d2f0
 8011994:	0801ef08 	.word	0x0801ef08
 8011998:	0801eef8 	.word	0x0801eef8
 801199c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80119a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 80119a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119a8:	2200      	movs	r2, #0
 80119aa:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80119ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80119b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80119b8:	4293      	cmp	r3, r2
 80119ba:	bf28      	it	cs
 80119bc:	4613      	movcs	r3, r2
 80119be:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 80119c0:	8a7b      	ldrh	r3, [r7, #18]
 80119c2:	085b      	lsrs	r3, r3, #1
 80119c4:	b29a      	uxth	r2, r3
 80119c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80119cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80119d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80119d6:	005b      	lsls	r3, r3, #1
 80119d8:	b29b      	uxth	r3, r3
 80119da:	429a      	cmp	r2, r3
 80119dc:	d206      	bcs.n	80119ec <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80119de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80119e2:	005b      	lsls	r3, r3, #1
 80119e4:	b29a      	uxth	r2, r3
 80119e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119e8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80119ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119ee:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80119f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80119f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119f8:	2200      	movs	r2, #0
 80119fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80119fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011a00:	f004 fd3e 	bl	8016480 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8011a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a06:	7d1b      	ldrb	r3, [r3, #20]
 8011a08:	2b06      	cmp	r3, #6
 8011a0a:	d111      	bne.n	8011a30 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8011a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a0e:	8b5b      	ldrh	r3, [r3, #26]
 8011a10:	f003 0310 	and.w	r3, r3, #16
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d00b      	beq.n	8011a30 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011a18:	4b9d      	ldr	r3, [pc, #628]	; (8011c90 <tcp_slowtmr+0x584>)
 8011a1a:	681a      	ldr	r2, [r3, #0]
 8011a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a1e:	6a1b      	ldr	r3, [r3, #32]
 8011a20:	1ad3      	subs	r3, r2, r3
 8011a22:	2b28      	cmp	r3, #40	; 0x28
 8011a24:	d904      	bls.n	8011a30 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8011a26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a2a:	3301      	adds	r3, #1
 8011a2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a32:	7a5b      	ldrb	r3, [r3, #9]
 8011a34:	f003 0308 	and.w	r3, r3, #8
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d04c      	beq.n	8011ad6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 8011a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a3e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8011a40:	2b04      	cmp	r3, #4
 8011a42:	d003      	beq.n	8011a4c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8011a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a46:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8011a48:	2b07      	cmp	r3, #7
 8011a4a:	d144      	bne.n	8011ad6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011a4c:	4b90      	ldr	r3, [pc, #576]	; (8011c90 <tcp_slowtmr+0x584>)
 8011a4e:	681a      	ldr	r2, [r3, #0]
 8011a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a52:	6a1b      	ldr	r3, [r3, #32]
 8011a54:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8011a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011a5c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8011a60:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8011a64:	498b      	ldr	r1, [pc, #556]	; (8011c94 <tcp_slowtmr+0x588>)
 8011a66:	fba1 1303 	umull	r1, r3, r1, r3
 8011a6a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011a6c:	429a      	cmp	r2, r3
 8011a6e:	d90a      	bls.n	8011a86 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8011a70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011a74:	3301      	adds	r3, #1
 8011a76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8011a7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011a7e:	3301      	adds	r3, #1
 8011a80:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8011a84:	e027      	b.n	8011ad6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011a86:	4b82      	ldr	r3, [pc, #520]	; (8011c90 <tcp_slowtmr+0x584>)
 8011a88:	681a      	ldr	r2, [r3, #0]
 8011a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a8c:	6a1b      	ldr	r3, [r3, #32]
 8011a8e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8011a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a92:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8011a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a98:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011a9c:	4618      	mov	r0, r3
 8011a9e:	4b7e      	ldr	r3, [pc, #504]	; (8011c98 <tcp_slowtmr+0x58c>)
 8011aa0:	fb03 f300 	mul.w	r3, r3, r0
 8011aa4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8011aa6:	497b      	ldr	r1, [pc, #492]	; (8011c94 <tcp_slowtmr+0x588>)
 8011aa8:	fba1 1303 	umull	r1, r3, r1, r3
 8011aac:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011aae:	429a      	cmp	r2, r3
 8011ab0:	d911      	bls.n	8011ad6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 8011ab2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011ab4:	f004 ffea 	bl	8016a8c <tcp_keepalive>
 8011ab8:	4603      	mov	r3, r0
 8011aba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8011abe:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011ac2:	2b00      	cmp	r3, #0
 8011ac4:	d107      	bne.n	8011ad6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 8011ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ac8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8011acc:	3301      	adds	r3, #1
 8011ace:	b2da      	uxtb	r2, r3
 8011ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ad2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8011ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011ada:	2b00      	cmp	r3, #0
 8011adc:	d011      	beq.n	8011b02 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8011ade:	4b6c      	ldr	r3, [pc, #432]	; (8011c90 <tcp_slowtmr+0x584>)
 8011ae0:	681a      	ldr	r2, [r3, #0]
 8011ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ae4:	6a1b      	ldr	r3, [r3, #32]
 8011ae6:	1ad2      	subs	r2, r2, r3
 8011ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011aea:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011aee:	4619      	mov	r1, r3
 8011af0:	460b      	mov	r3, r1
 8011af2:	005b      	lsls	r3, r3, #1
 8011af4:	440b      	add	r3, r1
 8011af6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8011af8:	429a      	cmp	r2, r3
 8011afa:	d302      	bcc.n	8011b02 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8011afc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011afe:	f000 fea9 	bl	8012854 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8011b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b04:	7d1b      	ldrb	r3, [r3, #20]
 8011b06:	2b03      	cmp	r3, #3
 8011b08:	d10b      	bne.n	8011b22 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8011b0a:	4b61      	ldr	r3, [pc, #388]	; (8011c90 <tcp_slowtmr+0x584>)
 8011b0c:	681a      	ldr	r2, [r3, #0]
 8011b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b10:	6a1b      	ldr	r3, [r3, #32]
 8011b12:	1ad3      	subs	r3, r2, r3
 8011b14:	2b28      	cmp	r3, #40	; 0x28
 8011b16:	d904      	bls.n	8011b22 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8011b18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b1c:	3301      	adds	r3, #1
 8011b1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8011b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b24:	7d1b      	ldrb	r3, [r3, #20]
 8011b26:	2b09      	cmp	r3, #9
 8011b28:	d10b      	bne.n	8011b42 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011b2a:	4b59      	ldr	r3, [pc, #356]	; (8011c90 <tcp_slowtmr+0x584>)
 8011b2c:	681a      	ldr	r2, [r3, #0]
 8011b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b30:	6a1b      	ldr	r3, [r3, #32]
 8011b32:	1ad3      	subs	r3, r2, r3
 8011b34:	2bf0      	cmp	r3, #240	; 0xf0
 8011b36:	d904      	bls.n	8011b42 <tcp_slowtmr+0x436>
        ++pcb_remove;
 8011b38:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b3c:	3301      	adds	r3, #1
 8011b3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011b42:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d060      	beq.n	8011c0c <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8011b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b50:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8011b52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011b54:	f000 fcca 	bl	80124ec <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8011b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d010      	beq.n	8011b80 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8011b5e:	4b4f      	ldr	r3, [pc, #316]	; (8011c9c <tcp_slowtmr+0x590>)
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b64:	429a      	cmp	r2, r3
 8011b66:	d106      	bne.n	8011b76 <tcp_slowtmr+0x46a>
 8011b68:	4b4d      	ldr	r3, [pc, #308]	; (8011ca0 <tcp_slowtmr+0x594>)
 8011b6a:	f240 526d 	movw	r2, #1389	; 0x56d
 8011b6e:	494d      	ldr	r1, [pc, #308]	; (8011ca4 <tcp_slowtmr+0x598>)
 8011b70:	484d      	ldr	r0, [pc, #308]	; (8011ca8 <tcp_slowtmr+0x59c>)
 8011b72:	f008 fda9 	bl	801a6c8 <iprintf>
        prev->next = pcb->next;
 8011b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b78:	68da      	ldr	r2, [r3, #12]
 8011b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b7c:	60da      	str	r2, [r3, #12]
 8011b7e:	e00f      	b.n	8011ba0 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8011b80:	4b46      	ldr	r3, [pc, #280]	; (8011c9c <tcp_slowtmr+0x590>)
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b86:	429a      	cmp	r2, r3
 8011b88:	d006      	beq.n	8011b98 <tcp_slowtmr+0x48c>
 8011b8a:	4b45      	ldr	r3, [pc, #276]	; (8011ca0 <tcp_slowtmr+0x594>)
 8011b8c:	f240 5271 	movw	r2, #1393	; 0x571
 8011b90:	4946      	ldr	r1, [pc, #280]	; (8011cac <tcp_slowtmr+0x5a0>)
 8011b92:	4845      	ldr	r0, [pc, #276]	; (8011ca8 <tcp_slowtmr+0x59c>)
 8011b94:	f008 fd98 	bl	801a6c8 <iprintf>
        tcp_active_pcbs = pcb->next;
 8011b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b9a:	68db      	ldr	r3, [r3, #12]
 8011b9c:	4a3f      	ldr	r2, [pc, #252]	; (8011c9c <tcp_slowtmr+0x590>)
 8011b9e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8011ba0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011ba4:	2b00      	cmp	r3, #0
 8011ba6:	d013      	beq.n	8011bd0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011baa:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bae:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011bb0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8011bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bb4:	3304      	adds	r3, #4
 8011bb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011bb8:	8ad2      	ldrh	r2, [r2, #22]
 8011bba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011bbc:	8b09      	ldrh	r1, [r1, #24]
 8011bbe:	9102      	str	r1, [sp, #8]
 8011bc0:	9201      	str	r2, [sp, #4]
 8011bc2:	9300      	str	r3, [sp, #0]
 8011bc4:	462b      	mov	r3, r5
 8011bc6:	4622      	mov	r2, r4
 8011bc8:	4601      	mov	r1, r0
 8011bca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011bcc:	f004 feaa 	bl	8016924 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8011bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bd2:	691b      	ldr	r3, [r3, #16]
 8011bd4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8011bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bd8:	7d1b      	ldrb	r3, [r3, #20]
 8011bda:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8011bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bde:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8011be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011be2:	68db      	ldr	r3, [r3, #12]
 8011be4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011be6:	6838      	ldr	r0, [r7, #0]
 8011be8:	f7ff f8b8 	bl	8010d5c <tcp_free>

      tcp_active_pcbs_changed = 0;
 8011bec:	4b30      	ldr	r3, [pc, #192]	; (8011cb0 <tcp_slowtmr+0x5a4>)
 8011bee:	2200      	movs	r2, #0
 8011bf0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d004      	beq.n	8011c02 <tcp_slowtmr+0x4f6>
 8011bf8:	68fb      	ldr	r3, [r7, #12]
 8011bfa:	f06f 010c 	mvn.w	r1, #12
 8011bfe:	68b8      	ldr	r0, [r7, #8]
 8011c00:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8011c02:	4b2b      	ldr	r3, [pc, #172]	; (8011cb0 <tcp_slowtmr+0x5a4>)
 8011c04:	781b      	ldrb	r3, [r3, #0]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d037      	beq.n	8011c7a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 8011c0a:	e590      	b.n	801172e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8011c0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c0e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c12:	68db      	ldr	r3, [r3, #12]
 8011c14:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8011c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c18:	7f1b      	ldrb	r3, [r3, #28]
 8011c1a:	3301      	adds	r3, #1
 8011c1c:	b2da      	uxtb	r2, r3
 8011c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c20:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8011c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c24:	7f1a      	ldrb	r2, [r3, #28]
 8011c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c28:	7f5b      	ldrb	r3, [r3, #29]
 8011c2a:	429a      	cmp	r2, r3
 8011c2c:	d325      	bcc.n	8011c7a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 8011c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c30:	2200      	movs	r2, #0
 8011c32:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8011c34:	4b1e      	ldr	r3, [pc, #120]	; (8011cb0 <tcp_slowtmr+0x5a4>)
 8011c36:	2200      	movs	r2, #0
 8011c38:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8011c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011c40:	2b00      	cmp	r3, #0
 8011c42:	d00b      	beq.n	8011c5c <tcp_slowtmr+0x550>
 8011c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011c4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c4c:	6912      	ldr	r2, [r2, #16]
 8011c4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011c50:	4610      	mov	r0, r2
 8011c52:	4798      	blx	r3
 8011c54:	4603      	mov	r3, r0
 8011c56:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8011c5a:	e002      	b.n	8011c62 <tcp_slowtmr+0x556>
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8011c62:	4b13      	ldr	r3, [pc, #76]	; (8011cb0 <tcp_slowtmr+0x5a4>)
 8011c64:	781b      	ldrb	r3, [r3, #0]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d000      	beq.n	8011c6c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 8011c6a:	e560      	b.n	801172e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8011c6c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8011c70:	2b00      	cmp	r3, #0
 8011c72:	d102      	bne.n	8011c7a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 8011c74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011c76:	f004 f8a1 	bl	8015dbc <tcp_output>
  while (pcb != NULL) {
 8011c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c7c:	2b00      	cmp	r3, #0
 8011c7e:	f47f ad5c 	bne.w	801173a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8011c82:	2300      	movs	r3, #0
 8011c84:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8011c86:	4b0b      	ldr	r3, [pc, #44]	; (8011cb4 <tcp_slowtmr+0x5a8>)
 8011c88:	681b      	ldr	r3, [r3, #0]
 8011c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011c8c:	e067      	b.n	8011d5e <tcp_slowtmr+0x652>
 8011c8e:	bf00      	nop
 8011c90:	2000dd48 	.word	0x2000dd48
 8011c94:	10624dd3 	.word	0x10624dd3
 8011c98:	000124f8 	.word	0x000124f8
 8011c9c:	2000dd44 	.word	0x2000dd44
 8011ca0:	0801cef0 	.word	0x0801cef0
 8011ca4:	0801d328 	.word	0x0801d328
 8011ca8:	0801cf34 	.word	0x0801cf34
 8011cac:	0801d354 	.word	0x0801d354
 8011cb0:	2000dd40 	.word	0x2000dd40
 8011cb4:	2000dd54 	.word	0x2000dd54
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cba:	7d1b      	ldrb	r3, [r3, #20]
 8011cbc:	2b0a      	cmp	r3, #10
 8011cbe:	d006      	beq.n	8011cce <tcp_slowtmr+0x5c2>
 8011cc0:	4b2b      	ldr	r3, [pc, #172]	; (8011d70 <tcp_slowtmr+0x664>)
 8011cc2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8011cc6:	492b      	ldr	r1, [pc, #172]	; (8011d74 <tcp_slowtmr+0x668>)
 8011cc8:	482b      	ldr	r0, [pc, #172]	; (8011d78 <tcp_slowtmr+0x66c>)
 8011cca:	f008 fcfd 	bl	801a6c8 <iprintf>
    pcb_remove = 0;
 8011cce:	2300      	movs	r3, #0
 8011cd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8011cd4:	4b29      	ldr	r3, [pc, #164]	; (8011d7c <tcp_slowtmr+0x670>)
 8011cd6:	681a      	ldr	r2, [r3, #0]
 8011cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011cda:	6a1b      	ldr	r3, [r3, #32]
 8011cdc:	1ad3      	subs	r3, r2, r3
 8011cde:	2bf0      	cmp	r3, #240	; 0xf0
 8011ce0:	d904      	bls.n	8011cec <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8011ce2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ce6:	3301      	adds	r3, #1
 8011ce8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8011cec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d02f      	beq.n	8011d54 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8011cf4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011cf6:	f000 fbf9 	bl	80124ec <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8011cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d010      	beq.n	8011d22 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8011d00:	4b1f      	ldr	r3, [pc, #124]	; (8011d80 <tcp_slowtmr+0x674>)
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d06:	429a      	cmp	r2, r3
 8011d08:	d106      	bne.n	8011d18 <tcp_slowtmr+0x60c>
 8011d0a:	4b19      	ldr	r3, [pc, #100]	; (8011d70 <tcp_slowtmr+0x664>)
 8011d0c:	f240 52af 	movw	r2, #1455	; 0x5af
 8011d10:	491c      	ldr	r1, [pc, #112]	; (8011d84 <tcp_slowtmr+0x678>)
 8011d12:	4819      	ldr	r0, [pc, #100]	; (8011d78 <tcp_slowtmr+0x66c>)
 8011d14:	f008 fcd8 	bl	801a6c8 <iprintf>
        prev->next = pcb->next;
 8011d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d1a:	68da      	ldr	r2, [r3, #12]
 8011d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d1e:	60da      	str	r2, [r3, #12]
 8011d20:	e00f      	b.n	8011d42 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8011d22:	4b17      	ldr	r3, [pc, #92]	; (8011d80 <tcp_slowtmr+0x674>)
 8011d24:	681b      	ldr	r3, [r3, #0]
 8011d26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d28:	429a      	cmp	r2, r3
 8011d2a:	d006      	beq.n	8011d3a <tcp_slowtmr+0x62e>
 8011d2c:	4b10      	ldr	r3, [pc, #64]	; (8011d70 <tcp_slowtmr+0x664>)
 8011d2e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8011d32:	4915      	ldr	r1, [pc, #84]	; (8011d88 <tcp_slowtmr+0x67c>)
 8011d34:	4810      	ldr	r0, [pc, #64]	; (8011d78 <tcp_slowtmr+0x66c>)
 8011d36:	f008 fcc7 	bl	801a6c8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8011d3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d3c:	68db      	ldr	r3, [r3, #12]
 8011d3e:	4a10      	ldr	r2, [pc, #64]	; (8011d80 <tcp_slowtmr+0x674>)
 8011d40:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8011d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d44:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8011d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d48:	68db      	ldr	r3, [r3, #12]
 8011d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8011d4c:	69f8      	ldr	r0, [r7, #28]
 8011d4e:	f7ff f805 	bl	8010d5c <tcp_free>
 8011d52:	e004      	b.n	8011d5e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8011d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d56:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d5a:	68db      	ldr	r3, [r3, #12]
 8011d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8011d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d1a9      	bne.n	8011cb8 <tcp_slowtmr+0x5ac>
    }
  }
}
 8011d64:	bf00      	nop
 8011d66:	bf00      	nop
 8011d68:	3730      	adds	r7, #48	; 0x30
 8011d6a:	46bd      	mov	sp, r7
 8011d6c:	bdb0      	pop	{r4, r5, r7, pc}
 8011d6e:	bf00      	nop
 8011d70:	0801cef0 	.word	0x0801cef0
 8011d74:	0801d380 	.word	0x0801d380
 8011d78:	0801cf34 	.word	0x0801cf34
 8011d7c:	2000dd48 	.word	0x2000dd48
 8011d80:	2000dd54 	.word	0x2000dd54
 8011d84:	0801d3b0 	.word	0x0801d3b0
 8011d88:	0801d3d8 	.word	0x0801d3d8

08011d8c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8011d8c:	b580      	push	{r7, lr}
 8011d8e:	b082      	sub	sp, #8
 8011d90:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8011d92:	4b2d      	ldr	r3, [pc, #180]	; (8011e48 <tcp_fasttmr+0xbc>)
 8011d94:	781b      	ldrb	r3, [r3, #0]
 8011d96:	3301      	adds	r3, #1
 8011d98:	b2da      	uxtb	r2, r3
 8011d9a:	4b2b      	ldr	r3, [pc, #172]	; (8011e48 <tcp_fasttmr+0xbc>)
 8011d9c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8011d9e:	4b2b      	ldr	r3, [pc, #172]	; (8011e4c <tcp_fasttmr+0xc0>)
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8011da4:	e048      	b.n	8011e38 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	7f9a      	ldrb	r2, [r3, #30]
 8011daa:	4b27      	ldr	r3, [pc, #156]	; (8011e48 <tcp_fasttmr+0xbc>)
 8011dac:	781b      	ldrb	r3, [r3, #0]
 8011dae:	429a      	cmp	r2, r3
 8011db0:	d03f      	beq.n	8011e32 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8011db2:	4b25      	ldr	r3, [pc, #148]	; (8011e48 <tcp_fasttmr+0xbc>)
 8011db4:	781a      	ldrb	r2, [r3, #0]
 8011db6:	687b      	ldr	r3, [r7, #4]
 8011db8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	8b5b      	ldrh	r3, [r3, #26]
 8011dbe:	f003 0301 	and.w	r3, r3, #1
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d010      	beq.n	8011de8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	8b5b      	ldrh	r3, [r3, #26]
 8011dca:	f043 0302 	orr.w	r3, r3, #2
 8011dce:	b29a      	uxth	r2, r3
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8011dd4:	6878      	ldr	r0, [r7, #4]
 8011dd6:	f003 fff1 	bl	8015dbc <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011dda:	687b      	ldr	r3, [r7, #4]
 8011ddc:	8b5b      	ldrh	r3, [r3, #26]
 8011dde:	f023 0303 	bic.w	r3, r3, #3
 8011de2:	b29a      	uxth	r2, r3
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	8b5b      	ldrh	r3, [r3, #26]
 8011dec:	f003 0308 	and.w	r3, r3, #8
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d009      	beq.n	8011e08 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	8b5b      	ldrh	r3, [r3, #26]
 8011df8:	f023 0308 	bic.w	r3, r3, #8
 8011dfc:	b29a      	uxth	r2, r3
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8011e02:	6878      	ldr	r0, [r7, #4]
 8011e04:	f7ff f93e 	bl	8011084 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	68db      	ldr	r3, [r3, #12]
 8011e0c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8011e0e:	687b      	ldr	r3, [r7, #4]
 8011e10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d00a      	beq.n	8011e2c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8011e16:	4b0e      	ldr	r3, [pc, #56]	; (8011e50 <tcp_fasttmr+0xc4>)
 8011e18:	2200      	movs	r2, #0
 8011e1a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8011e1c:	6878      	ldr	r0, [r7, #4]
 8011e1e:	f000 f819 	bl	8011e54 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8011e22:	4b0b      	ldr	r3, [pc, #44]	; (8011e50 <tcp_fasttmr+0xc4>)
 8011e24:	781b      	ldrb	r3, [r3, #0]
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d000      	beq.n	8011e2c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8011e2a:	e7b8      	b.n	8011d9e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8011e2c:	683b      	ldr	r3, [r7, #0]
 8011e2e:	607b      	str	r3, [r7, #4]
 8011e30:	e002      	b.n	8011e38 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	68db      	ldr	r3, [r3, #12]
 8011e36:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d1b3      	bne.n	8011da6 <tcp_fasttmr+0x1a>
    }
  }
}
 8011e3e:	bf00      	nop
 8011e40:	bf00      	nop
 8011e42:	3708      	adds	r7, #8
 8011e44:	46bd      	mov	sp, r7
 8011e46:	bd80      	pop	{r7, pc}
 8011e48:	20006992 	.word	0x20006992
 8011e4c:	2000dd44 	.word	0x2000dd44
 8011e50:	2000dd40 	.word	0x2000dd40

08011e54 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011e54:	b590      	push	{r4, r7, lr}
 8011e56:	b085      	sub	sp, #20
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	2b00      	cmp	r3, #0
 8011e60:	d109      	bne.n	8011e76 <tcp_process_refused_data+0x22>
 8011e62:	4b37      	ldr	r3, [pc, #220]	; (8011f40 <tcp_process_refused_data+0xec>)
 8011e64:	f240 6209 	movw	r2, #1545	; 0x609
 8011e68:	4936      	ldr	r1, [pc, #216]	; (8011f44 <tcp_process_refused_data+0xf0>)
 8011e6a:	4837      	ldr	r0, [pc, #220]	; (8011f48 <tcp_process_refused_data+0xf4>)
 8011e6c:	f008 fc2c 	bl	801a6c8 <iprintf>
 8011e70:	f06f 030f 	mvn.w	r3, #15
 8011e74:	e060      	b.n	8011f38 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011e7a:	7b5b      	ldrb	r3, [r3, #13]
 8011e7c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011e82:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	2200      	movs	r2, #0
 8011e88:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d00b      	beq.n	8011eac <tcp_process_refused_data+0x58>
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	6918      	ldr	r0, [r3, #16]
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	68ba      	ldr	r2, [r7, #8]
 8011ea2:	6879      	ldr	r1, [r7, #4]
 8011ea4:	47a0      	blx	r4
 8011ea6:	4603      	mov	r3, r0
 8011ea8:	73fb      	strb	r3, [r7, #15]
 8011eaa:	e007      	b.n	8011ebc <tcp_process_refused_data+0x68>
 8011eac:	2300      	movs	r3, #0
 8011eae:	68ba      	ldr	r2, [r7, #8]
 8011eb0:	6879      	ldr	r1, [r7, #4]
 8011eb2:	2000      	movs	r0, #0
 8011eb4:	f000 f8a4 	bl	8012000 <tcp_recv_null>
 8011eb8:	4603      	mov	r3, r0
 8011eba:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8011ebc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d12a      	bne.n	8011f1a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8011ec4:	7bbb      	ldrb	r3, [r7, #14]
 8011ec6:	f003 0320 	and.w	r3, r3, #32
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d033      	beq.n	8011f36 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011ed2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011ed6:	d005      	beq.n	8011ee4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011edc:	3301      	adds	r3, #1
 8011ede:	b29a      	uxth	r2, r3
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011eea:	2b00      	cmp	r3, #0
 8011eec:	d00b      	beq.n	8011f06 <tcp_process_refused_data+0xb2>
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	6918      	ldr	r0, [r3, #16]
 8011ef8:	2300      	movs	r3, #0
 8011efa:	2200      	movs	r2, #0
 8011efc:	6879      	ldr	r1, [r7, #4]
 8011efe:	47a0      	blx	r4
 8011f00:	4603      	mov	r3, r0
 8011f02:	73fb      	strb	r3, [r7, #15]
 8011f04:	e001      	b.n	8011f0a <tcp_process_refused_data+0xb6>
 8011f06:	2300      	movs	r3, #0
 8011f08:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8011f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f0e:	f113 0f0d 	cmn.w	r3, #13
 8011f12:	d110      	bne.n	8011f36 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8011f14:	f06f 030c 	mvn.w	r3, #12
 8011f18:	e00e      	b.n	8011f38 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 8011f1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f1e:	f113 0f0d 	cmn.w	r3, #13
 8011f22:	d102      	bne.n	8011f2a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8011f24:	f06f 030c 	mvn.w	r3, #12
 8011f28:	e006      	b.n	8011f38 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8011f2a:	687b      	ldr	r3, [r7, #4]
 8011f2c:	68ba      	ldr	r2, [r7, #8]
 8011f2e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8011f30:	f06f 0304 	mvn.w	r3, #4
 8011f34:	e000      	b.n	8011f38 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 8011f36:	2300      	movs	r3, #0
}
 8011f38:	4618      	mov	r0, r3
 8011f3a:	3714      	adds	r7, #20
 8011f3c:	46bd      	mov	sp, r7
 8011f3e:	bd90      	pop	{r4, r7, pc}
 8011f40:	0801cef0 	.word	0x0801cef0
 8011f44:	0801d400 	.word	0x0801d400
 8011f48:	0801cf34 	.word	0x0801cf34

08011f4c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b084      	sub	sp, #16
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8011f54:	e007      	b.n	8011f66 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	681b      	ldr	r3, [r3, #0]
 8011f5a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8011f5c:	6878      	ldr	r0, [r7, #4]
 8011f5e:	f000 f80a 	bl	8011f76 <tcp_seg_free>
    seg = next;
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8011f66:	687b      	ldr	r3, [r7, #4]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d1f4      	bne.n	8011f56 <tcp_segs_free+0xa>
  }
}
 8011f6c:	bf00      	nop
 8011f6e:	bf00      	nop
 8011f70:	3710      	adds	r7, #16
 8011f72:	46bd      	mov	sp, r7
 8011f74:	bd80      	pop	{r7, pc}

08011f76 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8011f76:	b580      	push	{r7, lr}
 8011f78:	b082      	sub	sp, #8
 8011f7a:	af00      	add	r7, sp, #0
 8011f7c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	2b00      	cmp	r3, #0
 8011f82:	d00c      	beq.n	8011f9e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	685b      	ldr	r3, [r3, #4]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d004      	beq.n	8011f96 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8011f8c:	687b      	ldr	r3, [r7, #4]
 8011f8e:	685b      	ldr	r3, [r3, #4]
 8011f90:	4618      	mov	r0, r3
 8011f92:	f7fe fc27 	bl	80107e4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8011f96:	6879      	ldr	r1, [r7, #4]
 8011f98:	2003      	movs	r0, #3
 8011f9a:	f7fd fde3 	bl	800fb64 <memp_free>
  }
}
 8011f9e:	bf00      	nop
 8011fa0:	3708      	adds	r7, #8
 8011fa2:	46bd      	mov	sp, r7
 8011fa4:	bd80      	pop	{r7, pc}
	...

08011fa8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8011fa8:	b580      	push	{r7, lr}
 8011faa:	b084      	sub	sp, #16
 8011fac:	af00      	add	r7, sp, #0
 8011fae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	d106      	bne.n	8011fc4 <tcp_seg_copy+0x1c>
 8011fb6:	4b0f      	ldr	r3, [pc, #60]	; (8011ff4 <tcp_seg_copy+0x4c>)
 8011fb8:	f240 6282 	movw	r2, #1666	; 0x682
 8011fbc:	490e      	ldr	r1, [pc, #56]	; (8011ff8 <tcp_seg_copy+0x50>)
 8011fbe:	480f      	ldr	r0, [pc, #60]	; (8011ffc <tcp_seg_copy+0x54>)
 8011fc0:	f008 fb82 	bl	801a6c8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8011fc4:	2003      	movs	r0, #3
 8011fc6:	f7fd fd7b 	bl	800fac0 <memp_malloc>
 8011fca:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8011fcc:	68fb      	ldr	r3, [r7, #12]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d101      	bne.n	8011fd6 <tcp_seg_copy+0x2e>
    return NULL;
 8011fd2:	2300      	movs	r3, #0
 8011fd4:	e00a      	b.n	8011fec <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8011fd6:	2210      	movs	r2, #16
 8011fd8:	6879      	ldr	r1, [r7, #4]
 8011fda:	68f8      	ldr	r0, [r7, #12]
 8011fdc:	f008 fa9a 	bl	801a514 <memcpy>
  pbuf_ref(cseg->p);
 8011fe0:	68fb      	ldr	r3, [r7, #12]
 8011fe2:	685b      	ldr	r3, [r3, #4]
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	f7fe fca3 	bl	8010930 <pbuf_ref>
  return cseg;
 8011fea:	68fb      	ldr	r3, [r7, #12]
}
 8011fec:	4618      	mov	r0, r3
 8011fee:	3710      	adds	r7, #16
 8011ff0:	46bd      	mov	sp, r7
 8011ff2:	bd80      	pop	{r7, pc}
 8011ff4:	0801cef0 	.word	0x0801cef0
 8011ff8:	0801d444 	.word	0x0801d444
 8011ffc:	0801cf34 	.word	0x0801cf34

08012000 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8012000:	b580      	push	{r7, lr}
 8012002:	b084      	sub	sp, #16
 8012004:	af00      	add	r7, sp, #0
 8012006:	60f8      	str	r0, [r7, #12]
 8012008:	60b9      	str	r1, [r7, #8]
 801200a:	607a      	str	r2, [r7, #4]
 801200c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801200e:	68bb      	ldr	r3, [r7, #8]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d109      	bne.n	8012028 <tcp_recv_null+0x28>
 8012014:	4b12      	ldr	r3, [pc, #72]	; (8012060 <tcp_recv_null+0x60>)
 8012016:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801201a:	4912      	ldr	r1, [pc, #72]	; (8012064 <tcp_recv_null+0x64>)
 801201c:	4812      	ldr	r0, [pc, #72]	; (8012068 <tcp_recv_null+0x68>)
 801201e:	f008 fb53 	bl	801a6c8 <iprintf>
 8012022:	f06f 030f 	mvn.w	r3, #15
 8012026:	e016      	b.n	8012056 <tcp_recv_null+0x56>

  if (p != NULL) {
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d009      	beq.n	8012042 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	891b      	ldrh	r3, [r3, #8]
 8012032:	4619      	mov	r1, r3
 8012034:	68b8      	ldr	r0, [r7, #8]
 8012036:	f7ff fad3 	bl	80115e0 <tcp_recved>
    pbuf_free(p);
 801203a:	6878      	ldr	r0, [r7, #4]
 801203c:	f7fe fbd2 	bl	80107e4 <pbuf_free>
 8012040:	e008      	b.n	8012054 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8012042:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d104      	bne.n	8012054 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801204a:	68b8      	ldr	r0, [r7, #8]
 801204c:	f7ff f884 	bl	8011158 <tcp_close>
 8012050:	4603      	mov	r3, r0
 8012052:	e000      	b.n	8012056 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8012054:	2300      	movs	r3, #0
}
 8012056:	4618      	mov	r0, r3
 8012058:	3710      	adds	r7, #16
 801205a:	46bd      	mov	sp, r7
 801205c:	bd80      	pop	{r7, pc}
 801205e:	bf00      	nop
 8012060:	0801cef0 	.word	0x0801cef0
 8012064:	0801d460 	.word	0x0801d460
 8012068:	0801cf34 	.word	0x0801cf34

0801206c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801206c:	b580      	push	{r7, lr}
 801206e:	b086      	sub	sp, #24
 8012070:	af00      	add	r7, sp, #0
 8012072:	4603      	mov	r3, r0
 8012074:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8012076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801207a:	2b00      	cmp	r3, #0
 801207c:	db01      	blt.n	8012082 <tcp_kill_prio+0x16>
 801207e:	79fb      	ldrb	r3, [r7, #7]
 8012080:	e000      	b.n	8012084 <tcp_kill_prio+0x18>
 8012082:	237f      	movs	r3, #127	; 0x7f
 8012084:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8012086:	7afb      	ldrb	r3, [r7, #11]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d034      	beq.n	80120f6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801208c:	7afb      	ldrb	r3, [r7, #11]
 801208e:	3b01      	subs	r3, #1
 8012090:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8012092:	2300      	movs	r3, #0
 8012094:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012096:	2300      	movs	r3, #0
 8012098:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801209a:	4b19      	ldr	r3, [pc, #100]	; (8012100 <tcp_kill_prio+0x94>)
 801209c:	681b      	ldr	r3, [r3, #0]
 801209e:	617b      	str	r3, [r7, #20]
 80120a0:	e01f      	b.n	80120e2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80120a2:	697b      	ldr	r3, [r7, #20]
 80120a4:	7d5b      	ldrb	r3, [r3, #21]
 80120a6:	7afa      	ldrb	r2, [r7, #11]
 80120a8:	429a      	cmp	r2, r3
 80120aa:	d80c      	bhi.n	80120c6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80120ac:	697b      	ldr	r3, [r7, #20]
 80120ae:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80120b0:	7afa      	ldrb	r2, [r7, #11]
 80120b2:	429a      	cmp	r2, r3
 80120b4:	d112      	bne.n	80120dc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80120b6:	4b13      	ldr	r3, [pc, #76]	; (8012104 <tcp_kill_prio+0x98>)
 80120b8:	681a      	ldr	r2, [r3, #0]
 80120ba:	697b      	ldr	r3, [r7, #20]
 80120bc:	6a1b      	ldr	r3, [r3, #32]
 80120be:	1ad3      	subs	r3, r2, r3
 80120c0:	68fa      	ldr	r2, [r7, #12]
 80120c2:	429a      	cmp	r2, r3
 80120c4:	d80a      	bhi.n	80120dc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80120c6:	4b0f      	ldr	r3, [pc, #60]	; (8012104 <tcp_kill_prio+0x98>)
 80120c8:	681a      	ldr	r2, [r3, #0]
 80120ca:	697b      	ldr	r3, [r7, #20]
 80120cc:	6a1b      	ldr	r3, [r3, #32]
 80120ce:	1ad3      	subs	r3, r2, r3
 80120d0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80120d2:	697b      	ldr	r3, [r7, #20]
 80120d4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80120d6:	697b      	ldr	r3, [r7, #20]
 80120d8:	7d5b      	ldrb	r3, [r3, #21]
 80120da:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80120dc:	697b      	ldr	r3, [r7, #20]
 80120de:	68db      	ldr	r3, [r3, #12]
 80120e0:	617b      	str	r3, [r7, #20]
 80120e2:	697b      	ldr	r3, [r7, #20]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d1dc      	bne.n	80120a2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80120e8:	693b      	ldr	r3, [r7, #16]
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d004      	beq.n	80120f8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80120ee:	6938      	ldr	r0, [r7, #16]
 80120f0:	f7ff f978 	bl	80113e4 <tcp_abort>
 80120f4:	e000      	b.n	80120f8 <tcp_kill_prio+0x8c>
    return;
 80120f6:	bf00      	nop
  }
}
 80120f8:	3718      	adds	r7, #24
 80120fa:	46bd      	mov	sp, r7
 80120fc:	bd80      	pop	{r7, pc}
 80120fe:	bf00      	nop
 8012100:	2000dd44 	.word	0x2000dd44
 8012104:	2000dd48 	.word	0x2000dd48

08012108 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8012108:	b580      	push	{r7, lr}
 801210a:	b086      	sub	sp, #24
 801210c:	af00      	add	r7, sp, #0
 801210e:	4603      	mov	r3, r0
 8012110:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8012112:	79fb      	ldrb	r3, [r7, #7]
 8012114:	2b08      	cmp	r3, #8
 8012116:	d009      	beq.n	801212c <tcp_kill_state+0x24>
 8012118:	79fb      	ldrb	r3, [r7, #7]
 801211a:	2b09      	cmp	r3, #9
 801211c:	d006      	beq.n	801212c <tcp_kill_state+0x24>
 801211e:	4b1a      	ldr	r3, [pc, #104]	; (8012188 <tcp_kill_state+0x80>)
 8012120:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8012124:	4919      	ldr	r1, [pc, #100]	; (801218c <tcp_kill_state+0x84>)
 8012126:	481a      	ldr	r0, [pc, #104]	; (8012190 <tcp_kill_state+0x88>)
 8012128:	f008 face 	bl	801a6c8 <iprintf>

  inactivity = 0;
 801212c:	2300      	movs	r3, #0
 801212e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012130:	2300      	movs	r3, #0
 8012132:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012134:	4b17      	ldr	r3, [pc, #92]	; (8012194 <tcp_kill_state+0x8c>)
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	617b      	str	r3, [r7, #20]
 801213a:	e017      	b.n	801216c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801213c:	697b      	ldr	r3, [r7, #20]
 801213e:	7d1b      	ldrb	r3, [r3, #20]
 8012140:	79fa      	ldrb	r2, [r7, #7]
 8012142:	429a      	cmp	r2, r3
 8012144:	d10f      	bne.n	8012166 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012146:	4b14      	ldr	r3, [pc, #80]	; (8012198 <tcp_kill_state+0x90>)
 8012148:	681a      	ldr	r2, [r3, #0]
 801214a:	697b      	ldr	r3, [r7, #20]
 801214c:	6a1b      	ldr	r3, [r3, #32]
 801214e:	1ad3      	subs	r3, r2, r3
 8012150:	68fa      	ldr	r2, [r7, #12]
 8012152:	429a      	cmp	r2, r3
 8012154:	d807      	bhi.n	8012166 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8012156:	4b10      	ldr	r3, [pc, #64]	; (8012198 <tcp_kill_state+0x90>)
 8012158:	681a      	ldr	r2, [r3, #0]
 801215a:	697b      	ldr	r3, [r7, #20]
 801215c:	6a1b      	ldr	r3, [r3, #32]
 801215e:	1ad3      	subs	r3, r2, r3
 8012160:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8012162:	697b      	ldr	r3, [r7, #20]
 8012164:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012166:	697b      	ldr	r3, [r7, #20]
 8012168:	68db      	ldr	r3, [r3, #12]
 801216a:	617b      	str	r3, [r7, #20]
 801216c:	697b      	ldr	r3, [r7, #20]
 801216e:	2b00      	cmp	r3, #0
 8012170:	d1e4      	bne.n	801213c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8012172:	693b      	ldr	r3, [r7, #16]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d003      	beq.n	8012180 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8012178:	2100      	movs	r1, #0
 801217a:	6938      	ldr	r0, [r7, #16]
 801217c:	f7ff f874 	bl	8011268 <tcp_abandon>
  }
}
 8012180:	bf00      	nop
 8012182:	3718      	adds	r7, #24
 8012184:	46bd      	mov	sp, r7
 8012186:	bd80      	pop	{r7, pc}
 8012188:	0801cef0 	.word	0x0801cef0
 801218c:	0801d47c 	.word	0x0801d47c
 8012190:	0801cf34 	.word	0x0801cf34
 8012194:	2000dd44 	.word	0x2000dd44
 8012198:	2000dd48 	.word	0x2000dd48

0801219c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801219c:	b580      	push	{r7, lr}
 801219e:	b084      	sub	sp, #16
 80121a0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80121a2:	2300      	movs	r3, #0
 80121a4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80121a6:	2300      	movs	r3, #0
 80121a8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80121aa:	4b12      	ldr	r3, [pc, #72]	; (80121f4 <tcp_kill_timewait+0x58>)
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	60fb      	str	r3, [r7, #12]
 80121b0:	e012      	b.n	80121d8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80121b2:	4b11      	ldr	r3, [pc, #68]	; (80121f8 <tcp_kill_timewait+0x5c>)
 80121b4:	681a      	ldr	r2, [r3, #0]
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	6a1b      	ldr	r3, [r3, #32]
 80121ba:	1ad3      	subs	r3, r2, r3
 80121bc:	687a      	ldr	r2, [r7, #4]
 80121be:	429a      	cmp	r2, r3
 80121c0:	d807      	bhi.n	80121d2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80121c2:	4b0d      	ldr	r3, [pc, #52]	; (80121f8 <tcp_kill_timewait+0x5c>)
 80121c4:	681a      	ldr	r2, [r3, #0]
 80121c6:	68fb      	ldr	r3, [r7, #12]
 80121c8:	6a1b      	ldr	r3, [r3, #32]
 80121ca:	1ad3      	subs	r3, r2, r3
 80121cc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80121ce:	68fb      	ldr	r3, [r7, #12]
 80121d0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	68db      	ldr	r3, [r3, #12]
 80121d6:	60fb      	str	r3, [r7, #12]
 80121d8:	68fb      	ldr	r3, [r7, #12]
 80121da:	2b00      	cmp	r3, #0
 80121dc:	d1e9      	bne.n	80121b2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80121de:	68bb      	ldr	r3, [r7, #8]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d002      	beq.n	80121ea <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80121e4:	68b8      	ldr	r0, [r7, #8]
 80121e6:	f7ff f8fd 	bl	80113e4 <tcp_abort>
  }
}
 80121ea:	bf00      	nop
 80121ec:	3710      	adds	r7, #16
 80121ee:	46bd      	mov	sp, r7
 80121f0:	bd80      	pop	{r7, pc}
 80121f2:	bf00      	nop
 80121f4:	2000dd54 	.word	0x2000dd54
 80121f8:	2000dd48 	.word	0x2000dd48

080121fc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b082      	sub	sp, #8
 8012200:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8012202:	4b10      	ldr	r3, [pc, #64]	; (8012244 <tcp_handle_closepend+0x48>)
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012208:	e014      	b.n	8012234 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	68db      	ldr	r3, [r3, #12]
 801220e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	8b5b      	ldrh	r3, [r3, #26]
 8012214:	f003 0308 	and.w	r3, r3, #8
 8012218:	2b00      	cmp	r3, #0
 801221a:	d009      	beq.n	8012230 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	8b5b      	ldrh	r3, [r3, #26]
 8012220:	f023 0308 	bic.w	r3, r3, #8
 8012224:	b29a      	uxth	r2, r3
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801222a:	6878      	ldr	r0, [r7, #4]
 801222c:	f7fe ff2a 	bl	8011084 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8012230:	683b      	ldr	r3, [r7, #0]
 8012232:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	2b00      	cmp	r3, #0
 8012238:	d1e7      	bne.n	801220a <tcp_handle_closepend+0xe>
  }
}
 801223a:	bf00      	nop
 801223c:	bf00      	nop
 801223e:	3708      	adds	r7, #8
 8012240:	46bd      	mov	sp, r7
 8012242:	bd80      	pop	{r7, pc}
 8012244:	2000dd44 	.word	0x2000dd44

08012248 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8012248:	b580      	push	{r7, lr}
 801224a:	b084      	sub	sp, #16
 801224c:	af00      	add	r7, sp, #0
 801224e:	4603      	mov	r3, r0
 8012250:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012252:	2001      	movs	r0, #1
 8012254:	f7fd fc34 	bl	800fac0 <memp_malloc>
 8012258:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801225a:	68fb      	ldr	r3, [r7, #12]
 801225c:	2b00      	cmp	r3, #0
 801225e:	d126      	bne.n	80122ae <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8012260:	f7ff ffcc 	bl	80121fc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8012264:	f7ff ff9a 	bl	801219c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012268:	2001      	movs	r0, #1
 801226a:	f7fd fc29 	bl	800fac0 <memp_malloc>
 801226e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8012270:	68fb      	ldr	r3, [r7, #12]
 8012272:	2b00      	cmp	r3, #0
 8012274:	d11b      	bne.n	80122ae <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8012276:	2009      	movs	r0, #9
 8012278:	f7ff ff46 	bl	8012108 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801227c:	2001      	movs	r0, #1
 801227e:	f7fd fc1f 	bl	800fac0 <memp_malloc>
 8012282:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d111      	bne.n	80122ae <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801228a:	2008      	movs	r0, #8
 801228c:	f7ff ff3c 	bl	8012108 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012290:	2001      	movs	r0, #1
 8012292:	f7fd fc15 	bl	800fac0 <memp_malloc>
 8012296:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	2b00      	cmp	r3, #0
 801229c:	d107      	bne.n	80122ae <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801229e:	79fb      	ldrb	r3, [r7, #7]
 80122a0:	4618      	mov	r0, r3
 80122a2:	f7ff fee3 	bl	801206c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80122a6:	2001      	movs	r0, #1
 80122a8:	f7fd fc0a 	bl	800fac0 <memp_malloc>
 80122ac:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d03f      	beq.n	8012334 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80122b4:	229c      	movs	r2, #156	; 0x9c
 80122b6:	2100      	movs	r1, #0
 80122b8:	68f8      	ldr	r0, [r7, #12]
 80122ba:	f008 f953 	bl	801a564 <memset>
    pcb->prio = prio;
 80122be:	68fb      	ldr	r3, [r7, #12]
 80122c0:	79fa      	ldrb	r2, [r7, #7]
 80122c2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80122c4:	68fb      	ldr	r3, [r7, #12]
 80122c6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80122ca:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80122ce:	68fb      	ldr	r3, [r7, #12]
 80122d0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80122d4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80122da:	68fb      	ldr	r3, [r7, #12]
 80122dc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80122de:	68fb      	ldr	r3, [r7, #12]
 80122e0:	22ff      	movs	r2, #255	; 0xff
 80122e2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80122e4:	68fb      	ldr	r3, [r7, #12]
 80122e6:	f44f 7206 	mov.w	r2, #536	; 0x218
 80122ea:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80122ec:	68fb      	ldr	r3, [r7, #12]
 80122ee:	2206      	movs	r2, #6
 80122f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	2206      	movs	r2, #6
 80122f8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80122fa:	68fb      	ldr	r3, [r7, #12]
 80122fc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012300:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8012302:	68fb      	ldr	r3, [r7, #12]
 8012304:	2201      	movs	r2, #1
 8012306:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801230a:	4b0d      	ldr	r3, [pc, #52]	; (8012340 <tcp_alloc+0xf8>)
 801230c:	681a      	ldr	r2, [r3, #0]
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8012312:	4b0c      	ldr	r3, [pc, #48]	; (8012344 <tcp_alloc+0xfc>)
 8012314:	781a      	ldrb	r2, [r3, #0]
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8012320:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8012324:	68fb      	ldr	r3, [r7, #12]
 8012326:	4a08      	ldr	r2, [pc, #32]	; (8012348 <tcp_alloc+0x100>)
 8012328:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801232c:	68fb      	ldr	r3, [r7, #12]
 801232e:	4a07      	ldr	r2, [pc, #28]	; (801234c <tcp_alloc+0x104>)
 8012330:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8012334:	68fb      	ldr	r3, [r7, #12]
}
 8012336:	4618      	mov	r0, r3
 8012338:	3710      	adds	r7, #16
 801233a:	46bd      	mov	sp, r7
 801233c:	bd80      	pop	{r7, pc}
 801233e:	bf00      	nop
 8012340:	2000dd48 	.word	0x2000dd48
 8012344:	20006992 	.word	0x20006992
 8012348:	08012001 	.word	0x08012001
 801234c:	006ddd00 	.word	0x006ddd00

08012350 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8012350:	b580      	push	{r7, lr}
 8012352:	b084      	sub	sp, #16
 8012354:	af00      	add	r7, sp, #0
 8012356:	4603      	mov	r3, r0
 8012358:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801235a:	2040      	movs	r0, #64	; 0x40
 801235c:	f7ff ff74 	bl	8012248 <tcp_alloc>
 8012360:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8012362:	68fb      	ldr	r3, [r7, #12]
}
 8012364:	4618      	mov	r0, r3
 8012366:	3710      	adds	r7, #16
 8012368:	46bd      	mov	sp, r7
 801236a:	bd80      	pop	{r7, pc}

0801236c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801236c:	b480      	push	{r7}
 801236e:	b083      	sub	sp, #12
 8012370:	af00      	add	r7, sp, #0
 8012372:	6078      	str	r0, [r7, #4]
 8012374:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	2b00      	cmp	r3, #0
 801237a:	d002      	beq.n	8012382 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	683a      	ldr	r2, [r7, #0]
 8012380:	611a      	str	r2, [r3, #16]
  }
}
 8012382:	bf00      	nop
 8012384:	370c      	adds	r7, #12
 8012386:	46bd      	mov	sp, r7
 8012388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801238c:	4770      	bx	lr
	...

08012390 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b082      	sub	sp, #8
 8012394:	af00      	add	r7, sp, #0
 8012396:	6078      	str	r0, [r7, #4]
 8012398:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	2b00      	cmp	r3, #0
 801239e:	d00e      	beq.n	80123be <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80123a0:	687b      	ldr	r3, [r7, #4]
 80123a2:	7d1b      	ldrb	r3, [r3, #20]
 80123a4:	2b01      	cmp	r3, #1
 80123a6:	d106      	bne.n	80123b6 <tcp_recv+0x26>
 80123a8:	4b07      	ldr	r3, [pc, #28]	; (80123c8 <tcp_recv+0x38>)
 80123aa:	f240 72df 	movw	r2, #2015	; 0x7df
 80123ae:	4907      	ldr	r1, [pc, #28]	; (80123cc <tcp_recv+0x3c>)
 80123b0:	4807      	ldr	r0, [pc, #28]	; (80123d0 <tcp_recv+0x40>)
 80123b2:	f008 f989 	bl	801a6c8 <iprintf>
    pcb->recv = recv;
 80123b6:	687b      	ldr	r3, [r7, #4]
 80123b8:	683a      	ldr	r2, [r7, #0]
 80123ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 80123be:	bf00      	nop
 80123c0:	3708      	adds	r7, #8
 80123c2:	46bd      	mov	sp, r7
 80123c4:	bd80      	pop	{r7, pc}
 80123c6:	bf00      	nop
 80123c8:	0801cef0 	.word	0x0801cef0
 80123cc:	0801d48c 	.word	0x0801d48c
 80123d0:	0801cf34 	.word	0x0801cf34

080123d4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80123d4:	b580      	push	{r7, lr}
 80123d6:	b082      	sub	sp, #8
 80123d8:	af00      	add	r7, sp, #0
 80123da:	6078      	str	r0, [r7, #4]
 80123dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d00e      	beq.n	8012402 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80123e4:	687b      	ldr	r3, [r7, #4]
 80123e6:	7d1b      	ldrb	r3, [r3, #20]
 80123e8:	2b01      	cmp	r3, #1
 80123ea:	d106      	bne.n	80123fa <tcp_sent+0x26>
 80123ec:	4b07      	ldr	r3, [pc, #28]	; (801240c <tcp_sent+0x38>)
 80123ee:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80123f2:	4907      	ldr	r1, [pc, #28]	; (8012410 <tcp_sent+0x3c>)
 80123f4:	4807      	ldr	r0, [pc, #28]	; (8012414 <tcp_sent+0x40>)
 80123f6:	f008 f967 	bl	801a6c8 <iprintf>
    pcb->sent = sent;
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	683a      	ldr	r2, [r7, #0]
 80123fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 8012402:	bf00      	nop
 8012404:	3708      	adds	r7, #8
 8012406:	46bd      	mov	sp, r7
 8012408:	bd80      	pop	{r7, pc}
 801240a:	bf00      	nop
 801240c:	0801cef0 	.word	0x0801cef0
 8012410:	0801d4b4 	.word	0x0801d4b4
 8012414:	0801cf34 	.word	0x0801cf34

08012418 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8012418:	b580      	push	{r7, lr}
 801241a:	b082      	sub	sp, #8
 801241c:	af00      	add	r7, sp, #0
 801241e:	6078      	str	r0, [r7, #4]
 8012420:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d00e      	beq.n	8012446 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	7d1b      	ldrb	r3, [r3, #20]
 801242c:	2b01      	cmp	r3, #1
 801242e:	d106      	bne.n	801243e <tcp_err+0x26>
 8012430:	4b07      	ldr	r3, [pc, #28]	; (8012450 <tcp_err+0x38>)
 8012432:	f640 020d 	movw	r2, #2061	; 0x80d
 8012436:	4907      	ldr	r1, [pc, #28]	; (8012454 <tcp_err+0x3c>)
 8012438:	4807      	ldr	r0, [pc, #28]	; (8012458 <tcp_err+0x40>)
 801243a:	f008 f945 	bl	801a6c8 <iprintf>
    pcb->errf = err;
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	683a      	ldr	r2, [r7, #0]
 8012442:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8012446:	bf00      	nop
 8012448:	3708      	adds	r7, #8
 801244a:	46bd      	mov	sp, r7
 801244c:	bd80      	pop	{r7, pc}
 801244e:	bf00      	nop
 8012450:	0801cef0 	.word	0x0801cef0
 8012454:	0801d4dc 	.word	0x0801d4dc
 8012458:	0801cf34 	.word	0x0801cf34

0801245c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801245c:	b480      	push	{r7}
 801245e:	b085      	sub	sp, #20
 8012460:	af00      	add	r7, sp, #0
 8012462:	6078      	str	r0, [r7, #4]
 8012464:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d008      	beq.n	801247e <tcp_accept+0x22>
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	7d1b      	ldrb	r3, [r3, #20]
 8012470:	2b01      	cmp	r3, #1
 8012472:	d104      	bne.n	801247e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8012478:	68fb      	ldr	r3, [r7, #12]
 801247a:	683a      	ldr	r2, [r7, #0]
 801247c:	619a      	str	r2, [r3, #24]
  }
}
 801247e:	bf00      	nop
 8012480:	3714      	adds	r7, #20
 8012482:	46bd      	mov	sp, r7
 8012484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012488:	4770      	bx	lr
	...

0801248c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801248c:	b580      	push	{r7, lr}
 801248e:	b084      	sub	sp, #16
 8012490:	af00      	add	r7, sp, #0
 8012492:	60f8      	str	r0, [r7, #12]
 8012494:	60b9      	str	r1, [r7, #8]
 8012496:	4613      	mov	r3, r2
 8012498:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d107      	bne.n	80124b0 <tcp_poll+0x24>
 80124a0:	4b0e      	ldr	r3, [pc, #56]	; (80124dc <tcp_poll+0x50>)
 80124a2:	f640 023d 	movw	r2, #2109	; 0x83d
 80124a6:	490e      	ldr	r1, [pc, #56]	; (80124e0 <tcp_poll+0x54>)
 80124a8:	480e      	ldr	r0, [pc, #56]	; (80124e4 <tcp_poll+0x58>)
 80124aa:	f008 f90d 	bl	801a6c8 <iprintf>
 80124ae:	e011      	b.n	80124d4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	7d1b      	ldrb	r3, [r3, #20]
 80124b4:	2b01      	cmp	r3, #1
 80124b6:	d106      	bne.n	80124c6 <tcp_poll+0x3a>
 80124b8:	4b08      	ldr	r3, [pc, #32]	; (80124dc <tcp_poll+0x50>)
 80124ba:	f640 023e 	movw	r2, #2110	; 0x83e
 80124be:	490a      	ldr	r1, [pc, #40]	; (80124e8 <tcp_poll+0x5c>)
 80124c0:	4808      	ldr	r0, [pc, #32]	; (80124e4 <tcp_poll+0x58>)
 80124c2:	f008 f901 	bl	801a6c8 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	68ba      	ldr	r2, [r7, #8]
 80124ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	79fa      	ldrb	r2, [r7, #7]
 80124d2:	775a      	strb	r2, [r3, #29]
}
 80124d4:	3710      	adds	r7, #16
 80124d6:	46bd      	mov	sp, r7
 80124d8:	bd80      	pop	{r7, pc}
 80124da:	bf00      	nop
 80124dc:	0801cef0 	.word	0x0801cef0
 80124e0:	0801d504 	.word	0x0801d504
 80124e4:	0801cf34 	.word	0x0801cf34
 80124e8:	0801d51c 	.word	0x0801d51c

080124ec <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80124ec:	b580      	push	{r7, lr}
 80124ee:	b082      	sub	sp, #8
 80124f0:	af00      	add	r7, sp, #0
 80124f2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	d107      	bne.n	801250a <tcp_pcb_purge+0x1e>
 80124fa:	4b21      	ldr	r3, [pc, #132]	; (8012580 <tcp_pcb_purge+0x94>)
 80124fc:	f640 0251 	movw	r2, #2129	; 0x851
 8012500:	4920      	ldr	r1, [pc, #128]	; (8012584 <tcp_pcb_purge+0x98>)
 8012502:	4821      	ldr	r0, [pc, #132]	; (8012588 <tcp_pcb_purge+0x9c>)
 8012504:	f008 f8e0 	bl	801a6c8 <iprintf>
 8012508:	e037      	b.n	801257a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	7d1b      	ldrb	r3, [r3, #20]
 801250e:	2b00      	cmp	r3, #0
 8012510:	d033      	beq.n	801257a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8012516:	2b0a      	cmp	r3, #10
 8012518:	d02f      	beq.n	801257a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801251a:	687b      	ldr	r3, [r7, #4]
 801251c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801251e:	2b01      	cmp	r3, #1
 8012520:	d02b      	beq.n	801257a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012526:	2b00      	cmp	r3, #0
 8012528:	d007      	beq.n	801253a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801252a:	687b      	ldr	r3, [r7, #4]
 801252c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801252e:	4618      	mov	r0, r3
 8012530:	f7fe f958 	bl	80107e4 <pbuf_free>
      pcb->refused_data = NULL;
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	2200      	movs	r2, #0
 8012538:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801253e:	2b00      	cmp	r3, #0
 8012540:	d002      	beq.n	8012548 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8012542:	6878      	ldr	r0, [r7, #4]
 8012544:	f000 f986 	bl	8012854 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8012548:	687b      	ldr	r3, [r7, #4]
 801254a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801254e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012554:	4618      	mov	r0, r3
 8012556:	f7ff fcf9 	bl	8011f4c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801255e:	4618      	mov	r0, r3
 8012560:	f7ff fcf4 	bl	8011f4c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8012564:	687b      	ldr	r3, [r7, #4]
 8012566:	2200      	movs	r2, #0
 8012568:	66da      	str	r2, [r3, #108]	; 0x6c
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	2200      	movs	r2, #0
 8012576:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801257a:	3708      	adds	r7, #8
 801257c:	46bd      	mov	sp, r7
 801257e:	bd80      	pop	{r7, pc}
 8012580:	0801cef0 	.word	0x0801cef0
 8012584:	0801d53c 	.word	0x0801d53c
 8012588:	0801cf34 	.word	0x0801cf34

0801258c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801258c:	b580      	push	{r7, lr}
 801258e:	b084      	sub	sp, #16
 8012590:	af00      	add	r7, sp, #0
 8012592:	6078      	str	r0, [r7, #4]
 8012594:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8012596:	683b      	ldr	r3, [r7, #0]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d106      	bne.n	80125aa <tcp_pcb_remove+0x1e>
 801259c:	4b3e      	ldr	r3, [pc, #248]	; (8012698 <tcp_pcb_remove+0x10c>)
 801259e:	f640 0283 	movw	r2, #2179	; 0x883
 80125a2:	493e      	ldr	r1, [pc, #248]	; (801269c <tcp_pcb_remove+0x110>)
 80125a4:	483e      	ldr	r0, [pc, #248]	; (80126a0 <tcp_pcb_remove+0x114>)
 80125a6:	f008 f88f 	bl	801a6c8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d106      	bne.n	80125be <tcp_pcb_remove+0x32>
 80125b0:	4b39      	ldr	r3, [pc, #228]	; (8012698 <tcp_pcb_remove+0x10c>)
 80125b2:	f640 0284 	movw	r2, #2180	; 0x884
 80125b6:	493b      	ldr	r1, [pc, #236]	; (80126a4 <tcp_pcb_remove+0x118>)
 80125b8:	4839      	ldr	r0, [pc, #228]	; (80126a0 <tcp_pcb_remove+0x114>)
 80125ba:	f008 f885 	bl	801a6c8 <iprintf>

  TCP_RMV(pcblist, pcb);
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	681b      	ldr	r3, [r3, #0]
 80125c2:	683a      	ldr	r2, [r7, #0]
 80125c4:	429a      	cmp	r2, r3
 80125c6:	d105      	bne.n	80125d4 <tcp_pcb_remove+0x48>
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	68da      	ldr	r2, [r3, #12]
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	601a      	str	r2, [r3, #0]
 80125d2:	e013      	b.n	80125fc <tcp_pcb_remove+0x70>
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	681b      	ldr	r3, [r3, #0]
 80125d8:	60fb      	str	r3, [r7, #12]
 80125da:	e00c      	b.n	80125f6 <tcp_pcb_remove+0x6a>
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	68db      	ldr	r3, [r3, #12]
 80125e0:	683a      	ldr	r2, [r7, #0]
 80125e2:	429a      	cmp	r2, r3
 80125e4:	d104      	bne.n	80125f0 <tcp_pcb_remove+0x64>
 80125e6:	683b      	ldr	r3, [r7, #0]
 80125e8:	68da      	ldr	r2, [r3, #12]
 80125ea:	68fb      	ldr	r3, [r7, #12]
 80125ec:	60da      	str	r2, [r3, #12]
 80125ee:	e005      	b.n	80125fc <tcp_pcb_remove+0x70>
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	68db      	ldr	r3, [r3, #12]
 80125f4:	60fb      	str	r3, [r7, #12]
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d1ef      	bne.n	80125dc <tcp_pcb_remove+0x50>
 80125fc:	683b      	ldr	r3, [r7, #0]
 80125fe:	2200      	movs	r2, #0
 8012600:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8012602:	6838      	ldr	r0, [r7, #0]
 8012604:	f7ff ff72 	bl	80124ec <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8012608:	683b      	ldr	r3, [r7, #0]
 801260a:	7d1b      	ldrb	r3, [r3, #20]
 801260c:	2b0a      	cmp	r3, #10
 801260e:	d013      	beq.n	8012638 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8012610:	683b      	ldr	r3, [r7, #0]
 8012612:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8012614:	2b01      	cmp	r3, #1
 8012616:	d00f      	beq.n	8012638 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8012618:	683b      	ldr	r3, [r7, #0]
 801261a:	8b5b      	ldrh	r3, [r3, #26]
 801261c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8012620:	2b00      	cmp	r3, #0
 8012622:	d009      	beq.n	8012638 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8012624:	683b      	ldr	r3, [r7, #0]
 8012626:	8b5b      	ldrh	r3, [r3, #26]
 8012628:	f043 0302 	orr.w	r3, r3, #2
 801262c:	b29a      	uxth	r2, r3
 801262e:	683b      	ldr	r3, [r7, #0]
 8012630:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012632:	6838      	ldr	r0, [r7, #0]
 8012634:	f003 fbc2 	bl	8015dbc <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8012638:	683b      	ldr	r3, [r7, #0]
 801263a:	7d1b      	ldrb	r3, [r3, #20]
 801263c:	2b01      	cmp	r3, #1
 801263e:	d020      	beq.n	8012682 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8012640:	683b      	ldr	r3, [r7, #0]
 8012642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012644:	2b00      	cmp	r3, #0
 8012646:	d006      	beq.n	8012656 <tcp_pcb_remove+0xca>
 8012648:	4b13      	ldr	r3, [pc, #76]	; (8012698 <tcp_pcb_remove+0x10c>)
 801264a:	f640 0293 	movw	r2, #2195	; 0x893
 801264e:	4916      	ldr	r1, [pc, #88]	; (80126a8 <tcp_pcb_remove+0x11c>)
 8012650:	4813      	ldr	r0, [pc, #76]	; (80126a0 <tcp_pcb_remove+0x114>)
 8012652:	f008 f839 	bl	801a6c8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8012656:	683b      	ldr	r3, [r7, #0]
 8012658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801265a:	2b00      	cmp	r3, #0
 801265c:	d006      	beq.n	801266c <tcp_pcb_remove+0xe0>
 801265e:	4b0e      	ldr	r3, [pc, #56]	; (8012698 <tcp_pcb_remove+0x10c>)
 8012660:	f640 0294 	movw	r2, #2196	; 0x894
 8012664:	4911      	ldr	r1, [pc, #68]	; (80126ac <tcp_pcb_remove+0x120>)
 8012666:	480e      	ldr	r0, [pc, #56]	; (80126a0 <tcp_pcb_remove+0x114>)
 8012668:	f008 f82e 	bl	801a6c8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801266c:	683b      	ldr	r3, [r7, #0]
 801266e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012670:	2b00      	cmp	r3, #0
 8012672:	d006      	beq.n	8012682 <tcp_pcb_remove+0xf6>
 8012674:	4b08      	ldr	r3, [pc, #32]	; (8012698 <tcp_pcb_remove+0x10c>)
 8012676:	f640 0296 	movw	r2, #2198	; 0x896
 801267a:	490d      	ldr	r1, [pc, #52]	; (80126b0 <tcp_pcb_remove+0x124>)
 801267c:	4808      	ldr	r0, [pc, #32]	; (80126a0 <tcp_pcb_remove+0x114>)
 801267e:	f008 f823 	bl	801a6c8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8012682:	683b      	ldr	r3, [r7, #0]
 8012684:	2200      	movs	r2, #0
 8012686:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8012688:	683b      	ldr	r3, [r7, #0]
 801268a:	2200      	movs	r2, #0
 801268c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801268e:	bf00      	nop
 8012690:	3710      	adds	r7, #16
 8012692:	46bd      	mov	sp, r7
 8012694:	bd80      	pop	{r7, pc}
 8012696:	bf00      	nop
 8012698:	0801cef0 	.word	0x0801cef0
 801269c:	0801d558 	.word	0x0801d558
 80126a0:	0801cf34 	.word	0x0801cf34
 80126a4:	0801d574 	.word	0x0801d574
 80126a8:	0801d594 	.word	0x0801d594
 80126ac:	0801d5ac 	.word	0x0801d5ac
 80126b0:	0801d5c8 	.word	0x0801d5c8

080126b4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 80126b4:	b580      	push	{r7, lr}
 80126b6:	b082      	sub	sp, #8
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	2b00      	cmp	r3, #0
 80126c0:	d106      	bne.n	80126d0 <tcp_next_iss+0x1c>
 80126c2:	4b0a      	ldr	r3, [pc, #40]	; (80126ec <tcp_next_iss+0x38>)
 80126c4:	f640 02af 	movw	r2, #2223	; 0x8af
 80126c8:	4909      	ldr	r1, [pc, #36]	; (80126f0 <tcp_next_iss+0x3c>)
 80126ca:	480a      	ldr	r0, [pc, #40]	; (80126f4 <tcp_next_iss+0x40>)
 80126cc:	f007 fffc 	bl	801a6c8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80126d0:	4b09      	ldr	r3, [pc, #36]	; (80126f8 <tcp_next_iss+0x44>)
 80126d2:	681a      	ldr	r2, [r3, #0]
 80126d4:	4b09      	ldr	r3, [pc, #36]	; (80126fc <tcp_next_iss+0x48>)
 80126d6:	681b      	ldr	r3, [r3, #0]
 80126d8:	4413      	add	r3, r2
 80126da:	4a07      	ldr	r2, [pc, #28]	; (80126f8 <tcp_next_iss+0x44>)
 80126dc:	6013      	str	r3, [r2, #0]
  return iss;
 80126de:	4b06      	ldr	r3, [pc, #24]	; (80126f8 <tcp_next_iss+0x44>)
 80126e0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80126e2:	4618      	mov	r0, r3
 80126e4:	3708      	adds	r7, #8
 80126e6:	46bd      	mov	sp, r7
 80126e8:	bd80      	pop	{r7, pc}
 80126ea:	bf00      	nop
 80126ec:	0801cef0 	.word	0x0801cef0
 80126f0:	0801d5e0 	.word	0x0801d5e0
 80126f4:	0801cf34 	.word	0x0801cf34
 80126f8:	200000a8 	.word	0x200000a8
 80126fc:	2000dd48 	.word	0x2000dd48

08012700 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8012700:	b580      	push	{r7, lr}
 8012702:	b086      	sub	sp, #24
 8012704:	af00      	add	r7, sp, #0
 8012706:	4603      	mov	r3, r0
 8012708:	60b9      	str	r1, [r7, #8]
 801270a:	607a      	str	r2, [r7, #4]
 801270c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	2b00      	cmp	r3, #0
 8012712:	d106      	bne.n	8012722 <tcp_eff_send_mss_netif+0x22>
 8012714:	4b14      	ldr	r3, [pc, #80]	; (8012768 <tcp_eff_send_mss_netif+0x68>)
 8012716:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801271a:	4914      	ldr	r1, [pc, #80]	; (801276c <tcp_eff_send_mss_netif+0x6c>)
 801271c:	4814      	ldr	r0, [pc, #80]	; (8012770 <tcp_eff_send_mss_netif+0x70>)
 801271e:	f007 ffd3 	bl	801a6c8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8012722:	68bb      	ldr	r3, [r7, #8]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d101      	bne.n	801272c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8012728:	89fb      	ldrh	r3, [r7, #14]
 801272a:	e019      	b.n	8012760 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801272c:	68bb      	ldr	r3, [r7, #8]
 801272e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012730:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8012732:	8afb      	ldrh	r3, [r7, #22]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d012      	beq.n	801275e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8012738:	2328      	movs	r3, #40	; 0x28
 801273a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801273c:	8afa      	ldrh	r2, [r7, #22]
 801273e:	8abb      	ldrh	r3, [r7, #20]
 8012740:	429a      	cmp	r2, r3
 8012742:	d904      	bls.n	801274e <tcp_eff_send_mss_netif+0x4e>
 8012744:	8afa      	ldrh	r2, [r7, #22]
 8012746:	8abb      	ldrh	r3, [r7, #20]
 8012748:	1ad3      	subs	r3, r2, r3
 801274a:	b29b      	uxth	r3, r3
 801274c:	e000      	b.n	8012750 <tcp_eff_send_mss_netif+0x50>
 801274e:	2300      	movs	r3, #0
 8012750:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8012752:	8a7a      	ldrh	r2, [r7, #18]
 8012754:	89fb      	ldrh	r3, [r7, #14]
 8012756:	4293      	cmp	r3, r2
 8012758:	bf28      	it	cs
 801275a:	4613      	movcs	r3, r2
 801275c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801275e:	89fb      	ldrh	r3, [r7, #14]
}
 8012760:	4618      	mov	r0, r3
 8012762:	3718      	adds	r7, #24
 8012764:	46bd      	mov	sp, r7
 8012766:	bd80      	pop	{r7, pc}
 8012768:	0801cef0 	.word	0x0801cef0
 801276c:	0801d5fc 	.word	0x0801d5fc
 8012770:	0801cf34 	.word	0x0801cf34

08012774 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8012774:	b580      	push	{r7, lr}
 8012776:	b084      	sub	sp, #16
 8012778:	af00      	add	r7, sp, #0
 801277a:	6078      	str	r0, [r7, #4]
 801277c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801277e:	683b      	ldr	r3, [r7, #0]
 8012780:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8012782:	687b      	ldr	r3, [r7, #4]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d119      	bne.n	80127bc <tcp_netif_ip_addr_changed_pcblist+0x48>
 8012788:	4b10      	ldr	r3, [pc, #64]	; (80127cc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801278a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801278e:	4910      	ldr	r1, [pc, #64]	; (80127d0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8012790:	4810      	ldr	r0, [pc, #64]	; (80127d4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8012792:	f007 ff99 	bl	801a6c8 <iprintf>

  while (pcb != NULL) {
 8012796:	e011      	b.n	80127bc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012798:	68fb      	ldr	r3, [r7, #12]
 801279a:	681a      	ldr	r2, [r3, #0]
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	429a      	cmp	r2, r3
 80127a2:	d108      	bne.n	80127b6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 80127a4:	68fb      	ldr	r3, [r7, #12]
 80127a6:	68db      	ldr	r3, [r3, #12]
 80127a8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 80127aa:	68f8      	ldr	r0, [r7, #12]
 80127ac:	f7fe fe1a 	bl	80113e4 <tcp_abort>
      pcb = next;
 80127b0:	68bb      	ldr	r3, [r7, #8]
 80127b2:	60fb      	str	r3, [r7, #12]
 80127b4:	e002      	b.n	80127bc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 80127b6:	68fb      	ldr	r3, [r7, #12]
 80127b8:	68db      	ldr	r3, [r3, #12]
 80127ba:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80127bc:	68fb      	ldr	r3, [r7, #12]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d1ea      	bne.n	8012798 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80127c2:	bf00      	nop
 80127c4:	bf00      	nop
 80127c6:	3710      	adds	r7, #16
 80127c8:	46bd      	mov	sp, r7
 80127ca:	bd80      	pop	{r7, pc}
 80127cc:	0801cef0 	.word	0x0801cef0
 80127d0:	0801d624 	.word	0x0801d624
 80127d4:	0801cf34 	.word	0x0801cf34

080127d8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	b084      	sub	sp, #16
 80127dc:	af00      	add	r7, sp, #0
 80127de:	6078      	str	r0, [r7, #4]
 80127e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d02a      	beq.n	801283e <tcp_netif_ip_addr_changed+0x66>
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d026      	beq.n	801283e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80127f0:	4b15      	ldr	r3, [pc, #84]	; (8012848 <tcp_netif_ip_addr_changed+0x70>)
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	4619      	mov	r1, r3
 80127f6:	6878      	ldr	r0, [r7, #4]
 80127f8:	f7ff ffbc 	bl	8012774 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80127fc:	4b13      	ldr	r3, [pc, #76]	; (801284c <tcp_netif_ip_addr_changed+0x74>)
 80127fe:	681b      	ldr	r3, [r3, #0]
 8012800:	4619      	mov	r1, r3
 8012802:	6878      	ldr	r0, [r7, #4]
 8012804:	f7ff ffb6 	bl	8012774 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8012808:	683b      	ldr	r3, [r7, #0]
 801280a:	2b00      	cmp	r3, #0
 801280c:	d017      	beq.n	801283e <tcp_netif_ip_addr_changed+0x66>
 801280e:	683b      	ldr	r3, [r7, #0]
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	2b00      	cmp	r3, #0
 8012814:	d013      	beq.n	801283e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012816:	4b0e      	ldr	r3, [pc, #56]	; (8012850 <tcp_netif_ip_addr_changed+0x78>)
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	60fb      	str	r3, [r7, #12]
 801281c:	e00c      	b.n	8012838 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	681a      	ldr	r2, [r3, #0]
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	681b      	ldr	r3, [r3, #0]
 8012826:	429a      	cmp	r2, r3
 8012828:	d103      	bne.n	8012832 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801282a:	683b      	ldr	r3, [r7, #0]
 801282c:	681a      	ldr	r2, [r3, #0]
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012832:	68fb      	ldr	r3, [r7, #12]
 8012834:	68db      	ldr	r3, [r3, #12]
 8012836:	60fb      	str	r3, [r7, #12]
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	2b00      	cmp	r3, #0
 801283c:	d1ef      	bne.n	801281e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801283e:	bf00      	nop
 8012840:	3710      	adds	r7, #16
 8012842:	46bd      	mov	sp, r7
 8012844:	bd80      	pop	{r7, pc}
 8012846:	bf00      	nop
 8012848:	2000dd44 	.word	0x2000dd44
 801284c:	2000dd50 	.word	0x2000dd50
 8012850:	2000dd4c 	.word	0x2000dd4c

08012854 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8012854:	b580      	push	{r7, lr}
 8012856:	b082      	sub	sp, #8
 8012858:	af00      	add	r7, sp, #0
 801285a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012860:	2b00      	cmp	r3, #0
 8012862:	d007      	beq.n	8012874 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8012864:	687b      	ldr	r3, [r7, #4]
 8012866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012868:	4618      	mov	r0, r3
 801286a:	f7ff fb6f 	bl	8011f4c <tcp_segs_free>
    pcb->ooseq = NULL;
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	2200      	movs	r2, #0
 8012872:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8012874:	bf00      	nop
 8012876:	3708      	adds	r7, #8
 8012878:	46bd      	mov	sp, r7
 801287a:	bd80      	pop	{r7, pc}

0801287c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801287c:	b590      	push	{r4, r7, lr}
 801287e:	b08d      	sub	sp, #52	; 0x34
 8012880:	af04      	add	r7, sp, #16
 8012882:	6078      	str	r0, [r7, #4]
 8012884:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	2b00      	cmp	r3, #0
 801288a:	d105      	bne.n	8012898 <tcp_input+0x1c>
 801288c:	4b9b      	ldr	r3, [pc, #620]	; (8012afc <tcp_input+0x280>)
 801288e:	2283      	movs	r2, #131	; 0x83
 8012890:	499b      	ldr	r1, [pc, #620]	; (8012b00 <tcp_input+0x284>)
 8012892:	489c      	ldr	r0, [pc, #624]	; (8012b04 <tcp_input+0x288>)
 8012894:	f007 ff18 	bl	801a6c8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	685b      	ldr	r3, [r3, #4]
 801289c:	4a9a      	ldr	r2, [pc, #616]	; (8012b08 <tcp_input+0x28c>)
 801289e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	895b      	ldrh	r3, [r3, #10]
 80128a4:	2b13      	cmp	r3, #19
 80128a6:	f240 83c4 	bls.w	8013032 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80128aa:	4b98      	ldr	r3, [pc, #608]	; (8012b0c <tcp_input+0x290>)
 80128ac:	695b      	ldr	r3, [r3, #20]
 80128ae:	4a97      	ldr	r2, [pc, #604]	; (8012b0c <tcp_input+0x290>)
 80128b0:	6812      	ldr	r2, [r2, #0]
 80128b2:	4611      	mov	r1, r2
 80128b4:	4618      	mov	r0, r3
 80128b6:	f006 fbcb 	bl	8019050 <ip4_addr_isbroadcast_u32>
 80128ba:	4603      	mov	r3, r0
 80128bc:	2b00      	cmp	r3, #0
 80128be:	f040 83ba 	bne.w	8013036 <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80128c2:	4b92      	ldr	r3, [pc, #584]	; (8012b0c <tcp_input+0x290>)
 80128c4:	695b      	ldr	r3, [r3, #20]
 80128c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80128ca:	2be0      	cmp	r3, #224	; 0xe0
 80128cc:	f000 83b3 	beq.w	8013036 <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80128d0:	4b8d      	ldr	r3, [pc, #564]	; (8012b08 <tcp_input+0x28c>)
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	899b      	ldrh	r3, [r3, #12]
 80128d6:	b29b      	uxth	r3, r3
 80128d8:	4618      	mov	r0, r3
 80128da:	f7fc fc3b 	bl	800f154 <lwip_htons>
 80128de:	4603      	mov	r3, r0
 80128e0:	0b1b      	lsrs	r3, r3, #12
 80128e2:	b29b      	uxth	r3, r3
 80128e4:	b2db      	uxtb	r3, r3
 80128e6:	009b      	lsls	r3, r3, #2
 80128e8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80128ea:	7cbb      	ldrb	r3, [r7, #18]
 80128ec:	2b13      	cmp	r3, #19
 80128ee:	f240 83a4 	bls.w	801303a <tcp_input+0x7be>
 80128f2:	7cbb      	ldrb	r3, [r7, #18]
 80128f4:	b29a      	uxth	r2, r3
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	891b      	ldrh	r3, [r3, #8]
 80128fa:	429a      	cmp	r2, r3
 80128fc:	f200 839d 	bhi.w	801303a <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8012900:	7cbb      	ldrb	r3, [r7, #18]
 8012902:	b29b      	uxth	r3, r3
 8012904:	3b14      	subs	r3, #20
 8012906:	b29a      	uxth	r2, r3
 8012908:	4b81      	ldr	r3, [pc, #516]	; (8012b10 <tcp_input+0x294>)
 801290a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801290c:	4b81      	ldr	r3, [pc, #516]	; (8012b14 <tcp_input+0x298>)
 801290e:	2200      	movs	r2, #0
 8012910:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	895a      	ldrh	r2, [r3, #10]
 8012916:	7cbb      	ldrb	r3, [r7, #18]
 8012918:	b29b      	uxth	r3, r3
 801291a:	429a      	cmp	r2, r3
 801291c:	d309      	bcc.n	8012932 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801291e:	4b7c      	ldr	r3, [pc, #496]	; (8012b10 <tcp_input+0x294>)
 8012920:	881a      	ldrh	r2, [r3, #0]
 8012922:	4b7d      	ldr	r3, [pc, #500]	; (8012b18 <tcp_input+0x29c>)
 8012924:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8012926:	7cbb      	ldrb	r3, [r7, #18]
 8012928:	4619      	mov	r1, r3
 801292a:	6878      	ldr	r0, [r7, #4]
 801292c:	f7fd fed4 	bl	80106d8 <pbuf_remove_header>
 8012930:	e04e      	b.n	80129d0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8012932:	687b      	ldr	r3, [r7, #4]
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d105      	bne.n	8012946 <tcp_input+0xca>
 801293a:	4b70      	ldr	r3, [pc, #448]	; (8012afc <tcp_input+0x280>)
 801293c:	22c2      	movs	r2, #194	; 0xc2
 801293e:	4977      	ldr	r1, [pc, #476]	; (8012b1c <tcp_input+0x2a0>)
 8012940:	4870      	ldr	r0, [pc, #448]	; (8012b04 <tcp_input+0x288>)
 8012942:	f007 fec1 	bl	801a6c8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8012946:	2114      	movs	r1, #20
 8012948:	6878      	ldr	r0, [r7, #4]
 801294a:	f7fd fec5 	bl	80106d8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	895a      	ldrh	r2, [r3, #10]
 8012952:	4b71      	ldr	r3, [pc, #452]	; (8012b18 <tcp_input+0x29c>)
 8012954:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8012956:	4b6e      	ldr	r3, [pc, #440]	; (8012b10 <tcp_input+0x294>)
 8012958:	881a      	ldrh	r2, [r3, #0]
 801295a:	4b6f      	ldr	r3, [pc, #444]	; (8012b18 <tcp_input+0x29c>)
 801295c:	881b      	ldrh	r3, [r3, #0]
 801295e:	1ad3      	subs	r3, r2, r3
 8012960:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8012962:	4b6d      	ldr	r3, [pc, #436]	; (8012b18 <tcp_input+0x29c>)
 8012964:	881b      	ldrh	r3, [r3, #0]
 8012966:	4619      	mov	r1, r3
 8012968:	6878      	ldr	r0, [r7, #4]
 801296a:	f7fd feb5 	bl	80106d8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	895b      	ldrh	r3, [r3, #10]
 8012974:	8a3a      	ldrh	r2, [r7, #16]
 8012976:	429a      	cmp	r2, r3
 8012978:	f200 8361 	bhi.w	801303e <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	685b      	ldr	r3, [r3, #4]
 8012982:	4a64      	ldr	r2, [pc, #400]	; (8012b14 <tcp_input+0x298>)
 8012984:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	8a3a      	ldrh	r2, [r7, #16]
 801298c:	4611      	mov	r1, r2
 801298e:	4618      	mov	r0, r3
 8012990:	f7fd fea2 	bl	80106d8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	891a      	ldrh	r2, [r3, #8]
 8012998:	8a3b      	ldrh	r3, [r7, #16]
 801299a:	1ad3      	subs	r3, r2, r3
 801299c:	b29a      	uxth	r2, r3
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	895b      	ldrh	r3, [r3, #10]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d005      	beq.n	80129b6 <tcp_input+0x13a>
 80129aa:	4b54      	ldr	r3, [pc, #336]	; (8012afc <tcp_input+0x280>)
 80129ac:	22df      	movs	r2, #223	; 0xdf
 80129ae:	495c      	ldr	r1, [pc, #368]	; (8012b20 <tcp_input+0x2a4>)
 80129b0:	4854      	ldr	r0, [pc, #336]	; (8012b04 <tcp_input+0x288>)
 80129b2:	f007 fe89 	bl	801a6c8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80129b6:	687b      	ldr	r3, [r7, #4]
 80129b8:	891a      	ldrh	r2, [r3, #8]
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	891b      	ldrh	r3, [r3, #8]
 80129c0:	429a      	cmp	r2, r3
 80129c2:	d005      	beq.n	80129d0 <tcp_input+0x154>
 80129c4:	4b4d      	ldr	r3, [pc, #308]	; (8012afc <tcp_input+0x280>)
 80129c6:	22e0      	movs	r2, #224	; 0xe0
 80129c8:	4956      	ldr	r1, [pc, #344]	; (8012b24 <tcp_input+0x2a8>)
 80129ca:	484e      	ldr	r0, [pc, #312]	; (8012b04 <tcp_input+0x288>)
 80129cc:	f007 fe7c 	bl	801a6c8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80129d0:	4b4d      	ldr	r3, [pc, #308]	; (8012b08 <tcp_input+0x28c>)
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	881b      	ldrh	r3, [r3, #0]
 80129d6:	b29b      	uxth	r3, r3
 80129d8:	4a4b      	ldr	r2, [pc, #300]	; (8012b08 <tcp_input+0x28c>)
 80129da:	6814      	ldr	r4, [r2, #0]
 80129dc:	4618      	mov	r0, r3
 80129de:	f7fc fbb9 	bl	800f154 <lwip_htons>
 80129e2:	4603      	mov	r3, r0
 80129e4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80129e6:	4b48      	ldr	r3, [pc, #288]	; (8012b08 <tcp_input+0x28c>)
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	885b      	ldrh	r3, [r3, #2]
 80129ec:	b29b      	uxth	r3, r3
 80129ee:	4a46      	ldr	r2, [pc, #280]	; (8012b08 <tcp_input+0x28c>)
 80129f0:	6814      	ldr	r4, [r2, #0]
 80129f2:	4618      	mov	r0, r3
 80129f4:	f7fc fbae 	bl	800f154 <lwip_htons>
 80129f8:	4603      	mov	r3, r0
 80129fa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80129fc:	4b42      	ldr	r3, [pc, #264]	; (8012b08 <tcp_input+0x28c>)
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	685b      	ldr	r3, [r3, #4]
 8012a02:	4a41      	ldr	r2, [pc, #260]	; (8012b08 <tcp_input+0x28c>)
 8012a04:	6814      	ldr	r4, [r2, #0]
 8012a06:	4618      	mov	r0, r3
 8012a08:	f7fc fbb9 	bl	800f17e <lwip_htonl>
 8012a0c:	4603      	mov	r3, r0
 8012a0e:	6063      	str	r3, [r4, #4]
 8012a10:	6863      	ldr	r3, [r4, #4]
 8012a12:	4a45      	ldr	r2, [pc, #276]	; (8012b28 <tcp_input+0x2ac>)
 8012a14:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8012a16:	4b3c      	ldr	r3, [pc, #240]	; (8012b08 <tcp_input+0x28c>)
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	689b      	ldr	r3, [r3, #8]
 8012a1c:	4a3a      	ldr	r2, [pc, #232]	; (8012b08 <tcp_input+0x28c>)
 8012a1e:	6814      	ldr	r4, [r2, #0]
 8012a20:	4618      	mov	r0, r3
 8012a22:	f7fc fbac 	bl	800f17e <lwip_htonl>
 8012a26:	4603      	mov	r3, r0
 8012a28:	60a3      	str	r3, [r4, #8]
 8012a2a:	68a3      	ldr	r3, [r4, #8]
 8012a2c:	4a3f      	ldr	r2, [pc, #252]	; (8012b2c <tcp_input+0x2b0>)
 8012a2e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012a30:	4b35      	ldr	r3, [pc, #212]	; (8012b08 <tcp_input+0x28c>)
 8012a32:	681b      	ldr	r3, [r3, #0]
 8012a34:	89db      	ldrh	r3, [r3, #14]
 8012a36:	b29b      	uxth	r3, r3
 8012a38:	4a33      	ldr	r2, [pc, #204]	; (8012b08 <tcp_input+0x28c>)
 8012a3a:	6814      	ldr	r4, [r2, #0]
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	f7fc fb89 	bl	800f154 <lwip_htons>
 8012a42:	4603      	mov	r3, r0
 8012a44:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8012a46:	4b30      	ldr	r3, [pc, #192]	; (8012b08 <tcp_input+0x28c>)
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	899b      	ldrh	r3, [r3, #12]
 8012a4c:	b29b      	uxth	r3, r3
 8012a4e:	4618      	mov	r0, r3
 8012a50:	f7fc fb80 	bl	800f154 <lwip_htons>
 8012a54:	4603      	mov	r3, r0
 8012a56:	b2db      	uxtb	r3, r3
 8012a58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012a5c:	b2da      	uxtb	r2, r3
 8012a5e:	4b34      	ldr	r3, [pc, #208]	; (8012b30 <tcp_input+0x2b4>)
 8012a60:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	891a      	ldrh	r2, [r3, #8]
 8012a66:	4b33      	ldr	r3, [pc, #204]	; (8012b34 <tcp_input+0x2b8>)
 8012a68:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8012a6a:	4b31      	ldr	r3, [pc, #196]	; (8012b30 <tcp_input+0x2b4>)
 8012a6c:	781b      	ldrb	r3, [r3, #0]
 8012a6e:	f003 0303 	and.w	r3, r3, #3
 8012a72:	2b00      	cmp	r3, #0
 8012a74:	d00c      	beq.n	8012a90 <tcp_input+0x214>
    tcplen++;
 8012a76:	4b2f      	ldr	r3, [pc, #188]	; (8012b34 <tcp_input+0x2b8>)
 8012a78:	881b      	ldrh	r3, [r3, #0]
 8012a7a:	3301      	adds	r3, #1
 8012a7c:	b29a      	uxth	r2, r3
 8012a7e:	4b2d      	ldr	r3, [pc, #180]	; (8012b34 <tcp_input+0x2b8>)
 8012a80:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	891a      	ldrh	r2, [r3, #8]
 8012a86:	4b2b      	ldr	r3, [pc, #172]	; (8012b34 <tcp_input+0x2b8>)
 8012a88:	881b      	ldrh	r3, [r3, #0]
 8012a8a:	429a      	cmp	r2, r3
 8012a8c:	f200 82d9 	bhi.w	8013042 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012a90:	2300      	movs	r3, #0
 8012a92:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012a94:	4b28      	ldr	r3, [pc, #160]	; (8012b38 <tcp_input+0x2bc>)
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	61fb      	str	r3, [r7, #28]
 8012a9a:	e09d      	b.n	8012bd8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012a9c:	69fb      	ldr	r3, [r7, #28]
 8012a9e:	7d1b      	ldrb	r3, [r3, #20]
 8012aa0:	2b00      	cmp	r3, #0
 8012aa2:	d105      	bne.n	8012ab0 <tcp_input+0x234>
 8012aa4:	4b15      	ldr	r3, [pc, #84]	; (8012afc <tcp_input+0x280>)
 8012aa6:	22fb      	movs	r2, #251	; 0xfb
 8012aa8:	4924      	ldr	r1, [pc, #144]	; (8012b3c <tcp_input+0x2c0>)
 8012aaa:	4816      	ldr	r0, [pc, #88]	; (8012b04 <tcp_input+0x288>)
 8012aac:	f007 fe0c 	bl	801a6c8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012ab0:	69fb      	ldr	r3, [r7, #28]
 8012ab2:	7d1b      	ldrb	r3, [r3, #20]
 8012ab4:	2b0a      	cmp	r3, #10
 8012ab6:	d105      	bne.n	8012ac4 <tcp_input+0x248>
 8012ab8:	4b10      	ldr	r3, [pc, #64]	; (8012afc <tcp_input+0x280>)
 8012aba:	22fc      	movs	r2, #252	; 0xfc
 8012abc:	4920      	ldr	r1, [pc, #128]	; (8012b40 <tcp_input+0x2c4>)
 8012abe:	4811      	ldr	r0, [pc, #68]	; (8012b04 <tcp_input+0x288>)
 8012ac0:	f007 fe02 	bl	801a6c8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012ac4:	69fb      	ldr	r3, [r7, #28]
 8012ac6:	7d1b      	ldrb	r3, [r3, #20]
 8012ac8:	2b01      	cmp	r3, #1
 8012aca:	d105      	bne.n	8012ad8 <tcp_input+0x25c>
 8012acc:	4b0b      	ldr	r3, [pc, #44]	; (8012afc <tcp_input+0x280>)
 8012ace:	22fd      	movs	r2, #253	; 0xfd
 8012ad0:	491c      	ldr	r1, [pc, #112]	; (8012b44 <tcp_input+0x2c8>)
 8012ad2:	480c      	ldr	r0, [pc, #48]	; (8012b04 <tcp_input+0x288>)
 8012ad4:	f007 fdf8 	bl	801a6c8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012ad8:	69fb      	ldr	r3, [r7, #28]
 8012ada:	7a1b      	ldrb	r3, [r3, #8]
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d033      	beq.n	8012b48 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012ae0:	69fb      	ldr	r3, [r7, #28]
 8012ae2:	7a1a      	ldrb	r2, [r3, #8]
 8012ae4:	4b09      	ldr	r3, [pc, #36]	; (8012b0c <tcp_input+0x290>)
 8012ae6:	685b      	ldr	r3, [r3, #4]
 8012ae8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012aec:	3301      	adds	r3, #1
 8012aee:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012af0:	429a      	cmp	r2, r3
 8012af2:	d029      	beq.n	8012b48 <tcp_input+0x2cc>
      prev = pcb;
 8012af4:	69fb      	ldr	r3, [r7, #28]
 8012af6:	61bb      	str	r3, [r7, #24]
      continue;
 8012af8:	e06b      	b.n	8012bd2 <tcp_input+0x356>
 8012afa:	bf00      	nop
 8012afc:	0801d658 	.word	0x0801d658
 8012b00:	0801d68c 	.word	0x0801d68c
 8012b04:	0801d6a4 	.word	0x0801d6a4
 8012b08:	200069a4 	.word	0x200069a4
 8012b0c:	2000a630 	.word	0x2000a630
 8012b10:	200069a8 	.word	0x200069a8
 8012b14:	200069ac 	.word	0x200069ac
 8012b18:	200069aa 	.word	0x200069aa
 8012b1c:	0801d6cc 	.word	0x0801d6cc
 8012b20:	0801d6dc 	.word	0x0801d6dc
 8012b24:	0801d6e8 	.word	0x0801d6e8
 8012b28:	200069b4 	.word	0x200069b4
 8012b2c:	200069b8 	.word	0x200069b8
 8012b30:	200069c0 	.word	0x200069c0
 8012b34:	200069be 	.word	0x200069be
 8012b38:	2000dd44 	.word	0x2000dd44
 8012b3c:	0801d708 	.word	0x0801d708
 8012b40:	0801d730 	.word	0x0801d730
 8012b44:	0801d75c 	.word	0x0801d75c
    }

    if (pcb->remote_port == tcphdr->src &&
 8012b48:	69fb      	ldr	r3, [r7, #28]
 8012b4a:	8b1a      	ldrh	r2, [r3, #24]
 8012b4c:	4b94      	ldr	r3, [pc, #592]	; (8012da0 <tcp_input+0x524>)
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	881b      	ldrh	r3, [r3, #0]
 8012b52:	b29b      	uxth	r3, r3
 8012b54:	429a      	cmp	r2, r3
 8012b56:	d13a      	bne.n	8012bce <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8012b58:	69fb      	ldr	r3, [r7, #28]
 8012b5a:	8ada      	ldrh	r2, [r3, #22]
 8012b5c:	4b90      	ldr	r3, [pc, #576]	; (8012da0 <tcp_input+0x524>)
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	885b      	ldrh	r3, [r3, #2]
 8012b62:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8012b64:	429a      	cmp	r2, r3
 8012b66:	d132      	bne.n	8012bce <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012b68:	69fb      	ldr	r3, [r7, #28]
 8012b6a:	685a      	ldr	r2, [r3, #4]
 8012b6c:	4b8d      	ldr	r3, [pc, #564]	; (8012da4 <tcp_input+0x528>)
 8012b6e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8012b70:	429a      	cmp	r2, r3
 8012b72:	d12c      	bne.n	8012bce <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012b74:	69fb      	ldr	r3, [r7, #28]
 8012b76:	681a      	ldr	r2, [r3, #0]
 8012b78:	4b8a      	ldr	r3, [pc, #552]	; (8012da4 <tcp_input+0x528>)
 8012b7a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012b7c:	429a      	cmp	r2, r3
 8012b7e:	d126      	bne.n	8012bce <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8012b80:	69fb      	ldr	r3, [r7, #28]
 8012b82:	68db      	ldr	r3, [r3, #12]
 8012b84:	69fa      	ldr	r2, [r7, #28]
 8012b86:	429a      	cmp	r2, r3
 8012b88:	d106      	bne.n	8012b98 <tcp_input+0x31c>
 8012b8a:	4b87      	ldr	r3, [pc, #540]	; (8012da8 <tcp_input+0x52c>)
 8012b8c:	f240 120d 	movw	r2, #269	; 0x10d
 8012b90:	4986      	ldr	r1, [pc, #536]	; (8012dac <tcp_input+0x530>)
 8012b92:	4887      	ldr	r0, [pc, #540]	; (8012db0 <tcp_input+0x534>)
 8012b94:	f007 fd98 	bl	801a6c8 <iprintf>
      if (prev != NULL) {
 8012b98:	69bb      	ldr	r3, [r7, #24]
 8012b9a:	2b00      	cmp	r3, #0
 8012b9c:	d00a      	beq.n	8012bb4 <tcp_input+0x338>
        prev->next = pcb->next;
 8012b9e:	69fb      	ldr	r3, [r7, #28]
 8012ba0:	68da      	ldr	r2, [r3, #12]
 8012ba2:	69bb      	ldr	r3, [r7, #24]
 8012ba4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8012ba6:	4b83      	ldr	r3, [pc, #524]	; (8012db4 <tcp_input+0x538>)
 8012ba8:	681a      	ldr	r2, [r3, #0]
 8012baa:	69fb      	ldr	r3, [r7, #28]
 8012bac:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8012bae:	4a81      	ldr	r2, [pc, #516]	; (8012db4 <tcp_input+0x538>)
 8012bb0:	69fb      	ldr	r3, [r7, #28]
 8012bb2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8012bb4:	69fb      	ldr	r3, [r7, #28]
 8012bb6:	68db      	ldr	r3, [r3, #12]
 8012bb8:	69fa      	ldr	r2, [r7, #28]
 8012bba:	429a      	cmp	r2, r3
 8012bbc:	d111      	bne.n	8012be2 <tcp_input+0x366>
 8012bbe:	4b7a      	ldr	r3, [pc, #488]	; (8012da8 <tcp_input+0x52c>)
 8012bc0:	f240 1215 	movw	r2, #277	; 0x115
 8012bc4:	497c      	ldr	r1, [pc, #496]	; (8012db8 <tcp_input+0x53c>)
 8012bc6:	487a      	ldr	r0, [pc, #488]	; (8012db0 <tcp_input+0x534>)
 8012bc8:	f007 fd7e 	bl	801a6c8 <iprintf>
      break;
 8012bcc:	e009      	b.n	8012be2 <tcp_input+0x366>
    }
    prev = pcb;
 8012bce:	69fb      	ldr	r3, [r7, #28]
 8012bd0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012bd2:	69fb      	ldr	r3, [r7, #28]
 8012bd4:	68db      	ldr	r3, [r3, #12]
 8012bd6:	61fb      	str	r3, [r7, #28]
 8012bd8:	69fb      	ldr	r3, [r7, #28]
 8012bda:	2b00      	cmp	r3, #0
 8012bdc:	f47f af5e 	bne.w	8012a9c <tcp_input+0x220>
 8012be0:	e000      	b.n	8012be4 <tcp_input+0x368>
      break;
 8012be2:	bf00      	nop
  }

  if (pcb == NULL) {
 8012be4:	69fb      	ldr	r3, [r7, #28]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	f040 8095 	bne.w	8012d16 <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012bec:	4b73      	ldr	r3, [pc, #460]	; (8012dbc <tcp_input+0x540>)
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	61fb      	str	r3, [r7, #28]
 8012bf2:	e03f      	b.n	8012c74 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012bf4:	69fb      	ldr	r3, [r7, #28]
 8012bf6:	7d1b      	ldrb	r3, [r3, #20]
 8012bf8:	2b0a      	cmp	r3, #10
 8012bfa:	d006      	beq.n	8012c0a <tcp_input+0x38e>
 8012bfc:	4b6a      	ldr	r3, [pc, #424]	; (8012da8 <tcp_input+0x52c>)
 8012bfe:	f240 121f 	movw	r2, #287	; 0x11f
 8012c02:	496f      	ldr	r1, [pc, #444]	; (8012dc0 <tcp_input+0x544>)
 8012c04:	486a      	ldr	r0, [pc, #424]	; (8012db0 <tcp_input+0x534>)
 8012c06:	f007 fd5f 	bl	801a6c8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012c0a:	69fb      	ldr	r3, [r7, #28]
 8012c0c:	7a1b      	ldrb	r3, [r3, #8]
 8012c0e:	2b00      	cmp	r3, #0
 8012c10:	d009      	beq.n	8012c26 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012c12:	69fb      	ldr	r3, [r7, #28]
 8012c14:	7a1a      	ldrb	r2, [r3, #8]
 8012c16:	4b63      	ldr	r3, [pc, #396]	; (8012da4 <tcp_input+0x528>)
 8012c18:	685b      	ldr	r3, [r3, #4]
 8012c1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012c1e:	3301      	adds	r3, #1
 8012c20:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012c22:	429a      	cmp	r2, r3
 8012c24:	d122      	bne.n	8012c6c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8012c26:	69fb      	ldr	r3, [r7, #28]
 8012c28:	8b1a      	ldrh	r2, [r3, #24]
 8012c2a:	4b5d      	ldr	r3, [pc, #372]	; (8012da0 <tcp_input+0x524>)
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	881b      	ldrh	r3, [r3, #0]
 8012c30:	b29b      	uxth	r3, r3
 8012c32:	429a      	cmp	r2, r3
 8012c34:	d11b      	bne.n	8012c6e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8012c36:	69fb      	ldr	r3, [r7, #28]
 8012c38:	8ada      	ldrh	r2, [r3, #22]
 8012c3a:	4b59      	ldr	r3, [pc, #356]	; (8012da0 <tcp_input+0x524>)
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	885b      	ldrh	r3, [r3, #2]
 8012c40:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8012c42:	429a      	cmp	r2, r3
 8012c44:	d113      	bne.n	8012c6e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012c46:	69fb      	ldr	r3, [r7, #28]
 8012c48:	685a      	ldr	r2, [r3, #4]
 8012c4a:	4b56      	ldr	r3, [pc, #344]	; (8012da4 <tcp_input+0x528>)
 8012c4c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8012c4e:	429a      	cmp	r2, r3
 8012c50:	d10d      	bne.n	8012c6e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012c52:	69fb      	ldr	r3, [r7, #28]
 8012c54:	681a      	ldr	r2, [r3, #0]
 8012c56:	4b53      	ldr	r3, [pc, #332]	; (8012da4 <tcp_input+0x528>)
 8012c58:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8012c5a:	429a      	cmp	r2, r3
 8012c5c:	d107      	bne.n	8012c6e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8012c5e:	69f8      	ldr	r0, [r7, #28]
 8012c60:	f000 fb54 	bl	801330c <tcp_timewait_input>
        }
        pbuf_free(p);
 8012c64:	6878      	ldr	r0, [r7, #4]
 8012c66:	f7fd fdbd 	bl	80107e4 <pbuf_free>
        return;
 8012c6a:	e1f0      	b.n	801304e <tcp_input+0x7d2>
        continue;
 8012c6c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012c6e:	69fb      	ldr	r3, [r7, #28]
 8012c70:	68db      	ldr	r3, [r3, #12]
 8012c72:	61fb      	str	r3, [r7, #28]
 8012c74:	69fb      	ldr	r3, [r7, #28]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d1bc      	bne.n	8012bf4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8012c7a:	2300      	movs	r3, #0
 8012c7c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012c7e:	4b51      	ldr	r3, [pc, #324]	; (8012dc4 <tcp_input+0x548>)
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	617b      	str	r3, [r7, #20]
 8012c84:	e02a      	b.n	8012cdc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012c86:	697b      	ldr	r3, [r7, #20]
 8012c88:	7a1b      	ldrb	r3, [r3, #8]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d00c      	beq.n	8012ca8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012c8e:	697b      	ldr	r3, [r7, #20]
 8012c90:	7a1a      	ldrb	r2, [r3, #8]
 8012c92:	4b44      	ldr	r3, [pc, #272]	; (8012da4 <tcp_input+0x528>)
 8012c94:	685b      	ldr	r3, [r3, #4]
 8012c96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012c9a:	3301      	adds	r3, #1
 8012c9c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8012c9e:	429a      	cmp	r2, r3
 8012ca0:	d002      	beq.n	8012ca8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8012ca2:	697b      	ldr	r3, [r7, #20]
 8012ca4:	61bb      	str	r3, [r7, #24]
        continue;
 8012ca6:	e016      	b.n	8012cd6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8012ca8:	697b      	ldr	r3, [r7, #20]
 8012caa:	8ada      	ldrh	r2, [r3, #22]
 8012cac:	4b3c      	ldr	r3, [pc, #240]	; (8012da0 <tcp_input+0x524>)
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	885b      	ldrh	r3, [r3, #2]
 8012cb2:	b29b      	uxth	r3, r3
 8012cb4:	429a      	cmp	r2, r3
 8012cb6:	d10c      	bne.n	8012cd2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8012cb8:	697b      	ldr	r3, [r7, #20]
 8012cba:	681a      	ldr	r2, [r3, #0]
 8012cbc:	4b39      	ldr	r3, [pc, #228]	; (8012da4 <tcp_input+0x528>)
 8012cbe:	695b      	ldr	r3, [r3, #20]
 8012cc0:	429a      	cmp	r2, r3
 8012cc2:	d00f      	beq.n	8012ce4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8012cc4:	697b      	ldr	r3, [r7, #20]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d00d      	beq.n	8012ce6 <tcp_input+0x46a>
 8012cca:	697b      	ldr	r3, [r7, #20]
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d009      	beq.n	8012ce6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8012cd2:	697b      	ldr	r3, [r7, #20]
 8012cd4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012cd6:	697b      	ldr	r3, [r7, #20]
 8012cd8:	68db      	ldr	r3, [r3, #12]
 8012cda:	617b      	str	r3, [r7, #20]
 8012cdc:	697b      	ldr	r3, [r7, #20]
 8012cde:	2b00      	cmp	r3, #0
 8012ce0:	d1d1      	bne.n	8012c86 <tcp_input+0x40a>
 8012ce2:	e000      	b.n	8012ce6 <tcp_input+0x46a>
            break;
 8012ce4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8012ce6:	697b      	ldr	r3, [r7, #20]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d014      	beq.n	8012d16 <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8012cec:	69bb      	ldr	r3, [r7, #24]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d00a      	beq.n	8012d08 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8012cf2:	697b      	ldr	r3, [r7, #20]
 8012cf4:	68da      	ldr	r2, [r3, #12]
 8012cf6:	69bb      	ldr	r3, [r7, #24]
 8012cf8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8012cfa:	4b32      	ldr	r3, [pc, #200]	; (8012dc4 <tcp_input+0x548>)
 8012cfc:	681a      	ldr	r2, [r3, #0]
 8012cfe:	697b      	ldr	r3, [r7, #20]
 8012d00:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8012d02:	4a30      	ldr	r2, [pc, #192]	; (8012dc4 <tcp_input+0x548>)
 8012d04:	697b      	ldr	r3, [r7, #20]
 8012d06:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8012d08:	6978      	ldr	r0, [r7, #20]
 8012d0a:	f000 fa01 	bl	8013110 <tcp_listen_input>
      }
      pbuf_free(p);
 8012d0e:	6878      	ldr	r0, [r7, #4]
 8012d10:	f7fd fd68 	bl	80107e4 <pbuf_free>
      return;
 8012d14:	e19b      	b.n	801304e <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8012d16:	69fb      	ldr	r3, [r7, #28]
 8012d18:	2b00      	cmp	r3, #0
 8012d1a:	f000 8160 	beq.w	8012fde <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8012d1e:	4b2a      	ldr	r3, [pc, #168]	; (8012dc8 <tcp_input+0x54c>)
 8012d20:	2200      	movs	r2, #0
 8012d22:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	891a      	ldrh	r2, [r3, #8]
 8012d28:	4b27      	ldr	r3, [pc, #156]	; (8012dc8 <tcp_input+0x54c>)
 8012d2a:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8012d2c:	4a26      	ldr	r2, [pc, #152]	; (8012dc8 <tcp_input+0x54c>)
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8012d32:	4b1b      	ldr	r3, [pc, #108]	; (8012da0 <tcp_input+0x524>)
 8012d34:	681b      	ldr	r3, [r3, #0]
 8012d36:	4a24      	ldr	r2, [pc, #144]	; (8012dc8 <tcp_input+0x54c>)
 8012d38:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8012d3a:	4b24      	ldr	r3, [pc, #144]	; (8012dcc <tcp_input+0x550>)
 8012d3c:	2200      	movs	r2, #0
 8012d3e:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8012d40:	4b23      	ldr	r3, [pc, #140]	; (8012dd0 <tcp_input+0x554>)
 8012d42:	2200      	movs	r2, #0
 8012d44:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8012d46:	4b23      	ldr	r3, [pc, #140]	; (8012dd4 <tcp_input+0x558>)
 8012d48:	2200      	movs	r2, #0
 8012d4a:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8012d4c:	4b22      	ldr	r3, [pc, #136]	; (8012dd8 <tcp_input+0x55c>)
 8012d4e:	781b      	ldrb	r3, [r3, #0]
 8012d50:	f003 0308 	and.w	r3, r3, #8
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d006      	beq.n	8012d66 <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 8012d58:	687b      	ldr	r3, [r7, #4]
 8012d5a:	7b5b      	ldrb	r3, [r3, #13]
 8012d5c:	f043 0301 	orr.w	r3, r3, #1
 8012d60:	b2da      	uxtb	r2, r3
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8012d66:	69fb      	ldr	r3, [r7, #28]
 8012d68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012d6a:	2b00      	cmp	r3, #0
 8012d6c:	d038      	beq.n	8012de0 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012d6e:	69f8      	ldr	r0, [r7, #28]
 8012d70:	f7ff f870 	bl	8011e54 <tcp_process_refused_data>
 8012d74:	4603      	mov	r3, r0
 8012d76:	f113 0f0d 	cmn.w	r3, #13
 8012d7a:	d007      	beq.n	8012d8c <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012d7c:	69fb      	ldr	r3, [r7, #28]
 8012d7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8012d80:	2b00      	cmp	r3, #0
 8012d82:	d02d      	beq.n	8012de0 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8012d84:	4b15      	ldr	r3, [pc, #84]	; (8012ddc <tcp_input+0x560>)
 8012d86:	881b      	ldrh	r3, [r3, #0]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d029      	beq.n	8012de0 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8012d8c:	69fb      	ldr	r3, [r7, #28]
 8012d8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	f040 8104 	bne.w	8012f9e <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8012d96:	69f8      	ldr	r0, [r7, #28]
 8012d98:	f003 fe16 	bl	80169c8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8012d9c:	e0ff      	b.n	8012f9e <tcp_input+0x722>
 8012d9e:	bf00      	nop
 8012da0:	200069a4 	.word	0x200069a4
 8012da4:	2000a630 	.word	0x2000a630
 8012da8:	0801d658 	.word	0x0801d658
 8012dac:	0801d784 	.word	0x0801d784
 8012db0:	0801d6a4 	.word	0x0801d6a4
 8012db4:	2000dd44 	.word	0x2000dd44
 8012db8:	0801d7b0 	.word	0x0801d7b0
 8012dbc:	2000dd54 	.word	0x2000dd54
 8012dc0:	0801d7dc 	.word	0x0801d7dc
 8012dc4:	2000dd4c 	.word	0x2000dd4c
 8012dc8:	20006994 	.word	0x20006994
 8012dcc:	200069c4 	.word	0x200069c4
 8012dd0:	200069c1 	.word	0x200069c1
 8012dd4:	200069bc 	.word	0x200069bc
 8012dd8:	200069c0 	.word	0x200069c0
 8012ddc:	200069be 	.word	0x200069be
      }
    }
    tcp_input_pcb = pcb;
 8012de0:	4a9c      	ldr	r2, [pc, #624]	; (8013054 <tcp_input+0x7d8>)
 8012de2:	69fb      	ldr	r3, [r7, #28]
 8012de4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8012de6:	69f8      	ldr	r0, [r7, #28]
 8012de8:	f000 fb0a 	bl	8013400 <tcp_process>
 8012dec:	4603      	mov	r3, r0
 8012dee:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8012df0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012df4:	f113 0f0d 	cmn.w	r3, #13
 8012df8:	f000 80d3 	beq.w	8012fa2 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 8012dfc:	4b96      	ldr	r3, [pc, #600]	; (8013058 <tcp_input+0x7dc>)
 8012dfe:	781b      	ldrb	r3, [r3, #0]
 8012e00:	f003 0308 	and.w	r3, r3, #8
 8012e04:	2b00      	cmp	r3, #0
 8012e06:	d015      	beq.n	8012e34 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8012e08:	69fb      	ldr	r3, [r7, #28]
 8012e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d008      	beq.n	8012e24 <tcp_input+0x5a8>
 8012e12:	69fb      	ldr	r3, [r7, #28]
 8012e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012e18:	69fa      	ldr	r2, [r7, #28]
 8012e1a:	6912      	ldr	r2, [r2, #16]
 8012e1c:	f06f 010d 	mvn.w	r1, #13
 8012e20:	4610      	mov	r0, r2
 8012e22:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8012e24:	69f9      	ldr	r1, [r7, #28]
 8012e26:	488d      	ldr	r0, [pc, #564]	; (801305c <tcp_input+0x7e0>)
 8012e28:	f7ff fbb0 	bl	801258c <tcp_pcb_remove>
        tcp_free(pcb);
 8012e2c:	69f8      	ldr	r0, [r7, #28]
 8012e2e:	f7fd ff95 	bl	8010d5c <tcp_free>
 8012e32:	e0c1      	b.n	8012fb8 <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 8012e34:	2300      	movs	r3, #0
 8012e36:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8012e38:	4b89      	ldr	r3, [pc, #548]	; (8013060 <tcp_input+0x7e4>)
 8012e3a:	881b      	ldrh	r3, [r3, #0]
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d01d      	beq.n	8012e7c <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8012e40:	4b87      	ldr	r3, [pc, #540]	; (8013060 <tcp_input+0x7e4>)
 8012e42:	881b      	ldrh	r3, [r3, #0]
 8012e44:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8012e46:	69fb      	ldr	r3, [r7, #28]
 8012e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d00a      	beq.n	8012e66 <tcp_input+0x5ea>
 8012e50:	69fb      	ldr	r3, [r7, #28]
 8012e52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012e56:	69fa      	ldr	r2, [r7, #28]
 8012e58:	6910      	ldr	r0, [r2, #16]
 8012e5a:	89fa      	ldrh	r2, [r7, #14]
 8012e5c:	69f9      	ldr	r1, [r7, #28]
 8012e5e:	4798      	blx	r3
 8012e60:	4603      	mov	r3, r0
 8012e62:	74fb      	strb	r3, [r7, #19]
 8012e64:	e001      	b.n	8012e6a <tcp_input+0x5ee>
 8012e66:	2300      	movs	r3, #0
 8012e68:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012e6a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012e6e:	f113 0f0d 	cmn.w	r3, #13
 8012e72:	f000 8098 	beq.w	8012fa6 <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 8012e76:	4b7a      	ldr	r3, [pc, #488]	; (8013060 <tcp_input+0x7e4>)
 8012e78:	2200      	movs	r2, #0
 8012e7a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8012e7c:	69f8      	ldr	r0, [r7, #28]
 8012e7e:	f000 f907 	bl	8013090 <tcp_input_delayed_close>
 8012e82:	4603      	mov	r3, r0
 8012e84:	2b00      	cmp	r3, #0
 8012e86:	f040 8090 	bne.w	8012faa <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8012e8a:	4b76      	ldr	r3, [pc, #472]	; (8013064 <tcp_input+0x7e8>)
 8012e8c:	681b      	ldr	r3, [r3, #0]
 8012e8e:	2b00      	cmp	r3, #0
 8012e90:	d041      	beq.n	8012f16 <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8012e92:	69fb      	ldr	r3, [r7, #28]
 8012e94:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d006      	beq.n	8012ea8 <tcp_input+0x62c>
 8012e9a:	4b73      	ldr	r3, [pc, #460]	; (8013068 <tcp_input+0x7ec>)
 8012e9c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8012ea0:	4972      	ldr	r1, [pc, #456]	; (801306c <tcp_input+0x7f0>)
 8012ea2:	4873      	ldr	r0, [pc, #460]	; (8013070 <tcp_input+0x7f4>)
 8012ea4:	f007 fc10 	bl	801a6c8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8012ea8:	69fb      	ldr	r3, [r7, #28]
 8012eaa:	8b5b      	ldrh	r3, [r3, #26]
 8012eac:	f003 0310 	and.w	r3, r3, #16
 8012eb0:	2b00      	cmp	r3, #0
 8012eb2:	d008      	beq.n	8012ec6 <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8012eb4:	4b6b      	ldr	r3, [pc, #428]	; (8013064 <tcp_input+0x7e8>)
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	4618      	mov	r0, r3
 8012eba:	f7fd fc93 	bl	80107e4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8012ebe:	69f8      	ldr	r0, [r7, #28]
 8012ec0:	f7fe fa90 	bl	80113e4 <tcp_abort>
            goto aborted;
 8012ec4:	e078      	b.n	8012fb8 <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8012ec6:	69fb      	ldr	r3, [r7, #28]
 8012ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d00c      	beq.n	8012eea <tcp_input+0x66e>
 8012ed0:	69fb      	ldr	r3, [r7, #28]
 8012ed2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012ed6:	69fb      	ldr	r3, [r7, #28]
 8012ed8:	6918      	ldr	r0, [r3, #16]
 8012eda:	4b62      	ldr	r3, [pc, #392]	; (8013064 <tcp_input+0x7e8>)
 8012edc:	681a      	ldr	r2, [r3, #0]
 8012ede:	2300      	movs	r3, #0
 8012ee0:	69f9      	ldr	r1, [r7, #28]
 8012ee2:	47a0      	blx	r4
 8012ee4:	4603      	mov	r3, r0
 8012ee6:	74fb      	strb	r3, [r7, #19]
 8012ee8:	e008      	b.n	8012efc <tcp_input+0x680>
 8012eea:	4b5e      	ldr	r3, [pc, #376]	; (8013064 <tcp_input+0x7e8>)
 8012eec:	681a      	ldr	r2, [r3, #0]
 8012eee:	2300      	movs	r3, #0
 8012ef0:	69f9      	ldr	r1, [r7, #28]
 8012ef2:	2000      	movs	r0, #0
 8012ef4:	f7ff f884 	bl	8012000 <tcp_recv_null>
 8012ef8:	4603      	mov	r3, r0
 8012efa:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8012efc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012f00:	f113 0f0d 	cmn.w	r3, #13
 8012f04:	d053      	beq.n	8012fae <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8012f06:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d003      	beq.n	8012f16 <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8012f0e:	4b55      	ldr	r3, [pc, #340]	; (8013064 <tcp_input+0x7e8>)
 8012f10:	681a      	ldr	r2, [r3, #0]
 8012f12:	69fb      	ldr	r3, [r7, #28]
 8012f14:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8012f16:	4b50      	ldr	r3, [pc, #320]	; (8013058 <tcp_input+0x7dc>)
 8012f18:	781b      	ldrb	r3, [r3, #0]
 8012f1a:	f003 0320 	and.w	r3, r3, #32
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d030      	beq.n	8012f84 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 8012f22:	69fb      	ldr	r3, [r7, #28]
 8012f24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012f26:	2b00      	cmp	r3, #0
 8012f28:	d009      	beq.n	8012f3e <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8012f2a:	69fb      	ldr	r3, [r7, #28]
 8012f2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012f2e:	7b5a      	ldrb	r2, [r3, #13]
 8012f30:	69fb      	ldr	r3, [r7, #28]
 8012f32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012f34:	f042 0220 	orr.w	r2, r2, #32
 8012f38:	b2d2      	uxtb	r2, r2
 8012f3a:	735a      	strb	r2, [r3, #13]
 8012f3c:	e022      	b.n	8012f84 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012f3e:	69fb      	ldr	r3, [r7, #28]
 8012f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012f42:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012f46:	d005      	beq.n	8012f54 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 8012f48:	69fb      	ldr	r3, [r7, #28]
 8012f4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012f4c:	3301      	adds	r3, #1
 8012f4e:	b29a      	uxth	r2, r3
 8012f50:	69fb      	ldr	r3, [r7, #28]
 8012f52:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8012f54:	69fb      	ldr	r3, [r7, #28]
 8012f56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d00b      	beq.n	8012f76 <tcp_input+0x6fa>
 8012f5e:	69fb      	ldr	r3, [r7, #28]
 8012f60:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012f64:	69fb      	ldr	r3, [r7, #28]
 8012f66:	6918      	ldr	r0, [r3, #16]
 8012f68:	2300      	movs	r3, #0
 8012f6a:	2200      	movs	r2, #0
 8012f6c:	69f9      	ldr	r1, [r7, #28]
 8012f6e:	47a0      	blx	r4
 8012f70:	4603      	mov	r3, r0
 8012f72:	74fb      	strb	r3, [r7, #19]
 8012f74:	e001      	b.n	8012f7a <tcp_input+0x6fe>
 8012f76:	2300      	movs	r3, #0
 8012f78:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8012f7a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012f7e:	f113 0f0d 	cmn.w	r3, #13
 8012f82:	d016      	beq.n	8012fb2 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8012f84:	4b33      	ldr	r3, [pc, #204]	; (8013054 <tcp_input+0x7d8>)
 8012f86:	2200      	movs	r2, #0
 8012f88:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8012f8a:	69f8      	ldr	r0, [r7, #28]
 8012f8c:	f000 f880 	bl	8013090 <tcp_input_delayed_close>
 8012f90:	4603      	mov	r3, r0
 8012f92:	2b00      	cmp	r3, #0
 8012f94:	d10f      	bne.n	8012fb6 <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8012f96:	69f8      	ldr	r0, [r7, #28]
 8012f98:	f002 ff10 	bl	8015dbc <tcp_output>
 8012f9c:	e00c      	b.n	8012fb8 <tcp_input+0x73c>
        goto aborted;
 8012f9e:	bf00      	nop
 8012fa0:	e00a      	b.n	8012fb8 <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8012fa2:	bf00      	nop
 8012fa4:	e008      	b.n	8012fb8 <tcp_input+0x73c>
              goto aborted;
 8012fa6:	bf00      	nop
 8012fa8:	e006      	b.n	8012fb8 <tcp_input+0x73c>
          goto aborted;
 8012faa:	bf00      	nop
 8012fac:	e004      	b.n	8012fb8 <tcp_input+0x73c>
            goto aborted;
 8012fae:	bf00      	nop
 8012fb0:	e002      	b.n	8012fb8 <tcp_input+0x73c>
              goto aborted;
 8012fb2:	bf00      	nop
 8012fb4:	e000      	b.n	8012fb8 <tcp_input+0x73c>
          goto aborted;
 8012fb6:	bf00      	nop
    tcp_input_pcb = NULL;
 8012fb8:	4b26      	ldr	r3, [pc, #152]	; (8013054 <tcp_input+0x7d8>)
 8012fba:	2200      	movs	r2, #0
 8012fbc:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8012fbe:	4b29      	ldr	r3, [pc, #164]	; (8013064 <tcp_input+0x7e8>)
 8012fc0:	2200      	movs	r2, #0
 8012fc2:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8012fc4:	4b2b      	ldr	r3, [pc, #172]	; (8013074 <tcp_input+0x7f8>)
 8012fc6:	685b      	ldr	r3, [r3, #4]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d03f      	beq.n	801304c <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 8012fcc:	4b29      	ldr	r3, [pc, #164]	; (8013074 <tcp_input+0x7f8>)
 8012fce:	685b      	ldr	r3, [r3, #4]
 8012fd0:	4618      	mov	r0, r3
 8012fd2:	f7fd fc07 	bl	80107e4 <pbuf_free>
      inseg.p = NULL;
 8012fd6:	4b27      	ldr	r3, [pc, #156]	; (8013074 <tcp_input+0x7f8>)
 8012fd8:	2200      	movs	r2, #0
 8012fda:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8012fdc:	e036      	b.n	801304c <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8012fde:	4b26      	ldr	r3, [pc, #152]	; (8013078 <tcp_input+0x7fc>)
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	899b      	ldrh	r3, [r3, #12]
 8012fe4:	b29b      	uxth	r3, r3
 8012fe6:	4618      	mov	r0, r3
 8012fe8:	f7fc f8b4 	bl	800f154 <lwip_htons>
 8012fec:	4603      	mov	r3, r0
 8012fee:	b2db      	uxtb	r3, r3
 8012ff0:	f003 0304 	and.w	r3, r3, #4
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d118      	bne.n	801302a <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012ff8:	4b20      	ldr	r3, [pc, #128]	; (801307c <tcp_input+0x800>)
 8012ffa:	6819      	ldr	r1, [r3, #0]
 8012ffc:	4b20      	ldr	r3, [pc, #128]	; (8013080 <tcp_input+0x804>)
 8012ffe:	881b      	ldrh	r3, [r3, #0]
 8013000:	461a      	mov	r2, r3
 8013002:	4b20      	ldr	r3, [pc, #128]	; (8013084 <tcp_input+0x808>)
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013008:	4b1b      	ldr	r3, [pc, #108]	; (8013078 <tcp_input+0x7fc>)
 801300a:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801300c:	885b      	ldrh	r3, [r3, #2]
 801300e:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013010:	4a19      	ldr	r2, [pc, #100]	; (8013078 <tcp_input+0x7fc>)
 8013012:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013014:	8812      	ldrh	r2, [r2, #0]
 8013016:	b292      	uxth	r2, r2
 8013018:	9202      	str	r2, [sp, #8]
 801301a:	9301      	str	r3, [sp, #4]
 801301c:	4b1a      	ldr	r3, [pc, #104]	; (8013088 <tcp_input+0x80c>)
 801301e:	9300      	str	r3, [sp, #0]
 8013020:	4b1a      	ldr	r3, [pc, #104]	; (801308c <tcp_input+0x810>)
 8013022:	4602      	mov	r2, r0
 8013024:	2000      	movs	r0, #0
 8013026:	f003 fc7d 	bl	8016924 <tcp_rst>
    pbuf_free(p);
 801302a:	6878      	ldr	r0, [r7, #4]
 801302c:	f7fd fbda 	bl	80107e4 <pbuf_free>
  return;
 8013030:	e00c      	b.n	801304c <tcp_input+0x7d0>
    goto dropped;
 8013032:	bf00      	nop
 8013034:	e006      	b.n	8013044 <tcp_input+0x7c8>
    goto dropped;
 8013036:	bf00      	nop
 8013038:	e004      	b.n	8013044 <tcp_input+0x7c8>
    goto dropped;
 801303a:	bf00      	nop
 801303c:	e002      	b.n	8013044 <tcp_input+0x7c8>
      goto dropped;
 801303e:	bf00      	nop
 8013040:	e000      	b.n	8013044 <tcp_input+0x7c8>
      goto dropped;
 8013042:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8013044:	6878      	ldr	r0, [r7, #4]
 8013046:	f7fd fbcd 	bl	80107e4 <pbuf_free>
 801304a:	e000      	b.n	801304e <tcp_input+0x7d2>
  return;
 801304c:	bf00      	nop
}
 801304e:	3724      	adds	r7, #36	; 0x24
 8013050:	46bd      	mov	sp, r7
 8013052:	bd90      	pop	{r4, r7, pc}
 8013054:	2000dd58 	.word	0x2000dd58
 8013058:	200069c1 	.word	0x200069c1
 801305c:	2000dd44 	.word	0x2000dd44
 8013060:	200069bc 	.word	0x200069bc
 8013064:	200069c4 	.word	0x200069c4
 8013068:	0801d658 	.word	0x0801d658
 801306c:	0801d80c 	.word	0x0801d80c
 8013070:	0801d6a4 	.word	0x0801d6a4
 8013074:	20006994 	.word	0x20006994
 8013078:	200069a4 	.word	0x200069a4
 801307c:	200069b8 	.word	0x200069b8
 8013080:	200069be 	.word	0x200069be
 8013084:	200069b4 	.word	0x200069b4
 8013088:	2000a640 	.word	0x2000a640
 801308c:	2000a644 	.word	0x2000a644

08013090 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8013090:	b580      	push	{r7, lr}
 8013092:	b082      	sub	sp, #8
 8013094:	af00      	add	r7, sp, #0
 8013096:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8013098:	687b      	ldr	r3, [r7, #4]
 801309a:	2b00      	cmp	r3, #0
 801309c:	d106      	bne.n	80130ac <tcp_input_delayed_close+0x1c>
 801309e:	4b17      	ldr	r3, [pc, #92]	; (80130fc <tcp_input_delayed_close+0x6c>)
 80130a0:	f240 225a 	movw	r2, #602	; 0x25a
 80130a4:	4916      	ldr	r1, [pc, #88]	; (8013100 <tcp_input_delayed_close+0x70>)
 80130a6:	4817      	ldr	r0, [pc, #92]	; (8013104 <tcp_input_delayed_close+0x74>)
 80130a8:	f007 fb0e 	bl	801a6c8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80130ac:	4b16      	ldr	r3, [pc, #88]	; (8013108 <tcp_input_delayed_close+0x78>)
 80130ae:	781b      	ldrb	r3, [r3, #0]
 80130b0:	f003 0310 	and.w	r3, r3, #16
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d01c      	beq.n	80130f2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	8b5b      	ldrh	r3, [r3, #26]
 80130bc:	f003 0310 	and.w	r3, r3, #16
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d10d      	bne.n	80130e0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d008      	beq.n	80130e0 <tcp_input_delayed_close+0x50>
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80130d4:	687a      	ldr	r2, [r7, #4]
 80130d6:	6912      	ldr	r2, [r2, #16]
 80130d8:	f06f 010e 	mvn.w	r1, #14
 80130dc:	4610      	mov	r0, r2
 80130de:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80130e0:	6879      	ldr	r1, [r7, #4]
 80130e2:	480a      	ldr	r0, [pc, #40]	; (801310c <tcp_input_delayed_close+0x7c>)
 80130e4:	f7ff fa52 	bl	801258c <tcp_pcb_remove>
    tcp_free(pcb);
 80130e8:	6878      	ldr	r0, [r7, #4]
 80130ea:	f7fd fe37 	bl	8010d5c <tcp_free>
    return 1;
 80130ee:	2301      	movs	r3, #1
 80130f0:	e000      	b.n	80130f4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 80130f2:	2300      	movs	r3, #0
}
 80130f4:	4618      	mov	r0, r3
 80130f6:	3708      	adds	r7, #8
 80130f8:	46bd      	mov	sp, r7
 80130fa:	bd80      	pop	{r7, pc}
 80130fc:	0801d658 	.word	0x0801d658
 8013100:	0801d828 	.word	0x0801d828
 8013104:	0801d6a4 	.word	0x0801d6a4
 8013108:	200069c1 	.word	0x200069c1
 801310c:	2000dd44 	.word	0x2000dd44

08013110 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8013110:	b590      	push	{r4, r7, lr}
 8013112:	b08b      	sub	sp, #44	; 0x2c
 8013114:	af04      	add	r7, sp, #16
 8013116:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013118:	4b6f      	ldr	r3, [pc, #444]	; (80132d8 <tcp_listen_input+0x1c8>)
 801311a:	781b      	ldrb	r3, [r3, #0]
 801311c:	f003 0304 	and.w	r3, r3, #4
 8013120:	2b00      	cmp	r3, #0
 8013122:	f040 80d2 	bne.w	80132ca <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	2b00      	cmp	r3, #0
 801312a:	d106      	bne.n	801313a <tcp_listen_input+0x2a>
 801312c:	4b6b      	ldr	r3, [pc, #428]	; (80132dc <tcp_listen_input+0x1cc>)
 801312e:	f240 2281 	movw	r2, #641	; 0x281
 8013132:	496b      	ldr	r1, [pc, #428]	; (80132e0 <tcp_listen_input+0x1d0>)
 8013134:	486b      	ldr	r0, [pc, #428]	; (80132e4 <tcp_listen_input+0x1d4>)
 8013136:	f007 fac7 	bl	801a6c8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801313a:	4b67      	ldr	r3, [pc, #412]	; (80132d8 <tcp_listen_input+0x1c8>)
 801313c:	781b      	ldrb	r3, [r3, #0]
 801313e:	f003 0310 	and.w	r3, r3, #16
 8013142:	2b00      	cmp	r3, #0
 8013144:	d019      	beq.n	801317a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013146:	4b68      	ldr	r3, [pc, #416]	; (80132e8 <tcp_listen_input+0x1d8>)
 8013148:	6819      	ldr	r1, [r3, #0]
 801314a:	4b68      	ldr	r3, [pc, #416]	; (80132ec <tcp_listen_input+0x1dc>)
 801314c:	881b      	ldrh	r3, [r3, #0]
 801314e:	461a      	mov	r2, r3
 8013150:	4b67      	ldr	r3, [pc, #412]	; (80132f0 <tcp_listen_input+0x1e0>)
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013156:	4b67      	ldr	r3, [pc, #412]	; (80132f4 <tcp_listen_input+0x1e4>)
 8013158:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801315a:	885b      	ldrh	r3, [r3, #2]
 801315c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801315e:	4a65      	ldr	r2, [pc, #404]	; (80132f4 <tcp_listen_input+0x1e4>)
 8013160:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013162:	8812      	ldrh	r2, [r2, #0]
 8013164:	b292      	uxth	r2, r2
 8013166:	9202      	str	r2, [sp, #8]
 8013168:	9301      	str	r3, [sp, #4]
 801316a:	4b63      	ldr	r3, [pc, #396]	; (80132f8 <tcp_listen_input+0x1e8>)
 801316c:	9300      	str	r3, [sp, #0]
 801316e:	4b63      	ldr	r3, [pc, #396]	; (80132fc <tcp_listen_input+0x1ec>)
 8013170:	4602      	mov	r2, r0
 8013172:	6878      	ldr	r0, [r7, #4]
 8013174:	f003 fbd6 	bl	8016924 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8013178:	e0a9      	b.n	80132ce <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801317a:	4b57      	ldr	r3, [pc, #348]	; (80132d8 <tcp_listen_input+0x1c8>)
 801317c:	781b      	ldrb	r3, [r3, #0]
 801317e:	f003 0302 	and.w	r3, r3, #2
 8013182:	2b00      	cmp	r3, #0
 8013184:	f000 80a3 	beq.w	80132ce <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8013188:	687b      	ldr	r3, [r7, #4]
 801318a:	7d5b      	ldrb	r3, [r3, #21]
 801318c:	4618      	mov	r0, r3
 801318e:	f7ff f85b 	bl	8012248 <tcp_alloc>
 8013192:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8013194:	697b      	ldr	r3, [r7, #20]
 8013196:	2b00      	cmp	r3, #0
 8013198:	d111      	bne.n	80131be <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	699b      	ldr	r3, [r3, #24]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d00a      	beq.n	80131b8 <tcp_listen_input+0xa8>
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	699b      	ldr	r3, [r3, #24]
 80131a6:	687a      	ldr	r2, [r7, #4]
 80131a8:	6910      	ldr	r0, [r2, #16]
 80131aa:	f04f 32ff 	mov.w	r2, #4294967295
 80131ae:	2100      	movs	r1, #0
 80131b0:	4798      	blx	r3
 80131b2:	4603      	mov	r3, r0
 80131b4:	73bb      	strb	r3, [r7, #14]
      return;
 80131b6:	e08b      	b.n	80132d0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80131b8:	23f0      	movs	r3, #240	; 0xf0
 80131ba:	73bb      	strb	r3, [r7, #14]
      return;
 80131bc:	e088      	b.n	80132d0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80131be:	4b50      	ldr	r3, [pc, #320]	; (8013300 <tcp_listen_input+0x1f0>)
 80131c0:	695a      	ldr	r2, [r3, #20]
 80131c2:	697b      	ldr	r3, [r7, #20]
 80131c4:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80131c6:	4b4e      	ldr	r3, [pc, #312]	; (8013300 <tcp_listen_input+0x1f0>)
 80131c8:	691a      	ldr	r2, [r3, #16]
 80131ca:	697b      	ldr	r3, [r7, #20]
 80131cc:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	8ada      	ldrh	r2, [r3, #22]
 80131d2:	697b      	ldr	r3, [r7, #20]
 80131d4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80131d6:	4b47      	ldr	r3, [pc, #284]	; (80132f4 <tcp_listen_input+0x1e4>)
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	881b      	ldrh	r3, [r3, #0]
 80131dc:	b29a      	uxth	r2, r3
 80131de:	697b      	ldr	r3, [r7, #20]
 80131e0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80131e2:	697b      	ldr	r3, [r7, #20]
 80131e4:	2203      	movs	r2, #3
 80131e6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80131e8:	4b41      	ldr	r3, [pc, #260]	; (80132f0 <tcp_listen_input+0x1e0>)
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	1c5a      	adds	r2, r3, #1
 80131ee:	697b      	ldr	r3, [r7, #20]
 80131f0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80131f2:	697b      	ldr	r3, [r7, #20]
 80131f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80131f6:	697b      	ldr	r3, [r7, #20]
 80131f8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80131fa:	6978      	ldr	r0, [r7, #20]
 80131fc:	f7ff fa5a 	bl	80126b4 <tcp_next_iss>
 8013200:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8013202:	697b      	ldr	r3, [r7, #20]
 8013204:	693a      	ldr	r2, [r7, #16]
 8013206:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8013208:	697b      	ldr	r3, [r7, #20]
 801320a:	693a      	ldr	r2, [r7, #16]
 801320c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801320e:	697b      	ldr	r3, [r7, #20]
 8013210:	693a      	ldr	r2, [r7, #16]
 8013212:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8013214:	697b      	ldr	r3, [r7, #20]
 8013216:	693a      	ldr	r2, [r7, #16]
 8013218:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801321a:	4b35      	ldr	r3, [pc, #212]	; (80132f0 <tcp_listen_input+0x1e0>)
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	1e5a      	subs	r2, r3, #1
 8013220:	697b      	ldr	r3, [r7, #20]
 8013222:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8013224:	687b      	ldr	r3, [r7, #4]
 8013226:	691a      	ldr	r2, [r3, #16]
 8013228:	697b      	ldr	r3, [r7, #20]
 801322a:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801322c:	697b      	ldr	r3, [r7, #20]
 801322e:	687a      	ldr	r2, [r7, #4]
 8013230:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	7a5b      	ldrb	r3, [r3, #9]
 8013236:	f003 030c 	and.w	r3, r3, #12
 801323a:	b2da      	uxtb	r2, r3
 801323c:	697b      	ldr	r3, [r7, #20]
 801323e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	7a1a      	ldrb	r2, [r3, #8]
 8013244:	697b      	ldr	r3, [r7, #20]
 8013246:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8013248:	4b2e      	ldr	r3, [pc, #184]	; (8013304 <tcp_listen_input+0x1f4>)
 801324a:	681a      	ldr	r2, [r3, #0]
 801324c:	697b      	ldr	r3, [r7, #20]
 801324e:	60da      	str	r2, [r3, #12]
 8013250:	4a2c      	ldr	r2, [pc, #176]	; (8013304 <tcp_listen_input+0x1f4>)
 8013252:	697b      	ldr	r3, [r7, #20]
 8013254:	6013      	str	r3, [r2, #0]
 8013256:	f003 fd27 	bl	8016ca8 <tcp_timer_needed>
 801325a:	4b2b      	ldr	r3, [pc, #172]	; (8013308 <tcp_listen_input+0x1f8>)
 801325c:	2201      	movs	r2, #1
 801325e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8013260:	6978      	ldr	r0, [r7, #20]
 8013262:	f001 fd8d 	bl	8014d80 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8013266:	4b23      	ldr	r3, [pc, #140]	; (80132f4 <tcp_listen_input+0x1e4>)
 8013268:	681b      	ldr	r3, [r3, #0]
 801326a:	89db      	ldrh	r3, [r3, #14]
 801326c:	b29a      	uxth	r2, r3
 801326e:	697b      	ldr	r3, [r7, #20]
 8013270:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8013274:	697b      	ldr	r3, [r7, #20]
 8013276:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801327a:	697b      	ldr	r3, [r7, #20]
 801327c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8013280:	697b      	ldr	r3, [r7, #20]
 8013282:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8013284:	697b      	ldr	r3, [r7, #20]
 8013286:	3304      	adds	r3, #4
 8013288:	4618      	mov	r0, r3
 801328a:	f005 fc4b 	bl	8018b24 <ip4_route>
 801328e:	4601      	mov	r1, r0
 8013290:	697b      	ldr	r3, [r7, #20]
 8013292:	3304      	adds	r3, #4
 8013294:	461a      	mov	r2, r3
 8013296:	4620      	mov	r0, r4
 8013298:	f7ff fa32 	bl	8012700 <tcp_eff_send_mss_netif>
 801329c:	4603      	mov	r3, r0
 801329e:	461a      	mov	r2, r3
 80132a0:	697b      	ldr	r3, [r7, #20]
 80132a2:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80132a4:	2112      	movs	r1, #18
 80132a6:	6978      	ldr	r0, [r7, #20]
 80132a8:	f002 fc9a 	bl	8015be0 <tcp_enqueue_flags>
 80132ac:	4603      	mov	r3, r0
 80132ae:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80132b0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d004      	beq.n	80132c2 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80132b8:	2100      	movs	r1, #0
 80132ba:	6978      	ldr	r0, [r7, #20]
 80132bc:	f7fd ffd4 	bl	8011268 <tcp_abandon>
      return;
 80132c0:	e006      	b.n	80132d0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80132c2:	6978      	ldr	r0, [r7, #20]
 80132c4:	f002 fd7a 	bl	8015dbc <tcp_output>
  return;
 80132c8:	e001      	b.n	80132ce <tcp_listen_input+0x1be>
    return;
 80132ca:	bf00      	nop
 80132cc:	e000      	b.n	80132d0 <tcp_listen_input+0x1c0>
  return;
 80132ce:	bf00      	nop
}
 80132d0:	371c      	adds	r7, #28
 80132d2:	46bd      	mov	sp, r7
 80132d4:	bd90      	pop	{r4, r7, pc}
 80132d6:	bf00      	nop
 80132d8:	200069c0 	.word	0x200069c0
 80132dc:	0801d658 	.word	0x0801d658
 80132e0:	0801d850 	.word	0x0801d850
 80132e4:	0801d6a4 	.word	0x0801d6a4
 80132e8:	200069b8 	.word	0x200069b8
 80132ec:	200069be 	.word	0x200069be
 80132f0:	200069b4 	.word	0x200069b4
 80132f4:	200069a4 	.word	0x200069a4
 80132f8:	2000a640 	.word	0x2000a640
 80132fc:	2000a644 	.word	0x2000a644
 8013300:	2000a630 	.word	0x2000a630
 8013304:	2000dd44 	.word	0x2000dd44
 8013308:	2000dd40 	.word	0x2000dd40

0801330c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801330c:	b580      	push	{r7, lr}
 801330e:	b086      	sub	sp, #24
 8013310:	af04      	add	r7, sp, #16
 8013312:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8013314:	4b2f      	ldr	r3, [pc, #188]	; (80133d4 <tcp_timewait_input+0xc8>)
 8013316:	781b      	ldrb	r3, [r3, #0]
 8013318:	f003 0304 	and.w	r3, r3, #4
 801331c:	2b00      	cmp	r3, #0
 801331e:	d153      	bne.n	80133c8 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	2b00      	cmp	r3, #0
 8013324:	d106      	bne.n	8013334 <tcp_timewait_input+0x28>
 8013326:	4b2c      	ldr	r3, [pc, #176]	; (80133d8 <tcp_timewait_input+0xcc>)
 8013328:	f240 22ee 	movw	r2, #750	; 0x2ee
 801332c:	492b      	ldr	r1, [pc, #172]	; (80133dc <tcp_timewait_input+0xd0>)
 801332e:	482c      	ldr	r0, [pc, #176]	; (80133e0 <tcp_timewait_input+0xd4>)
 8013330:	f007 f9ca 	bl	801a6c8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8013334:	4b27      	ldr	r3, [pc, #156]	; (80133d4 <tcp_timewait_input+0xc8>)
 8013336:	781b      	ldrb	r3, [r3, #0]
 8013338:	f003 0302 	and.w	r3, r3, #2
 801333c:	2b00      	cmp	r3, #0
 801333e:	d02a      	beq.n	8013396 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8013340:	4b28      	ldr	r3, [pc, #160]	; (80133e4 <tcp_timewait_input+0xd8>)
 8013342:	681a      	ldr	r2, [r3, #0]
 8013344:	687b      	ldr	r3, [r7, #4]
 8013346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013348:	1ad3      	subs	r3, r2, r3
 801334a:	2b00      	cmp	r3, #0
 801334c:	db2d      	blt.n	80133aa <tcp_timewait_input+0x9e>
 801334e:	4b25      	ldr	r3, [pc, #148]	; (80133e4 <tcp_timewait_input+0xd8>)
 8013350:	681a      	ldr	r2, [r3, #0]
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013356:	6879      	ldr	r1, [r7, #4]
 8013358:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801335a:	440b      	add	r3, r1
 801335c:	1ad3      	subs	r3, r2, r3
 801335e:	2b00      	cmp	r3, #0
 8013360:	dc23      	bgt.n	80133aa <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013362:	4b21      	ldr	r3, [pc, #132]	; (80133e8 <tcp_timewait_input+0xdc>)
 8013364:	6819      	ldr	r1, [r3, #0]
 8013366:	4b21      	ldr	r3, [pc, #132]	; (80133ec <tcp_timewait_input+0xe0>)
 8013368:	881b      	ldrh	r3, [r3, #0]
 801336a:	461a      	mov	r2, r3
 801336c:	4b1d      	ldr	r3, [pc, #116]	; (80133e4 <tcp_timewait_input+0xd8>)
 801336e:	681b      	ldr	r3, [r3, #0]
 8013370:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013372:	4b1f      	ldr	r3, [pc, #124]	; (80133f0 <tcp_timewait_input+0xe4>)
 8013374:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013376:	885b      	ldrh	r3, [r3, #2]
 8013378:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801337a:	4a1d      	ldr	r2, [pc, #116]	; (80133f0 <tcp_timewait_input+0xe4>)
 801337c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801337e:	8812      	ldrh	r2, [r2, #0]
 8013380:	b292      	uxth	r2, r2
 8013382:	9202      	str	r2, [sp, #8]
 8013384:	9301      	str	r3, [sp, #4]
 8013386:	4b1b      	ldr	r3, [pc, #108]	; (80133f4 <tcp_timewait_input+0xe8>)
 8013388:	9300      	str	r3, [sp, #0]
 801338a:	4b1b      	ldr	r3, [pc, #108]	; (80133f8 <tcp_timewait_input+0xec>)
 801338c:	4602      	mov	r2, r0
 801338e:	6878      	ldr	r0, [r7, #4]
 8013390:	f003 fac8 	bl	8016924 <tcp_rst>
      return;
 8013394:	e01b      	b.n	80133ce <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8013396:	4b0f      	ldr	r3, [pc, #60]	; (80133d4 <tcp_timewait_input+0xc8>)
 8013398:	781b      	ldrb	r3, [r3, #0]
 801339a:	f003 0301 	and.w	r3, r3, #1
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d003      	beq.n	80133aa <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80133a2:	4b16      	ldr	r3, [pc, #88]	; (80133fc <tcp_timewait_input+0xf0>)
 80133a4:	681a      	ldr	r2, [r3, #0]
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80133aa:	4b10      	ldr	r3, [pc, #64]	; (80133ec <tcp_timewait_input+0xe0>)
 80133ac:	881b      	ldrh	r3, [r3, #0]
 80133ae:	2b00      	cmp	r3, #0
 80133b0:	d00c      	beq.n	80133cc <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	8b5b      	ldrh	r3, [r3, #26]
 80133b6:	f043 0302 	orr.w	r3, r3, #2
 80133ba:	b29a      	uxth	r2, r3
 80133bc:	687b      	ldr	r3, [r7, #4]
 80133be:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80133c0:	6878      	ldr	r0, [r7, #4]
 80133c2:	f002 fcfb 	bl	8015dbc <tcp_output>
  }
  return;
 80133c6:	e001      	b.n	80133cc <tcp_timewait_input+0xc0>
    return;
 80133c8:	bf00      	nop
 80133ca:	e000      	b.n	80133ce <tcp_timewait_input+0xc2>
  return;
 80133cc:	bf00      	nop
}
 80133ce:	3708      	adds	r7, #8
 80133d0:	46bd      	mov	sp, r7
 80133d2:	bd80      	pop	{r7, pc}
 80133d4:	200069c0 	.word	0x200069c0
 80133d8:	0801d658 	.word	0x0801d658
 80133dc:	0801d870 	.word	0x0801d870
 80133e0:	0801d6a4 	.word	0x0801d6a4
 80133e4:	200069b4 	.word	0x200069b4
 80133e8:	200069b8 	.word	0x200069b8
 80133ec:	200069be 	.word	0x200069be
 80133f0:	200069a4 	.word	0x200069a4
 80133f4:	2000a640 	.word	0x2000a640
 80133f8:	2000a644 	.word	0x2000a644
 80133fc:	2000dd48 	.word	0x2000dd48

08013400 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8013400:	b590      	push	{r4, r7, lr}
 8013402:	b08d      	sub	sp, #52	; 0x34
 8013404:	af04      	add	r7, sp, #16
 8013406:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8013408:	2300      	movs	r3, #0
 801340a:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801340c:	2300      	movs	r3, #0
 801340e:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	2b00      	cmp	r3, #0
 8013414:	d106      	bne.n	8013424 <tcp_process+0x24>
 8013416:	4ba5      	ldr	r3, [pc, #660]	; (80136ac <tcp_process+0x2ac>)
 8013418:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801341c:	49a4      	ldr	r1, [pc, #656]	; (80136b0 <tcp_process+0x2b0>)
 801341e:	48a5      	ldr	r0, [pc, #660]	; (80136b4 <tcp_process+0x2b4>)
 8013420:	f007 f952 	bl	801a6c8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8013424:	4ba4      	ldr	r3, [pc, #656]	; (80136b8 <tcp_process+0x2b8>)
 8013426:	781b      	ldrb	r3, [r3, #0]
 8013428:	f003 0304 	and.w	r3, r3, #4
 801342c:	2b00      	cmp	r3, #0
 801342e:	d04e      	beq.n	80134ce <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	7d1b      	ldrb	r3, [r3, #20]
 8013434:	2b02      	cmp	r3, #2
 8013436:	d108      	bne.n	801344a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801343c:	4b9f      	ldr	r3, [pc, #636]	; (80136bc <tcp_process+0x2bc>)
 801343e:	681b      	ldr	r3, [r3, #0]
 8013440:	429a      	cmp	r2, r3
 8013442:	d123      	bne.n	801348c <tcp_process+0x8c>
        acceptable = 1;
 8013444:	2301      	movs	r3, #1
 8013446:	76fb      	strb	r3, [r7, #27]
 8013448:	e020      	b.n	801348c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801344a:	687b      	ldr	r3, [r7, #4]
 801344c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801344e:	4b9c      	ldr	r3, [pc, #624]	; (80136c0 <tcp_process+0x2c0>)
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	429a      	cmp	r2, r3
 8013454:	d102      	bne.n	801345c <tcp_process+0x5c>
        acceptable = 1;
 8013456:	2301      	movs	r3, #1
 8013458:	76fb      	strb	r3, [r7, #27]
 801345a:	e017      	b.n	801348c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801345c:	4b98      	ldr	r3, [pc, #608]	; (80136c0 <tcp_process+0x2c0>)
 801345e:	681a      	ldr	r2, [r3, #0]
 8013460:	687b      	ldr	r3, [r7, #4]
 8013462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013464:	1ad3      	subs	r3, r2, r3
 8013466:	2b00      	cmp	r3, #0
 8013468:	db10      	blt.n	801348c <tcp_process+0x8c>
 801346a:	4b95      	ldr	r3, [pc, #596]	; (80136c0 <tcp_process+0x2c0>)
 801346c:	681a      	ldr	r2, [r3, #0]
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013472:	6879      	ldr	r1, [r7, #4]
 8013474:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013476:	440b      	add	r3, r1
 8013478:	1ad3      	subs	r3, r2, r3
 801347a:	2b00      	cmp	r3, #0
 801347c:	dc06      	bgt.n	801348c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801347e:	687b      	ldr	r3, [r7, #4]
 8013480:	8b5b      	ldrh	r3, [r3, #26]
 8013482:	f043 0302 	orr.w	r3, r3, #2
 8013486:	b29a      	uxth	r2, r3
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801348c:	7efb      	ldrb	r3, [r7, #27]
 801348e:	2b00      	cmp	r3, #0
 8013490:	d01b      	beq.n	80134ca <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	7d1b      	ldrb	r3, [r3, #20]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d106      	bne.n	80134a8 <tcp_process+0xa8>
 801349a:	4b84      	ldr	r3, [pc, #528]	; (80136ac <tcp_process+0x2ac>)
 801349c:	f44f 724e 	mov.w	r2, #824	; 0x338
 80134a0:	4988      	ldr	r1, [pc, #544]	; (80136c4 <tcp_process+0x2c4>)
 80134a2:	4884      	ldr	r0, [pc, #528]	; (80136b4 <tcp_process+0x2b4>)
 80134a4:	f007 f910 	bl	801a6c8 <iprintf>
      recv_flags |= TF_RESET;
 80134a8:	4b87      	ldr	r3, [pc, #540]	; (80136c8 <tcp_process+0x2c8>)
 80134aa:	781b      	ldrb	r3, [r3, #0]
 80134ac:	f043 0308 	orr.w	r3, r3, #8
 80134b0:	b2da      	uxtb	r2, r3
 80134b2:	4b85      	ldr	r3, [pc, #532]	; (80136c8 <tcp_process+0x2c8>)
 80134b4:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80134b6:	687b      	ldr	r3, [r7, #4]
 80134b8:	8b5b      	ldrh	r3, [r3, #26]
 80134ba:	f023 0301 	bic.w	r3, r3, #1
 80134be:	b29a      	uxth	r2, r3
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80134c4:	f06f 030d 	mvn.w	r3, #13
 80134c8:	e37a      	b.n	8013bc0 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80134ca:	2300      	movs	r3, #0
 80134cc:	e378      	b.n	8013bc0 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80134ce:	4b7a      	ldr	r3, [pc, #488]	; (80136b8 <tcp_process+0x2b8>)
 80134d0:	781b      	ldrb	r3, [r3, #0]
 80134d2:	f003 0302 	and.w	r3, r3, #2
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d010      	beq.n	80134fc <tcp_process+0xfc>
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	7d1b      	ldrb	r3, [r3, #20]
 80134de:	2b02      	cmp	r3, #2
 80134e0:	d00c      	beq.n	80134fc <tcp_process+0xfc>
 80134e2:	687b      	ldr	r3, [r7, #4]
 80134e4:	7d1b      	ldrb	r3, [r3, #20]
 80134e6:	2b03      	cmp	r3, #3
 80134e8:	d008      	beq.n	80134fc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	8b5b      	ldrh	r3, [r3, #26]
 80134ee:	f043 0302 	orr.w	r3, r3, #2
 80134f2:	b29a      	uxth	r2, r3
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80134f8:	2300      	movs	r3, #0
 80134fa:	e361      	b.n	8013bc0 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80134fc:	687b      	ldr	r3, [r7, #4]
 80134fe:	8b5b      	ldrh	r3, [r3, #26]
 8013500:	f003 0310 	and.w	r3, r3, #16
 8013504:	2b00      	cmp	r3, #0
 8013506:	d103      	bne.n	8013510 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8013508:	4b70      	ldr	r3, [pc, #448]	; (80136cc <tcp_process+0x2cc>)
 801350a:	681a      	ldr	r2, [r3, #0]
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	2200      	movs	r2, #0
 8013514:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	2200      	movs	r2, #0
 801351c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8013520:	6878      	ldr	r0, [r7, #4]
 8013522:	f001 fc2d 	bl	8014d80 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	7d1b      	ldrb	r3, [r3, #20]
 801352a:	3b02      	subs	r3, #2
 801352c:	2b07      	cmp	r3, #7
 801352e:	f200 8337 	bhi.w	8013ba0 <tcp_process+0x7a0>
 8013532:	a201      	add	r2, pc, #4	; (adr r2, 8013538 <tcp_process+0x138>)
 8013534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013538:	08013559 	.word	0x08013559
 801353c:	08013789 	.word	0x08013789
 8013540:	08013901 	.word	0x08013901
 8013544:	0801392b 	.word	0x0801392b
 8013548:	08013a4f 	.word	0x08013a4f
 801354c:	08013901 	.word	0x08013901
 8013550:	08013adb 	.word	0x08013adb
 8013554:	08013b6b 	.word	0x08013b6b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8013558:	4b57      	ldr	r3, [pc, #348]	; (80136b8 <tcp_process+0x2b8>)
 801355a:	781b      	ldrb	r3, [r3, #0]
 801355c:	f003 0310 	and.w	r3, r3, #16
 8013560:	2b00      	cmp	r3, #0
 8013562:	f000 80e4 	beq.w	801372e <tcp_process+0x32e>
 8013566:	4b54      	ldr	r3, [pc, #336]	; (80136b8 <tcp_process+0x2b8>)
 8013568:	781b      	ldrb	r3, [r3, #0]
 801356a:	f003 0302 	and.w	r3, r3, #2
 801356e:	2b00      	cmp	r3, #0
 8013570:	f000 80dd 	beq.w	801372e <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013578:	1c5a      	adds	r2, r3, #1
 801357a:	4b50      	ldr	r3, [pc, #320]	; (80136bc <tcp_process+0x2bc>)
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	429a      	cmp	r2, r3
 8013580:	f040 80d5 	bne.w	801372e <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8013584:	4b4e      	ldr	r3, [pc, #312]	; (80136c0 <tcp_process+0x2c0>)
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	1c5a      	adds	r2, r3, #1
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8013596:	4b49      	ldr	r3, [pc, #292]	; (80136bc <tcp_process+0x2bc>)
 8013598:	681a      	ldr	r2, [r3, #0]
 801359a:	687b      	ldr	r3, [r7, #4]
 801359c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801359e:	4b4c      	ldr	r3, [pc, #304]	; (80136d0 <tcp_process+0x2d0>)
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	89db      	ldrh	r3, [r3, #14]
 80135a4:	b29a      	uxth	r2, r3
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 80135ac:	687b      	ldr	r3, [r7, #4]
 80135ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80135b8:	4b41      	ldr	r3, [pc, #260]	; (80136c0 <tcp_process+0x2c0>)
 80135ba:	681b      	ldr	r3, [r3, #0]
 80135bc:	1e5a      	subs	r2, r3, #1
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80135c2:	687b      	ldr	r3, [r7, #4]
 80135c4:	2204      	movs	r2, #4
 80135c6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80135cc:	687b      	ldr	r3, [r7, #4]
 80135ce:	3304      	adds	r3, #4
 80135d0:	4618      	mov	r0, r3
 80135d2:	f005 faa7 	bl	8018b24 <ip4_route>
 80135d6:	4601      	mov	r1, r0
 80135d8:	687b      	ldr	r3, [r7, #4]
 80135da:	3304      	adds	r3, #4
 80135dc:	461a      	mov	r2, r3
 80135de:	4620      	mov	r0, r4
 80135e0:	f7ff f88e 	bl	8012700 <tcp_eff_send_mss_netif>
 80135e4:	4603      	mov	r3, r0
 80135e6:	461a      	mov	r2, r3
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80135f0:	009a      	lsls	r2, r3, #2
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80135f6:	005b      	lsls	r3, r3, #1
 80135f8:	f241 111c 	movw	r1, #4380	; 0x111c
 80135fc:	428b      	cmp	r3, r1
 80135fe:	bf38      	it	cc
 8013600:	460b      	movcc	r3, r1
 8013602:	429a      	cmp	r2, r3
 8013604:	d204      	bcs.n	8013610 <tcp_process+0x210>
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801360a:	009b      	lsls	r3, r3, #2
 801360c:	b29b      	uxth	r3, r3
 801360e:	e00d      	b.n	801362c <tcp_process+0x22c>
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013614:	005b      	lsls	r3, r3, #1
 8013616:	f241 121c 	movw	r2, #4380	; 0x111c
 801361a:	4293      	cmp	r3, r2
 801361c:	d904      	bls.n	8013628 <tcp_process+0x228>
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013622:	005b      	lsls	r3, r3, #1
 8013624:	b29b      	uxth	r3, r3
 8013626:	e001      	b.n	801362c <tcp_process+0x22c>
 8013628:	f241 131c 	movw	r3, #4380	; 0x111c
 801362c:	687a      	ldr	r2, [r7, #4]
 801362e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8013632:	687b      	ldr	r3, [r7, #4]
 8013634:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013638:	2b00      	cmp	r3, #0
 801363a:	d106      	bne.n	801364a <tcp_process+0x24a>
 801363c:	4b1b      	ldr	r3, [pc, #108]	; (80136ac <tcp_process+0x2ac>)
 801363e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8013642:	4924      	ldr	r1, [pc, #144]	; (80136d4 <tcp_process+0x2d4>)
 8013644:	481b      	ldr	r0, [pc, #108]	; (80136b4 <tcp_process+0x2b4>)
 8013646:	f007 f83f 	bl	801a6c8 <iprintf>
        --pcb->snd_queuelen;
 801364a:	687b      	ldr	r3, [r7, #4]
 801364c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013650:	3b01      	subs	r3, #1
 8013652:	b29a      	uxth	r2, r3
 8013654:	687b      	ldr	r3, [r7, #4]
 8013656:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801365e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8013660:	69fb      	ldr	r3, [r7, #28]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d111      	bne.n	801368a <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801366a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801366c:	69fb      	ldr	r3, [r7, #28]
 801366e:	2b00      	cmp	r3, #0
 8013670:	d106      	bne.n	8013680 <tcp_process+0x280>
 8013672:	4b0e      	ldr	r3, [pc, #56]	; (80136ac <tcp_process+0x2ac>)
 8013674:	f44f 725d 	mov.w	r2, #884	; 0x374
 8013678:	4917      	ldr	r1, [pc, #92]	; (80136d8 <tcp_process+0x2d8>)
 801367a:	480e      	ldr	r0, [pc, #56]	; (80136b4 <tcp_process+0x2b4>)
 801367c:	f007 f824 	bl	801a6c8 <iprintf>
          pcb->unsent = rseg->next;
 8013680:	69fb      	ldr	r3, [r7, #28]
 8013682:	681a      	ldr	r2, [r3, #0]
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	66da      	str	r2, [r3, #108]	; 0x6c
 8013688:	e003      	b.n	8013692 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 801368a:	69fb      	ldr	r3, [r7, #28]
 801368c:	681a      	ldr	r2, [r3, #0]
 801368e:	687b      	ldr	r3, [r7, #4]
 8013690:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8013692:	69f8      	ldr	r0, [r7, #28]
 8013694:	f7fe fc6f 	bl	8011f76 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8013698:	687b      	ldr	r3, [r7, #4]
 801369a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801369c:	2b00      	cmp	r3, #0
 801369e:	d11d      	bne.n	80136dc <tcp_process+0x2dc>
          pcb->rtime = -1;
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80136a6:	861a      	strh	r2, [r3, #48]	; 0x30
 80136a8:	e01f      	b.n	80136ea <tcp_process+0x2ea>
 80136aa:	bf00      	nop
 80136ac:	0801d658 	.word	0x0801d658
 80136b0:	0801d890 	.word	0x0801d890
 80136b4:	0801d6a4 	.word	0x0801d6a4
 80136b8:	200069c0 	.word	0x200069c0
 80136bc:	200069b8 	.word	0x200069b8
 80136c0:	200069b4 	.word	0x200069b4
 80136c4:	0801d8ac 	.word	0x0801d8ac
 80136c8:	200069c1 	.word	0x200069c1
 80136cc:	2000dd48 	.word	0x2000dd48
 80136d0:	200069a4 	.word	0x200069a4
 80136d4:	0801d8cc 	.word	0x0801d8cc
 80136d8:	0801d8e4 	.word	0x0801d8e4
        } else {
          pcb->rtime = 0;
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	2200      	movs	r2, #0
 80136e0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	2200      	movs	r2, #0
 80136e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d00a      	beq.n	801370a <tcp_process+0x30a>
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80136fa:	687a      	ldr	r2, [r7, #4]
 80136fc:	6910      	ldr	r0, [r2, #16]
 80136fe:	2200      	movs	r2, #0
 8013700:	6879      	ldr	r1, [r7, #4]
 8013702:	4798      	blx	r3
 8013704:	4603      	mov	r3, r0
 8013706:	76bb      	strb	r3, [r7, #26]
 8013708:	e001      	b.n	801370e <tcp_process+0x30e>
 801370a:	2300      	movs	r3, #0
 801370c:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801370e:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013712:	f113 0f0d 	cmn.w	r3, #13
 8013716:	d102      	bne.n	801371e <tcp_process+0x31e>
          return ERR_ABRT;
 8013718:	f06f 030c 	mvn.w	r3, #12
 801371c:	e250      	b.n	8013bc0 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	8b5b      	ldrh	r3, [r3, #26]
 8013722:	f043 0302 	orr.w	r3, r3, #2
 8013726:	b29a      	uxth	r2, r3
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801372c:	e23a      	b.n	8013ba4 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801372e:	4b9d      	ldr	r3, [pc, #628]	; (80139a4 <tcp_process+0x5a4>)
 8013730:	781b      	ldrb	r3, [r3, #0]
 8013732:	f003 0310 	and.w	r3, r3, #16
 8013736:	2b00      	cmp	r3, #0
 8013738:	f000 8234 	beq.w	8013ba4 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801373c:	4b9a      	ldr	r3, [pc, #616]	; (80139a8 <tcp_process+0x5a8>)
 801373e:	6819      	ldr	r1, [r3, #0]
 8013740:	4b9a      	ldr	r3, [pc, #616]	; (80139ac <tcp_process+0x5ac>)
 8013742:	881b      	ldrh	r3, [r3, #0]
 8013744:	461a      	mov	r2, r3
 8013746:	4b9a      	ldr	r3, [pc, #616]	; (80139b0 <tcp_process+0x5b0>)
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801374c:	4b99      	ldr	r3, [pc, #612]	; (80139b4 <tcp_process+0x5b4>)
 801374e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013750:	885b      	ldrh	r3, [r3, #2]
 8013752:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013754:	4a97      	ldr	r2, [pc, #604]	; (80139b4 <tcp_process+0x5b4>)
 8013756:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013758:	8812      	ldrh	r2, [r2, #0]
 801375a:	b292      	uxth	r2, r2
 801375c:	9202      	str	r2, [sp, #8]
 801375e:	9301      	str	r3, [sp, #4]
 8013760:	4b95      	ldr	r3, [pc, #596]	; (80139b8 <tcp_process+0x5b8>)
 8013762:	9300      	str	r3, [sp, #0]
 8013764:	4b95      	ldr	r3, [pc, #596]	; (80139bc <tcp_process+0x5bc>)
 8013766:	4602      	mov	r2, r0
 8013768:	6878      	ldr	r0, [r7, #4]
 801376a:	f003 f8db 	bl	8016924 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013774:	2b05      	cmp	r3, #5
 8013776:	f200 8215 	bhi.w	8013ba4 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	2200      	movs	r2, #0
 801377e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8013780:	6878      	ldr	r0, [r7, #4]
 8013782:	f002 fea5 	bl	80164d0 <tcp_rexmit_rto>
      break;
 8013786:	e20d      	b.n	8013ba4 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8013788:	4b86      	ldr	r3, [pc, #536]	; (80139a4 <tcp_process+0x5a4>)
 801378a:	781b      	ldrb	r3, [r3, #0]
 801378c:	f003 0310 	and.w	r3, r3, #16
 8013790:	2b00      	cmp	r3, #0
 8013792:	f000 80a1 	beq.w	80138d8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013796:	4b84      	ldr	r3, [pc, #528]	; (80139a8 <tcp_process+0x5a8>)
 8013798:	681a      	ldr	r2, [r3, #0]
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801379e:	1ad3      	subs	r3, r2, r3
 80137a0:	3b01      	subs	r3, #1
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	db7e      	blt.n	80138a4 <tcp_process+0x4a4>
 80137a6:	4b80      	ldr	r3, [pc, #512]	; (80139a8 <tcp_process+0x5a8>)
 80137a8:	681a      	ldr	r2, [r3, #0]
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80137ae:	1ad3      	subs	r3, r2, r3
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	dc77      	bgt.n	80138a4 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	2204      	movs	r2, #4
 80137b8:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d102      	bne.n	80137c8 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80137c2:	23fa      	movs	r3, #250	; 0xfa
 80137c4:	76bb      	strb	r3, [r7, #26]
 80137c6:	e01d      	b.n	8013804 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80137cc:	699b      	ldr	r3, [r3, #24]
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d106      	bne.n	80137e0 <tcp_process+0x3e0>
 80137d2:	4b7b      	ldr	r3, [pc, #492]	; (80139c0 <tcp_process+0x5c0>)
 80137d4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80137d8:	497a      	ldr	r1, [pc, #488]	; (80139c4 <tcp_process+0x5c4>)
 80137da:	487b      	ldr	r0, [pc, #492]	; (80139c8 <tcp_process+0x5c8>)
 80137dc:	f006 ff74 	bl	801a6c8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80137e4:	699b      	ldr	r3, [r3, #24]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d00a      	beq.n	8013800 <tcp_process+0x400>
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80137ee:	699b      	ldr	r3, [r3, #24]
 80137f0:	687a      	ldr	r2, [r7, #4]
 80137f2:	6910      	ldr	r0, [r2, #16]
 80137f4:	2200      	movs	r2, #0
 80137f6:	6879      	ldr	r1, [r7, #4]
 80137f8:	4798      	blx	r3
 80137fa:	4603      	mov	r3, r0
 80137fc:	76bb      	strb	r3, [r7, #26]
 80137fe:	e001      	b.n	8013804 <tcp_process+0x404>
 8013800:	23f0      	movs	r3, #240	; 0xf0
 8013802:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8013804:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013808:	2b00      	cmp	r3, #0
 801380a:	d00a      	beq.n	8013822 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801380c:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013810:	f113 0f0d 	cmn.w	r3, #13
 8013814:	d002      	beq.n	801381c <tcp_process+0x41c>
              tcp_abort(pcb);
 8013816:	6878      	ldr	r0, [r7, #4]
 8013818:	f7fd fde4 	bl	80113e4 <tcp_abort>
            }
            return ERR_ABRT;
 801381c:	f06f 030c 	mvn.w	r3, #12
 8013820:	e1ce      	b.n	8013bc0 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8013822:	6878      	ldr	r0, [r7, #4]
 8013824:	f000 fae0 	bl	8013de8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8013828:	4b68      	ldr	r3, [pc, #416]	; (80139cc <tcp_process+0x5cc>)
 801382a:	881b      	ldrh	r3, [r3, #0]
 801382c:	2b00      	cmp	r3, #0
 801382e:	d005      	beq.n	801383c <tcp_process+0x43c>
            recv_acked--;
 8013830:	4b66      	ldr	r3, [pc, #408]	; (80139cc <tcp_process+0x5cc>)
 8013832:	881b      	ldrh	r3, [r3, #0]
 8013834:	3b01      	subs	r3, #1
 8013836:	b29a      	uxth	r2, r3
 8013838:	4b64      	ldr	r3, [pc, #400]	; (80139cc <tcp_process+0x5cc>)
 801383a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013840:	009a      	lsls	r2, r3, #2
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013846:	005b      	lsls	r3, r3, #1
 8013848:	f241 111c 	movw	r1, #4380	; 0x111c
 801384c:	428b      	cmp	r3, r1
 801384e:	bf38      	it	cc
 8013850:	460b      	movcc	r3, r1
 8013852:	429a      	cmp	r2, r3
 8013854:	d204      	bcs.n	8013860 <tcp_process+0x460>
 8013856:	687b      	ldr	r3, [r7, #4]
 8013858:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801385a:	009b      	lsls	r3, r3, #2
 801385c:	b29b      	uxth	r3, r3
 801385e:	e00d      	b.n	801387c <tcp_process+0x47c>
 8013860:	687b      	ldr	r3, [r7, #4]
 8013862:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013864:	005b      	lsls	r3, r3, #1
 8013866:	f241 121c 	movw	r2, #4380	; 0x111c
 801386a:	4293      	cmp	r3, r2
 801386c:	d904      	bls.n	8013878 <tcp_process+0x478>
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013872:	005b      	lsls	r3, r3, #1
 8013874:	b29b      	uxth	r3, r3
 8013876:	e001      	b.n	801387c <tcp_process+0x47c>
 8013878:	f241 131c 	movw	r3, #4380	; 0x111c
 801387c:	687a      	ldr	r2, [r7, #4]
 801387e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8013882:	4b53      	ldr	r3, [pc, #332]	; (80139d0 <tcp_process+0x5d0>)
 8013884:	781b      	ldrb	r3, [r3, #0]
 8013886:	f003 0320 	and.w	r3, r3, #32
 801388a:	2b00      	cmp	r3, #0
 801388c:	d037      	beq.n	80138fe <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801388e:	687b      	ldr	r3, [r7, #4]
 8013890:	8b5b      	ldrh	r3, [r3, #26]
 8013892:	f043 0302 	orr.w	r3, r3, #2
 8013896:	b29a      	uxth	r2, r3
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	2207      	movs	r2, #7
 80138a0:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 80138a2:	e02c      	b.n	80138fe <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80138a4:	4b40      	ldr	r3, [pc, #256]	; (80139a8 <tcp_process+0x5a8>)
 80138a6:	6819      	ldr	r1, [r3, #0]
 80138a8:	4b40      	ldr	r3, [pc, #256]	; (80139ac <tcp_process+0x5ac>)
 80138aa:	881b      	ldrh	r3, [r3, #0]
 80138ac:	461a      	mov	r2, r3
 80138ae:	4b40      	ldr	r3, [pc, #256]	; (80139b0 <tcp_process+0x5b0>)
 80138b0:	681b      	ldr	r3, [r3, #0]
 80138b2:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80138b4:	4b3f      	ldr	r3, [pc, #252]	; (80139b4 <tcp_process+0x5b4>)
 80138b6:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80138b8:	885b      	ldrh	r3, [r3, #2]
 80138ba:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80138bc:	4a3d      	ldr	r2, [pc, #244]	; (80139b4 <tcp_process+0x5b4>)
 80138be:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80138c0:	8812      	ldrh	r2, [r2, #0]
 80138c2:	b292      	uxth	r2, r2
 80138c4:	9202      	str	r2, [sp, #8]
 80138c6:	9301      	str	r3, [sp, #4]
 80138c8:	4b3b      	ldr	r3, [pc, #236]	; (80139b8 <tcp_process+0x5b8>)
 80138ca:	9300      	str	r3, [sp, #0]
 80138cc:	4b3b      	ldr	r3, [pc, #236]	; (80139bc <tcp_process+0x5bc>)
 80138ce:	4602      	mov	r2, r0
 80138d0:	6878      	ldr	r0, [r7, #4]
 80138d2:	f003 f827 	bl	8016924 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80138d6:	e167      	b.n	8013ba8 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80138d8:	4b32      	ldr	r3, [pc, #200]	; (80139a4 <tcp_process+0x5a4>)
 80138da:	781b      	ldrb	r3, [r3, #0]
 80138dc:	f003 0302 	and.w	r3, r3, #2
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	f000 8161 	beq.w	8013ba8 <tcp_process+0x7a8>
 80138e6:	687b      	ldr	r3, [r7, #4]
 80138e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138ea:	1e5a      	subs	r2, r3, #1
 80138ec:	4b30      	ldr	r3, [pc, #192]	; (80139b0 <tcp_process+0x5b0>)
 80138ee:	681b      	ldr	r3, [r3, #0]
 80138f0:	429a      	cmp	r2, r3
 80138f2:	f040 8159 	bne.w	8013ba8 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80138f6:	6878      	ldr	r0, [r7, #4]
 80138f8:	f002 fe0c 	bl	8016514 <tcp_rexmit>
      break;
 80138fc:	e154      	b.n	8013ba8 <tcp_process+0x7a8>
 80138fe:	e153      	b.n	8013ba8 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8013900:	6878      	ldr	r0, [r7, #4]
 8013902:	f000 fa71 	bl	8013de8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8013906:	4b32      	ldr	r3, [pc, #200]	; (80139d0 <tcp_process+0x5d0>)
 8013908:	781b      	ldrb	r3, [r3, #0]
 801390a:	f003 0320 	and.w	r3, r3, #32
 801390e:	2b00      	cmp	r3, #0
 8013910:	f000 814c 	beq.w	8013bac <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8013914:	687b      	ldr	r3, [r7, #4]
 8013916:	8b5b      	ldrh	r3, [r3, #26]
 8013918:	f043 0302 	orr.w	r3, r3, #2
 801391c:	b29a      	uxth	r2, r3
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	2207      	movs	r2, #7
 8013926:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013928:	e140      	b.n	8013bac <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801392a:	6878      	ldr	r0, [r7, #4]
 801392c:	f000 fa5c 	bl	8013de8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013930:	4b27      	ldr	r3, [pc, #156]	; (80139d0 <tcp_process+0x5d0>)
 8013932:	781b      	ldrb	r3, [r3, #0]
 8013934:	f003 0320 	and.w	r3, r3, #32
 8013938:	2b00      	cmp	r3, #0
 801393a:	d071      	beq.n	8013a20 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801393c:	4b19      	ldr	r3, [pc, #100]	; (80139a4 <tcp_process+0x5a4>)
 801393e:	781b      	ldrb	r3, [r3, #0]
 8013940:	f003 0310 	and.w	r3, r3, #16
 8013944:	2b00      	cmp	r3, #0
 8013946:	d060      	beq.n	8013a0a <tcp_process+0x60a>
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801394c:	4b16      	ldr	r3, [pc, #88]	; (80139a8 <tcp_process+0x5a8>)
 801394e:	681b      	ldr	r3, [r3, #0]
 8013950:	429a      	cmp	r2, r3
 8013952:	d15a      	bne.n	8013a0a <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013958:	2b00      	cmp	r3, #0
 801395a:	d156      	bne.n	8013a0a <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	8b5b      	ldrh	r3, [r3, #26]
 8013960:	f043 0302 	orr.w	r3, r3, #2
 8013964:	b29a      	uxth	r2, r3
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801396a:	6878      	ldr	r0, [r7, #4]
 801396c:	f7fe fdbe 	bl	80124ec <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013970:	4b18      	ldr	r3, [pc, #96]	; (80139d4 <tcp_process+0x5d4>)
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	687a      	ldr	r2, [r7, #4]
 8013976:	429a      	cmp	r2, r3
 8013978:	d105      	bne.n	8013986 <tcp_process+0x586>
 801397a:	4b16      	ldr	r3, [pc, #88]	; (80139d4 <tcp_process+0x5d4>)
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	68db      	ldr	r3, [r3, #12]
 8013980:	4a14      	ldr	r2, [pc, #80]	; (80139d4 <tcp_process+0x5d4>)
 8013982:	6013      	str	r3, [r2, #0]
 8013984:	e02e      	b.n	80139e4 <tcp_process+0x5e4>
 8013986:	4b13      	ldr	r3, [pc, #76]	; (80139d4 <tcp_process+0x5d4>)
 8013988:	681b      	ldr	r3, [r3, #0]
 801398a:	617b      	str	r3, [r7, #20]
 801398c:	e027      	b.n	80139de <tcp_process+0x5de>
 801398e:	697b      	ldr	r3, [r7, #20]
 8013990:	68db      	ldr	r3, [r3, #12]
 8013992:	687a      	ldr	r2, [r7, #4]
 8013994:	429a      	cmp	r2, r3
 8013996:	d11f      	bne.n	80139d8 <tcp_process+0x5d8>
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	68da      	ldr	r2, [r3, #12]
 801399c:	697b      	ldr	r3, [r7, #20]
 801399e:	60da      	str	r2, [r3, #12]
 80139a0:	e020      	b.n	80139e4 <tcp_process+0x5e4>
 80139a2:	bf00      	nop
 80139a4:	200069c0 	.word	0x200069c0
 80139a8:	200069b8 	.word	0x200069b8
 80139ac:	200069be 	.word	0x200069be
 80139b0:	200069b4 	.word	0x200069b4
 80139b4:	200069a4 	.word	0x200069a4
 80139b8:	2000a640 	.word	0x2000a640
 80139bc:	2000a644 	.word	0x2000a644
 80139c0:	0801d658 	.word	0x0801d658
 80139c4:	0801d8f8 	.word	0x0801d8f8
 80139c8:	0801d6a4 	.word	0x0801d6a4
 80139cc:	200069bc 	.word	0x200069bc
 80139d0:	200069c1 	.word	0x200069c1
 80139d4:	2000dd44 	.word	0x2000dd44
 80139d8:	697b      	ldr	r3, [r7, #20]
 80139da:	68db      	ldr	r3, [r3, #12]
 80139dc:	617b      	str	r3, [r7, #20]
 80139de:	697b      	ldr	r3, [r7, #20]
 80139e0:	2b00      	cmp	r3, #0
 80139e2:	d1d4      	bne.n	801398e <tcp_process+0x58e>
 80139e4:	687b      	ldr	r3, [r7, #4]
 80139e6:	2200      	movs	r2, #0
 80139e8:	60da      	str	r2, [r3, #12]
 80139ea:	4b77      	ldr	r3, [pc, #476]	; (8013bc8 <tcp_process+0x7c8>)
 80139ec:	2201      	movs	r2, #1
 80139ee:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	220a      	movs	r2, #10
 80139f4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80139f6:	4b75      	ldr	r3, [pc, #468]	; (8013bcc <tcp_process+0x7cc>)
 80139f8:	681a      	ldr	r2, [r3, #0]
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	60da      	str	r2, [r3, #12]
 80139fe:	4a73      	ldr	r2, [pc, #460]	; (8013bcc <tcp_process+0x7cc>)
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	6013      	str	r3, [r2, #0]
 8013a04:	f003 f950 	bl	8016ca8 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8013a08:	e0d2      	b.n	8013bb0 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	8b5b      	ldrh	r3, [r3, #26]
 8013a0e:	f043 0302 	orr.w	r3, r3, #2
 8013a12:	b29a      	uxth	r2, r3
 8013a14:	687b      	ldr	r3, [r7, #4]
 8013a16:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8013a18:	687b      	ldr	r3, [r7, #4]
 8013a1a:	2208      	movs	r2, #8
 8013a1c:	751a      	strb	r2, [r3, #20]
      break;
 8013a1e:	e0c7      	b.n	8013bb0 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013a20:	4b6b      	ldr	r3, [pc, #428]	; (8013bd0 <tcp_process+0x7d0>)
 8013a22:	781b      	ldrb	r3, [r3, #0]
 8013a24:	f003 0310 	and.w	r3, r3, #16
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	f000 80c1 	beq.w	8013bb0 <tcp_process+0x7b0>
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013a32:	4b68      	ldr	r3, [pc, #416]	; (8013bd4 <tcp_process+0x7d4>)
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	429a      	cmp	r2, r3
 8013a38:	f040 80ba 	bne.w	8013bb0 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013a40:	2b00      	cmp	r3, #0
 8013a42:	f040 80b5 	bne.w	8013bb0 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	2206      	movs	r2, #6
 8013a4a:	751a      	strb	r2, [r3, #20]
      break;
 8013a4c:	e0b0      	b.n	8013bb0 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8013a4e:	6878      	ldr	r0, [r7, #4]
 8013a50:	f000 f9ca 	bl	8013de8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013a54:	4b60      	ldr	r3, [pc, #384]	; (8013bd8 <tcp_process+0x7d8>)
 8013a56:	781b      	ldrb	r3, [r3, #0]
 8013a58:	f003 0320 	and.w	r3, r3, #32
 8013a5c:	2b00      	cmp	r3, #0
 8013a5e:	f000 80a9 	beq.w	8013bb4 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	8b5b      	ldrh	r3, [r3, #26]
 8013a66:	f043 0302 	orr.w	r3, r3, #2
 8013a6a:	b29a      	uxth	r2, r3
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013a70:	6878      	ldr	r0, [r7, #4]
 8013a72:	f7fe fd3b 	bl	80124ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013a76:	4b59      	ldr	r3, [pc, #356]	; (8013bdc <tcp_process+0x7dc>)
 8013a78:	681b      	ldr	r3, [r3, #0]
 8013a7a:	687a      	ldr	r2, [r7, #4]
 8013a7c:	429a      	cmp	r2, r3
 8013a7e:	d105      	bne.n	8013a8c <tcp_process+0x68c>
 8013a80:	4b56      	ldr	r3, [pc, #344]	; (8013bdc <tcp_process+0x7dc>)
 8013a82:	681b      	ldr	r3, [r3, #0]
 8013a84:	68db      	ldr	r3, [r3, #12]
 8013a86:	4a55      	ldr	r2, [pc, #340]	; (8013bdc <tcp_process+0x7dc>)
 8013a88:	6013      	str	r3, [r2, #0]
 8013a8a:	e013      	b.n	8013ab4 <tcp_process+0x6b4>
 8013a8c:	4b53      	ldr	r3, [pc, #332]	; (8013bdc <tcp_process+0x7dc>)
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	613b      	str	r3, [r7, #16]
 8013a92:	e00c      	b.n	8013aae <tcp_process+0x6ae>
 8013a94:	693b      	ldr	r3, [r7, #16]
 8013a96:	68db      	ldr	r3, [r3, #12]
 8013a98:	687a      	ldr	r2, [r7, #4]
 8013a9a:	429a      	cmp	r2, r3
 8013a9c:	d104      	bne.n	8013aa8 <tcp_process+0x6a8>
 8013a9e:	687b      	ldr	r3, [r7, #4]
 8013aa0:	68da      	ldr	r2, [r3, #12]
 8013aa2:	693b      	ldr	r3, [r7, #16]
 8013aa4:	60da      	str	r2, [r3, #12]
 8013aa6:	e005      	b.n	8013ab4 <tcp_process+0x6b4>
 8013aa8:	693b      	ldr	r3, [r7, #16]
 8013aaa:	68db      	ldr	r3, [r3, #12]
 8013aac:	613b      	str	r3, [r7, #16]
 8013aae:	693b      	ldr	r3, [r7, #16]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d1ef      	bne.n	8013a94 <tcp_process+0x694>
 8013ab4:	687b      	ldr	r3, [r7, #4]
 8013ab6:	2200      	movs	r2, #0
 8013ab8:	60da      	str	r2, [r3, #12]
 8013aba:	4b43      	ldr	r3, [pc, #268]	; (8013bc8 <tcp_process+0x7c8>)
 8013abc:	2201      	movs	r2, #1
 8013abe:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013ac0:	687b      	ldr	r3, [r7, #4]
 8013ac2:	220a      	movs	r2, #10
 8013ac4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013ac6:	4b41      	ldr	r3, [pc, #260]	; (8013bcc <tcp_process+0x7cc>)
 8013ac8:	681a      	ldr	r2, [r3, #0]
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	60da      	str	r2, [r3, #12]
 8013ace:	4a3f      	ldr	r2, [pc, #252]	; (8013bcc <tcp_process+0x7cc>)
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	6013      	str	r3, [r2, #0]
 8013ad4:	f003 f8e8 	bl	8016ca8 <tcp_timer_needed>
      }
      break;
 8013ad8:	e06c      	b.n	8013bb4 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8013ada:	6878      	ldr	r0, [r7, #4]
 8013adc:	f000 f984 	bl	8013de8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013ae0:	4b3b      	ldr	r3, [pc, #236]	; (8013bd0 <tcp_process+0x7d0>)
 8013ae2:	781b      	ldrb	r3, [r3, #0]
 8013ae4:	f003 0310 	and.w	r3, r3, #16
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d065      	beq.n	8013bb8 <tcp_process+0x7b8>
 8013aec:	687b      	ldr	r3, [r7, #4]
 8013aee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013af0:	4b38      	ldr	r3, [pc, #224]	; (8013bd4 <tcp_process+0x7d4>)
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	429a      	cmp	r2, r3
 8013af6:	d15f      	bne.n	8013bb8 <tcp_process+0x7b8>
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d15b      	bne.n	8013bb8 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8013b00:	6878      	ldr	r0, [r7, #4]
 8013b02:	f7fe fcf3 	bl	80124ec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013b06:	4b35      	ldr	r3, [pc, #212]	; (8013bdc <tcp_process+0x7dc>)
 8013b08:	681b      	ldr	r3, [r3, #0]
 8013b0a:	687a      	ldr	r2, [r7, #4]
 8013b0c:	429a      	cmp	r2, r3
 8013b0e:	d105      	bne.n	8013b1c <tcp_process+0x71c>
 8013b10:	4b32      	ldr	r3, [pc, #200]	; (8013bdc <tcp_process+0x7dc>)
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	68db      	ldr	r3, [r3, #12]
 8013b16:	4a31      	ldr	r2, [pc, #196]	; (8013bdc <tcp_process+0x7dc>)
 8013b18:	6013      	str	r3, [r2, #0]
 8013b1a:	e013      	b.n	8013b44 <tcp_process+0x744>
 8013b1c:	4b2f      	ldr	r3, [pc, #188]	; (8013bdc <tcp_process+0x7dc>)
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	60fb      	str	r3, [r7, #12]
 8013b22:	e00c      	b.n	8013b3e <tcp_process+0x73e>
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	68db      	ldr	r3, [r3, #12]
 8013b28:	687a      	ldr	r2, [r7, #4]
 8013b2a:	429a      	cmp	r2, r3
 8013b2c:	d104      	bne.n	8013b38 <tcp_process+0x738>
 8013b2e:	687b      	ldr	r3, [r7, #4]
 8013b30:	68da      	ldr	r2, [r3, #12]
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	60da      	str	r2, [r3, #12]
 8013b36:	e005      	b.n	8013b44 <tcp_process+0x744>
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	68db      	ldr	r3, [r3, #12]
 8013b3c:	60fb      	str	r3, [r7, #12]
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d1ef      	bne.n	8013b24 <tcp_process+0x724>
 8013b44:	687b      	ldr	r3, [r7, #4]
 8013b46:	2200      	movs	r2, #0
 8013b48:	60da      	str	r2, [r3, #12]
 8013b4a:	4b1f      	ldr	r3, [pc, #124]	; (8013bc8 <tcp_process+0x7c8>)
 8013b4c:	2201      	movs	r2, #1
 8013b4e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013b50:	687b      	ldr	r3, [r7, #4]
 8013b52:	220a      	movs	r2, #10
 8013b54:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013b56:	4b1d      	ldr	r3, [pc, #116]	; (8013bcc <tcp_process+0x7cc>)
 8013b58:	681a      	ldr	r2, [r3, #0]
 8013b5a:	687b      	ldr	r3, [r7, #4]
 8013b5c:	60da      	str	r2, [r3, #12]
 8013b5e:	4a1b      	ldr	r2, [pc, #108]	; (8013bcc <tcp_process+0x7cc>)
 8013b60:	687b      	ldr	r3, [r7, #4]
 8013b62:	6013      	str	r3, [r2, #0]
 8013b64:	f003 f8a0 	bl	8016ca8 <tcp_timer_needed>
      }
      break;
 8013b68:	e026      	b.n	8013bb8 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8013b6a:	6878      	ldr	r0, [r7, #4]
 8013b6c:	f000 f93c 	bl	8013de8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8013b70:	4b17      	ldr	r3, [pc, #92]	; (8013bd0 <tcp_process+0x7d0>)
 8013b72:	781b      	ldrb	r3, [r3, #0]
 8013b74:	f003 0310 	and.w	r3, r3, #16
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d01f      	beq.n	8013bbc <tcp_process+0x7bc>
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013b80:	4b14      	ldr	r3, [pc, #80]	; (8013bd4 <tcp_process+0x7d4>)
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	429a      	cmp	r2, r3
 8013b86:	d119      	bne.n	8013bbc <tcp_process+0x7bc>
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d115      	bne.n	8013bbc <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8013b90:	4b11      	ldr	r3, [pc, #68]	; (8013bd8 <tcp_process+0x7d8>)
 8013b92:	781b      	ldrb	r3, [r3, #0]
 8013b94:	f043 0310 	orr.w	r3, r3, #16
 8013b98:	b2da      	uxtb	r2, r3
 8013b9a:	4b0f      	ldr	r3, [pc, #60]	; (8013bd8 <tcp_process+0x7d8>)
 8013b9c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8013b9e:	e00d      	b.n	8013bbc <tcp_process+0x7bc>
    default:
      break;
 8013ba0:	bf00      	nop
 8013ba2:	e00c      	b.n	8013bbe <tcp_process+0x7be>
      break;
 8013ba4:	bf00      	nop
 8013ba6:	e00a      	b.n	8013bbe <tcp_process+0x7be>
      break;
 8013ba8:	bf00      	nop
 8013baa:	e008      	b.n	8013bbe <tcp_process+0x7be>
      break;
 8013bac:	bf00      	nop
 8013bae:	e006      	b.n	8013bbe <tcp_process+0x7be>
      break;
 8013bb0:	bf00      	nop
 8013bb2:	e004      	b.n	8013bbe <tcp_process+0x7be>
      break;
 8013bb4:	bf00      	nop
 8013bb6:	e002      	b.n	8013bbe <tcp_process+0x7be>
      break;
 8013bb8:	bf00      	nop
 8013bba:	e000      	b.n	8013bbe <tcp_process+0x7be>
      break;
 8013bbc:	bf00      	nop
  }
  return ERR_OK;
 8013bbe:	2300      	movs	r3, #0
}
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	3724      	adds	r7, #36	; 0x24
 8013bc4:	46bd      	mov	sp, r7
 8013bc6:	bd90      	pop	{r4, r7, pc}
 8013bc8:	2000dd40 	.word	0x2000dd40
 8013bcc:	2000dd54 	.word	0x2000dd54
 8013bd0:	200069c0 	.word	0x200069c0
 8013bd4:	200069b8 	.word	0x200069b8
 8013bd8:	200069c1 	.word	0x200069c1
 8013bdc:	2000dd44 	.word	0x2000dd44

08013be0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8013be0:	b590      	push	{r4, r7, lr}
 8013be2:	b085      	sub	sp, #20
 8013be4:	af00      	add	r7, sp, #0
 8013be6:	6078      	str	r0, [r7, #4]
 8013be8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d106      	bne.n	8013bfe <tcp_oos_insert_segment+0x1e>
 8013bf0:	4b3b      	ldr	r3, [pc, #236]	; (8013ce0 <tcp_oos_insert_segment+0x100>)
 8013bf2:	f240 421f 	movw	r2, #1055	; 0x41f
 8013bf6:	493b      	ldr	r1, [pc, #236]	; (8013ce4 <tcp_oos_insert_segment+0x104>)
 8013bf8:	483b      	ldr	r0, [pc, #236]	; (8013ce8 <tcp_oos_insert_segment+0x108>)
 8013bfa:	f006 fd65 	bl	801a6c8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	68db      	ldr	r3, [r3, #12]
 8013c02:	899b      	ldrh	r3, [r3, #12]
 8013c04:	b29b      	uxth	r3, r3
 8013c06:	4618      	mov	r0, r3
 8013c08:	f7fb faa4 	bl	800f154 <lwip_htons>
 8013c0c:	4603      	mov	r3, r0
 8013c0e:	b2db      	uxtb	r3, r3
 8013c10:	f003 0301 	and.w	r3, r3, #1
 8013c14:	2b00      	cmp	r3, #0
 8013c16:	d028      	beq.n	8013c6a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8013c18:	6838      	ldr	r0, [r7, #0]
 8013c1a:	f7fe f997 	bl	8011f4c <tcp_segs_free>
    next = NULL;
 8013c1e:	2300      	movs	r3, #0
 8013c20:	603b      	str	r3, [r7, #0]
 8013c22:	e056      	b.n	8013cd2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013c24:	683b      	ldr	r3, [r7, #0]
 8013c26:	68db      	ldr	r3, [r3, #12]
 8013c28:	899b      	ldrh	r3, [r3, #12]
 8013c2a:	b29b      	uxth	r3, r3
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	f7fb fa91 	bl	800f154 <lwip_htons>
 8013c32:	4603      	mov	r3, r0
 8013c34:	b2db      	uxtb	r3, r3
 8013c36:	f003 0301 	and.w	r3, r3, #1
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d00d      	beq.n	8013c5a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8013c3e:	687b      	ldr	r3, [r7, #4]
 8013c40:	68db      	ldr	r3, [r3, #12]
 8013c42:	899b      	ldrh	r3, [r3, #12]
 8013c44:	b29c      	uxth	r4, r3
 8013c46:	2001      	movs	r0, #1
 8013c48:	f7fb fa84 	bl	800f154 <lwip_htons>
 8013c4c:	4603      	mov	r3, r0
 8013c4e:	461a      	mov	r2, r3
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	68db      	ldr	r3, [r3, #12]
 8013c54:	4322      	orrs	r2, r4
 8013c56:	b292      	uxth	r2, r2
 8013c58:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8013c5a:	683b      	ldr	r3, [r7, #0]
 8013c5c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8013c5e:	683b      	ldr	r3, [r7, #0]
 8013c60:	681b      	ldr	r3, [r3, #0]
 8013c62:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8013c64:	68f8      	ldr	r0, [r7, #12]
 8013c66:	f7fe f986 	bl	8011f76 <tcp_seg_free>
    while (next &&
 8013c6a:	683b      	ldr	r3, [r7, #0]
 8013c6c:	2b00      	cmp	r3, #0
 8013c6e:	d00e      	beq.n	8013c8e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8013c70:	687b      	ldr	r3, [r7, #4]
 8013c72:	891b      	ldrh	r3, [r3, #8]
 8013c74:	461a      	mov	r2, r3
 8013c76:	4b1d      	ldr	r3, [pc, #116]	; (8013cec <tcp_oos_insert_segment+0x10c>)
 8013c78:	681b      	ldr	r3, [r3, #0]
 8013c7a:	441a      	add	r2, r3
 8013c7c:	683b      	ldr	r3, [r7, #0]
 8013c7e:	68db      	ldr	r3, [r3, #12]
 8013c80:	685b      	ldr	r3, [r3, #4]
 8013c82:	6839      	ldr	r1, [r7, #0]
 8013c84:	8909      	ldrh	r1, [r1, #8]
 8013c86:	440b      	add	r3, r1
 8013c88:	1ad3      	subs	r3, r2, r3
    while (next &&
 8013c8a:	2b00      	cmp	r3, #0
 8013c8c:	daca      	bge.n	8013c24 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8013c8e:	683b      	ldr	r3, [r7, #0]
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d01e      	beq.n	8013cd2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	891b      	ldrh	r3, [r3, #8]
 8013c98:	461a      	mov	r2, r3
 8013c9a:	4b14      	ldr	r3, [pc, #80]	; (8013cec <tcp_oos_insert_segment+0x10c>)
 8013c9c:	681b      	ldr	r3, [r3, #0]
 8013c9e:	441a      	add	r2, r3
 8013ca0:	683b      	ldr	r3, [r7, #0]
 8013ca2:	68db      	ldr	r3, [r3, #12]
 8013ca4:	685b      	ldr	r3, [r3, #4]
 8013ca6:	1ad3      	subs	r3, r2, r3
    if (next &&
 8013ca8:	2b00      	cmp	r3, #0
 8013caa:	dd12      	ble.n	8013cd2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8013cac:	683b      	ldr	r3, [r7, #0]
 8013cae:	68db      	ldr	r3, [r3, #12]
 8013cb0:	685b      	ldr	r3, [r3, #4]
 8013cb2:	b29a      	uxth	r2, r3
 8013cb4:	4b0d      	ldr	r3, [pc, #52]	; (8013cec <tcp_oos_insert_segment+0x10c>)
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	b29b      	uxth	r3, r3
 8013cba:	1ad3      	subs	r3, r2, r3
 8013cbc:	b29a      	uxth	r2, r3
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	685a      	ldr	r2, [r3, #4]
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	891b      	ldrh	r3, [r3, #8]
 8013cca:	4619      	mov	r1, r3
 8013ccc:	4610      	mov	r0, r2
 8013cce:	f7fc fc03 	bl	80104d8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	683a      	ldr	r2, [r7, #0]
 8013cd6:	601a      	str	r2, [r3, #0]
}
 8013cd8:	bf00      	nop
 8013cda:	3714      	adds	r7, #20
 8013cdc:	46bd      	mov	sp, r7
 8013cde:	bd90      	pop	{r4, r7, pc}
 8013ce0:	0801d658 	.word	0x0801d658
 8013ce4:	0801d918 	.word	0x0801d918
 8013ce8:	0801d6a4 	.word	0x0801d6a4
 8013cec:	200069b4 	.word	0x200069b4

08013cf0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8013cf0:	b5b0      	push	{r4, r5, r7, lr}
 8013cf2:	b086      	sub	sp, #24
 8013cf4:	af00      	add	r7, sp, #0
 8013cf6:	60f8      	str	r0, [r7, #12]
 8013cf8:	60b9      	str	r1, [r7, #8]
 8013cfa:	607a      	str	r2, [r7, #4]
 8013cfc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8013cfe:	e03e      	b.n	8013d7e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8013d00:	68bb      	ldr	r3, [r7, #8]
 8013d02:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8013d04:	68bb      	ldr	r3, [r7, #8]
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8013d0a:	697b      	ldr	r3, [r7, #20]
 8013d0c:	685b      	ldr	r3, [r3, #4]
 8013d0e:	4618      	mov	r0, r3
 8013d10:	f7fc fdf6 	bl	8010900 <pbuf_clen>
 8013d14:	4603      	mov	r3, r0
 8013d16:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013d1e:	8a7a      	ldrh	r2, [r7, #18]
 8013d20:	429a      	cmp	r2, r3
 8013d22:	d906      	bls.n	8013d32 <tcp_free_acked_segments+0x42>
 8013d24:	4b2a      	ldr	r3, [pc, #168]	; (8013dd0 <tcp_free_acked_segments+0xe0>)
 8013d26:	f240 4257 	movw	r2, #1111	; 0x457
 8013d2a:	492a      	ldr	r1, [pc, #168]	; (8013dd4 <tcp_free_acked_segments+0xe4>)
 8013d2c:	482a      	ldr	r0, [pc, #168]	; (8013dd8 <tcp_free_acked_segments+0xe8>)
 8013d2e:	f006 fccb 	bl	801a6c8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8013d38:	8a7b      	ldrh	r3, [r7, #18]
 8013d3a:	1ad3      	subs	r3, r2, r3
 8013d3c:	b29a      	uxth	r2, r3
 8013d3e:	68fb      	ldr	r3, [r7, #12]
 8013d40:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8013d44:	697b      	ldr	r3, [r7, #20]
 8013d46:	891a      	ldrh	r2, [r3, #8]
 8013d48:	4b24      	ldr	r3, [pc, #144]	; (8013ddc <tcp_free_acked_segments+0xec>)
 8013d4a:	881b      	ldrh	r3, [r3, #0]
 8013d4c:	4413      	add	r3, r2
 8013d4e:	b29a      	uxth	r2, r3
 8013d50:	4b22      	ldr	r3, [pc, #136]	; (8013ddc <tcp_free_acked_segments+0xec>)
 8013d52:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8013d54:	6978      	ldr	r0, [r7, #20]
 8013d56:	f7fe f90e 	bl	8011f76 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d00c      	beq.n	8013d7e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8013d64:	68bb      	ldr	r3, [r7, #8]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d109      	bne.n	8013d7e <tcp_free_acked_segments+0x8e>
 8013d6a:	683b      	ldr	r3, [r7, #0]
 8013d6c:	2b00      	cmp	r3, #0
 8013d6e:	d106      	bne.n	8013d7e <tcp_free_acked_segments+0x8e>
 8013d70:	4b17      	ldr	r3, [pc, #92]	; (8013dd0 <tcp_free_acked_segments+0xe0>)
 8013d72:	f240 4261 	movw	r2, #1121	; 0x461
 8013d76:	491a      	ldr	r1, [pc, #104]	; (8013de0 <tcp_free_acked_segments+0xf0>)
 8013d78:	4817      	ldr	r0, [pc, #92]	; (8013dd8 <tcp_free_acked_segments+0xe8>)
 8013d7a:	f006 fca5 	bl	801a6c8 <iprintf>
  while (seg_list != NULL &&
 8013d7e:	68bb      	ldr	r3, [r7, #8]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d020      	beq.n	8013dc6 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8013d84:	68bb      	ldr	r3, [r7, #8]
 8013d86:	68db      	ldr	r3, [r3, #12]
 8013d88:	685b      	ldr	r3, [r3, #4]
 8013d8a:	4618      	mov	r0, r3
 8013d8c:	f7fb f9f7 	bl	800f17e <lwip_htonl>
 8013d90:	4604      	mov	r4, r0
 8013d92:	68bb      	ldr	r3, [r7, #8]
 8013d94:	891b      	ldrh	r3, [r3, #8]
 8013d96:	461d      	mov	r5, r3
 8013d98:	68bb      	ldr	r3, [r7, #8]
 8013d9a:	68db      	ldr	r3, [r3, #12]
 8013d9c:	899b      	ldrh	r3, [r3, #12]
 8013d9e:	b29b      	uxth	r3, r3
 8013da0:	4618      	mov	r0, r3
 8013da2:	f7fb f9d7 	bl	800f154 <lwip_htons>
 8013da6:	4603      	mov	r3, r0
 8013da8:	b2db      	uxtb	r3, r3
 8013daa:	f003 0303 	and.w	r3, r3, #3
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d001      	beq.n	8013db6 <tcp_free_acked_segments+0xc6>
 8013db2:	2301      	movs	r3, #1
 8013db4:	e000      	b.n	8013db8 <tcp_free_acked_segments+0xc8>
 8013db6:	2300      	movs	r3, #0
 8013db8:	442b      	add	r3, r5
 8013dba:	18e2      	adds	r2, r4, r3
 8013dbc:	4b09      	ldr	r3, [pc, #36]	; (8013de4 <tcp_free_acked_segments+0xf4>)
 8013dbe:	681b      	ldr	r3, [r3, #0]
 8013dc0:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	dd9c      	ble.n	8013d00 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8013dc6:	68bb      	ldr	r3, [r7, #8]
}
 8013dc8:	4618      	mov	r0, r3
 8013dca:	3718      	adds	r7, #24
 8013dcc:	46bd      	mov	sp, r7
 8013dce:	bdb0      	pop	{r4, r5, r7, pc}
 8013dd0:	0801d658 	.word	0x0801d658
 8013dd4:	0801d940 	.word	0x0801d940
 8013dd8:	0801d6a4 	.word	0x0801d6a4
 8013ddc:	200069bc 	.word	0x200069bc
 8013de0:	0801d968 	.word	0x0801d968
 8013de4:	200069b8 	.word	0x200069b8

08013de8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8013de8:	b5b0      	push	{r4, r5, r7, lr}
 8013dea:	b094      	sub	sp, #80	; 0x50
 8013dec:	af00      	add	r7, sp, #0
 8013dee:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8013df0:	2300      	movs	r3, #0
 8013df2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	2b00      	cmp	r3, #0
 8013df8:	d106      	bne.n	8013e08 <tcp_receive+0x20>
 8013dfa:	4ba6      	ldr	r3, [pc, #664]	; (8014094 <tcp_receive+0x2ac>)
 8013dfc:	f240 427b 	movw	r2, #1147	; 0x47b
 8013e00:	49a5      	ldr	r1, [pc, #660]	; (8014098 <tcp_receive+0x2b0>)
 8013e02:	48a6      	ldr	r0, [pc, #664]	; (801409c <tcp_receive+0x2b4>)
 8013e04:	f006 fc60 	bl	801a6c8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	7d1b      	ldrb	r3, [r3, #20]
 8013e0c:	2b03      	cmp	r3, #3
 8013e0e:	d806      	bhi.n	8013e1e <tcp_receive+0x36>
 8013e10:	4ba0      	ldr	r3, [pc, #640]	; (8014094 <tcp_receive+0x2ac>)
 8013e12:	f240 427c 	movw	r2, #1148	; 0x47c
 8013e16:	49a2      	ldr	r1, [pc, #648]	; (80140a0 <tcp_receive+0x2b8>)
 8013e18:	48a0      	ldr	r0, [pc, #640]	; (801409c <tcp_receive+0x2b4>)
 8013e1a:	f006 fc55 	bl	801a6c8 <iprintf>

  if (flags & TCP_ACK) {
 8013e1e:	4ba1      	ldr	r3, [pc, #644]	; (80140a4 <tcp_receive+0x2bc>)
 8013e20:	781b      	ldrb	r3, [r3, #0]
 8013e22:	f003 0310 	and.w	r3, r3, #16
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	f000 8263 	beq.w	80142f2 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013e32:	461a      	mov	r2, r3
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013e38:	4413      	add	r3, r2
 8013e3a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013e40:	4b99      	ldr	r3, [pc, #612]	; (80140a8 <tcp_receive+0x2c0>)
 8013e42:	681b      	ldr	r3, [r3, #0]
 8013e44:	1ad3      	subs	r3, r2, r3
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	db1b      	blt.n	8013e82 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8013e4e:	4b96      	ldr	r3, [pc, #600]	; (80140a8 <tcp_receive+0x2c0>)
 8013e50:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8013e52:	429a      	cmp	r2, r3
 8013e54:	d106      	bne.n	8013e64 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013e56:	687b      	ldr	r3, [r7, #4]
 8013e58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013e5a:	4b94      	ldr	r3, [pc, #592]	; (80140ac <tcp_receive+0x2c4>)
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	1ad3      	subs	r3, r2, r3
 8013e60:	2b00      	cmp	r3, #0
 8013e62:	db0e      	blt.n	8013e82 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8013e68:	4b90      	ldr	r3, [pc, #576]	; (80140ac <tcp_receive+0x2c4>)
 8013e6a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8013e6c:	429a      	cmp	r2, r3
 8013e6e:	d125      	bne.n	8013ebc <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8013e70:	4b8f      	ldr	r3, [pc, #572]	; (80140b0 <tcp_receive+0x2c8>)
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	89db      	ldrh	r3, [r3, #14]
 8013e76:	b29a      	uxth	r2, r3
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013e7e:	429a      	cmp	r2, r3
 8013e80:	d91c      	bls.n	8013ebc <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8013e82:	4b8b      	ldr	r3, [pc, #556]	; (80140b0 <tcp_receive+0x2c8>)
 8013e84:	681b      	ldr	r3, [r3, #0]
 8013e86:	89db      	ldrh	r3, [r3, #14]
 8013e88:	b29a      	uxth	r2, r3
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8013e9c:	429a      	cmp	r2, r3
 8013e9e:	d205      	bcs.n	8013eac <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013ea6:	687b      	ldr	r3, [r7, #4]
 8013ea8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8013eac:	4b7e      	ldr	r3, [pc, #504]	; (80140a8 <tcp_receive+0x2c0>)
 8013eae:	681a      	ldr	r2, [r3, #0]
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8013eb4:	4b7d      	ldr	r3, [pc, #500]	; (80140ac <tcp_receive+0x2c4>)
 8013eb6:	681a      	ldr	r2, [r3, #0]
 8013eb8:	687b      	ldr	r3, [r7, #4]
 8013eba:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8013ebc:	4b7b      	ldr	r3, [pc, #492]	; (80140ac <tcp_receive+0x2c4>)
 8013ebe:	681a      	ldr	r2, [r3, #0]
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013ec4:	1ad3      	subs	r3, r2, r3
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	dc58      	bgt.n	8013f7c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8013eca:	4b7a      	ldr	r3, [pc, #488]	; (80140b4 <tcp_receive+0x2cc>)
 8013ecc:	881b      	ldrh	r3, [r3, #0]
 8013ece:	2b00      	cmp	r3, #0
 8013ed0:	d14b      	bne.n	8013f6a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8013ed2:	687b      	ldr	r3, [r7, #4]
 8013ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013ed6:	687a      	ldr	r2, [r7, #4]
 8013ed8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8013edc:	4413      	add	r3, r2
 8013ede:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ee0:	429a      	cmp	r2, r3
 8013ee2:	d142      	bne.n	8013f6a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	db3d      	blt.n	8013f6a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013ef2:	4b6e      	ldr	r3, [pc, #440]	; (80140ac <tcp_receive+0x2c4>)
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	429a      	cmp	r2, r3
 8013ef8:	d137      	bne.n	8013f6a <tcp_receive+0x182>
              found_dupack = 1;
 8013efa:	2301      	movs	r3, #1
 8013efc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013f04:	2bff      	cmp	r3, #255	; 0xff
 8013f06:	d007      	beq.n	8013f18 <tcp_receive+0x130>
                ++pcb->dupacks;
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013f0e:	3301      	adds	r3, #1
 8013f10:	b2da      	uxtb	r2, r3
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013f1e:	2b03      	cmp	r3, #3
 8013f20:	d91b      	bls.n	8013f5a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013f28:	687b      	ldr	r3, [r7, #4]
 8013f2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013f2c:	4413      	add	r3, r2
 8013f2e:	b29a      	uxth	r2, r3
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013f36:	429a      	cmp	r2, r3
 8013f38:	d30a      	bcc.n	8013f50 <tcp_receive+0x168>
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013f44:	4413      	add	r3, r2
 8013f46:	b29a      	uxth	r2, r3
 8013f48:	687b      	ldr	r3, [r7, #4]
 8013f4a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013f4e:	e004      	b.n	8013f5a <tcp_receive+0x172>
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013f56:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013f60:	2b02      	cmp	r3, #2
 8013f62:	d902      	bls.n	8013f6a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8013f64:	6878      	ldr	r0, [r7, #4]
 8013f66:	f002 fb41 	bl	80165ec <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8013f6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	f040 8160 	bne.w	8014232 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	2200      	movs	r2, #0
 8013f76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013f7a:	e15a      	b.n	8014232 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013f7c:	4b4b      	ldr	r3, [pc, #300]	; (80140ac <tcp_receive+0x2c4>)
 8013f7e:	681a      	ldr	r2, [r3, #0]
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013f84:	1ad3      	subs	r3, r2, r3
 8013f86:	3b01      	subs	r3, #1
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	f2c0 814d 	blt.w	8014228 <tcp_receive+0x440>
 8013f8e:	4b47      	ldr	r3, [pc, #284]	; (80140ac <tcp_receive+0x2c4>)
 8013f90:	681a      	ldr	r2, [r3, #0]
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013f96:	1ad3      	subs	r3, r2, r3
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	f300 8145 	bgt.w	8014228 <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	8b5b      	ldrh	r3, [r3, #26]
 8013fa2:	f003 0304 	and.w	r3, r3, #4
 8013fa6:	2b00      	cmp	r3, #0
 8013fa8:	d010      	beq.n	8013fcc <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	8b5b      	ldrh	r3, [r3, #26]
 8013fae:	f023 0304 	bic.w	r3, r3, #4
 8013fb2:	b29a      	uxth	r2, r3
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8013fb8:	687b      	ldr	r3, [r7, #4]
 8013fba:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013fbe:	687b      	ldr	r3, [r7, #4]
 8013fc0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8013fc4:	687b      	ldr	r3, [r7, #4]
 8013fc6:	2200      	movs	r2, #0
 8013fc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	2200      	movs	r2, #0
 8013fd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013fda:	10db      	asrs	r3, r3, #3
 8013fdc:	b21b      	sxth	r3, r3
 8013fde:	b29a      	uxth	r2, r3
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013fe6:	b29b      	uxth	r3, r3
 8013fe8:	4413      	add	r3, r2
 8013fea:	b29b      	uxth	r3, r3
 8013fec:	b21a      	sxth	r2, r3
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8013ff4:	4b2d      	ldr	r3, [pc, #180]	; (80140ac <tcp_receive+0x2c4>)
 8013ff6:	681b      	ldr	r3, [r3, #0]
 8013ff8:	b29a      	uxth	r2, r3
 8013ffa:	687b      	ldr	r3, [r7, #4]
 8013ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013ffe:	b29b      	uxth	r3, r3
 8014000:	1ad3      	subs	r3, r2, r3
 8014002:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	2200      	movs	r2, #0
 8014008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801400c:	4b27      	ldr	r3, [pc, #156]	; (80140ac <tcp_receive+0x2c4>)
 801400e:	681a      	ldr	r2, [r3, #0]
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	7d1b      	ldrb	r3, [r3, #20]
 8014018:	2b03      	cmp	r3, #3
 801401a:	f240 8096 	bls.w	801414a <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 801401e:	687b      	ldr	r3, [r7, #4]
 8014020:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801402a:	429a      	cmp	r2, r3
 801402c:	d244      	bcs.n	80140b8 <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	8b5b      	ldrh	r3, [r3, #26]
 8014032:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014036:	2b00      	cmp	r3, #0
 8014038:	d001      	beq.n	801403e <tcp_receive+0x256>
 801403a:	2301      	movs	r3, #1
 801403c:	e000      	b.n	8014040 <tcp_receive+0x258>
 801403e:	2302      	movs	r3, #2
 8014040:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8014044:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014048:	b29a      	uxth	r2, r3
 801404a:	687b      	ldr	r3, [r7, #4]
 801404c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801404e:	fb12 f303 	smulbb	r3, r2, r3
 8014052:	b29b      	uxth	r3, r3
 8014054:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014056:	4293      	cmp	r3, r2
 8014058:	bf28      	it	cs
 801405a:	4613      	movcs	r3, r2
 801405c:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014064:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014066:	4413      	add	r3, r2
 8014068:	b29a      	uxth	r2, r3
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014070:	429a      	cmp	r2, r3
 8014072:	d309      	bcc.n	8014088 <tcp_receive+0x2a0>
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801407a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801407c:	4413      	add	r3, r2
 801407e:	b29a      	uxth	r2, r3
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014086:	e060      	b.n	801414a <tcp_receive+0x362>
 8014088:	687b      	ldr	r3, [r7, #4]
 801408a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801408e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014092:	e05a      	b.n	801414a <tcp_receive+0x362>
 8014094:	0801d658 	.word	0x0801d658
 8014098:	0801d988 	.word	0x0801d988
 801409c:	0801d6a4 	.word	0x0801d6a4
 80140a0:	0801d9a4 	.word	0x0801d9a4
 80140a4:	200069c0 	.word	0x200069c0
 80140a8:	200069b4 	.word	0x200069b4
 80140ac:	200069b8 	.word	0x200069b8
 80140b0:	200069a4 	.word	0x200069a4
 80140b4:	200069be 	.word	0x200069be
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80140be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80140c0:	4413      	add	r3, r2
 80140c2:	b29a      	uxth	r2, r3
 80140c4:	687b      	ldr	r3, [r7, #4]
 80140c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80140ca:	429a      	cmp	r2, r3
 80140cc:	d309      	bcc.n	80140e2 <tcp_receive+0x2fa>
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80140d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80140d6:	4413      	add	r3, r2
 80140d8:	b29a      	uxth	r2, r3
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80140e0:	e004      	b.n	80140ec <tcp_receive+0x304>
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80140e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80140f8:	429a      	cmp	r2, r3
 80140fa:	d326      	bcc.n	801414a <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014102:	687b      	ldr	r3, [r7, #4]
 8014104:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014108:	1ad3      	subs	r3, r2, r3
 801410a:	b29a      	uxth	r2, r3
 801410c:	687b      	ldr	r3, [r7, #4]
 801410e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014112:	687b      	ldr	r3, [r7, #4]
 8014114:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014118:	687b      	ldr	r3, [r7, #4]
 801411a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801411c:	4413      	add	r3, r2
 801411e:	b29a      	uxth	r2, r3
 8014120:	687b      	ldr	r3, [r7, #4]
 8014122:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014126:	429a      	cmp	r2, r3
 8014128:	d30a      	bcc.n	8014140 <tcp_receive+0x358>
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014134:	4413      	add	r3, r2
 8014136:	b29a      	uxth	r2, r3
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801413e:	e004      	b.n	801414a <tcp_receive+0x362>
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014146:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014152:	4a98      	ldr	r2, [pc, #608]	; (80143b4 <tcp_receive+0x5cc>)
 8014154:	6878      	ldr	r0, [r7, #4]
 8014156:	f7ff fdcb 	bl	8013cf0 <tcp_free_acked_segments>
 801415a:	4602      	mov	r2, r0
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8014160:	687b      	ldr	r3, [r7, #4]
 8014162:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014168:	4a93      	ldr	r2, [pc, #588]	; (80143b8 <tcp_receive+0x5d0>)
 801416a:	6878      	ldr	r0, [r7, #4]
 801416c:	f7ff fdc0 	bl	8013cf0 <tcp_free_acked_segments>
 8014170:	4602      	mov	r2, r0
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801417a:	2b00      	cmp	r3, #0
 801417c:	d104      	bne.n	8014188 <tcp_receive+0x3a0>
        pcb->rtime = -1;
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014184:	861a      	strh	r2, [r3, #48]	; 0x30
 8014186:	e002      	b.n	801418e <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	2200      	movs	r2, #0
 801418c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	2200      	movs	r2, #0
 8014192:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014198:	2b00      	cmp	r3, #0
 801419a:	d103      	bne.n	80141a4 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	2200      	movs	r2, #0
 80141a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80141aa:	4b84      	ldr	r3, [pc, #528]	; (80143bc <tcp_receive+0x5d4>)
 80141ac:	881b      	ldrh	r3, [r3, #0]
 80141ae:	4413      	add	r3, r2
 80141b0:	b29a      	uxth	r2, r3
 80141b2:	687b      	ldr	r3, [r7, #4]
 80141b4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	8b5b      	ldrh	r3, [r3, #26]
 80141bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d035      	beq.n	8014230 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80141c4:	687b      	ldr	r3, [r7, #4]
 80141c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80141c8:	2b00      	cmp	r3, #0
 80141ca:	d118      	bne.n	80141fe <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d00c      	beq.n	80141ee <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80141dc:	68db      	ldr	r3, [r3, #12]
 80141de:	685b      	ldr	r3, [r3, #4]
 80141e0:	4618      	mov	r0, r3
 80141e2:	f7fa ffcc 	bl	800f17e <lwip_htonl>
 80141e6:	4603      	mov	r3, r0
 80141e8:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	dc20      	bgt.n	8014230 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	8b5b      	ldrh	r3, [r3, #26]
 80141f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80141f6:	b29a      	uxth	r2, r3
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80141fc:	e018      	b.n	8014230 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014206:	68db      	ldr	r3, [r3, #12]
 8014208:	685b      	ldr	r3, [r3, #4]
 801420a:	4618      	mov	r0, r3
 801420c:	f7fa ffb7 	bl	800f17e <lwip_htonl>
 8014210:	4603      	mov	r3, r0
 8014212:	1ae3      	subs	r3, r4, r3
 8014214:	2b00      	cmp	r3, #0
 8014216:	dc0b      	bgt.n	8014230 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 8014218:	687b      	ldr	r3, [r7, #4]
 801421a:	8b5b      	ldrh	r3, [r3, #26]
 801421c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014220:	b29a      	uxth	r2, r3
 8014222:	687b      	ldr	r3, [r7, #4]
 8014224:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014226:	e003      	b.n	8014230 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8014228:	6878      	ldr	r0, [r7, #4]
 801422a:	f002 fbcd 	bl	80169c8 <tcp_send_empty_ack>
 801422e:	e000      	b.n	8014232 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014230:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014236:	2b00      	cmp	r3, #0
 8014238:	d05b      	beq.n	80142f2 <tcp_receive+0x50a>
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801423e:	4b60      	ldr	r3, [pc, #384]	; (80143c0 <tcp_receive+0x5d8>)
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	1ad3      	subs	r3, r2, r3
 8014244:	2b00      	cmp	r3, #0
 8014246:	da54      	bge.n	80142f2 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8014248:	4b5e      	ldr	r3, [pc, #376]	; (80143c4 <tcp_receive+0x5dc>)
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	b29a      	uxth	r2, r3
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014252:	b29b      	uxth	r3, r3
 8014254:	1ad3      	subs	r3, r2, r3
 8014256:	b29b      	uxth	r3, r3
 8014258:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801425c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014266:	10db      	asrs	r3, r3, #3
 8014268:	b21b      	sxth	r3, r3
 801426a:	b29b      	uxth	r3, r3
 801426c:	1ad3      	subs	r3, r2, r3
 801426e:	b29b      	uxth	r3, r3
 8014270:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801427a:	b29a      	uxth	r2, r3
 801427c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014280:	4413      	add	r3, r2
 8014282:	b29b      	uxth	r3, r3
 8014284:	b21a      	sxth	r2, r3
 8014286:	687b      	ldr	r3, [r7, #4]
 8014288:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801428a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801428e:	2b00      	cmp	r3, #0
 8014290:	da05      	bge.n	801429e <tcp_receive+0x4b6>
        m = (s16_t) - m;
 8014292:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8014296:	425b      	negs	r3, r3
 8014298:	b29b      	uxth	r3, r3
 801429a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801429e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80142a8:	109b      	asrs	r3, r3, #2
 80142aa:	b21b      	sxth	r3, r3
 80142ac:	b29b      	uxth	r3, r3
 80142ae:	1ad3      	subs	r3, r2, r3
 80142b0:	b29b      	uxth	r3, r3
 80142b2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80142bc:	b29a      	uxth	r2, r3
 80142be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80142c2:	4413      	add	r3, r2
 80142c4:	b29b      	uxth	r3, r3
 80142c6:	b21a      	sxth	r2, r3
 80142c8:	687b      	ldr	r3, [r7, #4]
 80142ca:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80142d2:	10db      	asrs	r3, r3, #3
 80142d4:	b21b      	sxth	r3, r3
 80142d6:	b29a      	uxth	r2, r3
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80142de:	b29b      	uxth	r3, r3
 80142e0:	4413      	add	r3, r2
 80142e2:	b29b      	uxth	r3, r3
 80142e4:	b21a      	sxth	r2, r3
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	2200      	movs	r2, #0
 80142f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80142f2:	4b35      	ldr	r3, [pc, #212]	; (80143c8 <tcp_receive+0x5e0>)
 80142f4:	881b      	ldrh	r3, [r3, #0]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	f000 84e1 	beq.w	8014cbe <tcp_receive+0xed6>
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	7d1b      	ldrb	r3, [r3, #20]
 8014300:	2b06      	cmp	r3, #6
 8014302:	f200 84dc 	bhi.w	8014cbe <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014306:	687b      	ldr	r3, [r7, #4]
 8014308:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801430a:	4b30      	ldr	r3, [pc, #192]	; (80143cc <tcp_receive+0x5e4>)
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	1ad3      	subs	r3, r2, r3
 8014310:	3b01      	subs	r3, #1
 8014312:	2b00      	cmp	r3, #0
 8014314:	f2c0 808e 	blt.w	8014434 <tcp_receive+0x64c>
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801431c:	4b2a      	ldr	r3, [pc, #168]	; (80143c8 <tcp_receive+0x5e0>)
 801431e:	881b      	ldrh	r3, [r3, #0]
 8014320:	4619      	mov	r1, r3
 8014322:	4b2a      	ldr	r3, [pc, #168]	; (80143cc <tcp_receive+0x5e4>)
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	440b      	add	r3, r1
 8014328:	1ad3      	subs	r3, r2, r3
 801432a:	3301      	adds	r3, #1
 801432c:	2b00      	cmp	r3, #0
 801432e:	f300 8081 	bgt.w	8014434 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8014332:	4b27      	ldr	r3, [pc, #156]	; (80143d0 <tcp_receive+0x5e8>)
 8014334:	685b      	ldr	r3, [r3, #4]
 8014336:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801433c:	4b23      	ldr	r3, [pc, #140]	; (80143cc <tcp_receive+0x5e4>)
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	1ad3      	subs	r3, r2, r3
 8014342:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8014344:	4b22      	ldr	r3, [pc, #136]	; (80143d0 <tcp_receive+0x5e8>)
 8014346:	685b      	ldr	r3, [r3, #4]
 8014348:	2b00      	cmp	r3, #0
 801434a:	d106      	bne.n	801435a <tcp_receive+0x572>
 801434c:	4b21      	ldr	r3, [pc, #132]	; (80143d4 <tcp_receive+0x5ec>)
 801434e:	f240 5294 	movw	r2, #1428	; 0x594
 8014352:	4921      	ldr	r1, [pc, #132]	; (80143d8 <tcp_receive+0x5f0>)
 8014354:	4821      	ldr	r0, [pc, #132]	; (80143dc <tcp_receive+0x5f4>)
 8014356:	f006 f9b7 	bl	801a6c8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801435a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801435c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8014360:	4293      	cmp	r3, r2
 8014362:	d906      	bls.n	8014372 <tcp_receive+0x58a>
 8014364:	4b1b      	ldr	r3, [pc, #108]	; (80143d4 <tcp_receive+0x5ec>)
 8014366:	f240 5295 	movw	r2, #1429	; 0x595
 801436a:	491d      	ldr	r1, [pc, #116]	; (80143e0 <tcp_receive+0x5f8>)
 801436c:	481b      	ldr	r0, [pc, #108]	; (80143dc <tcp_receive+0x5f4>)
 801436e:	f006 f9ab 	bl	801a6c8 <iprintf>
      off = (u16_t)off32;
 8014372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014374:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8014378:	4b15      	ldr	r3, [pc, #84]	; (80143d0 <tcp_receive+0x5e8>)
 801437a:	685b      	ldr	r3, [r3, #4]
 801437c:	891b      	ldrh	r3, [r3, #8]
 801437e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014382:	429a      	cmp	r2, r3
 8014384:	d906      	bls.n	8014394 <tcp_receive+0x5ac>
 8014386:	4b13      	ldr	r3, [pc, #76]	; (80143d4 <tcp_receive+0x5ec>)
 8014388:	f240 5297 	movw	r2, #1431	; 0x597
 801438c:	4915      	ldr	r1, [pc, #84]	; (80143e4 <tcp_receive+0x5fc>)
 801438e:	4813      	ldr	r0, [pc, #76]	; (80143dc <tcp_receive+0x5f4>)
 8014390:	f006 f99a 	bl	801a6c8 <iprintf>
      inseg.len -= off;
 8014394:	4b0e      	ldr	r3, [pc, #56]	; (80143d0 <tcp_receive+0x5e8>)
 8014396:	891a      	ldrh	r2, [r3, #8]
 8014398:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801439c:	1ad3      	subs	r3, r2, r3
 801439e:	b29a      	uxth	r2, r3
 80143a0:	4b0b      	ldr	r3, [pc, #44]	; (80143d0 <tcp_receive+0x5e8>)
 80143a2:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80143a4:	4b0a      	ldr	r3, [pc, #40]	; (80143d0 <tcp_receive+0x5e8>)
 80143a6:	685b      	ldr	r3, [r3, #4]
 80143a8:	891a      	ldrh	r2, [r3, #8]
 80143aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80143ae:	1ad3      	subs	r3, r2, r3
 80143b0:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80143b2:	e029      	b.n	8014408 <tcp_receive+0x620>
 80143b4:	0801d9c0 	.word	0x0801d9c0
 80143b8:	0801d9c8 	.word	0x0801d9c8
 80143bc:	200069bc 	.word	0x200069bc
 80143c0:	200069b8 	.word	0x200069b8
 80143c4:	2000dd48 	.word	0x2000dd48
 80143c8:	200069be 	.word	0x200069be
 80143cc:	200069b4 	.word	0x200069b4
 80143d0:	20006994 	.word	0x20006994
 80143d4:	0801d658 	.word	0x0801d658
 80143d8:	0801d9d0 	.word	0x0801d9d0
 80143dc:	0801d6a4 	.word	0x0801d6a4
 80143e0:	0801d9e0 	.word	0x0801d9e0
 80143e4:	0801d9f0 	.word	0x0801d9f0
        off -= p->len;
 80143e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80143ea:	895b      	ldrh	r3, [r3, #10]
 80143ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80143f0:	1ad3      	subs	r3, r2, r3
 80143f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80143f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80143f8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80143fa:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80143fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80143fe:	2200      	movs	r2, #0
 8014400:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8014402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8014408:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801440a:	895b      	ldrh	r3, [r3, #10]
 801440c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014410:	429a      	cmp	r2, r3
 8014412:	d8e9      	bhi.n	80143e8 <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8014414:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014418:	4619      	mov	r1, r3
 801441a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801441c:	f7fc f95c 	bl	80106d8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014424:	4a91      	ldr	r2, [pc, #580]	; (801466c <tcp_receive+0x884>)
 8014426:	6013      	str	r3, [r2, #0]
 8014428:	4b91      	ldr	r3, [pc, #580]	; (8014670 <tcp_receive+0x888>)
 801442a:	68db      	ldr	r3, [r3, #12]
 801442c:	4a8f      	ldr	r2, [pc, #572]	; (801466c <tcp_receive+0x884>)
 801442e:	6812      	ldr	r2, [r2, #0]
 8014430:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014432:	e00d      	b.n	8014450 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8014434:	4b8d      	ldr	r3, [pc, #564]	; (801466c <tcp_receive+0x884>)
 8014436:	681a      	ldr	r2, [r3, #0]
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801443c:	1ad3      	subs	r3, r2, r3
 801443e:	2b00      	cmp	r3, #0
 8014440:	da06      	bge.n	8014450 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	8b5b      	ldrh	r3, [r3, #26]
 8014446:	f043 0302 	orr.w	r3, r3, #2
 801444a:	b29a      	uxth	r2, r3
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014450:	4b86      	ldr	r3, [pc, #536]	; (801466c <tcp_receive+0x884>)
 8014452:	681a      	ldr	r2, [r3, #0]
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014458:	1ad3      	subs	r3, r2, r3
 801445a:	2b00      	cmp	r3, #0
 801445c:	f2c0 842a 	blt.w	8014cb4 <tcp_receive+0xecc>
 8014460:	4b82      	ldr	r3, [pc, #520]	; (801466c <tcp_receive+0x884>)
 8014462:	681a      	ldr	r2, [r3, #0]
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014468:	6879      	ldr	r1, [r7, #4]
 801446a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801446c:	440b      	add	r3, r1
 801446e:	1ad3      	subs	r3, r2, r3
 8014470:	3301      	adds	r3, #1
 8014472:	2b00      	cmp	r3, #0
 8014474:	f300 841e 	bgt.w	8014cb4 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801447c:	4b7b      	ldr	r3, [pc, #492]	; (801466c <tcp_receive+0x884>)
 801447e:	681b      	ldr	r3, [r3, #0]
 8014480:	429a      	cmp	r2, r3
 8014482:	f040 829a 	bne.w	80149ba <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8014486:	4b7a      	ldr	r3, [pc, #488]	; (8014670 <tcp_receive+0x888>)
 8014488:	891c      	ldrh	r4, [r3, #8]
 801448a:	4b79      	ldr	r3, [pc, #484]	; (8014670 <tcp_receive+0x888>)
 801448c:	68db      	ldr	r3, [r3, #12]
 801448e:	899b      	ldrh	r3, [r3, #12]
 8014490:	b29b      	uxth	r3, r3
 8014492:	4618      	mov	r0, r3
 8014494:	f7fa fe5e 	bl	800f154 <lwip_htons>
 8014498:	4603      	mov	r3, r0
 801449a:	b2db      	uxtb	r3, r3
 801449c:	f003 0303 	and.w	r3, r3, #3
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d001      	beq.n	80144a8 <tcp_receive+0x6c0>
 80144a4:	2301      	movs	r3, #1
 80144a6:	e000      	b.n	80144aa <tcp_receive+0x6c2>
 80144a8:	2300      	movs	r3, #0
 80144aa:	4423      	add	r3, r4
 80144ac:	b29a      	uxth	r2, r3
 80144ae:	4b71      	ldr	r3, [pc, #452]	; (8014674 <tcp_receive+0x88c>)
 80144b0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80144b6:	4b6f      	ldr	r3, [pc, #444]	; (8014674 <tcp_receive+0x88c>)
 80144b8:	881b      	ldrh	r3, [r3, #0]
 80144ba:	429a      	cmp	r2, r3
 80144bc:	d275      	bcs.n	80145aa <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80144be:	4b6c      	ldr	r3, [pc, #432]	; (8014670 <tcp_receive+0x888>)
 80144c0:	68db      	ldr	r3, [r3, #12]
 80144c2:	899b      	ldrh	r3, [r3, #12]
 80144c4:	b29b      	uxth	r3, r3
 80144c6:	4618      	mov	r0, r3
 80144c8:	f7fa fe44 	bl	800f154 <lwip_htons>
 80144cc:	4603      	mov	r3, r0
 80144ce:	b2db      	uxtb	r3, r3
 80144d0:	f003 0301 	and.w	r3, r3, #1
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d01f      	beq.n	8014518 <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80144d8:	4b65      	ldr	r3, [pc, #404]	; (8014670 <tcp_receive+0x888>)
 80144da:	68db      	ldr	r3, [r3, #12]
 80144dc:	899b      	ldrh	r3, [r3, #12]
 80144de:	b29b      	uxth	r3, r3
 80144e0:	b21b      	sxth	r3, r3
 80144e2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80144e6:	b21c      	sxth	r4, r3
 80144e8:	4b61      	ldr	r3, [pc, #388]	; (8014670 <tcp_receive+0x888>)
 80144ea:	68db      	ldr	r3, [r3, #12]
 80144ec:	899b      	ldrh	r3, [r3, #12]
 80144ee:	b29b      	uxth	r3, r3
 80144f0:	4618      	mov	r0, r3
 80144f2:	f7fa fe2f 	bl	800f154 <lwip_htons>
 80144f6:	4603      	mov	r3, r0
 80144f8:	b2db      	uxtb	r3, r3
 80144fa:	b29b      	uxth	r3, r3
 80144fc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014500:	b29b      	uxth	r3, r3
 8014502:	4618      	mov	r0, r3
 8014504:	f7fa fe26 	bl	800f154 <lwip_htons>
 8014508:	4603      	mov	r3, r0
 801450a:	b21b      	sxth	r3, r3
 801450c:	4323      	orrs	r3, r4
 801450e:	b21a      	sxth	r2, r3
 8014510:	4b57      	ldr	r3, [pc, #348]	; (8014670 <tcp_receive+0x888>)
 8014512:	68db      	ldr	r3, [r3, #12]
 8014514:	b292      	uxth	r2, r2
 8014516:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801451c:	4b54      	ldr	r3, [pc, #336]	; (8014670 <tcp_receive+0x888>)
 801451e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014520:	4b53      	ldr	r3, [pc, #332]	; (8014670 <tcp_receive+0x888>)
 8014522:	68db      	ldr	r3, [r3, #12]
 8014524:	899b      	ldrh	r3, [r3, #12]
 8014526:	b29b      	uxth	r3, r3
 8014528:	4618      	mov	r0, r3
 801452a:	f7fa fe13 	bl	800f154 <lwip_htons>
 801452e:	4603      	mov	r3, r0
 8014530:	b2db      	uxtb	r3, r3
 8014532:	f003 0302 	and.w	r3, r3, #2
 8014536:	2b00      	cmp	r3, #0
 8014538:	d005      	beq.n	8014546 <tcp_receive+0x75e>
            inseg.len -= 1;
 801453a:	4b4d      	ldr	r3, [pc, #308]	; (8014670 <tcp_receive+0x888>)
 801453c:	891b      	ldrh	r3, [r3, #8]
 801453e:	3b01      	subs	r3, #1
 8014540:	b29a      	uxth	r2, r3
 8014542:	4b4b      	ldr	r3, [pc, #300]	; (8014670 <tcp_receive+0x888>)
 8014544:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8014546:	4b4a      	ldr	r3, [pc, #296]	; (8014670 <tcp_receive+0x888>)
 8014548:	685b      	ldr	r3, [r3, #4]
 801454a:	4a49      	ldr	r2, [pc, #292]	; (8014670 <tcp_receive+0x888>)
 801454c:	8912      	ldrh	r2, [r2, #8]
 801454e:	4611      	mov	r1, r2
 8014550:	4618      	mov	r0, r3
 8014552:	f7fb ffc1 	bl	80104d8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8014556:	4b46      	ldr	r3, [pc, #280]	; (8014670 <tcp_receive+0x888>)
 8014558:	891c      	ldrh	r4, [r3, #8]
 801455a:	4b45      	ldr	r3, [pc, #276]	; (8014670 <tcp_receive+0x888>)
 801455c:	68db      	ldr	r3, [r3, #12]
 801455e:	899b      	ldrh	r3, [r3, #12]
 8014560:	b29b      	uxth	r3, r3
 8014562:	4618      	mov	r0, r3
 8014564:	f7fa fdf6 	bl	800f154 <lwip_htons>
 8014568:	4603      	mov	r3, r0
 801456a:	b2db      	uxtb	r3, r3
 801456c:	f003 0303 	and.w	r3, r3, #3
 8014570:	2b00      	cmp	r3, #0
 8014572:	d001      	beq.n	8014578 <tcp_receive+0x790>
 8014574:	2301      	movs	r3, #1
 8014576:	e000      	b.n	801457a <tcp_receive+0x792>
 8014578:	2300      	movs	r3, #0
 801457a:	4423      	add	r3, r4
 801457c:	b29a      	uxth	r2, r3
 801457e:	4b3d      	ldr	r3, [pc, #244]	; (8014674 <tcp_receive+0x88c>)
 8014580:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014582:	4b3c      	ldr	r3, [pc, #240]	; (8014674 <tcp_receive+0x88c>)
 8014584:	881b      	ldrh	r3, [r3, #0]
 8014586:	461a      	mov	r2, r3
 8014588:	4b38      	ldr	r3, [pc, #224]	; (801466c <tcp_receive+0x884>)
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	441a      	add	r2, r3
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014592:	6879      	ldr	r1, [r7, #4]
 8014594:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014596:	440b      	add	r3, r1
 8014598:	429a      	cmp	r2, r3
 801459a:	d006      	beq.n	80145aa <tcp_receive+0x7c2>
 801459c:	4b36      	ldr	r3, [pc, #216]	; (8014678 <tcp_receive+0x890>)
 801459e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 80145a2:	4936      	ldr	r1, [pc, #216]	; (801467c <tcp_receive+0x894>)
 80145a4:	4836      	ldr	r0, [pc, #216]	; (8014680 <tcp_receive+0x898>)
 80145a6:	f006 f88f 	bl	801a6c8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 80145aa:	687b      	ldr	r3, [r7, #4]
 80145ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	f000 80e7 	beq.w	8014782 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80145b4:	4b2e      	ldr	r3, [pc, #184]	; (8014670 <tcp_receive+0x888>)
 80145b6:	68db      	ldr	r3, [r3, #12]
 80145b8:	899b      	ldrh	r3, [r3, #12]
 80145ba:	b29b      	uxth	r3, r3
 80145bc:	4618      	mov	r0, r3
 80145be:	f7fa fdc9 	bl	800f154 <lwip_htons>
 80145c2:	4603      	mov	r3, r0
 80145c4:	b2db      	uxtb	r3, r3
 80145c6:	f003 0301 	and.w	r3, r3, #1
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d010      	beq.n	80145f0 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80145ce:	e00a      	b.n	80145e6 <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80145d4:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80145da:	681a      	ldr	r2, [r3, #0]
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80145e0:	68f8      	ldr	r0, [r7, #12]
 80145e2:	f7fd fcc8 	bl	8011f76 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d1f0      	bne.n	80145d0 <tcp_receive+0x7e8>
 80145ee:	e0c8      	b.n	8014782 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80145f4:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80145f6:	e052      	b.n	801469e <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80145f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80145fa:	68db      	ldr	r3, [r3, #12]
 80145fc:	899b      	ldrh	r3, [r3, #12]
 80145fe:	b29b      	uxth	r3, r3
 8014600:	4618      	mov	r0, r3
 8014602:	f7fa fda7 	bl	800f154 <lwip_htons>
 8014606:	4603      	mov	r3, r0
 8014608:	b2db      	uxtb	r3, r3
 801460a:	f003 0301 	and.w	r3, r3, #1
 801460e:	2b00      	cmp	r3, #0
 8014610:	d03d      	beq.n	801468e <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8014612:	4b17      	ldr	r3, [pc, #92]	; (8014670 <tcp_receive+0x888>)
 8014614:	68db      	ldr	r3, [r3, #12]
 8014616:	899b      	ldrh	r3, [r3, #12]
 8014618:	b29b      	uxth	r3, r3
 801461a:	4618      	mov	r0, r3
 801461c:	f7fa fd9a 	bl	800f154 <lwip_htons>
 8014620:	4603      	mov	r3, r0
 8014622:	b2db      	uxtb	r3, r3
 8014624:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014628:	2b00      	cmp	r3, #0
 801462a:	d130      	bne.n	801468e <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801462c:	4b10      	ldr	r3, [pc, #64]	; (8014670 <tcp_receive+0x888>)
 801462e:	68db      	ldr	r3, [r3, #12]
 8014630:	899b      	ldrh	r3, [r3, #12]
 8014632:	b29c      	uxth	r4, r3
 8014634:	2001      	movs	r0, #1
 8014636:	f7fa fd8d 	bl	800f154 <lwip_htons>
 801463a:	4603      	mov	r3, r0
 801463c:	461a      	mov	r2, r3
 801463e:	4b0c      	ldr	r3, [pc, #48]	; (8014670 <tcp_receive+0x888>)
 8014640:	68db      	ldr	r3, [r3, #12]
 8014642:	4322      	orrs	r2, r4
 8014644:	b292      	uxth	r2, r2
 8014646:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8014648:	4b09      	ldr	r3, [pc, #36]	; (8014670 <tcp_receive+0x888>)
 801464a:	891c      	ldrh	r4, [r3, #8]
 801464c:	4b08      	ldr	r3, [pc, #32]	; (8014670 <tcp_receive+0x888>)
 801464e:	68db      	ldr	r3, [r3, #12]
 8014650:	899b      	ldrh	r3, [r3, #12]
 8014652:	b29b      	uxth	r3, r3
 8014654:	4618      	mov	r0, r3
 8014656:	f7fa fd7d 	bl	800f154 <lwip_htons>
 801465a:	4603      	mov	r3, r0
 801465c:	b2db      	uxtb	r3, r3
 801465e:	f003 0303 	and.w	r3, r3, #3
 8014662:	2b00      	cmp	r3, #0
 8014664:	d00e      	beq.n	8014684 <tcp_receive+0x89c>
 8014666:	2301      	movs	r3, #1
 8014668:	e00d      	b.n	8014686 <tcp_receive+0x89e>
 801466a:	bf00      	nop
 801466c:	200069b4 	.word	0x200069b4
 8014670:	20006994 	.word	0x20006994
 8014674:	200069be 	.word	0x200069be
 8014678:	0801d658 	.word	0x0801d658
 801467c:	0801da00 	.word	0x0801da00
 8014680:	0801d6a4 	.word	0x0801d6a4
 8014684:	2300      	movs	r3, #0
 8014686:	4423      	add	r3, r4
 8014688:	b29a      	uxth	r2, r3
 801468a:	4b98      	ldr	r3, [pc, #608]	; (80148ec <tcp_receive+0xb04>)
 801468c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801468e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014690:	613b      	str	r3, [r7, #16]
              next = next->next;
 8014692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8014698:	6938      	ldr	r0, [r7, #16]
 801469a:	f7fd fc6c 	bl	8011f76 <tcp_seg_free>
            while (next &&
 801469e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146a0:	2b00      	cmp	r3, #0
 80146a2:	d00e      	beq.n	80146c2 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 80146a4:	4b91      	ldr	r3, [pc, #580]	; (80148ec <tcp_receive+0xb04>)
 80146a6:	881b      	ldrh	r3, [r3, #0]
 80146a8:	461a      	mov	r2, r3
 80146aa:	4b91      	ldr	r3, [pc, #580]	; (80148f0 <tcp_receive+0xb08>)
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	441a      	add	r2, r3
 80146b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146b2:	68db      	ldr	r3, [r3, #12]
 80146b4:	685b      	ldr	r3, [r3, #4]
 80146b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80146b8:	8909      	ldrh	r1, [r1, #8]
 80146ba:	440b      	add	r3, r1
 80146bc:	1ad3      	subs	r3, r2, r3
            while (next &&
 80146be:	2b00      	cmp	r3, #0
 80146c0:	da9a      	bge.n	80145f8 <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80146c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146c4:	2b00      	cmp	r3, #0
 80146c6:	d059      	beq.n	801477c <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 80146c8:	4b88      	ldr	r3, [pc, #544]	; (80148ec <tcp_receive+0xb04>)
 80146ca:	881b      	ldrh	r3, [r3, #0]
 80146cc:	461a      	mov	r2, r3
 80146ce:	4b88      	ldr	r3, [pc, #544]	; (80148f0 <tcp_receive+0xb08>)
 80146d0:	681b      	ldr	r3, [r3, #0]
 80146d2:	441a      	add	r2, r3
 80146d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146d6:	68db      	ldr	r3, [r3, #12]
 80146d8:	685b      	ldr	r3, [r3, #4]
 80146da:	1ad3      	subs	r3, r2, r3
            if (next &&
 80146dc:	2b00      	cmp	r3, #0
 80146de:	dd4d      	ble.n	801477c <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80146e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80146e2:	68db      	ldr	r3, [r3, #12]
 80146e4:	685b      	ldr	r3, [r3, #4]
 80146e6:	b29a      	uxth	r2, r3
 80146e8:	4b81      	ldr	r3, [pc, #516]	; (80148f0 <tcp_receive+0xb08>)
 80146ea:	681b      	ldr	r3, [r3, #0]
 80146ec:	b29b      	uxth	r3, r3
 80146ee:	1ad3      	subs	r3, r2, r3
 80146f0:	b29a      	uxth	r2, r3
 80146f2:	4b80      	ldr	r3, [pc, #512]	; (80148f4 <tcp_receive+0xb0c>)
 80146f4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80146f6:	4b7f      	ldr	r3, [pc, #508]	; (80148f4 <tcp_receive+0xb0c>)
 80146f8:	68db      	ldr	r3, [r3, #12]
 80146fa:	899b      	ldrh	r3, [r3, #12]
 80146fc:	b29b      	uxth	r3, r3
 80146fe:	4618      	mov	r0, r3
 8014700:	f7fa fd28 	bl	800f154 <lwip_htons>
 8014704:	4603      	mov	r3, r0
 8014706:	b2db      	uxtb	r3, r3
 8014708:	f003 0302 	and.w	r3, r3, #2
 801470c:	2b00      	cmp	r3, #0
 801470e:	d005      	beq.n	801471c <tcp_receive+0x934>
                inseg.len -= 1;
 8014710:	4b78      	ldr	r3, [pc, #480]	; (80148f4 <tcp_receive+0xb0c>)
 8014712:	891b      	ldrh	r3, [r3, #8]
 8014714:	3b01      	subs	r3, #1
 8014716:	b29a      	uxth	r2, r3
 8014718:	4b76      	ldr	r3, [pc, #472]	; (80148f4 <tcp_receive+0xb0c>)
 801471a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801471c:	4b75      	ldr	r3, [pc, #468]	; (80148f4 <tcp_receive+0xb0c>)
 801471e:	685b      	ldr	r3, [r3, #4]
 8014720:	4a74      	ldr	r2, [pc, #464]	; (80148f4 <tcp_receive+0xb0c>)
 8014722:	8912      	ldrh	r2, [r2, #8]
 8014724:	4611      	mov	r1, r2
 8014726:	4618      	mov	r0, r3
 8014728:	f7fb fed6 	bl	80104d8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801472c:	4b71      	ldr	r3, [pc, #452]	; (80148f4 <tcp_receive+0xb0c>)
 801472e:	891c      	ldrh	r4, [r3, #8]
 8014730:	4b70      	ldr	r3, [pc, #448]	; (80148f4 <tcp_receive+0xb0c>)
 8014732:	68db      	ldr	r3, [r3, #12]
 8014734:	899b      	ldrh	r3, [r3, #12]
 8014736:	b29b      	uxth	r3, r3
 8014738:	4618      	mov	r0, r3
 801473a:	f7fa fd0b 	bl	800f154 <lwip_htons>
 801473e:	4603      	mov	r3, r0
 8014740:	b2db      	uxtb	r3, r3
 8014742:	f003 0303 	and.w	r3, r3, #3
 8014746:	2b00      	cmp	r3, #0
 8014748:	d001      	beq.n	801474e <tcp_receive+0x966>
 801474a:	2301      	movs	r3, #1
 801474c:	e000      	b.n	8014750 <tcp_receive+0x968>
 801474e:	2300      	movs	r3, #0
 8014750:	4423      	add	r3, r4
 8014752:	b29a      	uxth	r2, r3
 8014754:	4b65      	ldr	r3, [pc, #404]	; (80148ec <tcp_receive+0xb04>)
 8014756:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8014758:	4b64      	ldr	r3, [pc, #400]	; (80148ec <tcp_receive+0xb04>)
 801475a:	881b      	ldrh	r3, [r3, #0]
 801475c:	461a      	mov	r2, r3
 801475e:	4b64      	ldr	r3, [pc, #400]	; (80148f0 <tcp_receive+0xb08>)
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	441a      	add	r2, r3
 8014764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014766:	68db      	ldr	r3, [r3, #12]
 8014768:	685b      	ldr	r3, [r3, #4]
 801476a:	429a      	cmp	r2, r3
 801476c:	d006      	beq.n	801477c <tcp_receive+0x994>
 801476e:	4b62      	ldr	r3, [pc, #392]	; (80148f8 <tcp_receive+0xb10>)
 8014770:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8014774:	4961      	ldr	r1, [pc, #388]	; (80148fc <tcp_receive+0xb14>)
 8014776:	4862      	ldr	r0, [pc, #392]	; (8014900 <tcp_receive+0xb18>)
 8014778:	f005 ffa6 	bl	801a6c8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014780:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8014782:	4b5a      	ldr	r3, [pc, #360]	; (80148ec <tcp_receive+0xb04>)
 8014784:	881b      	ldrh	r3, [r3, #0]
 8014786:	461a      	mov	r2, r3
 8014788:	4b59      	ldr	r3, [pc, #356]	; (80148f0 <tcp_receive+0xb08>)
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	441a      	add	r2, r3
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014796:	4b55      	ldr	r3, [pc, #340]	; (80148ec <tcp_receive+0xb04>)
 8014798:	881b      	ldrh	r3, [r3, #0]
 801479a:	429a      	cmp	r2, r3
 801479c:	d206      	bcs.n	80147ac <tcp_receive+0x9c4>
 801479e:	4b56      	ldr	r3, [pc, #344]	; (80148f8 <tcp_receive+0xb10>)
 80147a0:	f240 6207 	movw	r2, #1543	; 0x607
 80147a4:	4957      	ldr	r1, [pc, #348]	; (8014904 <tcp_receive+0xb1c>)
 80147a6:	4856      	ldr	r0, [pc, #344]	; (8014900 <tcp_receive+0xb18>)
 80147a8:	f005 ff8e 	bl	801a6c8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 80147ac:	687b      	ldr	r3, [r7, #4]
 80147ae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80147b0:	4b4e      	ldr	r3, [pc, #312]	; (80148ec <tcp_receive+0xb04>)
 80147b2:	881b      	ldrh	r3, [r3, #0]
 80147b4:	1ad3      	subs	r3, r2, r3
 80147b6:	b29a      	uxth	r2, r3
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80147bc:	6878      	ldr	r0, [r7, #4]
 80147be:	f7fc feb5 	bl	801152c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80147c2:	4b4c      	ldr	r3, [pc, #304]	; (80148f4 <tcp_receive+0xb0c>)
 80147c4:	685b      	ldr	r3, [r3, #4]
 80147c6:	891b      	ldrh	r3, [r3, #8]
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d006      	beq.n	80147da <tcp_receive+0x9f2>
          recv_data = inseg.p;
 80147cc:	4b49      	ldr	r3, [pc, #292]	; (80148f4 <tcp_receive+0xb0c>)
 80147ce:	685b      	ldr	r3, [r3, #4]
 80147d0:	4a4d      	ldr	r2, [pc, #308]	; (8014908 <tcp_receive+0xb20>)
 80147d2:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80147d4:	4b47      	ldr	r3, [pc, #284]	; (80148f4 <tcp_receive+0xb0c>)
 80147d6:	2200      	movs	r2, #0
 80147d8:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80147da:	4b46      	ldr	r3, [pc, #280]	; (80148f4 <tcp_receive+0xb0c>)
 80147dc:	68db      	ldr	r3, [r3, #12]
 80147de:	899b      	ldrh	r3, [r3, #12]
 80147e0:	b29b      	uxth	r3, r3
 80147e2:	4618      	mov	r0, r3
 80147e4:	f7fa fcb6 	bl	800f154 <lwip_htons>
 80147e8:	4603      	mov	r3, r0
 80147ea:	b2db      	uxtb	r3, r3
 80147ec:	f003 0301 	and.w	r3, r3, #1
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	f000 80b8 	beq.w	8014966 <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80147f6:	4b45      	ldr	r3, [pc, #276]	; (801490c <tcp_receive+0xb24>)
 80147f8:	781b      	ldrb	r3, [r3, #0]
 80147fa:	f043 0320 	orr.w	r3, r3, #32
 80147fe:	b2da      	uxtb	r2, r3
 8014800:	4b42      	ldr	r3, [pc, #264]	; (801490c <tcp_receive+0xb24>)
 8014802:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8014804:	e0af      	b.n	8014966 <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801480a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014810:	68db      	ldr	r3, [r3, #12]
 8014812:	685b      	ldr	r3, [r3, #4]
 8014814:	4a36      	ldr	r2, [pc, #216]	; (80148f0 <tcp_receive+0xb08>)
 8014816:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8014818:	68bb      	ldr	r3, [r7, #8]
 801481a:	891b      	ldrh	r3, [r3, #8]
 801481c:	461c      	mov	r4, r3
 801481e:	68bb      	ldr	r3, [r7, #8]
 8014820:	68db      	ldr	r3, [r3, #12]
 8014822:	899b      	ldrh	r3, [r3, #12]
 8014824:	b29b      	uxth	r3, r3
 8014826:	4618      	mov	r0, r3
 8014828:	f7fa fc94 	bl	800f154 <lwip_htons>
 801482c:	4603      	mov	r3, r0
 801482e:	b2db      	uxtb	r3, r3
 8014830:	f003 0303 	and.w	r3, r3, #3
 8014834:	2b00      	cmp	r3, #0
 8014836:	d001      	beq.n	801483c <tcp_receive+0xa54>
 8014838:	2301      	movs	r3, #1
 801483a:	e000      	b.n	801483e <tcp_receive+0xa56>
 801483c:	2300      	movs	r3, #0
 801483e:	191a      	adds	r2, r3, r4
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014844:	441a      	add	r2, r3
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801484e:	461c      	mov	r4, r3
 8014850:	68bb      	ldr	r3, [r7, #8]
 8014852:	891b      	ldrh	r3, [r3, #8]
 8014854:	461d      	mov	r5, r3
 8014856:	68bb      	ldr	r3, [r7, #8]
 8014858:	68db      	ldr	r3, [r3, #12]
 801485a:	899b      	ldrh	r3, [r3, #12]
 801485c:	b29b      	uxth	r3, r3
 801485e:	4618      	mov	r0, r3
 8014860:	f7fa fc78 	bl	800f154 <lwip_htons>
 8014864:	4603      	mov	r3, r0
 8014866:	b2db      	uxtb	r3, r3
 8014868:	f003 0303 	and.w	r3, r3, #3
 801486c:	2b00      	cmp	r3, #0
 801486e:	d001      	beq.n	8014874 <tcp_receive+0xa8c>
 8014870:	2301      	movs	r3, #1
 8014872:	e000      	b.n	8014876 <tcp_receive+0xa8e>
 8014874:	2300      	movs	r3, #0
 8014876:	442b      	add	r3, r5
 8014878:	429c      	cmp	r4, r3
 801487a:	d206      	bcs.n	801488a <tcp_receive+0xaa2>
 801487c:	4b1e      	ldr	r3, [pc, #120]	; (80148f8 <tcp_receive+0xb10>)
 801487e:	f240 622b 	movw	r2, #1579	; 0x62b
 8014882:	4923      	ldr	r1, [pc, #140]	; (8014910 <tcp_receive+0xb28>)
 8014884:	481e      	ldr	r0, [pc, #120]	; (8014900 <tcp_receive+0xb18>)
 8014886:	f005 ff1f 	bl	801a6c8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801488a:	68bb      	ldr	r3, [r7, #8]
 801488c:	891b      	ldrh	r3, [r3, #8]
 801488e:	461c      	mov	r4, r3
 8014890:	68bb      	ldr	r3, [r7, #8]
 8014892:	68db      	ldr	r3, [r3, #12]
 8014894:	899b      	ldrh	r3, [r3, #12]
 8014896:	b29b      	uxth	r3, r3
 8014898:	4618      	mov	r0, r3
 801489a:	f7fa fc5b 	bl	800f154 <lwip_htons>
 801489e:	4603      	mov	r3, r0
 80148a0:	b2db      	uxtb	r3, r3
 80148a2:	f003 0303 	and.w	r3, r3, #3
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d001      	beq.n	80148ae <tcp_receive+0xac6>
 80148aa:	2301      	movs	r3, #1
 80148ac:	e000      	b.n	80148b0 <tcp_receive+0xac8>
 80148ae:	2300      	movs	r3, #0
 80148b0:	1919      	adds	r1, r3, r4
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80148b6:	b28b      	uxth	r3, r1
 80148b8:	1ad3      	subs	r3, r2, r3
 80148ba:	b29a      	uxth	r2, r3
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80148c0:	6878      	ldr	r0, [r7, #4]
 80148c2:	f7fc fe33 	bl	801152c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80148c6:	68bb      	ldr	r3, [r7, #8]
 80148c8:	685b      	ldr	r3, [r3, #4]
 80148ca:	891b      	ldrh	r3, [r3, #8]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d028      	beq.n	8014922 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80148d0:	4b0d      	ldr	r3, [pc, #52]	; (8014908 <tcp_receive+0xb20>)
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	d01d      	beq.n	8014914 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 80148d8:	4b0b      	ldr	r3, [pc, #44]	; (8014908 <tcp_receive+0xb20>)
 80148da:	681a      	ldr	r2, [r3, #0]
 80148dc:	68bb      	ldr	r3, [r7, #8]
 80148de:	685b      	ldr	r3, [r3, #4]
 80148e0:	4619      	mov	r1, r3
 80148e2:	4610      	mov	r0, r2
 80148e4:	f7fc f84c 	bl	8010980 <pbuf_cat>
 80148e8:	e018      	b.n	801491c <tcp_receive+0xb34>
 80148ea:	bf00      	nop
 80148ec:	200069be 	.word	0x200069be
 80148f0:	200069b4 	.word	0x200069b4
 80148f4:	20006994 	.word	0x20006994
 80148f8:	0801d658 	.word	0x0801d658
 80148fc:	0801da38 	.word	0x0801da38
 8014900:	0801d6a4 	.word	0x0801d6a4
 8014904:	0801da74 	.word	0x0801da74
 8014908:	200069c4 	.word	0x200069c4
 801490c:	200069c1 	.word	0x200069c1
 8014910:	0801da94 	.word	0x0801da94
            } else {
              recv_data = cseg->p;
 8014914:	68bb      	ldr	r3, [r7, #8]
 8014916:	685b      	ldr	r3, [r3, #4]
 8014918:	4a70      	ldr	r2, [pc, #448]	; (8014adc <tcp_receive+0xcf4>)
 801491a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801491c:	68bb      	ldr	r3, [r7, #8]
 801491e:	2200      	movs	r2, #0
 8014920:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014922:	68bb      	ldr	r3, [r7, #8]
 8014924:	68db      	ldr	r3, [r3, #12]
 8014926:	899b      	ldrh	r3, [r3, #12]
 8014928:	b29b      	uxth	r3, r3
 801492a:	4618      	mov	r0, r3
 801492c:	f7fa fc12 	bl	800f154 <lwip_htons>
 8014930:	4603      	mov	r3, r0
 8014932:	b2db      	uxtb	r3, r3
 8014934:	f003 0301 	and.w	r3, r3, #1
 8014938:	2b00      	cmp	r3, #0
 801493a:	d00d      	beq.n	8014958 <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801493c:	4b68      	ldr	r3, [pc, #416]	; (8014ae0 <tcp_receive+0xcf8>)
 801493e:	781b      	ldrb	r3, [r3, #0]
 8014940:	f043 0320 	orr.w	r3, r3, #32
 8014944:	b2da      	uxtb	r2, r3
 8014946:	4b66      	ldr	r3, [pc, #408]	; (8014ae0 <tcp_receive+0xcf8>)
 8014948:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	7d1b      	ldrb	r3, [r3, #20]
 801494e:	2b04      	cmp	r3, #4
 8014950:	d102      	bne.n	8014958 <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 8014952:	687b      	ldr	r3, [r7, #4]
 8014954:	2207      	movs	r2, #7
 8014956:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014958:	68bb      	ldr	r3, [r7, #8]
 801495a:	681a      	ldr	r2, [r3, #0]
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8014960:	68b8      	ldr	r0, [r7, #8]
 8014962:	f7fd fb08 	bl	8011f76 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801496a:	2b00      	cmp	r3, #0
 801496c:	d008      	beq.n	8014980 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014972:	68db      	ldr	r3, [r3, #12]
 8014974:	685a      	ldr	r2, [r3, #4]
 8014976:	687b      	ldr	r3, [r7, #4]
 8014978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801497a:	429a      	cmp	r2, r3
 801497c:	f43f af43 	beq.w	8014806 <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	8b5b      	ldrh	r3, [r3, #26]
 8014984:	f003 0301 	and.w	r3, r3, #1
 8014988:	2b00      	cmp	r3, #0
 801498a:	d00e      	beq.n	80149aa <tcp_receive+0xbc2>
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	8b5b      	ldrh	r3, [r3, #26]
 8014990:	f023 0301 	bic.w	r3, r3, #1
 8014994:	b29a      	uxth	r2, r3
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	835a      	strh	r2, [r3, #26]
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	8b5b      	ldrh	r3, [r3, #26]
 801499e:	f043 0302 	orr.w	r3, r3, #2
 80149a2:	b29a      	uxth	r2, r3
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80149a8:	e188      	b.n	8014cbc <tcp_receive+0xed4>
        tcp_ack(pcb);
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	8b5b      	ldrh	r3, [r3, #26]
 80149ae:	f043 0301 	orr.w	r3, r3, #1
 80149b2:	b29a      	uxth	r2, r3
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 80149b8:	e180      	b.n	8014cbc <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 80149ba:	687b      	ldr	r3, [r7, #4]
 80149bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d106      	bne.n	80149d0 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 80149c2:	4848      	ldr	r0, [pc, #288]	; (8014ae4 <tcp_receive+0xcfc>)
 80149c4:	f7fd faf0 	bl	8011fa8 <tcp_seg_copy>
 80149c8:	4602      	mov	r2, r0
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	675a      	str	r2, [r3, #116]	; 0x74
 80149ce:	e16d      	b.n	8014cac <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80149d0:	2300      	movs	r3, #0
 80149d2:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80149d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80149da:	e157      	b.n	8014c8c <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 80149dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149de:	68db      	ldr	r3, [r3, #12]
 80149e0:	685a      	ldr	r2, [r3, #4]
 80149e2:	4b41      	ldr	r3, [pc, #260]	; (8014ae8 <tcp_receive+0xd00>)
 80149e4:	681b      	ldr	r3, [r3, #0]
 80149e6:	429a      	cmp	r2, r3
 80149e8:	d11d      	bne.n	8014a26 <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80149ea:	4b3e      	ldr	r3, [pc, #248]	; (8014ae4 <tcp_receive+0xcfc>)
 80149ec:	891a      	ldrh	r2, [r3, #8]
 80149ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80149f0:	891b      	ldrh	r3, [r3, #8]
 80149f2:	429a      	cmp	r2, r3
 80149f4:	f240 814f 	bls.w	8014c96 <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80149f8:	483a      	ldr	r0, [pc, #232]	; (8014ae4 <tcp_receive+0xcfc>)
 80149fa:	f7fd fad5 	bl	8011fa8 <tcp_seg_copy>
 80149fe:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8014a00:	697b      	ldr	r3, [r7, #20]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	f000 8149 	beq.w	8014c9a <tcp_receive+0xeb2>
                  if (prev != NULL) {
 8014a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a0a:	2b00      	cmp	r3, #0
 8014a0c:	d003      	beq.n	8014a16 <tcp_receive+0xc2e>
                    prev->next = cseg;
 8014a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a10:	697a      	ldr	r2, [r7, #20]
 8014a12:	601a      	str	r2, [r3, #0]
 8014a14:	e002      	b.n	8014a1c <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	697a      	ldr	r2, [r7, #20]
 8014a1a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8014a1c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014a1e:	6978      	ldr	r0, [r7, #20]
 8014a20:	f7ff f8de 	bl	8013be0 <tcp_oos_insert_segment>
                }
                break;
 8014a24:	e139      	b.n	8014c9a <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8014a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d117      	bne.n	8014a5c <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014a2c:	4b2e      	ldr	r3, [pc, #184]	; (8014ae8 <tcp_receive+0xd00>)
 8014a2e:	681a      	ldr	r2, [r3, #0]
 8014a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a32:	68db      	ldr	r3, [r3, #12]
 8014a34:	685b      	ldr	r3, [r3, #4]
 8014a36:	1ad3      	subs	r3, r2, r3
 8014a38:	2b00      	cmp	r3, #0
 8014a3a:	da57      	bge.n	8014aec <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014a3c:	4829      	ldr	r0, [pc, #164]	; (8014ae4 <tcp_receive+0xcfc>)
 8014a3e:	f7fd fab3 	bl	8011fa8 <tcp_seg_copy>
 8014a42:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8014a44:	69bb      	ldr	r3, [r7, #24]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	f000 8129 	beq.w	8014c9e <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	69ba      	ldr	r2, [r7, #24]
 8014a50:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8014a52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014a54:	69b8      	ldr	r0, [r7, #24]
 8014a56:	f7ff f8c3 	bl	8013be0 <tcp_oos_insert_segment>
                  }
                  break;
 8014a5a:	e120      	b.n	8014c9e <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014a5c:	4b22      	ldr	r3, [pc, #136]	; (8014ae8 <tcp_receive+0xd00>)
 8014a5e:	681a      	ldr	r2, [r3, #0]
 8014a60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a62:	68db      	ldr	r3, [r3, #12]
 8014a64:	685b      	ldr	r3, [r3, #4]
 8014a66:	1ad3      	subs	r3, r2, r3
 8014a68:	3b01      	subs	r3, #1
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	db3e      	blt.n	8014aec <tcp_receive+0xd04>
 8014a6e:	4b1e      	ldr	r3, [pc, #120]	; (8014ae8 <tcp_receive+0xd00>)
 8014a70:	681a      	ldr	r2, [r3, #0]
 8014a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014a74:	68db      	ldr	r3, [r3, #12]
 8014a76:	685b      	ldr	r3, [r3, #4]
 8014a78:	1ad3      	subs	r3, r2, r3
 8014a7a:	3301      	adds	r3, #1
 8014a7c:	2b00      	cmp	r3, #0
 8014a7e:	dc35      	bgt.n	8014aec <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014a80:	4818      	ldr	r0, [pc, #96]	; (8014ae4 <tcp_receive+0xcfc>)
 8014a82:	f7fd fa91 	bl	8011fa8 <tcp_seg_copy>
 8014a86:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8014a88:	69fb      	ldr	r3, [r7, #28]
 8014a8a:	2b00      	cmp	r3, #0
 8014a8c:	f000 8109 	beq.w	8014ca2 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014a92:	68db      	ldr	r3, [r3, #12]
 8014a94:	685b      	ldr	r3, [r3, #4]
 8014a96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014a98:	8912      	ldrh	r2, [r2, #8]
 8014a9a:	441a      	add	r2, r3
 8014a9c:	4b12      	ldr	r3, [pc, #72]	; (8014ae8 <tcp_receive+0xd00>)
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	1ad3      	subs	r3, r2, r3
 8014aa2:	2b00      	cmp	r3, #0
 8014aa4:	dd12      	ble.n	8014acc <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8014aa6:	4b10      	ldr	r3, [pc, #64]	; (8014ae8 <tcp_receive+0xd00>)
 8014aa8:	681b      	ldr	r3, [r3, #0]
 8014aaa:	b29a      	uxth	r2, r3
 8014aac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014aae:	68db      	ldr	r3, [r3, #12]
 8014ab0:	685b      	ldr	r3, [r3, #4]
 8014ab2:	b29b      	uxth	r3, r3
 8014ab4:	1ad3      	subs	r3, r2, r3
 8014ab6:	b29a      	uxth	r2, r3
 8014ab8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014aba:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014abe:	685a      	ldr	r2, [r3, #4]
 8014ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ac2:	891b      	ldrh	r3, [r3, #8]
 8014ac4:	4619      	mov	r1, r3
 8014ac6:	4610      	mov	r0, r2
 8014ac8:	f7fb fd06 	bl	80104d8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014acc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ace:	69fa      	ldr	r2, [r7, #28]
 8014ad0:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8014ad2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014ad4:	69f8      	ldr	r0, [r7, #28]
 8014ad6:	f7ff f883 	bl	8013be0 <tcp_oos_insert_segment>
                  }
                  break;
 8014ada:	e0e2      	b.n	8014ca2 <tcp_receive+0xeba>
 8014adc:	200069c4 	.word	0x200069c4
 8014ae0:	200069c1 	.word	0x200069c1
 8014ae4:	20006994 	.word	0x20006994
 8014ae8:	200069b4 	.word	0x200069b4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8014aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014aee:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8014af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014af2:	681b      	ldr	r3, [r3, #0]
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	f040 80c6 	bne.w	8014c86 <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8014afa:	4b80      	ldr	r3, [pc, #512]	; (8014cfc <tcp_receive+0xf14>)
 8014afc:	681a      	ldr	r2, [r3, #0]
 8014afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b00:	68db      	ldr	r3, [r3, #12]
 8014b02:	685b      	ldr	r3, [r3, #4]
 8014b04:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	f340 80bd 	ble.w	8014c86 <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b0e:	68db      	ldr	r3, [r3, #12]
 8014b10:	899b      	ldrh	r3, [r3, #12]
 8014b12:	b29b      	uxth	r3, r3
 8014b14:	4618      	mov	r0, r3
 8014b16:	f7fa fb1d 	bl	800f154 <lwip_htons>
 8014b1a:	4603      	mov	r3, r0
 8014b1c:	b2db      	uxtb	r3, r3
 8014b1e:	f003 0301 	and.w	r3, r3, #1
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	f040 80bf 	bne.w	8014ca6 <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8014b28:	4875      	ldr	r0, [pc, #468]	; (8014d00 <tcp_receive+0xf18>)
 8014b2a:	f7fd fa3d 	bl	8011fa8 <tcp_seg_copy>
 8014b2e:	4602      	mov	r2, r0
 8014b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b32:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8014b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b36:	681b      	ldr	r3, [r3, #0]
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	f000 80b6 	beq.w	8014caa <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8014b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b40:	68db      	ldr	r3, [r3, #12]
 8014b42:	685b      	ldr	r3, [r3, #4]
 8014b44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014b46:	8912      	ldrh	r2, [r2, #8]
 8014b48:	441a      	add	r2, r3
 8014b4a:	4b6c      	ldr	r3, [pc, #432]	; (8014cfc <tcp_receive+0xf14>)
 8014b4c:	681b      	ldr	r3, [r3, #0]
 8014b4e:	1ad3      	subs	r3, r2, r3
 8014b50:	2b00      	cmp	r3, #0
 8014b52:	dd12      	ble.n	8014b7a <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8014b54:	4b69      	ldr	r3, [pc, #420]	; (8014cfc <tcp_receive+0xf14>)
 8014b56:	681b      	ldr	r3, [r3, #0]
 8014b58:	b29a      	uxth	r2, r3
 8014b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b5c:	68db      	ldr	r3, [r3, #12]
 8014b5e:	685b      	ldr	r3, [r3, #4]
 8014b60:	b29b      	uxth	r3, r3
 8014b62:	1ad3      	subs	r3, r2, r3
 8014b64:	b29a      	uxth	r2, r3
 8014b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b68:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8014b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b6c:	685a      	ldr	r2, [r3, #4]
 8014b6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b70:	891b      	ldrh	r3, [r3, #8]
 8014b72:	4619      	mov	r1, r3
 8014b74:	4610      	mov	r0, r2
 8014b76:	f7fb fcaf 	bl	80104d8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8014b7a:	4b62      	ldr	r3, [pc, #392]	; (8014d04 <tcp_receive+0xf1c>)
 8014b7c:	881b      	ldrh	r3, [r3, #0]
 8014b7e:	461a      	mov	r2, r3
 8014b80:	4b5e      	ldr	r3, [pc, #376]	; (8014cfc <tcp_receive+0xf14>)
 8014b82:	681b      	ldr	r3, [r3, #0]
 8014b84:	441a      	add	r2, r3
 8014b86:	687b      	ldr	r3, [r7, #4]
 8014b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014b8a:	6879      	ldr	r1, [r7, #4]
 8014b8c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014b8e:	440b      	add	r3, r1
 8014b90:	1ad3      	subs	r3, r2, r3
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	f340 8089 	ble.w	8014caa <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8014b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	68db      	ldr	r3, [r3, #12]
 8014b9e:	899b      	ldrh	r3, [r3, #12]
 8014ba0:	b29b      	uxth	r3, r3
 8014ba2:	4618      	mov	r0, r3
 8014ba4:	f7fa fad6 	bl	800f154 <lwip_htons>
 8014ba8:	4603      	mov	r3, r0
 8014baa:	b2db      	uxtb	r3, r3
 8014bac:	f003 0301 	and.w	r3, r3, #1
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d022      	beq.n	8014bfa <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8014bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	68db      	ldr	r3, [r3, #12]
 8014bba:	899b      	ldrh	r3, [r3, #12]
 8014bbc:	b29b      	uxth	r3, r3
 8014bbe:	b21b      	sxth	r3, r3
 8014bc0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014bc4:	b21c      	sxth	r4, r3
 8014bc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	68db      	ldr	r3, [r3, #12]
 8014bcc:	899b      	ldrh	r3, [r3, #12]
 8014bce:	b29b      	uxth	r3, r3
 8014bd0:	4618      	mov	r0, r3
 8014bd2:	f7fa fabf 	bl	800f154 <lwip_htons>
 8014bd6:	4603      	mov	r3, r0
 8014bd8:	b2db      	uxtb	r3, r3
 8014bda:	b29b      	uxth	r3, r3
 8014bdc:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014be0:	b29b      	uxth	r3, r3
 8014be2:	4618      	mov	r0, r3
 8014be4:	f7fa fab6 	bl	800f154 <lwip_htons>
 8014be8:	4603      	mov	r3, r0
 8014bea:	b21b      	sxth	r3, r3
 8014bec:	4323      	orrs	r3, r4
 8014bee:	b21a      	sxth	r2, r3
 8014bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014bf2:	681b      	ldr	r3, [r3, #0]
 8014bf4:	68db      	ldr	r3, [r3, #12]
 8014bf6:	b292      	uxth	r2, r2
 8014bf8:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014bfe:	b29a      	uxth	r2, r3
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014c04:	4413      	add	r3, r2
 8014c06:	b299      	uxth	r1, r3
 8014c08:	4b3c      	ldr	r3, [pc, #240]	; (8014cfc <tcp_receive+0xf14>)
 8014c0a:	681b      	ldr	r3, [r3, #0]
 8014c0c:	b29a      	uxth	r2, r3
 8014c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c10:	681b      	ldr	r3, [r3, #0]
 8014c12:	1a8a      	subs	r2, r1, r2
 8014c14:	b292      	uxth	r2, r2
 8014c16:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8014c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	685a      	ldr	r2, [r3, #4]
 8014c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c20:	681b      	ldr	r3, [r3, #0]
 8014c22:	891b      	ldrh	r3, [r3, #8]
 8014c24:	4619      	mov	r1, r3
 8014c26:	4610      	mov	r0, r2
 8014c28:	f7fb fc56 	bl	80104d8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8014c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c2e:	681b      	ldr	r3, [r3, #0]
 8014c30:	891c      	ldrh	r4, [r3, #8]
 8014c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c34:	681b      	ldr	r3, [r3, #0]
 8014c36:	68db      	ldr	r3, [r3, #12]
 8014c38:	899b      	ldrh	r3, [r3, #12]
 8014c3a:	b29b      	uxth	r3, r3
 8014c3c:	4618      	mov	r0, r3
 8014c3e:	f7fa fa89 	bl	800f154 <lwip_htons>
 8014c42:	4603      	mov	r3, r0
 8014c44:	b2db      	uxtb	r3, r3
 8014c46:	f003 0303 	and.w	r3, r3, #3
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d001      	beq.n	8014c52 <tcp_receive+0xe6a>
 8014c4e:	2301      	movs	r3, #1
 8014c50:	e000      	b.n	8014c54 <tcp_receive+0xe6c>
 8014c52:	2300      	movs	r3, #0
 8014c54:	4423      	add	r3, r4
 8014c56:	b29a      	uxth	r2, r3
 8014c58:	4b2a      	ldr	r3, [pc, #168]	; (8014d04 <tcp_receive+0xf1c>)
 8014c5a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014c5c:	4b29      	ldr	r3, [pc, #164]	; (8014d04 <tcp_receive+0xf1c>)
 8014c5e:	881b      	ldrh	r3, [r3, #0]
 8014c60:	461a      	mov	r2, r3
 8014c62:	4b26      	ldr	r3, [pc, #152]	; (8014cfc <tcp_receive+0xf14>)
 8014c64:	681b      	ldr	r3, [r3, #0]
 8014c66:	441a      	add	r2, r3
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014c6c:	6879      	ldr	r1, [r7, #4]
 8014c6e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014c70:	440b      	add	r3, r1
 8014c72:	429a      	cmp	r2, r3
 8014c74:	d019      	beq.n	8014caa <tcp_receive+0xec2>
 8014c76:	4b24      	ldr	r3, [pc, #144]	; (8014d08 <tcp_receive+0xf20>)
 8014c78:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8014c7c:	4923      	ldr	r1, [pc, #140]	; (8014d0c <tcp_receive+0xf24>)
 8014c7e:	4824      	ldr	r0, [pc, #144]	; (8014d10 <tcp_receive+0xf28>)
 8014c80:	f005 fd22 	bl	801a6c8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8014c84:	e011      	b.n	8014caa <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c88:	681b      	ldr	r3, [r3, #0]
 8014c8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8014c8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	f47f aea4 	bne.w	80149dc <tcp_receive+0xbf4>
 8014c94:	e00a      	b.n	8014cac <tcp_receive+0xec4>
                break;
 8014c96:	bf00      	nop
 8014c98:	e008      	b.n	8014cac <tcp_receive+0xec4>
                break;
 8014c9a:	bf00      	nop
 8014c9c:	e006      	b.n	8014cac <tcp_receive+0xec4>
                  break;
 8014c9e:	bf00      	nop
 8014ca0:	e004      	b.n	8014cac <tcp_receive+0xec4>
                  break;
 8014ca2:	bf00      	nop
 8014ca4:	e002      	b.n	8014cac <tcp_receive+0xec4>
                  break;
 8014ca6:	bf00      	nop
 8014ca8:	e000      	b.n	8014cac <tcp_receive+0xec4>
                break;
 8014caa:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8014cac:	6878      	ldr	r0, [r7, #4]
 8014cae:	f001 fe8b 	bl	80169c8 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8014cb2:	e003      	b.n	8014cbc <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8014cb4:	6878      	ldr	r0, [r7, #4]
 8014cb6:	f001 fe87 	bl	80169c8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014cba:	e01a      	b.n	8014cf2 <tcp_receive+0xf0a>
 8014cbc:	e019      	b.n	8014cf2 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8014cbe:	4b0f      	ldr	r3, [pc, #60]	; (8014cfc <tcp_receive+0xf14>)
 8014cc0:	681a      	ldr	r2, [r3, #0]
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cc6:	1ad3      	subs	r3, r2, r3
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	db0a      	blt.n	8014ce2 <tcp_receive+0xefa>
 8014ccc:	4b0b      	ldr	r3, [pc, #44]	; (8014cfc <tcp_receive+0xf14>)
 8014cce:	681a      	ldr	r2, [r3, #0]
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014cd4:	6879      	ldr	r1, [r7, #4]
 8014cd6:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014cd8:	440b      	add	r3, r1
 8014cda:	1ad3      	subs	r3, r2, r3
 8014cdc:	3301      	adds	r3, #1
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	dd07      	ble.n	8014cf2 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 8014ce2:	687b      	ldr	r3, [r7, #4]
 8014ce4:	8b5b      	ldrh	r3, [r3, #26]
 8014ce6:	f043 0302 	orr.w	r3, r3, #2
 8014cea:	b29a      	uxth	r2, r3
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8014cf0:	e7ff      	b.n	8014cf2 <tcp_receive+0xf0a>
 8014cf2:	bf00      	nop
 8014cf4:	3750      	adds	r7, #80	; 0x50
 8014cf6:	46bd      	mov	sp, r7
 8014cf8:	bdb0      	pop	{r4, r5, r7, pc}
 8014cfa:	bf00      	nop
 8014cfc:	200069b4 	.word	0x200069b4
 8014d00:	20006994 	.word	0x20006994
 8014d04:	200069be 	.word	0x200069be
 8014d08:	0801d658 	.word	0x0801d658
 8014d0c:	0801da00 	.word	0x0801da00
 8014d10:	0801d6a4 	.word	0x0801d6a4

08014d14 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8014d14:	b480      	push	{r7}
 8014d16:	b083      	sub	sp, #12
 8014d18:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8014d1a:	4b15      	ldr	r3, [pc, #84]	; (8014d70 <tcp_get_next_optbyte+0x5c>)
 8014d1c:	881b      	ldrh	r3, [r3, #0]
 8014d1e:	1c5a      	adds	r2, r3, #1
 8014d20:	b291      	uxth	r1, r2
 8014d22:	4a13      	ldr	r2, [pc, #76]	; (8014d70 <tcp_get_next_optbyte+0x5c>)
 8014d24:	8011      	strh	r1, [r2, #0]
 8014d26:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8014d28:	4b12      	ldr	r3, [pc, #72]	; (8014d74 <tcp_get_next_optbyte+0x60>)
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	2b00      	cmp	r3, #0
 8014d2e:	d004      	beq.n	8014d3a <tcp_get_next_optbyte+0x26>
 8014d30:	4b11      	ldr	r3, [pc, #68]	; (8014d78 <tcp_get_next_optbyte+0x64>)
 8014d32:	881b      	ldrh	r3, [r3, #0]
 8014d34:	88fa      	ldrh	r2, [r7, #6]
 8014d36:	429a      	cmp	r2, r3
 8014d38:	d208      	bcs.n	8014d4c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8014d3a:	4b10      	ldr	r3, [pc, #64]	; (8014d7c <tcp_get_next_optbyte+0x68>)
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	3314      	adds	r3, #20
 8014d40:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8014d42:	88fb      	ldrh	r3, [r7, #6]
 8014d44:	683a      	ldr	r2, [r7, #0]
 8014d46:	4413      	add	r3, r2
 8014d48:	781b      	ldrb	r3, [r3, #0]
 8014d4a:	e00b      	b.n	8014d64 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8014d4c:	88fb      	ldrh	r3, [r7, #6]
 8014d4e:	b2da      	uxtb	r2, r3
 8014d50:	4b09      	ldr	r3, [pc, #36]	; (8014d78 <tcp_get_next_optbyte+0x64>)
 8014d52:	881b      	ldrh	r3, [r3, #0]
 8014d54:	b2db      	uxtb	r3, r3
 8014d56:	1ad3      	subs	r3, r2, r3
 8014d58:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8014d5a:	4b06      	ldr	r3, [pc, #24]	; (8014d74 <tcp_get_next_optbyte+0x60>)
 8014d5c:	681a      	ldr	r2, [r3, #0]
 8014d5e:	797b      	ldrb	r3, [r7, #5]
 8014d60:	4413      	add	r3, r2
 8014d62:	781b      	ldrb	r3, [r3, #0]
  }
}
 8014d64:	4618      	mov	r0, r3
 8014d66:	370c      	adds	r7, #12
 8014d68:	46bd      	mov	sp, r7
 8014d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d6e:	4770      	bx	lr
 8014d70:	200069b0 	.word	0x200069b0
 8014d74:	200069ac 	.word	0x200069ac
 8014d78:	200069aa 	.word	0x200069aa
 8014d7c:	200069a4 	.word	0x200069a4

08014d80 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8014d80:	b580      	push	{r7, lr}
 8014d82:	b084      	sub	sp, #16
 8014d84:	af00      	add	r7, sp, #0
 8014d86:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	2b00      	cmp	r3, #0
 8014d8c:	d106      	bne.n	8014d9c <tcp_parseopt+0x1c>
 8014d8e:	4b32      	ldr	r3, [pc, #200]	; (8014e58 <tcp_parseopt+0xd8>)
 8014d90:	f240 727d 	movw	r2, #1917	; 0x77d
 8014d94:	4931      	ldr	r1, [pc, #196]	; (8014e5c <tcp_parseopt+0xdc>)
 8014d96:	4832      	ldr	r0, [pc, #200]	; (8014e60 <tcp_parseopt+0xe0>)
 8014d98:	f005 fc96 	bl	801a6c8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8014d9c:	4b31      	ldr	r3, [pc, #196]	; (8014e64 <tcp_parseopt+0xe4>)
 8014d9e:	881b      	ldrh	r3, [r3, #0]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d055      	beq.n	8014e50 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014da4:	4b30      	ldr	r3, [pc, #192]	; (8014e68 <tcp_parseopt+0xe8>)
 8014da6:	2200      	movs	r2, #0
 8014da8:	801a      	strh	r2, [r3, #0]
 8014daa:	e045      	b.n	8014e38 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8014dac:	f7ff ffb2 	bl	8014d14 <tcp_get_next_optbyte>
 8014db0:	4603      	mov	r3, r0
 8014db2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8014db4:	7bfb      	ldrb	r3, [r7, #15]
 8014db6:	2b02      	cmp	r3, #2
 8014db8:	d006      	beq.n	8014dc8 <tcp_parseopt+0x48>
 8014dba:	2b02      	cmp	r3, #2
 8014dbc:	dc2b      	bgt.n	8014e16 <tcp_parseopt+0x96>
 8014dbe:	2b00      	cmp	r3, #0
 8014dc0:	d041      	beq.n	8014e46 <tcp_parseopt+0xc6>
 8014dc2:	2b01      	cmp	r3, #1
 8014dc4:	d127      	bne.n	8014e16 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8014dc6:	e037      	b.n	8014e38 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8014dc8:	f7ff ffa4 	bl	8014d14 <tcp_get_next_optbyte>
 8014dcc:	4603      	mov	r3, r0
 8014dce:	2b04      	cmp	r3, #4
 8014dd0:	d13b      	bne.n	8014e4a <tcp_parseopt+0xca>
 8014dd2:	4b25      	ldr	r3, [pc, #148]	; (8014e68 <tcp_parseopt+0xe8>)
 8014dd4:	881b      	ldrh	r3, [r3, #0]
 8014dd6:	3301      	adds	r3, #1
 8014dd8:	4a22      	ldr	r2, [pc, #136]	; (8014e64 <tcp_parseopt+0xe4>)
 8014dda:	8812      	ldrh	r2, [r2, #0]
 8014ddc:	4293      	cmp	r3, r2
 8014dde:	da34      	bge.n	8014e4a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8014de0:	f7ff ff98 	bl	8014d14 <tcp_get_next_optbyte>
 8014de4:	4603      	mov	r3, r0
 8014de6:	b29b      	uxth	r3, r3
 8014de8:	021b      	lsls	r3, r3, #8
 8014dea:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8014dec:	f7ff ff92 	bl	8014d14 <tcp_get_next_optbyte>
 8014df0:	4603      	mov	r3, r0
 8014df2:	b29a      	uxth	r2, r3
 8014df4:	89bb      	ldrh	r3, [r7, #12]
 8014df6:	4313      	orrs	r3, r2
 8014df8:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8014dfa:	89bb      	ldrh	r3, [r7, #12]
 8014dfc:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8014e00:	d804      	bhi.n	8014e0c <tcp_parseopt+0x8c>
 8014e02:	89bb      	ldrh	r3, [r7, #12]
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d001      	beq.n	8014e0c <tcp_parseopt+0x8c>
 8014e08:	89ba      	ldrh	r2, [r7, #12]
 8014e0a:	e001      	b.n	8014e10 <tcp_parseopt+0x90>
 8014e0c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8014e14:	e010      	b.n	8014e38 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8014e16:	f7ff ff7d 	bl	8014d14 <tcp_get_next_optbyte>
 8014e1a:	4603      	mov	r3, r0
 8014e1c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8014e1e:	7afb      	ldrb	r3, [r7, #11]
 8014e20:	2b01      	cmp	r3, #1
 8014e22:	d914      	bls.n	8014e4e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8014e24:	7afb      	ldrb	r3, [r7, #11]
 8014e26:	b29a      	uxth	r2, r3
 8014e28:	4b0f      	ldr	r3, [pc, #60]	; (8014e68 <tcp_parseopt+0xe8>)
 8014e2a:	881b      	ldrh	r3, [r3, #0]
 8014e2c:	4413      	add	r3, r2
 8014e2e:	b29b      	uxth	r3, r3
 8014e30:	3b02      	subs	r3, #2
 8014e32:	b29a      	uxth	r2, r3
 8014e34:	4b0c      	ldr	r3, [pc, #48]	; (8014e68 <tcp_parseopt+0xe8>)
 8014e36:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8014e38:	4b0b      	ldr	r3, [pc, #44]	; (8014e68 <tcp_parseopt+0xe8>)
 8014e3a:	881a      	ldrh	r2, [r3, #0]
 8014e3c:	4b09      	ldr	r3, [pc, #36]	; (8014e64 <tcp_parseopt+0xe4>)
 8014e3e:	881b      	ldrh	r3, [r3, #0]
 8014e40:	429a      	cmp	r2, r3
 8014e42:	d3b3      	bcc.n	8014dac <tcp_parseopt+0x2c>
 8014e44:	e004      	b.n	8014e50 <tcp_parseopt+0xd0>
          return;
 8014e46:	bf00      	nop
 8014e48:	e002      	b.n	8014e50 <tcp_parseopt+0xd0>
            return;
 8014e4a:	bf00      	nop
 8014e4c:	e000      	b.n	8014e50 <tcp_parseopt+0xd0>
            return;
 8014e4e:	bf00      	nop
      }
    }
  }
}
 8014e50:	3710      	adds	r7, #16
 8014e52:	46bd      	mov	sp, r7
 8014e54:	bd80      	pop	{r7, pc}
 8014e56:	bf00      	nop
 8014e58:	0801d658 	.word	0x0801d658
 8014e5c:	0801dabc 	.word	0x0801dabc
 8014e60:	0801d6a4 	.word	0x0801d6a4
 8014e64:	200069a8 	.word	0x200069a8
 8014e68:	200069b0 	.word	0x200069b0

08014e6c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8014e6c:	b480      	push	{r7}
 8014e6e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8014e70:	4b05      	ldr	r3, [pc, #20]	; (8014e88 <tcp_trigger_input_pcb_close+0x1c>)
 8014e72:	781b      	ldrb	r3, [r3, #0]
 8014e74:	f043 0310 	orr.w	r3, r3, #16
 8014e78:	b2da      	uxtb	r2, r3
 8014e7a:	4b03      	ldr	r3, [pc, #12]	; (8014e88 <tcp_trigger_input_pcb_close+0x1c>)
 8014e7c:	701a      	strb	r2, [r3, #0]
}
 8014e7e:	bf00      	nop
 8014e80:	46bd      	mov	sp, r7
 8014e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e86:	4770      	bx	lr
 8014e88:	200069c1 	.word	0x200069c1

08014e8c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8014e8c:	b580      	push	{r7, lr}
 8014e8e:	b084      	sub	sp, #16
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	60f8      	str	r0, [r7, #12]
 8014e94:	60b9      	str	r1, [r7, #8]
 8014e96:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8014e98:	68fb      	ldr	r3, [r7, #12]
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d00a      	beq.n	8014eb4 <tcp_route+0x28>
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	7a1b      	ldrb	r3, [r3, #8]
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d006      	beq.n	8014eb4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	7a1b      	ldrb	r3, [r3, #8]
 8014eaa:	4618      	mov	r0, r3
 8014eac:	f7fb f90c 	bl	80100c8 <netif_get_by_index>
 8014eb0:	4603      	mov	r3, r0
 8014eb2:	e003      	b.n	8014ebc <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8014eb4:	6878      	ldr	r0, [r7, #4]
 8014eb6:	f003 fe35 	bl	8018b24 <ip4_route>
 8014eba:	4603      	mov	r3, r0
  }
}
 8014ebc:	4618      	mov	r0, r3
 8014ebe:	3710      	adds	r7, #16
 8014ec0:	46bd      	mov	sp, r7
 8014ec2:	bd80      	pop	{r7, pc}

08014ec4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8014ec4:	b590      	push	{r4, r7, lr}
 8014ec6:	b087      	sub	sp, #28
 8014ec8:	af00      	add	r7, sp, #0
 8014eca:	60f8      	str	r0, [r7, #12]
 8014ecc:	60b9      	str	r1, [r7, #8]
 8014ece:	603b      	str	r3, [r7, #0]
 8014ed0:	4613      	mov	r3, r2
 8014ed2:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8014ed4:	68fb      	ldr	r3, [r7, #12]
 8014ed6:	2b00      	cmp	r3, #0
 8014ed8:	d105      	bne.n	8014ee6 <tcp_create_segment+0x22>
 8014eda:	4b44      	ldr	r3, [pc, #272]	; (8014fec <tcp_create_segment+0x128>)
 8014edc:	22a3      	movs	r2, #163	; 0xa3
 8014ede:	4944      	ldr	r1, [pc, #272]	; (8014ff0 <tcp_create_segment+0x12c>)
 8014ee0:	4844      	ldr	r0, [pc, #272]	; (8014ff4 <tcp_create_segment+0x130>)
 8014ee2:	f005 fbf1 	bl	801a6c8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8014ee6:	68bb      	ldr	r3, [r7, #8]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d105      	bne.n	8014ef8 <tcp_create_segment+0x34>
 8014eec:	4b3f      	ldr	r3, [pc, #252]	; (8014fec <tcp_create_segment+0x128>)
 8014eee:	22a4      	movs	r2, #164	; 0xa4
 8014ef0:	4941      	ldr	r1, [pc, #260]	; (8014ff8 <tcp_create_segment+0x134>)
 8014ef2:	4840      	ldr	r0, [pc, #256]	; (8014ff4 <tcp_create_segment+0x130>)
 8014ef4:	f005 fbe8 	bl	801a6c8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8014ef8:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014efc:	009b      	lsls	r3, r3, #2
 8014efe:	b2db      	uxtb	r3, r3
 8014f00:	f003 0304 	and.w	r3, r3, #4
 8014f04:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8014f06:	2003      	movs	r0, #3
 8014f08:	f7fa fdda 	bl	800fac0 <memp_malloc>
 8014f0c:	6138      	str	r0, [r7, #16]
 8014f0e:	693b      	ldr	r3, [r7, #16]
 8014f10:	2b00      	cmp	r3, #0
 8014f12:	d104      	bne.n	8014f1e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8014f14:	68b8      	ldr	r0, [r7, #8]
 8014f16:	f7fb fc65 	bl	80107e4 <pbuf_free>
    return NULL;
 8014f1a:	2300      	movs	r3, #0
 8014f1c:	e061      	b.n	8014fe2 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8014f1e:	693b      	ldr	r3, [r7, #16]
 8014f20:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014f24:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8014f26:	693b      	ldr	r3, [r7, #16]
 8014f28:	2200      	movs	r2, #0
 8014f2a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8014f2c:	693b      	ldr	r3, [r7, #16]
 8014f2e:	68ba      	ldr	r2, [r7, #8]
 8014f30:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8014f32:	68bb      	ldr	r3, [r7, #8]
 8014f34:	891a      	ldrh	r2, [r3, #8]
 8014f36:	7dfb      	ldrb	r3, [r7, #23]
 8014f38:	b29b      	uxth	r3, r3
 8014f3a:	429a      	cmp	r2, r3
 8014f3c:	d205      	bcs.n	8014f4a <tcp_create_segment+0x86>
 8014f3e:	4b2b      	ldr	r3, [pc, #172]	; (8014fec <tcp_create_segment+0x128>)
 8014f40:	22b0      	movs	r2, #176	; 0xb0
 8014f42:	492e      	ldr	r1, [pc, #184]	; (8014ffc <tcp_create_segment+0x138>)
 8014f44:	482b      	ldr	r0, [pc, #172]	; (8014ff4 <tcp_create_segment+0x130>)
 8014f46:	f005 fbbf 	bl	801a6c8 <iprintf>
  seg->len = p->tot_len - optlen;
 8014f4a:	68bb      	ldr	r3, [r7, #8]
 8014f4c:	891a      	ldrh	r2, [r3, #8]
 8014f4e:	7dfb      	ldrb	r3, [r7, #23]
 8014f50:	b29b      	uxth	r3, r3
 8014f52:	1ad3      	subs	r3, r2, r3
 8014f54:	b29a      	uxth	r2, r3
 8014f56:	693b      	ldr	r3, [r7, #16]
 8014f58:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8014f5a:	2114      	movs	r1, #20
 8014f5c:	68b8      	ldr	r0, [r7, #8]
 8014f5e:	f7fb fbab 	bl	80106b8 <pbuf_add_header>
 8014f62:	4603      	mov	r3, r0
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d004      	beq.n	8014f72 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8014f68:	6938      	ldr	r0, [r7, #16]
 8014f6a:	f7fd f804 	bl	8011f76 <tcp_seg_free>
    return NULL;
 8014f6e:	2300      	movs	r3, #0
 8014f70:	e037      	b.n	8014fe2 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8014f72:	693b      	ldr	r3, [r7, #16]
 8014f74:	685b      	ldr	r3, [r3, #4]
 8014f76:	685a      	ldr	r2, [r3, #4]
 8014f78:	693b      	ldr	r3, [r7, #16]
 8014f7a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8014f7c:	68fb      	ldr	r3, [r7, #12]
 8014f7e:	8ada      	ldrh	r2, [r3, #22]
 8014f80:	693b      	ldr	r3, [r7, #16]
 8014f82:	68dc      	ldr	r4, [r3, #12]
 8014f84:	4610      	mov	r0, r2
 8014f86:	f7fa f8e5 	bl	800f154 <lwip_htons>
 8014f8a:	4603      	mov	r3, r0
 8014f8c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	8b1a      	ldrh	r2, [r3, #24]
 8014f92:	693b      	ldr	r3, [r7, #16]
 8014f94:	68dc      	ldr	r4, [r3, #12]
 8014f96:	4610      	mov	r0, r2
 8014f98:	f7fa f8dc 	bl	800f154 <lwip_htons>
 8014f9c:	4603      	mov	r3, r0
 8014f9e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8014fa0:	693b      	ldr	r3, [r7, #16]
 8014fa2:	68dc      	ldr	r4, [r3, #12]
 8014fa4:	6838      	ldr	r0, [r7, #0]
 8014fa6:	f7fa f8ea 	bl	800f17e <lwip_htonl>
 8014faa:	4603      	mov	r3, r0
 8014fac:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8014fae:	7dfb      	ldrb	r3, [r7, #23]
 8014fb0:	089b      	lsrs	r3, r3, #2
 8014fb2:	b2db      	uxtb	r3, r3
 8014fb4:	b29b      	uxth	r3, r3
 8014fb6:	3305      	adds	r3, #5
 8014fb8:	b29b      	uxth	r3, r3
 8014fba:	031b      	lsls	r3, r3, #12
 8014fbc:	b29a      	uxth	r2, r3
 8014fbe:	79fb      	ldrb	r3, [r7, #7]
 8014fc0:	b29b      	uxth	r3, r3
 8014fc2:	4313      	orrs	r3, r2
 8014fc4:	b29a      	uxth	r2, r3
 8014fc6:	693b      	ldr	r3, [r7, #16]
 8014fc8:	68dc      	ldr	r4, [r3, #12]
 8014fca:	4610      	mov	r0, r2
 8014fcc:	f7fa f8c2 	bl	800f154 <lwip_htons>
 8014fd0:	4603      	mov	r3, r0
 8014fd2:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8014fd4:	693b      	ldr	r3, [r7, #16]
 8014fd6:	68db      	ldr	r3, [r3, #12]
 8014fd8:	2200      	movs	r2, #0
 8014fda:	749a      	strb	r2, [r3, #18]
 8014fdc:	2200      	movs	r2, #0
 8014fde:	74da      	strb	r2, [r3, #19]
  return seg;
 8014fe0:	693b      	ldr	r3, [r7, #16]
}
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	371c      	adds	r7, #28
 8014fe6:	46bd      	mov	sp, r7
 8014fe8:	bd90      	pop	{r4, r7, pc}
 8014fea:	bf00      	nop
 8014fec:	0801dad8 	.word	0x0801dad8
 8014ff0:	0801db0c 	.word	0x0801db0c
 8014ff4:	0801db2c 	.word	0x0801db2c
 8014ff8:	0801db54 	.word	0x0801db54
 8014ffc:	0801db78 	.word	0x0801db78

08015000 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8015000:	b580      	push	{r7, lr}
 8015002:	b086      	sub	sp, #24
 8015004:	af00      	add	r7, sp, #0
 8015006:	607b      	str	r3, [r7, #4]
 8015008:	4603      	mov	r3, r0
 801500a:	73fb      	strb	r3, [r7, #15]
 801500c:	460b      	mov	r3, r1
 801500e:	81bb      	strh	r3, [r7, #12]
 8015010:	4613      	mov	r3, r2
 8015012:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8015014:	89bb      	ldrh	r3, [r7, #12]
 8015016:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8015018:	687b      	ldr	r3, [r7, #4]
 801501a:	2b00      	cmp	r3, #0
 801501c:	d105      	bne.n	801502a <tcp_pbuf_prealloc+0x2a>
 801501e:	4b30      	ldr	r3, [pc, #192]	; (80150e0 <tcp_pbuf_prealloc+0xe0>)
 8015020:	22e8      	movs	r2, #232	; 0xe8
 8015022:	4930      	ldr	r1, [pc, #192]	; (80150e4 <tcp_pbuf_prealloc+0xe4>)
 8015024:	4830      	ldr	r0, [pc, #192]	; (80150e8 <tcp_pbuf_prealloc+0xe8>)
 8015026:	f005 fb4f 	bl	801a6c8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801502a:	6a3b      	ldr	r3, [r7, #32]
 801502c:	2b00      	cmp	r3, #0
 801502e:	d105      	bne.n	801503c <tcp_pbuf_prealloc+0x3c>
 8015030:	4b2b      	ldr	r3, [pc, #172]	; (80150e0 <tcp_pbuf_prealloc+0xe0>)
 8015032:	22e9      	movs	r2, #233	; 0xe9
 8015034:	492d      	ldr	r1, [pc, #180]	; (80150ec <tcp_pbuf_prealloc+0xec>)
 8015036:	482c      	ldr	r0, [pc, #176]	; (80150e8 <tcp_pbuf_prealloc+0xe8>)
 8015038:	f005 fb46 	bl	801a6c8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801503c:	89ba      	ldrh	r2, [r7, #12]
 801503e:	897b      	ldrh	r3, [r7, #10]
 8015040:	429a      	cmp	r2, r3
 8015042:	d221      	bcs.n	8015088 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015044:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015048:	f003 0302 	and.w	r3, r3, #2
 801504c:	2b00      	cmp	r3, #0
 801504e:	d111      	bne.n	8015074 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8015050:	6a3b      	ldr	r3, [r7, #32]
 8015052:	8b5b      	ldrh	r3, [r3, #26]
 8015054:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015058:	2b00      	cmp	r3, #0
 801505a:	d115      	bne.n	8015088 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801505c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015060:	2b00      	cmp	r3, #0
 8015062:	d007      	beq.n	8015074 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8015064:	6a3b      	ldr	r3, [r7, #32]
 8015066:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8015068:	2b00      	cmp	r3, #0
 801506a:	d103      	bne.n	8015074 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801506c:	6a3b      	ldr	r3, [r7, #32]
 801506e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8015070:	2b00      	cmp	r3, #0
 8015072:	d009      	beq.n	8015088 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8015074:	89bb      	ldrh	r3, [r7, #12]
 8015076:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801507a:	f023 0203 	bic.w	r2, r3, #3
 801507e:	897b      	ldrh	r3, [r7, #10]
 8015080:	4293      	cmp	r3, r2
 8015082:	bf28      	it	cs
 8015084:	4613      	movcs	r3, r2
 8015086:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8015088:	8af9      	ldrh	r1, [r7, #22]
 801508a:	7bfb      	ldrb	r3, [r7, #15]
 801508c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015090:	4618      	mov	r0, r3
 8015092:	f7fb f8c3 	bl	801021c <pbuf_alloc>
 8015096:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015098:	693b      	ldr	r3, [r7, #16]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d101      	bne.n	80150a2 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801509e:	2300      	movs	r3, #0
 80150a0:	e019      	b.n	80150d6 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80150a2:	693b      	ldr	r3, [r7, #16]
 80150a4:	681b      	ldr	r3, [r3, #0]
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d006      	beq.n	80150b8 <tcp_pbuf_prealloc+0xb8>
 80150aa:	4b0d      	ldr	r3, [pc, #52]	; (80150e0 <tcp_pbuf_prealloc+0xe0>)
 80150ac:	f240 120b 	movw	r2, #267	; 0x10b
 80150b0:	490f      	ldr	r1, [pc, #60]	; (80150f0 <tcp_pbuf_prealloc+0xf0>)
 80150b2:	480d      	ldr	r0, [pc, #52]	; (80150e8 <tcp_pbuf_prealloc+0xe8>)
 80150b4:	f005 fb08 	bl	801a6c8 <iprintf>
  *oversize = p->len - length;
 80150b8:	693b      	ldr	r3, [r7, #16]
 80150ba:	895a      	ldrh	r2, [r3, #10]
 80150bc:	89bb      	ldrh	r3, [r7, #12]
 80150be:	1ad3      	subs	r3, r2, r3
 80150c0:	b29a      	uxth	r2, r3
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 80150c6:	693b      	ldr	r3, [r7, #16]
 80150c8:	89ba      	ldrh	r2, [r7, #12]
 80150ca:	811a      	strh	r2, [r3, #8]
 80150cc:	693b      	ldr	r3, [r7, #16]
 80150ce:	891a      	ldrh	r2, [r3, #8]
 80150d0:	693b      	ldr	r3, [r7, #16]
 80150d2:	815a      	strh	r2, [r3, #10]
  return p;
 80150d4:	693b      	ldr	r3, [r7, #16]
}
 80150d6:	4618      	mov	r0, r3
 80150d8:	3718      	adds	r7, #24
 80150da:	46bd      	mov	sp, r7
 80150dc:	bd80      	pop	{r7, pc}
 80150de:	bf00      	nop
 80150e0:	0801dad8 	.word	0x0801dad8
 80150e4:	0801db90 	.word	0x0801db90
 80150e8:	0801db2c 	.word	0x0801db2c
 80150ec:	0801dbb4 	.word	0x0801dbb4
 80150f0:	0801dbd4 	.word	0x0801dbd4

080150f4 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 80150f4:	b580      	push	{r7, lr}
 80150f6:	b082      	sub	sp, #8
 80150f8:	af00      	add	r7, sp, #0
 80150fa:	6078      	str	r0, [r7, #4]
 80150fc:	460b      	mov	r3, r1
 80150fe:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	2b00      	cmp	r3, #0
 8015104:	d106      	bne.n	8015114 <tcp_write_checks+0x20>
 8015106:	4b33      	ldr	r3, [pc, #204]	; (80151d4 <tcp_write_checks+0xe0>)
 8015108:	f240 1233 	movw	r2, #307	; 0x133
 801510c:	4932      	ldr	r1, [pc, #200]	; (80151d8 <tcp_write_checks+0xe4>)
 801510e:	4833      	ldr	r0, [pc, #204]	; (80151dc <tcp_write_checks+0xe8>)
 8015110:	f005 fada 	bl	801a6c8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	7d1b      	ldrb	r3, [r3, #20]
 8015118:	2b04      	cmp	r3, #4
 801511a:	d00e      	beq.n	801513a <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8015120:	2b07      	cmp	r3, #7
 8015122:	d00a      	beq.n	801513a <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8015128:	2b02      	cmp	r3, #2
 801512a:	d006      	beq.n	801513a <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8015130:	2b03      	cmp	r3, #3
 8015132:	d002      	beq.n	801513a <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8015134:	f06f 030a 	mvn.w	r3, #10
 8015138:	e048      	b.n	80151cc <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801513a:	887b      	ldrh	r3, [r7, #2]
 801513c:	2b00      	cmp	r3, #0
 801513e:	d101      	bne.n	8015144 <tcp_write_checks+0x50>
    return ERR_OK;
 8015140:	2300      	movs	r3, #0
 8015142:	e043      	b.n	80151cc <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801514a:	887a      	ldrh	r2, [r7, #2]
 801514c:	429a      	cmp	r2, r3
 801514e:	d909      	bls.n	8015164 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015150:	687b      	ldr	r3, [r7, #4]
 8015152:	8b5b      	ldrh	r3, [r3, #26]
 8015154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015158:	b29a      	uxth	r2, r3
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801515e:	f04f 33ff 	mov.w	r3, #4294967295
 8015162:	e033      	b.n	80151cc <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801516a:	2b08      	cmp	r3, #8
 801516c:	d909      	bls.n	8015182 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	8b5b      	ldrh	r3, [r3, #26]
 8015172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015176:	b29a      	uxth	r2, r3
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801517c:	f04f 33ff 	mov.w	r3, #4294967295
 8015180:	e024      	b.n	80151cc <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015188:	2b00      	cmp	r3, #0
 801518a:	d00f      	beq.n	80151ac <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015190:	2b00      	cmp	r3, #0
 8015192:	d11a      	bne.n	80151ca <tcp_write_checks+0xd6>
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015198:	2b00      	cmp	r3, #0
 801519a:	d116      	bne.n	80151ca <tcp_write_checks+0xd6>
 801519c:	4b0d      	ldr	r3, [pc, #52]	; (80151d4 <tcp_write_checks+0xe0>)
 801519e:	f240 1255 	movw	r2, #341	; 0x155
 80151a2:	490f      	ldr	r1, [pc, #60]	; (80151e0 <tcp_write_checks+0xec>)
 80151a4:	480d      	ldr	r0, [pc, #52]	; (80151dc <tcp_write_checks+0xe8>)
 80151a6:	f005 fa8f 	bl	801a6c8 <iprintf>
 80151aa:	e00e      	b.n	80151ca <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80151ac:	687b      	ldr	r3, [r7, #4]
 80151ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80151b0:	2b00      	cmp	r3, #0
 80151b2:	d103      	bne.n	80151bc <tcp_write_checks+0xc8>
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d006      	beq.n	80151ca <tcp_write_checks+0xd6>
 80151bc:	4b05      	ldr	r3, [pc, #20]	; (80151d4 <tcp_write_checks+0xe0>)
 80151be:	f44f 72ac 	mov.w	r2, #344	; 0x158
 80151c2:	4908      	ldr	r1, [pc, #32]	; (80151e4 <tcp_write_checks+0xf0>)
 80151c4:	4805      	ldr	r0, [pc, #20]	; (80151dc <tcp_write_checks+0xe8>)
 80151c6:	f005 fa7f 	bl	801a6c8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80151ca:	2300      	movs	r3, #0
}
 80151cc:	4618      	mov	r0, r3
 80151ce:	3708      	adds	r7, #8
 80151d0:	46bd      	mov	sp, r7
 80151d2:	bd80      	pop	{r7, pc}
 80151d4:	0801dad8 	.word	0x0801dad8
 80151d8:	0801dbe8 	.word	0x0801dbe8
 80151dc:	0801db2c 	.word	0x0801db2c
 80151e0:	0801dc08 	.word	0x0801dc08
 80151e4:	0801dc44 	.word	0x0801dc44

080151e8 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 80151e8:	b590      	push	{r4, r7, lr}
 80151ea:	b09b      	sub	sp, #108	; 0x6c
 80151ec:	af04      	add	r7, sp, #16
 80151ee:	60f8      	str	r0, [r7, #12]
 80151f0:	60b9      	str	r1, [r7, #8]
 80151f2:	4611      	mov	r1, r2
 80151f4:	461a      	mov	r2, r3
 80151f6:	460b      	mov	r3, r1
 80151f8:	80fb      	strh	r3, [r7, #6]
 80151fa:	4613      	mov	r3, r2
 80151fc:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 80151fe:	2300      	movs	r3, #0
 8015200:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8015202:	2300      	movs	r3, #0
 8015204:	653b      	str	r3, [r7, #80]	; 0x50
 8015206:	2300      	movs	r3, #0
 8015208:	64fb      	str	r3, [r7, #76]	; 0x4c
 801520a:	2300      	movs	r3, #0
 801520c:	64bb      	str	r3, [r7, #72]	; 0x48
 801520e:	2300      	movs	r3, #0
 8015210:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8015212:	2300      	movs	r3, #0
 8015214:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8015218:	2300      	movs	r3, #0
 801521a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801521e:	2300      	movs	r3, #0
 8015220:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8015222:	2300      	movs	r3, #0
 8015224:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8015226:	2300      	movs	r3, #0
 8015228:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801522a:	68fb      	ldr	r3, [r7, #12]
 801522c:	2b00      	cmp	r3, #0
 801522e:	d109      	bne.n	8015244 <tcp_write+0x5c>
 8015230:	4ba4      	ldr	r3, [pc, #656]	; (80154c4 <tcp_write+0x2dc>)
 8015232:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8015236:	49a4      	ldr	r1, [pc, #656]	; (80154c8 <tcp_write+0x2e0>)
 8015238:	48a4      	ldr	r0, [pc, #656]	; (80154cc <tcp_write+0x2e4>)
 801523a:	f005 fa45 	bl	801a6c8 <iprintf>
 801523e:	f06f 030f 	mvn.w	r3, #15
 8015242:	e32a      	b.n	801589a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8015244:	68fb      	ldr	r3, [r7, #12]
 8015246:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801524a:	085b      	lsrs	r3, r3, #1
 801524c:	b29a      	uxth	r2, r3
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015252:	4293      	cmp	r3, r2
 8015254:	bf28      	it	cs
 8015256:	4613      	movcs	r3, r2
 8015258:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801525a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801525c:	2b00      	cmp	r3, #0
 801525e:	d102      	bne.n	8015266 <tcp_write+0x7e>
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015264:	e000      	b.n	8015268 <tcp_write+0x80>
 8015266:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015268:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801526a:	68bb      	ldr	r3, [r7, #8]
 801526c:	2b00      	cmp	r3, #0
 801526e:	d109      	bne.n	8015284 <tcp_write+0x9c>
 8015270:	4b94      	ldr	r3, [pc, #592]	; (80154c4 <tcp_write+0x2dc>)
 8015272:	f240 12ad 	movw	r2, #429	; 0x1ad
 8015276:	4996      	ldr	r1, [pc, #600]	; (80154d0 <tcp_write+0x2e8>)
 8015278:	4894      	ldr	r0, [pc, #592]	; (80154cc <tcp_write+0x2e4>)
 801527a:	f005 fa25 	bl	801a6c8 <iprintf>
 801527e:	f06f 030f 	mvn.w	r3, #15
 8015282:	e30a      	b.n	801589a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8015284:	88fb      	ldrh	r3, [r7, #6]
 8015286:	4619      	mov	r1, r3
 8015288:	68f8      	ldr	r0, [r7, #12]
 801528a:	f7ff ff33 	bl	80150f4 <tcp_write_checks>
 801528e:	4603      	mov	r3, r0
 8015290:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8015294:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8015298:	2b00      	cmp	r3, #0
 801529a:	d002      	beq.n	80152a2 <tcp_write+0xba>
    return err;
 801529c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80152a0:	e2fb      	b.n	801589a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 80152a2:	68fb      	ldr	r3, [r7, #12]
 80152a4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80152a8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80152ac:	2300      	movs	r3, #0
 80152ae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	f000 80f6 	beq.w	80154a8 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80152bc:	68fb      	ldr	r3, [r7, #12]
 80152be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80152c0:	653b      	str	r3, [r7, #80]	; 0x50
 80152c2:	e002      	b.n	80152ca <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 80152c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80152c6:	681b      	ldr	r3, [r3, #0]
 80152c8:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80152ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80152cc:	681b      	ldr	r3, [r3, #0]
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d1f8      	bne.n	80152c4 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 80152d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80152d4:	7a9b      	ldrb	r3, [r3, #10]
 80152d6:	009b      	lsls	r3, r3, #2
 80152d8:	b29b      	uxth	r3, r3
 80152da:	f003 0304 	and.w	r3, r3, #4
 80152de:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80152e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80152e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80152e4:	891b      	ldrh	r3, [r3, #8]
 80152e6:	4619      	mov	r1, r3
 80152e8:	8c3b      	ldrh	r3, [r7, #32]
 80152ea:	440b      	add	r3, r1
 80152ec:	429a      	cmp	r2, r3
 80152ee:	da06      	bge.n	80152fe <tcp_write+0x116>
 80152f0:	4b74      	ldr	r3, [pc, #464]	; (80154c4 <tcp_write+0x2dc>)
 80152f2:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80152f6:	4977      	ldr	r1, [pc, #476]	; (80154d4 <tcp_write+0x2ec>)
 80152f8:	4874      	ldr	r0, [pc, #464]	; (80154cc <tcp_write+0x2e4>)
 80152fa:	f005 f9e5 	bl	801a6c8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 80152fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015300:	891a      	ldrh	r2, [r3, #8]
 8015302:	8c3b      	ldrh	r3, [r7, #32]
 8015304:	4413      	add	r3, r2
 8015306:	b29b      	uxth	r3, r3
 8015308:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801530a:	1ad3      	subs	r3, r2, r3
 801530c:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8015314:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8015316:	8a7b      	ldrh	r3, [r7, #18]
 8015318:	2b00      	cmp	r3, #0
 801531a:	d026      	beq.n	801536a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801531c:	8a7b      	ldrh	r3, [r7, #18]
 801531e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015320:	429a      	cmp	r2, r3
 8015322:	d206      	bcs.n	8015332 <tcp_write+0x14a>
 8015324:	4b67      	ldr	r3, [pc, #412]	; (80154c4 <tcp_write+0x2dc>)
 8015326:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801532a:	496b      	ldr	r1, [pc, #428]	; (80154d8 <tcp_write+0x2f0>)
 801532c:	4867      	ldr	r0, [pc, #412]	; (80154cc <tcp_write+0x2e4>)
 801532e:	f005 f9cb 	bl	801a6c8 <iprintf>
      seg = last_unsent;
 8015332:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015334:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8015336:	8a7b      	ldrh	r3, [r7, #18]
 8015338:	88fa      	ldrh	r2, [r7, #6]
 801533a:	4293      	cmp	r3, r2
 801533c:	bf28      	it	cs
 801533e:	4613      	movcs	r3, r2
 8015340:	b29b      	uxth	r3, r3
 8015342:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015344:	4293      	cmp	r3, r2
 8015346:	bf28      	it	cs
 8015348:	4613      	movcs	r3, r2
 801534a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801534c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015350:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015352:	4413      	add	r3, r2
 8015354:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8015358:	8a7a      	ldrh	r2, [r7, #18]
 801535a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801535c:	1ad3      	subs	r3, r2, r3
 801535e:	b29b      	uxth	r3, r3
 8015360:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8015362:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8015364:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015366:	1ad3      	subs	r3, r2, r3
 8015368:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801536a:	8a7b      	ldrh	r3, [r7, #18]
 801536c:	2b00      	cmp	r3, #0
 801536e:	d00b      	beq.n	8015388 <tcp_write+0x1a0>
 8015370:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015374:	88fb      	ldrh	r3, [r7, #6]
 8015376:	429a      	cmp	r2, r3
 8015378:	d006      	beq.n	8015388 <tcp_write+0x1a0>
 801537a:	4b52      	ldr	r3, [pc, #328]	; (80154c4 <tcp_write+0x2dc>)
 801537c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8015380:	4956      	ldr	r1, [pc, #344]	; (80154dc <tcp_write+0x2f4>)
 8015382:	4852      	ldr	r0, [pc, #328]	; (80154cc <tcp_write+0x2e4>)
 8015384:	f005 f9a0 	bl	801a6c8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8015388:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801538c:	88fb      	ldrh	r3, [r7, #6]
 801538e:	429a      	cmp	r2, r3
 8015390:	f080 8167 	bcs.w	8015662 <tcp_write+0x47a>
 8015394:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015396:	2b00      	cmp	r3, #0
 8015398:	f000 8163 	beq.w	8015662 <tcp_write+0x47a>
 801539c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801539e:	891b      	ldrh	r3, [r3, #8]
 80153a0:	2b00      	cmp	r3, #0
 80153a2:	f000 815e 	beq.w	8015662 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80153a6:	88fa      	ldrh	r2, [r7, #6]
 80153a8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80153ac:	1ad2      	subs	r2, r2, r3
 80153ae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80153b0:	4293      	cmp	r3, r2
 80153b2:	bfa8      	it	ge
 80153b4:	4613      	movge	r3, r2
 80153b6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80153b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80153ba:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80153bc:	797b      	ldrb	r3, [r7, #5]
 80153be:	f003 0301 	and.w	r3, r3, #1
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d027      	beq.n	8015416 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80153c6:	f107 0012 	add.w	r0, r7, #18
 80153ca:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80153cc:	8bf9      	ldrh	r1, [r7, #30]
 80153ce:	2301      	movs	r3, #1
 80153d0:	9302      	str	r3, [sp, #8]
 80153d2:	797b      	ldrb	r3, [r7, #5]
 80153d4:	9301      	str	r3, [sp, #4]
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	9300      	str	r3, [sp, #0]
 80153da:	4603      	mov	r3, r0
 80153dc:	2000      	movs	r0, #0
 80153de:	f7ff fe0f 	bl	8015000 <tcp_pbuf_prealloc>
 80153e2:	6578      	str	r0, [r7, #84]	; 0x54
 80153e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80153e6:	2b00      	cmp	r3, #0
 80153e8:	f000 8225 	beq.w	8015836 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 80153ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80153ee:	6858      	ldr	r0, [r3, #4]
 80153f0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80153f4:	68ba      	ldr	r2, [r7, #8]
 80153f6:	4413      	add	r3, r2
 80153f8:	8bfa      	ldrh	r2, [r7, #30]
 80153fa:	4619      	mov	r1, r3
 80153fc:	f005 f88a 	bl	801a514 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8015400:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015402:	f7fb fa7d 	bl	8010900 <pbuf_clen>
 8015406:	4603      	mov	r3, r0
 8015408:	461a      	mov	r2, r3
 801540a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801540e:	4413      	add	r3, r2
 8015410:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8015414:	e041      	b.n	801549a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8015416:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015418:	685b      	ldr	r3, [r3, #4]
 801541a:	637b      	str	r3, [r7, #52]	; 0x34
 801541c:	e002      	b.n	8015424 <tcp_write+0x23c>
 801541e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015420:	681b      	ldr	r3, [r3, #0]
 8015422:	637b      	str	r3, [r7, #52]	; 0x34
 8015424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015426:	681b      	ldr	r3, [r3, #0]
 8015428:	2b00      	cmp	r3, #0
 801542a:	d1f8      	bne.n	801541e <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801542c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801542e:	7b1b      	ldrb	r3, [r3, #12]
 8015430:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8015434:	2b00      	cmp	r3, #0
 8015436:	d115      	bne.n	8015464 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8015438:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801543a:	685b      	ldr	r3, [r3, #4]
 801543c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801543e:	8952      	ldrh	r2, [r2, #10]
 8015440:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 8015442:	68ba      	ldr	r2, [r7, #8]
 8015444:	429a      	cmp	r2, r3
 8015446:	d10d      	bne.n	8015464 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8015448:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801544c:	2b00      	cmp	r3, #0
 801544e:	d006      	beq.n	801545e <tcp_write+0x276>
 8015450:	4b1c      	ldr	r3, [pc, #112]	; (80154c4 <tcp_write+0x2dc>)
 8015452:	f240 2231 	movw	r2, #561	; 0x231
 8015456:	4922      	ldr	r1, [pc, #136]	; (80154e0 <tcp_write+0x2f8>)
 8015458:	481c      	ldr	r0, [pc, #112]	; (80154cc <tcp_write+0x2e4>)
 801545a:	f005 f935 	bl	801a6c8 <iprintf>
          extendlen = seglen;
 801545e:	8bfb      	ldrh	r3, [r7, #30]
 8015460:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8015462:	e01a      	b.n	801549a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8015464:	8bfb      	ldrh	r3, [r7, #30]
 8015466:	2201      	movs	r2, #1
 8015468:	4619      	mov	r1, r3
 801546a:	2000      	movs	r0, #0
 801546c:	f7fa fed6 	bl	801021c <pbuf_alloc>
 8015470:	6578      	str	r0, [r7, #84]	; 0x54
 8015472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015474:	2b00      	cmp	r3, #0
 8015476:	f000 81e0 	beq.w	801583a <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801547a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801547e:	68ba      	ldr	r2, [r7, #8]
 8015480:	441a      	add	r2, r3
 8015482:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015484:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8015486:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8015488:	f7fb fa3a 	bl	8010900 <pbuf_clen>
 801548c:	4603      	mov	r3, r0
 801548e:	461a      	mov	r2, r3
 8015490:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015494:	4413      	add	r3, r2
 8015496:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801549a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801549e:	8bfb      	ldrh	r3, [r7, #30]
 80154a0:	4413      	add	r3, r2
 80154a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80154a6:	e0dc      	b.n	8015662 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	f000 80d7 	beq.w	8015662 <tcp_write+0x47a>
 80154b4:	4b03      	ldr	r3, [pc, #12]	; (80154c4 <tcp_write+0x2dc>)
 80154b6:	f240 224a 	movw	r2, #586	; 0x24a
 80154ba:	490a      	ldr	r1, [pc, #40]	; (80154e4 <tcp_write+0x2fc>)
 80154bc:	4803      	ldr	r0, [pc, #12]	; (80154cc <tcp_write+0x2e4>)
 80154be:	f005 f903 	bl	801a6c8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80154c2:	e0ce      	b.n	8015662 <tcp_write+0x47a>
 80154c4:	0801dad8 	.word	0x0801dad8
 80154c8:	0801dc78 	.word	0x0801dc78
 80154cc:	0801db2c 	.word	0x0801db2c
 80154d0:	0801dc90 	.word	0x0801dc90
 80154d4:	0801dcc4 	.word	0x0801dcc4
 80154d8:	0801dcdc 	.word	0x0801dcdc
 80154dc:	0801dcfc 	.word	0x0801dcfc
 80154e0:	0801dd1c 	.word	0x0801dd1c
 80154e4:	0801dd48 	.word	0x0801dd48
    struct pbuf *p;
    u16_t left = len - pos;
 80154e8:	88fa      	ldrh	r2, [r7, #6]
 80154ea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80154ee:	1ad3      	subs	r3, r2, r3
 80154f0:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80154f2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80154f6:	b29b      	uxth	r3, r3
 80154f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80154fa:	1ad3      	subs	r3, r2, r3
 80154fc:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80154fe:	8b7a      	ldrh	r2, [r7, #26]
 8015500:	8bbb      	ldrh	r3, [r7, #28]
 8015502:	4293      	cmp	r3, r2
 8015504:	bf28      	it	cs
 8015506:	4613      	movcs	r3, r2
 8015508:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801550a:	797b      	ldrb	r3, [r7, #5]
 801550c:	f003 0301 	and.w	r3, r3, #1
 8015510:	2b00      	cmp	r3, #0
 8015512:	d036      	beq.n	8015582 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8015514:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015518:	b29a      	uxth	r2, r3
 801551a:	8b3b      	ldrh	r3, [r7, #24]
 801551c:	4413      	add	r3, r2
 801551e:	b299      	uxth	r1, r3
 8015520:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015522:	2b00      	cmp	r3, #0
 8015524:	bf0c      	ite	eq
 8015526:	2301      	moveq	r3, #1
 8015528:	2300      	movne	r3, #0
 801552a:	b2db      	uxtb	r3, r3
 801552c:	f107 0012 	add.w	r0, r7, #18
 8015530:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015532:	9302      	str	r3, [sp, #8]
 8015534:	797b      	ldrb	r3, [r7, #5]
 8015536:	9301      	str	r3, [sp, #4]
 8015538:	68fb      	ldr	r3, [r7, #12]
 801553a:	9300      	str	r3, [sp, #0]
 801553c:	4603      	mov	r3, r0
 801553e:	2036      	movs	r0, #54	; 0x36
 8015540:	f7ff fd5e 	bl	8015000 <tcp_pbuf_prealloc>
 8015544:	6338      	str	r0, [r7, #48]	; 0x30
 8015546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015548:	2b00      	cmp	r3, #0
 801554a:	f000 8178 	beq.w	801583e <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801554e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015550:	895b      	ldrh	r3, [r3, #10]
 8015552:	8b3a      	ldrh	r2, [r7, #24]
 8015554:	429a      	cmp	r2, r3
 8015556:	d906      	bls.n	8015566 <tcp_write+0x37e>
 8015558:	4b8c      	ldr	r3, [pc, #560]	; (801578c <tcp_write+0x5a4>)
 801555a:	f240 2266 	movw	r2, #614	; 0x266
 801555e:	498c      	ldr	r1, [pc, #560]	; (8015790 <tcp_write+0x5a8>)
 8015560:	488c      	ldr	r0, [pc, #560]	; (8015794 <tcp_write+0x5ac>)
 8015562:	f005 f8b1 	bl	801a6c8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8015566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015568:	685a      	ldr	r2, [r3, #4]
 801556a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801556e:	18d0      	adds	r0, r2, r3
 8015570:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015574:	68ba      	ldr	r2, [r7, #8]
 8015576:	4413      	add	r3, r2
 8015578:	8b3a      	ldrh	r2, [r7, #24]
 801557a:	4619      	mov	r1, r3
 801557c:	f004 ffca 	bl	801a514 <memcpy>
 8015580:	e02f      	b.n	80155e2 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8015582:	8a7b      	ldrh	r3, [r7, #18]
 8015584:	2b00      	cmp	r3, #0
 8015586:	d006      	beq.n	8015596 <tcp_write+0x3ae>
 8015588:	4b80      	ldr	r3, [pc, #512]	; (801578c <tcp_write+0x5a4>)
 801558a:	f240 2271 	movw	r2, #625	; 0x271
 801558e:	4982      	ldr	r1, [pc, #520]	; (8015798 <tcp_write+0x5b0>)
 8015590:	4880      	ldr	r0, [pc, #512]	; (8015794 <tcp_write+0x5ac>)
 8015592:	f005 f899 	bl	801a6c8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8015596:	8b3b      	ldrh	r3, [r7, #24]
 8015598:	2201      	movs	r2, #1
 801559a:	4619      	mov	r1, r3
 801559c:	2036      	movs	r0, #54	; 0x36
 801559e:	f7fa fe3d 	bl	801021c <pbuf_alloc>
 80155a2:	6178      	str	r0, [r7, #20]
 80155a4:	697b      	ldr	r3, [r7, #20]
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	f000 814b 	beq.w	8015842 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 80155ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80155b0:	68ba      	ldr	r2, [r7, #8]
 80155b2:	441a      	add	r2, r3
 80155b4:	697b      	ldr	r3, [r7, #20]
 80155b6:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80155b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80155bc:	b29b      	uxth	r3, r3
 80155be:	f44f 7220 	mov.w	r2, #640	; 0x280
 80155c2:	4619      	mov	r1, r3
 80155c4:	2036      	movs	r0, #54	; 0x36
 80155c6:	f7fa fe29 	bl	801021c <pbuf_alloc>
 80155ca:	6338      	str	r0, [r7, #48]	; 0x30
 80155cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d103      	bne.n	80155da <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80155d2:	6978      	ldr	r0, [r7, #20]
 80155d4:	f7fb f906 	bl	80107e4 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80155d8:	e136      	b.n	8015848 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80155da:	6979      	ldr	r1, [r7, #20]
 80155dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80155de:	f7fb f9cf 	bl	8010980 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80155e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80155e4:	f7fb f98c 	bl	8010900 <pbuf_clen>
 80155e8:	4603      	mov	r3, r0
 80155ea:	461a      	mov	r2, r3
 80155ec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80155f0:	4413      	add	r3, r2
 80155f2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 80155f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80155fa:	2b09      	cmp	r3, #9
 80155fc:	d903      	bls.n	8015606 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80155fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015600:	f7fb f8f0 	bl	80107e4 <pbuf_free>
      goto memerr;
 8015604:	e120      	b.n	8015848 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801560a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801560e:	441a      	add	r2, r3
 8015610:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015614:	9300      	str	r3, [sp, #0]
 8015616:	4613      	mov	r3, r2
 8015618:	2200      	movs	r2, #0
 801561a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801561c:	68f8      	ldr	r0, [r7, #12]
 801561e:	f7ff fc51 	bl	8014ec4 <tcp_create_segment>
 8015622:	64f8      	str	r0, [r7, #76]	; 0x4c
 8015624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015626:	2b00      	cmp	r3, #0
 8015628:	f000 810d 	beq.w	8015846 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801562c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801562e:	2b00      	cmp	r3, #0
 8015630:	d102      	bne.n	8015638 <tcp_write+0x450>
      queue = seg;
 8015632:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015634:	647b      	str	r3, [r7, #68]	; 0x44
 8015636:	e00c      	b.n	8015652 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8015638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801563a:	2b00      	cmp	r3, #0
 801563c:	d106      	bne.n	801564c <tcp_write+0x464>
 801563e:	4b53      	ldr	r3, [pc, #332]	; (801578c <tcp_write+0x5a4>)
 8015640:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015644:	4955      	ldr	r1, [pc, #340]	; (801579c <tcp_write+0x5b4>)
 8015646:	4853      	ldr	r0, [pc, #332]	; (8015794 <tcp_write+0x5ac>)
 8015648:	f005 f83e 	bl	801a6c8 <iprintf>
      prev_seg->next = seg;
 801564c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801564e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015650:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8015652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015654:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8015656:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801565a:	8b3b      	ldrh	r3, [r7, #24]
 801565c:	4413      	add	r3, r2
 801565e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8015662:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015666:	88fb      	ldrh	r3, [r7, #6]
 8015668:	429a      	cmp	r2, r3
 801566a:	f4ff af3d 	bcc.w	80154e8 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801566e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015670:	2b00      	cmp	r3, #0
 8015672:	d02c      	beq.n	80156ce <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8015674:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015676:	685b      	ldr	r3, [r3, #4]
 8015678:	62fb      	str	r3, [r7, #44]	; 0x2c
 801567a:	e01e      	b.n	80156ba <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801567c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801567e:	891a      	ldrh	r2, [r3, #8]
 8015680:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015682:	4413      	add	r3, r2
 8015684:	b29a      	uxth	r2, r3
 8015686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015688:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801568a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	2b00      	cmp	r3, #0
 8015690:	d110      	bne.n	80156b4 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8015692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015694:	685b      	ldr	r3, [r3, #4]
 8015696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015698:	8952      	ldrh	r2, [r2, #10]
 801569a:	4413      	add	r3, r2
 801569c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801569e:	68b9      	ldr	r1, [r7, #8]
 80156a0:	4618      	mov	r0, r3
 80156a2:	f004 ff37 	bl	801a514 <memcpy>
        p->len += oversize_used;
 80156a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156a8:	895a      	ldrh	r2, [r3, #10]
 80156aa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80156ac:	4413      	add	r3, r2
 80156ae:	b29a      	uxth	r2, r3
 80156b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156b2:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80156b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156b6:	681b      	ldr	r3, [r3, #0]
 80156b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80156ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d1dd      	bne.n	801567c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 80156c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80156c2:	891a      	ldrh	r2, [r3, #8]
 80156c4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80156c6:	4413      	add	r3, r2
 80156c8:	b29a      	uxth	r2, r3
 80156ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80156cc:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80156ce:	8a7a      	ldrh	r2, [r7, #18]
 80156d0:	68fb      	ldr	r3, [r7, #12]
 80156d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80156d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80156d8:	2b00      	cmp	r3, #0
 80156da:	d018      	beq.n	801570e <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80156dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d106      	bne.n	80156f0 <tcp_write+0x508>
 80156e2:	4b2a      	ldr	r3, [pc, #168]	; (801578c <tcp_write+0x5a4>)
 80156e4:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 80156e8:	492d      	ldr	r1, [pc, #180]	; (80157a0 <tcp_write+0x5b8>)
 80156ea:	482a      	ldr	r0, [pc, #168]	; (8015794 <tcp_write+0x5ac>)
 80156ec:	f004 ffec 	bl	801a6c8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 80156f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80156f2:	685b      	ldr	r3, [r3, #4]
 80156f4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80156f6:	4618      	mov	r0, r3
 80156f8:	f7fb f942 	bl	8010980 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80156fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80156fe:	891a      	ldrh	r2, [r3, #8]
 8015700:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015702:	891b      	ldrh	r3, [r3, #8]
 8015704:	4413      	add	r3, r2
 8015706:	b29a      	uxth	r2, r3
 8015708:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801570a:	811a      	strh	r2, [r3, #8]
 801570c:	e037      	b.n	801577e <tcp_write+0x596>
  } else if (extendlen > 0) {
 801570e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015710:	2b00      	cmp	r3, #0
 8015712:	d034      	beq.n	801577e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8015714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015716:	2b00      	cmp	r3, #0
 8015718:	d003      	beq.n	8015722 <tcp_write+0x53a>
 801571a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801571c:	685b      	ldr	r3, [r3, #4]
 801571e:	2b00      	cmp	r3, #0
 8015720:	d106      	bne.n	8015730 <tcp_write+0x548>
 8015722:	4b1a      	ldr	r3, [pc, #104]	; (801578c <tcp_write+0x5a4>)
 8015724:	f240 22e6 	movw	r2, #742	; 0x2e6
 8015728:	491e      	ldr	r1, [pc, #120]	; (80157a4 <tcp_write+0x5bc>)
 801572a:	481a      	ldr	r0, [pc, #104]	; (8015794 <tcp_write+0x5ac>)
 801572c:	f004 ffcc 	bl	801a6c8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8015730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015732:	685b      	ldr	r3, [r3, #4]
 8015734:	62bb      	str	r3, [r7, #40]	; 0x28
 8015736:	e009      	b.n	801574c <tcp_write+0x564>
      p->tot_len += extendlen;
 8015738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801573a:	891a      	ldrh	r2, [r3, #8]
 801573c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801573e:	4413      	add	r3, r2
 8015740:	b29a      	uxth	r2, r3
 8015742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015744:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8015746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015748:	681b      	ldr	r3, [r3, #0]
 801574a:	62bb      	str	r3, [r7, #40]	; 0x28
 801574c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	2b00      	cmp	r3, #0
 8015752:	d1f1      	bne.n	8015738 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 8015754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015756:	891a      	ldrh	r2, [r3, #8]
 8015758:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801575a:	4413      	add	r3, r2
 801575c:	b29a      	uxth	r2, r3
 801575e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015760:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8015762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015764:	895a      	ldrh	r2, [r3, #10]
 8015766:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015768:	4413      	add	r3, r2
 801576a:	b29a      	uxth	r2, r3
 801576c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801576e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8015770:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015772:	891a      	ldrh	r2, [r3, #8]
 8015774:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015776:	4413      	add	r3, r2
 8015778:	b29a      	uxth	r2, r3
 801577a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801577c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801577e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015780:	2b00      	cmp	r3, #0
 8015782:	d111      	bne.n	80157a8 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015788:	66da      	str	r2, [r3, #108]	; 0x6c
 801578a:	e010      	b.n	80157ae <tcp_write+0x5c6>
 801578c:	0801dad8 	.word	0x0801dad8
 8015790:	0801dd78 	.word	0x0801dd78
 8015794:	0801db2c 	.word	0x0801db2c
 8015798:	0801ddb8 	.word	0x0801ddb8
 801579c:	0801ddc8 	.word	0x0801ddc8
 80157a0:	0801dddc 	.word	0x0801dddc
 80157a4:	0801de14 	.word	0x0801de14
  } else {
    last_unsent->next = queue;
 80157a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80157aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80157ac:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80157b2:	88fb      	ldrh	r3, [r7, #6]
 80157b4:	441a      	add	r2, r3
 80157b6:	68fb      	ldr	r3, [r7, #12]
 80157b8:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 80157ba:	68fb      	ldr	r3, [r7, #12]
 80157bc:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80157c0:	88fb      	ldrh	r3, [r7, #6]
 80157c2:	1ad3      	subs	r3, r2, r3
 80157c4:	b29a      	uxth	r2, r3
 80157c6:	68fb      	ldr	r3, [r7, #12]
 80157c8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 80157cc:	68fb      	ldr	r3, [r7, #12]
 80157ce:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80157d2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80157d6:	68fb      	ldr	r3, [r7, #12]
 80157d8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d00e      	beq.n	80157fe <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 80157e0:	68fb      	ldr	r3, [r7, #12]
 80157e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80157e4:	2b00      	cmp	r3, #0
 80157e6:	d10a      	bne.n	80157fe <tcp_write+0x616>
 80157e8:	68fb      	ldr	r3, [r7, #12]
 80157ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d106      	bne.n	80157fe <tcp_write+0x616>
 80157f0:	4b2c      	ldr	r3, [pc, #176]	; (80158a4 <tcp_write+0x6bc>)
 80157f2:	f240 3212 	movw	r2, #786	; 0x312
 80157f6:	492c      	ldr	r1, [pc, #176]	; (80158a8 <tcp_write+0x6c0>)
 80157f8:	482c      	ldr	r0, [pc, #176]	; (80158ac <tcp_write+0x6c4>)
 80157fa:	f004 ff65 	bl	801a6c8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80157fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015800:	2b00      	cmp	r3, #0
 8015802:	d016      	beq.n	8015832 <tcp_write+0x64a>
 8015804:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015806:	68db      	ldr	r3, [r3, #12]
 8015808:	2b00      	cmp	r3, #0
 801580a:	d012      	beq.n	8015832 <tcp_write+0x64a>
 801580c:	797b      	ldrb	r3, [r7, #5]
 801580e:	f003 0302 	and.w	r3, r3, #2
 8015812:	2b00      	cmp	r3, #0
 8015814:	d10d      	bne.n	8015832 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8015816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015818:	68db      	ldr	r3, [r3, #12]
 801581a:	899b      	ldrh	r3, [r3, #12]
 801581c:	b29c      	uxth	r4, r3
 801581e:	2008      	movs	r0, #8
 8015820:	f7f9 fc98 	bl	800f154 <lwip_htons>
 8015824:	4603      	mov	r3, r0
 8015826:	461a      	mov	r2, r3
 8015828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801582a:	68db      	ldr	r3, [r3, #12]
 801582c:	4322      	orrs	r2, r4
 801582e:	b292      	uxth	r2, r2
 8015830:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8015832:	2300      	movs	r3, #0
 8015834:	e031      	b.n	801589a <tcp_write+0x6b2>
          goto memerr;
 8015836:	bf00      	nop
 8015838:	e006      	b.n	8015848 <tcp_write+0x660>
            goto memerr;
 801583a:	bf00      	nop
 801583c:	e004      	b.n	8015848 <tcp_write+0x660>
        goto memerr;
 801583e:	bf00      	nop
 8015840:	e002      	b.n	8015848 <tcp_write+0x660>
        goto memerr;
 8015842:	bf00      	nop
 8015844:	e000      	b.n	8015848 <tcp_write+0x660>
      goto memerr;
 8015846:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	8b5b      	ldrh	r3, [r3, #26]
 801584c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015850:	b29a      	uxth	r2, r3
 8015852:	68fb      	ldr	r3, [r7, #12]
 8015854:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8015856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015858:	2b00      	cmp	r3, #0
 801585a:	d002      	beq.n	8015862 <tcp_write+0x67a>
    pbuf_free(concat_p);
 801585c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801585e:	f7fa ffc1 	bl	80107e4 <pbuf_free>
  }
  if (queue != NULL) {
 8015862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015864:	2b00      	cmp	r3, #0
 8015866:	d002      	beq.n	801586e <tcp_write+0x686>
    tcp_segs_free(queue);
 8015868:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801586a:	f7fc fb6f 	bl	8011f4c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801586e:	68fb      	ldr	r3, [r7, #12]
 8015870:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015874:	2b00      	cmp	r3, #0
 8015876:	d00e      	beq.n	8015896 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8015878:	68fb      	ldr	r3, [r7, #12]
 801587a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801587c:	2b00      	cmp	r3, #0
 801587e:	d10a      	bne.n	8015896 <tcp_write+0x6ae>
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015884:	2b00      	cmp	r3, #0
 8015886:	d106      	bne.n	8015896 <tcp_write+0x6ae>
 8015888:	4b06      	ldr	r3, [pc, #24]	; (80158a4 <tcp_write+0x6bc>)
 801588a:	f240 3227 	movw	r2, #807	; 0x327
 801588e:	4906      	ldr	r1, [pc, #24]	; (80158a8 <tcp_write+0x6c0>)
 8015890:	4806      	ldr	r0, [pc, #24]	; (80158ac <tcp_write+0x6c4>)
 8015892:	f004 ff19 	bl	801a6c8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8015896:	f04f 33ff 	mov.w	r3, #4294967295
}
 801589a:	4618      	mov	r0, r3
 801589c:	375c      	adds	r7, #92	; 0x5c
 801589e:	46bd      	mov	sp, r7
 80158a0:	bd90      	pop	{r4, r7, pc}
 80158a2:	bf00      	nop
 80158a4:	0801dad8 	.word	0x0801dad8
 80158a8:	0801de4c 	.word	0x0801de4c
 80158ac:	0801db2c 	.word	0x0801db2c

080158b0 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80158b0:	b590      	push	{r4, r7, lr}
 80158b2:	b08b      	sub	sp, #44	; 0x2c
 80158b4:	af02      	add	r7, sp, #8
 80158b6:	6078      	str	r0, [r7, #4]
 80158b8:	460b      	mov	r3, r1
 80158ba:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80158bc:	2300      	movs	r3, #0
 80158be:	61fb      	str	r3, [r7, #28]
 80158c0:	2300      	movs	r3, #0
 80158c2:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80158c4:	2300      	movs	r3, #0
 80158c6:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d106      	bne.n	80158dc <tcp_split_unsent_seg+0x2c>
 80158ce:	4b95      	ldr	r3, [pc, #596]	; (8015b24 <tcp_split_unsent_seg+0x274>)
 80158d0:	f240 324b 	movw	r2, #843	; 0x34b
 80158d4:	4994      	ldr	r1, [pc, #592]	; (8015b28 <tcp_split_unsent_seg+0x278>)
 80158d6:	4895      	ldr	r0, [pc, #596]	; (8015b2c <tcp_split_unsent_seg+0x27c>)
 80158d8:	f004 fef6 	bl	801a6c8 <iprintf>

  useg = pcb->unsent;
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80158e0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80158e2:	697b      	ldr	r3, [r7, #20]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d102      	bne.n	80158ee <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80158e8:	f04f 33ff 	mov.w	r3, #4294967295
 80158ec:	e116      	b.n	8015b1c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80158ee:	887b      	ldrh	r3, [r7, #2]
 80158f0:	2b00      	cmp	r3, #0
 80158f2:	d109      	bne.n	8015908 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80158f4:	4b8b      	ldr	r3, [pc, #556]	; (8015b24 <tcp_split_unsent_seg+0x274>)
 80158f6:	f240 3253 	movw	r2, #851	; 0x353
 80158fa:	498d      	ldr	r1, [pc, #564]	; (8015b30 <tcp_split_unsent_seg+0x280>)
 80158fc:	488b      	ldr	r0, [pc, #556]	; (8015b2c <tcp_split_unsent_seg+0x27c>)
 80158fe:	f004 fee3 	bl	801a6c8 <iprintf>
    return ERR_VAL;
 8015902:	f06f 0305 	mvn.w	r3, #5
 8015906:	e109      	b.n	8015b1c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8015908:	697b      	ldr	r3, [r7, #20]
 801590a:	891b      	ldrh	r3, [r3, #8]
 801590c:	887a      	ldrh	r2, [r7, #2]
 801590e:	429a      	cmp	r2, r3
 8015910:	d301      	bcc.n	8015916 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8015912:	2300      	movs	r3, #0
 8015914:	e102      	b.n	8015b1c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801591a:	887a      	ldrh	r2, [r7, #2]
 801591c:	429a      	cmp	r2, r3
 801591e:	d906      	bls.n	801592e <tcp_split_unsent_seg+0x7e>
 8015920:	4b80      	ldr	r3, [pc, #512]	; (8015b24 <tcp_split_unsent_seg+0x274>)
 8015922:	f240 325b 	movw	r2, #859	; 0x35b
 8015926:	4983      	ldr	r1, [pc, #524]	; (8015b34 <tcp_split_unsent_seg+0x284>)
 8015928:	4880      	ldr	r0, [pc, #512]	; (8015b2c <tcp_split_unsent_seg+0x27c>)
 801592a:	f004 fecd 	bl	801a6c8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801592e:	697b      	ldr	r3, [r7, #20]
 8015930:	891b      	ldrh	r3, [r3, #8]
 8015932:	2b00      	cmp	r3, #0
 8015934:	d106      	bne.n	8015944 <tcp_split_unsent_seg+0x94>
 8015936:	4b7b      	ldr	r3, [pc, #492]	; (8015b24 <tcp_split_unsent_seg+0x274>)
 8015938:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801593c:	497e      	ldr	r1, [pc, #504]	; (8015b38 <tcp_split_unsent_seg+0x288>)
 801593e:	487b      	ldr	r0, [pc, #492]	; (8015b2c <tcp_split_unsent_seg+0x27c>)
 8015940:	f004 fec2 	bl	801a6c8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8015944:	697b      	ldr	r3, [r7, #20]
 8015946:	7a9b      	ldrb	r3, [r3, #10]
 8015948:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801594a:	7bfb      	ldrb	r3, [r7, #15]
 801594c:	009b      	lsls	r3, r3, #2
 801594e:	b2db      	uxtb	r3, r3
 8015950:	f003 0304 	and.w	r3, r3, #4
 8015954:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8015956:	697b      	ldr	r3, [r7, #20]
 8015958:	891a      	ldrh	r2, [r3, #8]
 801595a:	887b      	ldrh	r3, [r7, #2]
 801595c:	1ad3      	subs	r3, r2, r3
 801595e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8015960:	7bbb      	ldrb	r3, [r7, #14]
 8015962:	b29a      	uxth	r2, r3
 8015964:	89bb      	ldrh	r3, [r7, #12]
 8015966:	4413      	add	r3, r2
 8015968:	b29b      	uxth	r3, r3
 801596a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801596e:	4619      	mov	r1, r3
 8015970:	2036      	movs	r0, #54	; 0x36
 8015972:	f7fa fc53 	bl	801021c <pbuf_alloc>
 8015976:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015978:	693b      	ldr	r3, [r7, #16]
 801597a:	2b00      	cmp	r3, #0
 801597c:	f000 80b7 	beq.w	8015aee <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8015980:	697b      	ldr	r3, [r7, #20]
 8015982:	685b      	ldr	r3, [r3, #4]
 8015984:	891a      	ldrh	r2, [r3, #8]
 8015986:	697b      	ldr	r3, [r7, #20]
 8015988:	891b      	ldrh	r3, [r3, #8]
 801598a:	1ad3      	subs	r3, r2, r3
 801598c:	b29a      	uxth	r2, r3
 801598e:	887b      	ldrh	r3, [r7, #2]
 8015990:	4413      	add	r3, r2
 8015992:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8015994:	697b      	ldr	r3, [r7, #20]
 8015996:	6858      	ldr	r0, [r3, #4]
 8015998:	693b      	ldr	r3, [r7, #16]
 801599a:	685a      	ldr	r2, [r3, #4]
 801599c:	7bbb      	ldrb	r3, [r7, #14]
 801599e:	18d1      	adds	r1, r2, r3
 80159a0:	897b      	ldrh	r3, [r7, #10]
 80159a2:	89ba      	ldrh	r2, [r7, #12]
 80159a4:	f7fb f924 	bl	8010bf0 <pbuf_copy_partial>
 80159a8:	4603      	mov	r3, r0
 80159aa:	461a      	mov	r2, r3
 80159ac:	89bb      	ldrh	r3, [r7, #12]
 80159ae:	4293      	cmp	r3, r2
 80159b0:	f040 809f 	bne.w	8015af2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80159b4:	697b      	ldr	r3, [r7, #20]
 80159b6:	68db      	ldr	r3, [r3, #12]
 80159b8:	899b      	ldrh	r3, [r3, #12]
 80159ba:	b29b      	uxth	r3, r3
 80159bc:	4618      	mov	r0, r3
 80159be:	f7f9 fbc9 	bl	800f154 <lwip_htons>
 80159c2:	4603      	mov	r3, r0
 80159c4:	b2db      	uxtb	r3, r3
 80159c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80159ca:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80159cc:	2300      	movs	r3, #0
 80159ce:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80159d0:	7efb      	ldrb	r3, [r7, #27]
 80159d2:	f003 0308 	and.w	r3, r3, #8
 80159d6:	2b00      	cmp	r3, #0
 80159d8:	d007      	beq.n	80159ea <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80159da:	7efb      	ldrb	r3, [r7, #27]
 80159dc:	f023 0308 	bic.w	r3, r3, #8
 80159e0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80159e2:	7ebb      	ldrb	r3, [r7, #26]
 80159e4:	f043 0308 	orr.w	r3, r3, #8
 80159e8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80159ea:	7efb      	ldrb	r3, [r7, #27]
 80159ec:	f003 0301 	and.w	r3, r3, #1
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d007      	beq.n	8015a04 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80159f4:	7efb      	ldrb	r3, [r7, #27]
 80159f6:	f023 0301 	bic.w	r3, r3, #1
 80159fa:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80159fc:	7ebb      	ldrb	r3, [r7, #26]
 80159fe:	f043 0301 	orr.w	r3, r3, #1
 8015a02:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8015a04:	697b      	ldr	r3, [r7, #20]
 8015a06:	68db      	ldr	r3, [r3, #12]
 8015a08:	685b      	ldr	r3, [r3, #4]
 8015a0a:	4618      	mov	r0, r3
 8015a0c:	f7f9 fbb7 	bl	800f17e <lwip_htonl>
 8015a10:	4602      	mov	r2, r0
 8015a12:	887b      	ldrh	r3, [r7, #2]
 8015a14:	18d1      	adds	r1, r2, r3
 8015a16:	7eba      	ldrb	r2, [r7, #26]
 8015a18:	7bfb      	ldrb	r3, [r7, #15]
 8015a1a:	9300      	str	r3, [sp, #0]
 8015a1c:	460b      	mov	r3, r1
 8015a1e:	6939      	ldr	r1, [r7, #16]
 8015a20:	6878      	ldr	r0, [r7, #4]
 8015a22:	f7ff fa4f 	bl	8014ec4 <tcp_create_segment>
 8015a26:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8015a28:	69fb      	ldr	r3, [r7, #28]
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	d063      	beq.n	8015af6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8015a2e:	697b      	ldr	r3, [r7, #20]
 8015a30:	685b      	ldr	r3, [r3, #4]
 8015a32:	4618      	mov	r0, r3
 8015a34:	f7fa ff64 	bl	8010900 <pbuf_clen>
 8015a38:	4603      	mov	r3, r0
 8015a3a:	461a      	mov	r2, r3
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015a42:	1a9b      	subs	r3, r3, r2
 8015a44:	b29a      	uxth	r2, r3
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8015a4c:	697b      	ldr	r3, [r7, #20]
 8015a4e:	6858      	ldr	r0, [r3, #4]
 8015a50:	697b      	ldr	r3, [r7, #20]
 8015a52:	685b      	ldr	r3, [r3, #4]
 8015a54:	891a      	ldrh	r2, [r3, #8]
 8015a56:	89bb      	ldrh	r3, [r7, #12]
 8015a58:	1ad3      	subs	r3, r2, r3
 8015a5a:	b29b      	uxth	r3, r3
 8015a5c:	4619      	mov	r1, r3
 8015a5e:	f7fa fd3b 	bl	80104d8 <pbuf_realloc>
  useg->len -= remainder;
 8015a62:	697b      	ldr	r3, [r7, #20]
 8015a64:	891a      	ldrh	r2, [r3, #8]
 8015a66:	89bb      	ldrh	r3, [r7, #12]
 8015a68:	1ad3      	subs	r3, r2, r3
 8015a6a:	b29a      	uxth	r2, r3
 8015a6c:	697b      	ldr	r3, [r7, #20]
 8015a6e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8015a70:	697b      	ldr	r3, [r7, #20]
 8015a72:	68db      	ldr	r3, [r3, #12]
 8015a74:	899b      	ldrh	r3, [r3, #12]
 8015a76:	b29c      	uxth	r4, r3
 8015a78:	7efb      	ldrb	r3, [r7, #27]
 8015a7a:	b29b      	uxth	r3, r3
 8015a7c:	4618      	mov	r0, r3
 8015a7e:	f7f9 fb69 	bl	800f154 <lwip_htons>
 8015a82:	4603      	mov	r3, r0
 8015a84:	461a      	mov	r2, r3
 8015a86:	697b      	ldr	r3, [r7, #20]
 8015a88:	68db      	ldr	r3, [r3, #12]
 8015a8a:	4322      	orrs	r2, r4
 8015a8c:	b292      	uxth	r2, r2
 8015a8e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8015a90:	697b      	ldr	r3, [r7, #20]
 8015a92:	685b      	ldr	r3, [r3, #4]
 8015a94:	4618      	mov	r0, r3
 8015a96:	f7fa ff33 	bl	8010900 <pbuf_clen>
 8015a9a:	4603      	mov	r3, r0
 8015a9c:	461a      	mov	r2, r3
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015aa4:	4413      	add	r3, r2
 8015aa6:	b29a      	uxth	r2, r3
 8015aa8:	687b      	ldr	r3, [r7, #4]
 8015aaa:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015aae:	69fb      	ldr	r3, [r7, #28]
 8015ab0:	685b      	ldr	r3, [r3, #4]
 8015ab2:	4618      	mov	r0, r3
 8015ab4:	f7fa ff24 	bl	8010900 <pbuf_clen>
 8015ab8:	4603      	mov	r3, r0
 8015aba:	461a      	mov	r2, r3
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015ac2:	4413      	add	r3, r2
 8015ac4:	b29a      	uxth	r2, r3
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8015acc:	697b      	ldr	r3, [r7, #20]
 8015ace:	681a      	ldr	r2, [r3, #0]
 8015ad0:	69fb      	ldr	r3, [r7, #28]
 8015ad2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8015ad4:	697b      	ldr	r3, [r7, #20]
 8015ad6:	69fa      	ldr	r2, [r7, #28]
 8015ad8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8015ada:	69fb      	ldr	r3, [r7, #28]
 8015adc:	681b      	ldr	r3, [r3, #0]
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	d103      	bne.n	8015aea <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8015ae2:	687b      	ldr	r3, [r7, #4]
 8015ae4:	2200      	movs	r2, #0
 8015ae6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8015aea:	2300      	movs	r3, #0
 8015aec:	e016      	b.n	8015b1c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8015aee:	bf00      	nop
 8015af0:	e002      	b.n	8015af8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8015af2:	bf00      	nop
 8015af4:	e000      	b.n	8015af8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8015af6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8015af8:	69fb      	ldr	r3, [r7, #28]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d006      	beq.n	8015b0c <tcp_split_unsent_seg+0x25c>
 8015afe:	4b09      	ldr	r3, [pc, #36]	; (8015b24 <tcp_split_unsent_seg+0x274>)
 8015b00:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8015b04:	490d      	ldr	r1, [pc, #52]	; (8015b3c <tcp_split_unsent_seg+0x28c>)
 8015b06:	4809      	ldr	r0, [pc, #36]	; (8015b2c <tcp_split_unsent_seg+0x27c>)
 8015b08:	f004 fdde 	bl	801a6c8 <iprintf>
  if (p != NULL) {
 8015b0c:	693b      	ldr	r3, [r7, #16]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d002      	beq.n	8015b18 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8015b12:	6938      	ldr	r0, [r7, #16]
 8015b14:	f7fa fe66 	bl	80107e4 <pbuf_free>
  }

  return ERR_MEM;
 8015b18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015b1c:	4618      	mov	r0, r3
 8015b1e:	3724      	adds	r7, #36	; 0x24
 8015b20:	46bd      	mov	sp, r7
 8015b22:	bd90      	pop	{r4, r7, pc}
 8015b24:	0801dad8 	.word	0x0801dad8
 8015b28:	0801de6c 	.word	0x0801de6c
 8015b2c:	0801db2c 	.word	0x0801db2c
 8015b30:	0801de90 	.word	0x0801de90
 8015b34:	0801deb4 	.word	0x0801deb4
 8015b38:	0801dec4 	.word	0x0801dec4
 8015b3c:	0801ded4 	.word	0x0801ded4

08015b40 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8015b40:	b590      	push	{r4, r7, lr}
 8015b42:	b085      	sub	sp, #20
 8015b44:	af00      	add	r7, sp, #0
 8015b46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	d106      	bne.n	8015b5c <tcp_send_fin+0x1c>
 8015b4e:	4b21      	ldr	r3, [pc, #132]	; (8015bd4 <tcp_send_fin+0x94>)
 8015b50:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8015b54:	4920      	ldr	r1, [pc, #128]	; (8015bd8 <tcp_send_fin+0x98>)
 8015b56:	4821      	ldr	r0, [pc, #132]	; (8015bdc <tcp_send_fin+0x9c>)
 8015b58:	f004 fdb6 	bl	801a6c8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d02e      	beq.n	8015bc2 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015b68:	60fb      	str	r3, [r7, #12]
 8015b6a:	e002      	b.n	8015b72 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	681b      	ldr	r3, [r3, #0]
 8015b70:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015b72:	68fb      	ldr	r3, [r7, #12]
 8015b74:	681b      	ldr	r3, [r3, #0]
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d1f8      	bne.n	8015b6c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8015b7a:	68fb      	ldr	r3, [r7, #12]
 8015b7c:	68db      	ldr	r3, [r3, #12]
 8015b7e:	899b      	ldrh	r3, [r3, #12]
 8015b80:	b29b      	uxth	r3, r3
 8015b82:	4618      	mov	r0, r3
 8015b84:	f7f9 fae6 	bl	800f154 <lwip_htons>
 8015b88:	4603      	mov	r3, r0
 8015b8a:	b2db      	uxtb	r3, r3
 8015b8c:	f003 0307 	and.w	r3, r3, #7
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d116      	bne.n	8015bc2 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8015b94:	68fb      	ldr	r3, [r7, #12]
 8015b96:	68db      	ldr	r3, [r3, #12]
 8015b98:	899b      	ldrh	r3, [r3, #12]
 8015b9a:	b29c      	uxth	r4, r3
 8015b9c:	2001      	movs	r0, #1
 8015b9e:	f7f9 fad9 	bl	800f154 <lwip_htons>
 8015ba2:	4603      	mov	r3, r0
 8015ba4:	461a      	mov	r2, r3
 8015ba6:	68fb      	ldr	r3, [r7, #12]
 8015ba8:	68db      	ldr	r3, [r3, #12]
 8015baa:	4322      	orrs	r2, r4
 8015bac:	b292      	uxth	r2, r2
 8015bae:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	8b5b      	ldrh	r3, [r3, #26]
 8015bb4:	f043 0320 	orr.w	r3, r3, #32
 8015bb8:	b29a      	uxth	r2, r3
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8015bbe:	2300      	movs	r3, #0
 8015bc0:	e004      	b.n	8015bcc <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8015bc2:	2101      	movs	r1, #1
 8015bc4:	6878      	ldr	r0, [r7, #4]
 8015bc6:	f000 f80b 	bl	8015be0 <tcp_enqueue_flags>
 8015bca:	4603      	mov	r3, r0
}
 8015bcc:	4618      	mov	r0, r3
 8015bce:	3714      	adds	r7, #20
 8015bd0:	46bd      	mov	sp, r7
 8015bd2:	bd90      	pop	{r4, r7, pc}
 8015bd4:	0801dad8 	.word	0x0801dad8
 8015bd8:	0801dee0 	.word	0x0801dee0
 8015bdc:	0801db2c 	.word	0x0801db2c

08015be0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8015be0:	b580      	push	{r7, lr}
 8015be2:	b08a      	sub	sp, #40	; 0x28
 8015be4:	af02      	add	r7, sp, #8
 8015be6:	6078      	str	r0, [r7, #4]
 8015be8:	460b      	mov	r3, r1
 8015bea:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8015bec:	2300      	movs	r3, #0
 8015bee:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8015bf0:	2300      	movs	r3, #0
 8015bf2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8015bf4:	78fb      	ldrb	r3, [r7, #3]
 8015bf6:	f003 0303 	and.w	r3, r3, #3
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d106      	bne.n	8015c0c <tcp_enqueue_flags+0x2c>
 8015bfe:	4b67      	ldr	r3, [pc, #412]	; (8015d9c <tcp_enqueue_flags+0x1bc>)
 8015c00:	f240 4211 	movw	r2, #1041	; 0x411
 8015c04:	4966      	ldr	r1, [pc, #408]	; (8015da0 <tcp_enqueue_flags+0x1c0>)
 8015c06:	4867      	ldr	r0, [pc, #412]	; (8015da4 <tcp_enqueue_flags+0x1c4>)
 8015c08:	f004 fd5e 	bl	801a6c8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d106      	bne.n	8015c20 <tcp_enqueue_flags+0x40>
 8015c12:	4b62      	ldr	r3, [pc, #392]	; (8015d9c <tcp_enqueue_flags+0x1bc>)
 8015c14:	f240 4213 	movw	r2, #1043	; 0x413
 8015c18:	4963      	ldr	r1, [pc, #396]	; (8015da8 <tcp_enqueue_flags+0x1c8>)
 8015c1a:	4862      	ldr	r0, [pc, #392]	; (8015da4 <tcp_enqueue_flags+0x1c4>)
 8015c1c:	f004 fd54 	bl	801a6c8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8015c20:	78fb      	ldrb	r3, [r7, #3]
 8015c22:	f003 0302 	and.w	r3, r3, #2
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d001      	beq.n	8015c2e <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8015c2a:	2301      	movs	r3, #1
 8015c2c:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015c2e:	7ffb      	ldrb	r3, [r7, #31]
 8015c30:	009b      	lsls	r3, r3, #2
 8015c32:	b2db      	uxtb	r3, r3
 8015c34:	f003 0304 	and.w	r3, r3, #4
 8015c38:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8015c3a:	7dfb      	ldrb	r3, [r7, #23]
 8015c3c:	b29b      	uxth	r3, r3
 8015c3e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015c42:	4619      	mov	r1, r3
 8015c44:	2036      	movs	r0, #54	; 0x36
 8015c46:	f7fa fae9 	bl	801021c <pbuf_alloc>
 8015c4a:	6138      	str	r0, [r7, #16]
 8015c4c:	693b      	ldr	r3, [r7, #16]
 8015c4e:	2b00      	cmp	r3, #0
 8015c50:	d109      	bne.n	8015c66 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	8b5b      	ldrh	r3, [r3, #26]
 8015c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015c5a:	b29a      	uxth	r2, r3
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015c60:	f04f 33ff 	mov.w	r3, #4294967295
 8015c64:	e095      	b.n	8015d92 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8015c66:	693b      	ldr	r3, [r7, #16]
 8015c68:	895a      	ldrh	r2, [r3, #10]
 8015c6a:	7dfb      	ldrb	r3, [r7, #23]
 8015c6c:	b29b      	uxth	r3, r3
 8015c6e:	429a      	cmp	r2, r3
 8015c70:	d206      	bcs.n	8015c80 <tcp_enqueue_flags+0xa0>
 8015c72:	4b4a      	ldr	r3, [pc, #296]	; (8015d9c <tcp_enqueue_flags+0x1bc>)
 8015c74:	f240 4239 	movw	r2, #1081	; 0x439
 8015c78:	494c      	ldr	r1, [pc, #304]	; (8015dac <tcp_enqueue_flags+0x1cc>)
 8015c7a:	484a      	ldr	r0, [pc, #296]	; (8015da4 <tcp_enqueue_flags+0x1c4>)
 8015c7c:	f004 fd24 	bl	801a6c8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8015c80:	687b      	ldr	r3, [r7, #4]
 8015c82:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8015c84:	78fa      	ldrb	r2, [r7, #3]
 8015c86:	7ffb      	ldrb	r3, [r7, #31]
 8015c88:	9300      	str	r3, [sp, #0]
 8015c8a:	460b      	mov	r3, r1
 8015c8c:	6939      	ldr	r1, [r7, #16]
 8015c8e:	6878      	ldr	r0, [r7, #4]
 8015c90:	f7ff f918 	bl	8014ec4 <tcp_create_segment>
 8015c94:	60f8      	str	r0, [r7, #12]
 8015c96:	68fb      	ldr	r3, [r7, #12]
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d109      	bne.n	8015cb0 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	8b5b      	ldrh	r3, [r3, #26]
 8015ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015ca4:	b29a      	uxth	r2, r3
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8015caa:	f04f 33ff 	mov.w	r3, #4294967295
 8015cae:	e070      	b.n	8015d92 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8015cb0:	68fb      	ldr	r3, [r7, #12]
 8015cb2:	68db      	ldr	r3, [r3, #12]
 8015cb4:	f003 0303 	and.w	r3, r3, #3
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d006      	beq.n	8015cca <tcp_enqueue_flags+0xea>
 8015cbc:	4b37      	ldr	r3, [pc, #220]	; (8015d9c <tcp_enqueue_flags+0x1bc>)
 8015cbe:	f240 4242 	movw	r2, #1090	; 0x442
 8015cc2:	493b      	ldr	r1, [pc, #236]	; (8015db0 <tcp_enqueue_flags+0x1d0>)
 8015cc4:	4837      	ldr	r0, [pc, #220]	; (8015da4 <tcp_enqueue_flags+0x1c4>)
 8015cc6:	f004 fcff 	bl	801a6c8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8015cca:	68fb      	ldr	r3, [r7, #12]
 8015ccc:	891b      	ldrh	r3, [r3, #8]
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d006      	beq.n	8015ce0 <tcp_enqueue_flags+0x100>
 8015cd2:	4b32      	ldr	r3, [pc, #200]	; (8015d9c <tcp_enqueue_flags+0x1bc>)
 8015cd4:	f240 4243 	movw	r2, #1091	; 0x443
 8015cd8:	4936      	ldr	r1, [pc, #216]	; (8015db4 <tcp_enqueue_flags+0x1d4>)
 8015cda:	4832      	ldr	r0, [pc, #200]	; (8015da4 <tcp_enqueue_flags+0x1c4>)
 8015cdc:	f004 fcf4 	bl	801a6c8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d103      	bne.n	8015cf0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	68fa      	ldr	r2, [r7, #12]
 8015cec:	66da      	str	r2, [r3, #108]	; 0x6c
 8015cee:	e00d      	b.n	8015d0c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015cf4:	61bb      	str	r3, [r7, #24]
 8015cf6:	e002      	b.n	8015cfe <tcp_enqueue_flags+0x11e>
 8015cf8:	69bb      	ldr	r3, [r7, #24]
 8015cfa:	681b      	ldr	r3, [r3, #0]
 8015cfc:	61bb      	str	r3, [r7, #24]
 8015cfe:	69bb      	ldr	r3, [r7, #24]
 8015d00:	681b      	ldr	r3, [r3, #0]
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	d1f8      	bne.n	8015cf8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8015d06:	69bb      	ldr	r3, [r7, #24]
 8015d08:	68fa      	ldr	r2, [r7, #12]
 8015d0a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8015d0c:	687b      	ldr	r3, [r7, #4]
 8015d0e:	2200      	movs	r2, #0
 8015d10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8015d14:	78fb      	ldrb	r3, [r7, #3]
 8015d16:	f003 0302 	and.w	r3, r3, #2
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d104      	bne.n	8015d28 <tcp_enqueue_flags+0x148>
 8015d1e:	78fb      	ldrb	r3, [r7, #3]
 8015d20:	f003 0301 	and.w	r3, r3, #1
 8015d24:	2b00      	cmp	r3, #0
 8015d26:	d004      	beq.n	8015d32 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015d2c:	1c5a      	adds	r2, r3, #1
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8015d32:	78fb      	ldrb	r3, [r7, #3]
 8015d34:	f003 0301 	and.w	r3, r3, #1
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d006      	beq.n	8015d4a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	8b5b      	ldrh	r3, [r3, #26]
 8015d40:	f043 0320 	orr.w	r3, r3, #32
 8015d44:	b29a      	uxth	r2, r3
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8015d4a:	68fb      	ldr	r3, [r7, #12]
 8015d4c:	685b      	ldr	r3, [r3, #4]
 8015d4e:	4618      	mov	r0, r3
 8015d50:	f7fa fdd6 	bl	8010900 <pbuf_clen>
 8015d54:	4603      	mov	r3, r0
 8015d56:	461a      	mov	r2, r3
 8015d58:	687b      	ldr	r3, [r7, #4]
 8015d5a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015d5e:	4413      	add	r3, r2
 8015d60:	b29a      	uxth	r2, r3
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d00e      	beq.n	8015d90 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8015d72:	687b      	ldr	r3, [r7, #4]
 8015d74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015d76:	2b00      	cmp	r3, #0
 8015d78:	d10a      	bne.n	8015d90 <tcp_enqueue_flags+0x1b0>
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015d7e:	2b00      	cmp	r3, #0
 8015d80:	d106      	bne.n	8015d90 <tcp_enqueue_flags+0x1b0>
 8015d82:	4b06      	ldr	r3, [pc, #24]	; (8015d9c <tcp_enqueue_flags+0x1bc>)
 8015d84:	f240 4265 	movw	r2, #1125	; 0x465
 8015d88:	490b      	ldr	r1, [pc, #44]	; (8015db8 <tcp_enqueue_flags+0x1d8>)
 8015d8a:	4806      	ldr	r0, [pc, #24]	; (8015da4 <tcp_enqueue_flags+0x1c4>)
 8015d8c:	f004 fc9c 	bl	801a6c8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8015d90:	2300      	movs	r3, #0
}
 8015d92:	4618      	mov	r0, r3
 8015d94:	3720      	adds	r7, #32
 8015d96:	46bd      	mov	sp, r7
 8015d98:	bd80      	pop	{r7, pc}
 8015d9a:	bf00      	nop
 8015d9c:	0801dad8 	.word	0x0801dad8
 8015da0:	0801defc 	.word	0x0801defc
 8015da4:	0801db2c 	.word	0x0801db2c
 8015da8:	0801df54 	.word	0x0801df54
 8015dac:	0801df74 	.word	0x0801df74
 8015db0:	0801dfb0 	.word	0x0801dfb0
 8015db4:	0801dfc8 	.word	0x0801dfc8
 8015db8:	0801dff4 	.word	0x0801dff4

08015dbc <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8015dbc:	b5b0      	push	{r4, r5, r7, lr}
 8015dbe:	b08a      	sub	sp, #40	; 0x28
 8015dc0:	af00      	add	r7, sp, #0
 8015dc2:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d106      	bne.n	8015dd8 <tcp_output+0x1c>
 8015dca:	4b9e      	ldr	r3, [pc, #632]	; (8016044 <tcp_output+0x288>)
 8015dcc:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8015dd0:	499d      	ldr	r1, [pc, #628]	; (8016048 <tcp_output+0x28c>)
 8015dd2:	489e      	ldr	r0, [pc, #632]	; (801604c <tcp_output+0x290>)
 8015dd4:	f004 fc78 	bl	801a6c8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8015dd8:	687b      	ldr	r3, [r7, #4]
 8015dda:	7d1b      	ldrb	r3, [r3, #20]
 8015ddc:	2b01      	cmp	r3, #1
 8015dde:	d106      	bne.n	8015dee <tcp_output+0x32>
 8015de0:	4b98      	ldr	r3, [pc, #608]	; (8016044 <tcp_output+0x288>)
 8015de2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8015de6:	499a      	ldr	r1, [pc, #616]	; (8016050 <tcp_output+0x294>)
 8015de8:	4898      	ldr	r0, [pc, #608]	; (801604c <tcp_output+0x290>)
 8015dea:	f004 fc6d 	bl	801a6c8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8015dee:	4b99      	ldr	r3, [pc, #612]	; (8016054 <tcp_output+0x298>)
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	687a      	ldr	r2, [r7, #4]
 8015df4:	429a      	cmp	r2, r3
 8015df6:	d101      	bne.n	8015dfc <tcp_output+0x40>
    return ERR_OK;
 8015df8:	2300      	movs	r3, #0
 8015dfa:	e1ce      	b.n	801619a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015e02:	687b      	ldr	r3, [r7, #4]
 8015e04:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015e08:	4293      	cmp	r3, r2
 8015e0a:	bf28      	it	cs
 8015e0c:	4613      	movcs	r3, r2
 8015e0e:	b29b      	uxth	r3, r3
 8015e10:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015e16:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8015e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d10b      	bne.n	8015e36 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8015e1e:	687b      	ldr	r3, [r7, #4]
 8015e20:	8b5b      	ldrh	r3, [r3, #26]
 8015e22:	f003 0302 	and.w	r3, r3, #2
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	f000 81aa 	beq.w	8016180 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8015e2c:	6878      	ldr	r0, [r7, #4]
 8015e2e:	f000 fdcb 	bl	80169c8 <tcp_send_empty_ack>
 8015e32:	4603      	mov	r3, r0
 8015e34:	e1b1      	b.n	801619a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8015e36:	6879      	ldr	r1, [r7, #4]
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	3304      	adds	r3, #4
 8015e3c:	461a      	mov	r2, r3
 8015e3e:	6878      	ldr	r0, [r7, #4]
 8015e40:	f7ff f824 	bl	8014e8c <tcp_route>
 8015e44:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8015e46:	697b      	ldr	r3, [r7, #20]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d102      	bne.n	8015e52 <tcp_output+0x96>
    return ERR_RTE;
 8015e4c:	f06f 0303 	mvn.w	r3, #3
 8015e50:	e1a3      	b.n	801619a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	2b00      	cmp	r3, #0
 8015e56:	d003      	beq.n	8015e60 <tcp_output+0xa4>
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d111      	bne.n	8015e84 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8015e60:	697b      	ldr	r3, [r7, #20]
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d002      	beq.n	8015e6c <tcp_output+0xb0>
 8015e66:	697b      	ldr	r3, [r7, #20]
 8015e68:	3304      	adds	r3, #4
 8015e6a:	e000      	b.n	8015e6e <tcp_output+0xb2>
 8015e6c:	2300      	movs	r3, #0
 8015e6e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8015e70:	693b      	ldr	r3, [r7, #16]
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d102      	bne.n	8015e7c <tcp_output+0xc0>
      return ERR_RTE;
 8015e76:	f06f 0303 	mvn.w	r3, #3
 8015e7a:	e18e      	b.n	801619a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8015e7c:	693b      	ldr	r3, [r7, #16]
 8015e7e:	681a      	ldr	r2, [r3, #0]
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8015e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e86:	68db      	ldr	r3, [r3, #12]
 8015e88:	685b      	ldr	r3, [r3, #4]
 8015e8a:	4618      	mov	r0, r3
 8015e8c:	f7f9 f977 	bl	800f17e <lwip_htonl>
 8015e90:	4602      	mov	r2, r0
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015e96:	1ad3      	subs	r3, r2, r3
 8015e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e9a:	8912      	ldrh	r2, [r2, #8]
 8015e9c:	4413      	add	r3, r2
 8015e9e:	69ba      	ldr	r2, [r7, #24]
 8015ea0:	429a      	cmp	r2, r3
 8015ea2:	d227      	bcs.n	8015ef4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015eaa:	461a      	mov	r2, r3
 8015eac:	69bb      	ldr	r3, [r7, #24]
 8015eae:	4293      	cmp	r3, r2
 8015eb0:	d114      	bne.n	8015edc <tcp_output+0x120>
 8015eb2:	687b      	ldr	r3, [r7, #4]
 8015eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d110      	bne.n	8015edc <tcp_output+0x120>
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015ec0:	2b00      	cmp	r3, #0
 8015ec2:	d10b      	bne.n	8015edc <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	2200      	movs	r2, #0
 8015ec8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8015ecc:	687b      	ldr	r3, [r7, #4]
 8015ece:	2201      	movs	r2, #1
 8015ed0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	2200      	movs	r2, #0
 8015ed8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8015edc:	687b      	ldr	r3, [r7, #4]
 8015ede:	8b5b      	ldrh	r3, [r3, #26]
 8015ee0:	f003 0302 	and.w	r3, r3, #2
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	f000 814d 	beq.w	8016184 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8015eea:	6878      	ldr	r0, [r7, #4]
 8015eec:	f000 fd6c 	bl	80169c8 <tcp_send_empty_ack>
 8015ef0:	4603      	mov	r3, r0
 8015ef2:	e152      	b.n	801619a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	2200      	movs	r2, #0
 8015ef8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f00:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8015f02:	6a3b      	ldr	r3, [r7, #32]
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	f000 811c 	beq.w	8016142 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8015f0a:	e002      	b.n	8015f12 <tcp_output+0x156>
 8015f0c:	6a3b      	ldr	r3, [r7, #32]
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	623b      	str	r3, [r7, #32]
 8015f12:	6a3b      	ldr	r3, [r7, #32]
 8015f14:	681b      	ldr	r3, [r3, #0]
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d1f8      	bne.n	8015f0c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8015f1a:	e112      	b.n	8016142 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8015f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f1e:	68db      	ldr	r3, [r3, #12]
 8015f20:	899b      	ldrh	r3, [r3, #12]
 8015f22:	b29b      	uxth	r3, r3
 8015f24:	4618      	mov	r0, r3
 8015f26:	f7f9 f915 	bl	800f154 <lwip_htons>
 8015f2a:	4603      	mov	r3, r0
 8015f2c:	b2db      	uxtb	r3, r3
 8015f2e:	f003 0304 	and.w	r3, r3, #4
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d006      	beq.n	8015f44 <tcp_output+0x188>
 8015f36:	4b43      	ldr	r3, [pc, #268]	; (8016044 <tcp_output+0x288>)
 8015f38:	f240 5236 	movw	r2, #1334	; 0x536
 8015f3c:	4946      	ldr	r1, [pc, #280]	; (8016058 <tcp_output+0x29c>)
 8015f3e:	4843      	ldr	r0, [pc, #268]	; (801604c <tcp_output+0x290>)
 8015f40:	f004 fbc2 	bl	801a6c8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d01f      	beq.n	8015f8c <tcp_output+0x1d0>
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	8b5b      	ldrh	r3, [r3, #26]
 8015f50:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d119      	bne.n	8015f8c <tcp_output+0x1d0>
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d00b      	beq.n	8015f78 <tcp_output+0x1bc>
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f64:	681b      	ldr	r3, [r3, #0]
 8015f66:	2b00      	cmp	r3, #0
 8015f68:	d110      	bne.n	8015f8c <tcp_output+0x1d0>
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f6e:	891a      	ldrh	r2, [r3, #8]
 8015f70:	687b      	ldr	r3, [r7, #4]
 8015f72:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015f74:	429a      	cmp	r2, r3
 8015f76:	d209      	bcs.n	8015f8c <tcp_output+0x1d0>
 8015f78:	687b      	ldr	r3, [r7, #4]
 8015f7a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d004      	beq.n	8015f8c <tcp_output+0x1d0>
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015f88:	2b08      	cmp	r3, #8
 8015f8a:	d901      	bls.n	8015f90 <tcp_output+0x1d4>
 8015f8c:	2301      	movs	r3, #1
 8015f8e:	e000      	b.n	8015f92 <tcp_output+0x1d6>
 8015f90:	2300      	movs	r3, #0
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d106      	bne.n	8015fa4 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	8b5b      	ldrh	r3, [r3, #26]
 8015f9a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	f000 80e4 	beq.w	801616c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	7d1b      	ldrb	r3, [r3, #20]
 8015fa8:	2b02      	cmp	r3, #2
 8015faa:	d00d      	beq.n	8015fc8 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8015fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fae:	68db      	ldr	r3, [r3, #12]
 8015fb0:	899b      	ldrh	r3, [r3, #12]
 8015fb2:	b29c      	uxth	r4, r3
 8015fb4:	2010      	movs	r0, #16
 8015fb6:	f7f9 f8cd 	bl	800f154 <lwip_htons>
 8015fba:	4603      	mov	r3, r0
 8015fbc:	461a      	mov	r2, r3
 8015fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fc0:	68db      	ldr	r3, [r3, #12]
 8015fc2:	4322      	orrs	r2, r4
 8015fc4:	b292      	uxth	r2, r2
 8015fc6:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8015fc8:	697a      	ldr	r2, [r7, #20]
 8015fca:	6879      	ldr	r1, [r7, #4]
 8015fcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015fce:	f000 f909 	bl	80161e4 <tcp_output_segment>
 8015fd2:	4603      	mov	r3, r0
 8015fd4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8015fd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d009      	beq.n	8015ff2 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	8b5b      	ldrh	r3, [r3, #26]
 8015fe2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015fe6:	b29a      	uxth	r2, r3
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	835a      	strh	r2, [r3, #26]
      return err;
 8015fec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015ff0:	e0d3      	b.n	801619a <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8015ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ff4:	681a      	ldr	r2, [r3, #0]
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	7d1b      	ldrb	r3, [r3, #20]
 8015ffe:	2b02      	cmp	r3, #2
 8016000:	d006      	beq.n	8016010 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	8b5b      	ldrh	r3, [r3, #26]
 8016006:	f023 0303 	bic.w	r3, r3, #3
 801600a:	b29a      	uxth	r2, r3
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016012:	68db      	ldr	r3, [r3, #12]
 8016014:	685b      	ldr	r3, [r3, #4]
 8016016:	4618      	mov	r0, r3
 8016018:	f7f9 f8b1 	bl	800f17e <lwip_htonl>
 801601c:	4604      	mov	r4, r0
 801601e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016020:	891b      	ldrh	r3, [r3, #8]
 8016022:	461d      	mov	r5, r3
 8016024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016026:	68db      	ldr	r3, [r3, #12]
 8016028:	899b      	ldrh	r3, [r3, #12]
 801602a:	b29b      	uxth	r3, r3
 801602c:	4618      	mov	r0, r3
 801602e:	f7f9 f891 	bl	800f154 <lwip_htons>
 8016032:	4603      	mov	r3, r0
 8016034:	b2db      	uxtb	r3, r3
 8016036:	f003 0303 	and.w	r3, r3, #3
 801603a:	2b00      	cmp	r3, #0
 801603c:	d00e      	beq.n	801605c <tcp_output+0x2a0>
 801603e:	2301      	movs	r3, #1
 8016040:	e00d      	b.n	801605e <tcp_output+0x2a2>
 8016042:	bf00      	nop
 8016044:	0801dad8 	.word	0x0801dad8
 8016048:	0801e01c 	.word	0x0801e01c
 801604c:	0801db2c 	.word	0x0801db2c
 8016050:	0801e034 	.word	0x0801e034
 8016054:	2000dd58 	.word	0x2000dd58
 8016058:	0801e05c 	.word	0x0801e05c
 801605c:	2300      	movs	r3, #0
 801605e:	442b      	add	r3, r5
 8016060:	4423      	add	r3, r4
 8016062:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016068:	68bb      	ldr	r3, [r7, #8]
 801606a:	1ad3      	subs	r3, r2, r3
 801606c:	2b00      	cmp	r3, #0
 801606e:	da02      	bge.n	8016076 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	68ba      	ldr	r2, [r7, #8]
 8016074:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8016076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016078:	891b      	ldrh	r3, [r3, #8]
 801607a:	461c      	mov	r4, r3
 801607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801607e:	68db      	ldr	r3, [r3, #12]
 8016080:	899b      	ldrh	r3, [r3, #12]
 8016082:	b29b      	uxth	r3, r3
 8016084:	4618      	mov	r0, r3
 8016086:	f7f9 f865 	bl	800f154 <lwip_htons>
 801608a:	4603      	mov	r3, r0
 801608c:	b2db      	uxtb	r3, r3
 801608e:	f003 0303 	and.w	r3, r3, #3
 8016092:	2b00      	cmp	r3, #0
 8016094:	d001      	beq.n	801609a <tcp_output+0x2de>
 8016096:	2301      	movs	r3, #1
 8016098:	e000      	b.n	801609c <tcp_output+0x2e0>
 801609a:	2300      	movs	r3, #0
 801609c:	4423      	add	r3, r4
 801609e:	2b00      	cmp	r3, #0
 80160a0:	d049      	beq.n	8016136 <tcp_output+0x37a>
      seg->next = NULL;
 80160a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160a4:	2200      	movs	r2, #0
 80160a6:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d105      	bne.n	80160bc <tcp_output+0x300>
        pcb->unacked = seg;
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80160b4:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80160b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160b8:	623b      	str	r3, [r7, #32]
 80160ba:	e03f      	b.n	801613c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80160bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80160be:	68db      	ldr	r3, [r3, #12]
 80160c0:	685b      	ldr	r3, [r3, #4]
 80160c2:	4618      	mov	r0, r3
 80160c4:	f7f9 f85b 	bl	800f17e <lwip_htonl>
 80160c8:	4604      	mov	r4, r0
 80160ca:	6a3b      	ldr	r3, [r7, #32]
 80160cc:	68db      	ldr	r3, [r3, #12]
 80160ce:	685b      	ldr	r3, [r3, #4]
 80160d0:	4618      	mov	r0, r3
 80160d2:	f7f9 f854 	bl	800f17e <lwip_htonl>
 80160d6:	4603      	mov	r3, r0
 80160d8:	1ae3      	subs	r3, r4, r3
 80160da:	2b00      	cmp	r3, #0
 80160dc:	da24      	bge.n	8016128 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80160de:	687b      	ldr	r3, [r7, #4]
 80160e0:	3370      	adds	r3, #112	; 0x70
 80160e2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80160e4:	e002      	b.n	80160ec <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80160e6:	69fb      	ldr	r3, [r7, #28]
 80160e8:	681b      	ldr	r3, [r3, #0]
 80160ea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80160ec:	69fb      	ldr	r3, [r7, #28]
 80160ee:	681b      	ldr	r3, [r3, #0]
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d011      	beq.n	8016118 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80160f4:	69fb      	ldr	r3, [r7, #28]
 80160f6:	681b      	ldr	r3, [r3, #0]
 80160f8:	68db      	ldr	r3, [r3, #12]
 80160fa:	685b      	ldr	r3, [r3, #4]
 80160fc:	4618      	mov	r0, r3
 80160fe:	f7f9 f83e 	bl	800f17e <lwip_htonl>
 8016102:	4604      	mov	r4, r0
 8016104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016106:	68db      	ldr	r3, [r3, #12]
 8016108:	685b      	ldr	r3, [r3, #4]
 801610a:	4618      	mov	r0, r3
 801610c:	f7f9 f837 	bl	800f17e <lwip_htonl>
 8016110:	4603      	mov	r3, r0
 8016112:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8016114:	2b00      	cmp	r3, #0
 8016116:	dbe6      	blt.n	80160e6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8016118:	69fb      	ldr	r3, [r7, #28]
 801611a:	681a      	ldr	r2, [r3, #0]
 801611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801611e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8016120:	69fb      	ldr	r3, [r7, #28]
 8016122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016124:	601a      	str	r2, [r3, #0]
 8016126:	e009      	b.n	801613c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8016128:	6a3b      	ldr	r3, [r7, #32]
 801612a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801612c:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801612e:	6a3b      	ldr	r3, [r7, #32]
 8016130:	681b      	ldr	r3, [r3, #0]
 8016132:	623b      	str	r3, [r7, #32]
 8016134:	e002      	b.n	801613c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8016136:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016138:	f7fb ff1d 	bl	8011f76 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801613c:	687b      	ldr	r3, [r7, #4]
 801613e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016140:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8016142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016144:	2b00      	cmp	r3, #0
 8016146:	d012      	beq.n	801616e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8016148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801614a:	68db      	ldr	r3, [r3, #12]
 801614c:	685b      	ldr	r3, [r3, #4]
 801614e:	4618      	mov	r0, r3
 8016150:	f7f9 f815 	bl	800f17e <lwip_htonl>
 8016154:	4602      	mov	r2, r0
 8016156:	687b      	ldr	r3, [r7, #4]
 8016158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801615a:	1ad3      	subs	r3, r2, r3
 801615c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801615e:	8912      	ldrh	r2, [r2, #8]
 8016160:	4413      	add	r3, r2
  while (seg != NULL &&
 8016162:	69ba      	ldr	r2, [r7, #24]
 8016164:	429a      	cmp	r2, r3
 8016166:	f4bf aed9 	bcs.w	8015f1c <tcp_output+0x160>
 801616a:	e000      	b.n	801616e <tcp_output+0x3b2>
      break;
 801616c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016172:	2b00      	cmp	r3, #0
 8016174:	d108      	bne.n	8016188 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	2200      	movs	r2, #0
 801617a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801617e:	e004      	b.n	801618a <tcp_output+0x3ce>
    goto output_done;
 8016180:	bf00      	nop
 8016182:	e002      	b.n	801618a <tcp_output+0x3ce>
    goto output_done;
 8016184:	bf00      	nop
 8016186:	e000      	b.n	801618a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8016188:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801618a:	687b      	ldr	r3, [r7, #4]
 801618c:	8b5b      	ldrh	r3, [r3, #26]
 801618e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016192:	b29a      	uxth	r2, r3
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8016198:	2300      	movs	r3, #0
}
 801619a:	4618      	mov	r0, r3
 801619c:	3728      	adds	r7, #40	; 0x28
 801619e:	46bd      	mov	sp, r7
 80161a0:	bdb0      	pop	{r4, r5, r7, pc}
 80161a2:	bf00      	nop

080161a4 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80161a4:	b580      	push	{r7, lr}
 80161a6:	b082      	sub	sp, #8
 80161a8:	af00      	add	r7, sp, #0
 80161aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	2b00      	cmp	r3, #0
 80161b0:	d106      	bne.n	80161c0 <tcp_output_segment_busy+0x1c>
 80161b2:	4b09      	ldr	r3, [pc, #36]	; (80161d8 <tcp_output_segment_busy+0x34>)
 80161b4:	f240 529a 	movw	r2, #1434	; 0x59a
 80161b8:	4908      	ldr	r1, [pc, #32]	; (80161dc <tcp_output_segment_busy+0x38>)
 80161ba:	4809      	ldr	r0, [pc, #36]	; (80161e0 <tcp_output_segment_busy+0x3c>)
 80161bc:	f004 fa84 	bl	801a6c8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	685b      	ldr	r3, [r3, #4]
 80161c4:	7b9b      	ldrb	r3, [r3, #14]
 80161c6:	2b01      	cmp	r3, #1
 80161c8:	d001      	beq.n	80161ce <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80161ca:	2301      	movs	r3, #1
 80161cc:	e000      	b.n	80161d0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80161ce:	2300      	movs	r3, #0
}
 80161d0:	4618      	mov	r0, r3
 80161d2:	3708      	adds	r7, #8
 80161d4:	46bd      	mov	sp, r7
 80161d6:	bd80      	pop	{r7, pc}
 80161d8:	0801dad8 	.word	0x0801dad8
 80161dc:	0801e074 	.word	0x0801e074
 80161e0:	0801db2c 	.word	0x0801db2c

080161e4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80161e4:	b5b0      	push	{r4, r5, r7, lr}
 80161e6:	b08c      	sub	sp, #48	; 0x30
 80161e8:	af04      	add	r7, sp, #16
 80161ea:	60f8      	str	r0, [r7, #12]
 80161ec:	60b9      	str	r1, [r7, #8]
 80161ee:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80161f0:	68fb      	ldr	r3, [r7, #12]
 80161f2:	2b00      	cmp	r3, #0
 80161f4:	d106      	bne.n	8016204 <tcp_output_segment+0x20>
 80161f6:	4b63      	ldr	r3, [pc, #396]	; (8016384 <tcp_output_segment+0x1a0>)
 80161f8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80161fc:	4962      	ldr	r1, [pc, #392]	; (8016388 <tcp_output_segment+0x1a4>)
 80161fe:	4863      	ldr	r0, [pc, #396]	; (801638c <tcp_output_segment+0x1a8>)
 8016200:	f004 fa62 	bl	801a6c8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8016204:	68bb      	ldr	r3, [r7, #8]
 8016206:	2b00      	cmp	r3, #0
 8016208:	d106      	bne.n	8016218 <tcp_output_segment+0x34>
 801620a:	4b5e      	ldr	r3, [pc, #376]	; (8016384 <tcp_output_segment+0x1a0>)
 801620c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8016210:	495f      	ldr	r1, [pc, #380]	; (8016390 <tcp_output_segment+0x1ac>)
 8016212:	485e      	ldr	r0, [pc, #376]	; (801638c <tcp_output_segment+0x1a8>)
 8016214:	f004 fa58 	bl	801a6c8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	2b00      	cmp	r3, #0
 801621c:	d106      	bne.n	801622c <tcp_output_segment+0x48>
 801621e:	4b59      	ldr	r3, [pc, #356]	; (8016384 <tcp_output_segment+0x1a0>)
 8016220:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8016224:	495b      	ldr	r1, [pc, #364]	; (8016394 <tcp_output_segment+0x1b0>)
 8016226:	4859      	ldr	r0, [pc, #356]	; (801638c <tcp_output_segment+0x1a8>)
 8016228:	f004 fa4e 	bl	801a6c8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801622c:	68f8      	ldr	r0, [r7, #12]
 801622e:	f7ff ffb9 	bl	80161a4 <tcp_output_segment_busy>
 8016232:	4603      	mov	r3, r0
 8016234:	2b00      	cmp	r3, #0
 8016236:	d001      	beq.n	801623c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8016238:	2300      	movs	r3, #0
 801623a:	e09f      	b.n	801637c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801623c:	68bb      	ldr	r3, [r7, #8]
 801623e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	68dc      	ldr	r4, [r3, #12]
 8016244:	4610      	mov	r0, r2
 8016246:	f7f8 ff9a 	bl	800f17e <lwip_htonl>
 801624a:	4603      	mov	r3, r0
 801624c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801624e:	68bb      	ldr	r3, [r7, #8]
 8016250:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	68dc      	ldr	r4, [r3, #12]
 8016256:	4610      	mov	r0, r2
 8016258:	f7f8 ff7c 	bl	800f154 <lwip_htons>
 801625c:	4603      	mov	r3, r0
 801625e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016260:	68bb      	ldr	r3, [r7, #8]
 8016262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016264:	68ba      	ldr	r2, [r7, #8]
 8016266:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8016268:	441a      	add	r2, r3
 801626a:	68bb      	ldr	r3, [r7, #8]
 801626c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801626e:	68fb      	ldr	r3, [r7, #12]
 8016270:	68db      	ldr	r3, [r3, #12]
 8016272:	3314      	adds	r3, #20
 8016274:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8016276:	68fb      	ldr	r3, [r7, #12]
 8016278:	7a9b      	ldrb	r3, [r3, #10]
 801627a:	f003 0301 	and.w	r3, r3, #1
 801627e:	2b00      	cmp	r3, #0
 8016280:	d015      	beq.n	80162ae <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8016282:	68bb      	ldr	r3, [r7, #8]
 8016284:	3304      	adds	r3, #4
 8016286:	461a      	mov	r2, r3
 8016288:	6879      	ldr	r1, [r7, #4]
 801628a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801628e:	f7fc fa37 	bl	8012700 <tcp_eff_send_mss_netif>
 8016292:	4603      	mov	r3, r0
 8016294:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8016296:	8b7b      	ldrh	r3, [r7, #26]
 8016298:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801629c:	4618      	mov	r0, r3
 801629e:	f7f8 ff6e 	bl	800f17e <lwip_htonl>
 80162a2:	4602      	mov	r2, r0
 80162a4:	69fb      	ldr	r3, [r7, #28]
 80162a6:	601a      	str	r2, [r3, #0]
    opts += 1;
 80162a8:	69fb      	ldr	r3, [r7, #28]
 80162aa:	3304      	adds	r3, #4
 80162ac:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80162ae:	68bb      	ldr	r3, [r7, #8]
 80162b0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	da02      	bge.n	80162be <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80162b8:	68bb      	ldr	r3, [r7, #8]
 80162ba:	2200      	movs	r2, #0
 80162bc:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80162be:	68bb      	ldr	r3, [r7, #8]
 80162c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80162c2:	2b00      	cmp	r3, #0
 80162c4:	d10c      	bne.n	80162e0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80162c6:	4b34      	ldr	r3, [pc, #208]	; (8016398 <tcp_output_segment+0x1b4>)
 80162c8:	681a      	ldr	r2, [r3, #0]
 80162ca:	68bb      	ldr	r3, [r7, #8]
 80162cc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80162ce:	68fb      	ldr	r3, [r7, #12]
 80162d0:	68db      	ldr	r3, [r3, #12]
 80162d2:	685b      	ldr	r3, [r3, #4]
 80162d4:	4618      	mov	r0, r3
 80162d6:	f7f8 ff52 	bl	800f17e <lwip_htonl>
 80162da:	4602      	mov	r2, r0
 80162dc:	68bb      	ldr	r3, [r7, #8]
 80162de:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 80162e0:	68fb      	ldr	r3, [r7, #12]
 80162e2:	68da      	ldr	r2, [r3, #12]
 80162e4:	68fb      	ldr	r3, [r7, #12]
 80162e6:	685b      	ldr	r3, [r3, #4]
 80162e8:	685b      	ldr	r3, [r3, #4]
 80162ea:	1ad3      	subs	r3, r2, r3
 80162ec:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 80162ee:	68fb      	ldr	r3, [r7, #12]
 80162f0:	685b      	ldr	r3, [r3, #4]
 80162f2:	8959      	ldrh	r1, [r3, #10]
 80162f4:	68fb      	ldr	r3, [r7, #12]
 80162f6:	685b      	ldr	r3, [r3, #4]
 80162f8:	8b3a      	ldrh	r2, [r7, #24]
 80162fa:	1a8a      	subs	r2, r1, r2
 80162fc:	b292      	uxth	r2, r2
 80162fe:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8016300:	68fb      	ldr	r3, [r7, #12]
 8016302:	685b      	ldr	r3, [r3, #4]
 8016304:	8919      	ldrh	r1, [r3, #8]
 8016306:	68fb      	ldr	r3, [r7, #12]
 8016308:	685b      	ldr	r3, [r3, #4]
 801630a:	8b3a      	ldrh	r2, [r7, #24]
 801630c:	1a8a      	subs	r2, r1, r2
 801630e:	b292      	uxth	r2, r2
 8016310:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8016312:	68fb      	ldr	r3, [r7, #12]
 8016314:	685b      	ldr	r3, [r3, #4]
 8016316:	68fa      	ldr	r2, [r7, #12]
 8016318:	68d2      	ldr	r2, [r2, #12]
 801631a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	68db      	ldr	r3, [r3, #12]
 8016320:	2200      	movs	r2, #0
 8016322:	741a      	strb	r2, [r3, #16]
 8016324:	2200      	movs	r2, #0
 8016326:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8016328:	68fb      	ldr	r3, [r7, #12]
 801632a:	68db      	ldr	r3, [r3, #12]
 801632c:	f103 0214 	add.w	r2, r3, #20
 8016330:	68fb      	ldr	r3, [r7, #12]
 8016332:	7a9b      	ldrb	r3, [r3, #10]
 8016334:	009b      	lsls	r3, r3, #2
 8016336:	f003 0304 	and.w	r3, r3, #4
 801633a:	4413      	add	r3, r2
 801633c:	69fa      	ldr	r2, [r7, #28]
 801633e:	429a      	cmp	r2, r3
 8016340:	d006      	beq.n	8016350 <tcp_output_segment+0x16c>
 8016342:	4b10      	ldr	r3, [pc, #64]	; (8016384 <tcp_output_segment+0x1a0>)
 8016344:	f240 621c 	movw	r2, #1564	; 0x61c
 8016348:	4914      	ldr	r1, [pc, #80]	; (801639c <tcp_output_segment+0x1b8>)
 801634a:	4810      	ldr	r0, [pc, #64]	; (801638c <tcp_output_segment+0x1a8>)
 801634c:	f004 f9bc 	bl	801a6c8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8016350:	68fb      	ldr	r3, [r7, #12]
 8016352:	6858      	ldr	r0, [r3, #4]
 8016354:	68b9      	ldr	r1, [r7, #8]
 8016356:	68bb      	ldr	r3, [r7, #8]
 8016358:	1d1c      	adds	r4, r3, #4
 801635a:	68bb      	ldr	r3, [r7, #8]
 801635c:	7add      	ldrb	r5, [r3, #11]
 801635e:	68bb      	ldr	r3, [r7, #8]
 8016360:	7a9b      	ldrb	r3, [r3, #10]
 8016362:	687a      	ldr	r2, [r7, #4]
 8016364:	9202      	str	r2, [sp, #8]
 8016366:	2206      	movs	r2, #6
 8016368:	9201      	str	r2, [sp, #4]
 801636a:	9300      	str	r3, [sp, #0]
 801636c:	462b      	mov	r3, r5
 801636e:	4622      	mov	r2, r4
 8016370:	f002 fd96 	bl	8018ea0 <ip4_output_if>
 8016374:	4603      	mov	r3, r0
 8016376:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8016378:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801637c:	4618      	mov	r0, r3
 801637e:	3720      	adds	r7, #32
 8016380:	46bd      	mov	sp, r7
 8016382:	bdb0      	pop	{r4, r5, r7, pc}
 8016384:	0801dad8 	.word	0x0801dad8
 8016388:	0801e09c 	.word	0x0801e09c
 801638c:	0801db2c 	.word	0x0801db2c
 8016390:	0801e0bc 	.word	0x0801e0bc
 8016394:	0801e0dc 	.word	0x0801e0dc
 8016398:	2000dd48 	.word	0x2000dd48
 801639c:	0801e100 	.word	0x0801e100

080163a0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80163a0:	b5b0      	push	{r4, r5, r7, lr}
 80163a2:	b084      	sub	sp, #16
 80163a4:	af00      	add	r7, sp, #0
 80163a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	2b00      	cmp	r3, #0
 80163ac:	d106      	bne.n	80163bc <tcp_rexmit_rto_prepare+0x1c>
 80163ae:	4b31      	ldr	r3, [pc, #196]	; (8016474 <tcp_rexmit_rto_prepare+0xd4>)
 80163b0:	f240 6263 	movw	r2, #1635	; 0x663
 80163b4:	4930      	ldr	r1, [pc, #192]	; (8016478 <tcp_rexmit_rto_prepare+0xd8>)
 80163b6:	4831      	ldr	r0, [pc, #196]	; (801647c <tcp_rexmit_rto_prepare+0xdc>)
 80163b8:	f004 f986 	bl	801a6c8 <iprintf>

  if (pcb->unacked == NULL) {
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d102      	bne.n	80163ca <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80163c4:	f06f 0305 	mvn.w	r3, #5
 80163c8:	e050      	b.n	801646c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80163ca:	687b      	ldr	r3, [r7, #4]
 80163cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80163ce:	60fb      	str	r3, [r7, #12]
 80163d0:	e00b      	b.n	80163ea <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80163d2:	68f8      	ldr	r0, [r7, #12]
 80163d4:	f7ff fee6 	bl	80161a4 <tcp_output_segment_busy>
 80163d8:	4603      	mov	r3, r0
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d002      	beq.n	80163e4 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 80163de:	f06f 0305 	mvn.w	r3, #5
 80163e2:	e043      	b.n	801646c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80163e4:	68fb      	ldr	r3, [r7, #12]
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	60fb      	str	r3, [r7, #12]
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	681b      	ldr	r3, [r3, #0]
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d1ef      	bne.n	80163d2 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 80163f2:	68f8      	ldr	r0, [r7, #12]
 80163f4:	f7ff fed6 	bl	80161a4 <tcp_output_segment_busy>
 80163f8:	4603      	mov	r3, r0
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d002      	beq.n	8016404 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80163fe:	f06f 0305 	mvn.w	r3, #5
 8016402:	e033      	b.n	801646c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8016404:	687b      	ldr	r3, [r7, #4]
 8016406:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8016408:	68fb      	ldr	r3, [r7, #12]
 801640a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8016414:	687b      	ldr	r3, [r7, #4]
 8016416:	2200      	movs	r2, #0
 8016418:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	8b5b      	ldrh	r3, [r3, #26]
 801641e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8016422:	b29a      	uxth	r2, r3
 8016424:	687b      	ldr	r3, [r7, #4]
 8016426:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016428:	68fb      	ldr	r3, [r7, #12]
 801642a:	68db      	ldr	r3, [r3, #12]
 801642c:	685b      	ldr	r3, [r3, #4]
 801642e:	4618      	mov	r0, r3
 8016430:	f7f8 fea5 	bl	800f17e <lwip_htonl>
 8016434:	4604      	mov	r4, r0
 8016436:	68fb      	ldr	r3, [r7, #12]
 8016438:	891b      	ldrh	r3, [r3, #8]
 801643a:	461d      	mov	r5, r3
 801643c:	68fb      	ldr	r3, [r7, #12]
 801643e:	68db      	ldr	r3, [r3, #12]
 8016440:	899b      	ldrh	r3, [r3, #12]
 8016442:	b29b      	uxth	r3, r3
 8016444:	4618      	mov	r0, r3
 8016446:	f7f8 fe85 	bl	800f154 <lwip_htons>
 801644a:	4603      	mov	r3, r0
 801644c:	b2db      	uxtb	r3, r3
 801644e:	f003 0303 	and.w	r3, r3, #3
 8016452:	2b00      	cmp	r3, #0
 8016454:	d001      	beq.n	801645a <tcp_rexmit_rto_prepare+0xba>
 8016456:	2301      	movs	r3, #1
 8016458:	e000      	b.n	801645c <tcp_rexmit_rto_prepare+0xbc>
 801645a:	2300      	movs	r3, #0
 801645c:	442b      	add	r3, r5
 801645e:	18e2      	adds	r2, r4, r3
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8016464:	687b      	ldr	r3, [r7, #4]
 8016466:	2200      	movs	r2, #0
 8016468:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801646a:	2300      	movs	r3, #0
}
 801646c:	4618      	mov	r0, r3
 801646e:	3710      	adds	r7, #16
 8016470:	46bd      	mov	sp, r7
 8016472:	bdb0      	pop	{r4, r5, r7, pc}
 8016474:	0801dad8 	.word	0x0801dad8
 8016478:	0801e114 	.word	0x0801e114
 801647c:	0801db2c 	.word	0x0801db2c

08016480 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8016480:	b580      	push	{r7, lr}
 8016482:	b082      	sub	sp, #8
 8016484:	af00      	add	r7, sp, #0
 8016486:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	2b00      	cmp	r3, #0
 801648c:	d106      	bne.n	801649c <tcp_rexmit_rto_commit+0x1c>
 801648e:	4b0d      	ldr	r3, [pc, #52]	; (80164c4 <tcp_rexmit_rto_commit+0x44>)
 8016490:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8016494:	490c      	ldr	r1, [pc, #48]	; (80164c8 <tcp_rexmit_rto_commit+0x48>)
 8016496:	480d      	ldr	r0, [pc, #52]	; (80164cc <tcp_rexmit_rto_commit+0x4c>)
 8016498:	f004 f916 	bl	801a6c8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801649c:	687b      	ldr	r3, [r7, #4]
 801649e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80164a2:	2bff      	cmp	r3, #255	; 0xff
 80164a4:	d007      	beq.n	80164b6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80164a6:	687b      	ldr	r3, [r7, #4]
 80164a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80164ac:	3301      	adds	r3, #1
 80164ae:	b2da      	uxtb	r2, r3
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80164b6:	6878      	ldr	r0, [r7, #4]
 80164b8:	f7ff fc80 	bl	8015dbc <tcp_output>
}
 80164bc:	bf00      	nop
 80164be:	3708      	adds	r7, #8
 80164c0:	46bd      	mov	sp, r7
 80164c2:	bd80      	pop	{r7, pc}
 80164c4:	0801dad8 	.word	0x0801dad8
 80164c8:	0801e138 	.word	0x0801e138
 80164cc:	0801db2c 	.word	0x0801db2c

080164d0 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80164d0:	b580      	push	{r7, lr}
 80164d2:	b082      	sub	sp, #8
 80164d4:	af00      	add	r7, sp, #0
 80164d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	2b00      	cmp	r3, #0
 80164dc:	d106      	bne.n	80164ec <tcp_rexmit_rto+0x1c>
 80164de:	4b0a      	ldr	r3, [pc, #40]	; (8016508 <tcp_rexmit_rto+0x38>)
 80164e0:	f240 62ad 	movw	r2, #1709	; 0x6ad
 80164e4:	4909      	ldr	r1, [pc, #36]	; (801650c <tcp_rexmit_rto+0x3c>)
 80164e6:	480a      	ldr	r0, [pc, #40]	; (8016510 <tcp_rexmit_rto+0x40>)
 80164e8:	f004 f8ee 	bl	801a6c8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 80164ec:	6878      	ldr	r0, [r7, #4]
 80164ee:	f7ff ff57 	bl	80163a0 <tcp_rexmit_rto_prepare>
 80164f2:	4603      	mov	r3, r0
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d102      	bne.n	80164fe <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80164f8:	6878      	ldr	r0, [r7, #4]
 80164fa:	f7ff ffc1 	bl	8016480 <tcp_rexmit_rto_commit>
  }
}
 80164fe:	bf00      	nop
 8016500:	3708      	adds	r7, #8
 8016502:	46bd      	mov	sp, r7
 8016504:	bd80      	pop	{r7, pc}
 8016506:	bf00      	nop
 8016508:	0801dad8 	.word	0x0801dad8
 801650c:	0801e15c 	.word	0x0801e15c
 8016510:	0801db2c 	.word	0x0801db2c

08016514 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8016514:	b590      	push	{r4, r7, lr}
 8016516:	b085      	sub	sp, #20
 8016518:	af00      	add	r7, sp, #0
 801651a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	2b00      	cmp	r3, #0
 8016520:	d106      	bne.n	8016530 <tcp_rexmit+0x1c>
 8016522:	4b2f      	ldr	r3, [pc, #188]	; (80165e0 <tcp_rexmit+0xcc>)
 8016524:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8016528:	492e      	ldr	r1, [pc, #184]	; (80165e4 <tcp_rexmit+0xd0>)
 801652a:	482f      	ldr	r0, [pc, #188]	; (80165e8 <tcp_rexmit+0xd4>)
 801652c:	f004 f8cc 	bl	801a6c8 <iprintf>

  if (pcb->unacked == NULL) {
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016534:	2b00      	cmp	r3, #0
 8016536:	d102      	bne.n	801653e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8016538:	f06f 0305 	mvn.w	r3, #5
 801653c:	e04c      	b.n	80165d8 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016542:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8016544:	68b8      	ldr	r0, [r7, #8]
 8016546:	f7ff fe2d 	bl	80161a4 <tcp_output_segment_busy>
 801654a:	4603      	mov	r3, r0
 801654c:	2b00      	cmp	r3, #0
 801654e:	d002      	beq.n	8016556 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8016550:	f06f 0305 	mvn.w	r3, #5
 8016554:	e040      	b.n	80165d8 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8016556:	68bb      	ldr	r3, [r7, #8]
 8016558:	681a      	ldr	r2, [r3, #0]
 801655a:	687b      	ldr	r3, [r7, #4]
 801655c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801655e:	687b      	ldr	r3, [r7, #4]
 8016560:	336c      	adds	r3, #108	; 0x6c
 8016562:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016564:	e002      	b.n	801656c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8016566:	68fb      	ldr	r3, [r7, #12]
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801656c:	68fb      	ldr	r3, [r7, #12]
 801656e:	681b      	ldr	r3, [r3, #0]
 8016570:	2b00      	cmp	r3, #0
 8016572:	d011      	beq.n	8016598 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016574:	68fb      	ldr	r3, [r7, #12]
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	68db      	ldr	r3, [r3, #12]
 801657a:	685b      	ldr	r3, [r3, #4]
 801657c:	4618      	mov	r0, r3
 801657e:	f7f8 fdfe 	bl	800f17e <lwip_htonl>
 8016582:	4604      	mov	r4, r0
 8016584:	68bb      	ldr	r3, [r7, #8]
 8016586:	68db      	ldr	r3, [r3, #12]
 8016588:	685b      	ldr	r3, [r3, #4]
 801658a:	4618      	mov	r0, r3
 801658c:	f7f8 fdf7 	bl	800f17e <lwip_htonl>
 8016590:	4603      	mov	r3, r0
 8016592:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8016594:	2b00      	cmp	r3, #0
 8016596:	dbe6      	blt.n	8016566 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	681a      	ldr	r2, [r3, #0]
 801659c:	68bb      	ldr	r3, [r7, #8]
 801659e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80165a0:	68fb      	ldr	r3, [r7, #12]
 80165a2:	68ba      	ldr	r2, [r7, #8]
 80165a4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80165a6:	68bb      	ldr	r3, [r7, #8]
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	d103      	bne.n	80165b6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	2200      	movs	r2, #0
 80165b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80165b6:	687b      	ldr	r3, [r7, #4]
 80165b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80165bc:	2bff      	cmp	r3, #255	; 0xff
 80165be:	d007      	beq.n	80165d0 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80165c6:	3301      	adds	r3, #1
 80165c8:	b2da      	uxtb	r2, r3
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	2200      	movs	r2, #0
 80165d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80165d6:	2300      	movs	r3, #0
}
 80165d8:	4618      	mov	r0, r3
 80165da:	3714      	adds	r7, #20
 80165dc:	46bd      	mov	sp, r7
 80165de:	bd90      	pop	{r4, r7, pc}
 80165e0:	0801dad8 	.word	0x0801dad8
 80165e4:	0801e178 	.word	0x0801e178
 80165e8:	0801db2c 	.word	0x0801db2c

080165ec <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 80165ec:	b580      	push	{r7, lr}
 80165ee:	b082      	sub	sp, #8
 80165f0:	af00      	add	r7, sp, #0
 80165f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	2b00      	cmp	r3, #0
 80165f8:	d106      	bne.n	8016608 <tcp_rexmit_fast+0x1c>
 80165fa:	4b2a      	ldr	r3, [pc, #168]	; (80166a4 <tcp_rexmit_fast+0xb8>)
 80165fc:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8016600:	4929      	ldr	r1, [pc, #164]	; (80166a8 <tcp_rexmit_fast+0xbc>)
 8016602:	482a      	ldr	r0, [pc, #168]	; (80166ac <tcp_rexmit_fast+0xc0>)
 8016604:	f004 f860 	bl	801a6c8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801660c:	2b00      	cmp	r3, #0
 801660e:	d044      	beq.n	801669a <tcp_rexmit_fast+0xae>
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	8b5b      	ldrh	r3, [r3, #26]
 8016614:	f003 0304 	and.w	r3, r3, #4
 8016618:	2b00      	cmp	r3, #0
 801661a:	d13e      	bne.n	801669a <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801661c:	6878      	ldr	r0, [r7, #4]
 801661e:	f7ff ff79 	bl	8016514 <tcp_rexmit>
 8016622:	4603      	mov	r3, r0
 8016624:	2b00      	cmp	r3, #0
 8016626:	d138      	bne.n	801669a <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016634:	4293      	cmp	r3, r2
 8016636:	bf28      	it	cs
 8016638:	4613      	movcs	r3, r2
 801663a:	b29b      	uxth	r3, r3
 801663c:	0fda      	lsrs	r2, r3, #31
 801663e:	4413      	add	r3, r2
 8016640:	105b      	asrs	r3, r3, #1
 8016642:	b29a      	uxth	r2, r3
 8016644:	687b      	ldr	r3, [r7, #4]
 8016646:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801664a:	687b      	ldr	r3, [r7, #4]
 801664c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8016650:	461a      	mov	r2, r3
 8016652:	687b      	ldr	r3, [r7, #4]
 8016654:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016656:	005b      	lsls	r3, r3, #1
 8016658:	429a      	cmp	r2, r3
 801665a:	d206      	bcs.n	801666a <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016660:	005b      	lsls	r3, r3, #1
 8016662:	b29a      	uxth	r2, r3
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016674:	4619      	mov	r1, r3
 8016676:	0049      	lsls	r1, r1, #1
 8016678:	440b      	add	r3, r1
 801667a:	b29b      	uxth	r3, r3
 801667c:	4413      	add	r3, r2
 801667e:	b29a      	uxth	r2, r3
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8016686:	687b      	ldr	r3, [r7, #4]
 8016688:	8b5b      	ldrh	r3, [r3, #26]
 801668a:	f043 0304 	orr.w	r3, r3, #4
 801668e:	b29a      	uxth	r2, r3
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	2200      	movs	r2, #0
 8016698:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801669a:	bf00      	nop
 801669c:	3708      	adds	r7, #8
 801669e:	46bd      	mov	sp, r7
 80166a0:	bd80      	pop	{r7, pc}
 80166a2:	bf00      	nop
 80166a4:	0801dad8 	.word	0x0801dad8
 80166a8:	0801e190 	.word	0x0801e190
 80166ac:	0801db2c 	.word	0x0801db2c

080166b0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80166b0:	b580      	push	{r7, lr}
 80166b2:	b086      	sub	sp, #24
 80166b4:	af00      	add	r7, sp, #0
 80166b6:	60f8      	str	r0, [r7, #12]
 80166b8:	607b      	str	r3, [r7, #4]
 80166ba:	460b      	mov	r3, r1
 80166bc:	817b      	strh	r3, [r7, #10]
 80166be:	4613      	mov	r3, r2
 80166c0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80166c2:	897a      	ldrh	r2, [r7, #10]
 80166c4:	893b      	ldrh	r3, [r7, #8]
 80166c6:	4413      	add	r3, r2
 80166c8:	b29b      	uxth	r3, r3
 80166ca:	3314      	adds	r3, #20
 80166cc:	b29b      	uxth	r3, r3
 80166ce:	f44f 7220 	mov.w	r2, #640	; 0x280
 80166d2:	4619      	mov	r1, r3
 80166d4:	2022      	movs	r0, #34	; 0x22
 80166d6:	f7f9 fda1 	bl	801021c <pbuf_alloc>
 80166da:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 80166dc:	697b      	ldr	r3, [r7, #20]
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d04d      	beq.n	801677e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80166e2:	897b      	ldrh	r3, [r7, #10]
 80166e4:	3313      	adds	r3, #19
 80166e6:	697a      	ldr	r2, [r7, #20]
 80166e8:	8952      	ldrh	r2, [r2, #10]
 80166ea:	4293      	cmp	r3, r2
 80166ec:	db06      	blt.n	80166fc <tcp_output_alloc_header_common+0x4c>
 80166ee:	4b26      	ldr	r3, [pc, #152]	; (8016788 <tcp_output_alloc_header_common+0xd8>)
 80166f0:	f240 7223 	movw	r2, #1827	; 0x723
 80166f4:	4925      	ldr	r1, [pc, #148]	; (801678c <tcp_output_alloc_header_common+0xdc>)
 80166f6:	4826      	ldr	r0, [pc, #152]	; (8016790 <tcp_output_alloc_header_common+0xe0>)
 80166f8:	f003 ffe6 	bl	801a6c8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80166fc:	697b      	ldr	r3, [r7, #20]
 80166fe:	685b      	ldr	r3, [r3, #4]
 8016700:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8016702:	8c3b      	ldrh	r3, [r7, #32]
 8016704:	4618      	mov	r0, r3
 8016706:	f7f8 fd25 	bl	800f154 <lwip_htons>
 801670a:	4603      	mov	r3, r0
 801670c:	461a      	mov	r2, r3
 801670e:	693b      	ldr	r3, [r7, #16]
 8016710:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8016712:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016714:	4618      	mov	r0, r3
 8016716:	f7f8 fd1d 	bl	800f154 <lwip_htons>
 801671a:	4603      	mov	r3, r0
 801671c:	461a      	mov	r2, r3
 801671e:	693b      	ldr	r3, [r7, #16]
 8016720:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8016722:	693b      	ldr	r3, [r7, #16]
 8016724:	687a      	ldr	r2, [r7, #4]
 8016726:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8016728:	68f8      	ldr	r0, [r7, #12]
 801672a:	f7f8 fd28 	bl	800f17e <lwip_htonl>
 801672e:	4602      	mov	r2, r0
 8016730:	693b      	ldr	r3, [r7, #16]
 8016732:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8016734:	897b      	ldrh	r3, [r7, #10]
 8016736:	089b      	lsrs	r3, r3, #2
 8016738:	b29b      	uxth	r3, r3
 801673a:	3305      	adds	r3, #5
 801673c:	b29b      	uxth	r3, r3
 801673e:	031b      	lsls	r3, r3, #12
 8016740:	b29a      	uxth	r2, r3
 8016742:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8016746:	b29b      	uxth	r3, r3
 8016748:	4313      	orrs	r3, r2
 801674a:	b29b      	uxth	r3, r3
 801674c:	4618      	mov	r0, r3
 801674e:	f7f8 fd01 	bl	800f154 <lwip_htons>
 8016752:	4603      	mov	r3, r0
 8016754:	461a      	mov	r2, r3
 8016756:	693b      	ldr	r3, [r7, #16]
 8016758:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801675a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801675c:	4618      	mov	r0, r3
 801675e:	f7f8 fcf9 	bl	800f154 <lwip_htons>
 8016762:	4603      	mov	r3, r0
 8016764:	461a      	mov	r2, r3
 8016766:	693b      	ldr	r3, [r7, #16]
 8016768:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801676a:	693b      	ldr	r3, [r7, #16]
 801676c:	2200      	movs	r2, #0
 801676e:	741a      	strb	r2, [r3, #16]
 8016770:	2200      	movs	r2, #0
 8016772:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8016774:	693b      	ldr	r3, [r7, #16]
 8016776:	2200      	movs	r2, #0
 8016778:	749a      	strb	r2, [r3, #18]
 801677a:	2200      	movs	r2, #0
 801677c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801677e:	697b      	ldr	r3, [r7, #20]
}
 8016780:	4618      	mov	r0, r3
 8016782:	3718      	adds	r7, #24
 8016784:	46bd      	mov	sp, r7
 8016786:	bd80      	pop	{r7, pc}
 8016788:	0801dad8 	.word	0x0801dad8
 801678c:	0801e1b0 	.word	0x0801e1b0
 8016790:	0801db2c 	.word	0x0801db2c

08016794 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8016794:	b5b0      	push	{r4, r5, r7, lr}
 8016796:	b08a      	sub	sp, #40	; 0x28
 8016798:	af04      	add	r7, sp, #16
 801679a:	60f8      	str	r0, [r7, #12]
 801679c:	607b      	str	r3, [r7, #4]
 801679e:	460b      	mov	r3, r1
 80167a0:	817b      	strh	r3, [r7, #10]
 80167a2:	4613      	mov	r3, r2
 80167a4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	2b00      	cmp	r3, #0
 80167aa:	d106      	bne.n	80167ba <tcp_output_alloc_header+0x26>
 80167ac:	4b15      	ldr	r3, [pc, #84]	; (8016804 <tcp_output_alloc_header+0x70>)
 80167ae:	f240 7242 	movw	r2, #1858	; 0x742
 80167b2:	4915      	ldr	r1, [pc, #84]	; (8016808 <tcp_output_alloc_header+0x74>)
 80167b4:	4815      	ldr	r0, [pc, #84]	; (801680c <tcp_output_alloc_header+0x78>)
 80167b6:	f003 ff87 	bl	801a6c8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	8adb      	ldrh	r3, [r3, #22]
 80167c2:	68fa      	ldr	r2, [r7, #12]
 80167c4:	8b12      	ldrh	r2, [r2, #24]
 80167c6:	68f9      	ldr	r1, [r7, #12]
 80167c8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80167ca:	893d      	ldrh	r5, [r7, #8]
 80167cc:	897c      	ldrh	r4, [r7, #10]
 80167ce:	9103      	str	r1, [sp, #12]
 80167d0:	2110      	movs	r1, #16
 80167d2:	9102      	str	r1, [sp, #8]
 80167d4:	9201      	str	r2, [sp, #4]
 80167d6:	9300      	str	r3, [sp, #0]
 80167d8:	687b      	ldr	r3, [r7, #4]
 80167da:	462a      	mov	r2, r5
 80167dc:	4621      	mov	r1, r4
 80167de:	f7ff ff67 	bl	80166b0 <tcp_output_alloc_header_common>
 80167e2:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 80167e4:	697b      	ldr	r3, [r7, #20]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d006      	beq.n	80167f8 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80167ea:	68fb      	ldr	r3, [r7, #12]
 80167ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167ee:	68fa      	ldr	r2, [r7, #12]
 80167f0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80167f2:	441a      	add	r2, r3
 80167f4:	68fb      	ldr	r3, [r7, #12]
 80167f6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80167f8:	697b      	ldr	r3, [r7, #20]
}
 80167fa:	4618      	mov	r0, r3
 80167fc:	3718      	adds	r7, #24
 80167fe:	46bd      	mov	sp, r7
 8016800:	bdb0      	pop	{r4, r5, r7, pc}
 8016802:	bf00      	nop
 8016804:	0801dad8 	.word	0x0801dad8
 8016808:	0801e1e0 	.word	0x0801e1e0
 801680c:	0801db2c 	.word	0x0801db2c

08016810 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8016810:	b580      	push	{r7, lr}
 8016812:	b088      	sub	sp, #32
 8016814:	af00      	add	r7, sp, #0
 8016816:	60f8      	str	r0, [r7, #12]
 8016818:	60b9      	str	r1, [r7, #8]
 801681a:	4611      	mov	r1, r2
 801681c:	461a      	mov	r2, r3
 801681e:	460b      	mov	r3, r1
 8016820:	71fb      	strb	r3, [r7, #7]
 8016822:	4613      	mov	r3, r2
 8016824:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8016826:	2300      	movs	r3, #0
 8016828:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801682a:	68bb      	ldr	r3, [r7, #8]
 801682c:	2b00      	cmp	r3, #0
 801682e:	d106      	bne.n	801683e <tcp_output_fill_options+0x2e>
 8016830:	4b13      	ldr	r3, [pc, #76]	; (8016880 <tcp_output_fill_options+0x70>)
 8016832:	f240 7256 	movw	r2, #1878	; 0x756
 8016836:	4913      	ldr	r1, [pc, #76]	; (8016884 <tcp_output_fill_options+0x74>)
 8016838:	4813      	ldr	r0, [pc, #76]	; (8016888 <tcp_output_fill_options+0x78>)
 801683a:	f003 ff45 	bl	801a6c8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801683e:	68bb      	ldr	r3, [r7, #8]
 8016840:	685b      	ldr	r3, [r3, #4]
 8016842:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8016844:	69bb      	ldr	r3, [r7, #24]
 8016846:	3314      	adds	r3, #20
 8016848:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801684a:	69bb      	ldr	r3, [r7, #24]
 801684c:	f103 0214 	add.w	r2, r3, #20
 8016850:	8bfb      	ldrh	r3, [r7, #30]
 8016852:	009b      	lsls	r3, r3, #2
 8016854:	4619      	mov	r1, r3
 8016856:	79fb      	ldrb	r3, [r7, #7]
 8016858:	009b      	lsls	r3, r3, #2
 801685a:	f003 0304 	and.w	r3, r3, #4
 801685e:	440b      	add	r3, r1
 8016860:	4413      	add	r3, r2
 8016862:	697a      	ldr	r2, [r7, #20]
 8016864:	429a      	cmp	r2, r3
 8016866:	d006      	beq.n	8016876 <tcp_output_fill_options+0x66>
 8016868:	4b05      	ldr	r3, [pc, #20]	; (8016880 <tcp_output_fill_options+0x70>)
 801686a:	f240 7275 	movw	r2, #1909	; 0x775
 801686e:	4907      	ldr	r1, [pc, #28]	; (801688c <tcp_output_fill_options+0x7c>)
 8016870:	4805      	ldr	r0, [pc, #20]	; (8016888 <tcp_output_fill_options+0x78>)
 8016872:	f003 ff29 	bl	801a6c8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8016876:	bf00      	nop
 8016878:	3720      	adds	r7, #32
 801687a:	46bd      	mov	sp, r7
 801687c:	bd80      	pop	{r7, pc}
 801687e:	bf00      	nop
 8016880:	0801dad8 	.word	0x0801dad8
 8016884:	0801e208 	.word	0x0801e208
 8016888:	0801db2c 	.word	0x0801db2c
 801688c:	0801e100 	.word	0x0801e100

08016890 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8016890:	b580      	push	{r7, lr}
 8016892:	b08a      	sub	sp, #40	; 0x28
 8016894:	af04      	add	r7, sp, #16
 8016896:	60f8      	str	r0, [r7, #12]
 8016898:	60b9      	str	r1, [r7, #8]
 801689a:	607a      	str	r2, [r7, #4]
 801689c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801689e:	68bb      	ldr	r3, [r7, #8]
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d106      	bne.n	80168b2 <tcp_output_control_segment+0x22>
 80168a4:	4b1c      	ldr	r3, [pc, #112]	; (8016918 <tcp_output_control_segment+0x88>)
 80168a6:	f240 7287 	movw	r2, #1927	; 0x787
 80168aa:	491c      	ldr	r1, [pc, #112]	; (801691c <tcp_output_control_segment+0x8c>)
 80168ac:	481c      	ldr	r0, [pc, #112]	; (8016920 <tcp_output_control_segment+0x90>)
 80168ae:	f003 ff0b 	bl	801a6c8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80168b2:	683a      	ldr	r2, [r7, #0]
 80168b4:	6879      	ldr	r1, [r7, #4]
 80168b6:	68f8      	ldr	r0, [r7, #12]
 80168b8:	f7fe fae8 	bl	8014e8c <tcp_route>
 80168bc:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80168be:	693b      	ldr	r3, [r7, #16]
 80168c0:	2b00      	cmp	r3, #0
 80168c2:	d102      	bne.n	80168ca <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80168c4:	23fc      	movs	r3, #252	; 0xfc
 80168c6:	75fb      	strb	r3, [r7, #23]
 80168c8:	e01c      	b.n	8016904 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80168ca:	68fb      	ldr	r3, [r7, #12]
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d006      	beq.n	80168de <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80168d0:	68fb      	ldr	r3, [r7, #12]
 80168d2:	7adb      	ldrb	r3, [r3, #11]
 80168d4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80168d6:	68fb      	ldr	r3, [r7, #12]
 80168d8:	7a9b      	ldrb	r3, [r3, #10]
 80168da:	757b      	strb	r3, [r7, #21]
 80168dc:	e003      	b.n	80168e6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80168de:	23ff      	movs	r3, #255	; 0xff
 80168e0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80168e2:	2300      	movs	r3, #0
 80168e4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80168e6:	7dba      	ldrb	r2, [r7, #22]
 80168e8:	693b      	ldr	r3, [r7, #16]
 80168ea:	9302      	str	r3, [sp, #8]
 80168ec:	2306      	movs	r3, #6
 80168ee:	9301      	str	r3, [sp, #4]
 80168f0:	7d7b      	ldrb	r3, [r7, #21]
 80168f2:	9300      	str	r3, [sp, #0]
 80168f4:	4613      	mov	r3, r2
 80168f6:	683a      	ldr	r2, [r7, #0]
 80168f8:	6879      	ldr	r1, [r7, #4]
 80168fa:	68b8      	ldr	r0, [r7, #8]
 80168fc:	f002 fad0 	bl	8018ea0 <ip4_output_if>
 8016900:	4603      	mov	r3, r0
 8016902:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8016904:	68b8      	ldr	r0, [r7, #8]
 8016906:	f7f9 ff6d 	bl	80107e4 <pbuf_free>
  return err;
 801690a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801690e:	4618      	mov	r0, r3
 8016910:	3718      	adds	r7, #24
 8016912:	46bd      	mov	sp, r7
 8016914:	bd80      	pop	{r7, pc}
 8016916:	bf00      	nop
 8016918:	0801dad8 	.word	0x0801dad8
 801691c:	0801e230 	.word	0x0801e230
 8016920:	0801db2c 	.word	0x0801db2c

08016924 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8016924:	b590      	push	{r4, r7, lr}
 8016926:	b08b      	sub	sp, #44	; 0x2c
 8016928:	af04      	add	r7, sp, #16
 801692a:	60f8      	str	r0, [r7, #12]
 801692c:	60b9      	str	r1, [r7, #8]
 801692e:	607a      	str	r2, [r7, #4]
 8016930:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8016932:	683b      	ldr	r3, [r7, #0]
 8016934:	2b00      	cmp	r3, #0
 8016936:	d106      	bne.n	8016946 <tcp_rst+0x22>
 8016938:	4b1f      	ldr	r3, [pc, #124]	; (80169b8 <tcp_rst+0x94>)
 801693a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801693e:	491f      	ldr	r1, [pc, #124]	; (80169bc <tcp_rst+0x98>)
 8016940:	481f      	ldr	r0, [pc, #124]	; (80169c0 <tcp_rst+0x9c>)
 8016942:	f003 fec1 	bl	801a6c8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8016946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016948:	2b00      	cmp	r3, #0
 801694a:	d106      	bne.n	801695a <tcp_rst+0x36>
 801694c:	4b1a      	ldr	r3, [pc, #104]	; (80169b8 <tcp_rst+0x94>)
 801694e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8016952:	491c      	ldr	r1, [pc, #112]	; (80169c4 <tcp_rst+0xa0>)
 8016954:	481a      	ldr	r0, [pc, #104]	; (80169c0 <tcp_rst+0x9c>)
 8016956:	f003 feb7 	bl	801a6c8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801695a:	2300      	movs	r3, #0
 801695c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801695e:	f246 0308 	movw	r3, #24584	; 0x6008
 8016962:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8016964:	7dfb      	ldrb	r3, [r7, #23]
 8016966:	b29c      	uxth	r4, r3
 8016968:	68b8      	ldr	r0, [r7, #8]
 801696a:	f7f8 fc08 	bl	800f17e <lwip_htonl>
 801696e:	4602      	mov	r2, r0
 8016970:	8abb      	ldrh	r3, [r7, #20]
 8016972:	9303      	str	r3, [sp, #12]
 8016974:	2314      	movs	r3, #20
 8016976:	9302      	str	r3, [sp, #8]
 8016978:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801697a:	9301      	str	r3, [sp, #4]
 801697c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801697e:	9300      	str	r3, [sp, #0]
 8016980:	4613      	mov	r3, r2
 8016982:	2200      	movs	r2, #0
 8016984:	4621      	mov	r1, r4
 8016986:	6878      	ldr	r0, [r7, #4]
 8016988:	f7ff fe92 	bl	80166b0 <tcp_output_alloc_header_common>
 801698c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801698e:	693b      	ldr	r3, [r7, #16]
 8016990:	2b00      	cmp	r3, #0
 8016992:	d00c      	beq.n	80169ae <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016994:	7dfb      	ldrb	r3, [r7, #23]
 8016996:	2200      	movs	r2, #0
 8016998:	6939      	ldr	r1, [r7, #16]
 801699a:	68f8      	ldr	r0, [r7, #12]
 801699c:	f7ff ff38 	bl	8016810 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80169a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169a2:	683a      	ldr	r2, [r7, #0]
 80169a4:	6939      	ldr	r1, [r7, #16]
 80169a6:	68f8      	ldr	r0, [r7, #12]
 80169a8:	f7ff ff72 	bl	8016890 <tcp_output_control_segment>
 80169ac:	e000      	b.n	80169b0 <tcp_rst+0x8c>
    return;
 80169ae:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80169b0:	371c      	adds	r7, #28
 80169b2:	46bd      	mov	sp, r7
 80169b4:	bd90      	pop	{r4, r7, pc}
 80169b6:	bf00      	nop
 80169b8:	0801dad8 	.word	0x0801dad8
 80169bc:	0801e25c 	.word	0x0801e25c
 80169c0:	0801db2c 	.word	0x0801db2c
 80169c4:	0801e278 	.word	0x0801e278

080169c8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80169c8:	b590      	push	{r4, r7, lr}
 80169ca:	b087      	sub	sp, #28
 80169cc:	af00      	add	r7, sp, #0
 80169ce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80169d0:	2300      	movs	r3, #0
 80169d2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80169d4:	2300      	movs	r3, #0
 80169d6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80169d8:	687b      	ldr	r3, [r7, #4]
 80169da:	2b00      	cmp	r3, #0
 80169dc:	d106      	bne.n	80169ec <tcp_send_empty_ack+0x24>
 80169de:	4b28      	ldr	r3, [pc, #160]	; (8016a80 <tcp_send_empty_ack+0xb8>)
 80169e0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80169e4:	4927      	ldr	r1, [pc, #156]	; (8016a84 <tcp_send_empty_ack+0xbc>)
 80169e6:	4828      	ldr	r0, [pc, #160]	; (8016a88 <tcp_send_empty_ack+0xc0>)
 80169e8:	f003 fe6e 	bl	801a6c8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80169ec:	7dfb      	ldrb	r3, [r7, #23]
 80169ee:	009b      	lsls	r3, r3, #2
 80169f0:	b2db      	uxtb	r3, r3
 80169f2:	f003 0304 	and.w	r3, r3, #4
 80169f6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80169f8:	7d7b      	ldrb	r3, [r7, #21]
 80169fa:	b29c      	uxth	r4, r3
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016a00:	4618      	mov	r0, r3
 8016a02:	f7f8 fbbc 	bl	800f17e <lwip_htonl>
 8016a06:	4603      	mov	r3, r0
 8016a08:	2200      	movs	r2, #0
 8016a0a:	4621      	mov	r1, r4
 8016a0c:	6878      	ldr	r0, [r7, #4]
 8016a0e:	f7ff fec1 	bl	8016794 <tcp_output_alloc_header>
 8016a12:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016a14:	693b      	ldr	r3, [r7, #16]
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d109      	bne.n	8016a2e <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	8b5b      	ldrh	r3, [r3, #26]
 8016a1e:	f043 0303 	orr.w	r3, r3, #3
 8016a22:	b29a      	uxth	r2, r3
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8016a28:	f06f 0301 	mvn.w	r3, #1
 8016a2c:	e023      	b.n	8016a76 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8016a2e:	7dbb      	ldrb	r3, [r7, #22]
 8016a30:	7dfa      	ldrb	r2, [r7, #23]
 8016a32:	6939      	ldr	r1, [r7, #16]
 8016a34:	6878      	ldr	r0, [r7, #4]
 8016a36:	f7ff feeb 	bl	8016810 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016a3a:	687a      	ldr	r2, [r7, #4]
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	3304      	adds	r3, #4
 8016a40:	6939      	ldr	r1, [r7, #16]
 8016a42:	6878      	ldr	r0, [r7, #4]
 8016a44:	f7ff ff24 	bl	8016890 <tcp_output_control_segment>
 8016a48:	4603      	mov	r3, r0
 8016a4a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8016a4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016a50:	2b00      	cmp	r3, #0
 8016a52:	d007      	beq.n	8016a64 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	8b5b      	ldrh	r3, [r3, #26]
 8016a58:	f043 0303 	orr.w	r3, r3, #3
 8016a5c:	b29a      	uxth	r2, r3
 8016a5e:	687b      	ldr	r3, [r7, #4]
 8016a60:	835a      	strh	r2, [r3, #26]
 8016a62:	e006      	b.n	8016a72 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016a64:	687b      	ldr	r3, [r7, #4]
 8016a66:	8b5b      	ldrh	r3, [r3, #26]
 8016a68:	f023 0303 	bic.w	r3, r3, #3
 8016a6c:	b29a      	uxth	r2, r3
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8016a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016a76:	4618      	mov	r0, r3
 8016a78:	371c      	adds	r7, #28
 8016a7a:	46bd      	mov	sp, r7
 8016a7c:	bd90      	pop	{r4, r7, pc}
 8016a7e:	bf00      	nop
 8016a80:	0801dad8 	.word	0x0801dad8
 8016a84:	0801e294 	.word	0x0801e294
 8016a88:	0801db2c 	.word	0x0801db2c

08016a8c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8016a8c:	b590      	push	{r4, r7, lr}
 8016a8e:	b087      	sub	sp, #28
 8016a90:	af00      	add	r7, sp, #0
 8016a92:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016a94:	2300      	movs	r3, #0
 8016a96:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d106      	bne.n	8016aac <tcp_keepalive+0x20>
 8016a9e:	4b18      	ldr	r3, [pc, #96]	; (8016b00 <tcp_keepalive+0x74>)
 8016aa0:	f640 0224 	movw	r2, #2084	; 0x824
 8016aa4:	4917      	ldr	r1, [pc, #92]	; (8016b04 <tcp_keepalive+0x78>)
 8016aa6:	4818      	ldr	r0, [pc, #96]	; (8016b08 <tcp_keepalive+0x7c>)
 8016aa8:	f003 fe0e 	bl	801a6c8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8016aac:	7dfb      	ldrb	r3, [r7, #23]
 8016aae:	b29c      	uxth	r4, r3
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016ab4:	3b01      	subs	r3, #1
 8016ab6:	4618      	mov	r0, r3
 8016ab8:	f7f8 fb61 	bl	800f17e <lwip_htonl>
 8016abc:	4603      	mov	r3, r0
 8016abe:	2200      	movs	r2, #0
 8016ac0:	4621      	mov	r1, r4
 8016ac2:	6878      	ldr	r0, [r7, #4]
 8016ac4:	f7ff fe66 	bl	8016794 <tcp_output_alloc_header>
 8016ac8:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016aca:	693b      	ldr	r3, [r7, #16]
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d102      	bne.n	8016ad6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8016ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8016ad4:	e010      	b.n	8016af8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016ad6:	7dfb      	ldrb	r3, [r7, #23]
 8016ad8:	2200      	movs	r2, #0
 8016ada:	6939      	ldr	r1, [r7, #16]
 8016adc:	6878      	ldr	r0, [r7, #4]
 8016ade:	f7ff fe97 	bl	8016810 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016ae2:	687a      	ldr	r2, [r7, #4]
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	3304      	adds	r3, #4
 8016ae8:	6939      	ldr	r1, [r7, #16]
 8016aea:	6878      	ldr	r0, [r7, #4]
 8016aec:	f7ff fed0 	bl	8016890 <tcp_output_control_segment>
 8016af0:	4603      	mov	r3, r0
 8016af2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016af4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016af8:	4618      	mov	r0, r3
 8016afa:	371c      	adds	r7, #28
 8016afc:	46bd      	mov	sp, r7
 8016afe:	bd90      	pop	{r4, r7, pc}
 8016b00:	0801dad8 	.word	0x0801dad8
 8016b04:	0801e2b4 	.word	0x0801e2b4
 8016b08:	0801db2c 	.word	0x0801db2c

08016b0c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8016b0c:	b590      	push	{r4, r7, lr}
 8016b0e:	b08b      	sub	sp, #44	; 0x2c
 8016b10:	af00      	add	r7, sp, #0
 8016b12:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016b14:	2300      	movs	r3, #0
 8016b16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d106      	bne.n	8016b2e <tcp_zero_window_probe+0x22>
 8016b20:	4b4c      	ldr	r3, [pc, #304]	; (8016c54 <tcp_zero_window_probe+0x148>)
 8016b22:	f640 024f 	movw	r2, #2127	; 0x84f
 8016b26:	494c      	ldr	r1, [pc, #304]	; (8016c58 <tcp_zero_window_probe+0x14c>)
 8016b28:	484c      	ldr	r0, [pc, #304]	; (8016c5c <tcp_zero_window_probe+0x150>)
 8016b2a:	f003 fdcd 	bl	801a6c8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b32:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8016b34:	6a3b      	ldr	r3, [r7, #32]
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d101      	bne.n	8016b3e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8016b3a:	2300      	movs	r3, #0
 8016b3c:	e086      	b.n	8016c4c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016b44:	2bff      	cmp	r3, #255	; 0xff
 8016b46:	d007      	beq.n	8016b58 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8016b4e:	3301      	adds	r3, #1
 8016b50:	b2da      	uxtb	r2, r3
 8016b52:	687b      	ldr	r3, [r7, #4]
 8016b54:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8016b58:	6a3b      	ldr	r3, [r7, #32]
 8016b5a:	68db      	ldr	r3, [r3, #12]
 8016b5c:	899b      	ldrh	r3, [r3, #12]
 8016b5e:	b29b      	uxth	r3, r3
 8016b60:	4618      	mov	r0, r3
 8016b62:	f7f8 faf7 	bl	800f154 <lwip_htons>
 8016b66:	4603      	mov	r3, r0
 8016b68:	b2db      	uxtb	r3, r3
 8016b6a:	f003 0301 	and.w	r3, r3, #1
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	d005      	beq.n	8016b7e <tcp_zero_window_probe+0x72>
 8016b72:	6a3b      	ldr	r3, [r7, #32]
 8016b74:	891b      	ldrh	r3, [r3, #8]
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d101      	bne.n	8016b7e <tcp_zero_window_probe+0x72>
 8016b7a:	2301      	movs	r3, #1
 8016b7c:	e000      	b.n	8016b80 <tcp_zero_window_probe+0x74>
 8016b7e:	2300      	movs	r3, #0
 8016b80:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8016b82:	7ffb      	ldrb	r3, [r7, #31]
 8016b84:	2b00      	cmp	r3, #0
 8016b86:	bf0c      	ite	eq
 8016b88:	2301      	moveq	r3, #1
 8016b8a:	2300      	movne	r3, #0
 8016b8c:	b2db      	uxtb	r3, r3
 8016b8e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8016b90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016b94:	b299      	uxth	r1, r3
 8016b96:	6a3b      	ldr	r3, [r7, #32]
 8016b98:	68db      	ldr	r3, [r3, #12]
 8016b9a:	685b      	ldr	r3, [r3, #4]
 8016b9c:	8bba      	ldrh	r2, [r7, #28]
 8016b9e:	6878      	ldr	r0, [r7, #4]
 8016ba0:	f7ff fdf8 	bl	8016794 <tcp_output_alloc_header>
 8016ba4:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8016ba6:	69bb      	ldr	r3, [r7, #24]
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d102      	bne.n	8016bb2 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8016bac:	f04f 33ff 	mov.w	r3, #4294967295
 8016bb0:	e04c      	b.n	8016c4c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8016bb2:	69bb      	ldr	r3, [r7, #24]
 8016bb4:	685b      	ldr	r3, [r3, #4]
 8016bb6:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8016bb8:	7ffb      	ldrb	r3, [r7, #31]
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d011      	beq.n	8016be2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8016bbe:	697b      	ldr	r3, [r7, #20]
 8016bc0:	899b      	ldrh	r3, [r3, #12]
 8016bc2:	b29b      	uxth	r3, r3
 8016bc4:	b21b      	sxth	r3, r3
 8016bc6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016bca:	b21c      	sxth	r4, r3
 8016bcc:	2011      	movs	r0, #17
 8016bce:	f7f8 fac1 	bl	800f154 <lwip_htons>
 8016bd2:	4603      	mov	r3, r0
 8016bd4:	b21b      	sxth	r3, r3
 8016bd6:	4323      	orrs	r3, r4
 8016bd8:	b21b      	sxth	r3, r3
 8016bda:	b29a      	uxth	r2, r3
 8016bdc:	697b      	ldr	r3, [r7, #20]
 8016bde:	819a      	strh	r2, [r3, #12]
 8016be0:	e010      	b.n	8016c04 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8016be2:	69bb      	ldr	r3, [r7, #24]
 8016be4:	685b      	ldr	r3, [r3, #4]
 8016be6:	3314      	adds	r3, #20
 8016be8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8016bea:	6a3b      	ldr	r3, [r7, #32]
 8016bec:	6858      	ldr	r0, [r3, #4]
 8016bee:	6a3b      	ldr	r3, [r7, #32]
 8016bf0:	685b      	ldr	r3, [r3, #4]
 8016bf2:	891a      	ldrh	r2, [r3, #8]
 8016bf4:	6a3b      	ldr	r3, [r7, #32]
 8016bf6:	891b      	ldrh	r3, [r3, #8]
 8016bf8:	1ad3      	subs	r3, r2, r3
 8016bfa:	b29b      	uxth	r3, r3
 8016bfc:	2201      	movs	r2, #1
 8016bfe:	6939      	ldr	r1, [r7, #16]
 8016c00:	f7f9 fff6 	bl	8010bf0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8016c04:	6a3b      	ldr	r3, [r7, #32]
 8016c06:	68db      	ldr	r3, [r3, #12]
 8016c08:	685b      	ldr	r3, [r3, #4]
 8016c0a:	4618      	mov	r0, r3
 8016c0c:	f7f8 fab7 	bl	800f17e <lwip_htonl>
 8016c10:	4603      	mov	r3, r0
 8016c12:	3301      	adds	r3, #1
 8016c14:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	1ad3      	subs	r3, r2, r3
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	da02      	bge.n	8016c28 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	68fa      	ldr	r2, [r7, #12]
 8016c26:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016c28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016c2c:	2200      	movs	r2, #0
 8016c2e:	69b9      	ldr	r1, [r7, #24]
 8016c30:	6878      	ldr	r0, [r7, #4]
 8016c32:	f7ff fded 	bl	8016810 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016c36:	687a      	ldr	r2, [r7, #4]
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	3304      	adds	r3, #4
 8016c3c:	69b9      	ldr	r1, [r7, #24]
 8016c3e:	6878      	ldr	r0, [r7, #4]
 8016c40:	f7ff fe26 	bl	8016890 <tcp_output_control_segment>
 8016c44:	4603      	mov	r3, r0
 8016c46:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016c48:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8016c4c:	4618      	mov	r0, r3
 8016c4e:	372c      	adds	r7, #44	; 0x2c
 8016c50:	46bd      	mov	sp, r7
 8016c52:	bd90      	pop	{r4, r7, pc}
 8016c54:	0801dad8 	.word	0x0801dad8
 8016c58:	0801e2d0 	.word	0x0801e2d0
 8016c5c:	0801db2c 	.word	0x0801db2c

08016c60 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8016c60:	b580      	push	{r7, lr}
 8016c62:	b082      	sub	sp, #8
 8016c64:	af00      	add	r7, sp, #0
 8016c66:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8016c68:	f7fa f8b0 	bl	8010dcc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8016c6c:	4b0a      	ldr	r3, [pc, #40]	; (8016c98 <tcpip_tcp_timer+0x38>)
 8016c6e:	681b      	ldr	r3, [r3, #0]
 8016c70:	2b00      	cmp	r3, #0
 8016c72:	d103      	bne.n	8016c7c <tcpip_tcp_timer+0x1c>
 8016c74:	4b09      	ldr	r3, [pc, #36]	; (8016c9c <tcpip_tcp_timer+0x3c>)
 8016c76:	681b      	ldr	r3, [r3, #0]
 8016c78:	2b00      	cmp	r3, #0
 8016c7a:	d005      	beq.n	8016c88 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016c7c:	2200      	movs	r2, #0
 8016c7e:	4908      	ldr	r1, [pc, #32]	; (8016ca0 <tcpip_tcp_timer+0x40>)
 8016c80:	20fa      	movs	r0, #250	; 0xfa
 8016c82:	f000 f8f3 	bl	8016e6c <sys_timeout>
 8016c86:	e003      	b.n	8016c90 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8016c88:	4b06      	ldr	r3, [pc, #24]	; (8016ca4 <tcpip_tcp_timer+0x44>)
 8016c8a:	2200      	movs	r2, #0
 8016c8c:	601a      	str	r2, [r3, #0]
  }
}
 8016c8e:	bf00      	nop
 8016c90:	bf00      	nop
 8016c92:	3708      	adds	r7, #8
 8016c94:	46bd      	mov	sp, r7
 8016c96:	bd80      	pop	{r7, pc}
 8016c98:	2000dd44 	.word	0x2000dd44
 8016c9c:	2000dd54 	.word	0x2000dd54
 8016ca0:	08016c61 	.word	0x08016c61
 8016ca4:	200069d0 	.word	0x200069d0

08016ca8 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8016ca8:	b580      	push	{r7, lr}
 8016caa:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8016cac:	4b0a      	ldr	r3, [pc, #40]	; (8016cd8 <tcp_timer_needed+0x30>)
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d10f      	bne.n	8016cd4 <tcp_timer_needed+0x2c>
 8016cb4:	4b09      	ldr	r3, [pc, #36]	; (8016cdc <tcp_timer_needed+0x34>)
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d103      	bne.n	8016cc4 <tcp_timer_needed+0x1c>
 8016cbc:	4b08      	ldr	r3, [pc, #32]	; (8016ce0 <tcp_timer_needed+0x38>)
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	2b00      	cmp	r3, #0
 8016cc2:	d007      	beq.n	8016cd4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8016cc4:	4b04      	ldr	r3, [pc, #16]	; (8016cd8 <tcp_timer_needed+0x30>)
 8016cc6:	2201      	movs	r2, #1
 8016cc8:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8016cca:	2200      	movs	r2, #0
 8016ccc:	4905      	ldr	r1, [pc, #20]	; (8016ce4 <tcp_timer_needed+0x3c>)
 8016cce:	20fa      	movs	r0, #250	; 0xfa
 8016cd0:	f000 f8cc 	bl	8016e6c <sys_timeout>
  }
}
 8016cd4:	bf00      	nop
 8016cd6:	bd80      	pop	{r7, pc}
 8016cd8:	200069d0 	.word	0x200069d0
 8016cdc:	2000dd44 	.word	0x2000dd44
 8016ce0:	2000dd54 	.word	0x2000dd54
 8016ce4:	08016c61 	.word	0x08016c61

08016ce8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8016ce8:	b580      	push	{r7, lr}
 8016cea:	b086      	sub	sp, #24
 8016cec:	af00      	add	r7, sp, #0
 8016cee:	60f8      	str	r0, [r7, #12]
 8016cf0:	60b9      	str	r1, [r7, #8]
 8016cf2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8016cf4:	200a      	movs	r0, #10
 8016cf6:	f7f8 fee3 	bl	800fac0 <memp_malloc>
 8016cfa:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8016cfc:	693b      	ldr	r3, [r7, #16]
 8016cfe:	2b00      	cmp	r3, #0
 8016d00:	d109      	bne.n	8016d16 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8016d02:	693b      	ldr	r3, [r7, #16]
 8016d04:	2b00      	cmp	r3, #0
 8016d06:	d151      	bne.n	8016dac <sys_timeout_abs+0xc4>
 8016d08:	4b2a      	ldr	r3, [pc, #168]	; (8016db4 <sys_timeout_abs+0xcc>)
 8016d0a:	22be      	movs	r2, #190	; 0xbe
 8016d0c:	492a      	ldr	r1, [pc, #168]	; (8016db8 <sys_timeout_abs+0xd0>)
 8016d0e:	482b      	ldr	r0, [pc, #172]	; (8016dbc <sys_timeout_abs+0xd4>)
 8016d10:	f003 fcda 	bl	801a6c8 <iprintf>
    return;
 8016d14:	e04a      	b.n	8016dac <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8016d16:	693b      	ldr	r3, [r7, #16]
 8016d18:	2200      	movs	r2, #0
 8016d1a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8016d1c:	693b      	ldr	r3, [r7, #16]
 8016d1e:	68ba      	ldr	r2, [r7, #8]
 8016d20:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8016d22:	693b      	ldr	r3, [r7, #16]
 8016d24:	687a      	ldr	r2, [r7, #4]
 8016d26:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8016d28:	693b      	ldr	r3, [r7, #16]
 8016d2a:	68fa      	ldr	r2, [r7, #12]
 8016d2c:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8016d2e:	4b24      	ldr	r3, [pc, #144]	; (8016dc0 <sys_timeout_abs+0xd8>)
 8016d30:	681b      	ldr	r3, [r3, #0]
 8016d32:	2b00      	cmp	r3, #0
 8016d34:	d103      	bne.n	8016d3e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8016d36:	4a22      	ldr	r2, [pc, #136]	; (8016dc0 <sys_timeout_abs+0xd8>)
 8016d38:	693b      	ldr	r3, [r7, #16]
 8016d3a:	6013      	str	r3, [r2, #0]
    return;
 8016d3c:	e037      	b.n	8016dae <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8016d3e:	693b      	ldr	r3, [r7, #16]
 8016d40:	685a      	ldr	r2, [r3, #4]
 8016d42:	4b1f      	ldr	r3, [pc, #124]	; (8016dc0 <sys_timeout_abs+0xd8>)
 8016d44:	681b      	ldr	r3, [r3, #0]
 8016d46:	685b      	ldr	r3, [r3, #4]
 8016d48:	1ad3      	subs	r3, r2, r3
 8016d4a:	0fdb      	lsrs	r3, r3, #31
 8016d4c:	f003 0301 	and.w	r3, r3, #1
 8016d50:	b2db      	uxtb	r3, r3
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d007      	beq.n	8016d66 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8016d56:	4b1a      	ldr	r3, [pc, #104]	; (8016dc0 <sys_timeout_abs+0xd8>)
 8016d58:	681a      	ldr	r2, [r3, #0]
 8016d5a:	693b      	ldr	r3, [r7, #16]
 8016d5c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8016d5e:	4a18      	ldr	r2, [pc, #96]	; (8016dc0 <sys_timeout_abs+0xd8>)
 8016d60:	693b      	ldr	r3, [r7, #16]
 8016d62:	6013      	str	r3, [r2, #0]
 8016d64:	e023      	b.n	8016dae <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8016d66:	4b16      	ldr	r3, [pc, #88]	; (8016dc0 <sys_timeout_abs+0xd8>)
 8016d68:	681b      	ldr	r3, [r3, #0]
 8016d6a:	617b      	str	r3, [r7, #20]
 8016d6c:	e01a      	b.n	8016da4 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8016d6e:	697b      	ldr	r3, [r7, #20]
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	d00b      	beq.n	8016d8e <sys_timeout_abs+0xa6>
 8016d76:	693b      	ldr	r3, [r7, #16]
 8016d78:	685a      	ldr	r2, [r3, #4]
 8016d7a:	697b      	ldr	r3, [r7, #20]
 8016d7c:	681b      	ldr	r3, [r3, #0]
 8016d7e:	685b      	ldr	r3, [r3, #4]
 8016d80:	1ad3      	subs	r3, r2, r3
 8016d82:	0fdb      	lsrs	r3, r3, #31
 8016d84:	f003 0301 	and.w	r3, r3, #1
 8016d88:	b2db      	uxtb	r3, r3
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d007      	beq.n	8016d9e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8016d8e:	697b      	ldr	r3, [r7, #20]
 8016d90:	681a      	ldr	r2, [r3, #0]
 8016d92:	693b      	ldr	r3, [r7, #16]
 8016d94:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8016d96:	697b      	ldr	r3, [r7, #20]
 8016d98:	693a      	ldr	r2, [r7, #16]
 8016d9a:	601a      	str	r2, [r3, #0]
        break;
 8016d9c:	e007      	b.n	8016dae <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8016d9e:	697b      	ldr	r3, [r7, #20]
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	617b      	str	r3, [r7, #20]
 8016da4:	697b      	ldr	r3, [r7, #20]
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	d1e1      	bne.n	8016d6e <sys_timeout_abs+0x86>
 8016daa:	e000      	b.n	8016dae <sys_timeout_abs+0xc6>
    return;
 8016dac:	bf00      	nop
      }
    }
  }
}
 8016dae:	3718      	adds	r7, #24
 8016db0:	46bd      	mov	sp, r7
 8016db2:	bd80      	pop	{r7, pc}
 8016db4:	0801e2f4 	.word	0x0801e2f4
 8016db8:	0801e328 	.word	0x0801e328
 8016dbc:	0801e368 	.word	0x0801e368
 8016dc0:	200069c8 	.word	0x200069c8

08016dc4 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8016dc4:	b580      	push	{r7, lr}
 8016dc6:	b086      	sub	sp, #24
 8016dc8:	af00      	add	r7, sp, #0
 8016dca:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8016dcc:	687b      	ldr	r3, [r7, #4]
 8016dce:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8016dd0:	697b      	ldr	r3, [r7, #20]
 8016dd2:	685b      	ldr	r3, [r3, #4]
 8016dd4:	4798      	blx	r3

  now = sys_now();
 8016dd6:	f7f2 fe95 	bl	8009b04 <sys_now>
 8016dda:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8016ddc:	697b      	ldr	r3, [r7, #20]
 8016dde:	681a      	ldr	r2, [r3, #0]
 8016de0:	4b0f      	ldr	r3, [pc, #60]	; (8016e20 <lwip_cyclic_timer+0x5c>)
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	4413      	add	r3, r2
 8016de6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8016de8:	68fa      	ldr	r2, [r7, #12]
 8016dea:	693b      	ldr	r3, [r7, #16]
 8016dec:	1ad3      	subs	r3, r2, r3
 8016dee:	0fdb      	lsrs	r3, r3, #31
 8016df0:	f003 0301 	and.w	r3, r3, #1
 8016df4:	b2db      	uxtb	r3, r3
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d009      	beq.n	8016e0e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8016dfa:	697b      	ldr	r3, [r7, #20]
 8016dfc:	681a      	ldr	r2, [r3, #0]
 8016dfe:	693b      	ldr	r3, [r7, #16]
 8016e00:	4413      	add	r3, r2
 8016e02:	687a      	ldr	r2, [r7, #4]
 8016e04:	4907      	ldr	r1, [pc, #28]	; (8016e24 <lwip_cyclic_timer+0x60>)
 8016e06:	4618      	mov	r0, r3
 8016e08:	f7ff ff6e 	bl	8016ce8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8016e0c:	e004      	b.n	8016e18 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8016e0e:	687a      	ldr	r2, [r7, #4]
 8016e10:	4904      	ldr	r1, [pc, #16]	; (8016e24 <lwip_cyclic_timer+0x60>)
 8016e12:	68f8      	ldr	r0, [r7, #12]
 8016e14:	f7ff ff68 	bl	8016ce8 <sys_timeout_abs>
}
 8016e18:	bf00      	nop
 8016e1a:	3718      	adds	r7, #24
 8016e1c:	46bd      	mov	sp, r7
 8016e1e:	bd80      	pop	{r7, pc}
 8016e20:	200069cc 	.word	0x200069cc
 8016e24:	08016dc5 	.word	0x08016dc5

08016e28 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8016e28:	b580      	push	{r7, lr}
 8016e2a:	b082      	sub	sp, #8
 8016e2c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016e2e:	2301      	movs	r3, #1
 8016e30:	607b      	str	r3, [r7, #4]
 8016e32:	e00e      	b.n	8016e52 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8016e34:	4a0b      	ldr	r2, [pc, #44]	; (8016e64 <sys_timeouts_init+0x3c>)
 8016e36:	687b      	ldr	r3, [r7, #4]
 8016e38:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	00db      	lsls	r3, r3, #3
 8016e40:	4a08      	ldr	r2, [pc, #32]	; (8016e64 <sys_timeouts_init+0x3c>)
 8016e42:	4413      	add	r3, r2
 8016e44:	461a      	mov	r2, r3
 8016e46:	4908      	ldr	r1, [pc, #32]	; (8016e68 <sys_timeouts_init+0x40>)
 8016e48:	f000 f810 	bl	8016e6c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	3301      	adds	r3, #1
 8016e50:	607b      	str	r3, [r7, #4]
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	2b02      	cmp	r3, #2
 8016e56:	d9ed      	bls.n	8016e34 <sys_timeouts_init+0xc>
  }
}
 8016e58:	bf00      	nop
 8016e5a:	bf00      	nop
 8016e5c:	3708      	adds	r7, #8
 8016e5e:	46bd      	mov	sp, r7
 8016e60:	bd80      	pop	{r7, pc}
 8016e62:	bf00      	nop
 8016e64:	0801ef20 	.word	0x0801ef20
 8016e68:	08016dc5 	.word	0x08016dc5

08016e6c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8016e6c:	b580      	push	{r7, lr}
 8016e6e:	b086      	sub	sp, #24
 8016e70:	af00      	add	r7, sp, #0
 8016e72:	60f8      	str	r0, [r7, #12]
 8016e74:	60b9      	str	r1, [r7, #8]
 8016e76:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8016e78:	68fb      	ldr	r3, [r7, #12]
 8016e7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016e7e:	d306      	bcc.n	8016e8e <sys_timeout+0x22>
 8016e80:	4b0a      	ldr	r3, [pc, #40]	; (8016eac <sys_timeout+0x40>)
 8016e82:	f240 1229 	movw	r2, #297	; 0x129
 8016e86:	490a      	ldr	r1, [pc, #40]	; (8016eb0 <sys_timeout+0x44>)
 8016e88:	480a      	ldr	r0, [pc, #40]	; (8016eb4 <sys_timeout+0x48>)
 8016e8a:	f003 fc1d 	bl	801a6c8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8016e8e:	f7f2 fe39 	bl	8009b04 <sys_now>
 8016e92:	4602      	mov	r2, r0
 8016e94:	68fb      	ldr	r3, [r7, #12]
 8016e96:	4413      	add	r3, r2
 8016e98:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8016e9a:	687a      	ldr	r2, [r7, #4]
 8016e9c:	68b9      	ldr	r1, [r7, #8]
 8016e9e:	6978      	ldr	r0, [r7, #20]
 8016ea0:	f7ff ff22 	bl	8016ce8 <sys_timeout_abs>
#endif
}
 8016ea4:	bf00      	nop
 8016ea6:	3718      	adds	r7, #24
 8016ea8:	46bd      	mov	sp, r7
 8016eaa:	bd80      	pop	{r7, pc}
 8016eac:	0801e2f4 	.word	0x0801e2f4
 8016eb0:	0801e390 	.word	0x0801e390
 8016eb4:	0801e368 	.word	0x0801e368

08016eb8 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8016eb8:	b580      	push	{r7, lr}
 8016eba:	b084      	sub	sp, #16
 8016ebc:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8016ebe:	f7f2 fe21 	bl	8009b04 <sys_now>
 8016ec2:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8016ec4:	4b17      	ldr	r3, [pc, #92]	; (8016f24 <sys_check_timeouts+0x6c>)
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8016eca:	68bb      	ldr	r3, [r7, #8]
 8016ecc:	2b00      	cmp	r3, #0
 8016ece:	d022      	beq.n	8016f16 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8016ed0:	68bb      	ldr	r3, [r7, #8]
 8016ed2:	685b      	ldr	r3, [r3, #4]
 8016ed4:	68fa      	ldr	r2, [r7, #12]
 8016ed6:	1ad3      	subs	r3, r2, r3
 8016ed8:	0fdb      	lsrs	r3, r3, #31
 8016eda:	f003 0301 	and.w	r3, r3, #1
 8016ede:	b2db      	uxtb	r3, r3
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d11a      	bne.n	8016f1a <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8016ee4:	68bb      	ldr	r3, [r7, #8]
 8016ee6:	681b      	ldr	r3, [r3, #0]
 8016ee8:	4a0e      	ldr	r2, [pc, #56]	; (8016f24 <sys_check_timeouts+0x6c>)
 8016eea:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8016eec:	68bb      	ldr	r3, [r7, #8]
 8016eee:	689b      	ldr	r3, [r3, #8]
 8016ef0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8016ef2:	68bb      	ldr	r3, [r7, #8]
 8016ef4:	68db      	ldr	r3, [r3, #12]
 8016ef6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8016ef8:	68bb      	ldr	r3, [r7, #8]
 8016efa:	685b      	ldr	r3, [r3, #4]
 8016efc:	4a0a      	ldr	r2, [pc, #40]	; (8016f28 <sys_check_timeouts+0x70>)
 8016efe:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8016f00:	68b9      	ldr	r1, [r7, #8]
 8016f02:	200a      	movs	r0, #10
 8016f04:	f7f8 fe2e 	bl	800fb64 <memp_free>
    if (handler != NULL) {
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	2b00      	cmp	r3, #0
 8016f0c:	d0da      	beq.n	8016ec4 <sys_check_timeouts+0xc>
      handler(arg);
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	6838      	ldr	r0, [r7, #0]
 8016f12:	4798      	blx	r3
  do {
 8016f14:	e7d6      	b.n	8016ec4 <sys_check_timeouts+0xc>
      return;
 8016f16:	bf00      	nop
 8016f18:	e000      	b.n	8016f1c <sys_check_timeouts+0x64>
      return;
 8016f1a:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8016f1c:	3710      	adds	r7, #16
 8016f1e:	46bd      	mov	sp, r7
 8016f20:	bd80      	pop	{r7, pc}
 8016f22:	bf00      	nop
 8016f24:	200069c8 	.word	0x200069c8
 8016f28:	200069cc 	.word	0x200069cc

08016f2c <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8016f2c:	b580      	push	{r7, lr}
 8016f2e:	b082      	sub	sp, #8
 8016f30:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8016f32:	4b16      	ldr	r3, [pc, #88]	; (8016f8c <sys_timeouts_sleeptime+0x60>)
 8016f34:	681b      	ldr	r3, [r3, #0]
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d102      	bne.n	8016f40 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8016f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8016f3e:	e020      	b.n	8016f82 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8016f40:	f7f2 fde0 	bl	8009b04 <sys_now>
 8016f44:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8016f46:	4b11      	ldr	r3, [pc, #68]	; (8016f8c <sys_timeouts_sleeptime+0x60>)
 8016f48:	681b      	ldr	r3, [r3, #0]
 8016f4a:	685a      	ldr	r2, [r3, #4]
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	1ad3      	subs	r3, r2, r3
 8016f50:	0fdb      	lsrs	r3, r3, #31
 8016f52:	f003 0301 	and.w	r3, r3, #1
 8016f56:	b2db      	uxtb	r3, r3
 8016f58:	2b00      	cmp	r3, #0
 8016f5a:	d001      	beq.n	8016f60 <sys_timeouts_sleeptime+0x34>
    return 0;
 8016f5c:	2300      	movs	r3, #0
 8016f5e:	e010      	b.n	8016f82 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8016f60:	4b0a      	ldr	r3, [pc, #40]	; (8016f8c <sys_timeouts_sleeptime+0x60>)
 8016f62:	681b      	ldr	r3, [r3, #0]
 8016f64:	685a      	ldr	r2, [r3, #4]
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	1ad3      	subs	r3, r2, r3
 8016f6a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8016f6c:	683b      	ldr	r3, [r7, #0]
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	da06      	bge.n	8016f80 <sys_timeouts_sleeptime+0x54>
 8016f72:	4b07      	ldr	r3, [pc, #28]	; (8016f90 <sys_timeouts_sleeptime+0x64>)
 8016f74:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8016f78:	4906      	ldr	r1, [pc, #24]	; (8016f94 <sys_timeouts_sleeptime+0x68>)
 8016f7a:	4807      	ldr	r0, [pc, #28]	; (8016f98 <sys_timeouts_sleeptime+0x6c>)
 8016f7c:	f003 fba4 	bl	801a6c8 <iprintf>
    return ret;
 8016f80:	683b      	ldr	r3, [r7, #0]
  }
}
 8016f82:	4618      	mov	r0, r3
 8016f84:	3708      	adds	r7, #8
 8016f86:	46bd      	mov	sp, r7
 8016f88:	bd80      	pop	{r7, pc}
 8016f8a:	bf00      	nop
 8016f8c:	200069c8 	.word	0x200069c8
 8016f90:	0801e2f4 	.word	0x0801e2f4
 8016f94:	0801e3c8 	.word	0x0801e3c8
 8016f98:	0801e368 	.word	0x0801e368

08016f9c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8016f9c:	b580      	push	{r7, lr}
 8016f9e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016fa0:	f003 fbaa 	bl	801a6f8 <rand>
 8016fa4:	4603      	mov	r3, r0
 8016fa6:	b29b      	uxth	r3, r3
 8016fa8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016fac:	b29b      	uxth	r3, r3
 8016fae:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8016fb2:	b29a      	uxth	r2, r3
 8016fb4:	4b01      	ldr	r3, [pc, #4]	; (8016fbc <udp_init+0x20>)
 8016fb6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016fb8:	bf00      	nop
 8016fba:	bd80      	pop	{r7, pc}
 8016fbc:	200000ac 	.word	0x200000ac

08016fc0 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8016fc0:	b480      	push	{r7}
 8016fc2:	b083      	sub	sp, #12
 8016fc4:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8016fc6:	2300      	movs	r3, #0
 8016fc8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8016fca:	4b17      	ldr	r3, [pc, #92]	; (8017028 <udp_new_port+0x68>)
 8016fcc:	881b      	ldrh	r3, [r3, #0]
 8016fce:	1c5a      	adds	r2, r3, #1
 8016fd0:	b291      	uxth	r1, r2
 8016fd2:	4a15      	ldr	r2, [pc, #84]	; (8017028 <udp_new_port+0x68>)
 8016fd4:	8011      	strh	r1, [r2, #0]
 8016fd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016fda:	4293      	cmp	r3, r2
 8016fdc:	d103      	bne.n	8016fe6 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8016fde:	4b12      	ldr	r3, [pc, #72]	; (8017028 <udp_new_port+0x68>)
 8016fe0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8016fe4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016fe6:	4b11      	ldr	r3, [pc, #68]	; (801702c <udp_new_port+0x6c>)
 8016fe8:	681b      	ldr	r3, [r3, #0]
 8016fea:	603b      	str	r3, [r7, #0]
 8016fec:	e011      	b.n	8017012 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8016fee:	683b      	ldr	r3, [r7, #0]
 8016ff0:	8a5a      	ldrh	r2, [r3, #18]
 8016ff2:	4b0d      	ldr	r3, [pc, #52]	; (8017028 <udp_new_port+0x68>)
 8016ff4:	881b      	ldrh	r3, [r3, #0]
 8016ff6:	429a      	cmp	r2, r3
 8016ff8:	d108      	bne.n	801700c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8016ffa:	88fb      	ldrh	r3, [r7, #6]
 8016ffc:	3301      	adds	r3, #1
 8016ffe:	80fb      	strh	r3, [r7, #6]
 8017000:	88fb      	ldrh	r3, [r7, #6]
 8017002:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8017006:	d3e0      	bcc.n	8016fca <udp_new_port+0xa>
        return 0;
 8017008:	2300      	movs	r3, #0
 801700a:	e007      	b.n	801701c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801700c:	683b      	ldr	r3, [r7, #0]
 801700e:	68db      	ldr	r3, [r3, #12]
 8017010:	603b      	str	r3, [r7, #0]
 8017012:	683b      	ldr	r3, [r7, #0]
 8017014:	2b00      	cmp	r3, #0
 8017016:	d1ea      	bne.n	8016fee <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8017018:	4b03      	ldr	r3, [pc, #12]	; (8017028 <udp_new_port+0x68>)
 801701a:	881b      	ldrh	r3, [r3, #0]
}
 801701c:	4618      	mov	r0, r3
 801701e:	370c      	adds	r7, #12
 8017020:	46bd      	mov	sp, r7
 8017022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017026:	4770      	bx	lr
 8017028:	200000ac 	.word	0x200000ac
 801702c:	2000dd5c 	.word	0x2000dd5c

08017030 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8017030:	b580      	push	{r7, lr}
 8017032:	b084      	sub	sp, #16
 8017034:	af00      	add	r7, sp, #0
 8017036:	60f8      	str	r0, [r7, #12]
 8017038:	60b9      	str	r1, [r7, #8]
 801703a:	4613      	mov	r3, r2
 801703c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801703e:	68fb      	ldr	r3, [r7, #12]
 8017040:	2b00      	cmp	r3, #0
 8017042:	d105      	bne.n	8017050 <udp_input_local_match+0x20>
 8017044:	4b27      	ldr	r3, [pc, #156]	; (80170e4 <udp_input_local_match+0xb4>)
 8017046:	2287      	movs	r2, #135	; 0x87
 8017048:	4927      	ldr	r1, [pc, #156]	; (80170e8 <udp_input_local_match+0xb8>)
 801704a:	4828      	ldr	r0, [pc, #160]	; (80170ec <udp_input_local_match+0xbc>)
 801704c:	f003 fb3c 	bl	801a6c8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8017050:	68bb      	ldr	r3, [r7, #8]
 8017052:	2b00      	cmp	r3, #0
 8017054:	d105      	bne.n	8017062 <udp_input_local_match+0x32>
 8017056:	4b23      	ldr	r3, [pc, #140]	; (80170e4 <udp_input_local_match+0xb4>)
 8017058:	2288      	movs	r2, #136	; 0x88
 801705a:	4925      	ldr	r1, [pc, #148]	; (80170f0 <udp_input_local_match+0xc0>)
 801705c:	4823      	ldr	r0, [pc, #140]	; (80170ec <udp_input_local_match+0xbc>)
 801705e:	f003 fb33 	bl	801a6c8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017062:	68fb      	ldr	r3, [r7, #12]
 8017064:	7a1b      	ldrb	r3, [r3, #8]
 8017066:	2b00      	cmp	r3, #0
 8017068:	d00b      	beq.n	8017082 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801706a:	68fb      	ldr	r3, [r7, #12]
 801706c:	7a1a      	ldrb	r2, [r3, #8]
 801706e:	4b21      	ldr	r3, [pc, #132]	; (80170f4 <udp_input_local_match+0xc4>)
 8017070:	685b      	ldr	r3, [r3, #4]
 8017072:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017076:	3301      	adds	r3, #1
 8017078:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801707a:	429a      	cmp	r2, r3
 801707c:	d001      	beq.n	8017082 <udp_input_local_match+0x52>
    return 0;
 801707e:	2300      	movs	r3, #0
 8017080:	e02b      	b.n	80170da <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8017082:	79fb      	ldrb	r3, [r7, #7]
 8017084:	2b00      	cmp	r3, #0
 8017086:	d018      	beq.n	80170ba <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017088:	68fb      	ldr	r3, [r7, #12]
 801708a:	2b00      	cmp	r3, #0
 801708c:	d013      	beq.n	80170b6 <udp_input_local_match+0x86>
 801708e:	68fb      	ldr	r3, [r7, #12]
 8017090:	681b      	ldr	r3, [r3, #0]
 8017092:	2b00      	cmp	r3, #0
 8017094:	d00f      	beq.n	80170b6 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017096:	4b17      	ldr	r3, [pc, #92]	; (80170f4 <udp_input_local_match+0xc4>)
 8017098:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801709a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801709e:	d00a      	beq.n	80170b6 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80170a0:	68fb      	ldr	r3, [r7, #12]
 80170a2:	681a      	ldr	r2, [r3, #0]
 80170a4:	4b13      	ldr	r3, [pc, #76]	; (80170f4 <udp_input_local_match+0xc4>)
 80170a6:	695b      	ldr	r3, [r3, #20]
 80170a8:	405a      	eors	r2, r3
 80170aa:	68bb      	ldr	r3, [r7, #8]
 80170ac:	3308      	adds	r3, #8
 80170ae:	681b      	ldr	r3, [r3, #0]
 80170b0:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	d110      	bne.n	80170d8 <udp_input_local_match+0xa8>
          return 1;
 80170b6:	2301      	movs	r3, #1
 80170b8:	e00f      	b.n	80170da <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80170ba:	68fb      	ldr	r3, [r7, #12]
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d009      	beq.n	80170d4 <udp_input_local_match+0xa4>
 80170c0:	68fb      	ldr	r3, [r7, #12]
 80170c2:	681b      	ldr	r3, [r3, #0]
 80170c4:	2b00      	cmp	r3, #0
 80170c6:	d005      	beq.n	80170d4 <udp_input_local_match+0xa4>
 80170c8:	68fb      	ldr	r3, [r7, #12]
 80170ca:	681a      	ldr	r2, [r3, #0]
 80170cc:	4b09      	ldr	r3, [pc, #36]	; (80170f4 <udp_input_local_match+0xc4>)
 80170ce:	695b      	ldr	r3, [r3, #20]
 80170d0:	429a      	cmp	r2, r3
 80170d2:	d101      	bne.n	80170d8 <udp_input_local_match+0xa8>
        return 1;
 80170d4:	2301      	movs	r3, #1
 80170d6:	e000      	b.n	80170da <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80170d8:	2300      	movs	r3, #0
}
 80170da:	4618      	mov	r0, r3
 80170dc:	3710      	adds	r7, #16
 80170de:	46bd      	mov	sp, r7
 80170e0:	bd80      	pop	{r7, pc}
 80170e2:	bf00      	nop
 80170e4:	0801e3dc 	.word	0x0801e3dc
 80170e8:	0801e40c 	.word	0x0801e40c
 80170ec:	0801e430 	.word	0x0801e430
 80170f0:	0801e458 	.word	0x0801e458
 80170f4:	2000a630 	.word	0x2000a630

080170f8 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80170f8:	b590      	push	{r4, r7, lr}
 80170fa:	b08d      	sub	sp, #52	; 0x34
 80170fc:	af02      	add	r7, sp, #8
 80170fe:	6078      	str	r0, [r7, #4]
 8017100:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8017102:	2300      	movs	r3, #0
 8017104:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	2b00      	cmp	r3, #0
 801710a:	d105      	bne.n	8017118 <udp_input+0x20>
 801710c:	4b7c      	ldr	r3, [pc, #496]	; (8017300 <udp_input+0x208>)
 801710e:	22cf      	movs	r2, #207	; 0xcf
 8017110:	497c      	ldr	r1, [pc, #496]	; (8017304 <udp_input+0x20c>)
 8017112:	487d      	ldr	r0, [pc, #500]	; (8017308 <udp_input+0x210>)
 8017114:	f003 fad8 	bl	801a6c8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8017118:	683b      	ldr	r3, [r7, #0]
 801711a:	2b00      	cmp	r3, #0
 801711c:	d105      	bne.n	801712a <udp_input+0x32>
 801711e:	4b78      	ldr	r3, [pc, #480]	; (8017300 <udp_input+0x208>)
 8017120:	22d0      	movs	r2, #208	; 0xd0
 8017122:	497a      	ldr	r1, [pc, #488]	; (801730c <udp_input+0x214>)
 8017124:	4878      	ldr	r0, [pc, #480]	; (8017308 <udp_input+0x210>)
 8017126:	f003 facf 	bl	801a6c8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801712a:	687b      	ldr	r3, [r7, #4]
 801712c:	895b      	ldrh	r3, [r3, #10]
 801712e:	2b07      	cmp	r3, #7
 8017130:	d803      	bhi.n	801713a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8017132:	6878      	ldr	r0, [r7, #4]
 8017134:	f7f9 fb56 	bl	80107e4 <pbuf_free>
    goto end;
 8017138:	e0de      	b.n	80172f8 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	685b      	ldr	r3, [r3, #4]
 801713e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8017140:	4b73      	ldr	r3, [pc, #460]	; (8017310 <udp_input+0x218>)
 8017142:	695b      	ldr	r3, [r3, #20]
 8017144:	4a72      	ldr	r2, [pc, #456]	; (8017310 <udp_input+0x218>)
 8017146:	6812      	ldr	r2, [r2, #0]
 8017148:	4611      	mov	r1, r2
 801714a:	4618      	mov	r0, r3
 801714c:	f001 ff80 	bl	8019050 <ip4_addr_isbroadcast_u32>
 8017150:	4603      	mov	r3, r0
 8017152:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8017154:	697b      	ldr	r3, [r7, #20]
 8017156:	881b      	ldrh	r3, [r3, #0]
 8017158:	b29b      	uxth	r3, r3
 801715a:	4618      	mov	r0, r3
 801715c:	f7f7 fffa 	bl	800f154 <lwip_htons>
 8017160:	4603      	mov	r3, r0
 8017162:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8017164:	697b      	ldr	r3, [r7, #20]
 8017166:	885b      	ldrh	r3, [r3, #2]
 8017168:	b29b      	uxth	r3, r3
 801716a:	4618      	mov	r0, r3
 801716c:	f7f7 fff2 	bl	800f154 <lwip_htons>
 8017170:	4603      	mov	r3, r0
 8017172:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8017174:	2300      	movs	r3, #0
 8017176:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8017178:	2300      	movs	r3, #0
 801717a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801717c:	2300      	movs	r3, #0
 801717e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017180:	4b64      	ldr	r3, [pc, #400]	; (8017314 <udp_input+0x21c>)
 8017182:	681b      	ldr	r3, [r3, #0]
 8017184:	627b      	str	r3, [r7, #36]	; 0x24
 8017186:	e054      	b.n	8017232 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8017188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801718a:	8a5b      	ldrh	r3, [r3, #18]
 801718c:	89fa      	ldrh	r2, [r7, #14]
 801718e:	429a      	cmp	r2, r3
 8017190:	d14a      	bne.n	8017228 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8017192:	7cfb      	ldrb	r3, [r7, #19]
 8017194:	461a      	mov	r2, r3
 8017196:	6839      	ldr	r1, [r7, #0]
 8017198:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801719a:	f7ff ff49 	bl	8017030 <udp_input_local_match>
 801719e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d041      	beq.n	8017228 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80171a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171a6:	7c1b      	ldrb	r3, [r3, #16]
 80171a8:	f003 0304 	and.w	r3, r3, #4
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	d11d      	bne.n	80171ec <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80171b0:	69fb      	ldr	r3, [r7, #28]
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d102      	bne.n	80171bc <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80171b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171b8:	61fb      	str	r3, [r7, #28]
 80171ba:	e017      	b.n	80171ec <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80171bc:	7cfb      	ldrb	r3, [r7, #19]
 80171be:	2b00      	cmp	r3, #0
 80171c0:	d014      	beq.n	80171ec <udp_input+0xf4>
 80171c2:	4b53      	ldr	r3, [pc, #332]	; (8017310 <udp_input+0x218>)
 80171c4:	695b      	ldr	r3, [r3, #20]
 80171c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80171ca:	d10f      	bne.n	80171ec <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80171cc:	69fb      	ldr	r3, [r7, #28]
 80171ce:	681a      	ldr	r2, [r3, #0]
 80171d0:	683b      	ldr	r3, [r7, #0]
 80171d2:	3304      	adds	r3, #4
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	429a      	cmp	r2, r3
 80171d8:	d008      	beq.n	80171ec <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80171da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171dc:	681a      	ldr	r2, [r3, #0]
 80171de:	683b      	ldr	r3, [r7, #0]
 80171e0:	3304      	adds	r3, #4
 80171e2:	681b      	ldr	r3, [r3, #0]
 80171e4:	429a      	cmp	r2, r3
 80171e6:	d101      	bne.n	80171ec <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80171e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171ea:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80171ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171ee:	8a9b      	ldrh	r3, [r3, #20]
 80171f0:	8a3a      	ldrh	r2, [r7, #16]
 80171f2:	429a      	cmp	r2, r3
 80171f4:	d118      	bne.n	8017228 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80171f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171f8:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80171fa:	2b00      	cmp	r3, #0
 80171fc:	d005      	beq.n	801720a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80171fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017200:	685a      	ldr	r2, [r3, #4]
 8017202:	4b43      	ldr	r3, [pc, #268]	; (8017310 <udp_input+0x218>)
 8017204:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017206:	429a      	cmp	r2, r3
 8017208:	d10e      	bne.n	8017228 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801720a:	6a3b      	ldr	r3, [r7, #32]
 801720c:	2b00      	cmp	r3, #0
 801720e:	d014      	beq.n	801723a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8017210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017212:	68da      	ldr	r2, [r3, #12]
 8017214:	6a3b      	ldr	r3, [r7, #32]
 8017216:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8017218:	4b3e      	ldr	r3, [pc, #248]	; (8017314 <udp_input+0x21c>)
 801721a:	681a      	ldr	r2, [r3, #0]
 801721c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801721e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8017220:	4a3c      	ldr	r2, [pc, #240]	; (8017314 <udp_input+0x21c>)
 8017222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017224:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8017226:	e008      	b.n	801723a <udp_input+0x142>
      }
    }

    prev = pcb;
 8017228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801722a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801722c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801722e:	68db      	ldr	r3, [r3, #12]
 8017230:	627b      	str	r3, [r7, #36]	; 0x24
 8017232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017234:	2b00      	cmp	r3, #0
 8017236:	d1a7      	bne.n	8017188 <udp_input+0x90>
 8017238:	e000      	b.n	801723c <udp_input+0x144>
        break;
 801723a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801723c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801723e:	2b00      	cmp	r3, #0
 8017240:	d101      	bne.n	8017246 <udp_input+0x14e>
    pcb = uncon_pcb;
 8017242:	69fb      	ldr	r3, [r7, #28]
 8017244:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8017246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017248:	2b00      	cmp	r3, #0
 801724a:	d002      	beq.n	8017252 <udp_input+0x15a>
    for_us = 1;
 801724c:	2301      	movs	r3, #1
 801724e:	76fb      	strb	r3, [r7, #27]
 8017250:	e00a      	b.n	8017268 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8017252:	683b      	ldr	r3, [r7, #0]
 8017254:	3304      	adds	r3, #4
 8017256:	681a      	ldr	r2, [r3, #0]
 8017258:	4b2d      	ldr	r3, [pc, #180]	; (8017310 <udp_input+0x218>)
 801725a:	695b      	ldr	r3, [r3, #20]
 801725c:	429a      	cmp	r2, r3
 801725e:	bf0c      	ite	eq
 8017260:	2301      	moveq	r3, #1
 8017262:	2300      	movne	r3, #0
 8017264:	b2db      	uxtb	r3, r3
 8017266:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8017268:	7efb      	ldrb	r3, [r7, #27]
 801726a:	2b00      	cmp	r3, #0
 801726c:	d041      	beq.n	80172f2 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801726e:	2108      	movs	r1, #8
 8017270:	6878      	ldr	r0, [r7, #4]
 8017272:	f7f9 fa31 	bl	80106d8 <pbuf_remove_header>
 8017276:	4603      	mov	r3, r0
 8017278:	2b00      	cmp	r3, #0
 801727a:	d00a      	beq.n	8017292 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801727c:	4b20      	ldr	r3, [pc, #128]	; (8017300 <udp_input+0x208>)
 801727e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8017282:	4925      	ldr	r1, [pc, #148]	; (8017318 <udp_input+0x220>)
 8017284:	4820      	ldr	r0, [pc, #128]	; (8017308 <udp_input+0x210>)
 8017286:	f003 fa1f 	bl	801a6c8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801728a:	6878      	ldr	r0, [r7, #4]
 801728c:	f7f9 faaa 	bl	80107e4 <pbuf_free>
      goto end;
 8017290:	e032      	b.n	80172f8 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8017292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017294:	2b00      	cmp	r3, #0
 8017296:	d012      	beq.n	80172be <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8017298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801729a:	699b      	ldr	r3, [r3, #24]
 801729c:	2b00      	cmp	r3, #0
 801729e:	d00a      	beq.n	80172b6 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80172a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172a2:	699c      	ldr	r4, [r3, #24]
 80172a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172a6:	69d8      	ldr	r0, [r3, #28]
 80172a8:	8a3b      	ldrh	r3, [r7, #16]
 80172aa:	9300      	str	r3, [sp, #0]
 80172ac:	4b1b      	ldr	r3, [pc, #108]	; (801731c <udp_input+0x224>)
 80172ae:	687a      	ldr	r2, [r7, #4]
 80172b0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80172b2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80172b4:	e021      	b.n	80172fa <udp_input+0x202>
        pbuf_free(p);
 80172b6:	6878      	ldr	r0, [r7, #4]
 80172b8:	f7f9 fa94 	bl	80107e4 <pbuf_free>
        goto end;
 80172bc:	e01c      	b.n	80172f8 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80172be:	7cfb      	ldrb	r3, [r7, #19]
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	d112      	bne.n	80172ea <udp_input+0x1f2>
 80172c4:	4b12      	ldr	r3, [pc, #72]	; (8017310 <udp_input+0x218>)
 80172c6:	695b      	ldr	r3, [r3, #20]
 80172c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80172cc:	2be0      	cmp	r3, #224	; 0xe0
 80172ce:	d00c      	beq.n	80172ea <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80172d0:	4b0f      	ldr	r3, [pc, #60]	; (8017310 <udp_input+0x218>)
 80172d2:	899b      	ldrh	r3, [r3, #12]
 80172d4:	3308      	adds	r3, #8
 80172d6:	b29b      	uxth	r3, r3
 80172d8:	b21b      	sxth	r3, r3
 80172da:	4619      	mov	r1, r3
 80172dc:	6878      	ldr	r0, [r7, #4]
 80172de:	f7f9 fa6e 	bl	80107be <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80172e2:	2103      	movs	r1, #3
 80172e4:	6878      	ldr	r0, [r7, #4]
 80172e6:	f001 fb93 	bl	8018a10 <icmp_dest_unreach>
      pbuf_free(p);
 80172ea:	6878      	ldr	r0, [r7, #4]
 80172ec:	f7f9 fa7a 	bl	80107e4 <pbuf_free>
  return;
 80172f0:	e003      	b.n	80172fa <udp_input+0x202>
    pbuf_free(p);
 80172f2:	6878      	ldr	r0, [r7, #4]
 80172f4:	f7f9 fa76 	bl	80107e4 <pbuf_free>
  return;
 80172f8:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80172fa:	372c      	adds	r7, #44	; 0x2c
 80172fc:	46bd      	mov	sp, r7
 80172fe:	bd90      	pop	{r4, r7, pc}
 8017300:	0801e3dc 	.word	0x0801e3dc
 8017304:	0801e480 	.word	0x0801e480
 8017308:	0801e430 	.word	0x0801e430
 801730c:	0801e498 	.word	0x0801e498
 8017310:	2000a630 	.word	0x2000a630
 8017314:	2000dd5c 	.word	0x2000dd5c
 8017318:	0801e4b4 	.word	0x0801e4b4
 801731c:	2000a640 	.word	0x2000a640

08017320 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8017320:	b580      	push	{r7, lr}
 8017322:	b082      	sub	sp, #8
 8017324:	af00      	add	r7, sp, #0
 8017326:	6078      	str	r0, [r7, #4]
 8017328:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801732a:	687b      	ldr	r3, [r7, #4]
 801732c:	2b00      	cmp	r3, #0
 801732e:	d109      	bne.n	8017344 <udp_send+0x24>
 8017330:	4b11      	ldr	r3, [pc, #68]	; (8017378 <udp_send+0x58>)
 8017332:	f240 12d5 	movw	r2, #469	; 0x1d5
 8017336:	4911      	ldr	r1, [pc, #68]	; (801737c <udp_send+0x5c>)
 8017338:	4811      	ldr	r0, [pc, #68]	; (8017380 <udp_send+0x60>)
 801733a:	f003 f9c5 	bl	801a6c8 <iprintf>
 801733e:	f06f 030f 	mvn.w	r3, #15
 8017342:	e015      	b.n	8017370 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8017344:	683b      	ldr	r3, [r7, #0]
 8017346:	2b00      	cmp	r3, #0
 8017348:	d109      	bne.n	801735e <udp_send+0x3e>
 801734a:	4b0b      	ldr	r3, [pc, #44]	; (8017378 <udp_send+0x58>)
 801734c:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8017350:	490c      	ldr	r1, [pc, #48]	; (8017384 <udp_send+0x64>)
 8017352:	480b      	ldr	r0, [pc, #44]	; (8017380 <udp_send+0x60>)
 8017354:	f003 f9b8 	bl	801a6c8 <iprintf>
 8017358:	f06f 030f 	mvn.w	r3, #15
 801735c:	e008      	b.n	8017370 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	1d1a      	adds	r2, r3, #4
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	8a9b      	ldrh	r3, [r3, #20]
 8017366:	6839      	ldr	r1, [r7, #0]
 8017368:	6878      	ldr	r0, [r7, #4]
 801736a:	f000 f80d 	bl	8017388 <udp_sendto>
 801736e:	4603      	mov	r3, r0
}
 8017370:	4618      	mov	r0, r3
 8017372:	3708      	adds	r7, #8
 8017374:	46bd      	mov	sp, r7
 8017376:	bd80      	pop	{r7, pc}
 8017378:	0801e3dc 	.word	0x0801e3dc
 801737c:	0801e4d0 	.word	0x0801e4d0
 8017380:	0801e430 	.word	0x0801e430
 8017384:	0801e4e8 	.word	0x0801e4e8

08017388 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8017388:	b580      	push	{r7, lr}
 801738a:	b088      	sub	sp, #32
 801738c:	af02      	add	r7, sp, #8
 801738e:	60f8      	str	r0, [r7, #12]
 8017390:	60b9      	str	r1, [r7, #8]
 8017392:	607a      	str	r2, [r7, #4]
 8017394:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8017396:	68fb      	ldr	r3, [r7, #12]
 8017398:	2b00      	cmp	r3, #0
 801739a:	d109      	bne.n	80173b0 <udp_sendto+0x28>
 801739c:	4b23      	ldr	r3, [pc, #140]	; (801742c <udp_sendto+0xa4>)
 801739e:	f44f 7206 	mov.w	r2, #536	; 0x218
 80173a2:	4923      	ldr	r1, [pc, #140]	; (8017430 <udp_sendto+0xa8>)
 80173a4:	4823      	ldr	r0, [pc, #140]	; (8017434 <udp_sendto+0xac>)
 80173a6:	f003 f98f 	bl	801a6c8 <iprintf>
 80173aa:	f06f 030f 	mvn.w	r3, #15
 80173ae:	e038      	b.n	8017422 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80173b0:	68bb      	ldr	r3, [r7, #8]
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	d109      	bne.n	80173ca <udp_sendto+0x42>
 80173b6:	4b1d      	ldr	r3, [pc, #116]	; (801742c <udp_sendto+0xa4>)
 80173b8:	f240 2219 	movw	r2, #537	; 0x219
 80173bc:	491e      	ldr	r1, [pc, #120]	; (8017438 <udp_sendto+0xb0>)
 80173be:	481d      	ldr	r0, [pc, #116]	; (8017434 <udp_sendto+0xac>)
 80173c0:	f003 f982 	bl	801a6c8 <iprintf>
 80173c4:	f06f 030f 	mvn.w	r3, #15
 80173c8:	e02b      	b.n	8017422 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80173ca:	687b      	ldr	r3, [r7, #4]
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d109      	bne.n	80173e4 <udp_sendto+0x5c>
 80173d0:	4b16      	ldr	r3, [pc, #88]	; (801742c <udp_sendto+0xa4>)
 80173d2:	f240 221a 	movw	r2, #538	; 0x21a
 80173d6:	4919      	ldr	r1, [pc, #100]	; (801743c <udp_sendto+0xb4>)
 80173d8:	4816      	ldr	r0, [pc, #88]	; (8017434 <udp_sendto+0xac>)
 80173da:	f003 f975 	bl	801a6c8 <iprintf>
 80173de:	f06f 030f 	mvn.w	r3, #15
 80173e2:	e01e      	b.n	8017422 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80173e4:	68fb      	ldr	r3, [r7, #12]
 80173e6:	7a1b      	ldrb	r3, [r3, #8]
 80173e8:	2b00      	cmp	r3, #0
 80173ea:	d006      	beq.n	80173fa <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80173ec:	68fb      	ldr	r3, [r7, #12]
 80173ee:	7a1b      	ldrb	r3, [r3, #8]
 80173f0:	4618      	mov	r0, r3
 80173f2:	f7f8 fe69 	bl	80100c8 <netif_get_by_index>
 80173f6:	6178      	str	r0, [r7, #20]
 80173f8:	e003      	b.n	8017402 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80173fa:	6878      	ldr	r0, [r7, #4]
 80173fc:	f001 fb92 	bl	8018b24 <ip4_route>
 8017400:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8017402:	697b      	ldr	r3, [r7, #20]
 8017404:	2b00      	cmp	r3, #0
 8017406:	d102      	bne.n	801740e <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8017408:	f06f 0303 	mvn.w	r3, #3
 801740c:	e009      	b.n	8017422 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801740e:	887a      	ldrh	r2, [r7, #2]
 8017410:	697b      	ldr	r3, [r7, #20]
 8017412:	9300      	str	r3, [sp, #0]
 8017414:	4613      	mov	r3, r2
 8017416:	687a      	ldr	r2, [r7, #4]
 8017418:	68b9      	ldr	r1, [r7, #8]
 801741a:	68f8      	ldr	r0, [r7, #12]
 801741c:	f000 f810 	bl	8017440 <udp_sendto_if>
 8017420:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8017422:	4618      	mov	r0, r3
 8017424:	3718      	adds	r7, #24
 8017426:	46bd      	mov	sp, r7
 8017428:	bd80      	pop	{r7, pc}
 801742a:	bf00      	nop
 801742c:	0801e3dc 	.word	0x0801e3dc
 8017430:	0801e500 	.word	0x0801e500
 8017434:	0801e430 	.word	0x0801e430
 8017438:	0801e518 	.word	0x0801e518
 801743c:	0801e534 	.word	0x0801e534

08017440 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8017440:	b580      	push	{r7, lr}
 8017442:	b088      	sub	sp, #32
 8017444:	af02      	add	r7, sp, #8
 8017446:	60f8      	str	r0, [r7, #12]
 8017448:	60b9      	str	r1, [r7, #8]
 801744a:	607a      	str	r2, [r7, #4]
 801744c:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801744e:	68fb      	ldr	r3, [r7, #12]
 8017450:	2b00      	cmp	r3, #0
 8017452:	d109      	bne.n	8017468 <udp_sendto_if+0x28>
 8017454:	4b2e      	ldr	r3, [pc, #184]	; (8017510 <udp_sendto_if+0xd0>)
 8017456:	f44f 7220 	mov.w	r2, #640	; 0x280
 801745a:	492e      	ldr	r1, [pc, #184]	; (8017514 <udp_sendto_if+0xd4>)
 801745c:	482e      	ldr	r0, [pc, #184]	; (8017518 <udp_sendto_if+0xd8>)
 801745e:	f003 f933 	bl	801a6c8 <iprintf>
 8017462:	f06f 030f 	mvn.w	r3, #15
 8017466:	e04f      	b.n	8017508 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8017468:	68bb      	ldr	r3, [r7, #8]
 801746a:	2b00      	cmp	r3, #0
 801746c:	d109      	bne.n	8017482 <udp_sendto_if+0x42>
 801746e:	4b28      	ldr	r3, [pc, #160]	; (8017510 <udp_sendto_if+0xd0>)
 8017470:	f240 2281 	movw	r2, #641	; 0x281
 8017474:	4929      	ldr	r1, [pc, #164]	; (801751c <udp_sendto_if+0xdc>)
 8017476:	4828      	ldr	r0, [pc, #160]	; (8017518 <udp_sendto_if+0xd8>)
 8017478:	f003 f926 	bl	801a6c8 <iprintf>
 801747c:	f06f 030f 	mvn.w	r3, #15
 8017480:	e042      	b.n	8017508 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	2b00      	cmp	r3, #0
 8017486:	d109      	bne.n	801749c <udp_sendto_if+0x5c>
 8017488:	4b21      	ldr	r3, [pc, #132]	; (8017510 <udp_sendto_if+0xd0>)
 801748a:	f240 2282 	movw	r2, #642	; 0x282
 801748e:	4924      	ldr	r1, [pc, #144]	; (8017520 <udp_sendto_if+0xe0>)
 8017490:	4821      	ldr	r0, [pc, #132]	; (8017518 <udp_sendto_if+0xd8>)
 8017492:	f003 f919 	bl	801a6c8 <iprintf>
 8017496:	f06f 030f 	mvn.w	r3, #15
 801749a:	e035      	b.n	8017508 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801749c:	6a3b      	ldr	r3, [r7, #32]
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d109      	bne.n	80174b6 <udp_sendto_if+0x76>
 80174a2:	4b1b      	ldr	r3, [pc, #108]	; (8017510 <udp_sendto_if+0xd0>)
 80174a4:	f240 2283 	movw	r2, #643	; 0x283
 80174a8:	491e      	ldr	r1, [pc, #120]	; (8017524 <udp_sendto_if+0xe4>)
 80174aa:	481b      	ldr	r0, [pc, #108]	; (8017518 <udp_sendto_if+0xd8>)
 80174ac:	f003 f90c 	bl	801a6c8 <iprintf>
 80174b0:	f06f 030f 	mvn.w	r3, #15
 80174b4:	e028      	b.n	8017508 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80174b6:	68fb      	ldr	r3, [r7, #12]
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d009      	beq.n	80174d0 <udp_sendto_if+0x90>
 80174bc:	68fb      	ldr	r3, [r7, #12]
 80174be:	681b      	ldr	r3, [r3, #0]
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d005      	beq.n	80174d0 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80174c4:	68fb      	ldr	r3, [r7, #12]
 80174c6:	681b      	ldr	r3, [r3, #0]
 80174c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80174cc:	2be0      	cmp	r3, #224	; 0xe0
 80174ce:	d103      	bne.n	80174d8 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80174d0:	6a3b      	ldr	r3, [r7, #32]
 80174d2:	3304      	adds	r3, #4
 80174d4:	617b      	str	r3, [r7, #20]
 80174d6:	e00b      	b.n	80174f0 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80174d8:	68fb      	ldr	r3, [r7, #12]
 80174da:	681a      	ldr	r2, [r3, #0]
 80174dc:	6a3b      	ldr	r3, [r7, #32]
 80174de:	3304      	adds	r3, #4
 80174e0:	681b      	ldr	r3, [r3, #0]
 80174e2:	429a      	cmp	r2, r3
 80174e4:	d002      	beq.n	80174ec <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80174e6:	f06f 0303 	mvn.w	r3, #3
 80174ea:	e00d      	b.n	8017508 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80174ec:	68fb      	ldr	r3, [r7, #12]
 80174ee:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80174f0:	887a      	ldrh	r2, [r7, #2]
 80174f2:	697b      	ldr	r3, [r7, #20]
 80174f4:	9301      	str	r3, [sp, #4]
 80174f6:	6a3b      	ldr	r3, [r7, #32]
 80174f8:	9300      	str	r3, [sp, #0]
 80174fa:	4613      	mov	r3, r2
 80174fc:	687a      	ldr	r2, [r7, #4]
 80174fe:	68b9      	ldr	r1, [r7, #8]
 8017500:	68f8      	ldr	r0, [r7, #12]
 8017502:	f000 f811 	bl	8017528 <udp_sendto_if_src>
 8017506:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8017508:	4618      	mov	r0, r3
 801750a:	3718      	adds	r7, #24
 801750c:	46bd      	mov	sp, r7
 801750e:	bd80      	pop	{r7, pc}
 8017510:	0801e3dc 	.word	0x0801e3dc
 8017514:	0801e550 	.word	0x0801e550
 8017518:	0801e430 	.word	0x0801e430
 801751c:	0801e56c 	.word	0x0801e56c
 8017520:	0801e588 	.word	0x0801e588
 8017524:	0801e5a8 	.word	0x0801e5a8

08017528 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8017528:	b580      	push	{r7, lr}
 801752a:	b08c      	sub	sp, #48	; 0x30
 801752c:	af04      	add	r7, sp, #16
 801752e:	60f8      	str	r0, [r7, #12]
 8017530:	60b9      	str	r1, [r7, #8]
 8017532:	607a      	str	r2, [r7, #4]
 8017534:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8017536:	68fb      	ldr	r3, [r7, #12]
 8017538:	2b00      	cmp	r3, #0
 801753a:	d109      	bne.n	8017550 <udp_sendto_if_src+0x28>
 801753c:	4b65      	ldr	r3, [pc, #404]	; (80176d4 <udp_sendto_if_src+0x1ac>)
 801753e:	f240 22d1 	movw	r2, #721	; 0x2d1
 8017542:	4965      	ldr	r1, [pc, #404]	; (80176d8 <udp_sendto_if_src+0x1b0>)
 8017544:	4865      	ldr	r0, [pc, #404]	; (80176dc <udp_sendto_if_src+0x1b4>)
 8017546:	f003 f8bf 	bl	801a6c8 <iprintf>
 801754a:	f06f 030f 	mvn.w	r3, #15
 801754e:	e0bc      	b.n	80176ca <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8017550:	68bb      	ldr	r3, [r7, #8]
 8017552:	2b00      	cmp	r3, #0
 8017554:	d109      	bne.n	801756a <udp_sendto_if_src+0x42>
 8017556:	4b5f      	ldr	r3, [pc, #380]	; (80176d4 <udp_sendto_if_src+0x1ac>)
 8017558:	f240 22d2 	movw	r2, #722	; 0x2d2
 801755c:	4960      	ldr	r1, [pc, #384]	; (80176e0 <udp_sendto_if_src+0x1b8>)
 801755e:	485f      	ldr	r0, [pc, #380]	; (80176dc <udp_sendto_if_src+0x1b4>)
 8017560:	f003 f8b2 	bl	801a6c8 <iprintf>
 8017564:	f06f 030f 	mvn.w	r3, #15
 8017568:	e0af      	b.n	80176ca <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801756a:	687b      	ldr	r3, [r7, #4]
 801756c:	2b00      	cmp	r3, #0
 801756e:	d109      	bne.n	8017584 <udp_sendto_if_src+0x5c>
 8017570:	4b58      	ldr	r3, [pc, #352]	; (80176d4 <udp_sendto_if_src+0x1ac>)
 8017572:	f240 22d3 	movw	r2, #723	; 0x2d3
 8017576:	495b      	ldr	r1, [pc, #364]	; (80176e4 <udp_sendto_if_src+0x1bc>)
 8017578:	4858      	ldr	r0, [pc, #352]	; (80176dc <udp_sendto_if_src+0x1b4>)
 801757a:	f003 f8a5 	bl	801a6c8 <iprintf>
 801757e:	f06f 030f 	mvn.w	r3, #15
 8017582:	e0a2      	b.n	80176ca <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8017584:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017586:	2b00      	cmp	r3, #0
 8017588:	d109      	bne.n	801759e <udp_sendto_if_src+0x76>
 801758a:	4b52      	ldr	r3, [pc, #328]	; (80176d4 <udp_sendto_if_src+0x1ac>)
 801758c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8017590:	4955      	ldr	r1, [pc, #340]	; (80176e8 <udp_sendto_if_src+0x1c0>)
 8017592:	4852      	ldr	r0, [pc, #328]	; (80176dc <udp_sendto_if_src+0x1b4>)
 8017594:	f003 f898 	bl	801a6c8 <iprintf>
 8017598:	f06f 030f 	mvn.w	r3, #15
 801759c:	e095      	b.n	80176ca <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801759e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175a0:	2b00      	cmp	r3, #0
 80175a2:	d109      	bne.n	80175b8 <udp_sendto_if_src+0x90>
 80175a4:	4b4b      	ldr	r3, [pc, #300]	; (80176d4 <udp_sendto_if_src+0x1ac>)
 80175a6:	f240 22d5 	movw	r2, #725	; 0x2d5
 80175aa:	4950      	ldr	r1, [pc, #320]	; (80176ec <udp_sendto_if_src+0x1c4>)
 80175ac:	484b      	ldr	r0, [pc, #300]	; (80176dc <udp_sendto_if_src+0x1b4>)
 80175ae:	f003 f88b 	bl	801a6c8 <iprintf>
 80175b2:	f06f 030f 	mvn.w	r3, #15
 80175b6:	e088      	b.n	80176ca <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80175b8:	68fb      	ldr	r3, [r7, #12]
 80175ba:	8a5b      	ldrh	r3, [r3, #18]
 80175bc:	2b00      	cmp	r3, #0
 80175be:	d10f      	bne.n	80175e0 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80175c0:	68f9      	ldr	r1, [r7, #12]
 80175c2:	68fb      	ldr	r3, [r7, #12]
 80175c4:	8a5b      	ldrh	r3, [r3, #18]
 80175c6:	461a      	mov	r2, r3
 80175c8:	68f8      	ldr	r0, [r7, #12]
 80175ca:	f000 f893 	bl	80176f4 <udp_bind>
 80175ce:	4603      	mov	r3, r0
 80175d0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80175d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80175d6:	2b00      	cmp	r3, #0
 80175d8:	d002      	beq.n	80175e0 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80175da:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80175de:	e074      	b.n	80176ca <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80175e0:	68bb      	ldr	r3, [r7, #8]
 80175e2:	891b      	ldrh	r3, [r3, #8]
 80175e4:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80175e8:	4293      	cmp	r3, r2
 80175ea:	d902      	bls.n	80175f2 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80175ec:	f04f 33ff 	mov.w	r3, #4294967295
 80175f0:	e06b      	b.n	80176ca <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80175f2:	2108      	movs	r1, #8
 80175f4:	68b8      	ldr	r0, [r7, #8]
 80175f6:	f7f9 f85f 	bl	80106b8 <pbuf_add_header>
 80175fa:	4603      	mov	r3, r0
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d015      	beq.n	801762c <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8017600:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017604:	2108      	movs	r1, #8
 8017606:	2022      	movs	r0, #34	; 0x22
 8017608:	f7f8 fe08 	bl	801021c <pbuf_alloc>
 801760c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801760e:	69fb      	ldr	r3, [r7, #28]
 8017610:	2b00      	cmp	r3, #0
 8017612:	d102      	bne.n	801761a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8017614:	f04f 33ff 	mov.w	r3, #4294967295
 8017618:	e057      	b.n	80176ca <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801761a:	68bb      	ldr	r3, [r7, #8]
 801761c:	891b      	ldrh	r3, [r3, #8]
 801761e:	2b00      	cmp	r3, #0
 8017620:	d006      	beq.n	8017630 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8017622:	68b9      	ldr	r1, [r7, #8]
 8017624:	69f8      	ldr	r0, [r7, #28]
 8017626:	f7f9 fa01 	bl	8010a2c <pbuf_chain>
 801762a:	e001      	b.n	8017630 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801762c:	68bb      	ldr	r3, [r7, #8]
 801762e:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8017630:	69fb      	ldr	r3, [r7, #28]
 8017632:	895b      	ldrh	r3, [r3, #10]
 8017634:	2b07      	cmp	r3, #7
 8017636:	d806      	bhi.n	8017646 <udp_sendto_if_src+0x11e>
 8017638:	4b26      	ldr	r3, [pc, #152]	; (80176d4 <udp_sendto_if_src+0x1ac>)
 801763a:	f240 320d 	movw	r2, #781	; 0x30d
 801763e:	492c      	ldr	r1, [pc, #176]	; (80176f0 <udp_sendto_if_src+0x1c8>)
 8017640:	4826      	ldr	r0, [pc, #152]	; (80176dc <udp_sendto_if_src+0x1b4>)
 8017642:	f003 f841 	bl	801a6c8 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8017646:	69fb      	ldr	r3, [r7, #28]
 8017648:	685b      	ldr	r3, [r3, #4]
 801764a:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801764c:	68fb      	ldr	r3, [r7, #12]
 801764e:	8a5b      	ldrh	r3, [r3, #18]
 8017650:	4618      	mov	r0, r3
 8017652:	f7f7 fd7f 	bl	800f154 <lwip_htons>
 8017656:	4603      	mov	r3, r0
 8017658:	461a      	mov	r2, r3
 801765a:	697b      	ldr	r3, [r7, #20]
 801765c:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801765e:	887b      	ldrh	r3, [r7, #2]
 8017660:	4618      	mov	r0, r3
 8017662:	f7f7 fd77 	bl	800f154 <lwip_htons>
 8017666:	4603      	mov	r3, r0
 8017668:	461a      	mov	r2, r3
 801766a:	697b      	ldr	r3, [r7, #20]
 801766c:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801766e:	697b      	ldr	r3, [r7, #20]
 8017670:	2200      	movs	r2, #0
 8017672:	719a      	strb	r2, [r3, #6]
 8017674:	2200      	movs	r2, #0
 8017676:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8017678:	69fb      	ldr	r3, [r7, #28]
 801767a:	891b      	ldrh	r3, [r3, #8]
 801767c:	4618      	mov	r0, r3
 801767e:	f7f7 fd69 	bl	800f154 <lwip_htons>
 8017682:	4603      	mov	r3, r0
 8017684:	461a      	mov	r2, r3
 8017686:	697b      	ldr	r3, [r7, #20]
 8017688:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801768a:	2311      	movs	r3, #17
 801768c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801768e:	68fb      	ldr	r3, [r7, #12]
 8017690:	7adb      	ldrb	r3, [r3, #11]
 8017692:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8017694:	68fb      	ldr	r3, [r7, #12]
 8017696:	7a9b      	ldrb	r3, [r3, #10]
 8017698:	7cb9      	ldrb	r1, [r7, #18]
 801769a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801769c:	9202      	str	r2, [sp, #8]
 801769e:	7cfa      	ldrb	r2, [r7, #19]
 80176a0:	9201      	str	r2, [sp, #4]
 80176a2:	9300      	str	r3, [sp, #0]
 80176a4:	460b      	mov	r3, r1
 80176a6:	687a      	ldr	r2, [r7, #4]
 80176a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80176aa:	69f8      	ldr	r0, [r7, #28]
 80176ac:	f001 fc22 	bl	8018ef4 <ip4_output_if_src>
 80176b0:	4603      	mov	r3, r0
 80176b2:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80176b4:	69fa      	ldr	r2, [r7, #28]
 80176b6:	68bb      	ldr	r3, [r7, #8]
 80176b8:	429a      	cmp	r2, r3
 80176ba:	d004      	beq.n	80176c6 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80176bc:	69f8      	ldr	r0, [r7, #28]
 80176be:	f7f9 f891 	bl	80107e4 <pbuf_free>
    q = NULL;
 80176c2:	2300      	movs	r3, #0
 80176c4:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80176c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80176ca:	4618      	mov	r0, r3
 80176cc:	3720      	adds	r7, #32
 80176ce:	46bd      	mov	sp, r7
 80176d0:	bd80      	pop	{r7, pc}
 80176d2:	bf00      	nop
 80176d4:	0801e3dc 	.word	0x0801e3dc
 80176d8:	0801e5c8 	.word	0x0801e5c8
 80176dc:	0801e430 	.word	0x0801e430
 80176e0:	0801e5e8 	.word	0x0801e5e8
 80176e4:	0801e608 	.word	0x0801e608
 80176e8:	0801e62c 	.word	0x0801e62c
 80176ec:	0801e650 	.word	0x0801e650
 80176f0:	0801e674 	.word	0x0801e674

080176f4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80176f4:	b580      	push	{r7, lr}
 80176f6:	b086      	sub	sp, #24
 80176f8:	af00      	add	r7, sp, #0
 80176fa:	60f8      	str	r0, [r7, #12]
 80176fc:	60b9      	str	r1, [r7, #8]
 80176fe:	4613      	mov	r3, r2
 8017700:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8017702:	68bb      	ldr	r3, [r7, #8]
 8017704:	2b00      	cmp	r3, #0
 8017706:	d101      	bne.n	801770c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8017708:	4b39      	ldr	r3, [pc, #228]	; (80177f0 <udp_bind+0xfc>)
 801770a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801770c:	68fb      	ldr	r3, [r7, #12]
 801770e:	2b00      	cmp	r3, #0
 8017710:	d109      	bne.n	8017726 <udp_bind+0x32>
 8017712:	4b38      	ldr	r3, [pc, #224]	; (80177f4 <udp_bind+0x100>)
 8017714:	f240 32b7 	movw	r2, #951	; 0x3b7
 8017718:	4937      	ldr	r1, [pc, #220]	; (80177f8 <udp_bind+0x104>)
 801771a:	4838      	ldr	r0, [pc, #224]	; (80177fc <udp_bind+0x108>)
 801771c:	f002 ffd4 	bl	801a6c8 <iprintf>
 8017720:	f06f 030f 	mvn.w	r3, #15
 8017724:	e060      	b.n	80177e8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8017726:	2300      	movs	r3, #0
 8017728:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801772a:	4b35      	ldr	r3, [pc, #212]	; (8017800 <udp_bind+0x10c>)
 801772c:	681b      	ldr	r3, [r3, #0]
 801772e:	617b      	str	r3, [r7, #20]
 8017730:	e009      	b.n	8017746 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8017732:	68fa      	ldr	r2, [r7, #12]
 8017734:	697b      	ldr	r3, [r7, #20]
 8017736:	429a      	cmp	r2, r3
 8017738:	d102      	bne.n	8017740 <udp_bind+0x4c>
      rebind = 1;
 801773a:	2301      	movs	r3, #1
 801773c:	74fb      	strb	r3, [r7, #19]
      break;
 801773e:	e005      	b.n	801774c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017740:	697b      	ldr	r3, [r7, #20]
 8017742:	68db      	ldr	r3, [r3, #12]
 8017744:	617b      	str	r3, [r7, #20]
 8017746:	697b      	ldr	r3, [r7, #20]
 8017748:	2b00      	cmp	r3, #0
 801774a:	d1f2      	bne.n	8017732 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801774c:	88fb      	ldrh	r3, [r7, #6]
 801774e:	2b00      	cmp	r3, #0
 8017750:	d109      	bne.n	8017766 <udp_bind+0x72>
    port = udp_new_port();
 8017752:	f7ff fc35 	bl	8016fc0 <udp_new_port>
 8017756:	4603      	mov	r3, r0
 8017758:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801775a:	88fb      	ldrh	r3, [r7, #6]
 801775c:	2b00      	cmp	r3, #0
 801775e:	d12c      	bne.n	80177ba <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8017760:	f06f 0307 	mvn.w	r3, #7
 8017764:	e040      	b.n	80177e8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017766:	4b26      	ldr	r3, [pc, #152]	; (8017800 <udp_bind+0x10c>)
 8017768:	681b      	ldr	r3, [r3, #0]
 801776a:	617b      	str	r3, [r7, #20]
 801776c:	e022      	b.n	80177b4 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801776e:	68fa      	ldr	r2, [r7, #12]
 8017770:	697b      	ldr	r3, [r7, #20]
 8017772:	429a      	cmp	r2, r3
 8017774:	d01b      	beq.n	80177ae <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8017776:	697b      	ldr	r3, [r7, #20]
 8017778:	8a5b      	ldrh	r3, [r3, #18]
 801777a:	88fa      	ldrh	r2, [r7, #6]
 801777c:	429a      	cmp	r2, r3
 801777e:	d116      	bne.n	80177ae <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8017780:	697b      	ldr	r3, [r7, #20]
 8017782:	681a      	ldr	r2, [r3, #0]
 8017784:	68bb      	ldr	r3, [r7, #8]
 8017786:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8017788:	429a      	cmp	r2, r3
 801778a:	d00d      	beq.n	80177a8 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801778c:	68bb      	ldr	r3, [r7, #8]
 801778e:	2b00      	cmp	r3, #0
 8017790:	d00a      	beq.n	80177a8 <udp_bind+0xb4>
 8017792:	68bb      	ldr	r3, [r7, #8]
 8017794:	681b      	ldr	r3, [r3, #0]
 8017796:	2b00      	cmp	r3, #0
 8017798:	d006      	beq.n	80177a8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801779a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801779c:	2b00      	cmp	r3, #0
 801779e:	d003      	beq.n	80177a8 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80177a0:	697b      	ldr	r3, [r7, #20]
 80177a2:	681b      	ldr	r3, [r3, #0]
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d102      	bne.n	80177ae <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80177a8:	f06f 0307 	mvn.w	r3, #7
 80177ac:	e01c      	b.n	80177e8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80177ae:	697b      	ldr	r3, [r7, #20]
 80177b0:	68db      	ldr	r3, [r3, #12]
 80177b2:	617b      	str	r3, [r7, #20]
 80177b4:	697b      	ldr	r3, [r7, #20]
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d1d9      	bne.n	801776e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80177ba:	68bb      	ldr	r3, [r7, #8]
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d002      	beq.n	80177c6 <udp_bind+0xd2>
 80177c0:	68bb      	ldr	r3, [r7, #8]
 80177c2:	681b      	ldr	r3, [r3, #0]
 80177c4:	e000      	b.n	80177c8 <udp_bind+0xd4>
 80177c6:	2300      	movs	r3, #0
 80177c8:	68fa      	ldr	r2, [r7, #12]
 80177ca:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80177cc:	68fb      	ldr	r3, [r7, #12]
 80177ce:	88fa      	ldrh	r2, [r7, #6]
 80177d0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80177d2:	7cfb      	ldrb	r3, [r7, #19]
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	d106      	bne.n	80177e6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80177d8:	4b09      	ldr	r3, [pc, #36]	; (8017800 <udp_bind+0x10c>)
 80177da:	681a      	ldr	r2, [r3, #0]
 80177dc:	68fb      	ldr	r3, [r7, #12]
 80177de:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80177e0:	4a07      	ldr	r2, [pc, #28]	; (8017800 <udp_bind+0x10c>)
 80177e2:	68fb      	ldr	r3, [r7, #12]
 80177e4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80177e6:	2300      	movs	r3, #0
}
 80177e8:	4618      	mov	r0, r3
 80177ea:	3718      	adds	r7, #24
 80177ec:	46bd      	mov	sp, r7
 80177ee:	bd80      	pop	{r7, pc}
 80177f0:	0801ef38 	.word	0x0801ef38
 80177f4:	0801e3dc 	.word	0x0801e3dc
 80177f8:	0801e6a4 	.word	0x0801e6a4
 80177fc:	0801e430 	.word	0x0801e430
 8017800:	2000dd5c 	.word	0x2000dd5c

08017804 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8017804:	b580      	push	{r7, lr}
 8017806:	b084      	sub	sp, #16
 8017808:	af00      	add	r7, sp, #0
 801780a:	60f8      	str	r0, [r7, #12]
 801780c:	60b9      	str	r1, [r7, #8]
 801780e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8017810:	68fb      	ldr	r3, [r7, #12]
 8017812:	2b00      	cmp	r3, #0
 8017814:	d107      	bne.n	8017826 <udp_recv+0x22>
 8017816:	4b08      	ldr	r3, [pc, #32]	; (8017838 <udp_recv+0x34>)
 8017818:	f240 428a 	movw	r2, #1162	; 0x48a
 801781c:	4907      	ldr	r1, [pc, #28]	; (801783c <udp_recv+0x38>)
 801781e:	4808      	ldr	r0, [pc, #32]	; (8017840 <udp_recv+0x3c>)
 8017820:	f002 ff52 	bl	801a6c8 <iprintf>
 8017824:	e005      	b.n	8017832 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8017826:	68fb      	ldr	r3, [r7, #12]
 8017828:	68ba      	ldr	r2, [r7, #8]
 801782a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801782c:	68fb      	ldr	r3, [r7, #12]
 801782e:	687a      	ldr	r2, [r7, #4]
 8017830:	61da      	str	r2, [r3, #28]
}
 8017832:	3710      	adds	r7, #16
 8017834:	46bd      	mov	sp, r7
 8017836:	bd80      	pop	{r7, pc}
 8017838:	0801e3dc 	.word	0x0801e3dc
 801783c:	0801e710 	.word	0x0801e710
 8017840:	0801e430 	.word	0x0801e430

08017844 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8017844:	b580      	push	{r7, lr}
 8017846:	b084      	sub	sp, #16
 8017848:	af00      	add	r7, sp, #0
 801784a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801784c:	687b      	ldr	r3, [r7, #4]
 801784e:	2b00      	cmp	r3, #0
 8017850:	d107      	bne.n	8017862 <udp_remove+0x1e>
 8017852:	4b19      	ldr	r3, [pc, #100]	; (80178b8 <udp_remove+0x74>)
 8017854:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8017858:	4918      	ldr	r1, [pc, #96]	; (80178bc <udp_remove+0x78>)
 801785a:	4819      	ldr	r0, [pc, #100]	; (80178c0 <udp_remove+0x7c>)
 801785c:	f002 ff34 	bl	801a6c8 <iprintf>
 8017860:	e026      	b.n	80178b0 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8017862:	4b18      	ldr	r3, [pc, #96]	; (80178c4 <udp_remove+0x80>)
 8017864:	681b      	ldr	r3, [r3, #0]
 8017866:	687a      	ldr	r2, [r7, #4]
 8017868:	429a      	cmp	r2, r3
 801786a:	d105      	bne.n	8017878 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801786c:	4b15      	ldr	r3, [pc, #84]	; (80178c4 <udp_remove+0x80>)
 801786e:	681b      	ldr	r3, [r3, #0]
 8017870:	68db      	ldr	r3, [r3, #12]
 8017872:	4a14      	ldr	r2, [pc, #80]	; (80178c4 <udp_remove+0x80>)
 8017874:	6013      	str	r3, [r2, #0]
 8017876:	e017      	b.n	80178a8 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8017878:	4b12      	ldr	r3, [pc, #72]	; (80178c4 <udp_remove+0x80>)
 801787a:	681b      	ldr	r3, [r3, #0]
 801787c:	60fb      	str	r3, [r7, #12]
 801787e:	e010      	b.n	80178a2 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8017880:	68fb      	ldr	r3, [r7, #12]
 8017882:	68db      	ldr	r3, [r3, #12]
 8017884:	2b00      	cmp	r3, #0
 8017886:	d009      	beq.n	801789c <udp_remove+0x58>
 8017888:	68fb      	ldr	r3, [r7, #12]
 801788a:	68db      	ldr	r3, [r3, #12]
 801788c:	687a      	ldr	r2, [r7, #4]
 801788e:	429a      	cmp	r2, r3
 8017890:	d104      	bne.n	801789c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8017892:	687b      	ldr	r3, [r7, #4]
 8017894:	68da      	ldr	r2, [r3, #12]
 8017896:	68fb      	ldr	r3, [r7, #12]
 8017898:	60da      	str	r2, [r3, #12]
        break;
 801789a:	e005      	b.n	80178a8 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801789c:	68fb      	ldr	r3, [r7, #12]
 801789e:	68db      	ldr	r3, [r3, #12]
 80178a0:	60fb      	str	r3, [r7, #12]
 80178a2:	68fb      	ldr	r3, [r7, #12]
 80178a4:	2b00      	cmp	r3, #0
 80178a6:	d1eb      	bne.n	8017880 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80178a8:	6879      	ldr	r1, [r7, #4]
 80178aa:	2000      	movs	r0, #0
 80178ac:	f7f8 f95a 	bl	800fb64 <memp_free>
}
 80178b0:	3710      	adds	r7, #16
 80178b2:	46bd      	mov	sp, r7
 80178b4:	bd80      	pop	{r7, pc}
 80178b6:	bf00      	nop
 80178b8:	0801e3dc 	.word	0x0801e3dc
 80178bc:	0801e728 	.word	0x0801e728
 80178c0:	0801e430 	.word	0x0801e430
 80178c4:	2000dd5c 	.word	0x2000dd5c

080178c8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80178c8:	b580      	push	{r7, lr}
 80178ca:	b082      	sub	sp, #8
 80178cc:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80178ce:	2000      	movs	r0, #0
 80178d0:	f7f8 f8f6 	bl	800fac0 <memp_malloc>
 80178d4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80178d6:	687b      	ldr	r3, [r7, #4]
 80178d8:	2b00      	cmp	r3, #0
 80178da:	d007      	beq.n	80178ec <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80178dc:	2220      	movs	r2, #32
 80178de:	2100      	movs	r1, #0
 80178e0:	6878      	ldr	r0, [r7, #4]
 80178e2:	f002 fe3f 	bl	801a564 <memset>
    pcb->ttl = UDP_TTL;
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	22ff      	movs	r2, #255	; 0xff
 80178ea:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80178ec:	687b      	ldr	r3, [r7, #4]
}
 80178ee:	4618      	mov	r0, r3
 80178f0:	3708      	adds	r7, #8
 80178f2:	46bd      	mov	sp, r7
 80178f4:	bd80      	pop	{r7, pc}

080178f6 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80178f6:	b580      	push	{r7, lr}
 80178f8:	b084      	sub	sp, #16
 80178fa:	af00      	add	r7, sp, #0
 80178fc:	4603      	mov	r3, r0
 80178fe:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 8017900:	f7ff ffe2 	bl	80178c8 <udp_new>
 8017904:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8017906:	68fb      	ldr	r3, [r7, #12]
}
 8017908:	4618      	mov	r0, r3
 801790a:	3710      	adds	r7, #16
 801790c:	46bd      	mov	sp, r7
 801790e:	bd80      	pop	{r7, pc}

08017910 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8017910:	b480      	push	{r7}
 8017912:	b085      	sub	sp, #20
 8017914:	af00      	add	r7, sp, #0
 8017916:	6078      	str	r0, [r7, #4]
 8017918:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801791a:	687b      	ldr	r3, [r7, #4]
 801791c:	2b00      	cmp	r3, #0
 801791e:	d01e      	beq.n	801795e <udp_netif_ip_addr_changed+0x4e>
 8017920:	687b      	ldr	r3, [r7, #4]
 8017922:	681b      	ldr	r3, [r3, #0]
 8017924:	2b00      	cmp	r3, #0
 8017926:	d01a      	beq.n	801795e <udp_netif_ip_addr_changed+0x4e>
 8017928:	683b      	ldr	r3, [r7, #0]
 801792a:	2b00      	cmp	r3, #0
 801792c:	d017      	beq.n	801795e <udp_netif_ip_addr_changed+0x4e>
 801792e:	683b      	ldr	r3, [r7, #0]
 8017930:	681b      	ldr	r3, [r3, #0]
 8017932:	2b00      	cmp	r3, #0
 8017934:	d013      	beq.n	801795e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8017936:	4b0d      	ldr	r3, [pc, #52]	; (801796c <udp_netif_ip_addr_changed+0x5c>)
 8017938:	681b      	ldr	r3, [r3, #0]
 801793a:	60fb      	str	r3, [r7, #12]
 801793c:	e00c      	b.n	8017958 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801793e:	68fb      	ldr	r3, [r7, #12]
 8017940:	681a      	ldr	r2, [r3, #0]
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	681b      	ldr	r3, [r3, #0]
 8017946:	429a      	cmp	r2, r3
 8017948:	d103      	bne.n	8017952 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801794a:	683b      	ldr	r3, [r7, #0]
 801794c:	681a      	ldr	r2, [r3, #0]
 801794e:	68fb      	ldr	r3, [r7, #12]
 8017950:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8017952:	68fb      	ldr	r3, [r7, #12]
 8017954:	68db      	ldr	r3, [r3, #12]
 8017956:	60fb      	str	r3, [r7, #12]
 8017958:	68fb      	ldr	r3, [r7, #12]
 801795a:	2b00      	cmp	r3, #0
 801795c:	d1ef      	bne.n	801793e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801795e:	bf00      	nop
 8017960:	3714      	adds	r7, #20
 8017962:	46bd      	mov	sp, r7
 8017964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017968:	4770      	bx	lr
 801796a:	bf00      	nop
 801796c:	2000dd5c 	.word	0x2000dd5c

08017970 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8017970:	b580      	push	{r7, lr}
 8017972:	b082      	sub	sp, #8
 8017974:	af00      	add	r7, sp, #0
 8017976:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8017978:	4915      	ldr	r1, [pc, #84]	; (80179d0 <etharp_free_entry+0x60>)
 801797a:	687a      	ldr	r2, [r7, #4]
 801797c:	4613      	mov	r3, r2
 801797e:	005b      	lsls	r3, r3, #1
 8017980:	4413      	add	r3, r2
 8017982:	00db      	lsls	r3, r3, #3
 8017984:	440b      	add	r3, r1
 8017986:	681b      	ldr	r3, [r3, #0]
 8017988:	2b00      	cmp	r3, #0
 801798a:	d013      	beq.n	80179b4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801798c:	4910      	ldr	r1, [pc, #64]	; (80179d0 <etharp_free_entry+0x60>)
 801798e:	687a      	ldr	r2, [r7, #4]
 8017990:	4613      	mov	r3, r2
 8017992:	005b      	lsls	r3, r3, #1
 8017994:	4413      	add	r3, r2
 8017996:	00db      	lsls	r3, r3, #3
 8017998:	440b      	add	r3, r1
 801799a:	681b      	ldr	r3, [r3, #0]
 801799c:	4618      	mov	r0, r3
 801799e:	f7f8 ff21 	bl	80107e4 <pbuf_free>
    arp_table[i].q = NULL;
 80179a2:	490b      	ldr	r1, [pc, #44]	; (80179d0 <etharp_free_entry+0x60>)
 80179a4:	687a      	ldr	r2, [r7, #4]
 80179a6:	4613      	mov	r3, r2
 80179a8:	005b      	lsls	r3, r3, #1
 80179aa:	4413      	add	r3, r2
 80179ac:	00db      	lsls	r3, r3, #3
 80179ae:	440b      	add	r3, r1
 80179b0:	2200      	movs	r2, #0
 80179b2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80179b4:	4906      	ldr	r1, [pc, #24]	; (80179d0 <etharp_free_entry+0x60>)
 80179b6:	687a      	ldr	r2, [r7, #4]
 80179b8:	4613      	mov	r3, r2
 80179ba:	005b      	lsls	r3, r3, #1
 80179bc:	4413      	add	r3, r2
 80179be:	00db      	lsls	r3, r3, #3
 80179c0:	440b      	add	r3, r1
 80179c2:	3314      	adds	r3, #20
 80179c4:	2200      	movs	r2, #0
 80179c6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80179c8:	bf00      	nop
 80179ca:	3708      	adds	r7, #8
 80179cc:	46bd      	mov	sp, r7
 80179ce:	bd80      	pop	{r7, pc}
 80179d0:	200069d4 	.word	0x200069d4

080179d4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80179d4:	b580      	push	{r7, lr}
 80179d6:	b082      	sub	sp, #8
 80179d8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80179da:	2300      	movs	r3, #0
 80179dc:	607b      	str	r3, [r7, #4]
 80179de:	e096      	b.n	8017b0e <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80179e0:	494f      	ldr	r1, [pc, #316]	; (8017b20 <etharp_tmr+0x14c>)
 80179e2:	687a      	ldr	r2, [r7, #4]
 80179e4:	4613      	mov	r3, r2
 80179e6:	005b      	lsls	r3, r3, #1
 80179e8:	4413      	add	r3, r2
 80179ea:	00db      	lsls	r3, r3, #3
 80179ec:	440b      	add	r3, r1
 80179ee:	3314      	adds	r3, #20
 80179f0:	781b      	ldrb	r3, [r3, #0]
 80179f2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80179f4:	78fb      	ldrb	r3, [r7, #3]
 80179f6:	2b00      	cmp	r3, #0
 80179f8:	f000 8086 	beq.w	8017b08 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80179fc:	4948      	ldr	r1, [pc, #288]	; (8017b20 <etharp_tmr+0x14c>)
 80179fe:	687a      	ldr	r2, [r7, #4]
 8017a00:	4613      	mov	r3, r2
 8017a02:	005b      	lsls	r3, r3, #1
 8017a04:	4413      	add	r3, r2
 8017a06:	00db      	lsls	r3, r3, #3
 8017a08:	440b      	add	r3, r1
 8017a0a:	3312      	adds	r3, #18
 8017a0c:	881b      	ldrh	r3, [r3, #0]
 8017a0e:	3301      	adds	r3, #1
 8017a10:	b298      	uxth	r0, r3
 8017a12:	4943      	ldr	r1, [pc, #268]	; (8017b20 <etharp_tmr+0x14c>)
 8017a14:	687a      	ldr	r2, [r7, #4]
 8017a16:	4613      	mov	r3, r2
 8017a18:	005b      	lsls	r3, r3, #1
 8017a1a:	4413      	add	r3, r2
 8017a1c:	00db      	lsls	r3, r3, #3
 8017a1e:	440b      	add	r3, r1
 8017a20:	3312      	adds	r3, #18
 8017a22:	4602      	mov	r2, r0
 8017a24:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017a26:	493e      	ldr	r1, [pc, #248]	; (8017b20 <etharp_tmr+0x14c>)
 8017a28:	687a      	ldr	r2, [r7, #4]
 8017a2a:	4613      	mov	r3, r2
 8017a2c:	005b      	lsls	r3, r3, #1
 8017a2e:	4413      	add	r3, r2
 8017a30:	00db      	lsls	r3, r3, #3
 8017a32:	440b      	add	r3, r1
 8017a34:	3312      	adds	r3, #18
 8017a36:	881b      	ldrh	r3, [r3, #0]
 8017a38:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8017a3c:	d215      	bcs.n	8017a6a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017a3e:	4938      	ldr	r1, [pc, #224]	; (8017b20 <etharp_tmr+0x14c>)
 8017a40:	687a      	ldr	r2, [r7, #4]
 8017a42:	4613      	mov	r3, r2
 8017a44:	005b      	lsls	r3, r3, #1
 8017a46:	4413      	add	r3, r2
 8017a48:	00db      	lsls	r3, r3, #3
 8017a4a:	440b      	add	r3, r1
 8017a4c:	3314      	adds	r3, #20
 8017a4e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017a50:	2b01      	cmp	r3, #1
 8017a52:	d10e      	bne.n	8017a72 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8017a54:	4932      	ldr	r1, [pc, #200]	; (8017b20 <etharp_tmr+0x14c>)
 8017a56:	687a      	ldr	r2, [r7, #4]
 8017a58:	4613      	mov	r3, r2
 8017a5a:	005b      	lsls	r3, r3, #1
 8017a5c:	4413      	add	r3, r2
 8017a5e:	00db      	lsls	r3, r3, #3
 8017a60:	440b      	add	r3, r1
 8017a62:	3312      	adds	r3, #18
 8017a64:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017a66:	2b04      	cmp	r3, #4
 8017a68:	d903      	bls.n	8017a72 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8017a6a:	6878      	ldr	r0, [r7, #4]
 8017a6c:	f7ff ff80 	bl	8017970 <etharp_free_entry>
 8017a70:	e04a      	b.n	8017b08 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8017a72:	492b      	ldr	r1, [pc, #172]	; (8017b20 <etharp_tmr+0x14c>)
 8017a74:	687a      	ldr	r2, [r7, #4]
 8017a76:	4613      	mov	r3, r2
 8017a78:	005b      	lsls	r3, r3, #1
 8017a7a:	4413      	add	r3, r2
 8017a7c:	00db      	lsls	r3, r3, #3
 8017a7e:	440b      	add	r3, r1
 8017a80:	3314      	adds	r3, #20
 8017a82:	781b      	ldrb	r3, [r3, #0]
 8017a84:	2b03      	cmp	r3, #3
 8017a86:	d10a      	bne.n	8017a9e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8017a88:	4925      	ldr	r1, [pc, #148]	; (8017b20 <etharp_tmr+0x14c>)
 8017a8a:	687a      	ldr	r2, [r7, #4]
 8017a8c:	4613      	mov	r3, r2
 8017a8e:	005b      	lsls	r3, r3, #1
 8017a90:	4413      	add	r3, r2
 8017a92:	00db      	lsls	r3, r3, #3
 8017a94:	440b      	add	r3, r1
 8017a96:	3314      	adds	r3, #20
 8017a98:	2204      	movs	r2, #4
 8017a9a:	701a      	strb	r2, [r3, #0]
 8017a9c:	e034      	b.n	8017b08 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8017a9e:	4920      	ldr	r1, [pc, #128]	; (8017b20 <etharp_tmr+0x14c>)
 8017aa0:	687a      	ldr	r2, [r7, #4]
 8017aa2:	4613      	mov	r3, r2
 8017aa4:	005b      	lsls	r3, r3, #1
 8017aa6:	4413      	add	r3, r2
 8017aa8:	00db      	lsls	r3, r3, #3
 8017aaa:	440b      	add	r3, r1
 8017aac:	3314      	adds	r3, #20
 8017aae:	781b      	ldrb	r3, [r3, #0]
 8017ab0:	2b04      	cmp	r3, #4
 8017ab2:	d10a      	bne.n	8017aca <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8017ab4:	491a      	ldr	r1, [pc, #104]	; (8017b20 <etharp_tmr+0x14c>)
 8017ab6:	687a      	ldr	r2, [r7, #4]
 8017ab8:	4613      	mov	r3, r2
 8017aba:	005b      	lsls	r3, r3, #1
 8017abc:	4413      	add	r3, r2
 8017abe:	00db      	lsls	r3, r3, #3
 8017ac0:	440b      	add	r3, r1
 8017ac2:	3314      	adds	r3, #20
 8017ac4:	2202      	movs	r2, #2
 8017ac6:	701a      	strb	r2, [r3, #0]
 8017ac8:	e01e      	b.n	8017b08 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017aca:	4915      	ldr	r1, [pc, #84]	; (8017b20 <etharp_tmr+0x14c>)
 8017acc:	687a      	ldr	r2, [r7, #4]
 8017ace:	4613      	mov	r3, r2
 8017ad0:	005b      	lsls	r3, r3, #1
 8017ad2:	4413      	add	r3, r2
 8017ad4:	00db      	lsls	r3, r3, #3
 8017ad6:	440b      	add	r3, r1
 8017ad8:	3314      	adds	r3, #20
 8017ada:	781b      	ldrb	r3, [r3, #0]
 8017adc:	2b01      	cmp	r3, #1
 8017ade:	d113      	bne.n	8017b08 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8017ae0:	490f      	ldr	r1, [pc, #60]	; (8017b20 <etharp_tmr+0x14c>)
 8017ae2:	687a      	ldr	r2, [r7, #4]
 8017ae4:	4613      	mov	r3, r2
 8017ae6:	005b      	lsls	r3, r3, #1
 8017ae8:	4413      	add	r3, r2
 8017aea:	00db      	lsls	r3, r3, #3
 8017aec:	440b      	add	r3, r1
 8017aee:	3308      	adds	r3, #8
 8017af0:	6818      	ldr	r0, [r3, #0]
 8017af2:	687a      	ldr	r2, [r7, #4]
 8017af4:	4613      	mov	r3, r2
 8017af6:	005b      	lsls	r3, r3, #1
 8017af8:	4413      	add	r3, r2
 8017afa:	00db      	lsls	r3, r3, #3
 8017afc:	4a08      	ldr	r2, [pc, #32]	; (8017b20 <etharp_tmr+0x14c>)
 8017afe:	4413      	add	r3, r2
 8017b00:	3304      	adds	r3, #4
 8017b02:	4619      	mov	r1, r3
 8017b04:	f000 fe6e 	bl	80187e4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	3301      	adds	r3, #1
 8017b0c:	607b      	str	r3, [r7, #4]
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	2b09      	cmp	r3, #9
 8017b12:	f77f af65 	ble.w	80179e0 <etharp_tmr+0xc>
      }
    }
  }
}
 8017b16:	bf00      	nop
 8017b18:	bf00      	nop
 8017b1a:	3708      	adds	r7, #8
 8017b1c:	46bd      	mov	sp, r7
 8017b1e:	bd80      	pop	{r7, pc}
 8017b20:	200069d4 	.word	0x200069d4

08017b24 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8017b24:	b580      	push	{r7, lr}
 8017b26:	b08a      	sub	sp, #40	; 0x28
 8017b28:	af00      	add	r7, sp, #0
 8017b2a:	60f8      	str	r0, [r7, #12]
 8017b2c:	460b      	mov	r3, r1
 8017b2e:	607a      	str	r2, [r7, #4]
 8017b30:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8017b32:	230a      	movs	r3, #10
 8017b34:	84fb      	strh	r3, [r7, #38]	; 0x26
 8017b36:	230a      	movs	r3, #10
 8017b38:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8017b3a:	230a      	movs	r3, #10
 8017b3c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8017b3e:	2300      	movs	r3, #0
 8017b40:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8017b42:	230a      	movs	r3, #10
 8017b44:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8017b46:	2300      	movs	r3, #0
 8017b48:	83bb      	strh	r3, [r7, #28]
 8017b4a:	2300      	movs	r3, #0
 8017b4c:	837b      	strh	r3, [r7, #26]
 8017b4e:	2300      	movs	r3, #0
 8017b50:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017b52:	2300      	movs	r3, #0
 8017b54:	843b      	strh	r3, [r7, #32]
 8017b56:	e0ae      	b.n	8017cb6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8017b58:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017b5c:	49a6      	ldr	r1, [pc, #664]	; (8017df8 <etharp_find_entry+0x2d4>)
 8017b5e:	4613      	mov	r3, r2
 8017b60:	005b      	lsls	r3, r3, #1
 8017b62:	4413      	add	r3, r2
 8017b64:	00db      	lsls	r3, r3, #3
 8017b66:	440b      	add	r3, r1
 8017b68:	3314      	adds	r3, #20
 8017b6a:	781b      	ldrb	r3, [r3, #0]
 8017b6c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8017b6e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017b72:	2b0a      	cmp	r3, #10
 8017b74:	d105      	bne.n	8017b82 <etharp_find_entry+0x5e>
 8017b76:	7dfb      	ldrb	r3, [r7, #23]
 8017b78:	2b00      	cmp	r3, #0
 8017b7a:	d102      	bne.n	8017b82 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8017b7c:	8c3b      	ldrh	r3, [r7, #32]
 8017b7e:	847b      	strh	r3, [r7, #34]	; 0x22
 8017b80:	e095      	b.n	8017cae <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8017b82:	7dfb      	ldrb	r3, [r7, #23]
 8017b84:	2b00      	cmp	r3, #0
 8017b86:	f000 8092 	beq.w	8017cae <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8017b8a:	7dfb      	ldrb	r3, [r7, #23]
 8017b8c:	2b01      	cmp	r3, #1
 8017b8e:	d009      	beq.n	8017ba4 <etharp_find_entry+0x80>
 8017b90:	7dfb      	ldrb	r3, [r7, #23]
 8017b92:	2b01      	cmp	r3, #1
 8017b94:	d806      	bhi.n	8017ba4 <etharp_find_entry+0x80>
 8017b96:	4b99      	ldr	r3, [pc, #612]	; (8017dfc <etharp_find_entry+0x2d8>)
 8017b98:	f240 1223 	movw	r2, #291	; 0x123
 8017b9c:	4998      	ldr	r1, [pc, #608]	; (8017e00 <etharp_find_entry+0x2dc>)
 8017b9e:	4899      	ldr	r0, [pc, #612]	; (8017e04 <etharp_find_entry+0x2e0>)
 8017ba0:	f002 fd92 	bl	801a6c8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8017ba4:	68fb      	ldr	r3, [r7, #12]
 8017ba6:	2b00      	cmp	r3, #0
 8017ba8:	d020      	beq.n	8017bec <etharp_find_entry+0xc8>
 8017baa:	68fb      	ldr	r3, [r7, #12]
 8017bac:	6819      	ldr	r1, [r3, #0]
 8017bae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017bb2:	4891      	ldr	r0, [pc, #580]	; (8017df8 <etharp_find_entry+0x2d4>)
 8017bb4:	4613      	mov	r3, r2
 8017bb6:	005b      	lsls	r3, r3, #1
 8017bb8:	4413      	add	r3, r2
 8017bba:	00db      	lsls	r3, r3, #3
 8017bbc:	4403      	add	r3, r0
 8017bbe:	3304      	adds	r3, #4
 8017bc0:	681b      	ldr	r3, [r3, #0]
 8017bc2:	4299      	cmp	r1, r3
 8017bc4:	d112      	bne.n	8017bec <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d00c      	beq.n	8017be6 <etharp_find_entry+0xc2>
 8017bcc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017bd0:	4989      	ldr	r1, [pc, #548]	; (8017df8 <etharp_find_entry+0x2d4>)
 8017bd2:	4613      	mov	r3, r2
 8017bd4:	005b      	lsls	r3, r3, #1
 8017bd6:	4413      	add	r3, r2
 8017bd8:	00db      	lsls	r3, r3, #3
 8017bda:	440b      	add	r3, r1
 8017bdc:	3308      	adds	r3, #8
 8017bde:	681b      	ldr	r3, [r3, #0]
 8017be0:	687a      	ldr	r2, [r7, #4]
 8017be2:	429a      	cmp	r2, r3
 8017be4:	d102      	bne.n	8017bec <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8017be6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017bea:	e100      	b.n	8017dee <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8017bec:	7dfb      	ldrb	r3, [r7, #23]
 8017bee:	2b01      	cmp	r3, #1
 8017bf0:	d140      	bne.n	8017c74 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8017bf2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017bf6:	4980      	ldr	r1, [pc, #512]	; (8017df8 <etharp_find_entry+0x2d4>)
 8017bf8:	4613      	mov	r3, r2
 8017bfa:	005b      	lsls	r3, r3, #1
 8017bfc:	4413      	add	r3, r2
 8017bfe:	00db      	lsls	r3, r3, #3
 8017c00:	440b      	add	r3, r1
 8017c02:	681b      	ldr	r3, [r3, #0]
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	d01a      	beq.n	8017c3e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8017c08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017c0c:	497a      	ldr	r1, [pc, #488]	; (8017df8 <etharp_find_entry+0x2d4>)
 8017c0e:	4613      	mov	r3, r2
 8017c10:	005b      	lsls	r3, r3, #1
 8017c12:	4413      	add	r3, r2
 8017c14:	00db      	lsls	r3, r3, #3
 8017c16:	440b      	add	r3, r1
 8017c18:	3312      	adds	r3, #18
 8017c1a:	881b      	ldrh	r3, [r3, #0]
 8017c1c:	8bba      	ldrh	r2, [r7, #28]
 8017c1e:	429a      	cmp	r2, r3
 8017c20:	d845      	bhi.n	8017cae <etharp_find_entry+0x18a>
            old_queue = i;
 8017c22:	8c3b      	ldrh	r3, [r7, #32]
 8017c24:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8017c26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017c2a:	4973      	ldr	r1, [pc, #460]	; (8017df8 <etharp_find_entry+0x2d4>)
 8017c2c:	4613      	mov	r3, r2
 8017c2e:	005b      	lsls	r3, r3, #1
 8017c30:	4413      	add	r3, r2
 8017c32:	00db      	lsls	r3, r3, #3
 8017c34:	440b      	add	r3, r1
 8017c36:	3312      	adds	r3, #18
 8017c38:	881b      	ldrh	r3, [r3, #0]
 8017c3a:	83bb      	strh	r3, [r7, #28]
 8017c3c:	e037      	b.n	8017cae <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8017c3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017c42:	496d      	ldr	r1, [pc, #436]	; (8017df8 <etharp_find_entry+0x2d4>)
 8017c44:	4613      	mov	r3, r2
 8017c46:	005b      	lsls	r3, r3, #1
 8017c48:	4413      	add	r3, r2
 8017c4a:	00db      	lsls	r3, r3, #3
 8017c4c:	440b      	add	r3, r1
 8017c4e:	3312      	adds	r3, #18
 8017c50:	881b      	ldrh	r3, [r3, #0]
 8017c52:	8b7a      	ldrh	r2, [r7, #26]
 8017c54:	429a      	cmp	r2, r3
 8017c56:	d82a      	bhi.n	8017cae <etharp_find_entry+0x18a>
            old_pending = i;
 8017c58:	8c3b      	ldrh	r3, [r7, #32]
 8017c5a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8017c5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017c60:	4965      	ldr	r1, [pc, #404]	; (8017df8 <etharp_find_entry+0x2d4>)
 8017c62:	4613      	mov	r3, r2
 8017c64:	005b      	lsls	r3, r3, #1
 8017c66:	4413      	add	r3, r2
 8017c68:	00db      	lsls	r3, r3, #3
 8017c6a:	440b      	add	r3, r1
 8017c6c:	3312      	adds	r3, #18
 8017c6e:	881b      	ldrh	r3, [r3, #0]
 8017c70:	837b      	strh	r3, [r7, #26]
 8017c72:	e01c      	b.n	8017cae <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8017c74:	7dfb      	ldrb	r3, [r7, #23]
 8017c76:	2b01      	cmp	r3, #1
 8017c78:	d919      	bls.n	8017cae <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8017c7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017c7e:	495e      	ldr	r1, [pc, #376]	; (8017df8 <etharp_find_entry+0x2d4>)
 8017c80:	4613      	mov	r3, r2
 8017c82:	005b      	lsls	r3, r3, #1
 8017c84:	4413      	add	r3, r2
 8017c86:	00db      	lsls	r3, r3, #3
 8017c88:	440b      	add	r3, r1
 8017c8a:	3312      	adds	r3, #18
 8017c8c:	881b      	ldrh	r3, [r3, #0]
 8017c8e:	8b3a      	ldrh	r2, [r7, #24]
 8017c90:	429a      	cmp	r2, r3
 8017c92:	d80c      	bhi.n	8017cae <etharp_find_entry+0x18a>
            old_stable = i;
 8017c94:	8c3b      	ldrh	r3, [r7, #32]
 8017c96:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8017c98:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017c9c:	4956      	ldr	r1, [pc, #344]	; (8017df8 <etharp_find_entry+0x2d4>)
 8017c9e:	4613      	mov	r3, r2
 8017ca0:	005b      	lsls	r3, r3, #1
 8017ca2:	4413      	add	r3, r2
 8017ca4:	00db      	lsls	r3, r3, #3
 8017ca6:	440b      	add	r3, r1
 8017ca8:	3312      	adds	r3, #18
 8017caa:	881b      	ldrh	r3, [r3, #0]
 8017cac:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017cae:	8c3b      	ldrh	r3, [r7, #32]
 8017cb0:	3301      	adds	r3, #1
 8017cb2:	b29b      	uxth	r3, r3
 8017cb4:	843b      	strh	r3, [r7, #32]
 8017cb6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017cba:	2b09      	cmp	r3, #9
 8017cbc:	f77f af4c 	ble.w	8017b58 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8017cc0:	7afb      	ldrb	r3, [r7, #11]
 8017cc2:	f003 0302 	and.w	r3, r3, #2
 8017cc6:	2b00      	cmp	r3, #0
 8017cc8:	d108      	bne.n	8017cdc <etharp_find_entry+0x1b8>
 8017cca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017cce:	2b0a      	cmp	r3, #10
 8017cd0:	d107      	bne.n	8017ce2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8017cd2:	7afb      	ldrb	r3, [r7, #11]
 8017cd4:	f003 0301 	and.w	r3, r3, #1
 8017cd8:	2b00      	cmp	r3, #0
 8017cda:	d102      	bne.n	8017ce2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8017cdc:	f04f 33ff 	mov.w	r3, #4294967295
 8017ce0:	e085      	b.n	8017dee <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8017ce2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017ce6:	2b09      	cmp	r3, #9
 8017ce8:	dc02      	bgt.n	8017cf0 <etharp_find_entry+0x1cc>
    i = empty;
 8017cea:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017cec:	843b      	strh	r3, [r7, #32]
 8017cee:	e039      	b.n	8017d64 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8017cf0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8017cf4:	2b09      	cmp	r3, #9
 8017cf6:	dc14      	bgt.n	8017d22 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8017cf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017cfa:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8017cfc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017d00:	493d      	ldr	r1, [pc, #244]	; (8017df8 <etharp_find_entry+0x2d4>)
 8017d02:	4613      	mov	r3, r2
 8017d04:	005b      	lsls	r3, r3, #1
 8017d06:	4413      	add	r3, r2
 8017d08:	00db      	lsls	r3, r3, #3
 8017d0a:	440b      	add	r3, r1
 8017d0c:	681b      	ldr	r3, [r3, #0]
 8017d0e:	2b00      	cmp	r3, #0
 8017d10:	d018      	beq.n	8017d44 <etharp_find_entry+0x220>
 8017d12:	4b3a      	ldr	r3, [pc, #232]	; (8017dfc <etharp_find_entry+0x2d8>)
 8017d14:	f240 126d 	movw	r2, #365	; 0x16d
 8017d18:	493b      	ldr	r1, [pc, #236]	; (8017e08 <etharp_find_entry+0x2e4>)
 8017d1a:	483a      	ldr	r0, [pc, #232]	; (8017e04 <etharp_find_entry+0x2e0>)
 8017d1c:	f002 fcd4 	bl	801a6c8 <iprintf>
 8017d20:	e010      	b.n	8017d44 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8017d22:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8017d26:	2b09      	cmp	r3, #9
 8017d28:	dc02      	bgt.n	8017d30 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8017d2a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017d2c:	843b      	strh	r3, [r7, #32]
 8017d2e:	e009      	b.n	8017d44 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8017d30:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8017d34:	2b09      	cmp	r3, #9
 8017d36:	dc02      	bgt.n	8017d3e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8017d38:	8bfb      	ldrh	r3, [r7, #30]
 8017d3a:	843b      	strh	r3, [r7, #32]
 8017d3c:	e002      	b.n	8017d44 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8017d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8017d42:	e054      	b.n	8017dee <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017d44:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017d48:	2b09      	cmp	r3, #9
 8017d4a:	dd06      	ble.n	8017d5a <etharp_find_entry+0x236>
 8017d4c:	4b2b      	ldr	r3, [pc, #172]	; (8017dfc <etharp_find_entry+0x2d8>)
 8017d4e:	f240 127f 	movw	r2, #383	; 0x17f
 8017d52:	492e      	ldr	r1, [pc, #184]	; (8017e0c <etharp_find_entry+0x2e8>)
 8017d54:	482b      	ldr	r0, [pc, #172]	; (8017e04 <etharp_find_entry+0x2e0>)
 8017d56:	f002 fcb7 	bl	801a6c8 <iprintf>
    etharp_free_entry(i);
 8017d5a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017d5e:	4618      	mov	r0, r3
 8017d60:	f7ff fe06 	bl	8017970 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017d64:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017d68:	2b09      	cmp	r3, #9
 8017d6a:	dd06      	ble.n	8017d7a <etharp_find_entry+0x256>
 8017d6c:	4b23      	ldr	r3, [pc, #140]	; (8017dfc <etharp_find_entry+0x2d8>)
 8017d6e:	f240 1283 	movw	r2, #387	; 0x183
 8017d72:	4926      	ldr	r1, [pc, #152]	; (8017e0c <etharp_find_entry+0x2e8>)
 8017d74:	4823      	ldr	r0, [pc, #140]	; (8017e04 <etharp_find_entry+0x2e0>)
 8017d76:	f002 fca7 	bl	801a6c8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8017d7a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017d7e:	491e      	ldr	r1, [pc, #120]	; (8017df8 <etharp_find_entry+0x2d4>)
 8017d80:	4613      	mov	r3, r2
 8017d82:	005b      	lsls	r3, r3, #1
 8017d84:	4413      	add	r3, r2
 8017d86:	00db      	lsls	r3, r3, #3
 8017d88:	440b      	add	r3, r1
 8017d8a:	3314      	adds	r3, #20
 8017d8c:	781b      	ldrb	r3, [r3, #0]
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	d006      	beq.n	8017da0 <etharp_find_entry+0x27c>
 8017d92:	4b1a      	ldr	r3, [pc, #104]	; (8017dfc <etharp_find_entry+0x2d8>)
 8017d94:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8017d98:	491d      	ldr	r1, [pc, #116]	; (8017e10 <etharp_find_entry+0x2ec>)
 8017d9a:	481a      	ldr	r0, [pc, #104]	; (8017e04 <etharp_find_entry+0x2e0>)
 8017d9c:	f002 fc94 	bl	801a6c8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8017da0:	68fb      	ldr	r3, [r7, #12]
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d00b      	beq.n	8017dbe <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8017da6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017daa:	68fb      	ldr	r3, [r7, #12]
 8017dac:	6819      	ldr	r1, [r3, #0]
 8017dae:	4812      	ldr	r0, [pc, #72]	; (8017df8 <etharp_find_entry+0x2d4>)
 8017db0:	4613      	mov	r3, r2
 8017db2:	005b      	lsls	r3, r3, #1
 8017db4:	4413      	add	r3, r2
 8017db6:	00db      	lsls	r3, r3, #3
 8017db8:	4403      	add	r3, r0
 8017dba:	3304      	adds	r3, #4
 8017dbc:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8017dbe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017dc2:	490d      	ldr	r1, [pc, #52]	; (8017df8 <etharp_find_entry+0x2d4>)
 8017dc4:	4613      	mov	r3, r2
 8017dc6:	005b      	lsls	r3, r3, #1
 8017dc8:	4413      	add	r3, r2
 8017dca:	00db      	lsls	r3, r3, #3
 8017dcc:	440b      	add	r3, r1
 8017dce:	3312      	adds	r3, #18
 8017dd0:	2200      	movs	r2, #0
 8017dd2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8017dd4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017dd8:	4907      	ldr	r1, [pc, #28]	; (8017df8 <etharp_find_entry+0x2d4>)
 8017dda:	4613      	mov	r3, r2
 8017ddc:	005b      	lsls	r3, r3, #1
 8017dde:	4413      	add	r3, r2
 8017de0:	00db      	lsls	r3, r3, #3
 8017de2:	440b      	add	r3, r1
 8017de4:	3308      	adds	r3, #8
 8017de6:	687a      	ldr	r2, [r7, #4]
 8017de8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8017dea:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8017dee:	4618      	mov	r0, r3
 8017df0:	3728      	adds	r7, #40	; 0x28
 8017df2:	46bd      	mov	sp, r7
 8017df4:	bd80      	pop	{r7, pc}
 8017df6:	bf00      	nop
 8017df8:	200069d4 	.word	0x200069d4
 8017dfc:	0801e740 	.word	0x0801e740
 8017e00:	0801e778 	.word	0x0801e778
 8017e04:	0801e7b8 	.word	0x0801e7b8
 8017e08:	0801e7e0 	.word	0x0801e7e0
 8017e0c:	0801e7f8 	.word	0x0801e7f8
 8017e10:	0801e80c 	.word	0x0801e80c

08017e14 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8017e14:	b580      	push	{r7, lr}
 8017e16:	b088      	sub	sp, #32
 8017e18:	af02      	add	r7, sp, #8
 8017e1a:	60f8      	str	r0, [r7, #12]
 8017e1c:	60b9      	str	r1, [r7, #8]
 8017e1e:	607a      	str	r2, [r7, #4]
 8017e20:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8017e22:	68fb      	ldr	r3, [r7, #12]
 8017e24:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017e28:	2b06      	cmp	r3, #6
 8017e2a:	d006      	beq.n	8017e3a <etharp_update_arp_entry+0x26>
 8017e2c:	4b48      	ldr	r3, [pc, #288]	; (8017f50 <etharp_update_arp_entry+0x13c>)
 8017e2e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8017e32:	4948      	ldr	r1, [pc, #288]	; (8017f54 <etharp_update_arp_entry+0x140>)
 8017e34:	4848      	ldr	r0, [pc, #288]	; (8017f58 <etharp_update_arp_entry+0x144>)
 8017e36:	f002 fc47 	bl	801a6c8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8017e3a:	68bb      	ldr	r3, [r7, #8]
 8017e3c:	2b00      	cmp	r3, #0
 8017e3e:	d012      	beq.n	8017e66 <etharp_update_arp_entry+0x52>
 8017e40:	68bb      	ldr	r3, [r7, #8]
 8017e42:	681b      	ldr	r3, [r3, #0]
 8017e44:	2b00      	cmp	r3, #0
 8017e46:	d00e      	beq.n	8017e66 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017e48:	68bb      	ldr	r3, [r7, #8]
 8017e4a:	681b      	ldr	r3, [r3, #0]
 8017e4c:	68f9      	ldr	r1, [r7, #12]
 8017e4e:	4618      	mov	r0, r3
 8017e50:	f001 f8fe 	bl	8019050 <ip4_addr_isbroadcast_u32>
 8017e54:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8017e56:	2b00      	cmp	r3, #0
 8017e58:	d105      	bne.n	8017e66 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8017e5a:	68bb      	ldr	r3, [r7, #8]
 8017e5c:	681b      	ldr	r3, [r3, #0]
 8017e5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017e62:	2be0      	cmp	r3, #224	; 0xe0
 8017e64:	d102      	bne.n	8017e6c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017e66:	f06f 030f 	mvn.w	r3, #15
 8017e6a:	e06c      	b.n	8017f46 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8017e6c:	78fb      	ldrb	r3, [r7, #3]
 8017e6e:	68fa      	ldr	r2, [r7, #12]
 8017e70:	4619      	mov	r1, r3
 8017e72:	68b8      	ldr	r0, [r7, #8]
 8017e74:	f7ff fe56 	bl	8017b24 <etharp_find_entry>
 8017e78:	4603      	mov	r3, r0
 8017e7a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8017e7c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	da02      	bge.n	8017e8a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8017e84:	8afb      	ldrh	r3, [r7, #22]
 8017e86:	b25b      	sxtb	r3, r3
 8017e88:	e05d      	b.n	8017f46 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8017e8a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017e8e:	4933      	ldr	r1, [pc, #204]	; (8017f5c <etharp_update_arp_entry+0x148>)
 8017e90:	4613      	mov	r3, r2
 8017e92:	005b      	lsls	r3, r3, #1
 8017e94:	4413      	add	r3, r2
 8017e96:	00db      	lsls	r3, r3, #3
 8017e98:	440b      	add	r3, r1
 8017e9a:	3314      	adds	r3, #20
 8017e9c:	2202      	movs	r2, #2
 8017e9e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8017ea0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017ea4:	492d      	ldr	r1, [pc, #180]	; (8017f5c <etharp_update_arp_entry+0x148>)
 8017ea6:	4613      	mov	r3, r2
 8017ea8:	005b      	lsls	r3, r3, #1
 8017eaa:	4413      	add	r3, r2
 8017eac:	00db      	lsls	r3, r3, #3
 8017eae:	440b      	add	r3, r1
 8017eb0:	3308      	adds	r3, #8
 8017eb2:	68fa      	ldr	r2, [r7, #12]
 8017eb4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8017eb6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017eba:	4613      	mov	r3, r2
 8017ebc:	005b      	lsls	r3, r3, #1
 8017ebe:	4413      	add	r3, r2
 8017ec0:	00db      	lsls	r3, r3, #3
 8017ec2:	3308      	adds	r3, #8
 8017ec4:	4a25      	ldr	r2, [pc, #148]	; (8017f5c <etharp_update_arp_entry+0x148>)
 8017ec6:	4413      	add	r3, r2
 8017ec8:	3304      	adds	r3, #4
 8017eca:	2206      	movs	r2, #6
 8017ecc:	6879      	ldr	r1, [r7, #4]
 8017ece:	4618      	mov	r0, r3
 8017ed0:	f002 fb20 	bl	801a514 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8017ed4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017ed8:	4920      	ldr	r1, [pc, #128]	; (8017f5c <etharp_update_arp_entry+0x148>)
 8017eda:	4613      	mov	r3, r2
 8017edc:	005b      	lsls	r3, r3, #1
 8017ede:	4413      	add	r3, r2
 8017ee0:	00db      	lsls	r3, r3, #3
 8017ee2:	440b      	add	r3, r1
 8017ee4:	3312      	adds	r3, #18
 8017ee6:	2200      	movs	r2, #0
 8017ee8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8017eea:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017eee:	491b      	ldr	r1, [pc, #108]	; (8017f5c <etharp_update_arp_entry+0x148>)
 8017ef0:	4613      	mov	r3, r2
 8017ef2:	005b      	lsls	r3, r3, #1
 8017ef4:	4413      	add	r3, r2
 8017ef6:	00db      	lsls	r3, r3, #3
 8017ef8:	440b      	add	r3, r1
 8017efa:	681b      	ldr	r3, [r3, #0]
 8017efc:	2b00      	cmp	r3, #0
 8017efe:	d021      	beq.n	8017f44 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8017f00:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017f04:	4915      	ldr	r1, [pc, #84]	; (8017f5c <etharp_update_arp_entry+0x148>)
 8017f06:	4613      	mov	r3, r2
 8017f08:	005b      	lsls	r3, r3, #1
 8017f0a:	4413      	add	r3, r2
 8017f0c:	00db      	lsls	r3, r3, #3
 8017f0e:	440b      	add	r3, r1
 8017f10:	681b      	ldr	r3, [r3, #0]
 8017f12:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8017f14:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017f18:	4910      	ldr	r1, [pc, #64]	; (8017f5c <etharp_update_arp_entry+0x148>)
 8017f1a:	4613      	mov	r3, r2
 8017f1c:	005b      	lsls	r3, r3, #1
 8017f1e:	4413      	add	r3, r2
 8017f20:	00db      	lsls	r3, r3, #3
 8017f22:	440b      	add	r3, r1
 8017f24:	2200      	movs	r2, #0
 8017f26:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8017f28:	68fb      	ldr	r3, [r7, #12]
 8017f2a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8017f2e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017f32:	9300      	str	r3, [sp, #0]
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	6939      	ldr	r1, [r7, #16]
 8017f38:	68f8      	ldr	r0, [r7, #12]
 8017f3a:	f001 ff91 	bl	8019e60 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8017f3e:	6938      	ldr	r0, [r7, #16]
 8017f40:	f7f8 fc50 	bl	80107e4 <pbuf_free>
  }
  return ERR_OK;
 8017f44:	2300      	movs	r3, #0
}
 8017f46:	4618      	mov	r0, r3
 8017f48:	3718      	adds	r7, #24
 8017f4a:	46bd      	mov	sp, r7
 8017f4c:	bd80      	pop	{r7, pc}
 8017f4e:	bf00      	nop
 8017f50:	0801e740 	.word	0x0801e740
 8017f54:	0801e838 	.word	0x0801e838
 8017f58:	0801e7b8 	.word	0x0801e7b8
 8017f5c:	200069d4 	.word	0x200069d4

08017f60 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8017f60:	b580      	push	{r7, lr}
 8017f62:	b084      	sub	sp, #16
 8017f64:	af00      	add	r7, sp, #0
 8017f66:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017f68:	2300      	movs	r3, #0
 8017f6a:	60fb      	str	r3, [r7, #12]
 8017f6c:	e01e      	b.n	8017fac <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8017f6e:	4913      	ldr	r1, [pc, #76]	; (8017fbc <etharp_cleanup_netif+0x5c>)
 8017f70:	68fa      	ldr	r2, [r7, #12]
 8017f72:	4613      	mov	r3, r2
 8017f74:	005b      	lsls	r3, r3, #1
 8017f76:	4413      	add	r3, r2
 8017f78:	00db      	lsls	r3, r3, #3
 8017f7a:	440b      	add	r3, r1
 8017f7c:	3314      	adds	r3, #20
 8017f7e:	781b      	ldrb	r3, [r3, #0]
 8017f80:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8017f82:	7afb      	ldrb	r3, [r7, #11]
 8017f84:	2b00      	cmp	r3, #0
 8017f86:	d00e      	beq.n	8017fa6 <etharp_cleanup_netif+0x46>
 8017f88:	490c      	ldr	r1, [pc, #48]	; (8017fbc <etharp_cleanup_netif+0x5c>)
 8017f8a:	68fa      	ldr	r2, [r7, #12]
 8017f8c:	4613      	mov	r3, r2
 8017f8e:	005b      	lsls	r3, r3, #1
 8017f90:	4413      	add	r3, r2
 8017f92:	00db      	lsls	r3, r3, #3
 8017f94:	440b      	add	r3, r1
 8017f96:	3308      	adds	r3, #8
 8017f98:	681b      	ldr	r3, [r3, #0]
 8017f9a:	687a      	ldr	r2, [r7, #4]
 8017f9c:	429a      	cmp	r2, r3
 8017f9e:	d102      	bne.n	8017fa6 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8017fa0:	68f8      	ldr	r0, [r7, #12]
 8017fa2:	f7ff fce5 	bl	8017970 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017fa6:	68fb      	ldr	r3, [r7, #12]
 8017fa8:	3301      	adds	r3, #1
 8017faa:	60fb      	str	r3, [r7, #12]
 8017fac:	68fb      	ldr	r3, [r7, #12]
 8017fae:	2b09      	cmp	r3, #9
 8017fb0:	dddd      	ble.n	8017f6e <etharp_cleanup_netif+0xe>
    }
  }
}
 8017fb2:	bf00      	nop
 8017fb4:	bf00      	nop
 8017fb6:	3710      	adds	r7, #16
 8017fb8:	46bd      	mov	sp, r7
 8017fba:	bd80      	pop	{r7, pc}
 8017fbc:	200069d4 	.word	0x200069d4

08017fc0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8017fc0:	b5b0      	push	{r4, r5, r7, lr}
 8017fc2:	b08a      	sub	sp, #40	; 0x28
 8017fc4:	af04      	add	r7, sp, #16
 8017fc6:	6078      	str	r0, [r7, #4]
 8017fc8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8017fca:	683b      	ldr	r3, [r7, #0]
 8017fcc:	2b00      	cmp	r3, #0
 8017fce:	d107      	bne.n	8017fe0 <etharp_input+0x20>
 8017fd0:	4b3d      	ldr	r3, [pc, #244]	; (80180c8 <etharp_input+0x108>)
 8017fd2:	f240 228a 	movw	r2, #650	; 0x28a
 8017fd6:	493d      	ldr	r1, [pc, #244]	; (80180cc <etharp_input+0x10c>)
 8017fd8:	483d      	ldr	r0, [pc, #244]	; (80180d0 <etharp_input+0x110>)
 8017fda:	f002 fb75 	bl	801a6c8 <iprintf>
 8017fde:	e06f      	b.n	80180c0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	685b      	ldr	r3, [r3, #4]
 8017fe4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017fe6:	693b      	ldr	r3, [r7, #16]
 8017fe8:	881b      	ldrh	r3, [r3, #0]
 8017fea:	b29b      	uxth	r3, r3
 8017fec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017ff0:	d10c      	bne.n	801800c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017ff2:	693b      	ldr	r3, [r7, #16]
 8017ff4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017ff6:	2b06      	cmp	r3, #6
 8017ff8:	d108      	bne.n	801800c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017ffa:	693b      	ldr	r3, [r7, #16]
 8017ffc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8017ffe:	2b04      	cmp	r3, #4
 8018000:	d104      	bne.n	801800c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8018002:	693b      	ldr	r3, [r7, #16]
 8018004:	885b      	ldrh	r3, [r3, #2]
 8018006:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8018008:	2b08      	cmp	r3, #8
 801800a:	d003      	beq.n	8018014 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801800c:	6878      	ldr	r0, [r7, #4]
 801800e:	f7f8 fbe9 	bl	80107e4 <pbuf_free>
    return;
 8018012:	e055      	b.n	80180c0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8018014:	693b      	ldr	r3, [r7, #16]
 8018016:	330e      	adds	r3, #14
 8018018:	681b      	ldr	r3, [r3, #0]
 801801a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801801c:	693b      	ldr	r3, [r7, #16]
 801801e:	3318      	adds	r3, #24
 8018020:	681b      	ldr	r3, [r3, #0]
 8018022:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018024:	683b      	ldr	r3, [r7, #0]
 8018026:	3304      	adds	r3, #4
 8018028:	681b      	ldr	r3, [r3, #0]
 801802a:	2b00      	cmp	r3, #0
 801802c:	d102      	bne.n	8018034 <etharp_input+0x74>
    for_us = 0;
 801802e:	2300      	movs	r3, #0
 8018030:	75fb      	strb	r3, [r7, #23]
 8018032:	e009      	b.n	8018048 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8018034:	68ba      	ldr	r2, [r7, #8]
 8018036:	683b      	ldr	r3, [r7, #0]
 8018038:	3304      	adds	r3, #4
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	429a      	cmp	r2, r3
 801803e:	bf0c      	ite	eq
 8018040:	2301      	moveq	r3, #1
 8018042:	2300      	movne	r3, #0
 8018044:	b2db      	uxtb	r3, r3
 8018046:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8018048:	693b      	ldr	r3, [r7, #16]
 801804a:	f103 0208 	add.w	r2, r3, #8
 801804e:	7dfb      	ldrb	r3, [r7, #23]
 8018050:	2b00      	cmp	r3, #0
 8018052:	d001      	beq.n	8018058 <etharp_input+0x98>
 8018054:	2301      	movs	r3, #1
 8018056:	e000      	b.n	801805a <etharp_input+0x9a>
 8018058:	2302      	movs	r3, #2
 801805a:	f107 010c 	add.w	r1, r7, #12
 801805e:	6838      	ldr	r0, [r7, #0]
 8018060:	f7ff fed8 	bl	8017e14 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8018064:	693b      	ldr	r3, [r7, #16]
 8018066:	88db      	ldrh	r3, [r3, #6]
 8018068:	b29b      	uxth	r3, r3
 801806a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801806e:	d003      	beq.n	8018078 <etharp_input+0xb8>
 8018070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018074:	d01e      	beq.n	80180b4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8018076:	e020      	b.n	80180ba <etharp_input+0xfa>
      if (for_us) {
 8018078:	7dfb      	ldrb	r3, [r7, #23]
 801807a:	2b00      	cmp	r3, #0
 801807c:	d01c      	beq.n	80180b8 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801807e:	683b      	ldr	r3, [r7, #0]
 8018080:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8018084:	693b      	ldr	r3, [r7, #16]
 8018086:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801808a:	683b      	ldr	r3, [r7, #0]
 801808c:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8018090:	683b      	ldr	r3, [r7, #0]
 8018092:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8018094:	693a      	ldr	r2, [r7, #16]
 8018096:	3208      	adds	r2, #8
        etharp_raw(netif,
 8018098:	2102      	movs	r1, #2
 801809a:	9103      	str	r1, [sp, #12]
 801809c:	f107 010c 	add.w	r1, r7, #12
 80180a0:	9102      	str	r1, [sp, #8]
 80180a2:	9201      	str	r2, [sp, #4]
 80180a4:	9300      	str	r3, [sp, #0]
 80180a6:	462b      	mov	r3, r5
 80180a8:	4622      	mov	r2, r4
 80180aa:	4601      	mov	r1, r0
 80180ac:	6838      	ldr	r0, [r7, #0]
 80180ae:	f000 faeb 	bl	8018688 <etharp_raw>
      break;
 80180b2:	e001      	b.n	80180b8 <etharp_input+0xf8>
      break;
 80180b4:	bf00      	nop
 80180b6:	e000      	b.n	80180ba <etharp_input+0xfa>
      break;
 80180b8:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80180ba:	6878      	ldr	r0, [r7, #4]
 80180bc:	f7f8 fb92 	bl	80107e4 <pbuf_free>
}
 80180c0:	3718      	adds	r7, #24
 80180c2:	46bd      	mov	sp, r7
 80180c4:	bdb0      	pop	{r4, r5, r7, pc}
 80180c6:	bf00      	nop
 80180c8:	0801e740 	.word	0x0801e740
 80180cc:	0801e890 	.word	0x0801e890
 80180d0:	0801e7b8 	.word	0x0801e7b8

080180d4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80180d4:	b580      	push	{r7, lr}
 80180d6:	b086      	sub	sp, #24
 80180d8:	af02      	add	r7, sp, #8
 80180da:	60f8      	str	r0, [r7, #12]
 80180dc:	60b9      	str	r1, [r7, #8]
 80180de:	4613      	mov	r3, r2
 80180e0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80180e2:	79fa      	ldrb	r2, [r7, #7]
 80180e4:	4944      	ldr	r1, [pc, #272]	; (80181f8 <etharp_output_to_arp_index+0x124>)
 80180e6:	4613      	mov	r3, r2
 80180e8:	005b      	lsls	r3, r3, #1
 80180ea:	4413      	add	r3, r2
 80180ec:	00db      	lsls	r3, r3, #3
 80180ee:	440b      	add	r3, r1
 80180f0:	3314      	adds	r3, #20
 80180f2:	781b      	ldrb	r3, [r3, #0]
 80180f4:	2b01      	cmp	r3, #1
 80180f6:	d806      	bhi.n	8018106 <etharp_output_to_arp_index+0x32>
 80180f8:	4b40      	ldr	r3, [pc, #256]	; (80181fc <etharp_output_to_arp_index+0x128>)
 80180fa:	f240 22ee 	movw	r2, #750	; 0x2ee
 80180fe:	4940      	ldr	r1, [pc, #256]	; (8018200 <etharp_output_to_arp_index+0x12c>)
 8018100:	4840      	ldr	r0, [pc, #256]	; (8018204 <etharp_output_to_arp_index+0x130>)
 8018102:	f002 fae1 	bl	801a6c8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8018106:	79fa      	ldrb	r2, [r7, #7]
 8018108:	493b      	ldr	r1, [pc, #236]	; (80181f8 <etharp_output_to_arp_index+0x124>)
 801810a:	4613      	mov	r3, r2
 801810c:	005b      	lsls	r3, r3, #1
 801810e:	4413      	add	r3, r2
 8018110:	00db      	lsls	r3, r3, #3
 8018112:	440b      	add	r3, r1
 8018114:	3314      	adds	r3, #20
 8018116:	781b      	ldrb	r3, [r3, #0]
 8018118:	2b02      	cmp	r3, #2
 801811a:	d153      	bne.n	80181c4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801811c:	79fa      	ldrb	r2, [r7, #7]
 801811e:	4936      	ldr	r1, [pc, #216]	; (80181f8 <etharp_output_to_arp_index+0x124>)
 8018120:	4613      	mov	r3, r2
 8018122:	005b      	lsls	r3, r3, #1
 8018124:	4413      	add	r3, r2
 8018126:	00db      	lsls	r3, r3, #3
 8018128:	440b      	add	r3, r1
 801812a:	3312      	adds	r3, #18
 801812c:	881b      	ldrh	r3, [r3, #0]
 801812e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8018132:	d919      	bls.n	8018168 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8018134:	79fa      	ldrb	r2, [r7, #7]
 8018136:	4613      	mov	r3, r2
 8018138:	005b      	lsls	r3, r3, #1
 801813a:	4413      	add	r3, r2
 801813c:	00db      	lsls	r3, r3, #3
 801813e:	4a2e      	ldr	r2, [pc, #184]	; (80181f8 <etharp_output_to_arp_index+0x124>)
 8018140:	4413      	add	r3, r2
 8018142:	3304      	adds	r3, #4
 8018144:	4619      	mov	r1, r3
 8018146:	68f8      	ldr	r0, [r7, #12]
 8018148:	f000 fb4c 	bl	80187e4 <etharp_request>
 801814c:	4603      	mov	r3, r0
 801814e:	2b00      	cmp	r3, #0
 8018150:	d138      	bne.n	80181c4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018152:	79fa      	ldrb	r2, [r7, #7]
 8018154:	4928      	ldr	r1, [pc, #160]	; (80181f8 <etharp_output_to_arp_index+0x124>)
 8018156:	4613      	mov	r3, r2
 8018158:	005b      	lsls	r3, r3, #1
 801815a:	4413      	add	r3, r2
 801815c:	00db      	lsls	r3, r3, #3
 801815e:	440b      	add	r3, r1
 8018160:	3314      	adds	r3, #20
 8018162:	2203      	movs	r2, #3
 8018164:	701a      	strb	r2, [r3, #0]
 8018166:	e02d      	b.n	80181c4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8018168:	79fa      	ldrb	r2, [r7, #7]
 801816a:	4923      	ldr	r1, [pc, #140]	; (80181f8 <etharp_output_to_arp_index+0x124>)
 801816c:	4613      	mov	r3, r2
 801816e:	005b      	lsls	r3, r3, #1
 8018170:	4413      	add	r3, r2
 8018172:	00db      	lsls	r3, r3, #3
 8018174:	440b      	add	r3, r1
 8018176:	3312      	adds	r3, #18
 8018178:	881b      	ldrh	r3, [r3, #0]
 801817a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801817e:	d321      	bcc.n	80181c4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8018180:	79fa      	ldrb	r2, [r7, #7]
 8018182:	4613      	mov	r3, r2
 8018184:	005b      	lsls	r3, r3, #1
 8018186:	4413      	add	r3, r2
 8018188:	00db      	lsls	r3, r3, #3
 801818a:	4a1b      	ldr	r2, [pc, #108]	; (80181f8 <etharp_output_to_arp_index+0x124>)
 801818c:	4413      	add	r3, r2
 801818e:	1d19      	adds	r1, r3, #4
 8018190:	79fa      	ldrb	r2, [r7, #7]
 8018192:	4613      	mov	r3, r2
 8018194:	005b      	lsls	r3, r3, #1
 8018196:	4413      	add	r3, r2
 8018198:	00db      	lsls	r3, r3, #3
 801819a:	3308      	adds	r3, #8
 801819c:	4a16      	ldr	r2, [pc, #88]	; (80181f8 <etharp_output_to_arp_index+0x124>)
 801819e:	4413      	add	r3, r2
 80181a0:	3304      	adds	r3, #4
 80181a2:	461a      	mov	r2, r3
 80181a4:	68f8      	ldr	r0, [r7, #12]
 80181a6:	f000 fafb 	bl	80187a0 <etharp_request_dst>
 80181aa:	4603      	mov	r3, r0
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d109      	bne.n	80181c4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80181b0:	79fa      	ldrb	r2, [r7, #7]
 80181b2:	4911      	ldr	r1, [pc, #68]	; (80181f8 <etharp_output_to_arp_index+0x124>)
 80181b4:	4613      	mov	r3, r2
 80181b6:	005b      	lsls	r3, r3, #1
 80181b8:	4413      	add	r3, r2
 80181ba:	00db      	lsls	r3, r3, #3
 80181bc:	440b      	add	r3, r1
 80181be:	3314      	adds	r3, #20
 80181c0:	2203      	movs	r2, #3
 80181c2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80181c4:	68fb      	ldr	r3, [r7, #12]
 80181c6:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80181ca:	79fa      	ldrb	r2, [r7, #7]
 80181cc:	4613      	mov	r3, r2
 80181ce:	005b      	lsls	r3, r3, #1
 80181d0:	4413      	add	r3, r2
 80181d2:	00db      	lsls	r3, r3, #3
 80181d4:	3308      	adds	r3, #8
 80181d6:	4a08      	ldr	r2, [pc, #32]	; (80181f8 <etharp_output_to_arp_index+0x124>)
 80181d8:	4413      	add	r3, r2
 80181da:	3304      	adds	r3, #4
 80181dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80181e0:	9200      	str	r2, [sp, #0]
 80181e2:	460a      	mov	r2, r1
 80181e4:	68b9      	ldr	r1, [r7, #8]
 80181e6:	68f8      	ldr	r0, [r7, #12]
 80181e8:	f001 fe3a 	bl	8019e60 <ethernet_output>
 80181ec:	4603      	mov	r3, r0
}
 80181ee:	4618      	mov	r0, r3
 80181f0:	3710      	adds	r7, #16
 80181f2:	46bd      	mov	sp, r7
 80181f4:	bd80      	pop	{r7, pc}
 80181f6:	bf00      	nop
 80181f8:	200069d4 	.word	0x200069d4
 80181fc:	0801e740 	.word	0x0801e740
 8018200:	0801e8b0 	.word	0x0801e8b0
 8018204:	0801e7b8 	.word	0x0801e7b8

08018208 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8018208:	b580      	push	{r7, lr}
 801820a:	b08a      	sub	sp, #40	; 0x28
 801820c:	af02      	add	r7, sp, #8
 801820e:	60f8      	str	r0, [r7, #12]
 8018210:	60b9      	str	r1, [r7, #8]
 8018212:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8018214:	687b      	ldr	r3, [r7, #4]
 8018216:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018218:	68fb      	ldr	r3, [r7, #12]
 801821a:	2b00      	cmp	r3, #0
 801821c:	d106      	bne.n	801822c <etharp_output+0x24>
 801821e:	4b73      	ldr	r3, [pc, #460]	; (80183ec <etharp_output+0x1e4>)
 8018220:	f240 321e 	movw	r2, #798	; 0x31e
 8018224:	4972      	ldr	r1, [pc, #456]	; (80183f0 <etharp_output+0x1e8>)
 8018226:	4873      	ldr	r0, [pc, #460]	; (80183f4 <etharp_output+0x1ec>)
 8018228:	f002 fa4e 	bl	801a6c8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801822c:	68bb      	ldr	r3, [r7, #8]
 801822e:	2b00      	cmp	r3, #0
 8018230:	d106      	bne.n	8018240 <etharp_output+0x38>
 8018232:	4b6e      	ldr	r3, [pc, #440]	; (80183ec <etharp_output+0x1e4>)
 8018234:	f240 321f 	movw	r2, #799	; 0x31f
 8018238:	496f      	ldr	r1, [pc, #444]	; (80183f8 <etharp_output+0x1f0>)
 801823a:	486e      	ldr	r0, [pc, #440]	; (80183f4 <etharp_output+0x1ec>)
 801823c:	f002 fa44 	bl	801a6c8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8018240:	687b      	ldr	r3, [r7, #4]
 8018242:	2b00      	cmp	r3, #0
 8018244:	d106      	bne.n	8018254 <etharp_output+0x4c>
 8018246:	4b69      	ldr	r3, [pc, #420]	; (80183ec <etharp_output+0x1e4>)
 8018248:	f44f 7248 	mov.w	r2, #800	; 0x320
 801824c:	496b      	ldr	r1, [pc, #428]	; (80183fc <etharp_output+0x1f4>)
 801824e:	4869      	ldr	r0, [pc, #420]	; (80183f4 <etharp_output+0x1ec>)
 8018250:	f002 fa3a 	bl	801a6c8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	681b      	ldr	r3, [r3, #0]
 8018258:	68f9      	ldr	r1, [r7, #12]
 801825a:	4618      	mov	r0, r3
 801825c:	f000 fef8 	bl	8019050 <ip4_addr_isbroadcast_u32>
 8018260:	4603      	mov	r3, r0
 8018262:	2b00      	cmp	r3, #0
 8018264:	d002      	beq.n	801826c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8018266:	4b66      	ldr	r3, [pc, #408]	; (8018400 <etharp_output+0x1f8>)
 8018268:	61fb      	str	r3, [r7, #28]
 801826a:	e0af      	b.n	80183cc <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	681b      	ldr	r3, [r3, #0]
 8018270:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018274:	2be0      	cmp	r3, #224	; 0xe0
 8018276:	d118      	bne.n	80182aa <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8018278:	2301      	movs	r3, #1
 801827a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801827c:	2300      	movs	r3, #0
 801827e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8018280:	235e      	movs	r3, #94	; 0x5e
 8018282:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8018284:	687b      	ldr	r3, [r7, #4]
 8018286:	3301      	adds	r3, #1
 8018288:	781b      	ldrb	r3, [r3, #0]
 801828a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801828e:	b2db      	uxtb	r3, r3
 8018290:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	3302      	adds	r3, #2
 8018296:	781b      	ldrb	r3, [r3, #0]
 8018298:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801829a:	687b      	ldr	r3, [r7, #4]
 801829c:	3303      	adds	r3, #3
 801829e:	781b      	ldrb	r3, [r3, #0]
 80182a0:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80182a2:	f107 0310 	add.w	r3, r7, #16
 80182a6:	61fb      	str	r3, [r7, #28]
 80182a8:	e090      	b.n	80183cc <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80182aa:	687b      	ldr	r3, [r7, #4]
 80182ac:	681a      	ldr	r2, [r3, #0]
 80182ae:	68fb      	ldr	r3, [r7, #12]
 80182b0:	3304      	adds	r3, #4
 80182b2:	681b      	ldr	r3, [r3, #0]
 80182b4:	405a      	eors	r2, r3
 80182b6:	68fb      	ldr	r3, [r7, #12]
 80182b8:	3308      	adds	r3, #8
 80182ba:	681b      	ldr	r3, [r3, #0]
 80182bc:	4013      	ands	r3, r2
 80182be:	2b00      	cmp	r3, #0
 80182c0:	d012      	beq.n	80182e8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	681b      	ldr	r3, [r3, #0]
 80182c6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80182c8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80182cc:	4293      	cmp	r3, r2
 80182ce:	d00b      	beq.n	80182e8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80182d0:	68fb      	ldr	r3, [r7, #12]
 80182d2:	330c      	adds	r3, #12
 80182d4:	681b      	ldr	r3, [r3, #0]
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d003      	beq.n	80182e2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80182da:	68fb      	ldr	r3, [r7, #12]
 80182dc:	330c      	adds	r3, #12
 80182de:	61bb      	str	r3, [r7, #24]
 80182e0:	e002      	b.n	80182e8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80182e2:	f06f 0303 	mvn.w	r3, #3
 80182e6:	e07d      	b.n	80183e4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80182e8:	4b46      	ldr	r3, [pc, #280]	; (8018404 <etharp_output+0x1fc>)
 80182ea:	781b      	ldrb	r3, [r3, #0]
 80182ec:	4619      	mov	r1, r3
 80182ee:	4a46      	ldr	r2, [pc, #280]	; (8018408 <etharp_output+0x200>)
 80182f0:	460b      	mov	r3, r1
 80182f2:	005b      	lsls	r3, r3, #1
 80182f4:	440b      	add	r3, r1
 80182f6:	00db      	lsls	r3, r3, #3
 80182f8:	4413      	add	r3, r2
 80182fa:	3314      	adds	r3, #20
 80182fc:	781b      	ldrb	r3, [r3, #0]
 80182fe:	2b01      	cmp	r3, #1
 8018300:	d925      	bls.n	801834e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018302:	4b40      	ldr	r3, [pc, #256]	; (8018404 <etharp_output+0x1fc>)
 8018304:	781b      	ldrb	r3, [r3, #0]
 8018306:	4619      	mov	r1, r3
 8018308:	4a3f      	ldr	r2, [pc, #252]	; (8018408 <etharp_output+0x200>)
 801830a:	460b      	mov	r3, r1
 801830c:	005b      	lsls	r3, r3, #1
 801830e:	440b      	add	r3, r1
 8018310:	00db      	lsls	r3, r3, #3
 8018312:	4413      	add	r3, r2
 8018314:	3308      	adds	r3, #8
 8018316:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018318:	68fa      	ldr	r2, [r7, #12]
 801831a:	429a      	cmp	r2, r3
 801831c:	d117      	bne.n	801834e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801831e:	69bb      	ldr	r3, [r7, #24]
 8018320:	681a      	ldr	r2, [r3, #0]
 8018322:	4b38      	ldr	r3, [pc, #224]	; (8018404 <etharp_output+0x1fc>)
 8018324:	781b      	ldrb	r3, [r3, #0]
 8018326:	4618      	mov	r0, r3
 8018328:	4937      	ldr	r1, [pc, #220]	; (8018408 <etharp_output+0x200>)
 801832a:	4603      	mov	r3, r0
 801832c:	005b      	lsls	r3, r3, #1
 801832e:	4403      	add	r3, r0
 8018330:	00db      	lsls	r3, r3, #3
 8018332:	440b      	add	r3, r1
 8018334:	3304      	adds	r3, #4
 8018336:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018338:	429a      	cmp	r2, r3
 801833a:	d108      	bne.n	801834e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801833c:	4b31      	ldr	r3, [pc, #196]	; (8018404 <etharp_output+0x1fc>)
 801833e:	781b      	ldrb	r3, [r3, #0]
 8018340:	461a      	mov	r2, r3
 8018342:	68b9      	ldr	r1, [r7, #8]
 8018344:	68f8      	ldr	r0, [r7, #12]
 8018346:	f7ff fec5 	bl	80180d4 <etharp_output_to_arp_index>
 801834a:	4603      	mov	r3, r0
 801834c:	e04a      	b.n	80183e4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801834e:	2300      	movs	r3, #0
 8018350:	75fb      	strb	r3, [r7, #23]
 8018352:	e031      	b.n	80183b8 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018354:	7dfa      	ldrb	r2, [r7, #23]
 8018356:	492c      	ldr	r1, [pc, #176]	; (8018408 <etharp_output+0x200>)
 8018358:	4613      	mov	r3, r2
 801835a:	005b      	lsls	r3, r3, #1
 801835c:	4413      	add	r3, r2
 801835e:	00db      	lsls	r3, r3, #3
 8018360:	440b      	add	r3, r1
 8018362:	3314      	adds	r3, #20
 8018364:	781b      	ldrb	r3, [r3, #0]
 8018366:	2b01      	cmp	r3, #1
 8018368:	d923      	bls.n	80183b2 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801836a:	7dfa      	ldrb	r2, [r7, #23]
 801836c:	4926      	ldr	r1, [pc, #152]	; (8018408 <etharp_output+0x200>)
 801836e:	4613      	mov	r3, r2
 8018370:	005b      	lsls	r3, r3, #1
 8018372:	4413      	add	r3, r2
 8018374:	00db      	lsls	r3, r3, #3
 8018376:	440b      	add	r3, r1
 8018378:	3308      	adds	r3, #8
 801837a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801837c:	68fa      	ldr	r2, [r7, #12]
 801837e:	429a      	cmp	r2, r3
 8018380:	d117      	bne.n	80183b2 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8018382:	69bb      	ldr	r3, [r7, #24]
 8018384:	6819      	ldr	r1, [r3, #0]
 8018386:	7dfa      	ldrb	r2, [r7, #23]
 8018388:	481f      	ldr	r0, [pc, #124]	; (8018408 <etharp_output+0x200>)
 801838a:	4613      	mov	r3, r2
 801838c:	005b      	lsls	r3, r3, #1
 801838e:	4413      	add	r3, r2
 8018390:	00db      	lsls	r3, r3, #3
 8018392:	4403      	add	r3, r0
 8018394:	3304      	adds	r3, #4
 8018396:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8018398:	4299      	cmp	r1, r3
 801839a:	d10a      	bne.n	80183b2 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801839c:	4a19      	ldr	r2, [pc, #100]	; (8018404 <etharp_output+0x1fc>)
 801839e:	7dfb      	ldrb	r3, [r7, #23]
 80183a0:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80183a2:	7dfb      	ldrb	r3, [r7, #23]
 80183a4:	461a      	mov	r2, r3
 80183a6:	68b9      	ldr	r1, [r7, #8]
 80183a8:	68f8      	ldr	r0, [r7, #12]
 80183aa:	f7ff fe93 	bl	80180d4 <etharp_output_to_arp_index>
 80183ae:	4603      	mov	r3, r0
 80183b0:	e018      	b.n	80183e4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80183b2:	7dfb      	ldrb	r3, [r7, #23]
 80183b4:	3301      	adds	r3, #1
 80183b6:	75fb      	strb	r3, [r7, #23]
 80183b8:	7dfb      	ldrb	r3, [r7, #23]
 80183ba:	2b09      	cmp	r3, #9
 80183bc:	d9ca      	bls.n	8018354 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80183be:	68ba      	ldr	r2, [r7, #8]
 80183c0:	69b9      	ldr	r1, [r7, #24]
 80183c2:	68f8      	ldr	r0, [r7, #12]
 80183c4:	f000 f822 	bl	801840c <etharp_query>
 80183c8:	4603      	mov	r3, r0
 80183ca:	e00b      	b.n	80183e4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80183cc:	68fb      	ldr	r3, [r7, #12]
 80183ce:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80183d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80183d6:	9300      	str	r3, [sp, #0]
 80183d8:	69fb      	ldr	r3, [r7, #28]
 80183da:	68b9      	ldr	r1, [r7, #8]
 80183dc:	68f8      	ldr	r0, [r7, #12]
 80183de:	f001 fd3f 	bl	8019e60 <ethernet_output>
 80183e2:	4603      	mov	r3, r0
}
 80183e4:	4618      	mov	r0, r3
 80183e6:	3720      	adds	r7, #32
 80183e8:	46bd      	mov	sp, r7
 80183ea:	bd80      	pop	{r7, pc}
 80183ec:	0801e740 	.word	0x0801e740
 80183f0:	0801e890 	.word	0x0801e890
 80183f4:	0801e7b8 	.word	0x0801e7b8
 80183f8:	0801e8e0 	.word	0x0801e8e0
 80183fc:	0801e880 	.word	0x0801e880
 8018400:	0801ef3c 	.word	0x0801ef3c
 8018404:	20006ac4 	.word	0x20006ac4
 8018408:	200069d4 	.word	0x200069d4

0801840c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801840c:	b580      	push	{r7, lr}
 801840e:	b08c      	sub	sp, #48	; 0x30
 8018410:	af02      	add	r7, sp, #8
 8018412:	60f8      	str	r0, [r7, #12]
 8018414:	60b9      	str	r1, [r7, #8]
 8018416:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8018418:	68fb      	ldr	r3, [r7, #12]
 801841a:	3326      	adds	r3, #38	; 0x26
 801841c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801841e:	23ff      	movs	r3, #255	; 0xff
 8018420:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8018424:	2300      	movs	r3, #0
 8018426:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018428:	68bb      	ldr	r3, [r7, #8]
 801842a:	681b      	ldr	r3, [r3, #0]
 801842c:	68f9      	ldr	r1, [r7, #12]
 801842e:	4618      	mov	r0, r3
 8018430:	f000 fe0e 	bl	8019050 <ip4_addr_isbroadcast_u32>
 8018434:	4603      	mov	r3, r0
 8018436:	2b00      	cmp	r3, #0
 8018438:	d10c      	bne.n	8018454 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801843a:	68bb      	ldr	r3, [r7, #8]
 801843c:	681b      	ldr	r3, [r3, #0]
 801843e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018442:	2be0      	cmp	r3, #224	; 0xe0
 8018444:	d006      	beq.n	8018454 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018446:	68bb      	ldr	r3, [r7, #8]
 8018448:	2b00      	cmp	r3, #0
 801844a:	d003      	beq.n	8018454 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801844c:	68bb      	ldr	r3, [r7, #8]
 801844e:	681b      	ldr	r3, [r3, #0]
 8018450:	2b00      	cmp	r3, #0
 8018452:	d102      	bne.n	801845a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018454:	f06f 030f 	mvn.w	r3, #15
 8018458:	e101      	b.n	801865e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801845a:	68fa      	ldr	r2, [r7, #12]
 801845c:	2101      	movs	r1, #1
 801845e:	68b8      	ldr	r0, [r7, #8]
 8018460:	f7ff fb60 	bl	8017b24 <etharp_find_entry>
 8018464:	4603      	mov	r3, r0
 8018466:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8018468:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801846c:	2b00      	cmp	r3, #0
 801846e:	da02      	bge.n	8018476 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8018470:	8a7b      	ldrh	r3, [r7, #18]
 8018472:	b25b      	sxtb	r3, r3
 8018474:	e0f3      	b.n	801865e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8018476:	8a7b      	ldrh	r3, [r7, #18]
 8018478:	2b7e      	cmp	r3, #126	; 0x7e
 801847a:	d906      	bls.n	801848a <etharp_query+0x7e>
 801847c:	4b7a      	ldr	r3, [pc, #488]	; (8018668 <etharp_query+0x25c>)
 801847e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8018482:	497a      	ldr	r1, [pc, #488]	; (801866c <etharp_query+0x260>)
 8018484:	487a      	ldr	r0, [pc, #488]	; (8018670 <etharp_query+0x264>)
 8018486:	f002 f91f 	bl	801a6c8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801848a:	8a7b      	ldrh	r3, [r7, #18]
 801848c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801848e:	7c7a      	ldrb	r2, [r7, #17]
 8018490:	4978      	ldr	r1, [pc, #480]	; (8018674 <etharp_query+0x268>)
 8018492:	4613      	mov	r3, r2
 8018494:	005b      	lsls	r3, r3, #1
 8018496:	4413      	add	r3, r2
 8018498:	00db      	lsls	r3, r3, #3
 801849a:	440b      	add	r3, r1
 801849c:	3314      	adds	r3, #20
 801849e:	781b      	ldrb	r3, [r3, #0]
 80184a0:	2b00      	cmp	r3, #0
 80184a2:	d115      	bne.n	80184d0 <etharp_query+0xc4>
    is_new_entry = 1;
 80184a4:	2301      	movs	r3, #1
 80184a6:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80184a8:	7c7a      	ldrb	r2, [r7, #17]
 80184aa:	4972      	ldr	r1, [pc, #456]	; (8018674 <etharp_query+0x268>)
 80184ac:	4613      	mov	r3, r2
 80184ae:	005b      	lsls	r3, r3, #1
 80184b0:	4413      	add	r3, r2
 80184b2:	00db      	lsls	r3, r3, #3
 80184b4:	440b      	add	r3, r1
 80184b6:	3314      	adds	r3, #20
 80184b8:	2201      	movs	r2, #1
 80184ba:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80184bc:	7c7a      	ldrb	r2, [r7, #17]
 80184be:	496d      	ldr	r1, [pc, #436]	; (8018674 <etharp_query+0x268>)
 80184c0:	4613      	mov	r3, r2
 80184c2:	005b      	lsls	r3, r3, #1
 80184c4:	4413      	add	r3, r2
 80184c6:	00db      	lsls	r3, r3, #3
 80184c8:	440b      	add	r3, r1
 80184ca:	3308      	adds	r3, #8
 80184cc:	68fa      	ldr	r2, [r7, #12]
 80184ce:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80184d0:	7c7a      	ldrb	r2, [r7, #17]
 80184d2:	4968      	ldr	r1, [pc, #416]	; (8018674 <etharp_query+0x268>)
 80184d4:	4613      	mov	r3, r2
 80184d6:	005b      	lsls	r3, r3, #1
 80184d8:	4413      	add	r3, r2
 80184da:	00db      	lsls	r3, r3, #3
 80184dc:	440b      	add	r3, r1
 80184de:	3314      	adds	r3, #20
 80184e0:	781b      	ldrb	r3, [r3, #0]
 80184e2:	2b01      	cmp	r3, #1
 80184e4:	d011      	beq.n	801850a <etharp_query+0xfe>
 80184e6:	7c7a      	ldrb	r2, [r7, #17]
 80184e8:	4962      	ldr	r1, [pc, #392]	; (8018674 <etharp_query+0x268>)
 80184ea:	4613      	mov	r3, r2
 80184ec:	005b      	lsls	r3, r3, #1
 80184ee:	4413      	add	r3, r2
 80184f0:	00db      	lsls	r3, r3, #3
 80184f2:	440b      	add	r3, r1
 80184f4:	3314      	adds	r3, #20
 80184f6:	781b      	ldrb	r3, [r3, #0]
 80184f8:	2b01      	cmp	r3, #1
 80184fa:	d806      	bhi.n	801850a <etharp_query+0xfe>
 80184fc:	4b5a      	ldr	r3, [pc, #360]	; (8018668 <etharp_query+0x25c>)
 80184fe:	f240 32cd 	movw	r2, #973	; 0x3cd
 8018502:	495d      	ldr	r1, [pc, #372]	; (8018678 <etharp_query+0x26c>)
 8018504:	485a      	ldr	r0, [pc, #360]	; (8018670 <etharp_query+0x264>)
 8018506:	f002 f8df 	bl	801a6c8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801850a:	6a3b      	ldr	r3, [r7, #32]
 801850c:	2b00      	cmp	r3, #0
 801850e:	d102      	bne.n	8018516 <etharp_query+0x10a>
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	2b00      	cmp	r3, #0
 8018514:	d10c      	bne.n	8018530 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8018516:	68b9      	ldr	r1, [r7, #8]
 8018518:	68f8      	ldr	r0, [r7, #12]
 801851a:	f000 f963 	bl	80187e4 <etharp_request>
 801851e:	4603      	mov	r3, r0
 8018520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	2b00      	cmp	r3, #0
 8018528:	d102      	bne.n	8018530 <etharp_query+0x124>
      return result;
 801852a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801852e:	e096      	b.n	801865e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8018530:	687b      	ldr	r3, [r7, #4]
 8018532:	2b00      	cmp	r3, #0
 8018534:	d106      	bne.n	8018544 <etharp_query+0x138>
 8018536:	4b4c      	ldr	r3, [pc, #304]	; (8018668 <etharp_query+0x25c>)
 8018538:	f240 32e1 	movw	r2, #993	; 0x3e1
 801853c:	494f      	ldr	r1, [pc, #316]	; (801867c <etharp_query+0x270>)
 801853e:	484c      	ldr	r0, [pc, #304]	; (8018670 <etharp_query+0x264>)
 8018540:	f002 f8c2 	bl	801a6c8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8018544:	7c7a      	ldrb	r2, [r7, #17]
 8018546:	494b      	ldr	r1, [pc, #300]	; (8018674 <etharp_query+0x268>)
 8018548:	4613      	mov	r3, r2
 801854a:	005b      	lsls	r3, r3, #1
 801854c:	4413      	add	r3, r2
 801854e:	00db      	lsls	r3, r3, #3
 8018550:	440b      	add	r3, r1
 8018552:	3314      	adds	r3, #20
 8018554:	781b      	ldrb	r3, [r3, #0]
 8018556:	2b01      	cmp	r3, #1
 8018558:	d917      	bls.n	801858a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801855a:	4a49      	ldr	r2, [pc, #292]	; (8018680 <etharp_query+0x274>)
 801855c:	7c7b      	ldrb	r3, [r7, #17]
 801855e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8018560:	7c7a      	ldrb	r2, [r7, #17]
 8018562:	4613      	mov	r3, r2
 8018564:	005b      	lsls	r3, r3, #1
 8018566:	4413      	add	r3, r2
 8018568:	00db      	lsls	r3, r3, #3
 801856a:	3308      	adds	r3, #8
 801856c:	4a41      	ldr	r2, [pc, #260]	; (8018674 <etharp_query+0x268>)
 801856e:	4413      	add	r3, r2
 8018570:	3304      	adds	r3, #4
 8018572:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018576:	9200      	str	r2, [sp, #0]
 8018578:	697a      	ldr	r2, [r7, #20]
 801857a:	6879      	ldr	r1, [r7, #4]
 801857c:	68f8      	ldr	r0, [r7, #12]
 801857e:	f001 fc6f 	bl	8019e60 <ethernet_output>
 8018582:	4603      	mov	r3, r0
 8018584:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018588:	e067      	b.n	801865a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801858a:	7c7a      	ldrb	r2, [r7, #17]
 801858c:	4939      	ldr	r1, [pc, #228]	; (8018674 <etharp_query+0x268>)
 801858e:	4613      	mov	r3, r2
 8018590:	005b      	lsls	r3, r3, #1
 8018592:	4413      	add	r3, r2
 8018594:	00db      	lsls	r3, r3, #3
 8018596:	440b      	add	r3, r1
 8018598:	3314      	adds	r3, #20
 801859a:	781b      	ldrb	r3, [r3, #0]
 801859c:	2b01      	cmp	r3, #1
 801859e:	d15c      	bne.n	801865a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80185a0:	2300      	movs	r3, #0
 80185a2:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80185a4:	687b      	ldr	r3, [r7, #4]
 80185a6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80185a8:	e01c      	b.n	80185e4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80185aa:	69fb      	ldr	r3, [r7, #28]
 80185ac:	895a      	ldrh	r2, [r3, #10]
 80185ae:	69fb      	ldr	r3, [r7, #28]
 80185b0:	891b      	ldrh	r3, [r3, #8]
 80185b2:	429a      	cmp	r2, r3
 80185b4:	d10a      	bne.n	80185cc <etharp_query+0x1c0>
 80185b6:	69fb      	ldr	r3, [r7, #28]
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	d006      	beq.n	80185cc <etharp_query+0x1c0>
 80185be:	4b2a      	ldr	r3, [pc, #168]	; (8018668 <etharp_query+0x25c>)
 80185c0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80185c4:	492f      	ldr	r1, [pc, #188]	; (8018684 <etharp_query+0x278>)
 80185c6:	482a      	ldr	r0, [pc, #168]	; (8018670 <etharp_query+0x264>)
 80185c8:	f002 f87e 	bl	801a6c8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80185cc:	69fb      	ldr	r3, [r7, #28]
 80185ce:	7b1b      	ldrb	r3, [r3, #12]
 80185d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80185d4:	2b00      	cmp	r3, #0
 80185d6:	d002      	beq.n	80185de <etharp_query+0x1d2>
        copy_needed = 1;
 80185d8:	2301      	movs	r3, #1
 80185da:	61bb      	str	r3, [r7, #24]
        break;
 80185dc:	e005      	b.n	80185ea <etharp_query+0x1de>
      }
      p = p->next;
 80185de:	69fb      	ldr	r3, [r7, #28]
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80185e4:	69fb      	ldr	r3, [r7, #28]
 80185e6:	2b00      	cmp	r3, #0
 80185e8:	d1df      	bne.n	80185aa <etharp_query+0x19e>
    }
    if (copy_needed) {
 80185ea:	69bb      	ldr	r3, [r7, #24]
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	d007      	beq.n	8018600 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80185f0:	687a      	ldr	r2, [r7, #4]
 80185f2:	f44f 7120 	mov.w	r1, #640	; 0x280
 80185f6:	200e      	movs	r0, #14
 80185f8:	f7f8 fb6c 	bl	8010cd4 <pbuf_clone>
 80185fc:	61f8      	str	r0, [r7, #28]
 80185fe:	e004      	b.n	801860a <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8018604:	69f8      	ldr	r0, [r7, #28]
 8018606:	f7f8 f993 	bl	8010930 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801860a:	69fb      	ldr	r3, [r7, #28]
 801860c:	2b00      	cmp	r3, #0
 801860e:	d021      	beq.n	8018654 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8018610:	7c7a      	ldrb	r2, [r7, #17]
 8018612:	4918      	ldr	r1, [pc, #96]	; (8018674 <etharp_query+0x268>)
 8018614:	4613      	mov	r3, r2
 8018616:	005b      	lsls	r3, r3, #1
 8018618:	4413      	add	r3, r2
 801861a:	00db      	lsls	r3, r3, #3
 801861c:	440b      	add	r3, r1
 801861e:	681b      	ldr	r3, [r3, #0]
 8018620:	2b00      	cmp	r3, #0
 8018622:	d00a      	beq.n	801863a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8018624:	7c7a      	ldrb	r2, [r7, #17]
 8018626:	4913      	ldr	r1, [pc, #76]	; (8018674 <etharp_query+0x268>)
 8018628:	4613      	mov	r3, r2
 801862a:	005b      	lsls	r3, r3, #1
 801862c:	4413      	add	r3, r2
 801862e:	00db      	lsls	r3, r3, #3
 8018630:	440b      	add	r3, r1
 8018632:	681b      	ldr	r3, [r3, #0]
 8018634:	4618      	mov	r0, r3
 8018636:	f7f8 f8d5 	bl	80107e4 <pbuf_free>
      }
      arp_table[i].q = p;
 801863a:	7c7a      	ldrb	r2, [r7, #17]
 801863c:	490d      	ldr	r1, [pc, #52]	; (8018674 <etharp_query+0x268>)
 801863e:	4613      	mov	r3, r2
 8018640:	005b      	lsls	r3, r3, #1
 8018642:	4413      	add	r3, r2
 8018644:	00db      	lsls	r3, r3, #3
 8018646:	440b      	add	r3, r1
 8018648:	69fa      	ldr	r2, [r7, #28]
 801864a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801864c:	2300      	movs	r3, #0
 801864e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018652:	e002      	b.n	801865a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8018654:	23ff      	movs	r3, #255	; 0xff
 8018656:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801865a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801865e:	4618      	mov	r0, r3
 8018660:	3728      	adds	r7, #40	; 0x28
 8018662:	46bd      	mov	sp, r7
 8018664:	bd80      	pop	{r7, pc}
 8018666:	bf00      	nop
 8018668:	0801e740 	.word	0x0801e740
 801866c:	0801e8ec 	.word	0x0801e8ec
 8018670:	0801e7b8 	.word	0x0801e7b8
 8018674:	200069d4 	.word	0x200069d4
 8018678:	0801e8fc 	.word	0x0801e8fc
 801867c:	0801e8e0 	.word	0x0801e8e0
 8018680:	20006ac4 	.word	0x20006ac4
 8018684:	0801e924 	.word	0x0801e924

08018688 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8018688:	b580      	push	{r7, lr}
 801868a:	b08a      	sub	sp, #40	; 0x28
 801868c:	af02      	add	r7, sp, #8
 801868e:	60f8      	str	r0, [r7, #12]
 8018690:	60b9      	str	r1, [r7, #8]
 8018692:	607a      	str	r2, [r7, #4]
 8018694:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8018696:	2300      	movs	r3, #0
 8018698:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801869a:	68fb      	ldr	r3, [r7, #12]
 801869c:	2b00      	cmp	r3, #0
 801869e:	d106      	bne.n	80186ae <etharp_raw+0x26>
 80186a0:	4b3a      	ldr	r3, [pc, #232]	; (801878c <etharp_raw+0x104>)
 80186a2:	f240 4257 	movw	r2, #1111	; 0x457
 80186a6:	493a      	ldr	r1, [pc, #232]	; (8018790 <etharp_raw+0x108>)
 80186a8:	483a      	ldr	r0, [pc, #232]	; (8018794 <etharp_raw+0x10c>)
 80186aa:	f002 f80d 	bl	801a6c8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80186ae:	f44f 7220 	mov.w	r2, #640	; 0x280
 80186b2:	211c      	movs	r1, #28
 80186b4:	200e      	movs	r0, #14
 80186b6:	f7f7 fdb1 	bl	801021c <pbuf_alloc>
 80186ba:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80186bc:	69bb      	ldr	r3, [r7, #24]
 80186be:	2b00      	cmp	r3, #0
 80186c0:	d102      	bne.n	80186c8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80186c2:	f04f 33ff 	mov.w	r3, #4294967295
 80186c6:	e05d      	b.n	8018784 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80186c8:	69bb      	ldr	r3, [r7, #24]
 80186ca:	895b      	ldrh	r3, [r3, #10]
 80186cc:	2b1b      	cmp	r3, #27
 80186ce:	d806      	bhi.n	80186de <etharp_raw+0x56>
 80186d0:	4b2e      	ldr	r3, [pc, #184]	; (801878c <etharp_raw+0x104>)
 80186d2:	f240 4262 	movw	r2, #1122	; 0x462
 80186d6:	4930      	ldr	r1, [pc, #192]	; (8018798 <etharp_raw+0x110>)
 80186d8:	482e      	ldr	r0, [pc, #184]	; (8018794 <etharp_raw+0x10c>)
 80186da:	f001 fff5 	bl	801a6c8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80186de:	69bb      	ldr	r3, [r7, #24]
 80186e0:	685b      	ldr	r3, [r3, #4]
 80186e2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80186e4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80186e6:	4618      	mov	r0, r3
 80186e8:	f7f6 fd34 	bl	800f154 <lwip_htons>
 80186ec:	4603      	mov	r3, r0
 80186ee:	461a      	mov	r2, r3
 80186f0:	697b      	ldr	r3, [r7, #20]
 80186f2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80186f4:	68fb      	ldr	r3, [r7, #12]
 80186f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80186fa:	2b06      	cmp	r3, #6
 80186fc:	d006      	beq.n	801870c <etharp_raw+0x84>
 80186fe:	4b23      	ldr	r3, [pc, #140]	; (801878c <etharp_raw+0x104>)
 8018700:	f240 4269 	movw	r2, #1129	; 0x469
 8018704:	4925      	ldr	r1, [pc, #148]	; (801879c <etharp_raw+0x114>)
 8018706:	4823      	ldr	r0, [pc, #140]	; (8018794 <etharp_raw+0x10c>)
 8018708:	f001 ffde 	bl	801a6c8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801870c:	697b      	ldr	r3, [r7, #20]
 801870e:	3308      	adds	r3, #8
 8018710:	2206      	movs	r2, #6
 8018712:	6839      	ldr	r1, [r7, #0]
 8018714:	4618      	mov	r0, r3
 8018716:	f001 fefd 	bl	801a514 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801871a:	697b      	ldr	r3, [r7, #20]
 801871c:	3312      	adds	r3, #18
 801871e:	2206      	movs	r2, #6
 8018720:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018722:	4618      	mov	r0, r3
 8018724:	f001 fef6 	bl	801a514 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8018728:	697b      	ldr	r3, [r7, #20]
 801872a:	330e      	adds	r3, #14
 801872c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801872e:	6812      	ldr	r2, [r2, #0]
 8018730:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8018732:	697b      	ldr	r3, [r7, #20]
 8018734:	3318      	adds	r3, #24
 8018736:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018738:	6812      	ldr	r2, [r2, #0]
 801873a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801873c:	697b      	ldr	r3, [r7, #20]
 801873e:	2200      	movs	r2, #0
 8018740:	701a      	strb	r2, [r3, #0]
 8018742:	2200      	movs	r2, #0
 8018744:	f042 0201 	orr.w	r2, r2, #1
 8018748:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801874a:	697b      	ldr	r3, [r7, #20]
 801874c:	2200      	movs	r2, #0
 801874e:	f042 0208 	orr.w	r2, r2, #8
 8018752:	709a      	strb	r2, [r3, #2]
 8018754:	2200      	movs	r2, #0
 8018756:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8018758:	697b      	ldr	r3, [r7, #20]
 801875a:	2206      	movs	r2, #6
 801875c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801875e:	697b      	ldr	r3, [r7, #20]
 8018760:	2204      	movs	r2, #4
 8018762:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8018764:	f640 0306 	movw	r3, #2054	; 0x806
 8018768:	9300      	str	r3, [sp, #0]
 801876a:	687b      	ldr	r3, [r7, #4]
 801876c:	68ba      	ldr	r2, [r7, #8]
 801876e:	69b9      	ldr	r1, [r7, #24]
 8018770:	68f8      	ldr	r0, [r7, #12]
 8018772:	f001 fb75 	bl	8019e60 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8018776:	69b8      	ldr	r0, [r7, #24]
 8018778:	f7f8 f834 	bl	80107e4 <pbuf_free>
  p = NULL;
 801877c:	2300      	movs	r3, #0
 801877e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8018780:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018784:	4618      	mov	r0, r3
 8018786:	3720      	adds	r7, #32
 8018788:	46bd      	mov	sp, r7
 801878a:	bd80      	pop	{r7, pc}
 801878c:	0801e740 	.word	0x0801e740
 8018790:	0801e890 	.word	0x0801e890
 8018794:	0801e7b8 	.word	0x0801e7b8
 8018798:	0801e940 	.word	0x0801e940
 801879c:	0801e974 	.word	0x0801e974

080187a0 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80187a0:	b580      	push	{r7, lr}
 80187a2:	b088      	sub	sp, #32
 80187a4:	af04      	add	r7, sp, #16
 80187a6:	60f8      	str	r0, [r7, #12]
 80187a8:	60b9      	str	r1, [r7, #8]
 80187aa:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80187ac:	68fb      	ldr	r3, [r7, #12]
 80187ae:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80187b2:	68fb      	ldr	r3, [r7, #12]
 80187b4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80187b8:	68fb      	ldr	r3, [r7, #12]
 80187ba:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80187bc:	2201      	movs	r2, #1
 80187be:	9203      	str	r2, [sp, #12]
 80187c0:	68ba      	ldr	r2, [r7, #8]
 80187c2:	9202      	str	r2, [sp, #8]
 80187c4:	4a06      	ldr	r2, [pc, #24]	; (80187e0 <etharp_request_dst+0x40>)
 80187c6:	9201      	str	r2, [sp, #4]
 80187c8:	9300      	str	r3, [sp, #0]
 80187ca:	4603      	mov	r3, r0
 80187cc:	687a      	ldr	r2, [r7, #4]
 80187ce:	68f8      	ldr	r0, [r7, #12]
 80187d0:	f7ff ff5a 	bl	8018688 <etharp_raw>
 80187d4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80187d6:	4618      	mov	r0, r3
 80187d8:	3710      	adds	r7, #16
 80187da:	46bd      	mov	sp, r7
 80187dc:	bd80      	pop	{r7, pc}
 80187de:	bf00      	nop
 80187e0:	0801ef44 	.word	0x0801ef44

080187e4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80187e4:	b580      	push	{r7, lr}
 80187e6:	b082      	sub	sp, #8
 80187e8:	af00      	add	r7, sp, #0
 80187ea:	6078      	str	r0, [r7, #4]
 80187ec:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80187ee:	4a05      	ldr	r2, [pc, #20]	; (8018804 <etharp_request+0x20>)
 80187f0:	6839      	ldr	r1, [r7, #0]
 80187f2:	6878      	ldr	r0, [r7, #4]
 80187f4:	f7ff ffd4 	bl	80187a0 <etharp_request_dst>
 80187f8:	4603      	mov	r3, r0
}
 80187fa:	4618      	mov	r0, r3
 80187fc:	3708      	adds	r7, #8
 80187fe:	46bd      	mov	sp, r7
 8018800:	bd80      	pop	{r7, pc}
 8018802:	bf00      	nop
 8018804:	0801ef3c 	.word	0x0801ef3c

08018808 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8018808:	b580      	push	{r7, lr}
 801880a:	b08e      	sub	sp, #56	; 0x38
 801880c:	af04      	add	r7, sp, #16
 801880e:	6078      	str	r0, [r7, #4]
 8018810:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8018812:	4b79      	ldr	r3, [pc, #484]	; (80189f8 <icmp_input+0x1f0>)
 8018814:	689b      	ldr	r3, [r3, #8]
 8018816:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8018818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801881a:	781b      	ldrb	r3, [r3, #0]
 801881c:	f003 030f 	and.w	r3, r3, #15
 8018820:	b2db      	uxtb	r3, r3
 8018822:	009b      	lsls	r3, r3, #2
 8018824:	b2db      	uxtb	r3, r3
 8018826:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8018828:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801882a:	2b13      	cmp	r3, #19
 801882c:	f240 80cd 	bls.w	80189ca <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	895b      	ldrh	r3, [r3, #10]
 8018834:	2b03      	cmp	r3, #3
 8018836:	f240 80ca 	bls.w	80189ce <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801883a:	687b      	ldr	r3, [r7, #4]
 801883c:	685b      	ldr	r3, [r3, #4]
 801883e:	781b      	ldrb	r3, [r3, #0]
 8018840:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8018844:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8018848:	2b00      	cmp	r3, #0
 801884a:	f000 80b7 	beq.w	80189bc <icmp_input+0x1b4>
 801884e:	2b08      	cmp	r3, #8
 8018850:	f040 80b7 	bne.w	80189c2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8018854:	4b69      	ldr	r3, [pc, #420]	; (80189fc <icmp_input+0x1f4>)
 8018856:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018858:	4b67      	ldr	r3, [pc, #412]	; (80189f8 <icmp_input+0x1f0>)
 801885a:	695b      	ldr	r3, [r3, #20]
 801885c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018860:	2be0      	cmp	r3, #224	; 0xe0
 8018862:	f000 80bb 	beq.w	80189dc <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8018866:	4b64      	ldr	r3, [pc, #400]	; (80189f8 <icmp_input+0x1f0>)
 8018868:	695b      	ldr	r3, [r3, #20]
 801886a:	4a63      	ldr	r2, [pc, #396]	; (80189f8 <icmp_input+0x1f0>)
 801886c:	6812      	ldr	r2, [r2, #0]
 801886e:	4611      	mov	r1, r2
 8018870:	4618      	mov	r0, r3
 8018872:	f000 fbed 	bl	8019050 <ip4_addr_isbroadcast_u32>
 8018876:	4603      	mov	r3, r0
 8018878:	2b00      	cmp	r3, #0
 801887a:	f040 80b1 	bne.w	80189e0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801887e:	687b      	ldr	r3, [r7, #4]
 8018880:	891b      	ldrh	r3, [r3, #8]
 8018882:	2b07      	cmp	r3, #7
 8018884:	f240 80a5 	bls.w	80189d2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018888:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801888a:	330e      	adds	r3, #14
 801888c:	4619      	mov	r1, r3
 801888e:	6878      	ldr	r0, [r7, #4]
 8018890:	f7f7 ff12 	bl	80106b8 <pbuf_add_header>
 8018894:	4603      	mov	r3, r0
 8018896:	2b00      	cmp	r3, #0
 8018898:	d04b      	beq.n	8018932 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	891a      	ldrh	r2, [r3, #8]
 801889e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80188a0:	4413      	add	r3, r2
 80188a2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	891b      	ldrh	r3, [r3, #8]
 80188a8:	8b7a      	ldrh	r2, [r7, #26]
 80188aa:	429a      	cmp	r2, r3
 80188ac:	f0c0 809a 	bcc.w	80189e4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80188b0:	8b7b      	ldrh	r3, [r7, #26]
 80188b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80188b6:	4619      	mov	r1, r3
 80188b8:	200e      	movs	r0, #14
 80188ba:	f7f7 fcaf 	bl	801021c <pbuf_alloc>
 80188be:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80188c0:	697b      	ldr	r3, [r7, #20]
 80188c2:	2b00      	cmp	r3, #0
 80188c4:	f000 8090 	beq.w	80189e8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80188c8:	697b      	ldr	r3, [r7, #20]
 80188ca:	895b      	ldrh	r3, [r3, #10]
 80188cc:	461a      	mov	r2, r3
 80188ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80188d0:	3308      	adds	r3, #8
 80188d2:	429a      	cmp	r2, r3
 80188d4:	d203      	bcs.n	80188de <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80188d6:	6978      	ldr	r0, [r7, #20]
 80188d8:	f7f7 ff84 	bl	80107e4 <pbuf_free>
          goto icmperr;
 80188dc:	e085      	b.n	80189ea <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80188de:	697b      	ldr	r3, [r7, #20]
 80188e0:	685b      	ldr	r3, [r3, #4]
 80188e2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80188e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80188e6:	4618      	mov	r0, r3
 80188e8:	f001 fe14 	bl	801a514 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80188ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80188ee:	4619      	mov	r1, r3
 80188f0:	6978      	ldr	r0, [r7, #20]
 80188f2:	f7f7 fef1 	bl	80106d8 <pbuf_remove_header>
 80188f6:	4603      	mov	r3, r0
 80188f8:	2b00      	cmp	r3, #0
 80188fa:	d009      	beq.n	8018910 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80188fc:	4b40      	ldr	r3, [pc, #256]	; (8018a00 <icmp_input+0x1f8>)
 80188fe:	22b6      	movs	r2, #182	; 0xb6
 8018900:	4940      	ldr	r1, [pc, #256]	; (8018a04 <icmp_input+0x1fc>)
 8018902:	4841      	ldr	r0, [pc, #260]	; (8018a08 <icmp_input+0x200>)
 8018904:	f001 fee0 	bl	801a6c8 <iprintf>
          pbuf_free(r);
 8018908:	6978      	ldr	r0, [r7, #20]
 801890a:	f7f7 ff6b 	bl	80107e4 <pbuf_free>
          goto icmperr;
 801890e:	e06c      	b.n	80189ea <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8018910:	6879      	ldr	r1, [r7, #4]
 8018912:	6978      	ldr	r0, [r7, #20]
 8018914:	f7f8 f89a 	bl	8010a4c <pbuf_copy>
 8018918:	4603      	mov	r3, r0
 801891a:	2b00      	cmp	r3, #0
 801891c:	d003      	beq.n	8018926 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801891e:	6978      	ldr	r0, [r7, #20]
 8018920:	f7f7 ff60 	bl	80107e4 <pbuf_free>
          goto icmperr;
 8018924:	e061      	b.n	80189ea <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8018926:	6878      	ldr	r0, [r7, #4]
 8018928:	f7f7 ff5c 	bl	80107e4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801892c:	697b      	ldr	r3, [r7, #20]
 801892e:	607b      	str	r3, [r7, #4]
 8018930:	e00f      	b.n	8018952 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8018932:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018934:	330e      	adds	r3, #14
 8018936:	4619      	mov	r1, r3
 8018938:	6878      	ldr	r0, [r7, #4]
 801893a:	f7f7 fecd 	bl	80106d8 <pbuf_remove_header>
 801893e:	4603      	mov	r3, r0
 8018940:	2b00      	cmp	r3, #0
 8018942:	d006      	beq.n	8018952 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8018944:	4b2e      	ldr	r3, [pc, #184]	; (8018a00 <icmp_input+0x1f8>)
 8018946:	22c7      	movs	r2, #199	; 0xc7
 8018948:	4930      	ldr	r1, [pc, #192]	; (8018a0c <icmp_input+0x204>)
 801894a:	482f      	ldr	r0, [pc, #188]	; (8018a08 <icmp_input+0x200>)
 801894c:	f001 febc 	bl	801a6c8 <iprintf>
          goto icmperr;
 8018950:	e04b      	b.n	80189ea <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8018952:	687b      	ldr	r3, [r7, #4]
 8018954:	685b      	ldr	r3, [r3, #4]
 8018956:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8018958:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801895a:	4619      	mov	r1, r3
 801895c:	6878      	ldr	r0, [r7, #4]
 801895e:	f7f7 feab 	bl	80106b8 <pbuf_add_header>
 8018962:	4603      	mov	r3, r0
 8018964:	2b00      	cmp	r3, #0
 8018966:	d12b      	bne.n	80189c0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	685b      	ldr	r3, [r3, #4]
 801896c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801896e:	69fb      	ldr	r3, [r7, #28]
 8018970:	681a      	ldr	r2, [r3, #0]
 8018972:	68fb      	ldr	r3, [r7, #12]
 8018974:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8018976:	4b20      	ldr	r3, [pc, #128]	; (80189f8 <icmp_input+0x1f0>)
 8018978:	691a      	ldr	r2, [r3, #16]
 801897a:	68fb      	ldr	r3, [r7, #12]
 801897c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801897e:	693b      	ldr	r3, [r7, #16]
 8018980:	2200      	movs	r2, #0
 8018982:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8018984:	693b      	ldr	r3, [r7, #16]
 8018986:	2200      	movs	r2, #0
 8018988:	709a      	strb	r2, [r3, #2]
 801898a:	2200      	movs	r2, #0
 801898c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801898e:	68fb      	ldr	r3, [r7, #12]
 8018990:	22ff      	movs	r2, #255	; 0xff
 8018992:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8018994:	68fb      	ldr	r3, [r7, #12]
 8018996:	2200      	movs	r2, #0
 8018998:	729a      	strb	r2, [r3, #10]
 801899a:	2200      	movs	r2, #0
 801899c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801899e:	683b      	ldr	r3, [r7, #0]
 80189a0:	9302      	str	r3, [sp, #8]
 80189a2:	2301      	movs	r3, #1
 80189a4:	9301      	str	r3, [sp, #4]
 80189a6:	2300      	movs	r3, #0
 80189a8:	9300      	str	r3, [sp, #0]
 80189aa:	23ff      	movs	r3, #255	; 0xff
 80189ac:	2200      	movs	r2, #0
 80189ae:	69f9      	ldr	r1, [r7, #28]
 80189b0:	6878      	ldr	r0, [r7, #4]
 80189b2:	f000 fa75 	bl	8018ea0 <ip4_output_if>
 80189b6:	4603      	mov	r3, r0
 80189b8:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80189ba:	e001      	b.n	80189c0 <icmp_input+0x1b8>
      break;
 80189bc:	bf00      	nop
 80189be:	e000      	b.n	80189c2 <icmp_input+0x1ba>
      break;
 80189c0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80189c2:	6878      	ldr	r0, [r7, #4]
 80189c4:	f7f7 ff0e 	bl	80107e4 <pbuf_free>
  return;
 80189c8:	e013      	b.n	80189f2 <icmp_input+0x1ea>
    goto lenerr;
 80189ca:	bf00      	nop
 80189cc:	e002      	b.n	80189d4 <icmp_input+0x1cc>
    goto lenerr;
 80189ce:	bf00      	nop
 80189d0:	e000      	b.n	80189d4 <icmp_input+0x1cc>
        goto lenerr;
 80189d2:	bf00      	nop
lenerr:
  pbuf_free(p);
 80189d4:	6878      	ldr	r0, [r7, #4]
 80189d6:	f7f7 ff05 	bl	80107e4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80189da:	e00a      	b.n	80189f2 <icmp_input+0x1ea>
        goto icmperr;
 80189dc:	bf00      	nop
 80189de:	e004      	b.n	80189ea <icmp_input+0x1e2>
        goto icmperr;
 80189e0:	bf00      	nop
 80189e2:	e002      	b.n	80189ea <icmp_input+0x1e2>
          goto icmperr;
 80189e4:	bf00      	nop
 80189e6:	e000      	b.n	80189ea <icmp_input+0x1e2>
          goto icmperr;
 80189e8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80189ea:	6878      	ldr	r0, [r7, #4]
 80189ec:	f7f7 fefa 	bl	80107e4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80189f0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80189f2:	3728      	adds	r7, #40	; 0x28
 80189f4:	46bd      	mov	sp, r7
 80189f6:	bd80      	pop	{r7, pc}
 80189f8:	2000a630 	.word	0x2000a630
 80189fc:	2000a644 	.word	0x2000a644
 8018a00:	0801e9b8 	.word	0x0801e9b8
 8018a04:	0801e9f0 	.word	0x0801e9f0
 8018a08:	0801ea28 	.word	0x0801ea28
 8018a0c:	0801ea50 	.word	0x0801ea50

08018a10 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8018a10:	b580      	push	{r7, lr}
 8018a12:	b082      	sub	sp, #8
 8018a14:	af00      	add	r7, sp, #0
 8018a16:	6078      	str	r0, [r7, #4]
 8018a18:	460b      	mov	r3, r1
 8018a1a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8018a1c:	78fb      	ldrb	r3, [r7, #3]
 8018a1e:	461a      	mov	r2, r3
 8018a20:	2103      	movs	r1, #3
 8018a22:	6878      	ldr	r0, [r7, #4]
 8018a24:	f000 f814 	bl	8018a50 <icmp_send_response>
}
 8018a28:	bf00      	nop
 8018a2a:	3708      	adds	r7, #8
 8018a2c:	46bd      	mov	sp, r7
 8018a2e:	bd80      	pop	{r7, pc}

08018a30 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8018a30:	b580      	push	{r7, lr}
 8018a32:	b082      	sub	sp, #8
 8018a34:	af00      	add	r7, sp, #0
 8018a36:	6078      	str	r0, [r7, #4]
 8018a38:	460b      	mov	r3, r1
 8018a3a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8018a3c:	78fb      	ldrb	r3, [r7, #3]
 8018a3e:	461a      	mov	r2, r3
 8018a40:	210b      	movs	r1, #11
 8018a42:	6878      	ldr	r0, [r7, #4]
 8018a44:	f000 f804 	bl	8018a50 <icmp_send_response>
}
 8018a48:	bf00      	nop
 8018a4a:	3708      	adds	r7, #8
 8018a4c:	46bd      	mov	sp, r7
 8018a4e:	bd80      	pop	{r7, pc}

08018a50 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8018a50:	b580      	push	{r7, lr}
 8018a52:	b08c      	sub	sp, #48	; 0x30
 8018a54:	af04      	add	r7, sp, #16
 8018a56:	6078      	str	r0, [r7, #4]
 8018a58:	460b      	mov	r3, r1
 8018a5a:	70fb      	strb	r3, [r7, #3]
 8018a5c:	4613      	mov	r3, r2
 8018a5e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8018a60:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018a64:	2124      	movs	r1, #36	; 0x24
 8018a66:	2022      	movs	r0, #34	; 0x22
 8018a68:	f7f7 fbd8 	bl	801021c <pbuf_alloc>
 8018a6c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8018a6e:	69fb      	ldr	r3, [r7, #28]
 8018a70:	2b00      	cmp	r3, #0
 8018a72:	d04c      	beq.n	8018b0e <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8018a74:	69fb      	ldr	r3, [r7, #28]
 8018a76:	895b      	ldrh	r3, [r3, #10]
 8018a78:	2b23      	cmp	r3, #35	; 0x23
 8018a7a:	d806      	bhi.n	8018a8a <icmp_send_response+0x3a>
 8018a7c:	4b26      	ldr	r3, [pc, #152]	; (8018b18 <icmp_send_response+0xc8>)
 8018a7e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8018a82:	4926      	ldr	r1, [pc, #152]	; (8018b1c <icmp_send_response+0xcc>)
 8018a84:	4826      	ldr	r0, [pc, #152]	; (8018b20 <icmp_send_response+0xd0>)
 8018a86:	f001 fe1f 	bl	801a6c8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	685b      	ldr	r3, [r3, #4]
 8018a8e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8018a90:	69fb      	ldr	r3, [r7, #28]
 8018a92:	685b      	ldr	r3, [r3, #4]
 8018a94:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8018a96:	697b      	ldr	r3, [r7, #20]
 8018a98:	78fa      	ldrb	r2, [r7, #3]
 8018a9a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8018a9c:	697b      	ldr	r3, [r7, #20]
 8018a9e:	78ba      	ldrb	r2, [r7, #2]
 8018aa0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8018aa2:	697b      	ldr	r3, [r7, #20]
 8018aa4:	2200      	movs	r2, #0
 8018aa6:	711a      	strb	r2, [r3, #4]
 8018aa8:	2200      	movs	r2, #0
 8018aaa:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8018aac:	697b      	ldr	r3, [r7, #20]
 8018aae:	2200      	movs	r2, #0
 8018ab0:	719a      	strb	r2, [r3, #6]
 8018ab2:	2200      	movs	r2, #0
 8018ab4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8018ab6:	69fb      	ldr	r3, [r7, #28]
 8018ab8:	685b      	ldr	r3, [r3, #4]
 8018aba:	f103 0008 	add.w	r0, r3, #8
 8018abe:	687b      	ldr	r3, [r7, #4]
 8018ac0:	685b      	ldr	r3, [r3, #4]
 8018ac2:	221c      	movs	r2, #28
 8018ac4:	4619      	mov	r1, r3
 8018ac6:	f001 fd25 	bl	801a514 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8018aca:	69bb      	ldr	r3, [r7, #24]
 8018acc:	68db      	ldr	r3, [r3, #12]
 8018ace:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8018ad0:	f107 030c 	add.w	r3, r7, #12
 8018ad4:	4618      	mov	r0, r3
 8018ad6:	f000 f825 	bl	8018b24 <ip4_route>
 8018ada:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8018adc:	693b      	ldr	r3, [r7, #16]
 8018ade:	2b00      	cmp	r3, #0
 8018ae0:	d011      	beq.n	8018b06 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8018ae2:	697b      	ldr	r3, [r7, #20]
 8018ae4:	2200      	movs	r2, #0
 8018ae6:	709a      	strb	r2, [r3, #2]
 8018ae8:	2200      	movs	r2, #0
 8018aea:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8018aec:	f107 020c 	add.w	r2, r7, #12
 8018af0:	693b      	ldr	r3, [r7, #16]
 8018af2:	9302      	str	r3, [sp, #8]
 8018af4:	2301      	movs	r3, #1
 8018af6:	9301      	str	r3, [sp, #4]
 8018af8:	2300      	movs	r3, #0
 8018afa:	9300      	str	r3, [sp, #0]
 8018afc:	23ff      	movs	r3, #255	; 0xff
 8018afe:	2100      	movs	r1, #0
 8018b00:	69f8      	ldr	r0, [r7, #28]
 8018b02:	f000 f9cd 	bl	8018ea0 <ip4_output_if>
  }
  pbuf_free(q);
 8018b06:	69f8      	ldr	r0, [r7, #28]
 8018b08:	f7f7 fe6c 	bl	80107e4 <pbuf_free>
 8018b0c:	e000      	b.n	8018b10 <icmp_send_response+0xc0>
    return;
 8018b0e:	bf00      	nop
}
 8018b10:	3720      	adds	r7, #32
 8018b12:	46bd      	mov	sp, r7
 8018b14:	bd80      	pop	{r7, pc}
 8018b16:	bf00      	nop
 8018b18:	0801e9b8 	.word	0x0801e9b8
 8018b1c:	0801ea84 	.word	0x0801ea84
 8018b20:	0801ea28 	.word	0x0801ea28

08018b24 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8018b24:	b480      	push	{r7}
 8018b26:	b085      	sub	sp, #20
 8018b28:	af00      	add	r7, sp, #0
 8018b2a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8018b2c:	4b33      	ldr	r3, [pc, #204]	; (8018bfc <ip4_route+0xd8>)
 8018b2e:	681b      	ldr	r3, [r3, #0]
 8018b30:	60fb      	str	r3, [r7, #12]
 8018b32:	e036      	b.n	8018ba2 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018b34:	68fb      	ldr	r3, [r7, #12]
 8018b36:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018b3a:	f003 0301 	and.w	r3, r3, #1
 8018b3e:	b2db      	uxtb	r3, r3
 8018b40:	2b00      	cmp	r3, #0
 8018b42:	d02b      	beq.n	8018b9c <ip4_route+0x78>
 8018b44:	68fb      	ldr	r3, [r7, #12]
 8018b46:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018b4a:	089b      	lsrs	r3, r3, #2
 8018b4c:	f003 0301 	and.w	r3, r3, #1
 8018b50:	b2db      	uxtb	r3, r3
 8018b52:	2b00      	cmp	r3, #0
 8018b54:	d022      	beq.n	8018b9c <ip4_route+0x78>
 8018b56:	68fb      	ldr	r3, [r7, #12]
 8018b58:	3304      	adds	r3, #4
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	d01d      	beq.n	8018b9c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8018b60:	687b      	ldr	r3, [r7, #4]
 8018b62:	681a      	ldr	r2, [r3, #0]
 8018b64:	68fb      	ldr	r3, [r7, #12]
 8018b66:	3304      	adds	r3, #4
 8018b68:	681b      	ldr	r3, [r3, #0]
 8018b6a:	405a      	eors	r2, r3
 8018b6c:	68fb      	ldr	r3, [r7, #12]
 8018b6e:	3308      	adds	r3, #8
 8018b70:	681b      	ldr	r3, [r3, #0]
 8018b72:	4013      	ands	r3, r2
 8018b74:	2b00      	cmp	r3, #0
 8018b76:	d101      	bne.n	8018b7c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8018b78:	68fb      	ldr	r3, [r7, #12]
 8018b7a:	e038      	b.n	8018bee <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8018b7c:	68fb      	ldr	r3, [r7, #12]
 8018b7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018b82:	f003 0302 	and.w	r3, r3, #2
 8018b86:	2b00      	cmp	r3, #0
 8018b88:	d108      	bne.n	8018b9c <ip4_route+0x78>
 8018b8a:	687b      	ldr	r3, [r7, #4]
 8018b8c:	681a      	ldr	r2, [r3, #0]
 8018b8e:	68fb      	ldr	r3, [r7, #12]
 8018b90:	330c      	adds	r3, #12
 8018b92:	681b      	ldr	r3, [r3, #0]
 8018b94:	429a      	cmp	r2, r3
 8018b96:	d101      	bne.n	8018b9c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8018b98:	68fb      	ldr	r3, [r7, #12]
 8018b9a:	e028      	b.n	8018bee <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8018b9c:	68fb      	ldr	r3, [r7, #12]
 8018b9e:	681b      	ldr	r3, [r3, #0]
 8018ba0:	60fb      	str	r3, [r7, #12]
 8018ba2:	68fb      	ldr	r3, [r7, #12]
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	d1c5      	bne.n	8018b34 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018ba8:	4b15      	ldr	r3, [pc, #84]	; (8018c00 <ip4_route+0xdc>)
 8018baa:	681b      	ldr	r3, [r3, #0]
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	d01a      	beq.n	8018be6 <ip4_route+0xc2>
 8018bb0:	4b13      	ldr	r3, [pc, #76]	; (8018c00 <ip4_route+0xdc>)
 8018bb2:	681b      	ldr	r3, [r3, #0]
 8018bb4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018bb8:	f003 0301 	and.w	r3, r3, #1
 8018bbc:	2b00      	cmp	r3, #0
 8018bbe:	d012      	beq.n	8018be6 <ip4_route+0xc2>
 8018bc0:	4b0f      	ldr	r3, [pc, #60]	; (8018c00 <ip4_route+0xdc>)
 8018bc2:	681b      	ldr	r3, [r3, #0]
 8018bc4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018bc8:	f003 0304 	and.w	r3, r3, #4
 8018bcc:	2b00      	cmp	r3, #0
 8018bce:	d00a      	beq.n	8018be6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018bd0:	4b0b      	ldr	r3, [pc, #44]	; (8018c00 <ip4_route+0xdc>)
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	3304      	adds	r3, #4
 8018bd6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d004      	beq.n	8018be6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	681b      	ldr	r3, [r3, #0]
 8018be0:	b2db      	uxtb	r3, r3
 8018be2:	2b7f      	cmp	r3, #127	; 0x7f
 8018be4:	d101      	bne.n	8018bea <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8018be6:	2300      	movs	r3, #0
 8018be8:	e001      	b.n	8018bee <ip4_route+0xca>
  }

  return netif_default;
 8018bea:	4b05      	ldr	r3, [pc, #20]	; (8018c00 <ip4_route+0xdc>)
 8018bec:	681b      	ldr	r3, [r3, #0]
}
 8018bee:	4618      	mov	r0, r3
 8018bf0:	3714      	adds	r7, #20
 8018bf2:	46bd      	mov	sp, r7
 8018bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bf8:	4770      	bx	lr
 8018bfa:	bf00      	nop
 8018bfc:	2000dd34 	.word	0x2000dd34
 8018c00:	2000dd38 	.word	0x2000dd38

08018c04 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8018c04:	b580      	push	{r7, lr}
 8018c06:	b082      	sub	sp, #8
 8018c08:	af00      	add	r7, sp, #0
 8018c0a:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8018c0c:	687b      	ldr	r3, [r7, #4]
 8018c0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018c12:	f003 0301 	and.w	r3, r3, #1
 8018c16:	b2db      	uxtb	r3, r3
 8018c18:	2b00      	cmp	r3, #0
 8018c1a:	d016      	beq.n	8018c4a <ip4_input_accept+0x46>
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	3304      	adds	r3, #4
 8018c20:	681b      	ldr	r3, [r3, #0]
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	d011      	beq.n	8018c4a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018c26:	4b0b      	ldr	r3, [pc, #44]	; (8018c54 <ip4_input_accept+0x50>)
 8018c28:	695a      	ldr	r2, [r3, #20]
 8018c2a:	687b      	ldr	r3, [r7, #4]
 8018c2c:	3304      	adds	r3, #4
 8018c2e:	681b      	ldr	r3, [r3, #0]
 8018c30:	429a      	cmp	r2, r3
 8018c32:	d008      	beq.n	8018c46 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8018c34:	4b07      	ldr	r3, [pc, #28]	; (8018c54 <ip4_input_accept+0x50>)
 8018c36:	695b      	ldr	r3, [r3, #20]
 8018c38:	6879      	ldr	r1, [r7, #4]
 8018c3a:	4618      	mov	r0, r3
 8018c3c:	f000 fa08 	bl	8019050 <ip4_addr_isbroadcast_u32>
 8018c40:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018c42:	2b00      	cmp	r3, #0
 8018c44:	d001      	beq.n	8018c4a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8018c46:	2301      	movs	r3, #1
 8018c48:	e000      	b.n	8018c4c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8018c4a:	2300      	movs	r3, #0
}
 8018c4c:	4618      	mov	r0, r3
 8018c4e:	3708      	adds	r7, #8
 8018c50:	46bd      	mov	sp, r7
 8018c52:	bd80      	pop	{r7, pc}
 8018c54:	2000a630 	.word	0x2000a630

08018c58 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8018c58:	b580      	push	{r7, lr}
 8018c5a:	b086      	sub	sp, #24
 8018c5c:	af00      	add	r7, sp, #0
 8018c5e:	6078      	str	r0, [r7, #4]
 8018c60:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8018c62:	687b      	ldr	r3, [r7, #4]
 8018c64:	685b      	ldr	r3, [r3, #4]
 8018c66:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8018c68:	697b      	ldr	r3, [r7, #20]
 8018c6a:	781b      	ldrb	r3, [r3, #0]
 8018c6c:	091b      	lsrs	r3, r3, #4
 8018c6e:	b2db      	uxtb	r3, r3
 8018c70:	2b04      	cmp	r3, #4
 8018c72:	d004      	beq.n	8018c7e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8018c74:	6878      	ldr	r0, [r7, #4]
 8018c76:	f7f7 fdb5 	bl	80107e4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8018c7a:	2300      	movs	r3, #0
 8018c7c:	e107      	b.n	8018e8e <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8018c7e:	697b      	ldr	r3, [r7, #20]
 8018c80:	781b      	ldrb	r3, [r3, #0]
 8018c82:	f003 030f 	and.w	r3, r3, #15
 8018c86:	b2db      	uxtb	r3, r3
 8018c88:	009b      	lsls	r3, r3, #2
 8018c8a:	b2db      	uxtb	r3, r3
 8018c8c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8018c8e:	697b      	ldr	r3, [r7, #20]
 8018c90:	885b      	ldrh	r3, [r3, #2]
 8018c92:	b29b      	uxth	r3, r3
 8018c94:	4618      	mov	r0, r3
 8018c96:	f7f6 fa5d 	bl	800f154 <lwip_htons>
 8018c9a:	4603      	mov	r3, r0
 8018c9c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8018c9e:	687b      	ldr	r3, [r7, #4]
 8018ca0:	891b      	ldrh	r3, [r3, #8]
 8018ca2:	89ba      	ldrh	r2, [r7, #12]
 8018ca4:	429a      	cmp	r2, r3
 8018ca6:	d204      	bcs.n	8018cb2 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8018ca8:	89bb      	ldrh	r3, [r7, #12]
 8018caa:	4619      	mov	r1, r3
 8018cac:	6878      	ldr	r0, [r7, #4]
 8018cae:	f7f7 fc13 	bl	80104d8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	895b      	ldrh	r3, [r3, #10]
 8018cb6:	89fa      	ldrh	r2, [r7, #14]
 8018cb8:	429a      	cmp	r2, r3
 8018cba:	d807      	bhi.n	8018ccc <ip4_input+0x74>
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	891b      	ldrh	r3, [r3, #8]
 8018cc0:	89ba      	ldrh	r2, [r7, #12]
 8018cc2:	429a      	cmp	r2, r3
 8018cc4:	d802      	bhi.n	8018ccc <ip4_input+0x74>
 8018cc6:	89fb      	ldrh	r3, [r7, #14]
 8018cc8:	2b13      	cmp	r3, #19
 8018cca:	d804      	bhi.n	8018cd6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8018ccc:	6878      	ldr	r0, [r7, #4]
 8018cce:	f7f7 fd89 	bl	80107e4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8018cd2:	2300      	movs	r3, #0
 8018cd4:	e0db      	b.n	8018e8e <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8018cd6:	697b      	ldr	r3, [r7, #20]
 8018cd8:	691b      	ldr	r3, [r3, #16]
 8018cda:	4a6f      	ldr	r2, [pc, #444]	; (8018e98 <ip4_input+0x240>)
 8018cdc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8018cde:	697b      	ldr	r3, [r7, #20]
 8018ce0:	68db      	ldr	r3, [r3, #12]
 8018ce2:	4a6d      	ldr	r2, [pc, #436]	; (8018e98 <ip4_input+0x240>)
 8018ce4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018ce6:	4b6c      	ldr	r3, [pc, #432]	; (8018e98 <ip4_input+0x240>)
 8018ce8:	695b      	ldr	r3, [r3, #20]
 8018cea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018cee:	2be0      	cmp	r3, #224	; 0xe0
 8018cf0:	d112      	bne.n	8018d18 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8018cf2:	683b      	ldr	r3, [r7, #0]
 8018cf4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018cf8:	f003 0301 	and.w	r3, r3, #1
 8018cfc:	b2db      	uxtb	r3, r3
 8018cfe:	2b00      	cmp	r3, #0
 8018d00:	d007      	beq.n	8018d12 <ip4_input+0xba>
 8018d02:	683b      	ldr	r3, [r7, #0]
 8018d04:	3304      	adds	r3, #4
 8018d06:	681b      	ldr	r3, [r3, #0]
 8018d08:	2b00      	cmp	r3, #0
 8018d0a:	d002      	beq.n	8018d12 <ip4_input+0xba>
      netif = inp;
 8018d0c:	683b      	ldr	r3, [r7, #0]
 8018d0e:	613b      	str	r3, [r7, #16]
 8018d10:	e02a      	b.n	8018d68 <ip4_input+0x110>
    } else {
      netif = NULL;
 8018d12:	2300      	movs	r3, #0
 8018d14:	613b      	str	r3, [r7, #16]
 8018d16:	e027      	b.n	8018d68 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8018d18:	6838      	ldr	r0, [r7, #0]
 8018d1a:	f7ff ff73 	bl	8018c04 <ip4_input_accept>
 8018d1e:	4603      	mov	r3, r0
 8018d20:	2b00      	cmp	r3, #0
 8018d22:	d002      	beq.n	8018d2a <ip4_input+0xd2>
      netif = inp;
 8018d24:	683b      	ldr	r3, [r7, #0]
 8018d26:	613b      	str	r3, [r7, #16]
 8018d28:	e01e      	b.n	8018d68 <ip4_input+0x110>
    } else {
      netif = NULL;
 8018d2a:	2300      	movs	r3, #0
 8018d2c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8018d2e:	4b5a      	ldr	r3, [pc, #360]	; (8018e98 <ip4_input+0x240>)
 8018d30:	695b      	ldr	r3, [r3, #20]
 8018d32:	b2db      	uxtb	r3, r3
 8018d34:	2b7f      	cmp	r3, #127	; 0x7f
 8018d36:	d017      	beq.n	8018d68 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8018d38:	4b58      	ldr	r3, [pc, #352]	; (8018e9c <ip4_input+0x244>)
 8018d3a:	681b      	ldr	r3, [r3, #0]
 8018d3c:	613b      	str	r3, [r7, #16]
 8018d3e:	e00e      	b.n	8018d5e <ip4_input+0x106>
          if (netif == inp) {
 8018d40:	693a      	ldr	r2, [r7, #16]
 8018d42:	683b      	ldr	r3, [r7, #0]
 8018d44:	429a      	cmp	r2, r3
 8018d46:	d006      	beq.n	8018d56 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8018d48:	6938      	ldr	r0, [r7, #16]
 8018d4a:	f7ff ff5b 	bl	8018c04 <ip4_input_accept>
 8018d4e:	4603      	mov	r3, r0
 8018d50:	2b00      	cmp	r3, #0
 8018d52:	d108      	bne.n	8018d66 <ip4_input+0x10e>
 8018d54:	e000      	b.n	8018d58 <ip4_input+0x100>
            continue;
 8018d56:	bf00      	nop
        NETIF_FOREACH(netif) {
 8018d58:	693b      	ldr	r3, [r7, #16]
 8018d5a:	681b      	ldr	r3, [r3, #0]
 8018d5c:	613b      	str	r3, [r7, #16]
 8018d5e:	693b      	ldr	r3, [r7, #16]
 8018d60:	2b00      	cmp	r3, #0
 8018d62:	d1ed      	bne.n	8018d40 <ip4_input+0xe8>
 8018d64:	e000      	b.n	8018d68 <ip4_input+0x110>
            break;
 8018d66:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018d68:	4b4b      	ldr	r3, [pc, #300]	; (8018e98 <ip4_input+0x240>)
 8018d6a:	691b      	ldr	r3, [r3, #16]
 8018d6c:	6839      	ldr	r1, [r7, #0]
 8018d6e:	4618      	mov	r0, r3
 8018d70:	f000 f96e 	bl	8019050 <ip4_addr_isbroadcast_u32>
 8018d74:	4603      	mov	r3, r0
 8018d76:	2b00      	cmp	r3, #0
 8018d78:	d105      	bne.n	8018d86 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8018d7a:	4b47      	ldr	r3, [pc, #284]	; (8018e98 <ip4_input+0x240>)
 8018d7c:	691b      	ldr	r3, [r3, #16]
 8018d7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018d82:	2be0      	cmp	r3, #224	; 0xe0
 8018d84:	d104      	bne.n	8018d90 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8018d86:	6878      	ldr	r0, [r7, #4]
 8018d88:	f7f7 fd2c 	bl	80107e4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8018d8c:	2300      	movs	r3, #0
 8018d8e:	e07e      	b.n	8018e8e <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8018d90:	693b      	ldr	r3, [r7, #16]
 8018d92:	2b00      	cmp	r3, #0
 8018d94:	d104      	bne.n	8018da0 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8018d96:	6878      	ldr	r0, [r7, #4]
 8018d98:	f7f7 fd24 	bl	80107e4 <pbuf_free>
    return ERR_OK;
 8018d9c:	2300      	movs	r3, #0
 8018d9e:	e076      	b.n	8018e8e <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8018da0:	697b      	ldr	r3, [r7, #20]
 8018da2:	88db      	ldrh	r3, [r3, #6]
 8018da4:	b29b      	uxth	r3, r3
 8018da6:	461a      	mov	r2, r3
 8018da8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8018dac:	4013      	ands	r3, r2
 8018dae:	2b00      	cmp	r3, #0
 8018db0:	d00b      	beq.n	8018dca <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8018db2:	6878      	ldr	r0, [r7, #4]
 8018db4:	f000 fc92 	bl	80196dc <ip4_reass>
 8018db8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	2b00      	cmp	r3, #0
 8018dbe:	d101      	bne.n	8018dc4 <ip4_input+0x16c>
      return ERR_OK;
 8018dc0:	2300      	movs	r3, #0
 8018dc2:	e064      	b.n	8018e8e <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	685b      	ldr	r3, [r3, #4]
 8018dc8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8018dca:	4a33      	ldr	r2, [pc, #204]	; (8018e98 <ip4_input+0x240>)
 8018dcc:	693b      	ldr	r3, [r7, #16]
 8018dce:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8018dd0:	4a31      	ldr	r2, [pc, #196]	; (8018e98 <ip4_input+0x240>)
 8018dd2:	683b      	ldr	r3, [r7, #0]
 8018dd4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8018dd6:	4a30      	ldr	r2, [pc, #192]	; (8018e98 <ip4_input+0x240>)
 8018dd8:	697b      	ldr	r3, [r7, #20]
 8018dda:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8018ddc:	697b      	ldr	r3, [r7, #20]
 8018dde:	781b      	ldrb	r3, [r3, #0]
 8018de0:	f003 030f 	and.w	r3, r3, #15
 8018de4:	b2db      	uxtb	r3, r3
 8018de6:	009b      	lsls	r3, r3, #2
 8018de8:	b2db      	uxtb	r3, r3
 8018dea:	b29a      	uxth	r2, r3
 8018dec:	4b2a      	ldr	r3, [pc, #168]	; (8018e98 <ip4_input+0x240>)
 8018dee:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8018df0:	89fb      	ldrh	r3, [r7, #14]
 8018df2:	4619      	mov	r1, r3
 8018df4:	6878      	ldr	r0, [r7, #4]
 8018df6:	f7f7 fc6f 	bl	80106d8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8018dfa:	697b      	ldr	r3, [r7, #20]
 8018dfc:	7a5b      	ldrb	r3, [r3, #9]
 8018dfe:	2b11      	cmp	r3, #17
 8018e00:	d006      	beq.n	8018e10 <ip4_input+0x1b8>
 8018e02:	2b11      	cmp	r3, #17
 8018e04:	dc13      	bgt.n	8018e2e <ip4_input+0x1d6>
 8018e06:	2b01      	cmp	r3, #1
 8018e08:	d00c      	beq.n	8018e24 <ip4_input+0x1cc>
 8018e0a:	2b06      	cmp	r3, #6
 8018e0c:	d005      	beq.n	8018e1a <ip4_input+0x1c2>
 8018e0e:	e00e      	b.n	8018e2e <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8018e10:	6839      	ldr	r1, [r7, #0]
 8018e12:	6878      	ldr	r0, [r7, #4]
 8018e14:	f7fe f970 	bl	80170f8 <udp_input>
        break;
 8018e18:	e026      	b.n	8018e68 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8018e1a:	6839      	ldr	r1, [r7, #0]
 8018e1c:	6878      	ldr	r0, [r7, #4]
 8018e1e:	f7f9 fd2d 	bl	801287c <tcp_input>
        break;
 8018e22:	e021      	b.n	8018e68 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8018e24:	6839      	ldr	r1, [r7, #0]
 8018e26:	6878      	ldr	r0, [r7, #4]
 8018e28:	f7ff fcee 	bl	8018808 <icmp_input>
        break;
 8018e2c:	e01c      	b.n	8018e68 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018e2e:	4b1a      	ldr	r3, [pc, #104]	; (8018e98 <ip4_input+0x240>)
 8018e30:	695b      	ldr	r3, [r3, #20]
 8018e32:	6939      	ldr	r1, [r7, #16]
 8018e34:	4618      	mov	r0, r3
 8018e36:	f000 f90b 	bl	8019050 <ip4_addr_isbroadcast_u32>
 8018e3a:	4603      	mov	r3, r0
 8018e3c:	2b00      	cmp	r3, #0
 8018e3e:	d10f      	bne.n	8018e60 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018e40:	4b15      	ldr	r3, [pc, #84]	; (8018e98 <ip4_input+0x240>)
 8018e42:	695b      	ldr	r3, [r3, #20]
 8018e44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018e48:	2be0      	cmp	r3, #224	; 0xe0
 8018e4a:	d009      	beq.n	8018e60 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8018e4c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8018e50:	4619      	mov	r1, r3
 8018e52:	6878      	ldr	r0, [r7, #4]
 8018e54:	f7f7 fcb3 	bl	80107be <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018e58:	2102      	movs	r1, #2
 8018e5a:	6878      	ldr	r0, [r7, #4]
 8018e5c:	f7ff fdd8 	bl	8018a10 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8018e60:	6878      	ldr	r0, [r7, #4]
 8018e62:	f7f7 fcbf 	bl	80107e4 <pbuf_free>
        break;
 8018e66:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8018e68:	4b0b      	ldr	r3, [pc, #44]	; (8018e98 <ip4_input+0x240>)
 8018e6a:	2200      	movs	r2, #0
 8018e6c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8018e6e:	4b0a      	ldr	r3, [pc, #40]	; (8018e98 <ip4_input+0x240>)
 8018e70:	2200      	movs	r2, #0
 8018e72:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8018e74:	4b08      	ldr	r3, [pc, #32]	; (8018e98 <ip4_input+0x240>)
 8018e76:	2200      	movs	r2, #0
 8018e78:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8018e7a:	4b07      	ldr	r3, [pc, #28]	; (8018e98 <ip4_input+0x240>)
 8018e7c:	2200      	movs	r2, #0
 8018e7e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8018e80:	4b05      	ldr	r3, [pc, #20]	; (8018e98 <ip4_input+0x240>)
 8018e82:	2200      	movs	r2, #0
 8018e84:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8018e86:	4b04      	ldr	r3, [pc, #16]	; (8018e98 <ip4_input+0x240>)
 8018e88:	2200      	movs	r2, #0
 8018e8a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8018e8c:	2300      	movs	r3, #0
}
 8018e8e:	4618      	mov	r0, r3
 8018e90:	3718      	adds	r7, #24
 8018e92:	46bd      	mov	sp, r7
 8018e94:	bd80      	pop	{r7, pc}
 8018e96:	bf00      	nop
 8018e98:	2000a630 	.word	0x2000a630
 8018e9c:	2000dd34 	.word	0x2000dd34

08018ea0 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8018ea0:	b580      	push	{r7, lr}
 8018ea2:	b08a      	sub	sp, #40	; 0x28
 8018ea4:	af04      	add	r7, sp, #16
 8018ea6:	60f8      	str	r0, [r7, #12]
 8018ea8:	60b9      	str	r1, [r7, #8]
 8018eaa:	607a      	str	r2, [r7, #4]
 8018eac:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8018eae:	68bb      	ldr	r3, [r7, #8]
 8018eb0:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	2b00      	cmp	r3, #0
 8018eb6:	d009      	beq.n	8018ecc <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8018eb8:	68bb      	ldr	r3, [r7, #8]
 8018eba:	2b00      	cmp	r3, #0
 8018ebc:	d003      	beq.n	8018ec6 <ip4_output_if+0x26>
 8018ebe:	68bb      	ldr	r3, [r7, #8]
 8018ec0:	681b      	ldr	r3, [r3, #0]
 8018ec2:	2b00      	cmp	r3, #0
 8018ec4:	d102      	bne.n	8018ecc <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8018ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ec8:	3304      	adds	r3, #4
 8018eca:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8018ecc:	78fa      	ldrb	r2, [r7, #3]
 8018ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ed0:	9302      	str	r3, [sp, #8]
 8018ed2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018ed6:	9301      	str	r3, [sp, #4]
 8018ed8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018edc:	9300      	str	r3, [sp, #0]
 8018ede:	4613      	mov	r3, r2
 8018ee0:	687a      	ldr	r2, [r7, #4]
 8018ee2:	6979      	ldr	r1, [r7, #20]
 8018ee4:	68f8      	ldr	r0, [r7, #12]
 8018ee6:	f000 f805 	bl	8018ef4 <ip4_output_if_src>
 8018eea:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8018eec:	4618      	mov	r0, r3
 8018eee:	3718      	adds	r7, #24
 8018ef0:	46bd      	mov	sp, r7
 8018ef2:	bd80      	pop	{r7, pc}

08018ef4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8018ef4:	b580      	push	{r7, lr}
 8018ef6:	b088      	sub	sp, #32
 8018ef8:	af00      	add	r7, sp, #0
 8018efa:	60f8      	str	r0, [r7, #12]
 8018efc:	60b9      	str	r1, [r7, #8]
 8018efe:	607a      	str	r2, [r7, #4]
 8018f00:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8018f02:	68fb      	ldr	r3, [r7, #12]
 8018f04:	7b9b      	ldrb	r3, [r3, #14]
 8018f06:	2b01      	cmp	r3, #1
 8018f08:	d006      	beq.n	8018f18 <ip4_output_if_src+0x24>
 8018f0a:	4b4b      	ldr	r3, [pc, #300]	; (8019038 <ip4_output_if_src+0x144>)
 8018f0c:	f44f 7255 	mov.w	r2, #852	; 0x354
 8018f10:	494a      	ldr	r1, [pc, #296]	; (801903c <ip4_output_if_src+0x148>)
 8018f12:	484b      	ldr	r0, [pc, #300]	; (8019040 <ip4_output_if_src+0x14c>)
 8018f14:	f001 fbd8 	bl	801a6c8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8018f18:	687b      	ldr	r3, [r7, #4]
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	d060      	beq.n	8018fe0 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8018f1e:	2314      	movs	r3, #20
 8018f20:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8018f22:	2114      	movs	r1, #20
 8018f24:	68f8      	ldr	r0, [r7, #12]
 8018f26:	f7f7 fbc7 	bl	80106b8 <pbuf_add_header>
 8018f2a:	4603      	mov	r3, r0
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	d002      	beq.n	8018f36 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018f30:	f06f 0301 	mvn.w	r3, #1
 8018f34:	e07c      	b.n	8019030 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8018f36:	68fb      	ldr	r3, [r7, #12]
 8018f38:	685b      	ldr	r3, [r3, #4]
 8018f3a:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8018f3c:	68fb      	ldr	r3, [r7, #12]
 8018f3e:	895b      	ldrh	r3, [r3, #10]
 8018f40:	2b13      	cmp	r3, #19
 8018f42:	d806      	bhi.n	8018f52 <ip4_output_if_src+0x5e>
 8018f44:	4b3c      	ldr	r3, [pc, #240]	; (8019038 <ip4_output_if_src+0x144>)
 8018f46:	f44f 7262 	mov.w	r2, #904	; 0x388
 8018f4a:	493e      	ldr	r1, [pc, #248]	; (8019044 <ip4_output_if_src+0x150>)
 8018f4c:	483c      	ldr	r0, [pc, #240]	; (8019040 <ip4_output_if_src+0x14c>)
 8018f4e:	f001 fbbb 	bl	801a6c8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8018f52:	69fb      	ldr	r3, [r7, #28]
 8018f54:	78fa      	ldrb	r2, [r7, #3]
 8018f56:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8018f58:	69fb      	ldr	r3, [r7, #28]
 8018f5a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8018f5e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8018f60:	687b      	ldr	r3, [r7, #4]
 8018f62:	681a      	ldr	r2, [r3, #0]
 8018f64:	69fb      	ldr	r3, [r7, #28]
 8018f66:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8018f68:	8b7b      	ldrh	r3, [r7, #26]
 8018f6a:	089b      	lsrs	r3, r3, #2
 8018f6c:	b29b      	uxth	r3, r3
 8018f6e:	b2db      	uxtb	r3, r3
 8018f70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018f74:	b2da      	uxtb	r2, r3
 8018f76:	69fb      	ldr	r3, [r7, #28]
 8018f78:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8018f7a:	69fb      	ldr	r3, [r7, #28]
 8018f7c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018f80:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8018f82:	68fb      	ldr	r3, [r7, #12]
 8018f84:	891b      	ldrh	r3, [r3, #8]
 8018f86:	4618      	mov	r0, r3
 8018f88:	f7f6 f8e4 	bl	800f154 <lwip_htons>
 8018f8c:	4603      	mov	r3, r0
 8018f8e:	461a      	mov	r2, r3
 8018f90:	69fb      	ldr	r3, [r7, #28]
 8018f92:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8018f94:	69fb      	ldr	r3, [r7, #28]
 8018f96:	2200      	movs	r2, #0
 8018f98:	719a      	strb	r2, [r3, #6]
 8018f9a:	2200      	movs	r2, #0
 8018f9c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8018f9e:	4b2a      	ldr	r3, [pc, #168]	; (8019048 <ip4_output_if_src+0x154>)
 8018fa0:	881b      	ldrh	r3, [r3, #0]
 8018fa2:	4618      	mov	r0, r3
 8018fa4:	f7f6 f8d6 	bl	800f154 <lwip_htons>
 8018fa8:	4603      	mov	r3, r0
 8018faa:	461a      	mov	r2, r3
 8018fac:	69fb      	ldr	r3, [r7, #28]
 8018fae:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8018fb0:	4b25      	ldr	r3, [pc, #148]	; (8019048 <ip4_output_if_src+0x154>)
 8018fb2:	881b      	ldrh	r3, [r3, #0]
 8018fb4:	3301      	adds	r3, #1
 8018fb6:	b29a      	uxth	r2, r3
 8018fb8:	4b23      	ldr	r3, [pc, #140]	; (8019048 <ip4_output_if_src+0x154>)
 8018fba:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8018fbc:	68bb      	ldr	r3, [r7, #8]
 8018fbe:	2b00      	cmp	r3, #0
 8018fc0:	d104      	bne.n	8018fcc <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8018fc2:	4b22      	ldr	r3, [pc, #136]	; (801904c <ip4_output_if_src+0x158>)
 8018fc4:	681a      	ldr	r2, [r3, #0]
 8018fc6:	69fb      	ldr	r3, [r7, #28]
 8018fc8:	60da      	str	r2, [r3, #12]
 8018fca:	e003      	b.n	8018fd4 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8018fcc:	68bb      	ldr	r3, [r7, #8]
 8018fce:	681a      	ldr	r2, [r3, #0]
 8018fd0:	69fb      	ldr	r3, [r7, #28]
 8018fd2:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8018fd4:	69fb      	ldr	r3, [r7, #28]
 8018fd6:	2200      	movs	r2, #0
 8018fd8:	729a      	strb	r2, [r3, #10]
 8018fda:	2200      	movs	r2, #0
 8018fdc:	72da      	strb	r2, [r3, #11]
 8018fde:	e00f      	b.n	8019000 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8018fe0:	68fb      	ldr	r3, [r7, #12]
 8018fe2:	895b      	ldrh	r3, [r3, #10]
 8018fe4:	2b13      	cmp	r3, #19
 8018fe6:	d802      	bhi.n	8018fee <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018fe8:	f06f 0301 	mvn.w	r3, #1
 8018fec:	e020      	b.n	8019030 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8018fee:	68fb      	ldr	r3, [r7, #12]
 8018ff0:	685b      	ldr	r3, [r3, #4]
 8018ff2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8018ff4:	69fb      	ldr	r3, [r7, #28]
 8018ff6:	691b      	ldr	r3, [r3, #16]
 8018ff8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8018ffa:	f107 0314 	add.w	r3, r7, #20
 8018ffe:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8019000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019002:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019004:	2b00      	cmp	r3, #0
 8019006:	d00c      	beq.n	8019022 <ip4_output_if_src+0x12e>
 8019008:	68fb      	ldr	r3, [r7, #12]
 801900a:	891a      	ldrh	r2, [r3, #8]
 801900c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801900e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019010:	429a      	cmp	r2, r3
 8019012:	d906      	bls.n	8019022 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8019014:	687a      	ldr	r2, [r7, #4]
 8019016:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019018:	68f8      	ldr	r0, [r7, #12]
 801901a:	f000 fd4d 	bl	8019ab8 <ip4_frag>
 801901e:	4603      	mov	r3, r0
 8019020:	e006      	b.n	8019030 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8019022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019024:	695b      	ldr	r3, [r3, #20]
 8019026:	687a      	ldr	r2, [r7, #4]
 8019028:	68f9      	ldr	r1, [r7, #12]
 801902a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801902c:	4798      	blx	r3
 801902e:	4603      	mov	r3, r0
}
 8019030:	4618      	mov	r0, r3
 8019032:	3720      	adds	r7, #32
 8019034:	46bd      	mov	sp, r7
 8019036:	bd80      	pop	{r7, pc}
 8019038:	0801eab0 	.word	0x0801eab0
 801903c:	0801eae4 	.word	0x0801eae4
 8019040:	0801eaf0 	.word	0x0801eaf0
 8019044:	0801eb18 	.word	0x0801eb18
 8019048:	20006ac6 	.word	0x20006ac6
 801904c:	0801ef38 	.word	0x0801ef38

08019050 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8019050:	b480      	push	{r7}
 8019052:	b085      	sub	sp, #20
 8019054:	af00      	add	r7, sp, #0
 8019056:	6078      	str	r0, [r7, #4]
 8019058:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801905a:	687b      	ldr	r3, [r7, #4]
 801905c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019064:	d002      	beq.n	801906c <ip4_addr_isbroadcast_u32+0x1c>
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	2b00      	cmp	r3, #0
 801906a:	d101      	bne.n	8019070 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801906c:	2301      	movs	r3, #1
 801906e:	e02a      	b.n	80190c6 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8019070:	683b      	ldr	r3, [r7, #0]
 8019072:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019076:	f003 0302 	and.w	r3, r3, #2
 801907a:	2b00      	cmp	r3, #0
 801907c:	d101      	bne.n	8019082 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801907e:	2300      	movs	r3, #0
 8019080:	e021      	b.n	80190c6 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8019082:	683b      	ldr	r3, [r7, #0]
 8019084:	3304      	adds	r3, #4
 8019086:	681b      	ldr	r3, [r3, #0]
 8019088:	687a      	ldr	r2, [r7, #4]
 801908a:	429a      	cmp	r2, r3
 801908c:	d101      	bne.n	8019092 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801908e:	2300      	movs	r3, #0
 8019090:	e019      	b.n	80190c6 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8019092:	68fa      	ldr	r2, [r7, #12]
 8019094:	683b      	ldr	r3, [r7, #0]
 8019096:	3304      	adds	r3, #4
 8019098:	681b      	ldr	r3, [r3, #0]
 801909a:	405a      	eors	r2, r3
 801909c:	683b      	ldr	r3, [r7, #0]
 801909e:	3308      	adds	r3, #8
 80190a0:	681b      	ldr	r3, [r3, #0]
 80190a2:	4013      	ands	r3, r2
 80190a4:	2b00      	cmp	r3, #0
 80190a6:	d10d      	bne.n	80190c4 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80190a8:	683b      	ldr	r3, [r7, #0]
 80190aa:	3308      	adds	r3, #8
 80190ac:	681b      	ldr	r3, [r3, #0]
 80190ae:	43da      	mvns	r2, r3
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80190b4:	683b      	ldr	r3, [r7, #0]
 80190b6:	3308      	adds	r3, #8
 80190b8:	681b      	ldr	r3, [r3, #0]
 80190ba:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80190bc:	429a      	cmp	r2, r3
 80190be:	d101      	bne.n	80190c4 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80190c0:	2301      	movs	r3, #1
 80190c2:	e000      	b.n	80190c6 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80190c4:	2300      	movs	r3, #0
  }
}
 80190c6:	4618      	mov	r0, r3
 80190c8:	3714      	adds	r7, #20
 80190ca:	46bd      	mov	sp, r7
 80190cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190d0:	4770      	bx	lr
	...

080190d4 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80190d4:	b580      	push	{r7, lr}
 80190d6:	b084      	sub	sp, #16
 80190d8:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80190da:	2300      	movs	r3, #0
 80190dc:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80190de:	4b12      	ldr	r3, [pc, #72]	; (8019128 <ip_reass_tmr+0x54>)
 80190e0:	681b      	ldr	r3, [r3, #0]
 80190e2:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80190e4:	e018      	b.n	8019118 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80190e6:	68fb      	ldr	r3, [r7, #12]
 80190e8:	7fdb      	ldrb	r3, [r3, #31]
 80190ea:	2b00      	cmp	r3, #0
 80190ec:	d00b      	beq.n	8019106 <ip_reass_tmr+0x32>
      r->timer--;
 80190ee:	68fb      	ldr	r3, [r7, #12]
 80190f0:	7fdb      	ldrb	r3, [r3, #31]
 80190f2:	3b01      	subs	r3, #1
 80190f4:	b2da      	uxtb	r2, r3
 80190f6:	68fb      	ldr	r3, [r7, #12]
 80190f8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80190fa:	68fb      	ldr	r3, [r7, #12]
 80190fc:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80190fe:	68fb      	ldr	r3, [r7, #12]
 8019100:	681b      	ldr	r3, [r3, #0]
 8019102:	60fb      	str	r3, [r7, #12]
 8019104:	e008      	b.n	8019118 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8019106:	68fb      	ldr	r3, [r7, #12]
 8019108:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801910a:	68fb      	ldr	r3, [r7, #12]
 801910c:	681b      	ldr	r3, [r3, #0]
 801910e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8019110:	68b9      	ldr	r1, [r7, #8]
 8019112:	6878      	ldr	r0, [r7, #4]
 8019114:	f000 f80a 	bl	801912c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8019118:	68fb      	ldr	r3, [r7, #12]
 801911a:	2b00      	cmp	r3, #0
 801911c:	d1e3      	bne.n	80190e6 <ip_reass_tmr+0x12>
    }
  }
}
 801911e:	bf00      	nop
 8019120:	bf00      	nop
 8019122:	3710      	adds	r7, #16
 8019124:	46bd      	mov	sp, r7
 8019126:	bd80      	pop	{r7, pc}
 8019128:	20006ac8 	.word	0x20006ac8

0801912c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801912c:	b580      	push	{r7, lr}
 801912e:	b088      	sub	sp, #32
 8019130:	af00      	add	r7, sp, #0
 8019132:	6078      	str	r0, [r7, #4]
 8019134:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8019136:	2300      	movs	r3, #0
 8019138:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801913a:	683a      	ldr	r2, [r7, #0]
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	429a      	cmp	r2, r3
 8019140:	d105      	bne.n	801914e <ip_reass_free_complete_datagram+0x22>
 8019142:	4b45      	ldr	r3, [pc, #276]	; (8019258 <ip_reass_free_complete_datagram+0x12c>)
 8019144:	22ab      	movs	r2, #171	; 0xab
 8019146:	4945      	ldr	r1, [pc, #276]	; (801925c <ip_reass_free_complete_datagram+0x130>)
 8019148:	4845      	ldr	r0, [pc, #276]	; (8019260 <ip_reass_free_complete_datagram+0x134>)
 801914a:	f001 fabd 	bl	801a6c8 <iprintf>
  if (prev != NULL) {
 801914e:	683b      	ldr	r3, [r7, #0]
 8019150:	2b00      	cmp	r3, #0
 8019152:	d00a      	beq.n	801916a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8019154:	683b      	ldr	r3, [r7, #0]
 8019156:	681b      	ldr	r3, [r3, #0]
 8019158:	687a      	ldr	r2, [r7, #4]
 801915a:	429a      	cmp	r2, r3
 801915c:	d005      	beq.n	801916a <ip_reass_free_complete_datagram+0x3e>
 801915e:	4b3e      	ldr	r3, [pc, #248]	; (8019258 <ip_reass_free_complete_datagram+0x12c>)
 8019160:	22ad      	movs	r2, #173	; 0xad
 8019162:	4940      	ldr	r1, [pc, #256]	; (8019264 <ip_reass_free_complete_datagram+0x138>)
 8019164:	483e      	ldr	r0, [pc, #248]	; (8019260 <ip_reass_free_complete_datagram+0x134>)
 8019166:	f001 faaf 	bl	801a6c8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	685b      	ldr	r3, [r3, #4]
 801916e:	685b      	ldr	r3, [r3, #4]
 8019170:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8019172:	697b      	ldr	r3, [r7, #20]
 8019174:	889b      	ldrh	r3, [r3, #4]
 8019176:	b29b      	uxth	r3, r3
 8019178:	2b00      	cmp	r3, #0
 801917a:	d12a      	bne.n	80191d2 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	685b      	ldr	r3, [r3, #4]
 8019180:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8019182:	697b      	ldr	r3, [r7, #20]
 8019184:	681a      	ldr	r2, [r3, #0]
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801918a:	69bb      	ldr	r3, [r7, #24]
 801918c:	6858      	ldr	r0, [r3, #4]
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	3308      	adds	r3, #8
 8019192:	2214      	movs	r2, #20
 8019194:	4619      	mov	r1, r3
 8019196:	f001 f9bd 	bl	801a514 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801919a:	2101      	movs	r1, #1
 801919c:	69b8      	ldr	r0, [r7, #24]
 801919e:	f7ff fc47 	bl	8018a30 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80191a2:	69b8      	ldr	r0, [r7, #24]
 80191a4:	f7f7 fbac 	bl	8010900 <pbuf_clen>
 80191a8:	4603      	mov	r3, r0
 80191aa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80191ac:	8bfa      	ldrh	r2, [r7, #30]
 80191ae:	8a7b      	ldrh	r3, [r7, #18]
 80191b0:	4413      	add	r3, r2
 80191b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80191b6:	db05      	blt.n	80191c4 <ip_reass_free_complete_datagram+0x98>
 80191b8:	4b27      	ldr	r3, [pc, #156]	; (8019258 <ip_reass_free_complete_datagram+0x12c>)
 80191ba:	22bc      	movs	r2, #188	; 0xbc
 80191bc:	492a      	ldr	r1, [pc, #168]	; (8019268 <ip_reass_free_complete_datagram+0x13c>)
 80191be:	4828      	ldr	r0, [pc, #160]	; (8019260 <ip_reass_free_complete_datagram+0x134>)
 80191c0:	f001 fa82 	bl	801a6c8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80191c4:	8bfa      	ldrh	r2, [r7, #30]
 80191c6:	8a7b      	ldrh	r3, [r7, #18]
 80191c8:	4413      	add	r3, r2
 80191ca:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80191cc:	69b8      	ldr	r0, [r7, #24]
 80191ce:	f7f7 fb09 	bl	80107e4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80191d2:	687b      	ldr	r3, [r7, #4]
 80191d4:	685b      	ldr	r3, [r3, #4]
 80191d6:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80191d8:	e01f      	b.n	801921a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80191da:	69bb      	ldr	r3, [r7, #24]
 80191dc:	685b      	ldr	r3, [r3, #4]
 80191de:	617b      	str	r3, [r7, #20]
    pcur = p;
 80191e0:	69bb      	ldr	r3, [r7, #24]
 80191e2:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80191e4:	697b      	ldr	r3, [r7, #20]
 80191e6:	681b      	ldr	r3, [r3, #0]
 80191e8:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80191ea:	68f8      	ldr	r0, [r7, #12]
 80191ec:	f7f7 fb88 	bl	8010900 <pbuf_clen>
 80191f0:	4603      	mov	r3, r0
 80191f2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80191f4:	8bfa      	ldrh	r2, [r7, #30]
 80191f6:	8a7b      	ldrh	r3, [r7, #18]
 80191f8:	4413      	add	r3, r2
 80191fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80191fe:	db05      	blt.n	801920c <ip_reass_free_complete_datagram+0xe0>
 8019200:	4b15      	ldr	r3, [pc, #84]	; (8019258 <ip_reass_free_complete_datagram+0x12c>)
 8019202:	22cc      	movs	r2, #204	; 0xcc
 8019204:	4918      	ldr	r1, [pc, #96]	; (8019268 <ip_reass_free_complete_datagram+0x13c>)
 8019206:	4816      	ldr	r0, [pc, #88]	; (8019260 <ip_reass_free_complete_datagram+0x134>)
 8019208:	f001 fa5e 	bl	801a6c8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801920c:	8bfa      	ldrh	r2, [r7, #30]
 801920e:	8a7b      	ldrh	r3, [r7, #18]
 8019210:	4413      	add	r3, r2
 8019212:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8019214:	68f8      	ldr	r0, [r7, #12]
 8019216:	f7f7 fae5 	bl	80107e4 <pbuf_free>
  while (p != NULL) {
 801921a:	69bb      	ldr	r3, [r7, #24]
 801921c:	2b00      	cmp	r3, #0
 801921e:	d1dc      	bne.n	80191da <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8019220:	6839      	ldr	r1, [r7, #0]
 8019222:	6878      	ldr	r0, [r7, #4]
 8019224:	f000 f8c2 	bl	80193ac <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8019228:	4b10      	ldr	r3, [pc, #64]	; (801926c <ip_reass_free_complete_datagram+0x140>)
 801922a:	881b      	ldrh	r3, [r3, #0]
 801922c:	8bfa      	ldrh	r2, [r7, #30]
 801922e:	429a      	cmp	r2, r3
 8019230:	d905      	bls.n	801923e <ip_reass_free_complete_datagram+0x112>
 8019232:	4b09      	ldr	r3, [pc, #36]	; (8019258 <ip_reass_free_complete_datagram+0x12c>)
 8019234:	22d2      	movs	r2, #210	; 0xd2
 8019236:	490e      	ldr	r1, [pc, #56]	; (8019270 <ip_reass_free_complete_datagram+0x144>)
 8019238:	4809      	ldr	r0, [pc, #36]	; (8019260 <ip_reass_free_complete_datagram+0x134>)
 801923a:	f001 fa45 	bl	801a6c8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801923e:	4b0b      	ldr	r3, [pc, #44]	; (801926c <ip_reass_free_complete_datagram+0x140>)
 8019240:	881a      	ldrh	r2, [r3, #0]
 8019242:	8bfb      	ldrh	r3, [r7, #30]
 8019244:	1ad3      	subs	r3, r2, r3
 8019246:	b29a      	uxth	r2, r3
 8019248:	4b08      	ldr	r3, [pc, #32]	; (801926c <ip_reass_free_complete_datagram+0x140>)
 801924a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801924c:	8bfb      	ldrh	r3, [r7, #30]
}
 801924e:	4618      	mov	r0, r3
 8019250:	3720      	adds	r7, #32
 8019252:	46bd      	mov	sp, r7
 8019254:	bd80      	pop	{r7, pc}
 8019256:	bf00      	nop
 8019258:	0801eb48 	.word	0x0801eb48
 801925c:	0801eb84 	.word	0x0801eb84
 8019260:	0801eb90 	.word	0x0801eb90
 8019264:	0801ebb8 	.word	0x0801ebb8
 8019268:	0801ebcc 	.word	0x0801ebcc
 801926c:	20006acc 	.word	0x20006acc
 8019270:	0801ebec 	.word	0x0801ebec

08019274 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8019274:	b580      	push	{r7, lr}
 8019276:	b08a      	sub	sp, #40	; 0x28
 8019278:	af00      	add	r7, sp, #0
 801927a:	6078      	str	r0, [r7, #4]
 801927c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801927e:	2300      	movs	r3, #0
 8019280:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8019282:	2300      	movs	r3, #0
 8019284:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8019286:	2300      	movs	r3, #0
 8019288:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801928a:	2300      	movs	r3, #0
 801928c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801928e:	2300      	movs	r3, #0
 8019290:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8019292:	4b28      	ldr	r3, [pc, #160]	; (8019334 <ip_reass_remove_oldest_datagram+0xc0>)
 8019294:	681b      	ldr	r3, [r3, #0]
 8019296:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019298:	e030      	b.n	80192fc <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801929a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801929c:	695a      	ldr	r2, [r3, #20]
 801929e:	687b      	ldr	r3, [r7, #4]
 80192a0:	68db      	ldr	r3, [r3, #12]
 80192a2:	429a      	cmp	r2, r3
 80192a4:	d10c      	bne.n	80192c0 <ip_reass_remove_oldest_datagram+0x4c>
 80192a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192a8:	699a      	ldr	r2, [r3, #24]
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	691b      	ldr	r3, [r3, #16]
 80192ae:	429a      	cmp	r2, r3
 80192b0:	d106      	bne.n	80192c0 <ip_reass_remove_oldest_datagram+0x4c>
 80192b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192b4:	899a      	ldrh	r2, [r3, #12]
 80192b6:	687b      	ldr	r3, [r7, #4]
 80192b8:	889b      	ldrh	r3, [r3, #4]
 80192ba:	b29b      	uxth	r3, r3
 80192bc:	429a      	cmp	r2, r3
 80192be:	d014      	beq.n	80192ea <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80192c0:	693b      	ldr	r3, [r7, #16]
 80192c2:	3301      	adds	r3, #1
 80192c4:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80192c6:	6a3b      	ldr	r3, [r7, #32]
 80192c8:	2b00      	cmp	r3, #0
 80192ca:	d104      	bne.n	80192d6 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80192cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192ce:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80192d0:	69fb      	ldr	r3, [r7, #28]
 80192d2:	61bb      	str	r3, [r7, #24]
 80192d4:	e009      	b.n	80192ea <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80192d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192d8:	7fda      	ldrb	r2, [r3, #31]
 80192da:	6a3b      	ldr	r3, [r7, #32]
 80192dc:	7fdb      	ldrb	r3, [r3, #31]
 80192de:	429a      	cmp	r2, r3
 80192e0:	d803      	bhi.n	80192ea <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80192e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192e4:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80192e6:	69fb      	ldr	r3, [r7, #28]
 80192e8:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80192ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192ec:	681b      	ldr	r3, [r3, #0]
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d001      	beq.n	80192f6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80192f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192f4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80192f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192f8:	681b      	ldr	r3, [r3, #0]
 80192fa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80192fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192fe:	2b00      	cmp	r3, #0
 8019300:	d1cb      	bne.n	801929a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8019302:	6a3b      	ldr	r3, [r7, #32]
 8019304:	2b00      	cmp	r3, #0
 8019306:	d008      	beq.n	801931a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8019308:	69b9      	ldr	r1, [r7, #24]
 801930a:	6a38      	ldr	r0, [r7, #32]
 801930c:	f7ff ff0e 	bl	801912c <ip_reass_free_complete_datagram>
 8019310:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8019312:	697a      	ldr	r2, [r7, #20]
 8019314:	68fb      	ldr	r3, [r7, #12]
 8019316:	4413      	add	r3, r2
 8019318:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801931a:	697a      	ldr	r2, [r7, #20]
 801931c:	683b      	ldr	r3, [r7, #0]
 801931e:	429a      	cmp	r2, r3
 8019320:	da02      	bge.n	8019328 <ip_reass_remove_oldest_datagram+0xb4>
 8019322:	693b      	ldr	r3, [r7, #16]
 8019324:	2b01      	cmp	r3, #1
 8019326:	dcac      	bgt.n	8019282 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8019328:	697b      	ldr	r3, [r7, #20]
}
 801932a:	4618      	mov	r0, r3
 801932c:	3728      	adds	r7, #40	; 0x28
 801932e:	46bd      	mov	sp, r7
 8019330:	bd80      	pop	{r7, pc}
 8019332:	bf00      	nop
 8019334:	20006ac8 	.word	0x20006ac8

08019338 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8019338:	b580      	push	{r7, lr}
 801933a:	b084      	sub	sp, #16
 801933c:	af00      	add	r7, sp, #0
 801933e:	6078      	str	r0, [r7, #4]
 8019340:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019342:	2004      	movs	r0, #4
 8019344:	f7f6 fbbc 	bl	800fac0 <memp_malloc>
 8019348:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801934a:	68fb      	ldr	r3, [r7, #12]
 801934c:	2b00      	cmp	r3, #0
 801934e:	d110      	bne.n	8019372 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8019350:	6839      	ldr	r1, [r7, #0]
 8019352:	6878      	ldr	r0, [r7, #4]
 8019354:	f7ff ff8e 	bl	8019274 <ip_reass_remove_oldest_datagram>
 8019358:	4602      	mov	r2, r0
 801935a:	683b      	ldr	r3, [r7, #0]
 801935c:	4293      	cmp	r3, r2
 801935e:	dc03      	bgt.n	8019368 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019360:	2004      	movs	r0, #4
 8019362:	f7f6 fbad 	bl	800fac0 <memp_malloc>
 8019366:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8019368:	68fb      	ldr	r3, [r7, #12]
 801936a:	2b00      	cmp	r3, #0
 801936c:	d101      	bne.n	8019372 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801936e:	2300      	movs	r3, #0
 8019370:	e016      	b.n	80193a0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8019372:	2220      	movs	r2, #32
 8019374:	2100      	movs	r1, #0
 8019376:	68f8      	ldr	r0, [r7, #12]
 8019378:	f001 f8f4 	bl	801a564 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801937c:	68fb      	ldr	r3, [r7, #12]
 801937e:	220f      	movs	r2, #15
 8019380:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8019382:	4b09      	ldr	r3, [pc, #36]	; (80193a8 <ip_reass_enqueue_new_datagram+0x70>)
 8019384:	681a      	ldr	r2, [r3, #0]
 8019386:	68fb      	ldr	r3, [r7, #12]
 8019388:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801938a:	4a07      	ldr	r2, [pc, #28]	; (80193a8 <ip_reass_enqueue_new_datagram+0x70>)
 801938c:	68fb      	ldr	r3, [r7, #12]
 801938e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8019390:	68fb      	ldr	r3, [r7, #12]
 8019392:	3308      	adds	r3, #8
 8019394:	2214      	movs	r2, #20
 8019396:	6879      	ldr	r1, [r7, #4]
 8019398:	4618      	mov	r0, r3
 801939a:	f001 f8bb 	bl	801a514 <memcpy>
  return ipr;
 801939e:	68fb      	ldr	r3, [r7, #12]
}
 80193a0:	4618      	mov	r0, r3
 80193a2:	3710      	adds	r7, #16
 80193a4:	46bd      	mov	sp, r7
 80193a6:	bd80      	pop	{r7, pc}
 80193a8:	20006ac8 	.word	0x20006ac8

080193ac <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80193ac:	b580      	push	{r7, lr}
 80193ae:	b082      	sub	sp, #8
 80193b0:	af00      	add	r7, sp, #0
 80193b2:	6078      	str	r0, [r7, #4]
 80193b4:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80193b6:	4b10      	ldr	r3, [pc, #64]	; (80193f8 <ip_reass_dequeue_datagram+0x4c>)
 80193b8:	681b      	ldr	r3, [r3, #0]
 80193ba:	687a      	ldr	r2, [r7, #4]
 80193bc:	429a      	cmp	r2, r3
 80193be:	d104      	bne.n	80193ca <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80193c0:	687b      	ldr	r3, [r7, #4]
 80193c2:	681b      	ldr	r3, [r3, #0]
 80193c4:	4a0c      	ldr	r2, [pc, #48]	; (80193f8 <ip_reass_dequeue_datagram+0x4c>)
 80193c6:	6013      	str	r3, [r2, #0]
 80193c8:	e00d      	b.n	80193e6 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80193ca:	683b      	ldr	r3, [r7, #0]
 80193cc:	2b00      	cmp	r3, #0
 80193ce:	d106      	bne.n	80193de <ip_reass_dequeue_datagram+0x32>
 80193d0:	4b0a      	ldr	r3, [pc, #40]	; (80193fc <ip_reass_dequeue_datagram+0x50>)
 80193d2:	f240 1245 	movw	r2, #325	; 0x145
 80193d6:	490a      	ldr	r1, [pc, #40]	; (8019400 <ip_reass_dequeue_datagram+0x54>)
 80193d8:	480a      	ldr	r0, [pc, #40]	; (8019404 <ip_reass_dequeue_datagram+0x58>)
 80193da:	f001 f975 	bl	801a6c8 <iprintf>
    prev->next = ipr->next;
 80193de:	687b      	ldr	r3, [r7, #4]
 80193e0:	681a      	ldr	r2, [r3, #0]
 80193e2:	683b      	ldr	r3, [r7, #0]
 80193e4:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80193e6:	6879      	ldr	r1, [r7, #4]
 80193e8:	2004      	movs	r0, #4
 80193ea:	f7f6 fbbb 	bl	800fb64 <memp_free>
}
 80193ee:	bf00      	nop
 80193f0:	3708      	adds	r7, #8
 80193f2:	46bd      	mov	sp, r7
 80193f4:	bd80      	pop	{r7, pc}
 80193f6:	bf00      	nop
 80193f8:	20006ac8 	.word	0x20006ac8
 80193fc:	0801eb48 	.word	0x0801eb48
 8019400:	0801ec10 	.word	0x0801ec10
 8019404:	0801eb90 	.word	0x0801eb90

08019408 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8019408:	b580      	push	{r7, lr}
 801940a:	b08c      	sub	sp, #48	; 0x30
 801940c:	af00      	add	r7, sp, #0
 801940e:	60f8      	str	r0, [r7, #12]
 8019410:	60b9      	str	r1, [r7, #8]
 8019412:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8019414:	2300      	movs	r3, #0
 8019416:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8019418:	2301      	movs	r3, #1
 801941a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801941c:	68bb      	ldr	r3, [r7, #8]
 801941e:	685b      	ldr	r3, [r3, #4]
 8019420:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019422:	69fb      	ldr	r3, [r7, #28]
 8019424:	885b      	ldrh	r3, [r3, #2]
 8019426:	b29b      	uxth	r3, r3
 8019428:	4618      	mov	r0, r3
 801942a:	f7f5 fe93 	bl	800f154 <lwip_htons>
 801942e:	4603      	mov	r3, r0
 8019430:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8019432:	69fb      	ldr	r3, [r7, #28]
 8019434:	781b      	ldrb	r3, [r3, #0]
 8019436:	f003 030f 	and.w	r3, r3, #15
 801943a:	b2db      	uxtb	r3, r3
 801943c:	009b      	lsls	r3, r3, #2
 801943e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8019440:	7e7b      	ldrb	r3, [r7, #25]
 8019442:	b29b      	uxth	r3, r3
 8019444:	8b7a      	ldrh	r2, [r7, #26]
 8019446:	429a      	cmp	r2, r3
 8019448:	d202      	bcs.n	8019450 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801944a:	f04f 33ff 	mov.w	r3, #4294967295
 801944e:	e135      	b.n	80196bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8019450:	7e7b      	ldrb	r3, [r7, #25]
 8019452:	b29b      	uxth	r3, r3
 8019454:	8b7a      	ldrh	r2, [r7, #26]
 8019456:	1ad3      	subs	r3, r2, r3
 8019458:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801945a:	69fb      	ldr	r3, [r7, #28]
 801945c:	88db      	ldrh	r3, [r3, #6]
 801945e:	b29b      	uxth	r3, r3
 8019460:	4618      	mov	r0, r3
 8019462:	f7f5 fe77 	bl	800f154 <lwip_htons>
 8019466:	4603      	mov	r3, r0
 8019468:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801946c:	b29b      	uxth	r3, r3
 801946e:	00db      	lsls	r3, r3, #3
 8019470:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8019472:	68bb      	ldr	r3, [r7, #8]
 8019474:	685b      	ldr	r3, [r3, #4]
 8019476:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8019478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801947a:	2200      	movs	r2, #0
 801947c:	701a      	strb	r2, [r3, #0]
 801947e:	2200      	movs	r2, #0
 8019480:	705a      	strb	r2, [r3, #1]
 8019482:	2200      	movs	r2, #0
 8019484:	709a      	strb	r2, [r3, #2]
 8019486:	2200      	movs	r2, #0
 8019488:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801948a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801948c:	8afa      	ldrh	r2, [r7, #22]
 801948e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8019490:	8afa      	ldrh	r2, [r7, #22]
 8019492:	8b7b      	ldrh	r3, [r7, #26]
 8019494:	4413      	add	r3, r2
 8019496:	b29a      	uxth	r2, r3
 8019498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801949a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801949c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801949e:	88db      	ldrh	r3, [r3, #6]
 80194a0:	b29b      	uxth	r3, r3
 80194a2:	8afa      	ldrh	r2, [r7, #22]
 80194a4:	429a      	cmp	r2, r3
 80194a6:	d902      	bls.n	80194ae <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80194a8:	f04f 33ff 	mov.w	r3, #4294967295
 80194ac:	e106      	b.n	80196bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80194ae:	68fb      	ldr	r3, [r7, #12]
 80194b0:	685b      	ldr	r3, [r3, #4]
 80194b2:	627b      	str	r3, [r7, #36]	; 0x24
 80194b4:	e068      	b.n	8019588 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80194b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194b8:	685b      	ldr	r3, [r3, #4]
 80194ba:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80194bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194be:	889b      	ldrh	r3, [r3, #4]
 80194c0:	b29a      	uxth	r2, r3
 80194c2:	693b      	ldr	r3, [r7, #16]
 80194c4:	889b      	ldrh	r3, [r3, #4]
 80194c6:	b29b      	uxth	r3, r3
 80194c8:	429a      	cmp	r2, r3
 80194ca:	d235      	bcs.n	8019538 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80194cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80194d0:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80194d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	d020      	beq.n	801951a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80194d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194da:	889b      	ldrh	r3, [r3, #4]
 80194dc:	b29a      	uxth	r2, r3
 80194de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194e0:	88db      	ldrh	r3, [r3, #6]
 80194e2:	b29b      	uxth	r3, r3
 80194e4:	429a      	cmp	r2, r3
 80194e6:	d307      	bcc.n	80194f8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80194e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194ea:	88db      	ldrh	r3, [r3, #6]
 80194ec:	b29a      	uxth	r2, r3
 80194ee:	693b      	ldr	r3, [r7, #16]
 80194f0:	889b      	ldrh	r3, [r3, #4]
 80194f2:	b29b      	uxth	r3, r3
 80194f4:	429a      	cmp	r2, r3
 80194f6:	d902      	bls.n	80194fe <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80194f8:	f04f 33ff 	mov.w	r3, #4294967295
 80194fc:	e0de      	b.n	80196bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80194fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019500:	68ba      	ldr	r2, [r7, #8]
 8019502:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8019504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019506:	88db      	ldrh	r3, [r3, #6]
 8019508:	b29a      	uxth	r2, r3
 801950a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801950c:	889b      	ldrh	r3, [r3, #4]
 801950e:	b29b      	uxth	r3, r3
 8019510:	429a      	cmp	r2, r3
 8019512:	d03d      	beq.n	8019590 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019514:	2300      	movs	r3, #0
 8019516:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8019518:	e03a      	b.n	8019590 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801951a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801951c:	88db      	ldrh	r3, [r3, #6]
 801951e:	b29a      	uxth	r2, r3
 8019520:	693b      	ldr	r3, [r7, #16]
 8019522:	889b      	ldrh	r3, [r3, #4]
 8019524:	b29b      	uxth	r3, r3
 8019526:	429a      	cmp	r2, r3
 8019528:	d902      	bls.n	8019530 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801952a:	f04f 33ff 	mov.w	r3, #4294967295
 801952e:	e0c5      	b.n	80196bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8019530:	68fb      	ldr	r3, [r7, #12]
 8019532:	68ba      	ldr	r2, [r7, #8]
 8019534:	605a      	str	r2, [r3, #4]
      break;
 8019536:	e02b      	b.n	8019590 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8019538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801953a:	889b      	ldrh	r3, [r3, #4]
 801953c:	b29a      	uxth	r2, r3
 801953e:	693b      	ldr	r3, [r7, #16]
 8019540:	889b      	ldrh	r3, [r3, #4]
 8019542:	b29b      	uxth	r3, r3
 8019544:	429a      	cmp	r2, r3
 8019546:	d102      	bne.n	801954e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019548:	f04f 33ff 	mov.w	r3, #4294967295
 801954c:	e0b6      	b.n	80196bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801954e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019550:	889b      	ldrh	r3, [r3, #4]
 8019552:	b29a      	uxth	r2, r3
 8019554:	693b      	ldr	r3, [r7, #16]
 8019556:	88db      	ldrh	r3, [r3, #6]
 8019558:	b29b      	uxth	r3, r3
 801955a:	429a      	cmp	r2, r3
 801955c:	d202      	bcs.n	8019564 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801955e:	f04f 33ff 	mov.w	r3, #4294967295
 8019562:	e0ab      	b.n	80196bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8019564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019566:	2b00      	cmp	r3, #0
 8019568:	d009      	beq.n	801957e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801956a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801956c:	88db      	ldrh	r3, [r3, #6]
 801956e:	b29a      	uxth	r2, r3
 8019570:	693b      	ldr	r3, [r7, #16]
 8019572:	889b      	ldrh	r3, [r3, #4]
 8019574:	b29b      	uxth	r3, r3
 8019576:	429a      	cmp	r2, r3
 8019578:	d001      	beq.n	801957e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801957a:	2300      	movs	r3, #0
 801957c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801957e:	693b      	ldr	r3, [r7, #16]
 8019580:	681b      	ldr	r3, [r3, #0]
 8019582:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8019584:	693b      	ldr	r3, [r7, #16]
 8019586:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8019588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801958a:	2b00      	cmp	r3, #0
 801958c:	d193      	bne.n	80194b6 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801958e:	e000      	b.n	8019592 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8019590:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8019592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019594:	2b00      	cmp	r3, #0
 8019596:	d12d      	bne.n	80195f4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8019598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801959a:	2b00      	cmp	r3, #0
 801959c:	d01c      	beq.n	80195d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801959e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195a0:	88db      	ldrh	r3, [r3, #6]
 80195a2:	b29a      	uxth	r2, r3
 80195a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195a6:	889b      	ldrh	r3, [r3, #4]
 80195a8:	b29b      	uxth	r3, r3
 80195aa:	429a      	cmp	r2, r3
 80195ac:	d906      	bls.n	80195bc <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80195ae:	4b45      	ldr	r3, [pc, #276]	; (80196c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80195b0:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80195b4:	4944      	ldr	r1, [pc, #272]	; (80196c8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80195b6:	4845      	ldr	r0, [pc, #276]	; (80196cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80195b8:	f001 f886 	bl	801a6c8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80195bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195be:	68ba      	ldr	r2, [r7, #8]
 80195c0:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80195c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195c4:	88db      	ldrh	r3, [r3, #6]
 80195c6:	b29a      	uxth	r2, r3
 80195c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195ca:	889b      	ldrh	r3, [r3, #4]
 80195cc:	b29b      	uxth	r3, r3
 80195ce:	429a      	cmp	r2, r3
 80195d0:	d010      	beq.n	80195f4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80195d2:	2300      	movs	r3, #0
 80195d4:	623b      	str	r3, [r7, #32]
 80195d6:	e00d      	b.n	80195f4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80195d8:	68fb      	ldr	r3, [r7, #12]
 80195da:	685b      	ldr	r3, [r3, #4]
 80195dc:	2b00      	cmp	r3, #0
 80195de:	d006      	beq.n	80195ee <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80195e0:	4b38      	ldr	r3, [pc, #224]	; (80196c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80195e2:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80195e6:	493a      	ldr	r1, [pc, #232]	; (80196d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80195e8:	4838      	ldr	r0, [pc, #224]	; (80196cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80195ea:	f001 f86d 	bl	801a6c8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80195ee:	68fb      	ldr	r3, [r7, #12]
 80195f0:	68ba      	ldr	r2, [r7, #8]
 80195f2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80195f4:	687b      	ldr	r3, [r7, #4]
 80195f6:	2b00      	cmp	r3, #0
 80195f8:	d105      	bne.n	8019606 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80195fa:	68fb      	ldr	r3, [r7, #12]
 80195fc:	7f9b      	ldrb	r3, [r3, #30]
 80195fe:	f003 0301 	and.w	r3, r3, #1
 8019602:	2b00      	cmp	r3, #0
 8019604:	d059      	beq.n	80196ba <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8019606:	6a3b      	ldr	r3, [r7, #32]
 8019608:	2b00      	cmp	r3, #0
 801960a:	d04f      	beq.n	80196ac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801960c:	68fb      	ldr	r3, [r7, #12]
 801960e:	685b      	ldr	r3, [r3, #4]
 8019610:	2b00      	cmp	r3, #0
 8019612:	d006      	beq.n	8019622 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8019614:	68fb      	ldr	r3, [r7, #12]
 8019616:	685b      	ldr	r3, [r3, #4]
 8019618:	685b      	ldr	r3, [r3, #4]
 801961a:	889b      	ldrh	r3, [r3, #4]
 801961c:	b29b      	uxth	r3, r3
 801961e:	2b00      	cmp	r3, #0
 8019620:	d002      	beq.n	8019628 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8019622:	2300      	movs	r3, #0
 8019624:	623b      	str	r3, [r7, #32]
 8019626:	e041      	b.n	80196ac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8019628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801962a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801962c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801962e:	681b      	ldr	r3, [r3, #0]
 8019630:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019632:	e012      	b.n	801965a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8019634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019636:	685b      	ldr	r3, [r3, #4]
 8019638:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801963a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801963c:	88db      	ldrh	r3, [r3, #6]
 801963e:	b29a      	uxth	r2, r3
 8019640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019642:	889b      	ldrh	r3, [r3, #4]
 8019644:	b29b      	uxth	r3, r3
 8019646:	429a      	cmp	r2, r3
 8019648:	d002      	beq.n	8019650 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801964a:	2300      	movs	r3, #0
 801964c:	623b      	str	r3, [r7, #32]
            break;
 801964e:	e007      	b.n	8019660 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8019650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019652:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8019654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019656:	681b      	ldr	r3, [r3, #0]
 8019658:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801965a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801965c:	2b00      	cmp	r3, #0
 801965e:	d1e9      	bne.n	8019634 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8019660:	6a3b      	ldr	r3, [r7, #32]
 8019662:	2b00      	cmp	r3, #0
 8019664:	d022      	beq.n	80196ac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8019666:	68fb      	ldr	r3, [r7, #12]
 8019668:	685b      	ldr	r3, [r3, #4]
 801966a:	2b00      	cmp	r3, #0
 801966c:	d106      	bne.n	801967c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801966e:	4b15      	ldr	r3, [pc, #84]	; (80196c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019670:	f240 12df 	movw	r2, #479	; 0x1df
 8019674:	4917      	ldr	r1, [pc, #92]	; (80196d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019676:	4815      	ldr	r0, [pc, #84]	; (80196cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019678:	f001 f826 	bl	801a6c8 <iprintf>
          LWIP_ASSERT("sanity check",
 801967c:	68fb      	ldr	r3, [r7, #12]
 801967e:	685b      	ldr	r3, [r3, #4]
 8019680:	685b      	ldr	r3, [r3, #4]
 8019682:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019684:	429a      	cmp	r2, r3
 8019686:	d106      	bne.n	8019696 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8019688:	4b0e      	ldr	r3, [pc, #56]	; (80196c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801968a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801968e:	4911      	ldr	r1, [pc, #68]	; (80196d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019690:	480e      	ldr	r0, [pc, #56]	; (80196cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019692:	f001 f819 	bl	801a6c8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8019696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019698:	681b      	ldr	r3, [r3, #0]
 801969a:	2b00      	cmp	r3, #0
 801969c:	d006      	beq.n	80196ac <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801969e:	4b09      	ldr	r3, [pc, #36]	; (80196c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80196a0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80196a4:	490c      	ldr	r1, [pc, #48]	; (80196d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80196a6:	4809      	ldr	r0, [pc, #36]	; (80196cc <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80196a8:	f001 f80e 	bl	801a6c8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80196ac:	6a3b      	ldr	r3, [r7, #32]
 80196ae:	2b00      	cmp	r3, #0
 80196b0:	bf14      	ite	ne
 80196b2:	2301      	movne	r3, #1
 80196b4:	2300      	moveq	r3, #0
 80196b6:	b2db      	uxtb	r3, r3
 80196b8:	e000      	b.n	80196bc <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80196ba:	2300      	movs	r3, #0
}
 80196bc:	4618      	mov	r0, r3
 80196be:	3730      	adds	r7, #48	; 0x30
 80196c0:	46bd      	mov	sp, r7
 80196c2:	bd80      	pop	{r7, pc}
 80196c4:	0801eb48 	.word	0x0801eb48
 80196c8:	0801ec2c 	.word	0x0801ec2c
 80196cc:	0801eb90 	.word	0x0801eb90
 80196d0:	0801ec4c 	.word	0x0801ec4c
 80196d4:	0801ec84 	.word	0x0801ec84
 80196d8:	0801ec94 	.word	0x0801ec94

080196dc <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80196dc:	b580      	push	{r7, lr}
 80196de:	b08e      	sub	sp, #56	; 0x38
 80196e0:	af00      	add	r7, sp, #0
 80196e2:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80196e4:	687b      	ldr	r3, [r7, #4]
 80196e6:	685b      	ldr	r3, [r3, #4]
 80196e8:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80196ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196ec:	781b      	ldrb	r3, [r3, #0]
 80196ee:	f003 030f 	and.w	r3, r3, #15
 80196f2:	b2db      	uxtb	r3, r3
 80196f4:	009b      	lsls	r3, r3, #2
 80196f6:	b2db      	uxtb	r3, r3
 80196f8:	2b14      	cmp	r3, #20
 80196fa:	f040 8167 	bne.w	80199cc <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80196fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019700:	88db      	ldrh	r3, [r3, #6]
 8019702:	b29b      	uxth	r3, r3
 8019704:	4618      	mov	r0, r3
 8019706:	f7f5 fd25 	bl	800f154 <lwip_htons>
 801970a:	4603      	mov	r3, r0
 801970c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019710:	b29b      	uxth	r3, r3
 8019712:	00db      	lsls	r3, r3, #3
 8019714:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019718:	885b      	ldrh	r3, [r3, #2]
 801971a:	b29b      	uxth	r3, r3
 801971c:	4618      	mov	r0, r3
 801971e:	f7f5 fd19 	bl	800f154 <lwip_htons>
 8019722:	4603      	mov	r3, r0
 8019724:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8019726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019728:	781b      	ldrb	r3, [r3, #0]
 801972a:	f003 030f 	and.w	r3, r3, #15
 801972e:	b2db      	uxtb	r3, r3
 8019730:	009b      	lsls	r3, r3, #2
 8019732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8019736:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801973a:	b29b      	uxth	r3, r3
 801973c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801973e:	429a      	cmp	r2, r3
 8019740:	f0c0 8146 	bcc.w	80199d0 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8019744:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8019748:	b29b      	uxth	r3, r3
 801974a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801974c:	1ad3      	subs	r3, r2, r3
 801974e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8019750:	6878      	ldr	r0, [r7, #4]
 8019752:	f7f7 f8d5 	bl	8010900 <pbuf_clen>
 8019756:	4603      	mov	r3, r0
 8019758:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801975a:	4b9f      	ldr	r3, [pc, #636]	; (80199d8 <ip4_reass+0x2fc>)
 801975c:	881b      	ldrh	r3, [r3, #0]
 801975e:	461a      	mov	r2, r3
 8019760:	8c3b      	ldrh	r3, [r7, #32]
 8019762:	4413      	add	r3, r2
 8019764:	2b0a      	cmp	r3, #10
 8019766:	dd10      	ble.n	801978a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019768:	8c3b      	ldrh	r3, [r7, #32]
 801976a:	4619      	mov	r1, r3
 801976c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801976e:	f7ff fd81 	bl	8019274 <ip_reass_remove_oldest_datagram>
 8019772:	4603      	mov	r3, r0
 8019774:	2b00      	cmp	r3, #0
 8019776:	f000 812d 	beq.w	80199d4 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801977a:	4b97      	ldr	r3, [pc, #604]	; (80199d8 <ip4_reass+0x2fc>)
 801977c:	881b      	ldrh	r3, [r3, #0]
 801977e:	461a      	mov	r2, r3
 8019780:	8c3b      	ldrh	r3, [r7, #32]
 8019782:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019784:	2b0a      	cmp	r3, #10
 8019786:	f300 8125 	bgt.w	80199d4 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801978a:	4b94      	ldr	r3, [pc, #592]	; (80199dc <ip4_reass+0x300>)
 801978c:	681b      	ldr	r3, [r3, #0]
 801978e:	633b      	str	r3, [r7, #48]	; 0x30
 8019790:	e015      	b.n	80197be <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8019792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019794:	695a      	ldr	r2, [r3, #20]
 8019796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019798:	68db      	ldr	r3, [r3, #12]
 801979a:	429a      	cmp	r2, r3
 801979c:	d10c      	bne.n	80197b8 <ip4_reass+0xdc>
 801979e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197a0:	699a      	ldr	r2, [r3, #24]
 80197a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197a4:	691b      	ldr	r3, [r3, #16]
 80197a6:	429a      	cmp	r2, r3
 80197a8:	d106      	bne.n	80197b8 <ip4_reass+0xdc>
 80197aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197ac:	899a      	ldrh	r2, [r3, #12]
 80197ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197b0:	889b      	ldrh	r3, [r3, #4]
 80197b2:	b29b      	uxth	r3, r3
 80197b4:	429a      	cmp	r2, r3
 80197b6:	d006      	beq.n	80197c6 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80197b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197ba:	681b      	ldr	r3, [r3, #0]
 80197bc:	633b      	str	r3, [r7, #48]	; 0x30
 80197be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197c0:	2b00      	cmp	r3, #0
 80197c2:	d1e6      	bne.n	8019792 <ip4_reass+0xb6>
 80197c4:	e000      	b.n	80197c8 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80197c6:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80197c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	d109      	bne.n	80197e2 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80197ce:	8c3b      	ldrh	r3, [r7, #32]
 80197d0:	4619      	mov	r1, r3
 80197d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80197d4:	f7ff fdb0 	bl	8019338 <ip_reass_enqueue_new_datagram>
 80197d8:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80197da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197dc:	2b00      	cmp	r3, #0
 80197de:	d11c      	bne.n	801981a <ip4_reass+0x13e>
      goto nullreturn;
 80197e0:	e109      	b.n	80199f6 <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80197e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197e4:	88db      	ldrh	r3, [r3, #6]
 80197e6:	b29b      	uxth	r3, r3
 80197e8:	4618      	mov	r0, r3
 80197ea:	f7f5 fcb3 	bl	800f154 <lwip_htons>
 80197ee:	4603      	mov	r3, r0
 80197f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80197f4:	2b00      	cmp	r3, #0
 80197f6:	d110      	bne.n	801981a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80197f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197fa:	89db      	ldrh	r3, [r3, #14]
 80197fc:	4618      	mov	r0, r3
 80197fe:	f7f5 fca9 	bl	800f154 <lwip_htons>
 8019802:	4603      	mov	r3, r0
 8019804:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8019808:	2b00      	cmp	r3, #0
 801980a:	d006      	beq.n	801981a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801980c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801980e:	3308      	adds	r3, #8
 8019810:	2214      	movs	r2, #20
 8019812:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019814:	4618      	mov	r0, r3
 8019816:	f000 fe7d 	bl	801a514 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801981a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801981c:	88db      	ldrh	r3, [r3, #6]
 801981e:	b29b      	uxth	r3, r3
 8019820:	f003 0320 	and.w	r3, r3, #32
 8019824:	2b00      	cmp	r3, #0
 8019826:	bf0c      	ite	eq
 8019828:	2301      	moveq	r3, #1
 801982a:	2300      	movne	r3, #0
 801982c:	b2db      	uxtb	r3, r3
 801982e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8019830:	69fb      	ldr	r3, [r7, #28]
 8019832:	2b00      	cmp	r3, #0
 8019834:	d00e      	beq.n	8019854 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8019836:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019838:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801983a:	4413      	add	r3, r2
 801983c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801983e:	8b7a      	ldrh	r2, [r7, #26]
 8019840:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019842:	429a      	cmp	r2, r3
 8019844:	f0c0 80a0 	bcc.w	8019988 <ip4_reass+0x2ac>
 8019848:	8b7b      	ldrh	r3, [r7, #26]
 801984a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801984e:	4293      	cmp	r3, r2
 8019850:	f200 809a 	bhi.w	8019988 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8019854:	69fa      	ldr	r2, [r7, #28]
 8019856:	6879      	ldr	r1, [r7, #4]
 8019858:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801985a:	f7ff fdd5 	bl	8019408 <ip_reass_chain_frag_into_datagram_and_validate>
 801985e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8019860:	697b      	ldr	r3, [r7, #20]
 8019862:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019866:	f000 8091 	beq.w	801998c <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801986a:	4b5b      	ldr	r3, [pc, #364]	; (80199d8 <ip4_reass+0x2fc>)
 801986c:	881a      	ldrh	r2, [r3, #0]
 801986e:	8c3b      	ldrh	r3, [r7, #32]
 8019870:	4413      	add	r3, r2
 8019872:	b29a      	uxth	r2, r3
 8019874:	4b58      	ldr	r3, [pc, #352]	; (80199d8 <ip4_reass+0x2fc>)
 8019876:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8019878:	69fb      	ldr	r3, [r7, #28]
 801987a:	2b00      	cmp	r3, #0
 801987c:	d00d      	beq.n	801989a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801987e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019880:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019882:	4413      	add	r3, r2
 8019884:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8019886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019888:	8a7a      	ldrh	r2, [r7, #18]
 801988a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801988c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801988e:	7f9b      	ldrb	r3, [r3, #30]
 8019890:	f043 0301 	orr.w	r3, r3, #1
 8019894:	b2da      	uxtb	r2, r3
 8019896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019898:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801989a:	697b      	ldr	r3, [r7, #20]
 801989c:	2b01      	cmp	r3, #1
 801989e:	d171      	bne.n	8019984 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80198a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198a2:	8b9b      	ldrh	r3, [r3, #28]
 80198a4:	3314      	adds	r3, #20
 80198a6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80198a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198aa:	685b      	ldr	r3, [r3, #4]
 80198ac:	685b      	ldr	r3, [r3, #4]
 80198ae:	681b      	ldr	r3, [r3, #0]
 80198b0:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80198b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198b4:	685b      	ldr	r3, [r3, #4]
 80198b6:	685b      	ldr	r3, [r3, #4]
 80198b8:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80198ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198bc:	3308      	adds	r3, #8
 80198be:	2214      	movs	r2, #20
 80198c0:	4619      	mov	r1, r3
 80198c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80198c4:	f000 fe26 	bl	801a514 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80198c8:	8a3b      	ldrh	r3, [r7, #16]
 80198ca:	4618      	mov	r0, r3
 80198cc:	f7f5 fc42 	bl	800f154 <lwip_htons>
 80198d0:	4603      	mov	r3, r0
 80198d2:	461a      	mov	r2, r3
 80198d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198d6:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80198d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198da:	2200      	movs	r2, #0
 80198dc:	719a      	strb	r2, [r3, #6]
 80198de:	2200      	movs	r2, #0
 80198e0:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80198e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198e4:	2200      	movs	r2, #0
 80198e6:	729a      	strb	r2, [r3, #10]
 80198e8:	2200      	movs	r2, #0
 80198ea:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80198ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198ee:	685b      	ldr	r3, [r3, #4]
 80198f0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80198f2:	e00d      	b.n	8019910 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80198f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80198f6:	685b      	ldr	r3, [r3, #4]
 80198f8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80198fa:	2114      	movs	r1, #20
 80198fc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80198fe:	f7f6 feeb 	bl	80106d8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8019902:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019904:	6878      	ldr	r0, [r7, #4]
 8019906:	f7f7 f83b 	bl	8010980 <pbuf_cat>
      r = iprh->next_pbuf;
 801990a:	68fb      	ldr	r3, [r7, #12]
 801990c:	681b      	ldr	r3, [r3, #0]
 801990e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8019910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019912:	2b00      	cmp	r3, #0
 8019914:	d1ee      	bne.n	80198f4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8019916:	4b31      	ldr	r3, [pc, #196]	; (80199dc <ip4_reass+0x300>)
 8019918:	681b      	ldr	r3, [r3, #0]
 801991a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801991c:	429a      	cmp	r2, r3
 801991e:	d102      	bne.n	8019926 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8019920:	2300      	movs	r3, #0
 8019922:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019924:	e010      	b.n	8019948 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019926:	4b2d      	ldr	r3, [pc, #180]	; (80199dc <ip4_reass+0x300>)
 8019928:	681b      	ldr	r3, [r3, #0]
 801992a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801992c:	e007      	b.n	801993e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801992e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019930:	681b      	ldr	r3, [r3, #0]
 8019932:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019934:	429a      	cmp	r2, r3
 8019936:	d006      	beq.n	8019946 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801993a:	681b      	ldr	r3, [r3, #0]
 801993c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801993e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019940:	2b00      	cmp	r3, #0
 8019942:	d1f4      	bne.n	801992e <ip4_reass+0x252>
 8019944:	e000      	b.n	8019948 <ip4_reass+0x26c>
          break;
 8019946:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8019948:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801994a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801994c:	f7ff fd2e 	bl	80193ac <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8019950:	6878      	ldr	r0, [r7, #4]
 8019952:	f7f6 ffd5 	bl	8010900 <pbuf_clen>
 8019956:	4603      	mov	r3, r0
 8019958:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801995a:	4b1f      	ldr	r3, [pc, #124]	; (80199d8 <ip4_reass+0x2fc>)
 801995c:	881b      	ldrh	r3, [r3, #0]
 801995e:	8c3a      	ldrh	r2, [r7, #32]
 8019960:	429a      	cmp	r2, r3
 8019962:	d906      	bls.n	8019972 <ip4_reass+0x296>
 8019964:	4b1e      	ldr	r3, [pc, #120]	; (80199e0 <ip4_reass+0x304>)
 8019966:	f240 229b 	movw	r2, #667	; 0x29b
 801996a:	491e      	ldr	r1, [pc, #120]	; (80199e4 <ip4_reass+0x308>)
 801996c:	481e      	ldr	r0, [pc, #120]	; (80199e8 <ip4_reass+0x30c>)
 801996e:	f000 feab 	bl	801a6c8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8019972:	4b19      	ldr	r3, [pc, #100]	; (80199d8 <ip4_reass+0x2fc>)
 8019974:	881a      	ldrh	r2, [r3, #0]
 8019976:	8c3b      	ldrh	r3, [r7, #32]
 8019978:	1ad3      	subs	r3, r2, r3
 801997a:	b29a      	uxth	r2, r3
 801997c:	4b16      	ldr	r3, [pc, #88]	; (80199d8 <ip4_reass+0x2fc>)
 801997e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	e03c      	b.n	80199fe <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8019984:	2300      	movs	r3, #0
 8019986:	e03a      	b.n	80199fe <ip4_reass+0x322>
      goto nullreturn_ipr;
 8019988:	bf00      	nop
 801998a:	e000      	b.n	801998e <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 801998c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801998e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019990:	2b00      	cmp	r3, #0
 8019992:	d106      	bne.n	80199a2 <ip4_reass+0x2c6>
 8019994:	4b12      	ldr	r3, [pc, #72]	; (80199e0 <ip4_reass+0x304>)
 8019996:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801999a:	4914      	ldr	r1, [pc, #80]	; (80199ec <ip4_reass+0x310>)
 801999c:	4812      	ldr	r0, [pc, #72]	; (80199e8 <ip4_reass+0x30c>)
 801999e:	f000 fe93 	bl	801a6c8 <iprintf>
  if (ipr->p == NULL) {
 80199a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80199a4:	685b      	ldr	r3, [r3, #4]
 80199a6:	2b00      	cmp	r3, #0
 80199a8:	d124      	bne.n	80199f4 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80199aa:	4b0c      	ldr	r3, [pc, #48]	; (80199dc <ip4_reass+0x300>)
 80199ac:	681b      	ldr	r3, [r3, #0]
 80199ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80199b0:	429a      	cmp	r2, r3
 80199b2:	d006      	beq.n	80199c2 <ip4_reass+0x2e6>
 80199b4:	4b0a      	ldr	r3, [pc, #40]	; (80199e0 <ip4_reass+0x304>)
 80199b6:	f240 22ab 	movw	r2, #683	; 0x2ab
 80199ba:	490d      	ldr	r1, [pc, #52]	; (80199f0 <ip4_reass+0x314>)
 80199bc:	480a      	ldr	r0, [pc, #40]	; (80199e8 <ip4_reass+0x30c>)
 80199be:	f000 fe83 	bl	801a6c8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80199c2:	2100      	movs	r1, #0
 80199c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80199c6:	f7ff fcf1 	bl	80193ac <ip_reass_dequeue_datagram>
 80199ca:	e014      	b.n	80199f6 <ip4_reass+0x31a>
    goto nullreturn;
 80199cc:	bf00      	nop
 80199ce:	e012      	b.n	80199f6 <ip4_reass+0x31a>
    goto nullreturn;
 80199d0:	bf00      	nop
 80199d2:	e010      	b.n	80199f6 <ip4_reass+0x31a>
      goto nullreturn;
 80199d4:	bf00      	nop
 80199d6:	e00e      	b.n	80199f6 <ip4_reass+0x31a>
 80199d8:	20006acc 	.word	0x20006acc
 80199dc:	20006ac8 	.word	0x20006ac8
 80199e0:	0801eb48 	.word	0x0801eb48
 80199e4:	0801ecb8 	.word	0x0801ecb8
 80199e8:	0801eb90 	.word	0x0801eb90
 80199ec:	0801ecd4 	.word	0x0801ecd4
 80199f0:	0801ece0 	.word	0x0801ece0
  }

nullreturn:
 80199f4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80199f6:	6878      	ldr	r0, [r7, #4]
 80199f8:	f7f6 fef4 	bl	80107e4 <pbuf_free>
  return NULL;
 80199fc:	2300      	movs	r3, #0
}
 80199fe:	4618      	mov	r0, r3
 8019a00:	3738      	adds	r7, #56	; 0x38
 8019a02:	46bd      	mov	sp, r7
 8019a04:	bd80      	pop	{r7, pc}
 8019a06:	bf00      	nop

08019a08 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8019a08:	b580      	push	{r7, lr}
 8019a0a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8019a0c:	2005      	movs	r0, #5
 8019a0e:	f7f6 f857 	bl	800fac0 <memp_malloc>
 8019a12:	4603      	mov	r3, r0
}
 8019a14:	4618      	mov	r0, r3
 8019a16:	bd80      	pop	{r7, pc}

08019a18 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8019a18:	b580      	push	{r7, lr}
 8019a1a:	b082      	sub	sp, #8
 8019a1c:	af00      	add	r7, sp, #0
 8019a1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8019a20:	687b      	ldr	r3, [r7, #4]
 8019a22:	2b00      	cmp	r3, #0
 8019a24:	d106      	bne.n	8019a34 <ip_frag_free_pbuf_custom_ref+0x1c>
 8019a26:	4b07      	ldr	r3, [pc, #28]	; (8019a44 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8019a28:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8019a2c:	4906      	ldr	r1, [pc, #24]	; (8019a48 <ip_frag_free_pbuf_custom_ref+0x30>)
 8019a2e:	4807      	ldr	r0, [pc, #28]	; (8019a4c <ip_frag_free_pbuf_custom_ref+0x34>)
 8019a30:	f000 fe4a 	bl	801a6c8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8019a34:	6879      	ldr	r1, [r7, #4]
 8019a36:	2005      	movs	r0, #5
 8019a38:	f7f6 f894 	bl	800fb64 <memp_free>
}
 8019a3c:	bf00      	nop
 8019a3e:	3708      	adds	r7, #8
 8019a40:	46bd      	mov	sp, r7
 8019a42:	bd80      	pop	{r7, pc}
 8019a44:	0801eb48 	.word	0x0801eb48
 8019a48:	0801ed00 	.word	0x0801ed00
 8019a4c:	0801eb90 	.word	0x0801eb90

08019a50 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8019a50:	b580      	push	{r7, lr}
 8019a52:	b084      	sub	sp, #16
 8019a54:	af00      	add	r7, sp, #0
 8019a56:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8019a5c:	68fb      	ldr	r3, [r7, #12]
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	d106      	bne.n	8019a70 <ipfrag_free_pbuf_custom+0x20>
 8019a62:	4b11      	ldr	r3, [pc, #68]	; (8019aa8 <ipfrag_free_pbuf_custom+0x58>)
 8019a64:	f240 22ce 	movw	r2, #718	; 0x2ce
 8019a68:	4910      	ldr	r1, [pc, #64]	; (8019aac <ipfrag_free_pbuf_custom+0x5c>)
 8019a6a:	4811      	ldr	r0, [pc, #68]	; (8019ab0 <ipfrag_free_pbuf_custom+0x60>)
 8019a6c:	f000 fe2c 	bl	801a6c8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8019a70:	68fa      	ldr	r2, [r7, #12]
 8019a72:	687b      	ldr	r3, [r7, #4]
 8019a74:	429a      	cmp	r2, r3
 8019a76:	d006      	beq.n	8019a86 <ipfrag_free_pbuf_custom+0x36>
 8019a78:	4b0b      	ldr	r3, [pc, #44]	; (8019aa8 <ipfrag_free_pbuf_custom+0x58>)
 8019a7a:	f240 22cf 	movw	r2, #719	; 0x2cf
 8019a7e:	490d      	ldr	r1, [pc, #52]	; (8019ab4 <ipfrag_free_pbuf_custom+0x64>)
 8019a80:	480b      	ldr	r0, [pc, #44]	; (8019ab0 <ipfrag_free_pbuf_custom+0x60>)
 8019a82:	f000 fe21 	bl	801a6c8 <iprintf>
  if (pcr->original != NULL) {
 8019a86:	68fb      	ldr	r3, [r7, #12]
 8019a88:	695b      	ldr	r3, [r3, #20]
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	d004      	beq.n	8019a98 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8019a8e:	68fb      	ldr	r3, [r7, #12]
 8019a90:	695b      	ldr	r3, [r3, #20]
 8019a92:	4618      	mov	r0, r3
 8019a94:	f7f6 fea6 	bl	80107e4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8019a98:	68f8      	ldr	r0, [r7, #12]
 8019a9a:	f7ff ffbd 	bl	8019a18 <ip_frag_free_pbuf_custom_ref>
}
 8019a9e:	bf00      	nop
 8019aa0:	3710      	adds	r7, #16
 8019aa2:	46bd      	mov	sp, r7
 8019aa4:	bd80      	pop	{r7, pc}
 8019aa6:	bf00      	nop
 8019aa8:	0801eb48 	.word	0x0801eb48
 8019aac:	0801ed0c 	.word	0x0801ed0c
 8019ab0:	0801eb90 	.word	0x0801eb90
 8019ab4:	0801ed18 	.word	0x0801ed18

08019ab8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8019ab8:	b580      	push	{r7, lr}
 8019aba:	b094      	sub	sp, #80	; 0x50
 8019abc:	af02      	add	r7, sp, #8
 8019abe:	60f8      	str	r0, [r7, #12]
 8019ac0:	60b9      	str	r1, [r7, #8]
 8019ac2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8019ac4:	2300      	movs	r3, #0
 8019ac6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8019aca:	68bb      	ldr	r3, [r7, #8]
 8019acc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019ace:	3b14      	subs	r3, #20
 8019ad0:	2b00      	cmp	r3, #0
 8019ad2:	da00      	bge.n	8019ad6 <ip4_frag+0x1e>
 8019ad4:	3307      	adds	r3, #7
 8019ad6:	10db      	asrs	r3, r3, #3
 8019ad8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8019ada:	2314      	movs	r3, #20
 8019adc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8019ade:	68fb      	ldr	r3, [r7, #12]
 8019ae0:	685b      	ldr	r3, [r3, #4]
 8019ae2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8019ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019ae6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8019ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019aea:	781b      	ldrb	r3, [r3, #0]
 8019aec:	f003 030f 	and.w	r3, r3, #15
 8019af0:	b2db      	uxtb	r3, r3
 8019af2:	009b      	lsls	r3, r3, #2
 8019af4:	b2db      	uxtb	r3, r3
 8019af6:	2b14      	cmp	r3, #20
 8019af8:	d002      	beq.n	8019b00 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8019afa:	f06f 0305 	mvn.w	r3, #5
 8019afe:	e110      	b.n	8019d22 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8019b00:	68fb      	ldr	r3, [r7, #12]
 8019b02:	895b      	ldrh	r3, [r3, #10]
 8019b04:	2b13      	cmp	r3, #19
 8019b06:	d809      	bhi.n	8019b1c <ip4_frag+0x64>
 8019b08:	4b88      	ldr	r3, [pc, #544]	; (8019d2c <ip4_frag+0x274>)
 8019b0a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8019b0e:	4988      	ldr	r1, [pc, #544]	; (8019d30 <ip4_frag+0x278>)
 8019b10:	4888      	ldr	r0, [pc, #544]	; (8019d34 <ip4_frag+0x27c>)
 8019b12:	f000 fdd9 	bl	801a6c8 <iprintf>
 8019b16:	f06f 0305 	mvn.w	r3, #5
 8019b1a:	e102      	b.n	8019d22 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8019b1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019b1e:	88db      	ldrh	r3, [r3, #6]
 8019b20:	b29b      	uxth	r3, r3
 8019b22:	4618      	mov	r0, r3
 8019b24:	f7f5 fb16 	bl	800f154 <lwip_htons>
 8019b28:	4603      	mov	r3, r0
 8019b2a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8019b2c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019b2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019b32:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8019b36:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019b38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019b3c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8019b3e:	68fb      	ldr	r3, [r7, #12]
 8019b40:	891b      	ldrh	r3, [r3, #8]
 8019b42:	3b14      	subs	r3, #20
 8019b44:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8019b48:	e0e1      	b.n	8019d0e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8019b4a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019b4c:	00db      	lsls	r3, r3, #3
 8019b4e:	b29b      	uxth	r3, r3
 8019b50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019b54:	4293      	cmp	r3, r2
 8019b56:	bf28      	it	cs
 8019b58:	4613      	movcs	r3, r2
 8019b5a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8019b5c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019b60:	2114      	movs	r1, #20
 8019b62:	200e      	movs	r0, #14
 8019b64:	f7f6 fb5a 	bl	801021c <pbuf_alloc>
 8019b68:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8019b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b6c:	2b00      	cmp	r3, #0
 8019b6e:	f000 80d5 	beq.w	8019d1c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8019b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b74:	895b      	ldrh	r3, [r3, #10]
 8019b76:	2b13      	cmp	r3, #19
 8019b78:	d806      	bhi.n	8019b88 <ip4_frag+0xd0>
 8019b7a:	4b6c      	ldr	r3, [pc, #432]	; (8019d2c <ip4_frag+0x274>)
 8019b7c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8019b80:	496d      	ldr	r1, [pc, #436]	; (8019d38 <ip4_frag+0x280>)
 8019b82:	486c      	ldr	r0, [pc, #432]	; (8019d34 <ip4_frag+0x27c>)
 8019b84:	f000 fda0 	bl	801a6c8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8019b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b8a:	685b      	ldr	r3, [r3, #4]
 8019b8c:	2214      	movs	r2, #20
 8019b8e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019b90:	4618      	mov	r0, r3
 8019b92:	f000 fcbf 	bl	801a514 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8019b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019b98:	685b      	ldr	r3, [r3, #4]
 8019b9a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8019b9c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019b9e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8019ba2:	e064      	b.n	8019c6e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8019ba4:	68fb      	ldr	r3, [r7, #12]
 8019ba6:	895a      	ldrh	r2, [r3, #10]
 8019ba8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019baa:	1ad3      	subs	r3, r2, r3
 8019bac:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8019bae:	68fb      	ldr	r3, [r7, #12]
 8019bb0:	895b      	ldrh	r3, [r3, #10]
 8019bb2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019bb4:	429a      	cmp	r2, r3
 8019bb6:	d906      	bls.n	8019bc6 <ip4_frag+0x10e>
 8019bb8:	4b5c      	ldr	r3, [pc, #368]	; (8019d2c <ip4_frag+0x274>)
 8019bba:	f240 322d 	movw	r2, #813	; 0x32d
 8019bbe:	495f      	ldr	r1, [pc, #380]	; (8019d3c <ip4_frag+0x284>)
 8019bc0:	485c      	ldr	r0, [pc, #368]	; (8019d34 <ip4_frag+0x27c>)
 8019bc2:	f000 fd81 	bl	801a6c8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8019bc6:	8bfa      	ldrh	r2, [r7, #30]
 8019bc8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019bcc:	4293      	cmp	r3, r2
 8019bce:	bf28      	it	cs
 8019bd0:	4613      	movcs	r3, r2
 8019bd2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8019bd6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019bda:	2b00      	cmp	r3, #0
 8019bdc:	d105      	bne.n	8019bea <ip4_frag+0x132>
        poff = 0;
 8019bde:	2300      	movs	r3, #0
 8019be0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8019be2:	68fb      	ldr	r3, [r7, #12]
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	60fb      	str	r3, [r7, #12]
        continue;
 8019be8:	e041      	b.n	8019c6e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8019bea:	f7ff ff0d 	bl	8019a08 <ip_frag_alloc_pbuf_custom_ref>
 8019bee:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8019bf0:	69bb      	ldr	r3, [r7, #24]
 8019bf2:	2b00      	cmp	r3, #0
 8019bf4:	d103      	bne.n	8019bfe <ip4_frag+0x146>
        pbuf_free(rambuf);
 8019bf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019bf8:	f7f6 fdf4 	bl	80107e4 <pbuf_free>
        goto memerr;
 8019bfc:	e08f      	b.n	8019d1e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019bfe:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8019c00:	68fb      	ldr	r3, [r7, #12]
 8019c02:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019c04:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019c06:	4413      	add	r3, r2
 8019c08:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8019c0c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8019c10:	9201      	str	r2, [sp, #4]
 8019c12:	9300      	str	r3, [sp, #0]
 8019c14:	4603      	mov	r3, r0
 8019c16:	2241      	movs	r2, #65	; 0x41
 8019c18:	2000      	movs	r0, #0
 8019c1a:	f7f6 fc29 	bl	8010470 <pbuf_alloced_custom>
 8019c1e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8019c20:	697b      	ldr	r3, [r7, #20]
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	d106      	bne.n	8019c34 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8019c26:	69b8      	ldr	r0, [r7, #24]
 8019c28:	f7ff fef6 	bl	8019a18 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8019c2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019c2e:	f7f6 fdd9 	bl	80107e4 <pbuf_free>
        goto memerr;
 8019c32:	e074      	b.n	8019d1e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8019c34:	68f8      	ldr	r0, [r7, #12]
 8019c36:	f7f6 fe7b 	bl	8010930 <pbuf_ref>
      pcr->original = p;
 8019c3a:	69bb      	ldr	r3, [r7, #24]
 8019c3c:	68fa      	ldr	r2, [r7, #12]
 8019c3e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8019c40:	69bb      	ldr	r3, [r7, #24]
 8019c42:	4a3f      	ldr	r2, [pc, #252]	; (8019d40 <ip4_frag+0x288>)
 8019c44:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8019c46:	6979      	ldr	r1, [r7, #20]
 8019c48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019c4a:	f7f6 fe99 	bl	8010980 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8019c4e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8019c52:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019c56:	1ad3      	subs	r3, r2, r3
 8019c58:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8019c5c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019c60:	2b00      	cmp	r3, #0
 8019c62:	d004      	beq.n	8019c6e <ip4_frag+0x1b6>
        poff = 0;
 8019c64:	2300      	movs	r3, #0
 8019c66:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8019c68:	68fb      	ldr	r3, [r7, #12]
 8019c6a:	681b      	ldr	r3, [r3, #0]
 8019c6c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8019c6e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019c72:	2b00      	cmp	r3, #0
 8019c74:	d196      	bne.n	8019ba4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8019c76:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019c78:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019c7c:	4413      	add	r3, r2
 8019c7e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8019c80:	68bb      	ldr	r3, [r7, #8]
 8019c82:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019c84:	f1a3 0213 	sub.w	r2, r3, #19
 8019c88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019c8c:	429a      	cmp	r2, r3
 8019c8e:	bfcc      	ite	gt
 8019c90:	2301      	movgt	r3, #1
 8019c92:	2300      	movle	r3, #0
 8019c94:	b2db      	uxtb	r3, r3
 8019c96:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8019c98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019c9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019ca0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8019ca2:	6a3b      	ldr	r3, [r7, #32]
 8019ca4:	2b00      	cmp	r3, #0
 8019ca6:	d002      	beq.n	8019cae <ip4_frag+0x1f6>
 8019ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019caa:	2b00      	cmp	r3, #0
 8019cac:	d003      	beq.n	8019cb6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8019cae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019cb0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8019cb4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8019cb6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019cb8:	4618      	mov	r0, r3
 8019cba:	f7f5 fa4b 	bl	800f154 <lwip_htons>
 8019cbe:	4603      	mov	r3, r0
 8019cc0:	461a      	mov	r2, r3
 8019cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019cc4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8019cc6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019cc8:	3314      	adds	r3, #20
 8019cca:	b29b      	uxth	r3, r3
 8019ccc:	4618      	mov	r0, r3
 8019cce:	f7f5 fa41 	bl	800f154 <lwip_htons>
 8019cd2:	4603      	mov	r3, r0
 8019cd4:	461a      	mov	r2, r3
 8019cd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019cd8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8019cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019cdc:	2200      	movs	r2, #0
 8019cde:	729a      	strb	r2, [r3, #10]
 8019ce0:	2200      	movs	r2, #0
 8019ce2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8019ce4:	68bb      	ldr	r3, [r7, #8]
 8019ce6:	695b      	ldr	r3, [r3, #20]
 8019ce8:	687a      	ldr	r2, [r7, #4]
 8019cea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019cec:	68b8      	ldr	r0, [r7, #8]
 8019cee:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8019cf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019cf2:	f7f6 fd77 	bl	80107e4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8019cf6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8019cfa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019cfc:	1ad3      	subs	r3, r2, r3
 8019cfe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8019d02:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8019d06:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019d08:	4413      	add	r3, r2
 8019d0a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8019d0e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	f47f af19 	bne.w	8019b4a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8019d18:	2300      	movs	r3, #0
 8019d1a:	e002      	b.n	8019d22 <ip4_frag+0x26a>
      goto memerr;
 8019d1c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8019d1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019d22:	4618      	mov	r0, r3
 8019d24:	3748      	adds	r7, #72	; 0x48
 8019d26:	46bd      	mov	sp, r7
 8019d28:	bd80      	pop	{r7, pc}
 8019d2a:	bf00      	nop
 8019d2c:	0801eb48 	.word	0x0801eb48
 8019d30:	0801ed24 	.word	0x0801ed24
 8019d34:	0801eb90 	.word	0x0801eb90
 8019d38:	0801ed40 	.word	0x0801ed40
 8019d3c:	0801ed60 	.word	0x0801ed60
 8019d40:	08019a51 	.word	0x08019a51

08019d44 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8019d44:	b580      	push	{r7, lr}
 8019d46:	b086      	sub	sp, #24
 8019d48:	af00      	add	r7, sp, #0
 8019d4a:	6078      	str	r0, [r7, #4]
 8019d4c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8019d4e:	230e      	movs	r3, #14
 8019d50:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8019d52:	687b      	ldr	r3, [r7, #4]
 8019d54:	895b      	ldrh	r3, [r3, #10]
 8019d56:	2b0e      	cmp	r3, #14
 8019d58:	d96e      	bls.n	8019e38 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8019d5a:	687b      	ldr	r3, [r7, #4]
 8019d5c:	7bdb      	ldrb	r3, [r3, #15]
 8019d5e:	2b00      	cmp	r3, #0
 8019d60:	d106      	bne.n	8019d70 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8019d62:	683b      	ldr	r3, [r7, #0]
 8019d64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8019d68:	3301      	adds	r3, #1
 8019d6a:	b2da      	uxtb	r2, r3
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	685b      	ldr	r3, [r3, #4]
 8019d74:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8019d76:	693b      	ldr	r3, [r7, #16]
 8019d78:	7b1a      	ldrb	r2, [r3, #12]
 8019d7a:	7b5b      	ldrb	r3, [r3, #13]
 8019d7c:	021b      	lsls	r3, r3, #8
 8019d7e:	4313      	orrs	r3, r2
 8019d80:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8019d82:	693b      	ldr	r3, [r7, #16]
 8019d84:	781b      	ldrb	r3, [r3, #0]
 8019d86:	f003 0301 	and.w	r3, r3, #1
 8019d8a:	2b00      	cmp	r3, #0
 8019d8c:	d023      	beq.n	8019dd6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8019d8e:	693b      	ldr	r3, [r7, #16]
 8019d90:	781b      	ldrb	r3, [r3, #0]
 8019d92:	2b01      	cmp	r3, #1
 8019d94:	d10f      	bne.n	8019db6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019d96:	693b      	ldr	r3, [r7, #16]
 8019d98:	785b      	ldrb	r3, [r3, #1]
 8019d9a:	2b00      	cmp	r3, #0
 8019d9c:	d11b      	bne.n	8019dd6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8019d9e:	693b      	ldr	r3, [r7, #16]
 8019da0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019da2:	2b5e      	cmp	r3, #94	; 0x5e
 8019da4:	d117      	bne.n	8019dd6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8019da6:	687b      	ldr	r3, [r7, #4]
 8019da8:	7b5b      	ldrb	r3, [r3, #13]
 8019daa:	f043 0310 	orr.w	r3, r3, #16
 8019dae:	b2da      	uxtb	r2, r3
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	735a      	strb	r2, [r3, #13]
 8019db4:	e00f      	b.n	8019dd6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8019db6:	693b      	ldr	r3, [r7, #16]
 8019db8:	2206      	movs	r2, #6
 8019dba:	4928      	ldr	r1, [pc, #160]	; (8019e5c <ethernet_input+0x118>)
 8019dbc:	4618      	mov	r0, r3
 8019dbe:	f000 fb9b 	bl	801a4f8 <memcmp>
 8019dc2:	4603      	mov	r3, r0
 8019dc4:	2b00      	cmp	r3, #0
 8019dc6:	d106      	bne.n	8019dd6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	7b5b      	ldrb	r3, [r3, #13]
 8019dcc:	f043 0308 	orr.w	r3, r3, #8
 8019dd0:	b2da      	uxtb	r2, r3
 8019dd2:	687b      	ldr	r3, [r7, #4]
 8019dd4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8019dd6:	89fb      	ldrh	r3, [r7, #14]
 8019dd8:	2b08      	cmp	r3, #8
 8019dda:	d003      	beq.n	8019de4 <ethernet_input+0xa0>
 8019ddc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8019de0:	d014      	beq.n	8019e0c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8019de2:	e032      	b.n	8019e4a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019de4:	683b      	ldr	r3, [r7, #0]
 8019de6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019dea:	f003 0308 	and.w	r3, r3, #8
 8019dee:	2b00      	cmp	r3, #0
 8019df0:	d024      	beq.n	8019e3c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019df2:	8afb      	ldrh	r3, [r7, #22]
 8019df4:	4619      	mov	r1, r3
 8019df6:	6878      	ldr	r0, [r7, #4]
 8019df8:	f7f6 fc6e 	bl	80106d8 <pbuf_remove_header>
 8019dfc:	4603      	mov	r3, r0
 8019dfe:	2b00      	cmp	r3, #0
 8019e00:	d11e      	bne.n	8019e40 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8019e02:	6839      	ldr	r1, [r7, #0]
 8019e04:	6878      	ldr	r0, [r7, #4]
 8019e06:	f7fe ff27 	bl	8018c58 <ip4_input>
      break;
 8019e0a:	e013      	b.n	8019e34 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019e0c:	683b      	ldr	r3, [r7, #0]
 8019e0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019e12:	f003 0308 	and.w	r3, r3, #8
 8019e16:	2b00      	cmp	r3, #0
 8019e18:	d014      	beq.n	8019e44 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019e1a:	8afb      	ldrh	r3, [r7, #22]
 8019e1c:	4619      	mov	r1, r3
 8019e1e:	6878      	ldr	r0, [r7, #4]
 8019e20:	f7f6 fc5a 	bl	80106d8 <pbuf_remove_header>
 8019e24:	4603      	mov	r3, r0
 8019e26:	2b00      	cmp	r3, #0
 8019e28:	d10e      	bne.n	8019e48 <ethernet_input+0x104>
        etharp_input(p, netif);
 8019e2a:	6839      	ldr	r1, [r7, #0]
 8019e2c:	6878      	ldr	r0, [r7, #4]
 8019e2e:	f7fe f8c7 	bl	8017fc0 <etharp_input>
      break;
 8019e32:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8019e34:	2300      	movs	r3, #0
 8019e36:	e00c      	b.n	8019e52 <ethernet_input+0x10e>
    goto free_and_return;
 8019e38:	bf00      	nop
 8019e3a:	e006      	b.n	8019e4a <ethernet_input+0x106>
        goto free_and_return;
 8019e3c:	bf00      	nop
 8019e3e:	e004      	b.n	8019e4a <ethernet_input+0x106>
        goto free_and_return;
 8019e40:	bf00      	nop
 8019e42:	e002      	b.n	8019e4a <ethernet_input+0x106>
        goto free_and_return;
 8019e44:	bf00      	nop
 8019e46:	e000      	b.n	8019e4a <ethernet_input+0x106>
        goto free_and_return;
 8019e48:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8019e4a:	6878      	ldr	r0, [r7, #4]
 8019e4c:	f7f6 fcca 	bl	80107e4 <pbuf_free>
  return ERR_OK;
 8019e50:	2300      	movs	r3, #0
}
 8019e52:	4618      	mov	r0, r3
 8019e54:	3718      	adds	r7, #24
 8019e56:	46bd      	mov	sp, r7
 8019e58:	bd80      	pop	{r7, pc}
 8019e5a:	bf00      	nop
 8019e5c:	0801ef3c 	.word	0x0801ef3c

08019e60 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8019e60:	b580      	push	{r7, lr}
 8019e62:	b086      	sub	sp, #24
 8019e64:	af00      	add	r7, sp, #0
 8019e66:	60f8      	str	r0, [r7, #12]
 8019e68:	60b9      	str	r1, [r7, #8]
 8019e6a:	607a      	str	r2, [r7, #4]
 8019e6c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8019e6e:	8c3b      	ldrh	r3, [r7, #32]
 8019e70:	4618      	mov	r0, r3
 8019e72:	f7f5 f96f 	bl	800f154 <lwip_htons>
 8019e76:	4603      	mov	r3, r0
 8019e78:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8019e7a:	210e      	movs	r1, #14
 8019e7c:	68b8      	ldr	r0, [r7, #8]
 8019e7e:	f7f6 fc1b 	bl	80106b8 <pbuf_add_header>
 8019e82:	4603      	mov	r3, r0
 8019e84:	2b00      	cmp	r3, #0
 8019e86:	d125      	bne.n	8019ed4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8019e88:	68bb      	ldr	r3, [r7, #8]
 8019e8a:	685b      	ldr	r3, [r3, #4]
 8019e8c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8019e8e:	693b      	ldr	r3, [r7, #16]
 8019e90:	8afa      	ldrh	r2, [r7, #22]
 8019e92:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8019e94:	693b      	ldr	r3, [r7, #16]
 8019e96:	2206      	movs	r2, #6
 8019e98:	6839      	ldr	r1, [r7, #0]
 8019e9a:	4618      	mov	r0, r3
 8019e9c:	f000 fb3a 	bl	801a514 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8019ea0:	693b      	ldr	r3, [r7, #16]
 8019ea2:	3306      	adds	r3, #6
 8019ea4:	2206      	movs	r2, #6
 8019ea6:	6879      	ldr	r1, [r7, #4]
 8019ea8:	4618      	mov	r0, r3
 8019eaa:	f000 fb33 	bl	801a514 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8019eae:	68fb      	ldr	r3, [r7, #12]
 8019eb0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8019eb4:	2b06      	cmp	r3, #6
 8019eb6:	d006      	beq.n	8019ec6 <ethernet_output+0x66>
 8019eb8:	4b0a      	ldr	r3, [pc, #40]	; (8019ee4 <ethernet_output+0x84>)
 8019eba:	f44f 7299 	mov.w	r2, #306	; 0x132
 8019ebe:	490a      	ldr	r1, [pc, #40]	; (8019ee8 <ethernet_output+0x88>)
 8019ec0:	480a      	ldr	r0, [pc, #40]	; (8019eec <ethernet_output+0x8c>)
 8019ec2:	f000 fc01 	bl	801a6c8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8019ec6:	68fb      	ldr	r3, [r7, #12]
 8019ec8:	699b      	ldr	r3, [r3, #24]
 8019eca:	68b9      	ldr	r1, [r7, #8]
 8019ecc:	68f8      	ldr	r0, [r7, #12]
 8019ece:	4798      	blx	r3
 8019ed0:	4603      	mov	r3, r0
 8019ed2:	e002      	b.n	8019eda <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8019ed4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8019ed6:	f06f 0301 	mvn.w	r3, #1
}
 8019eda:	4618      	mov	r0, r3
 8019edc:	3718      	adds	r7, #24
 8019ede:	46bd      	mov	sp, r7
 8019ee0:	bd80      	pop	{r7, pc}
 8019ee2:	bf00      	nop
 8019ee4:	0801ed70 	.word	0x0801ed70
 8019ee8:	0801eda8 	.word	0x0801eda8
 8019eec:	0801eddc 	.word	0x0801eddc

08019ef0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8019ef0:	b580      	push	{r7, lr}
 8019ef2:	b086      	sub	sp, #24
 8019ef4:	af00      	add	r7, sp, #0
 8019ef6:	6078      	str	r0, [r7, #4]
 8019ef8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8019efa:	683b      	ldr	r3, [r7, #0]
 8019efc:	60bb      	str	r3, [r7, #8]
 8019efe:	2304      	movs	r3, #4
 8019f00:	60fb      	str	r3, [r7, #12]
 8019f02:	2300      	movs	r3, #0
 8019f04:	613b      	str	r3, [r7, #16]
 8019f06:	2300      	movs	r3, #0
 8019f08:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8019f0a:	f107 0308 	add.w	r3, r7, #8
 8019f0e:	2100      	movs	r1, #0
 8019f10:	4618      	mov	r0, r3
 8019f12:	f7f0 f98c 	bl	800a22e <osMessageCreate>
 8019f16:	4602      	mov	r2, r0
 8019f18:	687b      	ldr	r3, [r7, #4]
 8019f1a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	681b      	ldr	r3, [r3, #0]
 8019f20:	2b00      	cmp	r3, #0
 8019f22:	d102      	bne.n	8019f2a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8019f24:	f04f 33ff 	mov.w	r3, #4294967295
 8019f28:	e000      	b.n	8019f2c <sys_mbox_new+0x3c>

  return ERR_OK;
 8019f2a:	2300      	movs	r3, #0
}
 8019f2c:	4618      	mov	r0, r3
 8019f2e:	3718      	adds	r7, #24
 8019f30:	46bd      	mov	sp, r7
 8019f32:	bd80      	pop	{r7, pc}

08019f34 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8019f34:	b580      	push	{r7, lr}
 8019f36:	b082      	sub	sp, #8
 8019f38:	af00      	add	r7, sp, #0
 8019f3a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8019f3c:	687b      	ldr	r3, [r7, #4]
 8019f3e:	681b      	ldr	r3, [r3, #0]
 8019f40:	4618      	mov	r0, r3
 8019f42:	f7f0 fb86 	bl	800a652 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	681b      	ldr	r3, [r3, #0]
 8019f4a:	4618      	mov	r0, r3
 8019f4c:	f7f0 fb97 	bl	800a67e <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8019f50:	bf00      	nop
 8019f52:	3708      	adds	r7, #8
 8019f54:	46bd      	mov	sp, r7
 8019f56:	bd80      	pop	{r7, pc}

08019f58 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8019f58:	b580      	push	{r7, lr}
 8019f5a:	b084      	sub	sp, #16
 8019f5c:	af00      	add	r7, sp, #0
 8019f5e:	6078      	str	r0, [r7, #4]
 8019f60:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8019f62:	687b      	ldr	r3, [r7, #4]
 8019f64:	681b      	ldr	r3, [r3, #0]
 8019f66:	6839      	ldr	r1, [r7, #0]
 8019f68:	2200      	movs	r2, #0
 8019f6a:	4618      	mov	r0, r3
 8019f6c:	f7f0 f988 	bl	800a280 <osMessagePut>
 8019f70:	4603      	mov	r3, r0
 8019f72:	2b00      	cmp	r3, #0
 8019f74:	d102      	bne.n	8019f7c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8019f76:	2300      	movs	r3, #0
 8019f78:	73fb      	strb	r3, [r7, #15]
 8019f7a:	e001      	b.n	8019f80 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8019f7c:	23ff      	movs	r3, #255	; 0xff
 8019f7e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8019f80:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019f84:	4618      	mov	r0, r3
 8019f86:	3710      	adds	r7, #16
 8019f88:	46bd      	mov	sp, r7
 8019f8a:	bd80      	pop	{r7, pc}

08019f8c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8019f8c:	b580      	push	{r7, lr}
 8019f8e:	b08c      	sub	sp, #48	; 0x30
 8019f90:	af00      	add	r7, sp, #0
 8019f92:	61f8      	str	r0, [r7, #28]
 8019f94:	61b9      	str	r1, [r7, #24]
 8019f96:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8019f98:	f7ef fe73 	bl	8009c82 <osKernelSysTick>
 8019f9c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8019f9e:	697b      	ldr	r3, [r7, #20]
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	d017      	beq.n	8019fd4 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8019fa4:	69fb      	ldr	r3, [r7, #28]
 8019fa6:	6819      	ldr	r1, [r3, #0]
 8019fa8:	f107 0320 	add.w	r3, r7, #32
 8019fac:	697a      	ldr	r2, [r7, #20]
 8019fae:	4618      	mov	r0, r3
 8019fb0:	f7f0 f9a6 	bl	800a300 <osMessageGet>

    if(event.status == osEventMessage)
 8019fb4:	6a3b      	ldr	r3, [r7, #32]
 8019fb6:	2b10      	cmp	r3, #16
 8019fb8:	d109      	bne.n	8019fce <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8019fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fbc:	461a      	mov	r2, r3
 8019fbe:	69bb      	ldr	r3, [r7, #24]
 8019fc0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8019fc2:	f7ef fe5e 	bl	8009c82 <osKernelSysTick>
 8019fc6:	4602      	mov	r2, r0
 8019fc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fca:	1ad3      	subs	r3, r2, r3
 8019fcc:	e019      	b.n	801a002 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8019fce:	f04f 33ff 	mov.w	r3, #4294967295
 8019fd2:	e016      	b.n	801a002 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8019fd4:	69fb      	ldr	r3, [r7, #28]
 8019fd6:	6819      	ldr	r1, [r3, #0]
 8019fd8:	463b      	mov	r3, r7
 8019fda:	f04f 32ff 	mov.w	r2, #4294967295
 8019fde:	4618      	mov	r0, r3
 8019fe0:	f7f0 f98e 	bl	800a300 <osMessageGet>
 8019fe4:	f107 0320 	add.w	r3, r7, #32
 8019fe8:	463a      	mov	r2, r7
 8019fea:	ca07      	ldmia	r2, {r0, r1, r2}
 8019fec:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8019ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ff2:	461a      	mov	r2, r3
 8019ff4:	69bb      	ldr	r3, [r7, #24]
 8019ff6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8019ff8:	f7ef fe43 	bl	8009c82 <osKernelSysTick>
 8019ffc:	4602      	mov	r2, r0
 8019ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a000:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801a002:	4618      	mov	r0, r3
 801a004:	3730      	adds	r7, #48	; 0x30
 801a006:	46bd      	mov	sp, r7
 801a008:	bd80      	pop	{r7, pc}

0801a00a <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 801a00a:	b580      	push	{r7, lr}
 801a00c:	b086      	sub	sp, #24
 801a00e:	af00      	add	r7, sp, #0
 801a010:	6078      	str	r0, [r7, #4]
 801a012:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 801a014:	687b      	ldr	r3, [r7, #4]
 801a016:	6819      	ldr	r1, [r3, #0]
 801a018:	f107 030c 	add.w	r3, r7, #12
 801a01c:	2200      	movs	r2, #0
 801a01e:	4618      	mov	r0, r3
 801a020:	f7f0 f96e 	bl	800a300 <osMessageGet>

  if(event.status == osEventMessage)
 801a024:	68fb      	ldr	r3, [r7, #12]
 801a026:	2b10      	cmp	r3, #16
 801a028:	d105      	bne.n	801a036 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 801a02a:	693b      	ldr	r3, [r7, #16]
 801a02c:	461a      	mov	r2, r3
 801a02e:	683b      	ldr	r3, [r7, #0]
 801a030:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 801a032:	2300      	movs	r3, #0
 801a034:	e001      	b.n	801a03a <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 801a036:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 801a03a:	4618      	mov	r0, r3
 801a03c:	3718      	adds	r7, #24
 801a03e:	46bd      	mov	sp, r7
 801a040:	bd80      	pop	{r7, pc}

0801a042 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801a042:	b480      	push	{r7}
 801a044:	b083      	sub	sp, #12
 801a046:	af00      	add	r7, sp, #0
 801a048:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	681b      	ldr	r3, [r3, #0]
 801a04e:	2b00      	cmp	r3, #0
 801a050:	d101      	bne.n	801a056 <sys_mbox_valid+0x14>
    return 0;
 801a052:	2300      	movs	r3, #0
 801a054:	e000      	b.n	801a058 <sys_mbox_valid+0x16>
  else
    return 1;
 801a056:	2301      	movs	r3, #1
}
 801a058:	4618      	mov	r0, r3
 801a05a:	370c      	adds	r7, #12
 801a05c:	46bd      	mov	sp, r7
 801a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a062:	4770      	bx	lr

0801a064 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 801a064:	b480      	push	{r7}
 801a066:	b083      	sub	sp, #12
 801a068:	af00      	add	r7, sp, #0
 801a06a:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 801a06c:	687b      	ldr	r3, [r7, #4]
 801a06e:	2200      	movs	r2, #0
 801a070:	601a      	str	r2, [r3, #0]
}
 801a072:	bf00      	nop
 801a074:	370c      	adds	r7, #12
 801a076:	46bd      	mov	sp, r7
 801a078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a07c:	4770      	bx	lr

0801a07e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801a07e:	b580      	push	{r7, lr}
 801a080:	b084      	sub	sp, #16
 801a082:	af00      	add	r7, sp, #0
 801a084:	6078      	str	r0, [r7, #4]
 801a086:	460b      	mov	r3, r1
 801a088:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801a08a:	2300      	movs	r3, #0
 801a08c:	60bb      	str	r3, [r7, #8]
 801a08e:	2300      	movs	r3, #0
 801a090:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801a092:	f107 0308 	add.w	r3, r7, #8
 801a096:	2101      	movs	r1, #1
 801a098:	4618      	mov	r0, r3
 801a09a:	f7ef feff 	bl	8009e9c <osSemaphoreCreate>
 801a09e:	4602      	mov	r2, r0
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	681b      	ldr	r3, [r3, #0]
 801a0a8:	2b00      	cmp	r3, #0
 801a0aa:	d102      	bne.n	801a0b2 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801a0ac:	f04f 33ff 	mov.w	r3, #4294967295
 801a0b0:	e009      	b.n	801a0c6 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801a0b2:	78fb      	ldrb	r3, [r7, #3]
 801a0b4:	2b00      	cmp	r3, #0
 801a0b6:	d105      	bne.n	801a0c4 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801a0b8:	687b      	ldr	r3, [r7, #4]
 801a0ba:	681b      	ldr	r3, [r3, #0]
 801a0bc:	2100      	movs	r1, #0
 801a0be:	4618      	mov	r0, r3
 801a0c0:	f7ef ff1e 	bl	8009f00 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801a0c4:	2300      	movs	r3, #0
}
 801a0c6:	4618      	mov	r0, r3
 801a0c8:	3710      	adds	r7, #16
 801a0ca:	46bd      	mov	sp, r7
 801a0cc:	bd80      	pop	{r7, pc}

0801a0ce <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801a0ce:	b580      	push	{r7, lr}
 801a0d0:	b084      	sub	sp, #16
 801a0d2:	af00      	add	r7, sp, #0
 801a0d4:	6078      	str	r0, [r7, #4]
 801a0d6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801a0d8:	f7ef fdd3 	bl	8009c82 <osKernelSysTick>
 801a0dc:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801a0de:	683b      	ldr	r3, [r7, #0]
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	d011      	beq.n	801a108 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801a0e4:	687b      	ldr	r3, [r7, #4]
 801a0e6:	681b      	ldr	r3, [r3, #0]
 801a0e8:	6839      	ldr	r1, [r7, #0]
 801a0ea:	4618      	mov	r0, r3
 801a0ec:	f7ef ff08 	bl	8009f00 <osSemaphoreWait>
 801a0f0:	4603      	mov	r3, r0
 801a0f2:	2b00      	cmp	r3, #0
 801a0f4:	d105      	bne.n	801a102 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801a0f6:	f7ef fdc4 	bl	8009c82 <osKernelSysTick>
 801a0fa:	4602      	mov	r2, r0
 801a0fc:	68fb      	ldr	r3, [r7, #12]
 801a0fe:	1ad3      	subs	r3, r2, r3
 801a100:	e012      	b.n	801a128 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801a102:	f04f 33ff 	mov.w	r3, #4294967295
 801a106:	e00f      	b.n	801a128 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801a108:	bf00      	nop
 801a10a:	687b      	ldr	r3, [r7, #4]
 801a10c:	681b      	ldr	r3, [r3, #0]
 801a10e:	f04f 31ff 	mov.w	r1, #4294967295
 801a112:	4618      	mov	r0, r3
 801a114:	f7ef fef4 	bl	8009f00 <osSemaphoreWait>
 801a118:	4603      	mov	r3, r0
 801a11a:	2b00      	cmp	r3, #0
 801a11c:	d1f5      	bne.n	801a10a <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801a11e:	f7ef fdb0 	bl	8009c82 <osKernelSysTick>
 801a122:	4602      	mov	r2, r0
 801a124:	68fb      	ldr	r3, [r7, #12]
 801a126:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801a128:	4618      	mov	r0, r3
 801a12a:	3710      	adds	r7, #16
 801a12c:	46bd      	mov	sp, r7
 801a12e:	bd80      	pop	{r7, pc}

0801a130 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801a130:	b580      	push	{r7, lr}
 801a132:	b082      	sub	sp, #8
 801a134:	af00      	add	r7, sp, #0
 801a136:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801a138:	687b      	ldr	r3, [r7, #4]
 801a13a:	681b      	ldr	r3, [r3, #0]
 801a13c:	4618      	mov	r0, r3
 801a13e:	f7ef ff2d 	bl	8009f9c <osSemaphoreRelease>
}
 801a142:	bf00      	nop
 801a144:	3708      	adds	r7, #8
 801a146:	46bd      	mov	sp, r7
 801a148:	bd80      	pop	{r7, pc}

0801a14a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801a14a:	b580      	push	{r7, lr}
 801a14c:	b082      	sub	sp, #8
 801a14e:	af00      	add	r7, sp, #0
 801a150:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801a152:	687b      	ldr	r3, [r7, #4]
 801a154:	681b      	ldr	r3, [r3, #0]
 801a156:	4618      	mov	r0, r3
 801a158:	f7ef ff56 	bl	800a008 <osSemaphoreDelete>
}
 801a15c:	bf00      	nop
 801a15e:	3708      	adds	r7, #8
 801a160:	46bd      	mov	sp, r7
 801a162:	bd80      	pop	{r7, pc}

0801a164 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801a164:	b480      	push	{r7}
 801a166:	b083      	sub	sp, #12
 801a168:	af00      	add	r7, sp, #0
 801a16a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801a16c:	687b      	ldr	r3, [r7, #4]
 801a16e:	681b      	ldr	r3, [r3, #0]
 801a170:	2b00      	cmp	r3, #0
 801a172:	d101      	bne.n	801a178 <sys_sem_valid+0x14>
    return 0;
 801a174:	2300      	movs	r3, #0
 801a176:	e000      	b.n	801a17a <sys_sem_valid+0x16>
  else
    return 1;
 801a178:	2301      	movs	r3, #1
}
 801a17a:	4618      	mov	r0, r3
 801a17c:	370c      	adds	r7, #12
 801a17e:	46bd      	mov	sp, r7
 801a180:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a184:	4770      	bx	lr

0801a186 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801a186:	b480      	push	{r7}
 801a188:	b083      	sub	sp, #12
 801a18a:	af00      	add	r7, sp, #0
 801a18c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801a18e:	687b      	ldr	r3, [r7, #4]
 801a190:	2200      	movs	r2, #0
 801a192:	601a      	str	r2, [r3, #0]
}
 801a194:	bf00      	nop
 801a196:	370c      	adds	r7, #12
 801a198:	46bd      	mov	sp, r7
 801a19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a19e:	4770      	bx	lr

0801a1a0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801a1a0:	b580      	push	{r7, lr}
 801a1a2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801a1a4:	4803      	ldr	r0, [pc, #12]	; (801a1b4 <sys_init+0x14>)
 801a1a6:	f7ef fddc 	bl	8009d62 <osMutexCreate>
 801a1aa:	4603      	mov	r3, r0
 801a1ac:	4a02      	ldr	r2, [pc, #8]	; (801a1b8 <sys_init+0x18>)
 801a1ae:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801a1b0:	bf00      	nop
 801a1b2:	bd80      	pop	{r7, pc}
 801a1b4:	0801ef4c 	.word	0x0801ef4c
 801a1b8:	2000dd64 	.word	0x2000dd64

0801a1bc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801a1bc:	b580      	push	{r7, lr}
 801a1be:	b084      	sub	sp, #16
 801a1c0:	af00      	add	r7, sp, #0
 801a1c2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801a1c4:	2300      	movs	r3, #0
 801a1c6:	60bb      	str	r3, [r7, #8]
 801a1c8:	2300      	movs	r3, #0
 801a1ca:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801a1cc:	f107 0308 	add.w	r3, r7, #8
 801a1d0:	4618      	mov	r0, r3
 801a1d2:	f7ef fdc6 	bl	8009d62 <osMutexCreate>
 801a1d6:	4602      	mov	r2, r0
 801a1d8:	687b      	ldr	r3, [r7, #4]
 801a1da:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	681b      	ldr	r3, [r3, #0]
 801a1e0:	2b00      	cmp	r3, #0
 801a1e2:	d102      	bne.n	801a1ea <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801a1e4:	f04f 33ff 	mov.w	r3, #4294967295
 801a1e8:	e000      	b.n	801a1ec <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801a1ea:	2300      	movs	r3, #0
}
 801a1ec:	4618      	mov	r0, r3
 801a1ee:	3710      	adds	r7, #16
 801a1f0:	46bd      	mov	sp, r7
 801a1f2:	bd80      	pop	{r7, pc}

0801a1f4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801a1f4:	b580      	push	{r7, lr}
 801a1f6:	b082      	sub	sp, #8
 801a1f8:	af00      	add	r7, sp, #0
 801a1fa:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801a1fc:	687b      	ldr	r3, [r7, #4]
 801a1fe:	681b      	ldr	r3, [r3, #0]
 801a200:	f04f 31ff 	mov.w	r1, #4294967295
 801a204:	4618      	mov	r0, r3
 801a206:	f7ef fdc5 	bl	8009d94 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801a20a:	bf00      	nop
 801a20c:	3708      	adds	r7, #8
 801a20e:	46bd      	mov	sp, r7
 801a210:	bd80      	pop	{r7, pc}

0801a212 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801a212:	b580      	push	{r7, lr}
 801a214:	b082      	sub	sp, #8
 801a216:	af00      	add	r7, sp, #0
 801a218:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801a21a:	687b      	ldr	r3, [r7, #4]
 801a21c:	681b      	ldr	r3, [r3, #0]
 801a21e:	4618      	mov	r0, r3
 801a220:	f7ef fe06 	bl	8009e30 <osMutexRelease>
}
 801a224:	bf00      	nop
 801a226:	3708      	adds	r7, #8
 801a228:	46bd      	mov	sp, r7
 801a22a:	bd80      	pop	{r7, pc}

0801a22c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801a22c:	b580      	push	{r7, lr}
 801a22e:	b08c      	sub	sp, #48	; 0x30
 801a230:	af00      	add	r7, sp, #0
 801a232:	60f8      	str	r0, [r7, #12]
 801a234:	60b9      	str	r1, [r7, #8]
 801a236:	607a      	str	r2, [r7, #4]
 801a238:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801a23a:	f107 0314 	add.w	r3, r7, #20
 801a23e:	2200      	movs	r2, #0
 801a240:	601a      	str	r2, [r3, #0]
 801a242:	605a      	str	r2, [r3, #4]
 801a244:	609a      	str	r2, [r3, #8]
 801a246:	60da      	str	r2, [r3, #12]
 801a248:	611a      	str	r2, [r3, #16]
 801a24a:	615a      	str	r2, [r3, #20]
 801a24c:	619a      	str	r2, [r3, #24]
 801a24e:	68fb      	ldr	r3, [r7, #12]
 801a250:	617b      	str	r3, [r7, #20]
 801a252:	68bb      	ldr	r3, [r7, #8]
 801a254:	61bb      	str	r3, [r7, #24]
 801a256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a258:	b21b      	sxth	r3, r3
 801a25a:	83bb      	strh	r3, [r7, #28]
 801a25c:	683b      	ldr	r3, [r7, #0]
 801a25e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801a260:	f107 0314 	add.w	r3, r7, #20
 801a264:	6879      	ldr	r1, [r7, #4]
 801a266:	4618      	mov	r0, r3
 801a268:	f7ef fd1b 	bl	8009ca2 <osThreadCreate>
 801a26c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801a26e:	4618      	mov	r0, r3
 801a270:	3730      	adds	r7, #48	; 0x30
 801a272:	46bd      	mov	sp, r7
 801a274:	bd80      	pop	{r7, pc}
	...

0801a278 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801a278:	b580      	push	{r7, lr}
 801a27a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801a27c:	4b04      	ldr	r3, [pc, #16]	; (801a290 <sys_arch_protect+0x18>)
 801a27e:	681b      	ldr	r3, [r3, #0]
 801a280:	f04f 31ff 	mov.w	r1, #4294967295
 801a284:	4618      	mov	r0, r3
 801a286:	f7ef fd85 	bl	8009d94 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801a28a:	2301      	movs	r3, #1
}
 801a28c:	4618      	mov	r0, r3
 801a28e:	bd80      	pop	{r7, pc}
 801a290:	2000dd64 	.word	0x2000dd64

0801a294 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801a294:	b580      	push	{r7, lr}
 801a296:	b082      	sub	sp, #8
 801a298:	af00      	add	r7, sp, #0
 801a29a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801a29c:	4b04      	ldr	r3, [pc, #16]	; (801a2b0 <sys_arch_unprotect+0x1c>)
 801a29e:	681b      	ldr	r3, [r3, #0]
 801a2a0:	4618      	mov	r0, r3
 801a2a2:	f7ef fdc5 	bl	8009e30 <osMutexRelease>
}
 801a2a6:	bf00      	nop
 801a2a8:	3708      	adds	r7, #8
 801a2aa:	46bd      	mov	sp, r7
 801a2ac:	bd80      	pop	{r7, pc}
 801a2ae:	bf00      	nop
 801a2b0:	2000dd64 	.word	0x2000dd64

0801a2b4 <std>:
 801a2b4:	2300      	movs	r3, #0
 801a2b6:	b510      	push	{r4, lr}
 801a2b8:	4604      	mov	r4, r0
 801a2ba:	e9c0 3300 	strd	r3, r3, [r0]
 801a2be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801a2c2:	6083      	str	r3, [r0, #8]
 801a2c4:	8181      	strh	r1, [r0, #12]
 801a2c6:	6643      	str	r3, [r0, #100]	; 0x64
 801a2c8:	81c2      	strh	r2, [r0, #14]
 801a2ca:	6183      	str	r3, [r0, #24]
 801a2cc:	4619      	mov	r1, r3
 801a2ce:	2208      	movs	r2, #8
 801a2d0:	305c      	adds	r0, #92	; 0x5c
 801a2d2:	f000 f947 	bl	801a564 <memset>
 801a2d6:	4b05      	ldr	r3, [pc, #20]	; (801a2ec <std+0x38>)
 801a2d8:	6263      	str	r3, [r4, #36]	; 0x24
 801a2da:	4b05      	ldr	r3, [pc, #20]	; (801a2f0 <std+0x3c>)
 801a2dc:	62a3      	str	r3, [r4, #40]	; 0x28
 801a2de:	4b05      	ldr	r3, [pc, #20]	; (801a2f4 <std+0x40>)
 801a2e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 801a2e2:	4b05      	ldr	r3, [pc, #20]	; (801a2f8 <std+0x44>)
 801a2e4:	6224      	str	r4, [r4, #32]
 801a2e6:	6323      	str	r3, [r4, #48]	; 0x30
 801a2e8:	bd10      	pop	{r4, pc}
 801a2ea:	bf00      	nop
 801a2ec:	0801a8ad 	.word	0x0801a8ad
 801a2f0:	0801a8cf 	.word	0x0801a8cf
 801a2f4:	0801a907 	.word	0x0801a907
 801a2f8:	0801a92b 	.word	0x0801a92b

0801a2fc <_cleanup_r>:
 801a2fc:	4901      	ldr	r1, [pc, #4]	; (801a304 <_cleanup_r+0x8>)
 801a2fe:	f000 b8af 	b.w	801a460 <_fwalk_reent>
 801a302:	bf00      	nop
 801a304:	0801aac1 	.word	0x0801aac1

0801a308 <__sfmoreglue>:
 801a308:	b570      	push	{r4, r5, r6, lr}
 801a30a:	1e4a      	subs	r2, r1, #1
 801a30c:	2568      	movs	r5, #104	; 0x68
 801a30e:	4355      	muls	r5, r2
 801a310:	460e      	mov	r6, r1
 801a312:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801a316:	f000 f97d 	bl	801a614 <_malloc_r>
 801a31a:	4604      	mov	r4, r0
 801a31c:	b140      	cbz	r0, 801a330 <__sfmoreglue+0x28>
 801a31e:	2100      	movs	r1, #0
 801a320:	e9c0 1600 	strd	r1, r6, [r0]
 801a324:	300c      	adds	r0, #12
 801a326:	60a0      	str	r0, [r4, #8]
 801a328:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801a32c:	f000 f91a 	bl	801a564 <memset>
 801a330:	4620      	mov	r0, r4
 801a332:	bd70      	pop	{r4, r5, r6, pc}

0801a334 <__sfp_lock_acquire>:
 801a334:	4801      	ldr	r0, [pc, #4]	; (801a33c <__sfp_lock_acquire+0x8>)
 801a336:	f7e9 b96f 	b.w	8003618 <__retarget_lock_acquire_recursive>
 801a33a:	bf00      	nop
 801a33c:	200004bc 	.word	0x200004bc

0801a340 <__sfp_lock_release>:
 801a340:	4801      	ldr	r0, [pc, #4]	; (801a348 <__sfp_lock_release+0x8>)
 801a342:	f7e9 b97d 	b.w	8003640 <__retarget_lock_release_recursive>
 801a346:	bf00      	nop
 801a348:	200004bc 	.word	0x200004bc

0801a34c <__sinit_lock_acquire>:
 801a34c:	4801      	ldr	r0, [pc, #4]	; (801a354 <__sinit_lock_acquire+0x8>)
 801a34e:	f7e9 b963 	b.w	8003618 <__retarget_lock_acquire_recursive>
 801a352:	bf00      	nop
 801a354:	200004b0 	.word	0x200004b0

0801a358 <__sinit_lock_release>:
 801a358:	4801      	ldr	r0, [pc, #4]	; (801a360 <__sinit_lock_release+0x8>)
 801a35a:	f7e9 b971 	b.w	8003640 <__retarget_lock_release_recursive>
 801a35e:	bf00      	nop
 801a360:	200004b0 	.word	0x200004b0

0801a364 <__sinit>:
 801a364:	b510      	push	{r4, lr}
 801a366:	4604      	mov	r4, r0
 801a368:	f7ff fff0 	bl	801a34c <__sinit_lock_acquire>
 801a36c:	69a3      	ldr	r3, [r4, #24]
 801a36e:	b11b      	cbz	r3, 801a378 <__sinit+0x14>
 801a370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a374:	f7ff bff0 	b.w	801a358 <__sinit_lock_release>
 801a378:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801a37c:	6523      	str	r3, [r4, #80]	; 0x50
 801a37e:	4b13      	ldr	r3, [pc, #76]	; (801a3cc <__sinit+0x68>)
 801a380:	4a13      	ldr	r2, [pc, #76]	; (801a3d0 <__sinit+0x6c>)
 801a382:	681b      	ldr	r3, [r3, #0]
 801a384:	62a2      	str	r2, [r4, #40]	; 0x28
 801a386:	42a3      	cmp	r3, r4
 801a388:	bf04      	itt	eq
 801a38a:	2301      	moveq	r3, #1
 801a38c:	61a3      	streq	r3, [r4, #24]
 801a38e:	4620      	mov	r0, r4
 801a390:	f000 f820 	bl	801a3d4 <__sfp>
 801a394:	6060      	str	r0, [r4, #4]
 801a396:	4620      	mov	r0, r4
 801a398:	f000 f81c 	bl	801a3d4 <__sfp>
 801a39c:	60a0      	str	r0, [r4, #8]
 801a39e:	4620      	mov	r0, r4
 801a3a0:	f000 f818 	bl	801a3d4 <__sfp>
 801a3a4:	2200      	movs	r2, #0
 801a3a6:	60e0      	str	r0, [r4, #12]
 801a3a8:	2104      	movs	r1, #4
 801a3aa:	6860      	ldr	r0, [r4, #4]
 801a3ac:	f7ff ff82 	bl	801a2b4 <std>
 801a3b0:	68a0      	ldr	r0, [r4, #8]
 801a3b2:	2201      	movs	r2, #1
 801a3b4:	2109      	movs	r1, #9
 801a3b6:	f7ff ff7d 	bl	801a2b4 <std>
 801a3ba:	68e0      	ldr	r0, [r4, #12]
 801a3bc:	2202      	movs	r2, #2
 801a3be:	2112      	movs	r1, #18
 801a3c0:	f7ff ff78 	bl	801a2b4 <std>
 801a3c4:	2301      	movs	r3, #1
 801a3c6:	61a3      	str	r3, [r4, #24]
 801a3c8:	e7d2      	b.n	801a370 <__sinit+0xc>
 801a3ca:	bf00      	nop
 801a3cc:	0801efb4 	.word	0x0801efb4
 801a3d0:	0801a2fd 	.word	0x0801a2fd

0801a3d4 <__sfp>:
 801a3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a3d6:	4607      	mov	r7, r0
 801a3d8:	f7ff ffac 	bl	801a334 <__sfp_lock_acquire>
 801a3dc:	4b1e      	ldr	r3, [pc, #120]	; (801a458 <__sfp+0x84>)
 801a3de:	681e      	ldr	r6, [r3, #0]
 801a3e0:	69b3      	ldr	r3, [r6, #24]
 801a3e2:	b913      	cbnz	r3, 801a3ea <__sfp+0x16>
 801a3e4:	4630      	mov	r0, r6
 801a3e6:	f7ff ffbd 	bl	801a364 <__sinit>
 801a3ea:	3648      	adds	r6, #72	; 0x48
 801a3ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801a3f0:	3b01      	subs	r3, #1
 801a3f2:	d503      	bpl.n	801a3fc <__sfp+0x28>
 801a3f4:	6833      	ldr	r3, [r6, #0]
 801a3f6:	b30b      	cbz	r3, 801a43c <__sfp+0x68>
 801a3f8:	6836      	ldr	r6, [r6, #0]
 801a3fa:	e7f7      	b.n	801a3ec <__sfp+0x18>
 801a3fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801a400:	b9d5      	cbnz	r5, 801a438 <__sfp+0x64>
 801a402:	4b16      	ldr	r3, [pc, #88]	; (801a45c <__sfp+0x88>)
 801a404:	60e3      	str	r3, [r4, #12]
 801a406:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801a40a:	6665      	str	r5, [r4, #100]	; 0x64
 801a40c:	f7e9 f8de 	bl	80035cc <__retarget_lock_init_recursive>
 801a410:	f7ff ff96 	bl	801a340 <__sfp_lock_release>
 801a414:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801a418:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801a41c:	6025      	str	r5, [r4, #0]
 801a41e:	61a5      	str	r5, [r4, #24]
 801a420:	2208      	movs	r2, #8
 801a422:	4629      	mov	r1, r5
 801a424:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801a428:	f000 f89c 	bl	801a564 <memset>
 801a42c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801a430:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801a434:	4620      	mov	r0, r4
 801a436:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a438:	3468      	adds	r4, #104	; 0x68
 801a43a:	e7d9      	b.n	801a3f0 <__sfp+0x1c>
 801a43c:	2104      	movs	r1, #4
 801a43e:	4638      	mov	r0, r7
 801a440:	f7ff ff62 	bl	801a308 <__sfmoreglue>
 801a444:	4604      	mov	r4, r0
 801a446:	6030      	str	r0, [r6, #0]
 801a448:	2800      	cmp	r0, #0
 801a44a:	d1d5      	bne.n	801a3f8 <__sfp+0x24>
 801a44c:	f7ff ff78 	bl	801a340 <__sfp_lock_release>
 801a450:	230c      	movs	r3, #12
 801a452:	603b      	str	r3, [r7, #0]
 801a454:	e7ee      	b.n	801a434 <__sfp+0x60>
 801a456:	bf00      	nop
 801a458:	0801efb4 	.word	0x0801efb4
 801a45c:	ffff0001 	.word	0xffff0001

0801a460 <_fwalk_reent>:
 801a460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a464:	4606      	mov	r6, r0
 801a466:	4688      	mov	r8, r1
 801a468:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801a46c:	2700      	movs	r7, #0
 801a46e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801a472:	f1b9 0901 	subs.w	r9, r9, #1
 801a476:	d505      	bpl.n	801a484 <_fwalk_reent+0x24>
 801a478:	6824      	ldr	r4, [r4, #0]
 801a47a:	2c00      	cmp	r4, #0
 801a47c:	d1f7      	bne.n	801a46e <_fwalk_reent+0xe>
 801a47e:	4638      	mov	r0, r7
 801a480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a484:	89ab      	ldrh	r3, [r5, #12]
 801a486:	2b01      	cmp	r3, #1
 801a488:	d907      	bls.n	801a49a <_fwalk_reent+0x3a>
 801a48a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801a48e:	3301      	adds	r3, #1
 801a490:	d003      	beq.n	801a49a <_fwalk_reent+0x3a>
 801a492:	4629      	mov	r1, r5
 801a494:	4630      	mov	r0, r6
 801a496:	47c0      	blx	r8
 801a498:	4307      	orrs	r7, r0
 801a49a:	3568      	adds	r5, #104	; 0x68
 801a49c:	e7e9      	b.n	801a472 <_fwalk_reent+0x12>
	...

0801a4a0 <__libc_init_array>:
 801a4a0:	b570      	push	{r4, r5, r6, lr}
 801a4a2:	4d0d      	ldr	r5, [pc, #52]	; (801a4d8 <__libc_init_array+0x38>)
 801a4a4:	4c0d      	ldr	r4, [pc, #52]	; (801a4dc <__libc_init_array+0x3c>)
 801a4a6:	1b64      	subs	r4, r4, r5
 801a4a8:	10a4      	asrs	r4, r4, #2
 801a4aa:	2600      	movs	r6, #0
 801a4ac:	42a6      	cmp	r6, r4
 801a4ae:	d109      	bne.n	801a4c4 <__libc_init_array+0x24>
 801a4b0:	4d0b      	ldr	r5, [pc, #44]	; (801a4e0 <__libc_init_array+0x40>)
 801a4b2:	4c0c      	ldr	r4, [pc, #48]	; (801a4e4 <__libc_init_array+0x44>)
 801a4b4:	f001 f98c 	bl	801b7d0 <_init>
 801a4b8:	1b64      	subs	r4, r4, r5
 801a4ba:	10a4      	asrs	r4, r4, #2
 801a4bc:	2600      	movs	r6, #0
 801a4be:	42a6      	cmp	r6, r4
 801a4c0:	d105      	bne.n	801a4ce <__libc_init_array+0x2e>
 801a4c2:	bd70      	pop	{r4, r5, r6, pc}
 801a4c4:	f855 3b04 	ldr.w	r3, [r5], #4
 801a4c8:	4798      	blx	r3
 801a4ca:	3601      	adds	r6, #1
 801a4cc:	e7ee      	b.n	801a4ac <__libc_init_array+0xc>
 801a4ce:	f855 3b04 	ldr.w	r3, [r5], #4
 801a4d2:	4798      	blx	r3
 801a4d4:	3601      	adds	r6, #1
 801a4d6:	e7f2      	b.n	801a4be <__libc_init_array+0x1e>
 801a4d8:	0801f0a8 	.word	0x0801f0a8
 801a4dc:	0801f0a8 	.word	0x0801f0a8
 801a4e0:	0801f0a8 	.word	0x0801f0a8
 801a4e4:	0801f0ac 	.word	0x0801f0ac

0801a4e8 <malloc>:
 801a4e8:	4b02      	ldr	r3, [pc, #8]	; (801a4f4 <malloc+0xc>)
 801a4ea:	4601      	mov	r1, r0
 801a4ec:	6818      	ldr	r0, [r3, #0]
 801a4ee:	f000 b891 	b.w	801a614 <_malloc_r>
 801a4f2:	bf00      	nop
 801a4f4:	200000b0 	.word	0x200000b0

0801a4f8 <memcmp>:
 801a4f8:	b530      	push	{r4, r5, lr}
 801a4fa:	3901      	subs	r1, #1
 801a4fc:	2400      	movs	r4, #0
 801a4fe:	42a2      	cmp	r2, r4
 801a500:	d101      	bne.n	801a506 <memcmp+0xe>
 801a502:	2000      	movs	r0, #0
 801a504:	e005      	b.n	801a512 <memcmp+0x1a>
 801a506:	5d03      	ldrb	r3, [r0, r4]
 801a508:	3401      	adds	r4, #1
 801a50a:	5d0d      	ldrb	r5, [r1, r4]
 801a50c:	42ab      	cmp	r3, r5
 801a50e:	d0f6      	beq.n	801a4fe <memcmp+0x6>
 801a510:	1b58      	subs	r0, r3, r5
 801a512:	bd30      	pop	{r4, r5, pc}

0801a514 <memcpy>:
 801a514:	440a      	add	r2, r1
 801a516:	4291      	cmp	r1, r2
 801a518:	f100 33ff 	add.w	r3, r0, #4294967295
 801a51c:	d100      	bne.n	801a520 <memcpy+0xc>
 801a51e:	4770      	bx	lr
 801a520:	b510      	push	{r4, lr}
 801a522:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a526:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a52a:	4291      	cmp	r1, r2
 801a52c:	d1f9      	bne.n	801a522 <memcpy+0xe>
 801a52e:	bd10      	pop	{r4, pc}

0801a530 <memmove>:
 801a530:	4288      	cmp	r0, r1
 801a532:	b510      	push	{r4, lr}
 801a534:	eb01 0402 	add.w	r4, r1, r2
 801a538:	d902      	bls.n	801a540 <memmove+0x10>
 801a53a:	4284      	cmp	r4, r0
 801a53c:	4623      	mov	r3, r4
 801a53e:	d807      	bhi.n	801a550 <memmove+0x20>
 801a540:	1e43      	subs	r3, r0, #1
 801a542:	42a1      	cmp	r1, r4
 801a544:	d008      	beq.n	801a558 <memmove+0x28>
 801a546:	f811 2b01 	ldrb.w	r2, [r1], #1
 801a54a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801a54e:	e7f8      	b.n	801a542 <memmove+0x12>
 801a550:	4402      	add	r2, r0
 801a552:	4601      	mov	r1, r0
 801a554:	428a      	cmp	r2, r1
 801a556:	d100      	bne.n	801a55a <memmove+0x2a>
 801a558:	bd10      	pop	{r4, pc}
 801a55a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a55e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801a562:	e7f7      	b.n	801a554 <memmove+0x24>

0801a564 <memset>:
 801a564:	4402      	add	r2, r0
 801a566:	4603      	mov	r3, r0
 801a568:	4293      	cmp	r3, r2
 801a56a:	d100      	bne.n	801a56e <memset+0xa>
 801a56c:	4770      	bx	lr
 801a56e:	f803 1b01 	strb.w	r1, [r3], #1
 801a572:	e7f9      	b.n	801a568 <memset+0x4>

0801a574 <_free_r>:
 801a574:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a576:	2900      	cmp	r1, #0
 801a578:	d048      	beq.n	801a60c <_free_r+0x98>
 801a57a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a57e:	9001      	str	r0, [sp, #4]
 801a580:	2b00      	cmp	r3, #0
 801a582:	f1a1 0404 	sub.w	r4, r1, #4
 801a586:	bfb8      	it	lt
 801a588:	18e4      	addlt	r4, r4, r3
 801a58a:	f000 faf9 	bl	801ab80 <__malloc_lock>
 801a58e:	4a20      	ldr	r2, [pc, #128]	; (801a610 <_free_r+0x9c>)
 801a590:	9801      	ldr	r0, [sp, #4]
 801a592:	6813      	ldr	r3, [r2, #0]
 801a594:	4615      	mov	r5, r2
 801a596:	b933      	cbnz	r3, 801a5a6 <_free_r+0x32>
 801a598:	6063      	str	r3, [r4, #4]
 801a59a:	6014      	str	r4, [r2, #0]
 801a59c:	b003      	add	sp, #12
 801a59e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a5a2:	f000 baf3 	b.w	801ab8c <__malloc_unlock>
 801a5a6:	42a3      	cmp	r3, r4
 801a5a8:	d90b      	bls.n	801a5c2 <_free_r+0x4e>
 801a5aa:	6821      	ldr	r1, [r4, #0]
 801a5ac:	1862      	adds	r2, r4, r1
 801a5ae:	4293      	cmp	r3, r2
 801a5b0:	bf04      	itt	eq
 801a5b2:	681a      	ldreq	r2, [r3, #0]
 801a5b4:	685b      	ldreq	r3, [r3, #4]
 801a5b6:	6063      	str	r3, [r4, #4]
 801a5b8:	bf04      	itt	eq
 801a5ba:	1852      	addeq	r2, r2, r1
 801a5bc:	6022      	streq	r2, [r4, #0]
 801a5be:	602c      	str	r4, [r5, #0]
 801a5c0:	e7ec      	b.n	801a59c <_free_r+0x28>
 801a5c2:	461a      	mov	r2, r3
 801a5c4:	685b      	ldr	r3, [r3, #4]
 801a5c6:	b10b      	cbz	r3, 801a5cc <_free_r+0x58>
 801a5c8:	42a3      	cmp	r3, r4
 801a5ca:	d9fa      	bls.n	801a5c2 <_free_r+0x4e>
 801a5cc:	6811      	ldr	r1, [r2, #0]
 801a5ce:	1855      	adds	r5, r2, r1
 801a5d0:	42a5      	cmp	r5, r4
 801a5d2:	d10b      	bne.n	801a5ec <_free_r+0x78>
 801a5d4:	6824      	ldr	r4, [r4, #0]
 801a5d6:	4421      	add	r1, r4
 801a5d8:	1854      	adds	r4, r2, r1
 801a5da:	42a3      	cmp	r3, r4
 801a5dc:	6011      	str	r1, [r2, #0]
 801a5de:	d1dd      	bne.n	801a59c <_free_r+0x28>
 801a5e0:	681c      	ldr	r4, [r3, #0]
 801a5e2:	685b      	ldr	r3, [r3, #4]
 801a5e4:	6053      	str	r3, [r2, #4]
 801a5e6:	4421      	add	r1, r4
 801a5e8:	6011      	str	r1, [r2, #0]
 801a5ea:	e7d7      	b.n	801a59c <_free_r+0x28>
 801a5ec:	d902      	bls.n	801a5f4 <_free_r+0x80>
 801a5ee:	230c      	movs	r3, #12
 801a5f0:	6003      	str	r3, [r0, #0]
 801a5f2:	e7d3      	b.n	801a59c <_free_r+0x28>
 801a5f4:	6825      	ldr	r5, [r4, #0]
 801a5f6:	1961      	adds	r1, r4, r5
 801a5f8:	428b      	cmp	r3, r1
 801a5fa:	bf04      	itt	eq
 801a5fc:	6819      	ldreq	r1, [r3, #0]
 801a5fe:	685b      	ldreq	r3, [r3, #4]
 801a600:	6063      	str	r3, [r4, #4]
 801a602:	bf04      	itt	eq
 801a604:	1949      	addeq	r1, r1, r5
 801a606:	6021      	streq	r1, [r4, #0]
 801a608:	6054      	str	r4, [r2, #4]
 801a60a:	e7c7      	b.n	801a59c <_free_r+0x28>
 801a60c:	b003      	add	sp, #12
 801a60e:	bd30      	pop	{r4, r5, pc}
 801a610:	20006ad0 	.word	0x20006ad0

0801a614 <_malloc_r>:
 801a614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a616:	1ccd      	adds	r5, r1, #3
 801a618:	f025 0503 	bic.w	r5, r5, #3
 801a61c:	3508      	adds	r5, #8
 801a61e:	2d0c      	cmp	r5, #12
 801a620:	bf38      	it	cc
 801a622:	250c      	movcc	r5, #12
 801a624:	2d00      	cmp	r5, #0
 801a626:	4606      	mov	r6, r0
 801a628:	db01      	blt.n	801a62e <_malloc_r+0x1a>
 801a62a:	42a9      	cmp	r1, r5
 801a62c:	d903      	bls.n	801a636 <_malloc_r+0x22>
 801a62e:	230c      	movs	r3, #12
 801a630:	6033      	str	r3, [r6, #0]
 801a632:	2000      	movs	r0, #0
 801a634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a636:	f000 faa3 	bl	801ab80 <__malloc_lock>
 801a63a:	4921      	ldr	r1, [pc, #132]	; (801a6c0 <_malloc_r+0xac>)
 801a63c:	680a      	ldr	r2, [r1, #0]
 801a63e:	4614      	mov	r4, r2
 801a640:	b99c      	cbnz	r4, 801a66a <_malloc_r+0x56>
 801a642:	4f20      	ldr	r7, [pc, #128]	; (801a6c4 <_malloc_r+0xb0>)
 801a644:	683b      	ldr	r3, [r7, #0]
 801a646:	b923      	cbnz	r3, 801a652 <_malloc_r+0x3e>
 801a648:	4621      	mov	r1, r4
 801a64a:	4630      	mov	r0, r6
 801a64c:	f000 f8fe 	bl	801a84c <_sbrk_r>
 801a650:	6038      	str	r0, [r7, #0]
 801a652:	4629      	mov	r1, r5
 801a654:	4630      	mov	r0, r6
 801a656:	f000 f8f9 	bl	801a84c <_sbrk_r>
 801a65a:	1c43      	adds	r3, r0, #1
 801a65c:	d123      	bne.n	801a6a6 <_malloc_r+0x92>
 801a65e:	230c      	movs	r3, #12
 801a660:	6033      	str	r3, [r6, #0]
 801a662:	4630      	mov	r0, r6
 801a664:	f000 fa92 	bl	801ab8c <__malloc_unlock>
 801a668:	e7e3      	b.n	801a632 <_malloc_r+0x1e>
 801a66a:	6823      	ldr	r3, [r4, #0]
 801a66c:	1b5b      	subs	r3, r3, r5
 801a66e:	d417      	bmi.n	801a6a0 <_malloc_r+0x8c>
 801a670:	2b0b      	cmp	r3, #11
 801a672:	d903      	bls.n	801a67c <_malloc_r+0x68>
 801a674:	6023      	str	r3, [r4, #0]
 801a676:	441c      	add	r4, r3
 801a678:	6025      	str	r5, [r4, #0]
 801a67a:	e004      	b.n	801a686 <_malloc_r+0x72>
 801a67c:	6863      	ldr	r3, [r4, #4]
 801a67e:	42a2      	cmp	r2, r4
 801a680:	bf0c      	ite	eq
 801a682:	600b      	streq	r3, [r1, #0]
 801a684:	6053      	strne	r3, [r2, #4]
 801a686:	4630      	mov	r0, r6
 801a688:	f000 fa80 	bl	801ab8c <__malloc_unlock>
 801a68c:	f104 000b 	add.w	r0, r4, #11
 801a690:	1d23      	adds	r3, r4, #4
 801a692:	f020 0007 	bic.w	r0, r0, #7
 801a696:	1ac2      	subs	r2, r0, r3
 801a698:	d0cc      	beq.n	801a634 <_malloc_r+0x20>
 801a69a:	1a1b      	subs	r3, r3, r0
 801a69c:	50a3      	str	r3, [r4, r2]
 801a69e:	e7c9      	b.n	801a634 <_malloc_r+0x20>
 801a6a0:	4622      	mov	r2, r4
 801a6a2:	6864      	ldr	r4, [r4, #4]
 801a6a4:	e7cc      	b.n	801a640 <_malloc_r+0x2c>
 801a6a6:	1cc4      	adds	r4, r0, #3
 801a6a8:	f024 0403 	bic.w	r4, r4, #3
 801a6ac:	42a0      	cmp	r0, r4
 801a6ae:	d0e3      	beq.n	801a678 <_malloc_r+0x64>
 801a6b0:	1a21      	subs	r1, r4, r0
 801a6b2:	4630      	mov	r0, r6
 801a6b4:	f000 f8ca 	bl	801a84c <_sbrk_r>
 801a6b8:	3001      	adds	r0, #1
 801a6ba:	d1dd      	bne.n	801a678 <_malloc_r+0x64>
 801a6bc:	e7cf      	b.n	801a65e <_malloc_r+0x4a>
 801a6be:	bf00      	nop
 801a6c0:	20006ad0 	.word	0x20006ad0
 801a6c4:	20006ad4 	.word	0x20006ad4

0801a6c8 <iprintf>:
 801a6c8:	b40f      	push	{r0, r1, r2, r3}
 801a6ca:	4b0a      	ldr	r3, [pc, #40]	; (801a6f4 <iprintf+0x2c>)
 801a6cc:	b513      	push	{r0, r1, r4, lr}
 801a6ce:	681c      	ldr	r4, [r3, #0]
 801a6d0:	b124      	cbz	r4, 801a6dc <iprintf+0x14>
 801a6d2:	69a3      	ldr	r3, [r4, #24]
 801a6d4:	b913      	cbnz	r3, 801a6dc <iprintf+0x14>
 801a6d6:	4620      	mov	r0, r4
 801a6d8:	f7ff fe44 	bl	801a364 <__sinit>
 801a6dc:	ab05      	add	r3, sp, #20
 801a6de:	9a04      	ldr	r2, [sp, #16]
 801a6e0:	68a1      	ldr	r1, [r4, #8]
 801a6e2:	9301      	str	r3, [sp, #4]
 801a6e4:	4620      	mov	r0, r4
 801a6e6:	f000 fbdd 	bl	801aea4 <_vfiprintf_r>
 801a6ea:	b002      	add	sp, #8
 801a6ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a6f0:	b004      	add	sp, #16
 801a6f2:	4770      	bx	lr
 801a6f4:	200000b0 	.word	0x200000b0

0801a6f8 <rand>:
 801a6f8:	4b17      	ldr	r3, [pc, #92]	; (801a758 <rand+0x60>)
 801a6fa:	b510      	push	{r4, lr}
 801a6fc:	681c      	ldr	r4, [r3, #0]
 801a6fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801a700:	b9b3      	cbnz	r3, 801a730 <rand+0x38>
 801a702:	2018      	movs	r0, #24
 801a704:	f7ff fef0 	bl	801a4e8 <malloc>
 801a708:	63a0      	str	r0, [r4, #56]	; 0x38
 801a70a:	b928      	cbnz	r0, 801a718 <rand+0x20>
 801a70c:	4602      	mov	r2, r0
 801a70e:	4b13      	ldr	r3, [pc, #76]	; (801a75c <rand+0x64>)
 801a710:	4813      	ldr	r0, [pc, #76]	; (801a760 <rand+0x68>)
 801a712:	214e      	movs	r1, #78	; 0x4e
 801a714:	f000 f920 	bl	801a958 <__assert_func>
 801a718:	4a12      	ldr	r2, [pc, #72]	; (801a764 <rand+0x6c>)
 801a71a:	4b13      	ldr	r3, [pc, #76]	; (801a768 <rand+0x70>)
 801a71c:	e9c0 2300 	strd	r2, r3, [r0]
 801a720:	4b12      	ldr	r3, [pc, #72]	; (801a76c <rand+0x74>)
 801a722:	6083      	str	r3, [r0, #8]
 801a724:	230b      	movs	r3, #11
 801a726:	8183      	strh	r3, [r0, #12]
 801a728:	2201      	movs	r2, #1
 801a72a:	2300      	movs	r3, #0
 801a72c:	e9c0 2304 	strd	r2, r3, [r0, #16]
 801a730:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a732:	480f      	ldr	r0, [pc, #60]	; (801a770 <rand+0x78>)
 801a734:	690a      	ldr	r2, [r1, #16]
 801a736:	694b      	ldr	r3, [r1, #20]
 801a738:	4c0e      	ldr	r4, [pc, #56]	; (801a774 <rand+0x7c>)
 801a73a:	4350      	muls	r0, r2
 801a73c:	fb04 0003 	mla	r0, r4, r3, r0
 801a740:	fba2 3404 	umull	r3, r4, r2, r4
 801a744:	1c5a      	adds	r2, r3, #1
 801a746:	4404      	add	r4, r0
 801a748:	f144 0000 	adc.w	r0, r4, #0
 801a74c:	e9c1 2004 	strd	r2, r0, [r1, #16]
 801a750:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a754:	bd10      	pop	{r4, pc}
 801a756:	bf00      	nop
 801a758:	200000b0 	.word	0x200000b0
 801a75c:	0801efb8 	.word	0x0801efb8
 801a760:	0801efcf 	.word	0x0801efcf
 801a764:	abcd330e 	.word	0xabcd330e
 801a768:	e66d1234 	.word	0xe66d1234
 801a76c:	0005deec 	.word	0x0005deec
 801a770:	5851f42d 	.word	0x5851f42d
 801a774:	4c957f2d 	.word	0x4c957f2d

0801a778 <cleanup_glue>:
 801a778:	b538      	push	{r3, r4, r5, lr}
 801a77a:	460c      	mov	r4, r1
 801a77c:	6809      	ldr	r1, [r1, #0]
 801a77e:	4605      	mov	r5, r0
 801a780:	b109      	cbz	r1, 801a786 <cleanup_glue+0xe>
 801a782:	f7ff fff9 	bl	801a778 <cleanup_glue>
 801a786:	4621      	mov	r1, r4
 801a788:	4628      	mov	r0, r5
 801a78a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a78e:	f7ff bef1 	b.w	801a574 <_free_r>
	...

0801a794 <_reclaim_reent>:
 801a794:	4b2c      	ldr	r3, [pc, #176]	; (801a848 <_reclaim_reent+0xb4>)
 801a796:	681b      	ldr	r3, [r3, #0]
 801a798:	4283      	cmp	r3, r0
 801a79a:	b570      	push	{r4, r5, r6, lr}
 801a79c:	4604      	mov	r4, r0
 801a79e:	d051      	beq.n	801a844 <_reclaim_reent+0xb0>
 801a7a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801a7a2:	b143      	cbz	r3, 801a7b6 <_reclaim_reent+0x22>
 801a7a4:	68db      	ldr	r3, [r3, #12]
 801a7a6:	2b00      	cmp	r3, #0
 801a7a8:	d14a      	bne.n	801a840 <_reclaim_reent+0xac>
 801a7aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a7ac:	6819      	ldr	r1, [r3, #0]
 801a7ae:	b111      	cbz	r1, 801a7b6 <_reclaim_reent+0x22>
 801a7b0:	4620      	mov	r0, r4
 801a7b2:	f7ff fedf 	bl	801a574 <_free_r>
 801a7b6:	6961      	ldr	r1, [r4, #20]
 801a7b8:	b111      	cbz	r1, 801a7c0 <_reclaim_reent+0x2c>
 801a7ba:	4620      	mov	r0, r4
 801a7bc:	f7ff feda 	bl	801a574 <_free_r>
 801a7c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801a7c2:	b111      	cbz	r1, 801a7ca <_reclaim_reent+0x36>
 801a7c4:	4620      	mov	r0, r4
 801a7c6:	f7ff fed5 	bl	801a574 <_free_r>
 801a7ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801a7cc:	b111      	cbz	r1, 801a7d4 <_reclaim_reent+0x40>
 801a7ce:	4620      	mov	r0, r4
 801a7d0:	f7ff fed0 	bl	801a574 <_free_r>
 801a7d4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801a7d6:	b111      	cbz	r1, 801a7de <_reclaim_reent+0x4a>
 801a7d8:	4620      	mov	r0, r4
 801a7da:	f7ff fecb 	bl	801a574 <_free_r>
 801a7de:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801a7e0:	b111      	cbz	r1, 801a7e8 <_reclaim_reent+0x54>
 801a7e2:	4620      	mov	r0, r4
 801a7e4:	f7ff fec6 	bl	801a574 <_free_r>
 801a7e8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801a7ea:	b111      	cbz	r1, 801a7f2 <_reclaim_reent+0x5e>
 801a7ec:	4620      	mov	r0, r4
 801a7ee:	f7ff fec1 	bl	801a574 <_free_r>
 801a7f2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 801a7f4:	b111      	cbz	r1, 801a7fc <_reclaim_reent+0x68>
 801a7f6:	4620      	mov	r0, r4
 801a7f8:	f7ff febc 	bl	801a574 <_free_r>
 801a7fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a7fe:	b111      	cbz	r1, 801a806 <_reclaim_reent+0x72>
 801a800:	4620      	mov	r0, r4
 801a802:	f7ff feb7 	bl	801a574 <_free_r>
 801a806:	69a3      	ldr	r3, [r4, #24]
 801a808:	b1e3      	cbz	r3, 801a844 <_reclaim_reent+0xb0>
 801a80a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801a80c:	4620      	mov	r0, r4
 801a80e:	4798      	blx	r3
 801a810:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801a812:	b1b9      	cbz	r1, 801a844 <_reclaim_reent+0xb0>
 801a814:	4620      	mov	r0, r4
 801a816:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801a81a:	f7ff bfad 	b.w	801a778 <cleanup_glue>
 801a81e:	5949      	ldr	r1, [r1, r5]
 801a820:	b941      	cbnz	r1, 801a834 <_reclaim_reent+0xa0>
 801a822:	3504      	adds	r5, #4
 801a824:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801a826:	2d80      	cmp	r5, #128	; 0x80
 801a828:	68d9      	ldr	r1, [r3, #12]
 801a82a:	d1f8      	bne.n	801a81e <_reclaim_reent+0x8a>
 801a82c:	4620      	mov	r0, r4
 801a82e:	f7ff fea1 	bl	801a574 <_free_r>
 801a832:	e7ba      	b.n	801a7aa <_reclaim_reent+0x16>
 801a834:	680e      	ldr	r6, [r1, #0]
 801a836:	4620      	mov	r0, r4
 801a838:	f7ff fe9c 	bl	801a574 <_free_r>
 801a83c:	4631      	mov	r1, r6
 801a83e:	e7ef      	b.n	801a820 <_reclaim_reent+0x8c>
 801a840:	2500      	movs	r5, #0
 801a842:	e7ef      	b.n	801a824 <_reclaim_reent+0x90>
 801a844:	bd70      	pop	{r4, r5, r6, pc}
 801a846:	bf00      	nop
 801a848:	200000b0 	.word	0x200000b0

0801a84c <_sbrk_r>:
 801a84c:	b538      	push	{r3, r4, r5, lr}
 801a84e:	4d06      	ldr	r5, [pc, #24]	; (801a868 <_sbrk_r+0x1c>)
 801a850:	2300      	movs	r3, #0
 801a852:	4604      	mov	r4, r0
 801a854:	4608      	mov	r0, r1
 801a856:	602b      	str	r3, [r5, #0]
 801a858:	f7e8 fc78 	bl	800314c <_sbrk>
 801a85c:	1c43      	adds	r3, r0, #1
 801a85e:	d102      	bne.n	801a866 <_sbrk_r+0x1a>
 801a860:	682b      	ldr	r3, [r5, #0]
 801a862:	b103      	cbz	r3, 801a866 <_sbrk_r+0x1a>
 801a864:	6023      	str	r3, [r4, #0]
 801a866:	bd38      	pop	{r3, r4, r5, pc}
 801a868:	2000dd60 	.word	0x2000dd60

0801a86c <siprintf>:
 801a86c:	b40e      	push	{r1, r2, r3}
 801a86e:	b500      	push	{lr}
 801a870:	b09c      	sub	sp, #112	; 0x70
 801a872:	ab1d      	add	r3, sp, #116	; 0x74
 801a874:	9002      	str	r0, [sp, #8]
 801a876:	9006      	str	r0, [sp, #24]
 801a878:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801a87c:	4809      	ldr	r0, [pc, #36]	; (801a8a4 <siprintf+0x38>)
 801a87e:	9107      	str	r1, [sp, #28]
 801a880:	9104      	str	r1, [sp, #16]
 801a882:	4909      	ldr	r1, [pc, #36]	; (801a8a8 <siprintf+0x3c>)
 801a884:	f853 2b04 	ldr.w	r2, [r3], #4
 801a888:	9105      	str	r1, [sp, #20]
 801a88a:	6800      	ldr	r0, [r0, #0]
 801a88c:	9301      	str	r3, [sp, #4]
 801a88e:	a902      	add	r1, sp, #8
 801a890:	f000 f9de 	bl	801ac50 <_svfiprintf_r>
 801a894:	9b02      	ldr	r3, [sp, #8]
 801a896:	2200      	movs	r2, #0
 801a898:	701a      	strb	r2, [r3, #0]
 801a89a:	b01c      	add	sp, #112	; 0x70
 801a89c:	f85d eb04 	ldr.w	lr, [sp], #4
 801a8a0:	b003      	add	sp, #12
 801a8a2:	4770      	bx	lr
 801a8a4:	200000b0 	.word	0x200000b0
 801a8a8:	ffff0208 	.word	0xffff0208

0801a8ac <__sread>:
 801a8ac:	b510      	push	{r4, lr}
 801a8ae:	460c      	mov	r4, r1
 801a8b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a8b4:	f000 fdba 	bl	801b42c <_read_r>
 801a8b8:	2800      	cmp	r0, #0
 801a8ba:	bfab      	itete	ge
 801a8bc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a8be:	89a3      	ldrhlt	r3, [r4, #12]
 801a8c0:	181b      	addge	r3, r3, r0
 801a8c2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a8c6:	bfac      	ite	ge
 801a8c8:	6563      	strge	r3, [r4, #84]	; 0x54
 801a8ca:	81a3      	strhlt	r3, [r4, #12]
 801a8cc:	bd10      	pop	{r4, pc}

0801a8ce <__swrite>:
 801a8ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a8d2:	461f      	mov	r7, r3
 801a8d4:	898b      	ldrh	r3, [r1, #12]
 801a8d6:	05db      	lsls	r3, r3, #23
 801a8d8:	4605      	mov	r5, r0
 801a8da:	460c      	mov	r4, r1
 801a8dc:	4616      	mov	r6, r2
 801a8de:	d505      	bpl.n	801a8ec <__swrite+0x1e>
 801a8e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a8e4:	2302      	movs	r3, #2
 801a8e6:	2200      	movs	r2, #0
 801a8e8:	f000 f938 	bl	801ab5c <_lseek_r>
 801a8ec:	89a3      	ldrh	r3, [r4, #12]
 801a8ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a8f2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a8f6:	81a3      	strh	r3, [r4, #12]
 801a8f8:	4632      	mov	r2, r6
 801a8fa:	463b      	mov	r3, r7
 801a8fc:	4628      	mov	r0, r5
 801a8fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a902:	f000 b817 	b.w	801a934 <_write_r>

0801a906 <__sseek>:
 801a906:	b510      	push	{r4, lr}
 801a908:	460c      	mov	r4, r1
 801a90a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a90e:	f000 f925 	bl	801ab5c <_lseek_r>
 801a912:	1c43      	adds	r3, r0, #1
 801a914:	89a3      	ldrh	r3, [r4, #12]
 801a916:	bf15      	itete	ne
 801a918:	6560      	strne	r0, [r4, #84]	; 0x54
 801a91a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a91e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a922:	81a3      	strheq	r3, [r4, #12]
 801a924:	bf18      	it	ne
 801a926:	81a3      	strhne	r3, [r4, #12]
 801a928:	bd10      	pop	{r4, pc}

0801a92a <__sclose>:
 801a92a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a92e:	f000 b831 	b.w	801a994 <_close_r>
	...

0801a934 <_write_r>:
 801a934:	b538      	push	{r3, r4, r5, lr}
 801a936:	4d07      	ldr	r5, [pc, #28]	; (801a954 <_write_r+0x20>)
 801a938:	4604      	mov	r4, r0
 801a93a:	4608      	mov	r0, r1
 801a93c:	4611      	mov	r1, r2
 801a93e:	2200      	movs	r2, #0
 801a940:	602a      	str	r2, [r5, #0]
 801a942:	461a      	mov	r2, r3
 801a944:	f7e8 fbb1 	bl	80030aa <_write>
 801a948:	1c43      	adds	r3, r0, #1
 801a94a:	d102      	bne.n	801a952 <_write_r+0x1e>
 801a94c:	682b      	ldr	r3, [r5, #0]
 801a94e:	b103      	cbz	r3, 801a952 <_write_r+0x1e>
 801a950:	6023      	str	r3, [r4, #0]
 801a952:	bd38      	pop	{r3, r4, r5, pc}
 801a954:	2000dd60 	.word	0x2000dd60

0801a958 <__assert_func>:
 801a958:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a95a:	4614      	mov	r4, r2
 801a95c:	461a      	mov	r2, r3
 801a95e:	4b09      	ldr	r3, [pc, #36]	; (801a984 <__assert_func+0x2c>)
 801a960:	681b      	ldr	r3, [r3, #0]
 801a962:	4605      	mov	r5, r0
 801a964:	68d8      	ldr	r0, [r3, #12]
 801a966:	b14c      	cbz	r4, 801a97c <__assert_func+0x24>
 801a968:	4b07      	ldr	r3, [pc, #28]	; (801a988 <__assert_func+0x30>)
 801a96a:	9100      	str	r1, [sp, #0]
 801a96c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a970:	4906      	ldr	r1, [pc, #24]	; (801a98c <__assert_func+0x34>)
 801a972:	462b      	mov	r3, r5
 801a974:	f000 f8e0 	bl	801ab38 <fiprintf>
 801a978:	f000 fe2a 	bl	801b5d0 <abort>
 801a97c:	4b04      	ldr	r3, [pc, #16]	; (801a990 <__assert_func+0x38>)
 801a97e:	461c      	mov	r4, r3
 801a980:	e7f3      	b.n	801a96a <__assert_func+0x12>
 801a982:	bf00      	nop
 801a984:	200000b0 	.word	0x200000b0
 801a988:	0801f02e 	.word	0x0801f02e
 801a98c:	0801f03b 	.word	0x0801f03b
 801a990:	0801f069 	.word	0x0801f069

0801a994 <_close_r>:
 801a994:	b538      	push	{r3, r4, r5, lr}
 801a996:	4d06      	ldr	r5, [pc, #24]	; (801a9b0 <_close_r+0x1c>)
 801a998:	2300      	movs	r3, #0
 801a99a:	4604      	mov	r4, r0
 801a99c:	4608      	mov	r0, r1
 801a99e:	602b      	str	r3, [r5, #0]
 801a9a0:	f7e8 fb9f 	bl	80030e2 <_close>
 801a9a4:	1c43      	adds	r3, r0, #1
 801a9a6:	d102      	bne.n	801a9ae <_close_r+0x1a>
 801a9a8:	682b      	ldr	r3, [r5, #0]
 801a9aa:	b103      	cbz	r3, 801a9ae <_close_r+0x1a>
 801a9ac:	6023      	str	r3, [r4, #0]
 801a9ae:	bd38      	pop	{r3, r4, r5, pc}
 801a9b0:	2000dd60 	.word	0x2000dd60

0801a9b4 <__sflush_r>:
 801a9b4:	898a      	ldrh	r2, [r1, #12]
 801a9b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a9ba:	4605      	mov	r5, r0
 801a9bc:	0710      	lsls	r0, r2, #28
 801a9be:	460c      	mov	r4, r1
 801a9c0:	d458      	bmi.n	801aa74 <__sflush_r+0xc0>
 801a9c2:	684b      	ldr	r3, [r1, #4]
 801a9c4:	2b00      	cmp	r3, #0
 801a9c6:	dc05      	bgt.n	801a9d4 <__sflush_r+0x20>
 801a9c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a9ca:	2b00      	cmp	r3, #0
 801a9cc:	dc02      	bgt.n	801a9d4 <__sflush_r+0x20>
 801a9ce:	2000      	movs	r0, #0
 801a9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a9d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a9d6:	2e00      	cmp	r6, #0
 801a9d8:	d0f9      	beq.n	801a9ce <__sflush_r+0x1a>
 801a9da:	2300      	movs	r3, #0
 801a9dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a9e0:	682f      	ldr	r7, [r5, #0]
 801a9e2:	602b      	str	r3, [r5, #0]
 801a9e4:	d032      	beq.n	801aa4c <__sflush_r+0x98>
 801a9e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a9e8:	89a3      	ldrh	r3, [r4, #12]
 801a9ea:	075a      	lsls	r2, r3, #29
 801a9ec:	d505      	bpl.n	801a9fa <__sflush_r+0x46>
 801a9ee:	6863      	ldr	r3, [r4, #4]
 801a9f0:	1ac0      	subs	r0, r0, r3
 801a9f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a9f4:	b10b      	cbz	r3, 801a9fa <__sflush_r+0x46>
 801a9f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a9f8:	1ac0      	subs	r0, r0, r3
 801a9fa:	2300      	movs	r3, #0
 801a9fc:	4602      	mov	r2, r0
 801a9fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801aa00:	6a21      	ldr	r1, [r4, #32]
 801aa02:	4628      	mov	r0, r5
 801aa04:	47b0      	blx	r6
 801aa06:	1c43      	adds	r3, r0, #1
 801aa08:	89a3      	ldrh	r3, [r4, #12]
 801aa0a:	d106      	bne.n	801aa1a <__sflush_r+0x66>
 801aa0c:	6829      	ldr	r1, [r5, #0]
 801aa0e:	291d      	cmp	r1, #29
 801aa10:	d82c      	bhi.n	801aa6c <__sflush_r+0xb8>
 801aa12:	4a2a      	ldr	r2, [pc, #168]	; (801aabc <__sflush_r+0x108>)
 801aa14:	40ca      	lsrs	r2, r1
 801aa16:	07d6      	lsls	r6, r2, #31
 801aa18:	d528      	bpl.n	801aa6c <__sflush_r+0xb8>
 801aa1a:	2200      	movs	r2, #0
 801aa1c:	6062      	str	r2, [r4, #4]
 801aa1e:	04d9      	lsls	r1, r3, #19
 801aa20:	6922      	ldr	r2, [r4, #16]
 801aa22:	6022      	str	r2, [r4, #0]
 801aa24:	d504      	bpl.n	801aa30 <__sflush_r+0x7c>
 801aa26:	1c42      	adds	r2, r0, #1
 801aa28:	d101      	bne.n	801aa2e <__sflush_r+0x7a>
 801aa2a:	682b      	ldr	r3, [r5, #0]
 801aa2c:	b903      	cbnz	r3, 801aa30 <__sflush_r+0x7c>
 801aa2e:	6560      	str	r0, [r4, #84]	; 0x54
 801aa30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801aa32:	602f      	str	r7, [r5, #0]
 801aa34:	2900      	cmp	r1, #0
 801aa36:	d0ca      	beq.n	801a9ce <__sflush_r+0x1a>
 801aa38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801aa3c:	4299      	cmp	r1, r3
 801aa3e:	d002      	beq.n	801aa46 <__sflush_r+0x92>
 801aa40:	4628      	mov	r0, r5
 801aa42:	f7ff fd97 	bl	801a574 <_free_r>
 801aa46:	2000      	movs	r0, #0
 801aa48:	6360      	str	r0, [r4, #52]	; 0x34
 801aa4a:	e7c1      	b.n	801a9d0 <__sflush_r+0x1c>
 801aa4c:	6a21      	ldr	r1, [r4, #32]
 801aa4e:	2301      	movs	r3, #1
 801aa50:	4628      	mov	r0, r5
 801aa52:	47b0      	blx	r6
 801aa54:	1c41      	adds	r1, r0, #1
 801aa56:	d1c7      	bne.n	801a9e8 <__sflush_r+0x34>
 801aa58:	682b      	ldr	r3, [r5, #0]
 801aa5a:	2b00      	cmp	r3, #0
 801aa5c:	d0c4      	beq.n	801a9e8 <__sflush_r+0x34>
 801aa5e:	2b1d      	cmp	r3, #29
 801aa60:	d001      	beq.n	801aa66 <__sflush_r+0xb2>
 801aa62:	2b16      	cmp	r3, #22
 801aa64:	d101      	bne.n	801aa6a <__sflush_r+0xb6>
 801aa66:	602f      	str	r7, [r5, #0]
 801aa68:	e7b1      	b.n	801a9ce <__sflush_r+0x1a>
 801aa6a:	89a3      	ldrh	r3, [r4, #12]
 801aa6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aa70:	81a3      	strh	r3, [r4, #12]
 801aa72:	e7ad      	b.n	801a9d0 <__sflush_r+0x1c>
 801aa74:	690f      	ldr	r7, [r1, #16]
 801aa76:	2f00      	cmp	r7, #0
 801aa78:	d0a9      	beq.n	801a9ce <__sflush_r+0x1a>
 801aa7a:	0793      	lsls	r3, r2, #30
 801aa7c:	680e      	ldr	r6, [r1, #0]
 801aa7e:	bf08      	it	eq
 801aa80:	694b      	ldreq	r3, [r1, #20]
 801aa82:	600f      	str	r7, [r1, #0]
 801aa84:	bf18      	it	ne
 801aa86:	2300      	movne	r3, #0
 801aa88:	eba6 0807 	sub.w	r8, r6, r7
 801aa8c:	608b      	str	r3, [r1, #8]
 801aa8e:	f1b8 0f00 	cmp.w	r8, #0
 801aa92:	dd9c      	ble.n	801a9ce <__sflush_r+0x1a>
 801aa94:	6a21      	ldr	r1, [r4, #32]
 801aa96:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801aa98:	4643      	mov	r3, r8
 801aa9a:	463a      	mov	r2, r7
 801aa9c:	4628      	mov	r0, r5
 801aa9e:	47b0      	blx	r6
 801aaa0:	2800      	cmp	r0, #0
 801aaa2:	dc06      	bgt.n	801aab2 <__sflush_r+0xfe>
 801aaa4:	89a3      	ldrh	r3, [r4, #12]
 801aaa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801aaaa:	81a3      	strh	r3, [r4, #12]
 801aaac:	f04f 30ff 	mov.w	r0, #4294967295
 801aab0:	e78e      	b.n	801a9d0 <__sflush_r+0x1c>
 801aab2:	4407      	add	r7, r0
 801aab4:	eba8 0800 	sub.w	r8, r8, r0
 801aab8:	e7e9      	b.n	801aa8e <__sflush_r+0xda>
 801aaba:	bf00      	nop
 801aabc:	20400001 	.word	0x20400001

0801aac0 <_fflush_r>:
 801aac0:	b538      	push	{r3, r4, r5, lr}
 801aac2:	690b      	ldr	r3, [r1, #16]
 801aac4:	4605      	mov	r5, r0
 801aac6:	460c      	mov	r4, r1
 801aac8:	b913      	cbnz	r3, 801aad0 <_fflush_r+0x10>
 801aaca:	2500      	movs	r5, #0
 801aacc:	4628      	mov	r0, r5
 801aace:	bd38      	pop	{r3, r4, r5, pc}
 801aad0:	b118      	cbz	r0, 801aada <_fflush_r+0x1a>
 801aad2:	6983      	ldr	r3, [r0, #24]
 801aad4:	b90b      	cbnz	r3, 801aada <_fflush_r+0x1a>
 801aad6:	f7ff fc45 	bl	801a364 <__sinit>
 801aada:	4b14      	ldr	r3, [pc, #80]	; (801ab2c <_fflush_r+0x6c>)
 801aadc:	429c      	cmp	r4, r3
 801aade:	d11b      	bne.n	801ab18 <_fflush_r+0x58>
 801aae0:	686c      	ldr	r4, [r5, #4]
 801aae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aae6:	2b00      	cmp	r3, #0
 801aae8:	d0ef      	beq.n	801aaca <_fflush_r+0xa>
 801aaea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801aaec:	07d0      	lsls	r0, r2, #31
 801aaee:	d404      	bmi.n	801aafa <_fflush_r+0x3a>
 801aaf0:	0599      	lsls	r1, r3, #22
 801aaf2:	d402      	bmi.n	801aafa <_fflush_r+0x3a>
 801aaf4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801aaf6:	f7e8 fd8f 	bl	8003618 <__retarget_lock_acquire_recursive>
 801aafa:	4628      	mov	r0, r5
 801aafc:	4621      	mov	r1, r4
 801aafe:	f7ff ff59 	bl	801a9b4 <__sflush_r>
 801ab02:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ab04:	07da      	lsls	r2, r3, #31
 801ab06:	4605      	mov	r5, r0
 801ab08:	d4e0      	bmi.n	801aacc <_fflush_r+0xc>
 801ab0a:	89a3      	ldrh	r3, [r4, #12]
 801ab0c:	059b      	lsls	r3, r3, #22
 801ab0e:	d4dd      	bmi.n	801aacc <_fflush_r+0xc>
 801ab10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ab12:	f7e8 fd95 	bl	8003640 <__retarget_lock_release_recursive>
 801ab16:	e7d9      	b.n	801aacc <_fflush_r+0xc>
 801ab18:	4b05      	ldr	r3, [pc, #20]	; (801ab30 <_fflush_r+0x70>)
 801ab1a:	429c      	cmp	r4, r3
 801ab1c:	d101      	bne.n	801ab22 <_fflush_r+0x62>
 801ab1e:	68ac      	ldr	r4, [r5, #8]
 801ab20:	e7df      	b.n	801aae2 <_fflush_r+0x22>
 801ab22:	4b04      	ldr	r3, [pc, #16]	; (801ab34 <_fflush_r+0x74>)
 801ab24:	429c      	cmp	r4, r3
 801ab26:	bf08      	it	eq
 801ab28:	68ec      	ldreq	r4, [r5, #12]
 801ab2a:	e7da      	b.n	801aae2 <_fflush_r+0x22>
 801ab2c:	0801ef74 	.word	0x0801ef74
 801ab30:	0801ef94 	.word	0x0801ef94
 801ab34:	0801ef54 	.word	0x0801ef54

0801ab38 <fiprintf>:
 801ab38:	b40e      	push	{r1, r2, r3}
 801ab3a:	b503      	push	{r0, r1, lr}
 801ab3c:	4601      	mov	r1, r0
 801ab3e:	ab03      	add	r3, sp, #12
 801ab40:	4805      	ldr	r0, [pc, #20]	; (801ab58 <fiprintf+0x20>)
 801ab42:	f853 2b04 	ldr.w	r2, [r3], #4
 801ab46:	6800      	ldr	r0, [r0, #0]
 801ab48:	9301      	str	r3, [sp, #4]
 801ab4a:	f000 f9ab 	bl	801aea4 <_vfiprintf_r>
 801ab4e:	b002      	add	sp, #8
 801ab50:	f85d eb04 	ldr.w	lr, [sp], #4
 801ab54:	b003      	add	sp, #12
 801ab56:	4770      	bx	lr
 801ab58:	200000b0 	.word	0x200000b0

0801ab5c <_lseek_r>:
 801ab5c:	b538      	push	{r3, r4, r5, lr}
 801ab5e:	4d07      	ldr	r5, [pc, #28]	; (801ab7c <_lseek_r+0x20>)
 801ab60:	4604      	mov	r4, r0
 801ab62:	4608      	mov	r0, r1
 801ab64:	4611      	mov	r1, r2
 801ab66:	2200      	movs	r2, #0
 801ab68:	602a      	str	r2, [r5, #0]
 801ab6a:	461a      	mov	r2, r3
 801ab6c:	f7e8 fae0 	bl	8003130 <_lseek>
 801ab70:	1c43      	adds	r3, r0, #1
 801ab72:	d102      	bne.n	801ab7a <_lseek_r+0x1e>
 801ab74:	682b      	ldr	r3, [r5, #0]
 801ab76:	b103      	cbz	r3, 801ab7a <_lseek_r+0x1e>
 801ab78:	6023      	str	r3, [r4, #0]
 801ab7a:	bd38      	pop	{r3, r4, r5, pc}
 801ab7c:	2000dd60 	.word	0x2000dd60

0801ab80 <__malloc_lock>:
 801ab80:	4801      	ldr	r0, [pc, #4]	; (801ab88 <__malloc_lock+0x8>)
 801ab82:	f7e8 bd49 	b.w	8003618 <__retarget_lock_acquire_recursive>
 801ab86:	bf00      	nop
 801ab88:	200004c8 	.word	0x200004c8

0801ab8c <__malloc_unlock>:
 801ab8c:	4801      	ldr	r0, [pc, #4]	; (801ab94 <__malloc_unlock+0x8>)
 801ab8e:	f7e8 bd57 	b.w	8003640 <__retarget_lock_release_recursive>
 801ab92:	bf00      	nop
 801ab94:	200004c8 	.word	0x200004c8

0801ab98 <__ssputs_r>:
 801ab98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ab9c:	688e      	ldr	r6, [r1, #8]
 801ab9e:	429e      	cmp	r6, r3
 801aba0:	4682      	mov	sl, r0
 801aba2:	460c      	mov	r4, r1
 801aba4:	4690      	mov	r8, r2
 801aba6:	461f      	mov	r7, r3
 801aba8:	d838      	bhi.n	801ac1c <__ssputs_r+0x84>
 801abaa:	898a      	ldrh	r2, [r1, #12]
 801abac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801abb0:	d032      	beq.n	801ac18 <__ssputs_r+0x80>
 801abb2:	6825      	ldr	r5, [r4, #0]
 801abb4:	6909      	ldr	r1, [r1, #16]
 801abb6:	eba5 0901 	sub.w	r9, r5, r1
 801abba:	6965      	ldr	r5, [r4, #20]
 801abbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801abc0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801abc4:	3301      	adds	r3, #1
 801abc6:	444b      	add	r3, r9
 801abc8:	106d      	asrs	r5, r5, #1
 801abca:	429d      	cmp	r5, r3
 801abcc:	bf38      	it	cc
 801abce:	461d      	movcc	r5, r3
 801abd0:	0553      	lsls	r3, r2, #21
 801abd2:	d531      	bpl.n	801ac38 <__ssputs_r+0xa0>
 801abd4:	4629      	mov	r1, r5
 801abd6:	f7ff fd1d 	bl	801a614 <_malloc_r>
 801abda:	4606      	mov	r6, r0
 801abdc:	b950      	cbnz	r0, 801abf4 <__ssputs_r+0x5c>
 801abde:	230c      	movs	r3, #12
 801abe0:	f8ca 3000 	str.w	r3, [sl]
 801abe4:	89a3      	ldrh	r3, [r4, #12]
 801abe6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801abea:	81a3      	strh	r3, [r4, #12]
 801abec:	f04f 30ff 	mov.w	r0, #4294967295
 801abf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801abf4:	6921      	ldr	r1, [r4, #16]
 801abf6:	464a      	mov	r2, r9
 801abf8:	f7ff fc8c 	bl	801a514 <memcpy>
 801abfc:	89a3      	ldrh	r3, [r4, #12]
 801abfe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801ac02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801ac06:	81a3      	strh	r3, [r4, #12]
 801ac08:	6126      	str	r6, [r4, #16]
 801ac0a:	6165      	str	r5, [r4, #20]
 801ac0c:	444e      	add	r6, r9
 801ac0e:	eba5 0509 	sub.w	r5, r5, r9
 801ac12:	6026      	str	r6, [r4, #0]
 801ac14:	60a5      	str	r5, [r4, #8]
 801ac16:	463e      	mov	r6, r7
 801ac18:	42be      	cmp	r6, r7
 801ac1a:	d900      	bls.n	801ac1e <__ssputs_r+0x86>
 801ac1c:	463e      	mov	r6, r7
 801ac1e:	4632      	mov	r2, r6
 801ac20:	6820      	ldr	r0, [r4, #0]
 801ac22:	4641      	mov	r1, r8
 801ac24:	f7ff fc84 	bl	801a530 <memmove>
 801ac28:	68a3      	ldr	r3, [r4, #8]
 801ac2a:	6822      	ldr	r2, [r4, #0]
 801ac2c:	1b9b      	subs	r3, r3, r6
 801ac2e:	4432      	add	r2, r6
 801ac30:	60a3      	str	r3, [r4, #8]
 801ac32:	6022      	str	r2, [r4, #0]
 801ac34:	2000      	movs	r0, #0
 801ac36:	e7db      	b.n	801abf0 <__ssputs_r+0x58>
 801ac38:	462a      	mov	r2, r5
 801ac3a:	f000 fd35 	bl	801b6a8 <_realloc_r>
 801ac3e:	4606      	mov	r6, r0
 801ac40:	2800      	cmp	r0, #0
 801ac42:	d1e1      	bne.n	801ac08 <__ssputs_r+0x70>
 801ac44:	6921      	ldr	r1, [r4, #16]
 801ac46:	4650      	mov	r0, sl
 801ac48:	f7ff fc94 	bl	801a574 <_free_r>
 801ac4c:	e7c7      	b.n	801abde <__ssputs_r+0x46>
	...

0801ac50 <_svfiprintf_r>:
 801ac50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac54:	4698      	mov	r8, r3
 801ac56:	898b      	ldrh	r3, [r1, #12]
 801ac58:	061b      	lsls	r3, r3, #24
 801ac5a:	b09d      	sub	sp, #116	; 0x74
 801ac5c:	4607      	mov	r7, r0
 801ac5e:	460d      	mov	r5, r1
 801ac60:	4614      	mov	r4, r2
 801ac62:	d50e      	bpl.n	801ac82 <_svfiprintf_r+0x32>
 801ac64:	690b      	ldr	r3, [r1, #16]
 801ac66:	b963      	cbnz	r3, 801ac82 <_svfiprintf_r+0x32>
 801ac68:	2140      	movs	r1, #64	; 0x40
 801ac6a:	f7ff fcd3 	bl	801a614 <_malloc_r>
 801ac6e:	6028      	str	r0, [r5, #0]
 801ac70:	6128      	str	r0, [r5, #16]
 801ac72:	b920      	cbnz	r0, 801ac7e <_svfiprintf_r+0x2e>
 801ac74:	230c      	movs	r3, #12
 801ac76:	603b      	str	r3, [r7, #0]
 801ac78:	f04f 30ff 	mov.w	r0, #4294967295
 801ac7c:	e0d1      	b.n	801ae22 <_svfiprintf_r+0x1d2>
 801ac7e:	2340      	movs	r3, #64	; 0x40
 801ac80:	616b      	str	r3, [r5, #20]
 801ac82:	2300      	movs	r3, #0
 801ac84:	9309      	str	r3, [sp, #36]	; 0x24
 801ac86:	2320      	movs	r3, #32
 801ac88:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801ac8c:	f8cd 800c 	str.w	r8, [sp, #12]
 801ac90:	2330      	movs	r3, #48	; 0x30
 801ac92:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801ae3c <_svfiprintf_r+0x1ec>
 801ac96:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801ac9a:	f04f 0901 	mov.w	r9, #1
 801ac9e:	4623      	mov	r3, r4
 801aca0:	469a      	mov	sl, r3
 801aca2:	f813 2b01 	ldrb.w	r2, [r3], #1
 801aca6:	b10a      	cbz	r2, 801acac <_svfiprintf_r+0x5c>
 801aca8:	2a25      	cmp	r2, #37	; 0x25
 801acaa:	d1f9      	bne.n	801aca0 <_svfiprintf_r+0x50>
 801acac:	ebba 0b04 	subs.w	fp, sl, r4
 801acb0:	d00b      	beq.n	801acca <_svfiprintf_r+0x7a>
 801acb2:	465b      	mov	r3, fp
 801acb4:	4622      	mov	r2, r4
 801acb6:	4629      	mov	r1, r5
 801acb8:	4638      	mov	r0, r7
 801acba:	f7ff ff6d 	bl	801ab98 <__ssputs_r>
 801acbe:	3001      	adds	r0, #1
 801acc0:	f000 80aa 	beq.w	801ae18 <_svfiprintf_r+0x1c8>
 801acc4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801acc6:	445a      	add	r2, fp
 801acc8:	9209      	str	r2, [sp, #36]	; 0x24
 801acca:	f89a 3000 	ldrb.w	r3, [sl]
 801acce:	2b00      	cmp	r3, #0
 801acd0:	f000 80a2 	beq.w	801ae18 <_svfiprintf_r+0x1c8>
 801acd4:	2300      	movs	r3, #0
 801acd6:	f04f 32ff 	mov.w	r2, #4294967295
 801acda:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801acde:	f10a 0a01 	add.w	sl, sl, #1
 801ace2:	9304      	str	r3, [sp, #16]
 801ace4:	9307      	str	r3, [sp, #28]
 801ace6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801acea:	931a      	str	r3, [sp, #104]	; 0x68
 801acec:	4654      	mov	r4, sl
 801acee:	2205      	movs	r2, #5
 801acf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801acf4:	4851      	ldr	r0, [pc, #324]	; (801ae3c <_svfiprintf_r+0x1ec>)
 801acf6:	f7e5 fa6b 	bl	80001d0 <memchr>
 801acfa:	9a04      	ldr	r2, [sp, #16]
 801acfc:	b9d8      	cbnz	r0, 801ad36 <_svfiprintf_r+0xe6>
 801acfe:	06d0      	lsls	r0, r2, #27
 801ad00:	bf44      	itt	mi
 801ad02:	2320      	movmi	r3, #32
 801ad04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ad08:	0711      	lsls	r1, r2, #28
 801ad0a:	bf44      	itt	mi
 801ad0c:	232b      	movmi	r3, #43	; 0x2b
 801ad0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801ad12:	f89a 3000 	ldrb.w	r3, [sl]
 801ad16:	2b2a      	cmp	r3, #42	; 0x2a
 801ad18:	d015      	beq.n	801ad46 <_svfiprintf_r+0xf6>
 801ad1a:	9a07      	ldr	r2, [sp, #28]
 801ad1c:	4654      	mov	r4, sl
 801ad1e:	2000      	movs	r0, #0
 801ad20:	f04f 0c0a 	mov.w	ip, #10
 801ad24:	4621      	mov	r1, r4
 801ad26:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ad2a:	3b30      	subs	r3, #48	; 0x30
 801ad2c:	2b09      	cmp	r3, #9
 801ad2e:	d94e      	bls.n	801adce <_svfiprintf_r+0x17e>
 801ad30:	b1b0      	cbz	r0, 801ad60 <_svfiprintf_r+0x110>
 801ad32:	9207      	str	r2, [sp, #28]
 801ad34:	e014      	b.n	801ad60 <_svfiprintf_r+0x110>
 801ad36:	eba0 0308 	sub.w	r3, r0, r8
 801ad3a:	fa09 f303 	lsl.w	r3, r9, r3
 801ad3e:	4313      	orrs	r3, r2
 801ad40:	9304      	str	r3, [sp, #16]
 801ad42:	46a2      	mov	sl, r4
 801ad44:	e7d2      	b.n	801acec <_svfiprintf_r+0x9c>
 801ad46:	9b03      	ldr	r3, [sp, #12]
 801ad48:	1d19      	adds	r1, r3, #4
 801ad4a:	681b      	ldr	r3, [r3, #0]
 801ad4c:	9103      	str	r1, [sp, #12]
 801ad4e:	2b00      	cmp	r3, #0
 801ad50:	bfbb      	ittet	lt
 801ad52:	425b      	neglt	r3, r3
 801ad54:	f042 0202 	orrlt.w	r2, r2, #2
 801ad58:	9307      	strge	r3, [sp, #28]
 801ad5a:	9307      	strlt	r3, [sp, #28]
 801ad5c:	bfb8      	it	lt
 801ad5e:	9204      	strlt	r2, [sp, #16]
 801ad60:	7823      	ldrb	r3, [r4, #0]
 801ad62:	2b2e      	cmp	r3, #46	; 0x2e
 801ad64:	d10c      	bne.n	801ad80 <_svfiprintf_r+0x130>
 801ad66:	7863      	ldrb	r3, [r4, #1]
 801ad68:	2b2a      	cmp	r3, #42	; 0x2a
 801ad6a:	d135      	bne.n	801add8 <_svfiprintf_r+0x188>
 801ad6c:	9b03      	ldr	r3, [sp, #12]
 801ad6e:	1d1a      	adds	r2, r3, #4
 801ad70:	681b      	ldr	r3, [r3, #0]
 801ad72:	9203      	str	r2, [sp, #12]
 801ad74:	2b00      	cmp	r3, #0
 801ad76:	bfb8      	it	lt
 801ad78:	f04f 33ff 	movlt.w	r3, #4294967295
 801ad7c:	3402      	adds	r4, #2
 801ad7e:	9305      	str	r3, [sp, #20]
 801ad80:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801ae4c <_svfiprintf_r+0x1fc>
 801ad84:	7821      	ldrb	r1, [r4, #0]
 801ad86:	2203      	movs	r2, #3
 801ad88:	4650      	mov	r0, sl
 801ad8a:	f7e5 fa21 	bl	80001d0 <memchr>
 801ad8e:	b140      	cbz	r0, 801ada2 <_svfiprintf_r+0x152>
 801ad90:	2340      	movs	r3, #64	; 0x40
 801ad92:	eba0 000a 	sub.w	r0, r0, sl
 801ad96:	fa03 f000 	lsl.w	r0, r3, r0
 801ad9a:	9b04      	ldr	r3, [sp, #16]
 801ad9c:	4303      	orrs	r3, r0
 801ad9e:	3401      	adds	r4, #1
 801ada0:	9304      	str	r3, [sp, #16]
 801ada2:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ada6:	4826      	ldr	r0, [pc, #152]	; (801ae40 <_svfiprintf_r+0x1f0>)
 801ada8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801adac:	2206      	movs	r2, #6
 801adae:	f7e5 fa0f 	bl	80001d0 <memchr>
 801adb2:	2800      	cmp	r0, #0
 801adb4:	d038      	beq.n	801ae28 <_svfiprintf_r+0x1d8>
 801adb6:	4b23      	ldr	r3, [pc, #140]	; (801ae44 <_svfiprintf_r+0x1f4>)
 801adb8:	bb1b      	cbnz	r3, 801ae02 <_svfiprintf_r+0x1b2>
 801adba:	9b03      	ldr	r3, [sp, #12]
 801adbc:	3307      	adds	r3, #7
 801adbe:	f023 0307 	bic.w	r3, r3, #7
 801adc2:	3308      	adds	r3, #8
 801adc4:	9303      	str	r3, [sp, #12]
 801adc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801adc8:	4433      	add	r3, r6
 801adca:	9309      	str	r3, [sp, #36]	; 0x24
 801adcc:	e767      	b.n	801ac9e <_svfiprintf_r+0x4e>
 801adce:	fb0c 3202 	mla	r2, ip, r2, r3
 801add2:	460c      	mov	r4, r1
 801add4:	2001      	movs	r0, #1
 801add6:	e7a5      	b.n	801ad24 <_svfiprintf_r+0xd4>
 801add8:	2300      	movs	r3, #0
 801adda:	3401      	adds	r4, #1
 801addc:	9305      	str	r3, [sp, #20]
 801adde:	4619      	mov	r1, r3
 801ade0:	f04f 0c0a 	mov.w	ip, #10
 801ade4:	4620      	mov	r0, r4
 801ade6:	f810 2b01 	ldrb.w	r2, [r0], #1
 801adea:	3a30      	subs	r2, #48	; 0x30
 801adec:	2a09      	cmp	r2, #9
 801adee:	d903      	bls.n	801adf8 <_svfiprintf_r+0x1a8>
 801adf0:	2b00      	cmp	r3, #0
 801adf2:	d0c5      	beq.n	801ad80 <_svfiprintf_r+0x130>
 801adf4:	9105      	str	r1, [sp, #20]
 801adf6:	e7c3      	b.n	801ad80 <_svfiprintf_r+0x130>
 801adf8:	fb0c 2101 	mla	r1, ip, r1, r2
 801adfc:	4604      	mov	r4, r0
 801adfe:	2301      	movs	r3, #1
 801ae00:	e7f0      	b.n	801ade4 <_svfiprintf_r+0x194>
 801ae02:	ab03      	add	r3, sp, #12
 801ae04:	9300      	str	r3, [sp, #0]
 801ae06:	462a      	mov	r2, r5
 801ae08:	4b0f      	ldr	r3, [pc, #60]	; (801ae48 <_svfiprintf_r+0x1f8>)
 801ae0a:	a904      	add	r1, sp, #16
 801ae0c:	4638      	mov	r0, r7
 801ae0e:	f3af 8000 	nop.w
 801ae12:	1c42      	adds	r2, r0, #1
 801ae14:	4606      	mov	r6, r0
 801ae16:	d1d6      	bne.n	801adc6 <_svfiprintf_r+0x176>
 801ae18:	89ab      	ldrh	r3, [r5, #12]
 801ae1a:	065b      	lsls	r3, r3, #25
 801ae1c:	f53f af2c 	bmi.w	801ac78 <_svfiprintf_r+0x28>
 801ae20:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ae22:	b01d      	add	sp, #116	; 0x74
 801ae24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae28:	ab03      	add	r3, sp, #12
 801ae2a:	9300      	str	r3, [sp, #0]
 801ae2c:	462a      	mov	r2, r5
 801ae2e:	4b06      	ldr	r3, [pc, #24]	; (801ae48 <_svfiprintf_r+0x1f8>)
 801ae30:	a904      	add	r1, sp, #16
 801ae32:	4638      	mov	r0, r7
 801ae34:	f000 f9d4 	bl	801b1e0 <_printf_i>
 801ae38:	e7eb      	b.n	801ae12 <_svfiprintf_r+0x1c2>
 801ae3a:	bf00      	nop
 801ae3c:	0801f06a 	.word	0x0801f06a
 801ae40:	0801f074 	.word	0x0801f074
 801ae44:	00000000 	.word	0x00000000
 801ae48:	0801ab99 	.word	0x0801ab99
 801ae4c:	0801f070 	.word	0x0801f070

0801ae50 <__sfputc_r>:
 801ae50:	6893      	ldr	r3, [r2, #8]
 801ae52:	3b01      	subs	r3, #1
 801ae54:	2b00      	cmp	r3, #0
 801ae56:	b410      	push	{r4}
 801ae58:	6093      	str	r3, [r2, #8]
 801ae5a:	da08      	bge.n	801ae6e <__sfputc_r+0x1e>
 801ae5c:	6994      	ldr	r4, [r2, #24]
 801ae5e:	42a3      	cmp	r3, r4
 801ae60:	db01      	blt.n	801ae66 <__sfputc_r+0x16>
 801ae62:	290a      	cmp	r1, #10
 801ae64:	d103      	bne.n	801ae6e <__sfputc_r+0x1e>
 801ae66:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ae6a:	f000 baf1 	b.w	801b450 <__swbuf_r>
 801ae6e:	6813      	ldr	r3, [r2, #0]
 801ae70:	1c58      	adds	r0, r3, #1
 801ae72:	6010      	str	r0, [r2, #0]
 801ae74:	7019      	strb	r1, [r3, #0]
 801ae76:	4608      	mov	r0, r1
 801ae78:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ae7c:	4770      	bx	lr

0801ae7e <__sfputs_r>:
 801ae7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ae80:	4606      	mov	r6, r0
 801ae82:	460f      	mov	r7, r1
 801ae84:	4614      	mov	r4, r2
 801ae86:	18d5      	adds	r5, r2, r3
 801ae88:	42ac      	cmp	r4, r5
 801ae8a:	d101      	bne.n	801ae90 <__sfputs_r+0x12>
 801ae8c:	2000      	movs	r0, #0
 801ae8e:	e007      	b.n	801aea0 <__sfputs_r+0x22>
 801ae90:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ae94:	463a      	mov	r2, r7
 801ae96:	4630      	mov	r0, r6
 801ae98:	f7ff ffda 	bl	801ae50 <__sfputc_r>
 801ae9c:	1c43      	adds	r3, r0, #1
 801ae9e:	d1f3      	bne.n	801ae88 <__sfputs_r+0xa>
 801aea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801aea4 <_vfiprintf_r>:
 801aea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aea8:	460d      	mov	r5, r1
 801aeaa:	b09d      	sub	sp, #116	; 0x74
 801aeac:	4614      	mov	r4, r2
 801aeae:	4698      	mov	r8, r3
 801aeb0:	4606      	mov	r6, r0
 801aeb2:	b118      	cbz	r0, 801aebc <_vfiprintf_r+0x18>
 801aeb4:	6983      	ldr	r3, [r0, #24]
 801aeb6:	b90b      	cbnz	r3, 801aebc <_vfiprintf_r+0x18>
 801aeb8:	f7ff fa54 	bl	801a364 <__sinit>
 801aebc:	4b89      	ldr	r3, [pc, #548]	; (801b0e4 <_vfiprintf_r+0x240>)
 801aebe:	429d      	cmp	r5, r3
 801aec0:	d11b      	bne.n	801aefa <_vfiprintf_r+0x56>
 801aec2:	6875      	ldr	r5, [r6, #4]
 801aec4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801aec6:	07d9      	lsls	r1, r3, #31
 801aec8:	d405      	bmi.n	801aed6 <_vfiprintf_r+0x32>
 801aeca:	89ab      	ldrh	r3, [r5, #12]
 801aecc:	059a      	lsls	r2, r3, #22
 801aece:	d402      	bmi.n	801aed6 <_vfiprintf_r+0x32>
 801aed0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801aed2:	f7e8 fba1 	bl	8003618 <__retarget_lock_acquire_recursive>
 801aed6:	89ab      	ldrh	r3, [r5, #12]
 801aed8:	071b      	lsls	r3, r3, #28
 801aeda:	d501      	bpl.n	801aee0 <_vfiprintf_r+0x3c>
 801aedc:	692b      	ldr	r3, [r5, #16]
 801aede:	b9eb      	cbnz	r3, 801af1c <_vfiprintf_r+0x78>
 801aee0:	4629      	mov	r1, r5
 801aee2:	4630      	mov	r0, r6
 801aee4:	f000 fb06 	bl	801b4f4 <__swsetup_r>
 801aee8:	b1c0      	cbz	r0, 801af1c <_vfiprintf_r+0x78>
 801aeea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801aeec:	07dc      	lsls	r4, r3, #31
 801aeee:	d50e      	bpl.n	801af0e <_vfiprintf_r+0x6a>
 801aef0:	f04f 30ff 	mov.w	r0, #4294967295
 801aef4:	b01d      	add	sp, #116	; 0x74
 801aef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aefa:	4b7b      	ldr	r3, [pc, #492]	; (801b0e8 <_vfiprintf_r+0x244>)
 801aefc:	429d      	cmp	r5, r3
 801aefe:	d101      	bne.n	801af04 <_vfiprintf_r+0x60>
 801af00:	68b5      	ldr	r5, [r6, #8]
 801af02:	e7df      	b.n	801aec4 <_vfiprintf_r+0x20>
 801af04:	4b79      	ldr	r3, [pc, #484]	; (801b0ec <_vfiprintf_r+0x248>)
 801af06:	429d      	cmp	r5, r3
 801af08:	bf08      	it	eq
 801af0a:	68f5      	ldreq	r5, [r6, #12]
 801af0c:	e7da      	b.n	801aec4 <_vfiprintf_r+0x20>
 801af0e:	89ab      	ldrh	r3, [r5, #12]
 801af10:	0598      	lsls	r0, r3, #22
 801af12:	d4ed      	bmi.n	801aef0 <_vfiprintf_r+0x4c>
 801af14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801af16:	f7e8 fb93 	bl	8003640 <__retarget_lock_release_recursive>
 801af1a:	e7e9      	b.n	801aef0 <_vfiprintf_r+0x4c>
 801af1c:	2300      	movs	r3, #0
 801af1e:	9309      	str	r3, [sp, #36]	; 0x24
 801af20:	2320      	movs	r3, #32
 801af22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801af26:	f8cd 800c 	str.w	r8, [sp, #12]
 801af2a:	2330      	movs	r3, #48	; 0x30
 801af2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801b0f0 <_vfiprintf_r+0x24c>
 801af30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801af34:	f04f 0901 	mov.w	r9, #1
 801af38:	4623      	mov	r3, r4
 801af3a:	469a      	mov	sl, r3
 801af3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 801af40:	b10a      	cbz	r2, 801af46 <_vfiprintf_r+0xa2>
 801af42:	2a25      	cmp	r2, #37	; 0x25
 801af44:	d1f9      	bne.n	801af3a <_vfiprintf_r+0x96>
 801af46:	ebba 0b04 	subs.w	fp, sl, r4
 801af4a:	d00b      	beq.n	801af64 <_vfiprintf_r+0xc0>
 801af4c:	465b      	mov	r3, fp
 801af4e:	4622      	mov	r2, r4
 801af50:	4629      	mov	r1, r5
 801af52:	4630      	mov	r0, r6
 801af54:	f7ff ff93 	bl	801ae7e <__sfputs_r>
 801af58:	3001      	adds	r0, #1
 801af5a:	f000 80aa 	beq.w	801b0b2 <_vfiprintf_r+0x20e>
 801af5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801af60:	445a      	add	r2, fp
 801af62:	9209      	str	r2, [sp, #36]	; 0x24
 801af64:	f89a 3000 	ldrb.w	r3, [sl]
 801af68:	2b00      	cmp	r3, #0
 801af6a:	f000 80a2 	beq.w	801b0b2 <_vfiprintf_r+0x20e>
 801af6e:	2300      	movs	r3, #0
 801af70:	f04f 32ff 	mov.w	r2, #4294967295
 801af74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801af78:	f10a 0a01 	add.w	sl, sl, #1
 801af7c:	9304      	str	r3, [sp, #16]
 801af7e:	9307      	str	r3, [sp, #28]
 801af80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801af84:	931a      	str	r3, [sp, #104]	; 0x68
 801af86:	4654      	mov	r4, sl
 801af88:	2205      	movs	r2, #5
 801af8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801af8e:	4858      	ldr	r0, [pc, #352]	; (801b0f0 <_vfiprintf_r+0x24c>)
 801af90:	f7e5 f91e 	bl	80001d0 <memchr>
 801af94:	9a04      	ldr	r2, [sp, #16]
 801af96:	b9d8      	cbnz	r0, 801afd0 <_vfiprintf_r+0x12c>
 801af98:	06d1      	lsls	r1, r2, #27
 801af9a:	bf44      	itt	mi
 801af9c:	2320      	movmi	r3, #32
 801af9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801afa2:	0713      	lsls	r3, r2, #28
 801afa4:	bf44      	itt	mi
 801afa6:	232b      	movmi	r3, #43	; 0x2b
 801afa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801afac:	f89a 3000 	ldrb.w	r3, [sl]
 801afb0:	2b2a      	cmp	r3, #42	; 0x2a
 801afb2:	d015      	beq.n	801afe0 <_vfiprintf_r+0x13c>
 801afb4:	9a07      	ldr	r2, [sp, #28]
 801afb6:	4654      	mov	r4, sl
 801afb8:	2000      	movs	r0, #0
 801afba:	f04f 0c0a 	mov.w	ip, #10
 801afbe:	4621      	mov	r1, r4
 801afc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 801afc4:	3b30      	subs	r3, #48	; 0x30
 801afc6:	2b09      	cmp	r3, #9
 801afc8:	d94e      	bls.n	801b068 <_vfiprintf_r+0x1c4>
 801afca:	b1b0      	cbz	r0, 801affa <_vfiprintf_r+0x156>
 801afcc:	9207      	str	r2, [sp, #28]
 801afce:	e014      	b.n	801affa <_vfiprintf_r+0x156>
 801afd0:	eba0 0308 	sub.w	r3, r0, r8
 801afd4:	fa09 f303 	lsl.w	r3, r9, r3
 801afd8:	4313      	orrs	r3, r2
 801afda:	9304      	str	r3, [sp, #16]
 801afdc:	46a2      	mov	sl, r4
 801afde:	e7d2      	b.n	801af86 <_vfiprintf_r+0xe2>
 801afe0:	9b03      	ldr	r3, [sp, #12]
 801afe2:	1d19      	adds	r1, r3, #4
 801afe4:	681b      	ldr	r3, [r3, #0]
 801afe6:	9103      	str	r1, [sp, #12]
 801afe8:	2b00      	cmp	r3, #0
 801afea:	bfbb      	ittet	lt
 801afec:	425b      	neglt	r3, r3
 801afee:	f042 0202 	orrlt.w	r2, r2, #2
 801aff2:	9307      	strge	r3, [sp, #28]
 801aff4:	9307      	strlt	r3, [sp, #28]
 801aff6:	bfb8      	it	lt
 801aff8:	9204      	strlt	r2, [sp, #16]
 801affa:	7823      	ldrb	r3, [r4, #0]
 801affc:	2b2e      	cmp	r3, #46	; 0x2e
 801affe:	d10c      	bne.n	801b01a <_vfiprintf_r+0x176>
 801b000:	7863      	ldrb	r3, [r4, #1]
 801b002:	2b2a      	cmp	r3, #42	; 0x2a
 801b004:	d135      	bne.n	801b072 <_vfiprintf_r+0x1ce>
 801b006:	9b03      	ldr	r3, [sp, #12]
 801b008:	1d1a      	adds	r2, r3, #4
 801b00a:	681b      	ldr	r3, [r3, #0]
 801b00c:	9203      	str	r2, [sp, #12]
 801b00e:	2b00      	cmp	r3, #0
 801b010:	bfb8      	it	lt
 801b012:	f04f 33ff 	movlt.w	r3, #4294967295
 801b016:	3402      	adds	r4, #2
 801b018:	9305      	str	r3, [sp, #20]
 801b01a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801b100 <_vfiprintf_r+0x25c>
 801b01e:	7821      	ldrb	r1, [r4, #0]
 801b020:	2203      	movs	r2, #3
 801b022:	4650      	mov	r0, sl
 801b024:	f7e5 f8d4 	bl	80001d0 <memchr>
 801b028:	b140      	cbz	r0, 801b03c <_vfiprintf_r+0x198>
 801b02a:	2340      	movs	r3, #64	; 0x40
 801b02c:	eba0 000a 	sub.w	r0, r0, sl
 801b030:	fa03 f000 	lsl.w	r0, r3, r0
 801b034:	9b04      	ldr	r3, [sp, #16]
 801b036:	4303      	orrs	r3, r0
 801b038:	3401      	adds	r4, #1
 801b03a:	9304      	str	r3, [sp, #16]
 801b03c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b040:	482c      	ldr	r0, [pc, #176]	; (801b0f4 <_vfiprintf_r+0x250>)
 801b042:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b046:	2206      	movs	r2, #6
 801b048:	f7e5 f8c2 	bl	80001d0 <memchr>
 801b04c:	2800      	cmp	r0, #0
 801b04e:	d03f      	beq.n	801b0d0 <_vfiprintf_r+0x22c>
 801b050:	4b29      	ldr	r3, [pc, #164]	; (801b0f8 <_vfiprintf_r+0x254>)
 801b052:	bb1b      	cbnz	r3, 801b09c <_vfiprintf_r+0x1f8>
 801b054:	9b03      	ldr	r3, [sp, #12]
 801b056:	3307      	adds	r3, #7
 801b058:	f023 0307 	bic.w	r3, r3, #7
 801b05c:	3308      	adds	r3, #8
 801b05e:	9303      	str	r3, [sp, #12]
 801b060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b062:	443b      	add	r3, r7
 801b064:	9309      	str	r3, [sp, #36]	; 0x24
 801b066:	e767      	b.n	801af38 <_vfiprintf_r+0x94>
 801b068:	fb0c 3202 	mla	r2, ip, r2, r3
 801b06c:	460c      	mov	r4, r1
 801b06e:	2001      	movs	r0, #1
 801b070:	e7a5      	b.n	801afbe <_vfiprintf_r+0x11a>
 801b072:	2300      	movs	r3, #0
 801b074:	3401      	adds	r4, #1
 801b076:	9305      	str	r3, [sp, #20]
 801b078:	4619      	mov	r1, r3
 801b07a:	f04f 0c0a 	mov.w	ip, #10
 801b07e:	4620      	mov	r0, r4
 801b080:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b084:	3a30      	subs	r2, #48	; 0x30
 801b086:	2a09      	cmp	r2, #9
 801b088:	d903      	bls.n	801b092 <_vfiprintf_r+0x1ee>
 801b08a:	2b00      	cmp	r3, #0
 801b08c:	d0c5      	beq.n	801b01a <_vfiprintf_r+0x176>
 801b08e:	9105      	str	r1, [sp, #20]
 801b090:	e7c3      	b.n	801b01a <_vfiprintf_r+0x176>
 801b092:	fb0c 2101 	mla	r1, ip, r1, r2
 801b096:	4604      	mov	r4, r0
 801b098:	2301      	movs	r3, #1
 801b09a:	e7f0      	b.n	801b07e <_vfiprintf_r+0x1da>
 801b09c:	ab03      	add	r3, sp, #12
 801b09e:	9300      	str	r3, [sp, #0]
 801b0a0:	462a      	mov	r2, r5
 801b0a2:	4b16      	ldr	r3, [pc, #88]	; (801b0fc <_vfiprintf_r+0x258>)
 801b0a4:	a904      	add	r1, sp, #16
 801b0a6:	4630      	mov	r0, r6
 801b0a8:	f3af 8000 	nop.w
 801b0ac:	4607      	mov	r7, r0
 801b0ae:	1c78      	adds	r0, r7, #1
 801b0b0:	d1d6      	bne.n	801b060 <_vfiprintf_r+0x1bc>
 801b0b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b0b4:	07d9      	lsls	r1, r3, #31
 801b0b6:	d405      	bmi.n	801b0c4 <_vfiprintf_r+0x220>
 801b0b8:	89ab      	ldrh	r3, [r5, #12]
 801b0ba:	059a      	lsls	r2, r3, #22
 801b0bc:	d402      	bmi.n	801b0c4 <_vfiprintf_r+0x220>
 801b0be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b0c0:	f7e8 fabe 	bl	8003640 <__retarget_lock_release_recursive>
 801b0c4:	89ab      	ldrh	r3, [r5, #12]
 801b0c6:	065b      	lsls	r3, r3, #25
 801b0c8:	f53f af12 	bmi.w	801aef0 <_vfiprintf_r+0x4c>
 801b0cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b0ce:	e711      	b.n	801aef4 <_vfiprintf_r+0x50>
 801b0d0:	ab03      	add	r3, sp, #12
 801b0d2:	9300      	str	r3, [sp, #0]
 801b0d4:	462a      	mov	r2, r5
 801b0d6:	4b09      	ldr	r3, [pc, #36]	; (801b0fc <_vfiprintf_r+0x258>)
 801b0d8:	a904      	add	r1, sp, #16
 801b0da:	4630      	mov	r0, r6
 801b0dc:	f000 f880 	bl	801b1e0 <_printf_i>
 801b0e0:	e7e4      	b.n	801b0ac <_vfiprintf_r+0x208>
 801b0e2:	bf00      	nop
 801b0e4:	0801ef74 	.word	0x0801ef74
 801b0e8:	0801ef94 	.word	0x0801ef94
 801b0ec:	0801ef54 	.word	0x0801ef54
 801b0f0:	0801f06a 	.word	0x0801f06a
 801b0f4:	0801f074 	.word	0x0801f074
 801b0f8:	00000000 	.word	0x00000000
 801b0fc:	0801ae7f 	.word	0x0801ae7f
 801b100:	0801f070 	.word	0x0801f070

0801b104 <_printf_common>:
 801b104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b108:	4616      	mov	r6, r2
 801b10a:	4699      	mov	r9, r3
 801b10c:	688a      	ldr	r2, [r1, #8]
 801b10e:	690b      	ldr	r3, [r1, #16]
 801b110:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b114:	4293      	cmp	r3, r2
 801b116:	bfb8      	it	lt
 801b118:	4613      	movlt	r3, r2
 801b11a:	6033      	str	r3, [r6, #0]
 801b11c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b120:	4607      	mov	r7, r0
 801b122:	460c      	mov	r4, r1
 801b124:	b10a      	cbz	r2, 801b12a <_printf_common+0x26>
 801b126:	3301      	adds	r3, #1
 801b128:	6033      	str	r3, [r6, #0]
 801b12a:	6823      	ldr	r3, [r4, #0]
 801b12c:	0699      	lsls	r1, r3, #26
 801b12e:	bf42      	ittt	mi
 801b130:	6833      	ldrmi	r3, [r6, #0]
 801b132:	3302      	addmi	r3, #2
 801b134:	6033      	strmi	r3, [r6, #0]
 801b136:	6825      	ldr	r5, [r4, #0]
 801b138:	f015 0506 	ands.w	r5, r5, #6
 801b13c:	d106      	bne.n	801b14c <_printf_common+0x48>
 801b13e:	f104 0a19 	add.w	sl, r4, #25
 801b142:	68e3      	ldr	r3, [r4, #12]
 801b144:	6832      	ldr	r2, [r6, #0]
 801b146:	1a9b      	subs	r3, r3, r2
 801b148:	42ab      	cmp	r3, r5
 801b14a:	dc26      	bgt.n	801b19a <_printf_common+0x96>
 801b14c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b150:	1e13      	subs	r3, r2, #0
 801b152:	6822      	ldr	r2, [r4, #0]
 801b154:	bf18      	it	ne
 801b156:	2301      	movne	r3, #1
 801b158:	0692      	lsls	r2, r2, #26
 801b15a:	d42b      	bmi.n	801b1b4 <_printf_common+0xb0>
 801b15c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b160:	4649      	mov	r1, r9
 801b162:	4638      	mov	r0, r7
 801b164:	47c0      	blx	r8
 801b166:	3001      	adds	r0, #1
 801b168:	d01e      	beq.n	801b1a8 <_printf_common+0xa4>
 801b16a:	6823      	ldr	r3, [r4, #0]
 801b16c:	68e5      	ldr	r5, [r4, #12]
 801b16e:	6832      	ldr	r2, [r6, #0]
 801b170:	f003 0306 	and.w	r3, r3, #6
 801b174:	2b04      	cmp	r3, #4
 801b176:	bf08      	it	eq
 801b178:	1aad      	subeq	r5, r5, r2
 801b17a:	68a3      	ldr	r3, [r4, #8]
 801b17c:	6922      	ldr	r2, [r4, #16]
 801b17e:	bf0c      	ite	eq
 801b180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b184:	2500      	movne	r5, #0
 801b186:	4293      	cmp	r3, r2
 801b188:	bfc4      	itt	gt
 801b18a:	1a9b      	subgt	r3, r3, r2
 801b18c:	18ed      	addgt	r5, r5, r3
 801b18e:	2600      	movs	r6, #0
 801b190:	341a      	adds	r4, #26
 801b192:	42b5      	cmp	r5, r6
 801b194:	d11a      	bne.n	801b1cc <_printf_common+0xc8>
 801b196:	2000      	movs	r0, #0
 801b198:	e008      	b.n	801b1ac <_printf_common+0xa8>
 801b19a:	2301      	movs	r3, #1
 801b19c:	4652      	mov	r2, sl
 801b19e:	4649      	mov	r1, r9
 801b1a0:	4638      	mov	r0, r7
 801b1a2:	47c0      	blx	r8
 801b1a4:	3001      	adds	r0, #1
 801b1a6:	d103      	bne.n	801b1b0 <_printf_common+0xac>
 801b1a8:	f04f 30ff 	mov.w	r0, #4294967295
 801b1ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b1b0:	3501      	adds	r5, #1
 801b1b2:	e7c6      	b.n	801b142 <_printf_common+0x3e>
 801b1b4:	18e1      	adds	r1, r4, r3
 801b1b6:	1c5a      	adds	r2, r3, #1
 801b1b8:	2030      	movs	r0, #48	; 0x30
 801b1ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b1be:	4422      	add	r2, r4
 801b1c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b1c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b1c8:	3302      	adds	r3, #2
 801b1ca:	e7c7      	b.n	801b15c <_printf_common+0x58>
 801b1cc:	2301      	movs	r3, #1
 801b1ce:	4622      	mov	r2, r4
 801b1d0:	4649      	mov	r1, r9
 801b1d2:	4638      	mov	r0, r7
 801b1d4:	47c0      	blx	r8
 801b1d6:	3001      	adds	r0, #1
 801b1d8:	d0e6      	beq.n	801b1a8 <_printf_common+0xa4>
 801b1da:	3601      	adds	r6, #1
 801b1dc:	e7d9      	b.n	801b192 <_printf_common+0x8e>
	...

0801b1e0 <_printf_i>:
 801b1e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b1e4:	460c      	mov	r4, r1
 801b1e6:	4691      	mov	r9, r2
 801b1e8:	7e27      	ldrb	r7, [r4, #24]
 801b1ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b1ec:	2f78      	cmp	r7, #120	; 0x78
 801b1ee:	4680      	mov	r8, r0
 801b1f0:	469a      	mov	sl, r3
 801b1f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b1f6:	d807      	bhi.n	801b208 <_printf_i+0x28>
 801b1f8:	2f62      	cmp	r7, #98	; 0x62
 801b1fa:	d80a      	bhi.n	801b212 <_printf_i+0x32>
 801b1fc:	2f00      	cmp	r7, #0
 801b1fe:	f000 80d8 	beq.w	801b3b2 <_printf_i+0x1d2>
 801b202:	2f58      	cmp	r7, #88	; 0x58
 801b204:	f000 80a3 	beq.w	801b34e <_printf_i+0x16e>
 801b208:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b20c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b210:	e03a      	b.n	801b288 <_printf_i+0xa8>
 801b212:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b216:	2b15      	cmp	r3, #21
 801b218:	d8f6      	bhi.n	801b208 <_printf_i+0x28>
 801b21a:	a001      	add	r0, pc, #4	; (adr r0, 801b220 <_printf_i+0x40>)
 801b21c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801b220:	0801b279 	.word	0x0801b279
 801b224:	0801b28d 	.word	0x0801b28d
 801b228:	0801b209 	.word	0x0801b209
 801b22c:	0801b209 	.word	0x0801b209
 801b230:	0801b209 	.word	0x0801b209
 801b234:	0801b209 	.word	0x0801b209
 801b238:	0801b28d 	.word	0x0801b28d
 801b23c:	0801b209 	.word	0x0801b209
 801b240:	0801b209 	.word	0x0801b209
 801b244:	0801b209 	.word	0x0801b209
 801b248:	0801b209 	.word	0x0801b209
 801b24c:	0801b399 	.word	0x0801b399
 801b250:	0801b2bd 	.word	0x0801b2bd
 801b254:	0801b37b 	.word	0x0801b37b
 801b258:	0801b209 	.word	0x0801b209
 801b25c:	0801b209 	.word	0x0801b209
 801b260:	0801b3bb 	.word	0x0801b3bb
 801b264:	0801b209 	.word	0x0801b209
 801b268:	0801b2bd 	.word	0x0801b2bd
 801b26c:	0801b209 	.word	0x0801b209
 801b270:	0801b209 	.word	0x0801b209
 801b274:	0801b383 	.word	0x0801b383
 801b278:	680b      	ldr	r3, [r1, #0]
 801b27a:	1d1a      	adds	r2, r3, #4
 801b27c:	681b      	ldr	r3, [r3, #0]
 801b27e:	600a      	str	r2, [r1, #0]
 801b280:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b284:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b288:	2301      	movs	r3, #1
 801b28a:	e0a3      	b.n	801b3d4 <_printf_i+0x1f4>
 801b28c:	6825      	ldr	r5, [r4, #0]
 801b28e:	6808      	ldr	r0, [r1, #0]
 801b290:	062e      	lsls	r6, r5, #24
 801b292:	f100 0304 	add.w	r3, r0, #4
 801b296:	d50a      	bpl.n	801b2ae <_printf_i+0xce>
 801b298:	6805      	ldr	r5, [r0, #0]
 801b29a:	600b      	str	r3, [r1, #0]
 801b29c:	2d00      	cmp	r5, #0
 801b29e:	da03      	bge.n	801b2a8 <_printf_i+0xc8>
 801b2a0:	232d      	movs	r3, #45	; 0x2d
 801b2a2:	426d      	negs	r5, r5
 801b2a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b2a8:	485e      	ldr	r0, [pc, #376]	; (801b424 <_printf_i+0x244>)
 801b2aa:	230a      	movs	r3, #10
 801b2ac:	e019      	b.n	801b2e2 <_printf_i+0x102>
 801b2ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 801b2b2:	6805      	ldr	r5, [r0, #0]
 801b2b4:	600b      	str	r3, [r1, #0]
 801b2b6:	bf18      	it	ne
 801b2b8:	b22d      	sxthne	r5, r5
 801b2ba:	e7ef      	b.n	801b29c <_printf_i+0xbc>
 801b2bc:	680b      	ldr	r3, [r1, #0]
 801b2be:	6825      	ldr	r5, [r4, #0]
 801b2c0:	1d18      	adds	r0, r3, #4
 801b2c2:	6008      	str	r0, [r1, #0]
 801b2c4:	0628      	lsls	r0, r5, #24
 801b2c6:	d501      	bpl.n	801b2cc <_printf_i+0xec>
 801b2c8:	681d      	ldr	r5, [r3, #0]
 801b2ca:	e002      	b.n	801b2d2 <_printf_i+0xf2>
 801b2cc:	0669      	lsls	r1, r5, #25
 801b2ce:	d5fb      	bpl.n	801b2c8 <_printf_i+0xe8>
 801b2d0:	881d      	ldrh	r5, [r3, #0]
 801b2d2:	4854      	ldr	r0, [pc, #336]	; (801b424 <_printf_i+0x244>)
 801b2d4:	2f6f      	cmp	r7, #111	; 0x6f
 801b2d6:	bf0c      	ite	eq
 801b2d8:	2308      	moveq	r3, #8
 801b2da:	230a      	movne	r3, #10
 801b2dc:	2100      	movs	r1, #0
 801b2de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b2e2:	6866      	ldr	r6, [r4, #4]
 801b2e4:	60a6      	str	r6, [r4, #8]
 801b2e6:	2e00      	cmp	r6, #0
 801b2e8:	bfa2      	ittt	ge
 801b2ea:	6821      	ldrge	r1, [r4, #0]
 801b2ec:	f021 0104 	bicge.w	r1, r1, #4
 801b2f0:	6021      	strge	r1, [r4, #0]
 801b2f2:	b90d      	cbnz	r5, 801b2f8 <_printf_i+0x118>
 801b2f4:	2e00      	cmp	r6, #0
 801b2f6:	d04d      	beq.n	801b394 <_printf_i+0x1b4>
 801b2f8:	4616      	mov	r6, r2
 801b2fa:	fbb5 f1f3 	udiv	r1, r5, r3
 801b2fe:	fb03 5711 	mls	r7, r3, r1, r5
 801b302:	5dc7      	ldrb	r7, [r0, r7]
 801b304:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b308:	462f      	mov	r7, r5
 801b30a:	42bb      	cmp	r3, r7
 801b30c:	460d      	mov	r5, r1
 801b30e:	d9f4      	bls.n	801b2fa <_printf_i+0x11a>
 801b310:	2b08      	cmp	r3, #8
 801b312:	d10b      	bne.n	801b32c <_printf_i+0x14c>
 801b314:	6823      	ldr	r3, [r4, #0]
 801b316:	07df      	lsls	r7, r3, #31
 801b318:	d508      	bpl.n	801b32c <_printf_i+0x14c>
 801b31a:	6923      	ldr	r3, [r4, #16]
 801b31c:	6861      	ldr	r1, [r4, #4]
 801b31e:	4299      	cmp	r1, r3
 801b320:	bfde      	ittt	le
 801b322:	2330      	movle	r3, #48	; 0x30
 801b324:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b328:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b32c:	1b92      	subs	r2, r2, r6
 801b32e:	6122      	str	r2, [r4, #16]
 801b330:	f8cd a000 	str.w	sl, [sp]
 801b334:	464b      	mov	r3, r9
 801b336:	aa03      	add	r2, sp, #12
 801b338:	4621      	mov	r1, r4
 801b33a:	4640      	mov	r0, r8
 801b33c:	f7ff fee2 	bl	801b104 <_printf_common>
 801b340:	3001      	adds	r0, #1
 801b342:	d14c      	bne.n	801b3de <_printf_i+0x1fe>
 801b344:	f04f 30ff 	mov.w	r0, #4294967295
 801b348:	b004      	add	sp, #16
 801b34a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b34e:	4835      	ldr	r0, [pc, #212]	; (801b424 <_printf_i+0x244>)
 801b350:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b354:	6823      	ldr	r3, [r4, #0]
 801b356:	680e      	ldr	r6, [r1, #0]
 801b358:	061f      	lsls	r7, r3, #24
 801b35a:	f856 5b04 	ldr.w	r5, [r6], #4
 801b35e:	600e      	str	r6, [r1, #0]
 801b360:	d514      	bpl.n	801b38c <_printf_i+0x1ac>
 801b362:	07d9      	lsls	r1, r3, #31
 801b364:	bf44      	itt	mi
 801b366:	f043 0320 	orrmi.w	r3, r3, #32
 801b36a:	6023      	strmi	r3, [r4, #0]
 801b36c:	b91d      	cbnz	r5, 801b376 <_printf_i+0x196>
 801b36e:	6823      	ldr	r3, [r4, #0]
 801b370:	f023 0320 	bic.w	r3, r3, #32
 801b374:	6023      	str	r3, [r4, #0]
 801b376:	2310      	movs	r3, #16
 801b378:	e7b0      	b.n	801b2dc <_printf_i+0xfc>
 801b37a:	6823      	ldr	r3, [r4, #0]
 801b37c:	f043 0320 	orr.w	r3, r3, #32
 801b380:	6023      	str	r3, [r4, #0]
 801b382:	2378      	movs	r3, #120	; 0x78
 801b384:	4828      	ldr	r0, [pc, #160]	; (801b428 <_printf_i+0x248>)
 801b386:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b38a:	e7e3      	b.n	801b354 <_printf_i+0x174>
 801b38c:	065e      	lsls	r6, r3, #25
 801b38e:	bf48      	it	mi
 801b390:	b2ad      	uxthmi	r5, r5
 801b392:	e7e6      	b.n	801b362 <_printf_i+0x182>
 801b394:	4616      	mov	r6, r2
 801b396:	e7bb      	b.n	801b310 <_printf_i+0x130>
 801b398:	680b      	ldr	r3, [r1, #0]
 801b39a:	6826      	ldr	r6, [r4, #0]
 801b39c:	6960      	ldr	r0, [r4, #20]
 801b39e:	1d1d      	adds	r5, r3, #4
 801b3a0:	600d      	str	r5, [r1, #0]
 801b3a2:	0635      	lsls	r5, r6, #24
 801b3a4:	681b      	ldr	r3, [r3, #0]
 801b3a6:	d501      	bpl.n	801b3ac <_printf_i+0x1cc>
 801b3a8:	6018      	str	r0, [r3, #0]
 801b3aa:	e002      	b.n	801b3b2 <_printf_i+0x1d2>
 801b3ac:	0671      	lsls	r1, r6, #25
 801b3ae:	d5fb      	bpl.n	801b3a8 <_printf_i+0x1c8>
 801b3b0:	8018      	strh	r0, [r3, #0]
 801b3b2:	2300      	movs	r3, #0
 801b3b4:	6123      	str	r3, [r4, #16]
 801b3b6:	4616      	mov	r6, r2
 801b3b8:	e7ba      	b.n	801b330 <_printf_i+0x150>
 801b3ba:	680b      	ldr	r3, [r1, #0]
 801b3bc:	1d1a      	adds	r2, r3, #4
 801b3be:	600a      	str	r2, [r1, #0]
 801b3c0:	681e      	ldr	r6, [r3, #0]
 801b3c2:	6862      	ldr	r2, [r4, #4]
 801b3c4:	2100      	movs	r1, #0
 801b3c6:	4630      	mov	r0, r6
 801b3c8:	f7e4 ff02 	bl	80001d0 <memchr>
 801b3cc:	b108      	cbz	r0, 801b3d2 <_printf_i+0x1f2>
 801b3ce:	1b80      	subs	r0, r0, r6
 801b3d0:	6060      	str	r0, [r4, #4]
 801b3d2:	6863      	ldr	r3, [r4, #4]
 801b3d4:	6123      	str	r3, [r4, #16]
 801b3d6:	2300      	movs	r3, #0
 801b3d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b3dc:	e7a8      	b.n	801b330 <_printf_i+0x150>
 801b3de:	6923      	ldr	r3, [r4, #16]
 801b3e0:	4632      	mov	r2, r6
 801b3e2:	4649      	mov	r1, r9
 801b3e4:	4640      	mov	r0, r8
 801b3e6:	47d0      	blx	sl
 801b3e8:	3001      	adds	r0, #1
 801b3ea:	d0ab      	beq.n	801b344 <_printf_i+0x164>
 801b3ec:	6823      	ldr	r3, [r4, #0]
 801b3ee:	079b      	lsls	r3, r3, #30
 801b3f0:	d413      	bmi.n	801b41a <_printf_i+0x23a>
 801b3f2:	68e0      	ldr	r0, [r4, #12]
 801b3f4:	9b03      	ldr	r3, [sp, #12]
 801b3f6:	4298      	cmp	r0, r3
 801b3f8:	bfb8      	it	lt
 801b3fa:	4618      	movlt	r0, r3
 801b3fc:	e7a4      	b.n	801b348 <_printf_i+0x168>
 801b3fe:	2301      	movs	r3, #1
 801b400:	4632      	mov	r2, r6
 801b402:	4649      	mov	r1, r9
 801b404:	4640      	mov	r0, r8
 801b406:	47d0      	blx	sl
 801b408:	3001      	adds	r0, #1
 801b40a:	d09b      	beq.n	801b344 <_printf_i+0x164>
 801b40c:	3501      	adds	r5, #1
 801b40e:	68e3      	ldr	r3, [r4, #12]
 801b410:	9903      	ldr	r1, [sp, #12]
 801b412:	1a5b      	subs	r3, r3, r1
 801b414:	42ab      	cmp	r3, r5
 801b416:	dcf2      	bgt.n	801b3fe <_printf_i+0x21e>
 801b418:	e7eb      	b.n	801b3f2 <_printf_i+0x212>
 801b41a:	2500      	movs	r5, #0
 801b41c:	f104 0619 	add.w	r6, r4, #25
 801b420:	e7f5      	b.n	801b40e <_printf_i+0x22e>
 801b422:	bf00      	nop
 801b424:	0801f07b 	.word	0x0801f07b
 801b428:	0801f08c 	.word	0x0801f08c

0801b42c <_read_r>:
 801b42c:	b538      	push	{r3, r4, r5, lr}
 801b42e:	4d07      	ldr	r5, [pc, #28]	; (801b44c <_read_r+0x20>)
 801b430:	4604      	mov	r4, r0
 801b432:	4608      	mov	r0, r1
 801b434:	4611      	mov	r1, r2
 801b436:	2200      	movs	r2, #0
 801b438:	602a      	str	r2, [r5, #0]
 801b43a:	461a      	mov	r2, r3
 801b43c:	f7e7 fe18 	bl	8003070 <_read>
 801b440:	1c43      	adds	r3, r0, #1
 801b442:	d102      	bne.n	801b44a <_read_r+0x1e>
 801b444:	682b      	ldr	r3, [r5, #0]
 801b446:	b103      	cbz	r3, 801b44a <_read_r+0x1e>
 801b448:	6023      	str	r3, [r4, #0]
 801b44a:	bd38      	pop	{r3, r4, r5, pc}
 801b44c:	2000dd60 	.word	0x2000dd60

0801b450 <__swbuf_r>:
 801b450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b452:	460e      	mov	r6, r1
 801b454:	4614      	mov	r4, r2
 801b456:	4605      	mov	r5, r0
 801b458:	b118      	cbz	r0, 801b462 <__swbuf_r+0x12>
 801b45a:	6983      	ldr	r3, [r0, #24]
 801b45c:	b90b      	cbnz	r3, 801b462 <__swbuf_r+0x12>
 801b45e:	f7fe ff81 	bl	801a364 <__sinit>
 801b462:	4b21      	ldr	r3, [pc, #132]	; (801b4e8 <__swbuf_r+0x98>)
 801b464:	429c      	cmp	r4, r3
 801b466:	d12b      	bne.n	801b4c0 <__swbuf_r+0x70>
 801b468:	686c      	ldr	r4, [r5, #4]
 801b46a:	69a3      	ldr	r3, [r4, #24]
 801b46c:	60a3      	str	r3, [r4, #8]
 801b46e:	89a3      	ldrh	r3, [r4, #12]
 801b470:	071a      	lsls	r2, r3, #28
 801b472:	d52f      	bpl.n	801b4d4 <__swbuf_r+0x84>
 801b474:	6923      	ldr	r3, [r4, #16]
 801b476:	b36b      	cbz	r3, 801b4d4 <__swbuf_r+0x84>
 801b478:	6923      	ldr	r3, [r4, #16]
 801b47a:	6820      	ldr	r0, [r4, #0]
 801b47c:	1ac0      	subs	r0, r0, r3
 801b47e:	6963      	ldr	r3, [r4, #20]
 801b480:	b2f6      	uxtb	r6, r6
 801b482:	4283      	cmp	r3, r0
 801b484:	4637      	mov	r7, r6
 801b486:	dc04      	bgt.n	801b492 <__swbuf_r+0x42>
 801b488:	4621      	mov	r1, r4
 801b48a:	4628      	mov	r0, r5
 801b48c:	f7ff fb18 	bl	801aac0 <_fflush_r>
 801b490:	bb30      	cbnz	r0, 801b4e0 <__swbuf_r+0x90>
 801b492:	68a3      	ldr	r3, [r4, #8]
 801b494:	3b01      	subs	r3, #1
 801b496:	60a3      	str	r3, [r4, #8]
 801b498:	6823      	ldr	r3, [r4, #0]
 801b49a:	1c5a      	adds	r2, r3, #1
 801b49c:	6022      	str	r2, [r4, #0]
 801b49e:	701e      	strb	r6, [r3, #0]
 801b4a0:	6963      	ldr	r3, [r4, #20]
 801b4a2:	3001      	adds	r0, #1
 801b4a4:	4283      	cmp	r3, r0
 801b4a6:	d004      	beq.n	801b4b2 <__swbuf_r+0x62>
 801b4a8:	89a3      	ldrh	r3, [r4, #12]
 801b4aa:	07db      	lsls	r3, r3, #31
 801b4ac:	d506      	bpl.n	801b4bc <__swbuf_r+0x6c>
 801b4ae:	2e0a      	cmp	r6, #10
 801b4b0:	d104      	bne.n	801b4bc <__swbuf_r+0x6c>
 801b4b2:	4621      	mov	r1, r4
 801b4b4:	4628      	mov	r0, r5
 801b4b6:	f7ff fb03 	bl	801aac0 <_fflush_r>
 801b4ba:	b988      	cbnz	r0, 801b4e0 <__swbuf_r+0x90>
 801b4bc:	4638      	mov	r0, r7
 801b4be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b4c0:	4b0a      	ldr	r3, [pc, #40]	; (801b4ec <__swbuf_r+0x9c>)
 801b4c2:	429c      	cmp	r4, r3
 801b4c4:	d101      	bne.n	801b4ca <__swbuf_r+0x7a>
 801b4c6:	68ac      	ldr	r4, [r5, #8]
 801b4c8:	e7cf      	b.n	801b46a <__swbuf_r+0x1a>
 801b4ca:	4b09      	ldr	r3, [pc, #36]	; (801b4f0 <__swbuf_r+0xa0>)
 801b4cc:	429c      	cmp	r4, r3
 801b4ce:	bf08      	it	eq
 801b4d0:	68ec      	ldreq	r4, [r5, #12]
 801b4d2:	e7ca      	b.n	801b46a <__swbuf_r+0x1a>
 801b4d4:	4621      	mov	r1, r4
 801b4d6:	4628      	mov	r0, r5
 801b4d8:	f000 f80c 	bl	801b4f4 <__swsetup_r>
 801b4dc:	2800      	cmp	r0, #0
 801b4de:	d0cb      	beq.n	801b478 <__swbuf_r+0x28>
 801b4e0:	f04f 37ff 	mov.w	r7, #4294967295
 801b4e4:	e7ea      	b.n	801b4bc <__swbuf_r+0x6c>
 801b4e6:	bf00      	nop
 801b4e8:	0801ef74 	.word	0x0801ef74
 801b4ec:	0801ef94 	.word	0x0801ef94
 801b4f0:	0801ef54 	.word	0x0801ef54

0801b4f4 <__swsetup_r>:
 801b4f4:	4b32      	ldr	r3, [pc, #200]	; (801b5c0 <__swsetup_r+0xcc>)
 801b4f6:	b570      	push	{r4, r5, r6, lr}
 801b4f8:	681d      	ldr	r5, [r3, #0]
 801b4fa:	4606      	mov	r6, r0
 801b4fc:	460c      	mov	r4, r1
 801b4fe:	b125      	cbz	r5, 801b50a <__swsetup_r+0x16>
 801b500:	69ab      	ldr	r3, [r5, #24]
 801b502:	b913      	cbnz	r3, 801b50a <__swsetup_r+0x16>
 801b504:	4628      	mov	r0, r5
 801b506:	f7fe ff2d 	bl	801a364 <__sinit>
 801b50a:	4b2e      	ldr	r3, [pc, #184]	; (801b5c4 <__swsetup_r+0xd0>)
 801b50c:	429c      	cmp	r4, r3
 801b50e:	d10f      	bne.n	801b530 <__swsetup_r+0x3c>
 801b510:	686c      	ldr	r4, [r5, #4]
 801b512:	89a3      	ldrh	r3, [r4, #12]
 801b514:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b518:	0719      	lsls	r1, r3, #28
 801b51a:	d42c      	bmi.n	801b576 <__swsetup_r+0x82>
 801b51c:	06dd      	lsls	r5, r3, #27
 801b51e:	d411      	bmi.n	801b544 <__swsetup_r+0x50>
 801b520:	2309      	movs	r3, #9
 801b522:	6033      	str	r3, [r6, #0]
 801b524:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b528:	81a3      	strh	r3, [r4, #12]
 801b52a:	f04f 30ff 	mov.w	r0, #4294967295
 801b52e:	e03e      	b.n	801b5ae <__swsetup_r+0xba>
 801b530:	4b25      	ldr	r3, [pc, #148]	; (801b5c8 <__swsetup_r+0xd4>)
 801b532:	429c      	cmp	r4, r3
 801b534:	d101      	bne.n	801b53a <__swsetup_r+0x46>
 801b536:	68ac      	ldr	r4, [r5, #8]
 801b538:	e7eb      	b.n	801b512 <__swsetup_r+0x1e>
 801b53a:	4b24      	ldr	r3, [pc, #144]	; (801b5cc <__swsetup_r+0xd8>)
 801b53c:	429c      	cmp	r4, r3
 801b53e:	bf08      	it	eq
 801b540:	68ec      	ldreq	r4, [r5, #12]
 801b542:	e7e6      	b.n	801b512 <__swsetup_r+0x1e>
 801b544:	0758      	lsls	r0, r3, #29
 801b546:	d512      	bpl.n	801b56e <__swsetup_r+0x7a>
 801b548:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b54a:	b141      	cbz	r1, 801b55e <__swsetup_r+0x6a>
 801b54c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b550:	4299      	cmp	r1, r3
 801b552:	d002      	beq.n	801b55a <__swsetup_r+0x66>
 801b554:	4630      	mov	r0, r6
 801b556:	f7ff f80d 	bl	801a574 <_free_r>
 801b55a:	2300      	movs	r3, #0
 801b55c:	6363      	str	r3, [r4, #52]	; 0x34
 801b55e:	89a3      	ldrh	r3, [r4, #12]
 801b560:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b564:	81a3      	strh	r3, [r4, #12]
 801b566:	2300      	movs	r3, #0
 801b568:	6063      	str	r3, [r4, #4]
 801b56a:	6923      	ldr	r3, [r4, #16]
 801b56c:	6023      	str	r3, [r4, #0]
 801b56e:	89a3      	ldrh	r3, [r4, #12]
 801b570:	f043 0308 	orr.w	r3, r3, #8
 801b574:	81a3      	strh	r3, [r4, #12]
 801b576:	6923      	ldr	r3, [r4, #16]
 801b578:	b94b      	cbnz	r3, 801b58e <__swsetup_r+0x9a>
 801b57a:	89a3      	ldrh	r3, [r4, #12]
 801b57c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b580:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b584:	d003      	beq.n	801b58e <__swsetup_r+0x9a>
 801b586:	4621      	mov	r1, r4
 801b588:	4630      	mov	r0, r6
 801b58a:	f000 f84d 	bl	801b628 <__smakebuf_r>
 801b58e:	89a0      	ldrh	r0, [r4, #12]
 801b590:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b594:	f010 0301 	ands.w	r3, r0, #1
 801b598:	d00a      	beq.n	801b5b0 <__swsetup_r+0xbc>
 801b59a:	2300      	movs	r3, #0
 801b59c:	60a3      	str	r3, [r4, #8]
 801b59e:	6963      	ldr	r3, [r4, #20]
 801b5a0:	425b      	negs	r3, r3
 801b5a2:	61a3      	str	r3, [r4, #24]
 801b5a4:	6923      	ldr	r3, [r4, #16]
 801b5a6:	b943      	cbnz	r3, 801b5ba <__swsetup_r+0xc6>
 801b5a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b5ac:	d1ba      	bne.n	801b524 <__swsetup_r+0x30>
 801b5ae:	bd70      	pop	{r4, r5, r6, pc}
 801b5b0:	0781      	lsls	r1, r0, #30
 801b5b2:	bf58      	it	pl
 801b5b4:	6963      	ldrpl	r3, [r4, #20]
 801b5b6:	60a3      	str	r3, [r4, #8]
 801b5b8:	e7f4      	b.n	801b5a4 <__swsetup_r+0xb0>
 801b5ba:	2000      	movs	r0, #0
 801b5bc:	e7f7      	b.n	801b5ae <__swsetup_r+0xba>
 801b5be:	bf00      	nop
 801b5c0:	200000b0 	.word	0x200000b0
 801b5c4:	0801ef74 	.word	0x0801ef74
 801b5c8:	0801ef94 	.word	0x0801ef94
 801b5cc:	0801ef54 	.word	0x0801ef54

0801b5d0 <abort>:
 801b5d0:	b508      	push	{r3, lr}
 801b5d2:	2006      	movs	r0, #6
 801b5d4:	f000 f8b6 	bl	801b744 <raise>
 801b5d8:	2001      	movs	r0, #1
 801b5da:	f7e7 fd3f 	bl	800305c <_exit>

0801b5de <__swhatbuf_r>:
 801b5de:	b570      	push	{r4, r5, r6, lr}
 801b5e0:	460e      	mov	r6, r1
 801b5e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b5e6:	2900      	cmp	r1, #0
 801b5e8:	b096      	sub	sp, #88	; 0x58
 801b5ea:	4614      	mov	r4, r2
 801b5ec:	461d      	mov	r5, r3
 801b5ee:	da07      	bge.n	801b600 <__swhatbuf_r+0x22>
 801b5f0:	2300      	movs	r3, #0
 801b5f2:	602b      	str	r3, [r5, #0]
 801b5f4:	89b3      	ldrh	r3, [r6, #12]
 801b5f6:	061a      	lsls	r2, r3, #24
 801b5f8:	d410      	bmi.n	801b61c <__swhatbuf_r+0x3e>
 801b5fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b5fe:	e00e      	b.n	801b61e <__swhatbuf_r+0x40>
 801b600:	466a      	mov	r2, sp
 801b602:	f000 f8bb 	bl	801b77c <_fstat_r>
 801b606:	2800      	cmp	r0, #0
 801b608:	dbf2      	blt.n	801b5f0 <__swhatbuf_r+0x12>
 801b60a:	9a01      	ldr	r2, [sp, #4]
 801b60c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b610:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b614:	425a      	negs	r2, r3
 801b616:	415a      	adcs	r2, r3
 801b618:	602a      	str	r2, [r5, #0]
 801b61a:	e7ee      	b.n	801b5fa <__swhatbuf_r+0x1c>
 801b61c:	2340      	movs	r3, #64	; 0x40
 801b61e:	2000      	movs	r0, #0
 801b620:	6023      	str	r3, [r4, #0]
 801b622:	b016      	add	sp, #88	; 0x58
 801b624:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b628 <__smakebuf_r>:
 801b628:	898b      	ldrh	r3, [r1, #12]
 801b62a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b62c:	079d      	lsls	r5, r3, #30
 801b62e:	4606      	mov	r6, r0
 801b630:	460c      	mov	r4, r1
 801b632:	d507      	bpl.n	801b644 <__smakebuf_r+0x1c>
 801b634:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b638:	6023      	str	r3, [r4, #0]
 801b63a:	6123      	str	r3, [r4, #16]
 801b63c:	2301      	movs	r3, #1
 801b63e:	6163      	str	r3, [r4, #20]
 801b640:	b002      	add	sp, #8
 801b642:	bd70      	pop	{r4, r5, r6, pc}
 801b644:	ab01      	add	r3, sp, #4
 801b646:	466a      	mov	r2, sp
 801b648:	f7ff ffc9 	bl	801b5de <__swhatbuf_r>
 801b64c:	9900      	ldr	r1, [sp, #0]
 801b64e:	4605      	mov	r5, r0
 801b650:	4630      	mov	r0, r6
 801b652:	f7fe ffdf 	bl	801a614 <_malloc_r>
 801b656:	b948      	cbnz	r0, 801b66c <__smakebuf_r+0x44>
 801b658:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b65c:	059a      	lsls	r2, r3, #22
 801b65e:	d4ef      	bmi.n	801b640 <__smakebuf_r+0x18>
 801b660:	f023 0303 	bic.w	r3, r3, #3
 801b664:	f043 0302 	orr.w	r3, r3, #2
 801b668:	81a3      	strh	r3, [r4, #12]
 801b66a:	e7e3      	b.n	801b634 <__smakebuf_r+0xc>
 801b66c:	4b0d      	ldr	r3, [pc, #52]	; (801b6a4 <__smakebuf_r+0x7c>)
 801b66e:	62b3      	str	r3, [r6, #40]	; 0x28
 801b670:	89a3      	ldrh	r3, [r4, #12]
 801b672:	6020      	str	r0, [r4, #0]
 801b674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b678:	81a3      	strh	r3, [r4, #12]
 801b67a:	9b00      	ldr	r3, [sp, #0]
 801b67c:	6163      	str	r3, [r4, #20]
 801b67e:	9b01      	ldr	r3, [sp, #4]
 801b680:	6120      	str	r0, [r4, #16]
 801b682:	b15b      	cbz	r3, 801b69c <__smakebuf_r+0x74>
 801b684:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b688:	4630      	mov	r0, r6
 801b68a:	f000 f889 	bl	801b7a0 <_isatty_r>
 801b68e:	b128      	cbz	r0, 801b69c <__smakebuf_r+0x74>
 801b690:	89a3      	ldrh	r3, [r4, #12]
 801b692:	f023 0303 	bic.w	r3, r3, #3
 801b696:	f043 0301 	orr.w	r3, r3, #1
 801b69a:	81a3      	strh	r3, [r4, #12]
 801b69c:	89a0      	ldrh	r0, [r4, #12]
 801b69e:	4305      	orrs	r5, r0
 801b6a0:	81a5      	strh	r5, [r4, #12]
 801b6a2:	e7cd      	b.n	801b640 <__smakebuf_r+0x18>
 801b6a4:	0801a2fd 	.word	0x0801a2fd

0801b6a8 <_realloc_r>:
 801b6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b6aa:	4607      	mov	r7, r0
 801b6ac:	4614      	mov	r4, r2
 801b6ae:	460e      	mov	r6, r1
 801b6b0:	b921      	cbnz	r1, 801b6bc <_realloc_r+0x14>
 801b6b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801b6b6:	4611      	mov	r1, r2
 801b6b8:	f7fe bfac 	b.w	801a614 <_malloc_r>
 801b6bc:	b922      	cbnz	r2, 801b6c8 <_realloc_r+0x20>
 801b6be:	f7fe ff59 	bl	801a574 <_free_r>
 801b6c2:	4625      	mov	r5, r4
 801b6c4:	4628      	mov	r0, r5
 801b6c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b6c8:	f000 f87a 	bl	801b7c0 <_malloc_usable_size_r>
 801b6cc:	42a0      	cmp	r0, r4
 801b6ce:	d20f      	bcs.n	801b6f0 <_realloc_r+0x48>
 801b6d0:	4621      	mov	r1, r4
 801b6d2:	4638      	mov	r0, r7
 801b6d4:	f7fe ff9e 	bl	801a614 <_malloc_r>
 801b6d8:	4605      	mov	r5, r0
 801b6da:	2800      	cmp	r0, #0
 801b6dc:	d0f2      	beq.n	801b6c4 <_realloc_r+0x1c>
 801b6de:	4631      	mov	r1, r6
 801b6e0:	4622      	mov	r2, r4
 801b6e2:	f7fe ff17 	bl	801a514 <memcpy>
 801b6e6:	4631      	mov	r1, r6
 801b6e8:	4638      	mov	r0, r7
 801b6ea:	f7fe ff43 	bl	801a574 <_free_r>
 801b6ee:	e7e9      	b.n	801b6c4 <_realloc_r+0x1c>
 801b6f0:	4635      	mov	r5, r6
 801b6f2:	e7e7      	b.n	801b6c4 <_realloc_r+0x1c>

0801b6f4 <_raise_r>:
 801b6f4:	291f      	cmp	r1, #31
 801b6f6:	b538      	push	{r3, r4, r5, lr}
 801b6f8:	4604      	mov	r4, r0
 801b6fa:	460d      	mov	r5, r1
 801b6fc:	d904      	bls.n	801b708 <_raise_r+0x14>
 801b6fe:	2316      	movs	r3, #22
 801b700:	6003      	str	r3, [r0, #0]
 801b702:	f04f 30ff 	mov.w	r0, #4294967295
 801b706:	bd38      	pop	{r3, r4, r5, pc}
 801b708:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801b70a:	b112      	cbz	r2, 801b712 <_raise_r+0x1e>
 801b70c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801b710:	b94b      	cbnz	r3, 801b726 <_raise_r+0x32>
 801b712:	4620      	mov	r0, r4
 801b714:	f000 f830 	bl	801b778 <_getpid_r>
 801b718:	462a      	mov	r2, r5
 801b71a:	4601      	mov	r1, r0
 801b71c:	4620      	mov	r0, r4
 801b71e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b722:	f000 b817 	b.w	801b754 <_kill_r>
 801b726:	2b01      	cmp	r3, #1
 801b728:	d00a      	beq.n	801b740 <_raise_r+0x4c>
 801b72a:	1c59      	adds	r1, r3, #1
 801b72c:	d103      	bne.n	801b736 <_raise_r+0x42>
 801b72e:	2316      	movs	r3, #22
 801b730:	6003      	str	r3, [r0, #0]
 801b732:	2001      	movs	r0, #1
 801b734:	e7e7      	b.n	801b706 <_raise_r+0x12>
 801b736:	2400      	movs	r4, #0
 801b738:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801b73c:	4628      	mov	r0, r5
 801b73e:	4798      	blx	r3
 801b740:	2000      	movs	r0, #0
 801b742:	e7e0      	b.n	801b706 <_raise_r+0x12>

0801b744 <raise>:
 801b744:	4b02      	ldr	r3, [pc, #8]	; (801b750 <raise+0xc>)
 801b746:	4601      	mov	r1, r0
 801b748:	6818      	ldr	r0, [r3, #0]
 801b74a:	f7ff bfd3 	b.w	801b6f4 <_raise_r>
 801b74e:	bf00      	nop
 801b750:	200000b0 	.word	0x200000b0

0801b754 <_kill_r>:
 801b754:	b538      	push	{r3, r4, r5, lr}
 801b756:	4d07      	ldr	r5, [pc, #28]	; (801b774 <_kill_r+0x20>)
 801b758:	2300      	movs	r3, #0
 801b75a:	4604      	mov	r4, r0
 801b75c:	4608      	mov	r0, r1
 801b75e:	4611      	mov	r1, r2
 801b760:	602b      	str	r3, [r5, #0]
 801b762:	f7e7 fc69 	bl	8003038 <_kill>
 801b766:	1c43      	adds	r3, r0, #1
 801b768:	d102      	bne.n	801b770 <_kill_r+0x1c>
 801b76a:	682b      	ldr	r3, [r5, #0]
 801b76c:	b103      	cbz	r3, 801b770 <_kill_r+0x1c>
 801b76e:	6023      	str	r3, [r4, #0]
 801b770:	bd38      	pop	{r3, r4, r5, pc}
 801b772:	bf00      	nop
 801b774:	2000dd60 	.word	0x2000dd60

0801b778 <_getpid_r>:
 801b778:	f7e7 bc56 	b.w	8003028 <_getpid>

0801b77c <_fstat_r>:
 801b77c:	b538      	push	{r3, r4, r5, lr}
 801b77e:	4d07      	ldr	r5, [pc, #28]	; (801b79c <_fstat_r+0x20>)
 801b780:	2300      	movs	r3, #0
 801b782:	4604      	mov	r4, r0
 801b784:	4608      	mov	r0, r1
 801b786:	4611      	mov	r1, r2
 801b788:	602b      	str	r3, [r5, #0]
 801b78a:	f7e7 fcb6 	bl	80030fa <_fstat>
 801b78e:	1c43      	adds	r3, r0, #1
 801b790:	d102      	bne.n	801b798 <_fstat_r+0x1c>
 801b792:	682b      	ldr	r3, [r5, #0]
 801b794:	b103      	cbz	r3, 801b798 <_fstat_r+0x1c>
 801b796:	6023      	str	r3, [r4, #0]
 801b798:	bd38      	pop	{r3, r4, r5, pc}
 801b79a:	bf00      	nop
 801b79c:	2000dd60 	.word	0x2000dd60

0801b7a0 <_isatty_r>:
 801b7a0:	b538      	push	{r3, r4, r5, lr}
 801b7a2:	4d06      	ldr	r5, [pc, #24]	; (801b7bc <_isatty_r+0x1c>)
 801b7a4:	2300      	movs	r3, #0
 801b7a6:	4604      	mov	r4, r0
 801b7a8:	4608      	mov	r0, r1
 801b7aa:	602b      	str	r3, [r5, #0]
 801b7ac:	f7e7 fcb5 	bl	800311a <_isatty>
 801b7b0:	1c43      	adds	r3, r0, #1
 801b7b2:	d102      	bne.n	801b7ba <_isatty_r+0x1a>
 801b7b4:	682b      	ldr	r3, [r5, #0]
 801b7b6:	b103      	cbz	r3, 801b7ba <_isatty_r+0x1a>
 801b7b8:	6023      	str	r3, [r4, #0]
 801b7ba:	bd38      	pop	{r3, r4, r5, pc}
 801b7bc:	2000dd60 	.word	0x2000dd60

0801b7c0 <_malloc_usable_size_r>:
 801b7c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b7c4:	1f18      	subs	r0, r3, #4
 801b7c6:	2b00      	cmp	r3, #0
 801b7c8:	bfbc      	itt	lt
 801b7ca:	580b      	ldrlt	r3, [r1, r0]
 801b7cc:	18c0      	addlt	r0, r0, r3
 801b7ce:	4770      	bx	lr

0801b7d0 <_init>:
 801b7d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b7d2:	bf00      	nop
 801b7d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b7d6:	bc08      	pop	{r3}
 801b7d8:	469e      	mov	lr, r3
 801b7da:	4770      	bx	lr

0801b7dc <_fini>:
 801b7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b7de:	bf00      	nop
 801b7e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b7e2:	bc08      	pop	{r3}
 801b7e4:	469e      	mov	lr, r3
 801b7e6:	4770      	bx	lr
